
MQTT-Crytography.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024e38  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006fdc  08025018  08025018  00035018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802bff4  0802bff4  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  0802bff4  0802bff4  0003bff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802bffc  0802bffc  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0802bffc  0802bffc  0003bffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000014  0802c010  0802c010  0003c010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  0802c024  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d44  2000033c  0802c360  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001080  0802c360  00041080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006dc99  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c7a3  00000000  00000000  000ae005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004688  00000000  00000000  000ba7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004448  00000000  00000000  000bee30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e151  00000000  00000000  000c3278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f060  00000000  00000000  000f13c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115ca6  00000000  00000000  00120429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002360cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00015418  00000000  00000000  00236124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08024ff4 	.word	0x08024ff4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	08024ff4 	.word	0x08024ff4

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f001 f889 	bl	8001c98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a47      	ldr	r2, [pc, #284]	; (8000cd0 <HAL_UART_MspInit+0x13c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b47      	ldr	r3, [pc, #284]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a46      	ldr	r2, [pc, #280]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b44      	ldr	r3, [pc, #272]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b41      	ldr	r3, [pc, #260]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a40      	ldr	r2, [pc, #256]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b3e      	ldr	r3, [pc, #248]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fde6 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e05d      	b.n	8000cc6 <HAL_UART_MspInit+0x132>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_UART_MspInit+0x144>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d158      	bne.n	8000cc6 <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a2e      	ldr	r2, [pc, #184]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	481f      	ldr	r0, [pc, #124]	; (8000cdc <HAL_UART_MspInit+0x148>)
 8000c60:	f000 fdb8 	bl	80017d4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c66:	4a1f      	ldr	r2, [pc, #124]	; (8000ce4 <HAL_UART_MspInit+0x150>)
 8000c68:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c6c:	2218      	movs	r2, #24
 8000c6e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c90:	2220      	movs	r2, #32
 8000c92:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c9a:	4811      	ldr	r0, [pc, #68]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c9c:	f000 fb20 	bl	80012e0 <HAL_DMA_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_UART_MspInit+0x116>
      Error_Handler();
 8000ca6:	f008 fde7 	bl	8009878 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a0c      	ldr	r2, [pc, #48]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000cae:	67da      	str	r2, [r3, #124]	; 0x7c
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2025      	movs	r0, #37	; 0x25
 8000cbc:	f000 fadb 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cc0:	2025      	movs	r0, #37	; 0x25
 8000cc2:	f000 faf2 	bl	80012aa <HAL_NVIC_EnableIRQ>
}
 8000cc6:	bf00      	nop
 8000cc8:	3730      	adds	r7, #48	; 0x30
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40008000 	.word	0x40008000
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40013800 	.word	0x40013800
 8000cdc:	48000800 	.word	0x48000800
 8000ce0:	2000086c 	.word	0x2000086c
 8000ce4:	40020008 	.word	0x40020008

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f9a6 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <DMA1_Channel1_IRQHandler+0x10>)
 8000d42:	f000 fc35 	bl	80015b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000086c 	.word	0x2000086c

08000d50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <USART1_IRQHandler+0x10>)
 8000d56:	f001 ff7f 	bl	8002c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200007dc 	.word	0x200007dc

08000d64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d6c:	f000 fecc 	bl	8001b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d80:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d013      	beq.n	8000db4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d90:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d94:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00b      	beq.n	8000db4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d9c:	e000      	b.n	8000da0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d9e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000da0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f9      	beq.n	8000d9e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000daa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
	return 1;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <_kill>:

int _kill(int pid, int sig)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ddc:	f020 fc0a 	bl	80215f4 <__errno>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2216      	movs	r2, #22
 8000de4:	601a      	str	r2, [r3, #0]
	return -1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <_exit>:

void _exit (int status)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffe7 	bl	8000dd2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e04:	e7fe      	b.n	8000e04 <_exit+0x12>

08000e06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	e00a      	b.n	8000e2e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e18:	f3af 8000 	nop.w
 8000e1c:	4601      	mov	r1, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	60ba      	str	r2, [r7, #8]
 8000e24:	b2ca      	uxtb	r2, r1
 8000e26:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	dbf0      	blt.n	8000e18 <_read+0x12>
	}

return len;
 8000e36:	687b      	ldr	r3, [r7, #4]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	e009      	b.n	8000e66 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1c5a      	adds	r2, r3, #1
 8000e56:	60ba      	str	r2, [r7, #8]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff8a 	bl	8000d74 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	dbf1      	blt.n	8000e52 <_write+0x12>
	}
	return len;
 8000e6e:	687b      	ldr	r3, [r7, #4]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_close>:

int _close(int file)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea0:	605a      	str	r2, [r3, #4]
	return 0;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_isatty>:

int _isatty(int file)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	return 1;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b085      	sub	sp, #20
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
	return 0;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_open>:

int _open(char *path, int flags, ...)
{
 8000ee0:	b40e      	push	{r1, r2, r3}
 8000ee2:	b480      	push	{r7}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	b003      	add	sp, #12
 8000efa:	4770      	bx	lr

08000efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f04:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <_sbrk+0x5c>)
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <_sbrk+0x60>)
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <_sbrk+0x64>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <_sbrk+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d207      	bcs.n	8000f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f2c:	f020 fb62 	bl	80215f4 <__errno>
 8000f30:	4603      	mov	r3, r0
 8000f32:	220c      	movs	r2, #12
 8000f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	e009      	b.n	8000f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <_sbrk+0x64>)
 8000f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20020000 	.word	0x20020000
 8000f5c:	00000400 	.word	0x00000400
 8000f60:	2000035c 	.word	0x2000035c
 8000f64:	20001080 	.word	0x20001080

08000f68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f92:	490e      	ldr	r1, [pc, #56]	; (8000fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <LoopForever+0xe>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa8:	4c0b      	ldr	r4, [pc, #44]	; (8000fd8 <LoopForever+0x16>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fb6:	f7ff ffd7 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fba:	f020 ff39 	bl	8021e30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fbe:	f008 fa6f 	bl	80094a0 <main>

08000fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc2:	e7fe      	b.n	8000fc2 <LoopForever>
  ldr   r0, =_estack
 8000fc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000fd0:	0802c024 	.word	0x0802c024
  ldr r2, =_sbss
 8000fd4:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000fd8:	20001080 	.word	0x20001080

08000fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC1_2_IRQHandler>

08000fde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f939 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 f80e 	bl	8001010 <HAL_InitTick>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	e001      	b.n	8001004 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001000:	f7ff fda4 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001004:	79fb      	ldrb	r3, [r7, #7]

}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HAL_InitTick+0x68>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d022      	beq.n	800106a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_InitTick+0x6c>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <HAL_InitTick+0x68>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001030:	fbb1 f3f3 	udiv	r3, r1, r3
 8001034:	fbb2 f3f3 	udiv	r3, r2, r3
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f944 	bl	80012c6 <HAL_SYSTICK_Config>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10f      	bne.n	8001064 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b0f      	cmp	r3, #15
 8001048:	d809      	bhi.n	800105e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104a:	2200      	movs	r2, #0
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	f04f 30ff 	mov.w	r0, #4294967295
 8001052:	f000 f910 	bl	8001276 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_InitTick+0x70>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	e007      	b.n	800106e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e004      	b.n	800106e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e001      	b.n	800106e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000000c 	.word	0x2000000c
 800107c:	20000004 	.word	0x20000004
 8001080:	20000008 	.word	0x20000008

08001084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x1c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x20>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4413      	add	r3, r2
 8001092:	4a03      	ldr	r2, [pc, #12]	; (80010a0 <HAL_IncTick+0x1c>)
 8001094:	6013      	str	r3, [r2, #0]
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	20001068 	.word	0x20001068
 80010a4:	2000000c 	.word	0x2000000c

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20001068 	.word	0x20001068

080010c0 <__NVIC_SetPriorityGrouping>:
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff29 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff40 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff90 	bl	80011b4 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5f 	bl	8001160 <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff33 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa4 	bl	800121c <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e08d      	b.n	800140e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_DMA_Init+0x138>)
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d80f      	bhi.n	800131e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	4b45      	ldr	r3, [pc, #276]	; (800141c <HAL_DMA_Init+0x13c>)
 8001306:	4413      	add	r3, r2
 8001308:	4a45      	ldr	r2, [pc, #276]	; (8001420 <HAL_DMA_Init+0x140>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	009a      	lsls	r2, r3, #2
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a42      	ldr	r2, [pc, #264]	; (8001424 <HAL_DMA_Init+0x144>)
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
 800131c:	e00e      	b.n	800133c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	4b40      	ldr	r3, [pc, #256]	; (8001428 <HAL_DMA_Init+0x148>)
 8001326:	4413      	add	r3, r2
 8001328:	4a3d      	ldr	r2, [pc, #244]	; (8001420 <HAL_DMA_Init+0x140>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	009a      	lsls	r2, r3, #2
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a3c      	ldr	r2, [pc, #240]	; (800142c <HAL_DMA_Init+0x14c>)
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2202      	movs	r2, #2
 8001340:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001356:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f9be 	bl	8001710 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800139c:	d102      	bne.n	80013a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d010      	beq.n	80013e4 <HAL_DMA_Init+0x104>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d80c      	bhi.n	80013e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f9de 	bl	800178c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	e008      	b.n	80013f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40020407 	.word	0x40020407
 800141c:	bffdfff8 	.word	0xbffdfff8
 8001420:	cccccccd 	.word	0xcccccccd
 8001424:	40020000 	.word	0x40020000
 8001428:	bffdfbf8 	.word	0xbffdfbf8
 800142c:	40020400 	.word	0x40020400

08001430 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d005      	beq.n	8001454 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2204      	movs	r2, #4
 800144c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	e037      	b.n	80014c4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 020e 	bic.w	r2, r2, #14
 8001462:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001472:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	2101      	movs	r1, #1
 8001492:	fa01 f202 	lsl.w	r2, r1, r2
 8001496:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014a0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00c      	beq.n	80014c4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014b8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014c2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d00d      	beq.n	8001516 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2204      	movs	r2, #4
 80014fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	e047      	b.n	80015a6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 020e 	bic.w	r2, r2, #14
 8001524:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0201 	bic.w	r2, r2, #1
 8001534:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001544:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f003 021f 	and.w	r2, r3, #31
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	2101      	movs	r1, #1
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001562:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00c      	beq.n	8001586 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800157a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001584:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
    }
  }
  return status;
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	2204      	movs	r2, #4
 80015d2:	409a      	lsls	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d026      	beq.n	800162a <HAL_DMA_IRQHandler+0x7a>
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d021      	beq.n	800162a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0320 	and.w	r3, r3, #32
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d107      	bne.n	8001604 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0204 	bic.w	r2, r2, #4
 8001602:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	2104      	movs	r1, #4
 8001612:	fa01 f202 	lsl.w	r2, r1, r2
 8001616:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	2b00      	cmp	r3, #0
 800161e:	d071      	beq.n	8001704 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001628:	e06c      	b.n	8001704 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	2202      	movs	r2, #2
 8001634:	409a      	lsls	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4013      	ands	r3, r2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d02e      	beq.n	800169c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d029      	beq.n	800169c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10b      	bne.n	800166e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 020a 	bic.w	r2, r2, #10
 8001664:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f003 021f 	and.w	r2, r3, #31
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	2102      	movs	r1, #2
 800167c:	fa01 f202 	lsl.w	r2, r1, r2
 8001680:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	2b00      	cmp	r3, #0
 8001690:	d038      	beq.n	8001704 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800169a:	e033      	b.n	8001704 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	2208      	movs	r2, #8
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d02a      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d025      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 020e 	bic.w	r2, r2, #14
 80016c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f003 021f 	and.w	r2, r3, #31
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	2101      	movs	r1, #1
 80016d8:	fa01 f202 	lsl.w	r2, r1, r2
 80016dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001704:	bf00      	nop
 8001706:	bf00      	nop
}
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001720:	429a      	cmp	r2, r3
 8001722:	d802      	bhi.n	800172a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e001      	b.n	800172e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800172c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	3b08      	subs	r3, #8
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	009a      	lsls	r2, r3, #2
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4413      	add	r3, r2
 8001750:	461a      	mov	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800175a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 031f 	and.w	r3, r3, #31
 8001762:	2201      	movs	r2, #1
 8001764:	409a      	lsls	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	651a      	str	r2, [r3, #80]	; 0x50
}
 800176a:	bf00      	nop
 800176c:	371c      	adds	r7, #28
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40020407 	.word	0x40020407
 800177c:	40020800 	.word	0x40020800
 8001780:	40020820 	.word	0x40020820
 8001784:	cccccccd 	.word	0xcccccccd
 8001788:	40020880 	.word	0x40020880

0800178c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	461a      	mov	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	2201      	movs	r2, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	1000823f 	.word	0x1000823f
 80017d0:	40020940 	.word	0x40020940

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017e2:	e15a      	b.n	8001a9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2101      	movs	r1, #1
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	4013      	ands	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 814c 	beq.w	8001a94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d00b      	beq.n	800181c <HAL_GPIO_Init+0x48>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d007      	beq.n	800181c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001810:	2b11      	cmp	r3, #17
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b12      	cmp	r3, #18
 800181a:	d130      	bne.n	800187e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001852:	2201      	movs	r2, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	f003 0201 	and.w	r2, r3, #1
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0xea>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d123      	bne.n	8001906 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	08da      	lsrs	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	691a      	ldr	r2, [r3, #16]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	6939      	ldr	r1, [r7, #16]
 8001902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0203 	and.w	r2, r3, #3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80a6 	beq.w	8001a94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001948:	4b5b      	ldr	r3, [pc, #364]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 800194a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194c:	4a5a      	ldr	r2, [pc, #360]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6613      	str	r3, [r2, #96]	; 0x60
 8001954:	4b58      	ldr	r3, [pc, #352]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 8001956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001960:	4a56      	ldr	r2, [pc, #344]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800198a:	d01f      	beq.n	80019cc <HAL_GPIO_Init+0x1f8>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a4c      	ldr	r2, [pc, #304]	; (8001ac0 <HAL_GPIO_Init+0x2ec>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d019      	beq.n	80019c8 <HAL_GPIO_Init+0x1f4>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a4b      	ldr	r2, [pc, #300]	; (8001ac4 <HAL_GPIO_Init+0x2f0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d013      	beq.n	80019c4 <HAL_GPIO_Init+0x1f0>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a4a      	ldr	r2, [pc, #296]	; (8001ac8 <HAL_GPIO_Init+0x2f4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d00d      	beq.n	80019c0 <HAL_GPIO_Init+0x1ec>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a49      	ldr	r2, [pc, #292]	; (8001acc <HAL_GPIO_Init+0x2f8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d007      	beq.n	80019bc <HAL_GPIO_Init+0x1e8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a48      	ldr	r2, [pc, #288]	; (8001ad0 <HAL_GPIO_Init+0x2fc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_GPIO_Init+0x1e4>
 80019b4:	2305      	movs	r3, #5
 80019b6:	e00a      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019b8:	2306      	movs	r3, #6
 80019ba:	e008      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019bc:	2304      	movs	r3, #4
 80019be:	e006      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c0:	2303      	movs	r3, #3
 80019c2:	e004      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e002      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019cc:	2300      	movs	r3, #0
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	f002 0203 	and.w	r2, r2, #3
 80019d4:	0092      	lsls	r2, r2, #2
 80019d6:	4093      	lsls	r3, r2
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019de:	4937      	ldr	r1, [pc, #220]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019ec:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a10:	4a30      	ldr	r2, [pc, #192]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a3a:	4a26      	ldr	r2, [pc, #152]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a40:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a8e:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f47f ae9d 	bne.w	80017e4 <HAL_GPIO_Init+0x10>
  }
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010000 	.word	0x40010000
 8001ac0:	48000400 	.word	0x48000400
 8001ac4:	48000800 	.word	0x48000800
 8001ac8:	48000c00 	.word	0x48000c00
 8001acc:	48001000 	.word	0x48001000
 8001ad0:	48001400 	.word	0x48001400
 8001ad4:	40010400 	.word	0x40010400

08001ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001af4:	e002      	b.n	8001afc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001af6:	887a      	ldrh	r2, [r7, #2]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f806 	bl	8001b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40010400 	.word	0x40010400

08001b38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d141      	bne.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b5e:	4b4b      	ldr	r3, [pc, #300]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6a:	d131      	bne.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b6c:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b72:	4a46      	ldr	r2, [pc, #280]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b7c:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b84:	4a41      	ldr	r2, [pc, #260]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b8c:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2232      	movs	r2, #50	; 0x32
 8001b92:	fb02 f303 	mul.w	r3, r2, r3
 8001b96:	4a3f      	ldr	r2, [pc, #252]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b98:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9c:	0c9b      	lsrs	r3, r3, #18
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba2:	e002      	b.n	8001baa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb6:	d102      	bne.n	8001bbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f2      	bne.n	8001ba4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bca:	d158      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e057      	b.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bd6:	4a2d      	ldr	r2, [pc, #180]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001be0:	e04d      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be8:	d141      	bne.n	8001c6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf6:	d131      	bne.n	8001c5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bfe:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c10:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2232      	movs	r2, #50	; 0x32
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	0c9b      	lsrs	r3, r3, #18
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c2e:	e002      	b.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c42:	d102      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f2      	bne.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c56:	d112      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e011      	b.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c6c:	e007      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	20000004 	.word	0x20000004
 8001c94:	431bde83 	.word	0x431bde83

08001c98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca6:	6093      	str	r3, [r2, #8]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40007000 	.word	0x40007000

08001cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e308      	b.n	80022dc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d075      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	4ba3      	ldr	r3, [pc, #652]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce0:	4ba0      	ldr	r3, [pc, #640]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b0c      	cmp	r3, #12
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3e>
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d002      	beq.n	8001cfc <HAL_RCC_OscConfig+0x44>
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d10b      	bne.n	8001d14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	4b99      	ldr	r3, [pc, #612]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d05b      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x108>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d157      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e2e3      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1c:	d106      	bne.n	8001d2c <HAL_RCC_OscConfig+0x74>
 8001d1e:	4b91      	ldr	r3, [pc, #580]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a90      	ldr	r2, [pc, #576]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e01d      	b.n	8001d68 <HAL_RCC_OscConfig+0xb0>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x98>
 8001d36:	4b8b      	ldr	r3, [pc, #556]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a8a      	ldr	r2, [pc, #552]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b88      	ldr	r3, [pc, #544]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a87      	ldr	r2, [pc, #540]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0xb0>
 8001d50:	4b84      	ldr	r3, [pc, #528]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a83      	ldr	r2, [pc, #524]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b81      	ldr	r3, [pc, #516]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a80      	ldr	r2, [pc, #512]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d013      	beq.n	8001d98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7ff f99a 	bl	80010a8 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff f996 	bl	80010a8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e2a8      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0xc0>
 8001d96:	e014      	b.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff f986 	bl	80010a8 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7ff f982 	bl	80010a8 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e294      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001db2:	4b6c      	ldr	r3, [pc, #432]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0xe8>
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d075      	beq.n	8001eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dce:	4b65      	ldr	r3, [pc, #404]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd8:	4b62      	ldr	r3, [pc, #392]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2b0c      	cmp	r3, #12
 8001de6:	d102      	bne.n	8001dee <HAL_RCC_OscConfig+0x136>
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_OscConfig+0x13c>
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d11f      	bne.n	8001e34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df4:	4b5b      	ldr	r3, [pc, #364]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_OscConfig+0x154>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e267      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0c:	4b55      	ldr	r3, [pc, #340]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	4952      	ldr	r1, [pc, #328]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e20:	4b51      	ldr	r3, [pc, #324]	; (8001f68 <HAL_RCC_OscConfig+0x2b0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f8f3 	bl	8001010 <HAL_InitTick>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d043      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e253      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d023      	beq.n	8001e84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3c:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a48      	ldr	r2, [pc, #288]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7ff f92e 	bl	80010a8 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e50:	f7ff f92a 	bl	80010a8 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e23c      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e62:	4b40      	ldr	r3, [pc, #256]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	061b      	lsls	r3, r3, #24
 8001e7c:	4939      	ldr	r1, [pc, #228]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
 8001e82:	e01a      	b.n	8001eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e84:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a36      	ldr	r2, [pc, #216]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff f90a 	bl	80010a8 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e98:	f7ff f906 	bl	80010a8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e218      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eaa:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x1e0>
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d03c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01c      	beq.n	8001f08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ece:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed4:	4a23      	ldr	r2, [pc, #140]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ede:	f7ff f8e3 	bl	80010a8 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee6:	f7ff f8df 	bl	80010a8 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1f1      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0ef      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x22e>
 8001f06:	e01b      	b.n	8001f40 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0e:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f18:	f7ff f8c6 	bl	80010a8 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f20:	f7ff f8c2 	bl	80010a8 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e1d4      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1ef      	bne.n	8001f20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80ab 	beq.w	80020a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <HAL_RCC_OscConfig+0x2b4>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e005      	b.n	8001f6e <HAL_RCC_OscConfig+0x2b6>
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00d      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4baf      	ldr	r3, [pc, #700]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	4aae      	ldr	r2, [pc, #696]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7e:	4bac      	ldr	r3, [pc, #688]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8e:	4ba9      	ldr	r3, [pc, #676]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f9a:	4ba6      	ldr	r3, [pc, #664]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4aa5      	ldr	r2, [pc, #660]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f87f 	bl	80010a8 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fae:	f7ff f87b 	bl	80010a8 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e18d      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc0:	4b9c      	ldr	r3, [pc, #624]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d108      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x32e>
 8001fd4:	4b96      	ldr	r3, [pc, #600]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fda:	4a95      	ldr	r2, [pc, #596]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fe4:	e024      	b.n	8002030 <HAL_RCC_OscConfig+0x378>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d110      	bne.n	8002010 <HAL_RCC_OscConfig+0x358>
 8001fee:	4b90      	ldr	r3, [pc, #576]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff4:	4a8e      	ldr	r2, [pc, #568]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ffe:	4b8c      	ldr	r3, [pc, #560]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002004:	4a8a      	ldr	r2, [pc, #552]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800200e:	e00f      	b.n	8002030 <HAL_RCC_OscConfig+0x378>
 8002010:	4b87      	ldr	r3, [pc, #540]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	4a86      	ldr	r2, [pc, #536]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002020:	4b83      	ldr	r3, [pc, #524]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	4a82      	ldr	r2, [pc, #520]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002028:	f023 0304 	bic.w	r3, r3, #4
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d016      	beq.n	8002066 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7ff f836 	bl	80010a8 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203e:	e00a      	b.n	8002056 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002040:	f7ff f832 	bl	80010a8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e142      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002056:	4b76      	ldr	r3, [pc, #472]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ed      	beq.n	8002040 <HAL_RCC_OscConfig+0x388>
 8002064:	e015      	b.n	8002092 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002066:	f7ff f81f 	bl	80010a8 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7ff f81b 	bl	80010a8 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	; 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e12b      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002084:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ed      	bne.n	800206e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002092:	7ffb      	ldrb	r3, [r7, #31]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d105      	bne.n	80020a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002098:	4b65      	ldr	r3, [pc, #404]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	4a64      	ldr	r2, [pc, #400]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800209e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d03c      	beq.n	800212a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020b8:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020be:	4a5c      	ldr	r2, [pc, #368]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7fe ffee 	bl	80010a8 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020d0:	f7fe ffea 	bl	80010a8 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e0fc      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020e2:	4b53      	ldr	r3, [pc, #332]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ef      	beq.n	80020d0 <HAL_RCC_OscConfig+0x418>
 80020f0:	e01b      	b.n	800212a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020f2:	4b4f      	ldr	r3, [pc, #316]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020f8:	4a4d      	ldr	r2, [pc, #308]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002102:	f7fe ffd1 	bl	80010a8 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800210a:	f7fe ffcd 	bl	80010a8 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0df      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800211c:	4b44      	ldr	r3, [pc, #272]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800211e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ef      	bne.n	800210a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 80d3 	beq.w	80022da <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002134:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b0c      	cmp	r3, #12
 800213e:	f000 808d 	beq.w	800225c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d15a      	bne.n	8002200 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214a:	4b39      	ldr	r3, [pc, #228]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a38      	ldr	r2, [pc, #224]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002150:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7fe ffa7 	bl	80010a8 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215e:	f7fe ffa3 	bl	80010a8 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0b5      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002170:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f0      	bne.n	800215e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800217c:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_RCC_OscConfig+0x580>)
 8002182:	4013      	ands	r3, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6a11      	ldr	r1, [r2, #32]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800218c:	3a01      	subs	r2, #1
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	4311      	orrs	r1, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002196:	0212      	lsls	r2, r2, #8
 8002198:	4311      	orrs	r1, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800219e:	0852      	lsrs	r2, r2, #1
 80021a0:	3a01      	subs	r2, #1
 80021a2:	0552      	lsls	r2, r2, #21
 80021a4:	4311      	orrs	r1, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021aa:	0852      	lsrs	r2, r2, #1
 80021ac:	3a01      	subs	r2, #1
 80021ae:	0652      	lsls	r2, r2, #25
 80021b0:	4311      	orrs	r1, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021b6:	06d2      	lsls	r2, r2, #27
 80021b8:	430a      	orrs	r2, r1
 80021ba:	491d      	ldr	r1, [pc, #116]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a1a      	ldr	r2, [pc, #104]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a17      	ldr	r2, [pc, #92]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe ff66 	bl	80010a8 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe ff62 	bl	80010a8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e074      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x528>
 80021fe:	e06c      	b.n	80022da <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800220a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002212:	f023 0303 	bic.w	r3, r3, #3
 8002216:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800221e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe ff3e 	bl	80010a8 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222e:	e00e      	b.n	800224e <HAL_RCC_OscConfig+0x596>
 8002230:	40021000 	.word	0x40021000
 8002234:	40007000 	.word	0x40007000
 8002238:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe ff34 	bl	80010a8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e046      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224e:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <HAL_RCC_OscConfig+0x62c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x584>
 800225a:	e03e      	b.n	80022da <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e039      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_RCC_OscConfig+0x62c>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f003 0203 	and.w	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	429a      	cmp	r2, r3
 800227a:	d12c      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	3b01      	subs	r3, #1
 8002288:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d123      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d11b      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d113      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	3b01      	subs	r3, #1
 80022bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	3b01      	subs	r3, #1
 80022d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000

080022e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e11e      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b91      	ldr	r3, [pc, #580]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d910      	bls.n	8002330 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b8e      	ldr	r3, [pc, #568]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 020f 	bic.w	r2, r3, #15
 8002316:	498c      	ldr	r1, [pc, #560]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b8a      	ldr	r3, [pc, #552]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e106      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d073      	beq.n	8002424 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d129      	bne.n	8002398 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002344:	4b81      	ldr	r3, [pc, #516]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0f4      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002354:	f000 f99e 	bl	8002694 <RCC_GetSysClockFreqFromPLLSource>
 8002358:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4a7c      	ldr	r2, [pc, #496]	; (8002550 <HAL_RCC_ClockConfig+0x268>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d93f      	bls.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002362:	4b7a      	ldr	r3, [pc, #488]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002376:	2b00      	cmp	r3, #0
 8002378:	d033      	beq.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800237e:	2b00      	cmp	r3, #0
 8002380:	d12f      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002382:	4b72      	ldr	r3, [pc, #456]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800238a:	4a70      	ldr	r2, [pc, #448]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800238c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002390:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e024      	b.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a0:	4b6a      	ldr	r3, [pc, #424]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d109      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0c6      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b0:	4b66      	ldr	r3, [pc, #408]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0be      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023c0:	f000 f8ce 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4a61      	ldr	r2, [pc, #388]	; (8002550 <HAL_RCC_ClockConfig+0x268>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d909      	bls.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ce:	4b5f      	ldr	r3, [pc, #380]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023d6:	4a5d      	ldr	r2, [pc, #372]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023e2:	4b5a      	ldr	r3, [pc, #360]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f023 0203 	bic.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4957      	ldr	r1, [pc, #348]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f4:	f7fe fe58 	bl	80010a8 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7fe fe54 	bl	80010a8 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	; 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e095      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	4b4e      	ldr	r3, [pc, #312]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 020c 	and.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d1eb      	bne.n	80023fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d023      	beq.n	8002478 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800243c:	4b43      	ldr	r3, [pc, #268]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a42      	ldr	r2, [pc, #264]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002442:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002446:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002454:	4b3d      	ldr	r3, [pc, #244]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800245c:	4a3b      	ldr	r2, [pc, #236]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800245e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002462:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b39      	ldr	r3, [pc, #228]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4936      	ldr	r1, [pc, #216]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
 8002476:	e008      	b.n	800248a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b80      	cmp	r3, #128	; 0x80
 800247c:	d105      	bne.n	800248a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800247e:	4b33      	ldr	r3, [pc, #204]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	4a32      	ldr	r2, [pc, #200]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002488:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800248a:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d21d      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002498:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 020f 	bic.w	r2, r3, #15
 80024a0:	4929      	ldr	r1, [pc, #164]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024a8:	f7fe fdfe 	bl	80010a8 <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7fe fdfa 	bl	80010a8 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e03b      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1ed      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e0:	4b1a      	ldr	r3, [pc, #104]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4917      	ldr	r1, [pc, #92]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	490f      	ldr	r1, [pc, #60]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002512:	f000 f825 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8002516:	4602      	mov	r2, r0
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	490c      	ldr	r1, [pc, #48]	; (8002554 <HAL_RCC_ClockConfig+0x26c>)
 8002524:	5ccb      	ldrb	r3, [r1, r3]
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <HAL_RCC_ClockConfig+0x270>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_RCC_ClockConfig+0x274>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fd6a 	bl	8001010 <HAL_InitTick>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40022000 	.word	0x40022000
 800254c:	40021000 	.word	0x40021000
 8002550:	04c4b400 	.word	0x04c4b400
 8002554:	08028b1c 	.word	0x08028b1c
 8002558:	20000004 	.word	0x20000004
 800255c:	20000008 	.word	0x20000008

08002560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002566:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b04      	cmp	r3, #4
 8002570:	d102      	bne.n	8002578 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002572:	4b2a      	ldr	r3, [pc, #168]	; (800261c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e047      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d102      	bne.n	800258a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002584:	4b26      	ldr	r3, [pc, #152]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	e03e      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d136      	bne.n	8002604 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3301      	adds	r3, #1
 80025ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d10c      	bne.n	80025ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025b4:	4a1a      	ldr	r2, [pc, #104]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	4a16      	ldr	r2, [pc, #88]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025be:	68d2      	ldr	r2, [r2, #12]
 80025c0:	0a12      	lsrs	r2, r2, #8
 80025c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	617b      	str	r3, [r7, #20]
      break;
 80025cc:	e00c      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ce:	4a13      	ldr	r2, [pc, #76]	; (800261c <HAL_RCC_GetSysClockFreq+0xbc>)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	4a10      	ldr	r2, [pc, #64]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d8:	68d2      	ldr	r2, [r2, #12]
 80025da:	0a12      	lsrs	r2, r2, #8
 80025dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
      break;
 80025e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0e5b      	lsrs	r3, r3, #25
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	3301      	adds	r3, #1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	e001      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002608:	693b      	ldr	r3, [r7, #16]
}
 800260a:	4618      	mov	r0, r3
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	00f42400 	.word	0x00f42400
 8002620:	016e3600 	.word	0x016e3600

08002624 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_RCC_GetHCLKFreq+0x14>)
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000004 	.word	0x20000004

0800263c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002640:	f7ff fff0 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4904      	ldr	r1, [pc, #16]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000
 8002664:	08028b2c 	.word	0x08028b2c

08002668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800266c:	f7ff ffda 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0adb      	lsrs	r3, r3, #11
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4904      	ldr	r1, [pc, #16]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x28>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	08028b2c 	.word	0x08028b2c

08002694 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800269a:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3301      	adds	r3, #1
 80026b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d10c      	bne.n	80026d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026b8:	4a17      	ldr	r2, [pc, #92]	; (8002718 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026c2:	68d2      	ldr	r2, [r2, #12]
 80026c4:	0a12      	lsrs	r2, r2, #8
 80026c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	617b      	str	r3, [r7, #20]
    break;
 80026d0:	e00c      	b.n	80026ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026d2:	4a12      	ldr	r2, [pc, #72]	; (800271c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026dc:	68d2      	ldr	r2, [r2, #12]
 80026de:	0a12      	lsrs	r2, r2, #8
 80026e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026e4:	fb02 f303 	mul.w	r3, r2, r3
 80026e8:	617b      	str	r3, [r7, #20]
    break;
 80026ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0e5b      	lsrs	r3, r3, #25
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002706:	687b      	ldr	r3, [r7, #4]
}
 8002708:	4618      	mov	r0, r3
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40021000 	.word	0x40021000
 8002718:	016e3600 	.word	0x016e3600
 800271c:	00f42400 	.word	0x00f42400

08002720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002728:	2300      	movs	r3, #0
 800272a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800272c:	2300      	movs	r3, #0
 800272e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8098 	beq.w	800286e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002742:	4b43      	ldr	r3, [pc, #268]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	4b40      	ldr	r3, [pc, #256]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	4a3f      	ldr	r2, [pc, #252]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	6593      	str	r3, [r2, #88]	; 0x58
 800275a:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800276a:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a39      	ldr	r2, [pc, #228]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002776:	f7fe fc97 	bl	80010a8 <HAL_GetTick>
 800277a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800277c:	e009      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7fe fc93 	bl	80010a8 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d902      	bls.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	74fb      	strb	r3, [r7, #19]
        break;
 8002790:	e005      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002792:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ef      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d159      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027a4:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01e      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d019      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027cc:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d2:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027dc:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027ec:	4a18      	ldr	r2, [pc, #96]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d016      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fc53 	bl	80010a8 <HAL_GetTick>
 8002802:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002804:	e00b      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7fe fc4f 	bl	80010a8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d902      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	74fb      	strb	r3, [r7, #19]
            break;
 800281c:	e006      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ec      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10b      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002840:	4903      	ldr	r1, [pc, #12]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002848:	e008      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	74bb      	strb	r3, [r7, #18]
 800284e:	e005      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285c:	7c7b      	ldrb	r3, [r7, #17]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d105      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002862:	4baf      	ldr	r3, [pc, #700]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	4aae      	ldr	r2, [pc, #696]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800287a:	4ba9      	ldr	r3, [pc, #676]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002880:	f023 0203 	bic.w	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	49a5      	ldr	r1, [pc, #660]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800289c:	4ba0      	ldr	r3, [pc, #640]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f023 020c 	bic.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	499d      	ldr	r1, [pc, #628]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028be:	4b98      	ldr	r3, [pc, #608]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4994      	ldr	r1, [pc, #592]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028e0:	4b8f      	ldr	r3, [pc, #572]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	498c      	ldr	r1, [pc, #560]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002902:	4b87      	ldr	r3, [pc, #540]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	4983      	ldr	r1, [pc, #524]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002924:	4b7e      	ldr	r3, [pc, #504]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	497b      	ldr	r1, [pc, #492]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002946:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	4972      	ldr	r1, [pc, #456]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002968:	4b6d      	ldr	r3, [pc, #436]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	496a      	ldr	r1, [pc, #424]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800298a:	4b65      	ldr	r3, [pc, #404]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	4961      	ldr	r1, [pc, #388]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029ac:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	4959      	ldr	r1, [pc, #356]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ce:	4b54      	ldr	r3, [pc, #336]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	4950      	ldr	r1, [pc, #320]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d015      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f0:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4948      	ldr	r1, [pc, #288]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a10:	4b43      	ldr	r3, [pc, #268]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a42      	ldr	r2, [pc, #264]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d015      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a28:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a36:	493a      	ldr	r1, [pc, #232]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a46:	d105      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a48:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a34      	ldr	r2, [pc, #208]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a52:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d015      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a60:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	492c      	ldr	r1, [pc, #176]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a80:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a26      	ldr	r2, [pc, #152]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d015      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a98:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	491e      	ldr	r1, [pc, #120]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ac2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d015      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ad0:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4910      	ldr	r1, [pc, #64]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aee:	d105      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002afa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d018      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	4902      	ldr	r1, [pc, #8]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b1e:	e001      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002b20:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b2c:	d105      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b2e:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4a20      	ldr	r2, [pc, #128]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b38:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d015      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b46:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b54:	4917      	ldr	r1, [pc, #92]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b64:	d105      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b66:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d015      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8c:	4909      	ldr	r1, [pc, #36]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b9c:	d105      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ba4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ba8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002baa:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e042      	b.n	8002c50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fd ffd9 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2224      	movs	r2, #36	; 0x24
 8002be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0201 	bic.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa80 	bl	8003100 <UART_SetConfig>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e022      	b.n	8002c50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fd3e 	bl	8003694 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fdc5 	bl	80037d8 <UART_CheckIdleState>
 8002c4e:	4603      	mov	r3, r0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d118      	bne.n	8002cba <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d013      	beq.n	8002cba <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d104      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 81fb 	beq.w	80030a6 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
      }
      return;
 8002cb8:	e1f5      	b.n	80030a6 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80ef 	beq.w	8002ea0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4b73      	ldr	r3, [pc, #460]	; (8002e94 <HAL_UART_IRQHandler+0x23c>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4b72      	ldr	r3, [pc, #456]	; (8002e98 <HAL_UART_IRQHandler+0x240>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80e4 	beq.w	8002ea0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d010      	beq.n	8002d04 <HAL_UART_IRQHandler+0xac>
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00b      	beq.n	8002d04 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d010      	beq.n	8002d30 <HAL_UART_IRQHandler+0xd8>
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d26:	f043 0204 	orr.w	r2, r3, #4
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d010      	beq.n	8002d5c <HAL_UART_IRQHandler+0x104>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2204      	movs	r2, #4
 8002d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d52:	f043 0202 	orr.w	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d015      	beq.n	8002d92 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d104      	bne.n	8002d7a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4b48      	ldr	r3, [pc, #288]	; (8002e94 <HAL_UART_IRQHandler+0x23c>)
 8002d74:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2208      	movs	r2, #8
 8002d80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d88:	f043 0208 	orr.w	r2, r3, #8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d011      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x168>
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00c      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002db6:	f043 0220 	orr.w	r2, r3, #32
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 816f 	beq.w	80030aa <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d011      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d104      	bne.n	8002dea <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d007      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e00:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	d004      	beq.n	8002e1a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d031      	beq.n	8002e7e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fda7 	bl	800396e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	d123      	bne.n	8002e76 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d013      	beq.n	8002e6e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4a:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <HAL_UART_IRQHandler+0x244>)
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fb45 	bl	80014e2 <HAL_DMA_Abort_IT>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d017      	beq.n	8002e8e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6c:	e00f      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f930 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e74:	e00b      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f92c 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e7c:	e007      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f928 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002e8c:	e10d      	b.n	80030aa <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8e:	bf00      	nop
    return;
 8002e90:	e10b      	b.n	80030aa <HAL_UART_IRQHandler+0x452>
 8002e92:	bf00      	nop
 8002e94:	10000001 	.word	0x10000001
 8002e98:	04000120 	.word	0x04000120
 8002e9c:	080039d3 	.word	0x080039d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	f040 80ab 	bne.w	8003000 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80a5 	beq.w	8003000 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 809f 	beq.w	8003000 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d155      	bne.n	8002f84 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002ee2:	893b      	ldrh	r3, [r7, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80e2 	beq.w	80030ae <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002ef0:	893a      	ldrh	r2, [r7, #8]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	f080 80db 	bcs.w	80030ae <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	893a      	ldrh	r2, [r7, #8]
 8002efc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d12b      	bne.n	8002f68 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f1e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f3e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0210 	bic.w	r2, r2, #16
 8002f5c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe fa64 	bl	8001430 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f8b3 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f82:	e094      	b.n	80030ae <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8087 	beq.w	80030b2 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002fa4:	897b      	ldrh	r3, [r7, #10]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8083 	beq.w	80030b2 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fba:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0210 	bic.w	r2, r2, #16
 8002ff2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ff4:	897b      	ldrh	r3, [r7, #10]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f875 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ffe:	e058      	b.n	80030b2 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00d      	beq.n	8003026 <HAL_UART_IRQHandler+0x3ce>
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800301c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fd07 	bl	8003a32 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003024:	e048      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302c:	2b00      	cmp	r3, #0
 800302e:	d012      	beq.n	8003056 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003048:	2b00      	cmp	r3, #0
 800304a:	d034      	beq.n	80030b6 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
    }
    return;
 8003054:	e02f      	b.n	80030b6 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_UART_IRQHandler+0x41a>
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fcc7 	bl	80039fe <UART_EndTransmit_IT>
    return;
 8003070:	e022      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_UART_IRQHandler+0x436>
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fce7 	bl	8003a5a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800308c:	e014      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00f      	beq.n	80030b8 <HAL_UART_IRQHandler+0x460>
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	da0c      	bge.n	80030b8 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fcd1 	bl	8003a46 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030a4:	e008      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030a6:	bf00      	nop
 80030a8:	e006      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
    return;
 80030aa:	bf00      	nop
 80030ac:	e004      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030ae:	bf00      	nop
 80030b0:	e002      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030b2:	bf00      	nop
 80030b4:	e000      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
    return;
 80030b6:	bf00      	nop
  }
}
 80030b8:	3720      	adds	r7, #32
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop

080030c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003100:	b5b0      	push	{r4, r5, r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4313      	orrs	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4bb1      	ldr	r3, [pc, #708]	; (80033f0 <UART_SetConfig+0x2f0>)
 800312c:	4013      	ands	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	69f9      	ldr	r1, [r7, #28]
 8003134:	430b      	orrs	r3, r1
 8003136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4aa6      	ldr	r2, [pc, #664]	; (80033f4 <UART_SetConfig+0x2f4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	4313      	orrs	r3, r2
 8003166:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003172:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	69f9      	ldr	r1, [r7, #28]
 800317c:	430b      	orrs	r3, r1
 800317e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	f023 010f 	bic.w	r1, r3, #15
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a97      	ldr	r2, [pc, #604]	; (80033f8 <UART_SetConfig+0x2f8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d120      	bne.n	80031e2 <UART_SetConfig+0xe2>
 80031a0:	4b96      	ldr	r3, [pc, #600]	; (80033fc <UART_SetConfig+0x2fc>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d816      	bhi.n	80031dc <UART_SetConfig+0xdc>
 80031ae:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <UART_SetConfig+0xb4>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031c5 	.word	0x080031c5
 80031b8:	080031d1 	.word	0x080031d1
 80031bc:	080031cb 	.word	0x080031cb
 80031c0:	080031d7 	.word	0x080031d7
 80031c4:	2301      	movs	r3, #1
 80031c6:	76fb      	strb	r3, [r7, #27]
 80031c8:	e0e7      	b.n	800339a <UART_SetConfig+0x29a>
 80031ca:	2302      	movs	r3, #2
 80031cc:	76fb      	strb	r3, [r7, #27]
 80031ce:	e0e4      	b.n	800339a <UART_SetConfig+0x29a>
 80031d0:	2304      	movs	r3, #4
 80031d2:	76fb      	strb	r3, [r7, #27]
 80031d4:	e0e1      	b.n	800339a <UART_SetConfig+0x29a>
 80031d6:	2308      	movs	r3, #8
 80031d8:	76fb      	strb	r3, [r7, #27]
 80031da:	e0de      	b.n	800339a <UART_SetConfig+0x29a>
 80031dc:	2310      	movs	r3, #16
 80031de:	76fb      	strb	r3, [r7, #27]
 80031e0:	e0db      	b.n	800339a <UART_SetConfig+0x29a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a86      	ldr	r2, [pc, #536]	; (8003400 <UART_SetConfig+0x300>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d132      	bne.n	8003252 <UART_SetConfig+0x152>
 80031ec:	4b83      	ldr	r3, [pc, #524]	; (80033fc <UART_SetConfig+0x2fc>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d828      	bhi.n	800324c <UART_SetConfig+0x14c>
 80031fa:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <UART_SetConfig+0x100>)
 80031fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003200:	08003235 	.word	0x08003235
 8003204:	0800324d 	.word	0x0800324d
 8003208:	0800324d 	.word	0x0800324d
 800320c:	0800324d 	.word	0x0800324d
 8003210:	08003241 	.word	0x08003241
 8003214:	0800324d 	.word	0x0800324d
 8003218:	0800324d 	.word	0x0800324d
 800321c:	0800324d 	.word	0x0800324d
 8003220:	0800323b 	.word	0x0800323b
 8003224:	0800324d 	.word	0x0800324d
 8003228:	0800324d 	.word	0x0800324d
 800322c:	0800324d 	.word	0x0800324d
 8003230:	08003247 	.word	0x08003247
 8003234:	2300      	movs	r3, #0
 8003236:	76fb      	strb	r3, [r7, #27]
 8003238:	e0af      	b.n	800339a <UART_SetConfig+0x29a>
 800323a:	2302      	movs	r3, #2
 800323c:	76fb      	strb	r3, [r7, #27]
 800323e:	e0ac      	b.n	800339a <UART_SetConfig+0x29a>
 8003240:	2304      	movs	r3, #4
 8003242:	76fb      	strb	r3, [r7, #27]
 8003244:	e0a9      	b.n	800339a <UART_SetConfig+0x29a>
 8003246:	2308      	movs	r3, #8
 8003248:	76fb      	strb	r3, [r7, #27]
 800324a:	e0a6      	b.n	800339a <UART_SetConfig+0x29a>
 800324c:	2310      	movs	r3, #16
 800324e:	76fb      	strb	r3, [r7, #27]
 8003250:	e0a3      	b.n	800339a <UART_SetConfig+0x29a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a6b      	ldr	r2, [pc, #428]	; (8003404 <UART_SetConfig+0x304>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d120      	bne.n	800329e <UART_SetConfig+0x19e>
 800325c:	4b67      	ldr	r3, [pc, #412]	; (80033fc <UART_SetConfig+0x2fc>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003266:	2b30      	cmp	r3, #48	; 0x30
 8003268:	d013      	beq.n	8003292 <UART_SetConfig+0x192>
 800326a:	2b30      	cmp	r3, #48	; 0x30
 800326c:	d814      	bhi.n	8003298 <UART_SetConfig+0x198>
 800326e:	2b20      	cmp	r3, #32
 8003270:	d009      	beq.n	8003286 <UART_SetConfig+0x186>
 8003272:	2b20      	cmp	r3, #32
 8003274:	d810      	bhi.n	8003298 <UART_SetConfig+0x198>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <UART_SetConfig+0x180>
 800327a:	2b10      	cmp	r3, #16
 800327c:	d006      	beq.n	800328c <UART_SetConfig+0x18c>
 800327e:	e00b      	b.n	8003298 <UART_SetConfig+0x198>
 8003280:	2300      	movs	r3, #0
 8003282:	76fb      	strb	r3, [r7, #27]
 8003284:	e089      	b.n	800339a <UART_SetConfig+0x29a>
 8003286:	2302      	movs	r3, #2
 8003288:	76fb      	strb	r3, [r7, #27]
 800328a:	e086      	b.n	800339a <UART_SetConfig+0x29a>
 800328c:	2304      	movs	r3, #4
 800328e:	76fb      	strb	r3, [r7, #27]
 8003290:	e083      	b.n	800339a <UART_SetConfig+0x29a>
 8003292:	2308      	movs	r3, #8
 8003294:	76fb      	strb	r3, [r7, #27]
 8003296:	e080      	b.n	800339a <UART_SetConfig+0x29a>
 8003298:	2310      	movs	r3, #16
 800329a:	76fb      	strb	r3, [r7, #27]
 800329c:	e07d      	b.n	800339a <UART_SetConfig+0x29a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a59      	ldr	r2, [pc, #356]	; (8003408 <UART_SetConfig+0x308>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d120      	bne.n	80032ea <UART_SetConfig+0x1ea>
 80032a8:	4b54      	ldr	r3, [pc, #336]	; (80033fc <UART_SetConfig+0x2fc>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032b2:	2bc0      	cmp	r3, #192	; 0xc0
 80032b4:	d013      	beq.n	80032de <UART_SetConfig+0x1de>
 80032b6:	2bc0      	cmp	r3, #192	; 0xc0
 80032b8:	d814      	bhi.n	80032e4 <UART_SetConfig+0x1e4>
 80032ba:	2b80      	cmp	r3, #128	; 0x80
 80032bc:	d009      	beq.n	80032d2 <UART_SetConfig+0x1d2>
 80032be:	2b80      	cmp	r3, #128	; 0x80
 80032c0:	d810      	bhi.n	80032e4 <UART_SetConfig+0x1e4>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <UART_SetConfig+0x1cc>
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d006      	beq.n	80032d8 <UART_SetConfig+0x1d8>
 80032ca:	e00b      	b.n	80032e4 <UART_SetConfig+0x1e4>
 80032cc:	2300      	movs	r3, #0
 80032ce:	76fb      	strb	r3, [r7, #27]
 80032d0:	e063      	b.n	800339a <UART_SetConfig+0x29a>
 80032d2:	2302      	movs	r3, #2
 80032d4:	76fb      	strb	r3, [r7, #27]
 80032d6:	e060      	b.n	800339a <UART_SetConfig+0x29a>
 80032d8:	2304      	movs	r3, #4
 80032da:	76fb      	strb	r3, [r7, #27]
 80032dc:	e05d      	b.n	800339a <UART_SetConfig+0x29a>
 80032de:	2308      	movs	r3, #8
 80032e0:	76fb      	strb	r3, [r7, #27]
 80032e2:	e05a      	b.n	800339a <UART_SetConfig+0x29a>
 80032e4:	2310      	movs	r3, #16
 80032e6:	76fb      	strb	r3, [r7, #27]
 80032e8:	e057      	b.n	800339a <UART_SetConfig+0x29a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a47      	ldr	r2, [pc, #284]	; (800340c <UART_SetConfig+0x30c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d125      	bne.n	8003340 <UART_SetConfig+0x240>
 80032f4:	4b41      	ldr	r3, [pc, #260]	; (80033fc <UART_SetConfig+0x2fc>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003302:	d017      	beq.n	8003334 <UART_SetConfig+0x234>
 8003304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003308:	d817      	bhi.n	800333a <UART_SetConfig+0x23a>
 800330a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330e:	d00b      	beq.n	8003328 <UART_SetConfig+0x228>
 8003310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003314:	d811      	bhi.n	800333a <UART_SetConfig+0x23a>
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <UART_SetConfig+0x222>
 800331a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331e:	d006      	beq.n	800332e <UART_SetConfig+0x22e>
 8003320:	e00b      	b.n	800333a <UART_SetConfig+0x23a>
 8003322:	2300      	movs	r3, #0
 8003324:	76fb      	strb	r3, [r7, #27]
 8003326:	e038      	b.n	800339a <UART_SetConfig+0x29a>
 8003328:	2302      	movs	r3, #2
 800332a:	76fb      	strb	r3, [r7, #27]
 800332c:	e035      	b.n	800339a <UART_SetConfig+0x29a>
 800332e:	2304      	movs	r3, #4
 8003330:	76fb      	strb	r3, [r7, #27]
 8003332:	e032      	b.n	800339a <UART_SetConfig+0x29a>
 8003334:	2308      	movs	r3, #8
 8003336:	76fb      	strb	r3, [r7, #27]
 8003338:	e02f      	b.n	800339a <UART_SetConfig+0x29a>
 800333a:	2310      	movs	r3, #16
 800333c:	76fb      	strb	r3, [r7, #27]
 800333e:	e02c      	b.n	800339a <UART_SetConfig+0x29a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <UART_SetConfig+0x2f4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d125      	bne.n	8003396 <UART_SetConfig+0x296>
 800334a:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <UART_SetConfig+0x2fc>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003350:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003358:	d017      	beq.n	800338a <UART_SetConfig+0x28a>
 800335a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800335e:	d817      	bhi.n	8003390 <UART_SetConfig+0x290>
 8003360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003364:	d00b      	beq.n	800337e <UART_SetConfig+0x27e>
 8003366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336a:	d811      	bhi.n	8003390 <UART_SetConfig+0x290>
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <UART_SetConfig+0x278>
 8003370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003374:	d006      	beq.n	8003384 <UART_SetConfig+0x284>
 8003376:	e00b      	b.n	8003390 <UART_SetConfig+0x290>
 8003378:	2300      	movs	r3, #0
 800337a:	76fb      	strb	r3, [r7, #27]
 800337c:	e00d      	b.n	800339a <UART_SetConfig+0x29a>
 800337e:	2302      	movs	r3, #2
 8003380:	76fb      	strb	r3, [r7, #27]
 8003382:	e00a      	b.n	800339a <UART_SetConfig+0x29a>
 8003384:	2304      	movs	r3, #4
 8003386:	76fb      	strb	r3, [r7, #27]
 8003388:	e007      	b.n	800339a <UART_SetConfig+0x29a>
 800338a:	2308      	movs	r3, #8
 800338c:	76fb      	strb	r3, [r7, #27]
 800338e:	e004      	b.n	800339a <UART_SetConfig+0x29a>
 8003390:	2310      	movs	r3, #16
 8003392:	76fb      	strb	r3, [r7, #27]
 8003394:	e001      	b.n	800339a <UART_SetConfig+0x29a>
 8003396:	2310      	movs	r3, #16
 8003398:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a15      	ldr	r2, [pc, #84]	; (80033f4 <UART_SetConfig+0x2f4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	f040 809f 	bne.w	80034e4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033a6:	7efb      	ldrb	r3, [r7, #27]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d837      	bhi.n	800341c <UART_SetConfig+0x31c>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <UART_SetConfig+0x2b4>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033d9 	.word	0x080033d9
 80033b8:	0800341d 	.word	0x0800341d
 80033bc:	080033e1 	.word	0x080033e1
 80033c0:	0800341d 	.word	0x0800341d
 80033c4:	080033e7 	.word	0x080033e7
 80033c8:	0800341d 	.word	0x0800341d
 80033cc:	0800341d 	.word	0x0800341d
 80033d0:	0800341d 	.word	0x0800341d
 80033d4:	08003415 	.word	0x08003415
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d8:	f7ff f930 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 80033dc:	6178      	str	r0, [r7, #20]
        break;
 80033de:	e022      	b.n	8003426 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <UART_SetConfig+0x310>)
 80033e2:	617b      	str	r3, [r7, #20]
        break;
 80033e4:	e01f      	b.n	8003426 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e6:	f7ff f8bb 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 80033ea:	6178      	str	r0, [r7, #20]
        break;
 80033ec:	e01b      	b.n	8003426 <UART_SetConfig+0x326>
 80033ee:	bf00      	nop
 80033f0:	cfff69f3 	.word	0xcfff69f3
 80033f4:	40008000 	.word	0x40008000
 80033f8:	40013800 	.word	0x40013800
 80033fc:	40021000 	.word	0x40021000
 8003400:	40004400 	.word	0x40004400
 8003404:	40004800 	.word	0x40004800
 8003408:	40004c00 	.word	0x40004c00
 800340c:	40005000 	.word	0x40005000
 8003410:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003418:	617b      	str	r3, [r7, #20]
        break;
 800341a:	e004      	b.n	8003426 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	76bb      	strb	r3, [r7, #26]
        break;
 8003424:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 811b 	beq.w	8003664 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	4a96      	ldr	r2, [pc, #600]	; (800368c <UART_SetConfig+0x58c>)
 8003434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003438:	461a      	mov	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003440:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	429a      	cmp	r2, r3
 8003450:	d305      	bcc.n	800345e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	d902      	bls.n	8003464 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	76bb      	strb	r3, [r7, #26]
 8003462:	e0ff      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	4618      	mov	r0, r3
 8003468:	f04f 0100 	mov.w	r1, #0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	4a86      	ldr	r2, [pc, #536]	; (800368c <UART_SetConfig+0x58c>)
 8003472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003476:	b29a      	uxth	r2, r3
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	f7fd f9ea 	bl	8000854 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	020b      	lsls	r3, r1, #8
 8003492:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003496:	0202      	lsls	r2, r0, #8
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	6849      	ldr	r1, [r1, #4]
 800349c:	0849      	lsrs	r1, r1, #1
 800349e:	4608      	mov	r0, r1
 80034a0:	f04f 0100 	mov.w	r1, #0
 80034a4:	1814      	adds	r4, r2, r0
 80034a6:	eb43 0501 	adc.w	r5, r3, r1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	461a      	mov	r2, r3
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	4620      	mov	r0, r4
 80034b6:	4629      	mov	r1, r5
 80034b8:	f7fd f9cc 	bl	8000854 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4613      	mov	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ca:	d308      	bcc.n	80034de <UART_SetConfig+0x3de>
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d2:	d204      	bcs.n	80034de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	e0c2      	b.n	8003664 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	76bb      	strb	r3, [r7, #26]
 80034e2:	e0bf      	b.n	8003664 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ec:	d165      	bne.n	80035ba <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80034ee:	7efb      	ldrb	r3, [r7, #27]
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d828      	bhi.n	8003546 <UART_SetConfig+0x446>
 80034f4:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <UART_SetConfig+0x3fc>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	08003521 	.word	0x08003521
 8003500:	08003529 	.word	0x08003529
 8003504:	08003531 	.word	0x08003531
 8003508:	08003547 	.word	0x08003547
 800350c:	08003537 	.word	0x08003537
 8003510:	08003547 	.word	0x08003547
 8003514:	08003547 	.word	0x08003547
 8003518:	08003547 	.word	0x08003547
 800351c:	0800353f 	.word	0x0800353f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003520:	f7ff f88c 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8003524:	6178      	str	r0, [r7, #20]
        break;
 8003526:	e013      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003528:	f7ff f89e 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 800352c:	6178      	str	r0, [r7, #20]
        break;
 800352e:	e00f      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003530:	4b57      	ldr	r3, [pc, #348]	; (8003690 <UART_SetConfig+0x590>)
 8003532:	617b      	str	r3, [r7, #20]
        break;
 8003534:	e00c      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003536:	f7ff f813 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 800353a:	6178      	str	r0, [r7, #20]
        break;
 800353c:	e008      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003542:	617b      	str	r3, [r7, #20]
        break;
 8003544:	e004      	b.n	8003550 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	76bb      	strb	r3, [r7, #26]
        break;
 800354e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8086 	beq.w	8003664 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	4a4b      	ldr	r2, [pc, #300]	; (800368c <UART_SetConfig+0x58c>)
 800355e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003562:	461a      	mov	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fbb3 f3f2 	udiv	r3, r3, r2
 800356a:	005a      	lsls	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	441a      	add	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	fbb2 f3f3 	udiv	r3, r2, r3
 800357c:	b29b      	uxth	r3, r3
 800357e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	2b0f      	cmp	r3, #15
 8003584:	d916      	bls.n	80035b4 <UART_SetConfig+0x4b4>
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	d212      	bcs.n	80035b4 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	b29b      	uxth	r3, r3
 8003592:	f023 030f 	bic.w	r3, r3, #15
 8003596:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	085b      	lsrs	r3, r3, #1
 800359c:	b29b      	uxth	r3, r3
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	89fb      	ldrh	r3, [r7, #14]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	89fa      	ldrh	r2, [r7, #14]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	e057      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	76bb      	strb	r3, [r7, #26]
 80035b8:	e054      	b.n	8003664 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035ba:	7efb      	ldrb	r3, [r7, #27]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d828      	bhi.n	8003612 <UART_SetConfig+0x512>
 80035c0:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <UART_SetConfig+0x4c8>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035ed 	.word	0x080035ed
 80035cc:	080035f5 	.word	0x080035f5
 80035d0:	080035fd 	.word	0x080035fd
 80035d4:	08003613 	.word	0x08003613
 80035d8:	08003603 	.word	0x08003603
 80035dc:	08003613 	.word	0x08003613
 80035e0:	08003613 	.word	0x08003613
 80035e4:	08003613 	.word	0x08003613
 80035e8:	0800360b 	.word	0x0800360b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ec:	f7ff f826 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 80035f0:	6178      	str	r0, [r7, #20]
        break;
 80035f2:	e013      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035f4:	f7ff f838 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 80035f8:	6178      	str	r0, [r7, #20]
        break;
 80035fa:	e00f      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035fc:	4b24      	ldr	r3, [pc, #144]	; (8003690 <UART_SetConfig+0x590>)
 80035fe:	617b      	str	r3, [r7, #20]
        break;
 8003600:	e00c      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003602:	f7fe ffad 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8003606:	6178      	str	r0, [r7, #20]
        break;
 8003608:	e008      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800360a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360e:	617b      	str	r3, [r7, #20]
        break;
 8003610:	e004      	b.n	800361c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	76bb      	strb	r3, [r7, #26]
        break;
 800361a:	bf00      	nop
    }

    if (pclk != 0U)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d020      	beq.n	8003664 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	4a19      	ldr	r2, [pc, #100]	; (800368c <UART_SetConfig+0x58c>)
 8003628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800362c:	461a      	mov	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	fbb3 f2f2 	udiv	r2, r3, r2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	085b      	lsrs	r3, r3, #1
 800363a:	441a      	add	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	b29b      	uxth	r3, r3
 8003646:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2b0f      	cmp	r3, #15
 800364c:	d908      	bls.n	8003660 <UART_SetConfig+0x560>
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003654:	d204      	bcs.n	8003660 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	e001      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003680:	7ebb      	ldrb	r3, [r7, #26]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3720      	adds	r7, #32
 8003686:	46bd      	mov	sp, r7
 8003688:	bdb0      	pop	{r4, r5, r7, pc}
 800368a:	bf00      	nop
 800368c:	08028b34 	.word	0x08028b34
 8003690:	00f42400 	.word	0x00f42400

08003694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01a      	beq.n	80037aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003792:	d10a      	bne.n	80037aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
  }
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af02      	add	r7, sp, #8
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037e8:	f7fd fc5e 	bl	80010a8 <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d10e      	bne.n	800381a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f82f 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e025      	b.n	8003866 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b04      	cmp	r3, #4
 8003826:	d10e      	bne.n	8003846 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f819 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e00f      	b.n	8003866 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	4613      	mov	r3, r2
 800387c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387e:	e062      	b.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d05e      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003888:	f7fd fc0e 	bl	80010a8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	429a      	cmp	r2, r3
 8003896:	d302      	bcc.n	800389e <UART_WaitOnFlagUntilTimeout+0x30>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11d      	bne.n	80038da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e045      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d02e      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f6:	d126      	bne.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003900:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003910:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e00f      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4013      	ands	r3, r2
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	429a      	cmp	r2, r3
 8003962:	d08d      	beq.n	8003880 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003984:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d107      	bne.n	80039b2 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0210 	bic.w	r2, r2, #16
 80039b0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	671a      	str	r2, [r3, #112]	; 0x70
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff fb6f 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a14:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fb4b 	bl	80030c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_UARTEx_DisableFifoMode+0x16>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e027      	b.n	8003ad4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2224      	movs	r2, #36	; 0x24
 8003a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003ab2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e02d      	b.n	8003b54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	; 0x24
 8003b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f84f 	bl	8003bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e02d      	b.n	8003bd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	; 0x24
 8003b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f811 	bl	8003bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d108      	bne.n	8003bfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003bf8:	e031      	b.n	8003c5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003bfe:	2308      	movs	r3, #8
 8003c00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	0e5b      	lsrs	r3, r3, #25
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	0f5b      	lsrs	r3, r3, #29
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c22:	7bbb      	ldrb	r3, [r7, #14]
 8003c24:	7b3a      	ldrb	r2, [r7, #12]
 8003c26:	4911      	ldr	r1, [pc, #68]	; (8003c6c <UARTEx_SetNbDataToProcess+0x94>)
 8003c28:	5c8a      	ldrb	r2, [r1, r2]
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c2e:	7b3a      	ldrb	r2, [r7, #12]
 8003c30:	490f      	ldr	r1, [pc, #60]	; (8003c70 <UARTEx_SetNbDataToProcess+0x98>)
 8003c32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c34:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	7b7a      	ldrb	r2, [r7, #13]
 8003c44:	4909      	ldr	r1, [pc, #36]	; (8003c6c <UARTEx_SetNbDataToProcess+0x94>)
 8003c46:	5c8a      	ldrb	r2, [r1, r2]
 8003c48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c4c:	7b7a      	ldrb	r2, [r7, #13]
 8003c4e:	4908      	ldr	r1, [pc, #32]	; (8003c70 <UARTEx_SetNbDataToProcess+0x98>)
 8003c50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c52:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	08028b4c 	.word	0x08028b4c
 8003c70:	08028b54 	.word	0x08028b54

08003c74 <ESP_Init>:
 */
int32_t ESP_Init(void 		(*UART_Transmit)(uint8_t*,size_t),
			 	 uint8_t 	(*UART_Receive)(void),
				 uint32_t 	(*getTick)(void),
				 uint32_t	UART_Buffer_Size)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01d      	beq.n	8003cc4 <ESP_Init+0x50>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d01a      	beq.n	8003cc4 <ESP_Init+0x50>
	   UART_Receive	!= NULL			&&
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d017      	beq.n	8003cc4 <ESP_Init+0x50>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003c94:	4a0e      	ldr	r2, [pc, #56]	; (8003cd0 <ESP_Init+0x5c>)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 8003c9a:	4a0d      	ldr	r2, [pc, #52]	; (8003cd0 <ESP_Init+0x5c>)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003ca0:	4a0b      	ldr	r2, [pc, #44]	; (8003cd0 <ESP_Init+0x5c>)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 8003ca6:	6838      	ldr	r0, [r7, #0]
 8003ca8:	f000 fca6 	bl	80045f8 <ringBuffer_init>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <ESP_Init+0x60>)
 8003cb0:	6013      	str	r3, [r2, #0]

		if(rx_buffer != NULL)
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <ESP_Init+0x60>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <ESP_Init+0x4a>
			return 1;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e004      	b.n	8003cc8 <ESP_Init+0x54>
		else
			return -1;
 8003cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc2:	e001      	b.n	8003cc8 <ESP_Init+0x54>
	}
	else
	{
		return -1;
 8003cc4:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000360 	.word	0x20000360
 8003cd4:	2000106c 	.word	0x2000106c

08003cd8 <Send_AT_Command>:
 * 			as a function pointer in the ESP_Init function to send AT commands over UART.
 * @param 	cmd is a string containing the AT command.
 * @retval	None.
 */
void Send_AT_Command(char *cmd,size_t size)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]

	ESP8266.UART_Transmit((uint8_t*)cmd,size);
 8003ce2:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <Send_AT_Command+0x1c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6839      	ldr	r1, [r7, #0]
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	4798      	blx	r3
}
 8003cec:	bf00      	nop
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000360 	.word	0x20000360

08003cf8 <ESP_UART_ReceiveHandler>:
 * 			this function in the UART ISR.
 * @param 	None.
 * @retval	None.
 */
void ESP_UART_ReceiveHandler(void)
{
 8003cf8:	b598      	push	{r3, r4, r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
	ringBuffer_push(rx_buffer, ESP8266.UART_Receive());
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <ESP_UART_ReceiveHandler+0x1c>)
 8003cfe:	681c      	ldr	r4, [r3, #0]
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <ESP_UART_ReceiveHandler+0x20>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	4798      	blx	r3
 8003d06:	4603      	mov	r3, r0
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	f000 fcb5 	bl	800467a <ringBuffer_push>
}
 8003d10:	bf00      	nop
 8003d12:	bd98      	pop	{r3, r4, r7, pc}
 8003d14:	2000106c 	.word	0x2000106c
 8003d18:	20000360 	.word	0x20000360

08003d1c <Read_Response>:
 * @param 	response is a string is checked if it is in the ring buffer.
 * @retval	1: There is a string passed as a parameter in the ring buffer.
 * @retval	0: There is no string passed as a parameter in the ring buffer.
 */
uint32_t Read_Response(char * response)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <Read_Response+0x20>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fd2f 	bl	800478e <ringBuffer_lookFor>
 8003d30:	4603      	mov	r3, r0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	2000106c 	.word	0x2000106c

08003d40 <Wait_Response>:
 * @retval	FOUND			:There is a string passed as a parameter in the ring buffer.
 * @retval	TIMEOUT_ERROR	:It returns when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Wait_Response(char* response, uint32_t timeout)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 8003d4a:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <Wait_Response+0x74>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d108      	bne.n	8003d64 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 8003d52:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <Wait_Response+0x78>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	4798      	blx	r3
 8003d58:	4603      	mov	r3, r0
 8003d5a:	4a18      	ldr	r2, [pc, #96]	; (8003dbc <Wait_Response+0x7c>)
 8003d5c:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <Wait_Response+0x74>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 8003d64:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <Wait_Response+0x80>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fd0f 	bl	800478e <ringBuffer_lookFor>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d007      	beq.n	8003d86 <Wait_Response+0x46>
	{
		firstCall = 0;
 8003d76:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <Wait_Response+0x74>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <Wait_Response+0x7c>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
		return FOUND;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e012      	b.n	8003dac <Wait_Response+0x6c>
	}
	else if(ESP8266.getTick() - time >= timeout)
 8003d86:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <Wait_Response+0x78>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	4798      	blx	r3
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <Wait_Response+0x7c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d807      	bhi.n	8003daa <Wait_Response+0x6a>
	{
		firstCall = 0;
 8003d9a:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <Wait_Response+0x74>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <Wait_Response+0x7c>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <Wait_Response+0x6c>
	}
	else
	{
		return IDLE;
 8003daa:	2304      	movs	r3, #4
	}

}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	2000036c 	.word	0x2000036c
 8003db8:	20000360 	.word	0x20000360
 8003dbc:	20000370 	.word	0x20000370
 8003dc0:	2000106c 	.word	0x2000106c

08003dc4 <Connect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_Wifi(char* ssid, char* password)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b098      	sub	sp, #96	; 0x60
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
	char *command_buffer[3] =
 8003dce:	4a16      	ldr	r2, [pc, #88]	; (8003e28 <Connect_Wifi+0x64>)
 8003dd0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_CWMODE_STATION,
		AT_CWQAP,
		""
	};
	char *response_buffer[3] =
 8003dda:	4a14      	ldr	r2, [pc, #80]	; (8003e2c <Connect_Wifi+0x68>)
 8003ddc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003de0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003de2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};
	Status response_state = IDLE;
 8003de6:	2304      	movs	r3, #4
 8003de8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char wifi_buffer[50];

	sprintf(wifi_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003dec:	f107 0008 	add.w	r0, r7, #8
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a0e      	ldr	r2, [pc, #56]	; (8003e30 <Connect_Wifi+0x6c>)
 8003df8:	490e      	ldr	r1, [pc, #56]	; (8003e34 <Connect_Wifi+0x70>)
 8003dfa:	f01e fb8d 	bl	8022518 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003dfe:	f107 0308 	add.w	r3, r7, #8
 8003e02:	653b      	str	r3, [r7, #80]	; 0x50

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003e04:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003e08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 f82e 	bl	8003e70 <Command_Process>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	return response_state;
 8003e1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3758      	adds	r7, #88	; 0x58
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	08025074 	.word	0x08025074
 8003e2c:	08025080 	.word	0x08025080
 8003e30:	08025058 	.word	0x08025058
 8003e34:	08025064 	.word	0x08025064

08003e38 <Disconnect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about disconnect operation.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_Wifi(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
	char *command_buffer[1] = { AT_CWQAP };
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <Disconnect_Wifi+0x30>)
 8003e40:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8003e42:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <Disconnect_Wifi+0x34>)
 8003e44:	607b      	str	r3, [r7, #4]

	Status response_state = IDLE;
 8003e46:	2304      	movs	r3, #4
 8003e48:	73fb      	strb	r3, [r7, #15]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8003e4a:	1d39      	adds	r1, r7, #4
 8003e4c:	f107 0308 	add.w	r3, r7, #8
 8003e50:	2201      	movs	r2, #1
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 f80c 	bl	8003e70 <Command_Process>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]

}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	08025028 	.word	0x08025028
 8003e6c:	08025038 	.word	0x08025038

08003e70 <Command_Process>:
 * @retval	STATUS_ERROR	:It returns when ESP send the ERROR message or number of commands is equal zero.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Command_Process(char **commandArray, char **responseArray, uint8_t numberOfCommands)
{
 8003e70:	b590      	push	{r4, r7, lr}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	71fb      	strb	r3, [r7, #7]
	static uint8_t commandFlag  = 1, currentCommand = 0;
	Status response;

	if(!numberOfCommands || currentCommand >= numberOfCommands)
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <Command_Process+0x1e>
 8003e84:	4b41      	ldr	r3, [pc, #260]	; (8003f8c <Command_Process+0x11c>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	79fa      	ldrb	r2, [r7, #7]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d806      	bhi.n	8003e9c <Command_Process+0x2c>
	{
		ringBuffer_flush(rx_buffer);
 8003e8e:	4b40      	ldr	r3, [pc, #256]	; (8003f90 <Command_Process+0x120>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fc45 	bl	8004722 <ringBuffer_flush>
		return STATUS_ERROR;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e072      	b.n	8003f82 <Command_Process+0x112>
	}
	else
	{
		if(commandFlag)
 8003e9c:	4b3d      	ldr	r3, [pc, #244]	; (8003f94 <Command_Process+0x124>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d016      	beq.n	8003ed2 <Command_Process+0x62>
		{
			Send_AT_Command(commandArray[currentCommand],strlen(commandArray[currentCommand]));
 8003ea4:	4b39      	ldr	r3, [pc, #228]	; (8003f8c <Command_Process+0x11c>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4413      	add	r3, r2
 8003eae:	681c      	ldr	r4, [r3, #0]
 8003eb0:	4b36      	ldr	r3, [pc, #216]	; (8003f8c <Command_Process+0x11c>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4413      	add	r3, r2
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fc f9bd 	bl	800023c <strlen>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	f7ff ff06 	bl	8003cd8 <Send_AT_Command>
			commandFlag = 0;
 8003ecc:	4b31      	ldr	r3, [pc, #196]	; (8003f94 <Command_Process+0x124>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	701a      	strb	r2, [r3, #0]
		}
			response = Wait_Response(responseArray[currentCommand], TIMEOUT);
 8003ed2:	4b2e      	ldr	r3, [pc, #184]	; (8003f8c <Command_Process+0x11c>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	4413      	add	r3, r2
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f242 7110 	movw	r1, #10000	; 0x2710
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff ff2c 	bl	8003d40 <Wait_Response>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	75fb      	strb	r3, [r7, #23]

			if(Read_Response("ERROR"))
 8003eec:	482a      	ldr	r0, [pc, #168]	; (8003f98 <Command_Process+0x128>)
 8003eee:	f7ff ff15 	bl	8003d1c <Read_Response>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00c      	beq.n	8003f12 <Command_Process+0xa2>
			{
				commandFlag = 1;
 8003ef8:	4b26      	ldr	r3, [pc, #152]	; (8003f94 <Command_Process+0x124>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003efe:	4b23      	ldr	r3, [pc, #140]	; (8003f8c <Command_Process+0x11c>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003f04:	4b22      	ldr	r3, [pc, #136]	; (8003f90 <Command_Process+0x120>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fc0a 	bl	8004722 <ringBuffer_flush>
				return STATUS_ERROR;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e037      	b.n	8003f82 <Command_Process+0x112>
			}
			else if(response == IDLE)
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d101      	bne.n	8003f1c <Command_Process+0xac>
			{
				return response;
 8003f18:	7dfb      	ldrb	r3, [r7, #23]
 8003f1a:	e032      	b.n	8003f82 <Command_Process+0x112>
			}
			else if(response == FOUND)
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d123      	bne.n	8003f6a <Command_Process+0xfa>
			{
				if(currentCommand == (numberOfCommands-1))
 8003f22:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <Command_Process+0x11c>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d10c      	bne.n	8003f4a <Command_Process+0xda>
				{
					commandFlag = 1;
 8003f30:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <Command_Process+0x124>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
					currentCommand = 0;
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <Command_Process+0x11c>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003f3c:	4b14      	ldr	r3, [pc, #80]	; (8003f90 <Command_Process+0x120>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fbee 	bl	8004722 <ringBuffer_flush>
					return STATUS_OK;
 8003f46:	2302      	movs	r3, #2
 8003f48:	e01b      	b.n	8003f82 <Command_Process+0x112>
				}
				else
				{
					commandFlag = 1;
 8003f4a:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <Command_Process+0x124>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	701a      	strb	r2, [r3, #0]
					currentCommand += 1;
 8003f50:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <Command_Process+0x11c>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	3301      	adds	r3, #1
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <Command_Process+0x11c>)
 8003f5a:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <Command_Process+0x120>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fbde 	bl	8004722 <ringBuffer_flush>
					return IDLE;
 8003f66:	2304      	movs	r3, #4
 8003f68:	e00b      	b.n	8003f82 <Command_Process+0x112>
				}

			}
			else
			{
				commandFlag = 1;
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <Command_Process+0x124>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003f70:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <Command_Process+0x11c>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003f76:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <Command_Process+0x120>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fbd1 	bl	8004722 <ringBuffer_flush>
				return response;
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
			}
	}


}
 8003f82:	4618      	mov	r0, r3
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd90      	pop	{r4, r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000374 	.word	0x20000374
 8003f90:	2000106c 	.word	0x2000106c
 8003f94:	20000010 	.word	0x20000010
 8003f98:	0802508c 	.word	0x0802508c

08003f9c <Connect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_TCP_Server(const char* ip, const char* port)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b0a2      	sub	sp, #136	; 0x88
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
	Status response_state = IDLE;
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	char *command_buffer[2] =
 8003fac:	4a19      	ldr	r2, [pc, #100]	; (8004014 <Connect_TCP_Server+0x78>)
 8003fae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003fb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fb6:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		AT_CIPMUX_SINGLE,
		""
	};

	char *response_buffer[2] =
 8003fba:	4a17      	ldr	r2, [pc, #92]	; (8004018 <Connect_TCP_Server+0x7c>)
 8003fbc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fc4:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};

	char wifi_buffer[100] ={0};
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	f107 030c 	add.w	r3, r7, #12
 8003fd0:	2260      	movs	r2, #96	; 0x60
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f01e f8eb 	bl	80221b0 <memset>

	sprintf(wifi_buffer,"%s\"%s\",%s\r\n",AT_CIPSTART_TCP,ip,port);
 8003fda:	f107 0008 	add.w	r0, r7, #8
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a0d      	ldr	r2, [pc, #52]	; (800401c <Connect_TCP_Server+0x80>)
 8003fe6:	490e      	ldr	r1, [pc, #56]	; (8004020 <Connect_TCP_Server+0x84>)
 8003fe8:	f01e fa96 	bl	8022518 <siprintf>

	command_buffer[1] = wifi_buffer;
 8003fec:	f107 0308 	add.w	r3, r7, #8
 8003ff0:	67bb      	str	r3, [r7, #120]	; 0x78

	response_state = Command_Process(command_buffer, response_buffer, 2);
 8003ff2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003ff6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff ff37 	bl	8003e70 <Command_Process>
 8004002:	4603      	mov	r3, r0
 8004004:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	return response_state;
 8004008:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800400c:	4618      	mov	r0, r3
 800400e:	3780      	adds	r7, #128	; 0x80
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	080250b4 	.word	0x080250b4
 8004018:	080250bc 	.word	0x080250bc
 800401c:	08025094 	.word	0x08025094
 8004020:	080250a8 	.word	0x080250a8

08004024 <Disconnect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about disconnection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_TCP_Server(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
	Status response_state = IDLE;
 800402a:	2304      	movs	r3, #4
 800402c:	73fb      	strb	r3, [r7, #15]

	char *command_buffer[1] = { AT_CIPCLOSE };
 800402e:	4b09      	ldr	r3, [pc, #36]	; (8004054 <Disconnect_TCP_Server+0x30>)
 8004030:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <Disconnect_TCP_Server+0x34>)
 8004034:	607b      	str	r3, [r7, #4]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8004036:	1d39      	adds	r1, r7, #4
 8004038:	f107 0308 	add.w	r3, r7, #8
 800403c:	2201      	movs	r2, #1
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff ff16 	bl	8003e70 <Command_Process>
 8004044:	4603      	mov	r3, r0
 8004046:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8004048:	7bfb      	ldrb	r3, [r7, #15]

}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	080250c4 	.word	0x080250c4
 8004058:	08025038 	.word	0x08025038

0800405c <Send_TCP_Message>:
 * @retval	STATUS_ERROR	:There is an error about sending message.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Send_TCP_Message(char* message)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b096      	sub	sp, #88	; 0x58
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
	Status response_state = STATUS_ERROR;
 8004064:	2303      	movs	r3, #3
 8004066:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint32_t length=0;
 800406a:	2300      	movs	r3, #0
 800406c:	653b      	str	r3, [r7, #80]	; 0x50

	length = strlen(message);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fc f8e4 	bl	800023c <strlen>
 8004074:	6538      	str	r0, [r7, #80]	; 0x50

	char cipSendBuffer[50];

	sprintf(cipSendBuffer,"%s%ld\r\n",AT_CIPSEND,length);
 8004076:	f107 001c 	add.w	r0, r7, #28
 800407a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800407c:	4a10      	ldr	r2, [pc, #64]	; (80040c0 <Send_TCP_Message+0x64>)
 800407e:	4911      	ldr	r1, [pc, #68]	; (80040c4 <Send_TCP_Message+0x68>)
 8004080:	f01e fa4a 	bl	8022518 <siprintf>

	char *command_buffer[2];

	command_buffer[0] = cipSendBuffer;
 8004084:	f107 031c 	add.w	r3, r7, #28
 8004088:	617b      	str	r3, [r7, #20]
	command_buffer[1] = message;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	61bb      	str	r3, [r7, #24]

	char *response_buffer[2] =
 800408e:	4a0e      	ldr	r2, [pc, #56]	; (80040c8 <Send_TCP_Message+0x6c>)
 8004090:	f107 030c 	add.w	r3, r7, #12
 8004094:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004098:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	response_state = Command_Process(command_buffer, response_buffer, 2);
 800409c:	f107 010c 	add.w	r1, r7, #12
 80040a0:	f107 0314 	add.w	r3, r7, #20
 80040a4:	2202      	movs	r2, #2
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff fee2 	bl	8003e70 <Command_Process>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	return response_state;
 80040b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57

}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3758      	adds	r7, #88	; 0x58
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	080250d4 	.word	0x080250d4
 80040c4:	080250e0 	.word	0x080250e0
 80040c8:	080250e8 	.word	0x080250e8

080040cc <Send_TCP_Bytes>:

Status Send_TCP_Bytes(uint8_t* buffer, size_t size)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b094      	sub	sp, #80	; 0x50
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]

	static int32_t isFirstCall = 0,commandCount=0;
	Status response = IDLE;
 80040d6:	2304      	movs	r3, #4
 80040d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	char cipSendBuffer[50];

	int32_t length = sprintf(cipSendBuffer,"%s%d\r\n",AT_CIPSEND,size);
 80040dc:	f107 0014 	add.w	r0, r7, #20
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	4a27      	ldr	r2, [pc, #156]	; (8004180 <Send_TCP_Bytes+0xb4>)
 80040e4:	4927      	ldr	r1, [pc, #156]	; (8004184 <Send_TCP_Bytes+0xb8>)
 80040e6:	f01e fa17 	bl	8022518 <siprintf>
 80040ea:	64b8      	str	r0, [r7, #72]	; 0x48

	char *response_buffer[2] =
 80040ec:	4a26      	ldr	r2, [pc, #152]	; (8004188 <Send_TCP_Bytes+0xbc>)
 80040ee:	f107 030c 	add.w	r3, r7, #12
 80040f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040f6:	e883 0003 	stmia.w	r3, {r0, r1}
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};


	if(!isFirstCall)
 80040fa:	4b24      	ldr	r3, [pc, #144]	; (800418c <Send_TCP_Bytes+0xc0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d109      	bne.n	8004116 <Send_TCP_Bytes+0x4a>
	{
		Send_AT_Command(cipSendBuffer, length);
 8004102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004104:	f107 0314 	add.w	r3, r7, #20
 8004108:	4611      	mov	r1, r2
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fde4 	bl	8003cd8 <Send_AT_Command>

		isFirstCall = 1;
 8004110:	4b1e      	ldr	r3, [pc, #120]	; (800418c <Send_TCP_Bytes+0xc0>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]
	}

	response = Wait_Response(response_buffer[commandCount], TIMEOUT);
 8004116:	4b1e      	ldr	r3, [pc, #120]	; (8004190 <Send_TCP_Bytes+0xc4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004120:	4413      	add	r3, r2
 8004122:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004126:	f242 7110 	movw	r1, #10000	; 0x2710
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff fe08 	bl	8003d40 <Wait_Response>
 8004130:	4603      	mov	r3, r0
 8004132:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

if(response == FOUND)
 8004136:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800413a:	2b00      	cmp	r3, #0
 800413c:	d119      	bne.n	8004172 <Send_TCP_Bytes+0xa6>
	{
		if(!commandCount)
 800413e:	4b14      	ldr	r3, [pc, #80]	; (8004190 <Send_TCP_Bytes+0xc4>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10c      	bne.n	8004160 <Send_TCP_Bytes+0x94>
		{
			Send_AT_Command(buffer, size);
 8004146:	6839      	ldr	r1, [r7, #0]
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff fdc5 	bl	8003cd8 <Send_AT_Command>
			commandCount++;
 800414e:	4b10      	ldr	r3, [pc, #64]	; (8004190 <Send_TCP_Bytes+0xc4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3301      	adds	r3, #1
 8004154:	4a0e      	ldr	r2, [pc, #56]	; (8004190 <Send_TCP_Bytes+0xc4>)
 8004156:	6013      	str	r3, [r2, #0]
			response = IDLE;
 8004158:	2304      	movs	r3, #4
 800415a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800415e:	e008      	b.n	8004172 <Send_TCP_Bytes+0xa6>
		}
		else
		{
			commandCount = 0;
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <Send_TCP_Bytes+0xc4>)
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
			isFirstCall = 0;
 8004166:	4b09      	ldr	r3, [pc, #36]	; (800418c <Send_TCP_Bytes+0xc0>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
			response = STATUS_OK;
 800416c:	2302      	movs	r3, #2
 800416e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		}

	}

	return response;
 8004172:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f

}
 8004176:	4618      	mov	r0, r3
 8004178:	3750      	adds	r7, #80	; 0x50
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	080250d4 	.word	0x080250d4
 8004184:	080250f0 	.word	0x080250f0
 8004188:	080250e8 	.word	0x080250e8
 800418c:	20000378 	.word	0x20000378
 8004190:	2000037c 	.word	0x2000037c

08004194 <Read_TCP_Message>:
 * @param 	receviedMessage : If a message is received, it is assigned to receivedMessage.
 * @retval	STATUS_OK		:The message has been read successfully.
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 */
Status Read_TCP_Message(char* receivedMessage)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

	char *substring = strstr((char*)rx_buffer->buffer,"+IPD,");
 800419c:	4b2d      	ldr	r3, [pc, #180]	; (8004254 <Read_TCP_Message+0xc0>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	492d      	ldr	r1, [pc, #180]	; (8004258 <Read_TCP_Message+0xc4>)
 80041a4:	4618      	mov	r0, r3
 80041a6:	f01e ff81 	bl	80230ac <strstr>
 80041aa:	6138      	str	r0, [r7, #16]

	char messageLengthString[3];

	uint32_t messageLength=0,index=0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	2300      	movs	r3, #0
 80041b2:	61fb      	str	r3, [r7, #28]


	if(substring != NULL)
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d042      	beq.n	8004240 <Read_TCP_Message+0xac>
	{
		for(uint8_t i=0;i<3;i++)
 80041ba:	2300      	movs	r3, #0
 80041bc:	76fb      	strb	r3, [r7, #27]
 80041be:	e017      	b.n	80041f0 <Read_TCP_Message+0x5c>
		{
			if(*(substring+5+i) == ':')
 80041c0:	7efb      	ldrb	r3, [r7, #27]
 80041c2:	3305      	adds	r3, #5
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4413      	add	r3, r2
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b3a      	cmp	r3, #58	; 0x3a
 80041cc:	d014      	beq.n	80041f8 <Read_TCP_Message+0x64>
				break;
			messageLengthString[i] = *(substring+5+i);
 80041ce:	7efb      	ldrb	r3, [r7, #27]
 80041d0:	3305      	adds	r3, #5
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	441a      	add	r2, r3
 80041d6:	7efb      	ldrb	r3, [r7, #27]
 80041d8:	7812      	ldrb	r2, [r2, #0]
 80041da:	f107 0120 	add.w	r1, r7, #32
 80041de:	440b      	add	r3, r1
 80041e0:	f803 2c18 	strb.w	r2, [r3, #-24]
			index += 1;
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	3301      	adds	r3, #1
 80041e8:	61fb      	str	r3, [r7, #28]
		for(uint8_t i=0;i<3;i++)
 80041ea:	7efb      	ldrb	r3, [r7, #27]
 80041ec:	3301      	adds	r3, #1
 80041ee:	76fb      	strb	r3, [r7, #27]
 80041f0:	7efb      	ldrb	r3, [r7, #27]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d9e4      	bls.n	80041c0 <Read_TCP_Message+0x2c>
 80041f6:	e000      	b.n	80041fa <Read_TCP_Message+0x66>
				break;
 80041f8:	bf00      	nop

		}

		messageLength = atoi(messageLengthString);
 80041fa:	f107 0308 	add.w	r3, r7, #8
 80041fe:	4618      	mov	r0, r3
 8004200:	f01d f9eb 	bl	80215da <atoi>
 8004204:	4603      	mov	r3, r0
 8004206:	60fb      	str	r3, [r7, #12]

		for(uint32_t i=0;i<messageLength;i++)
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	e00d      	b.n	800422a <Read_TCP_Message+0x96>
		{
			receivedMessage[i] = *(substring+6+index+i);
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	4413      	add	r3, r2
 8004214:	3306      	adds	r3, #6
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	441a      	add	r2, r3
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	440b      	add	r3, r1
 8004220:	7812      	ldrb	r2, [r2, #0]
 8004222:	701a      	strb	r2, [r3, #0]
		for(uint32_t i=0;i<messageLength;i++)
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	3301      	adds	r3, #1
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	429a      	cmp	r2, r3
 8004230:	d3ed      	bcc.n	800420e <Read_TCP_Message+0x7a>
		}
		ringBuffer_flush(rx_buffer);
 8004232:	4b08      	ldr	r3, [pc, #32]	; (8004254 <Read_TCP_Message+0xc0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fa73 	bl	8004722 <ringBuffer_flush>
		return STATUS_OK;
 800423c:	2302      	movs	r3, #2
 800423e:	e005      	b.n	800424c <Read_TCP_Message+0xb8>


	}
	else
	{
		ringBuffer_flush(rx_buffer);
 8004240:	4b04      	ldr	r3, [pc, #16]	; (8004254 <Read_TCP_Message+0xc0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fa6c 	bl	8004722 <ringBuffer_flush>
		return STATUS_ERROR;
 800424a:	2303      	movs	r3, #3
	}



}
 800424c:	4618      	mov	r0, r3
 800424e:	3720      	adds	r7, #32
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	2000106c 	.word	0x2000106c
 8004258:	080250f8 	.word	0x080250f8

0800425c <Wait_TCP_Message>:
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE
 */
Status Wait_TCP_Message(char* receivedMessage, uint32_t timeout)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
	static uint8_t firstCall = 1;
	static uint32_t time = 0;

	if(firstCall)
 8004266:	4b19      	ldr	r3, [pc, #100]	; (80042cc <Wait_TCP_Message+0x70>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d008      	beq.n	8004280 <Wait_TCP_Message+0x24>
	{
		time = ESP8266.getTick();
 800426e:	4b18      	ldr	r3, [pc, #96]	; (80042d0 <Wait_TCP_Message+0x74>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	4798      	blx	r3
 8004274:	4603      	mov	r3, r0
 8004276:	4a17      	ldr	r2, [pc, #92]	; (80042d4 <Wait_TCP_Message+0x78>)
 8004278:	6013      	str	r3, [r2, #0]
		firstCall = 0;
 800427a:	4b14      	ldr	r3, [pc, #80]	; (80042cc <Wait_TCP_Message+0x70>)
 800427c:	2200      	movs	r2, #0
 800427e:	701a      	strb	r2, [r3, #0]
	}

	if(Read_TCP_Message(receivedMessage) == STATUS_OK)
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff ff87 	bl	8004194 <Read_TCP_Message>
 8004286:	4603      	mov	r3, r0
 8004288:	2b02      	cmp	r3, #2
 800428a:	d107      	bne.n	800429c <Wait_TCP_Message+0x40>
	{
		time = 0;
 800428c:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <Wait_TCP_Message+0x78>)
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 8004292:	4b0e      	ldr	r3, [pc, #56]	; (80042cc <Wait_TCP_Message+0x70>)
 8004294:	2201      	movs	r2, #1
 8004296:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
 8004298:	2302      	movs	r3, #2
 800429a:	e012      	b.n	80042c2 <Wait_TCP_Message+0x66>
	}
	else if(ESP8266.getTick()-time >= timeout)
 800429c:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <Wait_TCP_Message+0x74>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	4798      	blx	r3
 80042a2:	4602      	mov	r2, r0
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <Wait_TCP_Message+0x78>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d807      	bhi.n	80042c0 <Wait_TCP_Message+0x64>
	{
		time = 0;
 80042b0:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <Wait_TCP_Message+0x78>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 80042b6:	4b05      	ldr	r3, [pc, #20]	; (80042cc <Wait_TCP_Message+0x70>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	701a      	strb	r2, [r3, #0]
		return TIMEOUT_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <Wait_TCP_Message+0x66>
	}
	else
		return IDLE;
 80042c0:	2304      	movs	r3, #4

}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000011 	.word	0x20000011
 80042d0:	20000360 	.word	0x20000360
 80042d4:	20000380 	.word	0x20000380

080042d8 <mqtt_encode_packet>:

#include <string.h>
#include "mqtt.h"


int32_t mqtt_encode_packet(uint8_t *buffer, void *packet, mqtt_packet_types packetType ){
 80042d8:	b590      	push	{r4, r7, lr}
 80042da:	b08f      	sub	sp, #60	; 0x3c
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	4613      	mov	r3, r2
 80042e4:	71fb      	strb	r3, [r7, #7]

	if(packetType == CONNECT_PACKET)
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f040 80a4 	bne.w	8004436 <mqtt_encode_packet+0x15e>
	{
		int32_t index = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	637b      	str	r3, [r7, #52]	; 0x34

		MQTT_Connect_Packet *connectPacket = (MQTT_Connect_Packet*)packet;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	617b      	str	r3, [r7, #20]

		buffer[index++] = connectPacket->ConnectByte;
 80042f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	637a      	str	r2, [r7, #52]	; 0x34
 80042fc:	461a      	mov	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4413      	add	r3, r2
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	7812      	ldrb	r2, [r2, #0]
 8004306:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->RemainLength;
 8004308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	637a      	str	r2, [r7, #52]	; 0x34
 800430e:	461a      	mov	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4413      	add	r3, r2
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	7852      	ldrb	r2, [r2, #1]
 8004318:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->ProtocolNameLength>>8;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	885b      	ldrh	r3, [r3, #2]
 800431e:	0a1b      	lsrs	r3, r3, #8
 8004320:	b299      	uxth	r1, r3
 8004322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	637a      	str	r2, [r7, #52]	; 0x34
 8004328:	461a      	mov	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4413      	add	r3, r2
 800432e:	b2ca      	uxtb	r2, r1
 8004330:	701a      	strb	r2, [r3, #0]
		buffer[index++]= connectPacket->ProtocolNameLength & 0xFF;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	8859      	ldrh	r1, [r3, #2]
 8004336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	637a      	str	r2, [r7, #52]	; 0x34
 800433c:	461a      	mov	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4413      	add	r3, r2
 8004342:	b2ca      	uxtb	r2, r1
 8004344:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ProtocolNameLength;i++)
 8004346:	2300      	movs	r3, #0
 8004348:	867b      	strh	r3, [r7, #50]	; 0x32
 800434a:	e013      	b.n	8004374 <mqtt_encode_packet+0x9c>
		{
			if(i==4)
 800434c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800434e:	2b04      	cmp	r3, #4
 8004350:	d102      	bne.n	8004358 <mqtt_encode_packet+0x80>
				return -1;
 8004352:	f04f 33ff 	mov.w	r3, #4294967295
 8004356:	e14b      	b.n	80045f0 <mqtt_encode_packet+0x318>
			buffer[index++] = connectPacket->ProtocolName[i];
 8004358:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800435a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435c:	1c59      	adds	r1, r3, #1
 800435e:	6379      	str	r1, [r7, #52]	; 0x34
 8004360:	4619      	mov	r1, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	440b      	add	r3, r1
 8004366:	6979      	ldr	r1, [r7, #20]
 8004368:	440a      	add	r2, r1
 800436a:	7912      	ldrb	r2, [r2, #4]
 800436c:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ProtocolNameLength;i++)
 800436e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004370:	3301      	adds	r3, #1
 8004372:	867b      	strh	r3, [r7, #50]	; 0x32
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	885b      	ldrh	r3, [r3, #2]
 8004378:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800437a:	429a      	cmp	r2, r3
 800437c:	d3e6      	bcc.n	800434c <mqtt_encode_packet+0x74>
		}
		buffer[index++] = connectPacket->Level;
 800437e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	637a      	str	r2, [r7, #52]	; 0x34
 8004384:	461a      	mov	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4413      	add	r3, r2
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	7a12      	ldrb	r2, [r2, #8]
 800438e:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->Flag;
 8004390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	637a      	str	r2, [r7, #52]	; 0x34
 8004396:	461a      	mov	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	7a52      	ldrb	r2, [r2, #9]
 80043a0:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->KeepAlive >> 8;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	895b      	ldrh	r3, [r3, #10]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b299      	uxth	r1, r3
 80043aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	637a      	str	r2, [r7, #52]	; 0x34
 80043b0:	461a      	mov	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4413      	add	r3, r2
 80043b6:	b2ca      	uxtb	r2, r1
 80043b8:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->KeepAlive & 0xFF;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	8959      	ldrh	r1, [r3, #10]
 80043be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	637a      	str	r2, [r7, #52]	; 0x34
 80043c4:	461a      	mov	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4413      	add	r3, r2
 80043ca:	b2ca      	uxtb	r2, r1
 80043cc:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->ClientIDLength >> 8;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	899b      	ldrh	r3, [r3, #12]
 80043d2:	0a1b      	lsrs	r3, r3, #8
 80043d4:	b299      	uxth	r1, r3
 80043d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	637a      	str	r2, [r7, #52]	; 0x34
 80043dc:	461a      	mov	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4413      	add	r3, r2
 80043e2:	b2ca      	uxtb	r2, r1
 80043e4:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->ClientIDLength & 0xFF;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	8999      	ldrh	r1, [r3, #12]
 80043ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	637a      	str	r2, [r7, #52]	; 0x34
 80043f0:	461a      	mov	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4413      	add	r3, r2
 80043f6:	b2ca      	uxtb	r2, r1
 80043f8:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ClientIDLength;i++)
 80043fa:	2300      	movs	r3, #0
 80043fc:	863b      	strh	r3, [r7, #48]	; 0x30
 80043fe:	e013      	b.n	8004428 <mqtt_encode_packet+0x150>
		{
			if(i == MAX_LENGTH_OF_CLIENT_ID)
 8004400:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004402:	2b32      	cmp	r3, #50	; 0x32
 8004404:	d102      	bne.n	800440c <mqtt_encode_packet+0x134>
				return -1;
 8004406:	f04f 33ff 	mov.w	r3, #4294967295
 800440a:	e0f1      	b.n	80045f0 <mqtt_encode_packet+0x318>
			buffer[index++] = connectPacket->ClientID[i];
 800440c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800440e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004410:	1c59      	adds	r1, r3, #1
 8004412:	6379      	str	r1, [r7, #52]	; 0x34
 8004414:	4619      	mov	r1, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	440b      	add	r3, r1
 800441a:	6979      	ldr	r1, [r7, #20]
 800441c:	440a      	add	r2, r1
 800441e:	7b92      	ldrb	r2, [r2, #14]
 8004420:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ClientIDLength;i++)
 8004422:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004424:	3301      	adds	r3, #1
 8004426:	863b      	strh	r3, [r7, #48]	; 0x30
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	899b      	ldrh	r3, [r3, #12]
 800442c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800442e:	429a      	cmp	r2, r3
 8004430:	d3e6      	bcc.n	8004400 <mqtt_encode_packet+0x128>
		}

		return index;
 8004432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004434:	e0dc      	b.n	80045f0 <mqtt_encode_packet+0x318>

	}
	else if(packetType == SUBSCRIBE_PACKET)
 8004436:	79fb      	ldrb	r3, [r7, #7]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d169      	bne.n	8004510 <mqtt_encode_packet+0x238>
	{

		int32_t index = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	62fb      	str	r3, [r7, #44]	; 0x2c

		MQTT_Subscribe_Packet *subscribePacket = (MQTT_Subscribe_Packet*)packet;
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	61bb      	str	r3, [r7, #24]

		buffer[index++] = subscribePacket->subscribePacketByte;
 8004444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	62fa      	str	r2, [r7, #44]	; 0x2c
 800444a:	461a      	mov	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4413      	add	r3, r2
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	7812      	ldrb	r2, [r2, #0]
 8004454:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->remainLength;
 8004456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800445c:	461a      	mov	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4413      	add	r3, r2
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	7852      	ldrb	r2, [r2, #1]
 8004466:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->packetID >> 8;
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	885b      	ldrh	r3, [r3, #2]
 800446c:	0a1b      	lsrs	r3, r3, #8
 800446e:	b299      	uxth	r1, r3
 8004470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004476:	461a      	mov	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	b2ca      	uxtb	r2, r1
 800447e:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->packetID & 0xFF;
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	8859      	ldrh	r1, [r3, #2]
 8004484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	62fa      	str	r2, [r7, #44]	; 0x2c
 800448a:	461a      	mov	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	b2ca      	uxtb	r2, r1
 8004492:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->topicLength >> 8;
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	889b      	ldrh	r3, [r3, #4]
 8004498:	0a1b      	lsrs	r3, r3, #8
 800449a:	b299      	uxth	r1, r3
 800449c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044a2:	461a      	mov	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	b2ca      	uxtb	r2, r1
 80044aa:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->topicLength & 0xFF;
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	8899      	ldrh	r1, [r3, #4]
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044b6:	461a      	mov	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4413      	add	r3, r2
 80044bc:	b2ca      	uxtb	r2, r1
 80044be:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<subscribePacket->topicLength;i++)
 80044c0:	2300      	movs	r3, #0
 80044c2:	857b      	strh	r3, [r7, #42]	; 0x2a
 80044c4:	e013      	b.n	80044ee <mqtt_encode_packet+0x216>
		{
			if(i == MAX_LENGTH_OF_TOPIC_NAME)
 80044c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80044c8:	2b32      	cmp	r3, #50	; 0x32
 80044ca:	d102      	bne.n	80044d2 <mqtt_encode_packet+0x1fa>
				return -1;
 80044cc:	f04f 33ff 	mov.w	r3, #4294967295
 80044d0:	e08e      	b.n	80045f0 <mqtt_encode_packet+0x318>
			buffer[index++] = subscribePacket->topic[i];
 80044d2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80044d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d6:	1c59      	adds	r1, r3, #1
 80044d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80044da:	4619      	mov	r1, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	440b      	add	r3, r1
 80044e0:	69b9      	ldr	r1, [r7, #24]
 80044e2:	440a      	add	r2, r1
 80044e4:	7992      	ldrb	r2, [r2, #6]
 80044e6:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<subscribePacket->topicLength;i++)
 80044e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80044ea:	3301      	adds	r3, #1
 80044ec:	857b      	strh	r3, [r7, #42]	; 0x2a
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	889b      	ldrh	r3, [r3, #4]
 80044f2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d3e6      	bcc.n	80044c6 <mqtt_encode_packet+0x1ee>
		}

		buffer[index++] = subscribePacket->Qos;
 80044f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044fe:	461a      	mov	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800450a:	701a      	strb	r2, [r3, #0]

		return index;
 800450c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450e:	e06f      	b.n	80045f0 <mqtt_encode_packet+0x318>


	}
	else if(packetType == PUBLISH_PACKET)
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d16a      	bne.n	80045ec <mqtt_encode_packet+0x314>
	{
		int32_t index = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	627b      	str	r3, [r7, #36]	; 0x24

		MQTT_Publish_Packet *publishPacket = (MQTT_Publish_Packet*)packet;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	61fb      	str	r3, [r7, #28]

		buffer[index++] = publishPacket->publishPacketByte;
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	627a      	str	r2, [r7, #36]	; 0x24
 8004524:	461a      	mov	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4413      	add	r3, r2
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	7812      	ldrb	r2, [r2, #0]
 800452e:	701a      	strb	r2, [r3, #0]
		buffer[index++] = publishPacket->remainLength;
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	627a      	str	r2, [r7, #36]	; 0x24
 8004536:	461a      	mov	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4413      	add	r3, r2
 800453c:	69fa      	ldr	r2, [r7, #28]
 800453e:	7852      	ldrb	r2, [r2, #1]
 8004540:	701a      	strb	r2, [r3, #0]
		buffer[index++] = publishPacket->topicLength >> 8;
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	885b      	ldrh	r3, [r3, #2]
 8004546:	0a1b      	lsrs	r3, r3, #8
 8004548:	b299      	uxth	r1, r3
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	627a      	str	r2, [r7, #36]	; 0x24
 8004550:	461a      	mov	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4413      	add	r3, r2
 8004556:	b2ca      	uxtb	r2, r1
 8004558:	701a      	strb	r2, [r3, #0]
		buffer[index++] = publishPacket->topicLength & 0xFF;
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	8859      	ldrh	r1, [r3, #2]
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	627a      	str	r2, [r7, #36]	; 0x24
 8004564:	461a      	mov	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4413      	add	r3, r2
 800456a:	b2ca      	uxtb	r2, r1
 800456c:	701a      	strb	r2, [r3, #0]

		for(uint16_t i=0;i<publishPacket->topicLength;i++)
 800456e:	2300      	movs	r3, #0
 8004570:	847b      	strh	r3, [r7, #34]	; 0x22
 8004572:	e013      	b.n	800459c <mqtt_encode_packet+0x2c4>
		{
			if(i == MAX_LENGTH_OF_TOPIC_NAME)
 8004574:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004576:	2b32      	cmp	r3, #50	; 0x32
 8004578:	d102      	bne.n	8004580 <mqtt_encode_packet+0x2a8>
				return -1;
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
 800457e:	e037      	b.n	80045f0 <mqtt_encode_packet+0x318>

			buffer[index++] = publishPacket->topic[i];
 8004580:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	1c59      	adds	r1, r3, #1
 8004586:	6279      	str	r1, [r7, #36]	; 0x24
 8004588:	4619      	mov	r1, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	440b      	add	r3, r1
 800458e:	69f9      	ldr	r1, [r7, #28]
 8004590:	440a      	add	r2, r1
 8004592:	7912      	ldrb	r2, [r2, #4]
 8004594:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<publishPacket->topicLength;i++)
 8004596:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004598:	3301      	adds	r3, #1
 800459a:	847b      	strh	r3, [r7, #34]	; 0x22
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	885b      	ldrh	r3, [r3, #2]
 80045a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d3e6      	bcc.n	8004574 <mqtt_encode_packet+0x29c>
		}
		for(uint16_t i=0; i< strlen(publishPacket->message);i++)
 80045a6:	2300      	movs	r3, #0
 80045a8:	843b      	strh	r3, [r7, #32]
 80045aa:	e014      	b.n	80045d6 <mqtt_encode_packet+0x2fe>
		{
			if(i == MAX_LENGTH_OF_TOPIC_MESSAGE)
 80045ac:	8c3b      	ldrh	r3, [r7, #32]
 80045ae:	2b64      	cmp	r3, #100	; 0x64
 80045b0:	d102      	bne.n	80045b8 <mqtt_encode_packet+0x2e0>
				return -1;
 80045b2:	f04f 33ff 	mov.w	r3, #4294967295
 80045b6:	e01b      	b.n	80045f0 <mqtt_encode_packet+0x318>

			buffer[index++] = publishPacket->message[i];
 80045b8:	8c3a      	ldrh	r2, [r7, #32]
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	1c59      	adds	r1, r3, #1
 80045be:	6279      	str	r1, [r7, #36]	; 0x24
 80045c0:	4619      	mov	r1, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	440b      	add	r3, r1
 80045c6:	69f9      	ldr	r1, [r7, #28]
 80045c8:	440a      	add	r2, r1
 80045ca:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80045ce:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0; i< strlen(publishPacket->message);i++)
 80045d0:	8c3b      	ldrh	r3, [r7, #32]
 80045d2:	3301      	adds	r3, #1
 80045d4:	843b      	strh	r3, [r7, #32]
 80045d6:	8c3c      	ldrh	r4, [r7, #32]
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	3336      	adds	r3, #54	; 0x36
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fb fe2d 	bl	800023c <strlen>
 80045e2:	4603      	mov	r3, r0
 80045e4:	429c      	cmp	r4, r3
 80045e6:	d3e1      	bcc.n	80045ac <mqtt_encode_packet+0x2d4>
		}
		return index;
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	e001      	b.n	80045f0 <mqtt_encode_packet+0x318>
	}

	return -1;
 80045ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	373c      	adds	r7, #60	; 0x3c
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd90      	pop	{r4, r7, pc}

080045f8 <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8004600:	2010      	movs	r0, #16
 8004602:	f01d fdb7 	bl	8022174 <malloc>
 8004606:	4603      	mov	r3, r0
 8004608:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <ringBuffer_init+0x1c>
	{
		// Error
		return 0;
 8004610:	2300      	movs	r3, #0
 8004612:	e017      	b.n	8004644 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8004626:	2101      	movs	r1, #1
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f01c ffdb 	bl	80215e4 <calloc>
 800462e:	4603      	mov	r3, r0
 8004630:	461a      	mov	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <ringBuffer_init+0x4a>
		{
			// Error
			return 0;
 800463e:	2300      	movs	r3, #0
 8004640:	e000      	b.n	8004644 <ringBuffer_init+0x4c>
		}

	return rBuf;
 8004642:	68fb      	ldr	r3, [r7, #12]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00b      	beq.n	8004672 <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d004      	beq.n	800466c <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	4618      	mov	r0, r3
 8004668:	f01d fd8c 	bl	8022184 <free>
		}
		free(buffer);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f01d fd89 	bl	8022184 <free>
	}
}
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	460b      	mov	r3, r1
 8004684:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	3b01      	subs	r3, #1
 8004690:	429a      	cmp	r2, r3
 8004692:	d00c      	beq.n	80046ae <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4413      	add	r3, r2
 800469e:	78fa      	ldrb	r2, [r7, #3]
 80046a0:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 80046ac:	e009      	b.n	80046c2 <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4413      	add	r3, r2
 80046b8:	78fa      	ldrb	r2, [r7, #3]
 80046ba:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b085      	sub	sp, #20
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	3b01      	subs	r3, #1
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d00d      	beq.n	8004700 <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	4413      	add	r3, r2
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	605a      	str	r2, [r3, #4]
		return data;
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	e00a      	b.n	8004716 <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4413      	add	r3, r2
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	605a      	str	r2, [r3, #4]
		return data;
 8004714:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,(uint8_t)0x00,(size_t)ringBuffer->size);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68d8      	ldr	r0, [r3, #12]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	461a      	mov	r2, r3
 8004734:	2100      	movs	r1, #0
 8004736:	f01d fd3b 	bl	80221b0 <memset>
	ringBuffer->head = ringBuffer->tail = 0;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	605a      	str	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	601a      	str	r2, [r3, #0]
}
 8004748:	bf00      	nop
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	e00a      	b.n	8004776 <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	4413      	add	r3, r2
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	4619      	mov	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff ff85 	bl	800467a <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3301      	adds	r3, #1
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	6838      	ldr	r0, [r7, #0]
 8004778:	f7fb fd60 	bl	800023c <strlen>
 800477c:	4602      	mov	r2, r0
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	429a      	cmp	r2, r3
 8004782:	d8ed      	bhi.n	8004760 <ringBuffer_pushArray+0x10>
}
 8004784:	bf00      	nop
 8004786:	bf00      	nop
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * @retval	0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	6839      	ldr	r1, [r7, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f01e fc84 	bl	80230ac <strstr>
 80047a4:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <ringBuffer_lookFor+0x22>
		return 1;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <ringBuffer_lookFor+0x24>
	else
		return 0;
 80047b0:	2300      	movs	r3, #0

}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b082      	sub	sp, #8
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 80047da:	2032      	movs	r0, #50	; 0x32
 80047dc:	f7ff ff0c 	bl	80045f8 <ringBuffer_init>
 80047e0:	4602      	mov	r2, r0
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	605a      	str	r2, [r3, #4]

	}
 80047e6:	bf00      	nop
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff ff26 	bl	800464c <ringBuffer_deInit>
	}
 8004800:	bf00      	nop
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4618      	mov	r0, r3
 8004814:	f011 fbf4 	bl	8016000 <_ZN5UtestC1Ev>
 8004818:	4a03      	ldr	r2, [pc, #12]	; (8004828 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4618      	mov	r0, r3
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	0802a36c 	.word	0x0802a36c

0800482c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	4a05      	ldr	r2, [pc, #20]	; (800484c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4618      	mov	r0, r3
 800483e:	f011 fbef 	bl	8016020 <_ZN5UtestD1Ev>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	0802a36c 	.word	0x0802a36c

08004850 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff ffe7 	bl	800482c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800485e:	2108      	movs	r1, #8
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f007 fc11 	bl	800c088 <_ZdlPvj>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	605a      	str	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff ffbe 	bl	8004808 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800488c:	4a03      	ldr	r2, [pc, #12]	; (800489c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	0802a34c 	.word	0x0802a34c

080048a0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 80048a0:	b590      	push	{r4, r7, lr}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	222c      	movs	r2, #44	; 0x2c
 80048aa:	4906      	ldr	r1, [pc, #24]	; (80048c4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 80048ac:	2008      	movs	r0, #8
 80048ae:	f007 fbd7 	bl	800c060 <_ZnwjPKci>
 80048b2:	4604      	mov	r4, r0
 80048b4:	4620      	mov	r0, r4
 80048b6:	f7ff ffdb 	bl	8004870 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 80048ba:	4623      	mov	r3, r4
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd90      	pop	{r4, r7, pc}
 80048c4:	08025180 	.word	0x08025180

080048c8 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f00f ffb2 	bl	801483c <_ZN10UtestShellC1Ev>
 80048d8:	4a03      	ldr	r2, [pc, #12]	; (80048e8 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	0802a2a0 	.word	0x0802a2a0

080048ec <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 80048ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af04      	add	r7, sp, #16
 80048f2:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 80048f4:	f011 fb5a 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 80048f8:	4604      	mov	r4, r0
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	3338      	adds	r3, #56	; 0x38
 80048fe:	681d      	ldr	r5, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	461e      	mov	r6, r3
 8004908:	f011 fb60 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800490c:	4603      	mov	r3, r0
 800490e:	9302      	str	r3, [sp, #8]
 8004910:	232f      	movs	r3, #47	; 0x2f
 8004912:	9301      	str	r3, [sp, #4]
 8004914:	4b2a      	ldr	r3, [pc, #168]	; (80049c0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	4b2a      	ldr	r3, [pc, #168]	; (80049c4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 800491a:	4632      	mov	r2, r6
 800491c:	2132      	movs	r1, #50	; 0x32
 800491e:	4620      	mov	r0, r4
 8004920:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 8004922:	f011 fb43 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8004926:	4604      	mov	r4, r0
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	3320      	adds	r3, #32
 800492c:	681d      	ldr	r5, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	bf14      	ite	ne
 8004938:	2301      	movne	r3, #1
 800493a:	2300      	moveq	r3, #0
 800493c:	b2de      	uxtb	r6, r3
 800493e:	f011 fb45 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004942:	4603      	mov	r3, r0
 8004944:	9303      	str	r3, [sp, #12]
 8004946:	2330      	movs	r3, #48	; 0x30
 8004948:	9302      	str	r3, [sp, #8]
 800494a:	4b1d      	ldr	r3, [pc, #116]	; (80049c0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	2300      	movs	r3, #0
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	4b1d      	ldr	r3, [pc, #116]	; (80049c8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8004954:	4a1d      	ldr	r2, [pc, #116]	; (80049cc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 8004956:	4631      	mov	r1, r6
 8004958:	4620      	mov	r0, r4
 800495a:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 800495c:	f011 fb26 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8004960:	4604      	mov	r4, r0
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	3338      	adds	r3, #56	; 0x38
 8004966:	681d      	ldr	r5, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	461e      	mov	r6, r3
 8004970:	f011 fb2c 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004974:	4603      	mov	r3, r0
 8004976:	9302      	str	r3, [sp, #8]
 8004978:	2331      	movs	r3, #49	; 0x31
 800497a:	9301      	str	r3, [sp, #4]
 800497c:	4b10      	ldr	r3, [pc, #64]	; (80049c0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	4b13      	ldr	r3, [pc, #76]	; (80049d0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 8004982:	4632      	mov	r2, r6
 8004984:	2100      	movs	r1, #0
 8004986:	4620      	mov	r0, r4
 8004988:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 800498a:	f011 fb0f 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 800498e:	4604      	mov	r4, r0
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	3338      	adds	r3, #56	; 0x38
 8004994:	681d      	ldr	r5, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	461e      	mov	r6, r3
 800499e:	f011 fb15 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80049a2:	4603      	mov	r3, r0
 80049a4:	9302      	str	r3, [sp, #8]
 80049a6:	2332      	movs	r3, #50	; 0x32
 80049a8:	9301      	str	r3, [sp, #4]
 80049aa:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 80049b0:	4632      	mov	r2, r6
 80049b2:	2100      	movs	r1, #0
 80049b4:	4620      	mov	r0, r4
 80049b6:	47a8      	blx	r5

}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049c0:	08025180 	.word	0x08025180
 80049c4:	080251a0 	.word	0x080251a0
 80049c8:	080251c8 	.word	0x080251c8
 80049cc:	080251e0 	.word	0x080251e0
 80049d0:	080251e8 	.word	0x080251e8
 80049d4:	08025210 	.word	0x08025210

080049d8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	605a      	str	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff ff0a 	bl	8004808 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80049f4:	4a03      	ldr	r2, [pc, #12]	; (8004a04 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	0802a280 	.word	0x0802a280

08004a08 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	2236      	movs	r2, #54	; 0x36
 8004a12:	4906      	ldr	r1, [pc, #24]	; (8004a2c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 8004a14:	2008      	movs	r0, #8
 8004a16:	f007 fb23 	bl	800c060 <_ZnwjPKci>
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	f7ff ffdb 	bl	80049d8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 8004a22:	4623      	mov	r3, r4
 8004a24:	4618      	mov	r0, r3
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd90      	pop	{r4, r7, pc}
 8004a2c:	08025180 	.word	0x08025180

08004a30 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f00f fefe 	bl	801483c <_ZN10UtestShellC1Ev>
 8004a40:	4a03      	ldr	r2, [pc, #12]	; (8004a50 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	0802a1d4 	.word	0x0802a1d4

08004a54 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 8004a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af04      	add	r7, sp, #16
 8004a5a:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2145      	movs	r1, #69	; 0x45
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff fe09 	bl	800467a <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 8004a68:	f011 faa0 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	3338      	adds	r3, #56	; 0x38
 8004a72:	681d      	ldr	r5, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	461e      	mov	r6, r3
 8004a7e:	f011 faa5 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004a82:	4603      	mov	r3, r0
 8004a84:	9302      	str	r3, [sp, #8]
 8004a86:	2339      	movs	r3, #57	; 0x39
 8004a88:	9301      	str	r3, [sp, #4]
 8004a8a:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	4b15      	ldr	r3, [pc, #84]	; (8004ae4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 8004a90:	4632      	mov	r2, r6
 8004a92:	2145      	movs	r1, #69	; 0x45
 8004a94:	4620      	mov	r0, r4
 8004a96:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2110      	movs	r1, #16
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fdeb 	bl	800467a <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 8004aa4:	f011 fa82 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	3338      	adds	r3, #56	; 0x38
 8004aae:	681d      	ldr	r5, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	461e      	mov	r6, r3
 8004abc:	f011 fa86 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	9302      	str	r3, [sp, #8]
 8004ac4:	233c      	movs	r3, #60	; 0x3c
 8004ac6:	9301      	str	r3, [sp, #4]
 8004ac8:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 8004ace:	4632      	mov	r2, r6
 8004ad0:	2110      	movs	r1, #16
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	47a8      	blx	r5

}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	08025180 	.word	0x08025180
 8004ae4:	08025238 	.word	0x08025238
 8004ae8:	08025268 	.word	0x08025268

08004aec <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	605a      	str	r2, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff fe80 	bl	8004808 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004b08:	4a03      	ldr	r2, [pc, #12]	; (8004b18 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	0802a1b4 	.word	0x0802a1b4

08004b1c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004b1c:	b590      	push	{r4, r7, lr}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	2240      	movs	r2, #64	; 0x40
 8004b26:	4906      	ldr	r1, [pc, #24]	; (8004b40 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 8004b28:	2008      	movs	r0, #8
 8004b2a:	f007 fa99 	bl	800c060 <_ZnwjPKci>
 8004b2e:	4604      	mov	r4, r0
 8004b30:	4620      	mov	r0, r4
 8004b32:	f7ff ffdb 	bl	8004aec <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 8004b36:	4623      	mov	r3, r4
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd90      	pop	{r4, r7, pc}
 8004b40:	08025180 	.word	0x08025180

08004b44 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f00f fe74 	bl	801483c <_ZN10UtestShellC1Ev>
 8004b54:	4a03      	ldr	r2, [pc, #12]	; (8004b64 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	0802a108 	.word	0x0802a108

08004b68 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 8004b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b6a:	b089      	sub	sp, #36	; 0x24
 8004b6c:	af04      	add	r7, sp, #16
 8004b6e:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	3b01      	subs	r3, #1
 8004b86:	429a      	cmp	r2, r3
 8004b88:	bf0c      	ite	eq
 8004b8a:	2301      	moveq	r3, #1
 8004b8c:	2300      	movne	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4293      	cmp	r3, r2
 8004b96:	da0b      	bge.n	8004bb0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	4611      	mov	r1, r2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff fd69 	bl	800467a <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3301      	adds	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	e7e3      	b.n	8004b78 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	21ff      	movs	r1, #255	; 0xff
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff fd5f 	bl	800467a <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 8004bbc:	f011 f9f6 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8004bc0:	4604      	mov	r4, r0
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	3338      	adds	r3, #56	; 0x38
 8004bc6:	681d      	ldr	r5, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	461e      	mov	r6, r3
 8004bd2:	f011 f9fb 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	9302      	str	r3, [sp, #8]
 8004bda:	2348      	movs	r3, #72	; 0x48
 8004bdc:	9301      	str	r3, [sp, #4]
 8004bde:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 8004be4:	4632      	mov	r2, r6
 8004be6:	21ff      	movs	r1, #255	; 0xff
 8004be8:	4620      	mov	r0, r4
 8004bea:	47a8      	blx	r5
}
 8004bec:	bf00      	nop
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bf4:	08025180 	.word	0x08025180
 8004bf8:	08025298 	.word	0x08025298

08004bfc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	605a      	str	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fdf8 	bl	8004808 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004c18:	4a03      	ldr	r2, [pc, #12]	; (8004c28 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	0802a0e8 	.word	0x0802a0e8

08004c2c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004c2c:	b590      	push	{r4, r7, lr}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	224b      	movs	r2, #75	; 0x4b
 8004c36:	4906      	ldr	r1, [pc, #24]	; (8004c50 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 8004c38:	2008      	movs	r0, #8
 8004c3a:	f007 fa11 	bl	800c060 <_ZnwjPKci>
 8004c3e:	4604      	mov	r4, r0
 8004c40:	4620      	mov	r0, r4
 8004c42:	f7ff ffdb 	bl	8004bfc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 8004c46:	4623      	mov	r3, r4
 8004c48:	4618      	mov	r0, r3
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd90      	pop	{r4, r7, pc}
 8004c50:	08025180 	.word	0x08025180

08004c54 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f00f fdec 	bl	801483c <_ZN10UtestShellC1Ev>
 8004c64:	4a03      	ldr	r2, [pc, #12]	; (8004c74 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	0802a03c 	.word	0x0802a03c

08004c78 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 8004c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c7a:	b089      	sub	sp, #36	; 0x24
 8004c7c:	af04      	add	r7, sp, #16
 8004c7e:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	21ff      	movs	r1, #255	; 0xff
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff fcf7 	bl	800467a <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff fd1c 	bl	80046ce <ringBuffer_pop>
 8004c96:	4603      	mov	r3, r0
 8004c98:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 8004c9a:	f011 f987 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	3338      	adds	r3, #56	; 0x38
 8004ca4:	681d      	ldr	r5, [r3, #0]
 8004ca6:	7bfe      	ldrb	r6, [r7, #15]
 8004ca8:	f011 f990 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004cac:	4603      	mov	r3, r0
 8004cae:	9302      	str	r3, [sp, #8]
 8004cb0:	2350      	movs	r3, #80	; 0x50
 8004cb2:	9301      	str	r3, [sp, #4]
 8004cb4:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 8004cba:	4632      	mov	r2, r6
 8004cbc:	21ff      	movs	r1, #255	; 0xff
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	47a8      	blx	r5

}
 8004cc2:	bf00      	nop
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	08025180 	.word	0x08025180
 8004cd0:	080252c8 	.word	0x080252c8

08004cd4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	605a      	str	r2, [r3, #4]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff fd8c 	bl	8004808 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004cf0:	4a03      	ldr	r2, [pc, #12]	; (8004d00 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	0802a01c 	.word	0x0802a01c

08004d04 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 8004d04:	b590      	push	{r4, r7, lr}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	2254      	movs	r2, #84	; 0x54
 8004d0e:	4906      	ldr	r1, [pc, #24]	; (8004d28 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 8004d10:	2008      	movs	r0, #8
 8004d12:	f007 f9a5 	bl	800c060 <_ZnwjPKci>
 8004d16:	4604      	mov	r4, r0
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f7ff ffdb 	bl	8004cd4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 8004d1e:	4623      	mov	r3, r4
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd90      	pop	{r4, r7, pc}
 8004d28:	08025180 	.word	0x08025180

08004d2c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f00f fd80 	bl	801483c <_ZN10UtestShellC1Ev>
 8004d3c:	4a03      	ldr	r2, [pc, #12]	; (8004d4c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4618      	mov	r0, r3
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	08029f70 	.word	0x08029f70

08004d50 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 8004d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d52:	b089      	sub	sp, #36	; 0x24
 8004d54:	af04      	add	r7, sp, #16
 8004d56:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	21aa      	movs	r1, #170	; 0xaa
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff fc89 	bl	800467a <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	bf0c      	ite	eq
 8004d82:	2301      	moveq	r3, #1
 8004d84:	2300      	movne	r3, #0
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	461a      	mov	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	da0a      	bge.n	8004da6 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff fc9a 	bl	80046ce <ringBuffer_pop>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3301      	adds	r3, #1
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	e7e4      	b.n	8004d70 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff fc8f 	bl	80046ce <ringBuffer_pop>
 8004db0:	4603      	mov	r3, r0
 8004db2:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 8004db4:	f011 f8fa 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8004db8:	4604      	mov	r4, r0
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	3338      	adds	r3, #56	; 0x38
 8004dbe:	681d      	ldr	r5, [r3, #0]
 8004dc0:	7afe      	ldrb	r6, [r7, #11]
 8004dc2:	f011 f903 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	9302      	str	r3, [sp, #8]
 8004dca:	2361      	movs	r3, #97	; 0x61
 8004dcc:	9301      	str	r3, [sp, #4]
 8004dce:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 8004dd4:	4632      	mov	r2, r6
 8004dd6:	21aa      	movs	r1, #170	; 0xaa
 8004dd8:	4620      	mov	r0, r4
 8004dda:	47a8      	blx	r5
}
 8004ddc:	bf00      	nop
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004de4:	08025180 	.word	0x08025180
 8004de8:	080252e8 	.word	0x080252e8

08004dec <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	605a      	str	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff fd00 	bl	8004808 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004e08:	4a03      	ldr	r2, [pc, #12]	; (8004e18 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4618      	mov	r0, r3
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	08029f50 	.word	0x08029f50

08004e1c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	2264      	movs	r2, #100	; 0x64
 8004e26:	4906      	ldr	r1, [pc, #24]	; (8004e40 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 8004e28:	2008      	movs	r0, #8
 8004e2a:	f007 f919 	bl	800c060 <_ZnwjPKci>
 8004e2e:	4604      	mov	r4, r0
 8004e30:	4620      	mov	r0, r4
 8004e32:	f7ff ffdb 	bl	8004dec <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 8004e36:	4623      	mov	r3, r4
 8004e38:	4618      	mov	r0, r3
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd90      	pop	{r4, r7, pc}
 8004e40:	08025180 	.word	0x08025180

08004e44 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f00f fcf4 	bl	801483c <_ZN10UtestShellC1Ev>
 8004e54:	4a03      	ldr	r2, [pc, #12]	; (8004e64 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	08029ea4 	.word	0x08029ea4

08004e68 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 8004e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e6a:	b089      	sub	sp, #36	; 0x24
 8004e6c:	af04      	add	r7, sp, #16
 8004e6e:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d20b      	bcs.n	8004e98 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	4611      	mov	r1, r2
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff fbf5 	bl	800467a <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3301      	adds	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	e7ed      	b.n	8004e74 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 8004e98:	f011 f888 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	3338      	adds	r3, #56	; 0x38
 8004ea2:	681d      	ldr	r5, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	4413      	add	r3, r2
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	461e      	mov	r6, r3
 8004eb8:	f011 f888 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	9302      	str	r3, [sp, #8]
 8004ec0:	236b      	movs	r3, #107	; 0x6b
 8004ec2:	9301      	str	r3, [sp, #4]
 8004ec4:	4b24      	ldr	r3, [pc, #144]	; (8004f58 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	4b24      	ldr	r3, [pc, #144]	; (8004f5c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 8004eca:	4632      	mov	r2, r6
 8004ecc:	2131      	movs	r1, #49	; 0x31
 8004ece:	4620      	mov	r0, r4
 8004ed0:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff fc23 	bl	8004722 <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 8004edc:	f011 f866 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	3338      	adds	r3, #56	; 0x38
 8004ee6:	681d      	ldr	r5, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	4413      	add	r3, r2
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	461e      	mov	r6, r3
 8004efc:	f011 f866 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004f00:	4603      	mov	r3, r0
 8004f02:	9302      	str	r3, [sp, #8]
 8004f04:	236f      	movs	r3, #111	; 0x6f
 8004f06:	9301      	str	r3, [sp, #4]
 8004f08:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	4b14      	ldr	r3, [pc, #80]	; (8004f60 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 8004f0e:	4632      	mov	r2, r6
 8004f10:	2100      	movs	r1, #0
 8004f12:	4620      	mov	r0, r4
 8004f14:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 8004f16:	f011 f849 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	3338      	adds	r3, #56	; 0x38
 8004f20:	681d      	ldr	r5, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	085b      	lsrs	r3, r3, #1
 8004f30:	4413      	add	r3, r2
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	461e      	mov	r6, r3
 8004f36:	f011 f849 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	9302      	str	r3, [sp, #8]
 8004f3e:	2370      	movs	r3, #112	; 0x70
 8004f40:	9301      	str	r3, [sp, #4]
 8004f42:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 8004f48:	4632      	mov	r2, r6
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all the elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004f50:	bf00      	nop
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f58:	08025180 	.word	0x08025180
 8004f5c:	08025308 	.word	0x08025308
 8004f60:	08025344 	.word	0x08025344
 8004f64:	08025380 	.word	0x08025380

08004f68 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	605a      	str	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fc42 	bl	8004808 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004f84:	4a03      	ldr	r2, [pc, #12]	; (8004f94 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	08029e84 	.word	0x08029e84

08004f98 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 8004f98:	b590      	push	{r4, r7, lr}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	2279      	movs	r2, #121	; 0x79
 8004fa2:	4906      	ldr	r1, [pc, #24]	; (8004fbc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004fa4:	2008      	movs	r0, #8
 8004fa6:	f007 f85b 	bl	800c060 <_ZnwjPKci>
 8004faa:	4604      	mov	r4, r0
 8004fac:	4620      	mov	r0, r4
 8004fae:	f7ff ffdb 	bl	8004f68 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 8004fb2:	4623      	mov	r3, r4
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd90      	pop	{r4, r7, pc}
 8004fbc:	08025180 	.word	0x08025180

08004fc0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f00f fc36 	bl	801483c <_ZN10UtestShellC1Ev>
 8004fd0:	4a03      	ldr	r2, [pc, #12]	; (8004fe0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	08029dd8 	.word	0x08029dd8

08004fe4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8004fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af04      	add	r7, sp, #16
 8004fea:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	490e      	ldr	r1, [pc, #56]	; (800502c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff fbac 	bl	8004750 <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 8004ff8:	f010 ffd8 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	3324      	adds	r3, #36	; 0x24
 8005002:	681d      	ldr	r5, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	68de      	ldr	r6, [r3, #12]
 800500a:	f010 ffdf 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800500e:	4603      	mov	r3, r0
 8005010:	9302      	str	r3, [sp, #8]
 8005012:	237d      	movs	r3, #125	; 0x7d
 8005014:	9301      	str	r3, [sp, #4]
 8005016:	4b06      	ldr	r3, [pc, #24]	; (8005030 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	2300      	movs	r3, #0
 800501c:	4632      	mov	r2, r6
 800501e:	4903      	ldr	r1, [pc, #12]	; (800502c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8005020:	4620      	mov	r0, r4
 8005022:	47a8      	blx	r5
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800502c:	080253b8 	.word	0x080253b8
 8005030:	08025180 	.word	0x08025180

08005034 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	605a      	str	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff fbdc 	bl	8004808 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8005050:	4a03      	ldr	r2, [pc, #12]	; (8005060 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	08029db8 	.word	0x08029db8

08005064 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8005064:	b590      	push	{r4, r7, lr}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	2280      	movs	r2, #128	; 0x80
 800506e:	4906      	ldr	r1, [pc, #24]	; (8005088 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8005070:	2008      	movs	r0, #8
 8005072:	f006 fff5 	bl	800c060 <_ZnwjPKci>
 8005076:	4604      	mov	r4, r0
 8005078:	4620      	mov	r0, r4
 800507a:	f7ff ffdb 	bl	8005034 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 800507e:	4623      	mov	r3, r4
 8005080:	4618      	mov	r0, r3
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	bd90      	pop	{r4, r7, pc}
 8005088:	08025180 	.word	0x08025180

0800508c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4618      	mov	r0, r3
 8005098:	f00f fbd0 	bl	801483c <_ZN10UtestShellC1Ev>
 800509c:	4a03      	ldr	r2, [pc, #12]	; (80050ac <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	08029d0c 	.word	0x08029d0c

080050b0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 80050b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b4:	b08a      	sub	sp, #40	; 0x28
 80050b6:	af04      	add	r7, sp, #16
 80050b8:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	494e      	ldr	r1, [pc, #312]	; (80051f8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff fb45 	bl	8004750 <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 80050c6:	f010 ff71 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 80050ca:	4604      	mov	r4, r0
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	3324      	adds	r3, #36	; 0x24
 80050d0:	681d      	ldr	r5, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	68de      	ldr	r6, [r3, #12]
 80050d8:	f010 ff78 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80050dc:	4603      	mov	r3, r0
 80050de:	9302      	str	r3, [sp, #8]
 80050e0:	2384      	movs	r3, #132	; 0x84
 80050e2:	9301      	str	r3, [sp, #4]
 80050e4:	4b45      	ldr	r3, [pc, #276]	; (80051fc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	2300      	movs	r3, #0
 80050ea:	4632      	mov	r2, r6
 80050ec:	4942      	ldr	r1, [pc, #264]	; (80051f8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 80050ee:	4620      	mov	r0, r4
 80050f0:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	4942      	ldr	r1, [pc, #264]	; (8005200 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff fb48 	bl	800478e <ringBuffer_lookFor>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b01      	cmp	r3, #1
 8005102:	bf14      	ite	ne
 8005104:	2301      	movne	r3, #1
 8005106:	2300      	moveq	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d05c      	beq.n	80051c8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	493b      	ldr	r1, [pc, #236]	; (8005200 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff fb3a 	bl	800478e <ringBuffer_lookFor>
 800511a:	4604      	mov	r4, r0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	4937      	ldr	r1, [pc, #220]	; (8005200 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff fb33 	bl	800478e <ringBuffer_lookFor>
 8005128:	4603      	mov	r3, r0
 800512a:	429c      	cmp	r4, r3
 800512c:	bf14      	ite	ne
 800512e:	2301      	movne	r3, #1
 8005130:	2300      	moveq	r3, #0
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d008      	beq.n	800514a <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 8005138:	f010 ff38 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 800513c:	6803      	ldr	r3, [r0, #0]
 800513e:	3370      	adds	r3, #112	; 0x70
 8005140:	681c      	ldr	r4, [r3, #0]
 8005142:	2385      	movs	r3, #133	; 0x85
 8005144:	4a2d      	ldr	r2, [pc, #180]	; (80051fc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8005146:	492f      	ldr	r1, [pc, #188]	; (8005204 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 8005148:	47a0      	blx	r4
 800514a:	f010 ff2f 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 800514e:	4604      	mov	r4, r0
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	3358      	adds	r3, #88	; 0x58
 8005154:	681d      	ldr	r5, [r3, #0]
 8005156:	f107 0308 	add.w	r3, r7, #8
 800515a:	2101      	movs	r1, #1
 800515c:	4618      	mov	r0, r3
 800515e:	f00a f9c1 	bl	800f4e4 <_Z10StringFromi>
 8005162:	f107 0308 	add.w	r3, r7, #8
 8005166:	4618      	mov	r0, r3
 8005168:	f009 fec8 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800516c:	4606      	mov	r6, r0
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	4923      	ldr	r1, [pc, #140]	; (8005200 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff fb0a 	bl	800478e <ringBuffer_lookFor>
 800517a:	4602      	mov	r2, r0
 800517c:	f107 0310 	add.w	r3, r7, #16
 8005180:	4611      	mov	r1, r2
 8005182:	4618      	mov	r0, r3
 8005184:	f00a fc28 	bl	800f9d8 <_Z10StringFromm>
 8005188:	f107 0310 	add.w	r3, r7, #16
 800518c:	4618      	mov	r0, r3
 800518e:	f009 feb5 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8005192:	4680      	mov	r8, r0
 8005194:	f010 ff1a 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005198:	4603      	mov	r3, r0
 800519a:	9303      	str	r3, [sp, #12]
 800519c:	2385      	movs	r3, #133	; 0x85
 800519e:	9302      	str	r3, [sp, #8]
 80051a0:	4b16      	ldr	r3, [pc, #88]	; (80051fc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80051a2:	9301      	str	r3, [sp, #4]
 80051a4:	2300      	movs	r3, #0
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	4643      	mov	r3, r8
 80051aa:	4632      	mov	r2, r6
 80051ac:	2101      	movs	r1, #1
 80051ae:	4620      	mov	r0, r4
 80051b0:	47a8      	blx	r5
 80051b2:	f107 0310 	add.w	r3, r7, #16
 80051b6:	4618      	mov	r0, r3
 80051b8:	f009 fecd 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80051bc:	f107 0308 	add.w	r3, r7, #8
 80051c0:	4618      	mov	r0, r3
 80051c2:	f009 fec8 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 80051c6:	e012      	b.n	80051ee <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 80051c8:	f010 fef0 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 80051cc:	4604      	mov	r4, r0
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	3338      	adds	r3, #56	; 0x38
 80051d2:	681d      	ldr	r5, [r3, #0]
 80051d4:	f010 fefa 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80051d8:	4603      	mov	r3, r0
 80051da:	9302      	str	r3, [sp, #8]
 80051dc:	2385      	movs	r3, #133	; 0x85
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	4b06      	ldr	r3, [pc, #24]	; (80051fc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	2300      	movs	r3, #0
 80051e6:	2200      	movs	r2, #0
 80051e8:	2100      	movs	r1, #0
 80051ea:	4620      	mov	r0, r4
 80051ec:	47a8      	blx	r5
}
 80051ee:	bf00      	nop
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051f8:	080253c0 	.word	0x080253c0
 80051fc:	08025180 	.word	0x08025180
 8005200:	080253cc 	.word	0x080253cc
 8005204:	080253d4 	.word	0x080253d4

08005208 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	605a      	str	r2, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff faf2 	bl	8004808 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8005224:	4a03      	ldr	r2, [pc, #12]	; (8005234 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4618      	mov	r0, r3
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	08029cec 	.word	0x08029cec

08005238 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 8005238:	b590      	push	{r4, r7, lr}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	2288      	movs	r2, #136	; 0x88
 8005242:	4906      	ldr	r1, [pc, #24]	; (800525c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8005244:	2008      	movs	r0, #8
 8005246:	f006 ff0b 	bl	800c060 <_ZnwjPKci>
 800524a:	4604      	mov	r4, r0
 800524c:	4620      	mov	r0, r4
 800524e:	f7ff ffdb 	bl	8005208 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8005252:	4623      	mov	r3, r4
 8005254:	4618      	mov	r0, r3
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	bd90      	pop	{r4, r7, pc}
 800525c:	08025180 	.word	0x08025180

08005260 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4618      	mov	r0, r3
 800526c:	f00f fae6 	bl	801483c <_ZN10UtestShellC1Ev>
 8005270:	4a03      	ldr	r2, [pc, #12]	; (8005280 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4618      	mov	r0, r3
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	08029c40 	.word	0x08029c40

08005284 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8005284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005286:	b087      	sub	sp, #28
 8005288:	af04      	add	r7, sp, #16
 800528a:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 800528c:	f010 fe8e 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8005290:	4604      	mov	r4, r0
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	3338      	adds	r3, #56	; 0x38
 8005296:	681d      	ldr	r5, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff fa8c 	bl	80047ba <ringBuffer_capacity>
 80052a2:	4603      	mov	r3, r0
 80052a4:	461e      	mov	r6, r3
 80052a6:	f010 fe91 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80052aa:	4603      	mov	r3, r0
 80052ac:	9302      	str	r3, [sp, #8]
 80052ae:	238b      	movs	r3, #139	; 0x8b
 80052b0:	9301      	str	r3, [sp, #4]
 80052b2:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	4b05      	ldr	r3, [pc, #20]	; (80052cc <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 80052b8:	4632      	mov	r2, r6
 80052ba:	2132      	movs	r1, #50	; 0x32
 80052bc:	4620      	mov	r0, r4
 80052be:	47a8      	blx	r5

}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c8:	08025180 	.word	0x08025180
 80052cc:	08025478 	.word	0x08025478

080052d0 <_Z18UART_Transmit_FakePhj>:

/* Mpck functions-----------------------------------------------------------------------*/

void UART_Transmit_Fake(uint8_t* data, size_t size)
{
 80052d0:	b5b0      	push	{r4, r5, r7, lr}
 80052d2:	b08a      	sub	sp, #40	; 0x28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]

	mock().actualCall("UART_Transmit_Fake").withStringParameter("data", (char*)data).withIntParameter("size", size);
 80052da:	f107 0308 	add.w	r3, r7, #8
 80052de:	4928      	ldr	r1, [pc, #160]	; (8005380 <_Z18UART_Transmit_FakePhj+0xb0>)
 80052e0:	4618      	mov	r0, r3
 80052e2:	f009 fa80 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80052e6:	f107 0308 	add.w	r3, r7, #8
 80052ea:	2100      	movs	r1, #0
 80052ec:	4618      	mov	r0, r3
 80052ee:	f007 fb53 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80052f2:	4604      	mov	r4, r0
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	3318      	adds	r3, #24
 80052f8:	681d      	ldr	r5, [r3, #0]
 80052fa:	f107 0310 	add.w	r3, r7, #16
 80052fe:	4921      	ldr	r1, [pc, #132]	; (8005384 <_Z18UART_Transmit_FakePhj+0xb4>)
 8005300:	4618      	mov	r0, r3
 8005302:	f009 fa70 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8005306:	f107 0310 	add.w	r3, r7, #16
 800530a:	4619      	mov	r1, r3
 800530c:	4620      	mov	r0, r4
 800530e:	47a8      	blx	r5
 8005310:	4604      	mov	r4, r0
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	333c      	adds	r3, #60	; 0x3c
 8005316:	681d      	ldr	r5, [r3, #0]
 8005318:	f107 0318 	add.w	r3, r7, #24
 800531c:	491a      	ldr	r1, [pc, #104]	; (8005388 <_Z18UART_Transmit_FakePhj+0xb8>)
 800531e:	4618      	mov	r0, r3
 8005320:	f009 fa61 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8005324:	f107 0318 	add.w	r3, r7, #24
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	4619      	mov	r1, r3
 800532c:	4620      	mov	r0, r4
 800532e:	47a8      	blx	r5
 8005330:	4604      	mov	r4, r0
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	3320      	adds	r3, #32
 8005336:	681d      	ldr	r5, [r3, #0]
 8005338:	f107 0320 	add.w	r3, r7, #32
 800533c:	4913      	ldr	r1, [pc, #76]	; (800538c <_Z18UART_Transmit_FakePhj+0xbc>)
 800533e:	4618      	mov	r0, r3
 8005340:	f009 fa51 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	f107 0320 	add.w	r3, r7, #32
 800534a:	4619      	mov	r1, r3
 800534c:	4620      	mov	r0, r4
 800534e:	47a8      	blx	r5
 8005350:	f107 0320 	add.w	r3, r7, #32
 8005354:	4618      	mov	r0, r3
 8005356:	f009 fdfe 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800535a:	f107 0318 	add.w	r3, r7, #24
 800535e:	4618      	mov	r0, r3
 8005360:	f009 fdf9 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8005364:	f107 0310 	add.w	r3, r7, #16
 8005368:	4618      	mov	r0, r3
 800536a:	f009 fdf4 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800536e:	f107 0308 	add.w	r3, r7, #8
 8005372:	4618      	mov	r0, r3
 8005374:	f009 fdef 	bl	800ef56 <_ZN12SimpleStringD1Ev>

}
 8005378:	bf00      	nop
 800537a:	3728      	adds	r7, #40	; 0x28
 800537c:	46bd      	mov	sp, r7
 800537e:	bdb0      	pop	{r4, r5, r7, pc}
 8005380:	080254b0 	.word	0x080254b0
 8005384:	080254b4 	.word	0x080254b4
 8005388:	080254c8 	.word	0x080254c8
 800538c:	080254d0 	.word	0x080254d0

08005390 <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8005390:	b5b0      	push	{r4, r5, r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 8005396:	463b      	mov	r3, r7
 8005398:	4916      	ldr	r1, [pc, #88]	; (80053f4 <_Z17UART_Receive_Fakev+0x64>)
 800539a:	4618      	mov	r0, r3
 800539c:	f009 fa23 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80053a0:	463b      	mov	r3, r7
 80053a2:	2100      	movs	r1, #0
 80053a4:	4618      	mov	r0, r3
 80053a6:	f007 faf7 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80053aa:	4604      	mov	r4, r0
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	3318      	adds	r3, #24
 80053b0:	681d      	ldr	r5, [r3, #0]
 80053b2:	f107 0308 	add.w	r3, r7, #8
 80053b6:	4910      	ldr	r1, [pc, #64]	; (80053f8 <_Z17UART_Receive_Fakev+0x68>)
 80053b8:	4618      	mov	r0, r3
 80053ba:	f009 fa14 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80053be:	f107 0308 	add.w	r3, r7, #8
 80053c2:	4619      	mov	r1, r3
 80053c4:	4620      	mov	r0, r4
 80053c6:	47a8      	blx	r5
 80053c8:	4603      	mov	r3, r0
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	3264      	adds	r2, #100	; 0x64
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	4618      	mov	r0, r3
 80053d2:	4790      	blx	r2
 80053d4:	4603      	mov	r3, r0
 80053d6:	b2dc      	uxtb	r4, r3
 80053d8:	f107 0308 	add.w	r3, r7, #8
 80053dc:	4618      	mov	r0, r3
 80053de:	f009 fdba 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80053e2:	463b      	mov	r3, r7
 80053e4:	4618      	mov	r0, r3
 80053e6:	f009 fdb6 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80053ea:	4623      	mov	r3, r4
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bdb0      	pop	{r4, r5, r7, pc}
 80053f4:	080254b0 	.word	0x080254b0
 80053f8:	080254d8 	.word	0x080254d8

080053fc <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 8005400:	4b0a      	ldr	r3, [pc, #40]	; (800542c <_Z12getTick_Fakev+0x30>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005408:	d103      	bne.n	8005412 <_Z12getTick_Fakev+0x16>
		time = 0;
 800540a:	4b08      	ldr	r3, [pc, #32]	; (800542c <_Z12getTick_Fakev+0x30>)
 800540c:	2200      	movs	r2, #0
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	e004      	b.n	800541c <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 8005412:	4b06      	ldr	r3, [pc, #24]	; (800542c <_Z12getTick_Fakev+0x30>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3301      	adds	r3, #1
 8005418:	4a04      	ldr	r2, [pc, #16]	; (800542c <_Z12getTick_Fakev+0x30>)
 800541a:	6013      	str	r3, [r2, #0]
	return time;
 800541c:	4b03      	ldr	r3, [pc, #12]	; (800542c <_Z12getTick_Fakev+0x30>)
 800541e:	681b      	ldr	r3, [r3, #0]
}
 8005420:	4618      	mov	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	200004a4 	.word	0x200004a4

08005430 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
/* Test functions of the ring buffer-----------------------------------------------------------------------*/

TEST_GROUP(EspDriver_Test_Group)
{

	void setup()
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8005438:	2364      	movs	r3, #100	; 0x64
 800543a:	4a04      	ldr	r2, [pc, #16]	; (800544c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 800543c:	4904      	ldr	r1, [pc, #16]	; (8005450 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 800543e:	4805      	ldr	r0, [pc, #20]	; (8005454 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 8005440:	f7fe fc18 	bl	8003c74 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);					// buffer size

	}
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	080053fd 	.word	0x080053fd
 8005450:	08005391 	.word	0x08005391
 8005454:	080052d1 	.word	0x080052d1

08005458 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	{

		mock().checkExpectations();
 8005460:	f107 0308 	add.w	r3, r7, #8
 8005464:	4917      	ldr	r1, [pc, #92]	; (80054c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8005466:	4618      	mov	r0, r3
 8005468:	f009 f9bd 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800546c:	f107 0308 	add.w	r3, r7, #8
 8005470:	2100      	movs	r1, #0
 8005472:	4618      	mov	r0, r3
 8005474:	f007 fa90 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005478:	4603      	mov	r3, r0
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	3294      	adds	r2, #148	; 0x94
 800547e:	6812      	ldr	r2, [r2, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	4790      	blx	r2
 8005484:	f107 0308 	add.w	r3, r7, #8
 8005488:	4618      	mov	r0, r3
 800548a:	f009 fd64 	bl	800ef56 <_ZN12SimpleStringD1Ev>
		mock().clear();
 800548e:	f107 0310 	add.w	r3, r7, #16
 8005492:	490c      	ldr	r1, [pc, #48]	; (80054c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8005494:	4618      	mov	r0, r3
 8005496:	f009 f9a6 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800549a:	f107 0310 	add.w	r3, r7, #16
 800549e:	2100      	movs	r1, #0
 80054a0:	4618      	mov	r0, r3
 80054a2:	f007 fa79 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80054a6:	4603      	mov	r3, r0
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	329c      	adds	r2, #156	; 0x9c
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	4790      	blx	r2
 80054b2:	f107 0310 	add.w	r3, r7, #16
 80054b6:	4618      	mov	r0, r3
 80054b8:	f009 fd4d 	bl	800ef56 <_ZN12SimpleStringD1Ev>
	}
 80054bc:	bf00      	nop
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	080254b0 	.word	0x080254b0

080054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f010 fd94 	bl	8016000 <_ZN5UtestC1Ev>
 80054d8:	4a03      	ldr	r2, [pc, #12]	; (80054e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	08029c20 	.word	0x08029c20

080054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	4a05      	ldr	r2, [pc, #20]	; (800550c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f010 fd8f 	bl	8016020 <_ZN5UtestD1Ev>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4618      	mov	r0, r3
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	08029c20 	.word	0x08029c20

08005510 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff ffe7 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800551e:	2104      	movs	r1, #4
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f006 fdb1 	bl	800c088 <_ZdlPvj>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff ffc4 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005540:	4a03      	ldr	r2, [pc, #12]	; (8005550 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4618      	mov	r0, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	08029c00 	.word	0x08029c00

08005554 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8005554:	b590      	push	{r4, r7, lr}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	22c3      	movs	r2, #195	; 0xc3
 800555e:	4906      	ldr	r1, [pc, #24]	; (8005578 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8005560:	2004      	movs	r0, #4
 8005562:	f006 fd7d 	bl	800c060 <_ZnwjPKci>
 8005566:	4604      	mov	r4, r0
 8005568:	4620      	mov	r0, r4
 800556a:	f7ff ffe1 	bl	8005530 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 800556e:	4623      	mov	r3, r4
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	bd90      	pop	{r4, r7, pc}
 8005578:	08025180 	.word	0x08025180

0800557c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4618      	mov	r0, r3
 8005588:	f00f f958 	bl	801483c <_ZN10UtestShellC1Ev>
 800558c:	4a03      	ldr	r2, [pc, #12]	; (800559c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4618      	mov	r0, r3
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	08029b54 	.word	0x08029b54

080055a0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 80055a0:	b5b0      	push	{r4, r5, r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af04      	add	r7, sp, #16
 80055a6:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; 			// or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 80055a8:	4b10      	ldr	r3, [pc, #64]	; (80055ec <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 80055aa:	4a11      	ldr	r2, [pc, #68]	; (80055f0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 80055ac:	601a      	str	r2, [r3, #0]
	int32_t result = ESP_Init(transmit,
 80055ae:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	2364      	movs	r3, #100	; 0x64
 80055b4:	4a0f      	ldr	r2, [pc, #60]	; (80055f4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 80055b6:	4910      	ldr	r1, [pc, #64]	; (80055f8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 80055b8:	f7fe fb5c 	bl	8003c74 <ESP_Init>
 80055bc:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 80055be:	f010 fcf5 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 80055c2:	4604      	mov	r4, r0
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	3338      	adds	r3, #56	; 0x38
 80055c8:	681d      	ldr	r5, [r3, #0]
 80055ca:	f010 fcff 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80055ce:	4603      	mov	r3, r0
 80055d0:	9302      	str	r3, [sp, #8]
 80055d2:	23d1      	movs	r3, #209	; 0xd1
 80055d4:	9301      	str	r3, [sp, #4]
 80055d6:	4b09      	ldr	r3, [pc, #36]	; (80055fc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	4b09      	ldr	r3, [pc, #36]	; (8005600 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	2101      	movs	r1, #1
 80055e0:	4620      	mov	r0, r4
 80055e2:	47a8      	blx	r5

}
 80055e4:	bf00      	nop
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bdb0      	pop	{r4, r5, r7, pc}
 80055ec:	200004a8 	.word	0x200004a8
 80055f0:	080052d1 	.word	0x080052d1
 80055f4:	080053fd 	.word	0x080053fd
 80055f8:	08005391 	.word	0x08005391
 80055fc:	08025180 	.word	0x08025180
 8005600:	080254ec 	.word	0x080254ec

08005604 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff ff5a 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005614:	4a03      	ldr	r2, [pc, #12]	; (8005624 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	08029b34 	.word	0x08029b34

08005628 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 8005628:	b590      	push	{r4, r7, lr}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	22d5      	movs	r2, #213	; 0xd5
 8005632:	4906      	ldr	r1, [pc, #24]	; (800564c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 8005634:	2004      	movs	r0, #4
 8005636:	f006 fd13 	bl	800c060 <_ZnwjPKci>
 800563a:	4604      	mov	r4, r0
 800563c:	4620      	mov	r0, r4
 800563e:	f7ff ffe1 	bl	8005604 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 8005642:	4623      	mov	r3, r4
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	bd90      	pop	{r4, r7, pc}
 800564c:	08025180 	.word	0x08025180

08005650 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4618      	mov	r0, r3
 800565c:	f00f f8ee 	bl	801483c <_ZN10UtestShellC1Ev>
 8005660:	4a03      	ldr	r2, [pc, #12]	; (8005670 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	08029a88 	.word	0x08029a88

08005674 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 8005674:	b5b0      	push	{r4, r5, r7, lr}
 8005676:	b092      	sub	sp, #72	; 0x48
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Test").withIntParameter("size", strlen("Test"));  // UART_Transmit_Fake function waits "Test" string.
 800567c:	f107 0308 	add.w	r3, r7, #8
 8005680:	4953      	ldr	r1, [pc, #332]	; (80057d0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x15c>)
 8005682:	4618      	mov	r0, r3
 8005684:	f009 f8af 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8005688:	f107 0308 	add.w	r3, r7, #8
 800568c:	2100      	movs	r1, #0
 800568e:	4618      	mov	r0, r3
 8005690:	f007 f982 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005694:	4604      	mov	r4, r0
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	330c      	adds	r3, #12
 800569a:	681d      	ldr	r5, [r3, #0]
 800569c:	f107 0310 	add.w	r3, r7, #16
 80056a0:	494c      	ldr	r1, [pc, #304]	; (80057d4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x160>)
 80056a2:	4618      	mov	r0, r3
 80056a4:	f009 f89f 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80056a8:	f107 0310 	add.w	r3, r7, #16
 80056ac:	4619      	mov	r1, r3
 80056ae:	4620      	mov	r0, r4
 80056b0:	47a8      	blx	r5
 80056b2:	4604      	mov	r4, r0
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	334c      	adds	r3, #76	; 0x4c
 80056b8:	681d      	ldr	r5, [r3, #0]
 80056ba:	f107 0318 	add.w	r3, r7, #24
 80056be:	4946      	ldr	r1, [pc, #280]	; (80057d8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x164>)
 80056c0:	4618      	mov	r0, r3
 80056c2:	f009 f890 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80056c6:	f107 0318 	add.w	r3, r7, #24
 80056ca:	4a44      	ldr	r2, [pc, #272]	; (80057dc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x168>)
 80056cc:	4619      	mov	r1, r3
 80056ce:	4620      	mov	r0, r4
 80056d0:	47a8      	blx	r5
 80056d2:	4604      	mov	r4, r0
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	332c      	adds	r3, #44	; 0x2c
 80056d8:	681d      	ldr	r5, [r3, #0]
 80056da:	f107 0320 	add.w	r3, r7, #32
 80056de:	4940      	ldr	r1, [pc, #256]	; (80057e0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x16c>)
 80056e0:	4618      	mov	r0, r3
 80056e2:	f009 f880 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80056e6:	f107 0320 	add.w	r3, r7, #32
 80056ea:	2204      	movs	r2, #4
 80056ec:	4619      	mov	r1, r3
 80056ee:	4620      	mov	r0, r4
 80056f0:	47a8      	blx	r5
 80056f2:	f107 0320 	add.w	r3, r7, #32
 80056f6:	4618      	mov	r0, r3
 80056f8:	f009 fc2d 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80056fc:	f107 0318 	add.w	r3, r7, #24
 8005700:	4618      	mov	r0, r3
 8005702:	f009 fc28 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8005706:	f107 0310 	add.w	r3, r7, #16
 800570a:	4618      	mov	r0, r3
 800570c:	f009 fc23 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8005710:	f107 0308 	add.w	r3, r7, #8
 8005714:	4618      	mov	r0, r3
 8005716:	f009 fc1e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT\r\n").withIntParameter("size", strlen("AT\r\n"));
 800571a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800571e:	492c      	ldr	r1, [pc, #176]	; (80057d0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x15c>)
 8005720:	4618      	mov	r0, r3
 8005722:	f009 f860 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8005726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800572a:	2100      	movs	r1, #0
 800572c:	4618      	mov	r0, r3
 800572e:	f007 f933 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005732:	4604      	mov	r4, r0
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	330c      	adds	r3, #12
 8005738:	681d      	ldr	r5, [r3, #0]
 800573a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800573e:	4925      	ldr	r1, [pc, #148]	; (80057d4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x160>)
 8005740:	4618      	mov	r0, r3
 8005742:	f009 f850 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8005746:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800574a:	4619      	mov	r1, r3
 800574c:	4620      	mov	r0, r4
 800574e:	47a8      	blx	r5
 8005750:	4604      	mov	r4, r0
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	334c      	adds	r3, #76	; 0x4c
 8005756:	681d      	ldr	r5, [r3, #0]
 8005758:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800575c:	491e      	ldr	r1, [pc, #120]	; (80057d8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x164>)
 800575e:	4618      	mov	r0, r3
 8005760:	f009 f841 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8005764:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005768:	4a1e      	ldr	r2, [pc, #120]	; (80057e4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x170>)
 800576a:	4619      	mov	r1, r3
 800576c:	4620      	mov	r0, r4
 800576e:	47a8      	blx	r5
 8005770:	4604      	mov	r4, r0
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	332c      	adds	r3, #44	; 0x2c
 8005776:	681d      	ldr	r5, [r3, #0]
 8005778:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800577c:	4918      	ldr	r1, [pc, #96]	; (80057e0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x16c>)
 800577e:	4618      	mov	r0, r3
 8005780:	f009 f831 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8005784:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005788:	2204      	movs	r2, #4
 800578a:	4619      	mov	r1, r3
 800578c:	4620      	mov	r0, r4
 800578e:	47a8      	blx	r5
 8005790:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005794:	4618      	mov	r0, r3
 8005796:	f009 fbde 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800579a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800579e:	4618      	mov	r0, r3
 80057a0:	f009 fbd9 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80057a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057a8:	4618      	mov	r0, r3
 80057aa:	f009 fbd4 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80057ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057b2:	4618      	mov	r0, r3
 80057b4:	f009 fbcf 	bl	800ef56 <_ZN12SimpleStringD1Ev>

	Send_AT_Command((char*)"Test",strlen("Test"));
 80057b8:	2104      	movs	r1, #4
 80057ba:	4808      	ldr	r0, [pc, #32]	; (80057dc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x168>)
 80057bc:	f7fe fa8c 	bl	8003cd8 <Send_AT_Command>
	Send_AT_Command((char*)"AT\r\n",strlen("AT\r\n"));
 80057c0:	2104      	movs	r1, #4
 80057c2:	4808      	ldr	r0, [pc, #32]	; (80057e4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x170>)
 80057c4:	f7fe fa88 	bl	8003cd8 <Send_AT_Command>

	// There is no assertion macro here because the function returns nothing.
	// Mocking library checks if the function has been called.
}
 80057c8:	bf00      	nop
 80057ca:	3748      	adds	r7, #72	; 0x48
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bdb0      	pop	{r4, r5, r7, pc}
 80057d0:	080254b0 	.word	0x080254b0
 80057d4:	080254b4 	.word	0x080254b4
 80057d8:	080254c8 	.word	0x080254c8
 80057dc:	080253b8 	.word	0x080253b8
 80057e0:	080254d0 	.word	0x080254d0
 80057e4:	0802550c 	.word	0x0802550c

080057e8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff fe68 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80057f8:	4a03      	ldr	r2, [pc, #12]	; (8005808 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	08029a68 	.word	0x08029a68

0800580c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 800580c:	b590      	push	{r4, r7, lr}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	22e1      	movs	r2, #225	; 0xe1
 8005816:	4906      	ldr	r1, [pc, #24]	; (8005830 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 8005818:	2004      	movs	r0, #4
 800581a:	f006 fc21 	bl	800c060 <_ZnwjPKci>
 800581e:	4604      	mov	r4, r0
 8005820:	4620      	mov	r0, r4
 8005822:	f7ff ffe1 	bl	80057e8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 8005826:	4623      	mov	r3, r4
 8005828:	4618      	mov	r0, r3
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	bd90      	pop	{r4, r7, pc}
 8005830:	08025180 	.word	0x08025180

08005834 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4618      	mov	r0, r3
 8005840:	f00e fffc 	bl	801483c <_ZN10UtestShellC1Ev>
 8005844:	4a03      	ldr	r2, [pc, #12]	; (8005854 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	080299bc 	.word	0x080299bc

08005858 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 8005858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800585a:	b08f      	sub	sp, #60	; 0x3c
 800585c:	af04      	add	r7, sp, #16
 800585e:	6078      	str	r0, [r7, #4]

	const char response[] = "OK\r\n";
 8005860:	4a31      	ldr	r2, [pc, #196]	; (8005928 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 8005862:	f107 030c 	add.w	r3, r7, #12
 8005866:	e892 0003 	ldmia.w	r2, {r0, r1}
 800586a:	6018      	str	r0, [r3, #0]
 800586c:	3304      	adds	r3, #4
 800586e:	7019      	strb	r1, [r3, #0]

	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 8005870:	2300      	movs	r3, #0
 8005872:	627b      	str	r3, [r7, #36]	; 0x24
 8005874:	f107 030c 	add.w	r3, r7, #12
 8005878:	4618      	mov	r0, r3
 800587a:	f7fa fcdf 	bl	800023c <strlen>
 800587e:	4603      	mov	r3, r0
 8005880:	461a      	mov	r2, r3
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	4293      	cmp	r3, r2
 8005886:	da35      	bge.n	80058f4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005888:	f107 0314 	add.w	r3, r7, #20
 800588c:	4927      	ldr	r1, [pc, #156]	; (800592c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd4>)
 800588e:	4618      	mov	r0, r3
 8005890:	f008 ffa9 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8005894:	f107 0314 	add.w	r3, r7, #20
 8005898:	2100      	movs	r1, #0
 800589a:	4618      	mov	r0, r3
 800589c:	f007 f87c 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80058a0:	4604      	mov	r4, r0
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	330c      	adds	r3, #12
 80058a6:	681d      	ldr	r5, [r3, #0]
 80058a8:	f107 031c 	add.w	r3, r7, #28
 80058ac:	4920      	ldr	r1, [pc, #128]	; (8005930 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd8>)
 80058ae:	4618      	mov	r0, r3
 80058b0:	f008 ff99 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80058b4:	f107 031c 	add.w	r3, r7, #28
 80058b8:	4619      	mov	r1, r3
 80058ba:	4620      	mov	r0, r4
 80058bc:	47a8      	blx	r5
 80058be:	4603      	mov	r3, r0
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	3264      	adds	r2, #100	; 0x64
 80058c4:	6812      	ldr	r2, [r2, #0]
 80058c6:	f107 000c 	add.w	r0, r7, #12
 80058ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058cc:	4401      	add	r1, r0
 80058ce:	7809      	ldrb	r1, [r1, #0]
 80058d0:	4618      	mov	r0, r3
 80058d2:	4790      	blx	r2
 80058d4:	f107 031c 	add.w	r3, r7, #28
 80058d8:	4618      	mov	r0, r3
 80058da:	f009 fb3c 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80058de:	f107 0314 	add.w	r3, r7, #20
 80058e2:	4618      	mov	r0, r3
 80058e4:	f009 fb37 	bl	800ef56 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 80058e8:	f7fe fa06 	bl	8003cf8 <ESP_UART_ReceiveHandler>
	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	3301      	adds	r3, #1
 80058f0:	627b      	str	r3, [r7, #36]	; 0x24
 80058f2:	e7bf      	b.n	8005874 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1c>
	}

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the ring buffer.
 80058f4:	f010 fb5a 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 80058f8:	4604      	mov	r4, r0
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	3324      	adds	r3, #36	; 0x24
 80058fe:	681d      	ldr	r5, [r3, #0]
 8005900:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xdc>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68de      	ldr	r6, [r3, #12]
 8005906:	f010 fb61 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800590a:	4603      	mov	r3, r0
 800590c:	9302      	str	r3, [sp, #8]
 800590e:	23ec      	movs	r3, #236	; 0xec
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	4b09      	ldr	r3, [pc, #36]	; (8005938 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xe0>)
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	2300      	movs	r3, #0
 8005918:	4632      	mov	r2, r6
 800591a:	4903      	ldr	r1, [pc, #12]	; (8005928 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 800591c:	4620      	mov	r0, r4
 800591e:	47a8      	blx	r5

}
 8005920:	bf00      	nop
 8005922:	372c      	adds	r7, #44	; 0x2c
 8005924:	46bd      	mov	sp, r7
 8005926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005928:	08025514 	.word	0x08025514
 800592c:	080254b0 	.word	0x080254b0
 8005930:	080254d8 	.word	0x080254d8
 8005934:	2000106c 	.word	0x2000106c
 8005938:	08025180 	.word	0x08025180

0800593c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff fdbe 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800594c:	4a03      	ldr	r2, [pc, #12]	; (800595c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4618      	mov	r0, r3
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	0802999c 	.word	0x0802999c

08005960 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 8005960:	b590      	push	{r4, r7, lr}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	22f0      	movs	r2, #240	; 0xf0
 800596a:	4906      	ldr	r1, [pc, #24]	; (8005984 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 800596c:	2004      	movs	r0, #4
 800596e:	f006 fb77 	bl	800c060 <_ZnwjPKci>
 8005972:	4604      	mov	r4, r0
 8005974:	4620      	mov	r0, r4
 8005976:	f7ff ffe1 	bl	800593c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 800597a:	4623      	mov	r3, r4
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	bd90      	pop	{r4, r7, pc}
 8005984:	08025180 	.word	0x08025180

08005988 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4618      	mov	r0, r3
 8005994:	f00e ff52 	bl	801483c <_ZN10UtestShellC1Ev>
 8005998:	4a03      	ldr	r2, [pc, #12]	; (80059a8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4618      	mov	r0, r3
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	080298f0 	.word	0x080298f0

080059ac <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 80059ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ae:	b08f      	sub	sp, #60	; 0x3c
 80059b0:	af04      	add	r7, sp, #16
 80059b2:	6078      	str	r0, [r7, #4]
	const char response[] = "OK\r\n";
 80059b4:	4a32      	ldr	r2, [pc, #200]	; (8005a80 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd4>)
 80059b6:	f107 0308 	add.w	r3, r7, #8
 80059ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80059be:	6018      	str	r0, [r3, #0]
 80059c0:	3304      	adds	r3, #4
 80059c2:	7019      	strb	r1, [r3, #0]

	for(int i=0;i<(int)strlen(response);i++)
 80059c4:	2300      	movs	r3, #0
 80059c6:	627b      	str	r3, [r7, #36]	; 0x24
 80059c8:	f107 0308 	add.w	r3, r7, #8
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fa fc35 	bl	800023c <strlen>
 80059d2:	4603      	mov	r3, r0
 80059d4:	461a      	mov	r2, r3
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	4293      	cmp	r3, r2
 80059da:	da35      	bge.n	8005a48 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80059dc:	f107 0310 	add.w	r3, r7, #16
 80059e0:	4928      	ldr	r1, [pc, #160]	; (8005a84 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd8>)
 80059e2:	4618      	mov	r0, r3
 80059e4:	f008 feff 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80059e8:	f107 0310 	add.w	r3, r7, #16
 80059ec:	2100      	movs	r1, #0
 80059ee:	4618      	mov	r0, r3
 80059f0:	f006 ffd2 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80059f4:	4604      	mov	r4, r0
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	330c      	adds	r3, #12
 80059fa:	681d      	ldr	r5, [r3, #0]
 80059fc:	f107 0318 	add.w	r3, r7, #24
 8005a00:	4921      	ldr	r1, [pc, #132]	; (8005a88 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xdc>)
 8005a02:	4618      	mov	r0, r3
 8005a04:	f008 feef 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8005a08:	f107 0318 	add.w	r3, r7, #24
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4620      	mov	r0, r4
 8005a10:	47a8      	blx	r5
 8005a12:	4603      	mov	r3, r0
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	3264      	adds	r2, #100	; 0x64
 8005a18:	6812      	ldr	r2, [r2, #0]
 8005a1a:	f107 0008 	add.w	r0, r7, #8
 8005a1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a20:	4401      	add	r1, r0
 8005a22:	7809      	ldrb	r1, [r1, #0]
 8005a24:	4618      	mov	r0, r3
 8005a26:	4790      	blx	r2
 8005a28:	f107 0318 	add.w	r3, r7, #24
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f009 fa92 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8005a32:	f107 0310 	add.w	r3, r7, #16
 8005a36:	4618      	mov	r0, r3
 8005a38:	f009 fa8d 	bl	800ef56 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8005a3c:	f7fe f95c 	bl	8003cf8 <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	3301      	adds	r3, #1
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
 8005a46:	e7bf      	b.n	80059c8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x1c>
	}

	uint32_t result = Read_Response((char*)"OK");
 8005a48:	4810      	ldr	r0, [pc, #64]	; (8005a8c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe0>)
 8005a4a:	f7fe f967 	bl	8003d1c <Read_Response>
 8005a4e:	6238      	str	r0, [r7, #32]

	LONGS_EQUAL(1,result);
 8005a50:	f010 faac 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8005a54:	4604      	mov	r4, r0
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	3338      	adds	r3, #56	; 0x38
 8005a5a:	681d      	ldr	r5, [r3, #0]
 8005a5c:	6a3e      	ldr	r6, [r7, #32]
 8005a5e:	f010 fab5 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005a62:	4603      	mov	r3, r0
 8005a64:	9302      	str	r3, [sp, #8]
 8005a66:	23fc      	movs	r3, #252	; 0xfc
 8005a68:	9301      	str	r3, [sp, #4]
 8005a6a:	4b09      	ldr	r3, [pc, #36]	; (8005a90 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe4>)
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe8>)
 8005a70:	4632      	mov	r2, r6
 8005a72:	2101      	movs	r1, #1
 8005a74:	4620      	mov	r0, r4
 8005a76:	47a8      	blx	r5

}
 8005a78:	bf00      	nop
 8005a7a:	372c      	adds	r7, #44	; 0x2c
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a80:	08025514 	.word	0x08025514
 8005a84:	080254b0 	.word	0x080254b0
 8005a88:	080254d8 	.word	0x080254d8
 8005a8c:	08025100 	.word	0x08025100
 8005a90:	08025180 	.word	0x08025180
 8005a94:	080254ec 	.word	0x080254ec

08005a98 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7ff fd10 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005aa8:	4a03      	ldr	r2, [pc, #12]	; (8005ab8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	080298d0 	.word	0x080298d0

08005abc <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 8005abc:	b590      	push	{r4, r7, lr}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	f240 1201 	movw	r2, #257	; 0x101
 8005ac8:	4906      	ldr	r1, [pc, #24]	; (8005ae4 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x28>)
 8005aca:	2004      	movs	r0, #4
 8005acc:	f006 fac8 	bl	800c060 <_ZnwjPKci>
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f7ff ffe0 	bl	8005a98 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 8005ad8:	4623      	mov	r3, r4
 8005ada:	4618      	mov	r0, r3
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd90      	pop	{r4, r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	08025180 	.word	0x08025180

08005ae8 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f00e fea2 	bl	801483c <_ZN10UtestShellC1Ev>
 8005af8:	4a03      	ldr	r2, [pc, #12]	; (8005b08 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4618      	mov	r0, r3
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	08029824 	.word	0x08029824

08005b0c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 8005b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b0e:	b089      	sub	sp, #36	; 0x24
 8005b10:	af04      	add	r7, sp, #16
 8005b12:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 8005b14:	2304      	movs	r3, #4
 8005b16:	73fb      	strb	r3, [r7, #15]

	while(1)	// wait the message until timeout occurs.
	{
		response_state = Wait_Response((char*)"OK", 1000);
 8005b18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005b1c:	4811      	ldr	r0, [pc, #68]	; (8005b64 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 8005b1e:	f7fe f90f 	bl	8003d40 <Wait_Response>
 8005b22:	4603      	mov	r3, r0
 8005b24:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d100      	bne.n	8005b2e <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 8005b2c:	e7f4      	b.n	8005b18 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 8005b2e:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 8005b30:	f010 fa3c 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8005b34:	4604      	mov	r4, r0
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	3338      	adds	r3, #56	; 0x38
 8005b3a:	681d      	ldr	r5, [r3, #0]
 8005b3c:	7bfe      	ldrb	r6, [r7, #15]
 8005b3e:	f010 fa45 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005b42:	4603      	mov	r3, r0
 8005b44:	9302      	str	r3, [sp, #8]
 8005b46:	f240 130d 	movw	r3, #269	; 0x10d
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 8005b52:	4632      	mov	r2, r6
 8005b54:	2101      	movs	r1, #1
 8005b56:	4620      	mov	r0, r4
 8005b58:	47a8      	blx	r5

}
 8005b5a:	bf00      	nop
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b62:	bf00      	nop
 8005b64:	08025100 	.word	0x08025100
 8005b68:	08025180 	.word	0x08025180
 8005b6c:	0802551c 	.word	0x0802551c

08005b70 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff fca4 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005b80:	4a03      	ldr	r2, [pc, #12]	; (8005b90 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	08029804 	.word	0x08029804

08005b94 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 8005b94:	b590      	push	{r4, r7, lr}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	f240 1211 	movw	r2, #273	; 0x111
 8005ba0:	4906      	ldr	r1, [pc, #24]	; (8005bbc <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 8005ba2:	2004      	movs	r0, #4
 8005ba4:	f006 fa5c 	bl	800c060 <_ZnwjPKci>
 8005ba8:	4604      	mov	r4, r0
 8005baa:	4620      	mov	r0, r4
 8005bac:	f7ff ffe0 	bl	8005b70 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 8005bb0:	4623      	mov	r3, r4
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd90      	pop	{r4, r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	08025180 	.word	0x08025180

08005bc0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f00e fe36 	bl	801483c <_ZN10UtestShellC1Ev>
 8005bd0:	4a03      	ldr	r2, [pc, #12]	; (8005be0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	08029758 	.word	0x08029758

08005be4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 8005be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005be6:	b08f      	sub	sp, #60	; 0x3c
 8005be8:	af04      	add	r7, sp, #16
 8005bea:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8005bec:	2304      	movs	r3, #4
 8005bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	const char response[] = "OK\r\n";
 8005bf2:	4a38      	ldr	r2, [pc, #224]	; (8005cd4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf0>)
 8005bf4:	f107 0308 	add.w	r3, r7, #8
 8005bf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005bfc:	6018      	str	r0, [r3, #0]
 8005bfe:	3304      	adds	r3, #4
 8005c00:	7019      	strb	r1, [r3, #0]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 8005c02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c06:	4834      	ldr	r0, [pc, #208]	; (8005cd8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf4>)
 8005c08:	f7fe f89a 	bl	8003d40 <Wait_Response>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if(response_state != IDLE)
 8005c12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d141      	bne.n	8005c9e <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xba>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c1e:	f107 0308 	add.w	r3, r7, #8
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fa fb0a 	bl	800023c <strlen>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	dae7      	bge.n	8005c02 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x1e>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005c32:	f107 0310 	add.w	r3, r7, #16
 8005c36:	4929      	ldr	r1, [pc, #164]	; (8005cdc <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf8>)
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f008 fdd4 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8005c3e:	f107 0310 	add.w	r3, r7, #16
 8005c42:	2100      	movs	r1, #0
 8005c44:	4618      	mov	r0, r3
 8005c46:	f006 fea7 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	330c      	adds	r3, #12
 8005c50:	681d      	ldr	r5, [r3, #0]
 8005c52:	f107 0318 	add.w	r3, r7, #24
 8005c56:	4922      	ldr	r1, [pc, #136]	; (8005ce0 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f008 fdc4 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8005c5e:	f107 0318 	add.w	r3, r7, #24
 8005c62:	4619      	mov	r1, r3
 8005c64:	4620      	mov	r0, r4
 8005c66:	47a8      	blx	r5
 8005c68:	4603      	mov	r3, r0
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	3264      	adds	r2, #100	; 0x64
 8005c6e:	6812      	ldr	r2, [r2, #0]
 8005c70:	f107 0008 	add.w	r0, r7, #8
 8005c74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c76:	4401      	add	r1, r0
 8005c78:	7809      	ldrb	r1, [r1, #0]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	4790      	blx	r2
 8005c7e:	f107 0318 	add.w	r3, r7, #24
 8005c82:	4618      	mov	r0, r3
 8005c84:	f009 f967 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8005c88:	f107 0310 	add.w	r3, r7, #16
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f009 f962 	bl	800ef56 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8005c92:	f7fe f831 	bl	8003cf8 <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	3301      	adds	r3, #1
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9c:	e7bf      	b.n	8005c1e <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x3a>
			break;
 8005c9e:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 8005ca0:	f010 f984 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	3338      	adds	r3, #56	; 0x38
 8005caa:	681d      	ldr	r5, [r3, #0]
 8005cac:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
 8005cb0:	f010 f98c 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	9302      	str	r3, [sp, #8]
 8005cb8:	f44f 7392 	mov.w	r3, #292	; 0x124
 8005cbc:	9301      	str	r3, [sp, #4]
 8005cbe:	4b09      	ldr	r3, [pc, #36]	; (8005ce4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 8005cc4:	4632      	mov	r2, r6
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	4620      	mov	r0, r4
 8005cca:	47a8      	blx	r5
}
 8005ccc:	bf00      	nop
 8005cce:	372c      	adds	r7, #44	; 0x2c
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd4:	08025514 	.word	0x08025514
 8005cd8:	08025100 	.word	0x08025100
 8005cdc:	080254b0 	.word	0x080254b0
 8005ce0:	080254d8 	.word	0x080254d8
 8005ce4:	08025180 	.word	0x08025180
 8005ce8:	08025550 	.word	0x08025550

08005cec <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff fbe6 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005cfc:	4a03      	ldr	r2, [pc, #12]	; (8005d0c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4618      	mov	r0, r3
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	08029738 	.word	0x08029738

08005d10 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005d10:	b590      	push	{r4, r7, lr}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	f240 1227 	movw	r2, #295	; 0x127
 8005d1c:	4906      	ldr	r1, [pc, #24]	; (8005d38 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 8005d1e:	2004      	movs	r0, #4
 8005d20:	f006 f99e 	bl	800c060 <_ZnwjPKci>
 8005d24:	4604      	mov	r4, r0
 8005d26:	4620      	mov	r0, r4
 8005d28:	f7ff ffe0 	bl	8005cec <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 8005d2c:	4623      	mov	r3, r4
 8005d2e:	4618      	mov	r0, r3
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd90      	pop	{r4, r7, pc}
 8005d36:	bf00      	nop
 8005d38:	08025180 	.word	0x08025180

08005d3c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f00e fd78 	bl	801483c <_ZN10UtestShellC1Ev>
 8005d4c:	4a03      	ldr	r2, [pc, #12]	; (8005d5c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4618      	mov	r0, r3
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	0802968c 	.word	0x0802968c

08005d60 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8005d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d62:	b091      	sub	sp, #68	; 0x44
 8005d64:	af04      	add	r7, sp, #16
 8005d66:	6078      	str	r0, [r7, #4]
	Status response = TIMEOUT_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data",AT_CWMODE_STATION).withIntParameter("size", strlen(AT_CWMODE_STATION));
 8005d6e:	f107 030c 	add.w	r3, r7, #12
 8005d72:	493a      	ldr	r1, [pc, #232]	; (8005e5c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xfc>)
 8005d74:	4618      	mov	r0, r3
 8005d76:	f008 fd36 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8005d7a:	f107 030c 	add.w	r3, r7, #12
 8005d7e:	2100      	movs	r1, #0
 8005d80:	4618      	mov	r0, r3
 8005d82:	f006 fe09 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005d86:	4604      	mov	r4, r0
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	330c      	adds	r3, #12
 8005d8c:	681d      	ldr	r5, [r3, #0]
 8005d8e:	f107 0314 	add.w	r3, r7, #20
 8005d92:	4933      	ldr	r1, [pc, #204]	; (8005e60 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x100>)
 8005d94:	4618      	mov	r0, r3
 8005d96:	f008 fd26 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8005d9a:	f107 0314 	add.w	r3, r7, #20
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4620      	mov	r0, r4
 8005da2:	47a8      	blx	r5
 8005da4:	4604      	mov	r4, r0
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	334c      	adds	r3, #76	; 0x4c
 8005daa:	681d      	ldr	r5, [r3, #0]
 8005dac:	f107 031c 	add.w	r3, r7, #28
 8005db0:	492c      	ldr	r1, [pc, #176]	; (8005e64 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x104>)
 8005db2:	4618      	mov	r0, r3
 8005db4:	f008 fd17 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8005db8:	f107 031c 	add.w	r3, r7, #28
 8005dbc:	4a2a      	ldr	r2, [pc, #168]	; (8005e68 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x108>)
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	47a8      	blx	r5
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	332c      	adds	r3, #44	; 0x2c
 8005dca:	681d      	ldr	r5, [r3, #0]
 8005dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dd0:	4926      	ldr	r1, [pc, #152]	; (8005e6c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x10c>)
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f008 fd07 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8005dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ddc:	220d      	movs	r2, #13
 8005dde:	4619      	mov	r1, r3
 8005de0:	4620      	mov	r0, r4
 8005de2:	47a8      	blx	r5
 8005de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005de8:	4618      	mov	r0, r3
 8005dea:	f009 f8b4 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8005dee:	f107 031c 	add.w	r3, r7, #28
 8005df2:	4618      	mov	r0, r3
 8005df4:	f009 f8af 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8005df8:	f107 0314 	add.w	r3, r7, #20
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f009 f8aa 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8005e02:	f107 030c 	add.w	r3, r7, #12
 8005e06:	4618      	mov	r0, r3
 8005e08:	f009 f8a5 	bl	800ef56 <_ZN12SimpleStringD1Ev>

	while(1)
	{

		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005e0c:	4918      	ldr	r1, [pc, #96]	; (8005e70 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x110>)
 8005e0e:	4819      	ldr	r0, [pc, #100]	; (8005e74 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x114>)
 8005e10:	f7fd ffd8 	bl	8003dc4 <Connect_Wifi>
 8005e14:	4603      	mov	r3, r0
 8005e16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if(response != IDLE)
 8005e1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	d100      	bne.n	8005e24 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xc4>
		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005e22:	e7f3      	b.n	8005e0c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xac>
		{
			break;
 8005e24:	bf00      	nop
		}

	}


	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005e26:	f010 f8c1 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	3338      	adds	r3, #56	; 0x38
 8005e30:	681d      	ldr	r5, [r3, #0]
 8005e32:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 8005e36:	f010 f8c9 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	9302      	str	r3, [sp, #8]
 8005e3e:	f44f 739d 	mov.w	r3, #314	; 0x13a
 8005e42:	9301      	str	r3, [sp, #4]
 8005e44:	4b0c      	ldr	r3, [pc, #48]	; (8005e78 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x118>)
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x11c>)
 8005e4a:	4632      	mov	r2, r6
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	4620      	mov	r0, r4
 8005e50:	47a8      	blx	r5

}
 8005e52:	bf00      	nop
 8005e54:	3734      	adds	r7, #52	; 0x34
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	080254b0 	.word	0x080254b0
 8005e60:	080254b4 	.word	0x080254b4
 8005e64:	080254c8 	.word	0x080254c8
 8005e68:	08025104 	.word	0x08025104
 8005e6c:	080254d0 	.word	0x080254d0
 8005e70:	0802557c 	.word	0x0802557c
 8005e74:	08025584 	.word	0x08025584
 8005e78:	08025180 	.word	0x08025180
 8005e7c:	0802558c 	.word	0x0802558c

08005e80 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7ff fb1c 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005e90:	4a03      	ldr	r2, [pc, #12]	; (8005ea0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	0802966c 	.word	0x0802966c

08005ea4 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 8005ea4:	b590      	push	{r4, r7, lr}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8005eb0:	4906      	ldr	r1, [pc, #24]	; (8005ecc <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 8005eb2:	2004      	movs	r0, #4
 8005eb4:	f006 f8d4 	bl	800c060 <_ZnwjPKci>
 8005eb8:	4604      	mov	r4, r0
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f7ff ffe0 	bl	8005e80 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 8005ec0:	4623      	mov	r3, r4
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd90      	pop	{r4, r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	08025180 	.word	0x08025180

08005ed0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f00e fcae 	bl	801483c <_ZN10UtestShellC1Ev>
 8005ee0:	4a03      	ldr	r2, [pc, #12]	; (8005ef0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	080295c0 	.word	0x080295c0

08005ef4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 8005ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ef6:	b0e3      	sub	sp, #396	; 0x18c
 8005ef8:	af04      	add	r7, sp, #16
 8005efa:	1d3b      	adds	r3, r7, #4
 8005efc:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 8005efe:	4a85      	ldr	r2, [pc, #532]	; (8006114 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x220>)
 8005f00:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005f04:	4611      	mov	r1, r2
 8005f06:	2296      	movs	r2, #150	; 0x96
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f01c f943 	bl	8022194 <memcpy>
	{ "OK\r\n",									// station mode response (AT+CWMODE=1)
	  "OK\r\n",									//  disconnect command response (AT+CWQAP)
	  "ERROR\r\n"								// connect wifi command response (AT+CWJAP="SSID","password")
	};

	const char fake_tx_buffer[3][50] =
 8005f0e:	f107 0308 	add.w	r3, r7, #8
 8005f12:	4a81      	ldr	r2, [pc, #516]	; (8006118 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x224>)
 8005f14:	4618      	mov	r0, r3
 8005f16:	4611      	mov	r1, r2
 8005f18:	2396      	movs	r3, #150	; 0x96
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f01c f93a 	bl	8022194 <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005f20:	2300      	movs	r3, #0
 8005f22:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8005f26:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	dc67      	bgt.n	8005ffe <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x10a>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]).withIntParameter("size", strlen(fake_tx_buffer[i]));
 8005f2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f32:	497a      	ldr	r1, [pc, #488]	; (800611c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x228>)
 8005f34:	4618      	mov	r0, r3
 8005f36:	f008 fc56 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8005f3a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f3e:	2100      	movs	r1, #0
 8005f40:	4618      	mov	r0, r3
 8005f42:	f006 fd29 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005f46:	4604      	mov	r4, r0
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	330c      	adds	r3, #12
 8005f4c:	681d      	ldr	r5, [r3, #0]
 8005f4e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f52:	4973      	ldr	r1, [pc, #460]	; (8006120 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x22c>)
 8005f54:	4618      	mov	r0, r3
 8005f56:	f008 fc46 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8005f5a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f5e:	4619      	mov	r1, r3
 8005f60:	4620      	mov	r0, r4
 8005f62:	47a8      	blx	r5
 8005f64:	4604      	mov	r4, r0
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	334c      	adds	r3, #76	; 0x4c
 8005f6a:	681d      	ldr	r5, [r3, #0]
 8005f6c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f70:	496c      	ldr	r1, [pc, #432]	; (8006124 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x230>)
 8005f72:	4618      	mov	r0, r3
 8005f74:	f008 fc37 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8005f78:	f107 0208 	add.w	r2, r7, #8
 8005f7c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8005f80:	2132      	movs	r1, #50	; 0x32
 8005f82:	fb01 f303 	mul.w	r3, r1, r3
 8005f86:	441a      	add	r2, r3
 8005f88:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	4620      	mov	r0, r4
 8005f90:	47a8      	blx	r5
 8005f92:	4604      	mov	r4, r0
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	332c      	adds	r3, #44	; 0x2c
 8005f98:	681d      	ldr	r5, [r3, #0]
 8005f9a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005f9e:	4962      	ldr	r1, [pc, #392]	; (8006128 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x234>)
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f008 fc20 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8005fa6:	f107 0208 	add.w	r2, r7, #8
 8005faa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8005fae:	2132      	movs	r1, #50	; 0x32
 8005fb0:	fb01 f303 	mul.w	r3, r1, r3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fa f940 	bl	800023c <strlen>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	47a8      	blx	r5
 8005fca:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f008 ffc1 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8005fd4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f008 ffbc 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8005fde:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f008 ffb7 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8005fe8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005fec:	4618      	mov	r0, r3
 8005fee:	f008 ffb2 	bl	800ef56 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005ff2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8005ffc:	e793      	b.n	8005f26 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x32>
	}
	Status response = IDLE;
 8005ffe:	2304      	movs	r3, #4
 8006000:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
	int i = 0;
 8006004:	2300      	movs	r3, #0
 8006006:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 800600a:	4948      	ldr	r1, [pc, #288]	; (800612c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x238>)
 800600c:	4848      	ldr	r0, [pc, #288]	; (8006130 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x23c>)
 800600e:	f7fd fed9 	bl	8003dc4 <Connect_Wifi>
 8006012:	4603      	mov	r3, r0
 8006014:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
		if(response != IDLE)
 8006018:	f897 316b 	ldrb.w	r3, [r7, #363]	; 0x16b
 800601c:	2b04      	cmp	r3, #4
 800601e:	d15d      	bne.n	80060dc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e8>
		{
			break;
		}

		if(i<3)
 8006020:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8006024:	2b02      	cmp	r3, #2
 8006026:	dcf0      	bgt.n	800600a <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x116>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006028:	2300      	movs	r3, #0
 800602a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800602e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8006032:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8006036:	2132      	movs	r1, #50	; 0x32
 8006038:	fb01 f303 	mul.w	r3, r1, r3
 800603c:	4413      	add	r3, r2
 800603e:	4618      	mov	r0, r3
 8006040:	f7fa f8fc 	bl	800023c <strlen>
 8006044:	4603      	mov	r3, r0
 8006046:	461a      	mov	r2, r3
 8006048:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800604c:	4293      	cmp	r3, r2
 800604e:	da3f      	bge.n	80060d0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1dc>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006050:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8006054:	4931      	ldr	r1, [pc, #196]	; (800611c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x228>)
 8006056:	4618      	mov	r0, r3
 8006058:	f008 fbc5 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800605c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8006060:	2100      	movs	r1, #0
 8006062:	4618      	mov	r0, r3
 8006064:	f006 fc98 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006068:	4604      	mov	r4, r0
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	330c      	adds	r3, #12
 800606e:	681d      	ldr	r5, [r3, #0]
 8006070:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006074:	492f      	ldr	r1, [pc, #188]	; (8006134 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x240>)
 8006076:	4618      	mov	r0, r3
 8006078:	f008 fbb5 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800607c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006080:	4619      	mov	r1, r3
 8006082:	4620      	mov	r0, r4
 8006084:	47a8      	blx	r5
 8006086:	4603      	mov	r3, r0
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	3264      	adds	r2, #100	; 0x64
 800608c:	6812      	ldr	r2, [r2, #0]
 800608e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006092:	2032      	movs	r0, #50	; 0x32
 8006094:	fb00 f101 	mul.w	r1, r0, r1
 8006098:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 800609c:	4408      	add	r0, r1
 800609e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80060a2:	4401      	add	r1, r0
 80060a4:	39d8      	subs	r1, #216	; 0xd8
 80060a6:	7809      	ldrb	r1, [r1, #0]
 80060a8:	4618      	mov	r0, r3
 80060aa:	4790      	blx	r2
 80060ac:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80060b0:	4618      	mov	r0, r3
 80060b2:	f008 ff50 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80060b6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80060ba:	4618      	mov	r0, r3
 80060bc:	f008 ff4b 	bl	800ef56 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 80060c0:	f7fd fe1a 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80060c4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80060c8:	3301      	adds	r3, #1
 80060ca:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80060ce:	e7ae      	b.n	800602e <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x13a>
			}
			i++;
 80060d0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80060d4:	3301      	adds	r3, #1
 80060d6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		}

	}
 80060da:	e796      	b.n	800600a <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x116>
			break;
 80060dc:	bf00      	nop
	LONGS_EQUAL(STATUS_ERROR,response);
 80060de:	f00f ff65 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 80060e2:	4604      	mov	r4, r0
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	3338      	adds	r3, #56	; 0x38
 80060e8:	681d      	ldr	r5, [r3, #0]
 80060ea:	f897 616b 	ldrb.w	r6, [r7, #363]	; 0x16b
 80060ee:	f00f ff6d 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80060f2:	4603      	mov	r3, r0
 80060f4:	9302      	str	r3, [sp, #8]
 80060f6:	f44f 73b3 	mov.w	r3, #358	; 0x166
 80060fa:	9301      	str	r3, [sp, #4]
 80060fc:	4b0e      	ldr	r3, [pc, #56]	; (8006138 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x244>)
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	4b0e      	ldr	r3, [pc, #56]	; (800613c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x248>)
 8006102:	4632      	mov	r2, r6
 8006104:	2103      	movs	r1, #3
 8006106:	4620      	mov	r0, r4
 8006108:	47a8      	blx	r5

}
 800610a:	bf00      	nop
 800610c:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 8006110:	46bd      	mov	sp, r7
 8006112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006114:	080255e4 	.word	0x080255e4
 8006118:	0802567c 	.word	0x0802567c
 800611c:	080254b0 	.word	0x080254b0
 8006120:	080254b4 	.word	0x080254b4
 8006124:	080254c8 	.word	0x080254c8
 8006128:	080254d0 	.word	0x080254d0
 800612c:	0802557c 	.word	0x0802557c
 8006130:	08025584 	.word	0x08025584
 8006134:	080254d8 	.word	0x080254d8
 8006138:	08025180 	.word	0x08025180
 800613c:	080255b8 	.word	0x080255b8

08006140 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff f9bc 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006150:	4a03      	ldr	r2, [pc, #12]	; (8006160 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4618      	mov	r0, r3
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	080295a0 	.word	0x080295a0

08006164 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 8006164:	b590      	push	{r4, r7, lr}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8006170:	4906      	ldr	r1, [pc, #24]	; (800618c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 8006172:	2004      	movs	r0, #4
 8006174:	f005 ff74 	bl	800c060 <_ZnwjPKci>
 8006178:	4604      	mov	r4, r0
 800617a:	4620      	mov	r0, r4
 800617c:	f7ff ffe0 	bl	8006140 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 8006180:	4623      	mov	r3, r4
 8006182:	4618      	mov	r0, r3
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	bd90      	pop	{r4, r7, pc}
 800618a:	bf00      	nop
 800618c:	08025180 	.word	0x08025180

08006190 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4618      	mov	r0, r3
 800619c:	f00e fb4e 	bl	801483c <_ZN10UtestShellC1Ev>
 80061a0:	4a03      	ldr	r2, [pc, #12]	; (80061b0 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	080294f4 	.word	0x080294f4

080061b4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 80061b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061b6:	b0e3      	sub	sp, #396	; 0x18c
 80061b8:	af04      	add	r7, sp, #16
 80061ba:	1d3b      	adds	r3, r7, #4
 80061bc:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 80061be:	4a84      	ldr	r2, [pc, #528]	; (80063d0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x21c>)
 80061c0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80061c4:	4611      	mov	r1, r2
 80061c6:	2296      	movs	r2, #150	; 0x96
 80061c8:	4618      	mov	r0, r3
 80061ca:	f01b ffe3 	bl	8022194 <memcpy>
	{ "OK\r\n",
	  "OK\r\n",
	  "OK\r\n"
	};

	const char fake_tx_buffer[3][50] =
 80061ce:	f107 0308 	add.w	r3, r7, #8
 80061d2:	4a80      	ldr	r2, [pc, #512]	; (80063d4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x220>)
 80061d4:	4618      	mov	r0, r3
 80061d6:	4611      	mov	r1, r2
 80061d8:	2396      	movs	r3, #150	; 0x96
 80061da:	461a      	mov	r2, r3
 80061dc:	f01b ffda 	bl	8022194 <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 80061e0:	2300      	movs	r3, #0
 80061e2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80061e6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	dc67      	bgt.n	80062be <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x10a>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]).withIntParameter("size", strlen(fake_tx_buffer[i]));
 80061ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80061f2:	4979      	ldr	r1, [pc, #484]	; (80063d8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x224>)
 80061f4:	4618      	mov	r0, r3
 80061f6:	f008 faf6 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80061fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80061fe:	2100      	movs	r1, #0
 8006200:	4618      	mov	r0, r3
 8006202:	f006 fbc9 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006206:	4604      	mov	r4, r0
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	330c      	adds	r3, #12
 800620c:	681d      	ldr	r5, [r3, #0]
 800620e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006212:	4972      	ldr	r1, [pc, #456]	; (80063dc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x228>)
 8006214:	4618      	mov	r0, r3
 8006216:	f008 fae6 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800621a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800621e:	4619      	mov	r1, r3
 8006220:	4620      	mov	r0, r4
 8006222:	47a8      	blx	r5
 8006224:	4604      	mov	r4, r0
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	334c      	adds	r3, #76	; 0x4c
 800622a:	681d      	ldr	r5, [r3, #0]
 800622c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006230:	496b      	ldr	r1, [pc, #428]	; (80063e0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x22c>)
 8006232:	4618      	mov	r0, r3
 8006234:	f008 fad7 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006238:	f107 0208 	add.w	r2, r7, #8
 800623c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8006240:	2132      	movs	r1, #50	; 0x32
 8006242:	fb01 f303 	mul.w	r3, r1, r3
 8006246:	441a      	add	r2, r3
 8006248:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800624c:	4619      	mov	r1, r3
 800624e:	4620      	mov	r0, r4
 8006250:	47a8      	blx	r5
 8006252:	4604      	mov	r4, r0
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	332c      	adds	r3, #44	; 0x2c
 8006258:	681d      	ldr	r5, [r3, #0]
 800625a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800625e:	4961      	ldr	r1, [pc, #388]	; (80063e4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x230>)
 8006260:	4618      	mov	r0, r3
 8006262:	f008 fac0 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006266:	f107 0208 	add.w	r2, r7, #8
 800626a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800626e:	2132      	movs	r1, #50	; 0x32
 8006270:	fb01 f303 	mul.w	r3, r1, r3
 8006274:	4413      	add	r3, r2
 8006276:	4618      	mov	r0, r3
 8006278:	f7f9 ffe0 	bl	800023c <strlen>
 800627c:	4603      	mov	r3, r0
 800627e:	461a      	mov	r2, r3
 8006280:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8006284:	4619      	mov	r1, r3
 8006286:	4620      	mov	r0, r4
 8006288:	47a8      	blx	r5
 800628a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800628e:	4618      	mov	r0, r3
 8006290:	f008 fe61 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8006294:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006298:	4618      	mov	r0, r3
 800629a:	f008 fe5c 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800629e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80062a2:	4618      	mov	r0, r3
 80062a4:	f008 fe57 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80062a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80062ac:	4618      	mov	r0, r3
 80062ae:	f008 fe52 	bl	800ef56 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 80062b2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80062b6:	3301      	adds	r3, #1
 80062b8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80062bc:	e793      	b.n	80061e6 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x32>
	}
	Status response;
	int i = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 80062c4:	4948      	ldr	r1, [pc, #288]	; (80063e8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x234>)
 80062c6:	4849      	ldr	r0, [pc, #292]	; (80063ec <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x238>)
 80062c8:	f7fd fd7c 	bl	8003dc4 <Connect_Wifi>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
		if(response != IDLE)
 80062d2:	f897 316b 	ldrb.w	r3, [r7, #363]	; 0x16b
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d15d      	bne.n	8006396 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e2>
		{
			break;
		}

		if(i<3)
 80062da:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80062de:	2b02      	cmp	r3, #2
 80062e0:	dcf0      	bgt.n	80062c4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x110>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80062e2:	2300      	movs	r3, #0
 80062e4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80062e8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80062ec:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80062f0:	2132      	movs	r1, #50	; 0x32
 80062f2:	fb01 f303 	mul.w	r3, r1, r3
 80062f6:	4413      	add	r3, r2
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7f9 ff9f 	bl	800023c <strlen>
 80062fe:	4603      	mov	r3, r0
 8006300:	461a      	mov	r2, r3
 8006302:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006306:	4293      	cmp	r3, r2
 8006308:	da3f      	bge.n	800638a <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1d6>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 800630a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800630e:	4932      	ldr	r1, [pc, #200]	; (80063d8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x224>)
 8006310:	4618      	mov	r0, r3
 8006312:	f008 fa68 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006316:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800631a:	2100      	movs	r1, #0
 800631c:	4618      	mov	r0, r3
 800631e:	f006 fb3b 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006322:	4604      	mov	r4, r0
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	330c      	adds	r3, #12
 8006328:	681d      	ldr	r5, [r3, #0]
 800632a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800632e:	4930      	ldr	r1, [pc, #192]	; (80063f0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x23c>)
 8006330:	4618      	mov	r0, r3
 8006332:	f008 fa58 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006336:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800633a:	4619      	mov	r1, r3
 800633c:	4620      	mov	r0, r4
 800633e:	47a8      	blx	r5
 8006340:	4603      	mov	r3, r0
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	3264      	adds	r2, #100	; 0x64
 8006346:	6812      	ldr	r2, [r2, #0]
 8006348:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800634c:	2032      	movs	r0, #50	; 0x32
 800634e:	fb00 f101 	mul.w	r1, r0, r1
 8006352:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 8006356:	4408      	add	r0, r1
 8006358:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800635c:	4401      	add	r1, r0
 800635e:	39d8      	subs	r1, #216	; 0xd8
 8006360:	7809      	ldrb	r1, [r1, #0]
 8006362:	4618      	mov	r0, r3
 8006364:	4790      	blx	r2
 8006366:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800636a:	4618      	mov	r0, r3
 800636c:	f008 fdf3 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8006370:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8006374:	4618      	mov	r0, r3
 8006376:	f008 fdee 	bl	800ef56 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 800637a:	f7fd fcbd 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800637e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006382:	3301      	adds	r3, #1
 8006384:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8006388:	e7ae      	b.n	80062e8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x134>
			}
			i++;
 800638a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800638e:	3301      	adds	r3, #1
 8006390:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		}

	}
 8006394:	e796      	b.n	80062c4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x110>
			break;
 8006396:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 8006398:	f00f fe08 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 800639c:	4604      	mov	r4, r0
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	3338      	adds	r3, #56	; 0x38
 80063a2:	681d      	ldr	r5, [r3, #0]
 80063a4:	f897 616b 	ldrb.w	r6, [r7, #363]	; 0x16b
 80063a8:	f00f fe10 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80063ac:	4603      	mov	r3, r0
 80063ae:	9302      	str	r3, [sp, #8]
 80063b0:	f44f 73c9 	mov.w	r3, #402	; 0x192
 80063b4:	9301      	str	r3, [sp, #4]
 80063b6:	4b0f      	ldr	r3, [pc, #60]	; (80063f4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x240>)
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	4b0f      	ldr	r3, [pc, #60]	; (80063f8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x244>)
 80063bc:	4632      	mov	r2, r6
 80063be:	2102      	movs	r1, #2
 80063c0:	4620      	mov	r0, r4
 80063c2:	47a8      	blx	r5

}
 80063c4:	bf00      	nop
 80063c6:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ce:	bf00      	nop
 80063d0:	0802573c 	.word	0x0802573c
 80063d4:	0802567c 	.word	0x0802567c
 80063d8:	080254b0 	.word	0x080254b0
 80063dc:	080254b4 	.word	0x080254b4
 80063e0:	080254c8 	.word	0x080254c8
 80063e4:	080254d0 	.word	0x080254d0
 80063e8:	0802557c 	.word	0x0802557c
 80063ec:	08025584 	.word	0x08025584
 80063f0:	080254d8 	.word	0x080254d8
 80063f4:	08025180 	.word	0x08025180
 80063f8:	08025714 	.word	0x08025714

080063fc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4618      	mov	r0, r3
 8006408:	f7ff f85e 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800640c:	4a03      	ldr	r2, [pc, #12]	; (800641c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4618      	mov	r0, r3
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	080294d4 	.word	0x080294d4

08006420 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8006420:	b590      	push	{r4, r7, lr}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	f44f 72cb 	mov.w	r2, #406	; 0x196
 800642c:	4906      	ldr	r1, [pc, #24]	; (8006448 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 800642e:	2004      	movs	r0, #4
 8006430:	f005 fe16 	bl	800c060 <_ZnwjPKci>
 8006434:	4604      	mov	r4, r0
 8006436:	4620      	mov	r0, r4
 8006438:	f7ff ffe0 	bl	80063fc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>
 800643c:	4623      	mov	r3, r4
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	bd90      	pop	{r4, r7, pc}
 8006446:	bf00      	nop
 8006448:	08025180 	.word	0x08025180

0800644c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>:
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4618      	mov	r0, r3
 8006458:	f00e f9f0 	bl	801483c <_ZN10UtestShellC1Ev>
 800645c:	4a03      	ldr	r2, [pc, #12]	; (800646c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4618      	mov	r0, r3
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	08029428 	.word	0x08029428

08006470 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8006470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006472:	b091      	sub	sp, #68	; 0x44
 8006474:	af04      	add	r7, sp, #16
 8006476:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP).withIntParameter("size", strlen(AT_CWQAP));
 8006478:	f107 030c 	add.w	r3, r7, #12
 800647c:	4938      	ldr	r1, [pc, #224]	; (8006560 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xf0>)
 800647e:	4618      	mov	r0, r3
 8006480:	f008 f9b1 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006484:	f107 030c 	add.w	r3, r7, #12
 8006488:	2100      	movs	r1, #0
 800648a:	4618      	mov	r0, r3
 800648c:	f006 fa84 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006490:	4604      	mov	r4, r0
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	330c      	adds	r3, #12
 8006496:	681d      	ldr	r5, [r3, #0]
 8006498:	f107 0314 	add.w	r3, r7, #20
 800649c:	4931      	ldr	r1, [pc, #196]	; (8006564 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xf4>)
 800649e:	4618      	mov	r0, r3
 80064a0:	f008 f9a1 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80064a4:	f107 0314 	add.w	r3, r7, #20
 80064a8:	4619      	mov	r1, r3
 80064aa:	4620      	mov	r0, r4
 80064ac:	47a8      	blx	r5
 80064ae:	4604      	mov	r4, r0
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	334c      	adds	r3, #76	; 0x4c
 80064b4:	681d      	ldr	r5, [r3, #0]
 80064b6:	f107 031c 	add.w	r3, r7, #28
 80064ba:	492b      	ldr	r1, [pc, #172]	; (8006568 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xf8>)
 80064bc:	4618      	mov	r0, r3
 80064be:	f008 f992 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80064c2:	f107 031c 	add.w	r3, r7, #28
 80064c6:	4a29      	ldr	r2, [pc, #164]	; (800656c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xfc>)
 80064c8:	4619      	mov	r1, r3
 80064ca:	4620      	mov	r0, r4
 80064cc:	47a8      	blx	r5
 80064ce:	4604      	mov	r4, r0
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	332c      	adds	r3, #44	; 0x2c
 80064d4:	681d      	ldr	r5, [r3, #0]
 80064d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064da:	4925      	ldr	r1, [pc, #148]	; (8006570 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x100>)
 80064dc:	4618      	mov	r0, r3
 80064de:	f008 f982 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80064e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064e6:	220a      	movs	r2, #10
 80064e8:	4619      	mov	r1, r3
 80064ea:	4620      	mov	r0, r4
 80064ec:	47a8      	blx	r5
 80064ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064f2:	4618      	mov	r0, r3
 80064f4:	f008 fd2f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80064f8:	f107 031c 	add.w	r3, r7, #28
 80064fc:	4618      	mov	r0, r3
 80064fe:	f008 fd2a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8006502:	f107 0314 	add.w	r3, r7, #20
 8006506:	4618      	mov	r0, r3
 8006508:	f008 fd25 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800650c:	f107 030c 	add.w	r3, r7, #12
 8006510:	4618      	mov	r0, r3
 8006512:	f008 fd20 	bl	800ef56 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 8006516:	f7fd fc8f 	bl	8003e38 <Disconnect_Wifi>
 800651a:	4603      	mov	r3, r0
 800651c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if(response != IDLE)
 8006520:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006524:	2b04      	cmp	r3, #4
 8006526:	d100      	bne.n	800652a <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xba>
		response = Disconnect_Wifi();
 8006528:	e7f5      	b.n	8006516 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xa6>
			break;
 800652a:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response);
 800652c:	f00f fd3e 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8006530:	4604      	mov	r4, r0
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	3338      	adds	r3, #56	; 0x38
 8006536:	681d      	ldr	r5, [r3, #0]
 8006538:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 800653c:	f00f fd46 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006540:	4603      	mov	r3, r0
 8006542:	9302      	str	r3, [sp, #8]
 8006544:	f240 13a5 	movw	r3, #421	; 0x1a5
 8006548:	9301      	str	r3, [sp, #4]
 800654a:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x104>)
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x108>)
 8006550:	4632      	mov	r2, r6
 8006552:	2101      	movs	r1, #1
 8006554:	4620      	mov	r0, r4
 8006556:	47a8      	blx	r5
}
 8006558:	bf00      	nop
 800655a:	3734      	adds	r7, #52	; 0x34
 800655c:	46bd      	mov	sp, r7
 800655e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006560:	080254b0 	.word	0x080254b0
 8006564:	080254b4 	.word	0x080254b4
 8006568:	080254c8 	.word	0x080254c8
 800656c:	08025114 	.word	0x08025114
 8006570:	080254d0 	.word	0x080254d0
 8006574:	08025180 	.word	0x08025180
 8006578:	0802558c 	.word	0x0802558c

0800657c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4618      	mov	r0, r3
 8006588:	f7fe ff9e 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800658c:	4a03      	ldr	r2, [pc, #12]	; (800659c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev+0x20>)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4618      	mov	r0, r3
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	08029408 	.word	0x08029408

080065a0 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv>:
 80065a0:	b590      	push	{r4, r7, lr}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 80065ac:	4906      	ldr	r1, [pc, #24]	; (80065c8 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv+0x28>)
 80065ae:	2004      	movs	r0, #4
 80065b0:	f005 fd56 	bl	800c060 <_ZnwjPKci>
 80065b4:	4604      	mov	r4, r0
 80065b6:	4620      	mov	r0, r4
 80065b8:	f7ff ffe0 	bl	800657c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>
 80065bc:	4623      	mov	r3, r4
 80065be:	4618      	mov	r0, r3
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd90      	pop	{r4, r7, pc}
 80065c6:	bf00      	nop
 80065c8:	08025180 	.word	0x08025180

080065cc <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>:
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f00e f930 	bl	801483c <_ZN10UtestShellC1Ev>
 80065dc:	4a03      	ldr	r2, [pc, #12]	; (80065ec <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev+0x20>)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	0802935c 	.word	0x0802935c

080065f0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv>:
{
 80065f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065f2:	b095      	sub	sp, #84	; 0x54
 80065f4:	af04      	add	r7, sp, #16
 80065f6:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP).withIntParameter("size", strlen(AT_CWQAP));
 80065f8:	f107 0308 	add.w	r3, r7, #8
 80065fc:	4955      	ldr	r1, [pc, #340]	; (8006754 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x164>)
 80065fe:	4618      	mov	r0, r3
 8006600:	f008 f8f1 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006604:	f107 0308 	add.w	r3, r7, #8
 8006608:	2100      	movs	r1, #0
 800660a:	4618      	mov	r0, r3
 800660c:	f006 f9c4 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006610:	4604      	mov	r4, r0
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	330c      	adds	r3, #12
 8006616:	681d      	ldr	r5, [r3, #0]
 8006618:	f107 0310 	add.w	r3, r7, #16
 800661c:	494e      	ldr	r1, [pc, #312]	; (8006758 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x168>)
 800661e:	4618      	mov	r0, r3
 8006620:	f008 f8e1 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006624:	f107 0310 	add.w	r3, r7, #16
 8006628:	4619      	mov	r1, r3
 800662a:	4620      	mov	r0, r4
 800662c:	47a8      	blx	r5
 800662e:	4604      	mov	r4, r0
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	334c      	adds	r3, #76	; 0x4c
 8006634:	681d      	ldr	r5, [r3, #0]
 8006636:	f107 0318 	add.w	r3, r7, #24
 800663a:	4948      	ldr	r1, [pc, #288]	; (800675c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x16c>)
 800663c:	4618      	mov	r0, r3
 800663e:	f008 f8d2 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006642:	f107 0318 	add.w	r3, r7, #24
 8006646:	4a46      	ldr	r2, [pc, #280]	; (8006760 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x170>)
 8006648:	4619      	mov	r1, r3
 800664a:	4620      	mov	r0, r4
 800664c:	47a8      	blx	r5
 800664e:	4604      	mov	r4, r0
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	332c      	adds	r3, #44	; 0x2c
 8006654:	681d      	ldr	r5, [r3, #0]
 8006656:	f107 0320 	add.w	r3, r7, #32
 800665a:	4942      	ldr	r1, [pc, #264]	; (8006764 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x174>)
 800665c:	4618      	mov	r0, r3
 800665e:	f008 f8c2 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006662:	f107 0320 	add.w	r3, r7, #32
 8006666:	220a      	movs	r2, #10
 8006668:	4619      	mov	r1, r3
 800666a:	4620      	mov	r0, r4
 800666c:	47a8      	blx	r5
 800666e:	f107 0320 	add.w	r3, r7, #32
 8006672:	4618      	mov	r0, r3
 8006674:	f008 fc6f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8006678:	f107 0318 	add.w	r3, r7, #24
 800667c:	4618      	mov	r0, r3
 800667e:	f008 fc6a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8006682:	f107 0310 	add.w	r3, r7, #16
 8006686:	4618      	mov	r0, r3
 8006688:	f008 fc65 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800668c:	f107 0308 	add.w	r3, r7, #8
 8006690:	4618      	mov	r0, r3
 8006692:	f008 fc60 	bl	800ef56 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 8006696:	f7fd fbcf 	bl	8003e38 <Disconnect_Wifi>
 800669a:	4603      	mov	r3, r0
 800669c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		if(response != IDLE)
 80066a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	d139      	bne.n	800671c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x12c>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 80066a8:	2300      	movs	r3, #0
 80066aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	dcf1      	bgt.n	8006696 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0xa6>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 80066b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066b6:	4927      	ldr	r1, [pc, #156]	; (8006754 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x164>)
 80066b8:	4618      	mov	r0, r3
 80066ba:	f008 f894 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80066be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066c2:	2100      	movs	r1, #0
 80066c4:	4618      	mov	r0, r3
 80066c6:	f006 f967 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80066ca:	4604      	mov	r4, r0
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	330c      	adds	r3, #12
 80066d0:	681d      	ldr	r5, [r3, #0]
 80066d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066d6:	4924      	ldr	r1, [pc, #144]	; (8006768 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x178>)
 80066d8:	4618      	mov	r0, r3
 80066da:	f008 f884 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80066de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066e2:	4619      	mov	r1, r3
 80066e4:	4620      	mov	r0, r4
 80066e6:	47a8      	blx	r5
 80066e8:	4603      	mov	r3, r0
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	3264      	adds	r2, #100	; 0x64
 80066ee:	6812      	ldr	r2, [r2, #0]
 80066f0:	481e      	ldr	r0, [pc, #120]	; (800676c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x17c>)
 80066f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066f4:	4401      	add	r1, r0
 80066f6:	7809      	ldrb	r1, [r1, #0]
 80066f8:	4618      	mov	r0, r3
 80066fa:	4790      	blx	r2
 80066fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006700:	4618      	mov	r0, r3
 8006702:	f008 fc28 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8006706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800670a:	4618      	mov	r0, r3
 800670c:	f008 fc23 	bl	800ef56 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8006710:	f7fd faf2 	bl	8003cf8 <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006716:	3301      	adds	r3, #1
 8006718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800671a:	e7c7      	b.n	80066ac <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0xbc>
			break;
 800671c:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 800671e:	f00f fc45 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8006722:	4604      	mov	r4, r0
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	3338      	adds	r3, #56	; 0x38
 8006728:	681d      	ldr	r5, [r3, #0]
 800672a:	f897 603b 	ldrb.w	r6, [r7, #59]	; 0x3b
 800672e:	f00f fc4d 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006732:	4603      	mov	r3, r0
 8006734:	9302      	str	r3, [sp, #8]
 8006736:	f240 13bd 	movw	r3, #445	; 0x1bd
 800673a:	9301      	str	r3, [sp, #4]
 800673c:	4b0c      	ldr	r3, [pc, #48]	; (8006770 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x180>)
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	4b0c      	ldr	r3, [pc, #48]	; (8006774 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x184>)
 8006742:	4632      	mov	r2, r6
 8006744:	2102      	movs	r1, #2
 8006746:	4620      	mov	r0, r4
 8006748:	47a8      	blx	r5
}
 800674a:	bf00      	nop
 800674c:	3744      	adds	r7, #68	; 0x44
 800674e:	46bd      	mov	sp, r7
 8006750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006752:	bf00      	nop
 8006754:	080254b0 	.word	0x080254b0
 8006758:	080254b4 	.word	0x080254b4
 800675c:	080254c8 	.word	0x080254c8
 8006760:	08025114 	.word	0x08025114
 8006764:	080254d0 	.word	0x080254d0
 8006768:	080254d8 	.word	0x080254d8
 800676c:	08025100 	.word	0x08025100
 8006770:	08025180 	.word	0x08025180
 8006774:	08025714 	.word	0x08025714

08006778 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Command_Process_Test)
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4618      	mov	r0, r3
 8006784:	f7fe fea0 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006788:	4a03      	ldr	r2, [pc, #12]	; (8006798 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev+0x20>)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4618      	mov	r0, r3
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	0802933c 	.word	0x0802933c

0800679c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv>:
 800679c:	b590      	push	{r4, r7, lr}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80067a8:	4906      	ldr	r1, [pc, #24]	; (80067c4 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv+0x28>)
 80067aa:	2004      	movs	r0, #4
 80067ac:	f005 fc58 	bl	800c060 <_ZnwjPKci>
 80067b0:	4604      	mov	r4, r0
 80067b2:	4620      	mov	r0, r4
 80067b4:	f7ff ffe0 	bl	8006778 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>
 80067b8:	4623      	mov	r3, r4
 80067ba:	4618      	mov	r0, r3
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd90      	pop	{r4, r7, pc}
 80067c2:	bf00      	nop
 80067c4:	08025180 	.word	0x08025180

080067c8 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>:
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f00e f832 	bl	801483c <_ZN10UtestShellC1Ev>
 80067d8:	4a03      	ldr	r2, [pc, #12]	; (80067e8 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev+0x20>)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4618      	mov	r0, r3
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	08029290 	.word	0x08029290

080067ec <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv>:
{
 80067ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ee:	b09d      	sub	sp, #116	; 0x74
 80067f0:	af04      	add	r7, sp, #16
 80067f2:	6078      	str	r0, [r7, #4]
	char *response_arr[3] =
 80067f4:	4a7a      	ldr	r2, [pc, #488]	; (80069e0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1f4>)
 80067f6:	f107 0314 	add.w	r3, r7, #20
 80067fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80067fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{ (char*)AT_RESPONSE_OK,									// station mode response
	  (char*)AT_RESPONSE_OK,									// check wifi connection response
	  (char*)AT_RESPONSE_OK										// connect wifi command response
	};

	char *fake_command_buffer[3] =
 8006800:	4a78      	ldr	r2, [pc, #480]	; (80069e4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1f8>)
 8006802:	f107 0308 	add.w	r3, r7, #8
 8006806:	ca07      	ldmia	r2, {r0, r1, r2}
 8006808:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)AT_CWMODE_STATION,
		(char*)AT_CWQAP,
		(char*)"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 800680c:	2300      	movs	r3, #0
 800680e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006812:	2b02      	cmp	r3, #2
 8006814:	dc63      	bgt.n	80068de <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xf2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]).withIntParameter("size", strlen(fake_command_buffer[i]));
 8006816:	f107 0320 	add.w	r3, r7, #32
 800681a:	4973      	ldr	r1, [pc, #460]	; (80069e8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1fc>)
 800681c:	4618      	mov	r0, r3
 800681e:	f007 ffe2 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006822:	f107 0320 	add.w	r3, r7, #32
 8006826:	2100      	movs	r1, #0
 8006828:	4618      	mov	r0, r3
 800682a:	f006 f8b5 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800682e:	4604      	mov	r4, r0
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	330c      	adds	r3, #12
 8006834:	681d      	ldr	r5, [r3, #0]
 8006836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800683a:	496c      	ldr	r1, [pc, #432]	; (80069ec <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x200>)
 800683c:	4618      	mov	r0, r3
 800683e:	f007 ffd2 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006846:	4619      	mov	r1, r3
 8006848:	4620      	mov	r0, r4
 800684a:	47a8      	blx	r5
 800684c:	4604      	mov	r4, r0
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	334c      	adds	r3, #76	; 0x4c
 8006852:	681d      	ldr	r5, [r3, #0]
 8006854:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006858:	4965      	ldr	r1, [pc, #404]	; (80069f0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x204>)
 800685a:	4618      	mov	r0, r3
 800685c:	f007 ffc3 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006868:	4413      	add	r3, r2
 800686a:	f853 2c58 	ldr.w	r2, [r3, #-88]
 800686e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006872:	4619      	mov	r1, r3
 8006874:	4620      	mov	r0, r4
 8006876:	47a8      	blx	r5
 8006878:	4604      	mov	r4, r0
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	332c      	adds	r3, #44	; 0x2c
 800687e:	681d      	ldr	r5, [r3, #0]
 8006880:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006884:	495b      	ldr	r1, [pc, #364]	; (80069f4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x208>)
 8006886:	4618      	mov	r0, r3
 8006888:	f007 ffad 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800688c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006894:	4413      	add	r3, r2
 8006896:	f853 3c58 	ldr.w	r3, [r3, #-88]
 800689a:	4618      	mov	r0, r3
 800689c:	f7f9 fcce 	bl	800023c <strlen>
 80068a0:	4603      	mov	r3, r0
 80068a2:	461a      	mov	r2, r3
 80068a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068a8:	4619      	mov	r1, r3
 80068aa:	4620      	mov	r0, r4
 80068ac:	47a8      	blx	r5
 80068ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068b2:	4618      	mov	r0, r3
 80068b4:	f008 fb4f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80068b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80068bc:	4618      	mov	r0, r3
 80068be:	f008 fb4a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80068c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068c6:	4618      	mov	r0, r3
 80068c8:	f008 fb45 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80068cc:	f107 0320 	add.w	r3, r7, #32
 80068d0:	4618      	mov	r0, r3
 80068d2:	f008 fb40 	bl	800ef56 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 80068d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068d8:	3301      	adds	r3, #1
 80068da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068dc:	e798      	b.n	8006810 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x24>
	}
	Status response;
	int i = 0;
 80068de:	2300      	movs	r3, #0
 80068e0:	65bb      	str	r3, [r7, #88]	; 0x58
	while(1)
	{
		response = Command_Process(fake_command_buffer, response_arr, 3);
 80068e2:	f107 0114 	add.w	r1, r7, #20
 80068e6:	f107 0308 	add.w	r3, r7, #8
 80068ea:	2203      	movs	r2, #3
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fd fabf 	bl	8003e70 <Command_Process>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		if(response != IDLE)
 80068f8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d153      	bne.n	80069a8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1bc>
		{
			break;
		}

		if(i<3)
 8006900:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006902:	2b02      	cmp	r3, #2
 8006904:	dced      	bgt.n	80068e2 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xf6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006906:	2300      	movs	r3, #0
 8006908:	657b      	str	r3, [r7, #84]	; 0x54
 800690a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006912:	4413      	add	r3, r2
 8006914:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006918:	4618      	mov	r0, r3
 800691a:	f7f9 fc8f 	bl	800023c <strlen>
 800691e:	4603      	mov	r3, r0
 8006920:	461a      	mov	r2, r3
 8006922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006924:	4293      	cmp	r3, r2
 8006926:	da3b      	bge.n	80069a0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1b4>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006928:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800692c:	492e      	ldr	r1, [pc, #184]	; (80069e8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1fc>)
 800692e:	4618      	mov	r0, r3
 8006930:	f007 ff59 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006934:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006938:	2100      	movs	r1, #0
 800693a:	4618      	mov	r0, r3
 800693c:	f006 f82c 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006940:	4604      	mov	r4, r0
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	330c      	adds	r3, #12
 8006946:	681d      	ldr	r5, [r3, #0]
 8006948:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800694c:	492a      	ldr	r1, [pc, #168]	; (80069f8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x20c>)
 800694e:	4618      	mov	r0, r3
 8006950:	f007 ff49 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006954:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006958:	4619      	mov	r1, r3
 800695a:	4620      	mov	r0, r4
 800695c:	47a8      	blx	r5
 800695e:	4602      	mov	r2, r0
 8006960:	6813      	ldr	r3, [r2, #0]
 8006962:	3364      	adds	r3, #100	; 0x64
 8006964:	681c      	ldr	r4, [r3, #0]
 8006966:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800696e:	440b      	add	r3, r1
 8006970:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 8006974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006976:	440b      	add	r3, r1
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	4619      	mov	r1, r3
 800697c:	4610      	mov	r0, r2
 800697e:	47a0      	blx	r4
 8006980:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006984:	4618      	mov	r0, r3
 8006986:	f008 fae6 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800698a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800698e:	4618      	mov	r0, r3
 8006990:	f008 fae1 	bl	800ef56 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006994:	f7fd f9b0 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800699a:	3301      	adds	r3, #1
 800699c:	657b      	str	r3, [r7, #84]	; 0x54
 800699e:	e7b4      	b.n	800690a <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x11e>
			}
			i++;
 80069a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069a2:	3301      	adds	r3, #1
 80069a4:	65bb      	str	r3, [r7, #88]	; 0x58
		}

	}
 80069a6:	e79c      	b.n	80068e2 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xf6>
			break;
 80069a8:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 80069aa:	f00f faff 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 80069ae:	4604      	mov	r4, r0
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	3338      	adds	r3, #56	; 0x38
 80069b4:	681d      	ldr	r5, [r3, #0]
 80069b6:	f897 6053 	ldrb.w	r6, [r7, #83]	; 0x53
 80069ba:	f00f fb07 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80069be:	4603      	mov	r3, r0
 80069c0:	9302      	str	r3, [sp, #8]
 80069c2:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 80069c6:	9301      	str	r3, [sp, #4]
 80069c8:	4b0c      	ldr	r3, [pc, #48]	; (80069fc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x210>)
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x214>)
 80069ce:	4632      	mov	r2, r6
 80069d0:	2102      	movs	r1, #2
 80069d2:	4620      	mov	r0, r4
 80069d4:	47a8      	blx	r5

}
 80069d6:	bf00      	nop
 80069d8:	3764      	adds	r7, #100	; 0x64
 80069da:	46bd      	mov	sp, r7
 80069dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069de:	bf00      	nop
 80069e0:	080257d4 	.word	0x080257d4
 80069e4:	080257e0 	.word	0x080257e0
 80069e8:	080254b0 	.word	0x080254b0
 80069ec:	080254b4 	.word	0x080254b4
 80069f0:	080254c8 	.word	0x080254c8
 80069f4:	080254d0 	.word	0x080254d0
 80069f8:	080254d8 	.word	0x080254d8
 80069fc:	08025180 	.word	0x08025180
 8006a00:	08025714 	.word	0x08025714

08006a04 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fe fd5a 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006a14:	4a03      	ldr	r2, [pc, #12]	; (8006a24 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev+0x20>)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	08029270 	.word	0x08029270

08006a28 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv>:
 8006a28:	b590      	push	{r4, r7, lr}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 8006a34:	4906      	ldr	r1, [pc, #24]	; (8006a50 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv+0x28>)
 8006a36:	2004      	movs	r0, #4
 8006a38:	f005 fb12 	bl	800c060 <_ZnwjPKci>
 8006a3c:	4604      	mov	r4, r0
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f7ff ffe0 	bl	8006a04 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>
 8006a44:	4623      	mov	r3, r4
 8006a46:	4618      	mov	r0, r3
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd90      	pop	{r4, r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	08025180 	.word	0x08025180

08006a54 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>:
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f00d feec 	bl	801483c <_ZN10UtestShellC1Ev>
 8006a64:	4a03      	ldr	r2, [pc, #12]	; (8006a74 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev+0x20>)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	080291c4 	.word	0x080291c4

08006a78 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv>:
{
 8006a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a7a:	b0b3      	sub	sp, #204	; 0xcc
 8006a7c:	af04      	add	r7, sp, #16
 8006a7e:	6078      	str	r0, [r7, #4]
	char response_arr[2][50] =
 8006a80:	4a82      	ldr	r2, [pc, #520]	; (8006c8c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x214>)
 8006a82:	f107 0314 	add.w	r3, r7, #20
 8006a86:	4611      	mov	r1, r2
 8006a88:	2264      	movs	r2, #100	; 0x64
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f01b fb82 	bl	8022194 <memcpy>
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};

	char *fake_command_buffer[2] =
 8006a90:	4a7f      	ldr	r2, [pc, #508]	; (8006c90 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x218>)
 8006a92:	f107 030c 	add.w	r3, r7, #12
 8006a96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a9a:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<2;i++)
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006aa4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	dc67      	bgt.n	8006b7c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x104>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]).withIntParameter("size", strlen(fake_command_buffer[i]));
 8006aac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006ab0:	4978      	ldr	r1, [pc, #480]	; (8006c94 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x21c>)
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f007 fe97 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006ab8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006abc:	2100      	movs	r1, #0
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f005 ff6a 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	330c      	adds	r3, #12
 8006aca:	681d      	ldr	r5, [r3, #0]
 8006acc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006ad0:	4971      	ldr	r1, [pc, #452]	; (8006c98 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x220>)
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f007 fe87 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006ad8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006adc:	4619      	mov	r1, r3
 8006ade:	4620      	mov	r0, r4
 8006ae0:	47a8      	blx	r5
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	334c      	adds	r3, #76	; 0x4c
 8006ae8:	681d      	ldr	r5, [r3, #0]
 8006aea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006aee:	496b      	ldr	r1, [pc, #428]	; (8006c9c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x224>)
 8006af0:	4618      	mov	r0, r3
 8006af2:	f007 fe78 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006af6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006b00:	4413      	add	r3, r2
 8006b02:	f853 2cac 	ldr.w	r2, [r3, #-172]
 8006b06:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	47a8      	blx	r5
 8006b10:	4604      	mov	r4, r0
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	332c      	adds	r3, #44	; 0x2c
 8006b16:	681d      	ldr	r5, [r3, #0]
 8006b18:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006b1c:	4960      	ldr	r1, [pc, #384]	; (8006ca0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x228>)
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f007 fe61 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006b24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006b2e:	4413      	add	r3, r2
 8006b30:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7f9 fb81 	bl	800023c <strlen>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006b42:	4619      	mov	r1, r3
 8006b44:	4620      	mov	r0, r4
 8006b46:	47a8      	blx	r5
 8006b48:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f008 fa02 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8006b52:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006b56:	4618      	mov	r0, r3
 8006b58:	f008 f9fd 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8006b5c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006b60:	4618      	mov	r0, r3
 8006b62:	f008 f9f8 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8006b66:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f008 f9f3 	bl	800ef56 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<2;i++)
 8006b70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b74:	3301      	adds	r3, #1
 8006b76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b7a:	e793      	b.n	8006aa4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x2c>
	}

	Status response;
	int i = 0;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006b82:	4948      	ldr	r1, [pc, #288]	; (8006ca4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x22c>)
 8006b84:	4848      	ldr	r0, [pc, #288]	; (8006ca8 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x230>)
 8006b86:	f7fd fa09 	bl	8003f9c <Connect_TCP_Server>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
		if(response != IDLE)
 8006b90:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	d15d      	bne.n	8006c54 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1dc>
		{
			break;
		}

		if(i<3)
 8006b98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	dcf0      	bgt.n	8006b82 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x10a>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ba6:	f107 0214 	add.w	r2, r7, #20
 8006baa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006bae:	2132      	movs	r1, #50	; 0x32
 8006bb0:	fb01 f303 	mul.w	r3, r1, r3
 8006bb4:	4413      	add	r3, r2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7f9 fb40 	bl	800023c <strlen>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	da3f      	bge.n	8006c48 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d0>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006bc8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006bcc:	4931      	ldr	r1, [pc, #196]	; (8006c94 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x21c>)
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f007 fe09 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006bd4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006bd8:	2100      	movs	r1, #0
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f005 fedc 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006be0:	4604      	mov	r4, r0
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	330c      	adds	r3, #12
 8006be6:	681d      	ldr	r5, [r3, #0]
 8006be8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006bec:	492f      	ldr	r1, [pc, #188]	; (8006cac <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x234>)
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f007 fdf9 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006bf4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	47a8      	blx	r5
 8006bfe:	4603      	mov	r3, r0
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	3264      	adds	r2, #100	; 0x64
 8006c04:	6812      	ldr	r2, [r2, #0]
 8006c06:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8006c0a:	2032      	movs	r0, #50	; 0x32
 8006c0c:	fb00 f101 	mul.w	r1, r0, r1
 8006c10:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8006c14:	4408      	add	r0, r1
 8006c16:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8006c1a:	4401      	add	r1, r0
 8006c1c:	39a4      	subs	r1, #164	; 0xa4
 8006c1e:	7809      	ldrb	r1, [r1, #0]
 8006c20:	4618      	mov	r0, r3
 8006c22:	4790      	blx	r2
 8006c24:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f008 f994 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8006c2e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006c32:	4618      	mov	r0, r3
 8006c34:	f008 f98f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006c38:	f7fd f85e 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006c3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c40:	3301      	adds	r3, #1
 8006c42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c46:	e7ae      	b.n	8006ba6 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x12e>
			}
			i++;
 8006c48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}

	}
 8006c52:	e796      	b.n	8006b82 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x10a>
			break;
 8006c54:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 8006c56:	f00f f9a9 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	3338      	adds	r3, #56	; 0x38
 8006c60:	681d      	ldr	r5, [r3, #0]
 8006c62:	f897 60ab 	ldrb.w	r6, [r7, #171]	; 0xab
 8006c66:	f00f f9b1 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	9302      	str	r3, [sp, #8]
 8006c6e:	f44f 7305 	mov.w	r3, #532	; 0x214
 8006c72:	9301      	str	r3, [sp, #4]
 8006c74:	4b0e      	ldr	r3, [pc, #56]	; (8006cb0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x238>)
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	4b0e      	ldr	r3, [pc, #56]	; (8006cb4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x23c>)
 8006c7a:	4632      	mov	r2, r6
 8006c7c:	2102      	movs	r1, #2
 8006c7e:	4620      	mov	r0, r4
 8006c80:	47a8      	blx	r5

}
 8006c82:	bf00      	nop
 8006c84:	37bc      	adds	r7, #188	; 0xbc
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	080257fc 	.word	0x080257fc
 8006c90:	08025860 	.word	0x08025860
 8006c94:	080254b0 	.word	0x080254b0
 8006c98:	080254b4 	.word	0x080254b4
 8006c9c:	080254c8 	.word	0x080254c8
 8006ca0:	080254d0 	.word	0x080254d0
 8006ca4:	080257ec 	.word	0x080257ec
 8006ca8:	080257f0 	.word	0x080257f0
 8006cac:	080254d8 	.word	0x080254d8
 8006cb0:	08025180 	.word	0x08025180
 8006cb4:	08025714 	.word	0x08025714

08006cb8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fe fc00 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006cc8:	4a03      	ldr	r2, [pc, #12]	; (8006cd8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev+0x20>)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	080291a4 	.word	0x080291a4

08006cdc <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv>:
 8006cdc:	b590      	push	{r4, r7, lr}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006ce8:	4906      	ldr	r1, [pc, #24]	; (8006d04 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv+0x28>)
 8006cea:	2004      	movs	r0, #4
 8006cec:	f005 f9b8 	bl	800c060 <_ZnwjPKci>
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f7ff ffe0 	bl	8006cb8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>
 8006cf8:	4623      	mov	r3, r4
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd90      	pop	{r4, r7, pc}
 8006d02:	bf00      	nop
 8006d04:	08025180 	.word	0x08025180

08006d08 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>:
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f00d fd92 	bl	801483c <_ZN10UtestShellC1Ev>
 8006d18:	4a03      	ldr	r2, [pc, #12]	; (8006d28 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev+0x20>)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4618      	mov	r0, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	080290f8 	.word	0x080290f8

08006d2c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv>:
{
 8006d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d2e:	b093      	sub	sp, #76	; 0x4c
 8006d30:	af04      	add	r7, sp, #16
 8006d32:	6078      	str	r0, [r7, #4]

	char *fake_command_buffer[2] =
 8006d34:	4a40      	ldr	r2, [pc, #256]	; (8006e38 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x10c>)
 8006d36:	f107 030c 	add.w	r3, r7, #12
 8006d3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d3e:	e883 0003 	stmia.w	r3, {r0, r1}

		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[0]).withIntParameter("size", strlen(fake_command_buffer[0]));
 8006d42:	f107 0314 	add.w	r3, r7, #20
 8006d46:	493d      	ldr	r1, [pc, #244]	; (8006e3c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x110>)
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f007 fd4c 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006d4e:	f107 0314 	add.w	r3, r7, #20
 8006d52:	2100      	movs	r1, #0
 8006d54:	4618      	mov	r0, r3
 8006d56:	f005 fe1f 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	330c      	adds	r3, #12
 8006d60:	681d      	ldr	r5, [r3, #0]
 8006d62:	f107 031c 	add.w	r3, r7, #28
 8006d66:	4936      	ldr	r1, [pc, #216]	; (8006e40 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x114>)
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f007 fd3c 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006d6e:	f107 031c 	add.w	r3, r7, #28
 8006d72:	4619      	mov	r1, r3
 8006d74:	4620      	mov	r0, r4
 8006d76:	47a8      	blx	r5
 8006d78:	4604      	mov	r4, r0
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	334c      	adds	r3, #76	; 0x4c
 8006d7e:	681d      	ldr	r5, [r3, #0]
 8006d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d84:	492f      	ldr	r1, [pc, #188]	; (8006e44 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x118>)
 8006d86:	4618      	mov	r0, r3
 8006d88:	f007 fd2d 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d92:	4619      	mov	r1, r3
 8006d94:	4620      	mov	r0, r4
 8006d96:	47a8      	blx	r5
 8006d98:	4604      	mov	r4, r0
 8006d9a:	6823      	ldr	r3, [r4, #0]
 8006d9c:	332c      	adds	r3, #44	; 0x2c
 8006d9e:	681d      	ldr	r5, [r3, #0]
 8006da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006da4:	4928      	ldr	r1, [pc, #160]	; (8006e48 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x11c>)
 8006da6:	4618      	mov	r0, r3
 8006da8:	f007 fd1d 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7f9 fa44 	bl	800023c <strlen>
 8006db4:	4603      	mov	r3, r0
 8006db6:	461a      	mov	r2, r3
 8006db8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	47a8      	blx	r5
 8006dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f008 f8c5 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8006dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f008 f8c0 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8006dd6:	f107 031c 	add.w	r3, r7, #28
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f008 f8bb 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8006de0:	f107 0314 	add.w	r3, r7, #20
 8006de4:	4618      	mov	r0, r3
 8006de6:	f008 f8b6 	bl	800ef56 <_ZN12SimpleStringD1Ev>


	Status response;
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006dea:	4918      	ldr	r1, [pc, #96]	; (8006e4c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x120>)
 8006dec:	4818      	ldr	r0, [pc, #96]	; (8006e50 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x124>)
 8006dee:	f7fd f8d5 	bl	8003f9c <Connect_TCP_Server>
 8006df2:	4603      	mov	r3, r0
 8006df4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if(response != IDLE)
 8006df8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	d100      	bne.n	8006e02 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xd6>
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006e00:	e7f3      	b.n	8006dea <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xbe>
		{
			break;
 8006e02:	bf00      	nop
		}

	}
	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8006e04:	f00f f8d2 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8006e08:	4604      	mov	r4, r0
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	3338      	adds	r3, #56	; 0x38
 8006e0e:	681d      	ldr	r5, [r3, #0]
 8006e10:	f897 6037 	ldrb.w	r6, [r7, #55]	; 0x37
 8006e14:	f00f f8da 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	9302      	str	r3, [sp, #8]
 8006e1c:	f240 232f 	movw	r3, #559	; 0x22f
 8006e20:	9301      	str	r3, [sp, #4]
 8006e22:	4b0c      	ldr	r3, [pc, #48]	; (8006e54 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x128>)
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x12c>)
 8006e28:	4632      	mov	r2, r6
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	47a8      	blx	r5

}
 8006e30:	bf00      	nop
 8006e32:	373c      	adds	r7, #60	; 0x3c
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e38:	08025860 	.word	0x08025860
 8006e3c:	080254b0 	.word	0x080254b0
 8006e40:	080254b4 	.word	0x080254b4
 8006e44:	080254c8 	.word	0x080254c8
 8006e48:	080254d0 	.word	0x080254d0
 8006e4c:	080257ec 	.word	0x080257ec
 8006e50:	080257f0 	.word	0x080257f0
 8006e54:	08025180 	.word	0x08025180
 8006e58:	0802558c 	.word	0x0802558c

08006e5c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fe fb2e 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006e6c:	4a03      	ldr	r2, [pc, #12]	; (8006e7c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev+0x20>)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4618      	mov	r0, r3
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	080290d8 	.word	0x080290d8

08006e80 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv>:
 8006e80:	b590      	push	{r4, r7, lr}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	f240 2233 	movw	r2, #563	; 0x233
 8006e8c:	4906      	ldr	r1, [pc, #24]	; (8006ea8 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv+0x28>)
 8006e8e:	2004      	movs	r0, #4
 8006e90:	f005 f8e6 	bl	800c060 <_ZnwjPKci>
 8006e94:	4604      	mov	r4, r0
 8006e96:	4620      	mov	r0, r4
 8006e98:	f7ff ffe0 	bl	8006e5c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>
 8006e9c:	4623      	mov	r3, r4
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd90      	pop	{r4, r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	08025180 	.word	0x08025180

08006eac <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>:
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f00d fcc0 	bl	801483c <_ZN10UtestShellC1Ev>
 8006ebc:	4a03      	ldr	r2, [pc, #12]	; (8006ecc <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev+0x20>)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	0802902c 	.word	0x0802902c

08006ed0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv>:
{
 8006ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ed2:	b0b3      	sub	sp, #204	; 0xcc
 8006ed4:	af04      	add	r7, sp, #16
 8006ed6:	6078      	str	r0, [r7, #4]
	char response_arr[2][50] =
 8006ed8:	4a82      	ldr	r2, [pc, #520]	; (80070e4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x214>)
 8006eda:	f107 0314 	add.w	r3, r7, #20
 8006ede:	4611      	mov	r1, r2
 8006ee0:	2264      	movs	r2, #100	; 0x64
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f01b f956 	bl	8022194 <memcpy>
	{
	  AT_RESPONSE_OK,
	  AT_RESPONSE_ERROR
	};

	char *fake_command_buffer[2] =
 8006ee8:	4a7f      	ldr	r2, [pc, #508]	; (80070e8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x218>)
 8006eea:	f107 030c 	add.w	r3, r7, #12
 8006eee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ef2:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<2;i++)
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006efc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	dc67      	bgt.n	8006fd4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x104>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]).withIntParameter("size", strlen(fake_command_buffer[i]));
 8006f04:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006f08:	4978      	ldr	r1, [pc, #480]	; (80070ec <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x21c>)
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f007 fc6b 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006f10:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006f14:	2100      	movs	r1, #0
 8006f16:	4618      	mov	r0, r3
 8006f18:	f005 fd3e 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	330c      	adds	r3, #12
 8006f22:	681d      	ldr	r5, [r3, #0]
 8006f24:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006f28:	4971      	ldr	r1, [pc, #452]	; (80070f0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x220>)
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f007 fc5b 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006f30:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006f34:	4619      	mov	r1, r3
 8006f36:	4620      	mov	r0, r4
 8006f38:	47a8      	blx	r5
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	6823      	ldr	r3, [r4, #0]
 8006f3e:	334c      	adds	r3, #76	; 0x4c
 8006f40:	681d      	ldr	r5, [r3, #0]
 8006f42:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006f46:	496b      	ldr	r1, [pc, #428]	; (80070f4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x224>)
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f007 fc4c 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006f4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006f58:	4413      	add	r3, r2
 8006f5a:	f853 2cac 	ldr.w	r2, [r3, #-172]
 8006f5e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006f62:	4619      	mov	r1, r3
 8006f64:	4620      	mov	r0, r4
 8006f66:	47a8      	blx	r5
 8006f68:	4604      	mov	r4, r0
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	332c      	adds	r3, #44	; 0x2c
 8006f6e:	681d      	ldr	r5, [r3, #0]
 8006f70:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006f74:	4960      	ldr	r1, [pc, #384]	; (80070f8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x228>)
 8006f76:	4618      	mov	r0, r3
 8006f78:	f007 fc35 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8006f7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006f86:	4413      	add	r3, r2
 8006f88:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7f9 f955 	bl	800023c <strlen>
 8006f92:	4603      	mov	r3, r0
 8006f94:	461a      	mov	r2, r3
 8006f96:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	47a8      	blx	r5
 8006fa0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f007 ffd6 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8006faa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f007 ffd1 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8006fb4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f007 ffcc 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8006fbe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f007 ffc7 	bl	800ef56 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<2;i++)
 8006fc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006fcc:	3301      	adds	r3, #1
 8006fce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fd2:	e793      	b.n	8006efc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x2c>
	}

	Status response;
	int i = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006fda:	4948      	ldr	r1, [pc, #288]	; (80070fc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x22c>)
 8006fdc:	4848      	ldr	r0, [pc, #288]	; (8007100 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x230>)
 8006fde:	f7fc ffdd 	bl	8003f9c <Connect_TCP_Server>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
		if(response != IDLE)
 8006fe8:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	d15d      	bne.n	80070ac <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1dc>
		{
			break;
		}

		if(i<3)
 8006ff0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	dcf0      	bgt.n	8006fda <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x10a>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ffe:	f107 0214 	add.w	r2, r7, #20
 8007002:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007006:	2132      	movs	r1, #50	; 0x32
 8007008:	fb01 f303 	mul.w	r3, r1, r3
 800700c:	4413      	add	r3, r2
 800700e:	4618      	mov	r0, r3
 8007010:	f7f9 f914 	bl	800023c <strlen>
 8007014:	4603      	mov	r3, r0
 8007016:	461a      	mov	r2, r3
 8007018:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800701c:	4293      	cmp	r3, r2
 800701e:	da3f      	bge.n	80070a0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d0>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8007020:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007024:	4931      	ldr	r1, [pc, #196]	; (80070ec <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x21c>)
 8007026:	4618      	mov	r0, r3
 8007028:	f007 fbdd 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800702c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007030:	2100      	movs	r1, #0
 8007032:	4618      	mov	r0, r3
 8007034:	f005 fcb0 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007038:	4604      	mov	r4, r0
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	330c      	adds	r3, #12
 800703e:	681d      	ldr	r5, [r3, #0]
 8007040:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007044:	492f      	ldr	r1, [pc, #188]	; (8007104 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x234>)
 8007046:	4618      	mov	r0, r3
 8007048:	f007 fbcd 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800704c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007050:	4619      	mov	r1, r3
 8007052:	4620      	mov	r0, r4
 8007054:	47a8      	blx	r5
 8007056:	4603      	mov	r3, r0
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	3264      	adds	r2, #100	; 0x64
 800705c:	6812      	ldr	r2, [r2, #0]
 800705e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8007062:	2032      	movs	r0, #50	; 0x32
 8007064:	fb00 f101 	mul.w	r1, r0, r1
 8007068:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 800706c:	4408      	add	r0, r1
 800706e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8007072:	4401      	add	r1, r0
 8007074:	39a4      	subs	r1, #164	; 0xa4
 8007076:	7809      	ldrb	r1, [r1, #0]
 8007078:	4618      	mov	r0, r3
 800707a:	4790      	blx	r2
 800707c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007080:	4618      	mov	r0, r3
 8007082:	f007 ff68 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8007086:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800708a:	4618      	mov	r0, r3
 800708c:	f007 ff63 	bl	800ef56 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8007090:	f7fc fe32 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8007094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007098:	3301      	adds	r3, #1
 800709a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800709e:	e7ae      	b.n	8006ffe <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x12e>
			}
			i++;
 80070a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80070a4:	3301      	adds	r3, #1
 80070a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}

	}
 80070aa:	e796      	b.n	8006fda <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x10a>
			break;
 80070ac:	bf00      	nop
	LONGS_EQUAL(STATUS_ERROR,response);
 80070ae:	f00e ff7d 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 80070b2:	4604      	mov	r4, r0
 80070b4:	6823      	ldr	r3, [r4, #0]
 80070b6:	3338      	adds	r3, #56	; 0x38
 80070b8:	681d      	ldr	r5, [r3, #0]
 80070ba:	f897 60ab 	ldrb.w	r6, [r7, #171]	; 0xab
 80070be:	f00e ff85 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80070c2:	4603      	mov	r3, r0
 80070c4:	9302      	str	r3, [sp, #8]
 80070c6:	f240 235b 	movw	r3, #603	; 0x25b
 80070ca:	9301      	str	r3, [sp, #4]
 80070cc:	4b0e      	ldr	r3, [pc, #56]	; (8007108 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x238>)
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	4b0e      	ldr	r3, [pc, #56]	; (800710c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x23c>)
 80070d2:	4632      	mov	r2, r6
 80070d4:	2103      	movs	r1, #3
 80070d6:	4620      	mov	r0, r4
 80070d8:	47a8      	blx	r5

}
 80070da:	bf00      	nop
 80070dc:	37bc      	adds	r7, #188	; 0xbc
 80070de:	46bd      	mov	sp, r7
 80070e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070e2:	bf00      	nop
 80070e4:	08025868 	.word	0x08025868
 80070e8:	08025860 	.word	0x08025860
 80070ec:	080254b0 	.word	0x080254b0
 80070f0:	080254b4 	.word	0x080254b4
 80070f4:	080254c8 	.word	0x080254c8
 80070f8:	080254d0 	.word	0x080254d0
 80070fc:	080257ec 	.word	0x080257ec
 8007100:	080257f0 	.word	0x080257f0
 8007104:	080254d8 	.word	0x080254d8
 8007108:	08025180 	.word	0x08025180
 800710c:	080255b8 	.word	0x080255b8

08007110 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4618      	mov	r0, r3
 800711c:	f7fe f9d4 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007120:	4a03      	ldr	r2, [pc, #12]	; (8007130 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev+0x20>)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4618      	mov	r0, r3
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	0802900c 	.word	0x0802900c

08007134 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv>:
 8007134:	b590      	push	{r4, r7, lr}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	f240 225f 	movw	r2, #607	; 0x25f
 8007140:	4906      	ldr	r1, [pc, #24]	; (800715c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv+0x28>)
 8007142:	2004      	movs	r0, #4
 8007144:	f004 ff8c 	bl	800c060 <_ZnwjPKci>
 8007148:	4604      	mov	r4, r0
 800714a:	4620      	mov	r0, r4
 800714c:	f7ff ffe0 	bl	8007110 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>
 8007150:	4623      	mov	r3, r4
 8007152:	4618      	mov	r0, r3
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	bd90      	pop	{r4, r7, pc}
 800715a:	bf00      	nop
 800715c:	08025180 	.word	0x08025180

08007160 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>:
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4618      	mov	r0, r3
 800716c:	f00d fb66 	bl	801483c <_ZN10UtestShellC1Ev>
 8007170:	4a03      	ldr	r2, [pc, #12]	; (8007180 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev+0x20>)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	08028f60 	.word	0x08028f60

08007184 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv>:
{
 8007184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007186:	b095      	sub	sp, #84	; 0x54
 8007188:	af04      	add	r7, sp, #16
 800718a:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CIPCLOSE).withIntParameter("size", strlen(AT_CIPCLOSE));
 800718c:	f107 0308 	add.w	r3, r7, #8
 8007190:	4955      	ldr	r1, [pc, #340]	; (80072e8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x164>)
 8007192:	4618      	mov	r0, r3
 8007194:	f007 fb27 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8007198:	f107 0308 	add.w	r3, r7, #8
 800719c:	2100      	movs	r1, #0
 800719e:	4618      	mov	r0, r3
 80071a0:	f005 fbfa 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80071a4:	4604      	mov	r4, r0
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	330c      	adds	r3, #12
 80071aa:	681d      	ldr	r5, [r3, #0]
 80071ac:	f107 0310 	add.w	r3, r7, #16
 80071b0:	494e      	ldr	r1, [pc, #312]	; (80072ec <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x168>)
 80071b2:	4618      	mov	r0, r3
 80071b4:	f007 fb17 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80071b8:	f107 0310 	add.w	r3, r7, #16
 80071bc:	4619      	mov	r1, r3
 80071be:	4620      	mov	r0, r4
 80071c0:	47a8      	blx	r5
 80071c2:	4604      	mov	r4, r0
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	334c      	adds	r3, #76	; 0x4c
 80071c8:	681d      	ldr	r5, [r3, #0]
 80071ca:	f107 0318 	add.w	r3, r7, #24
 80071ce:	4948      	ldr	r1, [pc, #288]	; (80072f0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x16c>)
 80071d0:	4618      	mov	r0, r3
 80071d2:	f007 fb08 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80071d6:	f107 0318 	add.w	r3, r7, #24
 80071da:	4a46      	ldr	r2, [pc, #280]	; (80072f4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x170>)
 80071dc:	4619      	mov	r1, r3
 80071de:	4620      	mov	r0, r4
 80071e0:	47a8      	blx	r5
 80071e2:	4604      	mov	r4, r0
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	332c      	adds	r3, #44	; 0x2c
 80071e8:	681d      	ldr	r5, [r3, #0]
 80071ea:	f107 0320 	add.w	r3, r7, #32
 80071ee:	4942      	ldr	r1, [pc, #264]	; (80072f8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x174>)
 80071f0:	4618      	mov	r0, r3
 80071f2:	f007 faf8 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80071f6:	f107 0320 	add.w	r3, r7, #32
 80071fa:	220d      	movs	r2, #13
 80071fc:	4619      	mov	r1, r3
 80071fe:	4620      	mov	r0, r4
 8007200:	47a8      	blx	r5
 8007202:	f107 0320 	add.w	r3, r7, #32
 8007206:	4618      	mov	r0, r3
 8007208:	f007 fea5 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800720c:	f107 0318 	add.w	r3, r7, #24
 8007210:	4618      	mov	r0, r3
 8007212:	f007 fea0 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8007216:	f107 0310 	add.w	r3, r7, #16
 800721a:	4618      	mov	r0, r3
 800721c:	f007 fe9b 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8007220:	f107 0308 	add.w	r3, r7, #8
 8007224:	4618      	mov	r0, r3
 8007226:	f007 fe96 	bl	800ef56 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_TCP_Server();
 800722a:	f7fc fefb 	bl	8004024 <Disconnect_TCP_Server>
 800722e:	4603      	mov	r3, r0
 8007230:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		if(response != IDLE)
 8007234:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007238:	2b04      	cmp	r3, #4
 800723a:	d139      	bne.n	80072b0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x12c>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 800723c:	2300      	movs	r3, #0
 800723e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007242:	2b01      	cmp	r3, #1
 8007244:	dcf1      	bgt.n	800722a <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0xa6>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 8007246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800724a:	4927      	ldr	r1, [pc, #156]	; (80072e8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x164>)
 800724c:	4618      	mov	r0, r3
 800724e:	f007 faca 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8007252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007256:	2100      	movs	r1, #0
 8007258:	4618      	mov	r0, r3
 800725a:	f005 fb9d 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800725e:	4604      	mov	r4, r0
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	330c      	adds	r3, #12
 8007264:	681d      	ldr	r5, [r3, #0]
 8007266:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800726a:	4924      	ldr	r1, [pc, #144]	; (80072fc <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x178>)
 800726c:	4618      	mov	r0, r3
 800726e:	f007 faba 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8007272:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007276:	4619      	mov	r1, r3
 8007278:	4620      	mov	r0, r4
 800727a:	47a8      	blx	r5
 800727c:	4603      	mov	r3, r0
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	3264      	adds	r2, #100	; 0x64
 8007282:	6812      	ldr	r2, [r2, #0]
 8007284:	481e      	ldr	r0, [pc, #120]	; (8007300 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x17c>)
 8007286:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007288:	4401      	add	r1, r0
 800728a:	7809      	ldrb	r1, [r1, #0]
 800728c:	4618      	mov	r0, r3
 800728e:	4790      	blx	r2
 8007290:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007294:	4618      	mov	r0, r3
 8007296:	f007 fe5e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800729a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800729e:	4618      	mov	r0, r3
 80072a0:	f007 fe59 	bl	800ef56 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80072a4:	f7fc fd28 	bl	8003cf8 <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 80072a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072aa:	3301      	adds	r3, #1
 80072ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072ae:	e7c7      	b.n	8007240 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0xbc>
			break;
 80072b0:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 80072b2:	f00e fe7b 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 80072b6:	4604      	mov	r4, r0
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	3338      	adds	r3, #56	; 0x38
 80072bc:	681d      	ldr	r5, [r3, #0]
 80072be:	f897 603b 	ldrb.w	r6, [r7, #59]	; 0x3b
 80072c2:	f00e fe83 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80072c6:	4603      	mov	r3, r0
 80072c8:	9302      	str	r3, [sp, #8]
 80072ca:	f44f 731d 	mov.w	r3, #628	; 0x274
 80072ce:	9301      	str	r3, [sp, #4]
 80072d0:	4b0c      	ldr	r3, [pc, #48]	; (8007304 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x180>)
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	4b0c      	ldr	r3, [pc, #48]	; (8007308 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x184>)
 80072d6:	4632      	mov	r2, r6
 80072d8:	2102      	movs	r1, #2
 80072da:	4620      	mov	r0, r4
 80072dc:	47a8      	blx	r5

}
 80072de:	bf00      	nop
 80072e0:	3744      	adds	r7, #68	; 0x44
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072e6:	bf00      	nop
 80072e8:	080254b0 	.word	0x080254b0
 80072ec:	080254b4 	.word	0x080254b4
 80072f0:	080254c8 	.word	0x080254c8
 80072f4:	080258cc 	.word	0x080258cc
 80072f8:	080254d0 	.word	0x080254d0
 80072fc:	080254d8 	.word	0x080254d8
 8007300:	08025100 	.word	0x08025100
 8007304:	08025180 	.word	0x08025180
 8007308:	08025714 	.word	0x08025714

0800730c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4618      	mov	r0, r3
 8007318:	f7fe f8d6 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800731c:	4a03      	ldr	r2, [pc, #12]	; (800732c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev+0x20>)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	08028f40 	.word	0x08028f40

08007330 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv>:
 8007330:	b590      	push	{r4, r7, lr}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	f44f 721e 	mov.w	r2, #632	; 0x278
 800733c:	4906      	ldr	r1, [pc, #24]	; (8007358 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv+0x28>)
 800733e:	2004      	movs	r0, #4
 8007340:	f004 fe8e 	bl	800c060 <_ZnwjPKci>
 8007344:	4604      	mov	r4, r0
 8007346:	4620      	mov	r0, r4
 8007348:	f7ff ffe0 	bl	800730c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>
 800734c:	4623      	mov	r3, r4
 800734e:	4618      	mov	r0, r3
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	bd90      	pop	{r4, r7, pc}
 8007356:	bf00      	nop
 8007358:	08025180 	.word	0x08025180

0800735c <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>:
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4618      	mov	r0, r3
 8007368:	f00d fa68 	bl	801483c <_ZN10UtestShellC1Ev>
 800736c:	4a03      	ldr	r2, [pc, #12]	; (800737c <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev+0x20>)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	08028e94 	.word	0x08028e94

08007380 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv>:
{
 8007380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007382:	b0b7      	sub	sp, #220	; 0xdc
 8007384:	af04      	add	r7, sp, #16
 8007386:	6078      	str	r0, [r7, #4]
	Status response;
	int i = 0;
 8007388:	2300      	movs	r3, #0
 800738a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	char response_arr[2][50] =
 800738e:	4a94      	ldr	r2, [pc, #592]	; (80075e0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x260>)
 8007390:	f107 0308 	add.w	r3, r7, #8
 8007394:	4611      	mov	r1, r2
 8007396:	2264      	movs	r2, #100	; 0x64
 8007398:	4618      	mov	r0, r3
 800739a:	f01a fefb 	bl	8022194 <memcpy>
	{ AT_RESPONSE_GREATER_THAN,
	  AT_RESPONSE_SEND_OK,
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT+CIPSEND=11\r\n").withIntParameter("size", strlen("AT+CIPSEND=11\r\n"));
 800739e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80073a2:	4990      	ldr	r1, [pc, #576]	; (80075e4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x264>)
 80073a4:	4618      	mov	r0, r3
 80073a6:	f007 fa1e 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80073aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80073ae:	2100      	movs	r1, #0
 80073b0:	4618      	mov	r0, r3
 80073b2:	f005 faf1 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80073b6:	4604      	mov	r4, r0
 80073b8:	6823      	ldr	r3, [r4, #0]
 80073ba:	330c      	adds	r3, #12
 80073bc:	681d      	ldr	r5, [r3, #0]
 80073be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80073c2:	4989      	ldr	r1, [pc, #548]	; (80075e8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x268>)
 80073c4:	4618      	mov	r0, r3
 80073c6:	f007 fa0e 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80073ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80073ce:	4619      	mov	r1, r3
 80073d0:	4620      	mov	r0, r4
 80073d2:	47a8      	blx	r5
 80073d4:	4604      	mov	r4, r0
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	334c      	adds	r3, #76	; 0x4c
 80073da:	681d      	ldr	r5, [r3, #0]
 80073dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80073e0:	4982      	ldr	r1, [pc, #520]	; (80075ec <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x26c>)
 80073e2:	4618      	mov	r0, r3
 80073e4:	f007 f9ff 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80073e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80073ec:	4a80      	ldr	r2, [pc, #512]	; (80075f0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x270>)
 80073ee:	4619      	mov	r1, r3
 80073f0:	4620      	mov	r0, r4
 80073f2:	47a8      	blx	r5
 80073f4:	4604      	mov	r4, r0
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	332c      	adds	r3, #44	; 0x2c
 80073fa:	681d      	ldr	r5, [r3, #0]
 80073fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007400:	497c      	ldr	r1, [pc, #496]	; (80075f4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x274>)
 8007402:	4618      	mov	r0, r3
 8007404:	f007 f9ef 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8007408:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800740c:	220f      	movs	r2, #15
 800740e:	4619      	mov	r1, r3
 8007410:	4620      	mov	r0, r4
 8007412:	47a8      	blx	r5
 8007414:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007418:	4618      	mov	r0, r3
 800741a:	f007 fd9c 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800741e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007422:	4618      	mov	r0, r3
 8007424:	f007 fd97 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8007428:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800742c:	4618      	mov	r0, r3
 800742e:	f007 fd92 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8007432:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007436:	4618      	mov	r0, r3
 8007438:	f007 fd8d 	bl	800ef56 <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Hello World").withIntParameter("size", strlen("Hello World"));
 800743c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007440:	4968      	ldr	r1, [pc, #416]	; (80075e4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x264>)
 8007442:	4618      	mov	r0, r3
 8007444:	f007 f9cf 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8007448:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800744c:	2100      	movs	r1, #0
 800744e:	4618      	mov	r0, r3
 8007450:	f005 faa2 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007454:	4604      	mov	r4, r0
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	330c      	adds	r3, #12
 800745a:	681d      	ldr	r5, [r3, #0]
 800745c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007460:	4961      	ldr	r1, [pc, #388]	; (80075e8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x268>)
 8007462:	4618      	mov	r0, r3
 8007464:	f007 f9bf 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8007468:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800746c:	4619      	mov	r1, r3
 800746e:	4620      	mov	r0, r4
 8007470:	47a8      	blx	r5
 8007472:	4604      	mov	r4, r0
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	334c      	adds	r3, #76	; 0x4c
 8007478:	681d      	ldr	r5, [r3, #0]
 800747a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800747e:	495b      	ldr	r1, [pc, #364]	; (80075ec <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x26c>)
 8007480:	4618      	mov	r0, r3
 8007482:	f007 f9b0 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8007486:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800748a:	4a5b      	ldr	r2, [pc, #364]	; (80075f8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x278>)
 800748c:	4619      	mov	r1, r3
 800748e:	4620      	mov	r0, r4
 8007490:	47a8      	blx	r5
 8007492:	4604      	mov	r4, r0
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	332c      	adds	r3, #44	; 0x2c
 8007498:	681d      	ldr	r5, [r3, #0]
 800749a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800749e:	4955      	ldr	r1, [pc, #340]	; (80075f4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x274>)
 80074a0:	4618      	mov	r0, r3
 80074a2:	f007 f9a0 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80074a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80074aa:	220b      	movs	r2, #11
 80074ac:	4619      	mov	r1, r3
 80074ae:	4620      	mov	r0, r4
 80074b0:	47a8      	blx	r5
 80074b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80074b6:	4618      	mov	r0, r3
 80074b8:	f007 fd4d 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80074bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80074c0:	4618      	mov	r0, r3
 80074c2:	f007 fd48 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80074c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80074ca:	4618      	mov	r0, r3
 80074cc:	f007 fd43 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80074d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80074d4:	4618      	mov	r0, r3
 80074d6:	f007 fd3e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
	while(1)
	{
		response = Send_TCP_Message((char*)"Hello World");
 80074da:	4847      	ldr	r0, [pc, #284]	; (80075f8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x278>)
 80074dc:	f7fc fdbe 	bl	800405c <Send_TCP_Message>
 80074e0:	4603      	mov	r3, r0
 80074e2:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

		if(response != IDLE)
 80074e6:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80074ea:	2b04      	cmp	r3, #4
 80074ec:	d15d      	bne.n	80075aa <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x22a>
		{
			break;
		}

		if(i<2)
 80074ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	dcf1      	bgt.n	80074da <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x15a>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80074f6:	2300      	movs	r3, #0
 80074f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074fc:	f107 0208 	add.w	r2, r7, #8
 8007500:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007504:	2132      	movs	r1, #50	; 0x32
 8007506:	fb01 f303 	mul.w	r3, r1, r3
 800750a:	4413      	add	r3, r2
 800750c:	4618      	mov	r0, r3
 800750e:	f7f8 fe95 	bl	800023c <strlen>
 8007512:	4603      	mov	r3, r0
 8007514:	461a      	mov	r2, r3
 8007516:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800751a:	4293      	cmp	r3, r2
 800751c:	da3f      	bge.n	800759e <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x21e>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 800751e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007522:	4930      	ldr	r1, [pc, #192]	; (80075e4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x264>)
 8007524:	4618      	mov	r0, r3
 8007526:	f007 f95e 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800752a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800752e:	2100      	movs	r1, #0
 8007530:	4618      	mov	r0, r3
 8007532:	f005 fa31 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007536:	4604      	mov	r4, r0
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	330c      	adds	r3, #12
 800753c:	681d      	ldr	r5, [r3, #0]
 800753e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007542:	492e      	ldr	r1, [pc, #184]	; (80075fc <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x27c>)
 8007544:	4618      	mov	r0, r3
 8007546:	f007 f94e 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800754a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800754e:	4619      	mov	r1, r3
 8007550:	4620      	mov	r0, r4
 8007552:	47a8      	blx	r5
 8007554:	4603      	mov	r3, r0
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	3264      	adds	r2, #100	; 0x64
 800755a:	6812      	ldr	r2, [r2, #0]
 800755c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8007560:	2032      	movs	r0, #50	; 0x32
 8007562:	fb00 f101 	mul.w	r1, r0, r1
 8007566:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 800756a:	4408      	add	r0, r1
 800756c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8007570:	4401      	add	r1, r0
 8007572:	39c0      	subs	r1, #192	; 0xc0
 8007574:	7809      	ldrb	r1, [r1, #0]
 8007576:	4618      	mov	r0, r3
 8007578:	4790      	blx	r2
 800757a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800757e:	4618      	mov	r0, r3
 8007580:	f007 fce9 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8007584:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007588:	4618      	mov	r0, r3
 800758a:	f007 fce4 	bl	800ef56 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 800758e:	f7fc fbb3 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8007592:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007596:	3301      	adds	r3, #1
 8007598:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800759c:	e7ae      	b.n	80074fc <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x17c>
			}
			i++;
 800759e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80075a2:	3301      	adds	r3, #1
 80075a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		}

	}
 80075a8:	e797      	b.n	80074da <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x15a>
			break;
 80075aa:	bf00      	nop

	LONGS_EQUAL(STATUS_OK,response);
 80075ac:	f00e fcfe 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 80075b0:	4604      	mov	r4, r0
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	3338      	adds	r3, #56	; 0x38
 80075b6:	681d      	ldr	r5, [r3, #0]
 80075b8:	f897 60bf 	ldrb.w	r6, [r7, #191]	; 0xbf
 80075bc:	f00e fd06 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80075c0:	4603      	mov	r3, r0
 80075c2:	9302      	str	r3, [sp, #8]
 80075c4:	f240 2399 	movw	r3, #665	; 0x299
 80075c8:	9301      	str	r3, [sp, #4]
 80075ca:	4b0d      	ldr	r3, [pc, #52]	; (8007600 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x280>)
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	4b0d      	ldr	r3, [pc, #52]	; (8007604 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x284>)
 80075d0:	4632      	mov	r2, r6
 80075d2:	2102      	movs	r1, #2
 80075d4:	4620      	mov	r0, r4
 80075d6:	47a8      	blx	r5

}
 80075d8:	bf00      	nop
 80075da:	37cc      	adds	r7, #204	; 0xcc
 80075dc:	46bd      	mov	sp, r7
 80075de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075e0:	080258ec 	.word	0x080258ec
 80075e4:	080254b0 	.word	0x080254b0
 80075e8:	080254b4 	.word	0x080254b4
 80075ec:	080254c8 	.word	0x080254c8
 80075f0:	080258dc 	.word	0x080258dc
 80075f4:	080254d0 	.word	0x080254d0
 80075f8:	080253c0 	.word	0x080253c0
 80075fc:	080254d8 	.word	0x080254d8
 8007600:	08025180 	.word	0x08025180
 8007604:	08025714 	.word	0x08025714

08007608 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4618      	mov	r0, r3
 8007614:	f7fd ff58 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007618:	4a03      	ldr	r2, [pc, #12]	; (8007628 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev+0x20>)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4618      	mov	r0, r3
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	08028e74 	.word	0x08028e74

0800762c <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv>:
 800762c:	b590      	push	{r4, r7, lr}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	f240 229d 	movw	r2, #669	; 0x29d
 8007638:	4906      	ldr	r1, [pc, #24]	; (8007654 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv+0x28>)
 800763a:	2004      	movs	r0, #4
 800763c:	f004 fd10 	bl	800c060 <_ZnwjPKci>
 8007640:	4604      	mov	r4, r0
 8007642:	4620      	mov	r0, r4
 8007644:	f7ff ffe0 	bl	8007608 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>
 8007648:	4623      	mov	r3, r4
 800764a:	4618      	mov	r0, r3
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	bd90      	pop	{r4, r7, pc}
 8007652:	bf00      	nop
 8007654:	08025180 	.word	0x08025180

08007658 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>:
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4618      	mov	r0, r3
 8007664:	f00d f8ea 	bl	801483c <_ZN10UtestShellC1Ev>
 8007668:	4a03      	ldr	r2, [pc, #12]	; (8007678 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev+0x20>)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4618      	mov	r0, r3
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	08028dc8 	.word	0x08028dc8

0800767c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv>:
{
 800767c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800767e:	b0a3      	sub	sp, #140	; 0x8c
 8007680:	af04      	add	r7, sp, #16
 8007682:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,11:Hello World";		// an example data that ESP received from server
 8007684:	4b49      	ldr	r3, [pc, #292]	; (80077ac <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x130>)
 8007686:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800768a:	461d      	mov	r5, r3
 800768c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800768e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	6023      	str	r3, [r4, #0]
 8007694:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007698:	2200      	movs	r2, #0
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	605a      	str	r2, [r3, #4]
 800769e:	811a      	strh	r2, [r3, #8]

	Status response_state = IDLE;
 80076a0:	2304      	movs	r3, #4
 80076a2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50] ={0};
 80076a6:	2300      	movs	r3, #0
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	f107 0310 	add.w	r3, r7, #16
 80076ae:	222e      	movs	r2, #46	; 0x2e
 80076b0:	2100      	movs	r1, #0
 80076b2:	4618      	mov	r0, r3
 80076b4:	f01a fd7c 	bl	80221b0 <memset>

	for(int i=0;i<(int)strlen(response);i++)
 80076b8:	2300      	movs	r3, #0
 80076ba:	677b      	str	r3, [r7, #116]	; 0x74
 80076bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7f8 fdbb 	bl	800023c <strlen>
 80076c6:	4603      	mov	r3, r0
 80076c8:	461a      	mov	r2, r3
 80076ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076cc:	4293      	cmp	r3, r2
 80076ce:	da35      	bge.n	800773c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80076d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80076d4:	4936      	ldr	r1, [pc, #216]	; (80077b0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x134>)
 80076d6:	4618      	mov	r0, r3
 80076d8:	f007 f885 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80076dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80076e0:	2100      	movs	r1, #0
 80076e2:	4618      	mov	r0, r3
 80076e4:	f005 f958 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80076e8:	4604      	mov	r4, r0
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	330c      	adds	r3, #12
 80076ee:	681d      	ldr	r5, [r3, #0]
 80076f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80076f4:	492f      	ldr	r1, [pc, #188]	; (80077b4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x138>)
 80076f6:	4618      	mov	r0, r3
 80076f8:	f007 f875 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80076fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007700:	4619      	mov	r1, r3
 8007702:	4620      	mov	r0, r4
 8007704:	47a8      	blx	r5
 8007706:	4603      	mov	r3, r0
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	3264      	adds	r2, #100	; 0x64
 800770c:	6812      	ldr	r2, [r2, #0]
 800770e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8007712:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007714:	4401      	add	r1, r0
 8007716:	7809      	ldrb	r1, [r1, #0]
 8007718:	4618      	mov	r0, r3
 800771a:	4790      	blx	r2
 800771c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007720:	4618      	mov	r0, r3
 8007722:	f007 fc18 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8007726:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800772a:	4618      	mov	r0, r3
 800772c:	f007 fc13 	bl	800ef56 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8007730:	f7fc fae2 	bl	8003cf8 <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 8007734:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007736:	3301      	adds	r3, #1
 8007738:	677b      	str	r3, [r7, #116]	; 0x74
 800773a:	e7bf      	b.n	80076bc <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x40>
	}

	response_state = Read_TCP_Message(received_message);
 800773c:	f107 030c 	add.w	r3, r7, #12
 8007740:	4618      	mov	r0, r3
 8007742:	f7fc fd27 	bl	8004194 <Read_TCP_Message>
 8007746:	4603      	mov	r3, r0
 8007748:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LONGS_EQUAL(STATUS_OK,response_state);
 800774c:	f00e fc2e 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8007750:	4604      	mov	r4, r0
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	3338      	adds	r3, #56	; 0x38
 8007756:	681d      	ldr	r5, [r3, #0]
 8007758:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 800775c:	f00e fc36 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007760:	4603      	mov	r3, r0
 8007762:	9302      	str	r3, [sp, #8]
 8007764:	f240 23ad 	movw	r3, #685	; 0x2ad
 8007768:	9301      	str	r3, [sp, #4]
 800776a:	4b13      	ldr	r3, [pc, #76]	; (80077b8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x13c>)
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	4b13      	ldr	r3, [pc, #76]	; (80077bc <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x140>)
 8007770:	4632      	mov	r2, r6
 8007772:	2102      	movs	r1, #2
 8007774:	4620      	mov	r0, r4
 8007776:	47a8      	blx	r5

	STRCMP_EQUAL("Hello World",received_message);
 8007778:	f00e fc18 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 800777c:	4604      	mov	r4, r0
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	3324      	adds	r3, #36	; 0x24
 8007782:	681d      	ldr	r5, [r3, #0]
 8007784:	f00e fc22 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007788:	4603      	mov	r3, r0
 800778a:	f107 020c 	add.w	r2, r7, #12
 800778e:	9302      	str	r3, [sp, #8]
 8007790:	f240 23af 	movw	r3, #687	; 0x2af
 8007794:	9301      	str	r3, [sp, #4]
 8007796:	4b08      	ldr	r3, [pc, #32]	; (80077b8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x13c>)
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	2300      	movs	r3, #0
 800779c:	4908      	ldr	r1, [pc, #32]	; (80077c0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x144>)
 800779e:	4620      	mov	r0, r4
 80077a0:	47a8      	blx	r5

}
 80077a2:	bf00      	nop
 80077a4:	377c      	adds	r7, #124	; 0x7c
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077aa:	bf00      	nop
 80077ac:	08025980 	.word	0x08025980
 80077b0:	080254b0 	.word	0x080254b0
 80077b4:	080254d8 	.word	0x080254d8
 80077b8:	08025180 	.word	0x08025180
 80077bc:	08025950 	.word	0x08025950
 80077c0:	080253c0 	.word	0x080253c0

080077c4 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fd fe7a 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80077d4:	4a03      	ldr	r2, [pc, #12]	; (80077e4 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev+0x20>)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	08028da8 	.word	0x08028da8

080077e8 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv>:
 80077e8:	b590      	push	{r4, r7, lr}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	f240 22b3 	movw	r2, #691	; 0x2b3
 80077f4:	4906      	ldr	r1, [pc, #24]	; (8007810 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv+0x28>)
 80077f6:	2004      	movs	r0, #4
 80077f8:	f004 fc32 	bl	800c060 <_ZnwjPKci>
 80077fc:	4604      	mov	r4, r0
 80077fe:	4620      	mov	r0, r4
 8007800:	f7ff ffe0 	bl	80077c4 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>
 8007804:	4623      	mov	r3, r4
 8007806:	4618      	mov	r0, r3
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	bd90      	pop	{r4, r7, pc}
 800780e:	bf00      	nop
 8007810:	08025180 	.word	0x08025180

08007814 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>:
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4618      	mov	r0, r3
 8007820:	f00d f80c 	bl	801483c <_ZN10UtestShellC1Ev>
 8007824:	4a03      	ldr	r2, [pc, #12]	; (8007834 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev+0x20>)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4618      	mov	r0, r3
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	08028cfc 	.word	0x08028cfc

08007838 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv>:
{
 8007838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800783a:	b095      	sub	sp, #84	; 0x54
 800783c:	af04      	add	r7, sp, #16
 800783e:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8007840:	2304      	movs	r3, #4
 8007842:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	char received_message[50] ={0};
 8007846:	2300      	movs	r3, #0
 8007848:	60fb      	str	r3, [r7, #12]
 800784a:	f107 0310 	add.w	r3, r7, #16
 800784e:	222e      	movs	r2, #46	; 0x2e
 8007850:	2100      	movs	r1, #0
 8007852:	4618      	mov	r0, r3
 8007854:	f01a fcac 	bl	80221b0 <memset>
	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8007858:	f107 030c 	add.w	r3, r7, #12
 800785c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007860:	4618      	mov	r0, r3
 8007862:	f7fc fcfb 	bl	800425c <Wait_TCP_Message>
 8007866:	4603      	mov	r3, r0
 8007868:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(response_state != IDLE)
 800786c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007870:	2b04      	cmp	r3, #4
 8007872:	d100      	bne.n	8007876 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x3e>
		response_state = Wait_TCP_Message(received_message, 1000);
 8007874:	e7f0      	b.n	8007858 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x20>
			break;
 8007876:	bf00      	nop
	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 8007878:	f00e fb98 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 800787c:	4604      	mov	r4, r0
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	3338      	adds	r3, #56	; 0x38
 8007882:	681d      	ldr	r5, [r3, #0]
 8007884:	f897 603f 	ldrb.w	r6, [r7, #63]	; 0x3f
 8007888:	f00e fba0 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800788c:	4603      	mov	r3, r0
 800788e:	9302      	str	r3, [sp, #8]
 8007890:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	4b05      	ldr	r3, [pc, #20]	; (80078ac <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x74>)
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	4b05      	ldr	r3, [pc, #20]	; (80078b0 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x78>)
 800789c:	4632      	mov	r2, r6
 800789e:	2101      	movs	r1, #1
 80078a0:	4620      	mov	r0, r4
 80078a2:	47a8      	blx	r5

}
 80078a4:	bf00      	nop
 80078a6:	3744      	adds	r7, #68	; 0x44
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078ac:	08025180 	.word	0x08025180
 80078b0:	0802551c 	.word	0x0802551c

080078b4 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fd fe02 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80078c4:	4a03      	ldr	r2, [pc, #12]	; (80078d4 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev+0x20>)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	08028cdc 	.word	0x08028cdc

080078d8 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv>:
 80078d8:	b590      	push	{r4, r7, lr}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80078e4:	4906      	ldr	r1, [pc, #24]	; (8007900 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv+0x28>)
 80078e6:	2004      	movs	r0, #4
 80078e8:	f004 fbba 	bl	800c060 <_ZnwjPKci>
 80078ec:	4604      	mov	r4, r0
 80078ee:	4620      	mov	r0, r4
 80078f0:	f7ff ffe0 	bl	80078b4 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>
 80078f4:	4623      	mov	r3, r4
 80078f6:	4618      	mov	r0, r3
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd90      	pop	{r4, r7, pc}
 80078fe:	bf00      	nop
 8007900:	08025180 	.word	0x08025180

08007904 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>:
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4618      	mov	r0, r3
 8007910:	f00c ff94 	bl	801483c <_ZN10UtestShellC1Ev>
 8007914:	4a03      	ldr	r2, [pc, #12]	; (8007924 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev+0x20>)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	08028c30 	.word	0x08028c30

08007928 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv>:
{
 8007928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800792a:	b0a3      	sub	sp, #140	; 0x8c
 800792c:	af04      	add	r7, sp, #16
 800792e:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,13:PUMP_MOTOR=ON";		// an example string data that ESP received from server
 8007930:	4b4d      	ldr	r3, [pc, #308]	; (8007a68 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x140>)
 8007932:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8007936:	461d      	mov	r5, r3
 8007938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800793a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800793c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007940:	6020      	str	r0, [r4, #0]
 8007942:	3404      	adds	r4, #4
 8007944:	8021      	strh	r1, [r4, #0]
 8007946:	f107 0356 	add.w	r3, r7, #86	; 0x56
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	605a      	str	r2, [r3, #4]

	Status response_state = IDLE;
 8007950:	2304      	movs	r3, #4
 8007952:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50] ={0};
 8007956:	2300      	movs	r3, #0
 8007958:	60fb      	str	r3, [r7, #12]
 800795a:	f107 0310 	add.w	r3, r7, #16
 800795e:	222e      	movs	r2, #46	; 0x2e
 8007960:	2100      	movs	r1, #0
 8007962:	4618      	mov	r0, r3
 8007964:	f01a fc24 	bl	80221b0 <memset>

	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8007968:	f107 030c 	add.w	r3, r7, #12
 800796c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007970:	4618      	mov	r0, r3
 8007972:	f7fc fc73 	bl	800425c <Wait_TCP_Message>
 8007976:	4603      	mov	r3, r0
 8007978:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

		if(response_state != IDLE)
 800797c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8007980:	2b04      	cmp	r3, #4
 8007982:	d141      	bne.n	8007a08 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0xe0>
			break;

		for(int i=0;i<(int)strlen(response);i++)
 8007984:	2300      	movs	r3, #0
 8007986:	677b      	str	r3, [r7, #116]	; 0x74
 8007988:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800798c:	4618      	mov	r0, r3
 800798e:	f7f8 fc55 	bl	800023c <strlen>
 8007992:	4603      	mov	r3, r0
 8007994:	461a      	mov	r2, r3
 8007996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007998:	4293      	cmp	r3, r2
 800799a:	dae5      	bge.n	8007968 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x40>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 800799c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80079a0:	4932      	ldr	r1, [pc, #200]	; (8007a6c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x144>)
 80079a2:	4618      	mov	r0, r3
 80079a4:	f006 ff1f 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80079a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80079ac:	2100      	movs	r1, #0
 80079ae:	4618      	mov	r0, r3
 80079b0:	f004 fff2 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80079b4:	4604      	mov	r4, r0
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	330c      	adds	r3, #12
 80079ba:	681d      	ldr	r5, [r3, #0]
 80079bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80079c0:	492b      	ldr	r1, [pc, #172]	; (8007a70 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x148>)
 80079c2:	4618      	mov	r0, r3
 80079c4:	f006 ff0f 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80079c8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80079cc:	4619      	mov	r1, r3
 80079ce:	4620      	mov	r0, r4
 80079d0:	47a8      	blx	r5
 80079d2:	4603      	mov	r3, r0
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	3264      	adds	r2, #100	; 0x64
 80079d8:	6812      	ldr	r2, [r2, #0]
 80079da:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80079de:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80079e0:	4401      	add	r1, r0
 80079e2:	7809      	ldrb	r1, [r1, #0]
 80079e4:	4618      	mov	r0, r3
 80079e6:	4790      	blx	r2
 80079e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80079ec:	4618      	mov	r0, r3
 80079ee:	f007 fab2 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80079f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80079f6:	4618      	mov	r0, r3
 80079f8:	f007 faad 	bl	800ef56 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80079fc:	f7fc f97c 	bl	8003cf8 <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8007a00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a02:	3301      	adds	r3, #1
 8007a04:	677b      	str	r3, [r7, #116]	; 0x74
 8007a06:	e7bf      	b.n	8007988 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x60>
			break;
 8007a08:	bf00      	nop
		}
	}

	LONGS_EQUAL(STATUS_OK,response_state);
 8007a0a:	f00e facf 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8007a0e:	4604      	mov	r4, r0
 8007a10:	6823      	ldr	r3, [r4, #0]
 8007a12:	3338      	adds	r3, #56	; 0x38
 8007a14:	681d      	ldr	r5, [r3, #0]
 8007a16:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 8007a1a:	f00e fad7 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	9302      	str	r3, [sp, #8]
 8007a22:	f240 23da 	movw	r3, #730	; 0x2da
 8007a26:	9301      	str	r3, [sp, #4]
 8007a28:	4b12      	ldr	r3, [pc, #72]	; (8007a74 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x14c>)
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	4b12      	ldr	r3, [pc, #72]	; (8007a78 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x150>)
 8007a2e:	4632      	mov	r2, r6
 8007a30:	2102      	movs	r1, #2
 8007a32:	4620      	mov	r0, r4
 8007a34:	47a8      	blx	r5
	STRCMP_EQUAL("PUMP_MOTOR=ON",received_message);
 8007a36:	f00e fab9 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	3324      	adds	r3, #36	; 0x24
 8007a40:	681d      	ldr	r5, [r3, #0]
 8007a42:	f00e fac3 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007a46:	4603      	mov	r3, r0
 8007a48:	f107 020c 	add.w	r2, r7, #12
 8007a4c:	9302      	str	r3, [sp, #8]
 8007a4e:	f240 23db 	movw	r3, #731	; 0x2db
 8007a52:	9301      	str	r3, [sp, #4]
 8007a54:	4b07      	ldr	r3, [pc, #28]	; (8007a74 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x14c>)
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	2300      	movs	r3, #0
 8007a5a:	4908      	ldr	r1, [pc, #32]	; (8007a7c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x154>)
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	47a8      	blx	r5

}
 8007a60:	bf00      	nop
 8007a62:	377c      	adds	r7, #124	; 0x7c
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a68:	080259b0 	.word	0x080259b0
 8007a6c:	080254b0 	.word	0x080254b0
 8007a70:	080254d8 	.word	0x080254d8
 8007a74:	08025180 	.word	0x08025180
 8007a78:	08025950 	.word	0x08025950
 8007a7c:	080259a0 	.word	0x080259a0

08007a80 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_TCP_Bytes_Test)
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fd fd1c 	bl	80054c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007a90:	4a03      	ldr	r2, [pc, #12]	; (8007aa0 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestC1Ev+0x20>)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	08028c10 	.word	0x08028c10

08007aa4 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShell10createTestEv>:
 8007aa4:	b590      	push	{r4, r7, lr}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	f240 22df 	movw	r2, #735	; 0x2df
 8007ab0:	4906      	ldr	r1, [pc, #24]	; (8007acc <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShell10createTestEv+0x28>)
 8007ab2:	2004      	movs	r0, #4
 8007ab4:	f004 fad4 	bl	800c060 <_ZnwjPKci>
 8007ab8:	4604      	mov	r4, r0
 8007aba:	4620      	mov	r0, r4
 8007abc:	f7ff ffe0 	bl	8007a80 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestC1Ev>
 8007ac0:	4623      	mov	r3, r4
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd90      	pop	{r4, r7, pc}
 8007aca:	bf00      	nop
 8007acc:	08025180 	.word	0x08025180

08007ad0 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellC1Ev>:
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f00c feae 	bl	801483c <_ZN10UtestShellC1Ev>
 8007ae0:	4a03      	ldr	r2, [pc, #12]	; (8007af0 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellC1Ev+0x20>)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	601a      	str	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	08028b64 	.word	0x08028b64

08007af4 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv>:
{
 8007af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007af6:	b0a3      	sub	sp, #140	; 0x8c
 8007af8:	af04      	add	r7, sp, #16
 8007afa:	6078      	str	r0, [r7, #4]
	uint8_t bytesToSend[5] = {0x00,0x0A,0x45,0x02,0x04};
 8007afc:	4a97      	ldr	r2, [pc, #604]	; (8007d5c <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x268>)
 8007afe:	f107 0314 	add.w	r3, r7, #20
 8007b02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b06:	6018      	str	r0, [r3, #0]
 8007b08:	3304      	adds	r3, #4
 8007b0a:	7019      	strb	r1, [r3, #0]
	char *response_buffer[2] =
 8007b0c:	4a94      	ldr	r2, [pc, #592]	; (8007d60 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x26c>)
 8007b0e:	f107 030c 	add.w	r3, r7, #12
 8007b12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b16:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT+CIPSEND=5\r\n").withIntParameter("size", strlen("AT+CIPSEND=5\r\n"));
 8007b1a:	f107 031c 	add.w	r3, r7, #28
 8007b1e:	4991      	ldr	r1, [pc, #580]	; (8007d64 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x270>)
 8007b20:	4618      	mov	r0, r3
 8007b22:	f006 fe60 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8007b26:	f107 031c 	add.w	r3, r7, #28
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f004 ff33 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007b32:	4604      	mov	r4, r0
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	330c      	adds	r3, #12
 8007b38:	681d      	ldr	r5, [r3, #0]
 8007b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b3e:	498a      	ldr	r1, [pc, #552]	; (8007d68 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x274>)
 8007b40:	4618      	mov	r0, r3
 8007b42:	f006 fe50 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8007b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	47a8      	blx	r5
 8007b50:	4604      	mov	r4, r0
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	334c      	adds	r3, #76	; 0x4c
 8007b56:	681d      	ldr	r5, [r3, #0]
 8007b58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b5c:	4983      	ldr	r1, [pc, #524]	; (8007d6c <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x278>)
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f006 fe41 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8007b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b68:	4a81      	ldr	r2, [pc, #516]	; (8007d70 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x27c>)
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	47a8      	blx	r5
 8007b70:	4604      	mov	r4, r0
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	332c      	adds	r3, #44	; 0x2c
 8007b76:	681d      	ldr	r5, [r3, #0]
 8007b78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007b7c:	497d      	ldr	r1, [pc, #500]	; (8007d74 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x280>)
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f006 fe31 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8007b84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007b88:	220e      	movs	r2, #14
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	47a8      	blx	r5
 8007b90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007b94:	4618      	mov	r0, r3
 8007b96:	f007 f9de 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8007b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f007 f9d9 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8007ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f007 f9d4 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8007bae:	f107 031c 	add.w	r3, r7, #28
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f007 f9cf 	bl	800ef56 <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", (char*)bytesToSend).withIntParameter("size", 5);
 8007bb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007bbc:	4969      	ldr	r1, [pc, #420]	; (8007d64 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x270>)
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f006 fe11 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8007bc4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007bc8:	2100      	movs	r1, #0
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f004 fee4 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	330c      	adds	r3, #12
 8007bd6:	681d      	ldr	r5, [r3, #0]
 8007bd8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007bdc:	4962      	ldr	r1, [pc, #392]	; (8007d68 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x274>)
 8007bde:	4618      	mov	r0, r3
 8007be0:	f006 fe01 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8007be4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007be8:	4619      	mov	r1, r3
 8007bea:	4620      	mov	r0, r4
 8007bec:	47a8      	blx	r5
 8007bee:	4604      	mov	r4, r0
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	334c      	adds	r3, #76	; 0x4c
 8007bf4:	681d      	ldr	r5, [r3, #0]
 8007bf6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007bfa:	495c      	ldr	r1, [pc, #368]	; (8007d6c <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x278>)
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f006 fdf2 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8007c02:	f107 0214 	add.w	r2, r7, #20
 8007c06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	47a8      	blx	r5
 8007c10:	4604      	mov	r4, r0
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	332c      	adds	r3, #44	; 0x2c
 8007c16:	681d      	ldr	r5, [r3, #0]
 8007c18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007c1c:	4955      	ldr	r1, [pc, #340]	; (8007d74 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x280>)
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f006 fde1 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8007c24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007c28:	2205      	movs	r2, #5
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	47a8      	blx	r5
 8007c30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007c34:	4618      	mov	r0, r3
 8007c36:	f007 f98e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8007c3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f007 f989 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8007c44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f007 f984 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8007c4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007c52:	4618      	mov	r0, r3
 8007c54:	f007 f97f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
	Status response = IDLE;
 8007c58:	2304      	movs	r3, #4
 8007c5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	int i=0;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	677b      	str	r3, [r7, #116]	; 0x74
	while(1){

		response = Send_TCP_Bytes(bytesToSend, 5);
 8007c62:	f107 0314 	add.w	r3, r7, #20
 8007c66:	2105      	movs	r1, #5
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fc fa2f 	bl	80040cc <Send_TCP_Bytes>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		if(response != IDLE)
 8007c74:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007c78:	2b04      	cmp	r3, #4
 8007c7a:	d153      	bne.n	8007d24 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x230>
		{
			break;
		}

		if(i<2)
 8007c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	dcef      	bgt.n	8007c62 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x16e>
		{
			for(int j=0;j<(int)strlen(response_buffer[i]);j++)
 8007c82:	2300      	movs	r3, #0
 8007c84:	673b      	str	r3, [r7, #112]	; 0x70
 8007c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007c8e:	4413      	add	r3, r2
 8007c90:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7f8 fad1 	bl	800023c <strlen>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	da3b      	bge.n	8007d1c <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x228>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_buffer[i][j]);
 8007ca4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007ca8:	492e      	ldr	r1, [pc, #184]	; (8007d64 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x270>)
 8007caa:	4618      	mov	r0, r3
 8007cac:	f006 fd9b 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8007cb0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f004 fe6e 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	330c      	adds	r3, #12
 8007cc2:	681d      	ldr	r5, [r3, #0]
 8007cc4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007cc8:	492b      	ldr	r1, [pc, #172]	; (8007d78 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x284>)
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f006 fd8b 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8007cd0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	47a8      	blx	r5
 8007cda:	4602      	mov	r2, r0
 8007cdc:	6813      	ldr	r3, [r2, #0]
 8007cde:	3364      	adds	r3, #100	; 0x64
 8007ce0:	681c      	ldr	r4, [r3, #0]
 8007ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8007cea:	440b      	add	r3, r1
 8007cec:	f853 1c6c 	ldr.w	r1, [r3, #-108]
 8007cf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cf2:	440b      	add	r3, r1
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	47a0      	blx	r4
 8007cfc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007d00:	4618      	mov	r0, r3
 8007d02:	f007 f928 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8007d06:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f007 f923 	bl	800ef56 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8007d10:	f7fb fff2 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_buffer[i]);j++)
 8007d14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d16:	3301      	adds	r3, #1
 8007d18:	673b      	str	r3, [r7, #112]	; 0x70
 8007d1a:	e7b4      	b.n	8007c86 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x192>
			}
			i++;
 8007d1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d1e:	3301      	adds	r3, #1
 8007d20:	677b      	str	r3, [r7, #116]	; 0x74
		}

	}
 8007d22:	e79e      	b.n	8007c62 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x16e>
			break;
 8007d24:	bf00      	nop

	LONGS_EQUAL(STATUS_OK,response);
 8007d26:	f00e f941 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8007d2a:	4604      	mov	r4, r0
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	3338      	adds	r3, #56	; 0x38
 8007d30:	681d      	ldr	r5, [r3, #0]
 8007d32:	f897 606f 	ldrb.w	r6, [r7, #111]	; 0x6f
 8007d36:	f00e f949 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	9302      	str	r3, [sp, #8]
 8007d3e:	f240 3301 	movw	r3, #769	; 0x301
 8007d42:	9301      	str	r3, [sp, #4]
 8007d44:	4b0d      	ldr	r3, [pc, #52]	; (8007d7c <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x288>)
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	4b0d      	ldr	r3, [pc, #52]	; (8007d80 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x28c>)
 8007d4a:	4632      	mov	r2, r6
 8007d4c:	2102      	movs	r1, #2
 8007d4e:	4620      	mov	r0, r4
 8007d50:	47a8      	blx	r5

}
 8007d52:	bf00      	nop
 8007d54:	377c      	adds	r7, #124	; 0x7c
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	080259e0 	.word	0x080259e0
 8007d60:	080259e8 	.word	0x080259e8
 8007d64:	080254b0 	.word	0x080254b0
 8007d68:	080254b4 	.word	0x080254b4
 8007d6c:	080254c8 	.word	0x080254c8
 8007d70:	080259d0 	.word	0x080259d0
 8007d74:	080254d0 	.word	0x080254d0
 8007d78:	080254d8 	.word	0x080254d8
 8007d7c:	08025180 	.word	0x08025180
 8007d80:	08025714 	.word	0x08025714

08007d84 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_TCP_Bytes_Test)
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	4a05      	ldr	r2, [pc, #20]	; (8007da4 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellD1Ev+0x20>)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	601a      	str	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4618      	mov	r0, r3
 8007d96:	f00c fda5 	bl	80148e4 <_ZN10UtestShellD1Ev>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	08028b64 	.word	0x08028b64

08007da8 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellD0Ev>:
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f7ff ffe7 	bl	8007d84 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellD1Ev>
 8007db6:	211c      	movs	r1, #28
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f004 f965 	bl	800c088 <_ZdlPvj>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestD1Ev>:
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	4a05      	ldr	r2, [pc, #20]	; (8007de8 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestD1Ev+0x20>)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fd fb87 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4618      	mov	r0, r3
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	08028c10 	.word	0x08028c10

08007dec <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestD0Ev>:
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7ff ffe7 	bl	8007dc8 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestD1Ev>
 8007dfa:	2104      	movs	r1, #4
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f004 f943 	bl	800c088 <_ZdlPvj>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4618      	mov	r0, r3
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	4a05      	ldr	r2, [pc, #20]	; (8007e2c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev+0x20>)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	601a      	str	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f00c fd61 	bl	80148e4 <_ZN10UtestShellD1Ev>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4618      	mov	r0, r3
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	08028c30 	.word	0x08028c30

08007e30 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD0Ev>:
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff ffe7 	bl	8007e0c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
 8007e3e:	211c      	movs	r1, #28
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f004 f921 	bl	800c088 <_ZdlPvj>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>:
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	4a05      	ldr	r2, [pc, #20]	; (8007e70 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev+0x20>)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fd fb43 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	08028cdc 	.word	0x08028cdc

08007e74 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD0Ev>:
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7ff ffe7 	bl	8007e50 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>
 8007e82:	2104      	movs	r1, #4
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f004 f8ff 	bl	800c088 <_ZdlPvj>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	4a05      	ldr	r2, [pc, #20]	; (8007eb4 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev+0x20>)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f00c fd1d 	bl	80148e4 <_ZN10UtestShellD1Ev>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4618      	mov	r0, r3
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	08028cfc 	.word	0x08028cfc

08007eb8 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD0Ev>:
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7ff ffe7 	bl	8007e94 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
 8007ec6:	211c      	movs	r1, #28
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f004 f8dd 	bl	800c088 <_ZdlPvj>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>:
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	4a05      	ldr	r2, [pc, #20]	; (8007ef8 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev+0x20>)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7fd faff 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	08028da8 	.word	0x08028da8

08007efc <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD0Ev>:
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7ff ffe7 	bl	8007ed8 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>
 8007f0a:	2104      	movs	r1, #4
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f004 f8bb 	bl	800c088 <_ZdlPvj>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4618      	mov	r0, r3
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	4a05      	ldr	r2, [pc, #20]	; (8007f3c <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev+0x20>)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f00c fcd9 	bl	80148e4 <_ZN10UtestShellD1Ev>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	08028dc8 	.word	0x08028dc8

08007f40 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD0Ev>:
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7ff ffe7 	bl	8007f1c <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
 8007f4e:	211c      	movs	r1, #28
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f004 f899 	bl	800c088 <_ZdlPvj>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>:
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	4a05      	ldr	r2, [pc, #20]	; (8007f80 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev+0x20>)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fd fabb 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	08028e74 	.word	0x08028e74

08007f84 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD0Ev>:
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7ff ffe7 	bl	8007f60 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>
 8007f92:	2104      	movs	r1, #4
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f004 f877 	bl	800c088 <_ZdlPvj>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	4a05      	ldr	r2, [pc, #20]	; (8007fc4 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev+0x20>)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	601a      	str	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f00c fc95 	bl	80148e4 <_ZN10UtestShellD1Ev>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	08028e94 	.word	0x08028e94

08007fc8 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD0Ev>:
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7ff ffe7 	bl	8007fa4 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
 8007fd6:	211c      	movs	r1, #28
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f004 f855 	bl	800c088 <_ZdlPvj>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>:
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	4a05      	ldr	r2, [pc, #20]	; (8008008 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev+0x20>)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	601a      	str	r2, [r3, #0]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fd fa77 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4618      	mov	r0, r3
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	08028f40 	.word	0x08028f40

0800800c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD0Ev>:
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f7ff ffe7 	bl	8007fe8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>
 800801a:	2104      	movs	r1, #4
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f004 f833 	bl	800c088 <_ZdlPvj>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4618      	mov	r0, r3
 8008026:	3708      	adds	r7, #8
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	4a05      	ldr	r2, [pc, #20]	; (800804c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev+0x20>)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	601a      	str	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4618      	mov	r0, r3
 800803e:	f00c fc51 	bl	80148e4 <_ZN10UtestShellD1Ev>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4618      	mov	r0, r3
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	08028f60 	.word	0x08028f60

08008050 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD0Ev>:
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f7ff ffe7 	bl	800802c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
 800805e:	211c      	movs	r1, #28
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f004 f811 	bl	800c088 <_ZdlPvj>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4618      	mov	r0, r3
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>:
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	4a05      	ldr	r2, [pc, #20]	; (8008090 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev+0x20>)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4618      	mov	r0, r3
 8008082:	f7fd fa33 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	0802900c 	.word	0x0802900c

08008094 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD0Ev>:
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7ff ffe7 	bl	8008070 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>
 80080a2:	2104      	movs	r1, #4
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f003 ffef 	bl	800c088 <_ZdlPvj>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	4a05      	ldr	r2, [pc, #20]	; (80080d4 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev+0x20>)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	601a      	str	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f00c fc0d 	bl	80148e4 <_ZN10UtestShellD1Ev>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4618      	mov	r0, r3
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	0802902c 	.word	0x0802902c

080080d8 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD0Ev>:
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7ff ffe7 	bl	80080b4 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
 80080e6:	211c      	movs	r1, #28
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f003 ffcd 	bl	800c088 <_ZdlPvj>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4618      	mov	r0, r3
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>:
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	4a05      	ldr	r2, [pc, #20]	; (8008118 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev+0x20>)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	601a      	str	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4618      	mov	r0, r3
 800810a:	f7fd f9ef 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4618      	mov	r0, r3
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	080290d8 	.word	0x080290d8

0800811c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD0Ev>:
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7ff ffe7 	bl	80080f8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>
 800812a:	2104      	movs	r1, #4
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f003 ffab 	bl	800c088 <_ZdlPvj>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	4a05      	ldr	r2, [pc, #20]	; (800815c <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev+0x20>)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4618      	mov	r0, r3
 800814e:	f00c fbc9 	bl	80148e4 <_ZN10UtestShellD1Ev>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4618      	mov	r0, r3
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	080290f8 	.word	0x080290f8

08008160 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD0Ev>:
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7ff ffe7 	bl	800813c <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
 800816e:	211c      	movs	r1, #28
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f003 ff89 	bl	800c088 <_ZdlPvj>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>:
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	4a05      	ldr	r2, [pc, #20]	; (80081a0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev+0x20>)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4618      	mov	r0, r3
 8008192:	f7fd f9ab 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4618      	mov	r0, r3
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	080291a4 	.word	0x080291a4

080081a4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD0Ev>:
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7ff ffe7 	bl	8008180 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>
 80081b2:	2104      	movs	r1, #4
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f003 ff67 	bl	800c088 <_ZdlPvj>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4618      	mov	r0, r3
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	4a05      	ldr	r2, [pc, #20]	; (80081e4 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev+0x20>)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f00c fb85 	bl	80148e4 <_ZN10UtestShellD1Ev>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4618      	mov	r0, r3
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	080291c4 	.word	0x080291c4

080081e8 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD0Ev>:
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f7ff ffe7 	bl	80081c4 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
 80081f6:	211c      	movs	r1, #28
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f003 ff45 	bl	800c088 <_ZdlPvj>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4618      	mov	r0, r3
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>:
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	4a05      	ldr	r2, [pc, #20]	; (8008228 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev+0x20>)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4618      	mov	r0, r3
 800821a:	f7fd f967 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4618      	mov	r0, r3
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	08029270 	.word	0x08029270

0800822c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD0Ev>:
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f7ff ffe7 	bl	8008208 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>
 800823a:	2104      	movs	r1, #4
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f003 ff23 	bl	800c088 <_ZdlPvj>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4618      	mov	r0, r3
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Command_Process_Test)
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	4a05      	ldr	r2, [pc, #20]	; (800826c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev+0x20>)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4618      	mov	r0, r3
 800825e:	f00c fb41 	bl	80148e4 <_ZN10UtestShellD1Ev>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4618      	mov	r0, r3
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	08029290 	.word	0x08029290

08008270 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD0Ev>:
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7ff ffe7 	bl	800824c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
 800827e:	211c      	movs	r1, #28
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f003 ff01 	bl	800c088 <_ZdlPvj>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4618      	mov	r0, r3
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>:
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	4a05      	ldr	r2, [pc, #20]	; (80082b0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev+0x20>)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fd f923 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4618      	mov	r0, r3
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	0802933c 	.word	0x0802933c

080082b4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD0Ev>:
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7ff ffe7 	bl	8008290 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>
 80082c2:	2104      	movs	r1, #4
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f003 fedf 	bl	800c088 <_ZdlPvj>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	4a05      	ldr	r2, [pc, #20]	; (80082f4 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev+0x20>)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f00c fafd 	bl	80148e4 <_ZN10UtestShellD1Ev>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	0802935c 	.word	0x0802935c

080082f8 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD0Ev>:
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f7ff ffe7 	bl	80082d4 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
 8008306:	211c      	movs	r1, #28
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f003 febd 	bl	800c088 <_ZdlPvj>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4618      	mov	r0, r3
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>:
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	4a05      	ldr	r2, [pc, #20]	; (8008338 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev+0x20>)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4618      	mov	r0, r3
 800832a:	f7fd f8df 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	08029408 	.word	0x08029408

0800833c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD0Ev>:
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff ffe7 	bl	8008318 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>
 800834a:	2104      	movs	r1, #4
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f003 fe9b 	bl	800c088 <_ZdlPvj>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4618      	mov	r0, r3
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	4a05      	ldr	r2, [pc, #20]	; (800837c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4618      	mov	r0, r3
 800836e:	f00c fab9 	bl	80148e4 <_ZN10UtestShellD1Ev>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4618      	mov	r0, r3
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	08029428 	.word	0x08029428

08008380 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD0Ev>:
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7ff ffe7 	bl	800835c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
 800838e:	211c      	movs	r1, #28
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f003 fe79 	bl	800c088 <_ZdlPvj>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4618      	mov	r0, r3
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>:
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	4a05      	ldr	r2, [pc, #20]	; (80083c0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7fd f89b 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	080294d4 	.word	0x080294d4

080083c4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD0Ev>:
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7ff ffe7 	bl	80083a0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>
 80083d2:	2104      	movs	r1, #4
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f003 fe57 	bl	800c088 <_ZdlPvj>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	4a05      	ldr	r2, [pc, #20]	; (8008404 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	601a      	str	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f00c fa75 	bl	80148e4 <_ZN10UtestShellD1Ev>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	080294f4 	.word	0x080294f4

08008408 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f7ff ffe7 	bl	80083e4 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 8008416:	211c      	movs	r1, #28
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f003 fe35 	bl	800c088 <_ZdlPvj>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4618      	mov	r0, r3
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	4a05      	ldr	r2, [pc, #20]	; (8008448 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	601a      	str	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4618      	mov	r0, r3
 800843a:	f7fd f857 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4618      	mov	r0, r3
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	080295a0 	.word	0x080295a0

0800844c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7ff ffe7 	bl	8008428 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 800845a:	2104      	movs	r1, #4
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f003 fe13 	bl	800c088 <_ZdlPvj>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4618      	mov	r0, r3
 8008466:	3708      	adds	r7, #8
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	4a05      	ldr	r2, [pc, #20]	; (800848c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4618      	mov	r0, r3
 800847e:	f00c fa31 	bl	80148e4 <_ZN10UtestShellD1Ev>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4618      	mov	r0, r3
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	080295c0 	.word	0x080295c0

08008490 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff ffe7 	bl	800846c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 800849e:	211c      	movs	r1, #28
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f003 fdf1 	bl	800c088 <_ZdlPvj>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4618      	mov	r0, r3
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	4a05      	ldr	r2, [pc, #20]	; (80084d0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7fd f813 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4618      	mov	r0, r3
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	0802966c 	.word	0x0802966c

080084d4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7ff ffe7 	bl	80084b0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 80084e2:	2104      	movs	r1, #4
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f003 fdcf 	bl	800c088 <_ZdlPvj>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4618      	mov	r0, r3
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	4a05      	ldr	r2, [pc, #20]	; (8008514 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4618      	mov	r0, r3
 8008506:	f00c f9ed 	bl	80148e4 <_ZN10UtestShellD1Ev>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4618      	mov	r0, r3
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	0802968c 	.word	0x0802968c

08008518 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f7ff ffe7 	bl	80084f4 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 8008526:	211c      	movs	r1, #28
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f003 fdad 	bl	800c088 <_ZdlPvj>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4618      	mov	r0, r3
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	4a05      	ldr	r2, [pc, #20]	; (8008558 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	601a      	str	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4618      	mov	r0, r3
 800854a:	f7fc ffcf 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4618      	mov	r0, r3
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	08029738 	.word	0x08029738

0800855c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f7ff ffe7 	bl	8008538 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 800856a:	2104      	movs	r1, #4
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f003 fd8b 	bl	800c088 <_ZdlPvj>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4618      	mov	r0, r3
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	4a05      	ldr	r2, [pc, #20]	; (800859c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4618      	mov	r0, r3
 800858e:	f00c f9a9 	bl	80148e4 <_ZN10UtestShellD1Ev>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4618      	mov	r0, r3
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	08029758 	.word	0x08029758

080085a0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7ff ffe7 	bl	800857c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 80085ae:	211c      	movs	r1, #28
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f003 fd69 	bl	800c088 <_ZdlPvj>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4618      	mov	r0, r3
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	4a05      	ldr	r2, [pc, #20]	; (80085e0 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7fc ff8b 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4618      	mov	r0, r3
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	08029804 	.word	0x08029804

080085e4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7ff ffe7 	bl	80085c0 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 80085f2:	2104      	movs	r1, #4
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f003 fd47 	bl	800c088 <_ZdlPvj>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4618      	mov	r0, r3
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	4a05      	ldr	r2, [pc, #20]	; (8008624 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	601a      	str	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4618      	mov	r0, r3
 8008616:	f00c f965 	bl	80148e4 <_ZN10UtestShellD1Ev>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4618      	mov	r0, r3
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	08029824 	.word	0x08029824

08008628 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7ff ffe7 	bl	8008604 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 8008636:	211c      	movs	r1, #28
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f003 fd25 	bl	800c088 <_ZdlPvj>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4618      	mov	r0, r3
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	4a05      	ldr	r2, [pc, #20]	; (8008668 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4618      	mov	r0, r3
 800865a:	f7fc ff47 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4618      	mov	r0, r3
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	080298d0 	.word	0x080298d0

0800866c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7ff ffe7 	bl	8008648 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 800867a:	2104      	movs	r1, #4
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f003 fd03 	bl	800c088 <_ZdlPvj>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4618      	mov	r0, r3
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	4a05      	ldr	r2, [pc, #20]	; (80086ac <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4618      	mov	r0, r3
 800869e:	f00c f921 	bl	80148e4 <_ZN10UtestShellD1Ev>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4618      	mov	r0, r3
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	080298f0 	.word	0x080298f0

080086b0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f7ff ffe7 	bl	800868c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 80086be:	211c      	movs	r1, #28
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f003 fce1 	bl	800c088 <_ZdlPvj>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4618      	mov	r0, r3
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	4a05      	ldr	r2, [pc, #20]	; (80086f0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	601a      	str	r2, [r3, #0]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7fc ff03 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4618      	mov	r0, r3
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	0802999c 	.word	0x0802999c

080086f4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f7ff ffe7 	bl	80086d0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 8008702:	2104      	movs	r1, #4
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f003 fcbf 	bl	800c088 <_ZdlPvj>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4618      	mov	r0, r3
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	4a05      	ldr	r2, [pc, #20]	; (8008734 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	601a      	str	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4618      	mov	r0, r3
 8008726:	f00c f8dd 	bl	80148e4 <_ZN10UtestShellD1Ev>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4618      	mov	r0, r3
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	080299bc 	.word	0x080299bc

08008738 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff ffe7 	bl	8008714 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 8008746:	211c      	movs	r1, #28
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f003 fc9d 	bl	800c088 <_ZdlPvj>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4618      	mov	r0, r3
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	4a05      	ldr	r2, [pc, #20]	; (8008778 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4618      	mov	r0, r3
 800876a:	f7fc febf 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4618      	mov	r0, r3
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	08029a68 	.word	0x08029a68

0800877c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7ff ffe7 	bl	8008758 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 800878a:	2104      	movs	r1, #4
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f003 fc7b 	bl	800c088 <_ZdlPvj>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4618      	mov	r0, r3
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	4a05      	ldr	r2, [pc, #20]	; (80087bc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	601a      	str	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f00c f899 	bl	80148e4 <_ZN10UtestShellD1Ev>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4618      	mov	r0, r3
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	08029a88 	.word	0x08029a88

080087c0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7ff ffe7 	bl	800879c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 80087ce:	211c      	movs	r1, #28
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f003 fc59 	bl	800c088 <_ZdlPvj>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4618      	mov	r0, r3
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	4a05      	ldr	r2, [pc, #20]	; (8008800 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	601a      	str	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fc fe7b 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4618      	mov	r0, r3
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	08029b34 	.word	0x08029b34

08008804 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f7ff ffe7 	bl	80087e0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8008812:	2104      	movs	r1, #4
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f003 fc37 	bl	800c088 <_ZdlPvj>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4618      	mov	r0, r3
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	4a05      	ldr	r2, [pc, #20]	; (8008844 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4618      	mov	r0, r3
 8008836:	f00c f855 	bl	80148e4 <_ZN10UtestShellD1Ev>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4618      	mov	r0, r3
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	08029b54 	.word	0x08029b54

08008848 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff ffe7 	bl	8008824 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8008856:	211c      	movs	r1, #28
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f003 fc15 	bl	800c088 <_ZdlPvj>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4618      	mov	r0, r3
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	4a05      	ldr	r2, [pc, #20]	; (8008888 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	601a      	str	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4618      	mov	r0, r3
 800887a:	f7fc fe37 	bl	80054ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4618      	mov	r0, r3
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	08029c00 	.word	0x08029c00

0800888c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7ff ffe7 	bl	8008868 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 800889a:	2104      	movs	r1, #4
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f003 fbf3 	bl	800c088 <_ZdlPvj>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4618      	mov	r0, r3
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	4a05      	ldr	r2, [pc, #20]	; (80088cc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	601a      	str	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4618      	mov	r0, r3
 80088be:	f00c f811 	bl	80148e4 <_ZN10UtestShellD1Ev>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4618      	mov	r0, r3
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	08029c40 	.word	0x08029c40

080088d0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7ff ffe7 	bl	80088ac <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 80088de:	211c      	movs	r1, #28
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f003 fbd1 	bl	800c088 <_ZdlPvj>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4618      	mov	r0, r3
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	4a05      	ldr	r2, [pc, #20]	; (8008910 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4618      	mov	r0, r3
 8008902:	f7fb ff93 	bl	800482c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4618      	mov	r0, r3
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	08029cec 	.word	0x08029cec

08008914 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f7ff ffe7 	bl	80088f0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8008922:	2108      	movs	r1, #8
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f003 fbaf 	bl	800c088 <_ZdlPvj>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4618      	mov	r0, r3
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	4a05      	ldr	r2, [pc, #20]	; (8008954 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4618      	mov	r0, r3
 8008946:	f00b ffcd 	bl	80148e4 <_ZN10UtestShellD1Ev>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4618      	mov	r0, r3
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	08029d0c 	.word	0x08029d0c

08008958 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f7ff ffe7 	bl	8008934 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8008966:	211c      	movs	r1, #28
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f003 fb8d 	bl	800c088 <_ZdlPvj>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4618      	mov	r0, r3
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	4a05      	ldr	r2, [pc, #20]	; (8008998 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4618      	mov	r0, r3
 800898a:	f7fb ff4f 	bl	800482c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4618      	mov	r0, r3
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	08029db8 	.word	0x08029db8

0800899c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7ff ffe7 	bl	8008978 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 80089aa:	2108      	movs	r1, #8
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f003 fb6b 	bl	800c088 <_ZdlPvj>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4618      	mov	r0, r3
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	4a05      	ldr	r2, [pc, #20]	; (80089dc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	601a      	str	r2, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4618      	mov	r0, r3
 80089ce:	f00b ff89 	bl	80148e4 <_ZN10UtestShellD1Ev>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4618      	mov	r0, r3
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	08029dd8 	.word	0x08029dd8

080089e0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f7ff ffe7 	bl	80089bc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 80089ee:	211c      	movs	r1, #28
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f003 fb49 	bl	800c088 <_ZdlPvj>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4618      	mov	r0, r3
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	4a05      	ldr	r2, [pc, #20]	; (8008a20 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	601a      	str	r2, [r3, #0]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7fb ff0b 	bl	800482c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	08029e84 	.word	0x08029e84

08008a24 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7ff ffe7 	bl	8008a00 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 8008a32:	2108      	movs	r1, #8
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f003 fb27 	bl	800c088 <_ZdlPvj>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	4a05      	ldr	r2, [pc, #20]	; (8008a64 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	601a      	str	r2, [r3, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f00b ff45 	bl	80148e4 <_ZN10UtestShellD1Ev>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	08029ea4 	.word	0x08029ea4

08008a68 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f7ff ffe7 	bl	8008a44 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 8008a76:	211c      	movs	r1, #28
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f003 fb05 	bl	800c088 <_ZdlPvj>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4618      	mov	r0, r3
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	4a05      	ldr	r2, [pc, #20]	; (8008aa8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fb fec7 	bl	800482c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	08029f50 	.word	0x08029f50

08008aac <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7ff ffe7 	bl	8008a88 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 8008aba:	2108      	movs	r1, #8
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f003 fae3 	bl	800c088 <_ZdlPvj>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	4a05      	ldr	r2, [pc, #20]	; (8008aec <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f00b ff01 	bl	80148e4 <_ZN10UtestShellD1Ev>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	08029f70 	.word	0x08029f70

08008af0 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f7ff ffe7 	bl	8008acc <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8008afe:	211c      	movs	r1, #28
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f003 fac1 	bl	800c088 <_ZdlPvj>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	4a05      	ldr	r2, [pc, #20]	; (8008b30 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	601a      	str	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fb fe83 	bl	800482c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	0802a01c 	.word	0x0802a01c

08008b34 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f7ff ffe7 	bl	8008b10 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 8008b42:	2108      	movs	r1, #8
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f003 fa9f 	bl	800c088 <_ZdlPvj>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	4a05      	ldr	r2, [pc, #20]	; (8008b74 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4618      	mov	r0, r3
 8008b66:	f00b febd 	bl	80148e4 <_ZN10UtestShellD1Ev>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	0802a03c 	.word	0x0802a03c

08008b78 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7ff ffe7 	bl	8008b54 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 8008b86:	211c      	movs	r1, #28
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f003 fa7d 	bl	800c088 <_ZdlPvj>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4618      	mov	r0, r3
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	4a05      	ldr	r2, [pc, #20]	; (8008bb8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	601a      	str	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7fb fe3f 	bl	800482c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	0802a0e8 	.word	0x0802a0e8

08008bbc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7ff ffe7 	bl	8008b98 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 8008bca:	2108      	movs	r1, #8
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f003 fa5b 	bl	800c088 <_ZdlPvj>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	4a05      	ldr	r2, [pc, #20]	; (8008bfc <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	601a      	str	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f00b fe79 	bl	80148e4 <_ZN10UtestShellD1Ev>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	0802a108 	.word	0x0802a108

08008c00 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7ff ffe7 	bl	8008bdc <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8008c0e:	211c      	movs	r1, #28
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f003 fa39 	bl	800c088 <_ZdlPvj>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	4a05      	ldr	r2, [pc, #20]	; (8008c40 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	601a      	str	r2, [r3, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7fb fdfb 	bl	800482c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	0802a1b4 	.word	0x0802a1b4

08008c44 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7ff ffe7 	bl	8008c20 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 8008c52:	2108      	movs	r1, #8
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f003 fa17 	bl	800c088 <_ZdlPvj>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	4a05      	ldr	r2, [pc, #20]	; (8008c84 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4618      	mov	r0, r3
 8008c76:	f00b fe35 	bl	80148e4 <_ZN10UtestShellD1Ev>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3708      	adds	r7, #8
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	0802a1d4 	.word	0x0802a1d4

08008c88 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7ff ffe7 	bl	8008c64 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 8008c96:	211c      	movs	r1, #28
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f003 f9f5 	bl	800c088 <_ZdlPvj>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	4a05      	ldr	r2, [pc, #20]	; (8008cc8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fb fdb7 	bl	800482c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	0802a280 	.word	0x0802a280

08008ccc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f7ff ffe7 	bl	8008ca8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8008cda:	2108      	movs	r1, #8
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f003 f9d3 	bl	800c088 <_ZdlPvj>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	4a05      	ldr	r2, [pc, #20]	; (8008d0c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	601a      	str	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f00b fdf1 	bl	80148e4 <_ZN10UtestShellD1Ev>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	0802a2a0 	.word	0x0802a2a0

08008d10 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7ff ffe7 	bl	8008cec <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 8008d1e:	211c      	movs	r1, #28
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f003 f9b1 	bl	800c088 <_ZdlPvj>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	4a05      	ldr	r2, [pc, #20]	; (8008d50 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	601a      	str	r2, [r3, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fb fd73 	bl	800482c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	0802a34c 	.word	0x0802a34c

08008d54 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f7ff ffe7 	bl	8008d30 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 8008d62:	2108      	movs	r1, #8
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f003 f98f 	bl	800c088 <_ZdlPvj>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <_Z41__static_initialization_and_destruction_0ii>:
}
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af02      	add	r7, sp, #8
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	f040 8231 	bne.w	80091e8 <_Z41__static_initialization_and_destruction_0ii+0x474>
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	f040 822b 	bne.w	80091e8 <_Z41__static_initialization_and_destruction_0ii+0x474>
TEST(RingBuffer_Test_Group, InitTest)
 8008d92:	489f      	ldr	r0, [pc, #636]	; (8009010 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8008d94:	f7fb fd98 	bl	80048c8 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 8008d98:	232c      	movs	r3, #44	; 0x2c
 8008d9a:	9301      	str	r3, [sp, #4]
 8008d9c:	4b9d      	ldr	r3, [pc, #628]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	4b9d      	ldr	r3, [pc, #628]	; (8009018 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8008da2:	4a9e      	ldr	r2, [pc, #632]	; (800901c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008da4:	499a      	ldr	r1, [pc, #616]	; (8009010 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8008da6:	489e      	ldr	r0, [pc, #632]	; (8009020 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8008da8:	f00d fb98 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 8008dac:	489d      	ldr	r0, [pc, #628]	; (8009024 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8008dae:	f7fb fe3f 	bl	8004a30 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 8008db2:	2336      	movs	r3, #54	; 0x36
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	4b97      	ldr	r3, [pc, #604]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008db8:	9300      	str	r3, [sp, #0]
 8008dba:	4b9b      	ldr	r3, [pc, #620]	; (8009028 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8008dbc:	4a97      	ldr	r2, [pc, #604]	; (800901c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008dbe:	4999      	ldr	r1, [pc, #612]	; (8009024 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8008dc0:	489a      	ldr	r0, [pc, #616]	; (800902c <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8008dc2:	f00d fb8b 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8008dc6:	489a      	ldr	r0, [pc, #616]	; (8009030 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8008dc8:	f7fb febc 	bl	8004b44 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8008dcc:	2340      	movs	r3, #64	; 0x40
 8008dce:	9301      	str	r3, [sp, #4]
 8008dd0:	4b90      	ldr	r3, [pc, #576]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	4b97      	ldr	r3, [pc, #604]	; (8009034 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8008dd6:	4a91      	ldr	r2, [pc, #580]	; (800901c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008dd8:	4995      	ldr	r1, [pc, #596]	; (8009030 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8008dda:	4897      	ldr	r0, [pc, #604]	; (8009038 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8008ddc:	f00d fb7e 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8008de0:	4896      	ldr	r0, [pc, #600]	; (800903c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8008de2:	f7fb ff37 	bl	8004c54 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 8008de6:	234b      	movs	r3, #75	; 0x4b
 8008de8:	9301      	str	r3, [sp, #4]
 8008dea:	4b8a      	ldr	r3, [pc, #552]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	4b94      	ldr	r3, [pc, #592]	; (8009040 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8008df0:	4a8a      	ldr	r2, [pc, #552]	; (800901c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008df2:	4992      	ldr	r1, [pc, #584]	; (800903c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8008df4:	4893      	ldr	r0, [pc, #588]	; (8009044 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8008df6:	f00d fb71 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8008dfa:	4893      	ldr	r0, [pc, #588]	; (8009048 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8008dfc:	f7fb ff96 	bl	8004d2c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8008e00:	2354      	movs	r3, #84	; 0x54
 8008e02:	9301      	str	r3, [sp, #4]
 8008e04:	4b83      	ldr	r3, [pc, #524]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	4b90      	ldr	r3, [pc, #576]	; (800904c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8008e0a:	4a84      	ldr	r2, [pc, #528]	; (800901c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008e0c:	498e      	ldr	r1, [pc, #568]	; (8009048 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8008e0e:	4890      	ldr	r0, [pc, #576]	; (8009050 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8008e10:	f00d fb64 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8008e14:	488f      	ldr	r0, [pc, #572]	; (8009054 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8008e16:	f7fc f815 	bl	8004e44 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 8008e1a:	2364      	movs	r3, #100	; 0x64
 8008e1c:	9301      	str	r3, [sp, #4]
 8008e1e:	4b7d      	ldr	r3, [pc, #500]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	4b8d      	ldr	r3, [pc, #564]	; (8009058 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8008e24:	4a7d      	ldr	r2, [pc, #500]	; (800901c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008e26:	498b      	ldr	r1, [pc, #556]	; (8009054 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8008e28:	488c      	ldr	r0, [pc, #560]	; (800905c <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8008e2a:	f00d fb57 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8008e2e:	488c      	ldr	r0, [pc, #560]	; (8009060 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8008e30:	f7fc f8c6 	bl	8004fc0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 8008e34:	2379      	movs	r3, #121	; 0x79
 8008e36:	9301      	str	r3, [sp, #4]
 8008e38:	4b76      	ldr	r3, [pc, #472]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	4b89      	ldr	r3, [pc, #548]	; (8009064 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8008e3e:	4a77      	ldr	r2, [pc, #476]	; (800901c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008e40:	4987      	ldr	r1, [pc, #540]	; (8009060 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8008e42:	4889      	ldr	r0, [pc, #548]	; (8009068 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8008e44:	f00d fb4a 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 8008e48:	4888      	ldr	r0, [pc, #544]	; (800906c <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8008e4a:	f7fc f91f 	bl	800508c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 8008e4e:	2380      	movs	r3, #128	; 0x80
 8008e50:	9301      	str	r3, [sp, #4]
 8008e52:	4b70      	ldr	r3, [pc, #448]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	4b86      	ldr	r3, [pc, #536]	; (8009070 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8008e58:	4a70      	ldr	r2, [pc, #448]	; (800901c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008e5a:	4984      	ldr	r1, [pc, #528]	; (800906c <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8008e5c:	4885      	ldr	r0, [pc, #532]	; (8009074 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8008e5e:	f00d fb3d 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 8008e62:	4885      	ldr	r0, [pc, #532]	; (8009078 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8008e64:	f7fc f9fc 	bl	8005260 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 8008e68:	2388      	movs	r3, #136	; 0x88
 8008e6a:	9301      	str	r3, [sp, #4]
 8008e6c:	4b69      	ldr	r3, [pc, #420]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	4b82      	ldr	r3, [pc, #520]	; (800907c <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8008e72:	4a6a      	ldr	r2, [pc, #424]	; (800901c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008e74:	4980      	ldr	r1, [pc, #512]	; (8009078 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8008e76:	4882      	ldr	r0, [pc, #520]	; (8009080 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8008e78:	f00d fb30 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8008e7c:	4881      	ldr	r0, [pc, #516]	; (8009084 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8008e7e:	f7fc fb7d 	bl	800557c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 8008e82:	23c3      	movs	r3, #195	; 0xc3
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	4b63      	ldr	r3, [pc, #396]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	4b7f      	ldr	r3, [pc, #508]	; (8009088 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8008e8c:	4a7f      	ldr	r2, [pc, #508]	; (800908c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008e8e:	497d      	ldr	r1, [pc, #500]	; (8009084 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8008e90:	487f      	ldr	r0, [pc, #508]	; (8009090 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8008e92:	f00d fb23 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8008e96:	487f      	ldr	r0, [pc, #508]	; (8009094 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8008e98:	f7fc fbda 	bl	8005650 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 8008e9c:	23d5      	movs	r3, #213	; 0xd5
 8008e9e:	9301      	str	r3, [sp, #4]
 8008ea0:	4b5c      	ldr	r3, [pc, #368]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	4b7c      	ldr	r3, [pc, #496]	; (8009098 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8008ea6:	4a79      	ldr	r2, [pc, #484]	; (800908c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008ea8:	497a      	ldr	r1, [pc, #488]	; (8009094 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8008eaa:	487c      	ldr	r0, [pc, #496]	; (800909c <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8008eac:	f00d fb16 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8008eb0:	487b      	ldr	r0, [pc, #492]	; (80090a0 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8008eb2:	f7fc fcbf 	bl	8005834 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 8008eb6:	23e1      	movs	r3, #225	; 0xe1
 8008eb8:	9301      	str	r3, [sp, #4]
 8008eba:	4b56      	ldr	r3, [pc, #344]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	4b79      	ldr	r3, [pc, #484]	; (80090a4 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8008ec0:	4a72      	ldr	r2, [pc, #456]	; (800908c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008ec2:	4977      	ldr	r1, [pc, #476]	; (80090a0 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8008ec4:	4878      	ldr	r0, [pc, #480]	; (80090a8 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8008ec6:	f00d fb09 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8008eca:	4878      	ldr	r0, [pc, #480]	; (80090ac <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8008ecc:	f7fc fd5c 	bl	8005988 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 8008ed0:	23f0      	movs	r3, #240	; 0xf0
 8008ed2:	9301      	str	r3, [sp, #4]
 8008ed4:	4b4f      	ldr	r3, [pc, #316]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	4b75      	ldr	r3, [pc, #468]	; (80090b0 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8008eda:	4a6c      	ldr	r2, [pc, #432]	; (800908c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008edc:	4973      	ldr	r1, [pc, #460]	; (80090ac <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8008ede:	4875      	ldr	r0, [pc, #468]	; (80090b4 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8008ee0:	f00d fafc 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8008ee4:	4874      	ldr	r0, [pc, #464]	; (80090b8 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8008ee6:	f7fc fdff 	bl	8005ae8 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 8008eea:	f240 1301 	movw	r3, #257	; 0x101
 8008eee:	9301      	str	r3, [sp, #4]
 8008ef0:	4b48      	ldr	r3, [pc, #288]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	4b71      	ldr	r3, [pc, #452]	; (80090bc <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8008ef6:	4a65      	ldr	r2, [pc, #404]	; (800908c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008ef8:	496f      	ldr	r1, [pc, #444]	; (80090b8 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8008efa:	4871      	ldr	r0, [pc, #452]	; (80090c0 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8008efc:	f00d faee 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8008f00:	4870      	ldr	r0, [pc, #448]	; (80090c4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8008f02:	f7fc fe5d 	bl	8005bc0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 8008f06:	f240 1311 	movw	r3, #273	; 0x111
 8008f0a:	9301      	str	r3, [sp, #4]
 8008f0c:	4b41      	ldr	r3, [pc, #260]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	4b6d      	ldr	r3, [pc, #436]	; (80090c8 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8008f12:	4a5e      	ldr	r2, [pc, #376]	; (800908c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008f14:	496b      	ldr	r1, [pc, #428]	; (80090c4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8008f16:	486d      	ldr	r0, [pc, #436]	; (80090cc <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8008f18:	f00d fae0 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8008f1c:	486c      	ldr	r0, [pc, #432]	; (80090d0 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8008f1e:	f7fc ff0d 	bl	8005d3c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 8008f22:	f240 1327 	movw	r3, #295	; 0x127
 8008f26:	9301      	str	r3, [sp, #4]
 8008f28:	4b3a      	ldr	r3, [pc, #232]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	4b69      	ldr	r3, [pc, #420]	; (80090d4 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8008f2e:	4a57      	ldr	r2, [pc, #348]	; (800908c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008f30:	4967      	ldr	r1, [pc, #412]	; (80090d0 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8008f32:	4869      	ldr	r0, [pc, #420]	; (80090d8 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8008f34:	f00d fad2 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8008f38:	4868      	ldr	r0, [pc, #416]	; (80090dc <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8008f3a:	f7fc ffc9 	bl	8005ed0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 8008f3e:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8008f42:	9301      	str	r3, [sp, #4]
 8008f44:	4b33      	ldr	r3, [pc, #204]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	4b65      	ldr	r3, [pc, #404]	; (80090e0 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8008f4a:	4a50      	ldr	r2, [pc, #320]	; (800908c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008f4c:	4963      	ldr	r1, [pc, #396]	; (80090dc <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8008f4e:	4865      	ldr	r0, [pc, #404]	; (80090e4 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8008f50:	f00d fac4 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8008f54:	4864      	ldr	r0, [pc, #400]	; (80090e8 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8008f56:	f7fd f91b 	bl	8006190 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 8008f5a:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 8008f5e:	9301      	str	r3, [sp, #4]
 8008f60:	4b2c      	ldr	r3, [pc, #176]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	4b61      	ldr	r3, [pc, #388]	; (80090ec <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8008f66:	4a49      	ldr	r2, [pc, #292]	; (800908c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008f68:	495f      	ldr	r1, [pc, #380]	; (80090e8 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8008f6a:	4861      	ldr	r0, [pc, #388]	; (80090f0 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8008f6c:	f00d fab6 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8008f70:	4860      	ldr	r0, [pc, #384]	; (80090f4 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8008f72:	f7fd fa6b 	bl	800644c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>
 8008f76:	f44f 73cb 	mov.w	r3, #406	; 0x196
 8008f7a:	9301      	str	r3, [sp, #4]
 8008f7c:	4b25      	ldr	r3, [pc, #148]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	4b5d      	ldr	r3, [pc, #372]	; (80090f8 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8008f82:	4a42      	ldr	r2, [pc, #264]	; (800908c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008f84:	495b      	ldr	r1, [pc, #364]	; (80090f4 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8008f86:	485d      	ldr	r0, [pc, #372]	; (80090fc <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8008f88:	f00d faa8 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8008f8c:	485c      	ldr	r0, [pc, #368]	; (8009100 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8008f8e:	f7fd fb1d 	bl	80065cc <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>
 8008f92:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 8008f96:	9301      	str	r3, [sp, #4]
 8008f98:	4b1e      	ldr	r3, [pc, #120]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	4b59      	ldr	r3, [pc, #356]	; (8009104 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8008f9e:	4a3b      	ldr	r2, [pc, #236]	; (800908c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008fa0:	4957      	ldr	r1, [pc, #348]	; (8009100 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8008fa2:	4859      	ldr	r0, [pc, #356]	; (8009108 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8008fa4:	f00d fa9a 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Command_Process_Test)
 8008fa8:	4858      	ldr	r0, [pc, #352]	; (800910c <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8008faa:	f7fd fc0d 	bl	80067c8 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>
 8008fae:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8008fb2:	9301      	str	r3, [sp, #4]
 8008fb4:	4b17      	ldr	r3, [pc, #92]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	4b55      	ldr	r3, [pc, #340]	; (8009110 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8008fba:	4a34      	ldr	r2, [pc, #208]	; (800908c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008fbc:	4953      	ldr	r1, [pc, #332]	; (800910c <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8008fbe:	4855      	ldr	r0, [pc, #340]	; (8009114 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8008fc0:	f00d fa8c 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8008fc4:	4854      	ldr	r0, [pc, #336]	; (8009118 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8008fc6:	f7fd fd45 	bl	8006a54 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>
 8008fca:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8008fce:	9301      	str	r3, [sp, #4]
 8008fd0:	4b10      	ldr	r3, [pc, #64]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	4b51      	ldr	r3, [pc, #324]	; (800911c <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8008fd6:	4a2d      	ldr	r2, [pc, #180]	; (800908c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008fd8:	494f      	ldr	r1, [pc, #316]	; (8009118 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8008fda:	4851      	ldr	r0, [pc, #324]	; (8009120 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8008fdc:	f00d fa7e 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8008fe0:	4850      	ldr	r0, [pc, #320]	; (8009124 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8008fe2:	f7fd fe91 	bl	8006d08 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>
 8008fe6:	f44f 7306 	mov.w	r3, #536	; 0x218
 8008fea:	9301      	str	r3, [sp, #4]
 8008fec:	4b09      	ldr	r3, [pc, #36]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008fee:	9300      	str	r3, [sp, #0]
 8008ff0:	4b4d      	ldr	r3, [pc, #308]	; (8009128 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8008ff2:	4a26      	ldr	r2, [pc, #152]	; (800908c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008ff4:	494b      	ldr	r1, [pc, #300]	; (8009124 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8008ff6:	484d      	ldr	r0, [pc, #308]	; (800912c <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8008ff8:	f00d fa70 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8008ffc:	484c      	ldr	r0, [pc, #304]	; (8009130 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8008ffe:	f7fd ff55 	bl	8006eac <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>
 8009002:	f240 2333 	movw	r3, #563	; 0x233
 8009006:	9301      	str	r3, [sp, #4]
 8009008:	4b02      	ldr	r3, [pc, #8]	; (8009014 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	e092      	b.n	8009134 <_Z41__static_initialization_and_destruction_0ii+0x3c0>
 800900e:	bf00      	nop
 8009010:	20000384 	.word	0x20000384
 8009014:	08025180 	.word	0x08025180
 8009018:	080259f0 	.word	0x080259f0
 800901c:	080259fc 	.word	0x080259fc
 8009020:	200003a0 	.word	0x200003a0
 8009024:	200003a4 	.word	0x200003a4
 8009028:	08025a14 	.word	0x08025a14
 800902c:	200003c0 	.word	0x200003c0
 8009030:	200003c4 	.word	0x200003c4
 8009034:	08025a24 	.word	0x08025a24
 8009038:	200003e0 	.word	0x200003e0
 800903c:	200003e4 	.word	0x200003e4
 8009040:	08025a38 	.word	0x08025a38
 8009044:	20000400 	.word	0x20000400
 8009048:	20000404 	.word	0x20000404
 800904c:	08025a48 	.word	0x08025a48
 8009050:	20000420 	.word	0x20000420
 8009054:	20000424 	.word	0x20000424
 8009058:	08025a60 	.word	0x08025a60
 800905c:	20000440 	.word	0x20000440
 8009060:	20000444 	.word	0x20000444
 8009064:	08025a70 	.word	0x08025a70
 8009068:	20000460 	.word	0x20000460
 800906c:	20000464 	.word	0x20000464
 8009070:	08025a80 	.word	0x08025a80
 8009074:	20000480 	.word	0x20000480
 8009078:	20000484 	.word	0x20000484
 800907c:	08025a8c 	.word	0x08025a8c
 8009080:	200004a0 	.word	0x200004a0
 8009084:	200004ac 	.word	0x200004ac
 8009088:	08025a9c 	.word	0x08025a9c
 800908c:	08025aac 	.word	0x08025aac
 8009090:	200004c8 	.word	0x200004c8
 8009094:	200004cc 	.word	0x200004cc
 8009098:	08025ac4 	.word	0x08025ac4
 800909c:	200004e8 	.word	0x200004e8
 80090a0:	200004ec 	.word	0x200004ec
 80090a4:	08025adc 	.word	0x08025adc
 80090a8:	20000508 	.word	0x20000508
 80090ac:	2000050c 	.word	0x2000050c
 80090b0:	08025af8 	.word	0x08025af8
 80090b4:	20000528 	.word	0x20000528
 80090b8:	2000052c 	.word	0x2000052c
 80090bc:	08025b0c 	.word	0x08025b0c
 80090c0:	20000548 	.word	0x20000548
 80090c4:	2000054c 	.word	0x2000054c
 80090c8:	08025b28 	.word	0x08025b28
 80090cc:	20000568 	.word	0x20000568
 80090d0:	2000056c 	.word	0x2000056c
 80090d4:	08025b3c 	.word	0x08025b3c
 80090d8:	20000588 	.word	0x20000588
 80090dc:	2000058c 	.word	0x2000058c
 80090e0:	08025b58 	.word	0x08025b58
 80090e4:	200005a8 	.word	0x200005a8
 80090e8:	200005ac 	.word	0x200005ac
 80090ec:	08025b70 	.word	0x08025b70
 80090f0:	200005c8 	.word	0x200005c8
 80090f4:	200005cc 	.word	0x200005cc
 80090f8:	08025b84 	.word	0x08025b84
 80090fc:	200005e8 	.word	0x200005e8
 8009100:	200005ec 	.word	0x200005ec
 8009104:	08025ba4 	.word	0x08025ba4
 8009108:	20000608 	.word	0x20000608
 800910c:	2000060c 	.word	0x2000060c
 8009110:	08025bbc 	.word	0x08025bbc
 8009114:	20000628 	.word	0x20000628
 8009118:	2000062c 	.word	0x2000062c
 800911c:	08025bd4 	.word	0x08025bd4
 8009120:	20000648 	.word	0x20000648
 8009124:	2000064c 	.word	0x2000064c
 8009128:	08025be8 	.word	0x08025be8
 800912c:	20000668 	.word	0x20000668
 8009130:	2000066c 	.word	0x2000066c
 8009134:	4b8d      	ldr	r3, [pc, #564]	; (800936c <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 8009136:	4a8e      	ldr	r2, [pc, #568]	; (8009370 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8009138:	498e      	ldr	r1, [pc, #568]	; (8009374 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 800913a:	488f      	ldr	r0, [pc, #572]	; (8009378 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800913c:	f00d f9ce 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8009140:	488e      	ldr	r0, [pc, #568]	; (800937c <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8009142:	f7fe f80d 	bl	8007160 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>
 8009146:	f240 235f 	movw	r3, #607	; 0x25f
 800914a:	9301      	str	r3, [sp, #4]
 800914c:	4b8c      	ldr	r3, [pc, #560]	; (8009380 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	4b8c      	ldr	r3, [pc, #560]	; (8009384 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 8009152:	4a87      	ldr	r2, [pc, #540]	; (8009370 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8009154:	4989      	ldr	r1, [pc, #548]	; (800937c <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8009156:	488c      	ldr	r0, [pc, #560]	; (8009388 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8009158:	f00d f9c0 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 800915c:	488b      	ldr	r0, [pc, #556]	; (800938c <_Z41__static_initialization_and_destruction_0ii+0x618>)
 800915e:	f7fe f8fd 	bl	800735c <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>
 8009162:	f44f 731e 	mov.w	r3, #632	; 0x278
 8009166:	9301      	str	r3, [sp, #4]
 8009168:	4b85      	ldr	r3, [pc, #532]	; (8009380 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	4b88      	ldr	r3, [pc, #544]	; (8009390 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 800916e:	4a80      	ldr	r2, [pc, #512]	; (8009370 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8009170:	4986      	ldr	r1, [pc, #536]	; (800938c <_Z41__static_initialization_and_destruction_0ii+0x618>)
 8009172:	4888      	ldr	r0, [pc, #544]	; (8009394 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 8009174:	f00d f9b2 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8009178:	4887      	ldr	r0, [pc, #540]	; (8009398 <_Z41__static_initialization_and_destruction_0ii+0x624>)
 800917a:	f7fe fa6d 	bl	8007658 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>
 800917e:	f240 239d 	movw	r3, #669	; 0x29d
 8009182:	9301      	str	r3, [sp, #4]
 8009184:	4b7e      	ldr	r3, [pc, #504]	; (8009380 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	4b84      	ldr	r3, [pc, #528]	; (800939c <_Z41__static_initialization_and_destruction_0ii+0x628>)
 800918a:	4a79      	ldr	r2, [pc, #484]	; (8009370 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800918c:	4982      	ldr	r1, [pc, #520]	; (8009398 <_Z41__static_initialization_and_destruction_0ii+0x624>)
 800918e:	4884      	ldr	r0, [pc, #528]	; (80093a0 <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 8009190:	f00d f9a4 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8009194:	4883      	ldr	r0, [pc, #524]	; (80093a4 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 8009196:	f7fe fb3d 	bl	8007814 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>
 800919a:	f240 23b3 	movw	r3, #691	; 0x2b3
 800919e:	9301      	str	r3, [sp, #4]
 80091a0:	4b77      	ldr	r3, [pc, #476]	; (8009380 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80091a2:	9300      	str	r3, [sp, #0]
 80091a4:	4b80      	ldr	r3, [pc, #512]	; (80093a8 <_Z41__static_initialization_and_destruction_0ii+0x634>)
 80091a6:	4a72      	ldr	r2, [pc, #456]	; (8009370 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80091a8:	497e      	ldr	r1, [pc, #504]	; (80093a4 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 80091aa:	4880      	ldr	r0, [pc, #512]	; (80093ac <_Z41__static_initialization_and_destruction_0ii+0x638>)
 80091ac:	f00d f996 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 80091b0:	487f      	ldr	r0, [pc, #508]	; (80093b0 <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 80091b2:	f7fe fba7 	bl	8007904 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>
 80091b6:	f44f 7331 	mov.w	r3, #708	; 0x2c4
 80091ba:	9301      	str	r3, [sp, #4]
 80091bc:	4b70      	ldr	r3, [pc, #448]	; (8009380 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	4b7c      	ldr	r3, [pc, #496]	; (80093b4 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 80091c2:	4a6b      	ldr	r2, [pc, #428]	; (8009370 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80091c4:	497a      	ldr	r1, [pc, #488]	; (80093b0 <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 80091c6:	487c      	ldr	r0, [pc, #496]	; (80093b8 <_Z41__static_initialization_and_destruction_0ii+0x644>)
 80091c8:	f00d f988 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_TCP_Bytes_Test)
 80091cc:	487b      	ldr	r0, [pc, #492]	; (80093bc <_Z41__static_initialization_and_destruction_0ii+0x648>)
 80091ce:	f7fe fc7f 	bl	8007ad0 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellC1Ev>
 80091d2:	f240 23df 	movw	r3, #735	; 0x2df
 80091d6:	9301      	str	r3, [sp, #4]
 80091d8:	4b69      	ldr	r3, [pc, #420]	; (8009380 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	4b78      	ldr	r3, [pc, #480]	; (80093c0 <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 80091de:	4a64      	ldr	r2, [pc, #400]	; (8009370 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80091e0:	4976      	ldr	r1, [pc, #472]	; (80093bc <_Z41__static_initialization_and_destruction_0ii+0x648>)
 80091e2:	4878      	ldr	r0, [pc, #480]	; (80093c4 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 80091e4:	f00d f97a 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f040 80ba 	bne.w	8009364 <_Z41__static_initialization_and_destruction_0ii+0x5f0>
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091f6:	4293      	cmp	r3, r2
 80091f8:	f040 80b4 	bne.w	8009364 <_Z41__static_initialization_and_destruction_0ii+0x5f0>
 80091fc:	4871      	ldr	r0, [pc, #452]	; (80093c4 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 80091fe:	f00d f997 	bl	8016530 <_ZN13TestInstallerD1Ev>
 8009202:	486e      	ldr	r0, [pc, #440]	; (80093bc <_Z41__static_initialization_and_destruction_0ii+0x648>)
 8009204:	f7fe fdbe 	bl	8007d84 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8009208:	486b      	ldr	r0, [pc, #428]	; (80093b8 <_Z41__static_initialization_and_destruction_0ii+0x644>)
 800920a:	f00d f991 	bl	8016530 <_ZN13TestInstallerD1Ev>
 800920e:	4868      	ldr	r0, [pc, #416]	; (80093b0 <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 8009210:	f7fe fdfc 	bl	8007e0c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8009214:	4865      	ldr	r0, [pc, #404]	; (80093ac <_Z41__static_initialization_and_destruction_0ii+0x638>)
 8009216:	f00d f98b 	bl	8016530 <_ZN13TestInstallerD1Ev>
 800921a:	4862      	ldr	r0, [pc, #392]	; (80093a4 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 800921c:	f7fe fe3a 	bl	8007e94 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8009220:	485f      	ldr	r0, [pc, #380]	; (80093a0 <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 8009222:	f00d f985 	bl	8016530 <_ZN13TestInstallerD1Ev>
 8009226:	485c      	ldr	r0, [pc, #368]	; (8009398 <_Z41__static_initialization_and_destruction_0ii+0x624>)
 8009228:	f7fe fe78 	bl	8007f1c <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 800922c:	4859      	ldr	r0, [pc, #356]	; (8009394 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 800922e:	f00d f97f 	bl	8016530 <_ZN13TestInstallerD1Ev>
 8009232:	4856      	ldr	r0, [pc, #344]	; (800938c <_Z41__static_initialization_and_destruction_0ii+0x618>)
 8009234:	f7fe feb6 	bl	8007fa4 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8009238:	4853      	ldr	r0, [pc, #332]	; (8009388 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800923a:	f00d f979 	bl	8016530 <_ZN13TestInstallerD1Ev>
 800923e:	484f      	ldr	r0, [pc, #316]	; (800937c <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8009240:	f7fe fef4 	bl	800802c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8009244:	484c      	ldr	r0, [pc, #304]	; (8009378 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8009246:	f00d f973 	bl	8016530 <_ZN13TestInstallerD1Ev>
 800924a:	484a      	ldr	r0, [pc, #296]	; (8009374 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 800924c:	f7fe ff32 	bl	80080b4 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8009250:	485d      	ldr	r0, [pc, #372]	; (80093c8 <_Z41__static_initialization_and_destruction_0ii+0x654>)
 8009252:	f00d f96d 	bl	8016530 <_ZN13TestInstallerD1Ev>
 8009256:	485d      	ldr	r0, [pc, #372]	; (80093cc <_Z41__static_initialization_and_destruction_0ii+0x658>)
 8009258:	f7fe ff70 	bl	800813c <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 800925c:	485c      	ldr	r0, [pc, #368]	; (80093d0 <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 800925e:	f00d f967 	bl	8016530 <_ZN13TestInstallerD1Ev>
 8009262:	485c      	ldr	r0, [pc, #368]	; (80093d4 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 8009264:	f7fe ffae 	bl	80081c4 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Command_Process_Test)
 8009268:	485b      	ldr	r0, [pc, #364]	; (80093d8 <_Z41__static_initialization_and_destruction_0ii+0x664>)
 800926a:	f00d f961 	bl	8016530 <_ZN13TestInstallerD1Ev>
 800926e:	485b      	ldr	r0, [pc, #364]	; (80093dc <_Z41__static_initialization_and_destruction_0ii+0x668>)
 8009270:	f7fe ffec 	bl	800824c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8009274:	485a      	ldr	r0, [pc, #360]	; (80093e0 <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 8009276:	f00d f95b 	bl	8016530 <_ZN13TestInstallerD1Ev>
 800927a:	485a      	ldr	r0, [pc, #360]	; (80093e4 <_Z41__static_initialization_and_destruction_0ii+0x670>)
 800927c:	f7ff f82a 	bl	80082d4 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8009280:	4859      	ldr	r0, [pc, #356]	; (80093e8 <_Z41__static_initialization_and_destruction_0ii+0x674>)
 8009282:	f00d f955 	bl	8016530 <_ZN13TestInstallerD1Ev>
 8009286:	4859      	ldr	r0, [pc, #356]	; (80093ec <_Z41__static_initialization_and_destruction_0ii+0x678>)
 8009288:	f7ff f868 	bl	800835c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 800928c:	4858      	ldr	r0, [pc, #352]	; (80093f0 <_Z41__static_initialization_and_destruction_0ii+0x67c>)
 800928e:	f00d f94f 	bl	8016530 <_ZN13TestInstallerD1Ev>
 8009292:	4858      	ldr	r0, [pc, #352]	; (80093f4 <_Z41__static_initialization_and_destruction_0ii+0x680>)
 8009294:	f7ff f8a6 	bl	80083e4 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8009298:	4857      	ldr	r0, [pc, #348]	; (80093f8 <_Z41__static_initialization_and_destruction_0ii+0x684>)
 800929a:	f00d f949 	bl	8016530 <_ZN13TestInstallerD1Ev>
 800929e:	4857      	ldr	r0, [pc, #348]	; (80093fc <_Z41__static_initialization_and_destruction_0ii+0x688>)
 80092a0:	f7ff f8e4 	bl	800846c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80092a4:	4856      	ldr	r0, [pc, #344]	; (8009400 <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 80092a6:	f00d f943 	bl	8016530 <_ZN13TestInstallerD1Ev>
 80092aa:	4856      	ldr	r0, [pc, #344]	; (8009404 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 80092ac:	f7ff f922 	bl	80084f4 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 80092b0:	4855      	ldr	r0, [pc, #340]	; (8009408 <_Z41__static_initialization_and_destruction_0ii+0x694>)
 80092b2:	f00d f93d 	bl	8016530 <_ZN13TestInstallerD1Ev>
 80092b6:	4855      	ldr	r0, [pc, #340]	; (800940c <_Z41__static_initialization_and_destruction_0ii+0x698>)
 80092b8:	f7ff f960 	bl	800857c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 80092bc:	4854      	ldr	r0, [pc, #336]	; (8009410 <_Z41__static_initialization_and_destruction_0ii+0x69c>)
 80092be:	f00d f937 	bl	8016530 <_ZN13TestInstallerD1Ev>
 80092c2:	4854      	ldr	r0, [pc, #336]	; (8009414 <_Z41__static_initialization_and_destruction_0ii+0x6a0>)
 80092c4:	f7ff f99e 	bl	8008604 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 80092c8:	4853      	ldr	r0, [pc, #332]	; (8009418 <_Z41__static_initialization_and_destruction_0ii+0x6a4>)
 80092ca:	f00d f931 	bl	8016530 <_ZN13TestInstallerD1Ev>
 80092ce:	4853      	ldr	r0, [pc, #332]	; (800941c <_Z41__static_initialization_and_destruction_0ii+0x6a8>)
 80092d0:	f7ff f9dc 	bl	800868c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80092d4:	4852      	ldr	r0, [pc, #328]	; (8009420 <_Z41__static_initialization_and_destruction_0ii+0x6ac>)
 80092d6:	f00d f92b 	bl	8016530 <_ZN13TestInstallerD1Ev>
 80092da:	4852      	ldr	r0, [pc, #328]	; (8009424 <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 80092dc:	f7ff fa1a 	bl	8008714 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80092e0:	4851      	ldr	r0, [pc, #324]	; (8009428 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 80092e2:	f00d f925 	bl	8016530 <_ZN13TestInstallerD1Ev>
 80092e6:	4851      	ldr	r0, [pc, #324]	; (800942c <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 80092e8:	f7ff fa58 	bl	800879c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80092ec:	4850      	ldr	r0, [pc, #320]	; (8009430 <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 80092ee:	f00d f91f 	bl	8016530 <_ZN13TestInstallerD1Ev>
 80092f2:	4850      	ldr	r0, [pc, #320]	; (8009434 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 80092f4:	f7ff fa96 	bl	8008824 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 80092f8:	484f      	ldr	r0, [pc, #316]	; (8009438 <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 80092fa:	f00d f919 	bl	8016530 <_ZN13TestInstallerD1Ev>
 80092fe:	484f      	ldr	r0, [pc, #316]	; (800943c <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 8009300:	f7ff fad4 	bl	80088ac <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 8009304:	484e      	ldr	r0, [pc, #312]	; (8009440 <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 8009306:	f00d f913 	bl	8016530 <_ZN13TestInstallerD1Ev>
 800930a:	484e      	ldr	r0, [pc, #312]	; (8009444 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 800930c:	f7ff fb12 	bl	8008934 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8009310:	484d      	ldr	r0, [pc, #308]	; (8009448 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 8009312:	f00d f90d 	bl	8016530 <_ZN13TestInstallerD1Ev>
 8009316:	484d      	ldr	r0, [pc, #308]	; (800944c <_Z41__static_initialization_and_destruction_0ii+0x6d8>)
 8009318:	f7ff fb50 	bl	80089bc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 800931c:	484c      	ldr	r0, [pc, #304]	; (8009450 <_Z41__static_initialization_and_destruction_0ii+0x6dc>)
 800931e:	f00d f907 	bl	8016530 <_ZN13TestInstallerD1Ev>
 8009322:	484c      	ldr	r0, [pc, #304]	; (8009454 <_Z41__static_initialization_and_destruction_0ii+0x6e0>)
 8009324:	f7ff fb8e 	bl	8008a44 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8009328:	484b      	ldr	r0, [pc, #300]	; (8009458 <_Z41__static_initialization_and_destruction_0ii+0x6e4>)
 800932a:	f00d f901 	bl	8016530 <_ZN13TestInstallerD1Ev>
 800932e:	484b      	ldr	r0, [pc, #300]	; (800945c <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 8009330:	f7ff fbcc 	bl	8008acc <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 8009334:	484a      	ldr	r0, [pc, #296]	; (8009460 <_Z41__static_initialization_and_destruction_0ii+0x6ec>)
 8009336:	f00d f8fb 	bl	8016530 <_ZN13TestInstallerD1Ev>
 800933a:	484a      	ldr	r0, [pc, #296]	; (8009464 <_Z41__static_initialization_and_destruction_0ii+0x6f0>)
 800933c:	f7ff fc0a 	bl	8008b54 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8009340:	4849      	ldr	r0, [pc, #292]	; (8009468 <_Z41__static_initialization_and_destruction_0ii+0x6f4>)
 8009342:	f00d f8f5 	bl	8016530 <_ZN13TestInstallerD1Ev>
 8009346:	4849      	ldr	r0, [pc, #292]	; (800946c <_Z41__static_initialization_and_destruction_0ii+0x6f8>)
 8009348:	f7ff fc48 	bl	8008bdc <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 800934c:	4848      	ldr	r0, [pc, #288]	; (8009470 <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 800934e:	f00d f8ef 	bl	8016530 <_ZN13TestInstallerD1Ev>
 8009352:	4848      	ldr	r0, [pc, #288]	; (8009474 <_Z41__static_initialization_and_destruction_0ii+0x700>)
 8009354:	f7ff fc86 	bl	8008c64 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 8009358:	4847      	ldr	r0, [pc, #284]	; (8009478 <_Z41__static_initialization_and_destruction_0ii+0x704>)
 800935a:	f00d f8e9 	bl	8016530 <_ZN13TestInstallerD1Ev>
 800935e:	4847      	ldr	r0, [pc, #284]	; (800947c <_Z41__static_initialization_and_destruction_0ii+0x708>)
 8009360:	f7ff fcc4 	bl	8008cec <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 8009364:	bf00      	nop
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	08025c04 	.word	0x08025c04
 8009370:	08025aac 	.word	0x08025aac
 8009374:	2000066c 	.word	0x2000066c
 8009378:	20000688 	.word	0x20000688
 800937c:	2000068c 	.word	0x2000068c
 8009380:	08025180 	.word	0x08025180
 8009384:	08025c1c 	.word	0x08025c1c
 8009388:	200006a8 	.word	0x200006a8
 800938c:	200006ac 	.word	0x200006ac
 8009390:	08025c30 	.word	0x08025c30
 8009394:	200006c8 	.word	0x200006c8
 8009398:	200006cc 	.word	0x200006cc
 800939c:	08025c48 	.word	0x08025c48
 80093a0:	200006e8 	.word	0x200006e8
 80093a4:	200006ec 	.word	0x200006ec
 80093a8:	08025c60 	.word	0x08025c60
 80093ac:	20000708 	.word	0x20000708
 80093b0:	2000070c 	.word	0x2000070c
 80093b4:	08025c80 	.word	0x08025c80
 80093b8:	20000728 	.word	0x20000728
 80093bc:	2000072c 	.word	0x2000072c
 80093c0:	08025c98 	.word	0x08025c98
 80093c4:	20000748 	.word	0x20000748
 80093c8:	20000668 	.word	0x20000668
 80093cc:	2000064c 	.word	0x2000064c
 80093d0:	20000648 	.word	0x20000648
 80093d4:	2000062c 	.word	0x2000062c
 80093d8:	20000628 	.word	0x20000628
 80093dc:	2000060c 	.word	0x2000060c
 80093e0:	20000608 	.word	0x20000608
 80093e4:	200005ec 	.word	0x200005ec
 80093e8:	200005e8 	.word	0x200005e8
 80093ec:	200005cc 	.word	0x200005cc
 80093f0:	200005c8 	.word	0x200005c8
 80093f4:	200005ac 	.word	0x200005ac
 80093f8:	200005a8 	.word	0x200005a8
 80093fc:	2000058c 	.word	0x2000058c
 8009400:	20000588 	.word	0x20000588
 8009404:	2000056c 	.word	0x2000056c
 8009408:	20000568 	.word	0x20000568
 800940c:	2000054c 	.word	0x2000054c
 8009410:	20000548 	.word	0x20000548
 8009414:	2000052c 	.word	0x2000052c
 8009418:	20000528 	.word	0x20000528
 800941c:	2000050c 	.word	0x2000050c
 8009420:	20000508 	.word	0x20000508
 8009424:	200004ec 	.word	0x200004ec
 8009428:	200004e8 	.word	0x200004e8
 800942c:	200004cc 	.word	0x200004cc
 8009430:	200004c8 	.word	0x200004c8
 8009434:	200004ac 	.word	0x200004ac
 8009438:	200004a0 	.word	0x200004a0
 800943c:	20000484 	.word	0x20000484
 8009440:	20000480 	.word	0x20000480
 8009444:	20000464 	.word	0x20000464
 8009448:	20000460 	.word	0x20000460
 800944c:	20000444 	.word	0x20000444
 8009450:	20000440 	.word	0x20000440
 8009454:	20000424 	.word	0x20000424
 8009458:	20000420 	.word	0x20000420
 800945c:	20000404 	.word	0x20000404
 8009460:	20000400 	.word	0x20000400
 8009464:	200003e4 	.word	0x200003e4
 8009468:	200003e0 	.word	0x200003e0
 800946c:	200003c4 	.word	0x200003c4
 8009470:	200003c0 	.word	0x200003c0
 8009474:	200003a4 	.word	0x200003a4
 8009478:	200003a0 	.word	0x200003a0
 800947c:	20000384 	.word	0x20000384

08009480 <_GLOBAL__sub_I_externTestGroupRingBuffer_Test_Group>:
 8009480:	b580      	push	{r7, lr}
 8009482:	af00      	add	r7, sp, #0
 8009484:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009488:	2001      	movs	r0, #1
 800948a:	f7ff fc73 	bl	8008d74 <_Z41__static_initialization_and_destruction_0ii>
 800948e:	bd80      	pop	{r7, pc}

08009490 <_GLOBAL__sub_D_externTestGroupRingBuffer_Test_Group>:
 8009490:	b580      	push	{r7, lr}
 8009492:	af00      	add	r7, sp, #0
 8009494:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009498:	2000      	movs	r0, #0
 800949a:	f7ff fc6b 	bl	8008d74 <_Z41__static_initialization_and_destruction_0ii>
 800949e:	bd80      	pop	{r7, pc}

080094a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80094a6:	f7f7 fd9a 	bl	8000fde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80094aa:	f000 f817 	bl	80094dc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80094ae:	f000 f973 	bl	8009798 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80094b2:	f000 f947 	bl	8009744 <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 80094b6:	f000 f887 	bl	80095c8 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 80094ba:	f000 f8e3 	bl	8009684 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  const char * av_override[] = { "exe","-v" };      // verbose mode
 80094be:	4a06      	ldr	r2, [pc, #24]	; (80094d8 <main+0x38>)
 80094c0:	463b      	mov	r3, r7
 80094c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80094c6:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 80094ca:	463b      	mov	r3, r7
 80094cc:	4619      	mov	r1, r3
 80094ce:	2002      	movs	r0, #2
 80094d0:	f001 f8f8 	bl	800a6c4 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>
  while (1)
 80094d4:	e7fe      	b.n	80094d4 <main+0x34>
 80094d6:	bf00      	nop
 80094d8:	08025cb4 	.word	0x08025cb4

080094dc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b0a8      	sub	sp, #160	; 0xa0
 80094e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80094e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80094e6:	2238      	movs	r2, #56	; 0x38
 80094e8:	2100      	movs	r1, #0
 80094ea:	4618      	mov	r0, r3
 80094ec:	f018 fe60 	bl	80221b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80094f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80094f4:	2200      	movs	r2, #0
 80094f6:	601a      	str	r2, [r3, #0]
 80094f8:	605a      	str	r2, [r3, #4]
 80094fa:	609a      	str	r2, [r3, #8]
 80094fc:	60da      	str	r2, [r3, #12]
 80094fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009500:	463b      	mov	r3, r7
 8009502:	2254      	movs	r2, #84	; 0x54
 8009504:	2100      	movs	r1, #0
 8009506:	4618      	mov	r0, r3
 8009508:	f018 fe52 	bl	80221b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800950c:	2000      	movs	r0, #0
 800950e:	f7f8 fb1f 	bl	8001b50 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009512:	2301      	movs	r3, #1
 8009514:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009516:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800951a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800951c:	2302      	movs	r3, #2
 800951e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009522:	2303      	movs	r3, #3
 8009524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8009528:	2306      	movs	r3, #6
 800952a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800952e:	2355      	movs	r3, #85	; 0x55
 8009530:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009534:	2302      	movs	r3, #2
 8009536:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800953a:	2302      	movs	r3, #2
 800953c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009540:	2302      	movs	r3, #2
 8009542:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009546:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800954a:	4618      	mov	r0, r3
 800954c:	f7f8 fbb4 	bl	8001cb8 <HAL_RCC_OscConfig>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	bf14      	ite	ne
 8009556:	2301      	movne	r3, #1
 8009558:	2300      	moveq	r3, #0
 800955a:	b2db      	uxtb	r3, r3
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8009560:	f000 f98a 	bl	8009878 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009564:	230f      	movs	r3, #15
 8009566:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009568:	2303      	movs	r3, #3
 800956a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800956c:	2300      	movs	r3, #0
 800956e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009570:	2300      	movs	r3, #0
 8009572:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009574:	2300      	movs	r3, #0
 8009576:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009578:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800957c:	2104      	movs	r1, #4
 800957e:	4618      	mov	r0, r3
 8009580:	f7f8 feb2 	bl	80022e8 <HAL_RCC_ClockConfig>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	bf14      	ite	ne
 800958a:	2301      	movne	r3, #1
 800958c:	2300      	moveq	r3, #0
 800958e:	b2db      	uxtb	r3, r3
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8009594:	f000 f970 	bl	8009878 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8009598:	2321      	movs	r3, #33	; 0x21
 800959a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800959c:	2300      	movs	r3, #0
 800959e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80095a0:	2300      	movs	r3, #0
 80095a2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80095a4:	463b      	mov	r3, r7
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7f9 f8ba 	bl	8002720 <HAL_RCCEx_PeriphCLKConfig>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	bf14      	ite	ne
 80095b2:	2301      	movne	r3, #1
 80095b4:	2300      	moveq	r3, #0
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <_Z18SystemClock_Configv+0xe4>
  {
    Error_Handler();
 80095bc:	f000 f95c 	bl	8009878 <Error_Handler>
  }
}
 80095c0:	bf00      	nop
 80095c2:	37a0      	adds	r7, #160	; 0xa0
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80095cc:	4b2b      	ldr	r3, [pc, #172]	; (800967c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80095ce:	4a2c      	ldr	r2, [pc, #176]	; (8009680 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80095d0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80095d2:	4b2a      	ldr	r3, [pc, #168]	; (800967c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80095d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80095d8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80095da:	4b28      	ldr	r3, [pc, #160]	; (800967c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80095dc:	2200      	movs	r2, #0
 80095de:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80095e0:	4b26      	ldr	r3, [pc, #152]	; (800967c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80095e6:	4b25      	ldr	r3, [pc, #148]	; (800967c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80095ec:	4b23      	ldr	r3, [pc, #140]	; (800967c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80095ee:	220c      	movs	r2, #12
 80095f0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80095f2:	4b22      	ldr	r3, [pc, #136]	; (800967c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80095f8:	4b20      	ldr	r3, [pc, #128]	; (800967c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80095fa:	2200      	movs	r2, #0
 80095fc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80095fe:	4b1f      	ldr	r3, [pc, #124]	; (800967c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8009600:	2200      	movs	r2, #0
 8009602:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009604:	4b1d      	ldr	r3, [pc, #116]	; (800967c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8009606:	2200      	movs	r2, #0
 8009608:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800960a:	481c      	ldr	r0, [pc, #112]	; (800967c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800960c:	f7f9 fad4 	bl	8002bb8 <HAL_UART_Init>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	bf14      	ite	ne
 8009616:	2301      	movne	r3, #1
 8009618:	2300      	moveq	r3, #0
 800961a:	b2db      	uxtb	r3, r3
 800961c:	2b00      	cmp	r3, #0
 800961e:	d001      	beq.n	8009624 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8009620:	f000 f92a 	bl	8009878 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009624:	2100      	movs	r1, #0
 8009626:	4815      	ldr	r0, [pc, #84]	; (800967c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8009628:	f7fa fa5a 	bl	8003ae0 <HAL_UARTEx_SetTxFifoThreshold>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	bf14      	ite	ne
 8009632:	2301      	movne	r3, #1
 8009634:	2300      	moveq	r3, #0
 8009636:	b2db      	uxtb	r3, r3
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 800963c:	f000 f91c 	bl	8009878 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009640:	2100      	movs	r1, #0
 8009642:	480e      	ldr	r0, [pc, #56]	; (800967c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8009644:	f7fa fa8a 	bl	8003b5c <HAL_UARTEx_SetRxFifoThreshold>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	bf14      	ite	ne
 800964e:	2301      	movne	r3, #1
 8009650:	2300      	moveq	r3, #0
 8009652:	b2db      	uxtb	r3, r3
 8009654:	2b00      	cmp	r3, #0
 8009656:	d001      	beq.n	800965c <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8009658:	f000 f90e 	bl	8009878 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800965c:	4807      	ldr	r0, [pc, #28]	; (800967c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800965e:	f7fa fa06 	bl	8003a6e <HAL_UARTEx_DisableFifoMode>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	bf14      	ite	ne
 8009668:	2301      	movne	r3, #1
 800966a:	2300      	moveq	r3, #0
 800966c:	b2db      	uxtb	r3, r3
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8009672:	f000 f901 	bl	8009878 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8009676:	bf00      	nop
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	2000074c 	.word	0x2000074c
 8009680:	40008000 	.word	0x40008000

08009684 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009688:	4b2c      	ldr	r3, [pc, #176]	; (800973c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800968a:	4a2d      	ldr	r2, [pc, #180]	; (8009740 <_ZL19MX_USART1_UART_Initv+0xbc>)
 800968c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800968e:	4b2b      	ldr	r3, [pc, #172]	; (800973c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009694:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009696:	4b29      	ldr	r3, [pc, #164]	; (800973c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009698:	2200      	movs	r2, #0
 800969a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800969c:	4b27      	ldr	r3, [pc, #156]	; (800973c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800969e:	2200      	movs	r2, #0
 80096a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80096a2:	4b26      	ldr	r3, [pc, #152]	; (800973c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80096a8:	4b24      	ldr	r3, [pc, #144]	; (800973c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80096aa:	220c      	movs	r2, #12
 80096ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80096ae:	4b23      	ldr	r3, [pc, #140]	; (800973c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80096b4:	4b21      	ldr	r3, [pc, #132]	; (800973c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80096b6:	2200      	movs	r2, #0
 80096b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80096ba:	4b20      	ldr	r3, [pc, #128]	; (800973c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80096bc:	2200      	movs	r2, #0
 80096be:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80096c0:	4b1e      	ldr	r3, [pc, #120]	; (800973c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80096c6:	4b1d      	ldr	r3, [pc, #116]	; (800973c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80096cc:	481b      	ldr	r0, [pc, #108]	; (800973c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80096ce:	f7f9 fa73 	bl	8002bb8 <HAL_UART_Init>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	bf14      	ite	ne
 80096d8:	2301      	movne	r3, #1
 80096da:	2300      	moveq	r3, #0
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80096e2:	f000 f8c9 	bl	8009878 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80096e6:	2100      	movs	r1, #0
 80096e8:	4814      	ldr	r0, [pc, #80]	; (800973c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80096ea:	f7fa f9f9 	bl	8003ae0 <HAL_UARTEx_SetTxFifoThreshold>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	bf14      	ite	ne
 80096f4:	2301      	movne	r3, #1
 80096f6:	2300      	moveq	r3, #0
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 80096fe:	f000 f8bb 	bl	8009878 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009702:	2100      	movs	r1, #0
 8009704:	480d      	ldr	r0, [pc, #52]	; (800973c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009706:	f7fa fa29 	bl	8003b5c <HAL_UARTEx_SetRxFifoThreshold>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	bf14      	ite	ne
 8009710:	2301      	movne	r3, #1
 8009712:	2300      	moveq	r3, #0
 8009714:	b2db      	uxtb	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 800971a:	f000 f8ad 	bl	8009878 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800971e:	4807      	ldr	r0, [pc, #28]	; (800973c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009720:	f7fa f9a5 	bl	8003a6e <HAL_UARTEx_DisableFifoMode>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	bf14      	ite	ne
 800972a:	2301      	movne	r3, #1
 800972c:	2300      	moveq	r3, #0
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b00      	cmp	r3, #0
 8009732:	d001      	beq.n	8009738 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8009734:	f000 f8a0 	bl	8009878 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009738:	bf00      	nop
 800973a:	bd80      	pop	{r7, pc}
 800973c:	200007dc 	.word	0x200007dc
 8009740:	40013800 	.word	0x40013800

08009744 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800974a:	4b12      	ldr	r3, [pc, #72]	; (8009794 <_ZL11MX_DMA_Initv+0x50>)
 800974c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800974e:	4a11      	ldr	r2, [pc, #68]	; (8009794 <_ZL11MX_DMA_Initv+0x50>)
 8009750:	f043 0304 	orr.w	r3, r3, #4
 8009754:	6493      	str	r3, [r2, #72]	; 0x48
 8009756:	4b0f      	ldr	r3, [pc, #60]	; (8009794 <_ZL11MX_DMA_Initv+0x50>)
 8009758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800975a:	f003 0304 	and.w	r3, r3, #4
 800975e:	607b      	str	r3, [r7, #4]
 8009760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009762:	4b0c      	ldr	r3, [pc, #48]	; (8009794 <_ZL11MX_DMA_Initv+0x50>)
 8009764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009766:	4a0b      	ldr	r2, [pc, #44]	; (8009794 <_ZL11MX_DMA_Initv+0x50>)
 8009768:	f043 0301 	orr.w	r3, r3, #1
 800976c:	6493      	str	r3, [r2, #72]	; 0x48
 800976e:	4b09      	ldr	r3, [pc, #36]	; (8009794 <_ZL11MX_DMA_Initv+0x50>)
 8009770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	603b      	str	r3, [r7, #0]
 8009778:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800977a:	2200      	movs	r2, #0
 800977c:	2100      	movs	r1, #0
 800977e:	200b      	movs	r0, #11
 8009780:	f7f7 fd79 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009784:	200b      	movs	r0, #11
 8009786:	f7f7 fd90 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 800978a:	bf00      	nop
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	40021000 	.word	0x40021000

08009798 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b08a      	sub	sp, #40	; 0x28
 800979c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800979e:	f107 0314 	add.w	r3, r7, #20
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]
 80097a6:	605a      	str	r2, [r3, #4]
 80097a8:	609a      	str	r2, [r3, #8]
 80097aa:	60da      	str	r2, [r3, #12]
 80097ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80097ae:	4b2f      	ldr	r3, [pc, #188]	; (800986c <_ZL12MX_GPIO_Initv+0xd4>)
 80097b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097b2:	4a2e      	ldr	r2, [pc, #184]	; (800986c <_ZL12MX_GPIO_Initv+0xd4>)
 80097b4:	f043 0304 	orr.w	r3, r3, #4
 80097b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097ba:	4b2c      	ldr	r3, [pc, #176]	; (800986c <_ZL12MX_GPIO_Initv+0xd4>)
 80097bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097be:	f003 0304 	and.w	r3, r3, #4
 80097c2:	613b      	str	r3, [r7, #16]
 80097c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80097c6:	4b29      	ldr	r3, [pc, #164]	; (800986c <_ZL12MX_GPIO_Initv+0xd4>)
 80097c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ca:	4a28      	ldr	r2, [pc, #160]	; (800986c <_ZL12MX_GPIO_Initv+0xd4>)
 80097cc:	f043 0320 	orr.w	r3, r3, #32
 80097d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097d2:	4b26      	ldr	r3, [pc, #152]	; (800986c <_ZL12MX_GPIO_Initv+0xd4>)
 80097d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097d6:	f003 0320 	and.w	r3, r3, #32
 80097da:	60fb      	str	r3, [r7, #12]
 80097dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80097de:	4b23      	ldr	r3, [pc, #140]	; (800986c <_ZL12MX_GPIO_Initv+0xd4>)
 80097e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097e2:	4a22      	ldr	r2, [pc, #136]	; (800986c <_ZL12MX_GPIO_Initv+0xd4>)
 80097e4:	f043 0301 	orr.w	r3, r3, #1
 80097e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097ea:	4b20      	ldr	r3, [pc, #128]	; (800986c <_ZL12MX_GPIO_Initv+0xd4>)
 80097ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	60bb      	str	r3, [r7, #8]
 80097f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80097f6:	4b1d      	ldr	r3, [pc, #116]	; (800986c <_ZL12MX_GPIO_Initv+0xd4>)
 80097f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097fa:	4a1c      	ldr	r2, [pc, #112]	; (800986c <_ZL12MX_GPIO_Initv+0xd4>)
 80097fc:	f043 0302 	orr.w	r3, r3, #2
 8009800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009802:	4b1a      	ldr	r3, [pc, #104]	; (800986c <_ZL12MX_GPIO_Initv+0xd4>)
 8009804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009806:	f003 0302 	and.w	r3, r3, #2
 800980a:	607b      	str	r3, [r7, #4]
 800980c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800980e:	2200      	movs	r2, #0
 8009810:	2120      	movs	r1, #32
 8009812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009816:	f7f8 f95f 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800981a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800981e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009820:	4b13      	ldr	r3, [pc, #76]	; (8009870 <_ZL12MX_GPIO_Initv+0xd8>)
 8009822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009824:	2300      	movs	r3, #0
 8009826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8009828:	f107 0314 	add.w	r3, r7, #20
 800982c:	4619      	mov	r1, r3
 800982e:	4811      	ldr	r0, [pc, #68]	; (8009874 <_ZL12MX_GPIO_Initv+0xdc>)
 8009830:	f7f7 ffd0 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8009834:	2320      	movs	r3, #32
 8009836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009838:	2301      	movs	r3, #1
 800983a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800983c:	2300      	movs	r3, #0
 800983e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009840:	2300      	movs	r3, #0
 8009842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8009844:	f107 0314 	add.w	r3, r7, #20
 8009848:	4619      	mov	r1, r3
 800984a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800984e:	f7f7 ffc1 	bl	80017d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8009852:	2200      	movs	r2, #0
 8009854:	2100      	movs	r1, #0
 8009856:	2028      	movs	r0, #40	; 0x28
 8009858:	f7f7 fd0d 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800985c:	2028      	movs	r0, #40	; 0x28
 800985e:	f7f7 fd24 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 8009862:	bf00      	nop
 8009864:	3728      	adds	r7, #40	; 0x28
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	40021000 	.word	0x40021000
 8009870:	10110000 	.word	0x10110000
 8009874:	48000800 	.word	0x48000800

08009878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009878:	b480      	push	{r7}
 800987a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800987c:	b672      	cpsid	i
}
 800987e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009880:	e7fe      	b.n	8009880 <Error_Handler+0x8>
	...

08009884 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup5setupEv>:


TEST_GROUP(MqttTestGroup)
{

	void setup()
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 800988c:	23ff      	movs	r3, #255	; 0xff
 800988e:	4a04      	ldr	r2, [pc, #16]	; (80098a0 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup5setupEv+0x1c>)
 8009890:	4904      	ldr	r1, [pc, #16]	; (80098a4 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup5setupEv+0x20>)
 8009892:	4805      	ldr	r0, [pc, #20]	; (80098a8 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup5setupEv+0x24>)
 8009894:	f7fa f9ee 	bl	8003c74 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  255);
	}
 8009898:	bf00      	nop
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	080053fd 	.word	0x080053fd
 80098a4:	08005391 	.word	0x08005391
 80098a8:	080052d1 	.word	0x080052d1

080098ac <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup8teardownEv>:

	void teardown()
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
	{
		mock().checkExpectations();
 80098b4:	f107 0308 	add.w	r3, r7, #8
 80098b8:	4917      	ldr	r1, [pc, #92]	; (8009918 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup8teardownEv+0x6c>)
 80098ba:	4618      	mov	r0, r3
 80098bc:	f004 ff93 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80098c0:	f107 0308 	add.w	r3, r7, #8
 80098c4:	2100      	movs	r1, #0
 80098c6:	4618      	mov	r0, r3
 80098c8:	f003 f866 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80098cc:	4603      	mov	r3, r0
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	3294      	adds	r2, #148	; 0x94
 80098d2:	6812      	ldr	r2, [r2, #0]
 80098d4:	4618      	mov	r0, r3
 80098d6:	4790      	blx	r2
 80098d8:	f107 0308 	add.w	r3, r7, #8
 80098dc:	4618      	mov	r0, r3
 80098de:	f005 fb3a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
		mock().clear();
 80098e2:	f107 0310 	add.w	r3, r7, #16
 80098e6:	490c      	ldr	r1, [pc, #48]	; (8009918 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup8teardownEv+0x6c>)
 80098e8:	4618      	mov	r0, r3
 80098ea:	f004 ff7c 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80098ee:	f107 0310 	add.w	r3, r7, #16
 80098f2:	2100      	movs	r1, #0
 80098f4:	4618      	mov	r0, r3
 80098f6:	f003 f84f 	bl	800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80098fa:	4603      	mov	r3, r0
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	329c      	adds	r2, #156	; 0x9c
 8009900:	6812      	ldr	r2, [r2, #0]
 8009902:	4618      	mov	r0, r3
 8009904:	4790      	blx	r2
 8009906:	f107 0310 	add.w	r3, r7, #16
 800990a:	4618      	mov	r0, r3
 800990c:	f005 fb23 	bl	800ef56 <_ZN12SimpleStringD1Ev>
	}
 8009910:	bf00      	nop
 8009912:	3718      	adds	r7, #24
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	08025cbc 	.word	0x08025cbc

0800991c <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>:
TEST_GROUP(MqttTestGroup)
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4618      	mov	r0, r3
 8009928:	f00c fb6a 	bl	8016000 <_ZN5UtestC1Ev>
 800992c:	4a03      	ldr	r2, [pc, #12]	; (800993c <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev+0x20>)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	601a      	str	r2, [r3, #0]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4618      	mov	r0, r3
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	0802a5f0 	.word	0x0802a5f0

08009940 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>:
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	4a05      	ldr	r2, [pc, #20]	; (8009960 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev+0x20>)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	601a      	str	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4618      	mov	r0, r3
 8009952:	f00c fb65 	bl	8016020 <_ZN5UtestD1Ev>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4618      	mov	r0, r3
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	0802a5f0 	.word	0x0802a5f0

08009964 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD0Ev>:
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7ff ffe7 	bl	8009940 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 8009972:	2104      	movs	r1, #4
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f002 fb87 	bl	800c088 <_ZdlPvj>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4618      	mov	r0, r3
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev>:
};

TEST(MqttTestGroup, ConnectPacketTest)
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4618      	mov	r0, r3
 8009990:	f7ff ffc4 	bl	800991c <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>
 8009994:	4a03      	ldr	r2, [pc, #12]	; (80099a4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev+0x20>)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	601a      	str	r2, [r3, #0]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4618      	mov	r0, r3
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	0802a5d0 	.word	0x0802a5d0

080099a8 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShell10createTestEv>:
 80099a8:	b590      	push	{r4, r7, lr}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	222a      	movs	r2, #42	; 0x2a
 80099b2:	4906      	ldr	r1, [pc, #24]	; (80099cc <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShell10createTestEv+0x24>)
 80099b4:	2004      	movs	r0, #4
 80099b6:	f002 fb53 	bl	800c060 <_ZnwjPKci>
 80099ba:	4604      	mov	r4, r0
 80099bc:	4620      	mov	r0, r4
 80099be:	f7ff ffe1 	bl	8009984 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev>
 80099c2:	4623      	mov	r3, r4
 80099c4:	4618      	mov	r0, r3
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd90      	pop	{r4, r7, pc}
 80099cc:	08025cc0 	.word	0x08025cc0

080099d0 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev>:
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4618      	mov	r0, r3
 80099dc:	f00a ff2e 	bl	801483c <_ZN10UtestShellC1Ev>
 80099e0:	4a03      	ldr	r2, [pc, #12]	; (80099f0 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev+0x20>)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	601a      	str	r2, [r3, #0]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4618      	mov	r0, r3
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	0802a524 	.word	0x0802a524

080099f4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv>:
{
 80099f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099f8:	b0b4      	sub	sp, #208	; 0xd0
 80099fa:	af04      	add	r7, sp, #16
 80099fc:	6078      	str	r0, [r7, #4]

	char clientID[] = "Topuz";
 80099fe:	4ac2      	ldr	r2, [pc, #776]	; (8009d08 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x314>)
 8009a00:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009a04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009a08:	6018      	str	r0, [r3, #0]
 8009a0a:	3304      	adds	r3, #4
 8009a0c:	8019      	strh	r1, [r3, #0]
	uint16_t ClientIDLength = strlen(clientID);
 8009a0e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7f6 fc12 	bl	800023c <strlen>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	uint8_t remainLength = (uint8_t)ClientIDLength + 12;  	// 12 represents the bytes in the packet between remain length and Client ID byte.
 8009a1e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	330c      	adds	r3, #12
 8009a26:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd

	uint8_t outputStream[100] ={0};							// for serialize
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009a32:	2260      	movs	r2, #96	; 0x60
 8009a34:	2100      	movs	r1, #0
 8009a36:	4618      	mov	r0, r3
 8009a38:	f018 fbba 	bl	80221b0 <memset>

	MQTT_Connect_Packet connectPacket;

	connectPacket.ConnectByte = 0x10;
 8009a3c:	2310      	movs	r3, #16
 8009a3e:	733b      	strb	r3, [r7, #12]
	connectPacket.RemainLength = remainLength;
 8009a40:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8009a44:	737b      	strb	r3, [r7, #13]
	connectPacket.ProtocolNameLength = 0x0004;
 8009a46:	2304      	movs	r3, #4
 8009a48:	81fb      	strh	r3, [r7, #14]
	strcpy(connectPacket.ProtocolName,"MQTT");
 8009a4a:	f107 030c 	add.w	r3, r7, #12
 8009a4e:	3304      	adds	r3, #4
 8009a50:	4aae      	ldr	r2, [pc, #696]	; (8009d0c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x318>)
 8009a52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009a56:	6018      	str	r0, [r3, #0]
 8009a58:	3304      	adds	r3, #4
 8009a5a:	7019      	strb	r1, [r3, #0]
	connectPacket.Level = 0x04;
 8009a5c:	2304      	movs	r3, #4
 8009a5e:	753b      	strb	r3, [r7, #20]
	connectPacket.Flag = 0x02;
 8009a60:	2302      	movs	r3, #2
 8009a62:	757b      	strb	r3, [r7, #21]
	connectPacket.KeepAlive = 60;
 8009a64:	233c      	movs	r3, #60	; 0x3c
 8009a66:	82fb      	strh	r3, [r7, #22]
	connectPacket.ClientIDLength = ClientIDLength;
 8009a68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009a6c:	833b      	strh	r3, [r7, #24]
	strcpy(connectPacket.ClientID,clientID);
 8009a6e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009a72:	f107 030c 	add.w	r3, r7, #12
 8009a76:	330e      	adds	r3, #14
 8009a78:	4611      	mov	r1, r2
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f018 fdb1 	bl	80225e2 <strcpy>

	int32_t status = mqtt_encode_packet(outputStream, &connectPacket, CONNECT_PACKET);
 8009a80:	f107 010c 	add.w	r1, r7, #12
 8009a84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009a88:	2200      	movs	r2, #0
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fa fc24 	bl	80042d8 <mqtt_encode_packet>
 8009a90:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

	LONGS_EQUAL(remainLength+2,status);												// check number of bytes that is written to buffer
 8009a94:	f00c fa8a 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8009a98:	4604      	mov	r4, r0
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	3338      	adds	r3, #56	; 0x38
 8009a9e:	681d      	ldr	r5, [r3, #0]
 8009aa0:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8009aa4:	1c9e      	adds	r6, r3, #2
 8009aa6:	f00c fa91 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	9302      	str	r3, [sp, #8]
 8009aae:	2341      	movs	r3, #65	; 0x41
 8009ab0:	9301      	str	r3, [sp, #4]
 8009ab2:	4b97      	ldr	r3, [pc, #604]	; (8009d10 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	4b97      	ldr	r3, [pc, #604]	; (8009d14 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x320>)
 8009ab8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009abc:	4631      	mov	r1, r6
 8009abe:	4620      	mov	r0, r4
 8009ac0:	47a8      	blx	r5
	STRCMP_EQUAL("Topuz",(const char*)&outputStream[status-ClientIDLength]);		// check clientID that is written to buffer
 8009ac2:	f00c fa73 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	6823      	ldr	r3, [r4, #0]
 8009aca:	3324      	adds	r3, #36	; 0x24
 8009acc:	681d      	ldr	r5, [r3, #0]
 8009ace:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009ad2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8009adc:	18d6      	adds	r6, r2, r3
 8009ade:	f00c fa75 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	9302      	str	r3, [sp, #8]
 8009ae6:	2342      	movs	r3, #66	; 0x42
 8009ae8:	9301      	str	r3, [sp, #4]
 8009aea:	4b89      	ldr	r3, [pc, #548]	; (8009d10 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	2300      	movs	r3, #0
 8009af0:	4632      	mov	r2, r6
 8009af2:	4985      	ldr	r1, [pc, #532]	; (8009d08 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x314>)
 8009af4:	4620      	mov	r0, r4
 8009af6:	47a8      	blx	r5
	LONGS_EQUAL(0x10,outputStream[0]);												// check connectByte
 8009af8:	f00c fa58 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8009afc:	4604      	mov	r4, r0
 8009afe:	6823      	ldr	r3, [r4, #0]
 8009b00:	3338      	adds	r3, #56	; 0x38
 8009b02:	681d      	ldr	r5, [r3, #0]
 8009b04:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8009b08:	461e      	mov	r6, r3
 8009b0a:	f00c fa5f 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	9302      	str	r3, [sp, #8]
 8009b12:	2343      	movs	r3, #67	; 0x43
 8009b14:	9301      	str	r3, [sp, #4]
 8009b16:	4b7e      	ldr	r3, [pc, #504]	; (8009d10 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009b18:	9300      	str	r3, [sp, #0]
 8009b1a:	4b7f      	ldr	r3, [pc, #508]	; (8009d18 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x324>)
 8009b1c:	4632      	mov	r2, r6
 8009b1e:	2110      	movs	r1, #16
 8009b20:	4620      	mov	r0, r4
 8009b22:	47a8      	blx	r5
	LONGS_EQUAL(remainLength,outputStream[1]);										// check remainlength
 8009b24:	f00c fa42 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8009b28:	4604      	mov	r4, r0
 8009b2a:	6823      	ldr	r3, [r4, #0]
 8009b2c:	3338      	adds	r3, #56	; 0x38
 8009b2e:	681d      	ldr	r5, [r3, #0]
 8009b30:	f897 60bd 	ldrb.w	r6, [r7, #189]	; 0xbd
 8009b34:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009b38:	4698      	mov	r8, r3
 8009b3a:	f00c fa47 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	9302      	str	r3, [sp, #8]
 8009b42:	2344      	movs	r3, #68	; 0x44
 8009b44:	9301      	str	r3, [sp, #4]
 8009b46:	4b72      	ldr	r3, [pc, #456]	; (8009d10 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	4b74      	ldr	r3, [pc, #464]	; (8009d1c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x328>)
 8009b4c:	4642      	mov	r2, r8
 8009b4e:	4631      	mov	r1, r6
 8009b50:	4620      	mov	r0, r4
 8009b52:	47a8      	blx	r5
	LONGS_EQUAL(0x0004,(uint16_t)((outputStream[2] << 8) + outputStream[3]));		// check protocol name length
 8009b54:	f00c fa2a 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8009b58:	4604      	mov	r4, r0
 8009b5a:	6823      	ldr	r3, [r4, #0]
 8009b5c:	3338      	adds	r3, #56	; 0x38
 8009b5e:	681d      	ldr	r5, [r3, #0]
 8009b60:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	021b      	lsls	r3, r3, #8
 8009b68:	b29a      	uxth	r2, r3
 8009b6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	4413      	add	r3, r2
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	461e      	mov	r6, r3
 8009b76:	f00c fa29 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	9302      	str	r3, [sp, #8]
 8009b7e:	2345      	movs	r3, #69	; 0x45
 8009b80:	9301      	str	r3, [sp, #4]
 8009b82:	4b63      	ldr	r3, [pc, #396]	; (8009d10 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	4b66      	ldr	r3, [pc, #408]	; (8009d20 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x32c>)
 8009b88:	4632      	mov	r2, r6
 8009b8a:	2104      	movs	r1, #4
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	47a8      	blx	r5
	LONGS_EQUAL('M',outputStream[4]); 												// check protocol name
 8009b90:	f00c fa0c 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8009b94:	4604      	mov	r4, r0
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	3338      	adds	r3, #56	; 0x38
 8009b9a:	681d      	ldr	r5, [r3, #0]
 8009b9c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8009ba0:	461e      	mov	r6, r3
 8009ba2:	f00c fa13 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	9302      	str	r3, [sp, #8]
 8009baa:	2346      	movs	r3, #70	; 0x46
 8009bac:	9301      	str	r3, [sp, #4]
 8009bae:	4b58      	ldr	r3, [pc, #352]	; (8009d10 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	4b5c      	ldr	r3, [pc, #368]	; (8009d24 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x330>)
 8009bb4:	4632      	mov	r2, r6
 8009bb6:	214d      	movs	r1, #77	; 0x4d
 8009bb8:	4620      	mov	r0, r4
 8009bba:	47a8      	blx	r5
	LONGS_EQUAL('Q',outputStream[5]);
 8009bbc:	f00c f9f6 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	6823      	ldr	r3, [r4, #0]
 8009bc4:	3338      	adds	r3, #56	; 0x38
 8009bc6:	681d      	ldr	r5, [r3, #0]
 8009bc8:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8009bcc:	461e      	mov	r6, r3
 8009bce:	f00c f9fd 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	9302      	str	r3, [sp, #8]
 8009bd6:	2347      	movs	r3, #71	; 0x47
 8009bd8:	9301      	str	r3, [sp, #4]
 8009bda:	4b4d      	ldr	r3, [pc, #308]	; (8009d10 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	4b52      	ldr	r3, [pc, #328]	; (8009d28 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x334>)
 8009be0:	4632      	mov	r2, r6
 8009be2:	2151      	movs	r1, #81	; 0x51
 8009be4:	4620      	mov	r0, r4
 8009be6:	47a8      	blx	r5
	LONGS_EQUAL('T',outputStream[6]);
 8009be8:	f00c f9e0 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8009bec:	4604      	mov	r4, r0
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	3338      	adds	r3, #56	; 0x38
 8009bf2:	681d      	ldr	r5, [r3, #0]
 8009bf4:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8009bf8:	461e      	mov	r6, r3
 8009bfa:	f00c f9e7 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	9302      	str	r3, [sp, #8]
 8009c02:	2348      	movs	r3, #72	; 0x48
 8009c04:	9301      	str	r3, [sp, #4]
 8009c06:	4b42      	ldr	r3, [pc, #264]	; (8009d10 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	4b48      	ldr	r3, [pc, #288]	; (8009d2c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x338>)
 8009c0c:	4632      	mov	r2, r6
 8009c0e:	2154      	movs	r1, #84	; 0x54
 8009c10:	4620      	mov	r0, r4
 8009c12:	47a8      	blx	r5
	LONGS_EQUAL('T',outputStream[7]);
 8009c14:	f00c f9ca 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8009c18:	4604      	mov	r4, r0
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	3338      	adds	r3, #56	; 0x38
 8009c1e:	681d      	ldr	r5, [r3, #0]
 8009c20:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009c24:	461e      	mov	r6, r3
 8009c26:	f00c f9d1 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	9302      	str	r3, [sp, #8]
 8009c2e:	2349      	movs	r3, #73	; 0x49
 8009c30:	9301      	str	r3, [sp, #4]
 8009c32:	4b37      	ldr	r3, [pc, #220]	; (8009d10 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	4b3e      	ldr	r3, [pc, #248]	; (8009d30 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x33c>)
 8009c38:	4632      	mov	r2, r6
 8009c3a:	2154      	movs	r1, #84	; 0x54
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	47a8      	blx	r5
	LONGS_EQUAL(0x04,outputStream[8]);													// check level byte
 8009c40:	f00c f9b4 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8009c44:	4604      	mov	r4, r0
 8009c46:	6823      	ldr	r3, [r4, #0]
 8009c48:	3338      	adds	r3, #56	; 0x38
 8009c4a:	681d      	ldr	r5, [r3, #0]
 8009c4c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8009c50:	461e      	mov	r6, r3
 8009c52:	f00c f9bb 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009c56:	4603      	mov	r3, r0
 8009c58:	9302      	str	r3, [sp, #8]
 8009c5a:	234a      	movs	r3, #74	; 0x4a
 8009c5c:	9301      	str	r3, [sp, #4]
 8009c5e:	4b2c      	ldr	r3, [pc, #176]	; (8009d10 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	4b34      	ldr	r3, [pc, #208]	; (8009d34 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x340>)
 8009c64:	4632      	mov	r2, r6
 8009c66:	2104      	movs	r1, #4
 8009c68:	4620      	mov	r0, r4
 8009c6a:	47a8      	blx	r5
	LONGS_EQUAL(0x02,outputStream[9]);													// check flag byte
 8009c6c:	f00c f99e 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8009c70:	4604      	mov	r4, r0
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	3338      	adds	r3, #56	; 0x38
 8009c76:	681d      	ldr	r5, [r3, #0]
 8009c78:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8009c7c:	461e      	mov	r6, r3
 8009c7e:	f00c f9a5 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009c82:	4603      	mov	r3, r0
 8009c84:	9302      	str	r3, [sp, #8]
 8009c86:	234b      	movs	r3, #75	; 0x4b
 8009c88:	9301      	str	r3, [sp, #4]
 8009c8a:	4b21      	ldr	r3, [pc, #132]	; (8009d10 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	4b2a      	ldr	r3, [pc, #168]	; (8009d38 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x344>)
 8009c90:	4632      	mov	r2, r6
 8009c92:	2102      	movs	r1, #2
 8009c94:	4620      	mov	r0, r4
 8009c96:	47a8      	blx	r5
	LONGS_EQUAL((uint16_t)60,(uint16_t)((outputStream[10] << 8) + outputStream[11]));	// check keep alive bytes
 8009c98:	f00c f988 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	6823      	ldr	r3, [r4, #0]
 8009ca0:	3338      	adds	r3, #56	; 0x38
 8009ca2:	681d      	ldr	r5, [r3, #0]
 8009ca4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	021b      	lsls	r3, r3, #8
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	4413      	add	r3, r2
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	461e      	mov	r6, r3
 8009cba:	f00c f987 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	9302      	str	r3, [sp, #8]
 8009cc2:	234c      	movs	r3, #76	; 0x4c
 8009cc4:	9301      	str	r3, [sp, #4]
 8009cc6:	4b12      	ldr	r3, [pc, #72]	; (8009d10 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	4b1c      	ldr	r3, [pc, #112]	; (8009d3c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x348>)
 8009ccc:	4632      	mov	r2, r6
 8009cce:	213c      	movs	r1, #60	; 0x3c
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	47a8      	blx	r5
	LONGS_EQUAL(ClientIDLength,(uint16_t)((outputStream[12] << 8) + outputStream[13]));	// check client id length bytes
 8009cd4:	f00c f96a 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8009cd8:	4604      	mov	r4, r0
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	3338      	adds	r3, #56	; 0x38
 8009cde:	681d      	ldr	r5, [r3, #0]
 8009ce0:	f8b7 60be 	ldrh.w	r6, [r7, #190]	; 0xbe
 8009ce4:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	021b      	lsls	r3, r3, #8
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	4413      	add	r3, r2
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	4698      	mov	r8, r3
 8009cfa:	f00c f967 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	9302      	str	r3, [sp, #8]
 8009d02:	234d      	movs	r3, #77	; 0x4d
 8009d04:	e01c      	b.n	8009d40 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x34c>
 8009d06:	bf00      	nop
 8009d08:	08025d10 	.word	0x08025d10
 8009d0c:	08025cdc 	.word	0x08025cdc
 8009d10:	08025cc0 	.word	0x08025cc0
 8009d14:	08025ce4 	.word	0x08025ce4
 8009d18:	08025d18 	.word	0x08025d18
 8009d1c:	08025d44 	.word	0x08025d44
 8009d20:	08025d78 	.word	0x08025d78
 8009d24:	08025dcc 	.word	0x08025dcc
 8009d28:	08025df8 	.word	0x08025df8
 8009d2c:	08025e24 	.word	0x08025e24
 8009d30:	08025e50 	.word	0x08025e50
 8009d34:	08025e7c 	.word	0x08025e7c
 8009d38:	08025ea8 	.word	0x08025ea8
 8009d3c:	08025ed4 	.word	0x08025ed4
 8009d40:	9301      	str	r3, [sp, #4]
 8009d42:	4b06      	ldr	r3, [pc, #24]	; (8009d5c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x368>)
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	4b06      	ldr	r3, [pc, #24]	; (8009d60 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x36c>)
 8009d48:	4642      	mov	r2, r8
 8009d4a:	4631      	mov	r1, r6
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	47a8      	blx	r5

}
 8009d50:	bf00      	nop
 8009d52:	37c0      	adds	r7, #192	; 0xc0
 8009d54:	46bd      	mov	sp, r7
 8009d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d5a:	bf00      	nop
 8009d5c:	08025cc0 	.word	0x08025cc0
 8009d60:	08025f30 	.word	0x08025f30

08009d64 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestC1Ev>:


TEST(MqttTestGroup, SubscribePacketTest)
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7ff fdd4 	bl	800991c <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>
 8009d74:	4a03      	ldr	r2, [pc, #12]	; (8009d84 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestC1Ev+0x20>)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	601a      	str	r2, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	0802a504 	.word	0x0802a504

08009d88 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShell10createTestEv>:
 8009d88:	b590      	push	{r4, r7, lr}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	2252      	movs	r2, #82	; 0x52
 8009d92:	4906      	ldr	r1, [pc, #24]	; (8009dac <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShell10createTestEv+0x24>)
 8009d94:	2004      	movs	r0, #4
 8009d96:	f002 f963 	bl	800c060 <_ZnwjPKci>
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f7ff ffe1 	bl	8009d64 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestC1Ev>
 8009da2:	4623      	mov	r3, r4
 8009da4:	4618      	mov	r0, r3
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd90      	pop	{r4, r7, pc}
 8009dac:	08025cc0 	.word	0x08025cc0

08009db0 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellC1Ev>:
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f00a fd3e 	bl	801483c <_ZN10UtestShellC1Ev>
 8009dc0:	4a03      	ldr	r2, [pc, #12]	; (8009dd0 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellC1Ev+0x20>)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3708      	adds	r7, #8
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	0802a458 	.word	0x0802a458

08009dd4 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv>:
{
 8009dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd8:	b0b6      	sub	sp, #216	; 0xd8
 8009dda:	af04      	add	r7, sp, #16
 8009ddc:	6078      	str	r0, [r7, #4]
	char topicName[] = "Testtopic";
 8009dde:	4a8c      	ldr	r2, [pc, #560]	; (800a010 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x23c>)
 8009de0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009de4:	ca07      	ldmia	r2, {r0, r1, r2}
 8009de6:	c303      	stmia	r3!, {r0, r1}
 8009de8:	801a      	strh	r2, [r3, #0]
	uint16_t topicLength = strlen(topicName);
 8009dea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7f6 fa24 	bl	800023c <strlen>
 8009df4:	4603      	mov	r3, r0
 8009df6:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
	uint8_t remainLength = (uint8_t)topicLength + 5;
 8009dfa:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	3305      	adds	r3, #5
 8009e02:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

	uint8_t outputBuffer[100] = {0};
 8009e06:	2300      	movs	r3, #0
 8009e08:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009e0e:	2260      	movs	r2, #96	; 0x60
 8009e10:	2100      	movs	r1, #0
 8009e12:	4618      	mov	r0, r3
 8009e14:	f018 f9cc 	bl	80221b0 <memset>

	MQTT_Subscribe_Packet subscribePacket;

	subscribePacket.subscribePacketByte = 0x82;
 8009e18:	2382      	movs	r3, #130	; 0x82
 8009e1a:	733b      	strb	r3, [r7, #12]
	subscribePacket.remainLength = remainLength;
 8009e1c:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8009e20:	737b      	strb	r3, [r7, #13]
	subscribePacket.packetID = 1;
 8009e22:	2301      	movs	r3, #1
 8009e24:	81fb      	strh	r3, [r7, #14]
	subscribePacket.topicLength = topicLength;
 8009e26:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8009e2a:	823b      	strh	r3, [r7, #16]
	strcpy(subscribePacket.topic,topicName);
 8009e2c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8009e30:	f107 030c 	add.w	r3, r7, #12
 8009e34:	3306      	adds	r3, #6
 8009e36:	4611      	mov	r1, r2
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f018 fbd2 	bl	80225e2 <strcpy>
	subscribePacket.Qos = 0;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	int32_t numberOfBytes = mqtt_encode_packet(outputBuffer, &subscribePacket, SUBSCRIBE_PACKET);
 8009e44:	f107 010c 	add.w	r1, r7, #12
 8009e48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fa fa42 	bl	80042d8 <mqtt_encode_packet>
 8009e54:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

	LONGS_EQUAL(remainLength+2,numberOfBytes);
 8009e58:	f00c f8a8 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	3338      	adds	r3, #56	; 0x38
 8009e62:	681d      	ldr	r5, [r3, #0]
 8009e64:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8009e68:	1c9e      	adds	r6, r3, #2
 8009e6a:	f00c f8af 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	9302      	str	r3, [sp, #8]
 8009e72:	2365      	movs	r3, #101	; 0x65
 8009e74:	9301      	str	r3, [sp, #4]
 8009e76:	4b67      	ldr	r3, [pc, #412]	; (800a014 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 8009e78:	9300      	str	r3, [sp, #0]
 8009e7a:	4b67      	ldr	r3, [pc, #412]	; (800a018 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x244>)
 8009e7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009e80:	4631      	mov	r1, r6
 8009e82:	4620      	mov	r0, r4
 8009e84:	47a8      	blx	r5
	LONGS_EQUAL(0x82,outputBuffer[0]);
 8009e86:	f00c f891 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	3338      	adds	r3, #56	; 0x38
 8009e90:	681d      	ldr	r5, [r3, #0]
 8009e92:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8009e96:	461e      	mov	r6, r3
 8009e98:	f00c f898 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	9302      	str	r3, [sp, #8]
 8009ea0:	2366      	movs	r3, #102	; 0x66
 8009ea2:	9301      	str	r3, [sp, #4]
 8009ea4:	4b5b      	ldr	r3, [pc, #364]	; (800a014 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	4b5c      	ldr	r3, [pc, #368]	; (800a01c <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x248>)
 8009eaa:	4632      	mov	r2, r6
 8009eac:	2182      	movs	r1, #130	; 0x82
 8009eae:	4620      	mov	r0, r4
 8009eb0:	47a8      	blx	r5
	LONGS_EQUAL(remainLength,outputBuffer[1]);
 8009eb2:	f00c f87b 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	6823      	ldr	r3, [r4, #0]
 8009eba:	3338      	adds	r3, #56	; 0x38
 8009ebc:	681d      	ldr	r5, [r3, #0]
 8009ebe:	f897 60bf 	ldrb.w	r6, [r7, #191]	; 0xbf
 8009ec2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8009ec6:	4698      	mov	r8, r3
 8009ec8:	f00c f880 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	9302      	str	r3, [sp, #8]
 8009ed0:	2367      	movs	r3, #103	; 0x67
 8009ed2:	9301      	str	r3, [sp, #4]
 8009ed4:	4b4f      	ldr	r3, [pc, #316]	; (800a014 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	4b51      	ldr	r3, [pc, #324]	; (800a020 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x24c>)
 8009eda:	4642      	mov	r2, r8
 8009edc:	4631      	mov	r1, r6
 8009ede:	4620      	mov	r0, r4
 8009ee0:	47a8      	blx	r5
	LONGS_EQUAL(0x0001,(uint16_t)((outputBuffer[2] << 8) + outputBuffer[3]));
 8009ee2:	f00c f863 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8009ee6:	4604      	mov	r4, r0
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	3338      	adds	r3, #56	; 0x38
 8009eec:	681d      	ldr	r5, [r3, #0]
 8009eee:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	021b      	lsls	r3, r3, #8
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	4413      	add	r3, r2
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	461e      	mov	r6, r3
 8009f04:	f00c f862 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	9302      	str	r3, [sp, #8]
 8009f0c:	2368      	movs	r3, #104	; 0x68
 8009f0e:	9301      	str	r3, [sp, #4]
 8009f10:	4b40      	ldr	r3, [pc, #256]	; (800a014 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	4b43      	ldr	r3, [pc, #268]	; (800a024 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x250>)
 8009f16:	4632      	mov	r2, r6
 8009f18:	2101      	movs	r1, #1
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	47a8      	blx	r5
	LONGS_EQUAL(topicLength,(uint16_t)((outputBuffer[4] << 8) + outputBuffer[5]));
 8009f1e:	f00c f845 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8009f22:	4604      	mov	r4, r0
 8009f24:	6823      	ldr	r3, [r4, #0]
 8009f26:	3338      	adds	r3, #56	; 0x38
 8009f28:	681d      	ldr	r5, [r3, #0]
 8009f2a:	f8b7 60c0 	ldrh.w	r6, [r7, #192]	; 0xc0
 8009f2e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	021b      	lsls	r3, r3, #8
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	4413      	add	r3, r2
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	4698      	mov	r8, r3
 8009f44:	f00c f842 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	9302      	str	r3, [sp, #8]
 8009f4c:	2369      	movs	r3, #105	; 0x69
 8009f4e:	9301      	str	r3, [sp, #4]
 8009f50:	4b30      	ldr	r3, [pc, #192]	; (800a014 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	4b34      	ldr	r3, [pc, #208]	; (800a028 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x254>)
 8009f56:	4642      	mov	r2, r8
 8009f58:	4631      	mov	r1, r6
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	47a8      	blx	r5

	int32_t index = 6;
 8009f5e:	2306      	movs	r3, #6
 8009f60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	for(int16_t i=0;i<topicLength;i++)
 8009f64:	2300      	movs	r3, #0
 8009f66:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8009f6a:	f9b7 20c2 	ldrsh.w	r2, [r7, #194]	; 0xc2
 8009f6e:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8009f72:	429a      	cmp	r2, r3
 8009f74:	da2d      	bge.n	8009fd2 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x1fe>
	{
		BYTES_EQUAL(topicName[i],outputBuffer[index++]);
 8009f76:	f00c f819 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	6823      	ldr	r3, [r4, #0]
 8009f7e:	3338      	adds	r3, #56	; 0x38
 8009f80:	681d      	ldr	r5, [r3, #0]
 8009f82:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8009f86:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8009f8a:	4413      	add	r3, r2
 8009f8c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8009f90:	461e      	mov	r6, r3
 8009f92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009f96:	1c5a      	adds	r2, r3, #1
 8009f98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009f9c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8009fa0:	4413      	add	r3, r2
 8009fa2:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8009fa6:	4698      	mov	r8, r3
 8009fa8:	f00c f810 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009fac:	4603      	mov	r3, r0
 8009fae:	9302      	str	r3, [sp, #8]
 8009fb0:	236f      	movs	r3, #111	; 0x6f
 8009fb2:	9301      	str	r3, [sp, #4]
 8009fb4:	4b17      	ldr	r3, [pc, #92]	; (800a014 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	4b1c      	ldr	r3, [pc, #112]	; (800a02c <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x258>)
 8009fba:	4642      	mov	r2, r8
 8009fbc:	4631      	mov	r1, r6
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	47a8      	blx	r5
	for(int16_t i=0;i<topicLength;i++)
 8009fc2:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	3301      	adds	r3, #1
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8009fd0:	e7cb      	b.n	8009f6a <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x196>
	}

	LONGS_EQUAL(0,outputBuffer[index]);
 8009fd2:	f00b ffeb 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	6823      	ldr	r3, [r4, #0]
 8009fda:	3338      	adds	r3, #56	; 0x38
 8009fdc:	681d      	ldr	r5, [r3, #0]
 8009fde:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009fe2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009fe6:	4413      	add	r3, r2
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	461e      	mov	r6, r3
 8009fec:	f00b ffee 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	9302      	str	r3, [sp, #8]
 8009ff4:	2372      	movs	r3, #114	; 0x72
 8009ff6:	9301      	str	r3, [sp, #4]
 8009ff8:	4b06      	ldr	r3, [pc, #24]	; (800a014 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	4b0c      	ldr	r3, [pc, #48]	; (800a030 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x25c>)
 8009ffe:	4632      	mov	r2, r6
 800a000:	2100      	movs	r1, #0
 800a002:	4620      	mov	r0, r4
 800a004:	47a8      	blx	r5


}
 800a006:	bf00      	nop
 800a008:	37c8      	adds	r7, #200	; 0xc8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a010:	08026144 	.word	0x08026144
 800a014:	08025cc0 	.word	0x08025cc0
 800a018:	08025f8c 	.word	0x08025f8c
 800a01c:	08025fc0 	.word	0x08025fc0
 800a020:	08025fec 	.word	0x08025fec
 800a024:	08026020 	.word	0x08026020
 800a028:	08026074 	.word	0x08026074
 800a02c:	080260cc 	.word	0x080260cc
 800a030:	08026118 	.word	0x08026118

0800a034 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestC1Ev>:

TEST(MqttTestGroup, PublishPacketTest)
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	4618      	mov	r0, r3
 800a040:	f7ff fc6c 	bl	800991c <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>
 800a044:	4a03      	ldr	r2, [pc, #12]	; (800a054 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestC1Ev+0x20>)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	601a      	str	r2, [r3, #0]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4618      	mov	r0, r3
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	0802a438 	.word	0x0802a438

0800a058 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShell10createTestEv>:
 800a058:	b590      	push	{r4, r7, lr}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	2277      	movs	r2, #119	; 0x77
 800a062:	4906      	ldr	r1, [pc, #24]	; (800a07c <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShell10createTestEv+0x24>)
 800a064:	2004      	movs	r0, #4
 800a066:	f001 fffb 	bl	800c060 <_ZnwjPKci>
 800a06a:	4604      	mov	r4, r0
 800a06c:	4620      	mov	r0, r4
 800a06e:	f7ff ffe1 	bl	800a034 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestC1Ev>
 800a072:	4623      	mov	r3, r4
 800a074:	4618      	mov	r0, r3
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd90      	pop	{r4, r7, pc}
 800a07c:	08025cc0 	.word	0x08025cc0

0800a080 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellC1Ev>:
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4618      	mov	r0, r3
 800a08c:	f00a fbd6 	bl	801483c <_ZN10UtestShellC1Ev>
 800a090:	4a03      	ldr	r2, [pc, #12]	; (800a0a0 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellC1Ev+0x20>)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	601a      	str	r2, [r3, #0]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4618      	mov	r0, r3
 800a09a:	3708      	adds	r7, #8
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	0802a38c 	.word	0x0802a38c

0800a0a4 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv>:
{
 800a0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a8:	b0d2      	sub	sp, #328	; 0x148
 800a0aa:	af04      	add	r7, sp, #16
 800a0ac:	1d3b      	adds	r3, r7, #4
 800a0ae:	6018      	str	r0, [r3, #0]
	char topicName[] = "Testtopic";
 800a0b0:	4a9f      	ldr	r2, [pc, #636]	; (800a330 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x28c>)
 800a0b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a0b6:	ca07      	ldmia	r2, {r0, r1, r2}
 800a0b8:	c303      	stmia	r3!, {r0, r1}
 800a0ba:	801a      	strh	r2, [r3, #0]
	char message[] = "hello world!";
 800a0bc:	4b9d      	ldr	r3, [pc, #628]	; (800a334 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x290>)
 800a0be:	f507 7484 	add.w	r4, r7, #264	; 0x108
 800a0c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a0c4:	c407      	stmia	r4!, {r0, r1, r2}
 800a0c6:	7023      	strb	r3, [r4, #0]

	uint16_t topicLength = strlen(topicName);
 800a0c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7f6 f8b5 	bl	800023c <strlen>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
	uint16_t messageLength = strlen(message);
 800a0d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7f6 f8ad 	bl	800023c <strlen>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
	uint8_t remainLength = (uint8_t)topicLength+ (uint8_t)messageLength + 2;
 800a0e8:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	4413      	add	r3, r2
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	3302      	adds	r3, #2
 800a0fa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b

	uint8_t outputBuffer[100] = {0};
 800a0fe:	2300      	movs	r3, #0
 800a100:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a104:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800a108:	2260      	movs	r2, #96	; 0x60
 800a10a:	2100      	movs	r1, #0
 800a10c:	4618      	mov	r0, r3
 800a10e:	f018 f84f 	bl	80221b0 <memset>

	MQTT_Publish_Packet publishPacket = {0};
 800a112:	f107 0308 	add.w	r3, r7, #8
 800a116:	4618      	mov	r0, r3
 800a118:	239a      	movs	r3, #154	; 0x9a
 800a11a:	461a      	mov	r2, r3
 800a11c:	2100      	movs	r1, #0
 800a11e:	f018 f847 	bl	80221b0 <memset>

	publishPacket.publishPacketByte = 0x30;
 800a122:	f107 0308 	add.w	r3, r7, #8
 800a126:	2230      	movs	r2, #48	; 0x30
 800a128:	701a      	strb	r2, [r3, #0]
	publishPacket.remainLength = remainLength;
 800a12a:	f107 0308 	add.w	r3, r7, #8
 800a12e:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800a132:	705a      	strb	r2, [r3, #1]
	publishPacket.topicLength = topicLength;
 800a134:	f107 0308 	add.w	r3, r7, #8
 800a138:	f8b7 212e 	ldrh.w	r2, [r7, #302]	; 0x12e
 800a13c:	805a      	strh	r2, [r3, #2]
	strcpy(publishPacket.topic,topicName);
 800a13e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800a142:	f107 0308 	add.w	r3, r7, #8
 800a146:	3304      	adds	r3, #4
 800a148:	4611      	mov	r1, r2
 800a14a:	4618      	mov	r0, r3
 800a14c:	f018 fa49 	bl	80225e2 <strcpy>
	strcpy(publishPacket.message,message);
 800a150:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800a154:	f107 0308 	add.w	r3, r7, #8
 800a158:	3336      	adds	r3, #54	; 0x36
 800a15a:	4611      	mov	r1, r2
 800a15c:	4618      	mov	r0, r3
 800a15e:	f018 fa40 	bl	80225e2 <strcpy>

	int32_t numberOfBytes = mqtt_encode_packet(outputBuffer, &publishPacket, PUBLISH_PACKET);
 800a162:	f107 0108 	add.w	r1, r7, #8
 800a166:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a16a:	2202      	movs	r2, #2
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fa f8b3 	bl	80042d8 <mqtt_encode_packet>
 800a172:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124

	LONGS_EQUAL(remainLength+2,numberOfBytes);
 800a176:	f00b ff19 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 800a17a:	4604      	mov	r4, r0
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	3338      	adds	r3, #56	; 0x38
 800a180:	681d      	ldr	r5, [r3, #0]
 800a182:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a186:	1c9e      	adds	r6, r3, #2
 800a188:	f00b ff20 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a18c:	4603      	mov	r3, r0
 800a18e:	9302      	str	r3, [sp, #8]
 800a190:	238c      	movs	r3, #140	; 0x8c
 800a192:	9301      	str	r3, [sp, #4]
 800a194:	4b68      	ldr	r3, [pc, #416]	; (800a338 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	4b68      	ldr	r3, [pc, #416]	; (800a33c <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x298>)
 800a19a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800a19e:	4631      	mov	r1, r6
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	47a8      	blx	r5
	LONGS_EQUAL(0x30,outputBuffer[0]);
 800a1a4:	f00b ff02 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	3338      	adds	r3, #56	; 0x38
 800a1ae:	681d      	ldr	r5, [r3, #0]
 800a1b0:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 800a1b4:	461e      	mov	r6, r3
 800a1b6:	f00b ff09 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	9302      	str	r3, [sp, #8]
 800a1be:	238d      	movs	r3, #141	; 0x8d
 800a1c0:	9301      	str	r3, [sp, #4]
 800a1c2:	4b5d      	ldr	r3, [pc, #372]	; (800a338 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	4b5e      	ldr	r3, [pc, #376]	; (800a340 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x29c>)
 800a1c8:	4632      	mov	r2, r6
 800a1ca:	2130      	movs	r1, #48	; 0x30
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	47a8      	blx	r5
	LONGS_EQUAL(remainLength,outputBuffer[1]);
 800a1d0:	f00b feec 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	3338      	adds	r3, #56	; 0x38
 800a1da:	681d      	ldr	r5, [r3, #0]
 800a1dc:	f897 612b 	ldrb.w	r6, [r7, #299]	; 0x12b
 800a1e0:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 800a1e4:	4698      	mov	r8, r3
 800a1e6:	f00b fef1 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	9302      	str	r3, [sp, #8]
 800a1ee:	238e      	movs	r3, #142	; 0x8e
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	4b51      	ldr	r3, [pc, #324]	; (800a338 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	4b53      	ldr	r3, [pc, #332]	; (800a344 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x2a0>)
 800a1f8:	4642      	mov	r2, r8
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	47a8      	blx	r5
	LONGS_EQUAL(topicLength,(uint16_t)((outputBuffer[2] << 8) + outputBuffer[3]));
 800a200:	f00b fed4 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 800a204:	4604      	mov	r4, r0
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	3338      	adds	r3, #56	; 0x38
 800a20a:	681d      	ldr	r5, [r3, #0]
 800a20c:	f8b7 612e 	ldrh.w	r6, [r7, #302]	; 0x12e
 800a210:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 800a214:	b29b      	uxth	r3, r3
 800a216:	021b      	lsls	r3, r3, #8
 800a218:	b29a      	uxth	r2, r3
 800a21a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a21e:	b29b      	uxth	r3, r3
 800a220:	4413      	add	r3, r2
 800a222:	b29b      	uxth	r3, r3
 800a224:	4698      	mov	r8, r3
 800a226:	f00b fed1 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a22a:	4603      	mov	r3, r0
 800a22c:	9302      	str	r3, [sp, #8]
 800a22e:	238f      	movs	r3, #143	; 0x8f
 800a230:	9301      	str	r3, [sp, #4]
 800a232:	4b41      	ldr	r3, [pc, #260]	; (800a338 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	4b44      	ldr	r3, [pc, #272]	; (800a348 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x2a4>)
 800a238:	4642      	mov	r2, r8
 800a23a:	4631      	mov	r1, r6
 800a23c:	4620      	mov	r0, r4
 800a23e:	47a8      	blx	r5

	int32_t index = 4;
 800a240:	2304      	movs	r3, #4
 800a242:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

	for(int16_t i=0;i<topicLength;i++)
 800a246:	2300      	movs	r3, #0
 800a248:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
 800a24c:	f9b7 2132 	ldrsh.w	r2, [r7, #306]	; 0x132
 800a250:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800a254:	429a      	cmp	r2, r3
 800a256:	da2d      	bge.n	800a2b4 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x210>
	{
		BYTES_EQUAL(topicName[i],outputBuffer[index++]);
 800a258:	f00b fea8 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 800a25c:	4604      	mov	r4, r0
 800a25e:	6823      	ldr	r3, [r4, #0]
 800a260:	3338      	adds	r3, #56	; 0x38
 800a262:	681d      	ldr	r5, [r3, #0]
 800a264:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 800a268:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a26c:	4413      	add	r3, r2
 800a26e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a272:	461e      	mov	r6, r3
 800a274:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a278:	1c5a      	adds	r2, r3, #1
 800a27a:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800a27e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a282:	4413      	add	r3, r2
 800a284:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 800a288:	4698      	mov	r8, r3
 800a28a:	f00b fe9f 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a28e:	4603      	mov	r3, r0
 800a290:	9302      	str	r3, [sp, #8]
 800a292:	2395      	movs	r3, #149	; 0x95
 800a294:	9301      	str	r3, [sp, #4]
 800a296:	4b28      	ldr	r3, [pc, #160]	; (800a338 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	4b2c      	ldr	r3, [pc, #176]	; (800a34c <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x2a8>)
 800a29c:	4642      	mov	r2, r8
 800a29e:	4631      	mov	r1, r6
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	47a8      	blx	r5
	for(int16_t i=0;i<topicLength;i++)
 800a2a4:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
 800a2b2:	e7cb      	b.n	800a24c <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x1a8>
	}

	for(int16_t i=0;i<messageLength;i++)
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
 800a2ba:	f9b7 2130 	ldrsh.w	r2, [r7, #304]	; 0x130
 800a2be:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	da2d      	bge.n	800a322 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x27e>
	{
		BYTES_EQUAL(message[i],outputBuffer[index++]);
 800a2c6:	f00b fe71 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	6823      	ldr	r3, [r4, #0]
 800a2ce:	3338      	adds	r3, #56	; 0x38
 800a2d0:	681d      	ldr	r5, [r3, #0]
 800a2d2:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 800a2d6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a2da:	4413      	add	r3, r2
 800a2dc:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800a2e0:	461e      	mov	r6, r3
 800a2e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a2e6:	1c5a      	adds	r2, r3, #1
 800a2e8:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800a2ec:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a2f0:	4413      	add	r3, r2
 800a2f2:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 800a2f6:	4698      	mov	r8, r3
 800a2f8:	f00b fe68 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	9302      	str	r3, [sp, #8]
 800a300:	239a      	movs	r3, #154	; 0x9a
 800a302:	9301      	str	r3, [sp, #4]
 800a304:	4b0c      	ldr	r3, [pc, #48]	; (800a338 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	4b11      	ldr	r3, [pc, #68]	; (800a350 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x2ac>)
 800a30a:	4642      	mov	r2, r8
 800a30c:	4631      	mov	r1, r6
 800a30e:	4620      	mov	r0, r4
 800a310:	47a8      	blx	r5
	for(int16_t i=0;i<messageLength;i++)
 800a312:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 800a316:	b29b      	uxth	r3, r3
 800a318:	3301      	adds	r3, #1
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
 800a320:	e7cb      	b.n	800a2ba <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x216>
	}


}
 800a322:	bf00      	nop
 800a324:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800a328:	46bd      	mov	sp, r7
 800a32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a32e:	bf00      	nop
 800a330:	08026144 	.word	0x08026144
 800a334:	0802621c 	.word	0x0802621c
 800a338:	08025cc0 	.word	0x08025cc0
 800a33c:	08025f8c 	.word	0x08025f8c
 800a340:	08026150 	.word	0x08026150
 800a344:	08025fec 	.word	0x08025fec
 800a348:	0802617c 	.word	0x0802617c
 800a34c:	080260cc 	.word	0x080260cc
 800a350:	080261d4 	.word	0x080261d4

0800a354 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD1Ev>:
TEST(MqttTestGroup, PublishPacketTest)
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	4a05      	ldr	r2, [pc, #20]	; (800a374 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD1Ev+0x20>)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	601a      	str	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4618      	mov	r0, r3
 800a366:	f00a fabd 	bl	80148e4 <_ZN10UtestShellD1Ev>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4618      	mov	r0, r3
 800a36e:	3708      	adds	r7, #8
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	0802a38c 	.word	0x0802a38c

0800a378 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD0Ev>:
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f7ff ffe7 	bl	800a354 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD1Ev>
 800a386:	211c      	movs	r1, #28
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f001 fe7d 	bl	800c088 <_ZdlPvj>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4618      	mov	r0, r3
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestD1Ev>:
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	4a05      	ldr	r2, [pc, #20]	; (800a3b8 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestD1Ev+0x20>)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	601a      	str	r2, [r3, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7ff fac9 	bl	8009940 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	0802a438 	.word	0x0802a438

0800a3bc <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestD0Ev>:
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7ff ffe7 	bl	800a398 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestD1Ev>
 800a3ca:	2104      	movs	r1, #4
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f001 fe5b 	bl	800c088 <_ZdlPvj>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3708      	adds	r7, #8
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD1Ev>:
TEST(MqttTestGroup, SubscribePacketTest)
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	4a05      	ldr	r2, [pc, #20]	; (800a3fc <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD1Ev+0x20>)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	601a      	str	r2, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f00a fa79 	bl	80148e4 <_ZN10UtestShellD1Ev>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	0802a458 	.word	0x0802a458

0800a400 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD0Ev>:
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f7ff ffe7 	bl	800a3dc <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD1Ev>
 800a40e:	211c      	movs	r1, #28
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f001 fe39 	bl	800c088 <_ZdlPvj>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4618      	mov	r0, r3
 800a41a:	3708      	adds	r7, #8
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestD1Ev>:
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	4a05      	ldr	r2, [pc, #20]	; (800a440 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestD1Ev+0x20>)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	601a      	str	r2, [r3, #0]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4618      	mov	r0, r3
 800a432:	f7ff fa85 	bl	8009940 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4618      	mov	r0, r3
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	0802a504 	.word	0x0802a504

0800a444 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestD0Ev>:
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f7ff ffe7 	bl	800a420 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestD1Ev>
 800a452:	2104      	movs	r1, #4
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f001 fe17 	bl	800c088 <_ZdlPvj>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4618      	mov	r0, r3
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>:
TEST(MqttTestGroup, ConnectPacketTest)
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	4a05      	ldr	r2, [pc, #20]	; (800a484 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev+0x20>)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	601a      	str	r2, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4618      	mov	r0, r3
 800a476:	f00a fa35 	bl	80148e4 <_ZN10UtestShellD1Ev>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4618      	mov	r0, r3
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	0802a524 	.word	0x0802a524

0800a488 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD0Ev>:
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f7ff ffe7 	bl	800a464 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>
 800a496:	211c      	movs	r1, #28
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f001 fdf5 	bl	800c088 <_ZdlPvj>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev>:
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	4a05      	ldr	r2, [pc, #20]	; (800a4c8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev+0x20>)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	601a      	str	r2, [r3, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7ff fa41 	bl	8009940 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	0802a5d0 	.word	0x0802a5d0

0800a4cc <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD0Ev>:
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f7ff ffe7 	bl	800a4a8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev>
 800a4da:	2104      	movs	r1, #4
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f001 fdd3 	bl	800c088 <_ZdlPvj>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <_Z41__static_initialization_and_destruction_0ii>:
}
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af02      	add	r7, sp, #8
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d12b      	bne.n	800a554 <_Z41__static_initialization_and_destruction_0ii+0x68>
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a502:	4293      	cmp	r3, r2
 800a504:	d126      	bne.n	800a554 <_Z41__static_initialization_and_destruction_0ii+0x68>
TEST(MqttTestGroup, ConnectPacketTest)
 800a506:	4822      	ldr	r0, [pc, #136]	; (800a590 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800a508:	f7ff fa62 	bl	80099d0 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev>
 800a50c:	232a      	movs	r3, #42	; 0x2a
 800a50e:	9301      	str	r3, [sp, #4]
 800a510:	4b20      	ldr	r3, [pc, #128]	; (800a594 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	4b20      	ldr	r3, [pc, #128]	; (800a598 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800a516:	4a21      	ldr	r2, [pc, #132]	; (800a59c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800a518:	491d      	ldr	r1, [pc, #116]	; (800a590 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800a51a:	4821      	ldr	r0, [pc, #132]	; (800a5a0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800a51c:	f00b ffde 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(MqttTestGroup, SubscribePacketTest)
 800a520:	4820      	ldr	r0, [pc, #128]	; (800a5a4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800a522:	f7ff fc45 	bl	8009db0 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellC1Ev>
 800a526:	2352      	movs	r3, #82	; 0x52
 800a528:	9301      	str	r3, [sp, #4]
 800a52a:	4b1a      	ldr	r3, [pc, #104]	; (800a594 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800a52c:	9300      	str	r3, [sp, #0]
 800a52e:	4b1e      	ldr	r3, [pc, #120]	; (800a5a8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800a530:	4a1a      	ldr	r2, [pc, #104]	; (800a59c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800a532:	491c      	ldr	r1, [pc, #112]	; (800a5a4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800a534:	481d      	ldr	r0, [pc, #116]	; (800a5ac <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800a536:	f00b ffd1 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(MqttTestGroup, PublishPacketTest)
 800a53a:	481d      	ldr	r0, [pc, #116]	; (800a5b0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800a53c:	f7ff fda0 	bl	800a080 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellC1Ev>
 800a540:	2377      	movs	r3, #119	; 0x77
 800a542:	9301      	str	r3, [sp, #4]
 800a544:	4b13      	ldr	r3, [pc, #76]	; (800a594 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	4b1a      	ldr	r3, [pc, #104]	; (800a5b4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800a54a:	4a14      	ldr	r2, [pc, #80]	; (800a59c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800a54c:	4918      	ldr	r1, [pc, #96]	; (800a5b0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800a54e:	481a      	ldr	r0, [pc, #104]	; (800a5b8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800a550:	f00b ffc4 	bl	80164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d116      	bne.n	800a588 <_Z41__static_initialization_and_destruction_0ii+0x9c>
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a560:	4293      	cmp	r3, r2
 800a562:	d111      	bne.n	800a588 <_Z41__static_initialization_and_destruction_0ii+0x9c>
 800a564:	4814      	ldr	r0, [pc, #80]	; (800a5b8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800a566:	f00b ffe3 	bl	8016530 <_ZN13TestInstallerD1Ev>
 800a56a:	4811      	ldr	r0, [pc, #68]	; (800a5b0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800a56c:	f7ff fef2 	bl	800a354 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD1Ev>
TEST(MqttTestGroup, SubscribePacketTest)
 800a570:	480e      	ldr	r0, [pc, #56]	; (800a5ac <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800a572:	f00b ffdd 	bl	8016530 <_ZN13TestInstallerD1Ev>
 800a576:	480b      	ldr	r0, [pc, #44]	; (800a5a4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800a578:	f7ff ff30 	bl	800a3dc <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD1Ev>
TEST(MqttTestGroup, ConnectPacketTest)
 800a57c:	4808      	ldr	r0, [pc, #32]	; (800a5a0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800a57e:	f00b ffd7 	bl	8016530 <_ZN13TestInstallerD1Ev>
 800a582:	4803      	ldr	r0, [pc, #12]	; (800a590 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800a584:	f7ff ff6e 	bl	800a464 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>
}
 800a588:	bf00      	nop
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	200008cc 	.word	0x200008cc
 800a594:	08025cc0 	.word	0x08025cc0
 800a598:	0802622c 	.word	0x0802622c
 800a59c:	08026240 	.word	0x08026240
 800a5a0:	200008e8 	.word	0x200008e8
 800a5a4:	200008ec 	.word	0x200008ec
 800a5a8:	08026250 	.word	0x08026250
 800a5ac:	20000908 	.word	0x20000908
 800a5b0:	2000090c 	.word	0x2000090c
 800a5b4:	08026264 	.word	0x08026264
 800a5b8:	20000928 	.word	0x20000928

0800a5bc <_GLOBAL__sub_I_externTestGroupMqttTestGroup>:
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a5c4:	2001      	movs	r0, #1
 800a5c6:	f7ff ff91 	bl	800a4ec <_Z41__static_initialization_and_destruction_0ii>
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <_GLOBAL__sub_D_externTestGroupMqttTestGroup>:
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	f7ff ff89 	bl	800a4ec <_Z41__static_initialization_and_destruction_0ii>
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	68db      	ldr	r3, [r3, #12]
    }
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	69db      	ldr	r3, [r3, #28]
    }
 800a600:	4618      	mov	r0, r3
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	695b      	ldr	r3, [r3, #20]
    }
 800a618:	4618      	mov	r0, r3
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 800a624:	b590      	push	{r4, r7, lr}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f7ff ffed 	bl	800a60c <_ZNK10TestResult15getFailureCountEv>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d10a      	bne.n	800a64e <_ZNK10TestResult9isFailureEv+0x2a>
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f7ff ffcf 	bl	800a5dc <_ZNK10TestResult11getRunCountEv>
 800a63e:	4604      	mov	r4, r0
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f7ff ffd7 	bl	800a5f4 <_ZNK10TestResult15getIgnoredCountEv>
 800a646:	4603      	mov	r3, r0
 800a648:	4423      	add	r3, r4
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d101      	bne.n	800a652 <_ZNK10TestResult9isFailureEv+0x2e>
 800a64e:	2301      	movs	r3, #1
 800a650:	e000      	b.n	800a654 <_ZNK10TestResult9isFailureEv+0x30>
 800a652:	2300      	movs	r3, #0
    }
 800a654:	4618      	mov	r0, r3
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd90      	pop	{r4, r7, pc}

0800a65c <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
    {
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	4618      	mov	r0, r3
 800a668:	f007 fde6 	bl	8012238 <_ZN10TestOutputC1Ev>
 800a66c:	4a03      	ldr	r2, [pc, #12]	; (800a67c <_ZN17ConsoleTestOutputC1Ev+0x20>)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	601a      	str	r2, [r3, #0]
    }
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4618      	mov	r0, r3
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	0802ac84 	.word	0x0802ac84

0800a680 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
    {
 800a688:	4a05      	ldr	r2, [pc, #20]	; (800a6a0 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	601a      	str	r2, [r3, #0]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4618      	mov	r0, r3
 800a692:	f007 fdef 	bl	8012274 <_ZN10TestOutputD1Ev>
    }
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4618      	mov	r0, r3
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	0802ac84 	.word	0x0802ac84

0800a6a4 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
    }
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f7ff ffe7 	bl	800a680 <_ZN17ConsoleTestOutputD1Ev>
 800a6b2:	2110      	movs	r1, #16
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f001 fce7 	bl	800c088 <_ZdlPvj>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 800a6c4:	b5b0      	push	{r4, r5, r7, lr}
 800a6c6:	b098      	sub	sp, #96	; 0x60
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
    int result = 0;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 800a6d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7ff ffc0 	bl	800a65c <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 800a6dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a6e0:	4935      	ldr	r1, [pc, #212]	; (800a7b8 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f004 f87f 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800a6e8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800a6ec:	f107 0318 	add.w	r3, r7, #24
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f001 ff6a 	bl	800c5cc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 800a6f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f004 fc2a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 800a702:	f107 0318 	add.w	r3, r7, #24
 800a706:	2101      	movs	r1, #1
 800a708:	4618      	mov	r0, r3
 800a70a:	f001 ff2f 	bl	800c56c <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 800a70e:	f009 fb21 	bl	8013d54 <_ZN12TestRegistry18getCurrentRegistryEv>
 800a712:	4603      	mov	r3, r0
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	3234      	adds	r2, #52	; 0x34
 800a718:	6812      	ldr	r2, [r2, #0]
 800a71a:	f107 0118 	add.w	r1, r7, #24
 800a71e:	4618      	mov	r0, r3
 800a720:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 800a722:	f009 fb17 	bl	8013d54 <_ZN12TestRegistry18getCurrentRegistryEv>
 800a726:	4603      	mov	r3, r0
 800a728:	f107 0008 	add.w	r0, r7, #8
 800a72c:	683a      	ldr	r2, [r7, #0]
 800a72e:	6879      	ldr	r1, [r7, #4]
 800a730:	f000 f844 	bl	800a7bc <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 800a734:	f107 0308 	add.w	r3, r7, #8
 800a738:	4618      	mov	r0, r3
 800a73a:	f000 f899 	bl	800a870 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 800a73e:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 800a740:	f107 0308 	add.w	r3, r7, #8
 800a744:	4618      	mov	r0, r3
 800a746:	f000 f863 	bl	800a810 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 800a74a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10c      	bne.n	800a76a <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 800a750:	f107 0318 	add.w	r3, r7, #24
 800a754:	2100      	movs	r1, #0
 800a756:	4618      	mov	r0, r3
 800a758:	f002 f83a 	bl	800c7d0 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 800a75c:	4602      	mov	r2, r0
 800a75e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a762:	4611      	mov	r1, r2
 800a764:	4618      	mov	r0, r3
 800a766:	f007 fe27 	bl	80123b8 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 800a76a:	f009 faf3 	bl	8013d54 <_ZN12TestRegistry18getCurrentRegistryEv>
 800a76e:	4604      	mov	r4, r0
 800a770:	6823      	ldr	r3, [r4, #0]
 800a772:	3344      	adds	r3, #68	; 0x44
 800a774:	681d      	ldr	r5, [r3, #0]
 800a776:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a77a:	490f      	ldr	r1, [pc, #60]	; (800a7b8 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 800a77c:	4618      	mov	r0, r3
 800a77e:	f004 f832 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800a782:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a786:	4619      	mov	r1, r3
 800a788:	4620      	mov	r0, r4
 800a78a:	47a8      	blx	r5
 800a78c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a790:	4618      	mov	r0, r3
 800a792:	f004 fbe0 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return result;
 800a796:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 800a798:	f107 0318 	add.w	r3, r7, #24
 800a79c:	4618      	mov	r0, r3
 800a79e:	f001 ff4d 	bl	800c63c <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 800a7a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7ff ff6a 	bl	800a680 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 800a7ac:	4623      	mov	r3, r4
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3760      	adds	r7, #96	; 0x60
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bdb0      	pop	{r4, r5, r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	08026278 	.word	0x08026278

0800a7bc <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 800a7bc:	b590      	push	{r4, r7, lr}
 800a7be:	b085      	sub	sp, #20
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
 800a7c8:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 800a7ca:	4a0f      	ldr	r2, [pc, #60]	; (800a808 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	601a      	str	r2, [r3, #0]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	605a      	str	r2, [r3, #4]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	609a      	str	r2, [r3, #8]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	683a      	ldr	r2, [r7, #0]
 800a7e0:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 800a7e2:	2241      	movs	r2, #65	; 0x41
 800a7e4:	4909      	ldr	r1, [pc, #36]	; (800a80c <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 800a7e6:	2038      	movs	r0, #56	; 0x38
 800a7e8:	f001 fc3a 	bl	800c060 <_ZnwjPKci>
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	68b9      	ldr	r1, [r7, #8]
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f00c f84a 	bl	801688c <_ZN20CommandLineArgumentsC1EiPKPKc>
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	609c      	str	r4, [r3, #8]
}
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	4618      	mov	r0, r3
 800a800:	3714      	adds	r7, #20
 800a802:	46bd      	mov	sp, r7
 800a804:	bd90      	pop	{r4, r7, pc}
 800a806:	bf00      	nop
 800a808:	0802a610 	.word	0x0802a610
 800a80c:	0802628c 	.word	0x0802628c

0800a810 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	4a0c      	ldr	r2, [pc, #48]	; (800a84c <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d004      	beq.n	800a830 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	3204      	adds	r2, #4
 800a82a:	6812      	ldr	r2, [r2, #0]
 800a82c:	4618      	mov	r0, r3
 800a82e:	4790      	blx	r2
    delete output_;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d004      	beq.n	800a842 <_ZN21CommandLineTestRunnerD1Ev+0x32>
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	3204      	adds	r2, #4
 800a83c:	6812      	ldr	r2, [r2, #0]
 800a83e:	4618      	mov	r0, r3
 800a840:	4790      	blx	r2
}
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4618      	mov	r0, r3
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	0802a610 	.word	0x0802a610

0800a850 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
}
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f7ff ffd9 	bl	800a810 <_ZN21CommandLineTestRunnerD1Ev>
 800a85e:	2110      	movs	r1, #16
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f001 fc11 	bl	800c088 <_ZdlPvj>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4618      	mov	r0, r3
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 800a870:	b5b0      	push	{r4, r5, r7, lr}
 800a872:	b08c      	sub	sp, #48	; 0x30
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 800a878:	2301      	movs	r3, #1
 800a87a:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 800a87c:	f107 031c 	add.w	r3, r7, #28
 800a880:	4929      	ldr	r1, [pc, #164]	; (800a928 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800a882:	4618      	mov	r0, r3
 800a884:	f003 ffaf 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800a888:	f107 021c 	add.w	r2, r7, #28
 800a88c:	f107 0308 	add.w	r3, r7, #8
 800a890:	4611      	mov	r1, r2
 800a892:	4618      	mov	r0, r3
 800a894:	f008 fe1c 	bl	80134d0 <_ZN16SetPointerPluginC1ERK12SimpleString>
 800a898:	f107 031c 	add.w	r3, r7, #28
 800a89c:	4618      	mov	r0, r3
 800a89e:	f004 fb5a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	68da      	ldr	r2, [r3, #12]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	3334      	adds	r3, #52	; 0x34
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f107 0108 	add.w	r1, r7, #8
 800a8b4:	4610      	mov	r0, r2
 800a8b6:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	68da      	ldr	r2, [r3, #12]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	333c      	adds	r3, #60	; 0x3c
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4610      	mov	r0, r2
 800a8c8:	4798      	blx	r3
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 fa3e 	bl	800ad50 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d003      	beq.n	800a8e2 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f8ac 	bl	800aa38 <_ZN21CommandLineTestRunner11runAllTestsEv>
 800a8e0:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68dd      	ldr	r5, [r3, #12]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	3344      	adds	r3, #68	; 0x44
 800a8ee:	681c      	ldr	r4, [r3, #0]
 800a8f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8f4:	490c      	ldr	r1, [pc, #48]	; (800a928 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f003 ff75 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800a8fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a900:	4619      	mov	r1, r3
 800a902:	4628      	mov	r0, r5
 800a904:	47a0      	blx	r4
 800a906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a90a:	4618      	mov	r0, r3
 800a90c:	f004 fb23 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return testResult;
 800a910:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 800a912:	f107 0308 	add.w	r3, r7, #8
 800a916:	4618      	mov	r0, r3
 800a918:	f000 faaa 	bl	800ae70 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 800a91c:	4623      	mov	r3, r4
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3730      	adds	r7, #48	; 0x30
 800a922:	46bd      	mov	sp, r7
 800a924:	bdb0      	pop	{r4, r5, r7, pc}
 800a926:	bf00      	nop
 800a928:	080262b0 	.word	0x080262b0

0800a92c <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 800a92c:	b5b0      	push	{r4, r5, r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	68dd      	ldr	r5, [r3, #12]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3330      	adds	r3, #48	; 0x30
 800a940:	681c      	ldr	r4, [r3, #0]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	4618      	mov	r0, r3
 800a948:	f00c fce0 	bl	801730c <_ZNK20CommandLineArguments15getGroupFiltersEv>
 800a94c:	4603      	mov	r3, r0
 800a94e:	4619      	mov	r1, r3
 800a950:	4628      	mov	r0, r5
 800a952:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	68dd      	ldr	r5, [r3, #12]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	332c      	adds	r3, #44	; 0x2c
 800a960:	681c      	ldr	r4, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	4618      	mov	r0, r3
 800a968:	f00c fcdc 	bl	8017324 <_ZNK20CommandLineArguments14getNameFiltersEv>
 800a96c:	4603      	mov	r3, r0
 800a96e:	4619      	mov	r1, r3
 800a970:	4628      	mov	r0, r5
 800a972:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	4618      	mov	r0, r3
 800a97a:	f00c fc2b 	bl	80171d4 <_ZNK20CommandLineArguments9isVerboseEv>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d009      	beq.n	800a998 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	685a      	ldr	r2, [r3, #4]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	3320      	adds	r3, #32
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2101      	movs	r1, #1
 800a994:	4610      	mov	r0, r2
 800a996:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f00c fc25 	bl	80171ec <_ZNK20CommandLineArguments13isVeryVerboseEv>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d009      	beq.n	800a9bc <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	3320      	adds	r3, #32
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2102      	movs	r1, #2
 800a9b8:	4610      	mov	r0, r2
 800a9ba:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f00c fc1f 	bl	8017204 <_ZNK20CommandLineArguments7isColorEv>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d008      	beq.n	800a9de <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	3324      	adds	r3, #36	; 0x24
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4610      	mov	r0, r2
 800a9dc:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f00c fc4a 	bl	801727c <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d008      	beq.n	800aa00 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68da      	ldr	r2, [r3, #12]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	3360      	adds	r3, #96	; 0x60
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4610      	mov	r0, r2
 800a9fe:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	4618      	mov	r0, r3
 800aa06:	f00c fc2d 	bl	8017264 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d004      	beq.n	800aa1a <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f009 fa19 	bl	8013e4c <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f00c fc50 	bl	80172c4 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d001      	beq.n	800aa2e <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 800aa2a:	f00b fadb 	bl	8015fe4 <_ZN10UtestShell14setCrashOnFailEv>
}
 800aa2e:	bf00      	nop
 800aa30:	3708      	adds	r7, #8
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800aa38 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 800aa38:	b5b0      	push	{r4, r5, r7, lr}
 800aa3a:	b094      	sub	sp, #80	; 0x50
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7ff ff73 	bl	800a92c <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	4618      	mov	r0, r3
 800aa58:	f00c fc1c 	bl	8017294 <_ZNK20CommandLineArguments14getRepeatCountEv>
 800aa5c:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	4618      	mov	r0, r3
 800aa64:	f00c fbda 	bl	801721c <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d019      	beq.n	800aaa2 <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	685a      	ldr	r2, [r3, #4]
 800aa72:	f107 0308 	add.w	r3, r7, #8
 800aa76:	4611      	mov	r1, r2
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f009 fbaf 	bl	80141dc <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	68da      	ldr	r2, [r3, #12]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	3320      	adds	r3, #32
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f107 0108 	add.w	r1, r7, #8
 800aa90:	4610      	mov	r0, r2
 800aa92:	4798      	blx	r3
        return 0;
 800aa94:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800aa96:	f107 0308 	add.w	r3, r7, #8
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f009 fbd6 	bl	801424c <_ZN10TestResultD1Ev>
 800aaa0:	e0e1      	b.n	800ac66 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	689b      	ldr	r3, [r3, #8]
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f00c fbc4 	bl	8017234 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d019      	beq.n	800aae6 <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	685a      	ldr	r2, [r3, #4]
 800aab6:	f107 0308 	add.w	r3, r7, #8
 800aaba:	4611      	mov	r1, r2
 800aabc:	4618      	mov	r0, r3
 800aabe:	f009 fb8d 	bl	80141dc <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	68da      	ldr	r2, [r3, #12]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	3324      	adds	r3, #36	; 0x24
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f107 0108 	add.w	r1, r7, #8
 800aad4:	4610      	mov	r0, r2
 800aad6:	4798      	blx	r3
        return 0;
 800aad8:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800aada:	f107 0308 	add.w	r3, r7, #8
 800aade:	4618      	mov	r0, r3
 800aae0:	f009 fbb4 	bl	801424c <_ZN10TestResultD1Ev>
 800aae4:	e0bf      	b.n	800ac66 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f00c fbae 	bl	801724c <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d019      	beq.n	800ab2a <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	685a      	ldr	r2, [r3, #4]
 800aafa:	f107 0308 	add.w	r3, r7, #8
 800aafe:	4611      	mov	r1, r2
 800ab00:	4618      	mov	r0, r3
 800ab02:	f009 fb6b 	bl	80141dc <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	68da      	ldr	r2, [r3, #12]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	3328      	adds	r3, #40	; 0x28
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f107 0108 	add.w	r1, r7, #8
 800ab18:	4610      	mov	r0, r2
 800ab1a:	4798      	blx	r3
        return 0;
 800ab1c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800ab1e:	f107 0308 	add.w	r3, r7, #8
 800ab22:	4618      	mov	r0, r3
 800ab24:	f009 fb92 	bl	801424c <_ZN10TestResultD1Ev>
 800ab28:	e09d      	b.n	800ac66 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f00c fbbc 	bl	80172ac <_ZNK20CommandLineArguments11isReversingEv>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d008      	beq.n	800ab4c <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	68da      	ldr	r2, [r3, #12]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	331c      	adds	r3, #28
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4610      	mov	r0, r2
 800ab4a:	4798      	blx	r3

    if (arguments_->isShuffling())
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	4618      	mov	r0, r3
 800ab52:	f00c fbc3 	bl	80172dc <_ZNK20CommandLineArguments11isShufflingEv>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d023      	beq.n	800aba4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	685a      	ldr	r2, [r3, #4]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	332c      	adds	r3, #44	; 0x2c
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4941      	ldr	r1, [pc, #260]	; (800ac70 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685d      	ldr	r5, [r3, #4]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	3334      	adds	r3, #52	; 0x34
 800ab7c:	681c      	ldr	r4, [r3, #0]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f00c fbb6 	bl	80172f4 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	47a0      	blx	r4
        output_->print("\n");
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	685a      	ldr	r2, [r3, #4]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	332c      	adds	r3, #44	; 0x2c
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4935      	ldr	r1, [pc, #212]	; (800ac74 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 800aba0:	4610      	mov	r0, r2
 800aba2:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 800aba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aba6:	1c5a      	adds	r2, r3, #1
 800aba8:	64fa      	str	r2, [r7, #76]	; 0x4c
 800abaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abac:	429a      	cmp	r2, r3
 800abae:	bf8c      	ite	hi
 800abb0:	2301      	movhi	r3, #1
 800abb2:	2300      	movls	r3, #0
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d04e      	beq.n	800ac58 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	4618      	mov	r0, r3
 800abc0:	f00c fb8c 	bl	80172dc <_ZNK20CommandLineArguments11isShufflingEv>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00f      	beq.n	800abea <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	68dd      	ldr	r5, [r3, #12]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	3318      	adds	r3, #24
 800abd6:	681c      	ldr	r4, [r3, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	4618      	mov	r0, r3
 800abde:	f00c fb89 	bl	80172f4 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800abe2:	4603      	mov	r3, r0
 800abe4:	4619      	mov	r1, r3
 800abe6:	4628      	mov	r0, r5
 800abe8:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6858      	ldr	r0, [r3, #4]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	3340      	adds	r3, #64	; 0x40
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abfa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800abfc:	4798      	blx	r3
        TestResult tr(*output_);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	f107 0308 	add.w	r3, r7, #8
 800ac06:	4611      	mov	r1, r2
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f009 fae7 	bl	80141dc <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	68da      	ldr	r2, [r3, #12]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	3314      	adds	r3, #20
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f107 0108 	add.w	r1, r7, #8
 800ac20:	4610      	mov	r0, r2
 800ac22:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 800ac24:	f107 0308 	add.w	r3, r7, #8
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7ff fcef 	bl	800a60c <_ZNK10TestResult15getFailureCountEv>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac32:	4413      	add	r3, r2
 800ac34:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 800ac36:	f107 0308 	add.w	r3, r7, #8
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7ff fcf2 	bl	800a624 <_ZNK10TestResult9isFailureEv>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d002      	beq.n	800ac4c <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 800ac46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac48:	3301      	adds	r3, #1
 800ac4a:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 800ac4c:	f107 0308 	add.w	r3, r7, #8
 800ac50:	4618      	mov	r0, r3
 800ac52:	f009 fafb 	bl	801424c <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 800ac56:	e7a5      	b.n	800aba4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 800ac58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d001      	beq.n	800ac62 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 800ac5e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800ac60:	e000      	b.n	800ac64 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 800ac62:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800ac64:	bf00      	nop
 800ac66:	4623      	mov	r3, r4
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3750      	adds	r7, #80	; 0x50
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bdb0      	pop	{r4, r5, r7, pc}
 800ac70:	080262c4 	.word	0x080262c4
 800ac74:	080262f0 	.word	0x080262f0

0800ac78 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 800ac78:	b590      	push	{r4, r7, lr}
 800ac7a:	b083      	sub	sp, #12
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 800ac80:	229d      	movs	r2, #157	; 0x9d
 800ac82:	4906      	ldr	r1, [pc, #24]	; (800ac9c <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 800ac84:	201c      	movs	r0, #28
 800ac86:	f001 f9eb 	bl	800c060 <_ZnwjPKci>
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f005 f955 	bl	800ff3c <_ZN18TeamCityTestOutputC1Ev>
 800ac92:	4623      	mov	r3, r4
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd90      	pop	{r4, r7, pc}
 800ac9c:	0802628c 	.word	0x0802628c

0800aca0 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 800aca0:	b590      	push	{r4, r7, lr}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 800acaa:	22a2      	movs	r2, #162	; 0xa2
 800acac:	490a      	ldr	r1, [pc, #40]	; (800acd8 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 800acae:	2014      	movs	r0, #20
 800acb0:	f001 f9d6 	bl	800c060 <_ZnwjPKci>
 800acb4:	4604      	mov	r4, r0
 800acb6:	4620      	mov	r0, r4
 800acb8:	f000 f980 	bl	800afbc <_ZN15JUnitTestOutputC1Ev>
 800acbc:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d003      	beq.n	800accc <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 800acc4:	6839      	ldr	r1, [r7, #0]
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	f000 fbb2 	bl	800b430 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 800accc:	68fb      	ldr	r3, [r7, #12]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd90      	pop	{r4, r7, pc}
 800acd6:	bf00      	nop
 800acd8:	0802628c 	.word	0x0802628c

0800acdc <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 800acdc:	b590      	push	{r4, r7, lr}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 800ace4:	22ab      	movs	r2, #171	; 0xab
 800ace6:	4906      	ldr	r1, [pc, #24]	; (800ad00 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 800ace8:	2010      	movs	r0, #16
 800acea:	f001 f9b9 	bl	800c060 <_ZnwjPKci>
 800acee:	4604      	mov	r4, r0
 800acf0:	4620      	mov	r0, r4
 800acf2:	f7ff fcb3 	bl	800a65c <_ZN17ConsoleTestOutputC1Ev>
 800acf6:	4623      	mov	r3, r4
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd90      	pop	{r4, r7, pc}
 800ad00:	0802628c 	.word	0x0802628c

0800ad04 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 800ad04:	b590      	push	{r4, r7, lr}
 800ad06:	b087      	sub	sp, #28
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 800ad10:	22b0      	movs	r2, #176	; 0xb0
 800ad12:	490e      	ldr	r1, [pc, #56]	; (800ad4c <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 800ad14:	2018      	movs	r0, #24
 800ad16:	f001 f9a3 	bl	800c060 <_ZnwjPKci>
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f007 ff83 	bl	8012c28 <_ZN19CompositeTestOutputC1Ev>
 800ad22:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	335c      	adds	r3, #92	; 0x5c
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	68b9      	ldr	r1, [r7, #8]
 800ad2e:	6978      	ldr	r0, [r7, #20]
 800ad30:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	3360      	adds	r3, #96	; 0x60
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	6879      	ldr	r1, [r7, #4]
 800ad3c:	6978      	ldr	r0, [r7, #20]
 800ad3e:	4798      	blx	r3
  return composite;
 800ad40:	697b      	ldr	r3, [r7, #20]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	371c      	adds	r7, #28
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd90      	pop	{r4, r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	0802628c 	.word	0x0802628c

0800ad50 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 800ad50:	b5b0      	push	{r4, r5, r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	6839      	ldr	r1, [r7, #0]
 800ad60:	4618      	mov	r0, r3
 800ad62:	f00b fe4f 	bl	8016a04 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 800ad66:	4603      	mov	r3, r0
 800ad68:	f083 0301 	eor.w	r3, r3, #1
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d029      	beq.n	800adc6 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	3310      	adds	r3, #16
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	4798      	blx	r3
 800ad7e:	4602      	mov	r2, r0
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	685d      	ldr	r5, [r3, #4]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	332c      	adds	r3, #44	; 0x2c
 800ad90:	681c      	ldr	r4, [r3, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	4618      	mov	r0, r3
 800ad98:	f00c fa10 	bl	80171bc <_ZNK20CommandLineArguments8needHelpEv>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d006      	beq.n	800adb0 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	4618      	mov	r0, r3
 800ada8:	f00c f9fa 	bl	80171a0 <_ZNK20CommandLineArguments4helpEv>
 800adac:	4603      	mov	r3, r0
 800adae:	e005      	b.n	800adbc <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	4618      	mov	r0, r3
 800adb6:	f00c f9e5 	bl	8017184 <_ZNK20CommandLineArguments5usageEv>
 800adba:	4603      	mov	r3, r0
 800adbc:	4619      	mov	r1, r3
 800adbe:	4628      	mov	r0, r5
 800adc0:	47a0      	blx	r4
    return false;
 800adc2:	2300      	movs	r3, #0
 800adc4:	e050      	b.n	800ae68 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	4618      	mov	r0, r3
 800adcc:	f00d f84c 	bl	8017e68 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d02c      	beq.n	800ae30 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	330c      	adds	r3, #12
 800addc:	681c      	ldr	r4, [r3, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f00d f864 	bl	8017eb0 <_ZNK20CommandLineArguments14getPackageNameEv>
 800ade8:	4603      	mov	r3, r0
 800adea:	4619      	mov	r1, r3
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	47a0      	blx	r4
 800adf0:	4602      	mov	r2, r0
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	4618      	mov	r0, r3
 800adfc:	f00c f9ea 	bl	80171d4 <_ZNK20CommandLineArguments9isVerboseEv>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d02f      	beq.n	800ae66 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	3314      	adds	r3, #20
 800ae0c:	681c      	ldr	r4, [r3, #0]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	685d      	ldr	r5, [r3, #4]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	3310      	adds	r3, #16
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	4798      	blx	r3
 800ae1e:	4603      	mov	r3, r0
 800ae20:	461a      	mov	r2, r3
 800ae22:	4629      	mov	r1, r5
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	47a0      	blx	r4
 800ae28:	4602      	mov	r2, r0
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	605a      	str	r2, [r3, #4]
 800ae2e:	e01a      	b.n	800ae66 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f00d f829 	bl	8017e8c <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d009      	beq.n	800ae54 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	3308      	adds	r3, #8
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	4798      	blx	r3
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	605a      	str	r2, [r3, #4]
 800ae52:	e008      	b.n	800ae66 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	3310      	adds	r3, #16
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	4798      	blx	r3
 800ae60:	4602      	mov	r2, r0
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	605a      	str	r2, [r3, #4]
  return true;
 800ae66:	2301      	movs	r3, #1
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bdb0      	pop	{r4, r5, r7, pc}

0800ae70 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	4a05      	ldr	r2, [pc, #20]	; (800ae90 <_ZN16SetPointerPluginD1Ev+0x20>)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	601a      	str	r2, [r3, #0]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4618      	mov	r0, r3
 800ae82:	f008 f9e7 	bl	8013254 <_ZN10TestPluginD1Ev>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	0802ad90 	.word	0x0802ad90

0800ae94 <_ZN16SetPointerPluginD0Ev>:
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f7ff ffe7 	bl	800ae70 <_ZN16SetPointerPluginD1Ev>
 800aea2:	2114      	movs	r1, #20
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f001 f8ef 	bl	800c088 <_ZdlPvj>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4618      	mov	r0, r3
 800aeae:	3708      	adds	r7, #8
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
        return checkCount_;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	691b      	ldr	r3, [r3, #16]
    }
 800aec0:	4618      	mov	r0, r3
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4910      	ldr	r1, [pc, #64]	; (800af18 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 800aed8:	4618      	mov	r0, r3
 800aeda:	f003 fc84 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	609a      	str	r2, [r3, #8]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	60da      	str	r2, [r3, #12]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	741a      	strb	r2, [r3, #16]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	3314      	adds	r3, #20
 800aef4:	4908      	ldr	r1, [pc, #32]	; (800af18 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 800aef6:	4618      	mov	r0, r3
 800aef8:	f003 fc75 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	61da      	str	r2, [r3, #28]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	621a      	str	r2, [r3, #32]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4618      	mov	r0, r3
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	080262f4 	.word	0x080262f4

0800af1c <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	605a      	str	r2, [r3, #4]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	609a      	str	r2, [r3, #8]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	60da      	str	r2, [r3, #12]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2200      	movs	r2, #0
 800af40:	611a      	str	r2, [r3, #16]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	3314      	adds	r3, #20
 800af46:	4907      	ldr	r1, [pc, #28]	; (800af64 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 800af48:	4618      	mov	r0, r3
 800af4a:	f003 fc4c 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2200      	movs	r2, #0
 800af52:	61da      	str	r2, [r3, #28]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	621a      	str	r2, [r3, #32]
    {
    }
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4618      	mov	r0, r3
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	080262f4 	.word	0x080262f4

0800af68 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	3314      	adds	r3, #20
 800af74:	4618      	mov	r0, r3
 800af76:	f003 ffee 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4618      	mov	r0, r3
 800af90:	f7ff ffc4 	bl	800af1c <_ZN20JUnitTestGroupResultC1Ev>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	3328      	adds	r3, #40	; 0x28
 800af98:	4907      	ldr	r1, [pc, #28]	; (800afb8 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 800af9a:	4618      	mov	r0, r3
 800af9c:	f003 fc23 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	3330      	adds	r3, #48	; 0x30
 800afa4:	4904      	ldr	r1, [pc, #16]	; (800afb8 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 800afa6:	4618      	mov	r0, r3
 800afa8:	f003 fc1d 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4618      	mov	r0, r3
 800afb0:	3708      	adds	r7, #8
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	080262f4 	.word	0x080262f4

0800afbc <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 800afbc:	b590      	push	{r4, r7, lr}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	4618      	mov	r0, r3
 800afc8:	f007 f936 	bl	8012238 <_ZN10TestOutputC1Ev>
 800afcc:	4a09      	ldr	r2, [pc, #36]	; (800aff4 <_ZN15JUnitTestOutputC1Ev+0x38>)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	601a      	str	r2, [r3, #0]
 800afd2:	224d      	movs	r2, #77	; 0x4d
 800afd4:	4908      	ldr	r1, [pc, #32]	; (800aff8 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 800afd6:	2038      	movs	r0, #56	; 0x38
 800afd8:	f001 f842 	bl	800c060 <_ZnwjPKci>
 800afdc:	4604      	mov	r4, r0
 800afde:	4620      	mov	r0, r4
 800afe0:	f7ff ffd0 	bl	800af84 <_ZN19JUnitTestOutputImplC1Ev>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	611c      	str	r4, [r3, #16]
{
}
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	4618      	mov	r0, r3
 800afec:	370c      	adds	r7, #12
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd90      	pop	{r4, r7, pc}
 800aff2:	bf00      	nop
 800aff4:	0802a630 	.word	0x0802a630
 800aff8:	080262f8 	.word	0x080262f8

0800affc <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	3330      	adds	r3, #48	; 0x30
 800b008:	4618      	mov	r0, r3
 800b00a:	f003 ffa4 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	3328      	adds	r3, #40	; 0x28
 800b012:	4618      	mov	r0, r3
 800b014:	f003 ff9f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7ff ffa4 	bl	800af68 <_ZN20JUnitTestGroupResultD1Ev>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4618      	mov	r0, r3
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
	...

0800b02c <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 800b02c:	b590      	push	{r4, r7, lr}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	4a0c      	ldr	r2, [pc, #48]	; (800b068 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 f838 	bl	800b0b0 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	691c      	ldr	r4, [r3, #16]
 800b044:	2c00      	cmp	r4, #0
 800b046:	d006      	beq.n	800b056 <_ZN15JUnitTestOutputD1Ev+0x2a>
 800b048:	4620      	mov	r0, r4
 800b04a:	f7ff ffd7 	bl	800affc <_ZN19JUnitTestOutputImplD1Ev>
 800b04e:	2138      	movs	r1, #56	; 0x38
 800b050:	4620      	mov	r0, r4
 800b052:	f001 f819 	bl	800c088 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4618      	mov	r0, r3
 800b05a:	f007 f90b 	bl	8012274 <_ZN10TestOutputD1Ev>
}
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	4618      	mov	r0, r3
 800b062:	370c      	adds	r7, #12
 800b064:	46bd      	mov	sp, r7
 800b066:	bd90      	pop	{r4, r7, pc}
 800b068:	0802a630 	.word	0x0802a630

0800b06c <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
}
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f7ff ffd9 	bl	800b02c <_ZN15JUnitTestOutputD1Ev>
 800b07a:	2114      	movs	r1, #20
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f001 f803 	bl	800c088 <_ZdlPvj>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4618      	mov	r0, r3
 800b086:	3708      	adds	r7, #8
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	3314      	adds	r3, #20
 800b098:	4618      	mov	r0, r3
 800b09a:	f003 ff5c 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f003 ff58 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 800b0b0:	b590      	push	{r4, r7, lr}
 800b0b2:	b087      	sub	sp, #28
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	691b      	ldr	r3, [r3, #16]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	691b      	ldr	r3, [r3, #16]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	691b      	ldr	r3, [r3, #16]
 800b0cc:	f103 0414 	add.w	r4, r3, #20
 800b0d0:	f107 0308 	add.w	r3, r7, #8
 800b0d4:	491d      	ldr	r1, [pc, #116]	; (800b14c <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f003 fb85 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800b0dc:	f107 0308 	add.w	r3, r7, #8
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f003 fbeb 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 800b0e8:	f107 0308 	add.w	r3, r7, #8
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f003 ff32 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	691b      	ldr	r3, [r3, #16]
 800b0f6:	69db      	ldr	r3, [r3, #28]
 800b0f8:	617b      	str	r3, [r7, #20]
    while (cur) {
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d018      	beq.n	800b132 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b104:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d004      	beq.n	800b118 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	3204      	adds	r2, #4
 800b112:	6812      	ldr	r2, [r2, #0]
 800b114:	4618      	mov	r0, r3
 800b116:	4790      	blx	r2
        delete cur;
 800b118:	697c      	ldr	r4, [r7, #20]
 800b11a:	2c00      	cmp	r4, #0
 800b11c:	d006      	beq.n	800b12c <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 800b11e:	4620      	mov	r0, r4
 800b120:	f7ff ffb4 	bl	800b08c <_ZN23JUnitTestCaseResultNodeD1Ev>
 800b124:	2128      	movs	r1, #40	; 0x28
 800b126:	4620      	mov	r0, r4
 800b128:	f000 ffae 	bl	800c088 <_ZdlPvj>
        cur = tmp;
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	617b      	str	r3, [r7, #20]
    while (cur) {
 800b130:	e7e3      	b.n	800b0fa <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	2200      	movs	r2, #0
 800b138:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	2200      	movs	r2, #0
 800b140:	621a      	str	r2, [r3, #32]
}
 800b142:	bf00      	nop
 800b144:	371c      	adds	r7, #28
 800b146:	46bd      	mov	sp, r7
 800b148:	bd90      	pop	{r4, r7, pc}
 800b14a:	bf00      	nop
 800b14c:	080262f4 	.word	0x080262f4

0800b150 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
}
 800b158:	bf00      	nop
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
}
 800b16e:	bf00      	nop
 800b170:	370c      	adds	r7, #12
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 800b17a:	b590      	push	{r4, r7, lr}
 800b17c:	b083      	sub	sp, #12
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
 800b182:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	691b      	ldr	r3, [r3, #16]
 800b188:	6a1c      	ldr	r4, [r3, #32]
 800b18a:	6838      	ldr	r0, [r7, #0]
 800b18c:	f009 f9c6 	bl	801451c <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800b190:	4603      	mov	r3, r0
 800b192:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	6a1c      	ldr	r4, [r3, #32]
 800b19a:	6838      	ldr	r0, [r7, #0]
 800b19c:	f7ff fe8a 	bl	800aeb4 <_ZNK10TestResult13getCheckCountEv>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	6223      	str	r3, [r4, #32]
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd90      	pop	{r4, r7, pc}

0800b1ac <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
}
 800b1b6:	bf00      	nop
 800b1b8:	370c      	adds	r7, #12
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr

0800b1c2 <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 800b1c2:	b590      	push	{r4, r7, lr}
 800b1c4:	b083      	sub	sp, #12
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
 800b1ca:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	691c      	ldr	r4, [r3, #16]
 800b1d0:	6838      	ldr	r0, [r7, #0]
 800b1d2:	f009 f9af 	bl	8014534 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	3364      	adds	r3, #100	; 0x64
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	4798      	blx	r3
    resetTestGroupResult();
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f7ff ff62 	bl	800b0b0 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 800b1ec:	bf00      	nop
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd90      	pop	{r4, r7, pc}

0800b1f4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800b1f4:	b590      	push	{r4, r7, lr}
 800b1f6:	b089      	sub	sp, #36	; 0x24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	3201      	adds	r2, #1
 800b206:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	691b      	ldr	r3, [r3, #16]
 800b20c:	f103 0414 	add.w	r4, r3, #20
 800b210:	f107 0308 	add.w	r3, r7, #8
 800b214:	6839      	ldr	r1, [r7, #0]
 800b216:	4618      	mov	r0, r3
 800b218:	f009 fcef 	bl	8014bfa <_ZNK10UtestShell8getGroupEv>
 800b21c:	f107 0308 	add.w	r3, r7, #8
 800b220:	4619      	mov	r1, r3
 800b222:	4620      	mov	r0, r4
 800b224:	f003 fb4b 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 800b228:	f107 0308 	add.w	r3, r7, #8
 800b22c:	4618      	mov	r0, r3
 800b22e:	f003 fe92 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 800b232:	4b3c      	ldr	r3, [pc, #240]	; (800b324 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4798      	blx	r3
 800b238:	4602      	mov	r2, r0
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	691b      	ldr	r3, [r3, #16]
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d110      	bne.n	800b26c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 800b24a:	2288      	movs	r2, #136	; 0x88
 800b24c:	4936      	ldr	r1, [pc, #216]	; (800b328 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 800b24e:	2028      	movs	r0, #40	; 0x28
 800b250:	f000 ff06 	bl	800c060 <_ZnwjPKci>
 800b254:	4604      	mov	r4, r0
 800b256:	4620      	mov	r0, r4
 800b258:	f7ff fe38 	bl	800aecc <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 800b260:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	6912      	ldr	r2, [r2, #16]
 800b266:	6a1b      	ldr	r3, [r3, #32]
 800b268:	61d3      	str	r3, [r2, #28]
 800b26a:	e013      	b.n	800b294 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 800b26c:	228b      	movs	r2, #139	; 0x8b
 800b26e:	492e      	ldr	r1, [pc, #184]	; (800b328 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 800b270:	2028      	movs	r0, #40	; 0x28
 800b272:	f000 fef5 	bl	800c060 <_ZnwjPKci>
 800b276:	4604      	mov	r4, r0
 800b278:	4620      	mov	r0, r4
 800b27a:	f7ff fe27 	bl	800aecc <_ZN23JUnitTestCaseResultNodeC1Ev>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	691b      	ldr	r3, [r3, #16]
 800b282:	6a1b      	ldr	r3, [r3, #32]
 800b284:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	6a1a      	ldr	r2, [r3, #32]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b292:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	691b      	ldr	r3, [r3, #16]
 800b298:	6a1b      	ldr	r3, [r3, #32]
 800b29a:	461c      	mov	r4, r3
 800b29c:	f107 0310 	add.w	r3, r7, #16
 800b2a0:	6839      	ldr	r1, [r7, #0]
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f009 fc9a 	bl	8014bdc <_ZNK10UtestShell7getNameEv>
 800b2a8:	f107 0310 	add.w	r3, r7, #16
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	f003 fb05 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 800b2b4:	f107 0310 	add.w	r3, r7, #16
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f003 fe4c 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	6a1b      	ldr	r3, [r3, #32]
 800b2c4:	f103 0414 	add.w	r4, r3, #20
 800b2c8:	f107 0318 	add.w	r3, r7, #24
 800b2cc:	6839      	ldr	r1, [r7, #0]
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f009 fd55 	bl	8014d7e <_ZNK10UtestShell7getFileEv>
 800b2d4:	f107 0318 	add.w	r3, r7, #24
 800b2d8:	4619      	mov	r1, r3
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f003 faef 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 800b2e0:	f107 0318 	add.w	r3, r7, #24
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f003 fe36 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	691b      	ldr	r3, [r3, #16]
 800b2ee:	6a1c      	ldr	r4, [r3, #32]
 800b2f0:	6838      	ldr	r0, [r7, #0]
 800b2f2:	f009 fd53 	bl	8014d9c <_ZNK10UtestShell13getLineNumberEv>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	3318      	adds	r3, #24
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	6838      	ldr	r0, [r7, #0]
 800b304:	4798      	blx	r3
 800b306:	4603      	mov	r3, r0
 800b308:	f083 0301 	eor.w	r3, r3, #1
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d004      	beq.n	800b31c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	6a1b      	ldr	r3, [r3, #32]
 800b318:	2201      	movs	r2, #1
 800b31a:	741a      	strb	r2, [r3, #16]
    }
}
 800b31c:	bf00      	nop
 800b31e:	3724      	adds	r7, #36	; 0x24
 800b320:	46bd      	mov	sp, r7
 800b322:	bd90      	pop	{r4, r7, pc}
 800b324:	200000a8 	.word	0x200000a8
 800b328:	080262f8 	.word	0x080262f8

0800b32c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b08a      	sub	sp, #40	; 0x28
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	60b9      	str	r1, [r7, #8]
 800b336:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 800b338:	f107 0310 	add.w	r3, r7, #16
 800b33c:	4928      	ldr	r1, [pc, #160]	; (800b3e0 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 800b33e:	4618      	mov	r0, r3
 800b340:	f003 fa51 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	691b      	ldr	r3, [r3, #16]
 800b348:	3328      	adds	r3, #40	; 0x28
 800b34a:	4618      	mov	r0, r3
 800b34c:	f003 fdf2 	bl	800ef34 <_ZNK12SimpleString7isEmptyEv>
 800b350:	4603      	mov	r3, r0
 800b352:	f083 0301 	eor.w	r3, r3, #1
 800b356:	b2db      	uxtb	r3, r3
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00f      	beq.n	800b37c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	691b      	ldr	r3, [r3, #16]
 800b360:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800b364:	f107 0310 	add.w	r3, r7, #16
 800b368:	4611      	mov	r1, r2
 800b36a:	4618      	mov	r0, r3
 800b36c:	f003 fe70 	bl	800f050 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 800b370:	f107 0310 	add.w	r3, r7, #16
 800b374:	491b      	ldr	r1, [pc, #108]	; (800b3e4 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 800b376:	4618      	mov	r0, r3
 800b378:	f003 fe7c 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 800b37c:	f107 0310 	add.w	r3, r7, #16
 800b380:	6879      	ldr	r1, [r7, #4]
 800b382:	4618      	mov	r0, r3
 800b384:	f003 fe64 	bl	800f050 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	3384      	adds	r3, #132	; 0x84
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f107 0018 	add.w	r0, r7, #24
 800b394:	f107 0210 	add.w	r2, r7, #16
 800b398:	68b9      	ldr	r1, [r7, #8]
 800b39a:	4798      	blx	r3
 800b39c:	f107 0320 	add.w	r3, r7, #32
 800b3a0:	4911      	ldr	r1, [pc, #68]	; (800b3e8 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f003 fa1f 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f107 0220 	add.w	r2, r7, #32
 800b3ae:	f107 0118 	add.w	r1, r7, #24
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f003 fe31 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 800b3b8:	f107 0320 	add.w	r3, r7, #32
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f003 fdca 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800b3c2:	f107 0318 	add.w	r3, r7, #24
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f003 fdc5 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 800b3cc:	f107 0310 	add.w	r3, r7, #16
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f003 fdc0 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 800b3d6:	bf00      	nop
}
 800b3d8:	68f8      	ldr	r0, [r7, #12]
 800b3da:	3728      	adds	r7, #40	; 0x28
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	08026314 	.word	0x08026314
 800b3e4:	08026320 	.word	0x08026320
 800b3e8:	08026324 	.word	0x08026324

0800b3ec <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 800b3f8:	6879      	ldr	r1, [r7, #4]
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	f003 fa47 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 800b400:	4b0a      	ldr	r3, [pc, #40]	; (800b42c <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 800b402:	617b      	str	r3, [r7, #20]
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d00a      	beq.n	800b422 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	225f      	movs	r2, #95	; 0x5f
 800b412:	4619      	mov	r1, r3
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	f003 fbcc 	bl	800ebb2 <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	3301      	adds	r3, #1
 800b41e:	617b      	str	r3, [r7, #20]
 800b420:	e7f0      	b.n	800b404 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 800b422:	bf00      	nop
}
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	3718      	adds	r7, #24
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	0802632c 	.word	0x0802632c

0800b430 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d006      	beq.n	800b450 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	691b      	ldr	r3, [r3, #16]
 800b446:	3328      	adds	r3, #40	; 0x28
 800b448:	6839      	ldr	r1, [r7, #0]
 800b44a:	4618      	mov	r0, r3
 800b44c:	f003 fa37 	bl	800e8be <_ZN12SimpleStringaSERKS_>
    }
}
 800b450:	bf00      	nop
 800b452:	3708      	adds	r7, #8
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 800b458:	b590      	push	{r4, r7, lr}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	3368      	adds	r3, #104	; 0x68
 800b466:	681c      	ldr	r4, [r3, #0]
 800b468:	f107 0308 	add.w	r3, r7, #8
 800b46c:	4908      	ldr	r1, [pc, #32]	; (800b490 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 800b46e:	4618      	mov	r0, r3
 800b470:	f003 f9b9 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800b474:	f107 0308 	add.w	r3, r7, #8
 800b478:	4619      	mov	r1, r3
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	47a0      	blx	r4
 800b47e:	f107 0308 	add.w	r3, r7, #8
 800b482:	4618      	mov	r0, r3
 800b484:	f003 fd67 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 800b488:	bf00      	nop
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd90      	pop	{r4, r7, pc}
 800b490:	08026338 	.word	0x08026338

0800b494 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 800b494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b498:	b08a      	sub	sp, #40	; 0x28
 800b49a:	af04      	add	r7, sp, #16
 800b49c:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 800b4a4:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 800b4aa:	3314      	adds	r3, #20
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f003 fd25 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800b4b2:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	691b      	ldr	r3, [r3, #16]
 800b4b8:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 800b4ba:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	4a23      	ldr	r2, [pc, #140]	; (800b550 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 800b4c4:	fba2 2303 	umull	r2, r3, r2, r3
 800b4c8:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 800b4ca:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	691a      	ldr	r2, [r3, #16]
 800b4d2:	4b1f      	ldr	r3, [pc, #124]	; (800b550 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 800b4d4:	fba3 1302 	umull	r1, r3, r3, r2
 800b4d8:	099b      	lsrs	r3, r3, #6
 800b4da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b4de:	fb01 f303 	mul.w	r3, r1, r3
 800b4e2:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 800b4e4:	603b      	str	r3, [r7, #0]
 800b4e6:	4b1b      	ldr	r3, [pc, #108]	; (800b554 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4798      	blx	r3
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	f107 0008 	add.w	r0, r7, #8
 800b4f2:	9303      	str	r3, [sp, #12]
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	9302      	str	r3, [sp, #8]
 800b4f8:	9601      	str	r6, [sp, #4]
 800b4fa:	9500      	str	r5, [sp, #0]
 800b4fc:	4623      	mov	r3, r4
 800b4fe:	4642      	mov	r2, r8
 800b500:	4915      	ldr	r1, [pc, #84]	; (800b558 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 800b502:	f004 fa2f 	bl	800f964 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	3368      	adds	r3, #104	; 0x68
 800b50c:	681c      	ldr	r4, [r3, #0]
 800b50e:	f107 0308 	add.w	r3, r7, #8
 800b512:	4618      	mov	r0, r3
 800b514:	f003 fcf2 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800b518:	4602      	mov	r2, r0
 800b51a:	f107 0310 	add.w	r3, r7, #16
 800b51e:	4611      	mov	r1, r2
 800b520:	4618      	mov	r0, r3
 800b522:	f003 f960 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800b526:	f107 0310 	add.w	r3, r7, #16
 800b52a:	4619      	mov	r1, r3
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	47a0      	blx	r4
 800b530:	f107 0310 	add.w	r3, r7, #16
 800b534:	4618      	mov	r0, r3
 800b536:	f003 fd0e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 800b53a:	f107 0308 	add.w	r3, r7, #8
 800b53e:	4618      	mov	r0, r3
 800b540:	f003 fd09 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 800b544:	bf00      	nop
 800b546:	3718      	adds	r7, #24
 800b548:	46bd      	mov	sp, r7
 800b54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b54e:	bf00      	nop
 800b550:	10624dd3 	.word	0x10624dd3
 800b554:	200000ac 	.word	0x200000ac
 800b558:	08026364 	.word	0x08026364

0800b55c <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 800b55c:	b590      	push	{r4, r7, lr}
 800b55e:	b087      	sub	sp, #28
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	3368      	adds	r3, #104	; 0x68
 800b56a:	681c      	ldr	r4, [r3, #0]
 800b56c:	f107 0308 	add.w	r3, r7, #8
 800b570:	4912      	ldr	r1, [pc, #72]	; (800b5bc <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 800b572:	4618      	mov	r0, r3
 800b574:	f003 f937 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800b578:	f107 0308 	add.w	r3, r7, #8
 800b57c:	4619      	mov	r1, r3
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	47a0      	blx	r4
 800b582:	f107 0308 	add.w	r3, r7, #8
 800b586:	4618      	mov	r0, r3
 800b588:	f003 fce5 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	3368      	adds	r3, #104	; 0x68
 800b592:	681c      	ldr	r4, [r3, #0]
 800b594:	f107 0310 	add.w	r3, r7, #16
 800b598:	4909      	ldr	r1, [pc, #36]	; (800b5c0 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 800b59a:	4618      	mov	r0, r3
 800b59c:	f003 f923 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800b5a0:	f107 0310 	add.w	r3, r7, #16
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	47a0      	blx	r4
 800b5aa:	f107 0310 	add.w	r3, r7, #16
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f003 fcd1 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 800b5b4:	bf00      	nop
 800b5b6:	371c      	adds	r7, #28
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd90      	pop	{r4, r7, pc}
 800b5bc:	080263d4 	.word	0x080263d4
 800b5c0:	080263e4 	.word	0x080263e4

0800b5c4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f003 fc93 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	4619      	mov	r1, r3
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f003 f903 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 800b5e0:	4a0e      	ldr	r2, [pc, #56]	; (800b61c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 800b5e2:	490f      	ldr	r1, [pc, #60]	; (800b620 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f003 fb13 	bl	800ec10 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 800b5ea:	4a0e      	ldr	r2, [pc, #56]	; (800b624 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 800b5ec:	490e      	ldr	r1, [pc, #56]	; (800b628 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f003 fb0e 	bl	800ec10 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 800b5f4:	4a0d      	ldr	r2, [pc, #52]	; (800b62c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 800b5f6:	490e      	ldr	r1, [pc, #56]	; (800b630 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f003 fb09 	bl	800ec10 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 800b5fe:	4a0d      	ldr	r2, [pc, #52]	; (800b634 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 800b600:	490d      	ldr	r1, [pc, #52]	; (800b638 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	f003 fb04 	bl	800ec10 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 800b608:	4a0c      	ldr	r2, [pc, #48]	; (800b63c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 800b60a:	490d      	ldr	r1, [pc, #52]	; (800b640 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f003 faff 	bl	800ec10 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 800b612:	bf00      	nop
}
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	080263f4 	.word	0x080263f4
 800b620:	080263fc 	.word	0x080263fc
 800b624:	08026400 	.word	0x08026400
 800b628:	08026408 	.word	0x08026408
 800b62c:	0802640c 	.word	0x0802640c
 800b630:	08026414 	.word	0x08026414
 800b634:	08026418 	.word	0x08026418
 800b638:	08026420 	.word	0x08026420
 800b63c:	08026424 	.word	0x08026424
 800b640:	08026430 	.word	0x08026430

0800b644 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 800b644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b648:	b096      	sub	sp, #88	; 0x58
 800b64a:	af08      	add	r7, sp, #32
 800b64c:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	69db      	ldr	r3, [r3, #28]
 800b654:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 800b656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b658:	2b00      	cmp	r3, #0
 800b65a:	f000 80b2 	beq.w	800b7c2 <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 800b662:	3328      	adds	r3, #40	; 0x28
 800b664:	4618      	mov	r0, r3
 800b666:	f003 fc49 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800b66a:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	3328      	adds	r3, #40	; 0x28
 800b672:	4618      	mov	r0, r3
 800b674:	f003 fc5e 	bl	800ef34 <_ZNK12SimpleString7isEmptyEv>
 800b678:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d001      	beq.n	800b682 <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 800b67e:	4c53      	ldr	r4, [pc, #332]	; (800b7cc <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 800b680:	e000      	b.n	800b684 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 800b682:	4c53      	ldr	r4, [pc, #332]	; (800b7d0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 800b688:	3314      	adds	r3, #20
 800b68a:	4618      	mov	r0, r3
 800b68c:	f003 fc36 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800b690:	4605      	mov	r5, r0
 800b692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b694:	4618      	mov	r0, r3
 800b696:	f003 fc31 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800b69a:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 800b69c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b69e:	6a1a      	ldr	r2, [r3, #32]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800b6a8:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800b6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	4a49      	ldr	r2, [pc, #292]	; (800b7d4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800b6b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b6b4:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 800b6b6:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800b6b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ba:	689a      	ldr	r2, [r3, #8]
 800b6bc:	4b45      	ldr	r3, [pc, #276]	; (800b7d4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800b6be:	fba3 1302 	umull	r1, r3, r3, r2
 800b6c2:	099b      	lsrs	r3, r3, #6
 800b6c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b6c8:	fb01 f303 	mul.w	r3, r1, r3
 800b6cc:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800b6ce:	603b      	str	r3, [r7, #0]
 800b6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6d2:	3314      	adds	r3, #20
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f003 fc11 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6de:	69db      	ldr	r3, [r3, #28]
 800b6e0:	f107 0014 	add.w	r0, r7, #20
 800b6e4:	9306      	str	r3, [sp, #24]
 800b6e6:	9205      	str	r2, [sp, #20]
 800b6e8:	683a      	ldr	r2, [r7, #0]
 800b6ea:	9204      	str	r2, [sp, #16]
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	9203      	str	r2, [sp, #12]
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	9302      	str	r3, [sp, #8]
 800b6f4:	9601      	str	r6, [sp, #4]
 800b6f6:	9500      	str	r5, [sp, #0]
 800b6f8:	4623      	mov	r3, r4
 800b6fa:	4642      	mov	r2, r8
 800b6fc:	4936      	ldr	r1, [pc, #216]	; (800b7d8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 800b6fe:	f004 f931 	bl	800f964 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	3368      	adds	r3, #104	; 0x68
 800b708:	681c      	ldr	r4, [r3, #0]
 800b70a:	f107 0314 	add.w	r3, r7, #20
 800b70e:	4618      	mov	r0, r3
 800b710:	f003 fbf4 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800b714:	4602      	mov	r2, r0
 800b716:	f107 031c 	add.w	r3, r7, #28
 800b71a:	4611      	mov	r1, r2
 800b71c:	4618      	mov	r0, r3
 800b71e:	f003 f862 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800b722:	f107 031c 	add.w	r3, r7, #28
 800b726:	4619      	mov	r1, r3
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	47a0      	blx	r4
 800b72c:	f107 031c 	add.w	r3, r7, #28
 800b730:	4618      	mov	r0, r3
 800b732:	f003 fc10 	bl	800ef56 <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	691b      	ldr	r3, [r3, #16]
 800b73a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b73c:	6a12      	ldr	r2, [r2, #32]
 800b73e:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 800b740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d007      	beq.n	800b758 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	3388      	adds	r3, #136	; 0x88
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b752:	68f8      	ldr	r0, [r7, #12]
 800b754:	4798      	blx	r3
 800b756:	e017      	b.n	800b788 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 800b758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b75a:	7c1b      	ldrb	r3, [r3, #16]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d013      	beq.n	800b788 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	3368      	adds	r3, #104	; 0x68
 800b766:	681c      	ldr	r4, [r3, #0]
 800b768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b76c:	491b      	ldr	r1, [pc, #108]	; (800b7dc <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 800b76e:	4618      	mov	r0, r3
 800b770:	f003 f839 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800b774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b778:	4619      	mov	r1, r3
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	47a0      	blx	r4
 800b77e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b782:	4618      	mov	r0, r3
 800b784:	f003 fbe7 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	3368      	adds	r3, #104	; 0x68
 800b78e:	681c      	ldr	r4, [r3, #0]
 800b790:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b794:	4912      	ldr	r1, [pc, #72]	; (800b7e0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 800b796:	4618      	mov	r0, r3
 800b798:	f003 f825 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800b79c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	68f8      	ldr	r0, [r7, #12]
 800b7a4:	47a0      	blx	r4
 800b7a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f003 fbd3 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 800b7b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b4:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 800b7b6:	f107 0314 	add.w	r3, r7, #20
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f003 fbcb 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    while (cur) {
 800b7c0:	e749      	b.n	800b656 <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 800b7c2:	bf00      	nop
 800b7c4:	3738      	adds	r7, #56	; 0x38
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7cc:	080262f4 	.word	0x080262f4
 800b7d0:	08026434 	.word	0x08026434
 800b7d4:	10624dd3 	.word	0x10624dd3
 800b7d8:	08026438 	.word	0x08026438
 800b7dc:	08026494 	.word	0x08026494
 800b7e0:	080264a4 	.word	0x080264a4

0800b7e4 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 800b7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7e6:	b091      	sub	sp, #68	; 0x44
 800b7e8:	af02      	add	r7, sp, #8
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	68d9      	ldr	r1, [r3, #12]
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	3308      	adds	r3, #8
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f107 0210 	add.w	r2, r7, #16
 800b800:	4610      	mov	r0, r2
 800b802:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800b804:	f107 0310 	add.w	r3, r7, #16
 800b808:	4618      	mov	r0, r3
 800b80a:	f003 fb77 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800b80e:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	68da      	ldr	r2, [r3, #12]
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	3314      	adds	r3, #20
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4610      	mov	r0, r2
 800b820:	4798      	blx	r3
 800b822:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800b824:	461e      	mov	r6, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	3380      	adds	r3, #128	; 0x80
 800b82c:	681c      	ldr	r4, [r3, #0]
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	68d9      	ldr	r1, [r3, #12]
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	3318      	adds	r3, #24
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f107 0220 	add.w	r2, r7, #32
 800b840:	4610      	mov	r0, r2
 800b842:	4798      	blx	r3
 800b844:	f107 0318 	add.w	r3, r7, #24
 800b848:	f107 0220 	add.w	r2, r7, #32
 800b84c:	6879      	ldr	r1, [r7, #4]
 800b84e:	4618      	mov	r0, r3
 800b850:	47a0      	blx	r4
 800b852:	f107 0318 	add.w	r3, r7, #24
 800b856:	4618      	mov	r0, r3
 800b858:	f003 fb50 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800b85c:	4603      	mov	r3, r0
 800b85e:	f107 0008 	add.w	r0, r7, #8
 800b862:	9300      	str	r3, [sp, #0]
 800b864:	4633      	mov	r3, r6
 800b866:	462a      	mov	r2, r5
 800b868:	4924      	ldr	r1, [pc, #144]	; (800b8fc <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 800b86a:	f004 f87b 	bl	800f964 <_Z16StringFromFormatPKcz>
 800b86e:	f107 0318 	add.w	r3, r7, #24
 800b872:	4618      	mov	r0, r3
 800b874:	f003 fb6f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800b878:	f107 0320 	add.w	r3, r7, #32
 800b87c:	4618      	mov	r0, r3
 800b87e:	f003 fb6a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 800b882:	f107 0310 	add.w	r3, r7, #16
 800b886:	4618      	mov	r0, r3
 800b888:	f003 fb65 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	3368      	adds	r3, #104	; 0x68
 800b892:	681c      	ldr	r4, [r3, #0]
 800b894:	f107 0308 	add.w	r3, r7, #8
 800b898:	4618      	mov	r0, r3
 800b89a:	f003 fb2f 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b8a4:	4611      	mov	r1, r2
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f002 ff9d 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800b8ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	47a0      	blx	r4
 800b8b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f003 fb4b 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	3368      	adds	r3, #104	; 0x68
 800b8c6:	681c      	ldr	r4, [r3, #0]
 800b8c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b8cc:	490c      	ldr	r1, [pc, #48]	; (800b900 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f002 ff89 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800b8d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b8d8:	4619      	mov	r1, r3
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	47a0      	blx	r4
 800b8de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f003 fb37 	bl	800ef56 <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800b8e8:	f107 0308 	add.w	r3, r7, #8
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f003 fb32 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 800b8f2:	bf00      	nop
 800b8f4:	373c      	adds	r7, #60	; 0x3c
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	080264b4 	.word	0x080264b4
 800b900:	080264f0 	.word	0x080264f0

0800b904 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 800b904:	b590      	push	{r4, r7, lr}
 800b906:	b08d      	sub	sp, #52	; 0x34
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	3368      	adds	r3, #104	; 0x68
 800b912:	681c      	ldr	r4, [r3, #0]
 800b914:	f107 0308 	add.w	r3, r7, #8
 800b918:	4933      	ldr	r1, [pc, #204]	; (800b9e8 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 800b91a:	4618      	mov	r0, r3
 800b91c:	f002 ff63 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800b920:	f107 0308 	add.w	r3, r7, #8
 800b924:	4619      	mov	r1, r3
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	47a0      	blx	r4
 800b92a:	f107 0308 	add.w	r3, r7, #8
 800b92e:	4618      	mov	r0, r3
 800b930:	f003 fb11 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	3368      	adds	r3, #104	; 0x68
 800b93a:	681c      	ldr	r4, [r3, #0]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	3380      	adds	r3, #128	; 0x80
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	6912      	ldr	r2, [r2, #16]
 800b948:	3230      	adds	r2, #48	; 0x30
 800b94a:	f107 0010 	add.w	r0, r7, #16
 800b94e:	6879      	ldr	r1, [r7, #4]
 800b950:	4798      	blx	r3
 800b952:	f107 0310 	add.w	r3, r7, #16
 800b956:	4619      	mov	r1, r3
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	47a0      	blx	r4
 800b95c:	f107 0310 	add.w	r3, r7, #16
 800b960:	4618      	mov	r0, r3
 800b962:	f003 faf8 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	3368      	adds	r3, #104	; 0x68
 800b96c:	681c      	ldr	r4, [r3, #0]
 800b96e:	f107 0318 	add.w	r3, r7, #24
 800b972:	491e      	ldr	r1, [pc, #120]	; (800b9ec <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 800b974:	4618      	mov	r0, r3
 800b976:	f002 ff36 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800b97a:	f107 0318 	add.w	r3, r7, #24
 800b97e:	4619      	mov	r1, r3
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	47a0      	blx	r4
 800b984:	f107 0318 	add.w	r3, r7, #24
 800b988:	4618      	mov	r0, r3
 800b98a:	f003 fae4 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	3368      	adds	r3, #104	; 0x68
 800b994:	681c      	ldr	r4, [r3, #0]
 800b996:	f107 0320 	add.w	r3, r7, #32
 800b99a:	4915      	ldr	r1, [pc, #84]	; (800b9f0 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 800b99c:	4618      	mov	r0, r3
 800b99e:	f002 ff22 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800b9a2:	f107 0320 	add.w	r3, r7, #32
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	47a0      	blx	r4
 800b9ac:	f107 0320 	add.w	r3, r7, #32
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f003 fad0 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	3368      	adds	r3, #104	; 0x68
 800b9bc:	681c      	ldr	r4, [r3, #0]
 800b9be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b9c2:	490c      	ldr	r1, [pc, #48]	; (800b9f4 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f002 ff0e 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800b9ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	47a0      	blx	r4
 800b9d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f003 fabc 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 800b9de:	bf00      	nop
 800b9e0:	3734      	adds	r7, #52	; 0x34
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd90      	pop	{r4, r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	080264fc 	.word	0x080264fc
 800b9ec:	0802650c 	.word	0x0802650c
 800b9f0:	0802651c 	.word	0x0802651c
 800b9f4:	08026538 	.word	0x08026538

0800b9f8 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 800b9f8:	b590      	push	{r4, r7, lr}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	3360      	adds	r3, #96	; 0x60
 800ba06:	681c      	ldr	r4, [r3, #0]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	335c      	adds	r3, #92	; 0x5c
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	6912      	ldr	r2, [r2, #16]
 800ba14:	3214      	adds	r2, #20
 800ba16:	f107 0008 	add.w	r0, r7, #8
 800ba1a:	6879      	ldr	r1, [r7, #4]
 800ba1c:	4798      	blx	r3
 800ba1e:	f107 0308 	add.w	r3, r7, #8
 800ba22:	4619      	mov	r1, r3
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	47a0      	blx	r4
 800ba28:	f107 0308 	add.w	r3, r7, #8
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f003 fa92 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	3370      	adds	r3, #112	; 0x70
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	4798      	blx	r3
    writeTestSuiteSummary();
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	3374      	adds	r3, #116	; 0x74
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	4798      	blx	r3
    writeProperties();
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3378      	adds	r3, #120	; 0x78
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	4798      	blx	r3
    writeTestCases();
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	337c      	adds	r3, #124	; 0x7c
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	4798      	blx	r3
    writeFileEnding();
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	338c      	adds	r3, #140	; 0x8c
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	4798      	blx	r3
    closeFile();
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	336c      	adds	r3, #108	; 0x6c
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	4798      	blx	r3
}
 800ba7a:	bf00      	nop
 800ba7c:	3714      	adds	r7, #20
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd90      	pop	{r4, r7, pc}

0800ba82 <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 800ba82:	b480      	push	{r7}
 800ba84:	b083      	sub	sp, #12
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
 800ba8a:	6039      	str	r1, [r7, #0]
}
 800ba8c:	bf00      	nop
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	691b      	ldr	r3, [r3, #16]
 800baa6:	3330      	adds	r3, #48	; 0x30
 800baa8:	6839      	ldr	r1, [r7, #0]
 800baaa:	4618      	mov	r0, r3
 800baac:	f003 fae2 	bl	800f074 <_ZN12SimpleStringpLEPKc>
}
 800bab0:	bf00      	nop
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
}
 800bac2:	bf00      	nop
 800bac4:	370c      	adds	r7, #12
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr

0800bace <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 800bace:	b480      	push	{r7}
 800bad0:	b083      	sub	sp, #12
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	6078      	str	r0, [r7, #4]
 800bad6:	6039      	str	r1, [r7, #0]
}
 800bad8:	bf00      	nop
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
}
 800baec:	bf00      	nop
 800baee:	370c      	adds	r7, #12
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr

0800baf8 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 800baf8:	b590      	push	{r4, r7, lr}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	691b      	ldr	r3, [r3, #16]
 800bb06:	6a1b      	ldr	r3, [r3, #32]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d113      	bne.n	800bb36 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	685a      	ldr	r2, [r3, #4]
 800bb14:	3201      	adds	r2, #1
 800bb16:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 800bb18:	f240 1233 	movw	r2, #307	; 0x133
 800bb1c:	4908      	ldr	r1, [pc, #32]	; (800bb40 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 800bb1e:	2034      	movs	r0, #52	; 0x34
 800bb20:	f000 fa9e 	bl	800c060 <_ZnwjPKci>
 800bb24:	4604      	mov	r4, r0
 800bb26:	6839      	ldr	r1, [r7, #0]
 800bb28:	4620      	mov	r0, r4
 800bb2a:	f004 fd37 	bl	801059c <_ZN11TestFailureC1ERKS_>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	6a1b      	ldr	r3, [r3, #32]
 800bb34:	60dc      	str	r4, [r3, #12]
    }
}
 800bb36:	bf00      	nop
 800bb38:	370c      	adds	r7, #12
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd90      	pop	{r4, r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	080262f8 	.word	0x080262f8

0800bb44 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 800bb44:	b5b0      	push	{r4, r5, r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 800bb4e:	4b08      	ldr	r3, [pc, #32]	; (800bb70 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 800bb50:	681d      	ldr	r5, [r3, #0]
 800bb52:	6838      	ldr	r0, [r7, #0]
 800bb54:	f003 f9d2 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	691c      	ldr	r4, [r3, #16]
 800bb5e:	4905      	ldr	r1, [pc, #20]	; (800bb74 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 800bb60:	4610      	mov	r0, r2
 800bb62:	47a8      	blx	r5
 800bb64:	4603      	mov	r3, r0
 800bb66:	6263      	str	r3, [r4, #36]	; 0x24
}
 800bb68:	bf00      	nop
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bdb0      	pop	{r4, r5, r7, pc}
 800bb70:	200000b4 	.word	0x200000b4
 800bb74:	08026548 	.word	0x08026548

0800bb78 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 800bb78:	b590      	push	{r4, r7, lr}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 800bb82:	4b08      	ldr	r3, [pc, #32]	; (800bba4 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 800bb84:	681c      	ldr	r4, [r3, #0]
 800bb86:	6838      	ldr	r0, [r7, #0]
 800bb88:	f003 f9b8 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	691b      	ldr	r3, [r3, #16]
 800bb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb94:	4619      	mov	r1, r3
 800bb96:	4610      	mov	r0, r2
 800bb98:	47a0      	blx	r4
}
 800bb9a:	bf00      	nop
 800bb9c:	370c      	adds	r7, #12
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd90      	pop	{r4, r7, pc}
 800bba2:	bf00      	nop
 800bba4:	200000b8 	.word	0x200000b8

0800bba8 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 800bbb0:	4b05      	ldr	r3, [pc, #20]	; (800bbc8 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	6912      	ldr	r2, [r2, #16]
 800bbb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bbba:	4610      	mov	r0, r2
 800bbbc:	4798      	blx	r3
}
 800bbbe:	bf00      	nop
 800bbc0:	3708      	adds	r7, #8
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	200000bc 	.word	0x200000bc

0800bbcc <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	607a      	str	r2, [r7, #4]
 800bbd8:	603b      	str	r3, [r7, #0]
        return false;
 800bbda:	2300      	movs	r3, #0
    }
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3714      	adds	r7, #20
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
    {
 800bbf0:	4a04      	ldr	r2, [pc, #16]	; (800bc04 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	601a      	str	r2, [r3, #0]
    }
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr
 800bc04:	0802a6dc 	.word	0x0802a6dc

0800bc08 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
    }
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f7ff ffe9 	bl	800bbe8 <_ZN17MemoryLeakFailureD1Ev>
 800bc16:	2104      	movs	r1, #4
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 fa35 	bl	800c088 <_ZdlPvj>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	4618      	mov	r0, r3
 800bc22:	3708      	adds	r7, #8
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 800bc28:	b590      	push	{r4, r7, lr}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	687c      	ldr	r4, [r7, #4]
 800bc32:	f000 fc71 	bl	800c518 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800bc36:	4603      	mov	r3, r0
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f00c ff6c 	bl	8018b16 <_ZN18MemoryLeakDetector8getMutexEv>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	4619      	mov	r1, r3
 800bc42:	4620      	mov	r0, r4
 800bc44:	f002 fb24 	bl	800e290 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	370c      	adds	r7, #12
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd90      	pop	{r4, r7, pc}

0800bc52 <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b082      	sub	sp, #8
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f002 fb29 	bl	800e2b4 <_ZN15ScopedMutexLockD1Ev>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4618      	mov	r0, r3
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 800bc6c:	b590      	push	{r4, r7, lr}
 800bc6e:	b087      	sub	sp, #28
 800bc70:	af02      	add	r7, sp, #8
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 800bc78:	f000 fc4e 	bl	800c518 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	f006 f8df 	bl	8011e40 <_Z25getCurrentMallocAllocatorv>
 800bc82:	4601      	mov	r1, r0
 800bc84:	2301      	movs	r3, #1
 800bc86:	9301      	str	r3, [sp, #4]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	9300      	str	r3, [sp, #0]
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	4620      	mov	r0, r4
 800bc92:	f00d f983 	bl	8018f9c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800bc96:	4603      	mov	r3, r0
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3714      	adds	r7, #20
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd90      	pop	{r4, r7, pc}

0800bca0 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 800bca0:	b590      	push	{r4, r7, lr}
 800bca2:	b087      	sub	sp, #28
 800bca4:	af02      	add	r7, sp, #8
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 800bcac:	f000 fc34 	bl	800c518 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	68f9      	ldr	r1, [r7, #12]
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f00c ffdd 	bl	8018c74 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 800bcba:	f000 fc2d 	bl	800c518 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800bcbe:	4604      	mov	r4, r0
 800bcc0:	f006 f8be 	bl	8011e40 <_Z25getCurrentMallocAllocatorv>
 800bcc4:	4601      	mov	r1, r0
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	9301      	str	r3, [sp, #4]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	9300      	str	r3, [sp, #0]
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	f00d f996 	bl	8019004 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 800bcd8:	bf00      	nop
 800bcda:	3714      	adds	r7, #20
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd90      	pop	{r4, r7, pc}

0800bce0 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 800bce0:	b590      	push	{r4, r7, lr}
 800bce2:	b089      	sub	sp, #36	; 0x24
 800bce4:	af04      	add	r7, sp, #16
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	607a      	str	r2, [r7, #4]
 800bcec:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 800bcee:	f000 fc13 	bl	800c518 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	f006 f8a4 	bl	8011e40 <_Z25getCurrentMallocAllocatorv>
 800bcf8:	4601      	mov	r1, r0
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	9302      	str	r3, [sp, #8]
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	9301      	str	r3, [sp, #4]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	9300      	str	r3, [sp, #0]
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	68fa      	ldr	r2, [r7, #12]
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	f00d f9de 	bl	80190cc <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 800bd10:	4603      	mov	r3, r0
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3714      	adds	r7, #20
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd90      	pop	{r4, r7, pc}
	...

0800bd1c <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 800bd28:	4b04      	ldr	r3, [pc, #16]	; (800bd3c <_ZL13normal_mallocjPKcj+0x20>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	4798      	blx	r3
 800bd30:	4603      	mov	r3, r0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3710      	adds	r7, #16
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	200000c8 	.word	0x200000c8

0800bd40 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
 800bd4c:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 800bd4e:	4b05      	ldr	r3, [pc, #20]	; (800bd64 <_ZL14normal_reallocPvjPKcj+0x24>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	68b9      	ldr	r1, [r7, #8]
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	4798      	blx	r3
 800bd58:	4603      	mov	r3, r0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	200000cc 	.word	0x200000cc

0800bd68 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 800bd74:	4b03      	ldr	r3, [pc, #12]	; (800bd84 <_ZL11normal_freePvPKcj+0x1c>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	68f8      	ldr	r0, [r7, #12]
 800bd7a:	4798      	blx	r3
}
 800bd7c:	bf00      	nop
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	200000d0 	.word	0x200000d0

0800bd88 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800bd88:	b590      	push	{r4, r7, lr}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 800bd90:	f107 0308 	add.w	r3, r7, #8
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7ff ff47 	bl	800bc28 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800bd9a:	f000 fbbd 	bl	800c518 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800bd9e:	4604      	mov	r4, r0
 800bda0:	f005 ff9e 	bl	8011ce0 <_Z22getCurrentNewAllocatorv>
 800bda4:	4601      	mov	r1, r0
 800bda6:	2300      	movs	r3, #0
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f00d f864 	bl	8018e78 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800bdb0:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800bdb2:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 800bdb4:	f107 0308 	add.w	r3, r7, #8
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7ff ff4a 	bl	800bc52 <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 800bdbe:	4623      	mov	r3, r4
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3714      	adds	r7, #20
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd90      	pop	{r4, r7, pc}

0800bdc8 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800bdc8:	b590      	push	{r4, r7, lr}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800bdd0:	f000 fba2 	bl	800c518 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	f005 ff83 	bl	8011ce0 <_Z22getCurrentNewAllocatorv>
 800bdda:	4601      	mov	r1, r0
 800bddc:	2300      	movs	r3, #0
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	4620      	mov	r0, r4
 800bde2:	f00d f849 	bl	8018e78 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800bde6:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800bde8:	68fb      	ldr	r3, [r7, #12]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3714      	adds	r7, #20
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd90      	pop	{r4, r7, pc}

0800bdf2 <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800bdf2:	b590      	push	{r4, r7, lr}
 800bdf4:	b083      	sub	sp, #12
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800bdfa:	f000 fb8d 	bl	800c518 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800bdfe:	4604      	mov	r4, r0
 800be00:	f005 ff6e 	bl	8011ce0 <_Z22getCurrentNewAllocatorv>
 800be04:	4601      	mov	r1, r0
 800be06:	2300      	movs	r3, #0
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	4620      	mov	r0, r4
 800be0c:	f00d f834 	bl	8018e78 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800be10:	4603      	mov	r3, r0
}
 800be12:	4618      	mov	r0, r3
 800be14:	370c      	adds	r7, #12
 800be16:	46bd      	mov	sp, r7
 800be18:	bd90      	pop	{r4, r7, pc}

0800be1a <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800be1a:	b590      	push	{r4, r7, lr}
 800be1c:	b089      	sub	sp, #36	; 0x24
 800be1e:	af02      	add	r7, sp, #8
 800be20:	60f8      	str	r0, [r7, #12]
 800be22:	60b9      	str	r1, [r7, #8]
 800be24:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 800be26:	f000 fb77 	bl	800c518 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800be2a:	4604      	mov	r4, r0
 800be2c:	f005 ff58 	bl	8011ce0 <_Z22getCurrentNewAllocatorv>
 800be30:	4601      	mov	r1, r0
 800be32:	2300      	movs	r3, #0
 800be34:	9301      	str	r3, [sp, #4]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	9300      	str	r3, [sp, #0]
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	68fa      	ldr	r2, [r7, #12]
 800be3e:	4620      	mov	r0, r4
 800be40:	f00d f8ac 	bl	8018f9c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800be44:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800be46:	697b      	ldr	r3, [r7, #20]
}
 800be48:	4618      	mov	r0, r3
 800be4a:	371c      	adds	r7, #28
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd90      	pop	{r4, r7, pc}

0800be50 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800be50:	b590      	push	{r4, r7, lr}
 800be52:	b085      	sub	sp, #20
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800be58:	f000 fb5e 	bl	800c518 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800be5c:	4604      	mov	r4, r0
 800be5e:	f005 ff97 	bl	8011d90 <_Z27getCurrentNewArrayAllocatorv>
 800be62:	4601      	mov	r1, r0
 800be64:	2300      	movs	r3, #0
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	4620      	mov	r0, r4
 800be6a:	f00d f805 	bl	8018e78 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800be6e:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800be70:	68fb      	ldr	r3, [r7, #12]
}
 800be72:	4618      	mov	r0, r3
 800be74:	3714      	adds	r7, #20
 800be76:	46bd      	mov	sp, r7
 800be78:	bd90      	pop	{r4, r7, pc}

0800be7a <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800be7a:	b590      	push	{r4, r7, lr}
 800be7c:	b083      	sub	sp, #12
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800be82:	f000 fb49 	bl	800c518 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800be86:	4604      	mov	r4, r0
 800be88:	f005 ff82 	bl	8011d90 <_Z27getCurrentNewArrayAllocatorv>
 800be8c:	4601      	mov	r1, r0
 800be8e:	2300      	movs	r3, #0
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	4620      	mov	r0, r4
 800be94:	f00c fff0 	bl	8018e78 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800be98:	4603      	mov	r3, r0
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	370c      	adds	r7, #12
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd90      	pop	{r4, r7, pc}

0800bea2 <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800bea2:	b590      	push	{r4, r7, lr}
 800bea4:	b089      	sub	sp, #36	; 0x24
 800bea6:	af02      	add	r7, sp, #8
 800bea8:	60f8      	str	r0, [r7, #12]
 800beaa:	60b9      	str	r1, [r7, #8]
 800beac:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 800beae:	f000 fb33 	bl	800c518 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800beb2:	4604      	mov	r4, r0
 800beb4:	f005 ff6c 	bl	8011d90 <_Z27getCurrentNewArrayAllocatorv>
 800beb8:	4601      	mov	r1, r0
 800beba:	2300      	movs	r3, #0
 800bebc:	9301      	str	r3, [sp, #4]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	9300      	str	r3, [sp, #0]
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	68fa      	ldr	r2, [r7, #12]
 800bec6:	4620      	mov	r0, r4
 800bec8:	f00d f868 	bl	8018f9c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800becc:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800bece:	697b      	ldr	r3, [r7, #20]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	371c      	adds	r7, #28
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd90      	pop	{r4, r7, pc}

0800bed8 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 800bed8:	b590      	push	{r4, r7, lr}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800bee0:	f000 fb1a 	bl	800c518 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800bee4:	4603      	mov	r3, r0
 800bee6:	6879      	ldr	r1, [r7, #4]
 800bee8:	4618      	mov	r0, r3
 800beea:	f00c fec3 	bl	8018c74 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 800beee:	f000 fb13 	bl	800c518 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800bef2:	4604      	mov	r4, r0
 800bef4:	f005 fef4 	bl	8011ce0 <_Z22getCurrentNewAllocatorv>
 800bef8:	4601      	mov	r1, r0
 800befa:	2300      	movs	r3, #0
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	4620      	mov	r0, r4
 800bf00:	f00d f8ca 	bl	8019098 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800bf04:	bf00      	nop
 800bf06:	370c      	adds	r7, #12
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd90      	pop	{r4, r7, pc}

0800bf0c <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 800bf0c:	b590      	push	{r4, r7, lr}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800bf14:	f000 fb00 	bl	800c518 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	6879      	ldr	r1, [r7, #4]
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f00c fea9 	bl	8018c74 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 800bf22:	f000 faf9 	bl	800c518 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800bf26:	4604      	mov	r4, r0
 800bf28:	f005 ff32 	bl	8011d90 <_Z27getCurrentNewArrayAllocatorv>
 800bf2c:	4601      	mov	r1, r0
 800bf2e:	2300      	movs	r3, #0
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	4620      	mov	r0, r4
 800bf34:	f00d f8b0 	bl	8019098 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800bf38:	bf00      	nop
 800bf3a:	370c      	adds	r7, #12
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd90      	pop	{r4, r7, pc}

0800bf40 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800bf48:	4b04      	ldr	r3, [pc, #16]	; (800bf5c <_ZL19normal_operator_newj+0x1c>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	4798      	blx	r3
 800bf50:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800bf52:	68fb      	ldr	r3, [r7, #12]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3710      	adds	r7, #16
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	200000c8 	.word	0x200000c8

0800bf60 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800bf68:	4b04      	ldr	r3, [pc, #16]	; (800bf7c <_ZL27normal_operator_new_nothrowj+0x1c>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	4798      	blx	r3
 800bf70:	4603      	mov	r3, r0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	200000c8 	.word	0x200000c8

0800bf80 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800bf8c:	4b04      	ldr	r3, [pc, #16]	; (800bfa0 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	4798      	blx	r3
 800bf94:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800bf96:	697b      	ldr	r3, [r7, #20]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3718      	adds	r7, #24
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	200000c8 	.word	0x200000c8

0800bfa4 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800bfac:	4b04      	ldr	r3, [pc, #16]	; (800bfc0 <_ZL25normal_operator_new_arrayj+0x1c>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	4798      	blx	r3
 800bfb4:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	200000c8 	.word	0x200000c8

0800bfc4 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800bfcc:	4b04      	ldr	r3, [pc, #16]	; (800bfe0 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	4798      	blx	r3
 800bfd4:	4603      	mov	r3, r0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3708      	adds	r7, #8
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	200000c8 	.word	0x200000c8

0800bfe4 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b086      	sub	sp, #24
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800bff0:	4b04      	ldr	r3, [pc, #16]	; (800c004 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	4798      	blx	r3
 800bff8:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800bffa:	697b      	ldr	r3, [r7, #20]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3718      	adds	r7, #24
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	200000c8 	.word	0x200000c8

0800c008 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800c010:	4b03      	ldr	r3, [pc, #12]	; (800c020 <_ZL22normal_operator_deletePv+0x18>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	4798      	blx	r3
}
 800c018:	bf00      	nop
 800c01a:	3708      	adds	r7, #8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	200000d0 	.word	0x200000d0

0800c024 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800c02c:	4b03      	ldr	r3, [pc, #12]	; (800c03c <_ZL28normal_operator_delete_arrayPv+0x18>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	4798      	blx	r3
}
 800c034:	bf00      	nop
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	200000d0 	.word	0x200000d0

0800c040 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 800c048:	4b04      	ldr	r3, [pc, #16]	; (800c05c <_Znwj+0x1c>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	4798      	blx	r3
 800c050:	4603      	mov	r3, r0
}
 800c052:	4618      	mov	r0, r3
 800c054:	3708      	adds	r7, #8
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	2000002c 	.word	0x2000002c

0800c060 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 800c06c:	4b05      	ldr	r3, [pc, #20]	; (800c084 <_ZnwjPKci+0x24>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	68b9      	ldr	r1, [r7, #8]
 800c074:	68f8      	ldr	r0, [r7, #12]
 800c076:	4798      	blx	r3
 800c078:	4603      	mov	r3, r0
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	20000034 	.word	0x20000034

0800c088 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 800c092:	4b04      	ldr	r3, [pc, #16]	; (800c0a4 <_ZdlPvj+0x1c>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	4798      	blx	r3
}
 800c09a:	bf00      	nop
 800c09c:	3708      	adds	r7, #8
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	20000044 	.word	0x20000044

0800c0a8 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 800c0b4:	4b05      	ldr	r3, [pc, #20]	; (800c0cc <_ZnajPKci+0x24>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	68b9      	ldr	r1, [r7, #8]
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	4798      	blx	r3
 800c0c0:	4603      	mov	r3, r0
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3710      	adds	r7, #16
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	20000040 	.word	0x20000040

0800c0d0 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 800c0d8:	4b03      	ldr	r3, [pc, #12]	; (800c0e8 <_ZdaPv+0x18>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	4798      	blx	r3
}
 800c0e0:	bf00      	nop
 800c0e2:	3708      	adds	r7, #8
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	20000048 	.word	0x20000048

0800c0ec <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 800c0f6:	4b04      	ldr	r3, [pc, #16]	; (800c108 <_ZdaPvj+0x1c>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	4798      	blx	r3
}
 800c0fe:	bf00      	nop
 800c100:	3708      	adds	r7, #8
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	20000048 	.word	0x20000048

0800c10c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 800c10c:	b480      	push	{r7}
 800c10e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 800c110:	4b12      	ldr	r3, [pc, #72]	; (800c15c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 800c112:	4a13      	ldr	r2, [pc, #76]	; (800c160 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 800c114:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 800c116:	4b13      	ldr	r3, [pc, #76]	; (800c164 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 800c118:	4a13      	ldr	r2, [pc, #76]	; (800c168 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 800c11a:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 800c11c:	4b13      	ldr	r3, [pc, #76]	; (800c16c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 800c11e:	4a14      	ldr	r2, [pc, #80]	; (800c170 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 800c120:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 800c122:	4b14      	ldr	r3, [pc, #80]	; (800c174 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 800c124:	4a14      	ldr	r2, [pc, #80]	; (800c178 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 800c126:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 800c128:	4b14      	ldr	r3, [pc, #80]	; (800c17c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 800c12a:	4a15      	ldr	r2, [pc, #84]	; (800c180 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 800c12c:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 800c12e:	4b15      	ldr	r3, [pc, #84]	; (800c184 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 800c130:	4a15      	ldr	r2, [pc, #84]	; (800c188 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 800c132:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 800c134:	4b15      	ldr	r3, [pc, #84]	; (800c18c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 800c136:	4a16      	ldr	r2, [pc, #88]	; (800c190 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 800c138:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 800c13a:	4b16      	ldr	r3, [pc, #88]	; (800c194 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 800c13c:	4a16      	ldr	r2, [pc, #88]	; (800c198 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 800c13e:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 800c140:	4b16      	ldr	r3, [pc, #88]	; (800c19c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 800c142:	4a17      	ldr	r2, [pc, #92]	; (800c1a0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 800c144:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 800c146:	4b17      	ldr	r3, [pc, #92]	; (800c1a4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 800c148:	4a17      	ldr	r2, [pc, #92]	; (800c1a8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 800c14a:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 800c14c:	4b17      	ldr	r3, [pc, #92]	; (800c1ac <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 800c14e:	4a18      	ldr	r2, [pc, #96]	; (800c1b0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 800c150:	601a      	str	r2, [r3, #0]

#endif
}
 800c152:	bf00      	nop
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr
 800c15c:	2000002c 	.word	0x2000002c
 800c160:	0800bf41 	.word	0x0800bf41
 800c164:	20000030 	.word	0x20000030
 800c168:	0800bf61 	.word	0x0800bf61
 800c16c:	20000034 	.word	0x20000034
 800c170:	0800bf81 	.word	0x0800bf81
 800c174:	20000038 	.word	0x20000038
 800c178:	0800bfa5 	.word	0x0800bfa5
 800c17c:	2000003c 	.word	0x2000003c
 800c180:	0800bfc5 	.word	0x0800bfc5
 800c184:	20000040 	.word	0x20000040
 800c188:	0800bfe5 	.word	0x0800bfe5
 800c18c:	20000044 	.word	0x20000044
 800c190:	0800c009 	.word	0x0800c009
 800c194:	20000048 	.word	0x20000048
 800c198:	0800c025 	.word	0x0800c025
 800c19c:	20000014 	.word	0x20000014
 800c1a0:	0800bd1d 	.word	0x0800bd1d
 800c1a4:	2000001c 	.word	0x2000001c
 800c1a8:	0800bd41 	.word	0x0800bd41
 800c1ac:	20000018 	.word	0x20000018
 800c1b0:	0800bd69 	.word	0x0800bd69

0800c1b4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 800c1b8:	4b08      	ldr	r3, [pc, #32]	; (800c1dc <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a08      	ldr	r2, [pc, #32]	; (800c1e0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d004      	beq.n	800c1cc <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 800c1c2:	4b06      	ldr	r3, [pc, #24]	; (800c1dc <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a07      	ldr	r2, [pc, #28]	; (800c1e4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d101      	bne.n	800c1d0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	e000      	b.n	800c1d2 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 800c1d0:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr
 800c1dc:	2000002c 	.word	0x2000002c
 800c1e0:	0800bdc9 	.word	0x0800bdc9
 800c1e4:	0800bd89 	.word	0x0800bd89

0800c1e8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 800c1ec:	4b1f      	ldr	r3, [pc, #124]	; (800c26c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	4a1e      	ldr	r2, [pc, #120]	; (800c26c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800c1f4:	6013      	str	r3, [r2, #0]
 800c1f6:	4b1d      	ldr	r3, [pc, #116]	; (800c26c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	bfcc      	ite	gt
 800c1fe:	2301      	movgt	r3, #1
 800c200:	2300      	movle	r3, #0
 800c202:	b2db      	uxtb	r3, r3
 800c204:	2b00      	cmp	r3, #0
 800c206:	d12e      	bne.n	800c266 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 800c208:	4b19      	ldr	r3, [pc, #100]	; (800c270 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4a19      	ldr	r2, [pc, #100]	; (800c274 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 800c20e:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 800c210:	4b19      	ldr	r3, [pc, #100]	; (800c278 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a19      	ldr	r2, [pc, #100]	; (800c27c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 800c216:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 800c218:	4b19      	ldr	r3, [pc, #100]	; (800c280 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a19      	ldr	r2, [pc, #100]	; (800c284 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 800c21e:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 800c220:	4b19      	ldr	r3, [pc, #100]	; (800c288 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4a19      	ldr	r2, [pc, #100]	; (800c28c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 800c226:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 800c228:	4b19      	ldr	r3, [pc, #100]	; (800c290 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a19      	ldr	r2, [pc, #100]	; (800c294 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 800c22e:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 800c230:	4b19      	ldr	r3, [pc, #100]	; (800c298 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4a19      	ldr	r2, [pc, #100]	; (800c29c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 800c236:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 800c238:	4b19      	ldr	r3, [pc, #100]	; (800c2a0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a19      	ldr	r2, [pc, #100]	; (800c2a4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 800c23e:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 800c240:	4b19      	ldr	r3, [pc, #100]	; (800c2a8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4a19      	ldr	r2, [pc, #100]	; (800c2ac <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 800c246:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 800c248:	4b19      	ldr	r3, [pc, #100]	; (800c2b0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a19      	ldr	r2, [pc, #100]	; (800c2b4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 800c24e:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 800c250:	4b19      	ldr	r3, [pc, #100]	; (800c2b8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4a19      	ldr	r2, [pc, #100]	; (800c2bc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 800c256:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 800c258:	4b19      	ldr	r3, [pc, #100]	; (800c2c0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4a19      	ldr	r2, [pc, #100]	; (800c2c4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 800c25e:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 800c260:	f7ff ff54 	bl	800c10c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 800c264:	e000      	b.n	800c268 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 800c266:	bf00      	nop
#endif
}
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	2000092c 	.word	0x2000092c
 800c270:	2000002c 	.word	0x2000002c
 800c274:	2000004c 	.word	0x2000004c
 800c278:	20000030 	.word	0x20000030
 800c27c:	20000050 	.word	0x20000050
 800c280:	20000034 	.word	0x20000034
 800c284:	20000054 	.word	0x20000054
 800c288:	20000038 	.word	0x20000038
 800c28c:	20000058 	.word	0x20000058
 800c290:	2000003c 	.word	0x2000003c
 800c294:	2000005c 	.word	0x2000005c
 800c298:	20000040 	.word	0x20000040
 800c29c:	20000060 	.word	0x20000060
 800c2a0:	20000044 	.word	0x20000044
 800c2a4:	20000064 	.word	0x20000064
 800c2a8:	20000048 	.word	0x20000048
 800c2ac:	20000068 	.word	0x20000068
 800c2b0:	20000014 	.word	0x20000014
 800c2b4:	20000020 	.word	0x20000020
 800c2b8:	2000001c 	.word	0x2000001c
 800c2bc:	20000028 	.word	0x20000028
 800c2c0:	20000018 	.word	0x20000018
 800c2c4:	20000024 	.word	0x20000024

0800c2c8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 800c2cc:	4b1f      	ldr	r3, [pc, #124]	; (800c34c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	4a1e      	ldr	r2, [pc, #120]	; (800c34c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800c2d4:	6013      	str	r3, [r2, #0]
 800c2d6:	4b1d      	ldr	r3, [pc, #116]	; (800c34c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	bfcc      	ite	gt
 800c2de:	2301      	movgt	r3, #1
 800c2e0:	2300      	movle	r3, #0
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d12c      	bne.n	800c342 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 800c2e8:	4b19      	ldr	r3, [pc, #100]	; (800c350 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a19      	ldr	r2, [pc, #100]	; (800c354 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 800c2ee:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 800c2f0:	4b19      	ldr	r3, [pc, #100]	; (800c358 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4a19      	ldr	r2, [pc, #100]	; (800c35c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 800c2f6:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 800c2f8:	4b19      	ldr	r3, [pc, #100]	; (800c360 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4a19      	ldr	r2, [pc, #100]	; (800c364 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 800c2fe:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 800c300:	4b19      	ldr	r3, [pc, #100]	; (800c368 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a19      	ldr	r2, [pc, #100]	; (800c36c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 800c306:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 800c308:	4b19      	ldr	r3, [pc, #100]	; (800c370 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a19      	ldr	r2, [pc, #100]	; (800c374 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 800c30e:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 800c310:	4b19      	ldr	r3, [pc, #100]	; (800c378 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a19      	ldr	r2, [pc, #100]	; (800c37c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 800c316:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 800c318:	4b19      	ldr	r3, [pc, #100]	; (800c380 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a19      	ldr	r2, [pc, #100]	; (800c384 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 800c31e:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 800c320:	4b19      	ldr	r3, [pc, #100]	; (800c388 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a19      	ldr	r2, [pc, #100]	; (800c38c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 800c326:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 800c328:	4b19      	ldr	r3, [pc, #100]	; (800c390 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a19      	ldr	r2, [pc, #100]	; (800c394 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 800c32e:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 800c330:	4b19      	ldr	r3, [pc, #100]	; (800c398 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4a19      	ldr	r2, [pc, #100]	; (800c39c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 800c336:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 800c338:	4b19      	ldr	r3, [pc, #100]	; (800c3a0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a19      	ldr	r2, [pc, #100]	; (800c3a4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 800c33e:	6013      	str	r3, [r2, #0]
 800c340:	e000      	b.n	800c344 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 800c342:	bf00      	nop
#endif
}
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr
 800c34c:	2000092c 	.word	0x2000092c
 800c350:	2000004c 	.word	0x2000004c
 800c354:	2000002c 	.word	0x2000002c
 800c358:	20000050 	.word	0x20000050
 800c35c:	20000030 	.word	0x20000030
 800c360:	20000054 	.word	0x20000054
 800c364:	20000034 	.word	0x20000034
 800c368:	20000058 	.word	0x20000058
 800c36c:	20000038 	.word	0x20000038
 800c370:	2000005c 	.word	0x2000005c
 800c374:	2000003c 	.word	0x2000003c
 800c378:	20000060 	.word	0x20000060
 800c37c:	20000040 	.word	0x20000040
 800c380:	20000064 	.word	0x20000064
 800c384:	20000044 	.word	0x20000044
 800c388:	20000068 	.word	0x20000068
 800c38c:	20000048 	.word	0x20000048
 800c390:	20000020 	.word	0x20000020
 800c394:	20000014 	.word	0x20000014
 800c398:	20000028 	.word	0x20000028
 800c39c:	2000001c 	.word	0x2000001c
 800c3a0:	20000024 	.word	0x20000024
 800c3a4:	20000018 	.word	0x20000018

0800c3a8 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
    {
 800c3b0:	4a05      	ldr	r2, [pc, #20]	; (800c3c8 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	601a      	str	r2, [r3, #0]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7ff fc15 	bl	800bbe8 <_ZN17MemoryLeakFailureD1Ev>
    }
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3708      	adds	r7, #8
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	0802a6c8 	.word	0x0802a6c8

0800c3cc <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
    }
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f7ff ffe7 	bl	800c3a8 <_ZN25MemoryLeakWarningReporterD1Ev>
 800c3da:	2104      	movs	r1, #4
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f7ff fe53 	bl	800c088 <_ZdlPvj>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3708      	adds	r7, #8
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	4a04      	ldr	r2, [pc, #16]	; (800c408 <_ZN14TestTerminatorC1Ev+0x1c>)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	601a      	str	r2, [r3, #0]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	370c      	adds	r7, #12
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr
 800c408:	0802b074 	.word	0x0802b074

0800c40c <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4618      	mov	r0, r3
 800c418:	f7ff ffe8 	bl	800c3ec <_ZN14TestTerminatorC1Ev>
 800c41c:	4a03      	ldr	r2, [pc, #12]	; (800c42c <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	601a      	str	r2, [r3, #0]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	4618      	mov	r0, r3
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	0802b04c 	.word	0x0802b04c

0800c430 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 800c430:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c432:	b099      	sub	sp, #100	; 0x64
 800c434:	af02      	add	r7, sp, #8
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 800c43a:	f009 fdb7 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 800c43e:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 800c440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	339c      	adds	r3, #156	; 0x9c
 800c446:	681c      	ldr	r4, [r3, #0]
 800c448:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c44c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c44e:	4618      	mov	r0, r3
 800c450:	f008 fbc4 	bl	8014bdc <_ZNK10UtestShell7getNameEv>
 800c454:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c458:	4618      	mov	r0, r3
 800c45a:	f002 fd4f 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800c45e:	4605      	mov	r5, r0
 800c460:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c462:	f008 fc9b 	bl	8014d9c <_ZNK10UtestShell13getLineNumberEv>
 800c466:	4606      	mov	r6, r0
 800c468:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c46c:	6839      	ldr	r1, [r7, #0]
 800c46e:	4618      	mov	r0, r3
 800c470:	f002 f9b9 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800c474:	f107 000c 	add.w	r0, r7, #12
 800c478:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c47c:	9300      	str	r3, [sp, #0]
 800c47e:	4633      	mov	r3, r6
 800c480:	462a      	mov	r2, r5
 800c482:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c484:	f004 fd14 	bl	8010eb0 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800c488:	2300      	movs	r3, #0
 800c48a:	653b      	str	r3, [r7, #80]	; 0x50
 800c48c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c490:	4618      	mov	r0, r3
 800c492:	f7ff ffbb 	bl	800c40c <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800c496:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800c49a:	f107 030c 	add.w	r3, r7, #12
 800c49e:	4619      	mov	r1, r3
 800c4a0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c4a2:	47a0      	blx	r4
 800c4a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f009 fe79 	bl	80161a0 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800c4ae:	f107 030c 	add.w	r3, r7, #12
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f000 f9ac 	bl	800c810 <_ZN11FailFailureD1Ev>
 800c4b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f002 fd4a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800c4c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f002 fd45 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 800c4cc:	bf00      	nop
 800c4ce:	375c      	adds	r7, #92	; 0x5c
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c4d4 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	4a04      	ldr	r2, [pc, #16]	; (800c4f0 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	601a      	str	r2, [r3, #0]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr
 800c4f0:	0802a6dc 	.word	0x0802a6dc

0800c4f4 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b082      	sub	sp, #8
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7ff ffe8 	bl	800c4d4 <_ZN17MemoryLeakFailureC1Ev>
 800c504:	4a03      	ldr	r2, [pc, #12]	; (800c514 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	601a      	str	r2, [r3, #0]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4618      	mov	r0, r3
 800c50e:	3708      	adds	r7, #8
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	0802a6c8 	.word	0x0802a6c8

0800c518 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 800c518:	b598      	push	{r3, r4, r7, lr}
 800c51a:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 800c51c:	4b11      	ldr	r3, [pc, #68]	; (800c564 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d11b      	bne.n	800c55c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 800c524:	f7ff fe60 	bl	800c1e8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 800c528:	2004      	movs	r0, #4
 800c52a:	f7ff fd89 	bl	800c040 <_Znwj>
 800c52e:	4603      	mov	r3, r0
 800c530:	461c      	mov	r4, r3
 800c532:	4620      	mov	r0, r4
 800c534:	f7ff ffde 	bl	800c4f4 <_ZN25MemoryLeakWarningReporterC1Ev>
 800c538:	4b0b      	ldr	r3, [pc, #44]	; (800c568 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800c53a:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 800c53c:	f241 1050 	movw	r0, #4432	; 0x1150
 800c540:	f7ff fd7e 	bl	800c040 <_Znwj>
 800c544:	4603      	mov	r3, r0
 800c546:	461c      	mov	r4, r3
 800c548:	4b07      	ldr	r3, [pc, #28]	; (800c568 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4619      	mov	r1, r3
 800c54e:	4620      	mov	r0, r4
 800c550:	f00c fa3e 	bl	80189d0 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 800c554:	4b03      	ldr	r3, [pc, #12]	; (800c564 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800c556:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 800c558:	f7ff feb6 	bl	800c2c8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 800c55c:	4b01      	ldr	r3, [pc, #4]	; (800c564 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800c55e:	681b      	ldr	r3, [r3, #0]
}
 800c560:	4618      	mov	r0, r3
 800c562:	bd98      	pop	{r3, r4, r7, pc}
 800c564:	20000934 	.word	0x20000934
 800c568:	20000930 	.word	0x20000930

0800c56c <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	460b      	mov	r3, r1
 800c576:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	78fa      	ldrb	r2, [r7, #3]
 800c57c:	765a      	strb	r2, [r3, #25]
}
 800c57e:	bf00      	nop
 800c580:	370c      	adds	r7, #12
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr
	...

0800c58c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 800c590:	f7ff fdbc 	bl	800c10c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 800c594:	4b0b      	ldr	r3, [pc, #44]	; (800c5c4 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d004      	beq.n	800c5a6 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	3204      	adds	r2, #4
 800c5a0:	6812      	ldr	r2, [r2, #0]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	4790      	blx	r2
    delete globalReporter;
 800c5a6:	4b08      	ldr	r3, [pc, #32]	; (800c5c8 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d004      	beq.n	800c5b8 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	3204      	adds	r2, #4
 800c5b2:	6812      	ldr	r2, [r2, #0]
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	4790      	blx	r2
    globalDetector = NULLPTR;
 800c5b8:	4b02      	ldr	r3, [pc, #8]	; (800c5c4 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	601a      	str	r2, [r3, #0]
}
 800c5be:	bf00      	nop
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	20000934 	.word	0x20000934
 800c5c8:	20000930 	.word	0x20000930

0800c5cc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	60f8      	str	r0, [r7, #12]
 800c5d4:	60b9      	str	r1, [r7, #8]
 800c5d6:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	68b9      	ldr	r1, [r7, #8]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f006 fdfd 	bl	80131dc <_ZN10TestPluginC1ERK12SimpleString>
 800c5e2:	4a14      	ldr	r2, [pc, #80]	; (800c634 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	601a      	str	r2, [r3, #0]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	761a      	strb	r2, [r3, #24]
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	765a      	strb	r2, [r3, #25]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 800c5fa:	4b0f      	ldr	r3, [pc, #60]	; (800c638 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d102      	bne.n	800c608 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 800c602:	4a0d      	ldr	r2, [pc, #52]	; (800c638 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d003      	beq.n	800c616 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	615a      	str	r2, [r3, #20]
 800c614:	e004      	b.n	800c620 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 800c616:	f7ff ff7f 	bl	800c518 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c61a:	4602      	mov	r2, r0
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	695b      	ldr	r3, [r3, #20]
 800c624:	4618      	mov	r0, r3
 800c626:	f00c fa69 	bl	8018afc <_ZN18MemoryLeakDetector6enableEv>
}
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	4618      	mov	r0, r3
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}
 800c634:	0802a6f0 	.word	0x0802a6f0
 800c638:	20000938 	.word	0x20000938

0800c63c <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	4a09      	ldr	r2, [pc, #36]	; (800c66c <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	7e5b      	ldrb	r3, [r3, #25]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d003      	beq.n	800c65a <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 800c652:	f7ff fd5b 	bl	800c10c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800c656:	f7ff ff99 	bl	800c58c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	4618      	mov	r0, r3
 800c65e:	f006 fdf9 	bl	8013254 <_ZN10TestPluginD1Ev>
    }
}
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4618      	mov	r0, r3
 800c666:	3708      	adds	r7, #8
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	0802a6f0 	.word	0x0802a6f0

0800c670 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
}
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7ff ffdf 	bl	800c63c <_ZN23MemoryLeakWarningPluginD1Ev>
 800c67e:	2124      	movs	r1, #36	; 0x24
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f7ff fd01 	bl	800c088 <_ZdlPvj>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4618      	mov	r0, r3
 800c68a:	3708      	adds	r7, #8
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	60f8      	str	r0, [r7, #12]
 800c698:	60b9      	str	r1, [r7, #8]
 800c69a:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	695b      	ldr	r3, [r3, #20]
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f00c fa0e 	bl	8018ac2 <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f7fd ffb0 	bl	800a60c <_ZNK10TestResult15getFailureCountEv>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	621a      	str	r2, [r3, #32]
}
 800c6b2:	bf00      	nop
 800c6b4:	3710      	adds	r7, #16
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
	...

0800c6bc <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 800c6bc:	b590      	push	{r4, r7, lr}
 800c6be:	b097      	sub	sp, #92	; 0x5c
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	695b      	ldr	r3, [r3, #20]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f00c fa08 	bl	8018ae2 <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	695b      	ldr	r3, [r3, #20]
 800c6d6:	2103      	movs	r1, #3
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f00c fda5 	bl	8019228 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800c6de:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	7e1b      	ldrb	r3, [r3, #24]
 800c6e4:	f083 0301 	eor.w	r3, r3, #1
 800c6e8:	b2db      	uxtb	r3, r3
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d00e      	beq.n	800c70c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	69db      	ldr	r3, [r3, #28]
 800c6f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d009      	beq.n	800c70c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	6a1c      	ldr	r4, [r3, #32]
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f7fd ff85 	bl	800a60c <_ZNK10TestResult15getFailureCountEv>
 800c702:	4603      	mov	r3, r0
 800c704:	429c      	cmp	r4, r3
 800c706:	d101      	bne.n	800c70c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800c708:	2301      	movs	r3, #1
 800c70a:	e000      	b.n	800c70e <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 800c70c:	2300      	movs	r3, #0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d04c      	beq.n	800c7ac <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 800c712:	f7ff fd4f 	bl	800c1b4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 800c716:	4603      	mov	r3, r0
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d028      	beq.n	800c76e <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	695b      	ldr	r3, [r3, #20]
 800c720:	2103      	movs	r1, #3
 800c722:	4618      	mov	r0, r3
 800c724:	f00c fd45 	bl	80191b2 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800c728:	4602      	mov	r2, r0
 800c72a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c72e:	4611      	mov	r1, r2
 800c730:	4618      	mov	r0, r3
 800c732:	f002 f858 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800c736:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800c73a:	f107 0310 	add.w	r3, r7, #16
 800c73e:	68b9      	ldr	r1, [r7, #8]
 800c740:	4618      	mov	r0, r3
 800c742:	f003 feaf 	bl	80104a4 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800c746:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c74a:	4618      	mov	r0, r3
 800c74c:	f002 fc03 	bl	800ef56 <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	3334      	adds	r3, #52	; 0x34
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f107 0210 	add.w	r2, r7, #16
 800c75c:	4611      	mov	r1, r2
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800c762:	f107 0310 	add.w	r3, r7, #16
 800c766:	4618      	mov	r0, r3
 800c768:	f003 ff5c 	bl	8010624 <_ZN11TestFailureD1Ev>
 800c76c:	e01e      	b.n	800c7ac <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	69db      	ldr	r3, [r3, #28]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d01a      	beq.n	800c7ac <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	3338      	adds	r3, #56	; 0x38
 800c77c:	681c      	ldr	r4, [r3, #0]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	69db      	ldr	r3, [r3, #28]
 800c782:	461a      	mov	r2, r3
 800c784:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c788:	4910      	ldr	r1, [pc, #64]	; (800c7cc <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 800c78a:	4618      	mov	r0, r3
 800c78c:	f003 f8ea 	bl	800f964 <_Z16StringFromFormatPKcz>
 800c790:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c794:	4618      	mov	r0, r3
 800c796:	f002 fbb1 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800c79a:	4603      	mov	r3, r0
 800c79c:	4619      	mov	r1, r3
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	47a0      	blx	r4
 800c7a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f002 fbd5 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	695b      	ldr	r3, [r3, #20]
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f00c fd13 	bl	80191dc <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	61da      	str	r2, [r3, #28]
}
 800c7c2:	bf00      	nop
 800c7c4:	375c      	adds	r7, #92	; 0x5c
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd90      	pop	{r4, r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	0802654c 	.word	0x0802654c

0800c7d0 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b084      	sub	sp, #16
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	695b      	ldr	r3, [r3, #20]
 800c7de:	2102      	movs	r1, #2
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f00c fd21 	bl	8019228 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800c7e6:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d007      	beq.n	800c800 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	695b      	ldr	r3, [r3, #20]
 800c7f4:	2102      	movs	r1, #2
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f00c fcdb 	bl	80191b2 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	e000      	b.n	800c802 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 800c800:	4b02      	ldr	r3, [pc, #8]	; (800c80c <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 800c802:	4618      	mov	r0, r3
 800c804:	3710      	adds	r7, #16
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	0802658c 	.word	0x0802658c

0800c810 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	4a05      	ldr	r2, [pc, #20]	; (800c830 <_ZN11FailFailureD1Ev+0x20>)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	601a      	str	r2, [r3, #0]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4618      	mov	r0, r3
 800c822:	f003 feff 	bl	8010624 <_ZN11TestFailureD1Ev>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	4618      	mov	r0, r3
 800c82a:	3708      	adds	r7, #8
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}
 800c830:	0802a738 	.word	0x0802a738

0800c834 <_ZN11FailFailureD0Ev>:
 800c834:	b580      	push	{r7, lr}
 800c836:	b082      	sub	sp, #8
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f7ff ffe7 	bl	800c810 <_ZN11FailFailureD1Ev>
 800c842:	2134      	movs	r1, #52	; 0x34
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f7ff fc1f 	bl	800c088 <_ZdlPvj>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	4618      	mov	r0, r3
 800c84e:	3708      	adds	r7, #8
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	4618      	mov	r0, r3
 800c862:	370c      	adds	r7, #12
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr

0800c86c <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	4618      	mov	r0, r3
 800c87a:	370c      	adds	r7, #12
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr

0800c884 <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 800c884:	b480      	push	{r7}
 800c886:	b083      	sub	sp, #12
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	4a06      	ldr	r2, [pc, #24]	; (800c8a8 <_ZN19MockFailureReporterC1Ev+0x24>)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	601a      	str	r2, [r3, #0]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	711a      	strb	r2, [r3, #4]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4618      	mov	r0, r3
 800c89c:	370c      	adds	r7, #12
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop
 800c8a8:	0802b914 	.word	0x0802b914

0800c8ac <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	4a04      	ldr	r2, [pc, #16]	; (800c8c8 <_ZN19MockFailureReporterD1Ev+0x1c>)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	601a      	str	r2, [r3, #0]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	4618      	mov	r0, r3
 800c8be:	370c      	adds	r7, #12
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr
 800c8c8:	0802b914 	.word	0x0802b914

0800c8cc <_ZN19MockFailureReporterD0Ev>:
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f7ff ffe9 	bl	800c8ac <_ZN19MockFailureReporterD1Ev>
 800c8da:	2108      	movs	r1, #8
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f7ff fbd3 	bl	800c088 <_ZdlPvj>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	4a05      	ldr	r2, [pc, #20]	; (800c90c <_ZN11MockFailureD1Ev+0x20>)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	601a      	str	r2, [r3, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f003 fe91 	bl	8010624 <_ZN11TestFailureD1Ev>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	4618      	mov	r0, r3
 800c906:	3708      	adds	r7, #8
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	0802a88c 	.word	0x0802a88c

0800c910 <_ZN11MockFailureD0Ev>:
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f7ff ffe7 	bl	800c8ec <_ZN11MockFailureD1Ev>
 800c91e:	2134      	movs	r1, #52	; 0x34
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f7ff fbb1 	bl	800c088 <_ZdlPvj>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	4618      	mov	r0, r3
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 800c930:	b590      	push	{r4, r7, lr}
 800c932:	b083      	sub	sp, #12
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
 800c93a:	4a16      	ldr	r2, [pc, #88]	; (800c994 <_ZN14MockNamedValueC1ERKS_+0x64>)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	601a      	str	r2, [r3, #0]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	1d1a      	adds	r2, r3, #4
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	3304      	adds	r3, #4
 800c948:	4619      	mov	r1, r3
 800c94a:	4610      	mov	r0, r2
 800c94c:	f001 ff9f 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f103 020c 	add.w	r2, r3, #12
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	330c      	adds	r3, #12
 800c95a:	4619      	mov	r1, r3
 800c95c:	4610      	mov	r0, r2
 800c95e:	f001 ff96 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	f102 0418 	add.w	r4, r2, #24
 800c96a:	3318      	adds	r3, #24
 800c96c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c96e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	629a      	str	r2, [r3, #40]	; 0x28
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	62da      	str	r2, [r3, #44]	; 0x2c
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	631a      	str	r2, [r3, #48]	; 0x30
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4618      	mov	r0, r3
 800c98e:	370c      	adds	r7, #12
 800c990:	46bd      	mov	sp, r7
 800c992:	bd90      	pop	{r4, r7, pc}
 800c994:	0802b954 	.word	0x0802b954

0800c998 <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b086      	sub	sp, #24
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 800c9a2:	f107 030c 	add.w	r3, r7, #12
 800c9a6:	4916      	ldr	r1, [pc, #88]	; (800ca00 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f001 ff1c 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800c9ae:	f107 030c 	add.w	r3, r7, #12
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f002 fb1f 	bl	800eff8 <_ZneRK12SimpleStringS1_>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d005      	beq.n	800c9cc <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 800c9c0:	6879      	ldr	r1, [r7, #4]
 800c9c2:	4810      	ldr	r0, [pc, #64]	; (800ca04 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800c9c4:	f000 ff70 	bl	800d8a8 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	e000      	b.n	800c9ce <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 800c9cc:	4b0d      	ldr	r3, [pc, #52]	; (800ca04 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800c9ce:	617b      	str	r3, [r7, #20]
 800c9d0:	f107 030c 	add.w	r3, r7, #12
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f002 fabe 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	33a8      	adds	r3, #168	; 0xa8
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	6839      	ldr	r1, [r7, #0]
 800c9e4:	6978      	ldr	r0, [r7, #20]
 800c9e6:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	33ac      	adds	r3, #172	; 0xac
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	6978      	ldr	r0, [r7, #20]
 800c9f2:	4798      	blx	r3
    return mock_support;
 800c9f4:	697b      	ldr	r3, [r7, #20]
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3718      	adds	r7, #24
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	08026590 	.word	0x08026590
 800ca04:	2000093c 	.word	0x2000093c

0800ca08 <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 800ca12:	4a21      	ldr	r2, [pc, #132]	; (800ca98 <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	601a      	str	r2, [r3, #0]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	605a      	str	r2, [r3, #4]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2200      	movs	r2, #0
 800ca22:	609a      	str	r2, [r3, #8]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2200      	movs	r2, #0
 800ca28:	731a      	strb	r2, [r3, #12]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f103 0218 	add.w	r2, r3, #24
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	615a      	str	r2, [r3, #20]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	3318      	adds	r3, #24
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f7ff ff23 	bl	800c884 <_ZN19MockFailureReporterC1Ev>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	3320      	adds	r3, #32
 800ca42:	4618      	mov	r0, r3
 800ca44:	f010 fefc 	bl	801d840 <_ZN21MockExpectedCallsListC1Ev>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2201      	movs	r2, #1
 800ca54:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	62da      	str	r2, [r3, #44]	; 0x2c
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	3330      	adds	r3, #48	; 0x30
 800ca62:	4618      	mov	r0, r3
 800ca64:	f014 fbea 	bl	802123c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	3338      	adds	r3, #56	; 0x38
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f014 faf4 	bl	802105a <_ZN18MockNamedValueListC1Ev>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	333c      	adds	r3, #60	; 0x3c
 800ca76:	6839      	ldr	r1, [r7, #0]
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f001 ff08 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2200      	movs	r2, #0
 800ca82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 800ca86:	2100      	movs	r1, #0
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 f894 	bl	800cbb6 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	4618      	mov	r0, r3
 800ca92:	3708      	adds	r7, #8
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}
 800ca98:	0802a764 	.word	0x0802a764

0800ca9c <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	4a0d      	ldr	r2, [pc, #52]	; (800cadc <_ZN11MockSupportD1Ev+0x40>)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	601a      	str	r2, [r3, #0]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	333c      	adds	r3, #60	; 0x3c
 800caae:	4618      	mov	r0, r3
 800cab0:	f002 fa51 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	3330      	adds	r3, #48	; 0x30
 800cab8:	4618      	mov	r0, r3
 800caba:	f014 fbd3 	bl	8021264 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	3320      	adds	r3, #32
 800cac2:	4618      	mov	r0, r3
 800cac4:	f010 fed0 	bl	801d868 <_ZN21MockExpectedCallsListD1Ev>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	3318      	adds	r3, #24
 800cacc:	4618      	mov	r0, r3
 800cace:	f7ff feed 	bl	800c8ac <_ZN19MockFailureReporterD1Ev>
{
}
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	4618      	mov	r0, r3
 800cad6:	3708      	adds	r7, #8
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	0802a764 	.word	0x0802a764

0800cae0 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
}
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7ff ffd7 	bl	800ca9c <_ZN11MockSupportD1Ev>
 800caee:	2148      	movs	r1, #72	; 0x48
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f7ff fac9 	bl	800c088 <_ZdlPvj>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	4618      	mov	r0, r3
 800cafa:	3708      	adds	r7, #8
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	460b      	mov	r3, r1
 800cb0a:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	691a      	ldr	r2, [r3, #16]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	691b      	ldr	r3, [r3, #16]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	3310      	adds	r3, #16
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	78f9      	ldrb	r1, [r7, #3]
 800cb1c:	4610      	mov	r0, r2
 800cb1e:	4798      	blx	r3
}
 800cb20:	bf00      	nop
 800cb22:	3708      	adds	r7, #8
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b084      	sub	sp, #16
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d102      	bne.n	800cb3e <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	3318      	adds	r3, #24
 800cb3c:	e000      	b.n	800cb40 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	687a      	ldr	r2, [r7, #4]
 800cb42:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d00a      	beq.n	800cb62 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	33c8      	adds	r3, #200	; 0xc8
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	6952      	ldr	r2, [r2, #20]
 800cb5e:	4611      	mov	r1, r2
 800cb60:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	3338      	adds	r3, #56	; 0x38
 800cb66:	4618      	mov	r0, r3
 800cb68:	f014 fb0d 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 800cb6c:	60f8      	str	r0, [r7, #12]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d01c      	beq.n	800cbae <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 800cb74:	68f9      	ldr	r1, [r7, #12]
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 ff26 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	bf14      	ite	ne
 800cb82:	2301      	movne	r3, #1
 800cb84:	2300      	moveq	r3, #0
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d00b      	beq.n	800cba4 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 800cb8c:	68f9      	ldr	r1, [r7, #12]
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f000 ff1a 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cb94:	4603      	mov	r3, r0
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	32a4      	adds	r2, #164	; 0xa4
 800cb9a:	6812      	ldr	r2, [r2, #0]
 800cb9c:	6879      	ldr	r1, [r7, #4]
 800cb9e:	6949      	ldr	r1, [r1, #20]
 800cba0:	4618      	mov	r0, r3
 800cba2:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800cba4:	68f8      	ldr	r0, [r7, #12]
 800cba6:	f014 f9f7 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	e7df      	b.n	800cb6e <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 800cbae:	bf00      	nop
 800cbb0:	3710      	adds	r7, #16
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800cbb6:	b480      	push	{r7}
 800cbb8:	b083      	sub	sp, #12
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
 800cbbe:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d102      	bne.n	800cbcc <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	695b      	ldr	r3, [r3, #20]
 800cbca:	e000      	b.n	800cbce <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	6113      	str	r3, [r2, #16]
}
 800cbd2:	bf00      	nop
 800cbd4:	370c      	adds	r7, #12
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbdc:	4770      	bx	lr

0800cbde <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b082      	sub	sp, #8
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	3330      	adds	r3, #48	; 0x30
 800cbea:	4618      	mov	r0, r3
 800cbec:	f012 fb10 	bl	801f210 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 800cbf0:	bf00      	nop
 800cbf2:	3708      	adds	r7, #8
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 800cbf8:	b590      	push	{r4, r7, lr}
 800cbfa:	b087      	sub	sp, #28
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	3330      	adds	r3, #48	; 0x30
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	68b9      	ldr	r1, [r7, #8]
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f014 fb77 	bl	8021300 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	3338      	adds	r3, #56	; 0x38
 800cc16:	4618      	mov	r0, r3
 800cc18:	f014 fab5 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 800cc1c:	6178      	str	r0, [r7, #20]
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d01c      	beq.n	800cc5e <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 800cc24:	6979      	ldr	r1, [r7, #20]
 800cc26:	68f8      	ldr	r0, [r7, #12]
 800cc28:	f000 fece 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	bf14      	ite	ne
 800cc32:	2301      	movne	r3, #1
 800cc34:	2300      	moveq	r3, #0
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00b      	beq.n	800cc54 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 800cc3c:	6979      	ldr	r1, [r7, #20]
 800cc3e:	68f8      	ldr	r0, [r7, #12]
 800cc40:	f000 fec2 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cc44:	4603      	mov	r3, r0
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	32b0      	adds	r2, #176	; 0xb0
 800cc4a:	6814      	ldr	r4, [r2, #0]
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	68b9      	ldr	r1, [r7, #8]
 800cc50:	4618      	mov	r0, r3
 800cc52:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800cc54:	6978      	ldr	r0, [r7, #20]
 800cc56:	f014 f99f 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 800cc5a:	6178      	str	r0, [r7, #20]
 800cc5c:	e7df      	b.n	800cc1e <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 800cc5e:	bf00      	nop
 800cc60:	371c      	adds	r7, #28
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd90      	pop	{r4, r7, pc}

0800cc66 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 800cc66:	b590      	push	{r4, r7, lr}
 800cc68:	b087      	sub	sp, #28
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	60f8      	str	r0, [r7, #12]
 800cc6e:	60b9      	str	r1, [r7, #8]
 800cc70:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	3330      	adds	r3, #48	; 0x30
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	68b9      	ldr	r1, [r7, #8]
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f014 fb5c 	bl	8021338 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	3338      	adds	r3, #56	; 0x38
 800cc84:	4618      	mov	r0, r3
 800cc86:	f014 fa7e 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 800cc8a:	6178      	str	r0, [r7, #20]
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d01c      	beq.n	800cccc <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 800cc92:	6979      	ldr	r1, [r7, #20]
 800cc94:	68f8      	ldr	r0, [r7, #12]
 800cc96:	f000 fe97 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	bf14      	ite	ne
 800cca0:	2301      	movne	r3, #1
 800cca2:	2300      	moveq	r3, #0
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00b      	beq.n	800ccc2 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 800ccaa:	6979      	ldr	r1, [r7, #20]
 800ccac:	68f8      	ldr	r0, [r7, #12]
 800ccae:	f000 fe8b 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	32b4      	adds	r2, #180	; 0xb4
 800ccb8:	6814      	ldr	r4, [r2, #0]
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	68b9      	ldr	r1, [r7, #8]
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ccc2:	6978      	ldr	r0, [r7, #20]
 800ccc4:	f014 f968 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 800ccc8:	6178      	str	r0, [r7, #20]
 800ccca:	e7df      	b.n	800cc8c <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 800cccc:	bf00      	nop
 800ccce:	371c      	adds	r7, #28
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd90      	pop	{r4, r7, pc}

0800ccd4 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	3330      	adds	r3, #48	; 0x30
 800cce2:	6839      	ldr	r1, [r7, #0]
 800cce4:	4618      	mov	r0, r3
 800cce6:	f014 fb93 	bl	8021410 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	3338      	adds	r3, #56	; 0x38
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f014 fa49 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 800ccf4:	60f8      	str	r0, [r7, #12]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d01b      	beq.n	800cd34 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 800ccfc:	68f9      	ldr	r1, [r7, #12]
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 fe62 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cd04:	4603      	mov	r3, r0
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	bf14      	ite	ne
 800cd0a:	2301      	movne	r3, #1
 800cd0c:	2300      	moveq	r3, #0
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00a      	beq.n	800cd2a <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 800cd14:	68f9      	ldr	r1, [r7, #12]
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f000 fe56 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	681a      	ldr	r2, [r3, #0]
 800cd20:	32b8      	adds	r2, #184	; 0xb8
 800cd22:	6812      	ldr	r2, [r2, #0]
 800cd24:	6839      	ldr	r1, [r7, #0]
 800cd26:	4618      	mov	r0, r3
 800cd28:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800cd2a:	68f8      	ldr	r0, [r7, #12]
 800cd2c:	f014 f934 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 800cd30:	60f8      	str	r0, [r7, #12]
 800cd32:	e7e0      	b.n	800ccf6 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 800cd34:	bf00      	nop
 800cd36:	3710      	adds	r7, #16
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	3330      	adds	r3, #48	; 0x30
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f014 faba 	bl	80212c2 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	3338      	adds	r3, #56	; 0x38
 800cd52:	4618      	mov	r0, r3
 800cd54:	f014 fa17 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 800cd58:	60f8      	str	r0, [r7, #12]
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d01a      	beq.n	800cd96 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 800cd60:	68f9      	ldr	r1, [r7, #12]
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 fe30 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	bf14      	ite	ne
 800cd6e:	2301      	movne	r3, #1
 800cd70:	2300      	moveq	r3, #0
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d009      	beq.n	800cd8c <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 800cd78:	68f9      	ldr	r1, [r7, #12]
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 fe24 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cd80:	4603      	mov	r3, r0
 800cd82:	681a      	ldr	r2, [r3, #0]
 800cd84:	32bc      	adds	r2, #188	; 0xbc
 800cd86:	6812      	ldr	r2, [r2, #0]
 800cd88:	4618      	mov	r0, r3
 800cd8a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800cd8c:	68f8      	ldr	r0, [r7, #12]
 800cd8e:	f014 f903 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	e7e1      	b.n	800cd5a <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 800cd96:	bf00      	nop
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 800cd9e:	b580      	push	{r7, lr}
 800cda0:	b084      	sub	sp, #16
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d004      	beq.n	800cdb8 <_ZN11MockSupport5clearEv+0x1a>
 800cdae:	681a      	ldr	r2, [r3, #0]
 800cdb0:	3204      	adds	r2, #4
 800cdb2:	6812      	ldr	r2, [r2, #0]
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 800cdc6:	f00e fe0d 	bl	801b9e4 <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	3320      	adds	r3, #32
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f011 f937 	bl	801e042 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2201      	movs	r2, #1
 800cde0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2200      	movs	r2, #0
 800cdee:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	3338      	adds	r3, #56	; 0x38
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f014 f9c3 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 800ce00:	60f8      	str	r0, [r7, #12]
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d01a      	beq.n	800ce3e <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 800ce08:	68f9      	ldr	r1, [r7, #12]
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 fddc 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ce10:	60b8      	str	r0, [r7, #8]
        if (support) {
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00d      	beq.n	800ce34 <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	339c      	adds	r3, #156	; 0x9c
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	68b8      	ldr	r0, [r7, #8]
 800ce22:	4798      	blx	r3
            delete support;
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d004      	beq.n	800ce34 <_ZN11MockSupport5clearEv+0x96>
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	3204      	adds	r2, #4
 800ce2e:	6812      	ldr	r2, [r2, #0]
 800ce30:	4618      	mov	r0, r3
 800ce32:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800ce34:	68f8      	ldr	r0, [r7, #12]
 800ce36:	f014 f8af 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	e7e1      	b.n	800ce02 <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	3338      	adds	r3, #56	; 0x38
 800ce42:	4618      	mov	r0, r3
 800ce44:	f014 f917 	bl	8021076 <_ZN18MockNamedValueList5clearEv>
}
 800ce48:	bf00      	nop
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	731a      	strb	r2, [r3, #12]
}
 800ce5e:	bf00      	nop
 800ce60:	370c      	adds	r7, #12
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr
	...

0800ce6c <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 800ce6c:	b590      	push	{r4, r7, lr}
 800ce6e:	b089      	sub	sp, #36	; 0x24
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	60f8      	str	r0, [r7, #12]
 800ce74:	60b9      	str	r1, [r7, #8]
 800ce76:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	333c      	adds	r3, #60	; 0x3c
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f002 f859 	bl	800ef34 <_ZNK12SimpleString7isEmptyEv>
 800ce82:	4603      	mov	r3, r0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d004      	beq.n	800ce92 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 800ce88:	6879      	ldr	r1, [r7, #4]
 800ce8a:	68f8      	ldr	r0, [r7, #12]
 800ce8c:	f001 fcff 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
 800ce90:	e021      	b.n	800ced6 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800ce98:	f107 0318 	add.w	r3, r7, #24
 800ce9c:	4910      	ldr	r1, [pc, #64]	; (800cee0 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f001 fca1 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800cea4:	f107 0310 	add.w	r3, r7, #16
 800cea8:	f107 0218 	add.w	r2, r7, #24
 800ceac:	4621      	mov	r1, r4
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f002 f8b3 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f107 0110 	add.w	r1, r7, #16
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	4618      	mov	r0, r3
 800cebe:	f002 f8ac 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 800cec2:	f107 0310 	add.w	r3, r7, #16
 800cec6:	4618      	mov	r0, r3
 800cec8:	f002 f845 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800cecc:	f107 0318 	add.w	r3, r7, #24
 800ced0:	4618      	mov	r0, r3
 800ced2:	f002 f840 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	3724      	adds	r7, #36	; 0x24
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd90      	pop	{r4, r7, pc}
 800cede:	bf00      	nop
 800cee0:	08026594 	.word	0x08026594

0800cee4 <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b082      	sub	sp, #8
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	3314      	adds	r3, #20
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	683a      	ldr	r2, [r7, #0]
 800cef8:	2101      	movs	r1, #1
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	4798      	blx	r3
 800cefe:	4603      	mov	r3, r0
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	3314      	adds	r3, #20
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	683a      	ldr	r2, [r7, #0]
 800cf1c:	2100      	movs	r1, #0
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	4798      	blx	r3
}
 800cf22:	bf00      	nop
 800cf24:	3708      	adds	r7, #8
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
	...

0800cf2c <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 800cf2c:	b590      	push	{r4, r7, lr}
 800cf2e:	b089      	sub	sp, #36	; 0x24
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cf3e:	f083 0301 	eor.w	r3, r3, #1
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d003      	beq.n	800cf50 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 800cf48:	f010 fbf6 	bl	801d738 <_ZN23MockIgnoredExpectedCall8instanceEv>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	e041      	b.n	800cfd4 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	f000 fb1b 	bl	800d58c <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 800cf56:	22a5      	movs	r2, #165	; 0xa5
 800cf58:	4920      	ldr	r1, [pc, #128]	; (800cfdc <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 800cf5a:	2070      	movs	r0, #112	; 0x70
 800cf5c:	f7ff f880 	bl	800c060 <_ZnwjPKci>
 800cf60:	4604      	mov	r4, r0
 800cf62:	68b9      	ldr	r1, [r7, #8]
 800cf64:	4620      	mov	r0, r4
 800cf66:	f00f f8f3 	bl	801c150 <_ZN23MockCheckedExpectedCallC1Ej>
 800cf6a:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	3308      	adds	r3, #8
 800cf72:	681c      	ldr	r4, [r3, #0]
 800cf74:	f107 0314 	add.w	r3, r7, #20
 800cf78:	687a      	ldr	r2, [r7, #4]
 800cf7a:	68f9      	ldr	r1, [r7, #12]
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7ff ff75 	bl	800ce6c <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 800cf82:	f107 0314 	add.w	r3, r7, #20
 800cf86:	4619      	mov	r1, r3
 800cf88:	69f8      	ldr	r0, [r7, #28]
 800cf8a:	47a0      	blx	r4
 800cf8c:	f107 0314 	add.w	r3, r7, #20
 800cf90:	4618      	mov	r0, r3
 800cf92:	f001 ffe0 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	7b1b      	ldrb	r3, [r3, #12]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d013      	beq.n	800cfc6 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 800cf9e:	69fb      	ldr	r3, [r7, #28]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	3310      	adds	r3, #16
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	68fa      	ldr	r2, [r7, #12]
 800cfa8:	6892      	ldr	r2, [r2, #8]
 800cfaa:	1c50      	adds	r0, r2, #1
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	6891      	ldr	r1, [r2, #8]
 800cfb0:	68ba      	ldr	r2, [r7, #8]
 800cfb2:	440a      	add	r2, r1
 800cfb4:	4601      	mov	r1, r0
 800cfb6:	69f8      	ldr	r0, [r7, #28]
 800cfb8:	4798      	blx	r3
        expectedCallOrder_ += amount;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	689a      	ldr	r2, [r3, #8]
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	441a      	add	r2, r3
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	3320      	adds	r3, #32
 800cfca:	69f9      	ldr	r1, [r7, #28]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f010 fd89 	bl	801dae4 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 800cfd2:	69fb      	ldr	r3, [r7, #28]
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3724      	adds	r7, #36	; 0x24
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd90      	pop	{r4, r7, pc}
 800cfdc:	08026598 	.word	0x08026598

0800cfe0 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 800cfe0:	b5b0      	push	{r4, r5, r7, lr}
 800cfe2:	b082      	sub	sp, #8
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	685b      	ldr	r3, [r3, #4]
 800cfec:	1c5a      	adds	r2, r3, #1
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	605a      	str	r2, [r3, #4]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	685d      	ldr	r5, [r3, #4]
 800cff6:	22b1      	movs	r2, #177	; 0xb1
 800cff8:	490a      	ldr	r1, [pc, #40]	; (800d024 <_ZN11MockSupport16createActualCallEv+0x44>)
 800cffa:	202c      	movs	r0, #44	; 0x2c
 800cffc:	f7ff f830 	bl	800c060 <_ZnwjPKci>
 800d000:	4604      	mov	r4, r0
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	691a      	ldr	r2, [r3, #16]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	3320      	adds	r3, #32
 800d00a:	4629      	mov	r1, r5
 800d00c:	4620      	mov	r0, r4
 800d00e:	f00c fbdb 	bl	80197c8 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3708      	adds	r7, #8
 800d01e:	46bd      	mov	sp, r7
 800d020:	bdb0      	pop	{r4, r5, r7, pc}
 800d022:	bf00      	nop
 800d024:	08026598 	.word	0x08026598

0800d028 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d00d      	beq.n	800d058 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	3320      	adds	r3, #32
 800d040:	6839      	ldr	r1, [r7, #0]
 800d042:	4618      	mov	r0, r3
 800d044:	f010 fd2a 	bl	801da9c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 800d048:	4603      	mov	r3, r0
 800d04a:	f083 0301 	eor.w	r3, r3, #1
 800d04e:	b2db      	uxtb	r3, r3
 800d050:	2b00      	cmp	r3, #0
 800d052:	d001      	beq.n	800d058 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800d054:	2301      	movs	r3, #1
 800d056:	e000      	b.n	800d05a <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 800d058:	2300      	movs	r3, #0
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3708      	adds	r7, #8
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 800d062:	b590      	push	{r4, r7, lr}
 800d064:	b087      	sub	sp, #28
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
 800d06a:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800d06c:	f107 030c 	add.w	r3, r7, #12
 800d070:	683a      	ldr	r2, [r7, #0]
 800d072:	6879      	ldr	r1, [r7, #4]
 800d074:	4618      	mov	r0, r3
 800d076:	f7ff fef9 	bl	800ce6c <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d014      	beq.n	800d0ac <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	33c4      	adds	r3, #196	; 0xc4
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4610      	mov	r0, r2
 800d092:	4798      	blx	r3
        delete lastActualFunctionCall_;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d004      	beq.n	800d0a6 <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 800d09c:	681a      	ldr	r2, [r3, #0]
 800d09e:	3204      	adds	r2, #4
 800d0a0:	6812      	ldr	r2, [r2, #0]
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d0b2:	f083 0301 	eor.w	r3, r3, #1
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d004      	beq.n	800d0c6 <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 800d0bc:	f00e fcbe 	bl	801ba3c <_ZN21MockIgnoredActualCall8instanceEv>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	461c      	mov	r4, r3
 800d0c4:	e02f      	b.n	800d126 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d00b      	beq.n	800d0e8 <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 800d0d0:	f00e fc6e 	bl	801b9b0 <_ZN19MockActualCallTrace8instanceEv>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	681a      	ldr	r2, [r3, #0]
 800d0d8:	3208      	adds	r2, #8
 800d0da:	6812      	ldr	r2, [r2, #0]
 800d0dc:	f107 010c 	add.w	r1, r7, #12
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	4790      	blx	r2
 800d0e4:	4604      	mov	r4, r0
 800d0e6:	e01e      	b.n	800d126 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 800d0e8:	f107 030c 	add.w	r3, r7, #12
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f7ff ff9a 	bl	800d028 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d004      	beq.n	800d104 <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 800d0fa:	f00e fc9f 	bl	801ba3c <_ZN21MockIgnoredActualCall8instanceEv>
 800d0fe:	4603      	mov	r3, r0
 800d100:	461c      	mov	r4, r3
 800d102:	e010      	b.n	800d126 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	33c0      	adds	r3, #192	; 0xc0
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	4798      	blx	r3
 800d110:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	3308      	adds	r3, #8
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f107 020c 	add.w	r2, r7, #12
 800d11e:	4611      	mov	r1, r2
 800d120:	6978      	ldr	r0, [r7, #20]
 800d122:	4798      	blx	r3
    return *call;
 800d124:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800d126:	f107 030c 	add.w	r3, r7, #12
 800d12a:	4618      	mov	r0, r3
 800d12c:	f001 ff13 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800d130:	4623      	mov	r3, r4
}
 800d132:	4618      	mov	r0, r3
 800d134:	371c      	adds	r7, #28
 800d136:	46bd      	mov	sp, r7
 800d138:	bd90      	pop	{r4, r7, pc}

0800d13a <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 800d13a:	b580      	push	{r7, lr}
 800d13c:	b084      	sub	sp, #16
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2201      	movs	r2, #1
 800d146:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	3338      	adds	r3, #56	; 0x38
 800d14e:	4618      	mov	r0, r3
 800d150:	f014 f819 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 800d154:	60f8      	str	r0, [r7, #12]
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d01a      	beq.n	800d192 <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 800d15c:	68f9      	ldr	r1, [r7, #12]
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f000 fc32 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d164:	4603      	mov	r3, r0
 800d166:	2b00      	cmp	r3, #0
 800d168:	bf14      	ite	ne
 800d16a:	2301      	movne	r3, #1
 800d16c:	2300      	moveq	r3, #0
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	2b00      	cmp	r3, #0
 800d172:	d009      	beq.n	800d188 <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 800d174:	68f9      	ldr	r1, [r7, #12]
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 fc26 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d17c:	4603      	mov	r3, r0
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	3290      	adds	r2, #144	; 0x90
 800d182:	6812      	ldr	r2, [r2, #0]
 800d184:	4618      	mov	r0, r3
 800d186:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f013 ff05 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	e7e1      	b.n	800d156 <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 800d192:	bf00      	nop
 800d194:	3710      	adds	r7, #16
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b084      	sub	sp, #16
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	3338      	adds	r3, #56	; 0x38
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f013 ffe9 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 800d1b4:	60f8      	str	r0, [r7, #12]
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d01a      	beq.n	800d1f2 <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 800d1bc:	68f9      	ldr	r1, [r7, #12]
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 fc02 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	bf14      	ite	ne
 800d1ca:	2301      	movne	r3, #1
 800d1cc:	2300      	moveq	r3, #0
 800d1ce:	b2db      	uxtb	r3, r3
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d009      	beq.n	800d1e8 <_ZN11MockSupport7disableEv+0x4e>
 800d1d4:	68f9      	ldr	r1, [r7, #12]
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 fbf6 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	681a      	ldr	r2, [r3, #0]
 800d1e0:	3284      	adds	r2, #132	; 0x84
 800d1e2:	6812      	ldr	r2, [r2, #0]
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d1e8:	68f8      	ldr	r0, [r7, #12]
 800d1ea:	f013 fed5 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 800d1ee:	60f8      	str	r0, [r7, #12]
 800d1f0:	e7e1      	b.n	800d1b6 <_ZN11MockSupport7disableEv+0x1c>
}
 800d1f2:	bf00      	nop
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}

0800d1fa <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b084      	sub	sp, #16
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2201      	movs	r2, #1
 800d206:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	3338      	adds	r3, #56	; 0x38
 800d20e:	4618      	mov	r0, r3
 800d210:	f013 ffb9 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 800d214:	60f8      	str	r0, [r7, #12]
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d01a      	beq.n	800d252 <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 800d21c:	68f9      	ldr	r1, [r7, #12]
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 fbd2 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d224:	4603      	mov	r3, r0
 800d226:	2b00      	cmp	r3, #0
 800d228:	bf14      	ite	ne
 800d22a:	2301      	movne	r3, #1
 800d22c:	2300      	moveq	r3, #0
 800d22e:	b2db      	uxtb	r3, r3
 800d230:	2b00      	cmp	r3, #0
 800d232:	d009      	beq.n	800d248 <_ZN11MockSupport6enableEv+0x4e>
 800d234:	68f9      	ldr	r1, [r7, #12]
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 fbc6 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d23c:	4603      	mov	r3, r0
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	3288      	adds	r2, #136	; 0x88
 800d242:	6812      	ldr	r2, [r2, #0]
 800d244:	4618      	mov	r0, r3
 800d246:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d248:	68f8      	ldr	r0, [r7, #12]
 800d24a:	f013 fea5 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	e7e1      	b.n	800d216 <_ZN11MockSupport6enableEv+0x1c>
}
 800d252:	bf00      	nop
 800d254:	3710      	adds	r7, #16
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}

0800d25a <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 800d25a:	b580      	push	{r7, lr}
 800d25c:	b084      	sub	sp, #16
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
 800d262:	460b      	mov	r3, r1
 800d264:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	78fa      	ldrb	r2, [r7, #3]
 800d26a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	3338      	adds	r3, #56	; 0x38
 800d272:	4618      	mov	r0, r3
 800d274:	f013 ff87 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 800d278:	60f8      	str	r0, [r7, #12]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d01b      	beq.n	800d2b8 <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 800d280:	68f9      	ldr	r1, [r7, #12]
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 fba0 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	bf14      	ite	ne
 800d28e:	2301      	movne	r3, #1
 800d290:	2300      	moveq	r3, #0
 800d292:	b2db      	uxtb	r3, r3
 800d294:	2b00      	cmp	r3, #0
 800d296:	d00a      	beq.n	800d2ae <_ZN11MockSupport7tracingEb+0x54>
 800d298:	68f9      	ldr	r1, [r7, #12]
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 fb94 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	328c      	adds	r2, #140	; 0x8c
 800d2a6:	6812      	ldr	r2, [r2, #0]
 800d2a8:	78f9      	ldrb	r1, [r7, #3]
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f013 fe72 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 800d2b4:	60f8      	str	r0, [r7, #12]
 800d2b6:	e7e0      	b.n	800d27a <_ZN11MockSupport7tracingEb+0x20>
}
 800d2b8:	bf00      	nop
 800d2ba:	3710      	adds	r7, #16
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	3320      	adds	r3, #32
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f010 fbc1 	bl	801da54 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	3338      	adds	r3, #56	; 0x38
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f013 ff53 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 800d2e0:	60b8      	str	r0, [r7, #8]
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d01f      	beq.n	800d328 <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 800d2e8:	68b9      	ldr	r1, [r7, #8]
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 fb6c 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	bf14      	ite	ne
 800d2f6:	2301      	movne	r3, #1
 800d2f8:	2300      	moveq	r3, #0
 800d2fa:	b2db      	uxtb	r3, r3
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d00e      	beq.n	800d31e <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 800d300:	68b9      	ldr	r1, [r7, #8]
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 fb60 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d308:	4603      	mov	r3, r0
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	3298      	adds	r2, #152	; 0x98
 800d30e:	6812      	ldr	r2, [r2, #0]
 800d310:	4618      	mov	r0, r3
 800d312:	4790      	blx	r2
 800d314:	4603      	mov	r3, r0
 800d316:	461a      	mov	r2, r3
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	4413      	add	r3, r2
 800d31c:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d31e:	68b8      	ldr	r0, [r7, #8]
 800d320:	f013 fe3a 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 800d324:	60b8      	str	r0, [r7, #8]
 800d326:	e7dc      	b.n	800d2e2 <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	bf14      	ite	ne
 800d32e:	2301      	movne	r3, #1
 800d330:	2300      	moveq	r3, #0
 800d332:	b2db      	uxtb	r3, r3
}
 800d334:	4618      	mov	r0, r3
 800d336:	3710      	adds	r7, #16
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d010      	beq.n	800d36e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	33bc      	adds	r3, #188	; 0xbc
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4610      	mov	r0, r2
 800d35c:	4798      	blx	r3
 800d35e:	4603      	mov	r3, r0
 800d360:	f083 0301 	eor.w	r3, r3, #1
 800d364:	b2db      	uxtb	r3, r3
 800d366:	2b00      	cmp	r3, #0
 800d368:	d001      	beq.n	800d36e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800d36a:	2301      	movs	r3, #1
 800d36c:	e000      	b.n	800d370 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 800d36e:	2300      	movs	r3, #0
 800d370:	2b00      	cmp	r3, #0
 800d372:	d001      	beq.n	800d378 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 800d374:	2300      	movs	r3, #0
 800d376:	e02a      	b.n	800d3ce <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	3338      	adds	r3, #56	; 0x38
 800d37c:	4618      	mov	r0, r3
 800d37e:	f013 ff02 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 800d382:	60f8      	str	r0, [r7, #12]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d020      	beq.n	800d3cc <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 800d38a:	68f9      	ldr	r1, [r7, #12]
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 fb1b 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d392:	4603      	mov	r3, r0
 800d394:	2b00      	cmp	r3, #0
 800d396:	d00f      	beq.n	800d3b8 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800d398:	68f9      	ldr	r1, [r7, #12]
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f000 fb14 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7ff ffca 	bl	800d33c <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	f083 0301 	eor.w	r3, r3, #1
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d001      	beq.n	800d3b8 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	e000      	b.n	800d3ba <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d001      	beq.n	800d3c2 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	e005      	b.n	800d3ce <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d3c2:	68f8      	ldr	r0, [r7, #12]
 800d3c4:	f013 fde8 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 800d3c8:	60f8      	str	r0, [r7, #12]
 800d3ca:	e7db      	b.n	800d384 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 800d3cc:	2301      	movs	r3, #1
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3710      	adds	r7, #16
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}

0800d3d6 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b092      	sub	sp, #72	; 0x48
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800d3de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f010 fa2c 	bl	801d840 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f103 0220 	add.w	r2, r3, #32
 800d3ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d3f2:	4611      	mov	r1, r2
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f010 fbf3 	bl	801dbe0 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	3338      	adds	r3, #56	; 0x38
 800d3fe:	4618      	mov	r0, r3
 800d400:	f013 fec1 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 800d404:	6478      	str	r0, [r7, #68]	; 0x44
 800d406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d01d      	beq.n	800d448 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 800d40c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 fada 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	bf14      	ite	ne
 800d41a:	2301      	movne	r3, #1
 800d41c:	2300      	moveq	r3, #0
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	2b00      	cmp	r3, #0
 800d422:	d00c      	beq.n	800d43e <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800d424:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 face 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d42c:	4603      	mov	r3, r0
 800d42e:	f103 0220 	add.w	r2, r3, #32
 800d432:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d436:	4611      	mov	r1, r2
 800d438:	4618      	mov	r0, r3
 800d43a:	f010 fbd1 	bl	801dbe0 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800d43e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d440:	f013 fdaa 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 800d444:	6478      	str	r0, [r7, #68]	; 0x44
 800d446:	e7de      	b.n	800d406 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	691a      	ldr	r2, [r3, #16]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	691b      	ldr	r3, [r3, #16]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	330c      	adds	r3, #12
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	4610      	mov	r0, r2
 800d458:	4798      	blx	r3
 800d45a:	4601      	mov	r1, r0
 800d45c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800d460:	f107 0308 	add.w	r3, r7, #8
 800d464:	4618      	mov	r0, r3
 800d466:	f011 f9f5 	bl	801e854 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	33c4      	adds	r3, #196	; 0xc4
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f107 0208 	add.w	r2, r7, #8
 800d476:	4611      	mov	r1, r2
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800d47c:	f107 0308 	add.w	r3, r7, #8
 800d480:	4618      	mov	r0, r3
 800d482:	f000 fe6d 	bl	800e160 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800d486:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d48a:	4618      	mov	r0, r3
 800d48c:	f010 f9ec 	bl	801d868 <_ZN21MockExpectedCallsListD1Ev>
}
 800d490:	bf00      	nop
 800d492:	3748      	adds	r7, #72	; 0x48
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b092      	sub	sp, #72	; 0x48
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800d4a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f010 f9cb 	bl	801d840 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f103 0220 	add.w	r2, r3, #32
 800d4b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d4b4:	4611      	mov	r1, r2
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f010 fb92 	bl	801dbe0 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	3338      	adds	r3, #56	; 0x38
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f013 fe60 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 800d4c6:	6478      	str	r0, [r7, #68]	; 0x44
 800d4c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d01d      	beq.n	800d50a <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 800d4ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 fa79 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	bf14      	ite	ne
 800d4dc:	2301      	movne	r3, #1
 800d4de:	2300      	moveq	r3, #0
 800d4e0:	b2db      	uxtb	r3, r3
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d00c      	beq.n	800d500 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800d4e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 fa6d 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	f103 0220 	add.w	r2, r3, #32
 800d4f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d4f8:	4611      	mov	r1, r2
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f010 fb70 	bl	801dbe0 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800d500:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d502:	f013 fd49 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 800d506:	6478      	str	r0, [r7, #68]	; 0x44
 800d508:	e7de      	b.n	800d4c8 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	691a      	ldr	r2, [r3, #16]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	691b      	ldr	r3, [r3, #16]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	330c      	adds	r3, #12
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4610      	mov	r0, r2
 800d51a:	4798      	blx	r3
 800d51c:	4601      	mov	r1, r0
 800d51e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800d522:	f107 0308 	add.w	r3, r7, #8
 800d526:	4618      	mov	r0, r3
 800d528:	f011 fa38 	bl	801e99c <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	33c4      	adds	r3, #196	; 0xc4
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f107 0208 	add.w	r2, r7, #8
 800d538:	4611      	mov	r1, r2
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800d53e:	f107 0308 	add.w	r3, r7, #8
 800d542:	4618      	mov	r0, r3
 800d544:	f000 fe2e 	bl	800e1a4 <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800d548:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d54c:	4618      	mov	r0, r3
 800d54e:	f010 f98b 	bl	801d868 <_ZN21MockExpectedCallsListD1Ev>
}
 800d552:	bf00      	nop
 800d554:	3748      	adds	r7, #72	; 0x48
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}

0800d55a <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 800d55a:	b580      	push	{r7, lr}
 800d55c:	b082      	sub	sp, #8
 800d55e:	af00      	add	r7, sp, #0
 800d560:	6078      	str	r0, [r7, #4]
 800d562:	6039      	str	r1, [r7, #0]
    clear();
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	339c      	adds	r3, #156	; 0x9c
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	4798      	blx	r3
    activeReporter_->failTest(failure);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	691a      	ldr	r2, [r3, #16]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	691b      	ldr	r3, [r3, #16]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	3308      	adds	r3, #8
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	6839      	ldr	r1, [r7, #0]
 800d580:	4610      	mov	r0, r2
 800d582:	4798      	blx	r3
}
 800d584:	bf00      	nop
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 800d594:	f008 fd0a 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 800d598:	4603      	mov	r3, r0
 800d59a:	4618      	mov	r0, r3
 800d59c:	f007 fb78 	bl	8014c90 <_ZN10UtestShell10countCheckEv>
}
 800d5a0:	bf00      	nop
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d008      	beq.n	800d5ca <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	33c4      	adds	r3, #196	; 0xc4
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4610      	mov	r0, r2
 800d5c8:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	3338      	adds	r3, #56	; 0x38
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f013 fdd9 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 800d5d4:	60f8      	str	r0, [r7, #12]
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d023      	beq.n	800d624 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 800d5dc:	68f9      	ldr	r1, [r7, #12]
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f000 f9f2 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d009      	beq.n	800d5fe <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800d5ea:	68f9      	ldr	r1, [r7, #12]
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 f9eb 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d001      	beq.n	800d5fe <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	e000      	b.n	800d600 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 800d5fe:	2300      	movs	r3, #0
 800d600:	2b00      	cmp	r3, #0
 800d602:	d00a      	beq.n	800d61a <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 800d604:	68f9      	ldr	r1, [r7, #12]
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 f9de 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d60c:	4603      	mov	r3, r0
 800d60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	32c4      	adds	r2, #196	; 0xc4
 800d614:	6812      	ldr	r2, [r2, #0]
 800d616:	4618      	mov	r0, r3
 800d618:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800d61a:	68f8      	ldr	r0, [r7, #12]
 800d61c:	f013 fcbc 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 800d620:	60f8      	str	r0, [r7, #12]
 800d622:	e7d8      	b.n	800d5d6 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 800d624:	bf00      	nop
 800d626:	3710      	adds	r7, #16
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b084      	sub	sp, #16
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	3320      	adds	r3, #32
 800d638:	4618      	mov	r0, r3
 800d63a:	f010 f947 	bl	801d8cc <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 800d63e:	4603      	mov	r3, r0
 800d640:	2b00      	cmp	r3, #0
 800d642:	d001      	beq.n	800d648 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 800d644:	2301      	movs	r3, #1
 800d646:	e027      	b.n	800d698 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	3338      	adds	r3, #56	; 0x38
 800d64c:	4618      	mov	r0, r3
 800d64e:	f013 fd9a 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 800d652:	60f8      	str	r0, [r7, #12]
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d01d      	beq.n	800d696 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 800d65a:	68f9      	ldr	r1, [r7, #12]
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f000 f9b3 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d662:	4603      	mov	r3, r0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d00c      	beq.n	800d682 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800d668:	68f9      	ldr	r1, [r7, #12]
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 f9ac 	bl	800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d670:	4603      	mov	r3, r0
 800d672:	4618      	mov	r0, r3
 800d674:	f7ff ffda 	bl	800d62c <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800d678:	4603      	mov	r3, r0
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d001      	beq.n	800d682 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800d67e:	2301      	movs	r3, #1
 800d680:	e000      	b.n	800d684 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 800d682:	2300      	movs	r3, #0
 800d684:	2b00      	cmp	r3, #0
 800d686:	d001      	beq.n	800d68c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 800d688:	2301      	movs	r3, #1
 800d68a:	e005      	b.n	800d698 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d68c:	68f8      	ldr	r0, [r7, #12]
 800d68e:	f013 fc83 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	e7de      	b.n	800d654 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800d696:	2300      	movs	r3, #0
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3710      	adds	r7, #16
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f7ff ff7d 	bl	800d5a8 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f7ff fe44 	bl	800d33c <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d00a      	beq.n	800d6d0 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	3398      	adds	r3, #152	; 0x98
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	4798      	blx	r3
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d001      	beq.n	800d6d0 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	e000      	b.n	800d6d2 <_ZN11MockSupport17checkExpectationsEv+0x32>
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d002      	beq.n	800d6dc <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f7ff fe7d 	bl	800d3d6 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f7ff ffa5 	bl	800d62c <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d002      	beq.n	800d6ee <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f7ff fed5 	bl	800d498 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 800d6ee:	bf00      	nop
 800d6f0:	3708      	adds	r7, #8
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}

0800d6f6 <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b082      	sub	sp, #8
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	6078      	str	r0, [r7, #4]
 800d6fe:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	3338      	adds	r3, #56	; 0x38
 800d704:	6839      	ldr	r1, [r7, #0]
 800d706:	4618      	mov	r0, r3
 800d708:	f013 fd0e 	bl	8021128 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800d70c:	4603      	mov	r3, r0
 800d70e:	2b00      	cmp	r3, #0
 800d710:	bf14      	ite	ne
 800d712:	2301      	movne	r3, #1
 800d714:	2300      	moveq	r3, #0
 800d716:	b2db      	uxtb	r3, r3
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3708      	adds	r7, #8
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 800d720:	b590      	push	{r4, r7, lr}
 800d722:	b085      	sub	sp, #20
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	3338      	adds	r3, #56	; 0x38
 800d72e:	6839      	ldr	r1, [r7, #0]
 800d730:	4618      	mov	r0, r3
 800d732:	f013 fcf9 	bl	8021128 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800d736:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d111      	bne.n	800d762 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 800d73e:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d742:	490a      	ldr	r1, [pc, #40]	; (800d76c <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 800d744:	2038      	movs	r0, #56	; 0x38
 800d746:	f7fe fc8b 	bl	800c060 <_ZnwjPKci>
 800d74a:	4604      	mov	r4, r0
 800d74c:	6839      	ldr	r1, [r7, #0]
 800d74e:	4620      	mov	r0, r4
 800d750:	f011 fd6e 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
 800d754:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	3338      	adds	r3, #56	; 0x38
 800d75a:	68f9      	ldr	r1, [r7, #12]
 800d75c:	4618      	mov	r0, r3
 800d75e:	f013 fcad 	bl	80210bc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 800d762:	68fb      	ldr	r3, [r7, #12]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3714      	adds	r7, #20
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd90      	pop	{r4, r7, pc}
 800d76c:	08026598 	.word	0x08026598

0800d770 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b086      	sub	sp, #24
 800d774:	af00      	add	r7, sp, #0
 800d776:	60f8      	str	r0, [r7, #12]
 800d778:	60b9      	str	r1, [r7, #8]
 800d77a:	607a      	str	r2, [r7, #4]
 800d77c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 800d77e:	68b9      	ldr	r1, [r7, #8]
 800d780:	68f8      	ldr	r0, [r7, #12]
 800d782:	f7ff ffcd 	bl	800d720 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800d786:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	3344      	adds	r3, #68	; 0x44
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	683a      	ldr	r2, [r7, #0]
 800d792:	6879      	ldr	r1, [r7, #4]
 800d794:	6978      	ldr	r0, [r7, #20]
 800d796:	4798      	blx	r3
}
 800d798:	bf00      	nop
 800d79a:	3718      	adds	r7, #24
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b088      	sub	sp, #32
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	60f8      	str	r0, [r7, #12]
 800d7a8:	60b9      	str	r1, [r7, #8]
 800d7aa:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	3338      	adds	r3, #56	; 0x38
 800d7b0:	6879      	ldr	r1, [r7, #4]
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f013 fcb8 	bl	8021128 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800d7b8:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d111      	bne.n	800d7e4 <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 800d7c0:	f107 0314 	add.w	r3, r7, #20
 800d7c4:	490b      	ldr	r1, [pc, #44]	; (800d7f4 <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f001 f80d 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800d7cc:	f107 0314 	add.w	r3, r7, #20
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	68f8      	ldr	r0, [r7, #12]
 800d7d4:	f011 fd2c 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
 800d7d8:	f107 0314 	add.w	r3, r7, #20
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f001 fbba 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800d7e2:	e003      	b.n	800d7ec <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 800d7e4:	69f9      	ldr	r1, [r7, #28]
 800d7e6:	68f8      	ldr	r0, [r7, #12]
 800d7e8:	f7ff f8a2 	bl	800c930 <_ZN14MockNamedValueC1ERKS_>
}
 800d7ec:	68f8      	ldr	r0, [r7, #12]
 800d7ee:	3720      	adds	r7, #32
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}
 800d7f4:	08026590 	.word	0x08026590

0800d7f8 <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 800d7f8:	b590      	push	{r4, r7, lr}
 800d7fa:	b085      	sub	sp, #20
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 800d802:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d806:	4927      	ldr	r1, [pc, #156]	; (800d8a4 <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 800d808:	2048      	movs	r0, #72	; 0x48
 800d80a:	f7fe fc29 	bl	800c060 <_ZnwjPKci>
 800d80e:	4604      	mov	r4, r0
 800d810:	6839      	ldr	r1, [r7, #0]
 800d812:	4620      	mov	r0, r4
 800d814:	f7ff f8f8 	bl	800ca08 <_ZN11MockSupportC1ERK12SimpleString>
 800d818:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	33a4      	adds	r3, #164	; 0xa4
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	687a      	ldr	r2, [r7, #4]
 800d824:	6952      	ldr	r2, [r2, #20]
 800d826:	4611      	mov	r1, r2
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d832:	2b00      	cmp	r3, #0
 800d834:	d005      	beq.n	800d842 <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	3390      	adds	r3, #144	; 0x90
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	68f8      	ldr	r0, [r7, #12]
 800d840:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d848:	f083 0301 	eor.w	r3, r3, #1
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d005      	beq.n	800d85e <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	3384      	adds	r3, #132	; 0x84
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	68f8      	ldr	r0, [r7, #12]
 800d85c:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	7b1b      	ldrb	r3, [r3, #12]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d005      	beq.n	800d872 <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	3308      	adds	r3, #8
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	68f8      	ldr	r0, [r7, #12]
 800d870:	4798      	blx	r3

    newMock->tracing(tracing_);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	338c      	adds	r3, #140	; 0x8c
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	687a      	ldr	r2, [r7, #4]
 800d87c:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 800d880:	4611      	mov	r1, r2
 800d882:	68f8      	ldr	r0, [r7, #12]
 800d884:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	33b8      	adds	r3, #184	; 0xb8
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	3230      	adds	r2, #48	; 0x30
 800d892:	4611      	mov	r1, r2
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	4798      	blx	r3
    return newMock;
 800d898:	68fb      	ldr	r3, [r7, #12]
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3714      	adds	r7, #20
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd90      	pop	{r4, r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	08026598 	.word	0x08026598

0800d8a8 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 800d8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8aa:	b0ab      	sub	sp, #172	; 0xac
 800d8ac:	af04      	add	r7, sp, #16
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800d8b2:	f107 0308 	add.w	r3, r7, #8
 800d8b6:	4941      	ldr	r1, [pc, #260]	; (800d9bc <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f000 ff94 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 800d8be:	f107 0308 	add.w	r3, r7, #8
 800d8c2:	6839      	ldr	r1, [r7, #0]
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f001 fbc3 	bl	800f050 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 800d8ca:	f107 0308 	add.w	r3, r7, #8
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f7ff ff10 	bl	800d6f6 <_ZN11MockSupport7hasDataERK12SimpleString>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d048      	beq.n	800d96e <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 800d8dc:	f008 fb66 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 800d8e0:	4604      	mov	r4, r0
 800d8e2:	6823      	ldr	r3, [r4, #0]
 800d8e4:	3324      	adds	r3, #36	; 0x24
 800d8e6:	681d      	ldr	r5, [r3, #0]
 800d8e8:	f107 0318 	add.w	r3, r7, #24
 800d8ec:	f107 0208 	add.w	r2, r7, #8
 800d8f0:	6879      	ldr	r1, [r7, #4]
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7ff ff54 	bl	800d7a0 <_ZN11MockSupport7getDataERK12SimpleString>
 800d8f8:	f107 0310 	add.w	r3, r7, #16
 800d8fc:	f107 0218 	add.w	r2, r7, #24
 800d900:	4611      	mov	r1, r2
 800d902:	4618      	mov	r0, r3
 800d904:	f011 ff63 	bl	801f7ce <_ZNK14MockNamedValue7getTypeEv>
 800d908:	f107 0310 	add.w	r3, r7, #16
 800d90c:	4618      	mov	r0, r3
 800d90e:	f001 faf5 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800d912:	4606      	mov	r6, r0
 800d914:	f008 fb5a 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800d918:	4603      	mov	r3, r0
 800d91a:	9302      	str	r3, [sp, #8]
 800d91c:	f240 13bd 	movw	r3, #445	; 0x1bd
 800d920:	9301      	str	r3, [sp, #4]
 800d922:	4b27      	ldr	r3, [pc, #156]	; (800d9c0 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 800d924:	9300      	str	r3, [sp, #0]
 800d926:	2300      	movs	r3, #0
 800d928:	4632      	mov	r2, r6
 800d92a:	4926      	ldr	r1, [pc, #152]	; (800d9c4 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800d92c:	4620      	mov	r0, r4
 800d92e:	47a8      	blx	r5
 800d930:	f107 0310 	add.w	r3, r7, #16
 800d934:	4618      	mov	r0, r3
 800d936:	f001 fb0e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800d93a:	f107 0318 	add.w	r3, r7, #24
 800d93e:	4618      	mov	r0, r3
 800d940:	f011 fca0 	bl	801f284 <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 800d944:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d948:	f107 0208 	add.w	r2, r7, #8
 800d94c:	6879      	ldr	r1, [r7, #4]
 800d94e:	4618      	mov	r0, r3
 800d950:	f7ff ff26 	bl	800d7a0 <_ZN11MockSupport7getDataERK12SimpleString>
 800d954:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d958:	4618      	mov	r0, r3
 800d95a:	f012 fa51 	bl	801fe00 <_ZNK14MockNamedValue16getObjectPointerEv>
 800d95e:	4604      	mov	r4, r0
 800d960:	bf00      	nop
 800d962:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d966:	4618      	mov	r0, r3
 800d968:	f011 fc8c 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 800d96c:	e01b      	b.n	800d9a6 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 800d96e:	6839      	ldr	r1, [r7, #0]
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f7ff ff41 	bl	800d7f8 <_ZN11MockSupport5cloneERK12SimpleString>
 800d976:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 800d97a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d97e:	4911      	ldr	r1, [pc, #68]	; (800d9c4 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800d980:	4618      	mov	r0, r3
 800d982:	f000 ff30 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800d986:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800d98a:	f107 0108 	add.w	r1, r7, #8
 800d98e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f7ff feec 	bl	800d770 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 800d998:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d99c:	4618      	mov	r0, r3
 800d99e:	f001 fada 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return newMock;
 800d9a2:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800d9a6:	f107 0308 	add.w	r3, r7, #8
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f001 fad3 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800d9b0:	4623      	mov	r3, r4
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	379c      	adds	r7, #156	; 0x9c
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	080265b0 	.word	0x080265b0
 800d9c0:	08026598 	.word	0x08026598
 800d9c4:	080265d0 	.word	0x080265d0

0800d9c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 800d9c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9cc:	b08b      	sub	sp, #44	; 0x2c
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	6078      	str	r0, [r7, #4]
 800d9d2:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 800d9d4:	2500      	movs	r5, #0
 800d9d6:	2600      	movs	r6, #0
 800d9d8:	f107 0308 	add.w	r3, r7, #8
 800d9dc:	6839      	ldr	r1, [r7, #0]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f013 fb28 	bl	8021034 <_ZNK22MockNamedValueListNode7getTypeEv>
 800d9e4:	f04f 0801 	mov.w	r8, #1
 800d9e8:	f107 0310 	add.w	r3, r7, #16
 800d9ec:	492e      	ldr	r1, [pc, #184]	; (800daa8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f000 fef9 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800d9f4:	f04f 0901 	mov.w	r9, #1
 800d9f8:	f107 0210 	add.w	r2, r7, #16
 800d9fc:	f107 0308 	add.w	r3, r7, #8
 800da00:	4611      	mov	r1, r2
 800da02:	4618      	mov	r0, r3
 800da04:	f001 fab3 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 800da08:	4603      	mov	r3, r0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d01a      	beq.n	800da44 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800da0e:	f107 0318 	add.w	r3, r7, #24
 800da12:	6839      	ldr	r1, [r7, #0]
 800da14:	4618      	mov	r0, r3
 800da16:	f013 fafa 	bl	802100e <_ZNK22MockNamedValueListNode7getNameEv>
 800da1a:	2501      	movs	r5, #1
 800da1c:	f107 0320 	add.w	r3, r7, #32
 800da20:	4922      	ldr	r1, [pc, #136]	; (800daac <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 800da22:	4618      	mov	r0, r3
 800da24:	f000 fedf 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800da28:	2601      	movs	r6, #1
 800da2a:	f107 0220 	add.w	r2, r7, #32
 800da2e:	f107 0318 	add.w	r3, r7, #24
 800da32:	4611      	mov	r1, r2
 800da34:	4618      	mov	r0, r3
 800da36:	f000 ff54 	bl	800e8e2 <_ZNK12SimpleString8containsERKS_>
 800da3a:	4603      	mov	r3, r0
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d001      	beq.n	800da44 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800da40:	2401      	movs	r4, #1
 800da42:	e000      	b.n	800da46 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 800da44:	2400      	movs	r4, #0
 800da46:	2e00      	cmp	r6, #0
 800da48:	d004      	beq.n	800da54 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800da4a:	f107 0320 	add.w	r3, r7, #32
 800da4e:	4618      	mov	r0, r3
 800da50:	f001 fa81 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800da54:	2d00      	cmp	r5, #0
 800da56:	d004      	beq.n	800da62 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800da58:	f107 0318 	add.w	r3, r7, #24
 800da5c:	4618      	mov	r0, r3
 800da5e:	f001 fa7a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800da62:	f1b9 0f00 	cmp.w	r9, #0
 800da66:	d004      	beq.n	800da72 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800da68:	f107 0310 	add.w	r3, r7, #16
 800da6c:	4618      	mov	r0, r3
 800da6e:	f001 fa72 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800da72:	f1b8 0f00 	cmp.w	r8, #0
 800da76:	d004      	beq.n	800da82 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800da78:	f107 0308 	add.w	r3, r7, #8
 800da7c:	4618      	mov	r0, r3
 800da7e:	f001 fa6a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800da82:	2c00      	cmp	r4, #0
 800da84:	d00a      	beq.n	800da9c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800da86:	6838      	ldr	r0, [r7, #0]
 800da88:	f013 fa92 	bl	8020fb0 <_ZN22MockNamedValueListNode4itemEv>
 800da8c:	4603      	mov	r3, r0
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	32a0      	adds	r2, #160	; 0xa0
 800da92:	6812      	ldr	r2, [r2, #0]
 800da94:	4618      	mov	r0, r3
 800da96:	4790      	blx	r2
 800da98:	4603      	mov	r3, r0
 800da9a:	e000      	b.n	800da9e <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 800da9c:	2300      	movs	r3, #0
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	372c      	adds	r7, #44	; 0x2c
 800daa2:	46bd      	mov	sp, r7
 800daa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800daa8:	080265d0 	.word	0x080265d0
 800daac:	080265b0 	.word	0x080265b0

0800dab0 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d00a      	beq.n	800dad8 <_ZN11MockSupport11returnValueEv+0x28>
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	3354      	adds	r3, #84	; 0x54
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	4610      	mov	r0, r2
 800dad4:	4798      	blx	r3
 800dad6:	e010      	b.n	800dafa <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800dad8:	f107 0308 	add.w	r3, r7, #8
 800dadc:	4909      	ldr	r1, [pc, #36]	; (800db04 <_ZN11MockSupport11returnValueEv+0x54>)
 800dade:	4618      	mov	r0, r3
 800dae0:	f000 fe81 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800dae4:	f107 0308 	add.w	r3, r7, #8
 800dae8:	4619      	mov	r1, r3
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f011 fba0 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
 800daf0:	f107 0308 	add.w	r3, r7, #8
 800daf4:	4618      	mov	r0, r3
 800daf6:	f001 fa2e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	3710      	adds	r7, #16
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	08026590 	.word	0x08026590

0800db08 <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 800db08:	b590      	push	{r4, r7, lr}
 800db0a:	b091      	sub	sp, #68	; 0x44
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	3320      	adds	r3, #32
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f107 0208 	add.w	r2, r7, #8
 800db1c:	6879      	ldr	r1, [r7, #4]
 800db1e:	4610      	mov	r0, r2
 800db20:	4798      	blx	r3
 800db22:	f107 0308 	add.w	r3, r7, #8
 800db26:	4618      	mov	r0, r3
 800db28:	f011 fe60 	bl	801f7ec <_ZNK14MockNamedValue12getBoolValueEv>
 800db2c:	4603      	mov	r3, r0
 800db2e:	461c      	mov	r4, r3
 800db30:	bf00      	nop
 800db32:	f107 0308 	add.w	r3, r7, #8
 800db36:	4618      	mov	r0, r3
 800db38:	f011 fba4 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 800db3c:	4623      	mov	r3, r4
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3744      	adds	r7, #68	; 0x44
 800db42:	46bd      	mov	sp, r7
 800db44:	bd90      	pop	{r4, r7, pc}

0800db46 <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800db46:	b590      	push	{r4, r7, lr}
 800db48:	b091      	sub	sp, #68	; 0x44
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	3320      	adds	r3, #32
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f107 0208 	add.w	r2, r7, #8
 800db5a:	6879      	ldr	r1, [r7, #4]
 800db5c:	4610      	mov	r0, r2
 800db5e:	4798      	blx	r3
 800db60:	f107 0308 	add.w	r3, r7, #8
 800db64:	4618      	mov	r0, r3
 800db66:	f011 fe69 	bl	801f83c <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800db6a:	4604      	mov	r4, r0
 800db6c:	bf00      	nop
 800db6e:	f107 0308 	add.w	r3, r7, #8
 800db72:	4618      	mov	r0, r3
 800db74:	f011 fb86 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 800db78:	4623      	mov	r3, r4
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3744      	adds	r7, #68	; 0x44
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd90      	pop	{r4, r7, pc}

0800db82 <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800db82:	b590      	push	{r4, r7, lr}
 800db84:	b091      	sub	sp, #68	; 0x44
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	3320      	adds	r3, #32
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f107 0208 	add.w	r2, r7, #8
 800db96:	6879      	ldr	r1, [r7, #4]
 800db98:	4610      	mov	r0, r2
 800db9a:	4798      	blx	r3
 800db9c:	f107 0308 	add.w	r3, r7, #8
 800dba0:	4618      	mov	r0, r3
 800dba2:	f011 fe9b 	bl	801f8dc <_ZNK14MockNamedValue11getIntValueEv>
 800dba6:	4604      	mov	r4, r0
 800dba8:	bf00      	nop
 800dbaa:	f107 0308 	add.w	r3, r7, #8
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f011 fb68 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 800dbb4:	4623      	mov	r3, r4
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3744      	adds	r7, #68	; 0x44
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd90      	pop	{r4, r7, pc}

0800dbbe <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 800dbbe:	b580      	push	{r7, lr}
 800dbc0:	b082      	sub	sp, #8
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	6078      	str	r0, [r7, #4]
 800dbc6:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	331c      	adds	r3, #28
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	4798      	blx	r3
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d007      	beq.n	800dbea <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	335c      	adds	r3, #92	; 0x5c
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	4798      	blx	r3
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	e000      	b.n	800dbec <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800dbea:	683b      	ldr	r3, [r7, #0]
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3708      	adds	r7, #8
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	331c      	adds	r3, #28
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	68f8      	ldr	r0, [r7, #12]
 800dc0a:	4798      	blx	r3
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d00a      	beq.n	800dc28 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	3368      	adds	r3, #104	; 0x68
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	68f8      	ldr	r0, [r7, #12]
 800dc1c:	4798      	blx	r3
 800dc1e:	eeb0 7a40 	vmov.f32	s14, s0
 800dc22:	eef0 7a60 	vmov.f32	s15, s1
 800dc26:	e001      	b.n	800dc2c <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800dc28:	ed97 7b00 	vldr	d7, [r7]
}
 800dc2c:	eeb0 0a47 	vmov.f32	s0, s14
 800dc30:	eef0 0a67 	vmov.f32	s1, s15
 800dc34:	3710      	adds	r7, #16
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800dc3a:	b580      	push	{r7, lr}
 800dc3c:	b082      	sub	sp, #8
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
 800dc42:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	331c      	adds	r3, #28
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	4798      	blx	r3
 800dc50:	4603      	mov	r3, r0
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d007      	beq.n	800dc66 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	3338      	adds	r3, #56	; 0x38
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	4798      	blx	r3
 800dc62:	4603      	mov	r3, r0
 800dc64:	e000      	b.n	800dc68 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800dc66:	683b      	ldr	r3, [r7, #0]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3708      	adds	r7, #8
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	460b      	mov	r3, r1
 800dc7a:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	331c      	adds	r3, #28
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	4798      	blx	r3
 800dc88:	4603      	mov	r3, r0
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d007      	beq.n	800dc9e <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	3324      	adds	r3, #36	; 0x24
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	4798      	blx	r3
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	e000      	b.n	800dca0 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 800dc9e:	78fb      	ldrb	r3, [r7, #3]
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3708      	adds	r7, #8
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	331c      	adds	r3, #28
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	4798      	blx	r3
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d007      	beq.n	800dcd4 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	332c      	adds	r3, #44	; 0x2c
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	4798      	blx	r3
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	e000      	b.n	800dcd6 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 800dcd4:	683b      	ldr	r3, [r7, #0]
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3708      	adds	r7, #8
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}

0800dcde <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 800dcde:	b580      	push	{r7, lr}
 800dce0:	b082      	sub	sp, #8
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	6078      	str	r0, [r7, #4]
 800dce6:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	331c      	adds	r3, #28
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	4798      	blx	r3
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d007      	beq.n	800dd0a <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	3334      	adds	r3, #52	; 0x34
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	4798      	blx	r3
 800dd06:	4603      	mov	r3, r0
 800dd08:	e000      	b.n	800dd0c <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800dd0a:	683b      	ldr	r3, [r7, #0]
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3708      	adds	r7, #8
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	331c      	adds	r3, #28
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	4798      	blx	r3
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d007      	beq.n	800dd40 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	3340      	adds	r3, #64	; 0x40
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	4798      	blx	r3
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	e000      	b.n	800dd42 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 800dd40:	683b      	ldr	r3, [r7, #0]
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3708      	adds	r7, #8
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}

0800dd4a <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800dd4a:	b590      	push	{r4, r7, lr}
 800dd4c:	b091      	sub	sp, #68	; 0x44
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	3320      	adds	r3, #32
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f107 0208 	add.w	r2, r7, #8
 800dd5e:	6879      	ldr	r1, [r7, #4]
 800dd60:	4610      	mov	r0, r2
 800dd62:	4798      	blx	r3
 800dd64:	f107 0308 	add.w	r3, r7, #8
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f011 fddf 	bl	801f92c <_ZNK14MockNamedValue15getLongIntValueEv>
 800dd6e:	4604      	mov	r4, r0
 800dd70:	bf00      	nop
 800dd72:	f107 0308 	add.w	r3, r7, #8
 800dd76:	4618      	mov	r0, r3
 800dd78:	f011 fa84 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 800dd7c:	4623      	mov	r3, r4
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3744      	adds	r7, #68	; 0x44
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd90      	pop	{r4, r7, pc}

0800dd86 <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800dd86:	b590      	push	{r4, r7, lr}
 800dd88:	b091      	sub	sp, #68	; 0x44
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	3320      	adds	r3, #32
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	f107 0208 	add.w	r2, r7, #8
 800dd9a:	6879      	ldr	r1, [r7, #4]
 800dd9c:	4610      	mov	r0, r2
 800dd9e:	4798      	blx	r3
 800dda0:	f107 0308 	add.w	r3, r7, #8
 800dda4:	4618      	mov	r0, r3
 800dda6:	f011 fe23 	bl	801f9f0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800ddaa:	4604      	mov	r4, r0
 800ddac:	bf00      	nop
 800ddae:	f107 0308 	add.w	r3, r7, #8
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f011 fa66 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 800ddb8:	4623      	mov	r3, r4
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3744      	adds	r7, #68	; 0x44
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd90      	pop	{r4, r7, pc}
	...

0800ddc4 <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 800ddc4:	b5b0      	push	{r4, r5, r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af02      	add	r7, sp, #8
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 800ddce:	f008 f8ed 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	6823      	ldr	r3, [r4, #0]
 800ddd6:	3368      	adds	r3, #104	; 0x68
 800ddd8:	681d      	ldr	r5, [r3, #0]
 800ddda:	f008 f8f7 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800ddde:	4603      	mov	r3, r0
 800dde0:	9300      	str	r3, [sp, #0]
 800dde2:	f240 2345 	movw	r3, #581	; 0x245
 800dde6:	4a06      	ldr	r2, [pc, #24]	; (800de00 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800dde8:	4906      	ldr	r1, [pc, #24]	; (800de04 <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800ddea:	4620      	mov	r0, r4
 800ddec:	47a8      	blx	r5
    return cpputest_longlong(0);
 800ddee:	2100      	movs	r1, #0
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f7fe fd2f 	bl	800c854 <_ZN17cpputest_longlongC1Ei>
}
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	3708      	adds	r7, #8
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bdb0      	pop	{r4, r5, r7, pc}
 800ddfe:	bf00      	nop
 800de00:	08026598 	.word	0x08026598
 800de04:	080265dc 	.word	0x080265dc

0800de08 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800de08:	b5b0      	push	{r4, r5, r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af02      	add	r7, sp, #8
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 800de12:	f008 f8cb 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 800de16:	4604      	mov	r4, r0
 800de18:	6823      	ldr	r3, [r4, #0]
 800de1a:	3368      	adds	r3, #104	; 0x68
 800de1c:	681d      	ldr	r5, [r3, #0]
 800de1e:	f008 f8d5 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800de22:	4603      	mov	r3, r0
 800de24:	9300      	str	r3, [sp, #0]
 800de26:	f240 234b 	movw	r3, #587	; 0x24b
 800de2a:	4a06      	ldr	r2, [pc, #24]	; (800de44 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800de2c:	4906      	ldr	r1, [pc, #24]	; (800de48 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800de2e:	4620      	mov	r0, r4
 800de30:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800de32:	2100      	movs	r1, #0
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f7fe fd19 	bl	800c86c <_ZN18cpputest_ulonglongC1Ei>
}
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	3708      	adds	r7, #8
 800de3e:	46bd      	mov	sp, r7
 800de40:	bdb0      	pop	{r4, r5, r7, pc}
 800de42:	bf00      	nop
 800de44:	08026598 	.word	0x08026598
 800de48:	080265fc 	.word	0x080265fc

0800de4c <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800de4c:	b5b0      	push	{r4, r5, r7, lr}
 800de4e:	b086      	sub	sp, #24
 800de50:	af02      	add	r7, sp, #8
 800de52:	60f8      	str	r0, [r7, #12]
 800de54:	60b9      	str	r1, [r7, #8]
 800de56:	4639      	mov	r1, r7
 800de58:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800de5c:	f008 f8a6 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 800de60:	4604      	mov	r4, r0
 800de62:	6823      	ldr	r3, [r4, #0]
 800de64:	3368      	adds	r3, #104	; 0x68
 800de66:	681d      	ldr	r5, [r3, #0]
 800de68:	f008 f8b0 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800de6c:	4603      	mov	r3, r0
 800de6e:	9300      	str	r3, [sp, #0]
 800de70:	f240 2351 	movw	r3, #593	; 0x251
 800de74:	4a06      	ldr	r2, [pc, #24]	; (800de90 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800de76:	4907      	ldr	r1, [pc, #28]	; (800de94 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800de78:	4620      	mov	r0, r4
 800de7a:	47a8      	blx	r5
    return defaultValue;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	461a      	mov	r2, r3
 800de80:	463b      	mov	r3, r7
 800de82:	cb03      	ldmia	r3!, {r0, r1}
 800de84:	6010      	str	r0, [r2, #0]
 800de86:	6051      	str	r1, [r2, #4]
}
 800de88:	68f8      	ldr	r0, [r7, #12]
 800de8a:	3710      	adds	r7, #16
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bdb0      	pop	{r4, r5, r7, pc}
 800de90:	08026598 	.word	0x08026598
 800de94:	080265dc 	.word	0x080265dc

0800de98 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800de98:	b5b0      	push	{r4, r5, r7, lr}
 800de9a:	b086      	sub	sp, #24
 800de9c:	af02      	add	r7, sp, #8
 800de9e:	60f8      	str	r0, [r7, #12]
 800dea0:	60b9      	str	r1, [r7, #8]
 800dea2:	4639      	mov	r1, r7
 800dea4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800dea8:	f008 f880 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 800deac:	4604      	mov	r4, r0
 800deae:	6823      	ldr	r3, [r4, #0]
 800deb0:	3368      	adds	r3, #104	; 0x68
 800deb2:	681d      	ldr	r5, [r3, #0]
 800deb4:	f008 f88a 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800deb8:	4603      	mov	r3, r0
 800deba:	9300      	str	r3, [sp, #0]
 800debc:	f240 2357 	movw	r3, #599	; 0x257
 800dec0:	4a06      	ldr	r2, [pc, #24]	; (800dedc <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800dec2:	4907      	ldr	r1, [pc, #28]	; (800dee0 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800dec4:	4620      	mov	r0, r4
 800dec6:	47a8      	blx	r5
    return defaultValue;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	461a      	mov	r2, r3
 800decc:	463b      	mov	r3, r7
 800dece:	cb03      	ldmia	r3!, {r0, r1}
 800ded0:	6010      	str	r0, [r2, #0]
 800ded2:	6051      	str	r1, [r2, #4]
}
 800ded4:	68f8      	ldr	r0, [r7, #12]
 800ded6:	3710      	adds	r7, #16
 800ded8:	46bd      	mov	sp, r7
 800deda:	bdb0      	pop	{r4, r5, r7, pc}
 800dedc:	08026598 	.word	0x08026598
 800dee0:	080265fc 	.word	0x080265fc

0800dee4 <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800dee4:	b590      	push	{r4, r7, lr}
 800dee6:	b091      	sub	sp, #68	; 0x44
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	3320      	adds	r3, #32
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f107 0208 	add.w	r2, r7, #8
 800def8:	6879      	ldr	r1, [r7, #4]
 800defa:	4610      	mov	r0, r2
 800defc:	4798      	blx	r3
 800defe:	f107 0308 	add.w	r3, r7, #8
 800df02:	4618      	mov	r0, r3
 800df04:	f011 fea8 	bl	801fc58 <_ZNK14MockNamedValue14getStringValueEv>
 800df08:	4604      	mov	r4, r0
 800df0a:	bf00      	nop
 800df0c:	f107 0308 	add.w	r3, r7, #8
 800df10:	4618      	mov	r0, r3
 800df12:	f011 f9b7 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 800df16:	4623      	mov	r3, r4
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3744      	adds	r7, #68	; 0x44
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd90      	pop	{r4, r7, pc}

0800df20 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800df20:	b580      	push	{r7, lr}
 800df22:	ed2d 8b02 	vpush	{d8}
 800df26:	b090      	sub	sp, #64	; 0x40
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	3320      	adds	r3, #32
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f107 0208 	add.w	r2, r7, #8
 800df38:	6879      	ldr	r1, [r7, #4]
 800df3a:	4610      	mov	r0, r2
 800df3c:	4798      	blx	r3
 800df3e:	f107 0308 	add.w	r3, r7, #8
 800df42:	4618      	mov	r0, r3
 800df44:	f011 fe2c 	bl	801fba0 <_ZNK14MockNamedValue14getDoubleValueEv>
 800df48:	eeb0 8a40 	vmov.f32	s16, s0
 800df4c:	eef0 8a60 	vmov.f32	s17, s1
 800df50:	bf00      	nop
 800df52:	f107 0308 	add.w	r3, r7, #8
 800df56:	4618      	mov	r0, r3
 800df58:	f011 f994 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 800df5c:	eeb0 7a48 	vmov.f32	s14, s16
 800df60:	eef0 7a68 	vmov.f32	s15, s17
}
 800df64:	eeb0 0a47 	vmov.f32	s0, s14
 800df68:	eef0 0a67 	vmov.f32	s1, s15
 800df6c:	3740      	adds	r7, #64	; 0x40
 800df6e:	46bd      	mov	sp, r7
 800df70:	ecbd 8b02 	vpop	{d8}
 800df74:	bd80      	pop	{r7, pc}

0800df76 <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800df76:	b580      	push	{r7, lr}
 800df78:	b082      	sub	sp, #8
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
 800df7e:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	331c      	adds	r3, #28
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	4798      	blx	r3
 800df8c:	4603      	mov	r3, r0
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d007      	beq.n	800dfa2 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	336c      	adds	r3, #108	; 0x6c
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	4798      	blx	r3
 800df9e:	4603      	mov	r3, r0
 800dfa0:	e000      	b.n	800dfa4 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800dfa2:	683b      	ldr	r3, [r7, #0]
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3708      	adds	r7, #8
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}

0800dfac <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	331c      	adds	r3, #28
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	4798      	blx	r3
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d007      	beq.n	800dfd8 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	3378      	adds	r3, #120	; 0x78
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	4798      	blx	r3
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	e000      	b.n	800dfda <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800dfd8:	683b      	ldr	r3, [r7, #0]
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3708      	adds	r7, #8
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b082      	sub	sp, #8
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
 800dfea:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	331c      	adds	r3, #28
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	4798      	blx	r3
 800dff8:	4603      	mov	r3, r0
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d007      	beq.n	800e00e <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	3380      	adds	r3, #128	; 0x80
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	4798      	blx	r3
 800e00a:	4603      	mov	r3, r0
 800e00c:	e000      	b.n	800e010 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800e00e:	683b      	ldr	r3, [r7, #0]
}
 800e010:	4618      	mov	r0, r3
 800e012:	3708      	adds	r7, #8
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800e018:	b590      	push	{r4, r7, lr}
 800e01a:	b091      	sub	sp, #68	; 0x44
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	3320      	adds	r3, #32
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f107 0208 	add.w	r2, r7, #8
 800e02c:	6879      	ldr	r1, [r7, #4]
 800e02e:	4610      	mov	r0, r2
 800e030:	4798      	blx	r3
 800e032:	f107 0308 	add.w	r3, r7, #8
 800e036:	4618      	mov	r0, r3
 800e038:	f011 fe36 	bl	801fca8 <_ZNK14MockNamedValue15getPointerValueEv>
 800e03c:	4604      	mov	r4, r0
 800e03e:	bf00      	nop
 800e040:	f107 0308 	add.w	r3, r7, #8
 800e044:	4618      	mov	r0, r3
 800e046:	f011 f91d 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 800e04a:	4623      	mov	r3, r4
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3744      	adds	r7, #68	; 0x44
 800e050:	46bd      	mov	sp, r7
 800e052:	bd90      	pop	{r4, r7, pc}

0800e054 <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800e054:	b590      	push	{r4, r7, lr}
 800e056:	b091      	sub	sp, #68	; 0x44
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	3320      	adds	r3, #32
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f107 0208 	add.w	r2, r7, #8
 800e068:	6879      	ldr	r1, [r7, #4]
 800e06a:	4610      	mov	r0, r2
 800e06c:	4798      	blx	r3
 800e06e:	f107 0308 	add.w	r3, r7, #8
 800e072:	4618      	mov	r0, r3
 800e074:	f011 fe40 	bl	801fcf8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800e078:	4604      	mov	r4, r0
 800e07a:	bf00      	nop
 800e07c:	f107 0308 	add.w	r3, r7, #8
 800e080:	4618      	mov	r0, r3
 800e082:	f011 f8ff 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 800e086:	4623      	mov	r3, r4
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3744      	adds	r7, #68	; 0x44
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd90      	pop	{r4, r7, pc}

0800e090 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800e090:	b590      	push	{r4, r7, lr}
 800e092:	b091      	sub	sp, #68	; 0x44
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	3320      	adds	r3, #32
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f107 0208 	add.w	r2, r7, #8
 800e0a4:	6879      	ldr	r1, [r7, #4]
 800e0a6:	4610      	mov	r0, r2
 800e0a8:	4798      	blx	r3
 800e0aa:	f107 0308 	add.w	r3, r7, #8
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f011 fe4a 	bl	801fd48 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800e0b4:	4604      	mov	r4, r0
 800e0b6:	bf00      	nop
 800e0b8:	f107 0308 	add.w	r3, r7, #8
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f011 f8e1 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 800e0c2:	4623      	mov	r3, r4
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3744      	adds	r7, #68	; 0x44
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd90      	pop	{r4, r7, pc}

0800e0cc <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b082      	sub	sp, #8
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d00a      	beq.n	800e0f2 <_ZN11MockSupport14hasReturnValueEv+0x26>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	3350      	adds	r3, #80	; 0x50
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4610      	mov	r0, r2
 800e0ec:	4798      	blx	r3
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	e000      	b.n	800e0f4 <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800e0f2:	2300      	movs	r3, #0
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3708      	adds	r7, #8
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <_Z41__static_initialization_and_destruction_0ii>:
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2b01      	cmp	r3, #1
 800e10a:	d115      	bne.n	800e138 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e112:	4293      	cmp	r3, r2
 800e114:	d110      	bne.n	800e138 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800e116:	f107 0308 	add.w	r3, r7, #8
 800e11a:	490f      	ldr	r1, [pc, #60]	; (800e158 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800e11c:	4618      	mov	r0, r3
 800e11e:	f000 fb62 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800e122:	f107 0308 	add.w	r3, r7, #8
 800e126:	4619      	mov	r1, r3
 800e128:	480c      	ldr	r0, [pc, #48]	; (800e15c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800e12a:	f7fe fc6d 	bl	800ca08 <_ZN11MockSupportC1ERK12SimpleString>
 800e12e:	f107 0308 	add.w	r3, r7, #8
 800e132:	4618      	mov	r0, r3
 800e134:	f000 ff0f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d107      	bne.n	800e14e <_Z41__static_initialization_and_destruction_0ii+0x52>
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e144:	4293      	cmp	r3, r2
 800e146:	d102      	bne.n	800e14e <_Z41__static_initialization_and_destruction_0ii+0x52>
 800e148:	4804      	ldr	r0, [pc, #16]	; (800e15c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800e14a:	f7fe fca7 	bl	800ca9c <_ZN11MockSupportD1Ev>
}
 800e14e:	bf00      	nop
 800e150:	3710      	adds	r7, #16
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	08026590 	.word	0x08026590
 800e15c:	2000093c 	.word	0x2000093c

0800e160 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800e160:	b580      	push	{r7, lr}
 800e162:	b082      	sub	sp, #8
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
 800e168:	4a05      	ldr	r2, [pc, #20]	; (800e180 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	601a      	str	r2, [r3, #0]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	4618      	mov	r0, r3
 800e172:	f7fe fbbb 	bl	800c8ec <_ZN11MockFailureD1Ev>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	4618      	mov	r0, r3
 800e17a:	3708      	adds	r7, #8
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	0802a860 	.word	0x0802a860

0800e184 <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f7ff ffe7 	bl	800e160 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800e192:	2134      	movs	r1, #52	; 0x34
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f7fd ff77 	bl	800c088 <_ZdlPvj>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	4618      	mov	r0, r3
 800e19e:	3708      	adds	r7, #8
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	4a05      	ldr	r2, [pc, #20]	; (800e1c4 <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	601a      	str	r2, [r3, #0]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7fe fb99 	bl	800c8ec <_ZN11MockFailureD1Ev>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3708      	adds	r7, #8
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}
 800e1c4:	0802a834 	.word	0x0802a834

0800e1c8 <_ZN20MockCallOrderFailureD0Ev>:
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f7ff ffe7 	bl	800e1a4 <_ZN20MockCallOrderFailureD1Ev>
 800e1d6:	2134      	movs	r1, #52	; 0x34
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f7fd ff55 	bl	800c088 <_ZdlPvj>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3708      	adds	r7, #8
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e1f0:	2001      	movs	r0, #1
 800e1f2:	f7ff ff83 	bl	800e0fc <_Z41__static_initialization_and_destruction_0ii>
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e200:	2000      	movs	r0, #0
 800e202:	f7ff ff7b 	bl	800e0fc <_Z41__static_initialization_and_destruction_0ii>
 800e206:	bd80      	pop	{r7, pc}

0800e208 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800e210:	4b05      	ldr	r3, [pc, #20]	; (800e228 <_ZN11SimpleMutexC1Ev+0x20>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4798      	blx	r3
 800e216:	4602      	mov	r2, r0
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	601a      	str	r2, [r3, #0]
}
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	4618      	mov	r0, r3
 800e220:	3708      	adds	r7, #8
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	200000f0 	.word	0x200000f0

0800e22c <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800e234:	4b05      	ldr	r3, [pc, #20]	; (800e24c <_ZN11SimpleMutexD1Ev+0x20>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	687a      	ldr	r2, [r7, #4]
 800e23a:	6812      	ldr	r2, [r2, #0]
 800e23c:	4610      	mov	r0, r2
 800e23e:	4798      	blx	r3
}
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	4618      	mov	r0, r3
 800e244:	3708      	adds	r7, #8
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	200000fc 	.word	0x200000fc

0800e250 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800e258:	4b04      	ldr	r3, [pc, #16]	; (800e26c <_ZN11SimpleMutex4LockEv+0x1c>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	687a      	ldr	r2, [r7, #4]
 800e25e:	6812      	ldr	r2, [r2, #0]
 800e260:	4610      	mov	r0, r2
 800e262:	4798      	blx	r3
}
 800e264:	bf00      	nop
 800e266:	3708      	adds	r7, #8
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	200000f4 	.word	0x200000f4

0800e270 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b082      	sub	sp, #8
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800e278:	4b04      	ldr	r3, [pc, #16]	; (800e28c <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	6812      	ldr	r2, [r2, #0]
 800e280:	4610      	mov	r0, r2
 800e282:	4798      	blx	r3
}
 800e284:	bf00      	nop
 800e286:	3708      	adds	r7, #8
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}
 800e28c:	200000f8 	.word	0x200000f8

0800e290 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	683a      	ldr	r2, [r7, #0]
 800e29e:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7ff ffd3 	bl	800e250 <_ZN11SimpleMutex4LockEv>
}
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3708      	adds	r7, #8
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b082      	sub	sp, #8
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f7ff ffd5 	bl	800e270 <_ZN11SimpleMutex6UnlockEv>
}
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3708      	adds	r7, #8
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800e2d4:	4b05      	ldr	r3, [pc, #20]	; (800e2ec <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d103      	bne.n	800e2e4 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800e2dc:	f003 fd7a 	bl	8011dd4 <_Z24defaultNewArrayAllocatorv>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	e001      	b.n	800e2e8 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800e2e4:	4b01      	ldr	r3, [pc, #4]	; (800e2ec <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	20000984 	.word	0x20000984

0800e2f0 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800e2f0:	b590      	push	{r4, r7, lr}
 800e2f2:	b085      	sub	sp, #20
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	60f8      	str	r0, [r7, #12]
 800e2f8:	60b9      	str	r1, [r7, #8]
 800e2fa:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800e2fc:	f7ff ffe8 	bl	800e2d0 <_ZN12SimpleString18getStringAllocatorEv>
 800e300:	6803      	ldr	r3, [r0, #0]
 800e302:	3308      	adds	r3, #8
 800e304:	681c      	ldr	r4, [r3, #0]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	68ba      	ldr	r2, [r7, #8]
 800e30a:	68f9      	ldr	r1, [r7, #12]
 800e30c:	47a0      	blx	r4
 800e30e:	4603      	mov	r3, r0
}
 800e310:	4618      	mov	r0, r3
 800e312:	3714      	adds	r7, #20
 800e314:	46bd      	mov	sp, r7
 800e316:	bd90      	pop	{r4, r7, pc}

0800e318 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800e318:	b590      	push	{r4, r7, lr}
 800e31a:	b087      	sub	sp, #28
 800e31c:	af02      	add	r7, sp, #8
 800e31e:	60f8      	str	r0, [r7, #12]
 800e320:	60b9      	str	r1, [r7, #8]
 800e322:	607a      	str	r2, [r7, #4]
 800e324:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800e326:	f7ff ffd3 	bl	800e2d0 <_ZN12SimpleString18getStringAllocatorEv>
 800e32a:	6803      	ldr	r3, [r0, #0]
 800e32c:	330c      	adds	r3, #12
 800e32e:	681c      	ldr	r4, [r3, #0]
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	9300      	str	r3, [sp, #0]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	68ba      	ldr	r2, [r7, #8]
 800e338:	68f9      	ldr	r1, [r7, #12]
 800e33a:	47a0      	blx	r4
}
 800e33c:	bf00      	nop
 800e33e:	3714      	adds	r7, #20
 800e340:	46bd      	mov	sp, r7
 800e342:	bd90      	pop	{r4, r7, pc}

0800e344 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800e34c:	2284      	movs	r2, #132	; 0x84
 800e34e:	4906      	ldr	r1, [pc, #24]	; (800e368 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800e350:	2001      	movs	r0, #1
 800e352:	f7ff ffcd 	bl	800e2f0 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800e356:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	2200      	movs	r2, #0
 800e35c:	701a      	strb	r2, [r3, #0]
    return empty;
 800e35e:	68fb      	ldr	r3, [r7, #12]
}
 800e360:	4618      	mov	r0, r3
 800e362:	3710      	adds	r7, #16
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	08026628 	.word	0x08026628

0800e36c <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b084      	sub	sp, #16
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	4618      	mov	r0, r3
 800e37a:	f001 f809 	bl	800f390 <_ZN12SimpleString7isSpaceEc>
 800e37e:	4603      	mov	r3, r0
 800e380:	2b00      	cmp	r3, #0
 800e382:	d003      	beq.n	800e38c <_ZN12SimpleString4AtoUEPKc+0x20>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	3301      	adds	r3, #1
 800e388:	607b      	str	r3, [r7, #4]
 800e38a:	e7f3      	b.n	800e374 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800e38c:	2300      	movs	r3, #0
 800e38e:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	781b      	ldrb	r3, [r3, #0]
 800e394:	4618      	mov	r0, r3
 800e396:	f000 ffe7 	bl	800f368 <_ZN12SimpleString7isDigitEc>
 800e39a:	4603      	mov	r3, r0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d005      	beq.n	800e3ac <_ZN12SimpleString4AtoUEPKc+0x40>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	2b2f      	cmp	r3, #47	; 0x2f
 800e3a6:	d901      	bls.n	800e3ac <_ZN12SimpleString4AtoUEPKc+0x40>
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	e000      	b.n	800e3ae <_ZN12SimpleString4AtoUEPKc+0x42>
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d010      	beq.n	800e3d4 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800e3b2:	68fa      	ldr	r2, [r7, #12]
 800e3b4:	4613      	mov	r3, r2
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	4413      	add	r3, r2
 800e3ba:	005b      	lsls	r3, r3, #1
 800e3bc:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	4413      	add	r3, r2
 800e3c8:	3b30      	subs	r3, #48	; 0x30
 800e3ca:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	607b      	str	r3, [r7, #4]
 800e3d2:	e7dd      	b.n	800e390 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3710      	adds	r7, #16
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}

0800e3de <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	b084      	sub	sp, #16
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f000 ffd0 	bl	800f390 <_ZN12SimpleString7isSpaceEc>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d003      	beq.n	800e3fe <_ZN12SimpleString4AtoIEPKc+0x20>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	3301      	adds	r3, #1
 800e3fa:	607b      	str	r3, [r7, #4]
 800e3fc:	e7f3      	b.n	800e3e6 <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	781b      	ldrb	r3, [r3, #0]
 800e402:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800e404:	7afb      	ldrb	r3, [r7, #11]
 800e406:	2b2d      	cmp	r3, #45	; 0x2d
 800e408:	d002      	beq.n	800e410 <_ZN12SimpleString4AtoIEPKc+0x32>
 800e40a:	7afb      	ldrb	r3, [r7, #11]
 800e40c:	2b2b      	cmp	r3, #43	; 0x2b
 800e40e:	d102      	bne.n	800e416 <_ZN12SimpleString4AtoIEPKc+0x38>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	3301      	adds	r3, #1
 800e414:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800e416:	2300      	movs	r3, #0
 800e418:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	4618      	mov	r0, r3
 800e420:	f000 ffa2 	bl	800f368 <_ZN12SimpleString7isDigitEc>
 800e424:	4603      	mov	r3, r0
 800e426:	2b00      	cmp	r3, #0
 800e428:	d00f      	beq.n	800e44a <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800e42a:	68fa      	ldr	r2, [r7, #12]
 800e42c:	4613      	mov	r3, r2
 800e42e:	009b      	lsls	r3, r3, #2
 800e430:	4413      	add	r3, r2
 800e432:	005b      	lsls	r3, r3, #1
 800e434:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	781b      	ldrb	r3, [r3, #0]
 800e43a:	3b30      	subs	r3, #48	; 0x30
 800e43c:	68fa      	ldr	r2, [r7, #12]
 800e43e:	4413      	add	r3, r2
 800e440:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	3301      	adds	r3, #1
 800e446:	607b      	str	r3, [r7, #4]
 800e448:	e7e7      	b.n	800e41a <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800e44a:	7afb      	ldrb	r3, [r7, #11]
 800e44c:	2b2d      	cmp	r3, #45	; 0x2d
 800e44e:	d102      	bne.n	800e456 <_ZN12SimpleString4AtoIEPKc+0x78>
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	425b      	negs	r3, r3
 800e454:	e000      	b.n	800e458 <_ZN12SimpleString4AtoIEPKc+0x7a>
 800e456:	68fb      	ldr	r3, [r7, #12]
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3710      	adds	r7, #16
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800e460:	b480      	push	{r7}
 800e462:	b083      	sub	sp, #12
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d00c      	beq.n	800e48c <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	781a      	ldrb	r2, [r3, #0]
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d106      	bne.n	800e48c <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	3301      	adds	r3, #1
 800e482:	607b      	str	r3, [r7, #4]
       ++s2;
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	3301      	adds	r3, #1
 800e488:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800e48a:	e7ee      	b.n	800e46a <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	461a      	mov	r2, r3
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	1ad3      	subs	r3, r2, r3
}
 800e498:	4618      	mov	r0, r3
 800e49a:	370c      	adds	r7, #12
 800e49c:	46bd      	mov	sp, r7
 800e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a2:	4770      	bx	lr

0800e4a4 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b085      	sub	sp, #20
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800e4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e4b0:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	60fb      	str	r3, [r7, #12]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	1c5a      	adds	r2, r3, #1
 800e4bc:	607a      	str	r2, [r7, #4]
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	bf14      	ite	ne
 800e4c4:	2301      	movne	r3, #1
 800e4c6:	2300      	moveq	r3, #0
 800e4c8:	b2db      	uxtb	r3, r3
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d000      	beq.n	800e4d0 <_ZN12SimpleString6StrLenEPKc+0x2c>
 800e4ce:	e7f0      	b.n	800e4b2 <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3714      	adds	r7, #20
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr

0800e4de <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800e4de:	b480      	push	{r7}
 800e4e0:	b085      	sub	sp, #20
 800e4e2:	af00      	add	r7, sp, #0
 800e4e4:	60f8      	str	r0, [r7, #12]
 800e4e6:	60b9      	str	r1, [r7, #8]
 800e4e8:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d013      	beq.n	800e518 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d00f      	beq.n	800e518 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	781a      	ldrb	r2, [r3, #0]
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	429a      	cmp	r2, r3
 800e502:	d109      	bne.n	800e518 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	3b01      	subs	r3, #1
 800e508:	607b      	str	r3, [r7, #4]
        ++s1;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	3301      	adds	r3, #1
 800e50e:	60fb      	str	r3, [r7, #12]
        ++s2;
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	3301      	adds	r3, #1
 800e514:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800e516:	e7e8      	b.n	800e4ea <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d006      	beq.n	800e52c <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	461a      	mov	r2, r3
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	781b      	ldrb	r3, [r3, #0]
 800e528:	1ad3      	subs	r3, r2, r3
 800e52a:	e000      	b.n	800e52e <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800e52c:	2300      	movs	r3, #0
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3714      	adds	r7, #20
 800e532:	46bd      	mov	sp, r7
 800e534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e538:	4770      	bx	lr

0800e53a <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800e53a:	b480      	push	{r7}
 800e53c:	b087      	sub	sp, #28
 800e53e:	af00      	add	r7, sp, #0
 800e540:	60f8      	str	r0, [r7, #12]
 800e542:	60b9      	str	r1, [r7, #8]
 800e544:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d002      	beq.n	800e556 <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d101      	bne.n	800e55a <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	e01e      	b.n	800e598 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	781a      	ldrb	r2, [r3, #0]
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	3b01      	subs	r3, #1
 800e566:	607b      	str	r3, [r7, #4]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d005      	beq.n	800e57a <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d001      	beq.n	800e57a <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800e576:	2301      	movs	r3, #1
 800e578:	e000      	b.n	800e57c <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800e57a:	2300      	movs	r3, #0
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d00a      	beq.n	800e596 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	3301      	adds	r3, #1
 800e584:	60bb      	str	r3, [r7, #8]
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	3301      	adds	r3, #1
 800e58a:	60fb      	str	r3, [r7, #12]
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	781a      	ldrb	r2, [r3, #0]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800e594:	e7e5      	b.n	800e562 <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800e596:	697b      	ldr	r3, [r7, #20]
}
 800e598:	4618      	mov	r0, r3
 800e59a:	371c      	adds	r7, #28
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr

0800e5a4 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b082      	sub	sp, #8
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d101      	bne.n	800e5ba <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	e01b      	b.n	800e5f2 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	781b      	ldrb	r3, [r3, #0]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d016      	beq.n	800e5f0 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800e5c2:	6838      	ldr	r0, [r7, #0]
 800e5c4:	f7ff ff6e 	bl	800e4a4 <_ZN12SimpleString6StrLenEPKc>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	6839      	ldr	r1, [r7, #0]
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f7ff ff85 	bl	800e4de <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	bf0c      	ite	eq
 800e5da:	2301      	moveq	r3, #1
 800e5dc:	2300      	movne	r3, #0
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d001      	beq.n	800e5e8 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	e004      	b.n	800e5f2 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	607b      	str	r3, [r7, #4]
 800e5ee:	e7e4      	b.n	800e5ba <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800e5f0:	2300      	movs	r3, #0
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3708      	adds	r7, #8
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}

0800e5fa <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800e5fa:	b580      	push	{r7, lr}
 800e5fc:	b082      	sub	sp, #8
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	4603      	mov	r3, r0
 800e602:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800e604:	79fb      	ldrb	r3, [r7, #7]
 800e606:	4618      	mov	r0, r3
 800e608:	f000 fed9 	bl	800f3be <_ZN12SimpleString7isUpperEc>
 800e60c:	4603      	mov	r3, r0
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d003      	beq.n	800e61a <_ZN12SimpleString7ToLowerEc+0x20>
 800e612:	79fb      	ldrb	r3, [r7, #7]
 800e614:	3320      	adds	r3, #32
 800e616:	b2db      	uxtb	r3, r3
 800e618:	e000      	b.n	800e61c <_ZN12SimpleString7ToLowerEc+0x22>
 800e61a:	79fb      	ldrb	r3, [r7, #7]
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3708      	adds	r7, #8
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800e624:	b480      	push	{r7}
 800e626:	b087      	sub	sp, #28
 800e628:	af00      	add	r7, sp, #0
 800e62a:	60f8      	str	r0, [r7, #12]
 800e62c:	60b9      	str	r1, [r7, #8]
 800e62e:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	613b      	str	r3, [r7, #16]

    while (n--)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	1e5a      	subs	r2, r3, #1
 800e63c:	607a      	str	r2, [r7, #4]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	bf14      	ite	ne
 800e642:	2301      	movne	r3, #1
 800e644:	2300      	moveq	r3, #0
 800e646:	b2db      	uxtb	r3, r3
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d013      	beq.n	800e674 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	781a      	ldrb	r2, [r3, #0]
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	429a      	cmp	r2, r3
 800e656:	d006      	beq.n	800e666 <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	461a      	mov	r2, r3
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	781b      	ldrb	r3, [r3, #0]
 800e662:	1ad3      	subs	r3, r2, r3
 800e664:	e007      	b.n	800e676 <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	3301      	adds	r3, #1
 800e66a:	617b      	str	r3, [r7, #20]
            ++p2;
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	3301      	adds	r3, #1
 800e670:	613b      	str	r3, [r7, #16]
    while (n--)
 800e672:	e7e1      	b.n	800e638 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800e674:	2300      	movs	r3, #0
}
 800e676:	4618      	mov	r0, r3
 800e678:	371c      	adds	r7, #28
 800e67a:	46bd      	mov	sp, r7
 800e67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e680:	4770      	bx	lr
	...

0800e684 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d00d      	beq.n	800e6b0 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6818      	ldr	r0, [r3, #0]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6859      	ldr	r1, [r3, #4]
 800e69c:	23ee      	movs	r3, #238	; 0xee
 800e69e:	4a06      	ldr	r2, [pc, #24]	; (800e6b8 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800e6a0:	f7ff fe3a 	bl	800e318 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	605a      	str	r2, [r3, #4]
    }
}
 800e6b0:	bf00      	nop
 800e6b2:	3708      	adds	r7, #8
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	08026628 	.word	0x08026628

0800e6bc <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f7ff ffdd 	bl	800e684 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f7ff fe37 	bl	800e344 <_ZNK12SimpleString14getEmptyStringEv>
 800e6d6:	4602      	mov	r2, r0
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	601a      	str	r2, [r3, #0]
}
 800e6dc:	bf00      	nop
 800e6de:	3708      	adds	r7, #8
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	60f8      	str	r0, [r7, #12]
 800e6ec:	60b9      	str	r1, [r7, #8]
 800e6ee:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800e6f0:	68f8      	ldr	r0, [r7, #12]
 800e6f2:	f7ff ffc7 	bl	800e684 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	4619      	mov	r1, r3
 800e702:	68b8      	ldr	r0, [r7, #8]
 800e704:	f000 fe12 	bl	800f32c <_ZN12SimpleString15copyToNewBufferEPKcj>
 800e708:	4602      	mov	r2, r0
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	601a      	str	r2, [r3, #0]
}
 800e70e:	bf00      	nop
 800e710:	3710      	adds	r7, #16
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
	...

0800e718 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f7ff ffae 	bl	800e684 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	683a      	ldr	r2, [r7, #0]
 800e72c:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	685b      	ldr	r3, [r3, #4]
 800e732:	f240 1209 	movw	r2, #265	; 0x109
 800e736:	4907      	ldr	r1, [pc, #28]	; (800e754 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800e738:	4618      	mov	r0, r3
 800e73a:	f7ff fdd9 	bl	800e2f0 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800e73e:	4602      	mov	r2, r0
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2200      	movs	r2, #0
 800e74a:	701a      	strb	r2, [r3, #0]
}
 800e74c:	bf00      	nop
 800e74e:	3708      	adds	r7, #8
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}
 800e754:	08026628 	.word	0x08026628

0800e758 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b084      	sub	sp, #16
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	60f8      	str	r0, [r7, #12]
 800e760:	60b9      	str	r1, [r7, #8]
 800e762:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800e764:	68f8      	ldr	r0, [r7, #12]
 800e766:	f7ff ff8d 	bl	800e684 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	687a      	ldr	r2, [r7, #4]
 800e76e:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	68ba      	ldr	r2, [r7, #8]
 800e774:	601a      	str	r2, [r3, #0]
}
 800e776:	bf00      	nop
 800e778:	3710      	adds	r7, #16
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}

0800e77e <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800e77e:	b590      	push	{r4, r7, lr}
 800e780:	b083      	sub	sp, #12
 800e782:	af00      	add	r7, sp, #0
 800e784:	6078      	str	r0, [r7, #4]
 800e786:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	681c      	ldr	r4, [r3, #0]
 800e78c:	6838      	ldr	r0, [r7, #0]
 800e78e:	f000 fbc1 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800e792:	4603      	mov	r3, r0
 800e794:	3301      	adds	r3, #1
 800e796:	461a      	mov	r2, r3
 800e798:	4621      	mov	r1, r4
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f7ff ffa2 	bl	800e6e4 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800e7a0:	bf00      	nop
 800e7a2:	370c      	adds	r7, #12
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd90      	pop	{r4, r7, pc}

0800e7a8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800e7b2:	6838      	ldr	r0, [r7, #0]
 800e7b4:	f7ff fe76 	bl	800e4a4 <_ZN12SimpleString6StrLenEPKc>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	461a      	mov	r2, r3
 800e7be:	6839      	ldr	r1, [r7, #0]
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f7ff ff8f 	bl	800e6e4 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800e7c6:	bf00      	nop
 800e7c8:	3708      	adds	r7, #8
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}

0800e7ce <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800e7ce:	b480      	push	{r7}
 800e7d0:	b083      	sub	sp, #12
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	6078      	str	r0, [r7, #4]
    return buffer_;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	370c      	adds	r7, #12
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr

0800e7e6 <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800e7e6:	b580      	push	{r7, lr}
 800e7e8:	b082      	sub	sp, #8
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	6078      	str	r0, [r7, #4]
 800e7ee:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	601a      	str	r2, [r3, #0]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d103      	bne.n	800e80a <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7ff ff5a 	bl	800e6bc <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800e808:	e003      	b.n	800e812 <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800e80a:	6839      	ldr	r1, [r7, #0]
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f7ff ffcb 	bl	800e7a8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	4618      	mov	r0, r3
 800e816:	3708      	adds	r7, #8
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}

0800e81c <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b088      	sub	sp, #32
 800e820:	af00      	add	r7, sp, #0
 800e822:	60f8      	str	r0, [r7, #12]
 800e824:	60b9      	str	r1, [r7, #8]
 800e826:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	2200      	movs	r2, #0
 800e82c:	601a      	str	r2, [r3, #0]
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	2200      	movs	r2, #0
 800e832:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800e834:	68b8      	ldr	r0, [r7, #8]
 800e836:	f7ff fe35 	bl	800e4a4 <_ZN12SimpleString6StrLenEPKc>
 800e83a:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	687a      	ldr	r2, [r7, #4]
 800e840:	fb02 f303 	mul.w	r3, r2, r3
 800e844:	3301      	adds	r3, #1
 800e846:	4619      	mov	r1, r3
 800e848:	68f8      	ldr	r0, [r7, #12]
 800e84a:	f7ff ff65 	bl	800e718 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800e854:	2300      	movs	r3, #0
 800e856:	61bb      	str	r3, [r7, #24]
 800e858:	69ba      	ldr	r2, [r7, #24]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	429a      	cmp	r2, r3
 800e85e:	d20e      	bcs.n	800e87e <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800e860:	697b      	ldr	r3, [r7, #20]
 800e862:	3301      	adds	r3, #1
 800e864:	461a      	mov	r2, r3
 800e866:	68b9      	ldr	r1, [r7, #8]
 800e868:	69f8      	ldr	r0, [r7, #28]
 800e86a:	f7ff fe66 	bl	800e53a <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800e86e:	69fa      	ldr	r2, [r7, #28]
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	4413      	add	r3, r2
 800e874:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800e876:	69bb      	ldr	r3, [r7, #24]
 800e878:	3301      	adds	r3, #1
 800e87a:	61bb      	str	r3, [r7, #24]
 800e87c:	e7ec      	b.n	800e858 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	2200      	movs	r2, #0
 800e882:	701a      	strb	r2, [r3, #0]
}
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	4618      	mov	r0, r3
 800e888:	3720      	adds	r7, #32
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}

0800e88e <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800e88e:	b580      	push	{r7, lr}
 800e890:	b082      	sub	sp, #8
 800e892:	af00      	add	r7, sp, #0
 800e894:	6078      	str	r0, [r7, #4]
 800e896:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2200      	movs	r2, #0
 800e89c:	601a      	str	r2, [r3, #0]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800e8a4:	6838      	ldr	r0, [r7, #0]
 800e8a6:	f7ff ff92 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f7ff ff7a 	bl	800e7a8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3708      	adds	r7, #8
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}

0800e8be <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800e8be:	b580      	push	{r7, lr}
 800e8c0:	b082      	sub	sp, #8
 800e8c2:	af00      	add	r7, sp, #0
 800e8c4:	6078      	str	r0, [r7, #4]
 800e8c6:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800e8c8:	687a      	ldr	r2, [r7, #4]
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d003      	beq.n	800e8d8 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800e8d0:	6839      	ldr	r1, [r7, #0]
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f7ff ff53 	bl	800e77e <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800e8d8:	687b      	ldr	r3, [r7, #4]
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3708      	adds	r7, #8
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}

0800e8e2 <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800e8e2:	b590      	push	{r4, r7, lr}
 800e8e4:	b083      	sub	sp, #12
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
 800e8ea:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f7ff ff6e 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800e8f2:	4604      	mov	r4, r0
 800e8f4:	6838      	ldr	r0, [r7, #0]
 800e8f6:	f7ff ff6a 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	4620      	mov	r0, r4
 800e900:	f7ff fe50 	bl	800e5a4 <_ZN12SimpleString6StrStrEPKcS1_>
 800e904:	4603      	mov	r3, r0
 800e906:	2b00      	cmp	r3, #0
 800e908:	bf14      	ite	ne
 800e90a:	2301      	movne	r3, #1
 800e90c:	2300      	moveq	r3, #0
 800e90e:	b2db      	uxtb	r3, r3
}
 800e910:	4618      	mov	r0, r3
 800e912:	370c      	adds	r7, #12
 800e914:	46bd      	mov	sp, r7
 800e916:	bd90      	pop	{r4, r7, pc}

0800e918 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800e918:	b590      	push	{r4, r7, lr}
 800e91a:	b087      	sub	sp, #28
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800e922:	f107 0308 	add.w	r3, r7, #8
 800e926:	6879      	ldr	r1, [r7, #4]
 800e928:	4618      	mov	r0, r3
 800e92a:	f000 fabb 	bl	800eea4 <_ZNK12SimpleString9lowerCaseEv>
 800e92e:	f107 0310 	add.w	r3, r7, #16
 800e932:	6839      	ldr	r1, [r7, #0]
 800e934:	4618      	mov	r0, r3
 800e936:	f000 fab5 	bl	800eea4 <_ZNK12SimpleString9lowerCaseEv>
 800e93a:	f107 0210 	add.w	r2, r7, #16
 800e93e:	f107 0308 	add.w	r3, r7, #8
 800e942:	4611      	mov	r1, r2
 800e944:	4618      	mov	r0, r3
 800e946:	f7ff ffcc 	bl	800e8e2 <_ZNK12SimpleString8containsERKS_>
 800e94a:	4603      	mov	r3, r0
 800e94c:	461c      	mov	r4, r3
 800e94e:	bf00      	nop
 800e950:	f107 0310 	add.w	r3, r7, #16
 800e954:	4618      	mov	r0, r3
 800e956:	f000 fafe 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800e95a:	f107 0308 	add.w	r3, r7, #8
 800e95e:	4618      	mov	r0, r3
 800e960:	f000 faf9 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800e964:	4623      	mov	r3, r4
}
 800e966:	4618      	mov	r0, r3
 800e968:	371c      	adds	r7, #28
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd90      	pop	{r4, r7, pc}

0800e96e <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800e96e:	b590      	push	{r4, r7, lr}
 800e970:	b083      	sub	sp, #12
 800e972:	af00      	add	r7, sp, #0
 800e974:	6078      	str	r0, [r7, #4]
 800e976:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800e978:	6838      	ldr	r0, [r7, #0]
 800e97a:	f000 facb 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800e97e:	4603      	mov	r3, r0
 800e980:	2b00      	cmp	r3, #0
 800e982:	bf0c      	ite	eq
 800e984:	2301      	moveq	r3, #1
 800e986:	2300      	movne	r3, #0
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d001      	beq.n	800e992 <_ZNK12SimpleString10startsWithERKS_+0x24>
 800e98e:	2301      	movs	r3, #1
 800e990:	e022      	b.n	800e9d8 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f000 fabe 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800e998:	4603      	mov	r3, r0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	bf0c      	ite	eq
 800e99e:	2301      	moveq	r3, #1
 800e9a0:	2300      	movne	r3, #0
 800e9a2:	b2db      	uxtb	r3, r3
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d001      	beq.n	800e9ac <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	e015      	b.n	800e9d8 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f7ff ff0e 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800e9b2:	4604      	mov	r4, r0
 800e9b4:	6838      	ldr	r0, [r7, #0]
 800e9b6:	f7ff ff0a 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	4619      	mov	r1, r3
 800e9be:	4620      	mov	r0, r4
 800e9c0:	f7ff fdf0 	bl	800e5a4 <_ZN12SimpleString6StrStrEPKcS1_>
 800e9c4:	4604      	mov	r4, r0
 800e9c6:	6878      	ldr	r0, [r7, #4]
 800e9c8:	f7ff ff01 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	429c      	cmp	r4, r3
 800e9d0:	bf0c      	ite	eq
 800e9d2:	2301      	moveq	r3, #1
 800e9d4:	2300      	movne	r3, #0
 800e9d6:	b2db      	uxtb	r3, r3
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	370c      	adds	r7, #12
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd90      	pop	{r4, r7, pc}

0800e9e0 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800e9e0:	b590      	push	{r4, r7, lr}
 800e9e2:	b085      	sub	sp, #20
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f000 fa92 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800e9f0:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800e9f2:	6838      	ldr	r0, [r7, #0]
 800e9f4:	f000 fa8e 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800e9f8:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d101      	bne.n	800ea04 <_ZNK12SimpleString8endsWithERKS_+0x24>
 800ea00:	2301      	movs	r3, #1
 800ea02:	e020      	b.n	800ea46 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d101      	bne.n	800ea0e <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	e01b      	b.n	800ea46 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800ea0e:	68fa      	ldr	r2, [r7, #12]
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d201      	bcs.n	800ea1a <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800ea16:	2300      	movs	r3, #0
 800ea18:	e015      	b.n	800ea46 <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f7ff fed7 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800ea20:	4601      	mov	r1, r0
 800ea22:	68fa      	ldr	r2, [r7, #12]
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	1ad3      	subs	r3, r2, r3
 800ea28:	18cc      	adds	r4, r1, r3
 800ea2a:	6838      	ldr	r0, [r7, #0]
 800ea2c:	f7ff fecf 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800ea30:	4603      	mov	r3, r0
 800ea32:	4619      	mov	r1, r3
 800ea34:	4620      	mov	r0, r4
 800ea36:	f7ff fd13 	bl	800e460 <_ZN12SimpleString6StrCmpEPKcS1_>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	bf0c      	ite	eq
 800ea40:	2301      	moveq	r3, #1
 800ea42:	2300      	movne	r3, #0
 800ea44:	b2db      	uxtb	r3, r3
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3714      	adds	r7, #20
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd90      	pop	{r4, r7, pc}

0800ea4e <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b086      	sub	sp, #24
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
 800ea56:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f7ff feb6 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800ea62:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800ea64:	2300      	movs	r3, #0
 800ea66:	60fb      	str	r3, [r7, #12]
    if (*str){
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	781b      	ldrb	r3, [r3, #0]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d008      	beq.n	800ea82 <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800ea70:	6838      	ldr	r0, [r7, #0]
 800ea72:	f7ff feac 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800ea76:	4603      	mov	r3, r0
 800ea78:	4619      	mov	r1, r3
 800ea7a:	6938      	ldr	r0, [r7, #16]
 800ea7c:	f7ff fd92 	bl	800e5a4 <_ZN12SimpleString6StrStrEPKcS1_>
 800ea80:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d014      	beq.n	800eab4 <_ZNK12SimpleString5countERKS_+0x66>
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d011      	beq.n	800eab4 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	613b      	str	r3, [r7, #16]
        str++;
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	3301      	adds	r3, #1
 800ea98:	613b      	str	r3, [r7, #16]
        num++;
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800eaa0:	6838      	ldr	r0, [r7, #0]
 800eaa2:	f7ff fe94 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	6938      	ldr	r0, [r7, #16]
 800eaac:	f7ff fd7a 	bl	800e5a4 <_ZN12SimpleString6StrStrEPKcS1_>
 800eab0:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800eab2:	e7e6      	b.n	800ea82 <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800eab4:	697b      	ldr	r3, [r7, #20]
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3718      	adds	r7, #24
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}

0800eabe <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800eabe:	b590      	push	{r4, r7, lr}
 800eac0:	b091      	sub	sp, #68	; 0x44
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	60f8      	str	r0, [r7, #12]
 800eac6:	60b9      	str	r1, [r7, #8]
 800eac8:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800eaca:	68b9      	ldr	r1, [r7, #8]
 800eacc:	68f8      	ldr	r0, [r7, #12]
 800eace:	f7ff ffbe 	bl	800ea4e <_ZNK12SimpleString5countERKS_>
 800ead2:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800ead4:	68b9      	ldr	r1, [r7, #8]
 800ead6:	68f8      	ldr	r0, [r7, #12]
 800ead8:	f7ff ff82 	bl	800e9e0 <_ZNK12SimpleString8endsWithERKS_>
 800eadc:	4603      	mov	r3, r0
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d001      	beq.n	800eae6 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800eae2:	2300      	movs	r3, #0
 800eae4:	e000      	b.n	800eae8 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800eae6:	2301      	movs	r3, #1
 800eae8:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800eaea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaee:	4413      	add	r3, r2
 800eaf0:	4619      	mov	r1, r3
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f001 f95c 	bl	800fdb0 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800eaf8:	68f8      	ldr	r0, [r7, #12]
 800eafa:	f7ff fe68 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800eafe:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800eb00:	2300      	movs	r3, #0
 800eb02:	63bb      	str	r3, [r7, #56]	; 0x38
 800eb04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d235      	bcs.n	800eb78 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800eb0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800eb10:	68b8      	ldr	r0, [r7, #8]
 800eb12:	f7ff fe5c 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800eb16:	4603      	mov	r3, r0
 800eb18:	4619      	mov	r1, r3
 800eb1a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800eb1c:	f7ff fd42 	bl	800e5a4 <_ZN12SimpleString6StrStrEPKcS1_>
 800eb20:	4603      	mov	r3, r0
 800eb22:	3301      	adds	r3, #1
 800eb24:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800eb26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f001 f9db 	bl	800fee4 <_ZN22SimpleStringCollectionixEj>
 800eb2e:	4604      	mov	r4, r0
 800eb30:	f107 031c 	add.w	r3, r7, #28
 800eb34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7ff fe55 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800eb3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb40:	1ad3      	subs	r3, r2, r3
 800eb42:	f107 0014 	add.w	r0, r7, #20
 800eb46:	f107 011c 	add.w	r1, r7, #28
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	f000 fb0c 	bl	800f168 <_ZNK12SimpleString9subStringEjj>
 800eb50:	f107 0314 	add.w	r3, r7, #20
 800eb54:	4619      	mov	r1, r3
 800eb56:	4620      	mov	r0, r4
 800eb58:	f7ff feb1 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 800eb5c:	f107 0314 	add.w	r3, r7, #20
 800eb60:	4618      	mov	r0, r3
 800eb62:	f000 f9f8 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800eb66:	f107 031c 	add.w	r3, r7, #28
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f000 f9f3 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800eb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb72:	3301      	adds	r3, #1
 800eb74:	63bb      	str	r3, [r7, #56]	; 0x38
 800eb76:	e7c5      	b.n	800eb04 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800eb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d015      	beq.n	800ebaa <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800eb7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f001 f9af 	bl	800fee4 <_ZN22SimpleStringCollectionixEj>
 800eb86:	4604      	mov	r4, r0
 800eb88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7ff fe29 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800eb94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb98:	4619      	mov	r1, r3
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	f7ff fe8f 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 800eba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eba4:	4618      	mov	r0, r3
 800eba6:	f000 f9d6 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    }
}
 800ebaa:	bf00      	nop
 800ebac:	3744      	adds	r7, #68	; 0x44
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd90      	pop	{r4, r7, pc}

0800ebb2 <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800ebb2:	b580      	push	{r7, lr}
 800ebb4:	b084      	sub	sp, #16
 800ebb6:	af00      	add	r7, sp, #0
 800ebb8:	6078      	str	r0, [r7, #4]
 800ebba:	460b      	mov	r3, r1
 800ebbc:	70fb      	strb	r3, [r7, #3]
 800ebbe:	4613      	mov	r3, r2
 800ebc0:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f000 f9a6 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800ebc8:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800ebca:	2300      	movs	r3, #0
 800ebcc:	60fb      	str	r3, [r7, #12]
 800ebce:	68fa      	ldr	r2, [r7, #12]
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d218      	bcs.n	800ec08 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f7ff fdf9 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800ebdc:	4602      	mov	r2, r0
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	781b      	ldrb	r3, [r3, #0]
 800ebe4:	78fa      	ldrb	r2, [r7, #3]
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	bf0c      	ite	eq
 800ebea:	2301      	moveq	r3, #1
 800ebec:	2300      	movne	r3, #0
 800ebee:	b2db      	uxtb	r3, r3
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d005      	beq.n	800ec00 <_ZN12SimpleString7replaceEcc+0x4e>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	4413      	add	r3, r2
 800ebfc:	78ba      	ldrb	r2, [r7, #2]
 800ebfe:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	3301      	adds	r3, #1
 800ec04:	60fb      	str	r3, [r7, #12]
 800ec06:	e7e2      	b.n	800ebce <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800ec08:	bf00      	nop
 800ec0a:	3710      	adds	r7, #16
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b08e      	sub	sp, #56	; 0x38
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	60f8      	str	r0, [r7, #12]
 800ec18:	60b9      	str	r1, [r7, #8]
 800ec1a:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800ec1c:	f107 0310 	add.w	r3, r7, #16
 800ec20:	68b9      	ldr	r1, [r7, #8]
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7ff fddf 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800ec28:	f107 0310 	add.w	r3, r7, #16
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	68f8      	ldr	r0, [r7, #12]
 800ec30:	f7ff ff0d 	bl	800ea4e <_ZNK12SimpleString5countERKS_>
 800ec34:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ec36:	f107 0310 	add.w	r3, r7, #16
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f000 f98b 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800ec40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d071      	beq.n	800ed2a <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800ec46:	68f8      	ldr	r0, [r7, #12]
 800ec48:	f000 f964 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800ec4c:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800ec4e:	68b8      	ldr	r0, [r7, #8]
 800ec50:	f7ff fc28 	bl	800e4a4 <_ZN12SimpleString6StrLenEPKc>
 800ec54:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f7ff fc24 	bl	800e4a4 <_ZN12SimpleString6StrLenEPKc>
 800ec5c:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800ec5e:	6a3b      	ldr	r3, [r7, #32]
 800ec60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec62:	fb02 f203 	mul.w	r2, r2, r3
 800ec66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec68:	441a      	add	r2, r3
 800ec6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec6e:	fb01 f303 	mul.w	r3, r1, r3
 800ec72:	1ad3      	subs	r3, r2, r3
 800ec74:	3301      	adds	r3, #1
 800ec76:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800ec78:	69fb      	ldr	r3, [r7, #28]
 800ec7a:	2b01      	cmp	r3, #1
 800ec7c:	d951      	bls.n	800ed22 <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800ec7e:	f240 129d 	movw	r2, #413	; 0x19d
 800ec82:	492c      	ldr	r1, [pc, #176]	; (800ed34 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800ec84:	69f8      	ldr	r0, [r7, #28]
 800ec86:	f7ff fb33 	bl	800e2f0 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800ec8a:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	637b      	str	r3, [r7, #52]	; 0x34
 800ec90:	2300      	movs	r3, #0
 800ec92:	633b      	str	r3, [r7, #48]	; 0x30
 800ec94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d236      	bcs.n	800ed0a <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800ec9c:	68f8      	ldr	r0, [r7, #12]
 800ec9e:	f7ff fd96 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800eca2:	4602      	mov	r2, r0
 800eca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eca6:	4413      	add	r3, r2
 800eca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecaa:	68b9      	ldr	r1, [r7, #8]
 800ecac:	4618      	mov	r0, r3
 800ecae:	f7ff fc16 	bl	800e4de <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	bf0c      	ite	eq
 800ecb8:	2301      	moveq	r3, #1
 800ecba:	2300      	movne	r3, #0
 800ecbc:	b2db      	uxtb	r3, r3
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d011      	beq.n	800ece6 <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800ecc2:	69ba      	ldr	r2, [r7, #24]
 800ecc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc6:	18d0      	adds	r0, r2, r3
 800ecc8:	6a3b      	ldr	r3, [r7, #32]
 800ecca:	3301      	adds	r3, #1
 800eccc:	461a      	mov	r2, r3
 800ecce:	6879      	ldr	r1, [r7, #4]
 800ecd0:	f7ff fc33 	bl	800e53a <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800ecd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecd6:	6a3b      	ldr	r3, [r7, #32]
 800ecd8:	4413      	add	r3, r2
 800ecda:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800ecdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ecde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece0:	4413      	add	r3, r2
 800ece2:	637b      	str	r3, [r7, #52]	; 0x34
 800ece4:	e7d6      	b.n	800ec94 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800ece6:	68f8      	ldr	r0, [r7, #12]
 800ece8:	f7ff fd71 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800ecec:	4602      	mov	r2, r0
 800ecee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecf0:	441a      	add	r2, r3
 800ecf2:	69b9      	ldr	r1, [r7, #24]
 800ecf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf6:	440b      	add	r3, r1
 800ecf8:	7812      	ldrb	r2, [r2, #0]
 800ecfa:	701a      	strb	r2, [r3, #0]
                j++;
 800ecfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecfe:	3301      	adds	r3, #1
 800ed00:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800ed02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed04:	3301      	adds	r3, #1
 800ed06:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800ed08:	e7c4      	b.n	800ec94 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800ed0a:	69fb      	ldr	r3, [r7, #28]
 800ed0c:	3b01      	subs	r3, #1
 800ed0e:	69ba      	ldr	r2, [r7, #24]
 800ed10:	4413      	add	r3, r2
 800ed12:	2200      	movs	r2, #0
 800ed14:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800ed16:	69fa      	ldr	r2, [r7, #28]
 800ed18:	69b9      	ldr	r1, [r7, #24]
 800ed1a:	68f8      	ldr	r0, [r7, #12]
 800ed1c:	f7ff fd1c 	bl	800e758 <_ZN12SimpleString19setInternalBufferToEPcj>
 800ed20:	e004      	b.n	800ed2c <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800ed22:	68f8      	ldr	r0, [r7, #12]
 800ed24:	f7ff fcca 	bl	800e6bc <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800ed28:	e000      	b.n	800ed2c <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800ed2a:	bf00      	nop
}
 800ed2c:	3738      	adds	r7, #56	; 0x38
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	08026628 	.word	0x08026628

0800ed38 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800ed38:	b590      	push	{r4, r7, lr}
 800ed3a:	b089      	sub	sp, #36	; 0x24
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
 800ed40:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800ed42:	493b      	ldr	r1, [pc, #236]	; (800ee30 <_ZNK12SimpleString9printableEv+0xf8>)
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f7ff fd4e 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800ed4a:	6838      	ldr	r0, [r7, #0]
 800ed4c:	f000 f876 	bl	800ee3c <_ZNK12SimpleString16getPrintableSizeEv>
 800ed50:	4603      	mov	r3, r0
 800ed52:	3301      	adds	r3, #1
 800ed54:	4619      	mov	r1, r3
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f7ff fcde 	bl	800e718 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800ed5c:	6838      	ldr	r0, [r7, #0]
 800ed5e:	f000 f8d9 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800ed62:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800ed64:	2300      	movs	r3, #0
 800ed66:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800ed68:	2300      	movs	r3, #0
 800ed6a:	61bb      	str	r3, [r7, #24]
 800ed6c:	69ba      	ldr	r2, [r7, #24]
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d252      	bcs.n	800ee1a <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	681a      	ldr	r2, [r3, #0]
 800ed78:	69bb      	ldr	r3, [r7, #24]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800ed80:	7cfb      	ldrb	r3, [r7, #19]
 800ed82:	4618      	mov	r0, r3
 800ed84:	f000 fb43 	bl	800f40e <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d012      	beq.n	800edb4 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681a      	ldr	r2, [r3, #0]
 800ed92:	69fb      	ldr	r3, [r7, #28]
 800ed94:	18d0      	adds	r0, r2, r3
 800ed96:	7cfb      	ldrb	r3, [r7, #19]
 800ed98:	3b07      	subs	r3, #7
 800ed9a:	b2db      	uxtb	r3, r3
 800ed9c:	461a      	mov	r2, r3
 800ed9e:	4b25      	ldr	r3, [pc, #148]	; (800ee34 <_ZNK12SimpleString9printableEv+0xfc>)
 800eda0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eda4:	2202      	movs	r2, #2
 800eda6:	4619      	mov	r1, r3
 800eda8:	f7ff fbc7 	bl	800e53a <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800edac:	69fb      	ldr	r3, [r7, #28]
 800edae:	3302      	adds	r3, #2
 800edb0:	61fb      	str	r3, [r7, #28]
 800edb2:	e02e      	b.n	800ee12 <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800edb4:	7cfb      	ldrb	r3, [r7, #19]
 800edb6:	4618      	mov	r0, r3
 800edb8:	f000 fb15 	bl	800f3e6 <_ZN12SimpleString9isControlEc>
 800edbc:	4603      	mov	r3, r0
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d01e      	beq.n	800ee00 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800edc2:	7cfa      	ldrb	r2, [r7, #19]
 800edc4:	f107 0308 	add.w	r3, r7, #8
 800edc8:	491b      	ldr	r1, [pc, #108]	; (800ee38 <_ZNK12SimpleString9printableEv+0x100>)
 800edca:	4618      	mov	r0, r3
 800edcc:	f000 fdca 	bl	800f964 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	18d4      	adds	r4, r2, r3
 800edd8:	f107 0308 	add.w	r3, r7, #8
 800eddc:	4618      	mov	r0, r3
 800edde:	f000 f88d 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2204      	movs	r2, #4
 800ede6:	4619      	mov	r1, r3
 800ede8:	4620      	mov	r0, r4
 800edea:	f7ff fba6 	bl	800e53a <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800edee:	69fb      	ldr	r3, [r7, #28]
 800edf0:	3304      	adds	r3, #4
 800edf2:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800edf4:	f107 0308 	add.w	r3, r7, #8
 800edf8:	4618      	mov	r0, r3
 800edfa:	f000 f8ac 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800edfe:	e008      	b.n	800ee12 <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681a      	ldr	r2, [r3, #0]
 800ee04:	69fb      	ldr	r3, [r7, #28]
 800ee06:	4413      	add	r3, r2
 800ee08:	7cfa      	ldrb	r2, [r7, #19]
 800ee0a:	701a      	strb	r2, [r3, #0]
            j++;
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	3301      	adds	r3, #1
 800ee10:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800ee12:	69bb      	ldr	r3, [r7, #24]
 800ee14:	3301      	adds	r3, #1
 800ee16:	61bb      	str	r3, [r7, #24]
 800ee18:	e7a8      	b.n	800ed6c <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681a      	ldr	r2, [r3, #0]
 800ee1e:	69fb      	ldr	r3, [r7, #28]
 800ee20:	4413      	add	r3, r2
 800ee22:	2200      	movs	r2, #0
 800ee24:	701a      	strb	r2, [r3, #0]

    return result;
 800ee26:	bf00      	nop
}
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	3724      	adds	r7, #36	; 0x24
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd90      	pop	{r4, r7, pc}
 800ee30:	080266e8 	.word	0x080266e8
 800ee34:	2000006c 	.word	0x2000006c
 800ee38:	080266ec 	.word	0x080266ec

0800ee3c <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b086      	sub	sp, #24
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f000 f865 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800ee4a:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800ee50:	2300      	movs	r3, #0
 800ee52:	613b      	str	r3, [r7, #16]
 800ee54:	693a      	ldr	r2, [r7, #16]
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d21e      	bcs.n	800ee9a <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681a      	ldr	r2, [r3, #0]
 800ee60:	693b      	ldr	r3, [r7, #16]
 800ee62:	4413      	add	r3, r2
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800ee68:	7afb      	ldrb	r3, [r7, #11]
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f000 facf 	bl	800f40e <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800ee70:	4603      	mov	r3, r0
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d003      	beq.n	800ee7e <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	3301      	adds	r3, #1
 800ee7a:	617b      	str	r3, [r7, #20]
 800ee7c:	e009      	b.n	800ee92 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800ee7e:	7afb      	ldrb	r3, [r7, #11]
 800ee80:	4618      	mov	r0, r3
 800ee82:	f000 fab0 	bl	800f3e6 <_ZN12SimpleString9isControlEc>
 800ee86:	4603      	mov	r3, r0
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d002      	beq.n	800ee92 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	3303      	adds	r3, #3
 800ee90:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	3301      	adds	r3, #1
 800ee96:	613b      	str	r3, [r7, #16]
 800ee98:	e7dc      	b.n	800ee54 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800ee9a:	697b      	ldr	r3, [r7, #20]
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3718      	adds	r7, #24
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800eea4:	b590      	push	{r4, r7, lr}
 800eea6:	b085      	sub	sp, #20
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800eeae:	6839      	ldr	r1, [r7, #0]
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f7ff fcec 	bl	800e88e <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f000 f82c 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800eebc:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800eebe:	2300      	movs	r3, #0
 800eec0:	60fb      	str	r3, [r7, #12]
 800eec2:	68fa      	ldr	r2, [r7, #12]
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d213      	bcs.n	800eef2 <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f7ff fc7f 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800eed0:	4602      	mov	r2, r0
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	4413      	add	r3, r2
 800eed6:	7819      	ldrb	r1, [r3, #0]
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681a      	ldr	r2, [r3, #0]
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	18d4      	adds	r4, r2, r3
 800eee0:	4608      	mov	r0, r1
 800eee2:	f7ff fb8a 	bl	800e5fa <_ZN12SimpleString7ToLowerEc>
 800eee6:	4603      	mov	r3, r0
 800eee8:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	3301      	adds	r3, #1
 800eeee:	60fb      	str	r3, [r7, #12]
 800eef0:	e7e7      	b.n	800eec2 <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800eef2:	bf00      	nop
}
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	3714      	adds	r7, #20
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd90      	pop	{r4, r7, pc}

0800eefc <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b082      	sub	sp, #8
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f7ff fc62 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800ef0a:	4603      	mov	r3, r0
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f7ff fc56 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800ef22:	4603      	mov	r3, r0
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7ff fabd 	bl	800e4a4 <_ZN12SimpleString6StrLenEPKc>
 800ef2a:	4603      	mov	r3, r0
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3708      	adds	r7, #8
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}

0800ef34 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b082      	sub	sp, #8
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f7ff ffe9 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	bf0c      	ite	eq
 800ef48:	2301      	moveq	r3, #1
 800ef4a:	2300      	movne	r3, #0
 800ef4c:	b2db      	uxtb	r3, r3
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3708      	adds	r7, #8
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}

0800ef56 <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800ef56:	b580      	push	{r7, lr}
 800ef58:	b082      	sub	sp, #8
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f7ff fb90 	bl	800e684 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	4618      	mov	r0, r3
 800ef68:	3708      	adds	r7, #8
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}

0800ef6e <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800ef6e:	b590      	push	{r4, r7, lr}
 800ef70:	b083      	sub	sp, #12
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	6078      	str	r0, [r7, #4]
 800ef76:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f7ff ffbf 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800ef7e:	4604      	mov	r4, r0
 800ef80:	6838      	ldr	r0, [r7, #0]
 800ef82:	f7ff ffbb 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800ef86:	4603      	mov	r3, r0
 800ef88:	4619      	mov	r1, r3
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f7ff fa68 	bl	800e460 <_ZN12SimpleString6StrCmpEPKcS1_>
 800ef90:	4603      	mov	r3, r0
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	bf0c      	ite	eq
 800ef96:	2301      	moveq	r3, #1
 800ef98:	2300      	movne	r3, #0
 800ef9a:	b2db      	uxtb	r3, r3
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	370c      	adds	r7, #12
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd90      	pop	{r4, r7, pc}

0800efa4 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800efa4:	b590      	push	{r4, r7, lr}
 800efa6:	b087      	sub	sp, #28
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800efae:	f107 0308 	add.w	r3, r7, #8
 800efb2:	6879      	ldr	r1, [r7, #4]
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7ff ff75 	bl	800eea4 <_ZNK12SimpleString9lowerCaseEv>
 800efba:	f107 0310 	add.w	r3, r7, #16
 800efbe:	6839      	ldr	r1, [r7, #0]
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7ff ff6f 	bl	800eea4 <_ZNK12SimpleString9lowerCaseEv>
 800efc6:	f107 0210 	add.w	r2, r7, #16
 800efca:	f107 0308 	add.w	r3, r7, #8
 800efce:	4611      	mov	r1, r2
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7ff ffcc 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 800efd6:	4603      	mov	r3, r0
 800efd8:	461c      	mov	r4, r3
 800efda:	f107 0310 	add.w	r3, r7, #16
 800efde:	4618      	mov	r0, r3
 800efe0:	f7ff ffb9 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800efe4:	f107 0308 	add.w	r3, r7, #8
 800efe8:	4618      	mov	r0, r3
 800efea:	f7ff ffb4 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800efee:	4623      	mov	r3, r4
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	371c      	adds	r7, #28
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd90      	pop	{r4, r7, pc}

0800eff8 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800f002:	6839      	ldr	r1, [r7, #0]
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f7ff ffb2 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 800f00a:	4603      	mov	r3, r0
 800f00c:	f083 0301 	eor.w	r3, r3, #1
 800f010:	b2db      	uxtb	r3, r3
}
 800f012:	4618      	mov	r0, r3
 800f014:	3708      	adds	r7, #8
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}

0800f01a <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800f01a:	b580      	push	{r7, lr}
 800f01c:	b084      	sub	sp, #16
 800f01e:	af00      	add	r7, sp, #0
 800f020:	60f8      	str	r0, [r7, #12]
 800f022:	60b9      	str	r1, [r7, #8]
 800f024:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800f026:	68b8      	ldr	r0, [r7, #8]
 800f028:	f7ff fbd1 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800f02c:	4603      	mov	r3, r0
 800f02e:	4619      	mov	r1, r3
 800f030:	68f8      	ldr	r0, [r7, #12]
 800f032:	f7ff fbd8 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f7ff fbc9 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800f03c:	4603      	mov	r3, r0
 800f03e:	4619      	mov	r1, r3
 800f040:	68f8      	ldr	r0, [r7, #12]
 800f042:	f000 f817 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    return t;
 800f046:	bf00      	nop
}
 800f048:	68f8      	ldr	r0, [r7, #12]
 800f04a:	3710      	adds	r7, #16
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b082      	sub	sp, #8
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800f05a:	6838      	ldr	r0, [r7, #0]
 800f05c:	f7ff fbb7 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800f060:	4603      	mov	r3, r0
 800f062:	4619      	mov	r1, r3
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f000 f805 	bl	800f074 <_ZN12SimpleStringpLEPKc>
 800f06a:	4603      	mov	r3, r0
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	3708      	adds	r7, #8
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b086      	sub	sp, #24
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
 800f07c:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f7ff ff48 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800f084:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800f086:	6838      	ldr	r0, [r7, #0]
 800f088:	f7ff fa0c 	bl	800e4a4 <_ZN12SimpleString6StrLenEPKc>
 800f08c:	4603      	mov	r3, r0
 800f08e:	3301      	adds	r3, #1
 800f090:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800f092:	697a      	ldr	r2, [r7, #20]
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	4413      	add	r3, r2
 800f098:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f7ff fb97 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	68f9      	ldr	r1, [r7, #12]
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f000 f941 	bl	800f32c <_ZN12SimpleString15copyToNewBufferEPKcj>
 800f0aa:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800f0ac:	68ba      	ldr	r2, [r7, #8]
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	4413      	add	r3, r2
 800f0b2:	693a      	ldr	r2, [r7, #16]
 800f0b4:	6839      	ldr	r1, [r7, #0]
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7ff fa3f 	bl	800e53a <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800f0bc:	68fa      	ldr	r2, [r7, #12]
 800f0be:	68b9      	ldr	r1, [r7, #8]
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	f7ff fb49 	bl	800e758 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800f0c6:	687b      	ldr	r3, [r7, #4]
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3718      	adds	r7, #24
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}

0800f0d0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800f0d0:	b590      	push	{r4, r7, lr}
 800f0d2:	b08b      	sub	sp, #44	; 0x2c
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	60f8      	str	r0, [r7, #12]
 800f0d8:	60b9      	str	r1, [r7, #8]
 800f0da:	4613      	mov	r3, r2
 800f0dc:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800f0de:	68f8      	ldr	r0, [r7, #12]
 800f0e0:	f7ff ff18 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800f0e4:	4604      	mov	r4, r0
 800f0e6:	68b8      	ldr	r0, [r7, #8]
 800f0e8:	f7ff ff14 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	429c      	cmp	r4, r3
 800f0f0:	bf8c      	ite	hi
 800f0f2:	2301      	movhi	r3, #1
 800f0f4:	2300      	movls	r3, #0
 800f0f6:	b2db      	uxtb	r3, r3
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d006      	beq.n	800f10a <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800f0fc:	79fb      	ldrb	r3, [r7, #7]
 800f0fe:	461a      	mov	r2, r3
 800f100:	68f9      	ldr	r1, [r7, #12]
 800f102:	68b8      	ldr	r0, [r7, #8]
 800f104:	f7ff ffe4 	bl	800f0d0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800f108:	e02b      	b.n	800f162 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800f10a:	79fb      	ldrb	r3, [r7, #7]
 800f10c:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800f10e:	2300      	movs	r3, #0
 800f110:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800f112:	68b8      	ldr	r0, [r7, #8]
 800f114:	f7ff fefe 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800f118:	4604      	mov	r4, r0
 800f11a:	68f8      	ldr	r0, [r7, #12]
 800f11c:	f7ff fefa 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800f120:	4603      	mov	r3, r0
 800f122:	1ae2      	subs	r2, r4, r3
 800f124:	f107 0114 	add.w	r1, r7, #20
 800f128:	f107 0320 	add.w	r3, r7, #32
 800f12c:	4618      	mov	r0, r3
 800f12e:	f7ff fb75 	bl	800e81c <_ZN12SimpleStringC1EPKcj>
 800f132:	f107 0318 	add.w	r3, r7, #24
 800f136:	f107 0120 	add.w	r1, r7, #32
 800f13a:	68fa      	ldr	r2, [r7, #12]
 800f13c:	4618      	mov	r0, r3
 800f13e:	f7ff ff6c 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 800f142:	f107 0318 	add.w	r3, r7, #24
 800f146:	4619      	mov	r1, r3
 800f148:	68f8      	ldr	r0, [r7, #12]
 800f14a:	f7ff fbb8 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 800f14e:	f107 0318 	add.w	r3, r7, #24
 800f152:	4618      	mov	r0, r3
 800f154:	f7ff feff 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800f158:	f107 0320 	add.w	r3, r7, #32
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7ff fefa 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 800f162:	372c      	adds	r7, #44	; 0x2c
 800f164:	46bd      	mov	sp, r7
 800f166:	bd90      	pop	{r4, r7, pc}

0800f168 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b086      	sub	sp, #24
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	60f8      	str	r0, [r7, #12]
 800f170:	60b9      	str	r1, [r7, #8]
 800f172:	607a      	str	r2, [r7, #4]
 800f174:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800f176:	68b8      	ldr	r0, [r7, #8]
 800f178:	f7ff fecc 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800f17c:	4603      	mov	r3, r0
 800f17e:	3b01      	subs	r3, #1
 800f180:	687a      	ldr	r2, [r7, #4]
 800f182:	429a      	cmp	r2, r3
 800f184:	bf8c      	ite	hi
 800f186:	2301      	movhi	r3, #1
 800f188:	2300      	movls	r3, #0
 800f18a:	b2db      	uxtb	r3, r3
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d004      	beq.n	800f19a <_ZNK12SimpleString9subStringEjj+0x32>
 800f190:	4919      	ldr	r1, [pc, #100]	; (800f1f8 <_ZNK12SimpleString9subStringEjj+0x90>)
 800f192:	68f8      	ldr	r0, [r7, #12]
 800f194:	f7ff fb27 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800f198:	e029      	b.n	800f1ee <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800f19a:	68b8      	ldr	r0, [r7, #8]
 800f19c:	f7ff fb17 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800f1a0:	4602      	mov	r2, r0
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	441a      	add	r2, r3
 800f1a6:	f107 0310 	add.w	r3, r7, #16
 800f1aa:	4611      	mov	r1, r2
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f7ff fb1a 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800f1b2:	f107 0310 	add.w	r3, r7, #16
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7ff feac 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800f1bc:	4602      	mov	r2, r0
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	4293      	cmp	r3, r2
 800f1c2:	bf34      	ite	cc
 800f1c4:	2301      	movcc	r3, #1
 800f1c6:	2300      	movcs	r3, #0
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d004      	beq.n	800f1d8 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800f1ce:	693a      	ldr	r2, [r7, #16]
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	4413      	add	r3, r2
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	701a      	strb	r2, [r3, #0]

    return newString;
 800f1d8:	f107 0310 	add.w	r3, r7, #16
 800f1dc:	4619      	mov	r1, r3
 800f1de:	68f8      	ldr	r0, [r7, #12]
 800f1e0:	f7ff fb55 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800f1e4:	f107 0310 	add.w	r3, r7, #16
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f7ff feb4 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 800f1ee:	68f8      	ldr	r0, [r7, #12]
 800f1f0:	3718      	adds	r7, #24
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}
 800f1f6:	bf00      	nop
 800f1f8:	080266e8 	.word	0x080266e8

0800f1fc <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b084      	sub	sp, #16
 800f200:	af00      	add	r7, sp, #0
 800f202:	60f8      	str	r0, [r7, #12]
 800f204:	60b9      	str	r1, [r7, #8]
 800f206:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800f208:	68f8      	ldr	r0, [r7, #12]
 800f20a:	f04f 33ff 	mov.w	r3, #4294967295
 800f20e:	687a      	ldr	r2, [r7, #4]
 800f210:	68b9      	ldr	r1, [r7, #8]
 800f212:	f7ff ffa9 	bl	800f168 <_ZNK12SimpleString9subStringEjj>
}
 800f216:	68f8      	ldr	r0, [r7, #12]
 800f218:	3710      	adds	r7, #16
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}

0800f21e <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800f21e:	b580      	push	{r7, lr}
 800f220:	b082      	sub	sp, #8
 800f222:	af00      	add	r7, sp, #0
 800f224:	6078      	str	r0, [r7, #4]
 800f226:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	f7ff fad0 	bl	800e7ce <_ZNK12SimpleString9getBufferEv>
 800f22e:	4602      	mov	r2, r0
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	4413      	add	r3, r2
 800f234:	781b      	ldrb	r3, [r3, #0]
}
 800f236:	4618      	mov	r0, r3
 800f238:	3708      	adds	r7, #8
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}

0800f23e <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800f23e:	b580      	push	{r7, lr}
 800f240:	b082      	sub	sp, #8
 800f242:	af00      	add	r7, sp, #0
 800f244:	6078      	str	r0, [r7, #4]
 800f246:	460b      	mov	r3, r1
 800f248:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800f24a:	78fb      	ldrb	r3, [r7, #3]
 800f24c:	461a      	mov	r2, r3
 800f24e:	2100      	movs	r1, #0
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f000 f805 	bl	800f260 <_ZNK12SimpleString8findFromEjc>
 800f256:	4603      	mov	r3, r0
}
 800f258:	4618      	mov	r0, r3
 800f25a:	3708      	adds	r7, #8
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}

0800f260 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b086      	sub	sp, #24
 800f264:	af00      	add	r7, sp, #0
 800f266:	60f8      	str	r0, [r7, #12]
 800f268:	60b9      	str	r1, [r7, #8]
 800f26a:	4613      	mov	r3, r2
 800f26c:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800f26e:	68f8      	ldr	r0, [r7, #12]
 800f270:	f7ff fe50 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800f274:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	617b      	str	r3, [r7, #20]
 800f27a:	697a      	ldr	r2, [r7, #20]
 800f27c:	693b      	ldr	r3, [r7, #16]
 800f27e:	429a      	cmp	r2, r3
 800f280:	d213      	bcs.n	800f2aa <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800f282:	6979      	ldr	r1, [r7, #20]
 800f284:	68f8      	ldr	r0, [r7, #12]
 800f286:	f7ff ffca 	bl	800f21e <_ZNK12SimpleString2atEj>
 800f28a:	4603      	mov	r3, r0
 800f28c:	461a      	mov	r2, r3
 800f28e:	79fb      	ldrb	r3, [r7, #7]
 800f290:	4293      	cmp	r3, r2
 800f292:	bf0c      	ite	eq
 800f294:	2301      	moveq	r3, #1
 800f296:	2300      	movne	r3, #0
 800f298:	b2db      	uxtb	r3, r3
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d001      	beq.n	800f2a2 <_ZNK12SimpleString8findFromEjc+0x42>
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	e005      	b.n	800f2ae <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	3301      	adds	r3, #1
 800f2a6:	617b      	str	r3, [r7, #20]
 800f2a8:	e7e7      	b.n	800f27a <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800f2aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3718      	adds	r7, #24
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
	...

0800f2b8 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b086      	sub	sp, #24
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	60f8      	str	r0, [r7, #12]
 800f2c0:	60b9      	str	r1, [r7, #8]
 800f2c2:	4611      	mov	r1, r2
 800f2c4:	461a      	mov	r2, r3
 800f2c6:	460b      	mov	r3, r1
 800f2c8:	71fb      	strb	r3, [r7, #7]
 800f2ca:	4613      	mov	r3, r2
 800f2cc:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800f2ce:	79fb      	ldrb	r3, [r7, #7]
 800f2d0:	4619      	mov	r1, r3
 800f2d2:	68b8      	ldr	r0, [r7, #8]
 800f2d4:	f7ff ffb3 	bl	800f23e <_ZNK12SimpleString4findEc>
 800f2d8:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2e0:	d104      	bne.n	800f2ec <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800f2e2:	4911      	ldr	r1, [pc, #68]	; (800f328 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800f2e4:	68f8      	ldr	r0, [r7, #12]
 800f2e6:	f7ff fa7e 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800f2ea:	e019      	b.n	800f320 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800f2ec:	79bb      	ldrb	r3, [r7, #6]
 800f2ee:	461a      	mov	r2, r3
 800f2f0:	6979      	ldr	r1, [r7, #20]
 800f2f2:	68b8      	ldr	r0, [r7, #8]
 800f2f4:	f7ff ffb4 	bl	800f260 <_ZNK12SimpleString8findFromEjc>
 800f2f8:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f300:	d106      	bne.n	800f310 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	697a      	ldr	r2, [r7, #20]
 800f306:	68b9      	ldr	r1, [r7, #8]
 800f308:	4618      	mov	r0, r3
 800f30a:	f7ff ff77 	bl	800f1fc <_ZNK12SimpleString9subStringEj>
 800f30e:	e007      	b.n	800f320 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800f310:	693a      	ldr	r2, [r7, #16]
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	1ad3      	subs	r3, r2, r3
 800f316:	68f8      	ldr	r0, [r7, #12]
 800f318:	697a      	ldr	r2, [r7, #20]
 800f31a:	68b9      	ldr	r1, [r7, #8]
 800f31c:	f7ff ff24 	bl	800f168 <_ZNK12SimpleString9subStringEjj>
}
 800f320:	68f8      	ldr	r0, [r7, #12]
 800f322:	3718      	adds	r7, #24
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}
 800f328:	080266e8 	.word	0x080266e8

0800f32c <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800f336:	f240 2275 	movw	r2, #629	; 0x275
 800f33a:	490a      	ldr	r1, [pc, #40]	; (800f364 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800f33c:	6838      	ldr	r0, [r7, #0]
 800f33e:	f7fe ffd7 	bl	800e2f0 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800f342:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800f344:	683a      	ldr	r2, [r7, #0]
 800f346:	6879      	ldr	r1, [r7, #4]
 800f348:	68f8      	ldr	r0, [r7, #12]
 800f34a:	f7ff f8f6 	bl	800e53a <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	3b01      	subs	r3, #1
 800f352:	68fa      	ldr	r2, [r7, #12]
 800f354:	4413      	add	r3, r2
 800f356:	2200      	movs	r2, #0
 800f358:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800f35a:	68fb      	ldr	r3, [r7, #12]
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	3710      	adds	r7, #16
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}
 800f364:	08026628 	.word	0x08026628

0800f368 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800f368:	b480      	push	{r7}
 800f36a:	b083      	sub	sp, #12
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	4603      	mov	r3, r0
 800f370:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800f372:	79fb      	ldrb	r3, [r7, #7]
 800f374:	2b2f      	cmp	r3, #47	; 0x2f
 800f376:	d904      	bls.n	800f382 <_ZN12SimpleString7isDigitEc+0x1a>
 800f378:	79fb      	ldrb	r3, [r7, #7]
 800f37a:	2b39      	cmp	r3, #57	; 0x39
 800f37c:	d801      	bhi.n	800f382 <_ZN12SimpleString7isDigitEc+0x1a>
 800f37e:	2301      	movs	r3, #1
 800f380:	e000      	b.n	800f384 <_ZN12SimpleString7isDigitEc+0x1c>
 800f382:	2300      	movs	r3, #0
}
 800f384:	4618      	mov	r0, r3
 800f386:	370c      	adds	r7, #12
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr

0800f390 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800f390:	b480      	push	{r7}
 800f392:	b083      	sub	sp, #12
 800f394:	af00      	add	r7, sp, #0
 800f396:	4603      	mov	r3, r0
 800f398:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800f39a:	79fb      	ldrb	r3, [r7, #7]
 800f39c:	2b20      	cmp	r3, #32
 800f39e:	d005      	beq.n	800f3ac <_ZN12SimpleString7isSpaceEc+0x1c>
 800f3a0:	79fb      	ldrb	r3, [r7, #7]
 800f3a2:	2b08      	cmp	r3, #8
 800f3a4:	d904      	bls.n	800f3b0 <_ZN12SimpleString7isSpaceEc+0x20>
 800f3a6:	79fb      	ldrb	r3, [r7, #7]
 800f3a8:	2b0d      	cmp	r3, #13
 800f3aa:	d801      	bhi.n	800f3b0 <_ZN12SimpleString7isSpaceEc+0x20>
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	e000      	b.n	800f3b2 <_ZN12SimpleString7isSpaceEc+0x22>
 800f3b0:	2300      	movs	r3, #0
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	370c      	adds	r7, #12
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3bc:	4770      	bx	lr

0800f3be <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800f3be:	b480      	push	{r7}
 800f3c0:	b083      	sub	sp, #12
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800f3c8:	79fb      	ldrb	r3, [r7, #7]
 800f3ca:	2b40      	cmp	r3, #64	; 0x40
 800f3cc:	d904      	bls.n	800f3d8 <_ZN12SimpleString7isUpperEc+0x1a>
 800f3ce:	79fb      	ldrb	r3, [r7, #7]
 800f3d0:	2b5a      	cmp	r3, #90	; 0x5a
 800f3d2:	d801      	bhi.n	800f3d8 <_ZN12SimpleString7isUpperEc+0x1a>
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	e000      	b.n	800f3da <_ZN12SimpleString7isUpperEc+0x1c>
 800f3d8:	2300      	movs	r3, #0
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	370c      	adds	r7, #12
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e4:	4770      	bx	lr

0800f3e6 <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800f3e6:	b480      	push	{r7}
 800f3e8:	b083      	sub	sp, #12
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800f3f0:	79fb      	ldrb	r3, [r7, #7]
 800f3f2:	2b1f      	cmp	r3, #31
 800f3f4:	d902      	bls.n	800f3fc <_ZN12SimpleString9isControlEc+0x16>
 800f3f6:	79fb      	ldrb	r3, [r7, #7]
 800f3f8:	2b7f      	cmp	r3, #127	; 0x7f
 800f3fa:	d101      	bne.n	800f400 <_ZN12SimpleString9isControlEc+0x1a>
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	e000      	b.n	800f402 <_ZN12SimpleString9isControlEc+0x1c>
 800f400:	2300      	movs	r3, #0
}
 800f402:	4618      	mov	r0, r3
 800f404:	370c      	adds	r7, #12
 800f406:	46bd      	mov	sp, r7
 800f408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40c:	4770      	bx	lr

0800f40e <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800f40e:	b480      	push	{r7}
 800f410:	b083      	sub	sp, #12
 800f412:	af00      	add	r7, sp, #0
 800f414:	4603      	mov	r3, r0
 800f416:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800f418:	79fb      	ldrb	r3, [r7, #7]
 800f41a:	2b06      	cmp	r3, #6
 800f41c:	d904      	bls.n	800f428 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800f41e:	79fb      	ldrb	r3, [r7, #7]
 800f420:	2b0d      	cmp	r3, #13
 800f422:	d801      	bhi.n	800f428 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800f424:	2301      	movs	r3, #1
 800f426:	e000      	b.n	800f42a <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800f428:	2300      	movs	r3, #0
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	370c      	adds	r7, #12
 800f42e:	46bd      	mov	sp, r7
 800f430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f434:	4770      	bx	lr
	...

0800f438 <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	460b      	mov	r3, r1
 800f442:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800f444:	78fb      	ldrb	r3, [r7, #3]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d001      	beq.n	800f44e <_Z10StringFromb+0x16>
 800f44a:	4a06      	ldr	r2, [pc, #24]	; (800f464 <_Z10StringFromb+0x2c>)
 800f44c:	e000      	b.n	800f450 <_Z10StringFromb+0x18>
 800f44e:	4a06      	ldr	r2, [pc, #24]	; (800f468 <_Z10StringFromb+0x30>)
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	4906      	ldr	r1, [pc, #24]	; (800f46c <_Z10StringFromb+0x34>)
 800f454:	4618      	mov	r0, r3
 800f456:	f000 fa85 	bl	800f964 <_Z16StringFromFormatPKcz>
}
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	3708      	adds	r7, #8
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
 800f462:	bf00      	nop
 800f464:	080266f4 	.word	0x080266f4
 800f468:	080266fc 	.word	0x080266fc
 800f46c:	08026704 	.word	0x08026704

0800f470 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b082      	sub	sp, #8
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800f47a:	6839      	ldr	r1, [r7, #0]
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f7ff f9b2 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
}
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	3708      	adds	r7, #8
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}
	...

0800f48c <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800f48c:	b590      	push	{r4, r7, lr}
 800f48e:	b085      	sub	sp, #20
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800f496:	2400      	movs	r4, #0
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d00e      	beq.n	800f4bc <_Z25PrintableStringFromOrNullPKc+0x30>
 800f49e:	f107 0308 	add.w	r3, r7, #8
 800f4a2:	6839      	ldr	r1, [r7, #0]
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f7ff ffe3 	bl	800f470 <_Z10StringFromPKc>
 800f4aa:	2401      	movs	r4, #1
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f107 0208 	add.w	r2, r7, #8
 800f4b2:	4611      	mov	r1, r2
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f7ff fc3f 	bl	800ed38 <_ZNK12SimpleString9printableEv>
 800f4ba:	e004      	b.n	800f4c6 <_Z25PrintableStringFromOrNullPKc+0x3a>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	4908      	ldr	r1, [pc, #32]	; (800f4e0 <_Z25PrintableStringFromOrNullPKc+0x54>)
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f7ff ffd5 	bl	800f470 <_Z10StringFromPKc>
 800f4c6:	2c00      	cmp	r4, #0
 800f4c8:	d004      	beq.n	800f4d4 <_Z25PrintableStringFromOrNullPKc+0x48>
 800f4ca:	f107 0308 	add.w	r3, r7, #8
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f7ff fd41 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800f4d4:	bf00      	nop
}
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	3714      	adds	r7, #20
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd90      	pop	{r4, r7, pc}
 800f4de:	bf00      	nop
 800f4e0:	08026708 	.word	0x08026708

0800f4e4 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	683a      	ldr	r2, [r7, #0]
 800f4f2:	4904      	ldr	r1, [pc, #16]	; (800f504 <_Z10StringFromi+0x20>)
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f000 fa35 	bl	800f964 <_Z16StringFromFormatPKcz>
}
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	3708      	adds	r7, #8
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
 800f502:	bf00      	nop
 800f504:	08026710 	.word	0x08026710

0800f508 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b082      	sub	sp, #8
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	683a      	ldr	r2, [r7, #0]
 800f516:	4904      	ldr	r1, [pc, #16]	; (800f528 <_Z10StringFroml+0x20>)
 800f518:	4618      	mov	r0, r3
 800f51a:	f000 fa23 	bl	800f964 <_Z16StringFromFormatPKcz>
}
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	3708      	adds	r7, #8
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}
 800f526:	bf00      	nop
 800f528:	08026714 	.word	0x08026714

0800f52c <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b086      	sub	sp, #24
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800f536:	f107 0308 	add.w	r3, r7, #8
 800f53a:	4910      	ldr	r1, [pc, #64]	; (800f57c <_Z10StringFromPKv+0x50>)
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7ff f952 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800f542:	f107 0310 	add.w	r3, r7, #16
 800f546:	6839      	ldr	r1, [r7, #0]
 800f548:	4618      	mov	r0, r3
 800f54a:	f000 f9a1 	bl	800f890 <_Z13HexStringFromPKv>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f107 0210 	add.w	r2, r7, #16
 800f554:	f107 0108 	add.w	r1, r7, #8
 800f558:	4618      	mov	r0, r3
 800f55a:	f7ff fd5e 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 800f55e:	f107 0310 	add.w	r3, r7, #16
 800f562:	4618      	mov	r0, r3
 800f564:	f7ff fcf7 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800f568:	f107 0308 	add.w	r3, r7, #8
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7ff fcf2 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800f572:	bf00      	nop
}
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	3718      	adds	r7, #24
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}
 800f57c:	08026718 	.word	0x08026718

0800f580 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b086      	sub	sp, #24
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800f58a:	f107 0308 	add.w	r3, r7, #8
 800f58e:	4910      	ldr	r1, [pc, #64]	; (800f5d0 <_Z10StringFromPFvvE+0x50>)
 800f590:	4618      	mov	r0, r3
 800f592:	f7ff f928 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800f596:	f107 0310 	add.w	r3, r7, #16
 800f59a:	6839      	ldr	r1, [r7, #0]
 800f59c:	4618      	mov	r0, r3
 800f59e:	f000 f98b 	bl	800f8b8 <_Z13HexStringFromPFvvE>
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f107 0210 	add.w	r2, r7, #16
 800f5a8:	f107 0108 	add.w	r1, r7, #8
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f7ff fd34 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 800f5b2:	f107 0310 	add.w	r3, r7, #16
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7ff fccd 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800f5bc:	f107 0308 	add.w	r3, r7, #8
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7ff fcc8 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800f5c6:	bf00      	nop
}
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	3718      	adds	r7, #24
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}
 800f5d0:	08026718 	.word	0x08026718

0800f5d4 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b082      	sub	sp, #8
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	683a      	ldr	r2, [r7, #0]
 800f5e2:	4904      	ldr	r1, [pc, #16]	; (800f5f4 <_Z13HexStringFroml+0x20>)
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f000 f9bd 	bl	800f964 <_Z16StringFromFormatPKcz>
}
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	3708      	adds	r7, #8
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}
 800f5f2:	bf00      	nop
 800f5f4:	0802671c 	.word	0x0802671c

0800f5f8 <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b082      	sub	sp, #8
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	683a      	ldr	r2, [r7, #0]
 800f606:	4904      	ldr	r1, [pc, #16]	; (800f618 <_Z13HexStringFromi+0x20>)
 800f608:	4618      	mov	r0, r3
 800f60a:	f000 f9ab 	bl	800f964 <_Z16StringFromFormatPKcz>
}
 800f60e:	6878      	ldr	r0, [r7, #4]
 800f610:	3708      	adds	r7, #8
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	08026720 	.word	0x08026720

0800f61c <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b086      	sub	sp, #24
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	460b      	mov	r3, r1
 800f626:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800f628:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	4912      	ldr	r1, [pc, #72]	; (800f678 <_Z13HexStringFroma+0x5c>)
 800f630:	4618      	mov	r0, r3
 800f632:	f000 f997 	bl	800f964 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800f636:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	da16      	bge.n	800f66c <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f7ff fc68 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800f644:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	1e9a      	subs	r2, r3, #2
 800f64a:	f107 030c 	add.w	r3, r7, #12
 800f64e:	6879      	ldr	r1, [r7, #4]
 800f650:	4618      	mov	r0, r3
 800f652:	f7ff fdd3 	bl	800f1fc <_ZNK12SimpleString9subStringEj>
 800f656:	f107 030c 	add.w	r3, r7, #12
 800f65a:	4619      	mov	r1, r3
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f7ff f92e 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 800f662:	f107 030c 	add.w	r3, r7, #12
 800f666:	4618      	mov	r0, r3
 800f668:	f7ff fc75 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    }
    return result;
 800f66c:	bf00      	nop
}
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	3718      	adds	r7, #24
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	08026720 	.word	0x08026720

0800f67c <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b082      	sub	sp, #8
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	683a      	ldr	r2, [r7, #0]
 800f68a:	4904      	ldr	r1, [pc, #16]	; (800f69c <_Z13HexStringFromm+0x20>)
 800f68c:	4618      	mov	r0, r3
 800f68e:	f000 f969 	bl	800f964 <_Z16StringFromFormatPKcz>
}
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	3708      	adds	r7, #8
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
 800f69a:	bf00      	nop
 800f69c:	0802671c 	.word	0x0802671c

0800f6a0 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b082      	sub	sp, #8
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
 800f6a8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	683a      	ldr	r2, [r7, #0]
 800f6ae:	4904      	ldr	r1, [pc, #16]	; (800f6c0 <_Z13HexStringFromj+0x20>)
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f000 f957 	bl	800f964 <_Z16StringFromFormatPKcz>
}
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	3708      	adds	r7, #8
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	08026720 	.word	0x08026720

0800f6c4 <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b084      	sub	sp, #16
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800f6ce:	f107 0308 	add.w	r3, r7, #8
 800f6d2:	6839      	ldr	r1, [r7, #0]
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f7ff ff8f 	bl	800f5f8 <_Z13HexStringFromi>
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f107 0208 	add.w	r2, r7, #8
 800f6e0:	4611      	mov	r1, r2
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f000 f87e 	bl	800f7e4 <_Z26BracketsFormattedHexString12SimpleString>
 800f6e8:	f107 0308 	add.w	r3, r7, #8
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7ff fc32 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800f6f2:	bf00      	nop
}
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	3710      	adds	r7, #16
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}

0800f6fc <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b084      	sub	sp, #16
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800f706:	f107 0308 	add.w	r3, r7, #8
 800f70a:	6839      	ldr	r1, [r7, #0]
 800f70c:	4618      	mov	r0, r3
 800f70e:	f7ff ffc7 	bl	800f6a0 <_Z13HexStringFromj>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f107 0208 	add.w	r2, r7, #8
 800f718:	4611      	mov	r1, r2
 800f71a:	4618      	mov	r0, r3
 800f71c:	f000 f862 	bl	800f7e4 <_Z26BracketsFormattedHexString12SimpleString>
 800f720:	f107 0308 	add.w	r3, r7, #8
 800f724:	4618      	mov	r0, r3
 800f726:	f7ff fc16 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800f72a:	bf00      	nop
}
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	3710      	adds	r7, #16
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b084      	sub	sp, #16
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800f73e:	f107 0308 	add.w	r3, r7, #8
 800f742:	6839      	ldr	r1, [r7, #0]
 800f744:	4618      	mov	r0, r3
 800f746:	f7ff ff45 	bl	800f5d4 <_Z13HexStringFroml>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f107 0208 	add.w	r2, r7, #8
 800f750:	4611      	mov	r1, r2
 800f752:	4618      	mov	r0, r3
 800f754:	f000 f846 	bl	800f7e4 <_Z26BracketsFormattedHexString12SimpleString>
 800f758:	f107 0308 	add.w	r3, r7, #8
 800f75c:	4618      	mov	r0, r3
 800f75e:	f7ff fbfa 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800f762:	bf00      	nop
}
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	3710      	adds	r7, #16
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}

0800f76c <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b084      	sub	sp, #16
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800f776:	f107 0308 	add.w	r3, r7, #8
 800f77a:	6839      	ldr	r1, [r7, #0]
 800f77c:	4618      	mov	r0, r3
 800f77e:	f7ff ff7d 	bl	800f67c <_Z13HexStringFromm>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f107 0208 	add.w	r2, r7, #8
 800f788:	4611      	mov	r1, r2
 800f78a:	4618      	mov	r0, r3
 800f78c:	f000 f82a 	bl	800f7e4 <_Z26BracketsFormattedHexString12SimpleString>
 800f790:	f107 0308 	add.w	r3, r7, #8
 800f794:	4618      	mov	r0, r3
 800f796:	f7ff fbde 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800f79a:	bf00      	nop
}
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	3710      	adds	r7, #16
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800f7b0:	f107 0308 	add.w	r3, r7, #8
 800f7b4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800f7b8:	4611      	mov	r1, r2
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f7ff ff2e 	bl	800f61c <_Z13HexStringFroma>
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f107 0208 	add.w	r2, r7, #8
 800f7c6:	4611      	mov	r1, r2
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f000 f80b 	bl	800f7e4 <_Z26BracketsFormattedHexString12SimpleString>
 800f7ce:	f107 0308 	add.w	r3, r7, #8
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7ff fbbf 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800f7d8:	bf00      	nop
}
 800f7da:	6878      	ldr	r0, [r7, #4]
 800f7dc:	3710      	adds	r7, #16
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}
	...

0800f7e4 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b088      	sub	sp, #32
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800f7ee:	f107 0310 	add.w	r3, r7, #16
 800f7f2:	4917      	ldr	r1, [pc, #92]	; (800f850 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f7fe fff6 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800f7fa:	f107 0308 	add.w	r3, r7, #8
 800f7fe:	f107 0110 	add.w	r1, r7, #16
 800f802:	683a      	ldr	r2, [r7, #0]
 800f804:	4618      	mov	r0, r3
 800f806:	f7ff fc08 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 800f80a:	f107 0318 	add.w	r3, r7, #24
 800f80e:	4911      	ldr	r1, [pc, #68]	; (800f854 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800f810:	4618      	mov	r0, r3
 800f812:	f7fe ffe8 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f107 0218 	add.w	r2, r7, #24
 800f81c:	f107 0108 	add.w	r1, r7, #8
 800f820:	4618      	mov	r0, r3
 800f822:	f7ff fbfa 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 800f826:	f107 0318 	add.w	r3, r7, #24
 800f82a:	4618      	mov	r0, r3
 800f82c:	f7ff fb93 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800f830:	f107 0308 	add.w	r3, r7, #8
 800f834:	4618      	mov	r0, r3
 800f836:	f7ff fb8e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800f83a:	f107 0310 	add.w	r3, r7, #16
 800f83e:	4618      	mov	r0, r3
 800f840:	f7ff fb89 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800f844:	bf00      	nop
}
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	3720      	adds	r7, #32
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}
 800f84e:	bf00      	nop
 800f850:	08026724 	.word	0x08026724
 800f854:	08026728 	.word	0x08026728

0800f858 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800f858:	b480      	push	{r7}
 800f85a:	b085      	sub	sp, #20
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800f860:	1d3b      	adds	r3, r7, #4
 800f862:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	681b      	ldr	r3, [r3, #0]
}
 800f868:	4618      	mov	r0, r3
 800f86a:	3714      	adds	r7, #20
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr

0800f874 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800f874:	b480      	push	{r7}
 800f876:	b085      	sub	sp, #20
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800f87c:	1d3b      	adds	r3, r7, #4
 800f87e:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	681b      	ldr	r3, [r3, #0]
}
 800f884:	4618      	mov	r0, r3
 800f886:	3714      	adds	r7, #20
 800f888:	46bd      	mov	sp, r7
 800f88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88e:	4770      	bx	lr

0800f890 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b082      	sub	sp, #8
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800f89a:	6838      	ldr	r0, [r7, #0]
 800f89c:	f7ff ffdc 	bl	800f858 <_ZL25convertPointerToLongValuePKv>
 800f8a0:	4602      	mov	r2, r0
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	4903      	ldr	r1, [pc, #12]	; (800f8b4 <_Z13HexStringFromPKv+0x24>)
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f000 f85c 	bl	800f964 <_Z16StringFromFormatPKcz>
}
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	3708      	adds	r7, #8
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}
 800f8b4:	0802671c 	.word	0x0802671c

0800f8b8 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b082      	sub	sp, #8
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800f8c2:	6838      	ldr	r0, [r7, #0]
 800f8c4:	f7ff ffd6 	bl	800f874 <_ZL33convertFunctionPointerToLongValuePFvvE>
 800f8c8:	4602      	mov	r2, r0
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	4903      	ldr	r1, [pc, #12]	; (800f8dc <_Z13HexStringFromPFvvE+0x24>)
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f000 f848 	bl	800f964 <_Z16StringFromFormatPKcz>
}
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	0802671c 	.word	0x0802671c

0800f8e0 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b086      	sub	sp, #24
 800f8e4:	af02      	add	r7, sp, #8
 800f8e6:	60f8      	str	r0, [r7, #12]
 800f8e8:	ed87 0b00 	vstr	d0, [r7]
 800f8ec:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800f8ee:	4b18      	ldr	r3, [pc, #96]	; (800f950 <_Z10StringFromdi+0x70>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	ed97 0b00 	vldr	d0, [r7]
 800f8f6:	4798      	blx	r3
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	bf14      	ite	ne
 800f8fe:	2301      	movne	r3, #1
 800f900:	2300      	moveq	r3, #0
 800f902:	b2db      	uxtb	r3, r3
 800f904:	2b00      	cmp	r3, #0
 800f906:	d004      	beq.n	800f912 <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800f908:	4912      	ldr	r1, [pc, #72]	; (800f954 <_Z10StringFromdi+0x74>)
 800f90a:	68f8      	ldr	r0, [r7, #12]
 800f90c:	f7fe ff6b 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800f910:	e01a      	b.n	800f948 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800f912:	4b11      	ldr	r3, [pc, #68]	; (800f958 <_Z10StringFromdi+0x78>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	ed97 0b00 	vldr	d0, [r7]
 800f91a:	4798      	blx	r3
 800f91c:	4603      	mov	r3, r0
 800f91e:	2b00      	cmp	r3, #0
 800f920:	bf14      	ite	ne
 800f922:	2301      	movne	r3, #1
 800f924:	2300      	moveq	r3, #0
 800f926:	b2db      	uxtb	r3, r3
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d004      	beq.n	800f936 <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800f92c:	490b      	ldr	r1, [pc, #44]	; (800f95c <_Z10StringFromdi+0x7c>)
 800f92e:	68f8      	ldr	r0, [r7, #12]
 800f930:	f7fe ff59 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800f934:	e008      	b.n	800f948 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800f936:	68f8      	ldr	r0, [r7, #12]
 800f938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f93c:	e9cd 2300 	strd	r2, r3, [sp]
 800f940:	68ba      	ldr	r2, [r7, #8]
 800f942:	4907      	ldr	r1, [pc, #28]	; (800f960 <_Z10StringFromdi+0x80>)
 800f944:	f000 f80e 	bl	800f964 <_Z16StringFromFormatPKcz>
}
 800f948:	68f8      	ldr	r0, [r7, #12]
 800f94a:	3710      	adds	r7, #16
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}
 800f950:	200000e8 	.word	0x200000e8
 800f954:	0802675c 	.word	0x0802675c
 800f958:	200000ec 	.word	0x200000ec
 800f95c:	08026770 	.word	0x08026770
 800f960:	08026780 	.word	0x08026780

0800f964 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800f964:	b40e      	push	{r1, r2, r3}
 800f966:	b580      	push	{r7, lr}
 800f968:	b087      	sub	sp, #28
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800f96e:	4910      	ldr	r1, [pc, #64]	; (800f9b0 <_Z16StringFromFormatPKcz+0x4c>)
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f7fe ff38 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800f976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f97a:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800f97c:	f107 0310 	add.w	r3, r7, #16
 800f980:	68fa      	ldr	r2, [r7, #12]
 800f982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f984:	4618      	mov	r0, r3
 800f986:	f000 f839 	bl	800f9fc <_Z17VStringFromFormatPKcSt9__va_list>
 800f98a:	f107 0310 	add.w	r3, r7, #16
 800f98e:	4619      	mov	r1, r3
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f7fe ff94 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 800f996:	f107 0310 	add.w	r3, r7, #16
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7ff fadb 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800f9a0:	bf00      	nop
}
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	371c      	adds	r7, #28
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f9ac:	b003      	add	sp, #12
 800f9ae:	4770      	bx	lr
 800f9b0:	080266e8 	.word	0x080266e8

0800f9b4 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b082      	sub	sp, #8
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	683a      	ldr	r2, [r7, #0]
 800f9c2:	4904      	ldr	r1, [pc, #16]	; (800f9d4 <_Z10StringFromj+0x20>)
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7ff ffcd 	bl	800f964 <_Z16StringFromFormatPKcz>
}
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	3708      	adds	r7, #8
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}
 800f9d2:	bf00      	nop
 800f9d4:	0802678c 	.word	0x0802678c

0800f9d8 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b082      	sub	sp, #8
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	683a      	ldr	r2, [r7, #0]
 800f9e6:	4904      	ldr	r1, [pc, #16]	; (800f9f8 <_Z10StringFromm+0x20>)
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f7ff ffbb 	bl	800f964 <_Z16StringFromFormatPKcz>
}
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	3708      	adds	r7, #8
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}
 800f9f6:	bf00      	nop
 800f9f8:	08026790 	.word	0x08026790

0800f9fc <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800f9fc:	b590      	push	{r4, r7, lr}
 800f9fe:	b0a7      	sub	sp, #156	; 0x9c
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	60f8      	str	r0, [r7, #12]
 800fa04:	60b9      	str	r1, [r7, #8]
 800fa06:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800fa0c:	492e      	ldr	r1, [pc, #184]	; (800fac8 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800fa0e:	68f8      	ldr	r0, [r7, #12]
 800fa10:	f7fe fee9 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800fa14:	4b2d      	ldr	r3, [pc, #180]	; (800facc <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800fa16:	681c      	ldr	r4, [r3, #0]
 800fa18:	f107 0014 	add.w	r0, r7, #20
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	68ba      	ldr	r2, [r7, #8]
 800fa20:	2164      	movs	r1, #100	; 0x64
 800fa22:	47a0      	blx	r4
 800fa24:	4603      	mov	r3, r0
 800fa26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800fa2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fa2e:	2b63      	cmp	r3, #99	; 0x63
 800fa30:	d813      	bhi.n	800fa5a <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800fa32:	f107 0214 	add.w	r2, r7, #20
 800fa36:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800fa3a:	4611      	mov	r1, r2
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7fe fed2 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800fa42:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800fa46:	4619      	mov	r1, r3
 800fa48:	68f8      	ldr	r0, [r7, #12]
 800fa4a:	f7fe ff38 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 800fa4e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7ff fa7f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800fa58:	e031      	b.n	800fabe <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800fa5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fa5e:	3301      	adds	r3, #1
 800fa60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800fa64:	f240 32c3 	movw	r2, #963	; 0x3c3
 800fa68:	4919      	ldr	r1, [pc, #100]	; (800fad0 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800fa6a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800fa6e:	f7fe fc3f 	bl	800e2f0 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800fa72:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800fa76:	4b15      	ldr	r3, [pc, #84]	; (800facc <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800fa78:	681c      	ldr	r4, [r3, #0]
 800fa7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa7c:	68ba      	ldr	r2, [r7, #8]
 800fa7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fa82:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800fa86:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800fa88:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800fa8c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800fa90:	4618      	mov	r0, r3
 800fa92:	f7fe fea8 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800fa96:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800fa9a:	4619      	mov	r1, r3
 800fa9c:	68f8      	ldr	r0, [r7, #12]
 800fa9e:	f7fe ff0e 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 800faa2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7ff fa55 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800faac:	f240 33c7 	movw	r3, #967	; 0x3c7
 800fab0:	4a07      	ldr	r2, [pc, #28]	; (800fad0 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800fab2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fab6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800faba:	f7fe fc2d 	bl	800e318 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800fabe:	bf00      	nop
}
 800fac0:	68f8      	ldr	r0, [r7, #12]
 800fac2:	379c      	adds	r7, #156	; 0x9c
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd90      	pop	{r4, r7, pc}
 800fac8:	080266e8 	.word	0x080266e8
 800facc:	200000b0 	.word	0x200000b0
 800fad0:	08026628 	.word	0x08026628

0800fad4 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b08a      	sub	sp, #40	; 0x28
 800fad8:	af00      	add	r7, sp, #0
 800fada:	60f8      	str	r0, [r7, #12]
 800fadc:	60b9      	str	r1, [r7, #8]
 800fade:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800fae0:	491f      	ldr	r1, [pc, #124]	; (800fb60 <_Z16StringFromBinaryPKhj+0x8c>)
 800fae2:	68f8      	ldr	r0, [r7, #12]
 800fae4:	f7fe fe7f 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800fae8:	2300      	movs	r3, #0
 800faea:	627b      	str	r3, [r7, #36]	; 0x24
 800faec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d219      	bcs.n	800fb28 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800faf4:	68ba      	ldr	r2, [r7, #8]
 800faf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf8:	4413      	add	r3, r2
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	461a      	mov	r2, r3
 800fafe:	f107 0314 	add.w	r3, r7, #20
 800fb02:	4918      	ldr	r1, [pc, #96]	; (800fb64 <_Z16StringFromBinaryPKhj+0x90>)
 800fb04:	4618      	mov	r0, r3
 800fb06:	f7ff ff2d 	bl	800f964 <_Z16StringFromFormatPKcz>
 800fb0a:	f107 0314 	add.w	r3, r7, #20
 800fb0e:	4619      	mov	r1, r3
 800fb10:	68f8      	ldr	r0, [r7, #12]
 800fb12:	f7ff fa9d 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 800fb16:	f107 0314 	add.w	r3, r7, #20
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7ff fa1b 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800fb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb22:	3301      	adds	r3, #1
 800fb24:	627b      	str	r3, [r7, #36]	; 0x24
 800fb26:	e7e1      	b.n	800faec <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800fb28:	68f8      	ldr	r0, [r7, #12]
 800fb2a:	f7ff f9f3 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	3b01      	subs	r3, #1
 800fb32:	f107 001c 	add.w	r0, r7, #28
 800fb36:	2200      	movs	r2, #0
 800fb38:	68f9      	ldr	r1, [r7, #12]
 800fb3a:	f7ff fb15 	bl	800f168 <_ZNK12SimpleString9subStringEjj>
 800fb3e:	f107 031c 	add.w	r3, r7, #28
 800fb42:	4619      	mov	r1, r3
 800fb44:	68f8      	ldr	r0, [r7, #12]
 800fb46:	f7fe feba 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 800fb4a:	f107 031c 	add.w	r3, r7, #28
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7ff fa01 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    return result;
 800fb54:	bf00      	nop
}
 800fb56:	68f8      	ldr	r0, [r7, #12]
 800fb58:	3728      	adds	r7, #40	; 0x28
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}
 800fb5e:	bf00      	nop
 800fb60:	080266e8 	.word	0x080266e8
 800fb64:	08026794 	.word	0x08026794

0800fb68 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	60f8      	str	r0, [r7, #12]
 800fb70:	60b9      	str	r1, [r7, #8]
 800fb72:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d006      	beq.n	800fb88 <_Z22StringFromBinaryOrNullPKhj+0x20>
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	687a      	ldr	r2, [r7, #4]
 800fb7e:	68b9      	ldr	r1, [r7, #8]
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7ff ffa7 	bl	800fad4 <_Z16StringFromBinaryPKhj>
 800fb86:	e004      	b.n	800fb92 <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	4904      	ldr	r1, [pc, #16]	; (800fb9c <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7ff fc6f 	bl	800f470 <_Z10StringFromPKc>
}
 800fb92:	68f8      	ldr	r0, [r7, #12]
 800fb94:	3710      	adds	r7, #16
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop
 800fb9c:	08026708 	.word	0x08026708

0800fba0 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b088      	sub	sp, #32
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	60f8      	str	r0, [r7, #12]
 800fba8:	60b9      	str	r1, [r7, #8]
 800fbaa:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	687a      	ldr	r2, [r7, #4]
 800fbb0:	4913      	ldr	r1, [pc, #76]	; (800fc00 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7ff fed6 	bl	800f964 <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2b80      	cmp	r3, #128	; 0x80
 800fbbc:	bf28      	it	cs
 800fbbe:	2380      	movcs	r3, #128	; 0x80
 800fbc0:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800fbc2:	f107 0314 	add.w	r3, r7, #20
 800fbc6:	69fa      	ldr	r2, [r7, #28]
 800fbc8:	68b9      	ldr	r1, [r7, #8]
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7ff ffcc 	bl	800fb68 <_Z22StringFromBinaryOrNullPKhj>
 800fbd0:	f107 0314 	add.w	r3, r7, #20
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	68f8      	ldr	r0, [r7, #12]
 800fbd8:	f7ff fa3a 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 800fbdc:	f107 0314 	add.w	r3, r7, #20
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7ff f9b8 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800fbe6:	687a      	ldr	r2, [r7, #4]
 800fbe8:	69fb      	ldr	r3, [r7, #28]
 800fbea:	429a      	cmp	r2, r3
 800fbec:	d903      	bls.n	800fbf6 <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800fbee:	4905      	ldr	r1, [pc, #20]	; (800fc04 <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800fbf0:	68f8      	ldr	r0, [r7, #12]
 800fbf2:	f7ff fa3f 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800fbf6:	bf00      	nop
}
 800fbf8:	68f8      	ldr	r0, [r7, #12]
 800fbfa:	3720      	adds	r7, #32
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}
 800fc00:	0802679c 	.word	0x0802679c
 800fc04:	080267b8 	.word	0x080267b8

0800fc08 <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b084      	sub	sp, #16
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	60f8      	str	r0, [r7, #12]
 800fc10:	60b9      	str	r1, [r7, #8]
 800fc12:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d006      	beq.n	800fc28 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	687a      	ldr	r2, [r7, #4]
 800fc1e:	68b9      	ldr	r1, [r7, #8]
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7ff ffbd 	bl	800fba0 <_Z24StringFromBinaryWithSizePKhj>
 800fc26:	e004      	b.n	800fc32 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	4904      	ldr	r1, [pc, #16]	; (800fc3c <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7ff fc1f 	bl	800f470 <_Z10StringFromPKc>
}
 800fc32:	68f8      	ldr	r0, [r7, #12]
 800fc34:	3710      	adds	r7, #16
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}
 800fc3a:	bf00      	nop
 800fc3c:	08026708 	.word	0x08026708

0800fc40 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b088      	sub	sp, #32
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	60b9      	str	r1, [r7, #8]
 800fc4a:	607a      	str	r2, [r7, #4]
 800fc4c:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800fc4e:	4925      	ldr	r1, [pc, #148]	; (800fce4 <_Z20StringFromMaskedBitsmmj+0xa4>)
 800fc50:	68f8      	ldr	r0, [r7, #12]
 800fc52:	f7fe fdc8 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	2b04      	cmp	r3, #4
 800fc5a:	d802      	bhi.n	800fc62 <_Z20StringFromMaskedBitsmmj+0x22>
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	00db      	lsls	r3, r3, #3
 800fc60:	e000      	b.n	800fc64 <_Z20StringFromMaskedBitsmmj+0x24>
 800fc62:	2320      	movs	r3, #32
 800fc64:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800fc66:	69bb      	ldr	r3, [r7, #24]
 800fc68:	3b01      	subs	r3, #1
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	fa02 f303 	lsl.w	r3, r2, r3
 800fc70:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800fc72:	2300      	movs	r3, #0
 800fc74:	61fb      	str	r3, [r7, #28]
 800fc76:	69fa      	ldr	r2, [r7, #28]
 800fc78:	69bb      	ldr	r3, [r7, #24]
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d22d      	bcs.n	800fcda <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800fc7e:	687a      	ldr	r2, [r7, #4]
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	4013      	ands	r3, r2
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d00c      	beq.n	800fca2 <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800fc88:	68ba      	ldr	r2, [r7, #8]
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	4013      	ands	r3, r2
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d001      	beq.n	800fc96 <_Z20StringFromMaskedBitsmmj+0x56>
 800fc92:	4b15      	ldr	r3, [pc, #84]	; (800fce8 <_Z20StringFromMaskedBitsmmj+0xa8>)
 800fc94:	e000      	b.n	800fc98 <_Z20StringFromMaskedBitsmmj+0x58>
 800fc96:	4b15      	ldr	r3, [pc, #84]	; (800fcec <_Z20StringFromMaskedBitsmmj+0xac>)
 800fc98:	4619      	mov	r1, r3
 800fc9a:	68f8      	ldr	r0, [r7, #12]
 800fc9c:	f7ff f9ea 	bl	800f074 <_ZN12SimpleStringpLEPKc>
 800fca0:	e003      	b.n	800fcaa <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800fca2:	4913      	ldr	r1, [pc, #76]	; (800fcf0 <_Z20StringFromMaskedBitsmmj+0xb0>)
 800fca4:	68f8      	ldr	r0, [r7, #12]
 800fca6:	f7ff f9e5 	bl	800f074 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800fcaa:	69fb      	ldr	r3, [r7, #28]
 800fcac:	f003 0307 	and.w	r3, r3, #7
 800fcb0:	2b07      	cmp	r3, #7
 800fcb2:	d108      	bne.n	800fcc6 <_Z20StringFromMaskedBitsmmj+0x86>
 800fcb4:	69bb      	ldr	r3, [r7, #24]
 800fcb6:	3b01      	subs	r3, #1
 800fcb8:	69fa      	ldr	r2, [r7, #28]
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d003      	beq.n	800fcc6 <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800fcbe:	490d      	ldr	r1, [pc, #52]	; (800fcf4 <_Z20StringFromMaskedBitsmmj+0xb4>)
 800fcc0:	68f8      	ldr	r0, [r7, #12]
 800fcc2:	f7ff f9d7 	bl	800f074 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	005b      	lsls	r3, r3, #1
 800fcca:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	005b      	lsls	r3, r3, #1
 800fcd0:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800fcd2:	69fb      	ldr	r3, [r7, #28]
 800fcd4:	3301      	adds	r3, #1
 800fcd6:	61fb      	str	r3, [r7, #28]
 800fcd8:	e7cd      	b.n	800fc76 <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800fcda:	bf00      	nop
}
 800fcdc:	68f8      	ldr	r0, [r7, #12]
 800fcde:	3720      	adds	r7, #32
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	080266e8 	.word	0x080266e8
 800fce8:	080267c0 	.word	0x080267c0
 800fcec:	080267c4 	.word	0x080267c4
 800fcf0:	080267c8 	.word	0x080267c8
 800fcf4:	080267cc 	.word	0x080267cc

0800fcf8 <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800fd02:	683a      	ldr	r2, [r7, #0]
 800fd04:	4b18      	ldr	r3, [pc, #96]	; (800fd68 <_Z23StringFromOrdinalNumberj+0x70>)
 800fd06:	fba3 1302 	umull	r1, r3, r3, r2
 800fd0a:	08d9      	lsrs	r1, r3, #3
 800fd0c:	460b      	mov	r3, r1
 800fd0e:	009b      	lsls	r3, r3, #2
 800fd10:	440b      	add	r3, r1
 800fd12:	005b      	lsls	r3, r3, #1
 800fd14:	1ad3      	subs	r3, r2, r3
 800fd16:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	2b0a      	cmp	r3, #10
 800fd1c:	d905      	bls.n	800fd2a <_Z23StringFromOrdinalNumberj+0x32>
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	2b0d      	cmp	r3, #13
 800fd22:	d802      	bhi.n	800fd2a <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800fd24:	4b11      	ldr	r3, [pc, #68]	; (800fd6c <_Z23StringFromOrdinalNumberj+0x74>)
 800fd26:	60fb      	str	r3, [r7, #12]
 800fd28:	e013      	b.n	800fd52 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	2b03      	cmp	r3, #3
 800fd2e:	d102      	bne.n	800fd36 <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800fd30:	4b0f      	ldr	r3, [pc, #60]	; (800fd70 <_Z23StringFromOrdinalNumberj+0x78>)
 800fd32:	60fb      	str	r3, [r7, #12]
 800fd34:	e00d      	b.n	800fd52 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	2b02      	cmp	r3, #2
 800fd3a:	d102      	bne.n	800fd42 <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800fd3c:	4b0d      	ldr	r3, [pc, #52]	; (800fd74 <_Z23StringFromOrdinalNumberj+0x7c>)
 800fd3e:	60fb      	str	r3, [r7, #12]
 800fd40:	e007      	b.n	800fd52 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	2b01      	cmp	r3, #1
 800fd46:	d102      	bne.n	800fd4e <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800fd48:	4b0b      	ldr	r3, [pc, #44]	; (800fd78 <_Z23StringFromOrdinalNumberj+0x80>)
 800fd4a:	60fb      	str	r3, [r7, #12]
 800fd4c:	e001      	b.n	800fd52 <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800fd4e:	4b07      	ldr	r3, [pc, #28]	; (800fd6c <_Z23StringFromOrdinalNumberj+0x74>)
 800fd50:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	683a      	ldr	r2, [r7, #0]
 800fd58:	4908      	ldr	r1, [pc, #32]	; (800fd7c <_Z23StringFromOrdinalNumberj+0x84>)
 800fd5a:	f7ff fe03 	bl	800f964 <_Z16StringFromFormatPKcz>
}
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	3710      	adds	r7, #16
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}
 800fd66:	bf00      	nop
 800fd68:	cccccccd 	.word	0xcccccccd
 800fd6c:	080267d0 	.word	0x080267d0
 800fd70:	080267d4 	.word	0x080267d4
 800fd74:	080267d8 	.word	0x080267d8
 800fd78:	080267dc 	.word	0x080267dc
 800fd7c:	080267e0 	.word	0x080267e0

0800fd80 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b082      	sub	sp, #8
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	3304      	adds	r3, #4
 800fd8c:	4907      	ldr	r1, [pc, #28]	; (800fdac <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7fe fd29 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2200      	movs	r2, #0
 800fd98:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	60da      	str	r2, [r3, #12]
}
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	4618      	mov	r0, r3
 800fda4:	3708      	adds	r7, #8
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	080266e8 	.word	0x080266e8

0800fdb0 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800fdb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdb2:	b083      	sub	sp, #12
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d01e      	beq.n	800fe00 <_ZN22SimpleStringCollection8allocateEj+0x50>
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681a      	ldr	r2, [r3, #0]
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	3b04      	subs	r3, #4
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	00db      	lsls	r3, r3, #3
 800fdd0:	18d4      	adds	r4, r2, r3
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	429c      	cmp	r4, r3
 800fdd8:	d004      	beq.n	800fde4 <_ZN22SimpleStringCollection8allocateEj+0x34>
 800fdda:	3c08      	subs	r4, #8
 800fddc:	4620      	mov	r0, r4
 800fdde:	f7ff f8ba 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800fde2:	e7f6      	b.n	800fdd2 <_ZN22SimpleStringCollection8allocateEj+0x22>
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	f1a3 0208 	sub.w	r2, r3, #8
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	3b04      	subs	r3, #4
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	3301      	adds	r3, #1
 800fdf6:	00db      	lsls	r3, r3, #3
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	4610      	mov	r0, r2
 800fdfc:	f7fc f976 	bl	800c0ec <_ZdaPvj>

    size_ = _size;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	683a      	ldr	r2, [r7, #0]
 800fe04:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	68dc      	ldr	r4, [r3, #12]
 800fe0a:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800fe0e:	d202      	bcs.n	800fe16 <_ZN22SimpleStringCollection8allocateEj+0x66>
 800fe10:	1c63      	adds	r3, r4, #1
 800fe12:	00db      	lsls	r3, r3, #3
 800fe14:	e001      	b.n	800fe1a <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800fe16:	f04f 33ff 	mov.w	r3, #4294967295
 800fe1a:	f240 4227 	movw	r2, #1063	; 0x427
 800fe1e:	4910      	ldr	r1, [pc, #64]	; (800fe60 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800fe20:	4618      	mov	r0, r3
 800fe22:	f7fc f941 	bl	800c0a8 <_ZnajPKci>
 800fe26:	4605      	mov	r5, r0
 800fe28:	1d2b      	adds	r3, r5, #4
 800fe2a:	3b04      	subs	r3, #4
 800fe2c:	2208      	movs	r2, #8
 800fe2e:	601a      	str	r2, [r3, #0]
 800fe30:	1d2b      	adds	r3, r5, #4
 800fe32:	601c      	str	r4, [r3, #0]
 800fe34:	f105 0308 	add.w	r3, r5, #8
 800fe38:	1e62      	subs	r2, r4, #1
 800fe3a:	4614      	mov	r4, r2
 800fe3c:	461e      	mov	r6, r3
 800fe3e:	2c00      	cmp	r4, #0
 800fe40:	db06      	blt.n	800fe50 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800fe42:	4908      	ldr	r1, [pc, #32]	; (800fe64 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800fe44:	4630      	mov	r0, r6
 800fe46:	f7fe fcce 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800fe4a:	3608      	adds	r6, #8
 800fe4c:	3c01      	subs	r4, #1
 800fe4e:	e7f6      	b.n	800fe3e <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800fe50:	f105 0208 	add.w	r2, r5, #8
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	601a      	str	r2, [r3, #0]
}
 800fe58:	bf00      	nop
 800fe5a:	370c      	adds	r7, #12
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe60:	08026628 	.word	0x08026628
 800fe64:	080266e8 	.word	0x080266e8

0800fe68 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800fe68:	b590      	push	{r4, r7, lr}
 800fe6a:	b083      	sub	sp, #12
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d01e      	beq.n	800feb6 <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681a      	ldr	r2, [r3, #0]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	3b04      	subs	r3, #4
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	00db      	lsls	r3, r3, #3
 800fe86:	18d4      	adds	r4, r2, r3
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	429c      	cmp	r4, r3
 800fe8e:	d004      	beq.n	800fe9a <_ZN22SimpleStringCollectionD1Ev+0x32>
 800fe90:	3c08      	subs	r4, #8
 800fe92:	4620      	mov	r0, r4
 800fe94:	f7ff f85f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800fe98:	e7f6      	b.n	800fe88 <_ZN22SimpleStringCollectionD1Ev+0x20>
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f1a3 0208 	sub.w	r2, r3, #8
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	3b04      	subs	r3, #4
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	3301      	adds	r3, #1
 800feac:	00db      	lsls	r3, r3, #3
 800feae:	4619      	mov	r1, r3
 800feb0:	4610      	mov	r0, r2
 800feb2:	f7fc f91b 	bl	800c0ec <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	3304      	adds	r3, #4
 800feba:	4618      	mov	r0, r3
 800febc:	f7ff f84b 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	4618      	mov	r0, r3
 800fec4:	370c      	adds	r7, #12
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd90      	pop	{r4, r7, pc}

0800feca <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800feca:	b480      	push	{r7}
 800fecc:	b083      	sub	sp, #12
 800fece:	af00      	add	r7, sp, #0
 800fed0:	6078      	str	r0, [r7, #4]
    return size_;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	68db      	ldr	r3, [r3, #12]
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	370c      	adds	r7, #12
 800feda:	46bd      	mov	sp, r7
 800fedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee0:	4770      	bx	lr
	...

0800fee4 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800fee4:	b590      	push	{r4, r7, lr}
 800fee6:	b085      	sub	sp, #20
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	68db      	ldr	r3, [r3, #12]
 800fef2:	683a      	ldr	r2, [r7, #0]
 800fef4:	429a      	cmp	r2, r3
 800fef6:	d315      	bcc.n	800ff24 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	1d1c      	adds	r4, r3, #4
 800fefc:	f107 0308 	add.w	r3, r7, #8
 800ff00:	490d      	ldr	r1, [pc, #52]	; (800ff38 <_ZN22SimpleStringCollectionixEj+0x54>)
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7fe fc6f 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 800ff08:	f107 0308 	add.w	r3, r7, #8
 800ff0c:	4619      	mov	r1, r3
 800ff0e:	4620      	mov	r0, r4
 800ff10:	f7fe fcd5 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 800ff14:	f107 0308 	add.w	r3, r7, #8
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f7ff f81c 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        return empty_;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	3304      	adds	r3, #4
 800ff22:	e004      	b.n	800ff2e <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681a      	ldr	r2, [r3, #0]
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	00db      	lsls	r3, r3, #3
 800ff2c:	4413      	add	r3, r2
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3714      	adds	r7, #20
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd90      	pop	{r4, r7, pc}
 800ff36:	bf00      	nop
 800ff38:	080266e8 	.word	0x080266e8

0800ff3c <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7fa fb88 	bl	800a65c <_ZN17ConsoleTestOutputC1Ev>
 800ff4c:	4a08      	ldr	r2, [pc, #32]	; (800ff70 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	601a      	str	r2, [r3, #0]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2200      	movs	r2, #0
 800ff56:	611a      	str	r2, [r3, #16]
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	3314      	adds	r3, #20
 800ff5c:	4905      	ldr	r1, [pc, #20]	; (800ff74 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7fe fc41 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
{
}
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	4618      	mov	r0, r3
 800ff68:	3708      	adds	r7, #8
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}
 800ff6e:	bf00      	nop
 800ff70:	0802a8b8 	.word	0x0802a8b8
 800ff74:	080267e8 	.word	0x080267e8

0800ff78 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b082      	sub	sp, #8
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	4a08      	ldr	r2, [pc, #32]	; (800ffa4 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	601a      	str	r2, [r3, #0]
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	3314      	adds	r3, #20
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7fe ffe3 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7fa fb74 	bl	800a680 <_ZN17ConsoleTestOutputD1Ev>
{
}
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3708      	adds	r7, #8
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}
 800ffa2:	bf00      	nop
 800ffa4:	0802a8b8 	.word	0x0802a8b8

0800ffa8 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b082      	sub	sp, #8
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
}
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f7ff ffe1 	bl	800ff78 <_ZN18TeamCityTestOutputD1Ev>
 800ffb6:	211c      	movs	r1, #28
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f7fc f865 	bl	800c088 <_ZdlPvj>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3708      	adds	r7, #8
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b086      	sub	sp, #24
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800ffd2:	687a      	ldr	r2, [r7, #4]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	332c      	adds	r3, #44	; 0x2c
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	492b      	ldr	r1, [pc, #172]	; (801008c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800ffde:	4610      	mov	r0, r2
 800ffe0:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800ffe2:	f107 0308 	add.w	r3, r7, #8
 800ffe6:	6839      	ldr	r1, [r7, #0]
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f004 fdf7 	bl	8014bdc <_ZNK10UtestShell7getNameEv>
 800ffee:	f107 0308 	add.w	r3, r7, #8
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7fe ff82 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 800fff8:	4603      	mov	r3, r0
 800fffa:	4619      	mov	r1, r3
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f000 f919 	bl	8010234 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8010002:	f107 0308 	add.w	r3, r7, #8
 8010006:	4618      	mov	r0, r3
 8010008:	f7fe ffa5 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    print("']\n");
 801000c:	687a      	ldr	r2, [r7, #4]
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	332c      	adds	r3, #44	; 0x2c
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	491e      	ldr	r1, [pc, #120]	; (8010090 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 8010018:	4610      	mov	r0, r2
 801001a:	4798      	blx	r3
    if (!test.willRun()) {
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	3318      	adds	r3, #24
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	6838      	ldr	r0, [r7, #0]
 8010026:	4798      	blx	r3
 8010028:	4603      	mov	r3, r0
 801002a:	f083 0301 	eor.w	r3, r3, #1
 801002e:	b2db      	uxtb	r3, r3
 8010030:	2b00      	cmp	r3, #0
 8010032:	d024      	beq.n	801007e <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 8010034:	687a      	ldr	r2, [r7, #4]
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	332c      	adds	r3, #44	; 0x2c
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	4915      	ldr	r1, [pc, #84]	; (8010094 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 8010040:	4610      	mov	r0, r2
 8010042:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 8010044:	f107 0310 	add.w	r3, r7, #16
 8010048:	6839      	ldr	r1, [r7, #0]
 801004a:	4618      	mov	r0, r3
 801004c:	f004 fdc6 	bl	8014bdc <_ZNK10UtestShell7getNameEv>
 8010050:	f107 0310 	add.w	r3, r7, #16
 8010054:	4618      	mov	r0, r3
 8010056:	f7fe ff51 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801005a:	4603      	mov	r3, r0
 801005c:	4619      	mov	r1, r3
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f000 f8e8 	bl	8010234 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8010064:	f107 0310 	add.w	r3, r7, #16
 8010068:	4618      	mov	r0, r3
 801006a:	f7fe ff74 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        print("']\n");
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	332c      	adds	r3, #44	; 0x2c
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	4905      	ldr	r1, [pc, #20]	; (8010090 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 801007a:	4610      	mov	r0, r2
 801007c:	4798      	blx	r3
    }
    currtest_ = &test;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	683a      	ldr	r2, [r7, #0]
 8010082:	611a      	str	r2, [r3, #16]
}
 8010084:	bf00      	nop
 8010086:	3718      	adds	r7, #24
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}
 801008c:	080267ec 	.word	0x080267ec
 8010090:	0802680c 	.word	0x0802680c
 8010094:	08026810 	.word	0x08026810

08010098 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 8010098:	b5b0      	push	{r4, r5, r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
 80100a0:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	691b      	ldr	r3, [r3, #16]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d03b      	beq.n	8010122 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 80100aa:	687a      	ldr	r2, [r7, #4]
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	332c      	adds	r3, #44	; 0x2c
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	491d      	ldr	r1, [pc, #116]	; (801012c <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 80100b6:	4610      	mov	r0, r2
 80100b8:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	691a      	ldr	r2, [r3, #16]
 80100be:	f107 0308 	add.w	r3, r7, #8
 80100c2:	4611      	mov	r1, r2
 80100c4:	4618      	mov	r0, r3
 80100c6:	f004 fd89 	bl	8014bdc <_ZNK10UtestShell7getNameEv>
 80100ca:	f107 0308 	add.w	r3, r7, #8
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7fe ff14 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 80100d4:	4603      	mov	r3, r0
 80100d6:	4619      	mov	r1, r3
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f000 f8ab 	bl	8010234 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 80100de:	f107 0308 	add.w	r3, r7, #8
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7fe ff37 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    print("' duration='");
 80100e8:	687a      	ldr	r2, [r7, #4]
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	332c      	adds	r3, #44	; 0x2c
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	490f      	ldr	r1, [pc, #60]	; (8010130 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 80100f4:	4610      	mov	r0, r2
 80100f6:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 80100f8:	687d      	ldr	r5, [r7, #4]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	3334      	adds	r3, #52	; 0x34
 8010100:	681c      	ldr	r4, [r3, #0]
 8010102:	6838      	ldr	r0, [r7, #0]
 8010104:	f004 fa0a 	bl	801451c <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8010108:	4603      	mov	r3, r0
 801010a:	4619      	mov	r1, r3
 801010c:	4628      	mov	r0, r5
 801010e:	47a0      	blx	r4
    print("']\n");
 8010110:	687a      	ldr	r2, [r7, #4]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	332c      	adds	r3, #44	; 0x2c
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	4906      	ldr	r1, [pc, #24]	; (8010134 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 801011c:	4610      	mov	r0, r2
 801011e:	4798      	blx	r3
 8010120:	e000      	b.n	8010124 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 8010122:	bf00      	nop
}
 8010124:	3710      	adds	r7, #16
 8010126:	46bd      	mov	sp, r7
 8010128:	bdb0      	pop	{r4, r5, r7, pc}
 801012a:	bf00      	nop
 801012c:	08026830 	.word	0x08026830
 8010130:	08026850 	.word	0x08026850
 8010134:	0802680c 	.word	0x0802680c

08010138 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 8010138:	b590      	push	{r4, r7, lr}
 801013a:	b085      	sub	sp, #20
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f103 0414 	add.w	r4, r3, #20
 8010148:	f107 0308 	add.w	r3, r7, #8
 801014c:	6839      	ldr	r1, [r7, #0]
 801014e:	4618      	mov	r0, r3
 8010150:	f004 fd53 	bl	8014bfa <_ZNK10UtestShell8getGroupEv>
 8010154:	f107 0308 	add.w	r3, r7, #8
 8010158:	4619      	mov	r1, r3
 801015a:	4620      	mov	r0, r4
 801015c:	f7fe fbaf 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 8010160:	f107 0308 	add.w	r3, r7, #8
 8010164:	4618      	mov	r0, r3
 8010166:	f7fe fef6 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 801016a:	687a      	ldr	r2, [r7, #4]
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	332c      	adds	r3, #44	; 0x2c
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	490c      	ldr	r1, [pc, #48]	; (80101a8 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 8010176:	4610      	mov	r0, r2
 8010178:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	3314      	adds	r3, #20
 801017e:	4618      	mov	r0, r3
 8010180:	f7fe febc 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8010184:	4603      	mov	r3, r0
 8010186:	4619      	mov	r1, r3
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	f000 f853 	bl	8010234 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 801018e:	687a      	ldr	r2, [r7, #4]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	332c      	adds	r3, #44	; 0x2c
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	4904      	ldr	r1, [pc, #16]	; (80101ac <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 801019a:	4610      	mov	r0, r2
 801019c:	4798      	blx	r3
}
 801019e:	bf00      	nop
 80101a0:	3714      	adds	r7, #20
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd90      	pop	{r4, r7, pc}
 80101a6:	bf00      	nop
 80101a8:	08026860 	.word	0x08026860
 80101ac:	0802680c 	.word	0x0802680c

080101b0 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 80101b0:	b590      	push	{r4, r7, lr}
 80101b2:	b085      	sub	sp, #20
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f103 0414 	add.w	r4, r3, #20
 80101c0:	f107 0308 	add.w	r3, r7, #8
 80101c4:	4918      	ldr	r1, [pc, #96]	; (8010228 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 80101c6:	4618      	mov	r0, r3
 80101c8:	f7fe fb0d 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80101cc:	f107 0308 	add.w	r3, r7, #8
 80101d0:	4619      	mov	r1, r3
 80101d2:	4620      	mov	r0, r4
 80101d4:	f7fe fecb 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 80101d8:	4603      	mov	r3, r0
 80101da:	461c      	mov	r4, r3
 80101dc:	f107 0308 	add.w	r3, r7, #8
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7fe feb8 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80101e6:	2c00      	cmp	r4, #0
 80101e8:	d11a      	bne.n	8010220 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 80101ea:	687a      	ldr	r2, [r7, #4]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	332c      	adds	r3, #44	; 0x2c
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	490d      	ldr	r1, [pc, #52]	; (801022c <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 80101f6:	4610      	mov	r0, r2
 80101f8:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	3314      	adds	r3, #20
 80101fe:	4618      	mov	r0, r3
 8010200:	f7fe fe7c 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8010204:	4603      	mov	r3, r0
 8010206:	4619      	mov	r1, r3
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f000 f813 	bl	8010234 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 801020e:	687a      	ldr	r2, [r7, #4]
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	332c      	adds	r3, #44	; 0x2c
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	4905      	ldr	r1, [pc, #20]	; (8010230 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 801021a:	4610      	mov	r0, r2
 801021c:	4798      	blx	r3
 801021e:	e000      	b.n	8010222 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 8010220:	bf00      	nop
}
 8010222:	3714      	adds	r7, #20
 8010224:	46bd      	mov	sp, r7
 8010226:	bd90      	pop	{r4, r7, pc}
 8010228:	080267e8 	.word	0x080267e8
 801022c:	08026884 	.word	0x08026884
 8010230:	0802680c 	.word	0x0802680c

08010234 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b084      	sub	sp, #16
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	6039      	str	r1, [r7, #0]
    while (*s) {
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	781b      	ldrb	r3, [r3, #0]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d03f      	beq.n	80102c6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	2b27      	cmp	r3, #39	; 0x27
 801024c:	d00b      	beq.n	8010266 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	2b7c      	cmp	r3, #124	; 0x7c
 8010254:	d007      	beq.n	8010266 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	781b      	ldrb	r3, [r3, #0]
 801025a:	2b5b      	cmp	r3, #91	; 0x5b
 801025c:	d003      	beq.n	8010266 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 801025e:	683b      	ldr	r3, [r7, #0]
 8010260:	781b      	ldrb	r3, [r3, #0]
 8010262:	2b5d      	cmp	r3, #93	; 0x5d
 8010264:	d107      	bne.n	8010276 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 8010266:	237c      	movs	r3, #124	; 0x7c
 8010268:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8010270:	2300      	movs	r3, #0
 8010272:	73bb      	strb	r3, [r7, #14]
 8010274:	e01a      	b.n	80102ac <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	2b0d      	cmp	r3, #13
 801027c:	d106      	bne.n	801028c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 801027e:	237c      	movs	r3, #124	; 0x7c
 8010280:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 8010282:	2372      	movs	r3, #114	; 0x72
 8010284:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8010286:	2300      	movs	r3, #0
 8010288:	73bb      	strb	r3, [r7, #14]
 801028a:	e00f      	b.n	80102ac <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	781b      	ldrb	r3, [r3, #0]
 8010290:	2b0a      	cmp	r3, #10
 8010292:	d106      	bne.n	80102a2 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 8010294:	237c      	movs	r3, #124	; 0x7c
 8010296:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 8010298:	236e      	movs	r3, #110	; 0x6e
 801029a:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 801029c:	2300      	movs	r3, #0
 801029e:	73bb      	strb	r3, [r7, #14]
 80102a0:	e004      	b.n	80102ac <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	781b      	ldrb	r3, [r3, #0]
 80102a6:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 80102a8:	2300      	movs	r3, #0
 80102aa:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 80102ac:	687a      	ldr	r2, [r7, #4]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	3328      	adds	r3, #40	; 0x28
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	f107 010c 	add.w	r1, r7, #12
 80102ba:	4610      	mov	r0, r2
 80102bc:	4798      	blx	r3
        s++;
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	3301      	adds	r3, #1
 80102c2:	603b      	str	r3, [r7, #0]
    while (*s) {
 80102c4:	e7bb      	b.n	801023e <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 80102c6:	bf00      	nop
 80102c8:	3710      	adds	r7, #16
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}
	...

080102d0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 80102d0:	b5b0      	push	{r4, r5, r7, lr}
 80102d2:	b08a      	sub	sp, #40	; 0x28
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
 80102d8:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 80102da:	687a      	ldr	r2, [r7, #4]
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	332c      	adds	r3, #44	; 0x2c
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	4968      	ldr	r1, [pc, #416]	; (8010488 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 80102e6:	4610      	mov	r0, r2
 80102e8:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	3310      	adds	r3, #16
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	f107 0208 	add.w	r2, r7, #8
 80102f6:	6839      	ldr	r1, [r7, #0]
 80102f8:	4610      	mov	r0, r2
 80102fa:	4798      	blx	r3
 80102fc:	f107 0308 	add.w	r3, r7, #8
 8010300:	4618      	mov	r0, r3
 8010302:	f7fe fdfb 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8010306:	4603      	mov	r3, r0
 8010308:	4619      	mov	r1, r3
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f7ff ff92 	bl	8010234 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8010310:	f107 0308 	add.w	r3, r7, #8
 8010314:	4618      	mov	r0, r3
 8010316:	f7fe fe1e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    print("' message='");
 801031a:	687a      	ldr	r2, [r7, #4]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	332c      	adds	r3, #44	; 0x2c
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	4959      	ldr	r1, [pc, #356]	; (801048c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 8010326:	4610      	mov	r0, r2
 8010328:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 801032a:	6838      	ldr	r0, [r7, #0]
 801032c:	f000 fa15 	bl	801075a <_ZNK11TestFailure17isOutsideTestFileEv>
 8010330:	4603      	mov	r3, r0
 8010332:	2b00      	cmp	r3, #0
 8010334:	d105      	bne.n	8010342 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 8010336:	6838      	ldr	r0, [r7, #0]
 8010338:	f000 fa21 	bl	801077e <_ZNK11TestFailure18isInHelperFunctionEv>
 801033c:	4603      	mov	r3, r0
 801033e:	2b00      	cmp	r3, #0
 8010340:	d001      	beq.n	8010346 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 8010342:	2301      	movs	r3, #1
 8010344:	e000      	b.n	8010348 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 8010346:	2300      	movs	r3, #0
 8010348:	2b00      	cmp	r3, #0
 801034a:	d042      	beq.n	80103d2 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 801034c:	687a      	ldr	r2, [r7, #4]
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	332c      	adds	r3, #44	; 0x2c
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	494e      	ldr	r1, [pc, #312]	; (8010490 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 8010358:	4610      	mov	r0, r2
 801035a:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 801035c:	687d      	ldr	r5, [r7, #4]
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	332c      	adds	r3, #44	; 0x2c
 8010364:	681c      	ldr	r4, [r3, #0]
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	331c      	adds	r3, #28
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	f107 0210 	add.w	r2, r7, #16
 8010372:	6839      	ldr	r1, [r7, #0]
 8010374:	4610      	mov	r0, r2
 8010376:	4798      	blx	r3
 8010378:	f107 0310 	add.w	r3, r7, #16
 801037c:	4618      	mov	r0, r3
 801037e:	f7fe fdbd 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8010382:	4603      	mov	r3, r0
 8010384:	4619      	mov	r1, r3
 8010386:	4628      	mov	r0, r5
 8010388:	47a0      	blx	r4
 801038a:	f107 0310 	add.w	r3, r7, #16
 801038e:	4618      	mov	r0, r3
 8010390:	f7fe fde1 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        print(":");
 8010394:	687a      	ldr	r2, [r7, #4]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	332c      	adds	r3, #44	; 0x2c
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	493d      	ldr	r1, [pc, #244]	; (8010494 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 80103a0:	4610      	mov	r0, r2
 80103a2:	4798      	blx	r3
        print(failure.getTestLineNumber());
 80103a4:	687d      	ldr	r5, [r7, #4]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	3334      	adds	r3, #52	; 0x34
 80103ac:	681c      	ldr	r4, [r3, #0]
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	3320      	adds	r3, #32
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	6838      	ldr	r0, [r7, #0]
 80103b8:	4798      	blx	r3
 80103ba:	4603      	mov	r3, r0
 80103bc:	4619      	mov	r1, r3
 80103be:	4628      	mov	r0, r5
 80103c0:	47a0      	blx	r4
        print("): ");
 80103c2:	687a      	ldr	r2, [r7, #4]
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	332c      	adds	r3, #44	; 0x2c
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	4932      	ldr	r1, [pc, #200]	; (8010498 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 80103ce:	4610      	mov	r0, r2
 80103d0:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	3308      	adds	r3, #8
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f107 0218 	add.w	r2, r7, #24
 80103de:	6839      	ldr	r1, [r7, #0]
 80103e0:	4610      	mov	r0, r2
 80103e2:	4798      	blx	r3
 80103e4:	f107 0318 	add.w	r3, r7, #24
 80103e8:	4618      	mov	r0, r3
 80103ea:	f7fe fd87 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 80103ee:	4603      	mov	r3, r0
 80103f0:	4619      	mov	r1, r3
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f7ff ff1e 	bl	8010234 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 80103f8:	f107 0318 	add.w	r3, r7, #24
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7fe fdaa 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    print(":");
 8010402:	687a      	ldr	r2, [r7, #4]
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	332c      	adds	r3, #44	; 0x2c
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	4921      	ldr	r1, [pc, #132]	; (8010494 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 801040e:	4610      	mov	r0, r2
 8010410:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 8010412:	687d      	ldr	r5, [r7, #4]
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	3334      	adds	r3, #52	; 0x34
 801041a:	681c      	ldr	r4, [r3, #0]
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	3314      	adds	r3, #20
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	6838      	ldr	r0, [r7, #0]
 8010426:	4798      	blx	r3
 8010428:	4603      	mov	r3, r0
 801042a:	4619      	mov	r1, r3
 801042c:	4628      	mov	r0, r5
 801042e:	47a0      	blx	r4

    print("' details='");
 8010430:	687a      	ldr	r2, [r7, #4]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	332c      	adds	r3, #44	; 0x2c
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	4918      	ldr	r1, [pc, #96]	; (801049c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 801043c:	4610      	mov	r0, r2
 801043e:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	3318      	adds	r3, #24
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	f107 0220 	add.w	r2, r7, #32
 801044c:	6839      	ldr	r1, [r7, #0]
 801044e:	4610      	mov	r0, r2
 8010450:	4798      	blx	r3
 8010452:	f107 0320 	add.w	r3, r7, #32
 8010456:	4618      	mov	r0, r3
 8010458:	f7fe fd50 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801045c:	4603      	mov	r3, r0
 801045e:	4619      	mov	r1, r3
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f7ff fee7 	bl	8010234 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8010466:	f107 0320 	add.w	r3, r7, #32
 801046a:	4618      	mov	r0, r3
 801046c:	f7fe fd73 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    print("']\n");
 8010470:	687a      	ldr	r2, [r7, #4]
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	332c      	adds	r3, #44	; 0x2c
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	4909      	ldr	r1, [pc, #36]	; (80104a0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 801047c:	4610      	mov	r0, r2
 801047e:	4798      	blx	r3
}
 8010480:	bf00      	nop
 8010482:	3728      	adds	r7, #40	; 0x28
 8010484:	46bd      	mov	sp, r7
 8010486:	bdb0      	pop	{r4, r5, r7, pc}
 8010488:	080268a8 	.word	0x080268a8
 801048c:	080268c8 	.word	0x080268c8
 8010490:	080268d4 	.word	0x080268d4
 8010494:	080268e4 	.word	0x080268e4
 8010498:	080268e8 	.word	0x080268e8
 801049c:	080268ec 	.word	0x080268ec
 80104a0:	0802680c 	.word	0x0802680c

080104a4 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b084      	sub	sp, #16
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 80104b0:	4a1a      	ldr	r2, [pc, #104]	; (801051c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	601a      	str	r2, [r3, #0]
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	3314      	adds	r3, #20
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	68fa      	ldr	r2, [r7, #12]
 80104c0:	3204      	adds	r2, #4
 80104c2:	68b9      	ldr	r1, [r7, #8]
 80104c4:	4610      	mov	r0, r2
 80104c6:	4798      	blx	r3
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	330c      	adds	r3, #12
 80104cc:	68b9      	ldr	r1, [r7, #8]
 80104ce:	4618      	mov	r0, r3
 80104d0:	f004 fb84 	bl	8014bdc <_ZNK10UtestShell7getNameEv>
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	3314      	adds	r3, #20
 80104d8:	68b9      	ldr	r1, [r7, #8]
 80104da:	4618      	mov	r0, r3
 80104dc:	f004 fc4f 	bl	8014d7e <_ZNK10UtestShell7getFileEv>
 80104e0:	68b8      	ldr	r0, [r7, #8]
 80104e2:	f004 fc5b 	bl	8014d9c <_ZNK10UtestShell13getLineNumberEv>
 80104e6:	4602      	mov	r2, r0
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	61da      	str	r2, [r3, #28]
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	3320      	adds	r3, #32
 80104f0:	68b9      	ldr	r1, [r7, #8]
 80104f2:	4618      	mov	r0, r3
 80104f4:	f004 fc43 	bl	8014d7e <_ZNK10UtestShell7getFileEv>
 80104f8:	68b8      	ldr	r0, [r7, #8]
 80104fa:	f004 fc4f 	bl	8014d9c <_ZNK10UtestShell13getLineNumberEv>
 80104fe:	4602      	mov	r2, r0
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	629a      	str	r2, [r3, #40]	; 0x28
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	332c      	adds	r3, #44	; 0x2c
 8010508:	6879      	ldr	r1, [r7, #4]
 801050a:	4618      	mov	r0, r3
 801050c:	f7fe f9bf 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
{
}
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	4618      	mov	r0, r3
 8010514:	3710      	adds	r7, #16
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
 801051a:	bf00      	nop
 801051c:	0802ab84 	.word	0x0802ab84

08010520 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 8010520:	b580      	push	{r7, lr}
 8010522:	b084      	sub	sp, #16
 8010524:	af00      	add	r7, sp, #0
 8010526:	60f8      	str	r0, [r7, #12]
 8010528:	60b9      	str	r1, [r7, #8]
 801052a:	607a      	str	r2, [r7, #4]
 801052c:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 801052e:	4a19      	ldr	r2, [pc, #100]	; (8010594 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	601a      	str	r2, [r3, #0]
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	3314      	adds	r3, #20
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	68fa      	ldr	r2, [r7, #12]
 801053e:	3204      	adds	r2, #4
 8010540:	68b9      	ldr	r1, [r7, #8]
 8010542:	4610      	mov	r0, r2
 8010544:	4798      	blx	r3
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	330c      	adds	r3, #12
 801054a:	68b9      	ldr	r1, [r7, #8]
 801054c:	4618      	mov	r0, r3
 801054e:	f004 fb45 	bl	8014bdc <_ZNK10UtestShell7getNameEv>
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	3314      	adds	r3, #20
 8010556:	6879      	ldr	r1, [r7, #4]
 8010558:	4618      	mov	r0, r3
 801055a:	f7fe f944 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	683a      	ldr	r2, [r7, #0]
 8010562:	61da      	str	r2, [r3, #28]
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	3320      	adds	r3, #32
 8010568:	68b9      	ldr	r1, [r7, #8]
 801056a:	4618      	mov	r0, r3
 801056c:	f004 fc07 	bl	8014d7e <_ZNK10UtestShell7getFileEv>
 8010570:	68b8      	ldr	r0, [r7, #8]
 8010572:	f004 fc13 	bl	8014d9c <_ZNK10UtestShell13getLineNumberEv>
 8010576:	4602      	mov	r2, r0
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	629a      	str	r2, [r3, #40]	; 0x28
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	332c      	adds	r3, #44	; 0x2c
 8010580:	4905      	ldr	r1, [pc, #20]	; (8010598 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 8010582:	4618      	mov	r0, r3
 8010584:	f7fe f92f 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
{
}
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	4618      	mov	r0, r3
 801058c:	3710      	adds	r7, #16
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
 8010592:	bf00      	nop
 8010594:	0802ab84 	.word	0x0802ab84
 8010598:	080268f8 	.word	0x080268f8

0801059c <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 801059c:	b580      	push	{r7, lr}
 801059e:	b082      	sub	sp, #8
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 80105a6:	4a1e      	ldr	r2, [pc, #120]	; (8010620 <_ZN11TestFailureC1ERKS_+0x84>)
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	601a      	str	r2, [r3, #0]
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	1d1a      	adds	r2, r3, #4
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	3304      	adds	r3, #4
 80105b4:	4619      	mov	r1, r3
 80105b6:	4610      	mov	r0, r2
 80105b8:	f7fe f969 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f103 020c 	add.w	r2, r3, #12
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	330c      	adds	r3, #12
 80105c6:	4619      	mov	r1, r3
 80105c8:	4610      	mov	r0, r2
 80105ca:	f7fe f960 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f103 0214 	add.w	r2, r3, #20
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	3314      	adds	r3, #20
 80105d8:	4619      	mov	r1, r3
 80105da:	4610      	mov	r0, r2
 80105dc:	f7fe f957 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	69da      	ldr	r2, [r3, #28]
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	61da      	str	r2, [r3, #28]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f103 0220 	add.w	r2, r3, #32
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	3320      	adds	r3, #32
 80105f2:	4619      	mov	r1, r3
 80105f4:	4610      	mov	r0, r2
 80105f6:	f7fe f94a 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	629a      	str	r2, [r3, #40]	; 0x28
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	332c      	adds	r3, #44	; 0x2c
 801060c:	4619      	mov	r1, r3
 801060e:	4610      	mov	r0, r2
 8010610:	f7fe f93d 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
{
}
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	4618      	mov	r0, r3
 8010618:	3708      	adds	r7, #8
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}
 801061e:	bf00      	nop
 8010620:	0802ab84 	.word	0x0802ab84

08010624 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 8010624:	b580      	push	{r7, lr}
 8010626:	b082      	sub	sp, #8
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
 801062c:	4a10      	ldr	r2, [pc, #64]	; (8010670 <_ZN11TestFailureD1Ev+0x4c>)
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	601a      	str	r2, [r3, #0]
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	332c      	adds	r3, #44	; 0x2c
 8010636:	4618      	mov	r0, r3
 8010638:	f7fe fc8d 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	3320      	adds	r3, #32
 8010640:	4618      	mov	r0, r3
 8010642:	f7fe fc88 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	3314      	adds	r3, #20
 801064a:	4618      	mov	r0, r3
 801064c:	f7fe fc83 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	330c      	adds	r3, #12
 8010654:	4618      	mov	r0, r3
 8010656:	f7fe fc7e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	3304      	adds	r3, #4
 801065e:	4618      	mov	r0, r3
 8010660:	f7fe fc79 	bl	800ef56 <_ZN12SimpleStringD1Ev>
{
}
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	4618      	mov	r0, r3
 8010668:	3708      	adds	r7, #8
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	0802ab84 	.word	0x0802ab84

08010674 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 8010674:	b580      	push	{r7, lr}
 8010676:	b082      	sub	sp, #8
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
}
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f7ff ffd1 	bl	8010624 <_ZN11TestFailureD1Ev>
 8010682:	2134      	movs	r1, #52	; 0x34
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	f7fb fcff 	bl	800c088 <_ZdlPvj>
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	4618      	mov	r0, r3
 801068e:	3708      	adds	r7, #8
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}

08010694 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b082      	sub	sp, #8
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	6039      	str	r1, [r7, #0]
    return fileName_;
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	3314      	adds	r3, #20
 80106a2:	4619      	mov	r1, r3
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f7fe f8f2 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
}
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	3708      	adds	r7, #8
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}

080106b2 <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 80106b2:	b580      	push	{r7, lr}
 80106b4:	b082      	sub	sp, #8
 80106b6:	af00      	add	r7, sp, #0
 80106b8:	6078      	str	r0, [r7, #4]
 80106ba:	6039      	str	r1, [r7, #0]
    return testFileName_;
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	3320      	adds	r3, #32
 80106c0:	4619      	mov	r1, r3
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f7fe f8e3 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
}
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	3708      	adds	r7, #8
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}

080106d0 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b082      	sub	sp, #8
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	6039      	str	r1, [r7, #0]
    return testName_;
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	3304      	adds	r3, #4
 80106de:	4619      	mov	r1, r3
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f7fe f8d4 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
}
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	3708      	adds	r7, #8
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}

080106ee <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 80106ee:	b580      	push	{r7, lr}
 80106f0:	b082      	sub	sp, #8
 80106f2:	af00      	add	r7, sp, #0
 80106f4:	6078      	str	r0, [r7, #4]
 80106f6:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	330c      	adds	r3, #12
 80106fc:	4619      	mov	r1, r3
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f7fe f8c5 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
}
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	3708      	adds	r7, #8
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}

0801070c <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 801070c:	b480      	push	{r7}
 801070e:	b083      	sub	sp, #12
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	69db      	ldr	r3, [r3, #28]
}
 8010718:	4618      	mov	r0, r3
 801071a:	370c      	adds	r7, #12
 801071c:	46bd      	mov	sp, r7
 801071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010722:	4770      	bx	lr

08010724 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 8010724:	b480      	push	{r7}
 8010726:	b083      	sub	sp, #12
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8010730:	4618      	mov	r0, r3
 8010732:	370c      	adds	r7, #12
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr

0801073c <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b082      	sub	sp, #8
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
 8010744:	6039      	str	r1, [r7, #0]
    return message_;
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	332c      	adds	r3, #44	; 0x2c
 801074a:	4619      	mov	r1, r3
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f7fe f89e 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
}
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	3708      	adds	r7, #8
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}

0801075a <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 801075a:	b580      	push	{r7, lr}
 801075c:	b082      	sub	sp, #8
 801075e:	af00      	add	r7, sp, #0
 8010760:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f103 0220 	add.w	r2, r3, #32
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	3314      	adds	r3, #20
 801076c:	4619      	mov	r1, r3
 801076e:	4610      	mov	r0, r2
 8010770:	f7fe fc42 	bl	800eff8 <_ZneRK12SimpleStringS1_>
 8010774:	4603      	mov	r3, r0
}
 8010776:	4618      	mov	r0, r3
 8010778:	3708      	adds	r7, #8
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}

0801077e <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 801077e:	b480      	push	{r7}
 8010780:	b083      	sub	sp, #12
 8010782:	af00      	add	r7, sp, #0
 8010784:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	69da      	ldr	r2, [r3, #28]
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801078e:	429a      	cmp	r2, r3
 8010790:	bf34      	ite	cc
 8010792:	2301      	movcc	r3, #1
 8010794:	2300      	movcs	r3, #0
 8010796:	b2db      	uxtb	r3, r3
}
 8010798:	4618      	mov	r0, r3
 801079a:	370c      	adds	r7, #12
 801079c:	46bd      	mov	sp, r7
 801079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a2:	4770      	bx	lr

080107a4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 80107a4:	b590      	push	{r4, r7, lr}
 80107a6:	b085      	sub	sp, #20
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	60f8      	str	r0, [r7, #12]
 80107ac:	60b9      	str	r1, [r7, #8]
 80107ae:	607a      	str	r2, [r7, #4]
 80107b0:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f7fe fba2 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 80107b8:	4604      	mov	r4, r0
 80107ba:	6838      	ldr	r0, [r7, #0]
 80107bc:	f7fe fb9e 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 80107c0:	4603      	mov	r3, r0
 80107c2:	68f8      	ldr	r0, [r7, #12]
 80107c4:	4622      	mov	r2, r4
 80107c6:	4903      	ldr	r1, [pc, #12]	; (80107d4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 80107c8:	f7ff f8cc 	bl	800f964 <_Z16StringFromFormatPKcz>
}
 80107cc:	68f8      	ldr	r0, [r7, #12]
 80107ce:	3714      	adds	r7, #20
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd90      	pop	{r4, r7, pc}
 80107d4:	08026904 	.word	0x08026904

080107d8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 80107d8:	b590      	push	{r4, r7, lr}
 80107da:	b097      	sub	sp, #92	; 0x5c
 80107dc:	af00      	add	r7, sp, #0
 80107de:	60f8      	str	r0, [r7, #12]
 80107e0:	60b9      	str	r1, [r7, #8]
 80107e2:	607a      	str	r2, [r7, #4]
 80107e4:	603b      	str	r3, [r7, #0]
    SimpleString result;
 80107e6:	494c      	ldr	r1, [pc, #304]	; (8010918 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 80107e8:	68f8      	ldr	r0, [r7, #12]
 80107ea:	f7fd fffc 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 80107ee:	2314      	movs	r3, #20
 80107f0:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 80107f2:	230a      	movs	r3, #10
 80107f4:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 80107f6:	f107 0320 	add.w	r3, r7, #32
 80107fa:	220a      	movs	r2, #10
 80107fc:	4947      	ldr	r1, [pc, #284]	; (801091c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 80107fe:	4618      	mov	r0, r3
 8010800:	f7fe f80c 	bl	800e81c <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 8010804:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010808:	f107 0120 	add.w	r1, r7, #32
 801080c:	687a      	ldr	r2, [r7, #4]
 801080e:	4618      	mov	r0, r3
 8010810:	f7fe fc03 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 8010814:	f107 0318 	add.w	r3, r7, #24
 8010818:	f107 0220 	add.w	r2, r7, #32
 801081c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010820:	4618      	mov	r0, r3
 8010822:	f7fe fbfa 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 8010826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801082a:	4618      	mov	r0, r3
 801082c:	f7fe fb93 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 8010830:	f107 0310 	add.w	r3, r7, #16
 8010834:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010836:	493a      	ldr	r1, [pc, #232]	; (8010920 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 8010838:	4618      	mov	r0, r3
 801083a:	f7ff f893 	bl	800f964 <_Z16StringFromFormatPKcz>

    result += "\n";
 801083e:	4939      	ldr	r1, [pc, #228]	; (8010924 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 8010840:	68f8      	ldr	r0, [r7, #12]
 8010842:	f7fe fc17 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 8010846:	f107 0310 	add.w	r3, r7, #16
 801084a:	4618      	mov	r0, r3
 801084c:	f7fe fb56 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8010850:	4604      	mov	r4, r0
 8010852:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8010856:	f107 0118 	add.w	r1, r7, #24
 801085a:	2314      	movs	r3, #20
 801085c:	683a      	ldr	r2, [r7, #0]
 801085e:	f7fe fc83 	bl	800f168 <_ZNK12SimpleString9subStringEjj>
 8010862:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010866:	4618      	mov	r0, r3
 8010868:	f7fe fb48 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801086c:	4603      	mov	r3, r0
 801086e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010872:	4622      	mov	r2, r4
 8010874:	492c      	ldr	r1, [pc, #176]	; (8010928 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 8010876:	f7ff f875 	bl	800f964 <_Z16StringFromFormatPKcz>
 801087a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801087e:	4619      	mov	r1, r3
 8010880:	68f8      	ldr	r0, [r7, #12]
 8010882:	f7fe fbe5 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 8010886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801088a:	4618      	mov	r0, r3
 801088c:	f7fe fb63 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8010890:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010894:	4618      	mov	r0, r3
 8010896:	f7fe fb5e 	bl	800ef56 <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 801089a:	f107 0310 	add.w	r3, r7, #16
 801089e:	4618      	mov	r0, r3
 80108a0:	f7fe fb38 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 80108a4:	4603      	mov	r3, r0
 80108a6:	f103 020a 	add.w	r2, r3, #10
 80108aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80108ae:	491b      	ldr	r1, [pc, #108]	; (801091c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 80108b0:	4618      	mov	r0, r3
 80108b2:	f7fd ffb3 	bl	800e81c <_ZN12SimpleStringC1EPKcj>
 80108b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80108ba:	4618      	mov	r0, r3
 80108bc:	f7fe fb1e 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 80108c0:	4602      	mov	r2, r0
 80108c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80108c6:	4919      	ldr	r1, [pc, #100]	; (801092c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 80108c8:	4618      	mov	r0, r3
 80108ca:	f7ff f84b 	bl	800f964 <_Z16StringFromFormatPKcz>
 80108ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80108d2:	4619      	mov	r1, r3
 80108d4:	68f8      	ldr	r0, [r7, #12]
 80108d6:	f7fe fbbb 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 80108da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80108de:	4618      	mov	r0, r3
 80108e0:	f7fe fb39 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80108e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80108e8:	4618      	mov	r0, r3
 80108ea:	f7fe fb34 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return result;
 80108ee:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 80108f0:	f107 0310 	add.w	r3, r7, #16
 80108f4:	4618      	mov	r0, r3
 80108f6:	f7fe fb2e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 80108fa:	f107 0318 	add.w	r3, r7, #24
 80108fe:	4618      	mov	r0, r3
 8010900:	f7fe fb29 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 8010904:	f107 0320 	add.w	r3, r7, #32
 8010908:	4618      	mov	r0, r3
 801090a:	f7fe fb24 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return result;
 801090e:	bf00      	nop
}
 8010910:	68f8      	ldr	r0, [r7, #12]
 8010912:	375c      	adds	r7, #92	; 0x5c
 8010914:	46bd      	mov	sp, r7
 8010916:	bd90      	pop	{r4, r7, pc}
 8010918:	08026924 	.word	0x08026924
 801091c:	08026928 	.word	0x08026928
 8010920:	0802692c 	.word	0x0802692c
 8010924:	08026954 	.word	0x08026954
 8010928:	08026958 	.word	0x08026958
 801092c:	08026960 	.word	0x08026960

08010930 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 8010930:	b590      	push	{r4, r7, lr}
 8010932:	b087      	sub	sp, #28
 8010934:	af00      	add	r7, sp, #0
 8010936:	60f8      	str	r0, [r7, #12]
 8010938:	60b9      	str	r1, [r7, #8]
 801093a:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 801093c:	491a      	ldr	r1, [pc, #104]	; (80109a8 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 801093e:	68f8      	ldr	r0, [r7, #12]
 8010940:	f7fd ff51 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f7fe faf5 	bl	800ef34 <_ZNK12SimpleString7isEmptyEv>
 801094a:	4603      	mov	r3, r0
 801094c:	f083 0301 	eor.w	r3, r3, #1
 8010950:	b2db      	uxtb	r3, r3
 8010952:	2b00      	cmp	r3, #0
 8010954:	d022      	beq.n	801099c <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 8010956:	f107 0310 	add.w	r3, r7, #16
 801095a:	4914      	ldr	r1, [pc, #80]	; (80109ac <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 801095c:	4618      	mov	r0, r3
 801095e:	f7fd ff42 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8010962:	f107 0310 	add.w	r3, r7, #16
 8010966:	4619      	mov	r1, r3
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f7fe f800 	bl	800e96e <_ZNK12SimpleString10startsWithERKS_>
 801096e:	4603      	mov	r3, r0
 8010970:	f083 0301 	eor.w	r3, r3, #1
 8010974:	b2dc      	uxtb	r4, r3
 8010976:	f107 0310 	add.w	r3, r7, #16
 801097a:	4618      	mov	r0, r3
 801097c:	f7fe faeb 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8010980:	2c00      	cmp	r4, #0
 8010982:	d003      	beq.n	801098c <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 8010984:	490a      	ldr	r1, [pc, #40]	; (80109b0 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 8010986:	68f8      	ldr	r0, [r7, #12]
 8010988:	f7fe fb74 	bl	800f074 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 801098c:	6879      	ldr	r1, [r7, #4]
 801098e:	68f8      	ldr	r0, [r7, #12]
 8010990:	f7fe fb5e 	bl	800f050 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 8010994:	4907      	ldr	r1, [pc, #28]	; (80109b4 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 8010996:	68f8      	ldr	r0, [r7, #12]
 8010998:	f7fe fb6c 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 801099c:	bf00      	nop
}
 801099e:	68f8      	ldr	r0, [r7, #12]
 80109a0:	371c      	adds	r7, #28
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd90      	pop	{r4, r7, pc}
 80109a6:	bf00      	nop
 80109a8:	08026924 	.word	0x08026924
 80109ac:	08026968 	.word	0x08026968
 80109b0:	08026974 	.word	0x08026974
 80109b4:	08026980 	.word	0x08026980

080109b8 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 80109b8:	b590      	push	{r4, r7, lr}
 80109ba:	b089      	sub	sp, #36	; 0x24
 80109bc:	af00      	add	r7, sp, #0
 80109be:	60f8      	str	r0, [r7, #12]
 80109c0:	60b9      	str	r1, [r7, #8]
 80109c2:	607a      	str	r2, [r7, #4]
 80109c4:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 80109c6:	68f8      	ldr	r0, [r7, #12]
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	687a      	ldr	r2, [r7, #4]
 80109cc:	68b9      	ldr	r1, [r7, #8]
 80109ce:	f7ff fda7 	bl	8010520 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80109d2:	4a19      	ldr	r2, [pc, #100]	; (8010a38 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80109de:	68f9      	ldr	r1, [r7, #12]
 80109e0:	f107 0310 	add.w	r3, r7, #16
 80109e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7ff ffa2 	bl	8010930 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80109ec:	f107 0310 	add.w	r3, r7, #16
 80109f0:	4619      	mov	r1, r3
 80109f2:	4620      	mov	r0, r4
 80109f4:	f7fd ff63 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 80109f8:	f107 0310 	add.w	r3, r7, #16
 80109fc:	4618      	mov	r0, r3
 80109fe:	f7fe faaa 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010a08:	68f9      	ldr	r1, [r7, #12]
 8010a0a:	f107 0018 	add.w	r0, r7, #24
 8010a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a12:	f7ff fec7 	bl	80107a4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8010a16:	f107 0318 	add.w	r3, r7, #24
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	f7fe fb17 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 8010a22:	f107 0318 	add.w	r3, r7, #24
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7fe fa95 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3724      	adds	r7, #36	; 0x24
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd90      	pop	{r4, r7, pc}
 8010a36:	bf00      	nop
 8010a38:	0802ab58 	.word	0x0802ab58

08010a3c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 8010a3c:	b5b0      	push	{r4, r5, r7, lr}
 8010a3e:	b094      	sub	sp, #80	; 0x50
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6278      	str	r0, [r7, #36]	; 0x24
 8010a44:	6239      	str	r1, [r7, #32]
 8010a46:	61fa      	str	r2, [r7, #28]
 8010a48:	61bb      	str	r3, [r7, #24]
 8010a4a:	ed87 0b04 	vstr	d0, [r7, #16]
 8010a4e:	ed87 1b02 	vstr	d1, [r7, #8]
 8010a52:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 8010a56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a58:	69bb      	ldr	r3, [r7, #24]
 8010a5a:	69fa      	ldr	r2, [r7, #28]
 8010a5c:	6a39      	ldr	r1, [r7, #32]
 8010a5e:	f7ff fd5f 	bl	8010520 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010a62:	4a4a      	ldr	r2, [pc, #296]	; (8010b8c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 8010a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a66:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a6a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010a74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010a76:	4618      	mov	r0, r3
 8010a78:	f7ff ff5a 	bl	8010930 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010a7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010a80:	4619      	mov	r1, r3
 8010a82:	4620      	mov	r0, r4
 8010a84:	f7fd ff1b 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 8010a88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f7fe fa62 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 8010a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a94:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010a98:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8010a9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010a9e:	2107      	movs	r1, #7
 8010aa0:	ed97 0b04 	vldr	d0, [r7, #16]
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f7fe ff1b 	bl	800f8e0 <_Z10StringFromdi>
 8010aaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010aae:	2107      	movs	r1, #7
 8010ab0:	ed97 0b02 	vldr	d0, [r7, #8]
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7fe ff13 	bl	800f8e0 <_Z10StringFromdi>
 8010aba:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010abe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010ac2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010ac6:	4629      	mov	r1, r5
 8010ac8:	f7ff fe6c 	bl	80107a4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8010acc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010ad0:	4619      	mov	r1, r3
 8010ad2:	4620      	mov	r0, r4
 8010ad4:	f7fe fabc 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 8010ad8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010adc:	4618      	mov	r0, r3
 8010ade:	f7fe fa3a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8010ae2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7fe fa35 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8010aec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010af0:	4618      	mov	r0, r3
 8010af2:	f7fe fa30 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 8010af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af8:	332c      	adds	r3, #44	; 0x2c
 8010afa:	4925      	ldr	r1, [pc, #148]	; (8010b90 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7fe fab9 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 8010b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b04:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010b08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010b0c:	2107      	movs	r1, #7
 8010b0e:	ed97 0b00 	vldr	d0, [r7]
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7fe fee4 	bl	800f8e0 <_Z10StringFromdi>
 8010b18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010b1c:	4619      	mov	r1, r3
 8010b1e:	4620      	mov	r0, r4
 8010b20:	f7fe fa96 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 8010b24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f7fe fa14 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 8010b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b30:	332c      	adds	r3, #44	; 0x2c
 8010b32:	4918      	ldr	r1, [pc, #96]	; (8010b94 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7fe fa9d 	bl	800f074 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 8010b3a:	4b17      	ldr	r3, [pc, #92]	; (8010b98 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	ed97 0b04 	vldr	d0, [r7, #16]
 8010b42:	4798      	blx	r3
 8010b44:	4603      	mov	r3, r0
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d10f      	bne.n	8010b6a <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 8010b4a:	4b13      	ldr	r3, [pc, #76]	; (8010b98 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	ed97 0b02 	vldr	d0, [r7, #8]
 8010b52:	4798      	blx	r3
 8010b54:	4603      	mov	r3, r0
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d107      	bne.n	8010b6a <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 8010b5a:	4b0f      	ldr	r3, [pc, #60]	; (8010b98 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	ed97 0b00 	vldr	d0, [r7]
 8010b62:	4798      	blx	r3
 8010b64:	4603      	mov	r3, r0
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d001      	beq.n	8010b6e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	e000      	b.n	8010b70 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 8010b6e:	2300      	movs	r3, #0
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d005      	beq.n	8010b80 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 8010b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b76:	332c      	adds	r3, #44	; 0x2c
 8010b78:	4908      	ldr	r1, [pc, #32]	; (8010b9c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f7fe fa7a 	bl	800f074 <_ZN12SimpleStringpLEPKc>
}
 8010b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b82:	4618      	mov	r0, r3
 8010b84:	3750      	adds	r7, #80	; 0x50
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bdb0      	pop	{r4, r5, r7, pc}
 8010b8a:	bf00      	nop
 8010b8c:	0802ab2c 	.word	0x0802ab2c
 8010b90:	08026984 	.word	0x08026984
 8010b94:	0802699c 	.word	0x0802699c
 8010b98:	200000e8 	.word	0x200000e8
 8010b9c:	080269a0 	.word	0x080269a0

08010ba0 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8010ba0:	b590      	push	{r4, r7, lr}
 8010ba2:	b093      	sub	sp, #76	; 0x4c
 8010ba4:	af02      	add	r7, sp, #8
 8010ba6:	60f8      	str	r0, [r7, #12]
 8010ba8:	60b9      	str	r1, [r7, #8]
 8010baa:	607a      	str	r2, [r7, #4]
 8010bac:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8010bae:	68f8      	ldr	r0, [r7, #12]
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	687a      	ldr	r2, [r7, #4]
 8010bb4:	68b9      	ldr	r1, [r7, #8]
 8010bb6:	f7ff fcb3 	bl	8010520 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010bba:	4a4f      	ldr	r2, [pc, #316]	; (8010cf8 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010bc6:	68f9      	ldr	r1, [r7, #12]
 8010bc8:	f107 0320 	add.w	r3, r7, #32
 8010bcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7ff feae 	bl	8010930 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010bd4:	f107 0320 	add.w	r3, r7, #32
 8010bd8:	4619      	mov	r1, r3
 8010bda:	4620      	mov	r0, r4
 8010bdc:	f7fd fe6f 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 8010be0:	f107 0320 	add.w	r3, r7, #32
 8010be4:	4618      	mov	r0, r3
 8010be6:	f7fe f9b6 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 8010bea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010bec:	f7fe f986 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8010bf0:	4602      	mov	r2, r0
 8010bf2:	f107 0318 	add.w	r3, r7, #24
 8010bf6:	4611      	mov	r1, r2
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7fe fc47 	bl	800f48c <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 8010bfe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010c00:	f7fe f97c 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8010c04:	4602      	mov	r2, r0
 8010c06:	f107 0310 	add.w	r3, r7, #16
 8010c0a:	4611      	mov	r1, r2
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f7fe fc3d 	bl	800f48c <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010c18:	68f9      	ldr	r1, [r7, #12]
 8010c1a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8010c1e:	f107 0310 	add.w	r3, r7, #16
 8010c22:	f107 0218 	add.w	r2, r7, #24
 8010c26:	f7ff fdbd 	bl	80107a4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8010c2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010c2e:	4619      	mov	r1, r3
 8010c30:	4620      	mov	r0, r4
 8010c32:	f7fe fa0d 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 8010c36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f7fe f98b 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 8010c40:	2300      	movs	r3, #0
 8010c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010c46:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010c48:	f7fe fae9 	bl	800f21e <_ZNK12SimpleString2atEj>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	461c      	mov	r4, r3
 8010c50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010c52:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010c54:	f7fe fae3 	bl	800f21e <_ZNK12SimpleString2atEj>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	429c      	cmp	r4, r3
 8010c5c:	bf0c      	ite	eq
 8010c5e:	2301      	moveq	r3, #1
 8010c60:	2300      	movne	r3, #0
 8010c62:	b2db      	uxtb	r3, r3
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d003      	beq.n	8010c70 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 8010c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c6a:	3301      	adds	r3, #1
 8010c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c6e:	e7e9      	b.n	8010c44 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 8010c70:	2300      	movs	r3, #0
 8010c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8010c74:	f107 0310 	add.w	r3, r7, #16
 8010c78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7fe facf 	bl	800f21e <_ZNK12SimpleString2atEj>
 8010c80:	4603      	mov	r3, r0
 8010c82:	461c      	mov	r4, r3
 8010c84:	f107 0318 	add.w	r3, r7, #24
 8010c88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7fe fac7 	bl	800f21e <_ZNK12SimpleString2atEj>
 8010c90:	4603      	mov	r3, r0
 8010c92:	429c      	cmp	r4, r3
 8010c94:	bf0c      	ite	eq
 8010c96:	2301      	moveq	r3, #1
 8010c98:	2300      	movne	r3, #0
 8010c9a:	b2db      	uxtb	r3, r3
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d003      	beq.n	8010ca8 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 8010ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	63bb      	str	r3, [r7, #56]	; 0x38
 8010ca6:	e7e5      	b.n	8010c74 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010cae:	68f9      	ldr	r1, [r7, #12]
 8010cb0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010cb4:	f107 0210 	add.w	r2, r7, #16
 8010cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cba:	9300      	str	r3, [sp, #0]
 8010cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cbe:	f7ff fd8b 	bl	80107d8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8010cc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010cc6:	4619      	mov	r1, r3
 8010cc8:	4620      	mov	r0, r4
 8010cca:	f7fe f9c1 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 8010cce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7fe f93f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 8010cd8:	f107 0310 	add.w	r3, r7, #16
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7fe f93a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 8010ce2:	f107 0318 	add.w	r3, r7, #24
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	f7fe f935 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3744      	adds	r7, #68	; 0x44
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd90      	pop	{r4, r7, pc}
 8010cf6:	bf00      	nop
 8010cf8:	0802ab00 	.word	0x0802ab00

08010cfc <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 8010cfc:	b590      	push	{r4, r7, lr}
 8010cfe:	b087      	sub	sp, #28
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	60f8      	str	r0, [r7, #12]
 8010d04:	60b9      	str	r1, [r7, #8]
 8010d06:	607a      	str	r2, [r7, #4]
 8010d08:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8010d0a:	68f8      	ldr	r0, [r7, #12]
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	687a      	ldr	r2, [r7, #4]
 8010d10:	68b9      	ldr	r1, [r7, #8]
 8010d12:	f7ff fc05 	bl	8010520 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010d16:	4a1a      	ldr	r2, [pc, #104]	; (8010d80 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010d22:	68f9      	ldr	r1, [r7, #12]
 8010d24:	f107 0310 	add.w	r3, r7, #16
 8010d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f7ff fe00 	bl	8010930 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010d30:	f107 0310 	add.w	r3, r7, #16
 8010d34:	4619      	mov	r1, r3
 8010d36:	4620      	mov	r0, r4
 8010d38:	f7fd fdc1 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 8010d3c:	f107 0310 	add.w	r3, r7, #16
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7fe f908 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	332c      	adds	r3, #44	; 0x2c
 8010d4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f7fe f97f 	bl	800f050 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	332c      	adds	r3, #44	; 0x2c
 8010d56:	490b      	ldr	r1, [pc, #44]	; (8010d84 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7fe f98b 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	332c      	adds	r3, #44	; 0x2c
 8010d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7fe f973 	bl	800f050 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	332c      	adds	r3, #44	; 0x2c
 8010d6e:	4906      	ldr	r1, [pc, #24]	; (8010d88 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7fe f97f 	bl	800f074 <_ZN12SimpleStringpLEPKc>
}
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	4618      	mov	r0, r3
 8010d7a:	371c      	adds	r7, #28
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd90      	pop	{r4, r7, pc}
 8010d80:	0802aad4 	.word	0x0802aad4
 8010d84:	080269c4 	.word	0x080269c4
 8010d88:	080269c8 	.word	0x080269c8

08010d8c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8010d8c:	b5b0      	push	{r4, r5, r7, lr}
 8010d8e:	b088      	sub	sp, #32
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	60f8      	str	r0, [r7, #12]
 8010d94:	60b9      	str	r1, [r7, #8]
 8010d96:	607a      	str	r2, [r7, #4]
 8010d98:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8010d9a:	68f8      	ldr	r0, [r7, #12]
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	687a      	ldr	r2, [r7, #4]
 8010da0:	68b9      	ldr	r1, [r7, #8]
 8010da2:	f7ff fbbd 	bl	8010520 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010da6:	4a1c      	ldr	r2, [pc, #112]	; (8010e18 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010db2:	68f9      	ldr	r1, [r7, #12]
 8010db4:	f107 0310 	add.w	r3, r7, #16
 8010db8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7ff fdb8 	bl	8010930 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010dc0:	f107 0310 	add.w	r3, r7, #16
 8010dc4:	4619      	mov	r1, r3
 8010dc6:	4620      	mov	r0, r4
 8010dc8:	f7fd fd79 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 8010dcc:	f107 0310 	add.w	r3, r7, #16
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f7fe f8c0 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010ddc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010dde:	f7fe f88d 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8010de2:	4605      	mov	r5, r0
 8010de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010de6:	f7fe f889 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8010dea:	4603      	mov	r3, r0
 8010dec:	f107 0018 	add.w	r0, r7, #24
 8010df0:	462a      	mov	r2, r5
 8010df2:	490a      	ldr	r1, [pc, #40]	; (8010e1c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 8010df4:	f7fe fdb6 	bl	800f964 <_Z16StringFromFormatPKcz>
 8010df8:	f107 0318 	add.w	r3, r7, #24
 8010dfc:	4619      	mov	r1, r3
 8010dfe:	4620      	mov	r0, r4
 8010e00:	f7fe f926 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 8010e04:	f107 0318 	add.w	r3, r7, #24
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f7fe f8a4 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	4618      	mov	r0, r3
 8010e12:	3720      	adds	r7, #32
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bdb0      	pop	{r4, r5, r7, pc}
 8010e18:	0802aaa8 	.word	0x0802aaa8
 8010e1c:	080269d4 	.word	0x080269d4

08010e20 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 8010e20:	b590      	push	{r4, r7, lr}
 8010e22:	b087      	sub	sp, #28
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	60f8      	str	r0, [r7, #12]
 8010e28:	60b9      	str	r1, [r7, #8]
 8010e2a:	607a      	str	r2, [r7, #4]
 8010e2c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8010e2e:	68f8      	ldr	r0, [r7, #12]
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	687a      	ldr	r2, [r7, #4]
 8010e34:	68b9      	ldr	r1, [r7, #8]
 8010e36:	f7ff fb73 	bl	8010520 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010e3a:	4a1a      	ldr	r2, [pc, #104]	; (8010ea4 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010e46:	68f9      	ldr	r1, [r7, #12]
 8010e48:	f107 0310 	add.w	r3, r7, #16
 8010e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7ff fd6e 	bl	8010930 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010e54:	f107 0310 	add.w	r3, r7, #16
 8010e58:	4619      	mov	r1, r3
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	f7fd fd2f 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 8010e60:	f107 0310 	add.w	r3, r7, #16
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7fe f876 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	332c      	adds	r3, #44	; 0x2c
 8010e6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7fe f8ed 	bl	800f050 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	332c      	adds	r3, #44	; 0x2c
 8010e7a:	490b      	ldr	r1, [pc, #44]	; (8010ea8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f7fe f8f9 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	332c      	adds	r3, #44	; 0x2c
 8010e86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7fe f8e1 	bl	800f050 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	332c      	adds	r3, #44	; 0x2c
 8010e92:	4906      	ldr	r1, [pc, #24]	; (8010eac <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7fe f8ed 	bl	800f074 <_ZN12SimpleStringpLEPKc>
}
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	371c      	adds	r7, #28
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd90      	pop	{r4, r7, pc}
 8010ea4:	0802aa7c 	.word	0x0802aa7c
 8010ea8:	080269c4 	.word	0x080269c4
 8010eac:	080269c8 	.word	0x080269c8

08010eb0 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b084      	sub	sp, #16
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	60f8      	str	r0, [r7, #12]
 8010eb8:	60b9      	str	r1, [r7, #8]
 8010eba:	607a      	str	r2, [r7, #4]
 8010ebc:	603b      	str	r3, [r7, #0]
 8010ebe:	68f8      	ldr	r0, [r7, #12]
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	687a      	ldr	r2, [r7, #4]
 8010ec4:	68b9      	ldr	r1, [r7, #8]
 8010ec6:	f7ff fb2b 	bl	8010520 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010eca:	4a07      	ldr	r2, [pc, #28]	; (8010ee8 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	332c      	adds	r3, #44	; 0x2c
 8010ed4:	69b9      	ldr	r1, [r7, #24]
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7fd fcf1 	bl	800e8be <_ZN12SimpleStringaSERKS_>
}
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3710      	adds	r7, #16
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	0802a738 	.word	0x0802a738

08010eec <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 8010eec:	b590      	push	{r4, r7, lr}
 8010eee:	b09d      	sub	sp, #116	; 0x74
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	60f8      	str	r0, [r7, #12]
 8010ef4:	60b9      	str	r1, [r7, #8]
 8010ef6:	607a      	str	r2, [r7, #4]
 8010ef8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8010efa:	68f8      	ldr	r0, [r7, #12]
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	687a      	ldr	r2, [r7, #4]
 8010f00:	68b9      	ldr	r1, [r7, #8]
 8010f02:	f7ff fb0d 	bl	8010520 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010f06:	4a5d      	ldr	r2, [pc, #372]	; (801107c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010f12:	68f9      	ldr	r1, [r7, #12]
 8010f14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010f18:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7ff fd07 	bl	8010930 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010f22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010f26:	4619      	mov	r1, r3
 8010f28:	4620      	mov	r0, r4
 8010f2a:	f7fd fcc8 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 8010f2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010f32:	4618      	mov	r0, r3
 8010f34:	f7fe f80f 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 8010f38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010f3c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7fe fae1 	bl	800f508 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 8010f46:	f107 0320 	add.w	r3, r7, #32
 8010f4a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f7fe fada 	bl	800f508 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8010f54:	f107 0120 	add.w	r1, r7, #32
 8010f58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010f5c:	2220      	movs	r2, #32
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f7fe f8b6 	bl	800f0d0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8010f64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010f68:	4945      	ldr	r1, [pc, #276]	; (8011080 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7fd fc3b 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8010f70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010f74:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010f78:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f7fe f84c 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 8010f82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010f86:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7fe fbd2 	bl	800f734 <_Z30BracketsFormattedHexStringFroml>
 8010f90:	f107 0318 	add.w	r3, r7, #24
 8010f94:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010f98:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f7fe f83c 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 8010fa2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7fd ffd5 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8010fac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7fd ffd0 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8010fb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f7fd ffcb 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8010fc0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010fc4:	492e      	ldr	r1, [pc, #184]	; (8011080 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f7fd fc0d 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8010fcc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010fd0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010fd4:	f107 0120 	add.w	r1, r7, #32
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f7fe f81e 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 8010fde:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010fe2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f7fe fba4 	bl	800f734 <_Z30BracketsFormattedHexStringFroml>
 8010fec:	f107 0310 	add.w	r3, r7, #16
 8010ff0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8010ff4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7fe f80e 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 8010ffe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011002:	4618      	mov	r0, r3
 8011004:	f7fd ffa7 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8011008:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801100c:	4618      	mov	r0, r3
 801100e:	f7fd ffa2 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8011012:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011016:	4618      	mov	r0, r3
 8011018:	f7fd ff9d 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011022:	68f9      	ldr	r1, [r7, #12]
 8011024:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8011028:	f107 0318 	add.w	r3, r7, #24
 801102c:	f107 0210 	add.w	r2, r7, #16
 8011030:	f7ff fbb8 	bl	80107a4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8011034:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011038:	4619      	mov	r1, r3
 801103a:	4620      	mov	r0, r4
 801103c:	f7fe f808 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 8011040:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011044:	4618      	mov	r0, r3
 8011046:	f7fd ff86 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 801104a:	f107 0310 	add.w	r3, r7, #16
 801104e:	4618      	mov	r0, r3
 8011050:	f7fd ff81 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8011054:	f107 0318 	add.w	r3, r7, #24
 8011058:	4618      	mov	r0, r3
 801105a:	f7fd ff7c 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 801105e:	f107 0320 	add.w	r3, r7, #32
 8011062:	4618      	mov	r0, r3
 8011064:	f7fd ff77 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 8011068:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801106c:	4618      	mov	r0, r3
 801106e:	f7fd ff72 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	4618      	mov	r0, r3
 8011076:	3774      	adds	r7, #116	; 0x74
 8011078:	46bd      	mov	sp, r7
 801107a:	bd90      	pop	{r4, r7, pc}
 801107c:	0802aa50 	.word	0x0802aa50
 8011080:	08026928 	.word	0x08026928

08011084 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 8011084:	b590      	push	{r4, r7, lr}
 8011086:	b09d      	sub	sp, #116	; 0x74
 8011088:	af00      	add	r7, sp, #0
 801108a:	60f8      	str	r0, [r7, #12]
 801108c:	60b9      	str	r1, [r7, #8]
 801108e:	607a      	str	r2, [r7, #4]
 8011090:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8011092:	68f8      	ldr	r0, [r7, #12]
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	687a      	ldr	r2, [r7, #4]
 8011098:	68b9      	ldr	r1, [r7, #8]
 801109a:	f7ff fa41 	bl	8010520 <_ZN11TestFailureC1EP10UtestShellPKcj>
 801109e:	4a5d      	ldr	r2, [pc, #372]	; (8011214 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80110aa:	68f9      	ldr	r1, [r7, #12]
 80110ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80110b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80110b4:	4618      	mov	r0, r3
 80110b6:	f7ff fc3b 	bl	8010930 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80110ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80110be:	4619      	mov	r1, r3
 80110c0:	4620      	mov	r0, r4
 80110c2:	f7fd fbfc 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 80110c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80110ca:	4618      	mov	r0, r3
 80110cc:	f7fd ff43 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 80110d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80110d4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80110d8:	4618      	mov	r0, r3
 80110da:	f7fe fc7d 	bl	800f9d8 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 80110de:	f107 0320 	add.w	r3, r7, #32
 80110e2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80110e6:	4618      	mov	r0, r3
 80110e8:	f7fe fc76 	bl	800f9d8 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 80110ec:	f107 0120 	add.w	r1, r7, #32
 80110f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80110f4:	2220      	movs	r2, #32
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7fd ffea 	bl	800f0d0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 80110fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011100:	4945      	ldr	r1, [pc, #276]	; (8011218 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 8011102:	4618      	mov	r0, r3
 8011104:	f7fd fb6f 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8011108:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801110c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011110:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011114:	4618      	mov	r0, r3
 8011116:	f7fd ff80 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 801111a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801111e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8011122:	4618      	mov	r0, r3
 8011124:	f7fe fb22 	bl	800f76c <_Z30BracketsFormattedHexStringFromm>
 8011128:	f107 0318 	add.w	r3, r7, #24
 801112c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011130:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8011134:	4618      	mov	r0, r3
 8011136:	f7fd ff70 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 801113a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801113e:	4618      	mov	r0, r3
 8011140:	f7fd ff09 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8011144:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011148:	4618      	mov	r0, r3
 801114a:	f7fd ff04 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801114e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011152:	4618      	mov	r0, r3
 8011154:	f7fd feff 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8011158:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801115c:	492e      	ldr	r1, [pc, #184]	; (8011218 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 801115e:	4618      	mov	r0, r3
 8011160:	f7fd fb41 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8011164:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011168:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801116c:	f107 0120 	add.w	r1, r7, #32
 8011170:	4618      	mov	r0, r3
 8011172:	f7fd ff52 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 8011176:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801117a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 801117e:	4618      	mov	r0, r3
 8011180:	f7fe faf4 	bl	800f76c <_Z30BracketsFormattedHexStringFromm>
 8011184:	f107 0310 	add.w	r3, r7, #16
 8011188:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801118c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8011190:	4618      	mov	r0, r3
 8011192:	f7fd ff42 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 8011196:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801119a:	4618      	mov	r0, r3
 801119c:	f7fd fedb 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80111a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80111a4:	4618      	mov	r0, r3
 80111a6:	f7fd fed6 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80111aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80111ae:	4618      	mov	r0, r3
 80111b0:	f7fd fed1 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80111ba:	68f9      	ldr	r1, [r7, #12]
 80111bc:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80111c0:	f107 0318 	add.w	r3, r7, #24
 80111c4:	f107 0210 	add.w	r2, r7, #16
 80111c8:	f7ff faec 	bl	80107a4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80111cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80111d0:	4619      	mov	r1, r3
 80111d2:	4620      	mov	r0, r4
 80111d4:	f7fd ff3c 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 80111d8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80111dc:	4618      	mov	r0, r3
 80111de:	f7fd feba 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 80111e2:	f107 0310 	add.w	r3, r7, #16
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7fd feb5 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 80111ec:	f107 0318 	add.w	r3, r7, #24
 80111f0:	4618      	mov	r0, r3
 80111f2:	f7fd feb0 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 80111f6:	f107 0320 	add.w	r3, r7, #32
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7fd feab 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 8011200:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011204:	4618      	mov	r0, r3
 8011206:	f7fd fea6 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	4618      	mov	r0, r3
 801120e:	3774      	adds	r7, #116	; 0x74
 8011210:	46bd      	mov	sp, r7
 8011212:	bd90      	pop	{r4, r7, pc}
 8011214:	0802aa24 	.word	0x0802aa24
 8011218:	08026928 	.word	0x08026928

0801121c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 801121c:	b590      	push	{r4, r7, lr}
 801121e:	b09d      	sub	sp, #116	; 0x74
 8011220:	af00      	add	r7, sp, #0
 8011222:	60f8      	str	r0, [r7, #12]
 8011224:	60b9      	str	r1, [r7, #8]
 8011226:	607a      	str	r2, [r7, #4]
 8011228:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 801122a:	68f8      	ldr	r0, [r7, #12]
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	687a      	ldr	r2, [r7, #4]
 8011230:	68b9      	ldr	r1, [r7, #8]
 8011232:	f7ff f975 	bl	8010520 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8011236:	4a5f      	ldr	r2, [pc, #380]	; (80113b4 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011242:	68f9      	ldr	r1, [r7, #12]
 8011244:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011248:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801124c:	4618      	mov	r0, r3
 801124e:	f7ff fb6f 	bl	8010930 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011252:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011256:	4619      	mov	r1, r3
 8011258:	4620      	mov	r0, r4
 801125a:	f7fd fb30 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801125e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011262:	4618      	mov	r0, r3
 8011264:	f7fd fe77 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 8011268:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 801126c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011270:	4611      	mov	r1, r2
 8011272:	4618      	mov	r0, r3
 8011274:	f7fe f936 	bl	800f4e4 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 8011278:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 801127c:	f107 0320 	add.w	r3, r7, #32
 8011280:	4611      	mov	r1, r2
 8011282:	4618      	mov	r0, r3
 8011284:	f7fe f92e 	bl	800f4e4 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8011288:	f107 0120 	add.w	r1, r7, #32
 801128c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011290:	2220      	movs	r2, #32
 8011292:	4618      	mov	r0, r3
 8011294:	f7fd ff1c 	bl	800f0d0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8011298:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801129c:	4946      	ldr	r1, [pc, #280]	; (80113b8 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 801129e:	4618      	mov	r0, r3
 80112a0:	f7fd faa1 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80112a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80112a8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80112ac:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80112b0:	4618      	mov	r0, r3
 80112b2:	f7fd feb2 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 80112b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80112ba:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 80112be:	4611      	mov	r1, r2
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7fe fa6f 	bl	800f7a4 <_Z30BracketsFormattedHexStringFroma>
 80112c6:	f107 0318 	add.w	r3, r7, #24
 80112ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80112ce:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7fd fea1 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 80112d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80112dc:	4618      	mov	r0, r3
 80112de:	f7fd fe3a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80112e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80112e6:	4618      	mov	r0, r3
 80112e8:	f7fd fe35 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80112ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80112f0:	4618      	mov	r0, r3
 80112f2:	f7fd fe30 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 80112f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80112fa:	492f      	ldr	r1, [pc, #188]	; (80113b8 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 80112fc:	4618      	mov	r0, r3
 80112fe:	f7fd fa72 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8011302:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011306:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801130a:	f107 0120 	add.w	r1, r7, #32
 801130e:	4618      	mov	r0, r3
 8011310:	f7fd fe83 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 8011314:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011318:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 801131c:	4611      	mov	r1, r2
 801131e:	4618      	mov	r0, r3
 8011320:	f7fe fa40 	bl	800f7a4 <_Z30BracketsFormattedHexStringFroma>
 8011324:	f107 0310 	add.w	r3, r7, #16
 8011328:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801132c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8011330:	4618      	mov	r0, r3
 8011332:	f7fd fe72 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 8011336:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801133a:	4618      	mov	r0, r3
 801133c:	f7fd fe0b 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8011340:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011344:	4618      	mov	r0, r3
 8011346:	f7fd fe06 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801134a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801134e:	4618      	mov	r0, r3
 8011350:	f7fd fe01 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801135a:	68f9      	ldr	r1, [r7, #12]
 801135c:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8011360:	f107 0318 	add.w	r3, r7, #24
 8011364:	f107 0210 	add.w	r2, r7, #16
 8011368:	f7ff fa1c 	bl	80107a4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 801136c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011370:	4619      	mov	r1, r3
 8011372:	4620      	mov	r0, r4
 8011374:	f7fd fe6c 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 8011378:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801137c:	4618      	mov	r0, r3
 801137e:	f7fd fdea 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8011382:	f107 0310 	add.w	r3, r7, #16
 8011386:	4618      	mov	r0, r3
 8011388:	f7fd fde5 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 801138c:	f107 0318 	add.w	r3, r7, #24
 8011390:	4618      	mov	r0, r3
 8011392:	f7fd fde0 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 8011396:	f107 0320 	add.w	r3, r7, #32
 801139a:	4618      	mov	r0, r3
 801139c:	f7fd fddb 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 80113a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80113a4:	4618      	mov	r0, r3
 80113a6:	f7fd fdd6 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	4618      	mov	r0, r3
 80113ae:	3774      	adds	r7, #116	; 0x74
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd90      	pop	{r4, r7, pc}
 80113b4:	0802a9f8 	.word	0x0802a9f8
 80113b8:	08026928 	.word	0x08026928

080113bc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 80113bc:	b590      	push	{r4, r7, lr}
 80113be:	b093      	sub	sp, #76	; 0x4c
 80113c0:	af02      	add	r7, sp, #8
 80113c2:	60f8      	str	r0, [r7, #12]
 80113c4:	60b9      	str	r1, [r7, #8]
 80113c6:	607a      	str	r2, [r7, #4]
 80113c8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80113ca:	68f8      	ldr	r0, [r7, #12]
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	687a      	ldr	r2, [r7, #4]
 80113d0:	68b9      	ldr	r1, [r7, #8]
 80113d2:	f7ff f8a5 	bl	8010520 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80113d6:	4a4a      	ldr	r2, [pc, #296]	; (8011500 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80113e2:	68f9      	ldr	r1, [r7, #12]
 80113e4:	f107 0320 	add.w	r3, r7, #32
 80113e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7ff faa0 	bl	8010930 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80113f0:	f107 0320 	add.w	r3, r7, #32
 80113f4:	4619      	mov	r1, r3
 80113f6:	4620      	mov	r0, r4
 80113f8:	f7fd fa61 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 80113fc:	f107 0320 	add.w	r3, r7, #32
 8011400:	4618      	mov	r0, r3
 8011402:	f7fd fda8 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8011406:	f107 0318 	add.w	r3, r7, #24
 801140a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801140c:	4618      	mov	r0, r3
 801140e:	f7fe f83d 	bl	800f48c <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8011412:	f107 0310 	add.w	r3, r7, #16
 8011416:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011418:	4618      	mov	r0, r3
 801141a:	f7fe f837 	bl	800f48c <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011424:	68f9      	ldr	r1, [r7, #12]
 8011426:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801142a:	f107 0310 	add.w	r3, r7, #16
 801142e:	f107 0218 	add.w	r2, r7, #24
 8011432:	f7ff f9b7 	bl	80107a4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8011436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801143a:	4619      	mov	r1, r3
 801143c:	4620      	mov	r0, r4
 801143e:	f7fd fe07 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 8011442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011446:	4618      	mov	r0, r3
 8011448:	f7fd fd85 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 801144c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801144e:	2b00      	cmp	r3, #0
 8011450:	d046      	beq.n	80114e0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 8011452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011454:	2b00      	cmp	r3, #0
 8011456:	d043      	beq.n	80114e0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 8011458:	2300      	movs	r3, #0
 801145a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801145c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801145e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011460:	4413      	add	r3, r2
 8011462:	781a      	ldrb	r2, [r3, #0]
 8011464:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011468:	440b      	add	r3, r1
 801146a:	781b      	ldrb	r3, [r3, #0]
 801146c:	429a      	cmp	r2, r3
 801146e:	d103      	bne.n	8011478 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 8011470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011472:	3301      	adds	r3, #1
 8011474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011476:	e7f1      	b.n	801145c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 8011478:	2300      	movs	r3, #0
 801147a:	63bb      	str	r3, [r7, #56]	; 0x38
 801147c:	f107 0310 	add.w	r3, r7, #16
 8011480:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011482:	4618      	mov	r0, r3
 8011484:	f7fd fecb 	bl	800f21e <_ZNK12SimpleString2atEj>
 8011488:	4603      	mov	r3, r0
 801148a:	461c      	mov	r4, r3
 801148c:	f107 0318 	add.w	r3, r7, #24
 8011490:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011492:	4618      	mov	r0, r3
 8011494:	f7fd fec3 	bl	800f21e <_ZNK12SimpleString2atEj>
 8011498:	4603      	mov	r3, r0
 801149a:	429c      	cmp	r4, r3
 801149c:	bf0c      	ite	eq
 801149e:	2301      	moveq	r3, #1
 80114a0:	2300      	movne	r3, #0
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d003      	beq.n	80114b0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 80114a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114aa:	3301      	adds	r3, #1
 80114ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80114ae:	e7e5      	b.n	801147c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80114b6:	68f9      	ldr	r1, [r7, #12]
 80114b8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80114bc:	f107 0210 	add.w	r2, r7, #16
 80114c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114c2:	9300      	str	r3, [sp, #0]
 80114c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c6:	f7ff f987 	bl	80107d8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 80114ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80114ce:	4619      	mov	r1, r3
 80114d0:	4620      	mov	r0, r4
 80114d2:	f7fd fdbd 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 80114d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80114da:	4618      	mov	r0, r3
 80114dc:	f7fd fd3b 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 80114e0:	f107 0310 	add.w	r3, r7, #16
 80114e4:	4618      	mov	r0, r3
 80114e6:	f7fd fd36 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 80114ea:	f107 0318 	add.w	r3, r7, #24
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7fd fd31 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    }
}
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	4618      	mov	r0, r3
 80114f8:	3744      	adds	r7, #68	; 0x44
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd90      	pop	{r4, r7, pc}
 80114fe:	bf00      	nop
 8011500:	0802a9cc 	.word	0x0802a9cc

08011504 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 8011504:	b590      	push	{r4, r7, lr}
 8011506:	b093      	sub	sp, #76	; 0x4c
 8011508:	af02      	add	r7, sp, #8
 801150a:	60f8      	str	r0, [r7, #12]
 801150c:	60b9      	str	r1, [r7, #8]
 801150e:	607a      	str	r2, [r7, #4]
 8011510:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8011512:	68f8      	ldr	r0, [r7, #12]
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	687a      	ldr	r2, [r7, #4]
 8011518:	68b9      	ldr	r1, [r7, #8]
 801151a:	f7ff f801 	bl	8010520 <_ZN11TestFailureC1EP10UtestShellPKcj>
 801151e:	4a55      	ldr	r2, [pc, #340]	; (8011674 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801152a:	68f9      	ldr	r1, [r7, #12]
 801152c:	f107 0320 	add.w	r3, r7, #32
 8011530:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011532:	4618      	mov	r0, r3
 8011534:	f7ff f9fc 	bl	8010930 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011538:	f107 0320 	add.w	r3, r7, #32
 801153c:	4619      	mov	r1, r3
 801153e:	4620      	mov	r0, r4
 8011540:	f7fd f9bd 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 8011544:	f107 0320 	add.w	r3, r7, #32
 8011548:	4618      	mov	r0, r3
 801154a:	f7fd fd04 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 801154e:	f107 0318 	add.w	r3, r7, #24
 8011552:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011554:	4618      	mov	r0, r3
 8011556:	f7fd ff99 	bl	800f48c <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 801155a:	f107 0310 	add.w	r3, r7, #16
 801155e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011560:	4618      	mov	r0, r3
 8011562:	f7fd ff93 	bl	800f48c <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801156c:	68f9      	ldr	r1, [r7, #12]
 801156e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8011572:	f107 0310 	add.w	r3, r7, #16
 8011576:	f107 0218 	add.w	r2, r7, #24
 801157a:	f7ff f913 	bl	80107a4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 801157e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011582:	4619      	mov	r1, r3
 8011584:	4620      	mov	r0, r4
 8011586:	f7fd fd63 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801158a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801158e:	4618      	mov	r0, r3
 8011590:	f7fd fce1 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 8011594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011596:	2b00      	cmp	r3, #0
 8011598:	d05c      	beq.n	8011654 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 801159a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801159c:	2b00      	cmp	r3, #0
 801159e:	d059      	beq.n	8011654 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 80115a0:	2300      	movs	r3, #0
 80115a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80115a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80115a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115a8:	4413      	add	r3, r2
 80115aa:	781b      	ldrb	r3, [r3, #0]
 80115ac:	4618      	mov	r0, r3
 80115ae:	f7fd f824 	bl	800e5fa <_ZN12SimpleString7ToLowerEc>
 80115b2:	4603      	mov	r3, r0
 80115b4:	461c      	mov	r4, r3
 80115b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80115b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115ba:	4413      	add	r3, r2
 80115bc:	781b      	ldrb	r3, [r3, #0]
 80115be:	4618      	mov	r0, r3
 80115c0:	f7fd f81b 	bl	800e5fa <_ZN12SimpleString7ToLowerEc>
 80115c4:	4603      	mov	r3, r0
 80115c6:	429c      	cmp	r4, r3
 80115c8:	bf0c      	ite	eq
 80115ca:	2301      	moveq	r3, #1
 80115cc:	2300      	movne	r3, #0
 80115ce:	b2db      	uxtb	r3, r3
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d003      	beq.n	80115dc <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 80115d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115d6:	3301      	adds	r3, #1
 80115d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80115da:	e7e3      	b.n	80115a4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 80115dc:	2300      	movs	r3, #0
 80115de:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 80115e0:	f107 0310 	add.w	r3, r7, #16
 80115e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7fd fe19 	bl	800f21e <_ZNK12SimpleString2atEj>
 80115ec:	4603      	mov	r3, r0
 80115ee:	4618      	mov	r0, r3
 80115f0:	f7fd f803 	bl	800e5fa <_ZN12SimpleString7ToLowerEc>
 80115f4:	4603      	mov	r3, r0
 80115f6:	461c      	mov	r4, r3
 80115f8:	f107 0318 	add.w	r3, r7, #24
 80115fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80115fe:	4618      	mov	r0, r3
 8011600:	f7fd fe0d 	bl	800f21e <_ZNK12SimpleString2atEj>
 8011604:	4603      	mov	r3, r0
 8011606:	4618      	mov	r0, r3
 8011608:	f7fc fff7 	bl	800e5fa <_ZN12SimpleString7ToLowerEc>
 801160c:	4603      	mov	r3, r0
 801160e:	429c      	cmp	r4, r3
 8011610:	bf0c      	ite	eq
 8011612:	2301      	moveq	r3, #1
 8011614:	2300      	movne	r3, #0
 8011616:	b2db      	uxtb	r3, r3
 8011618:	2b00      	cmp	r3, #0
 801161a:	d003      	beq.n	8011624 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 801161c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801161e:	3301      	adds	r3, #1
 8011620:	63bb      	str	r3, [r7, #56]	; 0x38
 8011622:	e7dd      	b.n	80115e0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801162a:	68f9      	ldr	r1, [r7, #12]
 801162c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8011630:	f107 0210 	add.w	r2, r7, #16
 8011634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011636:	9300      	str	r3, [sp, #0]
 8011638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801163a:	f7ff f8cd 	bl	80107d8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 801163e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011642:	4619      	mov	r1, r3
 8011644:	4620      	mov	r0, r4
 8011646:	f7fd fd03 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801164a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801164e:	4618      	mov	r0, r3
 8011650:	f7fd fc81 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8011654:	f107 0310 	add.w	r3, r7, #16
 8011658:	4618      	mov	r0, r3
 801165a:	f7fd fc7c 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 801165e:	f107 0318 	add.w	r3, r7, #24
 8011662:	4618      	mov	r0, r3
 8011664:	f7fd fc77 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    }
}
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	4618      	mov	r0, r3
 801166c:	3744      	adds	r7, #68	; 0x44
 801166e:	46bd      	mov	sp, r7
 8011670:	bd90      	pop	{r4, r7, pc}
 8011672:	bf00      	nop
 8011674:	0802a9a0 	.word	0x0802a9a0

08011678 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 8011678:	b5b0      	push	{r4, r5, r7, lr}
 801167a:	b092      	sub	sp, #72	; 0x48
 801167c:	af02      	add	r7, sp, #8
 801167e:	60f8      	str	r0, [r7, #12]
 8011680:	60b9      	str	r1, [r7, #8]
 8011682:	607a      	str	r2, [r7, #4]
 8011684:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 8011686:	68f8      	ldr	r0, [r7, #12]
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	687a      	ldr	r2, [r7, #4]
 801168c:	68b9      	ldr	r1, [r7, #8]
 801168e:	f7fe ff47 	bl	8010520 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8011692:	4a40      	ldr	r2, [pc, #256]	; (8011794 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801169e:	68f9      	ldr	r1, [r7, #12]
 80116a0:	f107 031c 	add.w	r3, r7, #28
 80116a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80116a6:	4618      	mov	r0, r3
 80116a8:	f7ff f942 	bl	8010930 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80116ac:	f107 031c 	add.w	r3, r7, #28
 80116b0:	4619      	mov	r1, r3
 80116b2:	4620      	mov	r0, r4
 80116b4:	f7fd f903 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 80116b8:	f107 031c 	add.w	r3, r7, #28
 80116bc:	4618      	mov	r0, r3
 80116be:	f7fd fc4a 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 80116c2:	f107 0314 	add.w	r3, r7, #20
 80116c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80116c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80116ca:	4618      	mov	r0, r3
 80116cc:	f7fe fa4c 	bl	800fb68 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80116d6:	68fd      	ldr	r5, [r7, #12]
 80116d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80116dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80116de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80116e0:	4618      	mov	r0, r3
 80116e2:	f7fe fa41 	bl	800fb68 <_Z22StringFromBinaryOrNullPKhj>
 80116e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80116ea:	f107 0314 	add.w	r3, r7, #20
 80116ee:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80116f2:	4629      	mov	r1, r5
 80116f4:	f7ff f856 	bl	80107a4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80116f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80116fc:	4619      	mov	r1, r3
 80116fe:	4620      	mov	r0, r4
 8011700:	f7fd fca6 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 8011704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011708:	4618      	mov	r0, r3
 801170a:	f7fd fc24 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801170e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011712:	4618      	mov	r0, r3
 8011714:	f7fd fc1f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 8011718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801171a:	2b00      	cmp	r3, #0
 801171c:	d02f      	beq.n	801177e <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 801171e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011720:	2b00      	cmp	r3, #0
 8011722:	d02c      	beq.n	801177e <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 8011724:	2300      	movs	r3, #0
 8011726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011728:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801172a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801172c:	4413      	add	r3, r2
 801172e:	781a      	ldrb	r2, [r3, #0]
 8011730:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011734:	440b      	add	r3, r1
 8011736:	781b      	ldrb	r3, [r3, #0]
 8011738:	429a      	cmp	r2, r3
 801173a:	d103      	bne.n	8011744 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 801173c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801173e:	3301      	adds	r3, #1
 8011740:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011742:	e7f1      	b.n	8011728 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801174a:	68f9      	ldr	r1, [r7, #12]
 801174c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801174e:	4613      	mov	r3, r2
 8011750:	005b      	lsls	r3, r3, #1
 8011752:	4413      	add	r3, r2
 8011754:	1c5d      	adds	r5, r3, #1
 8011756:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801175a:	f107 0214 	add.w	r2, r7, #20
 801175e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011760:	9300      	str	r3, [sp, #0]
 8011762:	462b      	mov	r3, r5
 8011764:	f7ff f838 	bl	80107d8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8011768:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801176c:	4619      	mov	r1, r3
 801176e:	4620      	mov	r0, r4
 8011770:	f7fd fc6e 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 8011774:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011778:	4618      	mov	r0, r3
 801177a:	f7fd fbec 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 801177e:	f107 0314 	add.w	r3, r7, #20
 8011782:	4618      	mov	r0, r3
 8011784:	f7fd fbe7 	bl	800ef56 <_ZN12SimpleStringD1Ev>
	}
}
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	4618      	mov	r0, r3
 801178c:	3740      	adds	r7, #64	; 0x40
 801178e:	46bd      	mov	sp, r7
 8011790:	bdb0      	pop	{r4, r5, r7, pc}
 8011792:	bf00      	nop
 8011794:	0802a974 	.word	0x0802a974

08011798 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 8011798:	b5b0      	push	{r4, r5, r7, lr}
 801179a:	b08c      	sub	sp, #48	; 0x30
 801179c:	af00      	add	r7, sp, #0
 801179e:	60f8      	str	r0, [r7, #12]
 80117a0:	60b9      	str	r1, [r7, #8]
 80117a2:	607a      	str	r2, [r7, #4]
 80117a4:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 80117a6:	68f8      	ldr	r0, [r7, #12]
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	687a      	ldr	r2, [r7, #4]
 80117ac:	68b9      	ldr	r1, [r7, #8]
 80117ae:	f7fe feb7 	bl	8010520 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80117b2:	4a26      	ldr	r2, [pc, #152]	; (801184c <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80117be:	68f9      	ldr	r1, [r7, #12]
 80117c0:	f107 0310 	add.w	r3, r7, #16
 80117c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80117c6:	4618      	mov	r0, r3
 80117c8:	f7ff f8b2 	bl	8010930 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80117cc:	f107 0310 	add.w	r3, r7, #16
 80117d0:	4619      	mov	r1, r3
 80117d2:	4620      	mov	r0, r4
 80117d4:	f7fd f873 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 80117d8:	f107 0310 	add.w	r3, r7, #16
 80117dc:	4618      	mov	r0, r3
 80117de:	f7fd fbba 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80117e8:	68fd      	ldr	r5, [r7, #12]
 80117ea:	f107 0020 	add.w	r0, r7, #32
 80117ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80117f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80117f4:	f7fe fa24 	bl	800fc40 <_Z20StringFromMaskedBitsmmj>
 80117f8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80117fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011800:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011802:	f7fe fa1d 	bl	800fc40 <_Z20StringFromMaskedBitsmmj>
 8011806:	f107 0018 	add.w	r0, r7, #24
 801180a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801180e:	f107 0220 	add.w	r2, r7, #32
 8011812:	4629      	mov	r1, r5
 8011814:	f7fe ffc6 	bl	80107a4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8011818:	f107 0318 	add.w	r3, r7, #24
 801181c:	4619      	mov	r1, r3
 801181e:	4620      	mov	r0, r4
 8011820:	f7fd fc16 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 8011824:	f107 0318 	add.w	r3, r7, #24
 8011828:	4618      	mov	r0, r3
 801182a:	f7fd fb94 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801182e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011832:	4618      	mov	r0, r3
 8011834:	f7fd fb8f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8011838:	f107 0320 	add.w	r3, r7, #32
 801183c:	4618      	mov	r0, r3
 801183e:	f7fd fb8a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	4618      	mov	r0, r3
 8011846:	3730      	adds	r7, #48	; 0x30
 8011848:	46bd      	mov	sp, r7
 801184a:	bdb0      	pop	{r4, r5, r7, pc}
 801184c:	0802a948 	.word	0x0802a948

08011850 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 8011850:	b590      	push	{r4, r7, lr}
 8011852:	b089      	sub	sp, #36	; 0x24
 8011854:	af00      	add	r7, sp, #0
 8011856:	60f8      	str	r0, [r7, #12]
 8011858:	60b9      	str	r1, [r7, #8]
 801185a:	607a      	str	r2, [r7, #4]
 801185c:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 801185e:	68f8      	ldr	r0, [r7, #12]
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	687a      	ldr	r2, [r7, #4]
 8011864:	68b9      	ldr	r1, [r7, #8]
 8011866:	f7fe fe5b 	bl	8010520 <_ZN11TestFailureC1EP10UtestShellPKcj>
 801186a:	4a1a      	ldr	r2, [pc, #104]	; (80118d4 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011876:	68f9      	ldr	r1, [r7, #12]
 8011878:	f107 0310 	add.w	r3, r7, #16
 801187c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801187e:	4618      	mov	r0, r3
 8011880:	f7ff f856 	bl	8010930 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011884:	f107 0310 	add.w	r3, r7, #16
 8011888:	4619      	mov	r1, r3
 801188a:	4620      	mov	r0, r4
 801188c:	f7fd f817 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 8011890:	f107 0310 	add.w	r3, r7, #16
 8011894:	4618      	mov	r0, r3
 8011896:	f7fd fb5e 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80118a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118a2:	f7fd fb2b 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 80118a6:	4602      	mov	r2, r0
 80118a8:	f107 0318 	add.w	r3, r7, #24
 80118ac:	490a      	ldr	r1, [pc, #40]	; (80118d8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7fe f858 	bl	800f964 <_Z16StringFromFormatPKcz>
 80118b4:	f107 0318 	add.w	r3, r7, #24
 80118b8:	4619      	mov	r1, r3
 80118ba:	4620      	mov	r0, r4
 80118bc:	f7fd fbc8 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 80118c0:	f107 0318 	add.w	r3, r7, #24
 80118c4:	4618      	mov	r0, r3
 80118c6:	f7fd fb46 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	4618      	mov	r0, r3
 80118ce:	3724      	adds	r7, #36	; 0x24
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd90      	pop	{r4, r7, pc}
 80118d4:	0802a91c 	.word	0x0802a91c
 80118d8:	080269f8 	.word	0x080269f8

080118dc <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 80118dc:	b580      	push	{r7, lr}
 80118de:	b082      	sub	sp, #8
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
 80118e4:	4a05      	ldr	r2, [pc, #20]	; (80118fc <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	601a      	str	r2, [r3, #0]
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	4618      	mov	r0, r3
 80118ee:	f7fe fe99 	bl	8010624 <_ZN11TestFailureD1Ev>
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	4618      	mov	r0, r3
 80118f6:	3708      	adds	r7, #8
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}
 80118fc:	0802a91c 	.word	0x0802a91c

08011900 <_ZN25FeatureUnsupportedFailureD0Ev>:
 8011900:	b580      	push	{r7, lr}
 8011902:	b082      	sub	sp, #8
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f7ff ffe7 	bl	80118dc <_ZN25FeatureUnsupportedFailureD1Ev>
 801190e:	2134      	movs	r1, #52	; 0x34
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f7fa fbb9 	bl	800c088 <_ZdlPvj>
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	4618      	mov	r0, r3
 801191a:	3708      	adds	r7, #8
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}

08011920 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 8011920:	b580      	push	{r7, lr}
 8011922:	b082      	sub	sp, #8
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
 8011928:	4a05      	ldr	r2, [pc, #20]	; (8011940 <_ZN16BitsEqualFailureD1Ev+0x20>)
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	601a      	str	r2, [r3, #0]
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	4618      	mov	r0, r3
 8011932:	f7fe fe77 	bl	8010624 <_ZN11TestFailureD1Ev>
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	4618      	mov	r0, r3
 801193a:	3708      	adds	r7, #8
 801193c:	46bd      	mov	sp, r7
 801193e:	bd80      	pop	{r7, pc}
 8011940:	0802a948 	.word	0x0802a948

08011944 <_ZN16BitsEqualFailureD0Ev>:
 8011944:	b580      	push	{r7, lr}
 8011946:	b082      	sub	sp, #8
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
 801194c:	6878      	ldr	r0, [r7, #4]
 801194e:	f7ff ffe7 	bl	8011920 <_ZN16BitsEqualFailureD1Ev>
 8011952:	2134      	movs	r1, #52	; 0x34
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f7fa fb97 	bl	800c088 <_ZdlPvj>
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	4618      	mov	r0, r3
 801195e:	3708      	adds	r7, #8
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}

08011964 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 8011964:	b580      	push	{r7, lr}
 8011966:	b082      	sub	sp, #8
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	4a05      	ldr	r2, [pc, #20]	; (8011984 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	601a      	str	r2, [r3, #0]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	4618      	mov	r0, r3
 8011976:	f7fe fe55 	bl	8010624 <_ZN11TestFailureD1Ev>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	4618      	mov	r0, r3
 801197e:	3708      	adds	r7, #8
 8011980:	46bd      	mov	sp, r7
 8011982:	bd80      	pop	{r7, pc}
 8011984:	0802a974 	.word	0x0802a974

08011988 <_ZN18BinaryEqualFailureD0Ev>:
 8011988:	b580      	push	{r7, lr}
 801198a:	b082      	sub	sp, #8
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f7ff ffe7 	bl	8011964 <_ZN18BinaryEqualFailureD1Ev>
 8011996:	2134      	movs	r1, #52	; 0x34
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f7fa fb75 	bl	800c088 <_ZdlPvj>
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	4618      	mov	r0, r3
 80119a2:	3708      	adds	r7, #8
 80119a4:	46bd      	mov	sp, r7
 80119a6:	bd80      	pop	{r7, pc}

080119a8 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b082      	sub	sp, #8
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	4a05      	ldr	r2, [pc, #20]	; (80119c8 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	601a      	str	r2, [r3, #0]
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	4618      	mov	r0, r3
 80119ba:	f7fe fe33 	bl	8010624 <_ZN11TestFailureD1Ev>
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	4618      	mov	r0, r3
 80119c2:	3708      	adds	r7, #8
 80119c4:	46bd      	mov	sp, r7
 80119c6:	bd80      	pop	{r7, pc}
 80119c8:	0802a9a0 	.word	0x0802a9a0

080119cc <_ZN24StringEqualNoCaseFailureD0Ev>:
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b082      	sub	sp, #8
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
 80119d4:	6878      	ldr	r0, [r7, #4]
 80119d6:	f7ff ffe7 	bl	80119a8 <_ZN24StringEqualNoCaseFailureD1Ev>
 80119da:	2134      	movs	r1, #52	; 0x34
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f7fa fb53 	bl	800c088 <_ZdlPvj>
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	4618      	mov	r0, r3
 80119e6:	3708      	adds	r7, #8
 80119e8:	46bd      	mov	sp, r7
 80119ea:	bd80      	pop	{r7, pc}

080119ec <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b082      	sub	sp, #8
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
 80119f4:	4a05      	ldr	r2, [pc, #20]	; (8011a0c <_ZN18StringEqualFailureD1Ev+0x20>)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	601a      	str	r2, [r3, #0]
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	4618      	mov	r0, r3
 80119fe:	f7fe fe11 	bl	8010624 <_ZN11TestFailureD1Ev>
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	4618      	mov	r0, r3
 8011a06:	3708      	adds	r7, #8
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	bd80      	pop	{r7, pc}
 8011a0c:	0802a9cc 	.word	0x0802a9cc

08011a10 <_ZN18StringEqualFailureD0Ev>:
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b082      	sub	sp, #8
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
 8011a18:	6878      	ldr	r0, [r7, #4]
 8011a1a:	f7ff ffe7 	bl	80119ec <_ZN18StringEqualFailureD1Ev>
 8011a1e:	2134      	movs	r1, #52	; 0x34
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f7fa fb31 	bl	800c088 <_ZdlPvj>
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3708      	adds	r7, #8
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b082      	sub	sp, #8
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
 8011a38:	4a05      	ldr	r2, [pc, #20]	; (8011a50 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	601a      	str	r2, [r3, #0]
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	4618      	mov	r0, r3
 8011a42:	f7fe fdef 	bl	8010624 <_ZN11TestFailureD1Ev>
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	4618      	mov	r0, r3
 8011a4a:	3708      	adds	r7, #8
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd80      	pop	{r7, pc}
 8011a50:	0802a9f8 	.word	0x0802a9f8

08011a54 <_ZN23SignedBytesEqualFailureD0Ev>:
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b082      	sub	sp, #8
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
 8011a5c:	6878      	ldr	r0, [r7, #4]
 8011a5e:	f7ff ffe7 	bl	8011a30 <_ZN23SignedBytesEqualFailureD1Ev>
 8011a62:	2134      	movs	r1, #52	; 0x34
 8011a64:	6878      	ldr	r0, [r7, #4]
 8011a66:	f7fa fb0f 	bl	800c088 <_ZdlPvj>
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	3708      	adds	r7, #8
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}

08011a74 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b082      	sub	sp, #8
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
 8011a7c:	4a05      	ldr	r2, [pc, #20]	; (8011a94 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	601a      	str	r2, [r3, #0]
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	4618      	mov	r0, r3
 8011a86:	f7fe fdcd 	bl	8010624 <_ZN11TestFailureD1Ev>
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	3708      	adds	r7, #8
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}
 8011a94:	0802aa24 	.word	0x0802aa24

08011a98 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b082      	sub	sp, #8
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
 8011aa0:	6878      	ldr	r0, [r7, #4]
 8011aa2:	f7ff ffe7 	bl	8011a74 <_ZN25UnsignedLongsEqualFailureD1Ev>
 8011aa6:	2134      	movs	r1, #52	; 0x34
 8011aa8:	6878      	ldr	r0, [r7, #4]
 8011aaa:	f7fa faed 	bl	800c088 <_ZdlPvj>
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	3708      	adds	r7, #8
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}

08011ab8 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b082      	sub	sp, #8
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
 8011ac0:	4a05      	ldr	r2, [pc, #20]	; (8011ad8 <_ZN17LongsEqualFailureD1Ev+0x20>)
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	601a      	str	r2, [r3, #0]
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f7fe fdab 	bl	8010624 <_ZN11TestFailureD1Ev>
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	3708      	adds	r7, #8
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd80      	pop	{r7, pc}
 8011ad8:	0802aa50 	.word	0x0802aa50

08011adc <_ZN17LongsEqualFailureD0Ev>:
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b082      	sub	sp, #8
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f7ff ffe7 	bl	8011ab8 <_ZN17LongsEqualFailureD1Ev>
 8011aea:	2134      	movs	r1, #52	; 0x34
 8011aec:	6878      	ldr	r0, [r7, #4]
 8011aee:	f7fa facb 	bl	800c088 <_ZdlPvj>
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	4618      	mov	r0, r3
 8011af6:	3708      	adds	r7, #8
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}

08011afc <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b082      	sub	sp, #8
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
 8011b04:	4a05      	ldr	r2, [pc, #20]	; (8011b1c <_ZN12CheckFailureD1Ev+0x20>)
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	601a      	str	r2, [r3, #0]
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f7fe fd89 	bl	8010624 <_ZN11TestFailureD1Ev>
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	4618      	mov	r0, r3
 8011b16:	3708      	adds	r7, #8
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	bd80      	pop	{r7, pc}
 8011b1c:	0802aa7c 	.word	0x0802aa7c

08011b20 <_ZN12CheckFailureD0Ev>:
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b082      	sub	sp, #8
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
 8011b28:	6878      	ldr	r0, [r7, #4]
 8011b2a:	f7ff ffe7 	bl	8011afc <_ZN12CheckFailureD1Ev>
 8011b2e:	2134      	movs	r1, #52	; 0x34
 8011b30:	6878      	ldr	r0, [r7, #4]
 8011b32:	f7fa faa9 	bl	800c088 <_ZdlPvj>
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	4618      	mov	r0, r3
 8011b3a:	3708      	adds	r7, #8
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd80      	pop	{r7, pc}

08011b40 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b082      	sub	sp, #8
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
 8011b48:	4a05      	ldr	r2, [pc, #20]	; (8011b60 <_ZN15ContainsFailureD1Ev+0x20>)
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	601a      	str	r2, [r3, #0]
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	4618      	mov	r0, r3
 8011b52:	f7fe fd67 	bl	8010624 <_ZN11TestFailureD1Ev>
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	4618      	mov	r0, r3
 8011b5a:	3708      	adds	r7, #8
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	bd80      	pop	{r7, pc}
 8011b60:	0802aaa8 	.word	0x0802aaa8

08011b64 <_ZN15ContainsFailureD0Ev>:
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b082      	sub	sp, #8
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
 8011b6c:	6878      	ldr	r0, [r7, #4]
 8011b6e:	f7ff ffe7 	bl	8011b40 <_ZN15ContainsFailureD1Ev>
 8011b72:	2134      	movs	r1, #52	; 0x34
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f7fa fa87 	bl	800c088 <_ZdlPvj>
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	3708      	adds	r7, #8
 8011b80:	46bd      	mov	sp, r7
 8011b82:	bd80      	pop	{r7, pc}

08011b84 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b082      	sub	sp, #8
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
 8011b8c:	4a05      	ldr	r2, [pc, #20]	; (8011ba4 <_ZN17ComparisonFailureD1Ev+0x20>)
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	601a      	str	r2, [r3, #0]
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	4618      	mov	r0, r3
 8011b96:	f7fe fd45 	bl	8010624 <_ZN11TestFailureD1Ev>
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	3708      	adds	r7, #8
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}
 8011ba4:	0802aad4 	.word	0x0802aad4

08011ba8 <_ZN17ComparisonFailureD0Ev>:
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b082      	sub	sp, #8
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f7ff ffe7 	bl	8011b84 <_ZN17ComparisonFailureD1Ev>
 8011bb6:	2134      	movs	r1, #52	; 0x34
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f7fa fa65 	bl	800c088 <_ZdlPvj>
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	3708      	adds	r7, #8
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}

08011bc8 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b082      	sub	sp, #8
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
 8011bd0:	4a05      	ldr	r2, [pc, #20]	; (8011be8 <_ZN17CheckEqualFailureD1Ev+0x20>)
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	601a      	str	r2, [r3, #0]
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f7fe fd23 	bl	8010624 <_ZN11TestFailureD1Ev>
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	4618      	mov	r0, r3
 8011be2:	3708      	adds	r7, #8
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}
 8011be8:	0802ab00 	.word	0x0802ab00

08011bec <_ZN17CheckEqualFailureD0Ev>:
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b082      	sub	sp, #8
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
 8011bf4:	6878      	ldr	r0, [r7, #4]
 8011bf6:	f7ff ffe7 	bl	8011bc8 <_ZN17CheckEqualFailureD1Ev>
 8011bfa:	2134      	movs	r1, #52	; 0x34
 8011bfc:	6878      	ldr	r0, [r7, #4]
 8011bfe:	f7fa fa43 	bl	800c088 <_ZdlPvj>
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	4618      	mov	r0, r3
 8011c06:	3708      	adds	r7, #8
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}

08011c0c <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b082      	sub	sp, #8
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
 8011c14:	4a05      	ldr	r2, [pc, #20]	; (8011c2c <_ZN19DoublesEqualFailureD1Ev+0x20>)
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	601a      	str	r2, [r3, #0]
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f7fe fd01 	bl	8010624 <_ZN11TestFailureD1Ev>
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	4618      	mov	r0, r3
 8011c26:	3708      	adds	r7, #8
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}
 8011c2c:	0802ab2c 	.word	0x0802ab2c

08011c30 <_ZN19DoublesEqualFailureD0Ev>:
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b082      	sub	sp, #8
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f7ff ffe7 	bl	8011c0c <_ZN19DoublesEqualFailureD1Ev>
 8011c3e:	2134      	movs	r1, #52	; 0x34
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f7fa fa21 	bl	800c088 <_ZdlPvj>
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	4618      	mov	r0, r3
 8011c4a:	3708      	adds	r7, #8
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}

08011c50 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b082      	sub	sp, #8
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
 8011c58:	4a05      	ldr	r2, [pc, #20]	; (8011c70 <_ZN13EqualsFailureD1Ev+0x20>)
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	601a      	str	r2, [r3, #0]
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	4618      	mov	r0, r3
 8011c62:	f7fe fcdf 	bl	8010624 <_ZN11TestFailureD1Ev>
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	4618      	mov	r0, r3
 8011c6a:	3708      	adds	r7, #8
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}
 8011c70:	0802ab58 	.word	0x0802ab58

08011c74 <_ZN13EqualsFailureD0Ev>:
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b082      	sub	sp, #8
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f7ff ffe7 	bl	8011c50 <_ZN13EqualsFailureD1Ev>
 8011c82:	2134      	movs	r1, #52	; 0x34
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f7fa f9ff 	bl	800c088 <_ZdlPvj>
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3708      	adds	r7, #8
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}

08011c94 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 8011c94:	b5b0      	push	{r4, r5, r7, lr}
 8011c96:	b086      	sub	sp, #24
 8011c98:	af02      	add	r7, sp, #8
 8011c9a:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 8011c9c:	4b0d      	ldr	r3, [pc, #52]	; (8011cd4 <_ZL13checkedMallocj+0x40>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	6878      	ldr	r0, [r7, #4]
 8011ca2:	4798      	blx	r3
 8011ca4:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d10e      	bne.n	8011cca <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 8011cac:	f004 f97e 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8011cb0:	4604      	mov	r4, r0
 8011cb2:	6823      	ldr	r3, [r4, #0]
 8011cb4:	3368      	adds	r3, #104	; 0x68
 8011cb6:	681d      	ldr	r5, [r3, #0]
 8011cb8:	f004 f988 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	9300      	str	r3, [sp, #0]
 8011cc0:	2325      	movs	r3, #37	; 0x25
 8011cc2:	4a05      	ldr	r2, [pc, #20]	; (8011cd8 <_ZL13checkedMallocj+0x44>)
 8011cc4:	4905      	ldr	r1, [pc, #20]	; (8011cdc <_ZL13checkedMallocj+0x48>)
 8011cc6:	4620      	mov	r0, r4
 8011cc8:	47a8      	blx	r5
    return mem;
 8011cca:	68fb      	ldr	r3, [r7, #12]
}
 8011ccc:	4618      	mov	r0, r3
 8011cce:	3710      	adds	r7, #16
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8011cd4:	200000c8 	.word	0x200000c8
 8011cd8:	08026a6c 	.word	0x08026a6c
 8011cdc:	08026a8c 	.word	0x08026a8c

08011ce0 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 8011ce4:	4b04      	ldr	r3, [pc, #16]	; (8011cf8 <_Z22getCurrentNewAllocatorv+0x18>)
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d101      	bne.n	8011cf0 <_Z22getCurrentNewAllocatorv+0x10>
 8011cec:	f000 f806 	bl	8011cfc <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 8011cf0:	4b01      	ldr	r3, [pc, #4]	; (8011cf8 <_Z22getCurrentNewAllocatorv+0x18>)
 8011cf2:	681b      	ldr	r3, [r3, #0]
}
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	bd80      	pop	{r7, pc}
 8011cf8:	20000988 	.word	0x20000988

08011cfc <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 8011d00:	f000 f810 	bl	8011d24 <_Z19defaultNewAllocatorv>
 8011d04:	4603      	mov	r3, r0
 8011d06:	4a02      	ldr	r2, [pc, #8]	; (8011d10 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 8011d08:	6013      	str	r3, [r2, #0]
}
 8011d0a:	bf00      	nop
 8011d0c:	bd80      	pop	{r7, pc}
 8011d0e:	bf00      	nop
 8011d10:	20000988 	.word	0x20000988

08011d14 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 8011d14:	b580      	push	{r7, lr}
 8011d16:	af00      	add	r7, sp, #0
 8011d18:	4801      	ldr	r0, [pc, #4]	; (8011d20 <__tcf_0+0xc>)
 8011d1a:	f000 f909 	bl	8011f30 <_ZN19TestMemoryAllocatorD1Ev>
 8011d1e:	bd80      	pop	{r7, pc}
 8011d20:	20000994 	.word	0x20000994

08011d24 <_Z19defaultNewAllocatorv>:
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 8011d28:	4b13      	ldr	r3, [pc, #76]	; (8011d78 <_Z19defaultNewAllocatorv+0x54>)
 8011d2a:	781b      	ldrb	r3, [r3, #0]
 8011d2c:	f3bf 8f5b 	dmb	ish
 8011d30:	b2db      	uxtb	r3, r3
 8011d32:	f003 0301 	and.w	r3, r3, #1
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	bf0c      	ite	eq
 8011d3a:	2301      	moveq	r3, #1
 8011d3c:	2300      	movne	r3, #0
 8011d3e:	b2db      	uxtb	r3, r3
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d016      	beq.n	8011d72 <_Z19defaultNewAllocatorv+0x4e>
 8011d44:	480c      	ldr	r0, [pc, #48]	; (8011d78 <_Z19defaultNewAllocatorv+0x54>)
 8011d46:	f00f fc0f 	bl	8021568 <__cxa_guard_acquire>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	bf14      	ite	ne
 8011d50:	2301      	movne	r3, #1
 8011d52:	2300      	moveq	r3, #0
 8011d54:	b2db      	uxtb	r3, r3
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d00b      	beq.n	8011d72 <_Z19defaultNewAllocatorv+0x4e>
 8011d5a:	4b08      	ldr	r3, [pc, #32]	; (8011d7c <_Z19defaultNewAllocatorv+0x58>)
 8011d5c:	4a08      	ldr	r2, [pc, #32]	; (8011d80 <_Z19defaultNewAllocatorv+0x5c>)
 8011d5e:	4909      	ldr	r1, [pc, #36]	; (8011d84 <_Z19defaultNewAllocatorv+0x60>)
 8011d60:	4809      	ldr	r0, [pc, #36]	; (8011d88 <_Z19defaultNewAllocatorv+0x64>)
 8011d62:	f000 f8c5 	bl	8011ef0 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8011d66:	4804      	ldr	r0, [pc, #16]	; (8011d78 <_Z19defaultNewAllocatorv+0x54>)
 8011d68:	f00f fc0a 	bl	8021580 <__cxa_guard_release>
 8011d6c:	4807      	ldr	r0, [pc, #28]	; (8011d8c <_Z19defaultNewAllocatorv+0x68>)
 8011d6e:	f00f fc2e 	bl	80215ce <atexit>
    return &allocator;
 8011d72:	4b05      	ldr	r3, [pc, #20]	; (8011d88 <_Z19defaultNewAllocatorv+0x64>)
}
 8011d74:	4618      	mov	r0, r3
 8011d76:	bd80      	pop	{r7, pc}
 8011d78:	200009a8 	.word	0x200009a8
 8011d7c:	08026aac 	.word	0x08026aac
 8011d80:	08026ab4 	.word	0x08026ab4
 8011d84:	08026ab8 	.word	0x08026ab8
 8011d88:	20000994 	.word	0x20000994
 8011d8c:	08011d15 	.word	0x08011d15

08011d90 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 8011d94:	4b04      	ldr	r3, [pc, #16]	; (8011da8 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d101      	bne.n	8011da0 <_Z27getCurrentNewArrayAllocatorv+0x10>
 8011d9c:	f000 f806 	bl	8011dac <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 8011da0:	4b01      	ldr	r3, [pc, #4]	; (8011da8 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 8011da2:	681b      	ldr	r3, [r3, #0]
}
 8011da4:	4618      	mov	r0, r3
 8011da6:	bd80      	pop	{r7, pc}
 8011da8:	2000098c 	.word	0x2000098c

08011dac <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 8011db0:	f000 f810 	bl	8011dd4 <_Z24defaultNewArrayAllocatorv>
 8011db4:	4603      	mov	r3, r0
 8011db6:	4a02      	ldr	r2, [pc, #8]	; (8011dc0 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 8011db8:	6013      	str	r3, [r2, #0]
}
 8011dba:	bf00      	nop
 8011dbc:	bd80      	pop	{r7, pc}
 8011dbe:	bf00      	nop
 8011dc0:	2000098c 	.word	0x2000098c

08011dc4 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	af00      	add	r7, sp, #0
 8011dc8:	4801      	ldr	r0, [pc, #4]	; (8011dd0 <__tcf_1+0xc>)
 8011dca:	f000 f8b1 	bl	8011f30 <_ZN19TestMemoryAllocatorD1Ev>
 8011dce:	bd80      	pop	{r7, pc}
 8011dd0:	200009ac 	.word	0x200009ac

08011dd4 <_Z24defaultNewArrayAllocatorv>:
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 8011dd8:	4b13      	ldr	r3, [pc, #76]	; (8011e28 <_Z24defaultNewArrayAllocatorv+0x54>)
 8011dda:	781b      	ldrb	r3, [r3, #0]
 8011ddc:	f3bf 8f5b 	dmb	ish
 8011de0:	b2db      	uxtb	r3, r3
 8011de2:	f003 0301 	and.w	r3, r3, #1
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	bf0c      	ite	eq
 8011dea:	2301      	moveq	r3, #1
 8011dec:	2300      	movne	r3, #0
 8011dee:	b2db      	uxtb	r3, r3
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d016      	beq.n	8011e22 <_Z24defaultNewArrayAllocatorv+0x4e>
 8011df4:	480c      	ldr	r0, [pc, #48]	; (8011e28 <_Z24defaultNewArrayAllocatorv+0x54>)
 8011df6:	f00f fbb7 	bl	8021568 <__cxa_guard_acquire>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	bf14      	ite	ne
 8011e00:	2301      	movne	r3, #1
 8011e02:	2300      	moveq	r3, #0
 8011e04:	b2db      	uxtb	r3, r3
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d00b      	beq.n	8011e22 <_Z24defaultNewArrayAllocatorv+0x4e>
 8011e0a:	4b08      	ldr	r3, [pc, #32]	; (8011e2c <_Z24defaultNewArrayAllocatorv+0x58>)
 8011e0c:	4a08      	ldr	r2, [pc, #32]	; (8011e30 <_Z24defaultNewArrayAllocatorv+0x5c>)
 8011e0e:	4909      	ldr	r1, [pc, #36]	; (8011e34 <_Z24defaultNewArrayAllocatorv+0x60>)
 8011e10:	4809      	ldr	r0, [pc, #36]	; (8011e38 <_Z24defaultNewArrayAllocatorv+0x64>)
 8011e12:	f000 f86d 	bl	8011ef0 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8011e16:	4804      	ldr	r0, [pc, #16]	; (8011e28 <_Z24defaultNewArrayAllocatorv+0x54>)
 8011e18:	f00f fbb2 	bl	8021580 <__cxa_guard_release>
 8011e1c:	4807      	ldr	r0, [pc, #28]	; (8011e3c <_Z24defaultNewArrayAllocatorv+0x68>)
 8011e1e:	f00f fbd6 	bl	80215ce <atexit>
    return &allocator;
 8011e22:	4b05      	ldr	r3, [pc, #20]	; (8011e38 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	bd80      	pop	{r7, pc}
 8011e28:	200009c0 	.word	0x200009c0
 8011e2c:	08026ad0 	.word	0x08026ad0
 8011e30:	08026adc 	.word	0x08026adc
 8011e34:	08026ae4 	.word	0x08026ae4
 8011e38:	200009ac 	.word	0x200009ac
 8011e3c:	08011dc5 	.word	0x08011dc5

08011e40 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 8011e44:	4b04      	ldr	r3, [pc, #16]	; (8011e58 <_Z25getCurrentMallocAllocatorv+0x18>)
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d101      	bne.n	8011e50 <_Z25getCurrentMallocAllocatorv+0x10>
 8011e4c:	f000 f806 	bl	8011e5c <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 8011e50:	4b01      	ldr	r3, [pc, #4]	; (8011e58 <_Z25getCurrentMallocAllocatorv+0x18>)
 8011e52:	681b      	ldr	r3, [r3, #0]
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	bd80      	pop	{r7, pc}
 8011e58:	20000990 	.word	0x20000990

08011e5c <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 8011e60:	f000 f810 	bl	8011e84 <_Z22defaultMallocAllocatorv>
 8011e64:	4603      	mov	r3, r0
 8011e66:	4a02      	ldr	r2, [pc, #8]	; (8011e70 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 8011e68:	6013      	str	r3, [r2, #0]
}
 8011e6a:	bf00      	nop
 8011e6c:	bd80      	pop	{r7, pc}
 8011e6e:	bf00      	nop
 8011e70:	20000990 	.word	0x20000990

08011e74 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 8011e74:	b580      	push	{r7, lr}
 8011e76:	af00      	add	r7, sp, #0
 8011e78:	4801      	ldr	r0, [pc, #4]	; (8011e80 <__tcf_2+0xc>)
 8011e7a:	f000 f859 	bl	8011f30 <_ZN19TestMemoryAllocatorD1Ev>
 8011e7e:	bd80      	pop	{r7, pc}
 8011e80:	200009c4 	.word	0x200009c4

08011e84 <_Z22defaultMallocAllocatorv>:
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 8011e88:	4b13      	ldr	r3, [pc, #76]	; (8011ed8 <_Z22defaultMallocAllocatorv+0x54>)
 8011e8a:	781b      	ldrb	r3, [r3, #0]
 8011e8c:	f3bf 8f5b 	dmb	ish
 8011e90:	b2db      	uxtb	r3, r3
 8011e92:	f003 0301 	and.w	r3, r3, #1
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	bf0c      	ite	eq
 8011e9a:	2301      	moveq	r3, #1
 8011e9c:	2300      	movne	r3, #0
 8011e9e:	b2db      	uxtb	r3, r3
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d016      	beq.n	8011ed2 <_Z22defaultMallocAllocatorv+0x4e>
 8011ea4:	480c      	ldr	r0, [pc, #48]	; (8011ed8 <_Z22defaultMallocAllocatorv+0x54>)
 8011ea6:	f00f fb5f 	bl	8021568 <__cxa_guard_acquire>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	bf14      	ite	ne
 8011eb0:	2301      	movne	r3, #1
 8011eb2:	2300      	moveq	r3, #0
 8011eb4:	b2db      	uxtb	r3, r3
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d00b      	beq.n	8011ed2 <_Z22defaultMallocAllocatorv+0x4e>
 8011eba:	4b08      	ldr	r3, [pc, #32]	; (8011edc <_Z22defaultMallocAllocatorv+0x58>)
 8011ebc:	4a08      	ldr	r2, [pc, #32]	; (8011ee0 <_Z22defaultMallocAllocatorv+0x5c>)
 8011ebe:	4909      	ldr	r1, [pc, #36]	; (8011ee4 <_Z22defaultMallocAllocatorv+0x60>)
 8011ec0:	4809      	ldr	r0, [pc, #36]	; (8011ee8 <_Z22defaultMallocAllocatorv+0x64>)
 8011ec2:	f000 f815 	bl	8011ef0 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8011ec6:	4804      	ldr	r0, [pc, #16]	; (8011ed8 <_Z22defaultMallocAllocatorv+0x54>)
 8011ec8:	f00f fb5a 	bl	8021580 <__cxa_guard_release>
 8011ecc:	4807      	ldr	r0, [pc, #28]	; (8011eec <_Z22defaultMallocAllocatorv+0x68>)
 8011ece:	f00f fb7e 	bl	80215ce <atexit>
    return &allocator;
 8011ed2:	4b05      	ldr	r3, [pc, #20]	; (8011ee8 <_Z22defaultMallocAllocatorv+0x64>)
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	bd80      	pop	{r7, pc}
 8011ed8:	200009d8 	.word	0x200009d8
 8011edc:	08026b00 	.word	0x08026b00
 8011ee0:	08026b08 	.word	0x08026b08
 8011ee4:	08026b10 	.word	0x08026b10
 8011ee8:	200009c4 	.word	0x200009c4
 8011eec:	08011e75 	.word	0x08011e75

08011ef0 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 8011ef0:	b480      	push	{r7}
 8011ef2:	b085      	sub	sp, #20
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	60f8      	str	r0, [r7, #12]
 8011ef8:	60b9      	str	r1, [r7, #8]
 8011efa:	607a      	str	r2, [r7, #4]
 8011efc:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 8011efe:	4a0b      	ldr	r2, [pc, #44]	; (8011f2c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	601a      	str	r2, [r3, #0]
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	68ba      	ldr	r2, [r7, #8]
 8011f08:	605a      	str	r2, [r3, #4]
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	687a      	ldr	r2, [r7, #4]
 8011f0e:	609a      	str	r2, [r3, #8]
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	683a      	ldr	r2, [r7, #0]
 8011f14:	60da      	str	r2, [r3, #12]
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	2200      	movs	r2, #0
 8011f1a:	741a      	strb	r2, [r3, #16]
{
}
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3714      	adds	r7, #20
 8011f22:	46bd      	mov	sp, r7
 8011f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f28:	4770      	bx	lr
 8011f2a:	bf00      	nop
 8011f2c:	0802abe4 	.word	0x0802abe4

08011f30 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 8011f30:	b480      	push	{r7}
 8011f32:	b083      	sub	sp, #12
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
 8011f38:	4a06      	ldr	r2, [pc, #24]	; (8011f54 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	2201      	movs	r2, #1
 8011f42:	741a      	strb	r2, [r3, #16]
}
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	4618      	mov	r0, r3
 8011f48:	370c      	adds	r7, #12
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f50:	4770      	bx	lr
 8011f52:	bf00      	nop
 8011f54:	0802abe4 	.word	0x0802abe4

08011f58 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
}
 8011f60:	6878      	ldr	r0, [r7, #4]
 8011f62:	f7ff ffe5 	bl	8011f30 <_ZN19TestMemoryAllocatorD1Ev>
 8011f66:	2114      	movs	r1, #20
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f7fa f88d 	bl	800c088 <_ZdlPvj>
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	4618      	mov	r0, r3
 8011f72:	3708      	adds	r7, #8
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}

08011f78 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 8011f78:	b480      	push	{r7}
 8011f7a:	b083      	sub	sp, #12
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	7c1b      	ldrb	r3, [r3, #16]
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	370c      	adds	r7, #12
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8e:	4770      	bx	lr

08011f90 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 8011f90:	b590      	push	{r4, r7, lr}
 8011f92:	b083      	sub	sp, #12
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
 8011f98:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	3310      	adds	r3, #16
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	4798      	blx	r3
 8011fa6:	4604      	mov	r4, r0
 8011fa8:	683b      	ldr	r3, [r7, #0]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	3310      	adds	r3, #16
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	6838      	ldr	r0, [r7, #0]
 8011fb2:	4798      	blx	r3
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	4620      	mov	r0, r4
 8011fba:	f7fc fa51 	bl	800e460 <_ZN12SimpleString6StrCmpEPKcS1_>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	bf0c      	ite	eq
 8011fc4:	2301      	moveq	r3, #1
 8011fc6:	2300      	movne	r3, #0
 8011fc8:	b2db      	uxtb	r3, r3
}
 8011fca:	4618      	mov	r0, r3
 8011fcc:	370c      	adds	r7, #12
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	bd90      	pop	{r4, r7, pc}
	...

08011fd4 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 8011fd4:	b590      	push	{r4, r7, lr}
 8011fd6:	b083      	sub	sp, #12
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
 8011fdc:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	3308      	adds	r3, #8
 8011fe4:	681c      	ldr	r4, [r3, #0]
 8011fe6:	2301      	movs	r3, #1
 8011fe8:	4a04      	ldr	r2, [pc, #16]	; (8011ffc <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 8011fea:	6839      	ldr	r1, [r7, #0]
 8011fec:	6878      	ldr	r0, [r7, #4]
 8011fee:	47a0      	blx	r4
 8011ff0:	4603      	mov	r3, r0
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	370c      	adds	r7, #12
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	bd90      	pop	{r4, r7, pc}
 8011ffa:	bf00      	nop
 8011ffc:	08026b2c 	.word	0x08026b2c

08012000 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 8012000:	b590      	push	{r4, r7, lr}
 8012002:	b085      	sub	sp, #20
 8012004:	af02      	add	r7, sp, #8
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	330c      	adds	r3, #12
 8012010:	681c      	ldr	r4, [r3, #0]
 8012012:	2301      	movs	r3, #1
 8012014:	9300      	str	r3, [sp, #0]
 8012016:	4b04      	ldr	r3, [pc, #16]	; (8012028 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 8012018:	2200      	movs	r2, #0
 801201a:	6839      	ldr	r1, [r7, #0]
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	47a0      	blx	r4
}
 8012020:	bf00      	nop
 8012022:	370c      	adds	r7, #12
 8012024:	46bd      	mov	sp, r7
 8012026:	bd90      	pop	{r4, r7, pc}
 8012028:	08026b2c 	.word	0x08026b2c

0801202c <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b084      	sub	sp, #16
 8012030:	af00      	add	r7, sp, #0
 8012032:	60f8      	str	r0, [r7, #12]
 8012034:	60b9      	str	r1, [r7, #8]
 8012036:	607a      	str	r2, [r7, #4]
 8012038:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 801203a:	68b8      	ldr	r0, [r7, #8]
 801203c:	f7ff fe2a 	bl	8011c94 <_ZL13checkedMallocj>
 8012040:	4603      	mov	r3, r0
}
 8012042:	4618      	mov	r0, r3
 8012044:	3710      	adds	r7, #16
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}
	...

0801204c <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b084      	sub	sp, #16
 8012050:	af00      	add	r7, sp, #0
 8012052:	60f8      	str	r0, [r7, #12]
 8012054:	60b9      	str	r1, [r7, #8]
 8012056:	607a      	str	r2, [r7, #4]
 8012058:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 801205a:	4b04      	ldr	r3, [pc, #16]	; (801206c <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	68b8      	ldr	r0, [r7, #8]
 8012060:	4798      	blx	r3
}
 8012062:	bf00      	nop
 8012064:	3710      	adds	r7, #16
 8012066:	46bd      	mov	sp, r7
 8012068:	bd80      	pop	{r7, pc}
 801206a:	bf00      	nop
 801206c:	200000d0 	.word	0x200000d0

08012070 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 8012070:	b480      	push	{r7}
 8012072:	b083      	sub	sp, #12
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
    return name_;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	685b      	ldr	r3, [r3, #4]
}
 801207c:	4618      	mov	r0, r3
 801207e:	370c      	adds	r7, #12
 8012080:	46bd      	mov	sp, r7
 8012082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012086:	4770      	bx	lr

08012088 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 8012088:	b480      	push	{r7}
 801208a:	b083      	sub	sp, #12
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	689b      	ldr	r3, [r3, #8]
}
 8012094:	4618      	mov	r0, r3
 8012096:	370c      	adds	r7, #12
 8012098:	46bd      	mov	sp, r7
 801209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209e:	4770      	bx	lr

080120a0 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 80120a0:	b480      	push	{r7}
 80120a2:	b083      	sub	sp, #12
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
    return free_name_;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	68db      	ldr	r3, [r3, #12]
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	370c      	adds	r7, #12
 80120b0:	46bd      	mov	sp, r7
 80120b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b6:	4770      	bx	lr

080120b8 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 80120b8:	b480      	push	{r7}
 80120ba:	b083      	sub	sp, #12
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
    return this;
 80120c0:	687b      	ldr	r3, [r7, #4]
}
 80120c2:	4618      	mov	r0, r3
 80120c4:	370c      	adds	r7, #12
 80120c6:	46bd      	mov	sp, r7
 80120c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120cc:	4770      	bx	lr
	...

080120d0 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b082      	sub	sp, #8
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
 80120d8:	4a05      	ldr	r2, [pc, #20]	; (80120f0 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	601a      	str	r2, [r3, #0]
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	4618      	mov	r0, r3
 80120e2:	f7ff ff25 	bl	8011f30 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	4618      	mov	r0, r3
 80120ea:	3708      	adds	r7, #8
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd80      	pop	{r7, pc}
 80120f0:	0802abb0 	.word	0x0802abb0

080120f4 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b082      	sub	sp, #8
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
}
 80120fc:	6878      	ldr	r0, [r7, #4]
 80120fe:	f7ff ffe7 	bl	80120d0 <_ZN20NullUnknownAllocatorD1Ev>
 8012102:	2114      	movs	r1, #20
 8012104:	6878      	ldr	r0, [r7, #4]
 8012106:	f7f9 ffbf 	bl	800c088 <_ZdlPvj>
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	4618      	mov	r0, r3
 801210e:	3708      	adds	r7, #8
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}

08012114 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 8012114:	b480      	push	{r7}
 8012116:	b085      	sub	sp, #20
 8012118:	af00      	add	r7, sp, #0
 801211a:	60f8      	str	r0, [r7, #12]
 801211c:	60b9      	str	r1, [r7, #8]
 801211e:	607a      	str	r2, [r7, #4]
 8012120:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 8012122:	2300      	movs	r3, #0
}
 8012124:	4618      	mov	r0, r3
 8012126:	3714      	adds	r7, #20
 8012128:	46bd      	mov	sp, r7
 801212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212e:	4770      	bx	lr

08012130 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 8012130:	b480      	push	{r7}
 8012132:	b085      	sub	sp, #20
 8012134:	af00      	add	r7, sp, #0
 8012136:	60f8      	str	r0, [r7, #12]
 8012138:	60b9      	str	r1, [r7, #8]
 801213a:	607a      	str	r2, [r7, #4]
 801213c:	603b      	str	r3, [r7, #0]
}
 801213e:	bf00      	nop
 8012140:	3714      	adds	r7, #20
 8012142:	46bd      	mov	sp, r7
 8012144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012148:	4770      	bx	lr
	...

0801214c <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 801214c:	b580      	push	{r7, lr}
 801214e:	b082      	sub	sp, #8
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	4b06      	ldr	r3, [pc, #24]	; (8012170 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 8012158:	4a05      	ldr	r2, [pc, #20]	; (8012170 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 801215a:	4906      	ldr	r1, [pc, #24]	; (8012174 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 801215c:	f7ff fec8 	bl	8011ef0 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8012160:	4a05      	ldr	r2, [pc, #20]	; (8012178 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	601a      	str	r2, [r3, #0]
{
}
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	4618      	mov	r0, r3
 801216a:	3708      	adds	r7, #8
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}
 8012170:	08026b60 	.word	0x08026b60
 8012174:	08026b68 	.word	0x08026b68
 8012178:	0802abb0 	.word	0x0802abb0

0801217c <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 801217c:	b580      	push	{r7, lr}
 801217e:	af00      	add	r7, sp, #0
 8012180:	4801      	ldr	r0, [pc, #4]	; (8012188 <__tcf_3+0xc>)
 8012182:	f7ff ffa5 	bl	80120d0 <_ZN20NullUnknownAllocatorD1Ev>
 8012186:	bd80      	pop	{r7, pc}
 8012188:	200009dc 	.word	0x200009dc

0801218c <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 801218c:	b580      	push	{r7, lr}
 801218e:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 8012190:	4b12      	ldr	r3, [pc, #72]	; (80121dc <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 8012192:	781b      	ldrb	r3, [r3, #0]
 8012194:	f3bf 8f5b 	dmb	ish
 8012198:	b2db      	uxtb	r3, r3
 801219a:	f003 0301 	and.w	r3, r3, #1
 801219e:	2b00      	cmp	r3, #0
 80121a0:	bf0c      	ite	eq
 80121a2:	2301      	moveq	r3, #1
 80121a4:	2300      	movne	r3, #0
 80121a6:	b2db      	uxtb	r3, r3
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d013      	beq.n	80121d4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 80121ac:	480b      	ldr	r0, [pc, #44]	; (80121dc <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 80121ae:	f00f f9db 	bl	8021568 <__cxa_guard_acquire>
 80121b2:	4603      	mov	r3, r0
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	bf14      	ite	ne
 80121b8:	2301      	movne	r3, #1
 80121ba:	2300      	moveq	r3, #0
 80121bc:	b2db      	uxtb	r3, r3
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d008      	beq.n	80121d4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 80121c2:	4807      	ldr	r0, [pc, #28]	; (80121e0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 80121c4:	f7ff ffc2 	bl	801214c <_ZN20NullUnknownAllocatorC1Ev>
 80121c8:	4804      	ldr	r0, [pc, #16]	; (80121dc <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 80121ca:	f00f f9d9 	bl	8021580 <__cxa_guard_release>
 80121ce:	4805      	ldr	r0, [pc, #20]	; (80121e4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 80121d0:	f00f f9fd 	bl	80215ce <atexit>
    return &allocator;
 80121d4:	4b02      	ldr	r3, [pc, #8]	; (80121e0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	bd80      	pop	{r7, pc}
 80121da:	bf00      	nop
 80121dc:	200009f0 	.word	0x200009f0
 80121e0:	200009dc 	.word	0x200009dc
 80121e4:	0801217d 	.word	0x0801217d

080121e8 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 80121e8:	b480      	push	{r7}
 80121ea:	b083      	sub	sp, #12
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
        return testCount_;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	689b      	ldr	r3, [r3, #8]
    }
 80121f4:	4618      	mov	r0, r3
 80121f6:	370c      	adds	r7, #12
 80121f8:	46bd      	mov	sp, r7
 80121fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fe:	4770      	bx	lr

08012200 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 8012200:	b480      	push	{r7}
 8012202:	b083      	sub	sp, #12
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	699b      	ldr	r3, [r3, #24]
    }
 801220c:	4618      	mov	r0, r3
 801220e:	370c      	adds	r7, #12
 8012210:	46bd      	mov	sp, r7
 8012212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012216:	4770      	bx	lr

08012218 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 8012218:	b580      	push	{r7, lr}
 801221a:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 801221c:	4b05      	ldr	r3, [pc, #20]	; (8012234 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 801221e:	781b      	ldrb	r3, [r3, #0]
 8012220:	2b02      	cmp	r3, #2
 8012222:	d103      	bne.n	801222c <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 8012224:	f004 fa4a 	bl	80166bc <_Z37PlatformSpecificGetWorkingEnvironmentv>
 8012228:	4603      	mov	r3, r0
 801222a:	e001      	b.n	8012230 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 801222c:	4b01      	ldr	r3, [pc, #4]	; (8012234 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 801222e:	781b      	ldrb	r3, [r3, #0]
}
 8012230:	4618      	mov	r0, r3
 8012232:	bd80      	pop	{r7, pc}
 8012234:	20000088 	.word	0x20000088

08012238 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 8012238:	b480      	push	{r7}
 801223a:	b083      	sub	sp, #12
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 8012240:	4a0a      	ldr	r2, [pc, #40]	; (801226c <_ZN10TestOutputC1Ev+0x34>)
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	601a      	str	r2, [r3, #0]
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	2200      	movs	r2, #0
 801224a:	605a      	str	r2, [r3, #4]
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	2200      	movs	r2, #0
 8012250:	721a      	strb	r2, [r3, #8]
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	2200      	movs	r2, #0
 8012256:	725a      	strb	r2, [r3, #9]
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	4a05      	ldr	r2, [pc, #20]	; (8012270 <_ZN10TestOutputC1Ev+0x38>)
 801225c:	60da      	str	r2, [r3, #12]
{
}
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	4618      	mov	r0, r3
 8012262:	370c      	adds	r7, #12
 8012264:	46bd      	mov	sp, r7
 8012266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226a:	4770      	bx	lr
 801226c:	0802ace8 	.word	0x0802ace8
 8012270:	08026f68 	.word	0x08026f68

08012274 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 8012274:	b480      	push	{r7}
 8012276:	b083      	sub	sp, #12
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	4a04      	ldr	r2, [pc, #16]	; (8012290 <_ZN10TestOutputD1Ev+0x1c>)
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	601a      	str	r2, [r3, #0]
{
}
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	4618      	mov	r0, r3
 8012286:	370c      	adds	r7, #12
 8012288:	46bd      	mov	sp, r7
 801228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228e:	4770      	bx	lr
 8012290:	0802ace8 	.word	0x0802ace8

08012294 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 8012294:	b480      	push	{r7}
 8012296:	b083      	sub	sp, #12
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
 801229c:	460b      	mov	r3, r1
 801229e:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	78fa      	ldrb	r2, [r7, #3]
 80122a4:	721a      	strb	r2, [r3, #8]
}
 80122a6:	bf00      	nop
 80122a8:	370c      	adds	r7, #12
 80122aa:	46bd      	mov	sp, r7
 80122ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b0:	4770      	bx	lr

080122b2 <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 80122b2:	b480      	push	{r7}
 80122b4:	b083      	sub	sp, #12
 80122b6:	af00      	add	r7, sp, #0
 80122b8:	6078      	str	r0, [r7, #4]
    color_ = true;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	2201      	movs	r2, #1
 80122be:	725a      	strb	r2, [r3, #9]
}
 80122c0:	bf00      	nop
 80122c2:	370c      	adds	r7, #12
 80122c4:	46bd      	mov	sp, r7
 80122c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ca:	4770      	bx	lr

080122cc <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b082      	sub	sp, #8
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
 80122d4:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	3328      	adds	r3, #40	; 0x28
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	6839      	ldr	r1, [r7, #0]
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	4798      	blx	r3
}
 80122e4:	bf00      	nop
 80122e6:	3708      	adds	r7, #8
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}

080122ec <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 80122ec:	b590      	push	{r4, r7, lr}
 80122ee:	b085      	sub	sp, #20
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
 80122f4:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	332c      	adds	r3, #44	; 0x2c
 80122fc:	681c      	ldr	r4, [r3, #0]
 80122fe:	f107 0308 	add.w	r3, r7, #8
 8012302:	6839      	ldr	r1, [r7, #0]
 8012304:	4618      	mov	r0, r3
 8012306:	f7fd f8ff 	bl	800f508 <_Z10StringFroml>
 801230a:	f107 0308 	add.w	r3, r7, #8
 801230e:	4618      	mov	r0, r3
 8012310:	f7fc fdf4 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8012314:	4603      	mov	r3, r0
 8012316:	4619      	mov	r1, r3
 8012318:	6878      	ldr	r0, [r7, #4]
 801231a:	47a0      	blx	r4
 801231c:	f107 0308 	add.w	r3, r7, #8
 8012320:	4618      	mov	r0, r3
 8012322:	f7fc fe18 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8012326:	bf00      	nop
 8012328:	3714      	adds	r7, #20
 801232a:	46bd      	mov	sp, r7
 801232c:	bd90      	pop	{r4, r7, pc}

0801232e <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 801232e:	b590      	push	{r4, r7, lr}
 8012330:	b085      	sub	sp, #20
 8012332:	af00      	add	r7, sp, #0
 8012334:	6078      	str	r0, [r7, #4]
 8012336:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	332c      	adds	r3, #44	; 0x2c
 801233e:	681c      	ldr	r4, [r3, #0]
 8012340:	f107 0308 	add.w	r3, r7, #8
 8012344:	6839      	ldr	r1, [r7, #0]
 8012346:	4618      	mov	r0, r3
 8012348:	f7fd fb34 	bl	800f9b4 <_Z10StringFromj>
 801234c:	f107 0308 	add.w	r3, r7, #8
 8012350:	4618      	mov	r0, r3
 8012352:	f7fc fdd3 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8012356:	4603      	mov	r3, r0
 8012358:	4619      	mov	r1, r3
 801235a:	6878      	ldr	r0, [r7, #4]
 801235c:	47a0      	blx	r4
 801235e:	f107 0308 	add.w	r3, r7, #8
 8012362:	4618      	mov	r0, r3
 8012364:	f7fc fdf7 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8012368:	bf00      	nop
 801236a:	3714      	adds	r7, #20
 801236c:	46bd      	mov	sp, r7
 801236e:	bd90      	pop	{r4, r7, pc}

08012370 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 8012370:	b590      	push	{r4, r7, lr}
 8012372:	b087      	sub	sp, #28
 8012374:	af00      	add	r7, sp, #0
 8012376:	60f8      	str	r0, [r7, #12]
 8012378:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	332c      	adds	r3, #44	; 0x2c
 8012382:	681c      	ldr	r4, [r3, #0]
 8012384:	f107 0310 	add.w	r3, r7, #16
 8012388:	2106      	movs	r1, #6
 801238a:	ed97 0b00 	vldr	d0, [r7]
 801238e:	4618      	mov	r0, r3
 8012390:	f7fd faa6 	bl	800f8e0 <_Z10StringFromdi>
 8012394:	f107 0310 	add.w	r3, r7, #16
 8012398:	4618      	mov	r0, r3
 801239a:	f7fc fdaf 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801239e:	4603      	mov	r3, r0
 80123a0:	4619      	mov	r1, r3
 80123a2:	68f8      	ldr	r0, [r7, #12]
 80123a4:	47a0      	blx	r4
 80123a6:	f107 0310 	add.w	r3, r7, #16
 80123aa:	4618      	mov	r0, r3
 80123ac:	f7fc fdd3 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 80123b0:	bf00      	nop
 80123b2:	371c      	adds	r7, #28
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bd90      	pop	{r4, r7, pc}

080123b8 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
 80123c0:	6039      	str	r1, [r7, #0]
    p.print(s);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	332c      	adds	r3, #44	; 0x2c
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	6839      	ldr	r1, [r7, #0]
 80123cc:	6878      	ldr	r0, [r7, #4]
 80123ce:	4798      	blx	r3
    return p;
 80123d0:	687b      	ldr	r3, [r7, #4]
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3708      	adds	r7, #8
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}
	...

080123dc <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 80123dc:	b590      	push	{r4, r7, lr}
 80123de:	b085      	sub	sp, #20
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	7a1b      	ldrb	r3, [r3, #8]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d01a      	beq.n	8012424 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	332c      	adds	r3, #44	; 0x2c
 80123f4:	681c      	ldr	r4, [r3, #0]
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	3314      	adds	r3, #20
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	f107 0208 	add.w	r2, r7, #8
 8012402:	6839      	ldr	r1, [r7, #0]
 8012404:	4610      	mov	r0, r2
 8012406:	4798      	blx	r3
 8012408:	f107 0308 	add.w	r3, r7, #8
 801240c:	4618      	mov	r0, r3
 801240e:	f7fc fd75 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8012412:	4603      	mov	r3, r0
 8012414:	4619      	mov	r1, r3
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	47a0      	blx	r4
 801241a:	f107 0308 	add.w	r3, r7, #8
 801241e:	4618      	mov	r0, r3
 8012420:	f7fc fd99 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	3318      	adds	r3, #24
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	6838      	ldr	r0, [r7, #0]
 801242e:	4798      	blx	r3
 8012430:	4603      	mov	r3, r0
 8012432:	2b00      	cmp	r3, #0
 8012434:	d007      	beq.n	8012446 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	3344      	adds	r3, #68	; 0x44
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	4907      	ldr	r1, [pc, #28]	; (801245c <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 8012440:	6878      	ldr	r0, [r7, #4]
 8012442:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 8012444:	e006      	b.n	8012454 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	3344      	adds	r3, #68	; 0x44
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	4904      	ldr	r1, [pc, #16]	; (8012460 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	4798      	blx	r3
}
 8012454:	bf00      	nop
 8012456:	3714      	adds	r7, #20
 8012458:	46bd      	mov	sp, r7
 801245a:	bd90      	pop	{r4, r7, pc}
 801245c:	08026f68 	.word	0x08026f68
 8012460:	08026f6c 	.word	0x08026f6c

08012464 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 8012464:	b590      	push	{r4, r7, lr}
 8012466:	b083      	sub	sp, #12
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
 801246c:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	7a1b      	ldrb	r3, [r3, #8]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d019      	beq.n	80124aa <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	332c      	adds	r3, #44	; 0x2c
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	4910      	ldr	r1, [pc, #64]	; (80124c0 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	3334      	adds	r3, #52	; 0x34
 801248a:	681c      	ldr	r4, [r3, #0]
 801248c:	6838      	ldr	r0, [r7, #0]
 801248e:	f002 f845 	bl	801451c <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8012492:	4603      	mov	r3, r0
 8012494:	4619      	mov	r1, r3
 8012496:	6878      	ldr	r0, [r7, #4]
 8012498:	47a0      	blx	r4
        print(" ms\n");
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	332c      	adds	r3, #44	; 0x2c
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	4908      	ldr	r1, [pc, #32]	; (80124c4 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 80124a8:	e005      	b.n	80124b6 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	3358      	adds	r3, #88	; 0x58
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	4798      	blx	r3
}
 80124b6:	bf00      	nop
 80124b8:	370c      	adds	r7, #12
 80124ba:	46bd      	mov	sp, r7
 80124bc:	bd90      	pop	{r4, r7, pc}
 80124be:	bf00      	nop
 80124c0:	08026f70 	.word	0x08026f70
 80124c4:	08026f74 	.word	0x08026f74

080124c8 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b082      	sub	sp, #8
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	332c      	adds	r3, #44	; 0x2c
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	687a      	ldr	r2, [r7, #4]
 80124da:	68d2      	ldr	r2, [r2, #12]
 80124dc:	4611      	mov	r1, r2
 80124de:	6878      	ldr	r0, [r7, #4]
 80124e0:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	685b      	ldr	r3, [r3, #4]
 80124e6:	1c5a      	adds	r2, r3, #1
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	605a      	str	r2, [r3, #4]
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	685a      	ldr	r2, [r3, #4]
 80124f0:	4b0d      	ldr	r3, [pc, #52]	; (8012528 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 80124f2:	fb83 1302 	smull	r1, r3, r3, r2
 80124f6:	1119      	asrs	r1, r3, #4
 80124f8:	17d3      	asrs	r3, r2, #31
 80124fa:	1acb      	subs	r3, r1, r3
 80124fc:	2132      	movs	r1, #50	; 0x32
 80124fe:	fb01 f303 	mul.w	r3, r1, r3
 8012502:	1ad3      	subs	r3, r2, r3
 8012504:	2b00      	cmp	r3, #0
 8012506:	bf0c      	ite	eq
 8012508:	2301      	moveq	r3, #1
 801250a:	2300      	movne	r3, #0
 801250c:	b2db      	uxtb	r3, r3
 801250e:	2b00      	cmp	r3, #0
 8012510:	d006      	beq.n	8012520 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	332c      	adds	r3, #44	; 0x2c
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	4904      	ldr	r1, [pc, #16]	; (801252c <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 801251c:	6878      	ldr	r0, [r7, #4]
 801251e:	4798      	blx	r3
}
 8012520:	bf00      	nop
 8012522:	3708      	adds	r7, #8
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}
 8012528:	51eb851f 	.word	0x51eb851f
 801252c:	08026f7c 	.word	0x08026f7c

08012530 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 8012530:	b480      	push	{r7}
 8012532:	b083      	sub	sp, #12
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
 8012538:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	683a      	ldr	r2, [r7, #0]
 801253e:	60da      	str	r2, [r3, #12]
}
 8012540:	bf00      	nop
 8012542:	370c      	adds	r7, #12
 8012544:	46bd      	mov	sp, r7
 8012546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254a:	4770      	bx	lr

0801254c <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 801254c:	b480      	push	{r7}
 801254e:	b083      	sub	sp, #12
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
}
 8012554:	bf00      	nop
 8012556:	370c      	adds	r7, #12
 8012558:	46bd      	mov	sp, r7
 801255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255e:	4770      	bx	lr

08012560 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8012560:	b480      	push	{r7}
 8012562:	b083      	sub	sp, #12
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
 8012568:	6039      	str	r1, [r7, #0]
}
 801256a:	bf00      	nop
 801256c:	370c      	adds	r7, #12
 801256e:	46bd      	mov	sp, r7
 8012570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012574:	4770      	bx	lr

08012576 <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 8012576:	b480      	push	{r7}
 8012578:	b083      	sub	sp, #12
 801257a:	af00      	add	r7, sp, #0
 801257c:	6078      	str	r0, [r7, #4]
 801257e:	6039      	str	r1, [r7, #0]
}
 8012580:	bf00      	nop
 8012582:	370c      	adds	r7, #12
 8012584:	46bd      	mov	sp, r7
 8012586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258a:	4770      	bx	lr

0801258c <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 801258c:	b590      	push	{r4, r7, lr}
 801258e:	b085      	sub	sp, #20
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	6039      	str	r1, [r7, #0]
    print("\n");
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	332c      	adds	r3, #44	; 0x2c
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	496f      	ldr	r1, [pc, #444]	; (801275c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 80125a4:	6838      	ldr	r0, [r7, #0]
 80125a6:	f7f8 f83d 	bl	800a624 <_ZNK10TestResult9isFailureEv>
 80125aa:	4603      	mov	r3, r0
 80125ac:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 80125ae:	6838      	ldr	r0, [r7, #0]
 80125b0:	f7f8 f82c 	bl	800a60c <_ZNK10TestResult15getFailureCountEv>
 80125b4:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 80125b6:	7bfb      	ldrb	r3, [r7, #15]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d02b      	beq.n	8012614 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	7a5b      	ldrb	r3, [r3, #9]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d006      	beq.n	80125d2 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	332c      	adds	r3, #44	; 0x2c
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	4964      	ldr	r1, [pc, #400]	; (8012760 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 80125ce:	6878      	ldr	r0, [r7, #4]
 80125d0:	4798      	blx	r3
        }
        print("Errors (");
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	332c      	adds	r3, #44	; 0x2c
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	4962      	ldr	r1, [pc, #392]	; (8012764 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 80125dc:	6878      	ldr	r0, [r7, #4]
 80125de:	4798      	blx	r3
        if (failureCount > 0) {
 80125e0:	68bb      	ldr	r3, [r7, #8]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d00e      	beq.n	8012604 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	3334      	adds	r3, #52	; 0x34
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	68b9      	ldr	r1, [r7, #8]
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	4798      	blx	r3
            print(" failures, ");
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	332c      	adds	r3, #44	; 0x2c
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	495a      	ldr	r1, [pc, #360]	; (8012768 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 80125fe:	6878      	ldr	r0, [r7, #4]
 8012600:	4798      	blx	r3
 8012602:	e019      	b.n	8012638 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	332c      	adds	r3, #44	; 0x2c
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	4957      	ldr	r1, [pc, #348]	; (801276c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 801260e:	6878      	ldr	r0, [r7, #4]
 8012610:	4798      	blx	r3
 8012612:	e011      	b.n	8012638 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	7a5b      	ldrb	r3, [r3, #9]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d006      	beq.n	801262a <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	332c      	adds	r3, #44	; 0x2c
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	4952      	ldr	r1, [pc, #328]	; (8012770 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 8012626:	6878      	ldr	r0, [r7, #4]
 8012628:	4798      	blx	r3
        }
        print("OK (");
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	332c      	adds	r3, #44	; 0x2c
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	4950      	ldr	r1, [pc, #320]	; (8012774 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	4798      	blx	r3
    }
    print(result.getTestCount());
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	3334      	adds	r3, #52	; 0x34
 801263e:	681c      	ldr	r4, [r3, #0]
 8012640:	6838      	ldr	r0, [r7, #0]
 8012642:	f7ff fdd1 	bl	80121e8 <_ZNK10TestResult12getTestCountEv>
 8012646:	4603      	mov	r3, r0
 8012648:	4619      	mov	r1, r3
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	47a0      	blx	r4
    print(" tests, ");
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	332c      	adds	r3, #44	; 0x2c
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	4948      	ldr	r1, [pc, #288]	; (8012778 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 8012658:	6878      	ldr	r0, [r7, #4]
 801265a:	4798      	blx	r3
    print(result.getRunCount());
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	3334      	adds	r3, #52	; 0x34
 8012662:	681c      	ldr	r4, [r3, #0]
 8012664:	6838      	ldr	r0, [r7, #0]
 8012666:	f7f7 ffb9 	bl	800a5dc <_ZNK10TestResult11getRunCountEv>
 801266a:	4603      	mov	r3, r0
 801266c:	4619      	mov	r1, r3
 801266e:	6878      	ldr	r0, [r7, #4]
 8012670:	47a0      	blx	r4
    print(" ran, ");
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	332c      	adds	r3, #44	; 0x2c
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	4940      	ldr	r1, [pc, #256]	; (801277c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 801267c:	6878      	ldr	r0, [r7, #4]
 801267e:	4798      	blx	r3
    print(result.getCheckCount());
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	3334      	adds	r3, #52	; 0x34
 8012686:	681c      	ldr	r4, [r3, #0]
 8012688:	6838      	ldr	r0, [r7, #0]
 801268a:	f7f8 fc13 	bl	800aeb4 <_ZNK10TestResult13getCheckCountEv>
 801268e:	4603      	mov	r3, r0
 8012690:	4619      	mov	r1, r3
 8012692:	6878      	ldr	r0, [r7, #4]
 8012694:	47a0      	blx	r4
    print(" checks, ");
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	332c      	adds	r3, #44	; 0x2c
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	4938      	ldr	r1, [pc, #224]	; (8012780 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	4798      	blx	r3
    print(result.getIgnoredCount());
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	3334      	adds	r3, #52	; 0x34
 80126aa:	681c      	ldr	r4, [r3, #0]
 80126ac:	6838      	ldr	r0, [r7, #0]
 80126ae:	f7f7 ffa1 	bl	800a5f4 <_ZNK10TestResult15getIgnoredCountEv>
 80126b2:	4603      	mov	r3, r0
 80126b4:	4619      	mov	r1, r3
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	47a0      	blx	r4
    print(" ignored, ");
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	332c      	adds	r3, #44	; 0x2c
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	4930      	ldr	r1, [pc, #192]	; (8012784 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 80126c4:	6878      	ldr	r0, [r7, #4]
 80126c6:	4798      	blx	r3
    print(result.getFilteredOutCount());
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	3334      	adds	r3, #52	; 0x34
 80126ce:	681c      	ldr	r4, [r3, #0]
 80126d0:	6838      	ldr	r0, [r7, #0]
 80126d2:	f7ff fd95 	bl	8012200 <_ZNK10TestResult19getFilteredOutCountEv>
 80126d6:	4603      	mov	r3, r0
 80126d8:	4619      	mov	r1, r3
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	47a0      	blx	r4
    print(" filtered out, ");
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	332c      	adds	r3, #44	; 0x2c
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	4928      	ldr	r1, [pc, #160]	; (8012788 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	3334      	adds	r3, #52	; 0x34
 80126f2:	681c      	ldr	r4, [r3, #0]
 80126f4:	6838      	ldr	r0, [r7, #0]
 80126f6:	f001 ff05 	bl	8014504 <_ZNK10TestResult21getTotalExecutionTimeEv>
 80126fa:	4603      	mov	r3, r0
 80126fc:	4619      	mov	r1, r3
 80126fe:	6878      	ldr	r0, [r7, #4]
 8012700:	47a0      	blx	r4
    print(" ms)");
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	332c      	adds	r3, #44	; 0x2c
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	4920      	ldr	r1, [pc, #128]	; (801278c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	4798      	blx	r3
    if (color_) {
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	7a5b      	ldrb	r3, [r3, #9]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d006      	beq.n	8012726 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	332c      	adds	r3, #44	; 0x2c
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	491b      	ldr	r1, [pc, #108]	; (8012790 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 8012722:	6878      	ldr	r0, [r7, #4]
 8012724:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 8012726:	7bfb      	ldrb	r3, [r7, #15]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d009      	beq.n	8012740 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d106      	bne.n	8012740 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	332c      	adds	r3, #44	; 0x2c
 8012738:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 801273a:	4916      	ldr	r1, [pc, #88]	; (8012794 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	4798      	blx	r3
    }
    print("\n\n");
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	332c      	adds	r3, #44	; 0x2c
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	4913      	ldr	r1, [pc, #76]	; (8012798 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	4798      	blx	r3

    dotCount_ = 0;
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	2200      	movs	r2, #0
 8012752:	605a      	str	r2, [r3, #4]
}
 8012754:	bf00      	nop
 8012756:	3714      	adds	r7, #20
 8012758:	46bd      	mov	sp, r7
 801275a:	bd90      	pop	{r4, r7, pc}
 801275c:	08026f7c 	.word	0x08026f7c
 8012760:	08026f80 	.word	0x08026f80
 8012764:	08026f88 	.word	0x08026f88
 8012768:	08026f94 	.word	0x08026f94
 801276c:	08026fa0 	.word	0x08026fa0
 8012770:	08026fb0 	.word	0x08026fb0
 8012774:	08026fb8 	.word	0x08026fb8
 8012778:	08026fc0 	.word	0x08026fc0
 801277c:	08026fcc 	.word	0x08026fcc
 8012780:	08026fd4 	.word	0x08026fd4
 8012784:	08026fe0 	.word	0x08026fe0
 8012788:	08026fec 	.word	0x08026fec
 801278c:	08026ffc 	.word	0x08026ffc
 8012790:	08027004 	.word	0x08027004
 8012794:	08027008 	.word	0x08027008
 8012798:	080270ac 	.word	0x080270ac

0801279c <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b084      	sub	sp, #16
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	60f8      	str	r0, [r7, #12]
 80127a4:	60b9      	str	r1, [r7, #8]
 80127a6:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2b01      	cmp	r3, #1
 80127ac:	d922      	bls.n	80127f4 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	332c      	adds	r3, #44	; 0x2c
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	4911      	ldr	r1, [pc, #68]	; (80127fc <_ZN10TestOutput12printTestRunEjj+0x60>)
 80127b8:	68f8      	ldr	r0, [r7, #12]
 80127ba:	4798      	blx	r3
        print(number);
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	3334      	adds	r3, #52	; 0x34
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	68b9      	ldr	r1, [r7, #8]
 80127c6:	68f8      	ldr	r0, [r7, #12]
 80127c8:	4798      	blx	r3
        print(" of ");
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	332c      	adds	r3, #44	; 0x2c
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	490b      	ldr	r1, [pc, #44]	; (8012800 <_ZN10TestOutput12printTestRunEjj+0x64>)
 80127d4:	68f8      	ldr	r0, [r7, #12]
 80127d6:	4798      	blx	r3
        print(total);
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	3334      	adds	r3, #52	; 0x34
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	6879      	ldr	r1, [r7, #4]
 80127e2:	68f8      	ldr	r0, [r7, #12]
 80127e4:	4798      	blx	r3
        print("\n");
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	332c      	adds	r3, #44	; 0x2c
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	4905      	ldr	r1, [pc, #20]	; (8012804 <_ZN10TestOutput12printTestRunEjj+0x68>)
 80127f0:	68f8      	ldr	r0, [r7, #12]
 80127f2:	4798      	blx	r3
    }
}
 80127f4:	bf00      	nop
 80127f6:	3710      	adds	r7, #16
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}
 80127fc:	080270b0 	.word	0x080270b0
 8012800:	080270bc 	.word	0x080270bc
 8012804:	08026f7c 	.word	0x08026f7c

08012808 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b084      	sub	sp, #16
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
 8012810:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 8012812:	6838      	ldr	r0, [r7, #0]
 8012814:	f7fd ffa1 	bl	801075a <_ZNK11TestFailure17isOutsideTestFileEv>
 8012818:	4603      	mov	r3, r0
 801281a:	2b00      	cmp	r3, #0
 801281c:	d105      	bne.n	801282a <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 801281e:	6838      	ldr	r0, [r7, #0]
 8012820:	f7fd ffad 	bl	801077e <_ZNK11TestFailure18isInHelperFunctionEv>
 8012824:	4603      	mov	r3, r0
 8012826:	2b00      	cmp	r3, #0
 8012828:	d001      	beq.n	801282e <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 801282a:	2301      	movs	r3, #1
 801282c:	e000      	b.n	8012830 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 801282e:	2300      	movs	r3, #0
 8012830:	2b00      	cmp	r3, #0
 8012832:	d004      	beq.n	801283e <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 8012834:	6839      	ldr	r1, [r7, #0]
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f000 f81d 	bl	8012876 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 801283c:	e003      	b.n	8012846 <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 801283e:	6839      	ldr	r1, [r7, #0]
 8012840:	6878      	ldr	r0, [r7, #4]
 8012842:	f000 f86b 	bl	801291c <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	3318      	adds	r3, #24
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	f107 0208 	add.w	r2, r7, #8
 8012852:	6839      	ldr	r1, [r7, #0]
 8012854:	4610      	mov	r0, r2
 8012856:	4798      	blx	r3
 8012858:	f107 0308 	add.w	r3, r7, #8
 801285c:	4619      	mov	r1, r3
 801285e:	6878      	ldr	r0, [r7, #4]
 8012860:	f000 f8b2 	bl	80129c8 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 8012864:	f107 0308 	add.w	r3, r7, #8
 8012868:	4618      	mov	r0, r3
 801286a:	f7fc fb74 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 801286e:	bf00      	nop
 8012870:	3710      	adds	r7, #16
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}

08012876 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 8012876:	b580      	push	{r7, lr}
 8012878:	b088      	sub	sp, #32
 801287a:	af00      	add	r7, sp, #0
 801287c:	6078      	str	r0, [r7, #4]
 801287e:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 8012880:	683b      	ldr	r3, [r7, #0]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	331c      	adds	r3, #28
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	f107 0208 	add.w	r2, r7, #8
 801288c:	6839      	ldr	r1, [r7, #0]
 801288e:	4610      	mov	r0, r2
 8012890:	4798      	blx	r3
 8012892:	683b      	ldr	r3, [r7, #0]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	3320      	adds	r3, #32
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	6838      	ldr	r0, [r7, #0]
 801289c:	4798      	blx	r3
 801289e:	4602      	mov	r2, r0
 80128a0:	f107 0308 	add.w	r3, r7, #8
 80128a4:	4619      	mov	r1, r3
 80128a6:	6878      	ldr	r0, [r7, #4]
 80128a8:	f000 f8be 	bl	8012a28 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 80128ac:	f107 0308 	add.w	r3, r7, #8
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7fc fb50 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	330c      	adds	r3, #12
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	f107 0210 	add.w	r2, r7, #16
 80128c2:	6839      	ldr	r1, [r7, #0]
 80128c4:	4610      	mov	r0, r2
 80128c6:	4798      	blx	r3
 80128c8:	f107 0310 	add.w	r3, r7, #16
 80128cc:	4619      	mov	r1, r3
 80128ce:	6878      	ldr	r0, [r7, #4]
 80128d0:	f000 f85c 	bl	801298c <_ZN10TestOutput18printFailureInTestE12SimpleString>
 80128d4:	f107 0310 	add.w	r3, r7, #16
 80128d8:	4618      	mov	r0, r3
 80128da:	f7fc fb3c 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	3308      	adds	r3, #8
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	f107 0218 	add.w	r2, r7, #24
 80128ea:	6839      	ldr	r1, [r7, #0]
 80128ec:	4610      	mov	r0, r2
 80128ee:	4798      	blx	r3
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	3314      	adds	r3, #20
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	6838      	ldr	r0, [r7, #0]
 80128fa:	4798      	blx	r3
 80128fc:	4602      	mov	r2, r0
 80128fe:	f107 0318 	add.w	r3, r7, #24
 8012902:	4619      	mov	r1, r3
 8012904:	6878      	ldr	r0, [r7, #4]
 8012906:	f000 f88f 	bl	8012a28 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 801290a:	f107 0318 	add.w	r3, r7, #24
 801290e:	4618      	mov	r0, r3
 8012910:	f7fc fb21 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8012914:	bf00      	nop
 8012916:	3720      	adds	r7, #32
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}

0801291c <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b086      	sub	sp, #24
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	3308      	adds	r3, #8
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	f107 0208 	add.w	r2, r7, #8
 8012932:	6839      	ldr	r1, [r7, #0]
 8012934:	4610      	mov	r0, r2
 8012936:	4798      	blx	r3
 8012938:	683b      	ldr	r3, [r7, #0]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	3314      	adds	r3, #20
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	6838      	ldr	r0, [r7, #0]
 8012942:	4798      	blx	r3
 8012944:	4602      	mov	r2, r0
 8012946:	f107 0308 	add.w	r3, r7, #8
 801294a:	4619      	mov	r1, r3
 801294c:	6878      	ldr	r0, [r7, #4]
 801294e:	f000 f86b 	bl	8012a28 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8012952:	f107 0308 	add.w	r3, r7, #8
 8012956:	4618      	mov	r0, r3
 8012958:	f7fc fafd 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 801295c:	683b      	ldr	r3, [r7, #0]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	330c      	adds	r3, #12
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	f107 0210 	add.w	r2, r7, #16
 8012968:	6839      	ldr	r1, [r7, #0]
 801296a:	4610      	mov	r0, r2
 801296c:	4798      	blx	r3
 801296e:	f107 0310 	add.w	r3, r7, #16
 8012972:	4619      	mov	r1, r3
 8012974:	6878      	ldr	r0, [r7, #4]
 8012976:	f000 f809 	bl	801298c <_ZN10TestOutput18printFailureInTestE12SimpleString>
 801297a:	f107 0310 	add.w	r3, r7, #16
 801297e:	4618      	mov	r0, r3
 8012980:	f7fc fae9 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8012984:	bf00      	nop
 8012986:	3718      	adds	r7, #24
 8012988:	46bd      	mov	sp, r7
 801298a:	bd80      	pop	{r7, pc}

0801298c <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 801298c:	b590      	push	{r4, r7, lr}
 801298e:	b083      	sub	sp, #12
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
 8012994:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	332c      	adds	r3, #44	; 0x2c
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	4909      	ldr	r1, [pc, #36]	; (80129c4 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 80129a0:	6878      	ldr	r0, [r7, #4]
 80129a2:	4798      	blx	r3
    print(testName.asCharString());
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	332c      	adds	r3, #44	; 0x2c
 80129aa:	681c      	ldr	r4, [r3, #0]
 80129ac:	6838      	ldr	r0, [r7, #0]
 80129ae:	f7fc faa5 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 80129b2:	4603      	mov	r3, r0
 80129b4:	4619      	mov	r1, r3
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	47a0      	blx	r4
}
 80129ba:	bf00      	nop
 80129bc:	370c      	adds	r7, #12
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd90      	pop	{r4, r7, pc}
 80129c2:	bf00      	nop
 80129c4:	080270c4 	.word	0x080270c4

080129c8 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 80129c8:	b590      	push	{r4, r7, lr}
 80129ca:	b083      	sub	sp, #12
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
 80129d0:	6039      	str	r1, [r7, #0]
    print("\n");
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	332c      	adds	r3, #44	; 0x2c
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	4910      	ldr	r1, [pc, #64]	; (8012a1c <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 80129dc:	6878      	ldr	r0, [r7, #4]
 80129de:	4798      	blx	r3
    print("\t");
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	332c      	adds	r3, #44	; 0x2c
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	490d      	ldr	r1, [pc, #52]	; (8012a20 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 80129ea:	6878      	ldr	r0, [r7, #4]
 80129ec:	4798      	blx	r3
    print(reason.asCharString());
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	332c      	adds	r3, #44	; 0x2c
 80129f4:	681c      	ldr	r4, [r3, #0]
 80129f6:	6838      	ldr	r0, [r7, #0]
 80129f8:	f7fc fa80 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 80129fc:	4603      	mov	r3, r0
 80129fe:	4619      	mov	r1, r3
 8012a00:	6878      	ldr	r0, [r7, #4]
 8012a02:	47a0      	blx	r4
    print("\n\n");
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	332c      	adds	r3, #44	; 0x2c
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	4905      	ldr	r1, [pc, #20]	; (8012a24 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	4798      	blx	r3
}
 8012a12:	bf00      	nop
 8012a14:	370c      	adds	r7, #12
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd90      	pop	{r4, r7, pc}
 8012a1a:	bf00      	nop
 8012a1c:	08026f7c 	.word	0x08026f7c
 8012a20:	080270d4 	.word	0x080270d4
 8012a24:	080270ac 	.word	0x080270ac

08012a28 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 8012a28:	b590      	push	{r4, r7, lr}
 8012a2a:	b089      	sub	sp, #36	; 0x24
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	60f8      	str	r0, [r7, #12]
 8012a30:	60b9      	str	r1, [r7, #8]
 8012a32:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 8012a34:	f7ff fbf0 	bl	8012218 <_ZN10TestOutput21getWorkingEnvironmentEv>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	bf0c      	ite	eq
 8012a3e:	2301      	moveq	r3, #1
 8012a40:	2300      	movne	r3, #0
 8012a42:	b2db      	uxtb	r3, r3
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d015      	beq.n	8012a74 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	3354      	adds	r3, #84	; 0x54
 8012a4e:	681c      	ldr	r4, [r3, #0]
 8012a50:	f107 0310 	add.w	r3, r7, #16
 8012a54:	68b9      	ldr	r1, [r7, #8]
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7fb ff19 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
 8012a5c:	f107 0310 	add.w	r3, r7, #16
 8012a60:	687a      	ldr	r2, [r7, #4]
 8012a62:	4619      	mov	r1, r3
 8012a64:	68f8      	ldr	r0, [r7, #12]
 8012a66:	47a0      	blx	r4
 8012a68:	f107 0310 	add.w	r3, r7, #16
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f7fc fa72 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 8012a72:	e014      	b.n	8012a9e <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	3350      	adds	r3, #80	; 0x50
 8012a7a:	681c      	ldr	r4, [r3, #0]
 8012a7c:	f107 0318 	add.w	r3, r7, #24
 8012a80:	68b9      	ldr	r1, [r7, #8]
 8012a82:	4618      	mov	r0, r3
 8012a84:	f7fb ff03 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
 8012a88:	f107 0318 	add.w	r3, r7, #24
 8012a8c:	687a      	ldr	r2, [r7, #4]
 8012a8e:	4619      	mov	r1, r3
 8012a90:	68f8      	ldr	r0, [r7, #12]
 8012a92:	47a0      	blx	r4
 8012a94:	f107 0318 	add.w	r3, r7, #24
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f7fc fa5c 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8012a9e:	bf00      	nop
 8012aa0:	3724      	adds	r7, #36	; 0x24
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd90      	pop	{r4, r7, pc}
	...

08012aa8 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 8012aa8:	b590      	push	{r4, r7, lr}
 8012aaa:	b085      	sub	sp, #20
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	60f8      	str	r0, [r7, #12]
 8012ab0:	60b9      	str	r1, [r7, #8]
 8012ab2:	607a      	str	r2, [r7, #4]
    print("\n");
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	332c      	adds	r3, #44	; 0x2c
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	4916      	ldr	r1, [pc, #88]	; (8012b18 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 8012abe:	68f8      	ldr	r0, [r7, #12]
 8012ac0:	4798      	blx	r3
    print(file.asCharString());
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	332c      	adds	r3, #44	; 0x2c
 8012ac8:	681c      	ldr	r4, [r3, #0]
 8012aca:	68b8      	ldr	r0, [r7, #8]
 8012acc:	f7fc fa16 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	4619      	mov	r1, r3
 8012ad4:	68f8      	ldr	r0, [r7, #12]
 8012ad6:	47a0      	blx	r4
    print(":");
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	332c      	adds	r3, #44	; 0x2c
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	490e      	ldr	r1, [pc, #56]	; (8012b1c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 8012ae2:	68f8      	ldr	r0, [r7, #12]
 8012ae4:	4798      	blx	r3
    print(lineNumber);
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	3334      	adds	r3, #52	; 0x34
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	6879      	ldr	r1, [r7, #4]
 8012af0:	68f8      	ldr	r0, [r7, #12]
 8012af2:	4798      	blx	r3
    print(":");
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	332c      	adds	r3, #44	; 0x2c
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	4907      	ldr	r1, [pc, #28]	; (8012b1c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 8012afe:	68f8      	ldr	r0, [r7, #12]
 8012b00:	4798      	blx	r3
    print(" error:");
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	332c      	adds	r3, #44	; 0x2c
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	4905      	ldr	r1, [pc, #20]	; (8012b20 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 8012b0c:	68f8      	ldr	r0, [r7, #12]
 8012b0e:	4798      	blx	r3
}
 8012b10:	bf00      	nop
 8012b12:	3714      	adds	r7, #20
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd90      	pop	{r4, r7, pc}
 8012b18:	08026f7c 	.word	0x08026f7c
 8012b1c:	080270d8 	.word	0x080270d8
 8012b20:	080270dc 	.word	0x080270dc

08012b24 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 8012b24:	b590      	push	{r4, r7, lr}
 8012b26:	b085      	sub	sp, #20
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	60f8      	str	r0, [r7, #12]
 8012b2c:	60b9      	str	r1, [r7, #8]
 8012b2e:	607a      	str	r2, [r7, #4]
    print("\n");
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	332c      	adds	r3, #44	; 0x2c
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	4916      	ldr	r1, [pc, #88]	; (8012b94 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 8012b3a:	68f8      	ldr	r0, [r7, #12]
 8012b3c:	4798      	blx	r3
    print(file.asCharString());
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	332c      	adds	r3, #44	; 0x2c
 8012b44:	681c      	ldr	r4, [r3, #0]
 8012b46:	68b8      	ldr	r0, [r7, #8]
 8012b48:	f7fc f9d8 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	4619      	mov	r1, r3
 8012b50:	68f8      	ldr	r0, [r7, #12]
 8012b52:	47a0      	blx	r4
    print("(");
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	332c      	adds	r3, #44	; 0x2c
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	490e      	ldr	r1, [pc, #56]	; (8012b98 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 8012b5e:	68f8      	ldr	r0, [r7, #12]
 8012b60:	4798      	blx	r3
    print(lineNumber);
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	3334      	adds	r3, #52	; 0x34
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	6879      	ldr	r1, [r7, #4]
 8012b6c:	68f8      	ldr	r0, [r7, #12]
 8012b6e:	4798      	blx	r3
    print("):");
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	332c      	adds	r3, #44	; 0x2c
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	4908      	ldr	r1, [pc, #32]	; (8012b9c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 8012b7a:	68f8      	ldr	r0, [r7, #12]
 8012b7c:	4798      	blx	r3
    print(" error:");
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	332c      	adds	r3, #44	; 0x2c
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	4906      	ldr	r1, [pc, #24]	; (8012ba0 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 8012b88:	68f8      	ldr	r0, [r7, #12]
 8012b8a:	4798      	blx	r3
}
 8012b8c:	bf00      	nop
 8012b8e:	3714      	adds	r7, #20
 8012b90:	46bd      	mov	sp, r7
 8012b92:	bd90      	pop	{r4, r7, pc}
 8012b94:	08026f7c 	.word	0x08026f7c
 8012b98:	080270e4 	.word	0x080270e4
 8012b9c:	080270e8 	.word	0x080270e8
 8012ba0:	080270dc 	.word	0x080270dc

08012ba4 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b082      	sub	sp, #8
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
 8012bac:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	7a1b      	ldrb	r3, [r3, #8]
 8012bb2:	2b02      	cmp	r3, #2
 8012bb4:	d106      	bne.n	8012bc4 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	3328      	adds	r3, #40	; 0x28
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	6839      	ldr	r1, [r7, #0]
 8012bc0:	6878      	ldr	r0, [r7, #4]
 8012bc2:	4798      	blx	r3
}
 8012bc4:	bf00      	nop
 8012bc6:	3708      	adds	r7, #8
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	bd80      	pop	{r7, pc}

08012bcc <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b082      	sub	sp, #8
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
 8012bd4:	6039      	str	r1, [r7, #0]
    while (*s) {
 8012bd6:	683b      	ldr	r3, [r7, #0]
 8012bd8:	781b      	ldrb	r3, [r3, #0]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d009      	beq.n	8012bf2 <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 8012bde:	4b0a      	ldr	r3, [pc, #40]	; (8012c08 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	683a      	ldr	r2, [r7, #0]
 8012be4:	7812      	ldrb	r2, [r2, #0]
 8012be6:	4610      	mov	r0, r2
 8012be8:	4798      	blx	r3
        s++;
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	3301      	adds	r3, #1
 8012bee:	603b      	str	r3, [r7, #0]
    while (*s) {
 8012bf0:	e7f1      	b.n	8012bd6 <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	334c      	adds	r3, #76	; 0x4c
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	6878      	ldr	r0, [r7, #4]
 8012bfc:	4798      	blx	r3
}
 8012bfe:	bf00      	nop
 8012c00:	3708      	adds	r7, #8
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}
 8012c06:	bf00      	nop
 8012c08:	200000c0 	.word	0x200000c0

08012c0c <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b082      	sub	sp, #8
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 8012c14:	4b03      	ldr	r3, [pc, #12]	; (8012c24 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	4798      	blx	r3
}
 8012c1a:	bf00      	nop
 8012c1c:	3708      	adds	r7, #8
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}
 8012c22:	bf00      	nop
 8012c24:	200000c4 	.word	0x200000c4

08012c28 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b082      	sub	sp, #8
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	4618      	mov	r0, r3
 8012c34:	f7ff fb00 	bl	8012238 <_ZN10TestOutputC1Ev>
 8012c38:	4a06      	ldr	r2, [pc, #24]	; (8012c54 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	601a      	str	r2, [r3, #0]
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	2200      	movs	r2, #0
 8012c42:	611a      	str	r2, [r3, #16]
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2200      	movs	r2, #0
 8012c48:	615a      	str	r2, [r3, #20]
{
}
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	3708      	adds	r7, #8
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd80      	pop	{r7, pc}
 8012c54:	0802ac18 	.word	0x0802ac18

08012c58 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b082      	sub	sp, #8
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
 8012c60:	4a0e      	ldr	r2, [pc, #56]	; (8012c9c <_ZN19CompositeTestOutputD1Ev+0x44>)
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	691b      	ldr	r3, [r3, #16]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d004      	beq.n	8012c78 <_ZN19CompositeTestOutputD1Ev+0x20>
 8012c6e:	681a      	ldr	r2, [r3, #0]
 8012c70:	3204      	adds	r2, #4
 8012c72:	6812      	ldr	r2, [r2, #0]
 8012c74:	4618      	mov	r0, r3
 8012c76:	4790      	blx	r2
  delete outputTwo_;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	695b      	ldr	r3, [r3, #20]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d004      	beq.n	8012c8a <_ZN19CompositeTestOutputD1Ev+0x32>
 8012c80:	681a      	ldr	r2, [r3, #0]
 8012c82:	3204      	adds	r2, #4
 8012c84:	6812      	ldr	r2, [r2, #0]
 8012c86:	4618      	mov	r0, r3
 8012c88:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f7ff faf1 	bl	8012274 <_ZN10TestOutputD1Ev>
}
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	4618      	mov	r0, r3
 8012c96:	3708      	adds	r7, #8
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	bd80      	pop	{r7, pc}
 8012c9c:	0802ac18 	.word	0x0802ac18

08012ca0 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b082      	sub	sp, #8
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
}
 8012ca8:	6878      	ldr	r0, [r7, #4]
 8012caa:	f7ff ffd5 	bl	8012c58 <_ZN19CompositeTestOutputD1Ev>
 8012cae:	2118      	movs	r1, #24
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f7f9 f9e9 	bl	800c088 <_ZdlPvj>
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	4618      	mov	r0, r3
 8012cba:	3708      	adds	r7, #8
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	bd80      	pop	{r7, pc}

08012cc0 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b082      	sub	sp, #8
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
 8012cc8:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	691b      	ldr	r3, [r3, #16]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d004      	beq.n	8012cdc <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 8012cd2:	681a      	ldr	r2, [r3, #0]
 8012cd4:	3204      	adds	r2, #4
 8012cd6:	6812      	ldr	r2, [r2, #0]
 8012cd8:	4618      	mov	r0, r3
 8012cda:	4790      	blx	r2
  outputOne_ = output;
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	683a      	ldr	r2, [r7, #0]
 8012ce0:	611a      	str	r2, [r3, #16]
}
 8012ce2:	bf00      	nop
 8012ce4:	3708      	adds	r7, #8
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	bd80      	pop	{r7, pc}

08012cea <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 8012cea:	b580      	push	{r7, lr}
 8012cec:	b082      	sub	sp, #8
 8012cee:	af00      	add	r7, sp, #0
 8012cf0:	6078      	str	r0, [r7, #4]
 8012cf2:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	695b      	ldr	r3, [r3, #20]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d004      	beq.n	8012d06 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 8012cfc:	681a      	ldr	r2, [r3, #0]
 8012cfe:	3204      	adds	r2, #4
 8012d00:	6812      	ldr	r2, [r2, #0]
 8012d02:	4618      	mov	r0, r3
 8012d04:	4790      	blx	r2
  outputTwo_ = output;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	683a      	ldr	r2, [r7, #0]
 8012d0a:	615a      	str	r2, [r3, #20]
}
 8012d0c:	bf00      	nop
 8012d0e:	3708      	adds	r7, #8
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bd80      	pop	{r7, pc}

08012d14 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b082      	sub	sp, #8
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	691b      	ldr	r3, [r3, #16]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d008      	beq.n	8012d36 <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	691a      	ldr	r2, [r3, #16]
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	691b      	ldr	r3, [r3, #16]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	3308      	adds	r3, #8
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	4610      	mov	r0, r2
 8012d34:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	695b      	ldr	r3, [r3, #20]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d008      	beq.n	8012d50 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	695a      	ldr	r2, [r3, #20]
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	695b      	ldr	r3, [r3, #20]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	3308      	adds	r3, #8
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	4610      	mov	r0, r2
 8012d4e:	4798      	blx	r3
}
 8012d50:	bf00      	nop
 8012d52:	3708      	adds	r7, #8
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}

08012d58 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b082      	sub	sp, #8
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
 8012d60:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	691b      	ldr	r3, [r3, #16]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d009      	beq.n	8012d7e <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	691a      	ldr	r2, [r3, #16]
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	691b      	ldr	r3, [r3, #16]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	330c      	adds	r3, #12
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	6839      	ldr	r1, [r7, #0]
 8012d7a:	4610      	mov	r0, r2
 8012d7c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	695b      	ldr	r3, [r3, #20]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d009      	beq.n	8012d9a <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	695a      	ldr	r2, [r3, #20]
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	695b      	ldr	r3, [r3, #20]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	330c      	adds	r3, #12
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	6839      	ldr	r1, [r7, #0]
 8012d96:	4610      	mov	r0, r2
 8012d98:	4798      	blx	r3
}
 8012d9a:	bf00      	nop
 8012d9c:	3708      	adds	r7, #8
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}

08012da2 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8012da2:	b580      	push	{r7, lr}
 8012da4:	b082      	sub	sp, #8
 8012da6:	af00      	add	r7, sp, #0
 8012da8:	6078      	str	r0, [r7, #4]
 8012daa:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	691b      	ldr	r3, [r3, #16]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d009      	beq.n	8012dc8 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	691a      	ldr	r2, [r3, #16]
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	691b      	ldr	r3, [r3, #16]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	3310      	adds	r3, #16
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	6839      	ldr	r1, [r7, #0]
 8012dc4:	4610      	mov	r0, r2
 8012dc6:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	695b      	ldr	r3, [r3, #20]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d009      	beq.n	8012de4 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	695a      	ldr	r2, [r3, #20]
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	695b      	ldr	r3, [r3, #20]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	3310      	adds	r3, #16
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	6839      	ldr	r1, [r7, #0]
 8012de0:	4610      	mov	r0, r2
 8012de2:	4798      	blx	r3
}
 8012de4:	bf00      	nop
 8012de6:	3708      	adds	r7, #8
 8012de8:	46bd      	mov	sp, r7
 8012dea:	bd80      	pop	{r7, pc}

08012dec <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b082      	sub	sp, #8
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
 8012df4:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	691b      	ldr	r3, [r3, #16]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d009      	beq.n	8012e12 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	691a      	ldr	r2, [r3, #16]
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	691b      	ldr	r3, [r3, #16]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	3314      	adds	r3, #20
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	6839      	ldr	r1, [r7, #0]
 8012e0e:	4610      	mov	r0, r2
 8012e10:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	695b      	ldr	r3, [r3, #20]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d009      	beq.n	8012e2e <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	695a      	ldr	r2, [r3, #20]
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	695b      	ldr	r3, [r3, #20]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	3314      	adds	r3, #20
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	6839      	ldr	r1, [r7, #0]
 8012e2a:	4610      	mov	r0, r2
 8012e2c:	4798      	blx	r3
}
 8012e2e:	bf00      	nop
 8012e30:	3708      	adds	r7, #8
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}

08012e36 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 8012e36:	b580      	push	{r7, lr}
 8012e38:	b082      	sub	sp, #8
 8012e3a:	af00      	add	r7, sp, #0
 8012e3c:	6078      	str	r0, [r7, #4]
 8012e3e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	691b      	ldr	r3, [r3, #16]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d009      	beq.n	8012e5c <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	691a      	ldr	r2, [r3, #16]
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	691b      	ldr	r3, [r3, #16]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	3318      	adds	r3, #24
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	6839      	ldr	r1, [r7, #0]
 8012e58:	4610      	mov	r0, r2
 8012e5a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	695b      	ldr	r3, [r3, #20]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d009      	beq.n	8012e78 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	695a      	ldr	r2, [r3, #20]
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	695b      	ldr	r3, [r3, #20]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	3318      	adds	r3, #24
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	6839      	ldr	r1, [r7, #0]
 8012e74:	4610      	mov	r0, r2
 8012e76:	4798      	blx	r3
}
 8012e78:	bf00      	nop
 8012e7a:	3708      	adds	r7, #8
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	bd80      	pop	{r7, pc}

08012e80 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b082      	sub	sp, #8
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
 8012e88:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	691b      	ldr	r3, [r3, #16]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d009      	beq.n	8012ea6 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	691a      	ldr	r2, [r3, #16]
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	691b      	ldr	r3, [r3, #16]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	331c      	adds	r3, #28
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	6839      	ldr	r1, [r7, #0]
 8012ea2:	4610      	mov	r0, r2
 8012ea4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	695b      	ldr	r3, [r3, #20]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d009      	beq.n	8012ec2 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	695a      	ldr	r2, [r3, #20]
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	695b      	ldr	r3, [r3, #20]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	331c      	adds	r3, #28
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	6839      	ldr	r1, [r7, #0]
 8012ebe:	4610      	mov	r0, r2
 8012ec0:	4798      	blx	r3
}
 8012ec2:	bf00      	nop
 8012ec4:	3708      	adds	r7, #8
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bd80      	pop	{r7, pc}

08012eca <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 8012eca:	b580      	push	{r7, lr}
 8012ecc:	b082      	sub	sp, #8
 8012ece:	af00      	add	r7, sp, #0
 8012ed0:	6078      	str	r0, [r7, #4]
 8012ed2:	460b      	mov	r3, r1
 8012ed4:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	691b      	ldr	r3, [r3, #16]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d009      	beq.n	8012ef2 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	691a      	ldr	r2, [r3, #16]
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	691b      	ldr	r3, [r3, #16]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	3320      	adds	r3, #32
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	78f9      	ldrb	r1, [r7, #3]
 8012eee:	4610      	mov	r0, r2
 8012ef0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	695b      	ldr	r3, [r3, #20]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d009      	beq.n	8012f0e <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	695a      	ldr	r2, [r3, #20]
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	695b      	ldr	r3, [r3, #20]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	3320      	adds	r3, #32
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	78f9      	ldrb	r1, [r7, #3]
 8012f0a:	4610      	mov	r0, r2
 8012f0c:	4798      	blx	r3
}
 8012f0e:	bf00      	nop
 8012f10:	3708      	adds	r7, #8
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd80      	pop	{r7, pc}

08012f16 <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 8012f16:	b580      	push	{r7, lr}
 8012f18:	b082      	sub	sp, #8
 8012f1a:	af00      	add	r7, sp, #0
 8012f1c:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	691b      	ldr	r3, [r3, #16]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d008      	beq.n	8012f38 <_ZN19CompositeTestOutput5colorEv+0x22>
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	691a      	ldr	r2, [r3, #16]
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	691b      	ldr	r3, [r3, #16]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	3324      	adds	r3, #36	; 0x24
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	4610      	mov	r0, r2
 8012f36:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	695b      	ldr	r3, [r3, #20]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d008      	beq.n	8012f52 <_ZN19CompositeTestOutput5colorEv+0x3c>
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	695a      	ldr	r2, [r3, #20]
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	695b      	ldr	r3, [r3, #20]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	3324      	adds	r3, #36	; 0x24
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	4610      	mov	r0, r2
 8012f50:	4798      	blx	r3
}
 8012f52:	bf00      	nop
 8012f54:	3708      	adds	r7, #8
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}

08012f5a <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 8012f5a:	b580      	push	{r7, lr}
 8012f5c:	b082      	sub	sp, #8
 8012f5e:	af00      	add	r7, sp, #0
 8012f60:	6078      	str	r0, [r7, #4]
 8012f62:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	691b      	ldr	r3, [r3, #16]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d009      	beq.n	8012f80 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	691a      	ldr	r2, [r3, #16]
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	691b      	ldr	r3, [r3, #16]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	3328      	adds	r3, #40	; 0x28
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	6839      	ldr	r1, [r7, #0]
 8012f7c:	4610      	mov	r0, r2
 8012f7e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	695b      	ldr	r3, [r3, #20]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d009      	beq.n	8012f9c <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	695a      	ldr	r2, [r3, #20]
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	695b      	ldr	r3, [r3, #20]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	3328      	adds	r3, #40	; 0x28
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	6839      	ldr	r1, [r7, #0]
 8012f98:	4610      	mov	r0, r2
 8012f9a:	4798      	blx	r3
}
 8012f9c:	bf00      	nop
 8012f9e:	3708      	adds	r7, #8
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}

08012fa4 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b082      	sub	sp, #8
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	691b      	ldr	r3, [r3, #16]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d009      	beq.n	8012fca <_ZN19CompositeTestOutput5printEPKc+0x26>
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	691a      	ldr	r2, [r3, #16]
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	691b      	ldr	r3, [r3, #16]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	332c      	adds	r3, #44	; 0x2c
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	6839      	ldr	r1, [r7, #0]
 8012fc6:	4610      	mov	r0, r2
 8012fc8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	695b      	ldr	r3, [r3, #20]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d009      	beq.n	8012fe6 <_ZN19CompositeTestOutput5printEPKc+0x42>
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	695a      	ldr	r2, [r3, #20]
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	695b      	ldr	r3, [r3, #20]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	332c      	adds	r3, #44	; 0x2c
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	6839      	ldr	r1, [r7, #0]
 8012fe2:	4610      	mov	r0, r2
 8012fe4:	4798      	blx	r3
}
 8012fe6:	bf00      	nop
 8012fe8:	3708      	adds	r7, #8
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}

08012fee <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 8012fee:	b580      	push	{r7, lr}
 8012ff0:	b082      	sub	sp, #8
 8012ff2:	af00      	add	r7, sp, #0
 8012ff4:	6078      	str	r0, [r7, #4]
 8012ff6:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	691b      	ldr	r3, [r3, #16]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d009      	beq.n	8013014 <_ZN19CompositeTestOutput5printEl+0x26>
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	691a      	ldr	r2, [r3, #16]
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	691b      	ldr	r3, [r3, #16]
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	3330      	adds	r3, #48	; 0x30
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	6839      	ldr	r1, [r7, #0]
 8013010:	4610      	mov	r0, r2
 8013012:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	695b      	ldr	r3, [r3, #20]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d009      	beq.n	8013030 <_ZN19CompositeTestOutput5printEl+0x42>
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	695a      	ldr	r2, [r3, #20]
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	695b      	ldr	r3, [r3, #20]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	3330      	adds	r3, #48	; 0x30
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	6839      	ldr	r1, [r7, #0]
 801302c:	4610      	mov	r0, r2
 801302e:	4798      	blx	r3
}
 8013030:	bf00      	nop
 8013032:	3708      	adds	r7, #8
 8013034:	46bd      	mov	sp, r7
 8013036:	bd80      	pop	{r7, pc}

08013038 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
 8013040:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	691b      	ldr	r3, [r3, #16]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d009      	beq.n	801305e <_ZN19CompositeTestOutput5printEj+0x26>
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	691a      	ldr	r2, [r3, #16]
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	691b      	ldr	r3, [r3, #16]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	3334      	adds	r3, #52	; 0x34
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	6839      	ldr	r1, [r7, #0]
 801305a:	4610      	mov	r0, r2
 801305c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	695b      	ldr	r3, [r3, #20]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d009      	beq.n	801307a <_ZN19CompositeTestOutput5printEj+0x42>
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	695a      	ldr	r2, [r3, #20]
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	695b      	ldr	r3, [r3, #20]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	3334      	adds	r3, #52	; 0x34
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	6839      	ldr	r1, [r7, #0]
 8013076:	4610      	mov	r0, r2
 8013078:	4798      	blx	r3
}
 801307a:	bf00      	nop
 801307c:	3708      	adds	r7, #8
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}

08013082 <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 8013082:	b580      	push	{r7, lr}
 8013084:	b084      	sub	sp, #16
 8013086:	af00      	add	r7, sp, #0
 8013088:	60f8      	str	r0, [r7, #12]
 801308a:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	691b      	ldr	r3, [r3, #16]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d00a      	beq.n	80130ac <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	691a      	ldr	r2, [r3, #16]
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	691b      	ldr	r3, [r3, #16]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	3338      	adds	r3, #56	; 0x38
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	ed97 0b00 	vldr	d0, [r7]
 80130a8:	4610      	mov	r0, r2
 80130aa:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	695b      	ldr	r3, [r3, #20]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d00a      	beq.n	80130ca <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	695a      	ldr	r2, [r3, #20]
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	695b      	ldr	r3, [r3, #20]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	3338      	adds	r3, #56	; 0x38
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	ed97 0b00 	vldr	d0, [r7]
 80130c6:	4610      	mov	r0, r2
 80130c8:	4798      	blx	r3
}
 80130ca:	bf00      	nop
 80130cc:	3710      	adds	r7, #16
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}

080130d2 <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 80130d2:	b580      	push	{r7, lr}
 80130d4:	b082      	sub	sp, #8
 80130d6:	af00      	add	r7, sp, #0
 80130d8:	6078      	str	r0, [r7, #4]
 80130da:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	691b      	ldr	r3, [r3, #16]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d009      	beq.n	80130f8 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	691a      	ldr	r2, [r3, #16]
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	691b      	ldr	r3, [r3, #16]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	333c      	adds	r3, #60	; 0x3c
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	6839      	ldr	r1, [r7, #0]
 80130f4:	4610      	mov	r0, r2
 80130f6:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	695b      	ldr	r3, [r3, #20]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d009      	beq.n	8013114 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	695a      	ldr	r2, [r3, #20]
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	695b      	ldr	r3, [r3, #20]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	333c      	adds	r3, #60	; 0x3c
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	6839      	ldr	r1, [r7, #0]
 8013110:	4610      	mov	r0, r2
 8013112:	4798      	blx	r3
}
 8013114:	bf00      	nop
 8013116:	3708      	adds	r7, #8
 8013118:	46bd      	mov	sp, r7
 801311a:	bd80      	pop	{r7, pc}

0801311c <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b082      	sub	sp, #8
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
 8013124:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	691b      	ldr	r3, [r3, #16]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d009      	beq.n	8013142 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	691a      	ldr	r2, [r3, #16]
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	691b      	ldr	r3, [r3, #16]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	3344      	adds	r3, #68	; 0x44
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	6839      	ldr	r1, [r7, #0]
 801313e:	4610      	mov	r0, r2
 8013140:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	695b      	ldr	r3, [r3, #20]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d009      	beq.n	801315e <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	695a      	ldr	r2, [r3, #20]
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	695b      	ldr	r3, [r3, #20]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	3344      	adds	r3, #68	; 0x44
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	6839      	ldr	r1, [r7, #0]
 801315a:	4610      	mov	r0, r2
 801315c:	4798      	blx	r3
}
 801315e:	bf00      	nop
 8013160:	3708      	adds	r7, #8
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}

08013166 <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 8013166:	b580      	push	{r7, lr}
 8013168:	b082      	sub	sp, #8
 801316a:	af00      	add	r7, sp, #0
 801316c:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	691b      	ldr	r3, [r3, #16]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d008      	beq.n	8013188 <_ZN19CompositeTestOutput5flushEv+0x22>
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	691a      	ldr	r2, [r3, #16]
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	691b      	ldr	r3, [r3, #16]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	334c      	adds	r3, #76	; 0x4c
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	4610      	mov	r0, r2
 8013186:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	695b      	ldr	r3, [r3, #20]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d008      	beq.n	80131a2 <_ZN19CompositeTestOutput5flushEv+0x3c>
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	695a      	ldr	r2, [r3, #20]
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	695b      	ldr	r3, [r3, #20]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	334c      	adds	r3, #76	; 0x4c
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	4610      	mov	r0, r2
 80131a0:	4798      	blx	r3
}
 80131a2:	bf00      	nop
 80131a4:	3708      	adds	r7, #8
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bd80      	pop	{r7, pc}

080131aa <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 80131aa:	b480      	push	{r7}
 80131ac:	b085      	sub	sp, #20
 80131ae:	af00      	add	r7, sp, #0
 80131b0:	60f8      	str	r0, [r7, #12]
 80131b2:	60b9      	str	r1, [r7, #8]
 80131b4:	607a      	str	r2, [r7, #4]
    }
 80131b6:	bf00      	nop
 80131b8:	3714      	adds	r7, #20
 80131ba:	46bd      	mov	sp, r7
 80131bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c0:	4770      	bx	lr

080131c2 <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 80131c2:	b480      	push	{r7}
 80131c4:	b085      	sub	sp, #20
 80131c6:	af00      	add	r7, sp, #0
 80131c8:	60f8      	str	r0, [r7, #12]
 80131ca:	60b9      	str	r1, [r7, #8]
 80131cc:	607a      	str	r2, [r7, #4]
    }
 80131ce:	bf00      	nop
 80131d0:	3714      	adds	r7, #20
 80131d2:	46bd      	mov	sp, r7
 80131d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d8:	4770      	bx	lr
	...

080131dc <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 80131dc:	b580      	push	{r7, lr}
 80131de:	b082      	sub	sp, #8
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
 80131e4:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 80131e6:	4a0b      	ldr	r2, [pc, #44]	; (8013214 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	601a      	str	r2, [r3, #0]
 80131ec:	f000 f9ce 	bl	801358c <_ZN14NullTestPlugin8instanceEv>
 80131f0:	4602      	mov	r2, r0
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	605a      	str	r2, [r3, #4]
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	3308      	adds	r3, #8
 80131fa:	6839      	ldr	r1, [r7, #0]
 80131fc:	4618      	mov	r0, r3
 80131fe:	f7fb fb46 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	2201      	movs	r2, #1
 8013206:	741a      	strb	r2, [r3, #16]
{
}
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	4618      	mov	r0, r3
 801320c:	3708      	adds	r7, #8
 801320e:	46bd      	mov	sp, r7
 8013210:	bd80      	pop	{r7, pc}
 8013212:	bf00      	nop
 8013214:	0802add4 	.word	0x0802add4

08013218 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 8013218:	b580      	push	{r7, lr}
 801321a:	b082      	sub	sp, #8
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
 8013220:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 8013222:	4a0a      	ldr	r2, [pc, #40]	; (801324c <_ZN10TestPluginC1EPS_+0x34>)
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	601a      	str	r2, [r3, #0]
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	683a      	ldr	r2, [r7, #0]
 801322c:	605a      	str	r2, [r3, #4]
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	3308      	adds	r3, #8
 8013232:	4907      	ldr	r1, [pc, #28]	; (8013250 <_ZN10TestPluginC1EPS_+0x38>)
 8013234:	4618      	mov	r0, r3
 8013236:	f7fb fad6 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	2201      	movs	r2, #1
 801323e:	741a      	strb	r2, [r3, #16]
{
}
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	4618      	mov	r0, r3
 8013244:	3708      	adds	r7, #8
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}
 801324a:	bf00      	nop
 801324c:	0802add4 	.word	0x0802add4
 8013250:	080270ec 	.word	0x080270ec

08013254 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 8013254:	b580      	push	{r7, lr}
 8013256:	b082      	sub	sp, #8
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
 801325c:	4a06      	ldr	r2, [pc, #24]	; (8013278 <_ZN10TestPluginD1Ev+0x24>)
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	601a      	str	r2, [r3, #0]
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	3308      	adds	r3, #8
 8013266:	4618      	mov	r0, r3
 8013268:	f7fb fe75 	bl	800ef56 <_ZN12SimpleStringD1Ev>
{
}
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	4618      	mov	r0, r3
 8013270:	3708      	adds	r7, #8
 8013272:	46bd      	mov	sp, r7
 8013274:	bd80      	pop	{r7, pc}
 8013276:	bf00      	nop
 8013278:	0802add4 	.word	0x0802add4

0801327c <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 801327c:	b580      	push	{r7, lr}
 801327e:	b082      	sub	sp, #8
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
}
 8013284:	6878      	ldr	r0, [r7, #4]
 8013286:	f7ff ffe5 	bl	8013254 <_ZN10TestPluginD1Ev>
 801328a:	2114      	movs	r1, #20
 801328c:	6878      	ldr	r0, [r7, #4]
 801328e:	f7f8 fefb 	bl	800c088 <_ZdlPvj>
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	4618      	mov	r0, r3
 8013296:	3708      	adds	r7, #8
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}

0801329c <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 801329c:	b480      	push	{r7}
 801329e:	b083      	sub	sp, #12
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
 80132a4:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	683a      	ldr	r2, [r7, #0]
 80132aa:	605a      	str	r2, [r3, #4]
    return this;
 80132ac:	687b      	ldr	r3, [r7, #4]
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	370c      	adds	r7, #12
 80132b2:	46bd      	mov	sp, r7
 80132b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b8:	4770      	bx	lr

080132ba <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 80132ba:	b580      	push	{r7, lr}
 80132bc:	b084      	sub	sp, #16
 80132be:	af00      	add	r7, sp, #0
 80132c0:	60f8      	str	r0, [r7, #12]
 80132c2:	60b9      	str	r1, [r7, #8]
 80132c4:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	7c1b      	ldrb	r3, [r3, #16]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d007      	beq.n	80132de <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	3308      	adds	r3, #8
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	687a      	ldr	r2, [r7, #4]
 80132d8:	68b9      	ldr	r1, [r7, #8]
 80132da:	68f8      	ldr	r0, [r7, #12]
 80132dc:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	6858      	ldr	r0, [r3, #4]
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	685b      	ldr	r3, [r3, #4]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	3314      	adds	r3, #20
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	687a      	ldr	r2, [r7, #4]
 80132ee:	68b9      	ldr	r1, [r7, #8]
 80132f0:	4798      	blx	r3
}
 80132f2:	bf00      	nop
 80132f4:	3710      	adds	r7, #16
 80132f6:	46bd      	mov	sp, r7
 80132f8:	bd80      	pop	{r7, pc}

080132fa <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 80132fa:	b580      	push	{r7, lr}
 80132fc:	b084      	sub	sp, #16
 80132fe:	af00      	add	r7, sp, #0
 8013300:	60f8      	str	r0, [r7, #12]
 8013302:	60b9      	str	r1, [r7, #8]
 8013304:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	6858      	ldr	r0, [r3, #4]
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	685b      	ldr	r3, [r3, #4]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	3318      	adds	r3, #24
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	687a      	ldr	r2, [r7, #4]
 8013316:	68b9      	ldr	r1, [r7, #8]
 8013318:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	7c1b      	ldrb	r3, [r3, #16]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d007      	beq.n	8013332 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	330c      	adds	r3, #12
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	687a      	ldr	r2, [r7, #4]
 801332c:	68b9      	ldr	r1, [r7, #8]
 801332e:	68f8      	ldr	r0, [r7, #12]
 8013330:	4798      	blx	r3
}
 8013332:	bf00      	nop
 8013334:	3710      	adds	r7, #16
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}

0801333a <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 801333a:	b590      	push	{r4, r7, lr}
 801333c:	b085      	sub	sp, #20
 801333e:	af00      	add	r7, sp, #0
 8013340:	60f8      	str	r0, [r7, #12]
 8013342:	60b9      	str	r1, [r7, #8]
 8013344:	607a      	str	r2, [r7, #4]
 8013346:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	331c      	adds	r3, #28
 801334e:	681c      	ldr	r4, [r3, #0]
 8013350:	683b      	ldr	r3, [r7, #0]
 8013352:	687a      	ldr	r2, [r7, #4]
 8013354:	68b9      	ldr	r1, [r7, #8]
 8013356:	68f8      	ldr	r0, [r7, #12]
 8013358:	47a0      	blx	r4
 801335a:	4603      	mov	r3, r0
}
 801335c:	4618      	mov	r0, r3
 801335e:	3714      	adds	r7, #20
 8013360:	46bd      	mov	sp, r7
 8013362:	bd90      	pop	{r4, r7, pc}

08013364 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 8013364:	b590      	push	{r4, r7, lr}
 8013366:	b085      	sub	sp, #20
 8013368:	af00      	add	r7, sp, #0
 801336a:	60f8      	str	r0, [r7, #12]
 801336c:	60b9      	str	r1, [r7, #8]
 801336e:	607a      	str	r2, [r7, #4]
 8013370:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	3310      	adds	r3, #16
 8013378:	681c      	ldr	r4, [r3, #0]
 801337a:	683b      	ldr	r3, [r7, #0]
 801337c:	687a      	ldr	r2, [r7, #4]
 801337e:	68b9      	ldr	r1, [r7, #8]
 8013380:	68f8      	ldr	r0, [r7, #12]
 8013382:	47a0      	blx	r4
 8013384:	4603      	mov	r3, r0
 8013386:	2b00      	cmp	r3, #0
 8013388:	d001      	beq.n	801338e <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 801338a:	2301      	movs	r3, #1
 801338c:	e011      	b.n	80133b2 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	685b      	ldr	r3, [r3, #4]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d00c      	beq.n	80133b0 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	6858      	ldr	r0, [r3, #4]
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	685b      	ldr	r3, [r3, #4]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	331c      	adds	r3, #28
 80133a2:	681c      	ldr	r4, [r3, #0]
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	687a      	ldr	r2, [r7, #4]
 80133a8:	68b9      	ldr	r1, [r7, #8]
 80133aa:	47a0      	blx	r4
 80133ac:	4603      	mov	r3, r0
 80133ae:	e000      	b.n	80133b2 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 80133b0:	2300      	movs	r3, #0
}
 80133b2:	4618      	mov	r0, r3
 80133b4:	3714      	adds	r7, #20
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd90      	pop	{r4, r7, pc}

080133ba <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 80133ba:	b480      	push	{r7}
 80133bc:	b083      	sub	sp, #12
 80133be:	af00      	add	r7, sp, #0
 80133c0:	6078      	str	r0, [r7, #4]
    return name_;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	3308      	adds	r3, #8
}
 80133c6:	4618      	mov	r0, r3
 80133c8:	370c      	adds	r7, #12
 80133ca:	46bd      	mov	sp, r7
 80133cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d0:	4770      	bx	lr

080133d2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 80133d2:	b580      	push	{r7, lr}
 80133d4:	b082      	sub	sp, #8
 80133d6:	af00      	add	r7, sp, #0
 80133d8:	6078      	str	r0, [r7, #4]
 80133da:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	3308      	adds	r3, #8
 80133e0:	4619      	mov	r1, r3
 80133e2:	6838      	ldr	r0, [r7, #0]
 80133e4:	f7fb fdc3 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 80133e8:	4603      	mov	r3, r0
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d001      	beq.n	80133f2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	e00d      	b.n	801340e <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	685b      	ldr	r3, [r3, #4]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d007      	beq.n	801340a <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	685b      	ldr	r3, [r3, #4]
 80133fe:	6839      	ldr	r1, [r7, #0]
 8013400:	4618      	mov	r0, r3
 8013402:	f7ff ffe6 	bl	80133d2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8013406:	4603      	mov	r3, r0
 8013408:	e001      	b.n	801340e <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	685b      	ldr	r3, [r3, #4]
}
 801340e:	4618      	mov	r0, r3
 8013410:	3708      	adds	r7, #8
 8013412:	46bd      	mov	sp, r7
 8013414:	bd80      	pop	{r7, pc}

08013416 <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 8013416:	b480      	push	{r7}
 8013418:	b083      	sub	sp, #12
 801341a:	af00      	add	r7, sp, #0
 801341c:	6078      	str	r0, [r7, #4]
    return next_;
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	685b      	ldr	r3, [r3, #4]
}
 8013422:	4618      	mov	r0, r3
 8013424:	370c      	adds	r7, #12
 8013426:	46bd      	mov	sp, r7
 8013428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801342c:	4770      	bx	lr

0801342e <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 801342e:	b580      	push	{r7, lr}
 8013430:	b084      	sub	sp, #16
 8013432:	af00      	add	r7, sp, #0
 8013434:	6078      	str	r0, [r7, #4]
 8013436:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 8013438:	2300      	movs	r3, #0
 801343a:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	685b      	ldr	r3, [r3, #4]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d00e      	beq.n	8013462 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	685b      	ldr	r3, [r3, #4]
 8013448:	4618      	mov	r0, r3
 801344a:	f7ff ffb6 	bl	80133ba <_ZN10TestPlugin7getNameEv>
 801344e:	4603      	mov	r3, r0
 8013450:	6839      	ldr	r1, [r7, #0]
 8013452:	4618      	mov	r0, r3
 8013454:	f7fb fd8b 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8013458:	4603      	mov	r3, r0
 801345a:	2b00      	cmp	r3, #0
 801345c:	d001      	beq.n	8013462 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 801345e:	2301      	movs	r3, #1
 8013460:	e000      	b.n	8013464 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 8013462:	2300      	movs	r3, #0
 8013464:	2b00      	cmp	r3, #0
 8013466:	d007      	beq.n	8013478 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	685b      	ldr	r3, [r3, #4]
 801346c:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	685b      	ldr	r3, [r3, #4]
 8013472:	685a      	ldr	r2, [r3, #4]
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	605a      	str	r2, [r3, #4]
    }
    return removed;
 8013478:	68fb      	ldr	r3, [r7, #12]
}
 801347a:	4618      	mov	r0, r3
 801347c:	3710      	adds	r7, #16
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}

08013482 <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 8013482:	b480      	push	{r7}
 8013484:	b083      	sub	sp, #12
 8013486:	af00      	add	r7, sp, #0
 8013488:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	2200      	movs	r2, #0
 801348e:	741a      	strb	r2, [r3, #16]
}
 8013490:	bf00      	nop
 8013492:	370c      	adds	r7, #12
 8013494:	46bd      	mov	sp, r7
 8013496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349a:	4770      	bx	lr

0801349c <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 801349c:	b480      	push	{r7}
 801349e:	b083      	sub	sp, #12
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	2201      	movs	r2, #1
 80134a8:	741a      	strb	r2, [r3, #16]
}
 80134aa:	bf00      	nop
 80134ac:	370c      	adds	r7, #12
 80134ae:	46bd      	mov	sp, r7
 80134b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b4:	4770      	bx	lr

080134b6 <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 80134b6:	b480      	push	{r7}
 80134b8:	b083      	sub	sp, #12
 80134ba:	af00      	add	r7, sp, #0
 80134bc:	6078      	str	r0, [r7, #4]
    return enabled_;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	7c1b      	ldrb	r3, [r3, #16]
}
 80134c2:	4618      	mov	r0, r3
 80134c4:	370c      	adds	r7, #12
 80134c6:	46bd      	mov	sp, r7
 80134c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134cc:	4770      	bx	lr
	...

080134d0 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b082      	sub	sp, #8
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
 80134d8:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	6839      	ldr	r1, [r7, #0]
 80134de:	4618      	mov	r0, r3
 80134e0:	f7ff fe7c 	bl	80131dc <_ZN10TestPluginC1ERK12SimpleString>
 80134e4:	4a05      	ldr	r2, [pc, #20]	; (80134fc <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 80134ea:	4b05      	ldr	r3, [pc, #20]	; (8013500 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 80134ec:	2200      	movs	r2, #0
 80134ee:	601a      	str	r2, [r3, #0]
}
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	4618      	mov	r0, r3
 80134f4:	3708      	adds	r7, #8
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bd80      	pop	{r7, pc}
 80134fa:	bf00      	nop
 80134fc:	0802ad90 	.word	0x0802ad90
 8013500:	200009f4 	.word	0x200009f4

08013504 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 8013504:	b480      	push	{r7}
 8013506:	b087      	sub	sp, #28
 8013508:	af00      	add	r7, sp, #0
 801350a:	60f8      	str	r0, [r7, #12]
 801350c:	60b9      	str	r1, [r7, #8]
 801350e:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8013510:	4b0e      	ldr	r3, [pc, #56]	; (801354c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	3b01      	subs	r3, #1
 8013516:	617b      	str	r3, [r7, #20]
 8013518:	697b      	ldr	r3, [r7, #20]
 801351a:	2b00      	cmp	r3, #0
 801351c:	db0d      	blt.n	801353a <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 801351e:	4a0c      	ldr	r2, [pc, #48]	; (8013550 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8013520:	697b      	ldr	r3, [r7, #20]
 8013522:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013526:	490a      	ldr	r1, [pc, #40]	; (8013550 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8013528:	697b      	ldr	r3, [r7, #20]
 801352a:	00db      	lsls	r3, r3, #3
 801352c:	440b      	add	r3, r1
 801352e:	685b      	ldr	r3, [r3, #4]
 8013530:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8013532:	697b      	ldr	r3, [r7, #20]
 8013534:	3b01      	subs	r3, #1
 8013536:	617b      	str	r3, [r7, #20]
 8013538:	e7ee      	b.n	8013518 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 801353a:	4b04      	ldr	r3, [pc, #16]	; (801354c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 801353c:	2200      	movs	r2, #0
 801353e:	601a      	str	r2, [r3, #0]
}
 8013540:	bf00      	nop
 8013542:	371c      	adds	r7, #28
 8013544:	46bd      	mov	sp, r7
 8013546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801354a:	4770      	bx	lr
 801354c:	200009f4 	.word	0x200009f4
 8013550:	200009f8 	.word	0x200009f8

08013554 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 8013554:	b580      	push	{r7, lr}
 8013556:	b082      	sub	sp, #8
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	2100      	movs	r1, #0
 8013560:	4618      	mov	r0, r3
 8013562:	f7ff fe59 	bl	8013218 <_ZN10TestPluginC1EPS_>
 8013566:	4a04      	ldr	r2, [pc, #16]	; (8013578 <_ZN14NullTestPluginC1Ev+0x24>)
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	601a      	str	r2, [r3, #0]
{
}
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	4618      	mov	r0, r3
 8013570:	3708      	adds	r7, #8
 8013572:	46bd      	mov	sp, r7
 8013574:	bd80      	pop	{r7, pc}
 8013576:	bf00      	nop
 8013578:	0802ad4c 	.word	0x0802ad4c

0801357c <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 801357c:	b580      	push	{r7, lr}
 801357e:	af00      	add	r7, sp, #0
 8013580:	4801      	ldr	r0, [pc, #4]	; (8013588 <__tcf_0+0xc>)
 8013582:	f000 f849 	bl	8013618 <_ZN14NullTestPluginD1Ev>
 8013586:	bd80      	pop	{r7, pc}
 8013588:	20000af8 	.word	0x20000af8

0801358c <_ZN14NullTestPlugin8instanceEv>:
{
 801358c:	b580      	push	{r7, lr}
 801358e:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 8013590:	4b12      	ldr	r3, [pc, #72]	; (80135dc <_ZN14NullTestPlugin8instanceEv+0x50>)
 8013592:	781b      	ldrb	r3, [r3, #0]
 8013594:	f3bf 8f5b 	dmb	ish
 8013598:	b2db      	uxtb	r3, r3
 801359a:	f003 0301 	and.w	r3, r3, #1
 801359e:	2b00      	cmp	r3, #0
 80135a0:	bf0c      	ite	eq
 80135a2:	2301      	moveq	r3, #1
 80135a4:	2300      	movne	r3, #0
 80135a6:	b2db      	uxtb	r3, r3
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d013      	beq.n	80135d4 <_ZN14NullTestPlugin8instanceEv+0x48>
 80135ac:	480b      	ldr	r0, [pc, #44]	; (80135dc <_ZN14NullTestPlugin8instanceEv+0x50>)
 80135ae:	f00d ffdb 	bl	8021568 <__cxa_guard_acquire>
 80135b2:	4603      	mov	r3, r0
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	bf14      	ite	ne
 80135b8:	2301      	movne	r3, #1
 80135ba:	2300      	moveq	r3, #0
 80135bc:	b2db      	uxtb	r3, r3
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d008      	beq.n	80135d4 <_ZN14NullTestPlugin8instanceEv+0x48>
 80135c2:	4807      	ldr	r0, [pc, #28]	; (80135e0 <_ZN14NullTestPlugin8instanceEv+0x54>)
 80135c4:	f7ff ffc6 	bl	8013554 <_ZN14NullTestPluginC1Ev>
 80135c8:	4804      	ldr	r0, [pc, #16]	; (80135dc <_ZN14NullTestPlugin8instanceEv+0x50>)
 80135ca:	f00d ffd9 	bl	8021580 <__cxa_guard_release>
 80135ce:	4805      	ldr	r0, [pc, #20]	; (80135e4 <_ZN14NullTestPlugin8instanceEv+0x58>)
 80135d0:	f00d fffd 	bl	80215ce <atexit>
    return &_instance;
 80135d4:	4b02      	ldr	r3, [pc, #8]	; (80135e0 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 80135d6:	4618      	mov	r0, r3
 80135d8:	bd80      	pop	{r7, pc}
 80135da:	bf00      	nop
 80135dc:	20000b0c 	.word	0x20000b0c
 80135e0:	20000af8 	.word	0x20000af8
 80135e4:	0801357d 	.word	0x0801357d

080135e8 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 80135e8:	b480      	push	{r7}
 80135ea:	b085      	sub	sp, #20
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	60f8      	str	r0, [r7, #12]
 80135f0:	60b9      	str	r1, [r7, #8]
 80135f2:	607a      	str	r2, [r7, #4]
}
 80135f4:	bf00      	nop
 80135f6:	3714      	adds	r7, #20
 80135f8:	46bd      	mov	sp, r7
 80135fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fe:	4770      	bx	lr

08013600 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 8013600:	b480      	push	{r7}
 8013602:	b085      	sub	sp, #20
 8013604:	af00      	add	r7, sp, #0
 8013606:	60f8      	str	r0, [r7, #12]
 8013608:	60b9      	str	r1, [r7, #8]
 801360a:	607a      	str	r2, [r7, #4]
}
 801360c:	bf00      	nop
 801360e:	3714      	adds	r7, #20
 8013610:	46bd      	mov	sp, r7
 8013612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013616:	4770      	bx	lr

08013618 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 8013618:	b580      	push	{r7, lr}
 801361a:	b082      	sub	sp, #8
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
 8013620:	4a05      	ldr	r2, [pc, #20]	; (8013638 <_ZN14NullTestPluginD1Ev+0x20>)
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	601a      	str	r2, [r3, #0]
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	4618      	mov	r0, r3
 801362a:	f7ff fe13 	bl	8013254 <_ZN10TestPluginD1Ev>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	4618      	mov	r0, r3
 8013632:	3708      	adds	r7, #8
 8013634:	46bd      	mov	sp, r7
 8013636:	bd80      	pop	{r7, pc}
 8013638:	0802ad4c 	.word	0x0802ad4c

0801363c <_ZN14NullTestPluginD0Ev>:
 801363c:	b580      	push	{r7, lr}
 801363e:	b082      	sub	sp, #8
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
 8013644:	6878      	ldr	r0, [r7, #4]
 8013646:	f7ff ffe7 	bl	8013618 <_ZN14NullTestPluginD1Ev>
 801364a:	2114      	movs	r1, #20
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f7f8 fd1b 	bl	800c088 <_ZdlPvj>
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	4618      	mov	r0, r3
 8013656:	3708      	adds	r7, #8
 8013658:	46bd      	mov	sp, r7
 801365a:	bd80      	pop	{r7, pc}

0801365c <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 801365c:	b580      	push	{r7, lr}
 801365e:	b082      	sub	sp, #8
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 8013664:	4a0f      	ldr	r2, [pc, #60]	; (80136a4 <_ZN12TestRegistryC1Ev+0x48>)
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	601a      	str	r2, [r3, #0]
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	2200      	movs	r2, #0
 801366e:	605a      	str	r2, [r3, #4]
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	2200      	movs	r2, #0
 8013674:	609a      	str	r2, [r3, #8]
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	2200      	movs	r2, #0
 801367a:	60da      	str	r2, [r3, #12]
 801367c:	f7ff ff86 	bl	801358c <_ZN14NullTestPlugin8instanceEv>
 8013680:	4602      	mov	r2, r0
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	611a      	str	r2, [r3, #16]
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	2200      	movs	r2, #0
 801368a:	751a      	strb	r2, [r3, #20]
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2200      	movs	r2, #0
 8013690:	619a      	str	r2, [r3, #24]
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	2200      	movs	r2, #0
 8013696:	771a      	strb	r2, [r3, #28]
{
}
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	4618      	mov	r0, r3
 801369c:	3708      	adds	r7, #8
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}
 80136a2:	bf00      	nop
 80136a4:	0802ae18 	.word	0x0802ae18

080136a8 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 80136a8:	b480      	push	{r7}
 80136aa:	b083      	sub	sp, #12
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
 80136b0:	4a04      	ldr	r2, [pc, #16]	; (80136c4 <_ZN12TestRegistryD1Ev+0x1c>)
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	601a      	str	r2, [r3, #0]
{
}
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	4618      	mov	r0, r3
 80136ba:	370c      	adds	r7, #12
 80136bc:	46bd      	mov	sp, r7
 80136be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c2:	4770      	bx	lr
 80136c4:	0802ae18 	.word	0x0802ae18

080136c8 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b082      	sub	sp, #8
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
}
 80136d0:	6878      	ldr	r0, [r7, #4]
 80136d2:	f7ff ffe9 	bl	80136a8 <_ZN12TestRegistryD1Ev>
 80136d6:	2120      	movs	r1, #32
 80136d8:	6878      	ldr	r0, [r7, #4]
 80136da:	f7f8 fcd5 	bl	800c088 <_ZdlPvj>
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	4618      	mov	r0, r3
 80136e2:	3708      	adds	r7, #8
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bd80      	pop	{r7, pc}

080136e8 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b082      	sub	sp, #8
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
 80136f0:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 80136f2:	683b      	ldr	r3, [r7, #0]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	3308      	adds	r3, #8
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	687a      	ldr	r2, [r7, #4]
 80136fc:	6852      	ldr	r2, [r2, #4]
 80136fe:	4611      	mov	r1, r2
 8013700:	6838      	ldr	r0, [r7, #0]
 8013702:	4798      	blx	r3
 8013704:	4602      	mov	r2, r0
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	605a      	str	r2, [r3, #4]
}
 801370a:	bf00      	nop
 801370c:	3708      	adds	r7, #8
 801370e:	46bd      	mov	sp, r7
 8013710:	bd80      	pop	{r7, pc}

08013712 <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 8013712:	b580      	push	{r7, lr}
 8013714:	b084      	sub	sp, #16
 8013716:	af00      	add	r7, sp, #0
 8013718:	6078      	str	r0, [r7, #4]
 801371a:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 801371c:	2301      	movs	r3, #1
 801371e:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 8013720:	683b      	ldr	r3, [r7, #0]
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	3308      	adds	r3, #8
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	6838      	ldr	r0, [r7, #0]
 801372a:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	685b      	ldr	r3, [r3, #4]
 8013730:	60bb      	str	r3, [r7, #8]
 8013732:	68bb      	ldr	r3, [r7, #8]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d05c      	beq.n	80137f2 <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	7d1b      	ldrb	r3, [r3, #20]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d005      	beq.n	801374c <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 8013740:	68bb      	ldr	r3, [r7, #8]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	3380      	adds	r3, #128	; 0x80
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	68b8      	ldr	r0, [r7, #8]
 801374a:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	7f1b      	ldrb	r3, [r3, #28]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d005      	beq.n	8013760 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 8013754:	68bb      	ldr	r3, [r7, #8]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	3384      	adds	r3, #132	; 0x84
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	68b8      	ldr	r0, [r7, #8]
 801375e:	4798      	blx	r3

        if (groupStart) {
 8013760:	7bfb      	ldrb	r3, [r7, #15]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d008      	beq.n	8013778 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	3310      	adds	r3, #16
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	68b9      	ldr	r1, [r7, #8]
 8013770:	6838      	ldr	r0, [r7, #0]
 8013772:	4798      	blx	r3
            groupStart = false;
 8013774:	2300      	movs	r3, #0
 8013776:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	3320      	adds	r3, #32
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	6838      	ldr	r0, [r7, #0]
 8013782:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 8013784:	683a      	ldr	r2, [r7, #0]
 8013786:	68b9      	ldr	r1, [r7, #8]
 8013788:	6878      	ldr	r0, [r7, #4]
 801378a:	f000 fb79 	bl	8013e80 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 801378e:	4603      	mov	r3, r0
 8013790:	2b00      	cmp	r3, #0
 8013792:	d016      	beq.n	80137c2 <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	3318      	adds	r3, #24
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	68b9      	ldr	r1, [r7, #8]
 801379e:	6838      	ldr	r0, [r7, #0]
 80137a0:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 80137a2:	68bb      	ldr	r3, [r7, #8]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	3390      	adds	r3, #144	; 0x90
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	687a      	ldr	r2, [r7, #4]
 80137ac:	6911      	ldr	r1, [r2, #16]
 80137ae:	683a      	ldr	r2, [r7, #0]
 80137b0:	68b8      	ldr	r0, [r7, #8]
 80137b2:	4798      	blx	r3
            result.currentTestEnded(test);
 80137b4:	683b      	ldr	r3, [r7, #0]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	331c      	adds	r3, #28
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	68b9      	ldr	r1, [r7, #8]
 80137be:	6838      	ldr	r0, [r7, #0]
 80137c0:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 80137c2:	68b9      	ldr	r1, [r7, #8]
 80137c4:	6878      	ldr	r0, [r7, #4]
 80137c6:	f000 fa5b 	bl	8013c80 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 80137ca:	4603      	mov	r3, r0
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d008      	beq.n	80137e2 <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 80137d0:	2301      	movs	r3, #1
 80137d2:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	3314      	adds	r3, #20
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	68b9      	ldr	r1, [r7, #8]
 80137de:	6838      	ldr	r0, [r7, #0]
 80137e0:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	330c      	adds	r3, #12
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	68b8      	ldr	r0, [r7, #8]
 80137ec:	4798      	blx	r3
 80137ee:	60b8      	str	r0, [r7, #8]
 80137f0:	e79f      	b.n	8013732 <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 80137f2:	683b      	ldr	r3, [r7, #0]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	330c      	adds	r3, #12
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	6838      	ldr	r0, [r7, #0]
 80137fc:	4798      	blx	r3
    currentRepetition_++;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	699b      	ldr	r3, [r3, #24]
 8013802:	1c5a      	adds	r2, r3, #1
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	619a      	str	r2, [r3, #24]
}
 8013808:	bf00      	nop
 801380a:	3710      	adds	r7, #16
 801380c:	46bd      	mov	sp, r7
 801380e:	bd80      	pop	{r7, pc}

08013810 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 8013810:	b590      	push	{r4, r7, lr}
 8013812:	b08f      	sub	sp, #60	; 0x3c
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
 8013818:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 801381a:	f107 0314 	add.w	r3, r7, #20
 801381e:	4953      	ldr	r1, [pc, #332]	; (801396c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8013820:	4618      	mov	r0, r3
 8013822:	f7fa ffe0 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	685b      	ldr	r3, [r3, #4]
 801382a:	637b      	str	r3, [r7, #52]	; 0x34
 801382c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801382e:	2b00      	cmp	r3, #0
 8013830:	d04d      	beq.n	80138ce <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 8013832:	f107 030c 	add.w	r3, r7, #12
 8013836:	494d      	ldr	r1, [pc, #308]	; (801396c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8013838:	4618      	mov	r0, r3
 801383a:	f7fa ffd4 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
        gname += "#";
 801383e:	f107 030c 	add.w	r3, r7, #12
 8013842:	494b      	ldr	r1, [pc, #300]	; (8013970 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8013844:	4618      	mov	r0, r3
 8013846:	f7fb fc15 	bl	800f074 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 801384a:	f107 031c 	add.w	r3, r7, #28
 801384e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013850:	4618      	mov	r0, r3
 8013852:	f001 f9d2 	bl	8014bfa <_ZNK10UtestShell8getGroupEv>
 8013856:	f107 021c 	add.w	r2, r7, #28
 801385a:	f107 030c 	add.w	r3, r7, #12
 801385e:	4611      	mov	r1, r2
 8013860:	4618      	mov	r0, r3
 8013862:	f7fb fbf5 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 8013866:	f107 031c 	add.w	r3, r7, #28
 801386a:	4618      	mov	r0, r3
 801386c:	f7fb fb73 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        gname += "#";
 8013870:	f107 030c 	add.w	r3, r7, #12
 8013874:	493e      	ldr	r1, [pc, #248]	; (8013970 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8013876:	4618      	mov	r0, r3
 8013878:	f7fb fbfc 	bl	800f074 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 801387c:	f107 020c 	add.w	r2, r7, #12
 8013880:	f107 0314 	add.w	r3, r7, #20
 8013884:	4611      	mov	r1, r2
 8013886:	4618      	mov	r0, r3
 8013888:	f7fb f82b 	bl	800e8e2 <_ZNK12SimpleString8containsERKS_>
 801388c:	4603      	mov	r3, r0
 801388e:	f083 0301 	eor.w	r3, r3, #1
 8013892:	b2db      	uxtb	r3, r3
 8013894:	2b00      	cmp	r3, #0
 8013896:	d00d      	beq.n	80138b4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 8013898:	f107 020c 	add.w	r2, r7, #12
 801389c:	f107 0314 	add.w	r3, r7, #20
 80138a0:	4611      	mov	r1, r2
 80138a2:	4618      	mov	r0, r3
 80138a4:	f7fb fbd4 	bl	800f050 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 80138a8:	f107 0314 	add.w	r3, r7, #20
 80138ac:	4931      	ldr	r1, [pc, #196]	; (8013974 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 80138ae:	4618      	mov	r0, r3
 80138b0:	f7fb fbe0 	bl	800f074 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 80138b4:	f107 030c 	add.w	r3, r7, #12
 80138b8:	4618      	mov	r0, r3
 80138ba:	f7fb fb4c 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80138be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	330c      	adds	r3, #12
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80138c8:	4798      	blx	r3
 80138ca:	6378      	str	r0, [r7, #52]	; 0x34
 80138cc:	e7ae      	b.n	801382c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 80138ce:	f107 0314 	add.w	r3, r7, #20
 80138d2:	4a26      	ldr	r2, [pc, #152]	; (801396c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 80138d4:	4926      	ldr	r1, [pc, #152]	; (8013970 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 80138d6:	4618      	mov	r0, r3
 80138d8:	f7fb f99a 	bl	800ec10 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 80138dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80138e0:	4924      	ldr	r1, [pc, #144]	; (8013974 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 80138e2:	4618      	mov	r0, r3
 80138e4:	f7fa ff7f 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80138e8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80138ec:	f107 0314 	add.w	r3, r7, #20
 80138f0:	4611      	mov	r1, r2
 80138f2:	4618      	mov	r0, r3
 80138f4:	f7fb f874 	bl	800e9e0 <_ZNK12SimpleString8endsWithERKS_>
 80138f8:	4603      	mov	r3, r0
 80138fa:	461c      	mov	r4, r3
 80138fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013900:	4618      	mov	r0, r3
 8013902:	f7fb fb28 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8013906:	2c00      	cmp	r4, #0
 8013908:	d01a      	beq.n	8013940 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 801390a:	f107 0314 	add.w	r3, r7, #20
 801390e:	4618      	mov	r0, r3
 8013910:	f7fb fb00 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 8013914:	4603      	mov	r3, r0
 8013916:	3b01      	subs	r3, #1
 8013918:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801391c:	f107 0114 	add.w	r1, r7, #20
 8013920:	2200      	movs	r2, #0
 8013922:	f7fb fc21 	bl	800f168 <_ZNK12SimpleString9subStringEjj>
 8013926:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801392a:	f107 0314 	add.w	r3, r7, #20
 801392e:	4611      	mov	r1, r2
 8013930:	4618      	mov	r0, r3
 8013932:	f7fa ffc4 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 8013936:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801393a:	4618      	mov	r0, r3
 801393c:	f7fb fb0b 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 8013940:	683b      	ldr	r3, [r7, #0]
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	3338      	adds	r3, #56	; 0x38
 8013946:	681c      	ldr	r4, [r3, #0]
 8013948:	f107 0314 	add.w	r3, r7, #20
 801394c:	4618      	mov	r0, r3
 801394e:	f7fb fad5 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8013952:	4603      	mov	r3, r0
 8013954:	4619      	mov	r1, r3
 8013956:	6838      	ldr	r0, [r7, #0]
 8013958:	47a0      	blx	r4
    SimpleString groupList;
 801395a:	f107 0314 	add.w	r3, r7, #20
 801395e:	4618      	mov	r0, r3
 8013960:	f7fb faf9 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8013964:	bf00      	nop
 8013966:	373c      	adds	r7, #60	; 0x3c
 8013968:	46bd      	mov	sp, r7
 801396a:	bd90      	pop	{r4, r7, pc}
 801396c:	0802713c 	.word	0x0802713c
 8013970:	08027140 	.word	0x08027140
 8013974:	08027144 	.word	0x08027144

08013978 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 8013978:	b590      	push	{r4, r7, lr}
 801397a:	b091      	sub	sp, #68	; 0x44
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
 8013980:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 8013982:	f107 0314 	add.w	r3, r7, #20
 8013986:	4964      	ldr	r1, [pc, #400]	; (8013b18 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8013988:	4618      	mov	r0, r3
 801398a:	f7fa ff2c 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	685b      	ldr	r3, [r3, #4]
 8013992:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013996:	2b00      	cmp	r3, #0
 8013998:	d06e      	beq.n	8013a78 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 801399a:	683a      	ldr	r2, [r7, #0]
 801399c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801399e:	6878      	ldr	r0, [r7, #4]
 80139a0:	f000 fa6e 	bl	8013e80 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 80139a4:	4603      	mov	r3, r0
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d05e      	beq.n	8013a68 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 80139aa:	f107 030c 	add.w	r3, r7, #12
 80139ae:	495a      	ldr	r1, [pc, #360]	; (8013b18 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 80139b0:	4618      	mov	r0, r3
 80139b2:	f7fa ff18 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 80139b6:	f107 030c 	add.w	r3, r7, #12
 80139ba:	4958      	ldr	r1, [pc, #352]	; (8013b1c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 80139bc:	4618      	mov	r0, r3
 80139be:	f7fb fb59 	bl	800f074 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 80139c2:	f107 031c 	add.w	r3, r7, #28
 80139c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80139c8:	4618      	mov	r0, r3
 80139ca:	f001 f916 	bl	8014bfa <_ZNK10UtestShell8getGroupEv>
 80139ce:	f107 021c 	add.w	r2, r7, #28
 80139d2:	f107 030c 	add.w	r3, r7, #12
 80139d6:	4611      	mov	r1, r2
 80139d8:	4618      	mov	r0, r3
 80139da:	f7fb fb39 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 80139de:	f107 031c 	add.w	r3, r7, #28
 80139e2:	4618      	mov	r0, r3
 80139e4:	f7fb fab7 	bl	800ef56 <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 80139e8:	f107 030c 	add.w	r3, r7, #12
 80139ec:	494c      	ldr	r1, [pc, #304]	; (8013b20 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 80139ee:	4618      	mov	r0, r3
 80139f0:	f7fb fb40 	bl	800f074 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 80139f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80139f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80139fa:	4618      	mov	r0, r3
 80139fc:	f001 f8ee 	bl	8014bdc <_ZNK10UtestShell7getNameEv>
 8013a00:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013a04:	f107 030c 	add.w	r3, r7, #12
 8013a08:	4611      	mov	r1, r2
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f7fb fb20 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 8013a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013a14:	4618      	mov	r0, r3
 8013a16:	f7fb fa9e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 8013a1a:	f107 030c 	add.w	r3, r7, #12
 8013a1e:	493f      	ldr	r1, [pc, #252]	; (8013b1c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7fb fb27 	bl	800f074 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 8013a26:	f107 020c 	add.w	r2, r7, #12
 8013a2a:	f107 0314 	add.w	r3, r7, #20
 8013a2e:	4611      	mov	r1, r2
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7fa ff56 	bl	800e8e2 <_ZNK12SimpleString8containsERKS_>
 8013a36:	4603      	mov	r3, r0
 8013a38:	f083 0301 	eor.w	r3, r3, #1
 8013a3c:	b2db      	uxtb	r3, r3
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d00d      	beq.n	8013a5e <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 8013a42:	f107 020c 	add.w	r2, r7, #12
 8013a46:	f107 0314 	add.w	r3, r7, #20
 8013a4a:	4611      	mov	r1, r2
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7fb faff 	bl	800f050 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 8013a52:	f107 0314 	add.w	r3, r7, #20
 8013a56:	4933      	ldr	r1, [pc, #204]	; (8013b24 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f7fb fb0b 	bl	800f074 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 8013a5e:	f107 030c 	add.w	r3, r7, #12
 8013a62:	4618      	mov	r0, r3
 8013a64:	f7fb fa77 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8013a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	330c      	adds	r3, #12
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013a72:	4798      	blx	r3
 8013a74:	63f8      	str	r0, [r7, #60]	; 0x3c
 8013a76:	e78d      	b.n	8013994 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 8013a78:	f107 0314 	add.w	r3, r7, #20
 8013a7c:	4a26      	ldr	r2, [pc, #152]	; (8013b18 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8013a7e:	4927      	ldr	r1, [pc, #156]	; (8013b1c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8013a80:	4618      	mov	r0, r3
 8013a82:	f7fb f8c5 	bl	800ec10 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 8013a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013a8a:	4926      	ldr	r1, [pc, #152]	; (8013b24 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	f7fa feaa 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8013a92:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8013a96:	f107 0314 	add.w	r3, r7, #20
 8013a9a:	4611      	mov	r1, r2
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f7fa ff9f 	bl	800e9e0 <_ZNK12SimpleString8endsWithERKS_>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	461c      	mov	r4, r3
 8013aa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f7fb fa53 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8013ab0:	2c00      	cmp	r4, #0
 8013ab2:	d01a      	beq.n	8013aea <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 8013ab4:	f107 0314 	add.w	r3, r7, #20
 8013ab8:	4618      	mov	r0, r3
 8013aba:	f7fb fa2b 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	3b01      	subs	r3, #1
 8013ac2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8013ac6:	f107 0114 	add.w	r1, r7, #20
 8013aca:	2200      	movs	r2, #0
 8013acc:	f7fb fb4c 	bl	800f168 <_ZNK12SimpleString9subStringEjj>
 8013ad0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8013ad4:	f107 0314 	add.w	r3, r7, #20
 8013ad8:	4611      	mov	r1, r2
 8013ada:	4618      	mov	r0, r3
 8013adc:	f7fa feef 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 8013ae0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f7fb fa36 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 8013aea:	683b      	ldr	r3, [r7, #0]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	3338      	adds	r3, #56	; 0x38
 8013af0:	681c      	ldr	r4, [r3, #0]
 8013af2:	f107 0314 	add.w	r3, r7, #20
 8013af6:	4618      	mov	r0, r3
 8013af8:	f7fb fa00 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8013afc:	4603      	mov	r3, r0
 8013afe:	4619      	mov	r1, r3
 8013b00:	6838      	ldr	r0, [r7, #0]
 8013b02:	47a0      	blx	r4
    SimpleString groupAndNameList;
 8013b04:	f107 0314 	add.w	r3, r7, #20
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7fb fa24 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8013b0e:	bf00      	nop
 8013b10:	3744      	adds	r7, #68	; 0x44
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd90      	pop	{r4, r7, pc}
 8013b16:	bf00      	nop
 8013b18:	0802713c 	.word	0x0802713c
 8013b1c:	08027140 	.word	0x08027140
 8013b20:	08027148 	.word	0x08027148
 8013b24:	08027144 	.word	0x08027144

08013b28 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 8013b28:	b590      	push	{r4, r7, lr}
 8013b2a:	b091      	sub	sp, #68	; 0x44
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 8013b32:	f107 0314 	add.w	r3, r7, #20
 8013b36:	494f      	ldr	r1, [pc, #316]	; (8013c74 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f7fa fe54 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	685b      	ldr	r3, [r3, #4]
 8013b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d07d      	beq.n	8013c46 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 8013b4a:	f107 030c 	add.w	r3, r7, #12
 8013b4e:	4949      	ldr	r1, [pc, #292]	; (8013c74 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7fa fe48 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 8013b56:	f107 031c 	add.w	r3, r7, #28
 8013b5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f001 f84c 	bl	8014bfa <_ZNK10UtestShell8getGroupEv>
 8013b62:	f107 021c 	add.w	r2, r7, #28
 8013b66:	f107 030c 	add.w	r3, r7, #12
 8013b6a:	4611      	mov	r1, r2
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f7fb fa6f 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 8013b72:	f107 031c 	add.w	r3, r7, #28
 8013b76:	4618      	mov	r0, r3
 8013b78:	f7fb f9ed 	bl	800ef56 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8013b7c:	f107 030c 	add.w	r3, r7, #12
 8013b80:	493d      	ldr	r1, [pc, #244]	; (8013c78 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8013b82:	4618      	mov	r0, r3
 8013b84:	f7fb fa76 	bl	800f074 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 8013b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013b8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013b8e:	4618      	mov	r0, r3
 8013b90:	f001 f824 	bl	8014bdc <_ZNK10UtestShell7getNameEv>
 8013b94:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013b98:	f107 030c 	add.w	r3, r7, #12
 8013b9c:	4611      	mov	r1, r2
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f7fb fa56 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 8013ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7fb f9d4 	bl	800ef56 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8013bae:	f107 030c 	add.w	r3, r7, #12
 8013bb2:	4931      	ldr	r1, [pc, #196]	; (8013c78 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f7fb fa5d 	bl	800f074 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 8013bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013bbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f001 f8dc 	bl	8014d7e <_ZNK10UtestShell7getFileEv>
 8013bc6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8013bca:	f107 030c 	add.w	r3, r7, #12
 8013bce:	4611      	mov	r1, r2
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f7fb fa3d 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 8013bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f7fb f9bb 	bl	800ef56 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8013be0:	f107 030c 	add.w	r3, r7, #12
 8013be4:	4924      	ldr	r1, [pc, #144]	; (8013c78 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7fb fa44 	bl	800f074 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 8013bec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013bee:	f001 f8d5 	bl	8014d9c <_ZNK10UtestShell13getLineNumberEv>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	461a      	mov	r2, r3
 8013bf6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013bfa:	4920      	ldr	r1, [pc, #128]	; (8013c7c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7fb feb1 	bl	800f964 <_Z16StringFromFormatPKcz>
 8013c02:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8013c06:	f107 030c 	add.w	r3, r7, #12
 8013c0a:	4611      	mov	r1, r2
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f7fb fa1f 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 8013c12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7fb f99d 	bl	800ef56 <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 8013c1c:	f107 020c 	add.w	r2, r7, #12
 8013c20:	f107 0314 	add.w	r3, r7, #20
 8013c24:	4611      	mov	r1, r2
 8013c26:	4618      	mov	r0, r3
 8013c28:	f7fb fa12 	bl	800f050 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 8013c2c:	f107 030c 	add.w	r3, r7, #12
 8013c30:	4618      	mov	r0, r3
 8013c32:	f7fb f990 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8013c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	330c      	adds	r3, #12
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013c40:	4798      	blx	r3
 8013c42:	63f8      	str	r0, [r7, #60]	; 0x3c
 8013c44:	e77e      	b.n	8013b44 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	3338      	adds	r3, #56	; 0x38
 8013c4c:	681c      	ldr	r4, [r3, #0]
 8013c4e:	f107 0314 	add.w	r3, r7, #20
 8013c52:	4618      	mov	r0, r3
 8013c54:	f7fb f952 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	4619      	mov	r1, r3
 8013c5c:	6838      	ldr	r0, [r7, #0]
 8013c5e:	47a0      	blx	r4
    SimpleString testLocations;
 8013c60:	f107 0314 	add.w	r3, r7, #20
 8013c64:	4618      	mov	r0, r3
 8013c66:	f7fb f976 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8013c6a:	bf00      	nop
 8013c6c:	3744      	adds	r7, #68	; 0x44
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd90      	pop	{r4, r7, pc}
 8013c72:	bf00      	nop
 8013c74:	0802713c 	.word	0x0802713c
 8013c78:	08027148 	.word	0x08027148
 8013c7c:	0802714c 	.word	0x0802714c

08013c80 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 8013c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c82:	b087      	sub	sp, #28
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
 8013c88:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 8013c8a:	2400      	movs	r4, #0
 8013c8c:	2500      	movs	r5, #0
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d028      	beq.n	8013ce6 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	330c      	adds	r3, #12
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	6838      	ldr	r0, [r7, #0]
 8013c9e:	4798      	blx	r3
 8013ca0:	4603      	mov	r3, r0
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d01f      	beq.n	8013ce6 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 8013ca6:	f107 0308 	add.w	r3, r7, #8
 8013caa:	6839      	ldr	r1, [r7, #0]
 8013cac:	4618      	mov	r0, r3
 8013cae:	f000 ffa4 	bl	8014bfa <_ZNK10UtestShell8getGroupEv>
 8013cb2:	2401      	movs	r4, #1
 8013cb4:	683b      	ldr	r3, [r7, #0]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	330c      	adds	r3, #12
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	6838      	ldr	r0, [r7, #0]
 8013cbe:	4798      	blx	r3
 8013cc0:	4602      	mov	r2, r0
 8013cc2:	f107 0310 	add.w	r3, r7, #16
 8013cc6:	4611      	mov	r1, r2
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f000 ff96 	bl	8014bfa <_ZNK10UtestShell8getGroupEv>
 8013cce:	2501      	movs	r5, #1
 8013cd0:	f107 0210 	add.w	r2, r7, #16
 8013cd4:	f107 0308 	add.w	r3, r7, #8
 8013cd8:	4611      	mov	r1, r2
 8013cda:	4618      	mov	r0, r3
 8013cdc:	f7fb f98c 	bl	800eff8 <_ZneRK12SimpleStringS1_>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d001      	beq.n	8013cea <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 8013ce6:	2601      	movs	r6, #1
 8013ce8:	e000      	b.n	8013cec <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 8013cea:	2600      	movs	r6, #0
 8013cec:	2d00      	cmp	r5, #0
 8013cee:	d004      	beq.n	8013cfa <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 8013cf0:	f107 0310 	add.w	r3, r7, #16
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	f7fb f92e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8013cfa:	2c00      	cmp	r4, #0
 8013cfc:	d004      	beq.n	8013d08 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 8013cfe:	f107 0308 	add.w	r3, r7, #8
 8013d02:	4618      	mov	r0, r3
 8013d04:	f7fb f927 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8013d08:	4633      	mov	r3, r6
}
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	371c      	adds	r7, #28
 8013d0e:	46bd      	mov	sp, r7
 8013d10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013d12 <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 8013d12:	b580      	push	{r7, lr}
 8013d14:	b082      	sub	sp, #8
 8013d16:	af00      	add	r7, sp, #0
 8013d18:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	685b      	ldr	r3, [r3, #4]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d00a      	beq.n	8013d38 <_ZN12TestRegistry10countTestsEv+0x26>
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	685a      	ldr	r2, [r3, #4]
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	685b      	ldr	r3, [r3, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	3310      	adds	r3, #16
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	4610      	mov	r0, r2
 8013d32:	4798      	blx	r3
 8013d34:	4603      	mov	r3, r0
 8013d36:	e000      	b.n	8013d3a <_ZN12TestRegistry10countTestsEv+0x28>
 8013d38:	2300      	movs	r3, #0
}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	3708      	adds	r7, #8
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}
	...

08013d44 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 8013d44:	b580      	push	{r7, lr}
 8013d46:	af00      	add	r7, sp, #0
 8013d48:	4801      	ldr	r0, [pc, #4]	; (8013d50 <__tcf_0+0xc>)
 8013d4a:	f7ff fcad 	bl	80136a8 <_ZN12TestRegistryD1Ev>
 8013d4e:	bd80      	pop	{r7, pc}
 8013d50:	20000b14 	.word	0x20000b14

08013d54 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 8013d58:	4b15      	ldr	r3, [pc, #84]	; (8013db0 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8013d5a:	781b      	ldrb	r3, [r3, #0]
 8013d5c:	f3bf 8f5b 	dmb	ish
 8013d60:	b2db      	uxtb	r3, r3
 8013d62:	f003 0301 	and.w	r3, r3, #1
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	bf0c      	ite	eq
 8013d6a:	2301      	moveq	r3, #1
 8013d6c:	2300      	movne	r3, #0
 8013d6e:	b2db      	uxtb	r3, r3
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d013      	beq.n	8013d9c <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8013d74:	480e      	ldr	r0, [pc, #56]	; (8013db0 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8013d76:	f00d fbf7 	bl	8021568 <__cxa_guard_acquire>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	bf14      	ite	ne
 8013d80:	2301      	movne	r3, #1
 8013d82:	2300      	moveq	r3, #0
 8013d84:	b2db      	uxtb	r3, r3
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d008      	beq.n	8013d9c <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8013d8a:	480a      	ldr	r0, [pc, #40]	; (8013db4 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 8013d8c:	f7ff fc66 	bl	801365c <_ZN12TestRegistryC1Ev>
 8013d90:	4807      	ldr	r0, [pc, #28]	; (8013db0 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8013d92:	f00d fbf5 	bl	8021580 <__cxa_guard_release>
 8013d96:	4808      	ldr	r0, [pc, #32]	; (8013db8 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 8013d98:	f00d fc19 	bl	80215ce <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 8013d9c:	4b07      	ldr	r3, [pc, #28]	; (8013dbc <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d002      	beq.n	8013daa <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 8013da4:	4b05      	ldr	r3, [pc, #20]	; (8013dbc <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	e000      	b.n	8013dac <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 8013daa:	4b02      	ldr	r3, [pc, #8]	; (8013db4 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 8013dac:	4618      	mov	r0, r3
 8013dae:	bd80      	pop	{r7, pc}
 8013db0:	20000b34 	.word	0x20000b34
 8013db4:	20000b14 	.word	0x20000b14
 8013db8:	08013d45 	.word	0x08013d45
 8013dbc:	20000b10 	.word	0x20000b10

08013dc0 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 8013dc0:	b480      	push	{r7}
 8013dc2:	b083      	sub	sp, #12
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
 8013dc8:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 8013dca:	4a04      	ldr	r2, [pc, #16]	; (8013ddc <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 8013dcc:	683b      	ldr	r3, [r7, #0]
 8013dce:	6013      	str	r3, [r2, #0]
}
 8013dd0:	bf00      	nop
 8013dd2:	370c      	adds	r7, #12
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dda:	4770      	bx	lr
 8013ddc:	20000b10 	.word	0x20000b10

08013de0 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b082      	sub	sp, #8
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	685b      	ldr	r3, [r3, #4]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d00a      	beq.n	8013e06 <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	685a      	ldr	r2, [r3, #4]
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	685b      	ldr	r3, [r3, #4]
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	330c      	adds	r3, #12
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	4610      	mov	r0, r2
 8013e00:	4798      	blx	r3
 8013e02:	4603      	mov	r3, r0
 8013e04:	e000      	b.n	8013e08 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 8013e06:	2300      	movs	r3, #0
 8013e08:	687a      	ldr	r2, [r7, #4]
 8013e0a:	6053      	str	r3, [r2, #4]

}
 8013e0c:	bf00      	nop
 8013e0e:	3708      	adds	r7, #8
 8013e10:	46bd      	mov	sp, r7
 8013e12:	bd80      	pop	{r7, pc}

08013e14 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 8013e14:	b480      	push	{r7}
 8013e16:	b083      	sub	sp, #12
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
 8013e1c:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	683a      	ldr	r2, [r7, #0]
 8013e22:	609a      	str	r2, [r3, #8]
}
 8013e24:	bf00      	nop
 8013e26:	370c      	adds	r7, #12
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2e:	4770      	bx	lr

08013e30 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 8013e30:	b480      	push	{r7}
 8013e32:	b083      	sub	sp, #12
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
 8013e38:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	683a      	ldr	r2, [r7, #0]
 8013e3e:	60da      	str	r2, [r3, #12]
}
 8013e40:	bf00      	nop
 8013e42:	370c      	adds	r7, #12
 8013e44:	46bd      	mov	sp, r7
 8013e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e4a:	4770      	bx	lr

08013e4c <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 8013e4c:	b480      	push	{r7}
 8013e4e:	b083      	sub	sp, #12
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	2201      	movs	r2, #1
 8013e58:	771a      	strb	r2, [r3, #28]
}
 8013e5a:	bf00      	nop
 8013e5c:	370c      	adds	r7, #12
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e64:	4770      	bx	lr

08013e66 <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 8013e66:	b480      	push	{r7}
 8013e68:	b083      	sub	sp, #12
 8013e6a:	af00      	add	r7, sp, #0
 8013e6c:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	2201      	movs	r2, #1
 8013e72:	751a      	strb	r2, [r3, #20]
}
 8013e74:	bf00      	nop
 8013e76:	370c      	adds	r7, #12
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7e:	4770      	bx	lr

08013e80 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b084      	sub	sp, #16
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	60f8      	str	r0, [r7, #12]
 8013e88:	60b9      	str	r1, [r7, #8]
 8013e8a:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	68d9      	ldr	r1, [r3, #12]
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	689b      	ldr	r3, [r3, #8]
 8013e94:	461a      	mov	r2, r3
 8013e96:	68b8      	ldr	r0, [r7, #8]
 8013e98:	f000 ffbb 	bl	8014e12 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d001      	beq.n	8013ea6 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	e006      	b.n	8013eb4 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	332c      	adds	r3, #44	; 0x2c
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	6878      	ldr	r0, [r7, #4]
 8013eb0:	4798      	blx	r3
        return false;
 8013eb2:	2300      	movs	r3, #0
    }
}
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	3710      	adds	r7, #16
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	bd80      	pop	{r7, pc}

08013ebc <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b082      	sub	sp, #8
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 8013ec4:	f7ff fb62 	bl	801358c <_ZN14NullTestPlugin8instanceEv>
 8013ec8:	4602      	mov	r2, r0
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	611a      	str	r2, [r3, #16]
}
 8013ece:	bf00      	nop
 8013ed0:	3708      	adds	r7, #8
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}

08013ed6 <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 8013ed6:	b580      	push	{r7, lr}
 8013ed8:	b082      	sub	sp, #8
 8013eda:	af00      	add	r7, sp, #0
 8013edc:	6078      	str	r0, [r7, #4]
 8013ede:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	3324      	adds	r3, #36	; 0x24
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	687a      	ldr	r2, [r7, #4]
 8013eea:	6912      	ldr	r2, [r2, #16]
 8013eec:	4611      	mov	r1, r2
 8013eee:	6838      	ldr	r0, [r7, #0]
 8013ef0:	4798      	blx	r3
 8013ef2:	4602      	mov	r2, r0
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	611a      	str	r2, [r3, #16]
}
 8013ef8:	bf00      	nop
 8013efa:	3708      	adds	r7, #8
 8013efc:	46bd      	mov	sp, r7
 8013efe:	bd80      	pop	{r7, pc}

08013f00 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 8013f00:	b480      	push	{r7}
 8013f02:	b083      	sub	sp, #12
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	691b      	ldr	r3, [r3, #16]
}
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	370c      	adds	r7, #12
 8013f10:	46bd      	mov	sp, r7
 8013f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f16:	4770      	bx	lr

08013f18 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b082      	sub	sp, #8
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
 8013f20:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	691b      	ldr	r3, [r3, #16]
 8013f26:	6839      	ldr	r1, [r7, #0]
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7ff fa52 	bl	80133d2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8013f2e:	4603      	mov	r3, r0
}
 8013f30:	4618      	mov	r0, r3
 8013f32:	3708      	adds	r7, #8
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bd80      	pop	{r7, pc}

08013f38 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b082      	sub	sp, #8
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
 8013f40:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	691a      	ldr	r2, [r3, #16]
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	691b      	ldr	r3, [r3, #16]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	3328      	adds	r3, #40	; 0x28
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	6839      	ldr	r1, [r7, #0]
 8013f52:	4610      	mov	r0, r2
 8013f54:	4798      	blx	r3
 8013f56:	4602      	mov	r2, r0
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	691b      	ldr	r3, [r3, #16]
 8013f5c:	429a      	cmp	r2, r3
 8013f5e:	bf0c      	ite	eq
 8013f60:	2301      	moveq	r3, #1
 8013f62:	2300      	movne	r3, #0
 8013f64:	b2db      	uxtb	r3, r3
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d00b      	beq.n	8013f82 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	691a      	ldr	r2, [r3, #16]
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	691b      	ldr	r3, [r3, #16]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	332c      	adds	r3, #44	; 0x2c
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	4610      	mov	r0, r2
 8013f7a:	4798      	blx	r3
 8013f7c:	4602      	mov	r2, r0
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	691b      	ldr	r3, [r3, #16]
 8013f86:	4618      	mov	r0, r3
 8013f88:	f7ff fa17 	bl	80133ba <_ZN10TestPlugin7getNameEv>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	6839      	ldr	r1, [r7, #0]
 8013f90:	4618      	mov	r0, r3
 8013f92:	f7fa ffec 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8013f96:	4603      	mov	r3, r0
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d00b      	beq.n	8013fb4 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	691a      	ldr	r2, [r3, #16]
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	691b      	ldr	r3, [r3, #16]
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	332c      	adds	r3, #44	; 0x2c
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	4610      	mov	r0, r2
 8013fac:	4798      	blx	r3
 8013fae:	4602      	mov	r2, r0
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	691a      	ldr	r2, [r3, #16]
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	691b      	ldr	r3, [r3, #16]
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	3328      	adds	r3, #40	; 0x28
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	6839      	ldr	r1, [r7, #0]
 8013fc4:	4610      	mov	r0, r2
 8013fc6:	4798      	blx	r3
}
 8013fc8:	bf00      	nop
 8013fca:	3708      	adds	r7, #8
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bd80      	pop	{r7, pc}

08013fd0 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b084      	sub	sp, #16
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
    int count = 0;
 8013fd8:	2300      	movs	r3, #0
 8013fda:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	691b      	ldr	r3, [r3, #16]
 8013fe0:	60bb      	str	r3, [r7, #8]
 8013fe2:	f7ff fad3 	bl	801358c <_ZN14NullTestPlugin8instanceEv>
 8013fe6:	4602      	mov	r2, r0
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	4293      	cmp	r3, r2
 8013fec:	bf14      	ite	ne
 8013fee:	2301      	movne	r3, #1
 8013ff0:	2300      	moveq	r3, #0
 8013ff2:	b2db      	uxtb	r3, r3
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d00a      	beq.n	801400e <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	3301      	adds	r3, #1
 8013ffc:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	332c      	adds	r3, #44	; 0x2c
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	68b8      	ldr	r0, [r7, #8]
 8014008:	4798      	blx	r3
 801400a:	60b8      	str	r0, [r7, #8]
 801400c:	e7e9      	b.n	8013fe2 <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 801400e:	68fb      	ldr	r3, [r7, #12]
}
 8014010:	4618      	mov	r0, r3
 8014012:	3710      	adds	r7, #16
 8014014:	46bd      	mov	sp, r7
 8014016:	bd80      	pop	{r7, pc}

08014018 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 8014018:	b480      	push	{r7}
 801401a:	b083      	sub	sp, #12
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
    return tests_;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	685b      	ldr	r3, [r3, #4]
}
 8014024:	4618      	mov	r0, r3
 8014026:	370c      	adds	r7, #12
 8014028:	46bd      	mov	sp, r7
 801402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402e:	4770      	bx	lr

08014030 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b084      	sub	sp, #16
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
 8014038:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	334c      	adds	r3, #76	; 0x4c
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	6878      	ldr	r0, [r7, #4]
 8014044:	4798      	blx	r3
 8014046:	4602      	mov	r2, r0
 8014048:	f107 0308 	add.w	r3, r7, #8
 801404c:	4611      	mov	r1, r2
 801404e:	4618      	mov	r0, r3
 8014050:	f002 f8f8 	bl	8016244 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 8014054:	f107 0308 	add.w	r3, r7, #8
 8014058:	6839      	ldr	r1, [r7, #0]
 801405a:	4618      	mov	r0, r3
 801405c:	f002 f980 	bl	8016360 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 8014060:	f107 0308 	add.w	r3, r7, #8
 8014064:	4618      	mov	r0, r3
 8014066:	f002 fa13 	bl	8016490 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 801406a:	4602      	mov	r2, r0
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8014070:	f107 0308 	add.w	r3, r7, #8
 8014074:	4618      	mov	r0, r3
 8014076:	f002 f939 	bl	80162ec <_ZN22UtestShellPointerArrayD1Ev>
}
 801407a:	bf00      	nop
 801407c:	3710      	adds	r7, #16
 801407e:	46bd      	mov	sp, r7
 8014080:	bd80      	pop	{r7, pc}

08014082 <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 8014082:	b580      	push	{r7, lr}
 8014084:	b084      	sub	sp, #16
 8014086:	af00      	add	r7, sp, #0
 8014088:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	334c      	adds	r3, #76	; 0x4c
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	6878      	ldr	r0, [r7, #4]
 8014094:	4798      	blx	r3
 8014096:	4602      	mov	r2, r0
 8014098:	f107 0308 	add.w	r3, r7, #8
 801409c:	4611      	mov	r1, r2
 801409e:	4618      	mov	r0, r3
 80140a0:	f002 f8d0 	bl	8016244 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 80140a4:	f107 0308 	add.w	r3, r7, #8
 80140a8:	4618      	mov	r0, r3
 80140aa:	f002 f995 	bl	80163d8 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 80140ae:	f107 0308 	add.w	r3, r7, #8
 80140b2:	4618      	mov	r0, r3
 80140b4:	f002 f9ec 	bl	8016490 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 80140b8:	4602      	mov	r2, r0
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 80140be:	f107 0308 	add.w	r3, r7, #8
 80140c2:	4618      	mov	r0, r3
 80140c4:	f002 f912 	bl	80162ec <_ZN22UtestShellPointerArrayD1Ev>
}
 80140c8:	bf00      	nop
 80140ca:	3710      	adds	r7, #16
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}

080140d0 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b084      	sub	sp, #16
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
 80140d8:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	685b      	ldr	r3, [r3, #4]
 80140de:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d00b      	beq.n	80140fe <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	330c      	adds	r3, #12
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	68f8      	ldr	r0, [r7, #12]
 80140f0:	4798      	blx	r3
 80140f2:	4602      	mov	r2, r0
 80140f4:	683b      	ldr	r3, [r7, #0]
 80140f6:	4293      	cmp	r3, r2
 80140f8:	d001      	beq.n	80140fe <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 80140fa:	2301      	movs	r3, #1
 80140fc:	e000      	b.n	8014100 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 80140fe:	2300      	movs	r3, #0
 8014100:	2b00      	cmp	r3, #0
 8014102:	d007      	beq.n	8014114 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	330c      	adds	r3, #12
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	68f8      	ldr	r0, [r7, #12]
 801410e:	4798      	blx	r3
 8014110:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 8014112:	e7e5      	b.n	80140e0 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 8014114:	68fb      	ldr	r3, [r7, #12]
}
 8014116:	4618      	mov	r0, r3
 8014118:	3710      	adds	r7, #16
 801411a:	46bd      	mov	sp, r7
 801411c:	bd80      	pop	{r7, pc}

0801411e <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 801411e:	b590      	push	{r4, r7, lr}
 8014120:	b087      	sub	sp, #28
 8014122:	af00      	add	r7, sp, #0
 8014124:	6078      	str	r0, [r7, #4]
 8014126:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	685b      	ldr	r3, [r3, #4]
 801412c:	617b      	str	r3, [r7, #20]
    while (current) {
 801412e:	697b      	ldr	r3, [r7, #20]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d01e      	beq.n	8014172 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 8014134:	f107 030c 	add.w	r3, r7, #12
 8014138:	6979      	ldr	r1, [r7, #20]
 801413a:	4618      	mov	r0, r3
 801413c:	f000 fd4e 	bl	8014bdc <_ZNK10UtestShell7getNameEv>
 8014140:	f107 030c 	add.w	r3, r7, #12
 8014144:	6839      	ldr	r1, [r7, #0]
 8014146:	4618      	mov	r0, r3
 8014148:	f7fa ff11 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 801414c:	4603      	mov	r3, r0
 801414e:	461c      	mov	r4, r3
 8014150:	f107 030c 	add.w	r3, r7, #12
 8014154:	4618      	mov	r0, r3
 8014156:	f7fa fefe 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801415a:	2c00      	cmp	r4, #0
 801415c:	d001      	beq.n	8014162 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 801415e:	697b      	ldr	r3, [r7, #20]
 8014160:	e008      	b.n	8014174 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 8014162:	697b      	ldr	r3, [r7, #20]
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	330c      	adds	r3, #12
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	6978      	ldr	r0, [r7, #20]
 801416c:	4798      	blx	r3
 801416e:	6178      	str	r0, [r7, #20]
    while (current) {
 8014170:	e7dd      	b.n	801412e <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 8014172:	2300      	movs	r3, #0
}
 8014174:	4618      	mov	r0, r3
 8014176:	371c      	adds	r7, #28
 8014178:	46bd      	mov	sp, r7
 801417a:	bd90      	pop	{r4, r7, pc}

0801417c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 801417c:	b590      	push	{r4, r7, lr}
 801417e:	b087      	sub	sp, #28
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
 8014184:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	685b      	ldr	r3, [r3, #4]
 801418a:	617b      	str	r3, [r7, #20]
    while (current) {
 801418c:	697b      	ldr	r3, [r7, #20]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d01e      	beq.n	80141d0 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 8014192:	f107 030c 	add.w	r3, r7, #12
 8014196:	6979      	ldr	r1, [r7, #20]
 8014198:	4618      	mov	r0, r3
 801419a:	f000 fd2e 	bl	8014bfa <_ZNK10UtestShell8getGroupEv>
 801419e:	f107 030c 	add.w	r3, r7, #12
 80141a2:	6839      	ldr	r1, [r7, #0]
 80141a4:	4618      	mov	r0, r3
 80141a6:	f7fa fee2 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 80141aa:	4603      	mov	r3, r0
 80141ac:	461c      	mov	r4, r3
 80141ae:	f107 030c 	add.w	r3, r7, #12
 80141b2:	4618      	mov	r0, r3
 80141b4:	f7fa fecf 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80141b8:	2c00      	cmp	r4, #0
 80141ba:	d001      	beq.n	80141c0 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 80141bc:	697b      	ldr	r3, [r7, #20]
 80141be:	e008      	b.n	80141d2 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 80141c0:	697b      	ldr	r3, [r7, #20]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	330c      	adds	r3, #12
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	6978      	ldr	r0, [r7, #20]
 80141ca:	4798      	blx	r3
 80141cc:	6178      	str	r0, [r7, #20]
    while (current) {
 80141ce:	e7dd      	b.n	801418c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 80141d0:	2300      	movs	r3, #0
}
 80141d2:	4618      	mov	r0, r3
 80141d4:	371c      	adds	r7, #28
 80141d6:	46bd      	mov	sp, r7
 80141d8:	bd90      	pop	{r4, r7, pc}
	...

080141dc <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 80141dc:	b480      	push	{r7}
 80141de:	b083      	sub	sp, #12
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]
 80141e4:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 80141e6:	4a18      	ldr	r2, [pc, #96]	; (8014248 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	601a      	str	r2, [r3, #0]
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	683a      	ldr	r2, [r7, #0]
 80141f0:	605a      	str	r2, [r3, #4]
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	2200      	movs	r2, #0
 80141f6:	609a      	str	r2, [r3, #8]
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	2200      	movs	r2, #0
 80141fc:	60da      	str	r2, [r3, #12]
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	2200      	movs	r2, #0
 8014202:	611a      	str	r2, [r3, #16]
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	2200      	movs	r2, #0
 8014208:	615a      	str	r2, [r3, #20]
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	2200      	movs	r2, #0
 801420e:	619a      	str	r2, [r3, #24]
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	2200      	movs	r2, #0
 8014214:	61da      	str	r2, [r3, #28]
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	2200      	movs	r2, #0
 801421a:	621a      	str	r2, [r3, #32]
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	2200      	movs	r2, #0
 8014220:	625a      	str	r2, [r3, #36]	; 0x24
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	2200      	movs	r2, #0
 8014226:	629a      	str	r2, [r3, #40]	; 0x28
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	2200      	movs	r2, #0
 801422c:	62da      	str	r2, [r3, #44]	; 0x2c
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	2200      	movs	r2, #0
 8014232:	631a      	str	r2, [r3, #48]	; 0x30
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2200      	movs	r2, #0
 8014238:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	4618      	mov	r0, r3
 801423e:	370c      	adds	r7, #12
 8014240:	46bd      	mov	sp, r7
 8014242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014246:	4770      	bx	lr
 8014248:	0802ae84 	.word	0x0802ae84

0801424c <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 801424c:	b480      	push	{r7}
 801424e:	b083      	sub	sp, #12
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
 8014254:	4a04      	ldr	r2, [pc, #16]	; (8014268 <_ZN10TestResultD1Ev+0x1c>)
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	601a      	str	r2, [r3, #0]
{
}
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	4618      	mov	r0, r3
 801425e:	370c      	adds	r7, #12
 8014260:	46bd      	mov	sp, r7
 8014262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014266:	4770      	bx	lr
 8014268:	0802ae84 	.word	0x0802ae84

0801426c <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 801426c:	b580      	push	{r7, lr}
 801426e:	b082      	sub	sp, #8
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
}
 8014274:	6878      	ldr	r0, [r7, #4]
 8014276:	f7ff ffe9 	bl	801424c <_ZN10TestResultD1Ev>
 801427a:	2138      	movs	r1, #56	; 0x38
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f7f7 ff03 	bl	800c088 <_ZdlPvj>
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	4618      	mov	r0, r3
 8014286:	3708      	adds	r7, #8
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}

0801428c <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b082      	sub	sp, #8
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
 8014294:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	685a      	ldr	r2, [r3, #4]
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	685b      	ldr	r3, [r3, #4]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	3318      	adds	r3, #24
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	6839      	ldr	r1, [r7, #0]
 80142a6:	4610      	mov	r0, r2
 80142a8:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 80142aa:	4b05      	ldr	r3, [pc, #20]	; (80142c0 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	4798      	blx	r3
 80142b0:	4603      	mov	r3, r0
 80142b2:	461a      	mov	r2, r3
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80142b8:	bf00      	nop
 80142ba:	3708      	adds	r7, #8
 80142bc:	46bd      	mov	sp, r7
 80142be:	bd80      	pop	{r7, pc}
 80142c0:	200000a8 	.word	0x200000a8

080142c4 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b082      	sub	sp, #8
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
 80142cc:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 80142ce:	4b0c      	ldr	r3, [pc, #48]	; (8014300 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	4798      	blx	r3
 80142d4:	4603      	mov	r3, r0
 80142d6:	461a      	mov	r2, r3
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142dc:	1ad2      	subs	r2, r2, r3
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	685a      	ldr	r2, [r3, #4]
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	685b      	ldr	r3, [r3, #4]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	331c      	adds	r3, #28
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	6879      	ldr	r1, [r7, #4]
 80142f2:	4610      	mov	r0, r2
 80142f4:	4798      	blx	r3
}
 80142f6:	bf00      	nop
 80142f8:	3708      	adds	r7, #8
 80142fa:	46bd      	mov	sp, r7
 80142fc:	bd80      	pop	{r7, pc}
 80142fe:	bf00      	nop
 8014300:	200000a8 	.word	0x200000a8

08014304 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b082      	sub	sp, #8
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	685a      	ldr	r2, [r3, #4]
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	685b      	ldr	r3, [r3, #4]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	3310      	adds	r3, #16
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	6839      	ldr	r1, [r7, #0]
 801431e:	4610      	mov	r0, r2
 8014320:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8014322:	4b05      	ldr	r3, [pc, #20]	; (8014338 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	4798      	blx	r3
 8014328:	4603      	mov	r3, r0
 801432a:	461a      	mov	r2, r3
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8014330:	bf00      	nop
 8014332:	3708      	adds	r7, #8
 8014334:	46bd      	mov	sp, r7
 8014336:	bd80      	pop	{r7, pc}
 8014338:	200000a8 	.word	0x200000a8

0801433c <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b082      	sub	sp, #8
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
 8014344:	6039      	str	r1, [r7, #0]
    output_.print(text);
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	685a      	ldr	r2, [r3, #4]
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	685b      	ldr	r3, [r3, #4]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	332c      	adds	r3, #44	; 0x2c
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	6839      	ldr	r1, [r7, #0]
 8014356:	4610      	mov	r0, r2
 8014358:	4798      	blx	r3
}
 801435a:	bf00      	nop
 801435c:	3708      	adds	r7, #8
 801435e:	46bd      	mov	sp, r7
 8014360:	bd80      	pop	{r7, pc}

08014362 <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 8014362:	b580      	push	{r7, lr}
 8014364:	b082      	sub	sp, #8
 8014366:	af00      	add	r7, sp, #0
 8014368:	6078      	str	r0, [r7, #4]
 801436a:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	685a      	ldr	r2, [r3, #4]
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	685b      	ldr	r3, [r3, #4]
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	3348      	adds	r3, #72	; 0x48
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	6839      	ldr	r1, [r7, #0]
 801437c:	4610      	mov	r0, r2
 801437e:	4798      	blx	r3
}
 8014380:	bf00      	nop
 8014382:	3708      	adds	r7, #8
 8014384:	46bd      	mov	sp, r7
 8014386:	bd80      	pop	{r7, pc}

08014388 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 8014388:	b580      	push	{r7, lr}
 801438a:	b082      	sub	sp, #8
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
 8014390:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 8014392:	4b0c      	ldr	r3, [pc, #48]	; (80143c4 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	4798      	blx	r3
 8014398:	4603      	mov	r3, r0
 801439a:	461a      	mov	r2, r3
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143a0:	1ad2      	subs	r2, r2, r3
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	685a      	ldr	r2, [r3, #4]
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	3314      	adds	r3, #20
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	6879      	ldr	r1, [r7, #4]
 80143b6:	4610      	mov	r0, r2
 80143b8:	4798      	blx	r3

}
 80143ba:	bf00      	nop
 80143bc:	3708      	adds	r7, #8
 80143be:	46bd      	mov	sp, r7
 80143c0:	bd80      	pop	{r7, pc}
 80143c2:	bf00      	nop
 80143c4:	200000a8 	.word	0x200000a8

080143c8 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b082      	sub	sp, #8
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
 80143d0:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	685a      	ldr	r2, [r3, #4]
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	333c      	adds	r3, #60	; 0x3c
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	6839      	ldr	r1, [r7, #0]
 80143e2:	4610      	mov	r0, r2
 80143e4:	4798      	blx	r3
    failureCount_++;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	695b      	ldr	r3, [r3, #20]
 80143ea:	1c5a      	adds	r2, r3, #1
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	615a      	str	r2, [r3, #20]
}
 80143f0:	bf00      	nop
 80143f2:	3708      	adds	r7, #8
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bd80      	pop	{r7, pc}

080143f8 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 80143f8:	b480      	push	{r7}
 80143fa:	b083      	sub	sp, #12
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
    testCount_++;
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	689b      	ldr	r3, [r3, #8]
 8014404:	1c5a      	adds	r2, r3, #1
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	609a      	str	r2, [r3, #8]
}
 801440a:	bf00      	nop
 801440c:	370c      	adds	r7, #12
 801440e:	46bd      	mov	sp, r7
 8014410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014414:	4770      	bx	lr

08014416 <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 8014416:	b480      	push	{r7}
 8014418:	b083      	sub	sp, #12
 801441a:	af00      	add	r7, sp, #0
 801441c:	6078      	str	r0, [r7, #4]
    runCount_++;
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	68db      	ldr	r3, [r3, #12]
 8014422:	1c5a      	adds	r2, r3, #1
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	60da      	str	r2, [r3, #12]
}
 8014428:	bf00      	nop
 801442a:	370c      	adds	r7, #12
 801442c:	46bd      	mov	sp, r7
 801442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014432:	4770      	bx	lr

08014434 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 8014434:	b480      	push	{r7}
 8014436:	b083      	sub	sp, #12
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
    checkCount_++;
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	691b      	ldr	r3, [r3, #16]
 8014440:	1c5a      	adds	r2, r3, #1
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	611a      	str	r2, [r3, #16]
}
 8014446:	bf00      	nop
 8014448:	370c      	adds	r7, #12
 801444a:	46bd      	mov	sp, r7
 801444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014450:	4770      	bx	lr

08014452 <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 8014452:	b480      	push	{r7}
 8014454:	b083      	sub	sp, #12
 8014456:	af00      	add	r7, sp, #0
 8014458:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	699b      	ldr	r3, [r3, #24]
 801445e:	1c5a      	adds	r2, r3, #1
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	619a      	str	r2, [r3, #24]
}
 8014464:	bf00      	nop
 8014466:	370c      	adds	r7, #12
 8014468:	46bd      	mov	sp, r7
 801446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446e:	4770      	bx	lr

08014470 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 8014470:	b480      	push	{r7}
 8014472:	b083      	sub	sp, #12
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	69db      	ldr	r3, [r3, #28]
 801447c:	1c5a      	adds	r2, r3, #1
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	61da      	str	r2, [r3, #28]
}
 8014482:	bf00      	nop
 8014484:	370c      	adds	r7, #12
 8014486:	46bd      	mov	sp, r7
 8014488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801448c:	4770      	bx	lr
	...

08014490 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 8014490:	b580      	push	{r7, lr}
 8014492:	b082      	sub	sp, #8
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8014498:	4b09      	ldr	r3, [pc, #36]	; (80144c0 <_ZN10TestResult12testsStartedEv+0x30>)
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	4798      	blx	r3
 801449e:	4603      	mov	r3, r0
 80144a0:	461a      	mov	r2, r3
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	685a      	ldr	r2, [r3, #4]
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	685b      	ldr	r3, [r3, #4]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	3308      	adds	r3, #8
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	4610      	mov	r0, r2
 80144b6:	4798      	blx	r3
}
 80144b8:	bf00      	nop
 80144ba:	3708      	adds	r7, #8
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd80      	pop	{r7, pc}
 80144c0:	200000a8 	.word	0x200000a8

080144c4 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b084      	sub	sp, #16
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 80144cc:	4b0c      	ldr	r3, [pc, #48]	; (8014500 <_ZN10TestResult10testsEndedEv+0x3c>)
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	4798      	blx	r3
 80144d2:	4603      	mov	r3, r0
 80144d4:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144da:	68fa      	ldr	r2, [r7, #12]
 80144dc:	1ad2      	subs	r2, r2, r3
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	685a      	ldr	r2, [r3, #4]
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	685b      	ldr	r3, [r3, #4]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	330c      	adds	r3, #12
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	6879      	ldr	r1, [r7, #4]
 80144f2:	4610      	mov	r0, r2
 80144f4:	4798      	blx	r3
}
 80144f6:	bf00      	nop
 80144f8:	3710      	adds	r7, #16
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}
 80144fe:	bf00      	nop
 8014500:	200000a8 	.word	0x200000a8

08014504 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 8014504:	b480      	push	{r7}
 8014506:	b083      	sub	sp, #12
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	6a1b      	ldr	r3, [r3, #32]
}
 8014510:	4618      	mov	r0, r3
 8014512:	370c      	adds	r7, #12
 8014514:	46bd      	mov	sp, r7
 8014516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451a:	4770      	bx	lr

0801451c <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 801451c:	b480      	push	{r7}
 801451e:	b083      	sub	sp, #12
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8014528:	4618      	mov	r0, r3
 801452a:	370c      	adds	r7, #12
 801452c:	46bd      	mov	sp, r7
 801452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014532:	4770      	bx	lr

08014534 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 8014534:	b480      	push	{r7}
 8014536:	b083      	sub	sp, #12
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8014540:	4618      	mov	r0, r3
 8014542:	370c      	adds	r7, #12
 8014544:	46bd      	mov	sp, r7
 8014546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454a:	4770      	bx	lr

0801454c <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 801454c:	b590      	push	{r4, r7, lr}
 801454e:	b087      	sub	sp, #28
 8014550:	af00      	add	r7, sp, #0
 8014552:	ed87 0b04 	vstr	d0, [r7, #16]
 8014556:	ed87 1b02 	vstr	d1, [r7, #8]
 801455a:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 801455e:	4b2c      	ldr	r3, [pc, #176]	; (8014610 <_Z13doubles_equalddd+0xc4>)
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	ed97 0b04 	vldr	d0, [r7, #16]
 8014566:	4798      	blx	r3
 8014568:	4603      	mov	r3, r0
 801456a:	2b00      	cmp	r3, #0
 801456c:	d10f      	bne.n	801458e <_Z13doubles_equalddd+0x42>
 801456e:	4b28      	ldr	r3, [pc, #160]	; (8014610 <_Z13doubles_equalddd+0xc4>)
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	ed97 0b02 	vldr	d0, [r7, #8]
 8014576:	4798      	blx	r3
 8014578:	4603      	mov	r3, r0
 801457a:	2b00      	cmp	r3, #0
 801457c:	d107      	bne.n	801458e <_Z13doubles_equalddd+0x42>
 801457e:	4b24      	ldr	r3, [pc, #144]	; (8014610 <_Z13doubles_equalddd+0xc4>)
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	ed97 0b00 	vldr	d0, [r7]
 8014586:	4798      	blx	r3
 8014588:	4603      	mov	r3, r0
 801458a:	2b00      	cmp	r3, #0
 801458c:	d001      	beq.n	8014592 <_Z13doubles_equalddd+0x46>
 801458e:	2301      	movs	r3, #1
 8014590:	e000      	b.n	8014594 <_Z13doubles_equalddd+0x48>
 8014592:	2300      	movs	r3, #0
 8014594:	2b00      	cmp	r3, #0
 8014596:	d001      	beq.n	801459c <_Z13doubles_equalddd+0x50>
        return false;
 8014598:	2300      	movs	r3, #0
 801459a:	e035      	b.n	8014608 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 801459c:	4b1d      	ldr	r3, [pc, #116]	; (8014614 <_Z13doubles_equalddd+0xc8>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	ed97 0b04 	vldr	d0, [r7, #16]
 80145a4:	4798      	blx	r3
 80145a6:	4603      	mov	r3, r0
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d009      	beq.n	80145c0 <_Z13doubles_equalddd+0x74>
 80145ac:	4b19      	ldr	r3, [pc, #100]	; (8014614 <_Z13doubles_equalddd+0xc8>)
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	ed97 0b02 	vldr	d0, [r7, #8]
 80145b4:	4798      	blx	r3
 80145b6:	4603      	mov	r3, r0
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d001      	beq.n	80145c0 <_Z13doubles_equalddd+0x74>
 80145bc:	2301      	movs	r3, #1
 80145be:	e000      	b.n	80145c2 <_Z13doubles_equalddd+0x76>
 80145c0:	2300      	movs	r3, #0
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d001      	beq.n	80145ca <_Z13doubles_equalddd+0x7e>
    {
        return true;
 80145c6:	2301      	movs	r3, #1
 80145c8:	e01e      	b.n	8014608 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 80145ca:	4b13      	ldr	r3, [pc, #76]	; (8014618 <_Z13doubles_equalddd+0xcc>)
 80145cc:	681c      	ldr	r4, [r3, #0]
 80145ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80145d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80145d6:	f7eb fe97 	bl	8000308 <__aeabi_dsub>
 80145da:	4602      	mov	r2, r0
 80145dc:	460b      	mov	r3, r1
 80145de:	ec43 2b17 	vmov	d7, r2, r3
 80145e2:	eeb0 0a47 	vmov.f32	s0, s14
 80145e6:	eef0 0a67 	vmov.f32	s1, s15
 80145ea:	47a0      	blx	r4
 80145ec:	ec53 2b10 	vmov	r2, r3, d0
 80145f0:	2101      	movs	r1, #1
 80145f2:	460c      	mov	r4, r1
 80145f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80145f8:	f7ec f8b2 	bl	8000760 <__aeabi_dcmpge>
 80145fc:	4603      	mov	r3, r0
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d101      	bne.n	8014606 <_Z13doubles_equalddd+0xba>
 8014602:	2300      	movs	r3, #0
 8014604:	461c      	mov	r4, r3
 8014606:	b2e3      	uxtb	r3, r4
}
 8014608:	4618      	mov	r0, r3
 801460a:	371c      	adds	r7, #28
 801460c:	46bd      	mov	sp, r7
 801460e:	bd90      	pop	{r4, r7, pc}
 8014610:	200000e8 	.word	0x200000e8
 8014614:	200000ec 	.word	0x200000ec
 8014618:	200000dc 	.word	0x200000dc

0801461c <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 801461c:	b480      	push	{r7}
 801461e:	b083      	sub	sp, #12
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	332c      	adds	r3, #44	; 0x2c
    }
 8014628:	4618      	mov	r0, r3
 801462a:	370c      	adds	r7, #12
 801462c:	46bd      	mov	sp, r7
 801462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014632:	4770      	bx	lr

08014634 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8014634:	b580      	push	{r7, lr}
 8014636:	b082      	sub	sp, #8
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
    {
 801463c:	4a0a      	ldr	r2, [pc, #40]	; (8014668 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	601a      	str	r2, [r3, #0]
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	332c      	adds	r3, #44	; 0x2c
 8014646:	4618      	mov	r0, r3
 8014648:	f7ff fe00 	bl	801424c <_ZN10TestResultD1Ev>
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	331c      	adds	r3, #28
 8014650:	4618      	mov	r0, r3
 8014652:	f7f6 f815 	bl	800a680 <_ZN17ConsoleTestOutputD1Ev>
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	4618      	mov	r0, r3
 801465a:	f000 f943 	bl	80148e4 <_ZN10UtestShellD1Ev>
    }
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	4618      	mov	r0, r3
 8014662:	3708      	adds	r7, #8
 8014664:	46bd      	mov	sp, r7
 8014666:	bd80      	pop	{r7, pc}
 8014668:	0802aecc 	.word	0x0802aecc

0801466c <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 801466c:	b580      	push	{r7, lr}
 801466e:	b082      	sub	sp, #8
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
    }
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	f7ff ffdd 	bl	8014634 <_ZN22OutsideTestRunnerUTestD1Ev>
 801467a:	2164      	movs	r1, #100	; 0x64
 801467c:	6878      	ldr	r0, [r7, #4]
 801467e:	f7f7 fd03 	bl	800c088 <_ZdlPvj>
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	4618      	mov	r0, r3
 8014686:	3708      	adds	r7, #8
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}

0801468c <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 801468c:	b580      	push	{r7, lr}
 801468e:	b084      	sub	sp, #16
 8014690:	af02      	add	r7, sp, #8
 8014692:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 8014694:	6878      	ldr	r0, [r7, #4]
 8014696:	2300      	movs	r3, #0
 8014698:	9300      	str	r3, [sp, #0]
 801469a:	4b0d      	ldr	r3, [pc, #52]	; (80146d0 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 801469c:	4a0d      	ldr	r2, [pc, #52]	; (80146d4 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 801469e:	490e      	ldr	r1, [pc, #56]	; (80146d8 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 80146a0:	f000 f8f8 	bl	8014894 <_ZN10UtestShellC1EPKcS1_S1_j>
 80146a4:	4a0d      	ldr	r2, [pc, #52]	; (80146dc <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	601a      	str	r2, [r3, #0]
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	331c      	adds	r3, #28
 80146ae:	4618      	mov	r0, r3
 80146b0:	f7f5 ffd4 	bl	800a65c <_ZN17ConsoleTestOutputC1Ev>
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	331c      	adds	r3, #28
 80146be:	4619      	mov	r1, r3
 80146c0:	4610      	mov	r0, r2
 80146c2:	f7ff fd8b 	bl	80141dc <_ZN10TestResultC1ER10TestOutput>
    {
    }
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	4618      	mov	r0, r3
 80146ca:	3708      	adds	r7, #8
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}
 80146d0:	08027150 	.word	0x08027150
 80146d4:	08027160 	.word	0x08027160
 80146d8:	080271a0 	.word	0x080271a0
 80146dc:	0802aecc 	.word	0x0802aecc

080146e0 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 80146e0:	b580      	push	{r7, lr}
 80146e2:	af00      	add	r7, sp, #0
 80146e4:	4801      	ldr	r0, [pc, #4]	; (80146ec <__tcf_0+0xc>)
 80146e6:	f7ff ffa5 	bl	8014634 <_ZN22OutsideTestRunnerUTestD1Ev>
 80146ea:	bd80      	pop	{r7, pc}
 80146ec:	20000b38 	.word	0x20000b38

080146f0 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 80146f4:	4b12      	ldr	r3, [pc, #72]	; (8014740 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80146f6:	781b      	ldrb	r3, [r3, #0]
 80146f8:	f3bf 8f5b 	dmb	ish
 80146fc:	b2db      	uxtb	r3, r3
 80146fe:	f003 0301 	and.w	r3, r3, #1
 8014702:	2b00      	cmp	r3, #0
 8014704:	bf0c      	ite	eq
 8014706:	2301      	moveq	r3, #1
 8014708:	2300      	movne	r3, #0
 801470a:	b2db      	uxtb	r3, r3
 801470c:	2b00      	cmp	r3, #0
 801470e:	d013      	beq.n	8014738 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8014710:	480b      	ldr	r0, [pc, #44]	; (8014740 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8014712:	f00c ff29 	bl	8021568 <__cxa_guard_acquire>
 8014716:	4603      	mov	r3, r0
 8014718:	2b00      	cmp	r3, #0
 801471a:	bf14      	ite	ne
 801471c:	2301      	movne	r3, #1
 801471e:	2300      	moveq	r3, #0
 8014720:	b2db      	uxtb	r3, r3
 8014722:	2b00      	cmp	r3, #0
 8014724:	d008      	beq.n	8014738 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8014726:	4807      	ldr	r0, [pc, #28]	; (8014744 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 8014728:	f7ff ffb0 	bl	801468c <_ZN22OutsideTestRunnerUTestC1Ev>
 801472c:	4804      	ldr	r0, [pc, #16]	; (8014740 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 801472e:	f00c ff27 	bl	8021580 <__cxa_guard_release>
 8014732:	4805      	ldr	r0, [pc, #20]	; (8014748 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 8014734:	f00c ff4b 	bl	80215ce <atexit>
    return instance_;
 8014738:	4b02      	ldr	r3, [pc, #8]	; (8014744 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 801473a:	4618      	mov	r0, r3
 801473c:	bd80      	pop	{r7, pc}
 801473e:	bf00      	nop
 8014740:	20000b9c 	.word	0x20000b9c
 8014744:	20000b38 	.word	0x20000b38
 8014748:	080146e1 	.word	0x080146e1

0801474c <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 801474c:	b580      	push	{r7, lr}
 801474e:	b082      	sub	sp, #8
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	330c      	adds	r3, #12
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	6878      	ldr	r0, [r7, #4]
 801475e:	4798      	blx	r3
    }
 8014760:	bf00      	nop
 8014762:	3708      	adds	r7, #8
 8014764:	46bd      	mov	sp, r7
 8014766:	bd80      	pop	{r7, pc}

08014768 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 8014768:	b580      	push	{r7, lr}
 801476a:	b082      	sub	sp, #8
 801476c:	af00      	add	r7, sp, #0
 801476e:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	3314      	adds	r3, #20
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	6878      	ldr	r0, [r7, #4]
 801477a:	4798      	blx	r3
    }
 801477c:	bf00      	nop
 801477e:	3708      	adds	r7, #8
 8014780:	46bd      	mov	sp, r7
 8014782:	bd80      	pop	{r7, pc}

08014784 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 8014784:	b580      	push	{r7, lr}
 8014786:	b082      	sub	sp, #8
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	3310      	adds	r3, #16
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	6878      	ldr	r0, [r7, #4]
 8014796:	4798      	blx	r3
    }
 8014798:	bf00      	nop
 801479a:	3708      	adds	r7, #8
 801479c:	46bd      	mov	sp, r7
 801479e:	bd80      	pop	{r7, pc}

080147a0 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 80147a0:	b480      	push	{r7}
 80147a2:	b085      	sub	sp, #20
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	60f8      	str	r0, [r7, #12]
 80147a8:	60b9      	str	r1, [r7, #8]
 80147aa:	607a      	str	r2, [r7, #4]
 80147ac:	603b      	str	r3, [r7, #0]
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	68ba      	ldr	r2, [r7, #8]
 80147b2:	601a      	str	r2, [r3, #0]
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	687a      	ldr	r2, [r7, #4]
 80147b8:	605a      	str	r2, [r3, #4]
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	683a      	ldr	r2, [r7, #0]
 80147be:	609a      	str	r2, [r3, #8]
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	4618      	mov	r0, r3
 80147c4:	3714      	adds	r7, #20
 80147c6:	46bd      	mov	sp, r7
 80147c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147cc:	4770      	bx	lr

080147ce <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 80147ce:	b580      	push	{r7, lr}
 80147d0:	b086      	sub	sp, #24
 80147d2:	af00      	add	r7, sp, #0
 80147d4:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 80147da:	697b      	ldr	r3, [r7, #20]
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 80147e0:	697b      	ldr	r3, [r7, #20]
 80147e2:	685b      	ldr	r3, [r3, #4]
 80147e4:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 80147e6:	697b      	ldr	r3, [r7, #20]
 80147e8:	689b      	ldr	r3, [r3, #8]
 80147ea:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 80147ec:	693b      	ldr	r3, [r7, #16]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	3394      	adds	r3, #148	; 0x94
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	68ba      	ldr	r2, [r7, #8]
 80147f6:	68f9      	ldr	r1, [r7, #12]
 80147f8:	6938      	ldr	r0, [r7, #16]
 80147fa:	4798      	blx	r3
    }
 80147fc:	bf00      	nop
 80147fe:	3718      	adds	r7, #24
 8014800:	46bd      	mov	sp, r7
 8014802:	bd80      	pop	{r7, pc}

08014804 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 8014804:	b580      	push	{r7, lr}
 8014806:	b086      	sub	sp, #24
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8014810:	697b      	ldr	r3, [r7, #20]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8014816:	697b      	ldr	r3, [r7, #20]
 8014818:	685b      	ldr	r3, [r3, #4]
 801481a:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 801481c:	697b      	ldr	r3, [r7, #20]
 801481e:	689b      	ldr	r3, [r3, #8]
 8014820:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 8014822:	4b05      	ldr	r3, [pc, #20]	; (8014838 <helperDoRunOneTestSeperateProcess+0x34>)
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	68ba      	ldr	r2, [r7, #8]
 8014828:	68f9      	ldr	r1, [r7, #12]
 801482a:	6938      	ldr	r0, [r7, #16]
 801482c:	4798      	blx	r3
    }
 801482e:	bf00      	nop
 8014830:	3718      	adds	r7, #24
 8014832:	46bd      	mov	sp, r7
 8014834:	bd80      	pop	{r7, pc}
 8014836:	bf00      	nop
 8014838:	2000009c 	.word	0x2000009c

0801483c <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 801483c:	b480      	push	{r7}
 801483e:	b083      	sub	sp, #12
 8014840:	af00      	add	r7, sp, #0
 8014842:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8014844:	4a0f      	ldr	r2, [pc, #60]	; (8014884 <_ZN10UtestShellC1Ev+0x48>)
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	601a      	str	r2, [r3, #0]
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	4a0e      	ldr	r2, [pc, #56]	; (8014888 <_ZN10UtestShellC1Ev+0x4c>)
 801484e:	605a      	str	r2, [r3, #4]
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	4a0e      	ldr	r2, [pc, #56]	; (801488c <_ZN10UtestShellC1Ev+0x50>)
 8014854:	609a      	str	r2, [r3, #8]
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	4a0d      	ldr	r2, [pc, #52]	; (8014890 <_ZN10UtestShellC1Ev+0x54>)
 801485a:	60da      	str	r2, [r3, #12]
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	2200      	movs	r2, #0
 8014860:	611a      	str	r2, [r3, #16]
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2200      	movs	r2, #0
 8014866:	615a      	str	r2, [r3, #20]
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2200      	movs	r2, #0
 801486c:	761a      	strb	r2, [r3, #24]
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	2200      	movs	r2, #0
 8014872:	765a      	strb	r2, [r3, #25]
{
}
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	4618      	mov	r0, r3
 8014878:	370c      	adds	r7, #12
 801487a:	46bd      	mov	sp, r7
 801487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014880:	4770      	bx	lr
 8014882:	bf00      	nop
 8014884:	0802af8c 	.word	0x0802af8c
 8014888:	080271ec 	.word	0x080271ec
 801488c:	08027200 	.word	0x08027200
 8014890:	08027210 	.word	0x08027210

08014894 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 8014894:	b480      	push	{r7}
 8014896:	b085      	sub	sp, #20
 8014898:	af00      	add	r7, sp, #0
 801489a:	60f8      	str	r0, [r7, #12]
 801489c:	60b9      	str	r1, [r7, #8]
 801489e:	607a      	str	r2, [r7, #4]
 80148a0:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 80148a2:	4a0f      	ldr	r2, [pc, #60]	; (80148e0 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	601a      	str	r2, [r3, #0]
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	68ba      	ldr	r2, [r7, #8]
 80148ac:	605a      	str	r2, [r3, #4]
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	687a      	ldr	r2, [r7, #4]
 80148b2:	609a      	str	r2, [r3, #8]
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	683a      	ldr	r2, [r7, #0]
 80148b8:	60da      	str	r2, [r3, #12]
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	69ba      	ldr	r2, [r7, #24]
 80148be:	611a      	str	r2, [r3, #16]
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	2200      	movs	r2, #0
 80148c4:	615a      	str	r2, [r3, #20]
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	2200      	movs	r2, #0
 80148ca:	761a      	strb	r2, [r3, #24]
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	2200      	movs	r2, #0
 80148d0:	765a      	strb	r2, [r3, #25]
{
}
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	4618      	mov	r0, r3
 80148d6:	3714      	adds	r7, #20
 80148d8:	46bd      	mov	sp, r7
 80148da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148de:	4770      	bx	lr
 80148e0:	0802af8c 	.word	0x0802af8c

080148e4 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 80148e4:	b480      	push	{r7}
 80148e6:	b083      	sub	sp, #12
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
 80148ec:	4a04      	ldr	r2, [pc, #16]	; (8014900 <_ZN10UtestShellD1Ev+0x1c>)
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	601a      	str	r2, [r3, #0]
{
}
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	4618      	mov	r0, r3
 80148f6:	370c      	adds	r7, #12
 80148f8:	46bd      	mov	sp, r7
 80148fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148fe:	4770      	bx	lr
 8014900:	0802af8c 	.word	0x0802af8c

08014904 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 8014904:	b580      	push	{r7, lr}
 8014906:	b082      	sub	sp, #8
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
}
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f7ff ffe9 	bl	80148e4 <_ZN10UtestShellD1Ev>
 8014912:	211c      	movs	r1, #28
 8014914:	6878      	ldr	r0, [r7, #4]
 8014916:	f7f7 fbb7 	bl	800c088 <_ZdlPvj>
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	4618      	mov	r0, r3
 801491e:	3708      	adds	r7, #8
 8014920:	46bd      	mov	sp, r7
 8014922:	bd80      	pop	{r7, pc}

08014924 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 8014924:	b580      	push	{r7, lr}
 8014926:	b082      	sub	sp, #8
 8014928:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 801492a:	2300      	movs	r3, #0
 801492c:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	3310      	adds	r3, #16
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	6878      	ldr	r0, [r7, #4]
 8014938:	4798      	blx	r3
}
 801493a:	bf00      	nop
 801493c:	3708      	adds	r7, #8
 801493e:	46bd      	mov	sp, r7
 8014940:	bd80      	pop	{r7, pc}
	...

08014944 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 8014944:	b580      	push	{r7, lr}
 8014946:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 8014948:	4b02      	ldr	r3, [pc, #8]	; (8014954 <_ZN10UtestShell5crashEv+0x10>)
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	4798      	blx	r3
}
 801494e:	bf00      	nop
 8014950:	bd80      	pop	{r7, pc}
 8014952:	bf00      	nop
 8014954:	20000098 	.word	0x20000098

08014958 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b088      	sub	sp, #32
 801495c:	af00      	add	r7, sp, #0
 801495e:	60f8      	str	r0, [r7, #12]
 8014960:	60b9      	str	r1, [r7, #8]
 8014962:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	2200      	movs	r2, #0
 8014968:	765a      	strb	r2, [r3, #25]
    result.countRun();
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	3324      	adds	r3, #36	; 0x24
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	6878      	ldr	r0, [r7, #4]
 8014974:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 8014976:	f107 0014 	add.w	r0, r7, #20
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	68ba      	ldr	r2, [r7, #8]
 801497e:	68f9      	ldr	r1, [r7, #12]
 8014980:	f7ff ff0e 	bl	80147a0 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	337c      	adds	r3, #124	; 0x7c
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	68f8      	ldr	r0, [r7, #12]
 801498e:	4798      	blx	r3
 8014990:	4603      	mov	r3, r0
 8014992:	2b00      	cmp	r3, #0
 8014994:	d007      	beq.n	80149a6 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 8014996:	4b09      	ldr	r3, [pc, #36]	; (80149bc <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	f107 0214 	add.w	r2, r7, #20
 801499e:	4611      	mov	r1, r2
 80149a0:	4807      	ldr	r0, [pc, #28]	; (80149c0 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 80149a2:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 80149a4:	e006      	b.n	80149b4 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 80149a6:	4b05      	ldr	r3, [pc, #20]	; (80149bc <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	f107 0214 	add.w	r2, r7, #20
 80149ae:	4611      	mov	r1, r2
 80149b0:	4804      	ldr	r0, [pc, #16]	; (80149c4 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 80149b2:	4798      	blx	r3
}
 80149b4:	bf00      	nop
 80149b6:	3720      	adds	r7, #32
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}
 80149bc:	200000a4 	.word	0x200000a4
 80149c0:	08014805 	.word	0x08014805
 80149c4:	080147cf 	.word	0x080147cf

080149c8 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 80149c8:	b590      	push	{r4, r7, lr}
 80149ca:	b083      	sub	sp, #12
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
    return new Utest();
 80149d0:	22d3      	movs	r2, #211	; 0xd3
 80149d2:	4906      	ldr	r1, [pc, #24]	; (80149ec <_ZN10UtestShell10createTestEv+0x24>)
 80149d4:	2004      	movs	r0, #4
 80149d6:	f7f7 fb43 	bl	800c060 <_ZnwjPKci>
 80149da:	4604      	mov	r4, r0
 80149dc:	4620      	mov	r0, r4
 80149de:	f001 fb0f 	bl	8016000 <_ZN5UtestC1Ev>
 80149e2:	4623      	mov	r3, r4
}
 80149e4:	4618      	mov	r0, r3
 80149e6:	370c      	adds	r7, #12
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd90      	pop	{r4, r7, pc}
 80149ec:	08027220 	.word	0x08027220

080149f0 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b082      	sub	sp, #8
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
 80149f8:	6039      	str	r1, [r7, #0]
    delete test;
 80149fa:	683b      	ldr	r3, [r7, #0]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d004      	beq.n	8014a0a <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 8014a00:	681a      	ldr	r2, [r3, #0]
 8014a02:	3204      	adds	r2, #4
 8014a04:	6812      	ldr	r2, [r2, #0]
 8014a06:	4618      	mov	r0, r3
 8014a08:	4790      	blx	r2
}
 8014a0a:	bf00      	nop
 8014a0c:	3708      	adds	r7, #8
 8014a0e:	46bd      	mov	sp, r7
 8014a10:	bd80      	pop	{r7, pc}
	...

08014a14 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b088      	sub	sp, #32
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	60f8      	str	r0, [r7, #12]
 8014a1c:	60b9      	str	r1, [r7, #8]
 8014a1e:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	333c      	adds	r3, #60	; 0x3c
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	4940      	ldr	r1, [pc, #256]	; (8014b2c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 8014a2a:	6878      	ldr	r0, [r7, #4]
 8014a2c:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 8014a2e:	68bb      	ldr	r3, [r7, #8]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	3314      	adds	r3, #20
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	687a      	ldr	r2, [r7, #4]
 8014a38:	68f9      	ldr	r1, [r7, #12]
 8014a3a:	68b8      	ldr	r0, [r7, #8]
 8014a3c:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	333c      	adds	r3, #60	; 0x3c
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	493a      	ldr	r1, [pc, #232]	; (8014b30 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 8014a48:	6878      	ldr	r0, [r7, #4]
 8014a4a:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 8014a4c:	f001 faae 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 8014a50:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 8014a52:	68f8      	ldr	r0, [r7, #12]
 8014a54:	f001 fa90 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 8014a58:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 8014a5a:	6879      	ldr	r1, [r7, #4]
 8014a5c:	68f8      	ldr	r0, [r7, #12]
 8014a5e:	f001 fa6b 	bl	8015f38 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 8014a62:	68f9      	ldr	r1, [r7, #12]
 8014a64:	68f8      	ldr	r0, [r7, #12]
 8014a66:	f001 fa77 	bl	8015f58 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	333c      	adds	r3, #60	; 0x3c
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	4930      	ldr	r1, [pc, #192]	; (8014b34 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 8014a74:	6878      	ldr	r0, [r7, #4]
 8014a76:	4798      	blx	r3
    Utest* testToRun = createTest();
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	3388      	adds	r3, #136	; 0x88
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	68f8      	ldr	r0, [r7, #12]
 8014a82:	4798      	blx	r3
 8014a84:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	333c      	adds	r3, #60	; 0x3c
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	492a      	ldr	r1, [pc, #168]	; (8014b38 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 8014a90:	6878      	ldr	r0, [r7, #4]
 8014a92:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	333c      	adds	r3, #60	; 0x3c
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	4927      	ldr	r1, [pc, #156]	; (8014b3c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 8014a9e:	6878      	ldr	r0, [r7, #4]
 8014aa0:	4798      	blx	r3
    testToRun->run();
 8014aa2:	697b      	ldr	r3, [r7, #20]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	3308      	adds	r3, #8
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	6978      	ldr	r0, [r7, #20]
 8014aac:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	333c      	adds	r3, #60	; 0x3c
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	4922      	ldr	r1, [pc, #136]	; (8014b40 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 8014ab8:	6878      	ldr	r0, [r7, #4]
 8014aba:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 8014abc:	69f9      	ldr	r1, [r7, #28]
 8014abe:	68f8      	ldr	r0, [r7, #12]
 8014ac0:	f001 fa4a 	bl	8015f58 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 8014ac4:	69b9      	ldr	r1, [r7, #24]
 8014ac6:	68f8      	ldr	r0, [r7, #12]
 8014ac8:	f001 fa36 	bl	8015f38 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	333c      	adds	r3, #60	; 0x3c
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	491b      	ldr	r1, [pc, #108]	; (8014b44 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 8014ad6:	6878      	ldr	r0, [r7, #4]
 8014ad8:	4798      	blx	r3
    destroyTest(testToRun);
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	338c      	adds	r3, #140	; 0x8c
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	6979      	ldr	r1, [r7, #20]
 8014ae4:	68f8      	ldr	r0, [r7, #12]
 8014ae6:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	333c      	adds	r3, #60	; 0x3c
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	4915      	ldr	r1, [pc, #84]	; (8014b48 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 8014af2:	6878      	ldr	r0, [r7, #4]
 8014af4:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	333c      	adds	r3, #60	; 0x3c
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	4913      	ldr	r1, [pc, #76]	; (8014b4c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 8014b00:	6878      	ldr	r0, [r7, #4]
 8014b02:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 8014b04:	68bb      	ldr	r3, [r7, #8]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	3318      	adds	r3, #24
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	687a      	ldr	r2, [r7, #4]
 8014b0e:	68f9      	ldr	r1, [r7, #12]
 8014b10:	68b8      	ldr	r0, [r7, #8]
 8014b12:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	333c      	adds	r3, #60	; 0x3c
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	490c      	ldr	r1, [pc, #48]	; (8014b50 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 8014b1e:	6878      	ldr	r0, [r7, #4]
 8014b20:	4798      	blx	r3
}
 8014b22:	bf00      	nop
 8014b24:	3720      	adds	r7, #32
 8014b26:	46bd      	mov	sp, r7
 8014b28:	bd80      	pop	{r7, pc}
 8014b2a:	bf00      	nop
 8014b2c:	08027234 	.word	0x08027234
 8014b30:	08027258 	.word	0x08027258
 8014b34:	08027278 	.word	0x08027278
 8014b38:	08027294 	.word	0x08027294
 8014b3c:	080272b0 	.word	0x080272b0
 8014b40:	080272cc 	.word	0x080272cc
 8014b44:	080272e4 	.word	0x080272e4
 8014b48:	08027300 	.word	0x08027300
 8014b4c:	0802731c 	.word	0x0802731c
 8014b50:	08027340 	.word	0x08027340

08014b54 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 8014b54:	b480      	push	{r7}
 8014b56:	b083      	sub	sp, #12
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
    return next_;
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	695b      	ldr	r3, [r3, #20]
}
 8014b60:	4618      	mov	r0, r3
 8014b62:	370c      	adds	r7, #12
 8014b64:	46bd      	mov	sp, r7
 8014b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6a:	4770      	bx	lr

08014b6c <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 8014b6c:	b480      	push	{r7}
 8014b6e:	b083      	sub	sp, #12
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
 8014b74:	6039      	str	r1, [r7, #0]
    next_ = test;
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	683a      	ldr	r2, [r7, #0]
 8014b7a:	615a      	str	r2, [r3, #20]
    return this;
 8014b7c:	687b      	ldr	r3, [r7, #4]
}
 8014b7e:	4618      	mov	r0, r3
 8014b80:	370c      	adds	r7, #12
 8014b82:	46bd      	mov	sp, r7
 8014b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b88:	4770      	bx	lr

08014b8a <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 8014b8a:	b580      	push	{r7, lr}
 8014b8c:	b082      	sub	sp, #8
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	695b      	ldr	r3, [r3, #20]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d00b      	beq.n	8014bb2 <_ZN10UtestShell10countTestsEv+0x28>
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	695a      	ldr	r2, [r3, #20]
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	695b      	ldr	r3, [r3, #20]
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	3310      	adds	r3, #16
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	4610      	mov	r0, r2
 8014baa:	4798      	blx	r3
 8014bac:	4603      	mov	r3, r0
 8014bae:	3301      	adds	r3, #1
 8014bb0:	e000      	b.n	8014bb4 <_ZN10UtestShell10countTestsEv+0x2a>
 8014bb2:	2301      	movs	r3, #1
}
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	3708      	adds	r7, #8
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	bd80      	pop	{r7, pc}

08014bbc <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b082      	sub	sp, #8
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
 8014bc4:	6039      	str	r1, [r7, #0]
    return "TEST";
 8014bc6:	4904      	ldr	r1, [pc, #16]	; (8014bd8 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 8014bc8:	6878      	ldr	r0, [r7, #4]
 8014bca:	f7f9 fe0c 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
}
 8014bce:	6878      	ldr	r0, [r7, #4]
 8014bd0:	3708      	adds	r7, #8
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bd80      	pop	{r7, pc}
 8014bd6:	bf00      	nop
 8014bd8:	08027364 	.word	0x08027364

08014bdc <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b082      	sub	sp, #8
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
 8014be4:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 8014be6:	683b      	ldr	r3, [r7, #0]
 8014be8:	689b      	ldr	r3, [r3, #8]
 8014bea:	4619      	mov	r1, r3
 8014bec:	6878      	ldr	r0, [r7, #4]
 8014bee:	f7f9 fdfa 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
}
 8014bf2:	6878      	ldr	r0, [r7, #4]
 8014bf4:	3708      	adds	r7, #8
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}

08014bfa <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 8014bfa:	b580      	push	{r7, lr}
 8014bfc:	b082      	sub	sp, #8
 8014bfe:	af00      	add	r7, sp, #0
 8014c00:	6078      	str	r0, [r7, #4]
 8014c02:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 8014c04:	683b      	ldr	r3, [r7, #0]
 8014c06:	685b      	ldr	r3, [r3, #4]
 8014c08:	4619      	mov	r1, r3
 8014c0a:	6878      	ldr	r0, [r7, #4]
 8014c0c:	f7f9 fdeb 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
}
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	3708      	adds	r7, #8
 8014c14:	46bd      	mov	sp, r7
 8014c16:	bd80      	pop	{r7, pc}

08014c18 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b082      	sub	sp, #8
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
 8014c20:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 8014c22:	683b      	ldr	r3, [r7, #0]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	33a0      	adds	r3, #160	; 0xa0
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	687a      	ldr	r2, [r7, #4]
 8014c2c:	6839      	ldr	r1, [r7, #0]
 8014c2e:	4610      	mov	r0, r2
 8014c30:	4798      	blx	r3
    formattedName += "(";
 8014c32:	490e      	ldr	r1, [pc, #56]	; (8014c6c <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 8014c34:	6878      	ldr	r0, [r7, #4]
 8014c36:	f7fa fa1d 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 8014c3a:	683b      	ldr	r3, [r7, #0]
 8014c3c:	685b      	ldr	r3, [r3, #4]
 8014c3e:	4619      	mov	r1, r3
 8014c40:	6878      	ldr	r0, [r7, #4]
 8014c42:	f7fa fa17 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 8014c46:	490a      	ldr	r1, [pc, #40]	; (8014c70 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 8014c48:	6878      	ldr	r0, [r7, #4]
 8014c4a:	f7fa fa13 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 8014c4e:	683b      	ldr	r3, [r7, #0]
 8014c50:	689b      	ldr	r3, [r3, #8]
 8014c52:	4619      	mov	r1, r3
 8014c54:	6878      	ldr	r0, [r7, #4]
 8014c56:	f7fa fa0d 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 8014c5a:	4906      	ldr	r1, [pc, #24]	; (8014c74 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 8014c5c:	6878      	ldr	r0, [r7, #4]
 8014c5e:	f7fa fa09 	bl	800f074 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 8014c62:	bf00      	nop
}
 8014c64:	6878      	ldr	r0, [r7, #4]
 8014c66:	3708      	adds	r7, #8
 8014c68:	46bd      	mov	sp, r7
 8014c6a:	bd80      	pop	{r7, pc}
 8014c6c:	0802736c 	.word	0x0802736c
 8014c70:	08027370 	.word	0x08027370
 8014c74:	08027374 	.word	0x08027374

08014c78 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 8014c78:	b480      	push	{r7}
 8014c7a:	b083      	sub	sp, #12
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	7e5b      	ldrb	r3, [r3, #25]
}
 8014c84:	4618      	mov	r0, r3
 8014c86:	370c      	adds	r7, #12
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c8e:	4770      	bx	lr

08014c90 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b082      	sub	sp, #8
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 8014c98:	6878      	ldr	r0, [r7, #4]
 8014c9a:	f001 f96d 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	681a      	ldr	r2, [r3, #0]
 8014ca2:	3228      	adds	r2, #40	; 0x28
 8014ca4:	6812      	ldr	r2, [r2, #0]
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	4790      	blx	r2
}
 8014caa:	bf00      	nop
 8014cac:	3708      	adds	r7, #8
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	bd80      	pop	{r7, pc}

08014cb2 <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 8014cb2:	b480      	push	{r7}
 8014cb4:	b083      	sub	sp, #12
 8014cb6:	af00      	add	r7, sp, #0
 8014cb8:	6078      	str	r0, [r7, #4]
    return true;
 8014cba:	2301      	movs	r3, #1
}
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	370c      	adds	r7, #12
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc6:	4770      	bx	lr

08014cc8 <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 8014cc8:	b480      	push	{r7}
 8014cca:	b083      	sub	sp, #12
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	7e1b      	ldrb	r3, [r3, #24]
}
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	370c      	adds	r7, #12
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cde:	4770      	bx	lr

08014ce0 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 8014ce0:	b480      	push	{r7}
 8014ce2:	b083      	sub	sp, #12
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	2201      	movs	r2, #1
 8014cec:	761a      	strb	r2, [r3, #24]
}
 8014cee:	bf00      	nop
 8014cf0:	370c      	adds	r7, #12
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf8:	4770      	bx	lr

08014cfa <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 8014cfa:	b480      	push	{r7}
 8014cfc:	b083      	sub	sp, #12
 8014cfe:	af00      	add	r7, sp, #0
 8014d00:	6078      	str	r0, [r7, #4]

}
 8014d02:	bf00      	nop
 8014d04:	370c      	adds	r7, #12
 8014d06:	46bd      	mov	sp, r7
 8014d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0c:	4770      	bx	lr

08014d0e <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 8014d0e:	b480      	push	{r7}
 8014d10:	b083      	sub	sp, #12
 8014d12:	af00      	add	r7, sp, #0
 8014d14:	6078      	str	r0, [r7, #4]
 8014d16:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	683a      	ldr	r2, [r7, #0]
 8014d1c:	60da      	str	r2, [r3, #12]
}
 8014d1e:	bf00      	nop
 8014d20:	370c      	adds	r7, #12
 8014d22:	46bd      	mov	sp, r7
 8014d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d28:	4770      	bx	lr

08014d2a <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 8014d2a:	b480      	push	{r7}
 8014d2c:	b083      	sub	sp, #12
 8014d2e:	af00      	add	r7, sp, #0
 8014d30:	6078      	str	r0, [r7, #4]
 8014d32:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	683a      	ldr	r2, [r7, #0]
 8014d38:	611a      	str	r2, [r3, #16]
}
 8014d3a:	bf00      	nop
 8014d3c:	370c      	adds	r7, #12
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d44:	4770      	bx	lr

08014d46 <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 8014d46:	b480      	push	{r7}
 8014d48:	b083      	sub	sp, #12
 8014d4a:	af00      	add	r7, sp, #0
 8014d4c:	6078      	str	r0, [r7, #4]
 8014d4e:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	683a      	ldr	r2, [r7, #0]
 8014d54:	605a      	str	r2, [r3, #4]
}
 8014d56:	bf00      	nop
 8014d58:	370c      	adds	r7, #12
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d60:	4770      	bx	lr

08014d62 <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 8014d62:	b480      	push	{r7}
 8014d64:	b083      	sub	sp, #12
 8014d66:	af00      	add	r7, sp, #0
 8014d68:	6078      	str	r0, [r7, #4]
 8014d6a:	6039      	str	r1, [r7, #0]
    name_ = testName;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	683a      	ldr	r2, [r7, #0]
 8014d70:	609a      	str	r2, [r3, #8]
}
 8014d72:	bf00      	nop
 8014d74:	370c      	adds	r7, #12
 8014d76:	46bd      	mov	sp, r7
 8014d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7c:	4770      	bx	lr

08014d7e <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 8014d7e:	b580      	push	{r7, lr}
 8014d80:	b082      	sub	sp, #8
 8014d82:	af00      	add	r7, sp, #0
 8014d84:	6078      	str	r0, [r7, #4]
 8014d86:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	68db      	ldr	r3, [r3, #12]
 8014d8c:	4619      	mov	r1, r3
 8014d8e:	6878      	ldr	r0, [r7, #4]
 8014d90:	f7f9 fd29 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
}
 8014d94:	6878      	ldr	r0, [r7, #4]
 8014d96:	3708      	adds	r7, #8
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}

08014d9c <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 8014d9c:	b480      	push	{r7}
 8014d9e:	b083      	sub	sp, #12
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	691b      	ldr	r3, [r3, #16]
}
 8014da8:	4618      	mov	r0, r3
 8014daa:	370c      	adds	r7, #12
 8014dac:	46bd      	mov	sp, r7
 8014dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db2:	4770      	bx	lr

08014db4 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 8014db4:	b590      	push	{r4, r7, lr}
 8014db6:	b087      	sub	sp, #28
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	60f8      	str	r0, [r7, #12]
 8014dbc:	60b9      	str	r1, [r7, #8]
 8014dbe:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d101      	bne.n	8014dca <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 8014dc6:	2301      	movs	r3, #1
 8014dc8:	e01f      	b.n	8014e0a <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d01b      	beq.n	8014e08 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 8014dd0:	f107 0310 	add.w	r3, r7, #16
 8014dd4:	68b9      	ldr	r1, [r7, #8]
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	f7f9 fd05 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8014ddc:	f107 0310 	add.w	r3, r7, #16
 8014de0:	4619      	mov	r1, r3
 8014de2:	6878      	ldr	r0, [r7, #4]
 8014de4:	f00c fb93 	bl	802150e <_ZNK10TestFilter5matchERK12SimpleString>
 8014de8:	4603      	mov	r3, r0
 8014dea:	461c      	mov	r4, r3
 8014dec:	f107 0310 	add.w	r3, r7, #16
 8014df0:	4618      	mov	r0, r3
 8014df2:	f7fa f8b0 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8014df6:	2c00      	cmp	r4, #0
 8014df8:	d001      	beq.n	8014dfe <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 8014dfa:	2301      	movs	r3, #1
 8014dfc:	e005      	b.n	8014e0a <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 8014dfe:	6878      	ldr	r0, [r7, #4]
 8014e00:	f00c fb5f 	bl	80214c2 <_ZNK10TestFilter7getNextEv>
 8014e04:	6078      	str	r0, [r7, #4]
 8014e06:	e7e0      	b.n	8014dca <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 8014e08:	2300      	movs	r3, #0
}
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	371c      	adds	r7, #28
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	bd90      	pop	{r4, r7, pc}

08014e12 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 8014e12:	b580      	push	{r7, lr}
 8014e14:	b084      	sub	sp, #16
 8014e16:	af00      	add	r7, sp, #0
 8014e18:	60f8      	str	r0, [r7, #12]
 8014e1a:	60b9      	str	r1, [r7, #8]
 8014e1c:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	685b      	ldr	r3, [r3, #4]
 8014e22:	68ba      	ldr	r2, [r7, #8]
 8014e24:	4619      	mov	r1, r3
 8014e26:	68f8      	ldr	r0, [r7, #12]
 8014e28:	f7ff ffc4 	bl	8014db4 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8014e2c:	4603      	mov	r3, r0
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d00b      	beq.n	8014e4a <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	689b      	ldr	r3, [r3, #8]
 8014e36:	687a      	ldr	r2, [r7, #4]
 8014e38:	4619      	mov	r1, r3
 8014e3a:	68f8      	ldr	r0, [r7, #12]
 8014e3c:	f7ff ffba 	bl	8014db4 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8014e40:	4603      	mov	r3, r0
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d001      	beq.n	8014e4a <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8014e46:	2301      	movs	r3, #1
 8014e48:	e000      	b.n	8014e4c <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 8014e4a:	2300      	movs	r3, #0
}
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	3710      	adds	r7, #16
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd80      	pop	{r7, pc}

08014e54 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 8014e54:	b590      	push	{r4, r7, lr}
 8014e56:	b083      	sub	sp, #12
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
 8014e5c:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	339c      	adds	r3, #156	; 0x9c
 8014e64:	681c      	ldr	r4, [r3, #0]
 8014e66:	f001 f8b1 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	461a      	mov	r2, r3
 8014e6e:	6839      	ldr	r1, [r7, #0]
 8014e70:	6878      	ldr	r0, [r7, #4]
 8014e72:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 8014e74:	bf00      	nop
 8014e76:	370c      	adds	r7, #12
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	bd90      	pop	{r4, r7, pc}

08014e7c <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b084      	sub	sp, #16
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	60f8      	str	r0, [r7, #12]
 8014e84:	60b9      	str	r1, [r7, #8]
 8014e86:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	2201      	movs	r2, #1
 8014e8c:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 8014e8e:	68f8      	ldr	r0, [r7, #12]
 8014e90:	f001 f872 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 8014e94:	4603      	mov	r3, r0
 8014e96:	681a      	ldr	r2, [r3, #0]
 8014e98:	3234      	adds	r2, #52	; 0x34
 8014e9a:	6812      	ldr	r2, [r2, #0]
 8014e9c:	68b9      	ldr	r1, [r7, #8]
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	4790      	blx	r2
    terminator.exitCurrentTest();
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	6878      	ldr	r0, [r7, #4]
 8014eaa:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8014eac:	bf00      	nop
 8014eae:	3710      	adds	r7, #16
 8014eb0:	46bd      	mov	sp, r7
 8014eb2:	bd80      	pop	{r7, pc}

08014eb4 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b082      	sub	sp, #8
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
 8014ebc:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 8014ebe:	683b      	ldr	r3, [r7, #0]
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	6838      	ldr	r0, [r7, #0]
 8014ec6:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8014ec8:	bf00      	nop
 8014eca:	3708      	adds	r7, #8
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}

08014ed0 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014ed0:	b590      	push	{r4, r7, lr}
 8014ed2:	b09d      	sub	sp, #116	; 0x74
 8014ed4:	af04      	add	r7, sp, #16
 8014ed6:	60f8      	str	r0, [r7, #12]
 8014ed8:	607a      	str	r2, [r7, #4]
 8014eda:	603b      	str	r3, [r7, #0]
 8014edc:	460b      	mov	r3, r1
 8014ede:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8014ee0:	68f8      	ldr	r0, [r7, #12]
 8014ee2:	f001 f849 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	681a      	ldr	r2, [r3, #0]
 8014eea:	3228      	adds	r2, #40	; 0x28
 8014eec:	6812      	ldr	r2, [r2, #0]
 8014eee:	4618      	mov	r0, r3
 8014ef0:	4790      	blx	r2
    if (!condition)
 8014ef2:	7afb      	ldrb	r3, [r7, #11]
 8014ef4:	f083 0301 	eor.w	r3, r3, #1
 8014ef8:	b2db      	uxtb	r3, r3
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d03f      	beq.n	8014f7e <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	339c      	adds	r3, #156	; 0x9c
 8014f04:	681c      	ldr	r4, [r3, #0]
 8014f06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014f0a:	6879      	ldr	r1, [r7, #4]
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	f7f9 fc6a 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8014f12:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014f16:	6839      	ldr	r1, [r7, #0]
 8014f18:	4618      	mov	r0, r3
 8014f1a:	f7f9 fc64 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8014f1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014f22:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014f24:	4618      	mov	r0, r3
 8014f26:	f7f9 fc5e 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8014f2a:	f107 0014 	add.w	r0, r7, #20
 8014f2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014f32:	9302      	str	r3, [sp, #8]
 8014f34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014f38:	9301      	str	r3, [sp, #4]
 8014f3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014f3e:	9300      	str	r3, [sp, #0]
 8014f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014f42:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014f44:	68f9      	ldr	r1, [r7, #12]
 8014f46:	f7fb ff6b 	bl	8010e20 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8014f4a:	f107 0314 	add.w	r3, r7, #20
 8014f4e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014f50:	4619      	mov	r1, r3
 8014f52:	68f8      	ldr	r0, [r7, #12]
 8014f54:	47a0      	blx	r4
 8014f56:	f107 0314 	add.w	r3, r7, #20
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f7fc fdce 	bl	8011afc <_ZN12CheckFailureD1Ev>
 8014f60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014f64:	4618      	mov	r0, r3
 8014f66:	f7f9 fff6 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8014f6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f7f9 fff1 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8014f74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014f78:	4618      	mov	r0, r3
 8014f7a:	f7f9 ffec 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8014f7e:	bf00      	nop
 8014f80:	3764      	adds	r7, #100	; 0x64
 8014f82:	46bd      	mov	sp, r7
 8014f84:	bd90      	pop	{r4, r7, pc}

08014f86 <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014f86:	b590      	push	{r4, r7, lr}
 8014f88:	b097      	sub	sp, #92	; 0x5c
 8014f8a:	af02      	add	r7, sp, #8
 8014f8c:	60f8      	str	r0, [r7, #12]
 8014f8e:	60b9      	str	r1, [r7, #8]
 8014f90:	607a      	str	r2, [r7, #4]
 8014f92:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014f94:	68f8      	ldr	r0, [r7, #12]
 8014f96:	f000 ffef 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	681a      	ldr	r2, [r3, #0]
 8014f9e:	3228      	adds	r2, #40	; 0x28
 8014fa0:	6812      	ldr	r2, [r2, #0]
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	339c      	adds	r3, #156	; 0x9c
 8014fac:	681c      	ldr	r4, [r3, #0]
 8014fae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014fb2:	68b9      	ldr	r1, [r7, #8]
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f7f9 fc16 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8014fba:	f107 0014 	add.w	r0, r7, #20
 8014fbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014fc2:	9300      	str	r3, [sp, #0]
 8014fc4:	683b      	ldr	r3, [r7, #0]
 8014fc6:	687a      	ldr	r2, [r7, #4]
 8014fc8:	68f9      	ldr	r1, [r7, #12]
 8014fca:	f7fb ff71 	bl	8010eb0 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8014fce:	f107 0314 	add.w	r3, r7, #20
 8014fd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014fd4:	4619      	mov	r1, r3
 8014fd6:	68f8      	ldr	r0, [r7, #12]
 8014fd8:	47a0      	blx	r4
 8014fda:	f107 0314 	add.w	r3, r7, #20
 8014fde:	4618      	mov	r0, r3
 8014fe0:	f7f7 fc16 	bl	800c810 <_ZN11FailFailureD1Ev>
 8014fe4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014fe8:	4618      	mov	r0, r3
 8014fea:	f7f9 ffb4 	bl	800ef56 <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 8014fee:	bf00      	nop
 8014ff0:	3754      	adds	r7, #84	; 0x54
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd90      	pop	{r4, r7, pc}

08014ff6 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014ff6:	b590      	push	{r4, r7, lr}
 8014ff8:	b0a7      	sub	sp, #156	; 0x9c
 8014ffa:	af04      	add	r7, sp, #16
 8014ffc:	60f8      	str	r0, [r7, #12]
 8014ffe:	60b9      	str	r1, [r7, #8]
 8015000:	607a      	str	r2, [r7, #4]
 8015002:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8015004:	68f8      	ldr	r0, [r7, #12]
 8015006:	f000 ffb7 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 801500a:	4603      	mov	r3, r0
 801500c:	681a      	ldr	r2, [r3, #0]
 801500e:	3228      	adds	r2, #40	; 0x28
 8015010:	6812      	ldr	r2, [r2, #0]
 8015012:	4618      	mov	r0, r3
 8015014:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d102      	bne.n	8015022 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 801501c:	68bb      	ldr	r3, [r7, #8]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d068      	beq.n	80150f4 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d002      	beq.n	801502e <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 8015028:	68bb      	ldr	r3, [r7, #8]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d12a      	bne.n	8015084 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	339c      	adds	r3, #156	; 0x9c
 8015034:	681c      	ldr	r4, [r3, #0]
 8015036:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801503a:	6839      	ldr	r1, [r7, #0]
 801503c:	4618      	mov	r0, r3
 801503e:	f7f9 fbd2 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015042:	f107 0010 	add.w	r0, r7, #16
 8015046:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801504a:	9302      	str	r3, [sp, #8]
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	9301      	str	r3, [sp, #4]
 8015050:	68bb      	ldr	r3, [r7, #8]
 8015052:	9300      	str	r3, [sp, #0]
 8015054:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015058:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801505c:	68f9      	ldr	r1, [r7, #12]
 801505e:	f7fc f9ad 	bl	80113bc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8015062:	f107 0310 	add.w	r3, r7, #16
 8015066:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801506a:	4619      	mov	r1, r3
 801506c:	68f8      	ldr	r0, [r7, #12]
 801506e:	47a0      	blx	r4
 8015070:	f107 0310 	add.w	r3, r7, #16
 8015074:	4618      	mov	r0, r3
 8015076:	f7fc fcb9 	bl	80119ec <_ZN18StringEqualFailureD1Ev>
 801507a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801507e:	4618      	mov	r0, r3
 8015080:	f7f9 ff69 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 8015084:	6879      	ldr	r1, [r7, #4]
 8015086:	68b8      	ldr	r0, [r7, #8]
 8015088:	f7f9 f9ea 	bl	800e460 <_ZN12SimpleString6StrCmpEPKcS1_>
 801508c:	4603      	mov	r3, r0
 801508e:	2b00      	cmp	r3, #0
 8015090:	bf14      	ite	ne
 8015092:	2301      	movne	r3, #1
 8015094:	2300      	moveq	r3, #0
 8015096:	b2db      	uxtb	r3, r3
 8015098:	2b00      	cmp	r3, #0
 801509a:	d02c      	beq.n	80150f6 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	339c      	adds	r3, #156	; 0x9c
 80150a2:	681c      	ldr	r4, [r3, #0]
 80150a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80150a8:	6839      	ldr	r1, [r7, #0]
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7f9 fb9b 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80150b0:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80150b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80150b8:	9302      	str	r3, [sp, #8]
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	9301      	str	r3, [sp, #4]
 80150be:	68bb      	ldr	r3, [r7, #8]
 80150c0:	9300      	str	r3, [sp, #0]
 80150c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80150c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80150ca:	68f9      	ldr	r1, [r7, #12]
 80150cc:	f7fc f976 	bl	80113bc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80150d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80150d4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80150d8:	4619      	mov	r1, r3
 80150da:	68f8      	ldr	r0, [r7, #12]
 80150dc:	47a0      	blx	r4
 80150de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80150e2:	4618      	mov	r0, r3
 80150e4:	f7fc fc82 	bl	80119ec <_ZN18StringEqualFailureD1Ev>
 80150e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80150ec:	4618      	mov	r0, r3
 80150ee:	f7f9 ff32 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80150f2:	e000      	b.n	80150f6 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80150f4:	bf00      	nop
}
 80150f6:	378c      	adds	r7, #140	; 0x8c
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd90      	pop	{r4, r7, pc}

080150fc <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80150fc:	b590      	push	{r4, r7, lr}
 80150fe:	b0a7      	sub	sp, #156	; 0x9c
 8015100:	af04      	add	r7, sp, #16
 8015102:	60f8      	str	r0, [r7, #12]
 8015104:	60b9      	str	r1, [r7, #8]
 8015106:	607a      	str	r2, [r7, #4]
 8015108:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801510a:	68f8      	ldr	r0, [r7, #12]
 801510c:	f000 ff34 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 8015110:	4603      	mov	r3, r0
 8015112:	681a      	ldr	r2, [r3, #0]
 8015114:	3228      	adds	r2, #40	; 0x28
 8015116:	6812      	ldr	r2, [r2, #0]
 8015118:	4618      	mov	r0, r3
 801511a:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d102      	bne.n	8015128 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 8015122:	68bb      	ldr	r3, [r7, #8]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d06b      	beq.n	8015200 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d002      	beq.n	8015134 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 801512e:	68bb      	ldr	r3, [r7, #8]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d12b      	bne.n	801518c <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	339c      	adds	r3, #156	; 0x9c
 801513a:	681c      	ldr	r4, [r3, #0]
 801513c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015140:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8015144:	4618      	mov	r0, r3
 8015146:	f7f9 fb4e 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801514a:	f107 0010 	add.w	r0, r7, #16
 801514e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015152:	9302      	str	r3, [sp, #8]
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	9301      	str	r3, [sp, #4]
 8015158:	68bb      	ldr	r3, [r7, #8]
 801515a:	9300      	str	r3, [sp, #0]
 801515c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015160:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015164:	68f9      	ldr	r1, [r7, #12]
 8015166:	f7fc f929 	bl	80113bc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801516a:	f107 0310 	add.w	r3, r7, #16
 801516e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8015172:	4619      	mov	r1, r3
 8015174:	68f8      	ldr	r0, [r7, #12]
 8015176:	47a0      	blx	r4
 8015178:	f107 0310 	add.w	r3, r7, #16
 801517c:	4618      	mov	r0, r3
 801517e:	f7fc fc35 	bl	80119ec <_ZN18StringEqualFailureD1Ev>
 8015182:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015186:	4618      	mov	r0, r3
 8015188:	f7f9 fee5 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 801518c:	683a      	ldr	r2, [r7, #0]
 801518e:	6879      	ldr	r1, [r7, #4]
 8015190:	68b8      	ldr	r0, [r7, #8]
 8015192:	f7f9 f9a4 	bl	800e4de <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8015196:	4603      	mov	r3, r0
 8015198:	2b00      	cmp	r3, #0
 801519a:	bf14      	ite	ne
 801519c:	2301      	movne	r3, #1
 801519e:	2300      	moveq	r3, #0
 80151a0:	b2db      	uxtb	r3, r3
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d02d      	beq.n	8015202 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	339c      	adds	r3, #156	; 0x9c
 80151ac:	681c      	ldr	r4, [r3, #0]
 80151ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80151b2:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80151b6:	4618      	mov	r0, r3
 80151b8:	f7f9 fb15 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80151bc:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80151c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80151c4:	9302      	str	r3, [sp, #8]
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	9301      	str	r3, [sp, #4]
 80151ca:	68bb      	ldr	r3, [r7, #8]
 80151cc:	9300      	str	r3, [sp, #0]
 80151ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80151d2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80151d6:	68f9      	ldr	r1, [r7, #12]
 80151d8:	f7fc f8f0 	bl	80113bc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80151dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80151e0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80151e4:	4619      	mov	r1, r3
 80151e6:	68f8      	ldr	r0, [r7, #12]
 80151e8:	47a0      	blx	r4
 80151ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80151ee:	4618      	mov	r0, r3
 80151f0:	f7fc fbfc 	bl	80119ec <_ZN18StringEqualFailureD1Ev>
 80151f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80151f8:	4618      	mov	r0, r3
 80151fa:	f7f9 feac 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80151fe:	e000      	b.n	8015202 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8015200:	bf00      	nop
}
 8015202:	378c      	adds	r7, #140	; 0x8c
 8015204:	46bd      	mov	sp, r7
 8015206:	bd90      	pop	{r4, r7, pc}

08015208 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8015208:	b590      	push	{r4, r7, lr}
 801520a:	b0ab      	sub	sp, #172	; 0xac
 801520c:	af04      	add	r7, sp, #16
 801520e:	60f8      	str	r0, [r7, #12]
 8015210:	60b9      	str	r1, [r7, #8]
 8015212:	607a      	str	r2, [r7, #4]
 8015214:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8015216:	68f8      	ldr	r0, [r7, #12]
 8015218:	f000 feae 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 801521c:	4603      	mov	r3, r0
 801521e:	681a      	ldr	r2, [r3, #0]
 8015220:	3228      	adds	r2, #40	; 0x28
 8015222:	6812      	ldr	r2, [r2, #0]
 8015224:	4618      	mov	r0, r3
 8015226:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d102      	bne.n	8015234 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 801522e:	68bb      	ldr	r3, [r7, #8]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d07c      	beq.n	801532e <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d002      	beq.n	8015240 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 801523a:	68bb      	ldr	r3, [r7, #8]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d128      	bne.n	8015292 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	3398      	adds	r3, #152	; 0x98
 8015246:	681c      	ldr	r4, [r3, #0]
 8015248:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801524c:	6839      	ldr	r1, [r7, #0]
 801524e:	4618      	mov	r0, r3
 8015250:	f7f9 fac9 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015254:	f107 0010 	add.w	r0, r7, #16
 8015258:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801525c:	9302      	str	r3, [sp, #8]
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	9301      	str	r3, [sp, #4]
 8015262:	68bb      	ldr	r3, [r7, #8]
 8015264:	9300      	str	r3, [sp, #0]
 8015266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801526a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801526e:	68f9      	ldr	r1, [r7, #12]
 8015270:	f7fc f948 	bl	8011504 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8015274:	f107 0310 	add.w	r3, r7, #16
 8015278:	4619      	mov	r1, r3
 801527a:	68f8      	ldr	r0, [r7, #12]
 801527c:	47a0      	blx	r4
 801527e:	f107 0310 	add.w	r3, r7, #16
 8015282:	4618      	mov	r0, r3
 8015284:	f7fc fb90 	bl	80119a8 <_ZN24StringEqualNoCaseFailureD1Ev>
 8015288:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801528c:	4618      	mov	r0, r3
 801528e:	f7f9 fe62 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 8015292:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015296:	68b9      	ldr	r1, [r7, #8]
 8015298:	4618      	mov	r0, r3
 801529a:	f7f9 faa4 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801529e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80152a2:	6879      	ldr	r1, [r7, #4]
 80152a4:	4618      	mov	r0, r3
 80152a6:	f7f9 fa9e 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80152aa:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80152ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80152b2:	4611      	mov	r1, r2
 80152b4:	4618      	mov	r0, r3
 80152b6:	f7f9 fe75 	bl	800efa4 <_ZNK12SimpleString12equalsNoCaseERKS_>
 80152ba:	4603      	mov	r3, r0
 80152bc:	f083 0301 	eor.w	r3, r3, #1
 80152c0:	b2dc      	uxtb	r4, r3
 80152c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80152c6:	4618      	mov	r0, r3
 80152c8:	f7f9 fe45 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80152cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80152d0:	4618      	mov	r0, r3
 80152d2:	f7f9 fe40 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80152d6:	2c00      	cmp	r4, #0
 80152d8:	d02a      	beq.n	8015330 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	3398      	adds	r3, #152	; 0x98
 80152e0:	681c      	ldr	r4, [r3, #0]
 80152e2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80152e6:	6839      	ldr	r1, [r7, #0]
 80152e8:	4618      	mov	r0, r3
 80152ea:	f7f9 fa7c 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80152ee:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80152f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80152f6:	9302      	str	r3, [sp, #8]
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	9301      	str	r3, [sp, #4]
 80152fc:	68bb      	ldr	r3, [r7, #8]
 80152fe:	9300      	str	r3, [sp, #0]
 8015300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015304:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8015308:	68f9      	ldr	r1, [r7, #12]
 801530a:	f7fc f8fb 	bl	8011504 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801530e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015312:	4619      	mov	r1, r3
 8015314:	68f8      	ldr	r0, [r7, #12]
 8015316:	47a0      	blx	r4
 8015318:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801531c:	4618      	mov	r0, r3
 801531e:	f7fc fb43 	bl	80119a8 <_ZN24StringEqualNoCaseFailureD1Ev>
 8015322:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8015326:	4618      	mov	r0, r3
 8015328:	f7f9 fe15 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801532c:	e000      	b.n	8015330 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801532e:	bf00      	nop
}
 8015330:	379c      	adds	r7, #156	; 0x9c
 8015332:	46bd      	mov	sp, r7
 8015334:	bd90      	pop	{r4, r7, pc}

08015336 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8015336:	b590      	push	{r4, r7, lr}
 8015338:	b0b3      	sub	sp, #204	; 0xcc
 801533a:	af04      	add	r7, sp, #16
 801533c:	60f8      	str	r0, [r7, #12]
 801533e:	60b9      	str	r1, [r7, #8]
 8015340:	607a      	str	r2, [r7, #4]
 8015342:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8015344:	68f8      	ldr	r0, [r7, #12]
 8015346:	f000 fe17 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 801534a:	4603      	mov	r3, r0
 801534c:	681a      	ldr	r2, [r3, #0]
 801534e:	3228      	adds	r2, #40	; 0x28
 8015350:	6812      	ldr	r2, [r2, #0]
 8015352:	4618      	mov	r0, r3
 8015354:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d103      	bne.n	8015364 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 801535c:	68bb      	ldr	r3, [r7, #8]
 801535e:	2b00      	cmp	r3, #0
 8015360:	f000 80ad 	beq.w	80154be <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d002      	beq.n	8015370 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 801536a:	68bb      	ldr	r3, [r7, #8]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d140      	bne.n	80153f2 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	3398      	adds	r3, #152	; 0x98
 8015376:	681c      	ldr	r4, [r3, #0]
 8015378:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801537c:	68b9      	ldr	r1, [r7, #8]
 801537e:	4618      	mov	r0, r3
 8015380:	f7f9 fa31 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015384:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015388:	6879      	ldr	r1, [r7, #4]
 801538a:	4618      	mov	r0, r3
 801538c:	f7f9 fa2b 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015390:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015394:	6839      	ldr	r1, [r7, #0]
 8015396:	4618      	mov	r0, r3
 8015398:	f7f9 fa25 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801539c:	f107 0010 	add.w	r0, r7, #16
 80153a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80153a4:	9302      	str	r3, [sp, #8]
 80153a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80153aa:	9301      	str	r3, [sp, #4]
 80153ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80153b0:	9300      	str	r3, [sp, #0]
 80153b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80153b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80153ba:	68f9      	ldr	r1, [r7, #12]
 80153bc:	f7fb fce6 	bl	8010d8c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80153c0:	f107 0310 	add.w	r3, r7, #16
 80153c4:	4619      	mov	r1, r3
 80153c6:	68f8      	ldr	r0, [r7, #12]
 80153c8:	47a0      	blx	r4
 80153ca:	f107 0310 	add.w	r3, r7, #16
 80153ce:	4618      	mov	r0, r3
 80153d0:	f7fc fbb6 	bl	8011b40 <_ZN15ContainsFailureD1Ev>
 80153d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80153d8:	4618      	mov	r0, r3
 80153da:	f7f9 fdbc 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80153de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80153e2:	4618      	mov	r0, r3
 80153e4:	f7f9 fdb7 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80153e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80153ec:	4618      	mov	r0, r3
 80153ee:	f7f9 fdb2 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 80153f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80153f6:	6879      	ldr	r1, [r7, #4]
 80153f8:	4618      	mov	r0, r3
 80153fa:	f7f9 f9f4 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80153fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015402:	68b9      	ldr	r1, [r7, #8]
 8015404:	4618      	mov	r0, r3
 8015406:	f7f9 f9ee 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801540a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801540e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015412:	4611      	mov	r1, r2
 8015414:	4618      	mov	r0, r3
 8015416:	f7f9 fa64 	bl	800e8e2 <_ZNK12SimpleString8containsERKS_>
 801541a:	4603      	mov	r3, r0
 801541c:	f083 0301 	eor.w	r3, r3, #1
 8015420:	b2dc      	uxtb	r4, r3
 8015422:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015426:	4618      	mov	r0, r3
 8015428:	f7f9 fd95 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801542c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015430:	4618      	mov	r0, r3
 8015432:	f7f9 fd90 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8015436:	2c00      	cmp	r4, #0
 8015438:	d042      	beq.n	80154c0 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	3398      	adds	r3, #152	; 0x98
 8015440:	681c      	ldr	r4, [r3, #0]
 8015442:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015446:	68b9      	ldr	r1, [r7, #8]
 8015448:	4618      	mov	r0, r3
 801544a:	f7f9 f9cc 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801544e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8015452:	6879      	ldr	r1, [r7, #4]
 8015454:	4618      	mov	r0, r3
 8015456:	f7f9 f9c6 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801545a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801545e:	6839      	ldr	r1, [r7, #0]
 8015460:	4618      	mov	r0, r3
 8015462:	f7f9 f9c0 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015466:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801546a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801546e:	9302      	str	r3, [sp, #8]
 8015470:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8015474:	9301      	str	r3, [sp, #4]
 8015476:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801547a:	9300      	str	r3, [sp, #0]
 801547c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015480:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8015484:	68f9      	ldr	r1, [r7, #12]
 8015486:	f7fb fc81 	bl	8010d8c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801548a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801548e:	4619      	mov	r1, r3
 8015490:	68f8      	ldr	r0, [r7, #12]
 8015492:	47a0      	blx	r4
 8015494:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015498:	4618      	mov	r0, r3
 801549a:	f7fc fb51 	bl	8011b40 <_ZN15ContainsFailureD1Ev>
 801549e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80154a2:	4618      	mov	r0, r3
 80154a4:	f7f9 fd57 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80154a8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80154ac:	4618      	mov	r0, r3
 80154ae:	f7f9 fd52 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80154b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80154b6:	4618      	mov	r0, r3
 80154b8:	f7f9 fd4d 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80154bc:	e000      	b.n	80154c0 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80154be:	bf00      	nop
}
 80154c0:	37bc      	adds	r7, #188	; 0xbc
 80154c2:	46bd      	mov	sp, r7
 80154c4:	bd90      	pop	{r4, r7, pc}

080154c6 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 80154c6:	b590      	push	{r4, r7, lr}
 80154c8:	b0b3      	sub	sp, #204	; 0xcc
 80154ca:	af04      	add	r7, sp, #16
 80154cc:	60f8      	str	r0, [r7, #12]
 80154ce:	60b9      	str	r1, [r7, #8]
 80154d0:	607a      	str	r2, [r7, #4]
 80154d2:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80154d4:	68f8      	ldr	r0, [r7, #12]
 80154d6:	f000 fd4f 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 80154da:	4603      	mov	r3, r0
 80154dc:	681a      	ldr	r2, [r3, #0]
 80154de:	3228      	adds	r2, #40	; 0x28
 80154e0:	6812      	ldr	r2, [r2, #0]
 80154e2:	4618      	mov	r0, r3
 80154e4:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d103      	bne.n	80154f4 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 80154ec:	68bb      	ldr	r3, [r7, #8]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	f000 80ad 	beq.w	801564e <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d002      	beq.n	8015500 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d140      	bne.n	8015582 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	3398      	adds	r3, #152	; 0x98
 8015506:	681c      	ldr	r4, [r3, #0]
 8015508:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801550c:	68b9      	ldr	r1, [r7, #8]
 801550e:	4618      	mov	r0, r3
 8015510:	f7f9 f969 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015514:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015518:	6879      	ldr	r1, [r7, #4]
 801551a:	4618      	mov	r0, r3
 801551c:	f7f9 f963 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015520:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015524:	6839      	ldr	r1, [r7, #0]
 8015526:	4618      	mov	r0, r3
 8015528:	f7f9 f95d 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801552c:	f107 0010 	add.w	r0, r7, #16
 8015530:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015534:	9302      	str	r3, [sp, #8]
 8015536:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801553a:	9301      	str	r3, [sp, #4]
 801553c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015540:	9300      	str	r3, [sp, #0]
 8015542:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015546:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801554a:	68f9      	ldr	r1, [r7, #12]
 801554c:	f7fb fc1e 	bl	8010d8c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8015550:	f107 0310 	add.w	r3, r7, #16
 8015554:	4619      	mov	r1, r3
 8015556:	68f8      	ldr	r0, [r7, #12]
 8015558:	47a0      	blx	r4
 801555a:	f107 0310 	add.w	r3, r7, #16
 801555e:	4618      	mov	r0, r3
 8015560:	f7fc faee 	bl	8011b40 <_ZN15ContainsFailureD1Ev>
 8015564:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015568:	4618      	mov	r0, r3
 801556a:	f7f9 fcf4 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801556e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015572:	4618      	mov	r0, r3
 8015574:	f7f9 fcef 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8015578:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801557c:	4618      	mov	r0, r3
 801557e:	f7f9 fcea 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 8015582:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015586:	6879      	ldr	r1, [r7, #4]
 8015588:	4618      	mov	r0, r3
 801558a:	f7f9 f92c 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801558e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015592:	68b9      	ldr	r1, [r7, #8]
 8015594:	4618      	mov	r0, r3
 8015596:	f7f9 f926 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801559a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801559e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80155a2:	4611      	mov	r1, r2
 80155a4:	4618      	mov	r0, r3
 80155a6:	f7f9 f9b7 	bl	800e918 <_ZNK12SimpleString14containsNoCaseERKS_>
 80155aa:	4603      	mov	r3, r0
 80155ac:	f083 0301 	eor.w	r3, r3, #1
 80155b0:	b2dc      	uxtb	r4, r3
 80155b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80155b6:	4618      	mov	r0, r3
 80155b8:	f7f9 fccd 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80155bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80155c0:	4618      	mov	r0, r3
 80155c2:	f7f9 fcc8 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80155c6:	2c00      	cmp	r4, #0
 80155c8:	d042      	beq.n	8015650 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	3398      	adds	r3, #152	; 0x98
 80155d0:	681c      	ldr	r4, [r3, #0]
 80155d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80155d6:	68b9      	ldr	r1, [r7, #8]
 80155d8:	4618      	mov	r0, r3
 80155da:	f7f9 f904 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80155de:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80155e2:	6879      	ldr	r1, [r7, #4]
 80155e4:	4618      	mov	r0, r3
 80155e6:	f7f9 f8fe 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80155ea:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80155ee:	6839      	ldr	r1, [r7, #0]
 80155f0:	4618      	mov	r0, r3
 80155f2:	f7f9 f8f8 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80155f6:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80155fa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80155fe:	9302      	str	r3, [sp, #8]
 8015600:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8015604:	9301      	str	r3, [sp, #4]
 8015606:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801560a:	9300      	str	r3, [sp, #0]
 801560c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015610:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8015614:	68f9      	ldr	r1, [r7, #12]
 8015616:	f7fb fbb9 	bl	8010d8c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801561a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801561e:	4619      	mov	r1, r3
 8015620:	68f8      	ldr	r0, [r7, #12]
 8015622:	47a0      	blx	r4
 8015624:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015628:	4618      	mov	r0, r3
 801562a:	f7fc fa89 	bl	8011b40 <_ZN15ContainsFailureD1Ev>
 801562e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015632:	4618      	mov	r0, r3
 8015634:	f7f9 fc8f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8015638:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801563c:	4618      	mov	r0, r3
 801563e:	f7f9 fc8a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8015642:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015646:	4618      	mov	r0, r3
 8015648:	f7f9 fc85 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801564c:	e000      	b.n	8015650 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801564e:	bf00      	nop
}
 8015650:	37bc      	adds	r7, #188	; 0xbc
 8015652:	46bd      	mov	sp, r7
 8015654:	bd90      	pop	{r4, r7, pc}

08015656 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015656:	b590      	push	{r4, r7, lr}
 8015658:	b099      	sub	sp, #100	; 0x64
 801565a:	af04      	add	r7, sp, #16
 801565c:	60f8      	str	r0, [r7, #12]
 801565e:	60b9      	str	r1, [r7, #8]
 8015660:	607a      	str	r2, [r7, #4]
 8015662:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8015664:	68f8      	ldr	r0, [r7, #12]
 8015666:	f000 fc87 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 801566a:	4603      	mov	r3, r0
 801566c:	681a      	ldr	r2, [r3, #0]
 801566e:	3228      	adds	r2, #40	; 0x28
 8015670:	6812      	ldr	r2, [r2, #0]
 8015672:	4618      	mov	r0, r3
 8015674:	4790      	blx	r2
    if (expected != actual)
 8015676:	68ba      	ldr	r2, [r7, #8]
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	429a      	cmp	r2, r3
 801567c:	d027      	beq.n	80156ce <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	339c      	adds	r3, #156	; 0x9c
 8015684:	681c      	ldr	r4, [r3, #0]
 8015686:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801568a:	6839      	ldr	r1, [r7, #0]
 801568c:	4618      	mov	r0, r3
 801568e:	f7f9 f8aa 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015692:	f107 0014 	add.w	r0, r7, #20
 8015696:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801569a:	9302      	str	r3, [sp, #8]
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	9301      	str	r3, [sp, #4]
 80156a0:	68bb      	ldr	r3, [r7, #8]
 80156a2:	9300      	str	r3, [sp, #0]
 80156a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80156a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80156a8:	68f9      	ldr	r1, [r7, #12]
 80156aa:	f7fb fc1f 	bl	8010eec <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 80156ae:	f107 0314 	add.w	r3, r7, #20
 80156b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80156b4:	4619      	mov	r1, r3
 80156b6:	68f8      	ldr	r0, [r7, #12]
 80156b8:	47a0      	blx	r4
 80156ba:	f107 0314 	add.w	r3, r7, #20
 80156be:	4618      	mov	r0, r3
 80156c0:	f7fc f9fa 	bl	8011ab8 <_ZN17LongsEqualFailureD1Ev>
 80156c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80156c8:	4618      	mov	r0, r3
 80156ca:	f7f9 fc44 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 80156ce:	bf00      	nop
 80156d0:	3754      	adds	r7, #84	; 0x54
 80156d2:	46bd      	mov	sp, r7
 80156d4:	bd90      	pop	{r4, r7, pc}

080156d6 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80156d6:	b590      	push	{r4, r7, lr}
 80156d8:	b099      	sub	sp, #100	; 0x64
 80156da:	af04      	add	r7, sp, #16
 80156dc:	60f8      	str	r0, [r7, #12]
 80156de:	60b9      	str	r1, [r7, #8]
 80156e0:	607a      	str	r2, [r7, #4]
 80156e2:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80156e4:	68f8      	ldr	r0, [r7, #12]
 80156e6:	f000 fc47 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 80156ea:	4603      	mov	r3, r0
 80156ec:	681a      	ldr	r2, [r3, #0]
 80156ee:	3228      	adds	r2, #40	; 0x28
 80156f0:	6812      	ldr	r2, [r2, #0]
 80156f2:	4618      	mov	r0, r3
 80156f4:	4790      	blx	r2
    if (expected != actual)
 80156f6:	68ba      	ldr	r2, [r7, #8]
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	429a      	cmp	r2, r3
 80156fc:	d027      	beq.n	801574e <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	339c      	adds	r3, #156	; 0x9c
 8015704:	681c      	ldr	r4, [r3, #0]
 8015706:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801570a:	6839      	ldr	r1, [r7, #0]
 801570c:	4618      	mov	r0, r3
 801570e:	f7f9 f86a 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015712:	f107 0014 	add.w	r0, r7, #20
 8015716:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801571a:	9302      	str	r3, [sp, #8]
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	9301      	str	r3, [sp, #4]
 8015720:	68bb      	ldr	r3, [r7, #8]
 8015722:	9300      	str	r3, [sp, #0]
 8015724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015726:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015728:	68f9      	ldr	r1, [r7, #12]
 801572a:	f7fb fcab 	bl	8011084 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 801572e:	f107 0314 	add.w	r3, r7, #20
 8015732:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015734:	4619      	mov	r1, r3
 8015736:	68f8      	ldr	r0, [r7, #12]
 8015738:	47a0      	blx	r4
 801573a:	f107 0314 	add.w	r3, r7, #20
 801573e:	4618      	mov	r0, r3
 8015740:	f7fc f998 	bl	8011a74 <_ZN25UnsignedLongsEqualFailureD1Ev>
 8015744:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015748:	4618      	mov	r0, r3
 801574a:	f7f9 fc04 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 801574e:	bf00      	nop
 8015750:	3754      	adds	r7, #84	; 0x54
 8015752:	46bd      	mov	sp, r7
 8015754:	bd90      	pop	{r4, r7, pc}
	...

08015758 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015758:	b082      	sub	sp, #8
 801575a:	b590      	push	{r4, r7, lr}
 801575c:	b099      	sub	sp, #100	; 0x64
 801575e:	af02      	add	r7, sp, #8
 8015760:	60f8      	str	r0, [r7, #12]
 8015762:	1d38      	adds	r0, r7, #4
 8015764:	e880 0006 	stmia.w	r0, {r1, r2}
 8015768:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 801576a:	68f8      	ldr	r0, [r7, #12]
 801576c:	f000 fc04 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 8015770:	4603      	mov	r3, r0
 8015772:	681a      	ldr	r2, [r3, #0]
 8015774:	3228      	adds	r2, #40	; 0x28
 8015776:	6812      	ldr	r2, [r2, #0]
 8015778:	4618      	mov	r0, r3
 801577a:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	339c      	adds	r3, #156	; 0x9c
 8015782:	681c      	ldr	r4, [r3, #0]
 8015784:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015788:	4919      	ldr	r1, [pc, #100]	; (80157f0 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 801578a:	4618      	mov	r0, r3
 801578c:	f7f9 f82b 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015790:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015794:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8015796:	4618      	mov	r0, r3
 8015798:	f7f9 f825 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801579c:	f107 0014 	add.w	r0, r7, #20
 80157a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80157a4:	9301      	str	r3, [sp, #4]
 80157a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80157aa:	9300      	str	r3, [sp, #0]
 80157ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80157ae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80157b0:	68f9      	ldr	r1, [r7, #12]
 80157b2:	f7fc f84d 	bl	8011850 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 80157b6:	f107 0314 	add.w	r3, r7, #20
 80157ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80157be:	4619      	mov	r1, r3
 80157c0:	68f8      	ldr	r0, [r7, #12]
 80157c2:	47a0      	blx	r4
 80157c4:	f107 0314 	add.w	r3, r7, #20
 80157c8:	4618      	mov	r0, r3
 80157ca:	f7fc f887 	bl	80118dc <_ZN25FeatureUnsupportedFailureD1Ev>
 80157ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80157d2:	4618      	mov	r0, r3
 80157d4:	f7f9 fbbf 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80157d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80157dc:	4618      	mov	r0, r3
 80157de:	f7f9 fbba 	bl	800ef56 <_ZN12SimpleStringD1Ev>
#endif
}
 80157e2:	bf00      	nop
 80157e4:	375c      	adds	r7, #92	; 0x5c
 80157e6:	46bd      	mov	sp, r7
 80157e8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80157ec:	b002      	add	sp, #8
 80157ee:	4770      	bx	lr
 80157f0:	08027378 	.word	0x08027378

080157f4 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80157f4:	b082      	sub	sp, #8
 80157f6:	b590      	push	{r4, r7, lr}
 80157f8:	b099      	sub	sp, #100	; 0x64
 80157fa:	af02      	add	r7, sp, #8
 80157fc:	60f8      	str	r0, [r7, #12]
 80157fe:	1d38      	adds	r0, r7, #4
 8015800:	e880 0006 	stmia.w	r0, {r1, r2}
 8015804:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8015806:	68f8      	ldr	r0, [r7, #12]
 8015808:	f000 fbb6 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 801580c:	4603      	mov	r3, r0
 801580e:	681a      	ldr	r2, [r3, #0]
 8015810:	3228      	adds	r2, #40	; 0x28
 8015812:	6812      	ldr	r2, [r2, #0]
 8015814:	4618      	mov	r0, r3
 8015816:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	339c      	adds	r3, #156	; 0x9c
 801581e:	681c      	ldr	r4, [r3, #0]
 8015820:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015824:	4919      	ldr	r1, [pc, #100]	; (801588c <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 8015826:	4618      	mov	r0, r3
 8015828:	f7f8 ffdd 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801582c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015830:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8015832:	4618      	mov	r0, r3
 8015834:	f7f8 ffd7 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015838:	f107 0014 	add.w	r0, r7, #20
 801583c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015840:	9301      	str	r3, [sp, #4]
 8015842:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015846:	9300      	str	r3, [sp, #0]
 8015848:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801584a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801584c:	68f9      	ldr	r1, [r7, #12]
 801584e:	f7fb ffff 	bl	8011850 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8015852:	f107 0314 	add.w	r3, r7, #20
 8015856:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801585a:	4619      	mov	r1, r3
 801585c:	68f8      	ldr	r0, [r7, #12]
 801585e:	47a0      	blx	r4
 8015860:	f107 0314 	add.w	r3, r7, #20
 8015864:	4618      	mov	r0, r3
 8015866:	f7fc f839 	bl	80118dc <_ZN25FeatureUnsupportedFailureD1Ev>
 801586a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801586e:	4618      	mov	r0, r3
 8015870:	f7f9 fb71 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8015874:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015878:	4618      	mov	r0, r3
 801587a:	f7f9 fb6c 	bl	800ef56 <_ZN12SimpleStringD1Ev>
#endif
}
 801587e:	bf00      	nop
 8015880:	375c      	adds	r7, #92	; 0x5c
 8015882:	46bd      	mov	sp, r7
 8015884:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8015888:	b002      	add	sp, #8
 801588a:	4770      	bx	lr
 801588c:	08027378 	.word	0x08027378

08015890 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015890:	b590      	push	{r4, r7, lr}
 8015892:	b099      	sub	sp, #100	; 0x64
 8015894:	af04      	add	r7, sp, #16
 8015896:	60f8      	str	r0, [r7, #12]
 8015898:	607b      	str	r3, [r7, #4]
 801589a:	460b      	mov	r3, r1
 801589c:	72fb      	strb	r3, [r7, #11]
 801589e:	4613      	mov	r3, r2
 80158a0:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 80158a2:	68f8      	ldr	r0, [r7, #12]
 80158a4:	f000 fb68 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 80158a8:	4603      	mov	r3, r0
 80158aa:	681a      	ldr	r2, [r3, #0]
 80158ac:	3228      	adds	r2, #40	; 0x28
 80158ae:	6812      	ldr	r2, [r2, #0]
 80158b0:	4618      	mov	r0, r3
 80158b2:	4790      	blx	r2
    if (expected != actual)
 80158b4:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80158b8:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80158bc:	429a      	cmp	r2, r3
 80158be:	d029      	beq.n	8015914 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	339c      	adds	r3, #156	; 0x9c
 80158c6:	681c      	ldr	r4, [r3, #0]
 80158c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80158cc:	6879      	ldr	r1, [r7, #4]
 80158ce:	4618      	mov	r0, r3
 80158d0:	f7f8 ff89 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80158d4:	f107 0014 	add.w	r0, r7, #20
 80158d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80158dc:	9302      	str	r3, [sp, #8]
 80158de:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80158e2:	9301      	str	r3, [sp, #4]
 80158e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80158e8:	9300      	str	r3, [sp, #0]
 80158ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80158ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80158ee:	68f9      	ldr	r1, [r7, #12]
 80158f0:	f7fb fc94 	bl	801121c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 80158f4:	f107 0314 	add.w	r3, r7, #20
 80158f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80158fa:	4619      	mov	r1, r3
 80158fc:	68f8      	ldr	r0, [r7, #12]
 80158fe:	47a0      	blx	r4
 8015900:	f107 0314 	add.w	r3, r7, #20
 8015904:	4618      	mov	r0, r3
 8015906:	f7fc f893 	bl	8011a30 <_ZN23SignedBytesEqualFailureD1Ev>
 801590a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801590e:	4618      	mov	r0, r3
 8015910:	f7f9 fb21 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8015914:	bf00      	nop
 8015916:	3754      	adds	r7, #84	; 0x54
 8015918:	46bd      	mov	sp, r7
 801591a:	bd90      	pop	{r4, r7, pc}

0801591c <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801591c:	b590      	push	{r4, r7, lr}
 801591e:	b09d      	sub	sp, #116	; 0x74
 8015920:	af04      	add	r7, sp, #16
 8015922:	60f8      	str	r0, [r7, #12]
 8015924:	60b9      	str	r1, [r7, #8]
 8015926:	607a      	str	r2, [r7, #4]
 8015928:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801592a:	68f8      	ldr	r0, [r7, #12]
 801592c:	f000 fb24 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 8015930:	4603      	mov	r3, r0
 8015932:	681a      	ldr	r2, [r3, #0]
 8015934:	3228      	adds	r2, #40	; 0x28
 8015936:	6812      	ldr	r2, [r2, #0]
 8015938:	4618      	mov	r0, r3
 801593a:	4790      	blx	r2
    if (expected != actual)
 801593c:	68ba      	ldr	r2, [r7, #8]
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	429a      	cmp	r2, r3
 8015942:	d03f      	beq.n	80159c4 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	339c      	adds	r3, #156	; 0x9c
 801594a:	681c      	ldr	r4, [r3, #0]
 801594c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015950:	68b9      	ldr	r1, [r7, #8]
 8015952:	4618      	mov	r0, r3
 8015954:	f7f9 fdea 	bl	800f52c <_Z10StringFromPKv>
 8015958:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801595c:	6879      	ldr	r1, [r7, #4]
 801595e:	4618      	mov	r0, r3
 8015960:	f7f9 fde4 	bl	800f52c <_Z10StringFromPKv>
 8015964:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015968:	6839      	ldr	r1, [r7, #0]
 801596a:	4618      	mov	r0, r3
 801596c:	f7f8 ff3b 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015970:	f107 0014 	add.w	r0, r7, #20
 8015974:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015978:	9302      	str	r3, [sp, #8]
 801597a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801597e:	9301      	str	r3, [sp, #4]
 8015980:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015984:	9300      	str	r3, [sp, #0]
 8015986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015988:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801598a:	68f9      	ldr	r1, [r7, #12]
 801598c:	f7fb f814 	bl	80109b8 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8015990:	f107 0314 	add.w	r3, r7, #20
 8015994:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015996:	4619      	mov	r1, r3
 8015998:	68f8      	ldr	r0, [r7, #12]
 801599a:	47a0      	blx	r4
 801599c:	f107 0314 	add.w	r3, r7, #20
 80159a0:	4618      	mov	r0, r3
 80159a2:	f7fc f955 	bl	8011c50 <_ZN13EqualsFailureD1Ev>
 80159a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80159aa:	4618      	mov	r0, r3
 80159ac:	f7f9 fad3 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80159b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80159b4:	4618      	mov	r0, r3
 80159b6:	f7f9 face 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80159ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80159be:	4618      	mov	r0, r3
 80159c0:	f7f9 fac9 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 80159c4:	bf00      	nop
 80159c6:	3764      	adds	r7, #100	; 0x64
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bd90      	pop	{r4, r7, pc}

080159cc <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80159cc:	b590      	push	{r4, r7, lr}
 80159ce:	b09d      	sub	sp, #116	; 0x74
 80159d0:	af04      	add	r7, sp, #16
 80159d2:	60f8      	str	r0, [r7, #12]
 80159d4:	60b9      	str	r1, [r7, #8]
 80159d6:	607a      	str	r2, [r7, #4]
 80159d8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80159da:	68f8      	ldr	r0, [r7, #12]
 80159dc:	f000 facc 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 80159e0:	4603      	mov	r3, r0
 80159e2:	681a      	ldr	r2, [r3, #0]
 80159e4:	3228      	adds	r2, #40	; 0x28
 80159e6:	6812      	ldr	r2, [r2, #0]
 80159e8:	4618      	mov	r0, r3
 80159ea:	4790      	blx	r2
    if (expected != actual)
 80159ec:	68ba      	ldr	r2, [r7, #8]
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	429a      	cmp	r2, r3
 80159f2:	d03f      	beq.n	8015a74 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	339c      	adds	r3, #156	; 0x9c
 80159fa:	681c      	ldr	r4, [r3, #0]
 80159fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015a00:	68b9      	ldr	r1, [r7, #8]
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7f9 fdbc 	bl	800f580 <_Z10StringFromPFvvE>
 8015a08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015a0c:	6879      	ldr	r1, [r7, #4]
 8015a0e:	4618      	mov	r0, r3
 8015a10:	f7f9 fdb6 	bl	800f580 <_Z10StringFromPFvvE>
 8015a14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015a18:	6839      	ldr	r1, [r7, #0]
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	f7f8 fee3 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015a20:	f107 0014 	add.w	r0, r7, #20
 8015a24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015a28:	9302      	str	r3, [sp, #8]
 8015a2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015a2e:	9301      	str	r3, [sp, #4]
 8015a30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015a34:	9300      	str	r3, [sp, #0]
 8015a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015a38:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015a3a:	68f9      	ldr	r1, [r7, #12]
 8015a3c:	f7fa ffbc 	bl	80109b8 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8015a40:	f107 0314 	add.w	r3, r7, #20
 8015a44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015a46:	4619      	mov	r1, r3
 8015a48:	68f8      	ldr	r0, [r7, #12]
 8015a4a:	47a0      	blx	r4
 8015a4c:	f107 0314 	add.w	r3, r7, #20
 8015a50:	4618      	mov	r0, r3
 8015a52:	f7fc f8fd 	bl	8011c50 <_ZN13EqualsFailureD1Ev>
 8015a56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	f7f9 fa7b 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8015a60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015a64:	4618      	mov	r0, r3
 8015a66:	f7f9 fa76 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8015a6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015a6e:	4618      	mov	r0, r3
 8015a70:	f7f9 fa71 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8015a74:	bf00      	nop
 8015a76:	3764      	adds	r7, #100	; 0x64
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	bd90      	pop	{r4, r7, pc}

08015a7c <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015a7c:	b590      	push	{r4, r7, lr}
 8015a7e:	b09d      	sub	sp, #116	; 0x74
 8015a80:	af02      	add	r7, sp, #8
 8015a82:	6278      	str	r0, [r7, #36]	; 0x24
 8015a84:	ed87 0b06 	vstr	d0, [r7, #24]
 8015a88:	ed87 1b04 	vstr	d1, [r7, #16]
 8015a8c:	ed87 2b02 	vstr	d2, [r7, #8]
 8015a90:	6239      	str	r1, [r7, #32]
 8015a92:	607a      	str	r2, [r7, #4]
 8015a94:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8015a96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a98:	f000 fa6e 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	681a      	ldr	r2, [r3, #0]
 8015aa0:	3228      	adds	r2, #40	; 0x28
 8015aa2:	6812      	ldr	r2, [r2, #0]
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 8015aa8:	ed97 2b02 	vldr	d2, [r7, #8]
 8015aac:	ed97 1b04 	vldr	d1, [r7, #16]
 8015ab0:	ed97 0b06 	vldr	d0, [r7, #24]
 8015ab4:	f7fe fd4a 	bl	801454c <_Z13doubles_equalddd>
 8015ab8:	4603      	mov	r3, r0
 8015aba:	f083 0301 	eor.w	r3, r3, #1
 8015abe:	b2db      	uxtb	r3, r3
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d029      	beq.n	8015b18 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 8015ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	339c      	adds	r3, #156	; 0x9c
 8015aca:	681c      	ldr	r4, [r3, #0]
 8015acc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8015ad0:	6a39      	ldr	r1, [r7, #32]
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	f7f8 fe87 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015ad8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8015adc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8015ae0:	9300      	str	r3, [sp, #0]
 8015ae2:	ed97 2b02 	vldr	d2, [r7, #8]
 8015ae6:	ed97 1b04 	vldr	d1, [r7, #16]
 8015aea:	ed97 0b06 	vldr	d0, [r7, #24]
 8015aee:	683b      	ldr	r3, [r7, #0]
 8015af0:	687a      	ldr	r2, [r7, #4]
 8015af2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015af4:	f7fa ffa2 	bl	8010a3c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 8015af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015afc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015afe:	4619      	mov	r1, r3
 8015b00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b02:	47a0      	blx	r4
 8015b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015b08:	4618      	mov	r0, r3
 8015b0a:	f7fc f87f 	bl	8011c0c <_ZN19DoublesEqualFailureD1Ev>
 8015b0e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8015b12:	4618      	mov	r0, r3
 8015b14:	f7f9 fa1f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8015b18:	bf00      	nop
 8015b1a:	376c      	adds	r7, #108	; 0x6c
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	bd90      	pop	{r4, r7, pc}

08015b20 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015b20:	b590      	push	{r4, r7, lr}
 8015b22:	b0a7      	sub	sp, #156	; 0x9c
 8015b24:	af04      	add	r7, sp, #16
 8015b26:	60f8      	str	r0, [r7, #12]
 8015b28:	60b9      	str	r1, [r7, #8]
 8015b2a:	607a      	str	r2, [r7, #4]
 8015b2c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8015b2e:	68f8      	ldr	r0, [r7, #12]
 8015b30:	f000 fa22 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 8015b34:	4603      	mov	r3, r0
 8015b36:	681a      	ldr	r2, [r3, #0]
 8015b38:	3228      	adds	r2, #40	; 0x28
 8015b3a:	6812      	ldr	r2, [r2, #0]
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	4790      	blx	r2
	if (length == 0) return;
 8015b40:	683b      	ldr	r3, [r7, #0]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d075      	beq.n	8015c32 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d102      	bne.n	8015b52 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 8015b4c:	68bb      	ldr	r3, [r7, #8]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d071      	beq.n	8015c36 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d002      	beq.n	8015b5e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 8015b58:	68bb      	ldr	r3, [r7, #8]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d12d      	bne.n	8015bba <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	339c      	adds	r3, #156	; 0x9c
 8015b64:	681c      	ldr	r4, [r3, #0]
 8015b66:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015b6a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8015b6e:	4618      	mov	r0, r3
 8015b70:	f7f8 fe39 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015b74:	f107 0010 	add.w	r0, r7, #16
 8015b78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015b7c:	9303      	str	r3, [sp, #12]
 8015b7e:	683b      	ldr	r3, [r7, #0]
 8015b80:	9302      	str	r3, [sp, #8]
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	9301      	str	r3, [sp, #4]
 8015b86:	68bb      	ldr	r3, [r7, #8]
 8015b88:	9300      	str	r3, [sp, #0]
 8015b8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015b8e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015b92:	68f9      	ldr	r1, [r7, #12]
 8015b94:	f7fb fd70 	bl	8011678 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8015b98:	f107 0310 	add.w	r3, r7, #16
 8015b9c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8015ba0:	4619      	mov	r1, r3
 8015ba2:	68f8      	ldr	r0, [r7, #12]
 8015ba4:	47a0      	blx	r4
 8015ba6:	f107 0310 	add.w	r3, r7, #16
 8015baa:	4618      	mov	r0, r3
 8015bac:	f7fb feda 	bl	8011964 <_ZN18BinaryEqualFailureD1Ev>
 8015bb0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f7f9 f9ce 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 8015bba:	683a      	ldr	r2, [r7, #0]
 8015bbc:	6879      	ldr	r1, [r7, #4]
 8015bbe:	68b8      	ldr	r0, [r7, #8]
 8015bc0:	f7f8 fd30 	bl	800e624 <_ZN12SimpleString6MemCmpEPKvS1_j>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	bf14      	ite	ne
 8015bca:	2301      	movne	r3, #1
 8015bcc:	2300      	moveq	r3, #0
 8015bce:	b2db      	uxtb	r3, r3
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d031      	beq.n	8015c38 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	339c      	adds	r3, #156	; 0x9c
 8015bda:	681c      	ldr	r4, [r3, #0]
 8015bdc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015be0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8015be4:	4618      	mov	r0, r3
 8015be6:	f7f8 fdfe 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015bea:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8015bee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015bf2:	9303      	str	r3, [sp, #12]
 8015bf4:	683b      	ldr	r3, [r7, #0]
 8015bf6:	9302      	str	r3, [sp, #8]
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	9301      	str	r3, [sp, #4]
 8015bfc:	68bb      	ldr	r3, [r7, #8]
 8015bfe:	9300      	str	r3, [sp, #0]
 8015c00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015c04:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015c08:	68f9      	ldr	r1, [r7, #12]
 8015c0a:	f7fb fd35 	bl	8011678 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8015c0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015c12:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8015c16:	4619      	mov	r1, r3
 8015c18:	68f8      	ldr	r0, [r7, #12]
 8015c1a:	47a0      	blx	r4
 8015c1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015c20:	4618      	mov	r0, r3
 8015c22:	f7fb fe9f 	bl	8011964 <_ZN18BinaryEqualFailureD1Ev>
 8015c26:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	f7f9 f993 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8015c30:	e002      	b.n	8015c38 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 8015c32:	bf00      	nop
 8015c34:	e000      	b.n	8015c38 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8015c36:	bf00      	nop
}
 8015c38:	378c      	adds	r7, #140	; 0x8c
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd90      	pop	{r4, r7, pc}

08015c3e <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015c3e:	b590      	push	{r4, r7, lr}
 8015c40:	b09b      	sub	sp, #108	; 0x6c
 8015c42:	af06      	add	r7, sp, #24
 8015c44:	60f8      	str	r0, [r7, #12]
 8015c46:	60b9      	str	r1, [r7, #8]
 8015c48:	607a      	str	r2, [r7, #4]
 8015c4a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8015c4c:	68f8      	ldr	r0, [r7, #12]
 8015c4e:	f000 f993 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 8015c52:	4603      	mov	r3, r0
 8015c54:	681a      	ldr	r2, [r3, #0]
 8015c56:	3228      	adds	r2, #40	; 0x28
 8015c58:	6812      	ldr	r2, [r2, #0]
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 8015c5e:	68ba      	ldr	r2, [r7, #8]
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	405a      	eors	r2, r3
 8015c64:	683b      	ldr	r3, [r7, #0]
 8015c66:	4013      	ands	r3, r2
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d02b      	beq.n	8015cc4 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	339c      	adds	r3, #156	; 0x9c
 8015c72:	681c      	ldr	r4, [r3, #0]
 8015c74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015c78:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	f7f8 fdb3 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015c80:	f107 0014 	add.w	r0, r7, #20
 8015c84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015c88:	9304      	str	r3, [sp, #16]
 8015c8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015c8c:	9303      	str	r3, [sp, #12]
 8015c8e:	683b      	ldr	r3, [r7, #0]
 8015c90:	9302      	str	r3, [sp, #8]
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	9301      	str	r3, [sp, #4]
 8015c96:	68bb      	ldr	r3, [r7, #8]
 8015c98:	9300      	str	r3, [sp, #0]
 8015c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015c9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015c9e:	68f9      	ldr	r1, [r7, #12]
 8015ca0:	f7fb fd7a 	bl	8011798 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 8015ca4:	f107 0314 	add.w	r3, r7, #20
 8015ca8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015caa:	4619      	mov	r1, r3
 8015cac:	68f8      	ldr	r0, [r7, #12]
 8015cae:	47a0      	blx	r4
 8015cb0:	f107 0314 	add.w	r3, r7, #20
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	f7fb fe33 	bl	8011920 <_ZN16BitsEqualFailureD1Ev>
 8015cba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	f7f9 f949 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8015cc4:	bf00      	nop
 8015cc6:	3754      	adds	r7, #84	; 0x54
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	bd90      	pop	{r4, r7, pc}

08015ccc <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 8015ccc:	b590      	push	{r4, r7, lr}
 8015cce:	b09d      	sub	sp, #116	; 0x74
 8015cd0:	af04      	add	r7, sp, #16
 8015cd2:	60f8      	str	r0, [r7, #12]
 8015cd4:	607a      	str	r2, [r7, #4]
 8015cd6:	603b      	str	r3, [r7, #0]
 8015cd8:	460b      	mov	r3, r1
 8015cda:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8015cdc:	68f8      	ldr	r0, [r7, #12]
 8015cde:	f000 f94b 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	681a      	ldr	r2, [r3, #0]
 8015ce6:	3228      	adds	r2, #40	; 0x28
 8015ce8:	6812      	ldr	r2, [r2, #0]
 8015cea:	4618      	mov	r0, r3
 8015cec:	4790      	blx	r2
    if (failed)
 8015cee:	7afb      	ldrb	r3, [r7, #11]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d03f      	beq.n	8015d74 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	339c      	adds	r3, #156	; 0x9c
 8015cfa:	681c      	ldr	r4, [r3, #0]
 8015cfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015d00:	6879      	ldr	r1, [r7, #4]
 8015d02:	4618      	mov	r0, r3
 8015d04:	f7f8 fd6f 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015d08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015d0c:	6839      	ldr	r1, [r7, #0]
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f7f8 fd69 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015d14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015d18:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f7f8 fd63 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015d20:	f107 0014 	add.w	r0, r7, #20
 8015d24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015d28:	9302      	str	r3, [sp, #8]
 8015d2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015d2e:	9301      	str	r3, [sp, #4]
 8015d30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015d34:	9300      	str	r3, [sp, #0]
 8015d36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015d38:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015d3a:	68f9      	ldr	r1, [r7, #12]
 8015d3c:	f7fa ff30 	bl	8010ba0 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8015d40:	f107 0314 	add.w	r3, r7, #20
 8015d44:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015d46:	4619      	mov	r1, r3
 8015d48:	68f8      	ldr	r0, [r7, #12]
 8015d4a:	47a0      	blx	r4
 8015d4c:	f107 0314 	add.w	r3, r7, #20
 8015d50:	4618      	mov	r0, r3
 8015d52:	f7fb ff39 	bl	8011bc8 <_ZN17CheckEqualFailureD1Ev>
 8015d56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	f7f9 f8fb 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8015d60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015d64:	4618      	mov	r0, r3
 8015d66:	f7f9 f8f6 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8015d6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015d6e:	4618      	mov	r0, r3
 8015d70:	f7f9 f8f1 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8015d74:	bf00      	nop
 8015d76:	3764      	adds	r7, #100	; 0x64
 8015d78:	46bd      	mov	sp, r7
 8015d7a:	bd90      	pop	{r4, r7, pc}

08015d7c <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8015d7c:	b590      	push	{r4, r7, lr}
 8015d7e:	b09d      	sub	sp, #116	; 0x74
 8015d80:	af04      	add	r7, sp, #16
 8015d82:	60f8      	str	r0, [r7, #12]
 8015d84:	607a      	str	r2, [r7, #4]
 8015d86:	603b      	str	r3, [r7, #0]
 8015d88:	460b      	mov	r3, r1
 8015d8a:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8015d8c:	68f8      	ldr	r0, [r7, #12]
 8015d8e:	f000 f8f3 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 8015d92:	4603      	mov	r3, r0
 8015d94:	681a      	ldr	r2, [r3, #0]
 8015d96:	3228      	adds	r2, #40	; 0x28
 8015d98:	6812      	ldr	r2, [r2, #0]
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	4790      	blx	r2
    if (!comparison)
 8015d9e:	7afb      	ldrb	r3, [r7, #11]
 8015da0:	f083 0301 	eor.w	r3, r3, #1
 8015da4:	b2db      	uxtb	r3, r3
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d03f      	beq.n	8015e2a <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	339c      	adds	r3, #156	; 0x9c
 8015db0:	681c      	ldr	r4, [r3, #0]
 8015db2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015db6:	6879      	ldr	r1, [r7, #4]
 8015db8:	4618      	mov	r0, r3
 8015dba:	f7f8 fd14 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015dbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015dc2:	6839      	ldr	r1, [r7, #0]
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	f7f8 fd0e 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015dca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015dce:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f7f8 fd08 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8015dd6:	f107 0014 	add.w	r0, r7, #20
 8015dda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015dde:	9302      	str	r3, [sp, #8]
 8015de0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015de4:	9301      	str	r3, [sp, #4]
 8015de6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015dea:	9300      	str	r3, [sp, #0]
 8015dec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015dee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015df0:	68f9      	ldr	r1, [r7, #12]
 8015df2:	f7fa ff83 	bl	8010cfc <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8015df6:	f107 0314 	add.w	r3, r7, #20
 8015dfa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015dfc:	4619      	mov	r1, r3
 8015dfe:	68f8      	ldr	r0, [r7, #12]
 8015e00:	47a0      	blx	r4
 8015e02:	f107 0314 	add.w	r3, r7, #20
 8015e06:	4618      	mov	r0, r3
 8015e08:	f7fb febc 	bl	8011b84 <_ZN17ComparisonFailureD1Ev>
 8015e0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015e10:	4618      	mov	r0, r3
 8015e12:	f7f9 f8a0 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8015e16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	f7f9 f89b 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8015e20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015e24:	4618      	mov	r0, r3
 8015e26:	f7f9 f896 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8015e2a:	bf00      	nop
 8015e2c:	3764      	adds	r7, #100	; 0x64
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	bd90      	pop	{r4, r7, pc}
	...

08015e34 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 8015e34:	b5b0      	push	{r4, r5, r7, lr}
 8015e36:	b088      	sub	sp, #32
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	60f8      	str	r0, [r7, #12]
 8015e3c:	60b9      	str	r1, [r7, #8]
 8015e3e:	607a      	str	r2, [r7, #4]
 8015e40:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 8015e42:	f107 0310 	add.w	r3, r7, #16
 8015e46:	4924      	ldr	r1, [pc, #144]	; (8015ed8 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 8015e48:	4618      	mov	r0, r3
 8015e4a:	f7f8 fccc 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 8015e4e:	f107 0310 	add.w	r3, r7, #16
 8015e52:	6879      	ldr	r1, [r7, #4]
 8015e54:	4618      	mov	r0, r3
 8015e56:	f7f9 f90d 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 8015e5a:	f107 0310 	add.w	r3, r7, #16
 8015e5e:	491f      	ldr	r1, [pc, #124]	; (8015edc <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 8015e60:	4618      	mov	r0, r3
 8015e62:	f7f9 f907 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 8015e66:	f107 0318 	add.w	r3, r7, #24
 8015e6a:	6839      	ldr	r1, [r7, #0]
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	f7f9 fda1 	bl	800f9b4 <_Z10StringFromj>
 8015e72:	f107 0218 	add.w	r2, r7, #24
 8015e76:	f107 0310 	add.w	r3, r7, #16
 8015e7a:	4611      	mov	r1, r2
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	f7f9 f8e7 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 8015e82:	f107 0318 	add.w	r3, r7, #24
 8015e86:	4618      	mov	r0, r3
 8015e88:	f7f9 f865 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8015e8c:	f107 0310 	add.w	r3, r7, #16
 8015e90:	4913      	ldr	r1, [pc, #76]	; (8015ee0 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 8015e92:	4618      	mov	r0, r3
 8015e94:	f7f9 f8ee 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 8015e98:	f107 0310 	add.w	r3, r7, #16
 8015e9c:	68b9      	ldr	r1, [r7, #8]
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	f7f9 f8e8 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 8015ea4:	68f8      	ldr	r0, [r7, #12]
 8015ea6:	f000 f867 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 8015eaa:	4604      	mov	r4, r0
 8015eac:	6823      	ldr	r3, [r4, #0]
 8015eae:	3338      	adds	r3, #56	; 0x38
 8015eb0:	681d      	ldr	r5, [r3, #0]
 8015eb2:	f107 0310 	add.w	r3, r7, #16
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	f7f9 f820 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8015ebc:	4603      	mov	r3, r0
 8015ebe:	4619      	mov	r1, r3
 8015ec0:	4620      	mov	r0, r4
 8015ec2:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 8015ec4:	f107 0310 	add.w	r3, r7, #16
 8015ec8:	4618      	mov	r0, r3
 8015eca:	f7f9 f844 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8015ece:	bf00      	nop
 8015ed0:	3720      	adds	r7, #32
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8015ed6:	bf00      	nop
 8015ed8:	08027390 	.word	0x08027390
 8015edc:	08027394 	.word	0x08027394
 8015ee0:	08027398 	.word	0x08027398

08015ee4 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 8015ee4:	b590      	push	{r4, r7, lr}
 8015ee6:	b085      	sub	sp, #20
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	60f8      	str	r0, [r7, #12]
 8015eec:	60b9      	str	r1, [r7, #8]
 8015eee:	607a      	str	r2, [r7, #4]
 8015ef0:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	3370      	adds	r3, #112	; 0x70
 8015ef8:	681c      	ldr	r4, [r3, #0]
 8015efa:	68b8      	ldr	r0, [r7, #8]
 8015efc:	f7f8 fffe 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8015f00:	4601      	mov	r1, r0
 8015f02:	683b      	ldr	r3, [r7, #0]
 8015f04:	687a      	ldr	r2, [r7, #4]
 8015f06:	68f8      	ldr	r0, [r7, #12]
 8015f08:	47a0      	blx	r4
}
 8015f0a:	bf00      	nop
 8015f0c:	3714      	adds	r7, #20
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	bd90      	pop	{r4, r7, pc}

08015f12 <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 8015f12:	b580      	push	{r7, lr}
 8015f14:	b082      	sub	sp, #8
 8015f16:	af00      	add	r7, sp, #0
 8015f18:	6078      	str	r0, [r7, #4]
 8015f1a:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 8015f1c:	6878      	ldr	r0, [r7, #4]
 8015f1e:	f000 f82b 	bl	8015f78 <_ZN10UtestShell13getTestResultEv>
 8015f22:	4603      	mov	r3, r0
 8015f24:	681a      	ldr	r2, [r3, #0]
 8015f26:	323c      	adds	r2, #60	; 0x3c
 8015f28:	6812      	ldr	r2, [r2, #0]
 8015f2a:	6839      	ldr	r1, [r7, #0]
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	4790      	blx	r2
}
 8015f30:	bf00      	nop
 8015f32:	3708      	adds	r7, #8
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd80      	pop	{r7, pc}

08015f38 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 8015f38:	b480      	push	{r7}
 8015f3a:	b083      	sub	sp, #12
 8015f3c:	af00      	add	r7, sp, #0
 8015f3e:	6078      	str	r0, [r7, #4]
 8015f40:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 8015f42:	4a04      	ldr	r2, [pc, #16]	; (8015f54 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 8015f44:	683b      	ldr	r3, [r7, #0]
 8015f46:	6013      	str	r3, [r2, #0]
}
 8015f48:	bf00      	nop
 8015f4a:	370c      	adds	r7, #12
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f52:	4770      	bx	lr
 8015f54:	20000ba0 	.word	0x20000ba0

08015f58 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 8015f58:	b480      	push	{r7}
 8015f5a:	b083      	sub	sp, #12
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
 8015f60:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 8015f62:	4a04      	ldr	r2, [pc, #16]	; (8015f74 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 8015f64:	683b      	ldr	r3, [r7, #0]
 8015f66:	6013      	str	r3, [r2, #0]
}
 8015f68:	bf00      	nop
 8015f6a:	370c      	adds	r7, #12
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f72:	4770      	bx	lr
 8015f74:	20000ba4 	.word	0x20000ba4

08015f78 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b082      	sub	sp, #8
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8015f80:	4b09      	ldr	r3, [pc, #36]	; (8015fa8 <_ZN10UtestShell13getTestResultEv+0x30>)
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d109      	bne.n	8015f9c <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 8015f88:	f7fe fbb2 	bl	80146f0 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8015f8c:	4603      	mov	r3, r0
 8015f8e:	681a      	ldr	r2, [r3, #0]
 8015f90:	32a4      	adds	r2, #164	; 0xa4
 8015f92:	6812      	ldr	r2, [r2, #0]
 8015f94:	4618      	mov	r0, r3
 8015f96:	4790      	blx	r2
 8015f98:	4603      	mov	r3, r0
 8015f9a:	e001      	b.n	8015fa0 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 8015f9c:	4b02      	ldr	r3, [pc, #8]	; (8015fa8 <_ZN10UtestShell13getTestResultEv+0x30>)
 8015f9e:	681b      	ldr	r3, [r3, #0]
}
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	3708      	adds	r7, #8
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bd80      	pop	{r7, pc}
 8015fa8:	20000ba0 	.word	0x20000ba0

08015fac <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8015fb0:	4b05      	ldr	r3, [pc, #20]	; (8015fc8 <_ZN10UtestShell10getCurrentEv+0x1c>)
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d103      	bne.n	8015fc0 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 8015fb8:	f7fe fb9a 	bl	80146f0 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8015fbc:	4603      	mov	r3, r0
 8015fbe:	e001      	b.n	8015fc4 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 8015fc0:	4b01      	ldr	r3, [pc, #4]	; (8015fc8 <_ZN10UtestShell10getCurrentEv+0x1c>)
 8015fc2:	681b      	ldr	r3, [r3, #0]
}
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	bd80      	pop	{r7, pc}
 8015fc8:	20000ba4 	.word	0x20000ba4

08015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 8015fcc:	b480      	push	{r7}
 8015fce:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 8015fd0:	4b03      	ldr	r3, [pc, #12]	; (8015fe0 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 8015fd2:	681b      	ldr	r3, [r3, #0]
}
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fdc:	4770      	bx	lr
 8015fde:	bf00      	nop
 8015fe0:	20000094 	.word	0x20000094

08015fe4 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 8015fe4:	b480      	push	{r7}
 8015fe6:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 8015fe8:	4b03      	ldr	r3, [pc, #12]	; (8015ff8 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 8015fea:	4a04      	ldr	r2, [pc, #16]	; (8015ffc <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 8015fec:	601a      	str	r2, [r3, #0]
}
 8015fee:	bf00      	nop
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff6:	4770      	bx	lr
 8015ff8:	20000094 	.word	0x20000094
 8015ffc:	20000090 	.word	0x20000090

08016000 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 8016000:	b480      	push	{r7}
 8016002:	b083      	sub	sp, #12
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
 8016008:	4a04      	ldr	r2, [pc, #16]	; (801601c <_ZN5UtestC1Ev+0x1c>)
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	601a      	str	r2, [r3, #0]
{
}
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	4618      	mov	r0, r3
 8016012:	370c      	adds	r7, #12
 8016014:	46bd      	mov	sp, r7
 8016016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801601a:	4770      	bx	lr
 801601c:	0802b088 	.word	0x0802b088

08016020 <_ZN5UtestD1Ev>:

Utest::~Utest()
 8016020:	b480      	push	{r7}
 8016022:	b083      	sub	sp, #12
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]
 8016028:	4a04      	ldr	r2, [pc, #16]	; (801603c <_ZN5UtestD1Ev+0x1c>)
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	601a      	str	r2, [r3, #0]
{
}
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	4618      	mov	r0, r3
 8016032:	370c      	adds	r7, #12
 8016034:	46bd      	mov	sp, r7
 8016036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603a:	4770      	bx	lr
 801603c:	0802b088 	.word	0x0802b088

08016040 <_ZN5UtestD0Ev>:
Utest::~Utest()
 8016040:	b580      	push	{r7, lr}
 8016042:	b082      	sub	sp, #8
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
}
 8016048:	6878      	ldr	r0, [r7, #4]
 801604a:	f7ff ffe9 	bl	8016020 <_ZN5UtestD1Ev>
 801604e:	2104      	movs	r1, #4
 8016050:	6878      	ldr	r0, [r7, #4]
 8016052:	f7f6 f819 	bl	800c088 <_ZdlPvj>
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	4618      	mov	r0, r3
 801605a:	3708      	adds	r7, #8
 801605c:	46bd      	mov	sp, r7
 801605e:	bd80      	pop	{r7, pc}

08016060 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 8016060:	b580      	push	{r7, lr}
 8016062:	b082      	sub	sp, #8
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 8016068:	4b0d      	ldr	r3, [pc, #52]	; (80160a0 <_ZN5Utest3runEv+0x40>)
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	6879      	ldr	r1, [r7, #4]
 801606e:	480d      	ldr	r0, [pc, #52]	; (80160a4 <_ZN5Utest3runEv+0x44>)
 8016070:	4798      	blx	r3
 8016072:	4603      	mov	r3, r0
 8016074:	2b00      	cmp	r3, #0
 8016076:	bf14      	ite	ne
 8016078:	2301      	movne	r3, #1
 801607a:	2300      	moveq	r3, #0
 801607c:	b2db      	uxtb	r3, r3
 801607e:	2b00      	cmp	r3, #0
 8016080:	d004      	beq.n	801608c <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 8016082:	4b07      	ldr	r3, [pc, #28]	; (80160a0 <_ZN5Utest3runEv+0x40>)
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	6879      	ldr	r1, [r7, #4]
 8016088:	4807      	ldr	r0, [pc, #28]	; (80160a8 <_ZN5Utest3runEv+0x48>)
 801608a:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 801608c:	4b04      	ldr	r3, [pc, #16]	; (80160a0 <_ZN5Utest3runEv+0x40>)
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	6879      	ldr	r1, [r7, #4]
 8016092:	4806      	ldr	r0, [pc, #24]	; (80160ac <_ZN5Utest3runEv+0x4c>)
 8016094:	4798      	blx	r3
}
 8016096:	bf00      	nop
 8016098:	3708      	adds	r7, #8
 801609a:	46bd      	mov	sp, r7
 801609c:	bd80      	pop	{r7, pc}
 801609e:	bf00      	nop
 80160a0:	200000a4 	.word	0x200000a4
 80160a4:	0801474d 	.word	0x0801474d
 80160a8:	08014769 	.word	0x08014769
 80160ac:	08014785 	.word	0x08014785

080160b0 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 80160b0:	b480      	push	{r7}
 80160b2:	b083      	sub	sp, #12
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	6078      	str	r0, [r7, #4]
}
 80160b8:	bf00      	nop
 80160ba:	370c      	adds	r7, #12
 80160bc:	46bd      	mov	sp, r7
 80160be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c2:	4770      	bx	lr

080160c4 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 80160c4:	b480      	push	{r7}
 80160c6:	b083      	sub	sp, #12
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	6078      	str	r0, [r7, #4]
}
 80160cc:	bf00      	nop
 80160ce:	370c      	adds	r7, #12
 80160d0:	46bd      	mov	sp, r7
 80160d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d6:	4770      	bx	lr

080160d8 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 80160d8:	b480      	push	{r7}
 80160da:	b083      	sub	sp, #12
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
}
 80160e0:	bf00      	nop
 80160e2:	370c      	adds	r7, #12
 80160e4:	46bd      	mov	sp, r7
 80160e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ea:	4770      	bx	lr

080160ec <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 80160ec:	b480      	push	{r7}
 80160ee:	b083      	sub	sp, #12
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
 80160f4:	4a04      	ldr	r2, [pc, #16]	; (8016108 <_ZN14TestTerminatorD1Ev+0x1c>)
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	601a      	str	r2, [r3, #0]
{
}
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	4618      	mov	r0, r3
 80160fe:	370c      	adds	r7, #12
 8016100:	46bd      	mov	sp, r7
 8016102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016106:	4770      	bx	lr
 8016108:	0802b074 	.word	0x0802b074

0801610c <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 801610c:	b580      	push	{r7, lr}
 801610e:	b084      	sub	sp, #16
 8016110:	af00      	add	r7, sp, #0
 8016112:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 8016114:	2300      	movs	r3, #0
 8016116:	60fb      	str	r3, [r7, #12]
 8016118:	f107 030c 	add.w	r3, r7, #12
 801611c:	4618      	mov	r0, r3
 801611e:	f7f6 f975 	bl	800c40c <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8016122:	f107 030c 	add.w	r3, r7, #12
 8016126:	4618      	mov	r0, r3
 8016128:	f000 f82c 	bl	8016184 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 801612c:	f107 030c 	add.w	r3, r7, #12
 8016130:	4618      	mov	r0, r3
 8016132:	f000 f835 	bl	80161a0 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 8016136:	bf00      	nop
 8016138:	3710      	adds	r7, #16
 801613a:	46bd      	mov	sp, r7
 801613c:	bd80      	pop	{r7, pc}
	...

08016140 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 8016140:	b580      	push	{r7, lr}
 8016142:	b082      	sub	sp, #8
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
 8016148:	4a05      	ldr	r2, [pc, #20]	; (8016160 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	601a      	str	r2, [r3, #0]
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	4618      	mov	r0, r3
 8016152:	f7ff ffcb 	bl	80160ec <_ZN14TestTerminatorD1Ev>
{
}
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	4618      	mov	r0, r3
 801615a:	3708      	adds	r7, #8
 801615c:	46bd      	mov	sp, r7
 801615e:	bd80      	pop	{r7, pc}
 8016160:	0802b060 	.word	0x0802b060

08016164 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 8016164:	b580      	push	{r7, lr}
 8016166:	b082      	sub	sp, #8
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
}
 801616c:	6878      	ldr	r0, [r7, #4]
 801616e:	f7ff ffe7 	bl	8016140 <_ZN20NormalTestTerminatorD1Ev>
 8016172:	2104      	movs	r1, #4
 8016174:	6878      	ldr	r0, [r7, #4]
 8016176:	f7f5 ff87 	bl	800c088 <_ZdlPvj>
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	4618      	mov	r0, r3
 801617e:	3708      	adds	r7, #8
 8016180:	46bd      	mov	sp, r7
 8016182:	bd80      	pop	{r7, pc}

08016184 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 8016184:	b580      	push	{r7, lr}
 8016186:	b082      	sub	sp, #8
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 801618c:	4b03      	ldr	r3, [pc, #12]	; (801619c <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8016192:	bf00      	nop
 8016194:	3708      	adds	r7, #8
 8016196:	46bd      	mov	sp, r7
 8016198:	bd80      	pop	{r7, pc}
 801619a:	bf00      	nop
 801619c:	200000a0 	.word	0x200000a0

080161a0 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 80161a0:	b580      	push	{r7, lr}
 80161a2:	b082      	sub	sp, #8
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	6078      	str	r0, [r7, #4]
 80161a8:	4a05      	ldr	r2, [pc, #20]	; (80161c0 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	601a      	str	r2, [r3, #0]
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	4618      	mov	r0, r3
 80161b2:	f7ff ff9b 	bl	80160ec <_ZN14TestTerminatorD1Ev>
{
}
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	4618      	mov	r0, r3
 80161ba:	3708      	adds	r7, #8
 80161bc:	46bd      	mov	sp, r7
 80161be:	bd80      	pop	{r7, pc}
 80161c0:	0802b04c 	.word	0x0802b04c

080161c4 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b082      	sub	sp, #8
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
}
 80161cc:	6878      	ldr	r0, [r7, #4]
 80161ce:	f7ff ffe7 	bl	80161a0 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 80161d2:	2104      	movs	r1, #4
 80161d4:	6878      	ldr	r0, [r7, #4]
 80161d6:	f7f5 ff57 	bl	800c088 <_ZdlPvj>
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	4618      	mov	r0, r3
 80161de:	3708      	adds	r7, #8
 80161e0:	46bd      	mov	sp, r7
 80161e2:	bd80      	pop	{r7, pc}

080161e4 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b082      	sub	sp, #8
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 80161ec:	f7fe fbaa 	bl	8014944 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	4618      	mov	r0, r3
 80161f4:	f7ff ff8a 	bl	801610c <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 80161f8:	bf00      	nop
 80161fa:	3708      	adds	r7, #8
 80161fc:	46bd      	mov	sp, r7
 80161fe:	bd80      	pop	{r7, pc}

08016200 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 8016200:	b580      	push	{r7, lr}
 8016202:	b082      	sub	sp, #8
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
 8016208:	4a05      	ldr	r2, [pc, #20]	; (8016220 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	601a      	str	r2, [r3, #0]
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	4618      	mov	r0, r3
 8016212:	f7ff ff95 	bl	8016140 <_ZN20NormalTestTerminatorD1Ev>
{
}
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	4618      	mov	r0, r3
 801621a:	3708      	adds	r7, #8
 801621c:	46bd      	mov	sp, r7
 801621e:	bd80      	pop	{r7, pc}
 8016220:	0802b038 	.word	0x0802b038

08016224 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 8016224:	b580      	push	{r7, lr}
 8016226:	b082      	sub	sp, #8
 8016228:	af00      	add	r7, sp, #0
 801622a:	6078      	str	r0, [r7, #4]
}
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	f7ff ffe7 	bl	8016200 <_ZN22CrashingTestTerminatorD1Ev>
 8016232:	2104      	movs	r1, #4
 8016234:	6878      	ldr	r0, [r7, #4]
 8016236:	f7f5 ff27 	bl	800c088 <_ZdlPvj>
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	4618      	mov	r0, r3
 801623e:	3708      	adds	r7, #8
 8016240:	46bd      	mov	sp, r7
 8016242:	bd80      	pop	{r7, pc}

08016244 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 8016244:	b580      	push	{r7, lr}
 8016246:	b084      	sub	sp, #16
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
 801624c:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	2200      	movs	r2, #0
 8016252:	601a      	str	r2, [r3, #0]
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	2200      	movs	r2, #0
 8016258:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 801625a:	683b      	ldr	r3, [r7, #0]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d007      	beq.n	8016270 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 8016260:	683b      	ldr	r3, [r7, #0]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	3310      	adds	r3, #16
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	6838      	ldr	r0, [r7, #0]
 801626a:	4798      	blx	r3
 801626c:	4603      	mov	r3, r0
 801626e:	e000      	b.n	8016272 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 8016270:	2300      	movs	r3, #0
 8016272:	687a      	ldr	r2, [r7, #4]
 8016274:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	685b      	ldr	r3, [r3, #4]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d02d      	beq.n	80162da <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	685b      	ldr	r3, [r3, #4]
 8016282:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8016286:	4293      	cmp	r3, r2
 8016288:	d201      	bcs.n	801628e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 801628a:	009b      	lsls	r3, r3, #2
 801628c:	e001      	b.n	8016292 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 801628e:	f04f 33ff 	mov.w	r3, #4294967295
 8016292:	f240 3237 	movw	r2, #823	; 0x337
 8016296:	4914      	ldr	r1, [pc, #80]	; (80162e8 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 8016298:	4618      	mov	r0, r3
 801629a:	f7f5 ff05 	bl	800c0a8 <_ZnajPKci>
 801629e:	4602      	mov	r2, r0
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 80162a4:	683b      	ldr	r3, [r7, #0]
 80162a6:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80162a8:	2300      	movs	r3, #0
 80162aa:	60bb      	str	r3, [r7, #8]
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	685b      	ldr	r3, [r3, #4]
 80162b0:	68ba      	ldr	r2, [r7, #8]
 80162b2:	429a      	cmp	r2, r3
 80162b4:	d212      	bcs.n	80162dc <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	681a      	ldr	r2, [r3, #0]
 80162ba:	68bb      	ldr	r3, [r7, #8]
 80162bc:	009b      	lsls	r3, r3, #2
 80162be:	4413      	add	r3, r2
 80162c0:	68fa      	ldr	r2, [r7, #12]
 80162c2:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	330c      	adds	r3, #12
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	68f8      	ldr	r0, [r7, #12]
 80162ce:	4798      	blx	r3
 80162d0:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80162d2:	68bb      	ldr	r3, [r7, #8]
 80162d4:	3301      	adds	r3, #1
 80162d6:	60bb      	str	r3, [r7, #8]
 80162d8:	e7e8      	b.n	80162ac <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 80162da:	bf00      	nop
    }
}
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	4618      	mov	r0, r3
 80162e0:	3710      	adds	r7, #16
 80162e2:	46bd      	mov	sp, r7
 80162e4:	bd80      	pop	{r7, pc}
 80162e6:	bf00      	nop
 80162e8:	08027220 	.word	0x08027220

080162ec <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b082      	sub	sp, #8
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d004      	beq.n	8016306 <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	4618      	mov	r0, r3
 8016302:	f7f5 fee5 	bl	800c0d0 <_ZdaPv>
}
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	4618      	mov	r0, r3
 801630a:	3708      	adds	r7, #8
 801630c:	46bd      	mov	sp, r7
 801630e:	bd80      	pop	{r7, pc}

08016310 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 8016310:	b480      	push	{r7}
 8016312:	b087      	sub	sp, #28
 8016314:	af00      	add	r7, sp, #0
 8016316:	60f8      	str	r0, [r7, #12]
 8016318:	60b9      	str	r1, [r7, #8]
 801631a:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	681a      	ldr	r2, [r3, #0]
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	009b      	lsls	r3, r3, #2
 8016324:	4413      	add	r3, r2
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	681a      	ldr	r2, [r3, #0]
 801632e:	68bb      	ldr	r3, [r7, #8]
 8016330:	009b      	lsls	r3, r3, #2
 8016332:	4413      	add	r3, r2
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	681a      	ldr	r2, [r3, #0]
 801633c:	68bb      	ldr	r3, [r7, #8]
 801633e:	009b      	lsls	r3, r3, #2
 8016340:	4413      	add	r3, r2
 8016342:	697a      	ldr	r2, [r7, #20]
 8016344:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	681a      	ldr	r2, [r3, #0]
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	009b      	lsls	r3, r3, #2
 801634e:	4413      	add	r3, r2
 8016350:	693a      	ldr	r2, [r7, #16]
 8016352:	601a      	str	r2, [r3, #0]
}
 8016354:	bf00      	nop
 8016356:	371c      	adds	r7, #28
 8016358:	46bd      	mov	sp, r7
 801635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801635e:	4770      	bx	lr

08016360 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b084      	sub	sp, #16
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]
 8016368:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	685b      	ldr	r3, [r3, #4]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d028      	beq.n	80163c4 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 8016372:	4b17      	ldr	r3, [pc, #92]	; (80163d0 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	6838      	ldr	r0, [r7, #0]
 8016378:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	685b      	ldr	r3, [r3, #4]
 801637e:	3b01      	subs	r3, #1
 8016380:	60fb      	str	r3, [r7, #12]
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d019      	beq.n	80163bc <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	685b      	ldr	r3, [r3, #4]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d01b      	beq.n	80163c8 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 8016390:	4b10      	ldr	r3, [pc, #64]	; (80163d4 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	4798      	blx	r3
 8016396:	4603      	mov	r3, r0
 8016398:	461a      	mov	r2, r3
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	3301      	adds	r3, #1
 801639e:	fbb2 f1f3 	udiv	r1, r2, r3
 80163a2:	fb03 f301 	mul.w	r3, r3, r1
 80163a6:	1ad3      	subs	r3, r2, r3
 80163a8:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 80163aa:	68ba      	ldr	r2, [r7, #8]
 80163ac:	68f9      	ldr	r1, [r7, #12]
 80163ae:	6878      	ldr	r0, [r7, #4]
 80163b0:	f7ff ffae 	bl	8016310 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	3b01      	subs	r3, #1
 80163b8:	60fb      	str	r3, [r7, #12]
 80163ba:	e7e2      	b.n	8016382 <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 80163bc:	6878      	ldr	r0, [r7, #4]
 80163be:	f000 f834 	bl	801642a <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 80163c2:	e002      	b.n	80163ca <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 80163c4:	bf00      	nop
 80163c6:	e000      	b.n	80163ca <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 80163c8:	bf00      	nop
}
 80163ca:	3710      	adds	r7, #16
 80163cc:	46bd      	mov	sp, r7
 80163ce:	bd80      	pop	{r7, pc}
 80163d0:	200000e0 	.word	0x200000e0
 80163d4:	200000e4 	.word	0x200000e4

080163d8 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 80163d8:	b580      	push	{r7, lr}
 80163da:	b086      	sub	sp, #24
 80163dc:	af00      	add	r7, sp, #0
 80163de:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	685b      	ldr	r3, [r3, #4]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d01c      	beq.n	8016422 <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	685b      	ldr	r3, [r3, #4]
 80163ec:	085b      	lsrs	r3, r3, #1
 80163ee:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 80163f0:	2300      	movs	r3, #0
 80163f2:	617b      	str	r3, [r7, #20]
 80163f4:	697a      	ldr	r2, [r7, #20]
 80163f6:	693b      	ldr	r3, [r7, #16]
 80163f8:	429a      	cmp	r2, r3
 80163fa:	d20e      	bcs.n	801641a <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	685a      	ldr	r2, [r3, #4]
 8016400:	697b      	ldr	r3, [r7, #20]
 8016402:	1ad3      	subs	r3, r2, r3
 8016404:	3b01      	subs	r3, #1
 8016406:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 8016408:	68fa      	ldr	r2, [r7, #12]
 801640a:	6979      	ldr	r1, [r7, #20]
 801640c:	6878      	ldr	r0, [r7, #4]
 801640e:	f7ff ff7f 	bl	8016310 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 8016412:	697b      	ldr	r3, [r7, #20]
 8016414:	3301      	adds	r3, #1
 8016416:	617b      	str	r3, [r7, #20]
 8016418:	e7ec      	b.n	80163f4 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 801641a:	6878      	ldr	r0, [r7, #4]
 801641c:	f000 f805 	bl	801642a <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8016420:	e000      	b.n	8016424 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 8016422:	bf00      	nop
}
 8016424:	3718      	adds	r7, #24
 8016426:	46bd      	mov	sp, r7
 8016428:	bd80      	pop	{r7, pc}

0801642a <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 801642a:	b580      	push	{r7, lr}
 801642c:	b084      	sub	sp, #16
 801642e:	af00      	add	r7, sp, #0
 8016430:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 8016432:	2300      	movs	r3, #0
 8016434:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8016436:	2300      	movs	r3, #0
 8016438:	60bb      	str	r3, [r7, #8]
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	685b      	ldr	r3, [r3, #4]
 801643e:	68ba      	ldr	r2, [r7, #8]
 8016440:	429a      	cmp	r2, r3
 8016442:	d221      	bcs.n	8016488 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	681a      	ldr	r2, [r3, #0]
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	6859      	ldr	r1, [r3, #4]
 801644c:	68bb      	ldr	r3, [r7, #8]
 801644e:	1acb      	subs	r3, r1, r3
 8016450:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016454:	3b01      	subs	r3, #1
 8016456:	009b      	lsls	r3, r3, #2
 8016458:	4413      	add	r3, r2
 801645a:	6818      	ldr	r0, [r3, #0]
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	681a      	ldr	r2, [r3, #0]
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	6859      	ldr	r1, [r3, #4]
 8016464:	68bb      	ldr	r3, [r7, #8]
 8016466:	1acb      	subs	r3, r1, r3
 8016468:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801646c:	3b01      	subs	r3, #1
 801646e:	009b      	lsls	r3, r3, #2
 8016470:	4413      	add	r3, r2
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	3308      	adds	r3, #8
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	68f9      	ldr	r1, [r7, #12]
 801647c:	4798      	blx	r3
 801647e:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8016480:	68bb      	ldr	r3, [r7, #8]
 8016482:	3301      	adds	r3, #1
 8016484:	60bb      	str	r3, [r7, #8]
 8016486:	e7d8      	b.n	801643a <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 8016488:	bf00      	nop
 801648a:	3710      	adds	r7, #16
 801648c:	46bd      	mov	sp, r7
 801648e:	bd80      	pop	{r7, pc}

08016490 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 8016490:	b580      	push	{r7, lr}
 8016492:	b082      	sub	sp, #8
 8016494:	af00      	add	r7, sp, #0
 8016496:	6078      	str	r0, [r7, #4]
    return get(0);
 8016498:	2100      	movs	r1, #0
 801649a:	6878      	ldr	r0, [r7, #4]
 801649c:	f000 f805 	bl	80164aa <_ZNK22UtestShellPointerArray3getEj>
 80164a0:	4603      	mov	r3, r0
}
 80164a2:	4618      	mov	r0, r3
 80164a4:	3708      	adds	r7, #8
 80164a6:	46bd      	mov	sp, r7
 80164a8:	bd80      	pop	{r7, pc}

080164aa <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 80164aa:	b480      	push	{r7}
 80164ac:	b083      	sub	sp, #12
 80164ae:	af00      	add	r7, sp, #0
 80164b0:	6078      	str	r0, [r7, #4]
 80164b2:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	685b      	ldr	r3, [r3, #4]
 80164b8:	683a      	ldr	r2, [r7, #0]
 80164ba:	429a      	cmp	r2, r3
 80164bc:	d301      	bcc.n	80164c2 <_ZNK22UtestShellPointerArray3getEj+0x18>
 80164be:	2300      	movs	r3, #0
 80164c0:	e005      	b.n	80164ce <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	681a      	ldr	r2, [r3, #0]
 80164c6:	683b      	ldr	r3, [r7, #0]
 80164c8:	009b      	lsls	r3, r3, #2
 80164ca:	4413      	add	r3, r2
 80164cc:	681b      	ldr	r3, [r3, #0]
}
 80164ce:	4618      	mov	r0, r3
 80164d0:	370c      	adds	r7, #12
 80164d2:	46bd      	mov	sp, r7
 80164d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164d8:	4770      	bx	lr
	...

080164dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 80164dc:	b580      	push	{r7, lr}
 80164de:	b084      	sub	sp, #16
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	60f8      	str	r0, [r7, #12]
 80164e4:	60b9      	str	r1, [r7, #8]
 80164e6:	607a      	str	r2, [r7, #4]
 80164e8:	603b      	str	r3, [r7, #0]
 80164ea:	4a10      	ldr	r2, [pc, #64]	; (801652c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 80164f0:	6879      	ldr	r1, [r7, #4]
 80164f2:	68b8      	ldr	r0, [r7, #8]
 80164f4:	f7fe fc27 	bl	8014d46 <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 80164f8:	6839      	ldr	r1, [r7, #0]
 80164fa:	68b8      	ldr	r0, [r7, #8]
 80164fc:	f7fe fc31 	bl	8014d62 <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 8016500:	69b9      	ldr	r1, [r7, #24]
 8016502:	68b8      	ldr	r0, [r7, #8]
 8016504:	f7fe fc03 	bl	8014d0e <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 8016508:	69f9      	ldr	r1, [r7, #28]
 801650a:	68b8      	ldr	r0, [r7, #8]
 801650c:	f7fe fc0d 	bl	8014d2a <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 8016510:	f7fd fc20 	bl	8013d54 <_ZN12TestRegistry18getCurrentRegistryEv>
 8016514:	4603      	mov	r3, r0
 8016516:	681a      	ldr	r2, [r3, #0]
 8016518:	3208      	adds	r2, #8
 801651a:	6812      	ldr	r2, [r2, #0]
 801651c:	68b9      	ldr	r1, [r7, #8]
 801651e:	4618      	mov	r0, r3
 8016520:	4790      	blx	r2
}
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	4618      	mov	r0, r3
 8016526:	3710      	adds	r7, #16
 8016528:	46bd      	mov	sp, r7
 801652a:	bd80      	pop	{r7, pc}
 801652c:	0802af7c 	.word	0x0802af7c

08016530 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 8016530:	b480      	push	{r7}
 8016532:	b083      	sub	sp, #12
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
 8016538:	4a04      	ldr	r2, [pc, #16]	; (801654c <_ZN13TestInstallerD1Ev+0x1c>)
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	601a      	str	r2, [r3, #0]
{
}
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	4618      	mov	r0, r3
 8016542:	370c      	adds	r7, #12
 8016544:	46bd      	mov	sp, r7
 8016546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801654a:	4770      	bx	lr
 801654c:	0802af7c 	.word	0x0802af7c

08016550 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 8016550:	b580      	push	{r7, lr}
 8016552:	b082      	sub	sp, #8
 8016554:	af00      	add	r7, sp, #0
 8016556:	6078      	str	r0, [r7, #4]
}
 8016558:	6878      	ldr	r0, [r7, #4]
 801655a:	f7ff ffe9 	bl	8016530 <_ZN13TestInstallerD1Ev>
 801655e:	2104      	movs	r1, #4
 8016560:	6878      	ldr	r0, [r7, #4]
 8016562:	f7f5 fd91 	bl	800c088 <_ZdlPvj>
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	4618      	mov	r0, r3
 801656a:	3708      	adds	r7, #8
 801656c:	46bd      	mov	sp, r7
 801656e:	bd80      	pop	{r7, pc}

08016570 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 8016570:	b580      	push	{r7, lr}
 8016572:	b082      	sub	sp, #8
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
 8016578:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d10a      	bne.n	8016596 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8016580:	683b      	ldr	r3, [r7, #0]
 8016582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016586:	4293      	cmp	r3, r2
 8016588:	d105      	bne.n	8016596 <_Z41__static_initialization_and_destruction_0ii+0x26>
 801658a:	4805      	ldr	r0, [pc, #20]	; (80165a0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 801658c:	f7ff fe38 	bl	8016200 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 8016590:	4804      	ldr	r0, [pc, #16]	; (80165a4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8016592:	f7ff fdd5 	bl	8016140 <_ZN20NormalTestTerminatorD1Ev>
}
 8016596:	bf00      	nop
 8016598:	3708      	adds	r7, #8
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}
 801659e:	bf00      	nop
 80165a0:	20000090 	.word	0x20000090
 80165a4:	2000008c 	.word	0x2000008c

080165a8 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 80165a8:	b580      	push	{r7, lr}
 80165aa:	af00      	add	r7, sp, #0
 80165ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80165b0:	2001      	movs	r0, #1
 80165b2:	f7ff ffdd 	bl	8016570 <_Z41__static_initialization_and_destruction_0ii>
 80165b6:	bd80      	pop	{r7, pc}

080165b8 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 80165b8:	b580      	push	{r7, lr}
 80165ba:	af00      	add	r7, sp, #0
 80165bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80165c0:	2000      	movs	r0, #0
 80165c2:	f7ff ffd5 	bl	8016570 <_Z41__static_initialization_and_destruction_0ii>
 80165c6:	bd80      	pop	{r7, pc}

080165c8 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80165c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165ca:	b083      	sub	sp, #12
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	ed87 0b00 	vstr	d0, [r7]
 80165d2:	683c      	ldr	r4, [r7, #0]
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80165da:	2301      	movs	r3, #1
 80165dc:	461e      	mov	r6, r3
 80165de:	f04f 32ff 	mov.w	r2, #4294967295
 80165e2:	4b10      	ldr	r3, [pc, #64]	; (8016624 <_ZSt5isinfd+0x5c>)
 80165e4:	4620      	mov	r0, r4
 80165e6:	4629      	mov	r1, r5
 80165e8:	f7ea f8ce 	bl	8000788 <__aeabi_dcmpun>
 80165ec:	4603      	mov	r3, r0
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d10b      	bne.n	801660a <_ZSt5isinfd+0x42>
 80165f2:	f04f 32ff 	mov.w	r2, #4294967295
 80165f6:	4b0b      	ldr	r3, [pc, #44]	; (8016624 <_ZSt5isinfd+0x5c>)
 80165f8:	4620      	mov	r0, r4
 80165fa:	4629      	mov	r1, r5
 80165fc:	f7ea f8a6 	bl	800074c <__aeabi_dcmple>
 8016600:	4603      	mov	r3, r0
 8016602:	2b00      	cmp	r3, #0
 8016604:	d101      	bne.n	801660a <_ZSt5isinfd+0x42>
 8016606:	2300      	movs	r3, #0
 8016608:	461e      	mov	r6, r3
 801660a:	b2f3      	uxtb	r3, r6
 801660c:	f083 0301 	eor.w	r3, r3, #1
 8016610:	b2db      	uxtb	r3, r3
 8016612:	2b00      	cmp	r3, #0
 8016614:	bf14      	ite	ne
 8016616:	2301      	movne	r3, #1
 8016618:	2300      	moveq	r3, #0
 801661a:	b2db      	uxtb	r3, r3
 801661c:	4618      	mov	r0, r3
 801661e:	370c      	adds	r7, #12
 8016620:	46bd      	mov	sp, r7
 8016622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016624:	7fefffff 	.word	0x7fefffff

08016628 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8016628:	b590      	push	{r4, r7, lr}
 801662a:	b083      	sub	sp, #12
 801662c:	af00      	add	r7, sp, #0
 801662e:	ed87 0b00 	vstr	d0, [r7]
 8016632:	2301      	movs	r3, #1
 8016634:	461c      	mov	r4, r3
 8016636:	e9d7 2300 	ldrd	r2, r3, [r7]
 801663a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801663e:	f7ea f8a3 	bl	8000788 <__aeabi_dcmpun>
 8016642:	4603      	mov	r3, r0
 8016644:	2b00      	cmp	r3, #0
 8016646:	d101      	bne.n	801664c <_ZSt5isnand+0x24>
 8016648:	2300      	movs	r3, #0
 801664a:	461c      	mov	r4, r3
 801664c:	b2e3      	uxtb	r3, r4
 801664e:	2b00      	cmp	r3, #0
 8016650:	bf14      	ite	ne
 8016652:	2301      	movne	r3, #1
 8016654:	2300      	moveq	r3, #0
 8016656:	b2db      	uxtb	r3, r3
 8016658:	4618      	mov	r0, r3
 801665a:	370c      	adds	r7, #12
 801665c:	46bd      	mov	sp, r7
 801665e:	bd90      	pop	{r4, r7, pc}

08016660 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 8016660:	b590      	push	{r4, r7, lr}
 8016662:	b095      	sub	sp, #84	; 0x54
 8016664:	af00      	add	r7, sp, #0
 8016666:	60f8      	str	r0, [r7, #12]
 8016668:	60b9      	str	r1, [r7, #8]
 801666a:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	3334      	adds	r3, #52	; 0x34
 8016672:	681c      	ldr	r4, [r3, #0]
 8016674:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016678:	490f      	ldr	r1, [pc, #60]	; (80166b8 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 801667a:	4618      	mov	r0, r3
 801667c:	f7f8 f8b3 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016680:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016684:	f107 0314 	add.w	r3, r7, #20
 8016688:	68f9      	ldr	r1, [r7, #12]
 801668a:	4618      	mov	r0, r3
 801668c:	f7f9 ff0a 	bl	80104a4 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8016690:	f107 0314 	add.w	r3, r7, #20
 8016694:	4619      	mov	r1, r3
 8016696:	6878      	ldr	r0, [r7, #4]
 8016698:	47a0      	blx	r4
 801669a:	f107 0314 	add.w	r3, r7, #20
 801669e:	4618      	mov	r0, r3
 80166a0:	f7f9 ffc0 	bl	8010624 <_ZN11TestFailureD1Ev>
 80166a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80166a8:	4618      	mov	r0, r3
 80166aa:	f7f8 fc54 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 80166ae:	bf00      	nop
 80166b0:	3754      	adds	r7, #84	; 0x54
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bd90      	pop	{r4, r7, pc}
 80166b6:	bf00      	nop
 80166b8:	080273a8 	.word	0x080273a8

080166bc <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 80166bc:	b480      	push	{r7}
 80166be:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 80166c0:	2301      	movs	r3, #1
}
 80166c2:	4618      	mov	r0, r3
 80166c4:	46bd      	mov	sp, r7
 80166c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ca:	4770      	bx	lr

080166cc <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b082      	sub	sp, #8
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	6078      	str	r0, [r7, #4]
 80166d4:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 80166d6:	4b13      	ldr	r3, [pc, #76]	; (8016724 <PlatformSpecificSetJmpImplementation+0x58>)
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	225c      	movs	r2, #92	; 0x5c
 80166dc:	fb02 f303 	mul.w	r3, r2, r3
 80166e0:	4a11      	ldr	r2, [pc, #68]	; (8016728 <PlatformSpecificSetJmpImplementation+0x5c>)
 80166e2:	4413      	add	r3, r2
 80166e4:	4618      	mov	r0, r3
 80166e6:	f7e9 fd9b 	bl	8000220 <setjmp>
 80166ea:	4603      	mov	r3, r0
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	bf0c      	ite	eq
 80166f0:	2301      	moveq	r3, #1
 80166f2:	2300      	movne	r3, #0
 80166f4:	b2db      	uxtb	r3, r3
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d00e      	beq.n	8016718 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 80166fa:	4b0a      	ldr	r3, [pc, #40]	; (8016724 <PlatformSpecificSetJmpImplementation+0x58>)
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	3301      	adds	r3, #1
 8016700:	4a08      	ldr	r2, [pc, #32]	; (8016724 <PlatformSpecificSetJmpImplementation+0x58>)
 8016702:	6013      	str	r3, [r2, #0]
        function(data);
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	6838      	ldr	r0, [r7, #0]
 8016708:	4798      	blx	r3
        jmp_buf_index--;
 801670a:	4b06      	ldr	r3, [pc, #24]	; (8016724 <PlatformSpecificSetJmpImplementation+0x58>)
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	3b01      	subs	r3, #1
 8016710:	4a04      	ldr	r2, [pc, #16]	; (8016724 <PlatformSpecificSetJmpImplementation+0x58>)
 8016712:	6013      	str	r3, [r2, #0]
        return 1;
 8016714:	2301      	movs	r3, #1
 8016716:	e000      	b.n	801671a <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 8016718:	2300      	movs	r3, #0
}
 801671a:	4618      	mov	r0, r3
 801671c:	3708      	adds	r7, #8
 801671e:	46bd      	mov	sp, r7
 8016720:	bd80      	pop	{r7, pc}
 8016722:	bf00      	nop
 8016724:	20000f40 	.word	0x20000f40
 8016728:	20000ba8 	.word	0x20000ba8

0801672c <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 801672c:	b580      	push	{r7, lr}
 801672e:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 8016730:	4b07      	ldr	r3, [pc, #28]	; (8016750 <PlatformSpecificLongJmpImplementation+0x24>)
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	3b01      	subs	r3, #1
 8016736:	4a06      	ldr	r2, [pc, #24]	; (8016750 <PlatformSpecificLongJmpImplementation+0x24>)
 8016738:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 801673a:	4b05      	ldr	r3, [pc, #20]	; (8016750 <PlatformSpecificLongJmpImplementation+0x24>)
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	225c      	movs	r2, #92	; 0x5c
 8016740:	fb02 f303 	mul.w	r3, r2, r3
 8016744:	4a03      	ldr	r2, [pc, #12]	; (8016754 <PlatformSpecificLongJmpImplementation+0x28>)
 8016746:	4413      	add	r3, r2
 8016748:	2101      	movs	r1, #1
 801674a:	4618      	mov	r0, r3
 801674c:	f7e9 fd6e 	bl	800022c <longjmp>
 8016750:	20000f40 	.word	0x20000f40
 8016754:	20000ba8 	.word	0x20000ba8

08016758 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 8016758:	b480      	push	{r7}
 801675a:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 801675c:	2300      	movs	r3, #0
#endif
}
 801675e:	4618      	mov	r0, r3
 8016760:	46bd      	mov	sp, r7
 8016762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016766:	4770      	bx	lr

08016768 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b084      	sub	sp, #16
 801676c:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 801676e:	2000      	movs	r0, #0
 8016770:	f00e ec4e 	blx	8025010 <__time_veneer>
 8016774:	4602      	mov	r2, r0
 8016776:	460b      	mov	r3, r1
 8016778:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 801677c:	463b      	mov	r3, r7
 801677e:	4618      	mov	r0, r3
 8016780:	f00b fb7a 	bl	8021e78 <localtime>
 8016784:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	4a04      	ldr	r2, [pc, #16]	; (801679c <TimeStringImplementation+0x34>)
 801678a:	2150      	movs	r1, #80	; 0x50
 801678c:	4804      	ldr	r0, [pc, #16]	; (80167a0 <TimeStringImplementation+0x38>)
 801678e:	f00c fc83 	bl	8023098 <strftime>
    return dateTime;
 8016792:	4b03      	ldr	r3, [pc, #12]	; (80167a0 <TimeStringImplementation+0x38>)
}
 8016794:	4618      	mov	r0, r3
 8016796:	3710      	adds	r7, #16
 8016798:	46bd      	mov	sp, r7
 801679a:	bd80      	pop	{r7, pc}
 801679c:	080273e4 	.word	0x080273e4
 80167a0:	20000f44 	.word	0x20000f44

080167a4 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b082      	sub	sp, #8
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	6078      	str	r0, [r7, #4]
 80167ac:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 80167ae:	6839      	ldr	r1, [r7, #0]
 80167b0:	6878      	ldr	r0, [r7, #4]
 80167b2:	f00b f997 	bl	8021ae4 <fopen>
 80167b6:	4603      	mov	r3, r0
#endif
}
 80167b8:	4618      	mov	r0, r3
 80167ba:	3708      	adds	r7, #8
 80167bc:	46bd      	mov	sp, r7
 80167be:	bd80      	pop	{r7, pc}

080167c0 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b082      	sub	sp, #8
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	6078      	str	r0, [r7, #4]
 80167c8:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 80167ca:	6839      	ldr	r1, [r7, #0]
 80167cc:	6878      	ldr	r0, [r7, #4]
 80167ce:	f00b f9f7 	bl	8021bc0 <fputs>
}
 80167d2:	bf00      	nop
 80167d4:	3708      	adds	r7, #8
 80167d6:	46bd      	mov	sp, r7
 80167d8:	bd80      	pop	{r7, pc}

080167da <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 80167da:	b580      	push	{r7, lr}
 80167dc:	b082      	sub	sp, #8
 80167de:	af00      	add	r7, sp, #0
 80167e0:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 80167e2:	6878      	ldr	r0, [r7, #4]
 80167e4:	f00a ff78 	bl	80216d8 <fclose>
}
 80167e8:	bf00      	nop
 80167ea:	3708      	adds	r7, #8
 80167ec:	46bd      	mov	sp, r7
 80167ee:	bd80      	pop	{r7, pc}

080167f0 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	af00      	add	r7, sp, #0
  fflush(stdout);
 80167f4:	4b03      	ldr	r3, [pc, #12]	; (8016804 <PlatformSpecificFlushImplementation+0x14>)
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	689b      	ldr	r3, [r3, #8]
 80167fa:	4618      	mov	r0, r3
 80167fc:	f00b f836 	bl	802186c <fflush>
}
 8016800:	bf00      	nop
 8016802:	bd80      	pop	{r7, pc}
 8016804:	20000108 	.word	0x20000108

08016808 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b082      	sub	sp, #8
 801680c:	af00      	add	r7, sp, #0
 801680e:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 8016812:	ed97 0b00 	vldr	d0, [r7]
 8016816:	f7ff ff07 	bl	8016628 <_ZSt5isnand>
 801681a:	4603      	mov	r3, r0
}
 801681c:	4618      	mov	r0, r3
 801681e:	3708      	adds	r7, #8
 8016820:	46bd      	mov	sp, r7
 8016822:	bd80      	pop	{r7, pc}

08016824 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 8016824:	b580      	push	{r7, lr}
 8016826:	b082      	sub	sp, #8
 8016828:	af00      	add	r7, sp, #0
 801682a:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 801682e:	ed97 0b00 	vldr	d0, [r7]
 8016832:	f7ff fec9 	bl	80165c8 <_ZSt5isinfd>
 8016836:	4603      	mov	r3, r0
}
 8016838:	4618      	mov	r0, r3
 801683a:	3708      	adds	r7, #8
 801683c:	46bd      	mov	sp, r7
 801683e:	bd80      	pop	{r7, pc}

08016840 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 8016840:	b480      	push	{r7}
 8016842:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 8016844:	2300      	movs	r3, #0
#endif

}
 8016846:	4618      	mov	r0, r3
 8016848:	46bd      	mov	sp, r7
 801684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801684e:	4770      	bx	lr

08016850 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 8016850:	b480      	push	{r7}
 8016852:	b083      	sub	sp, #12
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
}
 8016858:	bf00      	nop
 801685a:	370c      	adds	r7, #12
 801685c:	46bd      	mov	sp, r7
 801685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016862:	4770      	bx	lr

08016864 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 8016864:	b480      	push	{r7}
 8016866:	b083      	sub	sp, #12
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]
}
 801686c:	bf00      	nop
 801686e:	370c      	adds	r7, #12
 8016870:	46bd      	mov	sp, r7
 8016872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016876:	4770      	bx	lr

08016878 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8016878:	b480      	push	{r7}
 801687a:	b083      	sub	sp, #12
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
}
 8016880:	bf00      	nop
 8016882:	370c      	adds	r7, #12
 8016884:	46bd      	mov	sp, r7
 8016886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801688a:	4770      	bx	lr

0801688c <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 801688c:	b580      	push	{r7, lr}
 801688e:	b084      	sub	sp, #16
 8016890:	af00      	add	r7, sp, #0
 8016892:	60f8      	str	r0, [r7, #12]
 8016894:	60b9      	str	r1, [r7, #8]
 8016896:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8016898:	4a25      	ldr	r2, [pc, #148]	; (8016930 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	601a      	str	r2, [r3, #0]
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	68ba      	ldr	r2, [r7, #8]
 80168a2:	605a      	str	r2, [r3, #4]
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	687a      	ldr	r2, [r7, #4]
 80168a8:	609a      	str	r2, [r3, #8]
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	2200      	movs	r2, #0
 80168ae:	731a      	strb	r2, [r3, #12]
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	2200      	movs	r2, #0
 80168b4:	735a      	strb	r2, [r3, #13]
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	2200      	movs	r2, #0
 80168ba:	739a      	strb	r2, [r3, #14]
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	2200      	movs	r2, #0
 80168c0:	73da      	strb	r2, [r3, #15]
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	2200      	movs	r2, #0
 80168c6:	741a      	strb	r2, [r3, #16]
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	2200      	movs	r2, #0
 80168cc:	745a      	strb	r2, [r3, #17]
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	2200      	movs	r2, #0
 80168d2:	749a      	strb	r2, [r3, #18]
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	2200      	movs	r2, #0
 80168d8:	74da      	strb	r2, [r3, #19]
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	2200      	movs	r2, #0
 80168de:	751a      	strb	r2, [r3, #20]
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	2200      	movs	r2, #0
 80168e4:	755a      	strb	r2, [r3, #21]
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	2200      	movs	r2, #0
 80168ea:	759a      	strb	r2, [r3, #22]
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	2200      	movs	r2, #0
 80168f0:	75da      	strb	r2, [r3, #23]
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	2200      	movs	r2, #0
 80168f6:	761a      	strb	r2, [r3, #24]
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	2201      	movs	r2, #1
 80168fc:	61da      	str	r2, [r3, #28]
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	2200      	movs	r2, #0
 8016902:	621a      	str	r2, [r3, #32]
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	2200      	movs	r2, #0
 8016908:	625a      	str	r2, [r3, #36]	; 0x24
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	2200      	movs	r2, #0
 801690e:	629a      	str	r2, [r3, #40]	; 0x28
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	2200      	movs	r2, #0
 8016914:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	3330      	adds	r3, #48	; 0x30
 801691c:	4905      	ldr	r1, [pc, #20]	; (8016934 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 801691e:	4618      	mov	r0, r3
 8016920:	f7f7 ff61 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
{
}
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	4618      	mov	r0, r3
 8016928:	3710      	adds	r7, #16
 801692a:	46bd      	mov	sp, r7
 801692c:	bd80      	pop	{r7, pc}
 801692e:	bf00      	nop
 8016930:	0802b0a8 	.word	0x0802b0a8
 8016934:	080273f8 	.word	0x080273f8

08016938 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 8016938:	b580      	push	{r7, lr}
 801693a:	b082      	sub	sp, #8
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	4618      	mov	r0, r3
 8016944:	f7f8 fb07 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	4618      	mov	r0, r3
 801694c:	3708      	adds	r7, #8
 801694e:	46bd      	mov	sp, r7
 8016950:	bd80      	pop	{r7, pc}
	...

08016954 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 8016954:	b590      	push	{r4, r7, lr}
 8016956:	b085      	sub	sp, #20
 8016958:	af00      	add	r7, sp, #0
 801695a:	6078      	str	r0, [r7, #4]
 801695c:	4a20      	ldr	r2, [pc, #128]	; (80169e0 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016966:	2b00      	cmp	r3, #0
 8016968:	d015      	beq.n	8016996 <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801696e:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016974:	4618      	mov	r0, r3
 8016976:	f00a fda4 	bl	80214c2 <_ZNK10TestFilter7getNextEv>
 801697a:	4602      	mov	r2, r0
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 8016980:	68fc      	ldr	r4, [r7, #12]
 8016982:	2c00      	cmp	r4, #0
 8016984:	d0ed      	beq.n	8016962 <_ZN20CommandLineArgumentsD1Ev+0xe>
 8016986:	4620      	mov	r0, r4
 8016988:	f7ff ffd6 	bl	8016938 <_ZN10TestFilterD1Ev>
 801698c:	2110      	movs	r1, #16
 801698e:	4620      	mov	r0, r4
 8016990:	f7f5 fb7a 	bl	800c088 <_ZdlPvj>
    while(groupFilters_) {
 8016994:	e7e5      	b.n	8016962 <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801699a:	2b00      	cmp	r3, #0
 801699c:	d015      	beq.n	80169ca <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80169a2:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80169a8:	4618      	mov	r0, r3
 80169aa:	f00a fd8a 	bl	80214c2 <_ZNK10TestFilter7getNextEv>
 80169ae:	4602      	mov	r2, r0
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 80169b4:	68bc      	ldr	r4, [r7, #8]
 80169b6:	2c00      	cmp	r4, #0
 80169b8:	d0ed      	beq.n	8016996 <_ZN20CommandLineArgumentsD1Ev+0x42>
 80169ba:	4620      	mov	r0, r4
 80169bc:	f7ff ffbc 	bl	8016938 <_ZN10TestFilterD1Ev>
 80169c0:	2110      	movs	r1, #16
 80169c2:	4620      	mov	r0, r4
 80169c4:	f7f5 fb60 	bl	800c088 <_ZdlPvj>
    while(nameFilters_) {
 80169c8:	e7e5      	b.n	8016996 <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	3330      	adds	r3, #48	; 0x30
 80169ce:	4618      	mov	r0, r3
 80169d0:	f7f8 fac1 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    }
}
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	4618      	mov	r0, r3
 80169d8:	3714      	adds	r7, #20
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd90      	pop	{r4, r7, pc}
 80169de:	bf00      	nop
 80169e0:	0802b0a8 	.word	0x0802b0a8

080169e4 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b082      	sub	sp, #8
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	6078      	str	r0, [r7, #4]
}
 80169ec:	6878      	ldr	r0, [r7, #4]
 80169ee:	f7ff ffb1 	bl	8016954 <_ZN20CommandLineArgumentsD1Ev>
 80169f2:	2138      	movs	r1, #56	; 0x38
 80169f4:	6878      	ldr	r0, [r7, #4]
 80169f6:	f7f5 fb47 	bl	800c088 <_ZdlPvj>
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	4618      	mov	r0, r3
 80169fe:	3708      	adds	r7, #8
 8016a00:	46bd      	mov	sp, r7
 8016a02:	bd80      	pop	{r7, pc}

08016a04 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 8016a04:	b5b0      	push	{r4, r5, r7, lr}
 8016a06:	b0be      	sub	sp, #248	; 0xf8
 8016a08:	af02      	add	r7, sp, #8
 8016a0a:	6078      	str	r0, [r7, #4]
 8016a0c:	6039      	str	r1, [r7, #0]
 8016a0e:	2400      	movs	r4, #0
    bool correctParameters = true;
 8016a10:	2301      	movs	r3, #1
 8016a12:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 8016a16:	2301      	movs	r3, #1
 8016a18:	613b      	str	r3, [r7, #16]
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	685a      	ldr	r2, [r3, #4]
 8016a1e:	693b      	ldr	r3, [r7, #16]
 8016a20:	429a      	cmp	r2, r3
 8016a22:	f340 83a4 	ble.w	801716e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	689a      	ldr	r2, [r3, #8]
 8016a2a:	693b      	ldr	r3, [r7, #16]
 8016a2c:	009b      	lsls	r3, r3, #2
 8016a2e:	4413      	add	r3, r2
 8016a30:	681a      	ldr	r2, [r3, #0]
 8016a32:	f107 0308 	add.w	r3, r7, #8
 8016a36:	4611      	mov	r1, r2
 8016a38:	4618      	mov	r0, r3
 8016a3a:	f7f7 fed4 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 8016a3e:	f107 0314 	add.w	r3, r7, #20
 8016a42:	49c8      	ldr	r1, [pc, #800]	; (8016d64 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 8016a44:	4618      	mov	r0, r3
 8016a46:	f7f7 fece 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016a4a:	f107 0214 	add.w	r2, r7, #20
 8016a4e:	f107 0308 	add.w	r3, r7, #8
 8016a52:	4611      	mov	r1, r2
 8016a54:	4618      	mov	r0, r3
 8016a56:	f7f8 fa8a 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8016a5a:	4603      	mov	r3, r0
 8016a5c:	461d      	mov	r5, r3
 8016a5e:	f107 0314 	add.w	r3, r7, #20
 8016a62:	4618      	mov	r0, r3
 8016a64:	f7f8 fa77 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016a68:	2d00      	cmp	r5, #0
 8016a6a:	d006      	beq.n	8016a7a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	2201      	movs	r2, #1
 8016a70:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 8016a72:	2300      	movs	r3, #0
 8016a74:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8016a78:	e366      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 8016a7a:	f107 031c 	add.w	r3, r7, #28
 8016a7e:	49ba      	ldr	r1, [pc, #744]	; (8016d68 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8016a80:	4618      	mov	r0, r3
 8016a82:	f7f7 feb0 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016a86:	f107 021c 	add.w	r2, r7, #28
 8016a8a:	f107 0308 	add.w	r3, r7, #8
 8016a8e:	4611      	mov	r1, r2
 8016a90:	4618      	mov	r0, r3
 8016a92:	f7f8 fa6c 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8016a96:	4603      	mov	r3, r0
 8016a98:	461d      	mov	r5, r3
 8016a9a:	f107 031c 	add.w	r3, r7, #28
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	f7f8 fa59 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016aa4:	2d00      	cmp	r5, #0
 8016aa6:	d003      	beq.n	8016ab0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	2201      	movs	r2, #1
 8016aac:	735a      	strb	r2, [r3, #13]
 8016aae:	e34b      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8016ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016ab4:	49ad      	ldr	r1, [pc, #692]	; (8016d6c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	f7f7 fe95 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016abc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8016ac0:	f107 0308 	add.w	r3, r7, #8
 8016ac4:	4611      	mov	r1, r2
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	f7f8 fa51 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8016acc:	4603      	mov	r3, r0
 8016ace:	461d      	mov	r5, r3
 8016ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	f7f8 fa3e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016ada:	2d00      	cmp	r5, #0
 8016adc:	d003      	beq.n	8016ae6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	2201      	movs	r2, #1
 8016ae2:	739a      	strb	r2, [r3, #14]
 8016ae4:	e330      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 8016ae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016aea:	49a1      	ldr	r1, [pc, #644]	; (8016d70 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 8016aec:	4618      	mov	r0, r3
 8016aee:	f7f7 fe7a 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016af2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8016af6:	f107 0308 	add.w	r3, r7, #8
 8016afa:	4611      	mov	r1, r2
 8016afc:	4618      	mov	r0, r3
 8016afe:	f7f8 fa36 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8016b02:	4603      	mov	r3, r0
 8016b04:	461d      	mov	r5, r3
 8016b06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f7f8 fa23 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016b10:	2d00      	cmp	r5, #0
 8016b12:	d003      	beq.n	8016b1c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	2201      	movs	r2, #1
 8016b18:	73da      	strb	r2, [r3, #15]
 8016b1a:	e315      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 8016b1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016b20:	4994      	ldr	r1, [pc, #592]	; (8016d74 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 8016b22:	4618      	mov	r0, r3
 8016b24:	f7f7 fe5f 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016b28:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8016b2c:	f107 0308 	add.w	r3, r7, #8
 8016b30:	4611      	mov	r1, r2
 8016b32:	4618      	mov	r0, r3
 8016b34:	f7f8 fa1b 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8016b38:	4603      	mov	r3, r0
 8016b3a:	461d      	mov	r5, r3
 8016b3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016b40:	4618      	mov	r0, r3
 8016b42:	f7f8 fa08 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016b46:	2d00      	cmp	r5, #0
 8016b48:	d003      	beq.n	8016b52 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	2201      	movs	r2, #1
 8016b4e:	741a      	strb	r2, [r3, #16]
 8016b50:	e2fa      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 8016b52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016b56:	4988      	ldr	r1, [pc, #544]	; (8016d78 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 8016b58:	4618      	mov	r0, r3
 8016b5a:	f7f7 fe44 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016b5e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8016b62:	f107 0308 	add.w	r3, r7, #8
 8016b66:	4611      	mov	r1, r2
 8016b68:	4618      	mov	r0, r3
 8016b6a:	f7f8 fa00 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8016b6e:	4603      	mov	r3, r0
 8016b70:	461d      	mov	r5, r3
 8016b72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016b76:	4618      	mov	r0, r3
 8016b78:	f7f8 f9ed 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016b7c:	2d00      	cmp	r5, #0
 8016b7e:	d003      	beq.n	8016b88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	2201      	movs	r2, #1
 8016b84:	755a      	strb	r2, [r3, #21]
 8016b86:	e2df      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 8016b88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016b8c:	497b      	ldr	r1, [pc, #492]	; (8016d7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 8016b8e:	4618      	mov	r0, r3
 8016b90:	f7f7 fe29 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016b94:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8016b98:	f107 0308 	add.w	r3, r7, #8
 8016b9c:	4611      	mov	r1, r2
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	f7f8 f9e5 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	461d      	mov	r5, r3
 8016ba8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016bac:	4618      	mov	r0, r3
 8016bae:	f7f8 f9d2 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016bb2:	2d00      	cmp	r5, #0
 8016bb4:	d003      	beq.n	8016bbe <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	2201      	movs	r2, #1
 8016bba:	745a      	strb	r2, [r3, #17]
 8016bbc:	e2c4      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 8016bbe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016bc2:	496f      	ldr	r1, [pc, #444]	; (8016d80 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 8016bc4:	4618      	mov	r0, r3
 8016bc6:	f7f7 fe0e 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016bca:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8016bce:	f107 0308 	add.w	r3, r7, #8
 8016bd2:	4611      	mov	r1, r2
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	f7f8 f9ca 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	461d      	mov	r5, r3
 8016bde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016be2:	4618      	mov	r0, r3
 8016be4:	f7f8 f9b7 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016be8:	2d00      	cmp	r5, #0
 8016bea:	d003      	beq.n	8016bf4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	2201      	movs	r2, #1
 8016bf0:	749a      	strb	r2, [r3, #18]
 8016bf2:	e2a9      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 8016bf4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016bf8:	4962      	ldr	r1, [pc, #392]	; (8016d84 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	f7f7 fdf3 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016c00:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8016c04:	f107 0308 	add.w	r3, r7, #8
 8016c08:	4611      	mov	r1, r2
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	f7f8 f9af 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8016c10:	4603      	mov	r3, r0
 8016c12:	461d      	mov	r5, r3
 8016c14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016c18:	4618      	mov	r0, r3
 8016c1a:	f7f8 f99c 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016c1e:	2d00      	cmp	r5, #0
 8016c20:	d003      	beq.n	8016c2a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	2201      	movs	r2, #1
 8016c26:	74da      	strb	r2, [r3, #19]
 8016c28:	e28e      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 8016c2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8016c2e:	4956      	ldr	r1, [pc, #344]	; (8016d88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 8016c30:	4618      	mov	r0, r3
 8016c32:	f7f7 fdd8 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016c36:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8016c3a:	f107 0308 	add.w	r3, r7, #8
 8016c3e:	4611      	mov	r1, r2
 8016c40:	4618      	mov	r0, r3
 8016c42:	f7f8 f994 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8016c46:	4603      	mov	r3, r0
 8016c48:	461d      	mov	r5, r3
 8016c4a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f7f8 f981 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016c54:	2d00      	cmp	r5, #0
 8016c56:	d003      	beq.n	8016c60 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	2201      	movs	r2, #1
 8016c5c:	751a      	strb	r2, [r3, #20]
 8016c5e:	e273      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 8016c60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016c64:	4949      	ldr	r1, [pc, #292]	; (8016d8c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 8016c66:	4618      	mov	r0, r3
 8016c68:	f7f7 fdbd 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016c6c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8016c70:	f107 0308 	add.w	r3, r7, #8
 8016c74:	4611      	mov	r1, r2
 8016c76:	4618      	mov	r0, r3
 8016c78:	f7f8 f979 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8016c7c:	4603      	mov	r3, r0
 8016c7e:	461d      	mov	r5, r3
 8016c80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016c84:	4618      	mov	r0, r3
 8016c86:	f7f8 f966 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016c8a:	2d00      	cmp	r5, #0
 8016c8c:	d003      	beq.n	8016c96 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	2201      	movs	r2, #1
 8016c92:	759a      	strb	r2, [r3, #22]
 8016c94:	e258      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 8016c96:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8016c9a:	493d      	ldr	r1, [pc, #244]	; (8016d90 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 8016c9c:	4618      	mov	r0, r3
 8016c9e:	f7f7 fda2 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016ca2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8016ca6:	f107 0308 	add.w	r3, r7, #8
 8016caa:	4611      	mov	r1, r2
 8016cac:	4618      	mov	r0, r3
 8016cae:	f7f7 fe5e 	bl	800e96e <_ZNK12SimpleString10startsWithERKS_>
 8016cb2:	4603      	mov	r3, r0
 8016cb4:	461d      	mov	r5, r3
 8016cb6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8016cba:	4618      	mov	r0, r3
 8016cbc:	f7f8 f94b 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016cc0:	2d00      	cmp	r5, #0
 8016cc2:	d009      	beq.n	8016cd8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	6859      	ldr	r1, [r3, #4]
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	689a      	ldr	r2, [r3, #8]
 8016ccc:	f107 0310 	add.w	r3, r7, #16
 8016cd0:	6878      	ldr	r0, [r7, #4]
 8016cd2:	f000 fb33 	bl	801733c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 8016cd6:	e237      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 8016cd8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8016cdc:	492d      	ldr	r1, [pc, #180]	; (8016d94 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f7f7 fd81 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016ce4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8016ce8:	f107 0308 	add.w	r3, r7, #8
 8016cec:	4611      	mov	r1, r2
 8016cee:	4618      	mov	r0, r3
 8016cf0:	f7f7 fe3d 	bl	800e96e <_ZNK12SimpleString10startsWithERKS_>
 8016cf4:	4603      	mov	r3, r0
 8016cf6:	461d      	mov	r5, r3
 8016cf8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	f7f8 f92a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016d02:	2d00      	cmp	r5, #0
 8016d04:	d009      	beq.n	8016d1a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	6859      	ldr	r1, [r3, #4]
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	689a      	ldr	r2, [r3, #8]
 8016d0e:	f107 0310 	add.w	r3, r7, #16
 8016d12:	6878      	ldr	r0, [r7, #4]
 8016d14:	f000 fc40 	bl	8017598 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 8016d18:	e216      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 8016d1a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016d1e:	491e      	ldr	r1, [pc, #120]	; (8016d98 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 8016d20:	4618      	mov	r0, r3
 8016d22:	f7f7 fd60 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016d26:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8016d2a:	f107 0308 	add.w	r3, r7, #8
 8016d2e:	4611      	mov	r1, r2
 8016d30:	4618      	mov	r0, r3
 8016d32:	f7f7 fe1c 	bl	800e96e <_ZNK12SimpleString10startsWithERKS_>
 8016d36:	4603      	mov	r3, r0
 8016d38:	461d      	mov	r5, r3
 8016d3a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016d3e:	4618      	mov	r0, r3
 8016d40:	f7f8 f909 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016d44:	2d00      	cmp	r5, #0
 8016d46:	d029      	beq.n	8016d9c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	6859      	ldr	r1, [r3, #4]
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	689a      	ldr	r2, [r3, #8]
 8016d50:	f107 0310 	add.w	r3, r7, #16
 8016d54:	6878      	ldr	r0, [r7, #4]
 8016d56:	f000 fc61 	bl	801761c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8016d60:	e1f2      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8016d62:	bf00      	nop
 8016d64:	080273fc 	.word	0x080273fc
 8016d68:	08027400 	.word	0x08027400
 8016d6c:	08027404 	.word	0x08027404
 8016d70:	08027408 	.word	0x08027408
 8016d74:	0802740c 	.word	0x0802740c
 8016d78:	08027410 	.word	0x08027410
 8016d7c:	08027414 	.word	0x08027414
 8016d80:	08027418 	.word	0x08027418
 8016d84:	0802741c 	.word	0x0802741c
 8016d88:	08027420 	.word	0x08027420
 8016d8c:	08027424 	.word	0x08027424
 8016d90:	08027428 	.word	0x08027428
 8016d94:	0802742c 	.word	0x0802742c
 8016d98:	08027430 	.word	0x08027430
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8016d9c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8016da0:	49b9      	ldr	r1, [pc, #740]	; (8017088 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 8016da2:	4618      	mov	r0, r3
 8016da4:	f7f7 fd1f 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016da8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8016dac:	f107 0308 	add.w	r3, r7, #8
 8016db0:	4611      	mov	r1, r2
 8016db2:	4618      	mov	r0, r3
 8016db4:	f7f7 fddb 	bl	800e96e <_ZNK12SimpleString10startsWithERKS_>
 8016db8:	4603      	mov	r3, r0
 8016dba:	461d      	mov	r5, r3
 8016dbc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	f7f8 f8c8 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016dc6:	2d00      	cmp	r5, #0
 8016dc8:	d009      	beq.n	8016dde <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	6859      	ldr	r1, [r3, #4]
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	689a      	ldr	r2, [r3, #8]
 8016dd2:	f107 0310 	add.w	r3, r7, #16
 8016dd6:	6878      	ldr	r0, [r7, #4]
 8016dd8:	f000 fccc 	bl	8017774 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 8016ddc:	e1b4      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 8016dde:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016de2:	49aa      	ldr	r1, [pc, #680]	; (801708c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 8016de4:	4618      	mov	r0, r3
 8016de6:	f7f7 fcfe 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016dea:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8016dee:	f107 0308 	add.w	r3, r7, #8
 8016df2:	4611      	mov	r1, r2
 8016df4:	4618      	mov	r0, r3
 8016df6:	f7f7 fdba 	bl	800e96e <_ZNK12SimpleString10startsWithERKS_>
 8016dfa:	4603      	mov	r3, r0
 8016dfc:	461d      	mov	r5, r3
 8016dfe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016e02:	4618      	mov	r0, r3
 8016e04:	f7f8 f8a7 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016e08:	2d00      	cmp	r5, #0
 8016e0a:	d009      	beq.n	8016e20 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	6859      	ldr	r1, [r3, #4]
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	689a      	ldr	r2, [r3, #8]
 8016e14:	f107 0310 	add.w	r3, r7, #16
 8016e18:	6878      	ldr	r0, [r7, #4]
 8016e1a:	f000 fcf1 	bl	8017800 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 8016e1e:	e193      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 8016e20:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8016e24:	499a      	ldr	r1, [pc, #616]	; (8017090 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 8016e26:	4618      	mov	r0, r3
 8016e28:	f7f7 fcdd 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016e2c:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8016e30:	f107 0308 	add.w	r3, r7, #8
 8016e34:	4611      	mov	r1, r2
 8016e36:	4618      	mov	r0, r3
 8016e38:	f7f7 fd99 	bl	800e96e <_ZNK12SimpleString10startsWithERKS_>
 8016e3c:	4603      	mov	r3, r0
 8016e3e:	461d      	mov	r5, r3
 8016e40:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8016e44:	4618      	mov	r0, r3
 8016e46:	f7f8 f886 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016e4a:	2d00      	cmp	r5, #0
 8016e4c:	d009      	beq.n	8016e62 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	6859      	ldr	r1, [r3, #4]
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	689a      	ldr	r2, [r3, #8]
 8016e56:	f107 0310 	add.w	r3, r7, #16
 8016e5a:	6878      	ldr	r0, [r7, #4]
 8016e5c:	f000 fd16 	bl	801788c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 8016e60:	e172      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 8016e62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8016e66:	498b      	ldr	r1, [pc, #556]	; (8017094 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 8016e68:	4618      	mov	r0, r3
 8016e6a:	f7f7 fcbc 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016e6e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8016e72:	f107 0308 	add.w	r3, r7, #8
 8016e76:	4611      	mov	r1, r2
 8016e78:	4618      	mov	r0, r3
 8016e7a:	f7f7 fd78 	bl	800e96e <_ZNK12SimpleString10startsWithERKS_>
 8016e7e:	4603      	mov	r3, r0
 8016e80:	461d      	mov	r5, r3
 8016e82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8016e86:	4618      	mov	r0, r3
 8016e88:	f7f8 f865 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016e8c:	2d00      	cmp	r5, #0
 8016e8e:	d009      	beq.n	8016ea4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	6859      	ldr	r1, [r3, #4]
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	689a      	ldr	r2, [r3, #8]
 8016e98:	f107 0310 	add.w	r3, r7, #16
 8016e9c:	6878      	ldr	r0, [r7, #4]
 8016e9e:	f000 fd3d 	bl	801791c <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 8016ea2:	e151      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 8016ea4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8016ea8:	497b      	ldr	r1, [pc, #492]	; (8017098 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 8016eaa:	4618      	mov	r0, r3
 8016eac:	f7f7 fc9b 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016eb0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8016eb4:	f107 0308 	add.w	r3, r7, #8
 8016eb8:	4611      	mov	r1, r2
 8016eba:	4618      	mov	r0, r3
 8016ebc:	f7f7 fd57 	bl	800e96e <_ZNK12SimpleString10startsWithERKS_>
 8016ec0:	4603      	mov	r3, r0
 8016ec2:	461d      	mov	r5, r3
 8016ec4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8016ec8:	4618      	mov	r0, r3
 8016eca:	f7f8 f844 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016ece:	2d00      	cmp	r5, #0
 8016ed0:	d009      	beq.n	8016ee6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	6859      	ldr	r1, [r3, #4]
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	689a      	ldr	r2, [r3, #8]
 8016eda:	f107 0310 	add.w	r3, r7, #16
 8016ede:	6878      	ldr	r0, [r7, #4]
 8016ee0:	f000 fd5e 	bl	80179a0 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 8016ee4:	e130      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 8016ee6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016eea:	496c      	ldr	r1, [pc, #432]	; (801709c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 8016eec:	4618      	mov	r0, r3
 8016eee:	f7f7 fc7a 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016ef2:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8016ef6:	f107 0308 	add.w	r3, r7, #8
 8016efa:	4611      	mov	r1, r2
 8016efc:	4618      	mov	r0, r3
 8016efe:	f7f7 fd36 	bl	800e96e <_ZNK12SimpleString10startsWithERKS_>
 8016f02:	4603      	mov	r3, r0
 8016f04:	461d      	mov	r5, r3
 8016f06:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	f7f8 f823 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016f10:	2d00      	cmp	r5, #0
 8016f12:	d009      	beq.n	8016f28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	6859      	ldr	r1, [r3, #4]
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	689a      	ldr	r2, [r3, #8]
 8016f1c:	f107 0310 	add.w	r3, r7, #16
 8016f20:	6878      	ldr	r0, [r7, #4]
 8016f22:	f000 fd83 	bl	8017a2c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 8016f26:	e10f      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 8016f28:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8016f2c:	495c      	ldr	r1, [pc, #368]	; (80170a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 8016f2e:	4618      	mov	r0, r3
 8016f30:	f7f7 fc59 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016f34:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8016f38:	f107 0308 	add.w	r3, r7, #8
 8016f3c:	4611      	mov	r1, r2
 8016f3e:	4618      	mov	r0, r3
 8016f40:	f7f7 fd15 	bl	800e96e <_ZNK12SimpleString10startsWithERKS_>
 8016f44:	4603      	mov	r3, r0
 8016f46:	461d      	mov	r5, r3
 8016f48:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	f7f8 f802 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016f52:	2d00      	cmp	r5, #0
 8016f54:	d009      	beq.n	8016f6a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	6859      	ldr	r1, [r3, #4]
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	689a      	ldr	r2, [r3, #8]
 8016f5e:	f107 0310 	add.w	r3, r7, #16
 8016f62:	6878      	ldr	r0, [r7, #4]
 8016f64:	f000 fda8 	bl	8017ab8 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 8016f68:	e0ee      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 8016f6a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8016f6e:	494d      	ldr	r1, [pc, #308]	; (80170a4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8016f70:	4618      	mov	r0, r3
 8016f72:	f7f7 fc38 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016f76:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8016f7a:	f107 0308 	add.w	r3, r7, #8
 8016f7e:	4611      	mov	r1, r2
 8016f80:	4618      	mov	r0, r3
 8016f82:	f7f7 fcf4 	bl	800e96e <_ZNK12SimpleString10startsWithERKS_>
 8016f86:	4603      	mov	r3, r0
 8016f88:	461d      	mov	r5, r3
 8016f8a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8016f8e:	4618      	mov	r0, r3
 8016f90:	f7f7 ffe1 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016f94:	2d00      	cmp	r5, #0
 8016f96:	d00c      	beq.n	8016fb2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	6859      	ldr	r1, [r3, #4]
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	689a      	ldr	r2, [r3, #8]
 8016fa0:	f107 0310 	add.w	r3, r7, #16
 8016fa4:	6878      	ldr	r0, [r7, #4]
 8016fa6:	f000 fa29 	bl	80173fc <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 8016faa:	4603      	mov	r3, r0
 8016fac:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8016fb0:	e0ca      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 8016fb2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8016fb6:	493c      	ldr	r1, [pc, #240]	; (80170a8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8016fb8:	4618      	mov	r0, r3
 8016fba:	f7f7 fc14 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8016fbe:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8016fc2:	f107 0308 	add.w	r3, r7, #8
 8016fc6:	4611      	mov	r1, r2
 8016fc8:	4618      	mov	r0, r3
 8016fca:	f7f7 fcd0 	bl	800e96e <_ZNK12SimpleString10startsWithERKS_>
 8016fce:	4603      	mov	r3, r0
 8016fd0:	461d      	mov	r5, r3
 8016fd2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	f7f7 ffbd 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8016fdc:	2d00      	cmp	r5, #0
 8016fde:	d00b      	beq.n	8016ff8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	6859      	ldr	r1, [r3, #4]
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	689a      	ldr	r2, [r3, #8]
 8016fe8:	f107 0310 	add.w	r3, r7, #16
 8016fec:	482e      	ldr	r0, [pc, #184]	; (80170a8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8016fee:	9000      	str	r0, [sp, #0]
 8016ff0:	6878      	ldr	r0, [r7, #4]
 8016ff2:	f000 fda9 	bl	8017b48 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8016ff6:	e0a7      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 8016ff8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8016ffc:	492b      	ldr	r1, [pc, #172]	; (80170ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8016ffe:	4618      	mov	r0, r3
 8017000:	f7f7 fbf1 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8017004:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8017008:	f107 0308 	add.w	r3, r7, #8
 801700c:	4611      	mov	r1, r2
 801700e:	4618      	mov	r0, r3
 8017010:	f7f7 fcad 	bl	800e96e <_ZNK12SimpleString10startsWithERKS_>
 8017014:	4603      	mov	r3, r0
 8017016:	461d      	mov	r5, r3
 8017018:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801701c:	4618      	mov	r0, r3
 801701e:	f7f7 ff9a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8017022:	2d00      	cmp	r5, #0
 8017024:	d00b      	beq.n	801703e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	6859      	ldr	r1, [r3, #4]
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	689a      	ldr	r2, [r3, #8]
 801702e:	f107 0310 	add.w	r3, r7, #16
 8017032:	481e      	ldr	r0, [pc, #120]	; (80170ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8017034:	9000      	str	r0, [sp, #0]
 8017036:	6878      	ldr	r0, [r7, #4]
 8017038:	f000 fd86 	bl	8017b48 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 801703c:	e084      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 801703e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8017042:	491b      	ldr	r1, [pc, #108]	; (80170b0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 8017044:	4618      	mov	r0, r3
 8017046:	f7f7 fbce 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801704a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801704e:	f107 0308 	add.w	r3, r7, #8
 8017052:	4611      	mov	r1, r2
 8017054:	4618      	mov	r0, r3
 8017056:	f7f7 fc8a 	bl	800e96e <_ZNK12SimpleString10startsWithERKS_>
 801705a:	4603      	mov	r3, r0
 801705c:	461d      	mov	r5, r3
 801705e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8017062:	4618      	mov	r0, r3
 8017064:	f7f7 ff77 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8017068:	2d00      	cmp	r5, #0
 801706a:	d023      	beq.n	80170b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	6859      	ldr	r1, [r3, #4]
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	689a      	ldr	r2, [r3, #8]
 8017074:	f107 0310 	add.w	r3, r7, #16
 8017078:	6878      	ldr	r0, [r7, #4]
 801707a:	f000 fe3b 	bl	8017cf4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 801707e:	4603      	mov	r3, r0
 8017080:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8017084:	e060      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8017086:	bf00      	nop
 8017088:	08027434 	.word	0x08027434
 801708c:	08027438 	.word	0x08027438
 8017090:	0802743c 	.word	0x0802743c
 8017094:	08027444 	.word	0x08027444
 8017098:	08027448 	.word	0x08027448
 801709c:	0802744c 	.word	0x0802744c
 80170a0:	08027450 	.word	0x08027450
 80170a4:	08027458 	.word	0x08027458
 80170a8:	0802745c 	.word	0x0802745c
 80170ac:	08027464 	.word	0x08027464
 80170b0:	08027474 	.word	0x08027474
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 80170b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80170b8:	4930      	ldr	r1, [pc, #192]	; (801717c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 80170ba:	4618      	mov	r0, r3
 80170bc:	f7f7 fb93 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80170c0:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80170c4:	f107 0308 	add.w	r3, r7, #8
 80170c8:	4611      	mov	r1, r2
 80170ca:	4618      	mov	r0, r3
 80170cc:	f7f7 fc4f 	bl	800e96e <_ZNK12SimpleString10startsWithERKS_>
 80170d0:	4603      	mov	r3, r0
 80170d2:	461d      	mov	r5, r3
 80170d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80170d8:	4618      	mov	r0, r3
 80170da:	f7f7 ff3c 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80170de:	2d00      	cmp	r5, #0
 80170e0:	d00e      	beq.n	8017100 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 80170e2:	683b      	ldr	r3, [r7, #0]
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	331c      	adds	r3, #28
 80170e8:	681d      	ldr	r5, [r3, #0]
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	6859      	ldr	r1, [r3, #4]
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	689a      	ldr	r2, [r3, #8]
 80170f2:	693b      	ldr	r3, [r7, #16]
 80170f4:	6838      	ldr	r0, [r7, #0]
 80170f6:	47a8      	blx	r5
 80170f8:	4603      	mov	r3, r0
 80170fa:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80170fe:	e023      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 8017100:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8017104:	491e      	ldr	r1, [pc, #120]	; (8017180 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 8017106:	4618      	mov	r0, r3
 8017108:	f7f7 fb6d 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801710c:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8017110:	f107 0308 	add.w	r3, r7, #8
 8017114:	4611      	mov	r1, r2
 8017116:	4618      	mov	r0, r3
 8017118:	f7f7 fc29 	bl	800e96e <_ZNK12SimpleString10startsWithERKS_>
 801711c:	4603      	mov	r3, r0
 801711e:	461d      	mov	r5, r3
 8017120:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8017124:	4618      	mov	r0, r3
 8017126:	f7f7 ff16 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801712a:	2d00      	cmp	r5, #0
 801712c:	d009      	beq.n	8017142 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	6859      	ldr	r1, [r3, #4]
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	689a      	ldr	r2, [r3, #8]
 8017136:	f107 0310 	add.w	r3, r7, #16
 801713a:	6878      	ldr	r0, [r7, #4]
 801713c:	f000 fd98 	bl	8017c70 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 8017140:	e002      	b.n	8017148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 8017142:	2300      	movs	r3, #0
 8017144:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 8017148:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 801714c:	2b00      	cmp	r3, #0
 801714e:	d102      	bne.n	8017156 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 8017150:	2400      	movs	r4, #0
 8017152:	2500      	movs	r5, #0
 8017154:	e000      	b.n	8017158 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 8017156:	2501      	movs	r5, #1
 8017158:	f107 0308 	add.w	r3, r7, #8
 801715c:	4618      	mov	r0, r3
 801715e:	f7f7 fefa 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8017162:	2d01      	cmp	r5, #1
 8017164:	d104      	bne.n	8017170 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 8017166:	693b      	ldr	r3, [r7, #16]
 8017168:	3301      	adds	r3, #1
 801716a:	613b      	str	r3, [r7, #16]
 801716c:	e455      	b.n	8016a1a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 801716e:	2401      	movs	r4, #1
 8017170:	4623      	mov	r3, r4
}
 8017172:	4618      	mov	r0, r3
 8017174:	37f0      	adds	r7, #240	; 0xf0
 8017176:	46bd      	mov	sp, r7
 8017178:	bdb0      	pop	{r4, r5, r7, pc}
 801717a:	bf00      	nop
 801717c:	0802740c 	.word	0x0802740c
 8017180:	08027478 	.word	0x08027478

08017184 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 8017184:	b480      	push	{r7}
 8017186:	b083      	sub	sp, #12
 8017188:	af00      	add	r7, sp, #0
 801718a:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 801718c:	4b03      	ldr	r3, [pc, #12]	; (801719c <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 801718e:	4618      	mov	r0, r3
 8017190:	370c      	adds	r7, #12
 8017192:	46bd      	mov	sp, r7
 8017194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017198:	4770      	bx	lr
 801719a:	bf00      	nop
 801719c:	0802747c 	.word	0x0802747c

080171a0 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 80171a0:	b480      	push	{r7}
 80171a2:	b083      	sub	sp, #12
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 80171a8:	4b03      	ldr	r3, [pc, #12]	; (80171b8 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 80171aa:	4618      	mov	r0, r3
 80171ac:	370c      	adds	r7, #12
 80171ae:	46bd      	mov	sp, r7
 80171b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b4:	4770      	bx	lr
 80171b6:	bf00      	nop
 80171b8:	080275ac 	.word	0x080275ac

080171bc <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 80171bc:	b480      	push	{r7}
 80171be:	b083      	sub	sp, #12
 80171c0:	af00      	add	r7, sp, #0
 80171c2:	6078      	str	r0, [r7, #4]
    return needHelp_;
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	7b1b      	ldrb	r3, [r3, #12]
}
 80171c8:	4618      	mov	r0, r3
 80171ca:	370c      	adds	r7, #12
 80171cc:	46bd      	mov	sp, r7
 80171ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d2:	4770      	bx	lr

080171d4 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 80171d4:	b480      	push	{r7}
 80171d6:	b083      	sub	sp, #12
 80171d8:	af00      	add	r7, sp, #0
 80171da:	6078      	str	r0, [r7, #4]
    return verbose_;
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	7b5b      	ldrb	r3, [r3, #13]
}
 80171e0:	4618      	mov	r0, r3
 80171e2:	370c      	adds	r7, #12
 80171e4:	46bd      	mov	sp, r7
 80171e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ea:	4770      	bx	lr

080171ec <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 80171ec:	b480      	push	{r7}
 80171ee:	b083      	sub	sp, #12
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	7b9b      	ldrb	r3, [r3, #14]
}
 80171f8:	4618      	mov	r0, r3
 80171fa:	370c      	adds	r7, #12
 80171fc:	46bd      	mov	sp, r7
 80171fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017202:	4770      	bx	lr

08017204 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 8017204:	b480      	push	{r7}
 8017206:	b083      	sub	sp, #12
 8017208:	af00      	add	r7, sp, #0
 801720a:	6078      	str	r0, [r7, #4]
    return color_;
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	7bdb      	ldrb	r3, [r3, #15]
}
 8017210:	4618      	mov	r0, r3
 8017212:	370c      	adds	r7, #12
 8017214:	46bd      	mov	sp, r7
 8017216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801721a:	4770      	bx	lr

0801721c <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 801721c:	b480      	push	{r7}
 801721e:	b083      	sub	sp, #12
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	7c5b      	ldrb	r3, [r3, #17]
}
 8017228:	4618      	mov	r0, r3
 801722a:	370c      	adds	r7, #12
 801722c:	46bd      	mov	sp, r7
 801722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017232:	4770      	bx	lr

08017234 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 8017234:	b480      	push	{r7}
 8017236:	b083      	sub	sp, #12
 8017238:	af00      	add	r7, sp, #0
 801723a:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	7c9b      	ldrb	r3, [r3, #18]
}
 8017240:	4618      	mov	r0, r3
 8017242:	370c      	adds	r7, #12
 8017244:	46bd      	mov	sp, r7
 8017246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801724a:	4770      	bx	lr

0801724c <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 801724c:	b480      	push	{r7}
 801724e:	b083      	sub	sp, #12
 8017250:	af00      	add	r7, sp, #0
 8017252:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	7cdb      	ldrb	r3, [r3, #19]
}
 8017258:	4618      	mov	r0, r3
 801725a:	370c      	adds	r7, #12
 801725c:	46bd      	mov	sp, r7
 801725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017262:	4770      	bx	lr

08017264 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 8017264:	b480      	push	{r7}
 8017266:	b083      	sub	sp, #12
 8017268:	af00      	add	r7, sp, #0
 801726a:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	7d1b      	ldrb	r3, [r3, #20]
}
 8017270:	4618      	mov	r0, r3
 8017272:	370c      	adds	r7, #12
 8017274:	46bd      	mov	sp, r7
 8017276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801727a:	4770      	bx	lr

0801727c <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 801727c:	b480      	push	{r7}
 801727e:	b083      	sub	sp, #12
 8017280:	af00      	add	r7, sp, #0
 8017282:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	7c1b      	ldrb	r3, [r3, #16]
}
 8017288:	4618      	mov	r0, r3
 801728a:	370c      	adds	r7, #12
 801728c:	46bd      	mov	sp, r7
 801728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017292:	4770      	bx	lr

08017294 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8017294:	b480      	push	{r7}
 8017296:	b083      	sub	sp, #12
 8017298:	af00      	add	r7, sp, #0
 801729a:	6078      	str	r0, [r7, #4]
    return repeat_;
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	69db      	ldr	r3, [r3, #28]
}
 80172a0:	4618      	mov	r0, r3
 80172a2:	370c      	adds	r7, #12
 80172a4:	46bd      	mov	sp, r7
 80172a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172aa:	4770      	bx	lr

080172ac <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 80172ac:	b480      	push	{r7}
 80172ae:	b083      	sub	sp, #12
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	6078      	str	r0, [r7, #4]
    return reversing_;
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	7d5b      	ldrb	r3, [r3, #21]
}
 80172b8:	4618      	mov	r0, r3
 80172ba:	370c      	adds	r7, #12
 80172bc:	46bd      	mov	sp, r7
 80172be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172c2:	4770      	bx	lr

080172c4 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 80172c4:	b480      	push	{r7}
 80172c6:	b083      	sub	sp, #12
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	7d9b      	ldrb	r3, [r3, #22]
}
 80172d0:	4618      	mov	r0, r3
 80172d2:	370c      	adds	r7, #12
 80172d4:	46bd      	mov	sp, r7
 80172d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172da:	4770      	bx	lr

080172dc <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 80172dc:	b480      	push	{r7}
 80172de:	b083      	sub	sp, #12
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
    return shuffling_;
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	7ddb      	ldrb	r3, [r3, #23]
}
 80172e8:	4618      	mov	r0, r3
 80172ea:	370c      	adds	r7, #12
 80172ec:	46bd      	mov	sp, r7
 80172ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172f2:	4770      	bx	lr

080172f4 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 80172f4:	b480      	push	{r7}
 80172f6:	b083      	sub	sp, #12
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	6a1b      	ldr	r3, [r3, #32]
}
 8017300:	4618      	mov	r0, r3
 8017302:	370c      	adds	r7, #12
 8017304:	46bd      	mov	sp, r7
 8017306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801730a:	4770      	bx	lr

0801730c <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 801730c:	b480      	push	{r7}
 801730e:	b083      	sub	sp, #12
 8017310:	af00      	add	r7, sp, #0
 8017312:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8017318:	4618      	mov	r0, r3
 801731a:	370c      	adds	r7, #12
 801731c:	46bd      	mov	sp, r7
 801731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017322:	4770      	bx	lr

08017324 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 8017324:	b480      	push	{r7}
 8017326:	b083      	sub	sp, #12
 8017328:	af00      	add	r7, sp, #0
 801732a:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8017330:	4618      	mov	r0, r3
 8017332:	370c      	adds	r7, #12
 8017334:	46bd      	mov	sp, r7
 8017336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801733a:	4770      	bx	lr

0801733c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 801733c:	b580      	push	{r7, lr}
 801733e:	b086      	sub	sp, #24
 8017340:	af00      	add	r7, sp, #0
 8017342:	60f8      	str	r0, [r7, #12]
 8017344:	60b9      	str	r1, [r7, #8]
 8017346:	607a      	str	r2, [r7, #4]
 8017348:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	2200      	movs	r2, #0
 801734e:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 8017350:	683b      	ldr	r3, [r7, #0]
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	009b      	lsls	r3, r3, #2
 8017356:	687a      	ldr	r2, [r7, #4]
 8017358:	4413      	add	r3, r2
 801735a:	681a      	ldr	r2, [r3, #0]
 801735c:	f107 0310 	add.w	r3, r7, #16
 8017360:	4611      	mov	r1, r2
 8017362:	4618      	mov	r0, r3
 8017364:	f7f7 fa3f 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 8017368:	f107 0310 	add.w	r3, r7, #16
 801736c:	4618      	mov	r0, r3
 801736e:	f7f7 fdd1 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 8017372:	4603      	mov	r3, r0
 8017374:	2b02      	cmp	r3, #2
 8017376:	bf8c      	ite	hi
 8017378:	2301      	movhi	r3, #1
 801737a:	2300      	movls	r3, #0
 801737c:	b2db      	uxtb	r3, r3
 801737e:	2b00      	cmp	r3, #0
 8017380:	d00e      	beq.n	80173a0 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 8017382:	683b      	ldr	r3, [r7, #0]
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	009b      	lsls	r3, r3, #2
 8017388:	687a      	ldr	r2, [r7, #4]
 801738a:	4413      	add	r3, r2
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	3302      	adds	r3, #2
 8017390:	4618      	mov	r0, r3
 8017392:	f7f7 f824 	bl	800e3de <_ZN12SimpleString4AtoIEPKc>
 8017396:	4603      	mov	r3, r0
 8017398:	461a      	mov	r2, r3
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	61da      	str	r2, [r3, #28]
 801739e:	e01c      	b.n	80173da <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 80173a0:	683b      	ldr	r3, [r7, #0]
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	3301      	adds	r3, #1
 80173a6:	68ba      	ldr	r2, [r7, #8]
 80173a8:	429a      	cmp	r2, r3
 80173aa:	dd16      	ble.n	80173da <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 80173ac:	683b      	ldr	r3, [r7, #0]
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	3301      	adds	r3, #1
 80173b2:	009b      	lsls	r3, r3, #2
 80173b4:	687a      	ldr	r2, [r7, #4]
 80173b6:	4413      	add	r3, r2
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	4618      	mov	r0, r3
 80173bc:	f7f7 f80f 	bl	800e3de <_ZN12SimpleString4AtoIEPKc>
 80173c0:	4603      	mov	r3, r0
 80173c2:	461a      	mov	r2, r3
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	69db      	ldr	r3, [r3, #28]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d004      	beq.n	80173da <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 80173d0:	683b      	ldr	r3, [r7, #0]
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	1c5a      	adds	r2, r3, #1
 80173d6:	683b      	ldr	r3, [r7, #0]
 80173d8:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	69db      	ldr	r3, [r3, #28]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d102      	bne.n	80173e8 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	2202      	movs	r2, #2
 80173e6:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 80173e8:	f107 0310 	add.w	r3, r7, #16
 80173ec:	4618      	mov	r0, r3
 80173ee:	f7f7 fdb2 	bl	800ef56 <_ZN12SimpleStringD1Ev>

}
 80173f2:	bf00      	nop
 80173f4:	3718      	adds	r7, #24
 80173f6:	46bd      	mov	sp, r7
 80173f8:	bd80      	pop	{r7, pc}
	...

080173fc <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 80173fc:	b590      	push	{r4, r7, lr}
 80173fe:	b089      	sub	sp, #36	; 0x24
 8017400:	af00      	add	r7, sp, #0
 8017402:	60f8      	str	r0, [r7, #12]
 8017404:	60b9      	str	r1, [r7, #8]
 8017406:	607a      	str	r2, [r7, #4]
 8017408:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	2201      	movs	r2, #1
 801740e:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 8017410:	4b34      	ldr	r3, [pc, #208]	; (80174e4 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	4798      	blx	r3
 8017416:	4603      	mov	r3, r0
 8017418:	461a      	mov	r2, r3
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	6a1b      	ldr	r3, [r3, #32]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d104      	bne.n	8017430 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	6a1b      	ldr	r3, [r3, #32]
 801742a:	1c5a      	adds	r2, r3, #1
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 8017430:	683b      	ldr	r3, [r7, #0]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	009b      	lsls	r3, r3, #2
 8017436:	687a      	ldr	r2, [r7, #4]
 8017438:	4413      	add	r3, r2
 801743a:	681a      	ldr	r2, [r3, #0]
 801743c:	f107 0314 	add.w	r3, r7, #20
 8017440:	4611      	mov	r1, r2
 8017442:	4618      	mov	r0, r3
 8017444:	f7f7 f9cf 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 8017448:	f107 0314 	add.w	r3, r7, #20
 801744c:	4618      	mov	r0, r3
 801744e:	f7f7 fd61 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 8017452:	4603      	mov	r3, r0
 8017454:	2b02      	cmp	r3, #2
 8017456:	bf8c      	ite	hi
 8017458:	2301      	movhi	r3, #1
 801745a:	2300      	movls	r3, #0
 801745c:	b2db      	uxtb	r3, r3
 801745e:	2b00      	cmp	r3, #0
 8017460:	d010      	beq.n	8017484 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	2201      	movs	r2, #1
 8017466:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 8017468:	683b      	ldr	r3, [r7, #0]
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	009b      	lsls	r3, r3, #2
 801746e:	687a      	ldr	r2, [r7, #4]
 8017470:	4413      	add	r3, r2
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	3302      	adds	r3, #2
 8017476:	4618      	mov	r0, r3
 8017478:	f7f6 ff78 	bl	800e36c <_ZN12SimpleString4AtoUEPKc>
 801747c:	4602      	mov	r2, r0
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	621a      	str	r2, [r3, #32]
 8017482:	e01e      	b.n	80174c2 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 8017484:	683b      	ldr	r3, [r7, #0]
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	3301      	adds	r3, #1
 801748a:	68ba      	ldr	r2, [r7, #8]
 801748c:	429a      	cmp	r2, r3
 801748e:	dd18      	ble.n	80174c2 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 8017490:	683b      	ldr	r3, [r7, #0]
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	3301      	adds	r3, #1
 8017496:	009b      	lsls	r3, r3, #2
 8017498:	687a      	ldr	r2, [r7, #4]
 801749a:	4413      	add	r3, r2
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	4618      	mov	r0, r3
 80174a0:	f7f6 ff64 	bl	800e36c <_ZN12SimpleString4AtoUEPKc>
 80174a4:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 80174a6:	69fb      	ldr	r3, [r7, #28]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d00a      	beq.n	80174c2 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	2201      	movs	r2, #1
 80174b0:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	69fa      	ldr	r2, [r7, #28]
 80174b6:	621a      	str	r2, [r3, #32]
            i++;
 80174b8:	683b      	ldr	r3, [r7, #0]
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	1c5a      	adds	r2, r3, #1
 80174be:	683b      	ldr	r3, [r7, #0]
 80174c0:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	6a1b      	ldr	r3, [r3, #32]
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	bf14      	ite	ne
 80174ca:	2301      	movne	r3, #1
 80174cc:	2300      	moveq	r3, #0
 80174ce:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 80174d0:	f107 0314 	add.w	r3, r7, #20
 80174d4:	4618      	mov	r0, r3
 80174d6:	f7f7 fd3e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 80174da:	4623      	mov	r3, r4
}
 80174dc:	4618      	mov	r0, r3
 80174de:	3724      	adds	r7, #36	; 0x24
 80174e0:	46bd      	mov	sp, r7
 80174e2:	bd90      	pop	{r4, r7, pc}
 80174e4:	200000a8 	.word	0x200000a8

080174e8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b088      	sub	sp, #32
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	60f8      	str	r0, [r7, #12]
 80174f0:	60b9      	str	r1, [r7, #8]
 80174f2:	607a      	str	r2, [r7, #4]
 80174f4:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 80174f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80174f8:	f7f7 fd0c 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 80174fc:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 80174fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	009b      	lsls	r3, r3, #2
 8017504:	683a      	ldr	r2, [r7, #0]
 8017506:	4413      	add	r3, r2
 8017508:	681a      	ldr	r2, [r3, #0]
 801750a:	f107 0314 	add.w	r3, r7, #20
 801750e:	4611      	mov	r1, r2
 8017510:	4618      	mov	r0, r3
 8017512:	f7f7 f968 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 8017516:	f107 0314 	add.w	r3, r7, #20
 801751a:	4618      	mov	r0, r3
 801751c:	f7f7 fcfa 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 8017520:	4602      	mov	r2, r0
 8017522:	69fb      	ldr	r3, [r7, #28]
 8017524:	4293      	cmp	r3, r2
 8017526:	bf34      	ite	cc
 8017528:	2301      	movcc	r3, #1
 801752a:	2300      	movcs	r3, #0
 801752c:	b2db      	uxtb	r3, r3
 801752e:	2b00      	cmp	r3, #0
 8017530:	d00c      	beq.n	801754c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 8017532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	009b      	lsls	r3, r3, #2
 8017538:	683a      	ldr	r2, [r7, #0]
 801753a:	4413      	add	r3, r2
 801753c:	681a      	ldr	r2, [r3, #0]
 801753e:	69fb      	ldr	r3, [r7, #28]
 8017540:	4413      	add	r3, r2
 8017542:	4619      	mov	r1, r3
 8017544:	68f8      	ldr	r0, [r7, #12]
 8017546:	f7f7 f94e 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801754a:	e019      	b.n	8017580 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 801754c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	3301      	adds	r3, #1
 8017552:	687a      	ldr	r2, [r7, #4]
 8017554:	429a      	cmp	r2, r3
 8017556:	dd0f      	ble.n	8017578 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 8017558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	1c5a      	adds	r2, r3, #1
 801755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017560:	601a      	str	r2, [r3, #0]
 8017562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	009b      	lsls	r3, r3, #2
 8017568:	683a      	ldr	r2, [r7, #0]
 801756a:	4413      	add	r3, r2
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	4619      	mov	r1, r3
 8017570:	68f8      	ldr	r0, [r7, #12]
 8017572:	f7f7 f938 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8017576:	e003      	b.n	8017580 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 8017578:	4906      	ldr	r1, [pc, #24]	; (8017594 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 801757a:	68f8      	ldr	r0, [r7, #12]
 801757c:	f7f7 f933 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8017580:	f107 0314 	add.w	r3, r7, #20
 8017584:	4618      	mov	r0, r3
 8017586:	f7f7 fce6 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 801758a:	68f8      	ldr	r0, [r7, #12]
 801758c:	3720      	adds	r7, #32
 801758e:	46bd      	mov	sp, r7
 8017590:	bd80      	pop	{r7, pc}
 8017592:	bf00      	nop
 8017594:	080273f8 	.word	0x080273f8

08017598 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8017598:	b5b0      	push	{r4, r5, r7, lr}
 801759a:	b08c      	sub	sp, #48	; 0x30
 801759c:	af02      	add	r7, sp, #8
 801759e:	60f8      	str	r0, [r7, #12]
 80175a0:	60b9      	str	r1, [r7, #8]
 80175a2:	607a      	str	r2, [r7, #4]
 80175a4:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 80175a6:	f107 031c 	add.w	r3, r7, #28
 80175aa:	491a      	ldr	r1, [pc, #104]	; (8017614 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 80175ac:	4618      	mov	r0, r3
 80175ae:	f7f7 f91a 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80175b2:	f107 0014 	add.w	r0, r7, #20
 80175b6:	f107 031c 	add.w	r3, r7, #28
 80175ba:	9301      	str	r3, [sp, #4]
 80175bc:	683b      	ldr	r3, [r7, #0]
 80175be:	9300      	str	r3, [sp, #0]
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	68ba      	ldr	r2, [r7, #8]
 80175c4:	68f9      	ldr	r1, [r7, #12]
 80175c6:	f7ff ff8f 	bl	80174e8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80175ca:	f107 0514 	add.w	r5, r7, #20
 80175ce:	f44f 7289 	mov.w	r2, #274	; 0x112
 80175d2:	4911      	ldr	r1, [pc, #68]	; (8017618 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 80175d4:	2010      	movs	r0, #16
 80175d6:	f7f4 fd43 	bl	800c060 <_ZnwjPKci>
 80175da:	4604      	mov	r4, r0
 80175dc:	4629      	mov	r1, r5
 80175de:	4620      	mov	r0, r4
 80175e0:	f009 ff40 	bl	8021464 <_ZN10TestFilterC1ERK12SimpleString>
 80175e4:	627c      	str	r4, [r7, #36]	; 0x24
 80175e6:	f107 0314 	add.w	r3, r7, #20
 80175ea:	4618      	mov	r0, r3
 80175ec:	f7f7 fcb3 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80175f0:	f107 031c 	add.w	r3, r7, #28
 80175f4:	4618      	mov	r0, r3
 80175f6:	f7f7 fcae 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175fe:	4619      	mov	r1, r3
 8017600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017602:	f009 ff4f 	bl	80214a4 <_ZN10TestFilter3addEPS_>
 8017606:	4602      	mov	r2, r0
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	625a      	str	r2, [r3, #36]	; 0x24
}
 801760c:	bf00      	nop
 801760e:	3728      	adds	r7, #40	; 0x28
 8017610:	46bd      	mov	sp, r7
 8017612:	bdb0      	pop	{r4, r5, r7, pc}
 8017614:	0802742c 	.word	0x0802742c
 8017618:	08027dc0 	.word	0x08027dc0

0801761c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 801761c:	b5b0      	push	{r4, r5, r7, lr}
 801761e:	b092      	sub	sp, #72	; 0x48
 8017620:	af02      	add	r7, sp, #8
 8017622:	60f8      	str	r0, [r7, #12]
 8017624:	60b9      	str	r1, [r7, #8]
 8017626:	607a      	str	r2, [r7, #4]
 8017628:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 801762a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801762e:	494e      	ldr	r1, [pc, #312]	; (8017768 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 8017630:	4618      	mov	r0, r3
 8017632:	f7f7 f8d8 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8017636:	f107 0020 	add.w	r0, r7, #32
 801763a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801763e:	9301      	str	r3, [sp, #4]
 8017640:	683b      	ldr	r3, [r7, #0]
 8017642:	9300      	str	r3, [sp, #0]
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	68ba      	ldr	r2, [r7, #8]
 8017648:	68f9      	ldr	r1, [r7, #12]
 801764a:	f7ff ff4d 	bl	80174e8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801764e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017652:	4618      	mov	r0, r3
 8017654:	f7f7 fc7f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 8017658:	f107 0310 	add.w	r3, r7, #16
 801765c:	4618      	mov	r0, r3
 801765e:	f7f8 fb8f 	bl	800fd80 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 8017662:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017666:	4941      	ldr	r1, [pc, #260]	; (801776c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 8017668:	4618      	mov	r0, r3
 801766a:	f7f7 f8bc 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801766e:	f107 0210 	add.w	r2, r7, #16
 8017672:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8017676:	f107 0320 	add.w	r3, r7, #32
 801767a:	4618      	mov	r0, r3
 801767c:	f7f7 fa1f 	bl	800eabe <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8017680:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017684:	4618      	mov	r0, r3
 8017686:	f7f7 fc66 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 801768a:	f107 0310 	add.w	r3, r7, #16
 801768e:	4618      	mov	r0, r3
 8017690:	f7f8 fc1b 	bl	800feca <_ZNK22SimpleStringCollection4sizeEv>
 8017694:	4603      	mov	r3, r0
 8017696:	2b02      	cmp	r3, #2
 8017698:	bf14      	ite	ne
 801769a:	2301      	movne	r3, #1
 801769c:	2300      	moveq	r3, #0
 801769e:	b2db      	uxtb	r3, r3
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d001      	beq.n	80176a8 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 80176a4:	2400      	movs	r4, #0
 80176a6:	e04f      	b.n	8017748 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 80176a8:	f107 0310 	add.w	r3, r7, #16
 80176ac:	2100      	movs	r1, #0
 80176ae:	4618      	mov	r0, r3
 80176b0:	f7f8 fc18 	bl	800fee4 <_ZN22SimpleStringCollectionixEj>
 80176b4:	4604      	mov	r4, r0
 80176b6:	f107 0310 	add.w	r3, r7, #16
 80176ba:	2100      	movs	r1, #0
 80176bc:	4618      	mov	r0, r3
 80176be:	f7f8 fc11 	bl	800fee4 <_ZN22SimpleStringCollectionixEj>
 80176c2:	4603      	mov	r3, r0
 80176c4:	4618      	mov	r0, r3
 80176c6:	f7f7 fc25 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 80176ca:	4603      	mov	r3, r0
 80176cc:	3b01      	subs	r3, #1
 80176ce:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80176d2:	2200      	movs	r2, #0
 80176d4:	4621      	mov	r1, r4
 80176d6:	f7f7 fd47 	bl	800f168 <_ZNK12SimpleString9subStringEjj>
 80176da:	f107 0538 	add.w	r5, r7, #56	; 0x38
 80176de:	f44f 728f 	mov.w	r2, #286	; 0x11e
 80176e2:	4923      	ldr	r1, [pc, #140]	; (8017770 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 80176e4:	2010      	movs	r0, #16
 80176e6:	f7f4 fcbb 	bl	800c060 <_ZnwjPKci>
 80176ea:	4604      	mov	r4, r0
 80176ec:	4629      	mov	r1, r5
 80176ee:	4620      	mov	r0, r4
 80176f0:	f009 feb8 	bl	8021464 <_ZN10TestFilterC1ERK12SimpleString>
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176f8:	4619      	mov	r1, r3
 80176fa:	4620      	mov	r0, r4
 80176fc:	f009 fed2 	bl	80214a4 <_ZN10TestFilter3addEPS_>
 8017700:	4602      	mov	r2, r0
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	625a      	str	r2, [r3, #36]	; 0x24
 8017706:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801770a:	4618      	mov	r0, r3
 801770c:	f7f7 fc23 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 8017710:	f107 0310 	add.w	r3, r7, #16
 8017714:	2101      	movs	r1, #1
 8017716:	4618      	mov	r0, r3
 8017718:	f7f8 fbe4 	bl	800fee4 <_ZN22SimpleStringCollectionixEj>
 801771c:	4605      	mov	r5, r0
 801771e:	f240 121f 	movw	r2, #287	; 0x11f
 8017722:	4913      	ldr	r1, [pc, #76]	; (8017770 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8017724:	2010      	movs	r0, #16
 8017726:	f7f4 fc9b 	bl	800c060 <_ZnwjPKci>
 801772a:	4604      	mov	r4, r0
 801772c:	4629      	mov	r1, r5
 801772e:	4620      	mov	r0, r4
 8017730:	f009 fe98 	bl	8021464 <_ZN10TestFilterC1ERK12SimpleString>
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017738:	4619      	mov	r1, r3
 801773a:	4620      	mov	r0, r4
 801773c:	f009 feb2 	bl	80214a4 <_ZN10TestFilter3addEPS_>
 8017740:	4602      	mov	r2, r0
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8017746:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 8017748:	f107 0310 	add.w	r3, r7, #16
 801774c:	4618      	mov	r0, r3
 801774e:	f7f8 fb8b 	bl	800fe68 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8017752:	f107 0320 	add.w	r3, r7, #32
 8017756:	4618      	mov	r0, r3
 8017758:	f7f7 fbfd 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801775c:	4623      	mov	r3, r4
}
 801775e:	4618      	mov	r0, r3
 8017760:	3740      	adds	r7, #64	; 0x40
 8017762:	46bd      	mov	sp, r7
 8017764:	bdb0      	pop	{r4, r5, r7, pc}
 8017766:	bf00      	nop
 8017768:	08027430 	.word	0x08027430
 801776c:	08027de0 	.word	0x08027de0
 8017770:	08027dc0 	.word	0x08027dc0

08017774 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8017774:	b5b0      	push	{r4, r5, r7, lr}
 8017776:	b08c      	sub	sp, #48	; 0x30
 8017778:	af02      	add	r7, sp, #8
 801777a:	60f8      	str	r0, [r7, #12]
 801777c:	60b9      	str	r1, [r7, #8]
 801777e:	607a      	str	r2, [r7, #4]
 8017780:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 8017782:	f107 031c 	add.w	r3, r7, #28
 8017786:	491c      	ldr	r1, [pc, #112]	; (80177f8 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8017788:	4618      	mov	r0, r3
 801778a:	f7f7 f82c 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801778e:	f107 0014 	add.w	r0, r7, #20
 8017792:	f107 031c 	add.w	r3, r7, #28
 8017796:	9301      	str	r3, [sp, #4]
 8017798:	683b      	ldr	r3, [r7, #0]
 801779a:	9300      	str	r3, [sp, #0]
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	68ba      	ldr	r2, [r7, #8]
 80177a0:	68f9      	ldr	r1, [r7, #12]
 80177a2:	f7ff fea1 	bl	80174e8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80177a6:	f107 0514 	add.w	r5, r7, #20
 80177aa:	f240 1225 	movw	r2, #293	; 0x125
 80177ae:	4913      	ldr	r1, [pc, #76]	; (80177fc <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 80177b0:	2010      	movs	r0, #16
 80177b2:	f7f4 fc55 	bl	800c060 <_ZnwjPKci>
 80177b6:	4604      	mov	r4, r0
 80177b8:	4629      	mov	r1, r5
 80177ba:	4620      	mov	r0, r4
 80177bc:	f009 fe52 	bl	8021464 <_ZN10TestFilterC1ERK12SimpleString>
 80177c0:	627c      	str	r4, [r7, #36]	; 0x24
 80177c2:	f107 0314 	add.w	r3, r7, #20
 80177c6:	4618      	mov	r0, r3
 80177c8:	f7f7 fbc5 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80177cc:	f107 031c 	add.w	r3, r7, #28
 80177d0:	4618      	mov	r0, r3
 80177d2:	f7f7 fbc0 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 80177d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80177d8:	f009 fe7f 	bl	80214da <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177e0:	4619      	mov	r1, r3
 80177e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80177e4:	f009 fe5e 	bl	80214a4 <_ZN10TestFilter3addEPS_>
 80177e8:	4602      	mov	r2, r0
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80177ee:	bf00      	nop
 80177f0:	3728      	adds	r7, #40	; 0x28
 80177f2:	46bd      	mov	sp, r7
 80177f4:	bdb0      	pop	{r4, r5, r7, pc}
 80177f6:	bf00      	nop
 80177f8:	08027434 	.word	0x08027434
 80177fc:	08027dc0 	.word	0x08027dc0

08017800 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 8017800:	b5b0      	push	{r4, r5, r7, lr}
 8017802:	b08c      	sub	sp, #48	; 0x30
 8017804:	af02      	add	r7, sp, #8
 8017806:	60f8      	str	r0, [r7, #12]
 8017808:	60b9      	str	r1, [r7, #8]
 801780a:	607a      	str	r2, [r7, #4]
 801780c:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 801780e:	f107 031c 	add.w	r3, r7, #28
 8017812:	491c      	ldr	r1, [pc, #112]	; (8017884 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 8017814:	4618      	mov	r0, r3
 8017816:	f7f6 ffe6 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801781a:	f107 0014 	add.w	r0, r7, #20
 801781e:	f107 031c 	add.w	r3, r7, #28
 8017822:	9301      	str	r3, [sp, #4]
 8017824:	683b      	ldr	r3, [r7, #0]
 8017826:	9300      	str	r3, [sp, #0]
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	68ba      	ldr	r2, [r7, #8]
 801782c:	68f9      	ldr	r1, [r7, #12]
 801782e:	f7ff fe5b 	bl	80174e8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8017832:	f107 0514 	add.w	r5, r7, #20
 8017836:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801783a:	4913      	ldr	r1, [pc, #76]	; (8017888 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 801783c:	2010      	movs	r0, #16
 801783e:	f7f4 fc0f 	bl	800c060 <_ZnwjPKci>
 8017842:	4604      	mov	r4, r0
 8017844:	4629      	mov	r1, r5
 8017846:	4620      	mov	r0, r4
 8017848:	f009 fe0c 	bl	8021464 <_ZN10TestFilterC1ERK12SimpleString>
 801784c:	627c      	str	r4, [r7, #36]	; 0x24
 801784e:	f107 0314 	add.w	r3, r7, #20
 8017852:	4618      	mov	r0, r3
 8017854:	f7f7 fb7f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8017858:	f107 031c 	add.w	r3, r7, #28
 801785c:	4618      	mov	r0, r3
 801785e:	f7f7 fb7a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 8017862:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017864:	f009 fe46 	bl	80214f4 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801786c:	4619      	mov	r1, r3
 801786e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017870:	f009 fe18 	bl	80214a4 <_ZN10TestFilter3addEPS_>
 8017874:	4602      	mov	r2, r0
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	625a      	str	r2, [r3, #36]	; 0x24
}
 801787a:	bf00      	nop
 801787c:	3728      	adds	r7, #40	; 0x28
 801787e:	46bd      	mov	sp, r7
 8017880:	bdb0      	pop	{r4, r5, r7, pc}
 8017882:	bf00      	nop
 8017884:	08027438 	.word	0x08027438
 8017888:	08027dc0 	.word	0x08027dc0

0801788c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 801788c:	b5b0      	push	{r4, r5, r7, lr}
 801788e:	b08c      	sub	sp, #48	; 0x30
 8017890:	af02      	add	r7, sp, #8
 8017892:	60f8      	str	r0, [r7, #12]
 8017894:	60b9      	str	r1, [r7, #8]
 8017896:	607a      	str	r2, [r7, #4]
 8017898:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 801789a:	f107 031c 	add.w	r3, r7, #28
 801789e:	491d      	ldr	r1, [pc, #116]	; (8017914 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 80178a0:	4618      	mov	r0, r3
 80178a2:	f7f6 ffa0 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80178a6:	f107 0014 	add.w	r0, r7, #20
 80178aa:	f107 031c 	add.w	r3, r7, #28
 80178ae:	9301      	str	r3, [sp, #4]
 80178b0:	683b      	ldr	r3, [r7, #0]
 80178b2:	9300      	str	r3, [sp, #0]
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	68ba      	ldr	r2, [r7, #8]
 80178b8:	68f9      	ldr	r1, [r7, #12]
 80178ba:	f7ff fe15 	bl	80174e8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80178be:	f107 0514 	add.w	r5, r7, #20
 80178c2:	f240 1233 	movw	r2, #307	; 0x133
 80178c6:	4914      	ldr	r1, [pc, #80]	; (8017918 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 80178c8:	2010      	movs	r0, #16
 80178ca:	f7f4 fbc9 	bl	800c060 <_ZnwjPKci>
 80178ce:	4604      	mov	r4, r0
 80178d0:	4629      	mov	r1, r5
 80178d2:	4620      	mov	r0, r4
 80178d4:	f009 fdc6 	bl	8021464 <_ZN10TestFilterC1ERK12SimpleString>
 80178d8:	627c      	str	r4, [r7, #36]	; 0x24
 80178da:	f107 0314 	add.w	r3, r7, #20
 80178de:	4618      	mov	r0, r3
 80178e0:	f7f7 fb39 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80178e4:	f107 031c 	add.w	r3, r7, #28
 80178e8:	4618      	mov	r0, r3
 80178ea:	f7f7 fb34 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 80178ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80178f0:	f009 fdf3 	bl	80214da <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 80178f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80178f6:	f009 fdfd 	bl	80214f4 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178fe:	4619      	mov	r1, r3
 8017900:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017902:	f009 fdcf 	bl	80214a4 <_ZN10TestFilter3addEPS_>
 8017906:	4602      	mov	r2, r0
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	625a      	str	r2, [r3, #36]	; 0x24
}
 801790c:	bf00      	nop
 801790e:	3728      	adds	r7, #40	; 0x28
 8017910:	46bd      	mov	sp, r7
 8017912:	bdb0      	pop	{r4, r5, r7, pc}
 8017914:	0802743c 	.word	0x0802743c
 8017918:	08027dc0 	.word	0x08027dc0

0801791c <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 801791c:	b5b0      	push	{r4, r5, r7, lr}
 801791e:	b08c      	sub	sp, #48	; 0x30
 8017920:	af02      	add	r7, sp, #8
 8017922:	60f8      	str	r0, [r7, #12]
 8017924:	60b9      	str	r1, [r7, #8]
 8017926:	607a      	str	r2, [r7, #4]
 8017928:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 801792a:	f107 031c 	add.w	r3, r7, #28
 801792e:	491a      	ldr	r1, [pc, #104]	; (8017998 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 8017930:	4618      	mov	r0, r3
 8017932:	f7f6 ff58 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8017936:	f107 0014 	add.w	r0, r7, #20
 801793a:	f107 031c 	add.w	r3, r7, #28
 801793e:	9301      	str	r3, [sp, #4]
 8017940:	683b      	ldr	r3, [r7, #0]
 8017942:	9300      	str	r3, [sp, #0]
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	68ba      	ldr	r2, [r7, #8]
 8017948:	68f9      	ldr	r1, [r7, #12]
 801794a:	f7ff fdcd 	bl	80174e8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801794e:	f107 0514 	add.w	r5, r7, #20
 8017952:	f240 123b 	movw	r2, #315	; 0x13b
 8017956:	4911      	ldr	r1, [pc, #68]	; (801799c <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 8017958:	2010      	movs	r0, #16
 801795a:	f7f4 fb81 	bl	800c060 <_ZnwjPKci>
 801795e:	4604      	mov	r4, r0
 8017960:	4629      	mov	r1, r5
 8017962:	4620      	mov	r0, r4
 8017964:	f009 fd7e 	bl	8021464 <_ZN10TestFilterC1ERK12SimpleString>
 8017968:	627c      	str	r4, [r7, #36]	; 0x24
 801796a:	f107 0314 	add.w	r3, r7, #20
 801796e:	4618      	mov	r0, r3
 8017970:	f7f7 faf1 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8017974:	f107 031c 	add.w	r3, r7, #28
 8017978:	4618      	mov	r0, r3
 801797a:	f7f7 faec 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017982:	4619      	mov	r1, r3
 8017984:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017986:	f009 fd8d 	bl	80214a4 <_ZN10TestFilter3addEPS_>
 801798a:	4602      	mov	r2, r0
 801798c:	68fb      	ldr	r3, [r7, #12]
 801798e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8017990:	bf00      	nop
 8017992:	3728      	adds	r7, #40	; 0x28
 8017994:	46bd      	mov	sp, r7
 8017996:	bdb0      	pop	{r4, r5, r7, pc}
 8017998:	08027444 	.word	0x08027444
 801799c:	08027dc0 	.word	0x08027dc0

080179a0 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 80179a0:	b5b0      	push	{r4, r5, r7, lr}
 80179a2:	b08c      	sub	sp, #48	; 0x30
 80179a4:	af02      	add	r7, sp, #8
 80179a6:	60f8      	str	r0, [r7, #12]
 80179a8:	60b9      	str	r1, [r7, #8]
 80179aa:	607a      	str	r2, [r7, #4]
 80179ac:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 80179ae:	f107 031c 	add.w	r3, r7, #28
 80179b2:	491c      	ldr	r1, [pc, #112]	; (8017a24 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 80179b4:	4618      	mov	r0, r3
 80179b6:	f7f6 ff16 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80179ba:	f107 0014 	add.w	r0, r7, #20
 80179be:	f107 031c 	add.w	r3, r7, #28
 80179c2:	9301      	str	r3, [sp, #4]
 80179c4:	683b      	ldr	r3, [r7, #0]
 80179c6:	9300      	str	r3, [sp, #0]
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	68ba      	ldr	r2, [r7, #8]
 80179cc:	68f9      	ldr	r1, [r7, #12]
 80179ce:	f7ff fd8b 	bl	80174e8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80179d2:	f107 0514 	add.w	r5, r7, #20
 80179d6:	f240 1241 	movw	r2, #321	; 0x141
 80179da:	4913      	ldr	r1, [pc, #76]	; (8017a28 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 80179dc:	2010      	movs	r0, #16
 80179de:	f7f4 fb3f 	bl	800c060 <_ZnwjPKci>
 80179e2:	4604      	mov	r4, r0
 80179e4:	4629      	mov	r1, r5
 80179e6:	4620      	mov	r0, r4
 80179e8:	f009 fd3c 	bl	8021464 <_ZN10TestFilterC1ERK12SimpleString>
 80179ec:	627c      	str	r4, [r7, #36]	; 0x24
 80179ee:	f107 0314 	add.w	r3, r7, #20
 80179f2:	4618      	mov	r0, r3
 80179f4:	f7f7 faaf 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80179f8:	f107 031c 	add.w	r3, r7, #28
 80179fc:	4618      	mov	r0, r3
 80179fe:	f7f7 faaa 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 8017a02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a04:	f009 fd69 	bl	80214da <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a0c:	4619      	mov	r1, r3
 8017a0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a10:	f009 fd48 	bl	80214a4 <_ZN10TestFilter3addEPS_>
 8017a14:	4602      	mov	r2, r0
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8017a1a:	bf00      	nop
 8017a1c:	3728      	adds	r7, #40	; 0x28
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	bdb0      	pop	{r4, r5, r7, pc}
 8017a22:	bf00      	nop
 8017a24:	08027448 	.word	0x08027448
 8017a28:	08027dc0 	.word	0x08027dc0

08017a2c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 8017a2c:	b5b0      	push	{r4, r5, r7, lr}
 8017a2e:	b08c      	sub	sp, #48	; 0x30
 8017a30:	af02      	add	r7, sp, #8
 8017a32:	60f8      	str	r0, [r7, #12]
 8017a34:	60b9      	str	r1, [r7, #8]
 8017a36:	607a      	str	r2, [r7, #4]
 8017a38:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 8017a3a:	f107 031c 	add.w	r3, r7, #28
 8017a3e:	491c      	ldr	r1, [pc, #112]	; (8017ab0 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 8017a40:	4618      	mov	r0, r3
 8017a42:	f7f6 fed0 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8017a46:	f107 0014 	add.w	r0, r7, #20
 8017a4a:	f107 031c 	add.w	r3, r7, #28
 8017a4e:	9301      	str	r3, [sp, #4]
 8017a50:	683b      	ldr	r3, [r7, #0]
 8017a52:	9300      	str	r3, [sp, #0]
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	68ba      	ldr	r2, [r7, #8]
 8017a58:	68f9      	ldr	r1, [r7, #12]
 8017a5a:	f7ff fd45 	bl	80174e8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8017a5e:	f107 0514 	add.w	r5, r7, #20
 8017a62:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8017a66:	4913      	ldr	r1, [pc, #76]	; (8017ab4 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 8017a68:	2010      	movs	r0, #16
 8017a6a:	f7f4 faf9 	bl	800c060 <_ZnwjPKci>
 8017a6e:	4604      	mov	r4, r0
 8017a70:	4629      	mov	r1, r5
 8017a72:	4620      	mov	r0, r4
 8017a74:	f009 fcf6 	bl	8021464 <_ZN10TestFilterC1ERK12SimpleString>
 8017a78:	627c      	str	r4, [r7, #36]	; 0x24
 8017a7a:	f107 0314 	add.w	r3, r7, #20
 8017a7e:	4618      	mov	r0, r3
 8017a80:	f7f7 fa69 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8017a84:	f107 031c 	add.w	r3, r7, #28
 8017a88:	4618      	mov	r0, r3
 8017a8a:	f7f7 fa64 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8017a8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a90:	f009 fd30 	bl	80214f4 <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a98:	4619      	mov	r1, r3
 8017a9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a9c:	f009 fd02 	bl	80214a4 <_ZN10TestFilter3addEPS_>
 8017aa0:	4602      	mov	r2, r0
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8017aa6:	bf00      	nop
 8017aa8:	3728      	adds	r7, #40	; 0x28
 8017aaa:	46bd      	mov	sp, r7
 8017aac:	bdb0      	pop	{r4, r5, r7, pc}
 8017aae:	bf00      	nop
 8017ab0:	0802744c 	.word	0x0802744c
 8017ab4:	08027dc0 	.word	0x08027dc0

08017ab8 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 8017ab8:	b5b0      	push	{r4, r5, r7, lr}
 8017aba:	b08c      	sub	sp, #48	; 0x30
 8017abc:	af02      	add	r7, sp, #8
 8017abe:	60f8      	str	r0, [r7, #12]
 8017ac0:	60b9      	str	r1, [r7, #8]
 8017ac2:	607a      	str	r2, [r7, #4]
 8017ac4:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 8017ac6:	f107 031c 	add.w	r3, r7, #28
 8017aca:	491d      	ldr	r1, [pc, #116]	; (8017b40 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8017acc:	4618      	mov	r0, r3
 8017ace:	f7f6 fe8a 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8017ad2:	f107 0014 	add.w	r0, r7, #20
 8017ad6:	f107 031c 	add.w	r3, r7, #28
 8017ada:	9301      	str	r3, [sp, #4]
 8017adc:	683b      	ldr	r3, [r7, #0]
 8017ade:	9300      	str	r3, [sp, #0]
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	68ba      	ldr	r2, [r7, #8]
 8017ae4:	68f9      	ldr	r1, [r7, #12]
 8017ae6:	f7ff fcff 	bl	80174e8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8017aea:	f107 0514 	add.w	r5, r7, #20
 8017aee:	f240 124f 	movw	r2, #335	; 0x14f
 8017af2:	4914      	ldr	r1, [pc, #80]	; (8017b44 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 8017af4:	2010      	movs	r0, #16
 8017af6:	f7f4 fab3 	bl	800c060 <_ZnwjPKci>
 8017afa:	4604      	mov	r4, r0
 8017afc:	4629      	mov	r1, r5
 8017afe:	4620      	mov	r0, r4
 8017b00:	f009 fcb0 	bl	8021464 <_ZN10TestFilterC1ERK12SimpleString>
 8017b04:	627c      	str	r4, [r7, #36]	; 0x24
 8017b06:	f107 0314 	add.w	r3, r7, #20
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f7f7 fa23 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8017b10:	f107 031c 	add.w	r3, r7, #28
 8017b14:	4618      	mov	r0, r3
 8017b16:	f7f7 fa1e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8017b1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b1c:	f009 fcea 	bl	80214f4 <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 8017b20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b22:	f009 fcda 	bl	80214da <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b2a:	4619      	mov	r1, r3
 8017b2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b2e:	f009 fcb9 	bl	80214a4 <_ZN10TestFilter3addEPS_>
 8017b32:	4602      	mov	r2, r0
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8017b38:	bf00      	nop
 8017b3a:	3728      	adds	r7, #40	; 0x28
 8017b3c:	46bd      	mov	sp, r7
 8017b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8017b40:	08027450 	.word	0x08027450
 8017b44:	08027dc0 	.word	0x08027dc0

08017b48 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 8017b48:	b5b0      	push	{r4, r5, r7, lr}
 8017b4a:	b092      	sub	sp, #72	; 0x48
 8017b4c:	af02      	add	r7, sp, #8
 8017b4e:	60f8      	str	r0, [r7, #12]
 8017b50:	60b9      	str	r1, [r7, #8]
 8017b52:	607a      	str	r2, [r7, #4]
 8017b54:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8017b56:	f107 0320 	add.w	r3, r7, #32
 8017b5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	f7f6 fe42 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8017b62:	f107 0018 	add.w	r0, r7, #24
 8017b66:	f107 0320 	add.w	r3, r7, #32
 8017b6a:	9301      	str	r3, [sp, #4]
 8017b6c:	683b      	ldr	r3, [r7, #0]
 8017b6e:	9300      	str	r3, [sp, #0]
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	68ba      	ldr	r2, [r7, #8]
 8017b74:	68f9      	ldr	r1, [r7, #12]
 8017b76:	f7ff fcb7 	bl	80174e8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8017b7a:	f107 0320 	add.w	r3, r7, #32
 8017b7e:	4618      	mov	r0, r3
 8017b80:	f7f7 f9e9 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8017b84:	f107 0010 	add.w	r0, r7, #16
 8017b88:	f107 0118 	add.w	r1, r7, #24
 8017b8c:	2329      	movs	r3, #41	; 0x29
 8017b8e:	222c      	movs	r2, #44	; 0x2c
 8017b90:	f7f7 fb92 	bl	800f2b8 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 8017b94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017b98:	f107 0110 	add.w	r1, r7, #16
 8017b9c:	2202      	movs	r2, #2
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	f7f7 fb2c 	bl	800f1fc <_ZNK12SimpleString9subStringEj>
 8017ba4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017ba8:	f107 0310 	add.w	r3, r7, #16
 8017bac:	4611      	mov	r1, r2
 8017bae:	4618      	mov	r0, r3
 8017bb0:	f7f6 fe85 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 8017bb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017bb8:	4618      	mov	r0, r3
 8017bba:	f7f7 f9cc 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8017bbe:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8017bc2:	492a      	ldr	r1, [pc, #168]	; (8017c6c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8017bc4:	2010      	movs	r0, #16
 8017bc6:	f7f4 fa4b 	bl	800c060 <_ZnwjPKci>
 8017bca:	4604      	mov	r4, r0
 8017bcc:	f107 0310 	add.w	r3, r7, #16
 8017bd0:	4619      	mov	r1, r3
 8017bd2:	4620      	mov	r0, r4
 8017bd4:	f009 fc46 	bl	8021464 <_ZN10TestFilterC1ERK12SimpleString>
 8017bd8:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 8017bda:	f107 0318 	add.w	r3, r7, #24
 8017bde:	2100      	movs	r1, #0
 8017be0:	4618      	mov	r0, r3
 8017be2:	f7f7 fb1c 	bl	800f21e <_ZNK12SimpleString2atEj>
 8017be6:	4603      	mov	r3, r0
 8017be8:	461a      	mov	r2, r3
 8017bea:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8017bee:	f107 0118 	add.w	r1, r7, #24
 8017bf2:	232c      	movs	r3, #44	; 0x2c
 8017bf4:	f7f7 fb60 	bl	800f2b8 <_ZNK12SimpleString17subStringFromTillEcc>
 8017bf8:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8017bfc:	f240 125b 	movw	r2, #347	; 0x15b
 8017c00:	491a      	ldr	r1, [pc, #104]	; (8017c6c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8017c02:	2010      	movs	r0, #16
 8017c04:	f7f4 fa2c 	bl	800c060 <_ZnwjPKci>
 8017c08:	4604      	mov	r4, r0
 8017c0a:	4629      	mov	r1, r5
 8017c0c:	4620      	mov	r0, r4
 8017c0e:	f009 fc29 	bl	8021464 <_ZN10TestFilterC1ERK12SimpleString>
 8017c12:	63bc      	str	r4, [r7, #56]	; 0x38
 8017c14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017c18:	4618      	mov	r0, r3
 8017c1a:	f7f7 f99c 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 8017c1e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017c20:	f009 fc5b 	bl	80214da <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 8017c24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017c26:	f009 fc58 	bl	80214da <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c2e:	4619      	mov	r1, r3
 8017c30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017c32:	f009 fc37 	bl	80214a4 <_ZN10TestFilter3addEPS_>
 8017c36:	4602      	mov	r2, r0
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c40:	4619      	mov	r1, r3
 8017c42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017c44:	f009 fc2e 	bl	80214a4 <_ZN10TestFilter3addEPS_>
 8017c48:	4602      	mov	r2, r0
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8017c4e:	f107 0310 	add.w	r3, r7, #16
 8017c52:	4618      	mov	r0, r3
 8017c54:	f7f7 f97f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8017c58:	f107 0318 	add.w	r3, r7, #24
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	f7f7 f97a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 8017c62:	bf00      	nop
 8017c64:	3740      	adds	r7, #64	; 0x40
 8017c66:	46bd      	mov	sp, r7
 8017c68:	bdb0      	pop	{r4, r5, r7, pc}
 8017c6a:	bf00      	nop
 8017c6c:	08027dc0 	.word	0x08027dc0

08017c70 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8017c70:	b590      	push	{r4, r7, lr}
 8017c72:	b08b      	sub	sp, #44	; 0x2c
 8017c74:	af02      	add	r7, sp, #8
 8017c76:	60f8      	str	r0, [r7, #12]
 8017c78:	60b9      	str	r1, [r7, #8]
 8017c7a:	607a      	str	r2, [r7, #4]
 8017c7c:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8017c7e:	f107 0318 	add.w	r3, r7, #24
 8017c82:	491b      	ldr	r1, [pc, #108]	; (8017cf0 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 8017c84:	4618      	mov	r0, r3
 8017c86:	f7f6 fdae 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8017c8a:	f107 0010 	add.w	r0, r7, #16
 8017c8e:	f107 0318 	add.w	r3, r7, #24
 8017c92:	9301      	str	r3, [sp, #4]
 8017c94:	683b      	ldr	r3, [r7, #0]
 8017c96:	9300      	str	r3, [sp, #0]
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	68ba      	ldr	r2, [r7, #8]
 8017c9c:	68f9      	ldr	r1, [r7, #12]
 8017c9e:	f7ff fc23 	bl	80174e8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8017ca2:	f107 0318 	add.w	r3, r7, #24
 8017ca6:	4618      	mov	r0, r3
 8017ca8:	f7f7 f955 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8017cac:	f107 0310 	add.w	r3, r7, #16
 8017cb0:	4618      	mov	r0, r3
 8017cb2:	f7f7 f92f 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 8017cb6:	4603      	mov	r3, r0
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	bf0c      	ite	eq
 8017cbc:	2301      	moveq	r3, #1
 8017cbe:	2300      	movne	r3, #0
 8017cc0:	b2db      	uxtb	r3, r3
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d001      	beq.n	8017cca <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 8017cc6:	2400      	movs	r4, #0
 8017cc8:	e008      	b.n	8017cdc <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	3330      	adds	r3, #48	; 0x30
 8017cce:	f107 0210 	add.w	r2, r7, #16
 8017cd2:	4611      	mov	r1, r2
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	f7f6 fdf2 	bl	800e8be <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8017cda:	2401      	movs	r4, #1
 8017cdc:	f107 0310 	add.w	r3, r7, #16
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	f7f7 f938 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8017ce6:	2c01      	cmp	r4, #1
}
 8017ce8:	3724      	adds	r7, #36	; 0x24
 8017cea:	46bd      	mov	sp, r7
 8017cec:	bd90      	pop	{r4, r7, pc}
 8017cee:	bf00      	nop
 8017cf0:	08027478 	.word	0x08027478

08017cf4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 8017cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cf6:	b093      	sub	sp, #76	; 0x4c
 8017cf8:	af02      	add	r7, sp, #8
 8017cfa:	60f8      	str	r0, [r7, #12]
 8017cfc:	60b9      	str	r1, [r7, #8]
 8017cfe:	607a      	str	r2, [r7, #4]
 8017d00:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8017d02:	f107 0318 	add.w	r3, r7, #24
 8017d06:	4953      	ldr	r1, [pc, #332]	; (8017e54 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 8017d08:	4618      	mov	r0, r3
 8017d0a:	f7f6 fd6c 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8017d0e:	f107 0010 	add.w	r0, r7, #16
 8017d12:	f107 0318 	add.w	r3, r7, #24
 8017d16:	9301      	str	r3, [sp, #4]
 8017d18:	683b      	ldr	r3, [r7, #0]
 8017d1a:	9300      	str	r3, [sp, #0]
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	68ba      	ldr	r2, [r7, #8]
 8017d20:	68f9      	ldr	r1, [r7, #12]
 8017d22:	f7ff fbe1 	bl	80174e8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8017d26:	f107 0318 	add.w	r3, r7, #24
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	f7f7 f913 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 8017d30:	f107 0310 	add.w	r3, r7, #16
 8017d34:	4618      	mov	r0, r3
 8017d36:	f7f7 f8ed 	bl	800ef14 <_ZNK12SimpleString4sizeEv>
 8017d3a:	4603      	mov	r3, r0
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	bf0c      	ite	eq
 8017d40:	2301      	moveq	r3, #1
 8017d42:	2300      	movne	r3, #0
 8017d44:	b2db      	uxtb	r3, r3
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d001      	beq.n	8017d4e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 8017d4a:	2400      	movs	r4, #0
 8017d4c:	e078      	b.n	8017e40 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 8017d4e:	2500      	movs	r5, #0
 8017d50:	f107 0320 	add.w	r3, r7, #32
 8017d54:	4940      	ldr	r1, [pc, #256]	; (8017e58 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 8017d56:	4618      	mov	r0, r3
 8017d58:	f7f6 fd45 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8017d5c:	2601      	movs	r6, #1
 8017d5e:	f107 0220 	add.w	r2, r7, #32
 8017d62:	f107 0310 	add.w	r3, r7, #16
 8017d66:	4611      	mov	r1, r2
 8017d68:	4618      	mov	r0, r3
 8017d6a:	f7f7 f900 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8017d6e:	4603      	mov	r3, r0
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d111      	bne.n	8017d98 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8017d74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017d78:	4938      	ldr	r1, [pc, #224]	; (8017e5c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	f7f6 fd33 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8017d80:	2501      	movs	r5, #1
 8017d82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017d86:	f107 0310 	add.w	r3, r7, #16
 8017d8a:	4611      	mov	r1, r2
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	f7f7 f8ee 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8017d92:	4603      	mov	r3, r0
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d001      	beq.n	8017d9c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 8017d98:	2401      	movs	r4, #1
 8017d9a:	e000      	b.n	8017d9e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8017d9c:	2400      	movs	r4, #0
 8017d9e:	2d00      	cmp	r5, #0
 8017da0:	d004      	beq.n	8017dac <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 8017da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017da6:	4618      	mov	r0, r3
 8017da8:	f7f7 f8d5 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8017dac:	2e00      	cmp	r6, #0
 8017dae:	d004      	beq.n	8017dba <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8017db0:	f107 0320 	add.w	r3, r7, #32
 8017db4:	4618      	mov	r0, r3
 8017db6:	f7f7 f8ce 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8017dba:	2c00      	cmp	r4, #0
 8017dbc:	d005      	beq.n	8017dca <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	2200      	movs	r2, #0
 8017dc2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8017dc6:	2401      	movs	r4, #1
 8017dc8:	e03a      	b.n	8017e40 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 8017dca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017dce:	4924      	ldr	r1, [pc, #144]	; (8017e60 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	f7f6 fd08 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8017dd6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017dda:	f107 0310 	add.w	r3, r7, #16
 8017dde:	4611      	mov	r1, r2
 8017de0:	4618      	mov	r0, r3
 8017de2:	f7f7 f8c4 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8017de6:	4603      	mov	r3, r0
 8017de8:	461c      	mov	r4, r3
 8017dea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017dee:	4618      	mov	r0, r3
 8017df0:	f7f7 f8b1 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8017df4:	2c00      	cmp	r4, #0
 8017df6:	d005      	beq.n	8017e04 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	2201      	movs	r2, #1
 8017dfc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8017e00:	2401      	movs	r4, #1
 8017e02:	e01d      	b.n	8017e40 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 8017e04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017e08:	4916      	ldr	r1, [pc, #88]	; (8017e64 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	f7f6 fceb 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8017e10:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8017e14:	f107 0310 	add.w	r3, r7, #16
 8017e18:	4611      	mov	r1, r2
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	f7f7 f8a7 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8017e20:	4603      	mov	r3, r0
 8017e22:	461c      	mov	r4, r3
 8017e24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017e28:	4618      	mov	r0, r3
 8017e2a:	f7f7 f894 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8017e2e:	2c00      	cmp	r4, #0
 8017e30:	d005      	beq.n	8017e3e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	2202      	movs	r2, #2
 8017e36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8017e3a:	2401      	movs	r4, #1
 8017e3c:	e000      	b.n	8017e40 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8017e3e:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8017e40:	f107 0310 	add.w	r3, r7, #16
 8017e44:	4618      	mov	r0, r3
 8017e46:	f7f7 f886 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8017e4a:	4623      	mov	r3, r4
}
 8017e4c:	4618      	mov	r0, r3
 8017e4e:	3744      	adds	r7, #68	; 0x44
 8017e50:	46bd      	mov	sp, r7
 8017e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e54:	08027474 	.word	0x08027474
 8017e58:	08027de4 	.word	0x08027de4
 8017e5c:	08027dec 	.word	0x08027dec
 8017e60:	08027df4 	.word	0x08027df4
 8017e64:	08027dfc 	.word	0x08027dfc

08017e68 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8017e68:	b480      	push	{r7}
 8017e6a:	b083      	sub	sp, #12
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017e76:	2b01      	cmp	r3, #1
 8017e78:	bf0c      	ite	eq
 8017e7a:	2301      	moveq	r3, #1
 8017e7c:	2300      	movne	r3, #0
 8017e7e:	b2db      	uxtb	r3, r3
}
 8017e80:	4618      	mov	r0, r3
 8017e82:	370c      	adds	r7, #12
 8017e84:	46bd      	mov	sp, r7
 8017e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e8a:	4770      	bx	lr

08017e8c <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8017e8c:	b480      	push	{r7}
 8017e8e:	b083      	sub	sp, #12
 8017e90:	af00      	add	r7, sp, #0
 8017e92:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017e9a:	2b02      	cmp	r3, #2
 8017e9c:	bf0c      	ite	eq
 8017e9e:	2301      	moveq	r3, #1
 8017ea0:	2300      	movne	r3, #0
 8017ea2:	b2db      	uxtb	r3, r3
}
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	370c      	adds	r7, #12
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eae:	4770      	bx	lr

08017eb0 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8017eb0:	b480      	push	{r7}
 8017eb2:	b083      	sub	sp, #12
 8017eb4:	af00      	add	r7, sp, #0
 8017eb6:	6078      	str	r0, [r7, #4]
    return packageName_;
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	3330      	adds	r3, #48	; 0x30
}
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	370c      	adds	r7, #12
 8017ec0:	46bd      	mov	sp, r7
 8017ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec6:	4770      	bx	lr

08017ec8 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8017ec8:	b480      	push	{r7}
 8017eca:	b083      	sub	sp, #12
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	2200      	movs	r2, #0
 8017ed4:	601a      	str	r2, [r3, #0]
    {}
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	4618      	mov	r0, r3
 8017eda:	370c      	adds	r7, #12
 8017edc:	46bd      	mov	sp, r7
 8017ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee2:	4770      	bx	lr

08017ee4 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 8017ee4:	b480      	push	{r7}
 8017ee6:	b083      	sub	sp, #12
 8017ee8:	af00      	add	r7, sp, #0
 8017eea:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	601a      	str	r2, [r3, #0]
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017efc:	3304      	adds	r3, #4
 8017efe:	f640 72ff 	movw	r2, #4095	; 0xfff
 8017f02:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	2200      	movs	r2, #0
 8017f08:	701a      	strb	r2, [r3, #0]
}
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	4618      	mov	r0, r3
 8017f0e:	370c      	adds	r7, #12
 8017f10:	46bd      	mov	sp, r7
 8017f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f16:	4770      	bx	lr

08017f18 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 8017f18:	b480      	push	{r7}
 8017f1a:	b083      	sub	sp, #12
 8017f1c:	af00      	add	r7, sp, #0
 8017f1e:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017f26:	2200      	movs	r2, #0
 8017f28:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	2200      	movs	r2, #0
 8017f2e:	701a      	strb	r2, [r3, #0]
}
 8017f30:	bf00      	nop
 8017f32:	370c      	adds	r7, #12
 8017f34:	46bd      	mov	sp, r7
 8017f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f3a:	4770      	bx	lr

08017f3c <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8017f3c:	b40e      	push	{r1, r2, r3}
 8017f3e:	b590      	push	{r4, r7, lr}
 8017f40:	b086      	sub	sp, #24
 8017f42:	af00      	add	r7, sp, #0
 8017f44:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017f4c:	3304      	adds	r3, #4
 8017f4e:	681a      	ldr	r2, [r3, #0]
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	1ad3      	subs	r3, r2, r3
 8017f5a:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8017f5c:	697b      	ldr	r3, [r7, #20]
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d032      	beq.n	8017fc8 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8017f62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017f66:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8017f68:	4b1b      	ldr	r3, [pc, #108]	; (8017fd8 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 8017f6a:	681c      	ldr	r4, [r3, #0]
 8017f6c:	687a      	ldr	r2, [r7, #4]
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017f74:	681b      	ldr	r3, [r3, #0]
 8017f76:	18d0      	adds	r0, r2, r3
 8017f78:	697b      	ldr	r3, [r7, #20]
 8017f7a:	1c59      	adds	r1, r3, #1
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f80:	47a0      	blx	r4
 8017f82:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8017f84:	693b      	ldr	r3, [r7, #16]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	dd09      	ble.n	8017f9e <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017f90:	681a      	ldr	r2, [r3, #0]
 8017f92:	693b      	ldr	r3, [r7, #16]
 8017f94:	441a      	add	r2, r3
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017f9c:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017fa4:	681a      	ldr	r2, [r3, #0]
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017fac:	3304      	adds	r3, #4
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	429a      	cmp	r2, r3
 8017fb2:	d90a      	bls.n	8017fca <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017fba:	3304      	adds	r3, #4
 8017fbc:	681a      	ldr	r2, [r3, #0]
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017fc4:	601a      	str	r2, [r3, #0]
 8017fc6:	e000      	b.n	8017fca <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8017fc8:	bf00      	nop
    va_end(arguments);
}
 8017fca:	3718      	adds	r7, #24
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8017fd2:	b003      	add	sp, #12
 8017fd4:	4770      	bx	lr
 8017fd6:	bf00      	nop
 8017fd8:	200000b0 	.word	0x200000b0

08017fdc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 8017fdc:	b580      	push	{r7, lr}
 8017fde:	b08c      	sub	sp, #48	; 0x30
 8017fe0:	af00      	add	r7, sp, #0
 8017fe2:	60f8      	str	r0, [r7, #12]
 8017fe4:	60b9      	str	r1, [r7, #8]
 8017fe6:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 8017fe8:	68bb      	ldr	r3, [r7, #8]
 8017fea:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8017fec:	2310      	movs	r3, #16
 8017fee:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 8017ff0:	2300      	movs	r3, #0
 8017ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 8017ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	429a      	cmp	r2, r3
 8017ffa:	d273      	bcs.n	80180e4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8017ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ffe:	493b      	ldr	r1, [pc, #236]	; (80180ec <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 8018000:	68f8      	ldr	r0, [r7, #12]
 8018002:	f7ff ff9b 	bl	8017f3c <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 8018006:	687a      	ldr	r2, [r7, #4]
 8018008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801800a:	1ad3      	subs	r3, r2, r3
 801800c:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 801800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018010:	2b10      	cmp	r3, #16
 8018012:	d901      	bls.n	8018018 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 8018014:	2310      	movs	r3, #16
 8018016:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 8018018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801801a:	f1c3 0310 	rsb	r3, r3, #16
 801801e:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 8018020:	2300      	movs	r3, #0
 8018022:	62bb      	str	r3, [r7, #40]	; 0x28
 8018024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018028:	429a      	cmp	r2, r3
 801802a:	d215      	bcs.n	8018058 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 801802c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801802e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018030:	4413      	add	r3, r2
 8018032:	69fa      	ldr	r2, [r7, #28]
 8018034:	4413      	add	r3, r2
 8018036:	781b      	ldrb	r3, [r3, #0]
 8018038:	461a      	mov	r2, r3
 801803a:	492d      	ldr	r1, [pc, #180]	; (80180f0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 801803c:	68f8      	ldr	r0, [r7, #12]
 801803e:	f7ff ff7d 	bl	8017f3c <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 8018042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018044:	2b07      	cmp	r3, #7
 8018046:	d103      	bne.n	8018050 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 8018048:	492a      	ldr	r1, [pc, #168]	; (80180f4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 801804a:	68f8      	ldr	r0, [r7, #12]
 801804c:	f7ff ff76 	bl	8017f3c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8018050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018052:	3301      	adds	r3, #1
 8018054:	62bb      	str	r3, [r7, #40]	; 0x28
 8018056:	e7e5      	b.n	8018024 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 8018058:	2300      	movs	r3, #0
 801805a:	62bb      	str	r3, [r7, #40]	; 0x28
 801805c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801805e:	697b      	ldr	r3, [r7, #20]
 8018060:	429a      	cmp	r2, r3
 8018062:	d207      	bcs.n	8018074 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8018064:	4924      	ldr	r1, [pc, #144]	; (80180f8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 8018066:	68f8      	ldr	r0, [r7, #12]
 8018068:	f7ff ff68 	bl	8017f3c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 801806c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801806e:	3301      	adds	r3, #1
 8018070:	62bb      	str	r3, [r7, #40]	; 0x28
 8018072:	e7f3      	b.n	801805c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8018074:	697b      	ldr	r3, [r7, #20]
 8018076:	2b08      	cmp	r3, #8
 8018078:	d903      	bls.n	8018082 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 801807a:	491e      	ldr	r1, [pc, #120]	; (80180f4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 801807c:	68f8      	ldr	r0, [r7, #12]
 801807e:	f7ff ff5d 	bl	8017f3c <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 8018082:	491e      	ldr	r1, [pc, #120]	; (80180fc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8018084:	68f8      	ldr	r0, [r7, #12]
 8018086:	f7ff ff59 	bl	8017f3c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 801808a:	2300      	movs	r3, #0
 801808c:	62bb      	str	r3, [r7, #40]	; 0x28
 801808e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018092:	429a      	cmp	r2, r3
 8018094:	d21d      	bcs.n	80180d2 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 8018096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801809a:	4413      	add	r3, r2
 801809c:	69fa      	ldr	r2, [r7, #28]
 801809e:	4413      	add	r3, r2
 80180a0:	781b      	ldrb	r3, [r3, #0]
 80180a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 80180a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80180aa:	2b1f      	cmp	r3, #31
 80180ac:	d903      	bls.n	80180b6 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 80180ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80180b2:	2b7e      	cmp	r3, #126	; 0x7e
 80180b4:	d902      	bls.n	80180bc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 80180b6:	232e      	movs	r3, #46	; 0x2e
 80180b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 80180bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80180c0:	461a      	mov	r2, r3
 80180c2:	490f      	ldr	r1, [pc, #60]	; (8018100 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 80180c4:	68f8      	ldr	r0, [r7, #12]
 80180c6:	f7ff ff39 	bl	8017f3c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 80180ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180cc:	3301      	adds	r3, #1
 80180ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80180d0:	e7dd      	b.n	801808e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 80180d2:	490c      	ldr	r1, [pc, #48]	; (8018104 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 80180d4:	68f8      	ldr	r0, [r7, #12]
 80180d6:	f7ff ff31 	bl	8017f3c <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 80180da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80180dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180de:	4413      	add	r3, r2
 80180e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 80180e2:	e787      	b.n	8017ff4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 80180e4:	bf00      	nop
 80180e6:	3730      	adds	r7, #48	; 0x30
 80180e8:	46bd      	mov	sp, r7
 80180ea:	bd80      	pop	{r7, pc}
 80180ec:	08027e14 	.word	0x08027e14
 80180f0:	08027e20 	.word	0x08027e20
 80180f4:	08027e28 	.word	0x08027e28
 80180f8:	08027e2c 	.word	0x08027e2c
 80180fc:	08027e30 	.word	0x08027e30
 8018100:	08027e34 	.word	0x08027e34
 8018104:	08027e38 	.word	0x08027e38

08018108 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 8018108:	b480      	push	{r7}
 801810a:	b083      	sub	sp, #12
 801810c:	af00      	add	r7, sp, #0
 801810e:	6078      	str	r0, [r7, #4]
    return buffer_;
 8018110:	687b      	ldr	r3, [r7, #4]
}
 8018112:	4618      	mov	r0, r3
 8018114:	370c      	adds	r7, #12
 8018116:	46bd      	mov	sp, r7
 8018118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801811c:	4770      	bx	lr

0801811e <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 801811e:	b480      	push	{r7}
 8018120:	b083      	sub	sp, #12
 8018122:	af00      	add	r7, sp, #0
 8018124:	6078      	str	r0, [r7, #4]
 8018126:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801812e:	3304      	adds	r3, #4
 8018130:	683a      	ldr	r2, [r7, #0]
 8018132:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801813a:	3304      	adds	r3, #4
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018142:	d306      	bcc.n	8018152 <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801814a:	3304      	adds	r3, #4
 801814c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8018150:	601a      	str	r2, [r3, #0]
}
 8018152:	bf00      	nop
 8018154:	370c      	adds	r7, #12
 8018156:	46bd      	mov	sp, r7
 8018158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801815c:	4770      	bx	lr

0801815e <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 801815e:	b480      	push	{r7}
 8018160:	b083      	sub	sp, #12
 8018162:	af00      	add	r7, sp, #0
 8018164:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801816c:	3304      	adds	r3, #4
 801816e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8018172:	601a      	str	r2, [r3, #0]
}
 8018174:	bf00      	nop
 8018176:	370c      	adds	r7, #12
 8018178:	46bd      	mov	sp, r7
 801817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801817e:	4770      	bx	lr

08018180 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8018180:	b480      	push	{r7}
 8018182:	b083      	sub	sp, #12
 8018184:	af00      	add	r7, sp, #0
 8018186:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801818e:	681a      	ldr	r2, [r3, #0]
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018196:	3304      	adds	r3, #4
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	429a      	cmp	r2, r3
 801819c:	bf2c      	ite	cs
 801819e:	2301      	movcs	r3, #1
 80181a0:	2300      	movcc	r3, #0
 80181a2:	b2db      	uxtb	r3, r3
}
 80181a4:	4618      	mov	r0, r3
 80181a6:	370c      	adds	r7, #12
 80181a8:	46bd      	mov	sp, r7
 80181aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ae:	4770      	bx	lr

080181b0 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 80181b0:	b580      	push	{r7, lr}
 80181b2:	b082      	sub	sp, #8
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	2200      	movs	r2, #0
 80181bc:	601a      	str	r2, [r3, #0]
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	2200      	movs	r2, #0
 80181c2:	711a      	strb	r2, [r3, #4]
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	3308      	adds	r3, #8
 80181c8:	4618      	mov	r0, r3
 80181ca:	f7ff fe8b 	bl	8017ee4 <_ZN18SimpleStringBufferC1Ev>
{
}
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	4618      	mov	r0, r3
 80181d2:	3708      	adds	r7, #8
 80181d4:	46bd      	mov	sp, r7
 80181d6:	bd80      	pop	{r7, pc}

080181d8 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 80181d8:	b5b0      	push	{r4, r5, r7, lr}
 80181da:	b086      	sub	sp, #24
 80181dc:	af02      	add	r7, sp, #8
 80181de:	60f8      	str	r0, [r7, #12]
 80181e0:	60b9      	str	r1, [r7, #8]
 80181e2:	607a      	str	r2, [r7, #4]
 80181e4:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 80181e6:	68fb      	ldr	r3, [r7, #12]
 80181e8:	f103 0408 	add.w	r4, r3, #8
 80181ec:	687d      	ldr	r5, [r7, #4]
 80181ee:	6a3b      	ldr	r3, [r7, #32]
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	3314      	adds	r3, #20
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	6a38      	ldr	r0, [r7, #32]
 80181f8:	4798      	blx	r3
 80181fa:	4603      	mov	r3, r0
 80181fc:	9301      	str	r3, [sp, #4]
 80181fe:	683b      	ldr	r3, [r7, #0]
 8018200:	9300      	str	r3, [sp, #0]
 8018202:	462b      	mov	r3, r5
 8018204:	68ba      	ldr	r2, [r7, #8]
 8018206:	4904      	ldr	r1, [pc, #16]	; (8018218 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 8018208:	4620      	mov	r0, r4
 801820a:	f7ff fe97 	bl	8017f3c <_ZN18SimpleStringBuffer3addEPKcz>
}
 801820e:	bf00      	nop
 8018210:	3710      	adds	r7, #16
 8018212:	46bd      	mov	sp, r7
 8018214:	bdb0      	pop	{r4, r5, r7, pc}
 8018216:	bf00      	nop
 8018218:	08027e3c 	.word	0x08027e3c

0801821c <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 801821c:	b5b0      	push	{r4, r5, r7, lr}
 801821e:	b086      	sub	sp, #24
 8018220:	af02      	add	r7, sp, #8
 8018222:	60f8      	str	r0, [r7, #12]
 8018224:	60b9      	str	r1, [r7, #8]
 8018226:	607a      	str	r2, [r7, #4]
 8018228:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	f103 0408 	add.w	r4, r3, #8
 8018230:	687d      	ldr	r5, [r7, #4]
 8018232:	683b      	ldr	r3, [r7, #0]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	3318      	adds	r3, #24
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	6838      	ldr	r0, [r7, #0]
 801823c:	4798      	blx	r3
 801823e:	4603      	mov	r3, r0
 8018240:	9300      	str	r3, [sp, #0]
 8018242:	462b      	mov	r3, r5
 8018244:	68ba      	ldr	r2, [r7, #8]
 8018246:	4904      	ldr	r1, [pc, #16]	; (8018258 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 8018248:	4620      	mov	r0, r4
 801824a:	f7ff fe77 	bl	8017f3c <_ZN18SimpleStringBuffer3addEPKcz>
}
 801824e:	bf00      	nop
 8018250:	3710      	adds	r7, #16
 8018252:	46bd      	mov	sp, r7
 8018254:	bdb0      	pop	{r4, r5, r7, pc}
 8018256:	bf00      	nop
 8018258:	08027e74 	.word	0x08027e74

0801825c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 801825c:	b580      	push	{r7, lr}
 801825e:	b082      	sub	sp, #8
 8018260:	af00      	add	r7, sp, #0
 8018262:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	3308      	adds	r3, #8
 8018268:	4903      	ldr	r1, [pc, #12]	; (8018278 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 801826a:	4618      	mov	r0, r3
 801826c:	f7ff fe66 	bl	8017f3c <_ZN18SimpleStringBuffer3addEPKcz>
}
 8018270:	bf00      	nop
 8018272:	3708      	adds	r7, #8
 8018274:	46bd      	mov	sp, r7
 8018276:	bd80      	pop	{r7, pc}
 8018278:	08027ea4 	.word	0x08027ea4

0801827c <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 801827c:	b580      	push	{r7, lr}
 801827e:	b084      	sub	sp, #16
 8018280:	af00      	add	r7, sp, #0
 8018282:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	2200      	movs	r2, #0
 8018288:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	2200      	movs	r2, #0
 801828e:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8018290:	2367      	movs	r3, #103	; 0x67
 8018292:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	f203 1311 	addw	r3, r3, #273	; 0x111
 801829a:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	f103 0208 	add.w	r2, r3, #8
 80182a2:	68bb      	ldr	r3, [r7, #8]
 80182a4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80182a8:	4619      	mov	r1, r3
 80182aa:	4610      	mov	r0, r2
 80182ac:	f7ff ff37 	bl	801811e <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 80182b0:	bf00      	nop
 80182b2:	3710      	adds	r7, #16
 80182b4:	46bd      	mov	sp, r7
 80182b6:	bd80      	pop	{r7, pc}

080182b8 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 80182b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182ba:	b089      	sub	sp, #36	; 0x24
 80182bc:	af04      	add	r7, sp, #16
 80182be:	60f8      	str	r0, [r7, #12]
 80182c0:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d102      	bne.n	80182d0 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 80182ca:	68f8      	ldr	r0, [r7, #12]
 80182cc:	f000 f882 	bl	80183d4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	1c5a      	adds	r2, r3, #1
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	f103 0508 	add.w	r5, r3, #8
 80182e0:	68bb      	ldr	r3, [r7, #8]
 80182e2:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80182e4:	68bb      	ldr	r3, [r7, #8]
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80182ea:	68bb      	ldr	r3, [r7, #8]
 80182ec:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80182ee:	68bb      	ldr	r3, [r7, #8]
 80182f0:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80182f2:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80182f4:	68bb      	ldr	r3, [r7, #8]
 80182f6:	695a      	ldr	r2, [r3, #20]
 80182f8:	68bb      	ldr	r3, [r7, #8]
 80182fa:	695b      	ldr	r3, [r3, #20]
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	3314      	adds	r3, #20
 8018300:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8018302:	4610      	mov	r0, r2
 8018304:	4798      	blx	r3
 8018306:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8018308:	68bb      	ldr	r3, [r7, #8]
 801830a:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801830c:	9303      	str	r3, [sp, #12]
 801830e:	9202      	str	r2, [sp, #8]
 8018310:	683a      	ldr	r2, [r7, #0]
 8018312:	9201      	str	r2, [sp, #4]
 8018314:	9400      	str	r4, [sp, #0]
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	4632      	mov	r2, r6
 801831a:	4915      	ldr	r1, [pc, #84]	; (8018370 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 801831c:	4628      	mov	r0, r5
 801831e:	f7ff fe0d 	bl	8017f3c <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	f103 0008 	add.w	r0, r3, #8
 8018328:	68bb      	ldr	r3, [r7, #8]
 801832a:	6899      	ldr	r1, [r3, #8]
 801832c:	68bb      	ldr	r3, [r7, #8]
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	461a      	mov	r2, r3
 8018332:	f7ff fe53 	bl	8017fdc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 8018336:	68bb      	ldr	r3, [r7, #8]
 8018338:	695a      	ldr	r2, [r3, #20]
 801833a:	68bb      	ldr	r3, [r7, #8]
 801833c:	695b      	ldr	r3, [r3, #20]
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	3314      	adds	r3, #20
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	4610      	mov	r0, r2
 8018346:	4798      	blx	r3
 8018348:	4603      	mov	r3, r0
 801834a:	490a      	ldr	r1, [pc, #40]	; (8018374 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 801834c:	4618      	mov	r0, r3
 801834e:	f7f6 f887 	bl	800e460 <_ZN12SimpleString6StrCmpEPKcS1_>
 8018352:	4603      	mov	r3, r0
 8018354:	2b00      	cmp	r3, #0
 8018356:	bf0c      	ite	eq
 8018358:	2301      	moveq	r3, #1
 801835a:	2300      	movne	r3, #0
 801835c:	b2db      	uxtb	r3, r3
 801835e:	2b00      	cmp	r3, #0
 8018360:	d002      	beq.n	8018368 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	2201      	movs	r2, #1
 8018366:	711a      	strb	r2, [r3, #4]
}
 8018368:	bf00      	nop
 801836a:	3714      	adds	r7, #20
 801836c:	46bd      	mov	sp, r7
 801836e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018370:	08027ec4 	.word	0x08027ec4
 8018374:	08027f24 	.word	0x08027f24

08018378 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8018378:	b580      	push	{r7, lr}
 801837a:	b084      	sub	sp, #16
 801837c:	af00      	add	r7, sp, #0
 801837e:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d103      	bne.n	8018390 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8018388:	6878      	ldr	r0, [r7, #4]
 801838a:	f7ff ff67 	bl	801825c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 801838e:	e01e      	b.n	80183ce <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	3308      	adds	r3, #8
 8018394:	4618      	mov	r0, r3
 8018396:	f7ff fef3 	bl	8018180 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 801839a:	4603      	mov	r3, r0
 801839c:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	3308      	adds	r3, #8
 80183a2:	4618      	mov	r0, r3
 80183a4:	f7ff fedb 	bl	801815e <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 80183a8:	7bfb      	ldrb	r3, [r7, #15]
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d002      	beq.n	80183b4 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 80183ae:	6878      	ldr	r0, [r7, #4]
 80183b0:	f000 f820 	bl	80183f4 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	4619      	mov	r1, r3
 80183ba:	6878      	ldr	r0, [r7, #4]
 80183bc:	f000 f82a 	bl	8018414 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	791b      	ldrb	r3, [r3, #4]
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d002      	beq.n	80183ce <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 80183c8:	6878      	ldr	r0, [r7, #4]
 80183ca:	f000 f839 	bl	8018440 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 80183ce:	3710      	adds	r7, #16
 80183d0:	46bd      	mov	sp, r7
 80183d2:	bd80      	pop	{r7, pc}

080183d4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 80183d4:	b580      	push	{r7, lr}
 80183d6:	b082      	sub	sp, #8
 80183d8:	af00      	add	r7, sp, #0
 80183da:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	3308      	adds	r3, #8
 80183e0:	4903      	ldr	r1, [pc, #12]	; (80183f0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 80183e2:	4618      	mov	r0, r3
 80183e4:	f7ff fdaa 	bl	8017f3c <_ZN18SimpleStringBuffer3addEPKcz>
}
 80183e8:	bf00      	nop
 80183ea:	3708      	adds	r7, #8
 80183ec:	46bd      	mov	sp, r7
 80183ee:	bd80      	pop	{r7, pc}
 80183f0:	08027f2c 	.word	0x08027f2c

080183f4 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 80183f4:	b580      	push	{r7, lr}
 80183f6:	b082      	sub	sp, #8
 80183f8:	af00      	add	r7, sp, #0
 80183fa:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	3308      	adds	r3, #8
 8018400:	4903      	ldr	r1, [pc, #12]	; (8018410 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 8018402:	4618      	mov	r0, r3
 8018404:	f7ff fd9a 	bl	8017f3c <_ZN18SimpleStringBuffer3addEPKcz>
}
 8018408:	bf00      	nop
 801840a:	3708      	adds	r7, #8
 801840c:	46bd      	mov	sp, r7
 801840e:	bd80      	pop	{r7, pc}
 8018410:	08027f44 	.word	0x08027f44

08018414 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 8018414:	b580      	push	{r7, lr}
 8018416:	b082      	sub	sp, #8
 8018418:	af00      	add	r7, sp, #0
 801841a:	6078      	str	r0, [r7, #4]
 801841c:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	f103 0008 	add.w	r0, r3, #8
 8018424:	683b      	ldr	r3, [r7, #0]
 8018426:	4a04      	ldr	r2, [pc, #16]	; (8018438 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 8018428:	4904      	ldr	r1, [pc, #16]	; (801843c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 801842a:	f7ff fd87 	bl	8017f3c <_ZN18SimpleStringBuffer3addEPKcz>
}
 801842e:	bf00      	nop
 8018430:	3708      	adds	r7, #8
 8018432:	46bd      	mov	sp, r7
 8018434:	bd80      	pop	{r7, pc}
 8018436:	bf00      	nop
 8018438:	08027f8c 	.word	0x08027f8c
 801843c:	08027fa4 	.word	0x08027fa4

08018440 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8018440:	b580      	push	{r7, lr}
 8018442:	b082      	sub	sp, #8
 8018444:	af00      	add	r7, sp, #0
 8018446:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	3308      	adds	r3, #8
 801844c:	4903      	ldr	r1, [pc, #12]	; (801845c <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 801844e:	4618      	mov	r0, r3
 8018450:	f7ff fd74 	bl	8017f3c <_ZN18SimpleStringBuffer3addEPKcz>
}
 8018454:	bf00      	nop
 8018456:	3708      	adds	r7, #8
 8018458:	46bd      	mov	sp, r7
 801845a:	bd80      	pop	{r7, pc}
 801845c:	08027fac 	.word	0x08027fac

08018460 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8018460:	b580      	push	{r7, lr}
 8018462:	b08a      	sub	sp, #40	; 0x28
 8018464:	af06      	add	r7, sp, #24
 8018466:	60f8      	str	r0, [r7, #12]
 8018468:	60b9      	str	r1, [r7, #8]
 801846a:	607a      	str	r2, [r7, #4]
 801846c:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 801846e:	f7f9 fe8d 	bl	801218c <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 8018472:	4602      	mov	r2, r0
 8018474:	69bb      	ldr	r3, [r7, #24]
 8018476:	9305      	str	r3, [sp, #20]
 8018478:	683b      	ldr	r3, [r7, #0]
 801847a:	9304      	str	r3, [sp, #16]
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	9303      	str	r3, [sp, #12]
 8018480:	68bb      	ldr	r3, [r7, #8]
 8018482:	9302      	str	r3, [sp, #8]
 8018484:	9201      	str	r2, [sp, #4]
 8018486:	2300      	movs	r3, #0
 8018488:	9300      	str	r3, [sp, #0]
 801848a:	2300      	movs	r3, #0
 801848c:	4a04      	ldr	r2, [pc, #16]	; (80184a0 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 801848e:	4905      	ldr	r1, [pc, #20]	; (80184a4 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8018490:	68f8      	ldr	r0, [r7, #12]
 8018492:	f000 f855 	bl	8018540 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8018496:	bf00      	nop
 8018498:	3710      	adds	r7, #16
 801849a:	46bd      	mov	sp, r7
 801849c:	bd80      	pop	{r7, pc}
 801849e:	bf00      	nop
 80184a0:	08027e08 	.word	0x08027e08
 80184a4:	080280c0 	.word	0x080280c0

080184a8 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80184a8:	b590      	push	{r4, r7, lr}
 80184aa:	b08b      	sub	sp, #44	; 0x2c
 80184ac:	af06      	add	r7, sp, #24
 80184ae:	60f8      	str	r0, [r7, #12]
 80184b0:	60b9      	str	r1, [r7, #8]
 80184b2:	607a      	str	r2, [r7, #4]
 80184b4:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 80184b6:	68bb      	ldr	r3, [r7, #8]
 80184b8:	68d8      	ldr	r0, [r3, #12]
 80184ba:	68bb      	ldr	r3, [r7, #8]
 80184bc:	691c      	ldr	r4, [r3, #16]
 80184be:	68bb      	ldr	r3, [r7, #8]
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	68ba      	ldr	r2, [r7, #8]
 80184c4:	6952      	ldr	r2, [r2, #20]
 80184c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80184c8:	9105      	str	r1, [sp, #20]
 80184ca:	6a39      	ldr	r1, [r7, #32]
 80184cc:	9104      	str	r1, [sp, #16]
 80184ce:	6839      	ldr	r1, [r7, #0]
 80184d0:	9103      	str	r1, [sp, #12]
 80184d2:	6879      	ldr	r1, [r7, #4]
 80184d4:	9102      	str	r1, [sp, #8]
 80184d6:	9201      	str	r2, [sp, #4]
 80184d8:	9300      	str	r3, [sp, #0]
 80184da:	4623      	mov	r3, r4
 80184dc:	4602      	mov	r2, r0
 80184de:	4904      	ldr	r1, [pc, #16]	; (80184f0 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80184e0:	68f8      	ldr	r0, [r7, #12]
 80184e2:	f000 f82d 	bl	8018540 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80184e6:	bf00      	nop
 80184e8:	3714      	adds	r7, #20
 80184ea:	46bd      	mov	sp, r7
 80184ec:	bd90      	pop	{r4, r7, pc}
 80184ee:	bf00      	nop
 80184f0:	080280e4 	.word	0x080280e4

080184f4 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80184f4:	b590      	push	{r4, r7, lr}
 80184f6:	b08b      	sub	sp, #44	; 0x2c
 80184f8:	af06      	add	r7, sp, #24
 80184fa:	60f8      	str	r0, [r7, #12]
 80184fc:	60b9      	str	r1, [r7, #8]
 80184fe:	607a      	str	r2, [r7, #4]
 8018500:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8018502:	68bb      	ldr	r3, [r7, #8]
 8018504:	68d8      	ldr	r0, [r3, #12]
 8018506:	68bb      	ldr	r3, [r7, #8]
 8018508:	691c      	ldr	r4, [r3, #16]
 801850a:	68bb      	ldr	r3, [r7, #8]
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	68ba      	ldr	r2, [r7, #8]
 8018510:	6952      	ldr	r2, [r2, #20]
 8018512:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018514:	9105      	str	r1, [sp, #20]
 8018516:	6a39      	ldr	r1, [r7, #32]
 8018518:	9104      	str	r1, [sp, #16]
 801851a:	6839      	ldr	r1, [r7, #0]
 801851c:	9103      	str	r1, [sp, #12]
 801851e:	6879      	ldr	r1, [r7, #4]
 8018520:	9102      	str	r1, [sp, #8]
 8018522:	9201      	str	r2, [sp, #4]
 8018524:	9300      	str	r3, [sp, #0]
 8018526:	4623      	mov	r3, r4
 8018528:	4602      	mov	r2, r0
 801852a:	4904      	ldr	r1, [pc, #16]	; (801853c <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 801852c:	68f8      	ldr	r0, [r7, #12]
 801852e:	f000 f807 	bl	8018540 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8018532:	bf00      	nop
 8018534:	3714      	adds	r7, #20
 8018536:	46bd      	mov	sp, r7
 8018538:	bd90      	pop	{r4, r7, pc}
 801853a:	bf00      	nop
 801853c:	0802810c 	.word	0x0802810c

08018540 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8018540:	b590      	push	{r4, r7, lr}
 8018542:	b087      	sub	sp, #28
 8018544:	af02      	add	r7, sp, #8
 8018546:	60f8      	str	r0, [r7, #12]
 8018548:	60b9      	str	r1, [r7, #8]
 801854a:	607a      	str	r2, [r7, #4]
 801854c:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 801854e:	68fb      	ldr	r3, [r7, #12]
 8018550:	3308      	adds	r3, #8
 8018552:	68ba      	ldr	r2, [r7, #8]
 8018554:	4910      	ldr	r1, [pc, #64]	; (8018598 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 8018556:	4618      	mov	r0, r3
 8018558:	f7ff fcf0 	bl	8017f3c <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 801855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801855e:	9300      	str	r3, [sp, #0]
 8018560:	6a3b      	ldr	r3, [r7, #32]
 8018562:	683a      	ldr	r2, [r7, #0]
 8018564:	6879      	ldr	r1, [r7, #4]
 8018566:	68f8      	ldr	r0, [r7, #12]
 8018568:	f7ff fe36 	bl	80181d8 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 801856c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801856e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018570:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018572:	68f8      	ldr	r0, [r7, #12]
 8018574:	f7ff fe52 	bl	801821c <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8018578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	3308      	adds	r3, #8
 801857e:	681c      	ldr	r4, [r3, #0]
 8018580:	68f8      	ldr	r0, [r7, #12]
 8018582:	f000 f80b 	bl	801859c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8018586:	4603      	mov	r3, r0
 8018588:	4619      	mov	r1, r3
 801858a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801858c:	47a0      	blx	r4
}
 801858e:	bf00      	nop
 8018590:	3714      	adds	r7, #20
 8018592:	46bd      	mov	sp, r7
 8018594:	bd90      	pop	{r4, r7, pc}
 8018596:	bf00      	nop
 8018598:	08028138 	.word	0x08028138

0801859c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 801859c:	b580      	push	{r7, lr}
 801859e:	b082      	sub	sp, #8
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	3308      	adds	r3, #8
 80185a8:	4618      	mov	r0, r3
 80185aa:	f7ff fdad 	bl	8018108 <_ZN18SimpleStringBuffer8toStringEv>
 80185ae:	4603      	mov	r3, r0
}
 80185b0:	4618      	mov	r0, r3
 80185b2:	3708      	adds	r7, #8
 80185b4:	46bd      	mov	sp, r7
 80185b6:	bd80      	pop	{r7, pc}

080185b8 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 80185b8:	b580      	push	{r7, lr}
 80185ba:	b082      	sub	sp, #8
 80185bc:	af00      	add	r7, sp, #0
 80185be:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	3308      	adds	r3, #8
 80185c4:	4618      	mov	r0, r3
 80185c6:	f7ff fca7 	bl	8017f18 <_ZN18SimpleStringBuffer5clearEv>
}
 80185ca:	bf00      	nop
 80185cc:	3708      	adds	r7, #8
 80185ce:	46bd      	mov	sp, r7
 80185d0:	bd80      	pop	{r7, pc}

080185d2 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 80185d2:	b480      	push	{r7}
 80185d4:	b085      	sub	sp, #20
 80185d6:	af00      	add	r7, sp, #0
 80185d8:	60f8      	str	r0, [r7, #12]
 80185da:	60b9      	str	r1, [r7, #8]
 80185dc:	607a      	str	r2, [r7, #4]
 80185de:	603b      	str	r3, [r7, #0]
    number_ = number;
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	687a      	ldr	r2, [r7, #4]
 80185e4:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	68ba      	ldr	r2, [r7, #8]
 80185ea:	609a      	str	r2, [r3, #8]
    size_ = size;
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	683a      	ldr	r2, [r7, #0]
 80185f0:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	69ba      	ldr	r2, [r7, #24]
 80185f6:	615a      	str	r2, [r3, #20]
    period_ = period;
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	7f3a      	ldrb	r2, [r7, #28]
 80185fc:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	f897 2020 	ldrb.w	r2, [r7, #32]
 8018604:	765a      	strb	r2, [r3, #25]
    file_ = file;
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801860a:	60da      	str	r2, [r3, #12]
    line_ = line;
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018610:	611a      	str	r2, [r3, #16]
}
 8018612:	bf00      	nop
 8018614:	3714      	adds	r7, #20
 8018616:	46bd      	mov	sp, r7
 8018618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801861c:	4770      	bx	lr

0801861e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 801861e:	b480      	push	{r7}
 8018620:	b085      	sub	sp, #20
 8018622:	af00      	add	r7, sp, #0
 8018624:	60f8      	str	r0, [r7, #12]
 8018626:	60b9      	str	r1, [r7, #8]
 8018628:	4613      	mov	r3, r2
 801862a:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 801862c:	79fb      	ldrb	r3, [r7, #7]
 801862e:	2b00      	cmp	r3, #0
 8018630:	d00b      	beq.n	801864a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8018632:	68bb      	ldr	r3, [r7, #8]
 8018634:	7e1b      	ldrb	r3, [r3, #24]
 8018636:	79fa      	ldrb	r2, [r7, #7]
 8018638:	429a      	cmp	r2, r3
 801863a:	d006      	beq.n	801864a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 801863c:	68bb      	ldr	r3, [r7, #8]
 801863e:	7e1b      	ldrb	r3, [r3, #24]
 8018640:	2b01      	cmp	r3, #1
 8018642:	d004      	beq.n	801864e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8018644:	79fb      	ldrb	r3, [r7, #7]
 8018646:	2b02      	cmp	r3, #2
 8018648:	d101      	bne.n	801864e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 801864a:	2301      	movs	r3, #1
 801864c:	e000      	b.n	8018650 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 801864e:	2300      	movs	r3, #0
}
 8018650:	4618      	mov	r0, r3
 8018652:	3714      	adds	r7, #20
 8018654:	46bd      	mov	sp, r7
 8018656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865a:	4770      	bx	lr

0801865c <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 801865c:	b480      	push	{r7}
 801865e:	b083      	sub	sp, #12
 8018660:	af00      	add	r7, sp, #0
 8018662:	6078      	str	r0, [r7, #4]
 8018664:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	681a      	ldr	r2, [r3, #0]
 801866a:	683b      	ldr	r3, [r7, #0]
 801866c:	61da      	str	r2, [r3, #28]
    head_ = node;
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	683a      	ldr	r2, [r7, #0]
 8018672:	601a      	str	r2, [r3, #0]
}
 8018674:	bf00      	nop
 8018676:	370c      	adds	r7, #12
 8018678:	46bd      	mov	sp, r7
 801867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801867e:	4770      	bx	lr

08018680 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8018680:	b480      	push	{r7}
 8018682:	b085      	sub	sp, #20
 8018684:	af00      	add	r7, sp, #0
 8018686:	6078      	str	r0, [r7, #4]
 8018688:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8018690:	2300      	movs	r3, #0
 8018692:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d019      	beq.n	80186ce <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	689b      	ldr	r3, [r3, #8]
 801869e:	683a      	ldr	r2, [r7, #0]
 80186a0:	429a      	cmp	r2, r3
 80186a2:	d10e      	bne.n	80186c2 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 80186a4:	68bb      	ldr	r3, [r7, #8]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d005      	beq.n	80186b6 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	69da      	ldr	r2, [r3, #28]
 80186ae:	68bb      	ldr	r3, [r7, #8]
 80186b0:	61da      	str	r2, [r3, #28]
                return cur;
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	e00c      	b.n	80186d0 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	69da      	ldr	r2, [r3, #28]
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	601a      	str	r2, [r3, #0]
                return cur;
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	e006      	b.n	80186d0 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	69db      	ldr	r3, [r3, #28]
 80186ca:	60fb      	str	r3, [r7, #12]
    while (cur) {
 80186cc:	e7e2      	b.n	8018694 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 80186ce:	2300      	movs	r3, #0
}
 80186d0:	4618      	mov	r0, r3
 80186d2:	3714      	adds	r7, #20
 80186d4:	46bd      	mov	sp, r7
 80186d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186da:	4770      	bx	lr

080186dc <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 80186dc:	b480      	push	{r7}
 80186de:	b085      	sub	sp, #20
 80186e0:	af00      	add	r7, sp, #0
 80186e2:	6078      	str	r0, [r7, #4]
 80186e4:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	60fb      	str	r3, [r7, #12]
  while (cur) {
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d00a      	beq.n	8018708 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	689b      	ldr	r3, [r3, #8]
 80186f6:	683a      	ldr	r2, [r7, #0]
 80186f8:	429a      	cmp	r2, r3
 80186fa:	d101      	bne.n	8018700 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	e004      	b.n	801870a <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	69db      	ldr	r3, [r3, #28]
 8018704:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8018706:	e7f1      	b.n	80186ec <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 8018708:	2300      	movs	r3, #0
}
 801870a:	4618      	mov	r0, r3
 801870c:	3714      	adds	r7, #20
 801870e:	46bd      	mov	sp, r7
 8018710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018714:	4770      	bx	lr

08018716 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8018716:	b580      	push	{r7, lr}
 8018718:	b086      	sub	sp, #24
 801871a:	af00      	add	r7, sp, #0
 801871c:	60f8      	str	r0, [r7, #12]
 801871e:	60b9      	str	r1, [r7, #8]
 8018720:	4613      	mov	r3, r2
 8018722:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8018724:	68bb      	ldr	r3, [r7, #8]
 8018726:	617b      	str	r3, [r7, #20]
 8018728:	697b      	ldr	r3, [r7, #20]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d00e      	beq.n	801874c <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 801872e:	79fb      	ldrb	r3, [r7, #7]
 8018730:	461a      	mov	r2, r3
 8018732:	6979      	ldr	r1, [r7, #20]
 8018734:	68f8      	ldr	r0, [r7, #12]
 8018736:	f7ff ff72 	bl	801861e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801873a:	4603      	mov	r3, r0
 801873c:	2b00      	cmp	r3, #0
 801873e:	d001      	beq.n	8018744 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8018740:	697b      	ldr	r3, [r7, #20]
 8018742:	e004      	b.n	801874e <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8018744:	697b      	ldr	r3, [r7, #20]
 8018746:	69db      	ldr	r3, [r3, #28]
 8018748:	617b      	str	r3, [r7, #20]
 801874a:	e7ed      	b.n	8018728 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 801874c:	2300      	movs	r3, #0
}
 801874e:	4618      	mov	r0, r3
 8018750:	3718      	adds	r7, #24
 8018752:	46bd      	mov	sp, r7
 8018754:	bd80      	pop	{r7, pc}

08018756 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8018756:	b580      	push	{r7, lr}
 8018758:	b082      	sub	sp, #8
 801875a:	af00      	add	r7, sp, #0
 801875c:	6078      	str	r0, [r7, #4]
 801875e:	460b      	mov	r3, r1
 8018760:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	78fa      	ldrb	r2, [r7, #3]
 8018768:	4619      	mov	r1, r3
 801876a:	6878      	ldr	r0, [r7, #4]
 801876c:	f7ff ffd3 	bl	8018716 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8018770:	4603      	mov	r3, r0
}
 8018772:	4618      	mov	r0, r3
 8018774:	3708      	adds	r7, #8
 8018776:	46bd      	mov	sp, r7
 8018778:	bd80      	pop	{r7, pc}

0801877a <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 801877a:	b580      	push	{r7, lr}
 801877c:	b084      	sub	sp, #16
 801877e:	af00      	add	r7, sp, #0
 8018780:	60f8      	str	r0, [r7, #12]
 8018782:	60b9      	str	r1, [r7, #8]
 8018784:	4613      	mov	r3, r2
 8018786:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8018788:	68bb      	ldr	r3, [r7, #8]
 801878a:	69db      	ldr	r3, [r3, #28]
 801878c:	79fa      	ldrb	r2, [r7, #7]
 801878e:	4619      	mov	r1, r3
 8018790:	68f8      	ldr	r0, [r7, #12]
 8018792:	f7ff ffc0 	bl	8018716 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8018796:	4603      	mov	r3, r0
}
 8018798:	4618      	mov	r0, r3
 801879a:	3710      	adds	r7, #16
 801879c:	46bd      	mov	sp, r7
 801879e:	bd80      	pop	{r7, pc}

080187a0 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b084      	sub	sp, #16
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	6078      	str	r0, [r7, #4]
 80187a8:	460b      	mov	r3, r1
 80187aa:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 80187ac:	2300      	movs	r3, #0
 80187ae:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	60bb      	str	r3, [r7, #8]
 80187b6:	68bb      	ldr	r3, [r7, #8]
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d00f      	beq.n	80187dc <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 80187bc:	78fb      	ldrb	r3, [r7, #3]
 80187be:	461a      	mov	r2, r3
 80187c0:	68b9      	ldr	r1, [r7, #8]
 80187c2:	6878      	ldr	r0, [r7, #4]
 80187c4:	f7ff ff2b 	bl	801861e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80187c8:	4603      	mov	r3, r0
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d002      	beq.n	80187d4 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	3301      	adds	r3, #1
 80187d2:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 80187d4:	68bb      	ldr	r3, [r7, #8]
 80187d6:	69db      	ldr	r3, [r3, #28]
 80187d8:	60bb      	str	r3, [r7, #8]
 80187da:	e7ec      	b.n	80187b6 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 80187dc:	68fb      	ldr	r3, [r7, #12]
}
 80187de:	4618      	mov	r0, r3
 80187e0:	3710      	adds	r7, #16
 80187e2:	46bd      	mov	sp, r7
 80187e4:	bd80      	pop	{r7, pc}
	...

080187e8 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 80187e8:	b480      	push	{r7}
 80187ea:	b083      	sub	sp, #12
 80187ec:	af00      	add	r7, sp, #0
 80187ee:	6078      	str	r0, [r7, #4]
 80187f0:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 80187f2:	6839      	ldr	r1, [r7, #0]
 80187f4:	4b09      	ldr	r3, [pc, #36]	; (801881c <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 80187f6:	fba3 2301 	umull	r2, r3, r3, r1
 80187fa:	1aca      	subs	r2, r1, r3
 80187fc:	0852      	lsrs	r2, r2, #1
 80187fe:	4413      	add	r3, r2
 8018800:	099a      	lsrs	r2, r3, #6
 8018802:	4613      	mov	r3, r2
 8018804:	00db      	lsls	r3, r3, #3
 8018806:	4413      	add	r3, r2
 8018808:	00db      	lsls	r3, r3, #3
 801880a:	4413      	add	r3, r2
 801880c:	1aca      	subs	r2, r1, r3
 801880e:	4613      	mov	r3, r2
}
 8018810:	4618      	mov	r0, r3
 8018812:	370c      	adds	r7, #12
 8018814:	46bd      	mov	sp, r7
 8018816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801881a:	4770      	bx	lr
 801881c:	c0e07039 	.word	0xc0e07039

08018820 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 8018820:	b580      	push	{r7, lr}
 8018822:	b082      	sub	sp, #8
 8018824:	af00      	add	r7, sp, #0
 8018826:	6078      	str	r0, [r7, #4]
 8018828:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 801882a:	683b      	ldr	r3, [r7, #0]
 801882c:	689b      	ldr	r3, [r3, #8]
 801882e:	4619      	mov	r1, r3
 8018830:	6878      	ldr	r0, [r7, #4]
 8018832:	f7ff ffd9 	bl	80187e8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8018836:	4603      	mov	r3, r0
 8018838:	009b      	lsls	r3, r3, #2
 801883a:	687a      	ldr	r2, [r7, #4]
 801883c:	4413      	add	r3, r2
 801883e:	6839      	ldr	r1, [r7, #0]
 8018840:	4618      	mov	r0, r3
 8018842:	f7ff ff0b 	bl	801865c <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 8018846:	bf00      	nop
 8018848:	3708      	adds	r7, #8
 801884a:	46bd      	mov	sp, r7
 801884c:	bd80      	pop	{r7, pc}

0801884e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 801884e:	b580      	push	{r7, lr}
 8018850:	b082      	sub	sp, #8
 8018852:	af00      	add	r7, sp, #0
 8018854:	6078      	str	r0, [r7, #4]
 8018856:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8018858:	6839      	ldr	r1, [r7, #0]
 801885a:	6878      	ldr	r0, [r7, #4]
 801885c:	f7ff ffc4 	bl	80187e8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8018860:	4603      	mov	r3, r0
 8018862:	009b      	lsls	r3, r3, #2
 8018864:	687a      	ldr	r2, [r7, #4]
 8018866:	4413      	add	r3, r2
 8018868:	6839      	ldr	r1, [r7, #0]
 801886a:	4618      	mov	r0, r3
 801886c:	f7ff ff08 	bl	8018680 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8018870:	4603      	mov	r3, r0
}
 8018872:	4618      	mov	r0, r3
 8018874:	3708      	adds	r7, #8
 8018876:	46bd      	mov	sp, r7
 8018878:	bd80      	pop	{r7, pc}

0801887a <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 801887a:	b580      	push	{r7, lr}
 801887c:	b082      	sub	sp, #8
 801887e:	af00      	add	r7, sp, #0
 8018880:	6078      	str	r0, [r7, #4]
 8018882:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8018884:	6839      	ldr	r1, [r7, #0]
 8018886:	6878      	ldr	r0, [r7, #4]
 8018888:	f7ff ffae 	bl	80187e8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 801888c:	4603      	mov	r3, r0
 801888e:	009b      	lsls	r3, r3, #2
 8018890:	687a      	ldr	r2, [r7, #4]
 8018892:	4413      	add	r3, r2
 8018894:	6839      	ldr	r1, [r7, #0]
 8018896:	4618      	mov	r0, r3
 8018898:	f7ff ff20 	bl	80186dc <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 801889c:	4603      	mov	r3, r0
}
 801889e:	4618      	mov	r0, r3
 80188a0:	3708      	adds	r7, #8
 80188a2:	46bd      	mov	sp, r7
 80188a4:	bd80      	pop	{r7, pc}

080188a6 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 80188a6:	b580      	push	{r7, lr}
 80188a8:	b084      	sub	sp, #16
 80188aa:	af00      	add	r7, sp, #0
 80188ac:	6078      	str	r0, [r7, #4]
 80188ae:	460b      	mov	r3, r1
 80188b0:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 80188b2:	2300      	movs	r3, #0
 80188b4:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 80188b6:	2300      	movs	r3, #0
 80188b8:	60bb      	str	r3, [r7, #8]
 80188ba:	68bb      	ldr	r3, [r7, #8]
 80188bc:	2b48      	cmp	r3, #72	; 0x48
 80188be:	dc10      	bgt.n	80188e2 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 80188c0:	68bb      	ldr	r3, [r7, #8]
 80188c2:	009b      	lsls	r3, r3, #2
 80188c4:	687a      	ldr	r2, [r7, #4]
 80188c6:	4413      	add	r3, r2
 80188c8:	78fa      	ldrb	r2, [r7, #3]
 80188ca:	4611      	mov	r1, r2
 80188cc:	4618      	mov	r0, r3
 80188ce:	f7ff ff67 	bl	80187a0 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 80188d2:	4602      	mov	r2, r0
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	4413      	add	r3, r2
 80188d8:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 80188da:	68bb      	ldr	r3, [r7, #8]
 80188dc:	3301      	adds	r3, #1
 80188de:	60bb      	str	r3, [r7, #8]
 80188e0:	e7eb      	b.n	80188ba <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 80188e2:	68fb      	ldr	r3, [r7, #12]
}
 80188e4:	4618      	mov	r0, r3
 80188e6:	3710      	adds	r7, #16
 80188e8:	46bd      	mov	sp, r7
 80188ea:	bd80      	pop	{r7, pc}

080188ec <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	b084      	sub	sp, #16
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	6078      	str	r0, [r7, #4]
 80188f4:	460b      	mov	r3, r1
 80188f6:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 80188f8:	2300      	movs	r3, #0
 80188fa:	60fb      	str	r3, [r7, #12]
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	2b48      	cmp	r3, #72	; 0x48
 8018900:	dc12      	bgt.n	8018928 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	009b      	lsls	r3, r3, #2
 8018906:	687a      	ldr	r2, [r7, #4]
 8018908:	4413      	add	r3, r2
 801890a:	78fa      	ldrb	r2, [r7, #3]
 801890c:	4611      	mov	r1, r2
 801890e:	4618      	mov	r0, r3
 8018910:	f7ff ff21 	bl	8018756 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8018914:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 8018916:	68bb      	ldr	r3, [r7, #8]
 8018918:	2b00      	cmp	r3, #0
 801891a:	d001      	beq.n	8018920 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 801891c:	68bb      	ldr	r3, [r7, #8]
 801891e:	e004      	b.n	801892a <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 8018920:	68fb      	ldr	r3, [r7, #12]
 8018922:	3301      	adds	r3, #1
 8018924:	60fb      	str	r3, [r7, #12]
 8018926:	e7e9      	b.n	80188fc <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 8018928:	2300      	movs	r3, #0
}
 801892a:	4618      	mov	r0, r3
 801892c:	3710      	adds	r7, #16
 801892e:	46bd      	mov	sp, r7
 8018930:	bd80      	pop	{r7, pc}

08018932 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 8018932:	b580      	push	{r7, lr}
 8018934:	b086      	sub	sp, #24
 8018936:	af00      	add	r7, sp, #0
 8018938:	60f8      	str	r0, [r7, #12]
 801893a:	60b9      	str	r1, [r7, #8]
 801893c:	4613      	mov	r3, r2
 801893e:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8018940:	68bb      	ldr	r3, [r7, #8]
 8018942:	689b      	ldr	r3, [r3, #8]
 8018944:	4619      	mov	r1, r3
 8018946:	68f8      	ldr	r0, [r7, #12]
 8018948:	f7ff ff4e 	bl	80187e8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 801894c:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 801894e:	697b      	ldr	r3, [r7, #20]
 8018950:	009b      	lsls	r3, r3, #2
 8018952:	68fa      	ldr	r2, [r7, #12]
 8018954:	4413      	add	r3, r2
 8018956:	79fa      	ldrb	r2, [r7, #7]
 8018958:	68b9      	ldr	r1, [r7, #8]
 801895a:	4618      	mov	r0, r3
 801895c:	f7ff ff0d 	bl	801877a <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8018960:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8018962:	693b      	ldr	r3, [r7, #16]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d001      	beq.n	801896c <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8018968:	693b      	ldr	r3, [r7, #16]
 801896a:	e019      	b.n	80189a0 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 801896c:	697b      	ldr	r3, [r7, #20]
 801896e:	3301      	adds	r3, #1
 8018970:	617b      	str	r3, [r7, #20]
 8018972:	697b      	ldr	r3, [r7, #20]
 8018974:	2b48      	cmp	r3, #72	; 0x48
 8018976:	d812      	bhi.n	801899e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8018978:	697b      	ldr	r3, [r7, #20]
 801897a:	009b      	lsls	r3, r3, #2
 801897c:	68fa      	ldr	r2, [r7, #12]
 801897e:	4413      	add	r3, r2
 8018980:	79fa      	ldrb	r2, [r7, #7]
 8018982:	4611      	mov	r1, r2
 8018984:	4618      	mov	r0, r3
 8018986:	f7ff fee6 	bl	8018756 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 801898a:	6138      	str	r0, [r7, #16]
        if (node) return node;
 801898c:	693b      	ldr	r3, [r7, #16]
 801898e:	2b00      	cmp	r3, #0
 8018990:	d001      	beq.n	8018996 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8018992:	693b      	ldr	r3, [r7, #16]
 8018994:	e004      	b.n	80189a0 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 8018996:	697b      	ldr	r3, [r7, #20]
 8018998:	3301      	adds	r3, #1
 801899a:	617b      	str	r3, [r7, #20]
 801899c:	e7e9      	b.n	8018972 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 801899e:	2300      	movs	r3, #0
}
 80189a0:	4618      	mov	r0, r3
 80189a2:	3718      	adds	r7, #24
 80189a4:	46bd      	mov	sp, r7
 80189a6:	bd80      	pop	{r7, pc}

080189a8 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 80189a8:	b5b0      	push	{r4, r5, r7, lr}
 80189aa:	b082      	sub	sp, #8
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	6078      	str	r0, [r7, #4]
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	2448      	movs	r4, #72	; 0x48
 80189b4:	461d      	mov	r5, r3
 80189b6:	2c00      	cmp	r4, #0
 80189b8:	db05      	blt.n	80189c6 <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 80189ba:	4628      	mov	r0, r5
 80189bc:	f7ff fa84 	bl	8017ec8 <_ZN22MemoryLeakDetectorListC1Ev>
 80189c0:	3504      	adds	r5, #4
 80189c2:	3c01      	subs	r4, #1
 80189c4:	e7f7      	b.n	80189b6 <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	4618      	mov	r0, r3
 80189ca:	3708      	adds	r7, #8
 80189cc:	46bd      	mov	sp, r7
 80189ce:	bdb0      	pop	{r4, r5, r7, pc}

080189d0 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 80189d0:	b590      	push	{r4, r7, lr}
 80189d2:	b083      	sub	sp, #12
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	6078      	str	r0, [r7, #4]
 80189d8:	6039      	str	r1, [r7, #0]
 80189da:	4a1d      	ldr	r2, [pc, #116]	; (8018a50 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	601a      	str	r2, [r3, #0]
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	330c      	adds	r3, #12
 80189e4:	4618      	mov	r0, r3
 80189e6:	f7ff fbe3 	bl	80181b0 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80189f0:	331c      	adds	r3, #28
 80189f2:	4618      	mov	r0, r3
 80189f4:	f7ff ffd8 	bl	80189a8 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80189fe:	2201      	movs	r2, #1
 8018a00:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8018a08:	3304      	adds	r3, #4
 8018a0a:	2201      	movs	r2, #1
 8018a0c:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	2201      	movs	r2, #1
 8018a12:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8018a1a:	3308      	adds	r3, #8
 8018a1c:	2200      	movs	r2, #0
 8018a1e:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	683a      	ldr	r2, [r7, #0]
 8018a24:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 8018a26:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8018a2a:	490a      	ldr	r1, [pc, #40]	; (8018a54 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 8018a2c:	2004      	movs	r0, #4
 8018a2e:	f7f3 fb17 	bl	800c060 <_ZnwjPKci>
 8018a32:	4604      	mov	r4, r0
 8018a34:	4620      	mov	r0, r4
 8018a36:	f7f5 fbe7 	bl	800e208 <_ZN11SimpleMutexC1Ev>
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8018a40:	330c      	adds	r3, #12
 8018a42:	601c      	str	r4, [r3, #0]
}
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	4618      	mov	r0, r3
 8018a48:	370c      	adds	r7, #12
 8018a4a:	46bd      	mov	sp, r7
 8018a4c:	bd90      	pop	{r4, r7, pc}
 8018a4e:	bf00      	nop
 8018a50:	0802b0bc 	.word	0x0802b0bc
 8018a54:	0802813c 	.word	0x0802813c

08018a58 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 8018a58:	b590      	push	{r4, r7, lr}
 8018a5a:	b083      	sub	sp, #12
 8018a5c:	af00      	add	r7, sp, #0
 8018a5e:	6078      	str	r0, [r7, #4]
 8018a60:	4a0e      	ldr	r2, [pc, #56]	; (8018a9c <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8018a6c:	330c      	adds	r3, #12
 8018a6e:	681b      	ldr	r3, [r3, #0]
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d00d      	beq.n	8018a90 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8018a7a:	330c      	adds	r3, #12
 8018a7c:	681c      	ldr	r4, [r3, #0]
 8018a7e:	2c00      	cmp	r4, #0
 8018a80:	d006      	beq.n	8018a90 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8018a82:	4620      	mov	r0, r4
 8018a84:	f7f5 fbd2 	bl	800e22c <_ZN11SimpleMutexD1Ev>
 8018a88:	2104      	movs	r1, #4
 8018a8a:	4620      	mov	r0, r4
 8018a8c:	f7f3 fafc 	bl	800c088 <_ZdlPvj>
    }
}
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	4618      	mov	r0, r3
 8018a94:	370c      	adds	r7, #12
 8018a96:	46bd      	mov	sp, r7
 8018a98:	bd90      	pop	{r4, r7, pc}
 8018a9a:	bf00      	nop
 8018a9c:	0802b0bc 	.word	0x0802b0bc

08018aa0 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8018aa0:	b580      	push	{r7, lr}
 8018aa2:	b082      	sub	sp, #8
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	6078      	str	r0, [r7, #4]
}
 8018aa8:	6878      	ldr	r0, [r7, #4]
 8018aaa:	f7ff ffd5 	bl	8018a58 <_ZN18MemoryLeakDetectorD1Ev>
 8018aae:	f241 1150 	movw	r1, #4432	; 0x1150
 8018ab2:	6878      	ldr	r0, [r7, #4]
 8018ab4:	f7f3 fae8 	bl	800c088 <_ZdlPvj>
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	4618      	mov	r0, r3
 8018abc:	3708      	adds	r7, #8
 8018abe:	46bd      	mov	sp, r7
 8018ac0:	bd80      	pop	{r7, pc}

08018ac2 <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8018ac2:	b580      	push	{r7, lr}
 8018ac4:	b082      	sub	sp, #8
 8018ac6:	af00      	add	r7, sp, #0
 8018ac8:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	330c      	adds	r3, #12
 8018ace:	4618      	mov	r0, r3
 8018ad0:	f7ff fd72 	bl	80185b8 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	2203      	movs	r2, #3
 8018ad8:	721a      	strb	r2, [r3, #8]
}
 8018ada:	bf00      	nop
 8018adc:	3708      	adds	r7, #8
 8018ade:	46bd      	mov	sp, r7
 8018ae0:	bd80      	pop	{r7, pc}

08018ae2 <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 8018ae2:	b480      	push	{r7}
 8018ae4:	b083      	sub	sp, #12
 8018ae6:	af00      	add	r7, sp, #0
 8018ae8:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	2202      	movs	r2, #2
 8018aee:	721a      	strb	r2, [r3, #8]
}
 8018af0:	bf00      	nop
 8018af2:	370c      	adds	r7, #12
 8018af4:	46bd      	mov	sp, r7
 8018af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018afa:	4770      	bx	lr

08018afc <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 8018afc:	b480      	push	{r7}
 8018afe:	b083      	sub	sp, #12
 8018b00:	af00      	add	r7, sp, #0
 8018b02:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	2202      	movs	r2, #2
 8018b08:	721a      	strb	r2, [r3, #8]
}
 8018b0a:	bf00      	nop
 8018b0c:	370c      	adds	r7, #12
 8018b0e:	46bd      	mov	sp, r7
 8018b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b14:	4770      	bx	lr

08018b16 <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 8018b16:	b480      	push	{r7}
 8018b18:	b083      	sub	sp, #12
 8018b1a:	af00      	add	r7, sp, #0
 8018b1c:	6078      	str	r0, [r7, #4]
    return mutex_;
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8018b24:	330c      	adds	r3, #12
 8018b26:	681b      	ldr	r3, [r3, #0]
}
 8018b28:	4618      	mov	r0, r3
 8018b2a:	370c      	adds	r7, #12
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b32:	4770      	bx	lr

08018b34 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 8018b34:	b480      	push	{r7}
 8018b36:	b083      	sub	sp, #12
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	f023 0303 	bic.w	r3, r3, #3
 8018b42:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 8018b44:	4618      	mov	r0, r3
 8018b46:	370c      	adds	r7, #12
 8018b48:	46bd      	mov	sp, r7
 8018b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b4e:	4770      	bx	lr

08018b50 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8018b50:	b580      	push	{r7, lr}
 8018b52:	b082      	sub	sp, #8
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	6078      	str	r0, [r7, #4]
 8018b58:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 8018b5a:	683b      	ldr	r3, [r7, #0]
 8018b5c:	3303      	adds	r3, #3
 8018b5e:	4618      	mov	r0, r3
 8018b60:	f7ff ffe8 	bl	8018b34 <_ZL31calculateVoidPointerAlignedSizej>
 8018b64:	4603      	mov	r3, r0
}
 8018b66:	4618      	mov	r0, r3
 8018b68:	3708      	adds	r7, #8
 8018b6a:	46bd      	mov	sp, r7
 8018b6c:	bd80      	pop	{r7, pc}

08018b6e <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 8018b6e:	b580      	push	{r7, lr}
 8018b70:	b084      	sub	sp, #16
 8018b72:	af00      	add	r7, sp, #0
 8018b74:	60f8      	str	r0, [r7, #12]
 8018b76:	60b9      	str	r1, [r7, #8]
 8018b78:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 8018b7a:	6879      	ldr	r1, [r7, #4]
 8018b7c:	68f8      	ldr	r0, [r7, #12]
 8018b7e:	f7ff ffe7 	bl	8018b50 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8018b82:	4602      	mov	r2, r0
 8018b84:	68bb      	ldr	r3, [r7, #8]
 8018b86:	4413      	add	r3, r2
}
 8018b88:	4618      	mov	r0, r3
 8018b8a:	3710      	adds	r7, #16
 8018b8c:	46bd      	mov	sp, r7
 8018b8e:	bd80      	pop	{r7, pc}

08018b90 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8018b90:	b580      	push	{r7, lr}
 8018b92:	b08a      	sub	sp, #40	; 0x28
 8018b94:	af06      	add	r7, sp, #24
 8018b96:	60f8      	str	r0, [r7, #12]
 8018b98:	60b9      	str	r1, [r7, #8]
 8018b9a:	607a      	str	r2, [r7, #4]
 8018b9c:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8018b9e:	68fb      	ldr	r3, [r7, #12]
 8018ba0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8018ba4:	3304      	adds	r3, #4
 8018ba6:	681a      	ldr	r2, [r3, #0]
 8018ba8:	1c51      	adds	r1, r2, #1
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8018bb0:	3304      	adds	r3, #4
 8018bb2:	6019      	str	r1, [r3, #0]
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	7a19      	ldrb	r1, [r3, #8]
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8018bbe:	3308      	adds	r3, #8
 8018bc0:	781b      	ldrb	r3, [r3, #0]
 8018bc2:	6a38      	ldr	r0, [r7, #32]
 8018bc4:	9004      	str	r0, [sp, #16]
 8018bc6:	69f8      	ldr	r0, [r7, #28]
 8018bc8:	9003      	str	r0, [sp, #12]
 8018bca:	9302      	str	r3, [sp, #8]
 8018bcc:	9101      	str	r1, [sp, #4]
 8018bce:	69bb      	ldr	r3, [r7, #24]
 8018bd0:	9300      	str	r3, [sp, #0]
 8018bd2:	683b      	ldr	r3, [r7, #0]
 8018bd4:	6879      	ldr	r1, [r7, #4]
 8018bd6:	68b8      	ldr	r0, [r7, #8]
 8018bd8:	f7ff fcfb 	bl	80185d2 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8018bdc:	68bb      	ldr	r3, [r7, #8]
 8018bde:	689a      	ldr	r2, [r3, #8]
 8018be0:	68bb      	ldr	r3, [r7, #8]
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	4413      	add	r3, r2
 8018be6:	4619      	mov	r1, r3
 8018be8:	68f8      	ldr	r0, [r7, #12]
 8018bea:	f000 f861 	bl	8018cb0 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8018bee:	68fb      	ldr	r3, [r7, #12]
 8018bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018bf4:	331c      	adds	r3, #28
 8018bf6:	68b9      	ldr	r1, [r7, #8]
 8018bf8:	4618      	mov	r0, r3
 8018bfa:	f7ff fe11 	bl	8018820 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 8018bfe:	bf00      	nop
 8018c00:	3710      	adds	r7, #16
 8018c02:	46bd      	mov	sp, r7
 8018c04:	bd80      	pop	{r7, pc}

08018c06 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8018c06:	b580      	push	{r7, lr}
 8018c08:	b08a      	sub	sp, #40	; 0x28
 8018c0a:	af04      	add	r7, sp, #16
 8018c0c:	60f8      	str	r0, [r7, #12]
 8018c0e:	60b9      	str	r1, [r7, #8]
 8018c10:	607a      	str	r2, [r7, #4]
 8018c12:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8018c14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018c18:	9302      	str	r3, [sp, #8]
 8018c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c1c:	9301      	str	r3, [sp, #4]
 8018c1e:	6a3b      	ldr	r3, [r7, #32]
 8018c20:	9300      	str	r3, [sp, #0]
 8018c22:	683b      	ldr	r3, [r7, #0]
 8018c24:	687a      	ldr	r2, [r7, #4]
 8018c26:	68b9      	ldr	r1, [r7, #8]
 8018c28:	68f8      	ldr	r0, [r7, #12]
 8018c2a:	f000 f96f 	bl	8018f0c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 8018c2e:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 8018c30:	697b      	ldr	r3, [r7, #20]
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d101      	bne.n	8018c3a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 8018c36:	2300      	movs	r3, #0
 8018c38:	e017      	b.n	8018c6a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 8018c3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018c3e:	9300      	str	r3, [sp, #0]
 8018c40:	697b      	ldr	r3, [r7, #20]
 8018c42:	683a      	ldr	r2, [r7, #0]
 8018c44:	68b9      	ldr	r1, [r7, #8]
 8018c46:	68f8      	ldr	r0, [r7, #12]
 8018c48:	f000 f98a 	bl	8018f60 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8018c4c:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 8018c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c50:	9302      	str	r3, [sp, #8]
 8018c52:	6a3b      	ldr	r3, [r7, #32]
 8018c54:	9301      	str	r3, [sp, #4]
 8018c56:	68bb      	ldr	r3, [r7, #8]
 8018c58:	9300      	str	r3, [sp, #0]
 8018c5a:	683b      	ldr	r3, [r7, #0]
 8018c5c:	697a      	ldr	r2, [r7, #20]
 8018c5e:	6939      	ldr	r1, [r7, #16]
 8018c60:	68f8      	ldr	r0, [r7, #12]
 8018c62:	f7ff ff95 	bl	8018b90 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8018c66:	693b      	ldr	r3, [r7, #16]
 8018c68:	689b      	ldr	r3, [r3, #8]
}
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	3718      	adds	r7, #24
 8018c6e:	46bd      	mov	sp, r7
 8018c70:	bd80      	pop	{r7, pc}
	...

08018c74 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b084      	sub	sp, #16
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	6078      	str	r0, [r7, #4]
 8018c7c:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018c84:	331c      	adds	r3, #28
 8018c86:	6839      	ldr	r1, [r7, #0]
 8018c88:	4618      	mov	r0, r3
 8018c8a:	f7ff fdf6 	bl	801887a <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8018c8e:	60f8      	str	r0, [r7, #12]
  if (node)
 8018c90:	68fb      	ldr	r3, [r7, #12]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d006      	beq.n	8018ca4 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 8018c96:	4b05      	ldr	r3, [pc, #20]	; (8018cac <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 8018c98:	681b      	ldr	r3, [r3, #0]
 8018c9a:	68fa      	ldr	r2, [r7, #12]
 8018c9c:	6812      	ldr	r2, [r2, #0]
 8018c9e:	21cd      	movs	r1, #205	; 0xcd
 8018ca0:	6838      	ldr	r0, [r7, #0]
 8018ca2:	4798      	blx	r3
#endif
}
 8018ca4:	bf00      	nop
 8018ca6:	3710      	adds	r7, #16
 8018ca8:	46bd      	mov	sp, r7
 8018caa:	bd80      	pop	{r7, pc}
 8018cac:	200000d8 	.word	0x200000d8

08018cb0 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8018cb0:	b480      	push	{r7}
 8018cb2:	b085      	sub	sp, #20
 8018cb4:	af00      	add	r7, sp, #0
 8018cb6:	6078      	str	r0, [r7, #4]
 8018cb8:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8018cba:	2300      	movs	r3, #0
 8018cbc:	60fb      	str	r3, [r7, #12]
 8018cbe:	68fb      	ldr	r3, [r7, #12]
 8018cc0:	2b02      	cmp	r3, #2
 8018cc2:	d812      	bhi.n	8018cea <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8018cc4:	68f9      	ldr	r1, [r7, #12]
 8018cc6:	4b0c      	ldr	r3, [pc, #48]	; (8018cf8 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 8018cc8:	fba3 2301 	umull	r2, r3, r3, r1
 8018ccc:	085a      	lsrs	r2, r3, #1
 8018cce:	4613      	mov	r3, r2
 8018cd0:	005b      	lsls	r3, r3, #1
 8018cd2:	4413      	add	r3, r2
 8018cd4:	1aca      	subs	r2, r1, r3
 8018cd6:	6839      	ldr	r1, [r7, #0]
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	440b      	add	r3, r1
 8018cdc:	4907      	ldr	r1, [pc, #28]	; (8018cfc <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8018cde:	5c8a      	ldrb	r2, [r1, r2]
 8018ce0:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	3301      	adds	r3, #1
 8018ce6:	60fb      	str	r3, [r7, #12]
 8018ce8:	e7e9      	b.n	8018cbe <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 8018cea:	bf00      	nop
 8018cec:	3714      	adds	r7, #20
 8018cee:	46bd      	mov	sp, r7
 8018cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cf4:	4770      	bx	lr
 8018cf6:	bf00      	nop
 8018cf8:	aaaaaaab 	.word	0xaaaaaaab
 8018cfc:	0802b0b0 	.word	0x0802b0b0

08018d00 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8018d00:	b480      	push	{r7}
 8018d02:	b085      	sub	sp, #20
 8018d04:	af00      	add	r7, sp, #0
 8018d06:	6078      	str	r0, [r7, #4]
 8018d08:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8018d0a:	2300      	movs	r3, #0
 8018d0c:	60fb      	str	r3, [r7, #12]
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	2b02      	cmp	r3, #2
 8018d12:	d816      	bhi.n	8018d42 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 8018d14:	683a      	ldr	r2, [r7, #0]
 8018d16:	68fb      	ldr	r3, [r7, #12]
 8018d18:	4413      	add	r3, r2
 8018d1a:	7818      	ldrb	r0, [r3, #0]
 8018d1c:	68f9      	ldr	r1, [r7, #12]
 8018d1e:	4b0c      	ldr	r3, [pc, #48]	; (8018d50 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 8018d20:	fba3 2301 	umull	r2, r3, r3, r1
 8018d24:	085a      	lsrs	r2, r3, #1
 8018d26:	4613      	mov	r3, r2
 8018d28:	005b      	lsls	r3, r3, #1
 8018d2a:	4413      	add	r3, r2
 8018d2c:	1aca      	subs	r2, r1, r3
 8018d2e:	4b09      	ldr	r3, [pc, #36]	; (8018d54 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8018d30:	5c9b      	ldrb	r3, [r3, r2]
 8018d32:	4298      	cmp	r0, r3
 8018d34:	d001      	beq.n	8018d3a <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 8018d36:	2300      	movs	r3, #0
 8018d38:	e004      	b.n	8018d44 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8018d3a:	68fb      	ldr	r3, [r7, #12]
 8018d3c:	3301      	adds	r3, #1
 8018d3e:	60fb      	str	r3, [r7, #12]
 8018d40:	e7e5      	b.n	8018d0e <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 8018d42:	2301      	movs	r3, #1
}
 8018d44:	4618      	mov	r0, r3
 8018d46:	3714      	adds	r7, #20
 8018d48:	46bd      	mov	sp, r7
 8018d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d4e:	4770      	bx	lr
 8018d50:	aaaaaaab 	.word	0xaaaaaaab
 8018d54:	0802b0b0 	.word	0x0802b0b0

08018d58 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8018d58:	b580      	push	{r7, lr}
 8018d5a:	b084      	sub	sp, #16
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	60f8      	str	r0, [r7, #12]
 8018d60:	60b9      	str	r1, [r7, #8]
 8018d62:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8018d64:	68ba      	ldr	r2, [r7, #8]
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	429a      	cmp	r2, r3
 8018d6a:	d101      	bne.n	8018d70 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8018d6c:	2301      	movs	r3, #1
 8018d6e:	e013      	b.n	8018d98 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8018d70:	68fb      	ldr	r3, [r7, #12]
 8018d72:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8018d76:	781b      	ldrb	r3, [r3, #0]
 8018d78:	f083 0301 	eor.w	r3, r3, #1
 8018d7c:	b2db      	uxtb	r3, r3
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d001      	beq.n	8018d86 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8018d82:	2301      	movs	r3, #1
 8018d84:	e008      	b.n	8018d98 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	331c      	adds	r3, #28
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	68b9      	ldr	r1, [r7, #8]
 8018d90:	6878      	ldr	r0, [r7, #4]
 8018d92:	4798      	blx	r3
 8018d94:	4603      	mov	r3, r0
 8018d96:	bf00      	nop
}
 8018d98:	4618      	mov	r0, r3
 8018d9a:	3710      	adds	r7, #16
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	bd80      	pop	{r7, pc}

08018da0 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8018da0:	b590      	push	{r4, r7, lr}
 8018da2:	b087      	sub	sp, #28
 8018da4:	af02      	add	r7, sp, #8
 8018da6:	60f8      	str	r0, [r7, #12]
 8018da8:	60b9      	str	r1, [r7, #8]
 8018daa:	607a      	str	r2, [r7, #4]
 8018dac:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8018dae:	68bb      	ldr	r3, [r7, #8]
 8018db0:	695a      	ldr	r2, [r3, #20]
 8018db2:	68bb      	ldr	r3, [r7, #8]
 8018db4:	695b      	ldr	r3, [r3, #20]
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	3328      	adds	r3, #40	; 0x28
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	4610      	mov	r0, r2
 8018dbe:	4798      	blx	r3
 8018dc0:	4604      	mov	r4, r0
 8018dc2:	6a3b      	ldr	r3, [r7, #32]
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	3328      	adds	r3, #40	; 0x28
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	6a38      	ldr	r0, [r7, #32]
 8018dcc:	4798      	blx	r3
 8018dce:	4603      	mov	r3, r0
 8018dd0:	461a      	mov	r2, r3
 8018dd2:	4621      	mov	r1, r4
 8018dd4:	68f8      	ldr	r0, [r7, #12]
 8018dd6:	f7ff ffbf 	bl	8018d58 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8018dda:	4603      	mov	r3, r0
 8018ddc:	f083 0301 	eor.w	r3, r3, #1
 8018de0:	b2db      	uxtb	r3, r3
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d014      	beq.n	8018e10 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8018de6:	68fb      	ldr	r3, [r7, #12]
 8018de8:	f103 040c 	add.w	r4, r3, #12
 8018dec:	6a3b      	ldr	r3, [r7, #32]
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	3328      	adds	r3, #40	; 0x28
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	6a38      	ldr	r0, [r7, #32]
 8018df6:	4798      	blx	r3
 8018df8:	4602      	mov	r2, r0
 8018dfa:	68fb      	ldr	r3, [r7, #12]
 8018dfc:	685b      	ldr	r3, [r3, #4]
 8018dfe:	9301      	str	r3, [sp, #4]
 8018e00:	9200      	str	r2, [sp, #0]
 8018e02:	683b      	ldr	r3, [r7, #0]
 8018e04:	687a      	ldr	r2, [r7, #4]
 8018e06:	68b9      	ldr	r1, [r7, #8]
 8018e08:	4620      	mov	r0, r4
 8018e0a:	f7ff fb4d 	bl	80184a8 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8018e0e:	e02e      	b.n	8018e6e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8018e10:	68bb      	ldr	r3, [r7, #8]
 8018e12:	689a      	ldr	r2, [r3, #8]
 8018e14:	68bb      	ldr	r3, [r7, #8]
 8018e16:	681b      	ldr	r3, [r3, #0]
 8018e18:	4413      	add	r3, r2
 8018e1a:	4619      	mov	r1, r3
 8018e1c:	68f8      	ldr	r0, [r7, #12]
 8018e1e:	f7ff ff6f 	bl	8018d00 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 8018e22:	4603      	mov	r3, r0
 8018e24:	f083 0301 	eor.w	r3, r3, #1
 8018e28:	b2db      	uxtb	r3, r3
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d014      	beq.n	8018e58 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8018e2e:	68fb      	ldr	r3, [r7, #12]
 8018e30:	f103 040c 	add.w	r4, r3, #12
 8018e34:	6a3b      	ldr	r3, [r7, #32]
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	3328      	adds	r3, #40	; 0x28
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	6a38      	ldr	r0, [r7, #32]
 8018e3e:	4798      	blx	r3
 8018e40:	4602      	mov	r2, r0
 8018e42:	68fb      	ldr	r3, [r7, #12]
 8018e44:	685b      	ldr	r3, [r3, #4]
 8018e46:	9301      	str	r3, [sp, #4]
 8018e48:	9200      	str	r2, [sp, #0]
 8018e4a:	683b      	ldr	r3, [r7, #0]
 8018e4c:	687a      	ldr	r2, [r7, #4]
 8018e4e:	68b9      	ldr	r1, [r7, #8]
 8018e50:	4620      	mov	r0, r4
 8018e52:	f7ff fb4f 	bl	80184f4 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 8018e56:	e00a      	b.n	8018e6e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8018e58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d006      	beq.n	8018e6e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8018e60:	6a3b      	ldr	r3, [r7, #32]
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	3324      	adds	r3, #36	; 0x24
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	68b9      	ldr	r1, [r7, #8]
 8018e6a:	6a38      	ldr	r0, [r7, #32]
 8018e6c:	4798      	blx	r3
}
 8018e6e:	bf00      	nop
 8018e70:	3714      	adds	r7, #20
 8018e72:	46bd      	mov	sp, r7
 8018e74:	bd90      	pop	{r4, r7, pc}
	...

08018e78 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8018e78:	b580      	push	{r7, lr}
 8018e7a:	b086      	sub	sp, #24
 8018e7c:	af02      	add	r7, sp, #8
 8018e7e:	60f8      	str	r0, [r7, #12]
 8018e80:	60b9      	str	r1, [r7, #8]
 8018e82:	607a      	str	r2, [r7, #4]
 8018e84:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 8018e86:	4b08      	ldr	r3, [pc, #32]	; (8018ea8 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8018e88:	681a      	ldr	r2, [r3, #0]
 8018e8a:	78fb      	ldrb	r3, [r7, #3]
 8018e8c:	9301      	str	r3, [sp, #4]
 8018e8e:	2300      	movs	r3, #0
 8018e90:	9300      	str	r3, [sp, #0]
 8018e92:	4613      	mov	r3, r2
 8018e94:	687a      	ldr	r2, [r7, #4]
 8018e96:	68b9      	ldr	r1, [r7, #8]
 8018e98:	68f8      	ldr	r0, [r7, #12]
 8018e9a:	f000 f87f 	bl	8018f9c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8018e9e:	4603      	mov	r3, r0
}
 8018ea0:	4618      	mov	r0, r3
 8018ea2:	3710      	adds	r7, #16
 8018ea4:	46bd      	mov	sp, r7
 8018ea6:	bd80      	pop	{r7, pc}
 8018ea8:	20000100 	.word	0x20000100

08018eac <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8018eac:	b590      	push	{r4, r7, lr}
 8018eae:	b085      	sub	sp, #20
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	60f8      	str	r0, [r7, #12]
 8018eb4:	60b9      	str	r1, [r7, #8]
 8018eb6:	607a      	str	r2, [r7, #4]
 8018eb8:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8018eba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d00e      	beq.n	8018ee0 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8018ec2:	68bb      	ldr	r3, [r7, #8]
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	3308      	adds	r3, #8
 8018ec8:	681c      	ldr	r4, [r3, #0]
 8018eca:	6879      	ldr	r1, [r7, #4]
 8018ecc:	68f8      	ldr	r0, [r7, #12]
 8018ece:	f7ff fe3f 	bl	8018b50 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8018ed2:	4601      	mov	r1, r0
 8018ed4:	6a3b      	ldr	r3, [r7, #32]
 8018ed6:	683a      	ldr	r2, [r7, #0]
 8018ed8:	68b8      	ldr	r0, [r7, #8]
 8018eda:	47a0      	blx	r4
 8018edc:	4603      	mov	r3, r0
 8018ede:	e010      	b.n	8018f02 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8018ee0:	68bb      	ldr	r3, [r7, #8]
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	3308      	adds	r3, #8
 8018ee6:	681c      	ldr	r4, [r3, #0]
 8018ee8:	6879      	ldr	r1, [r7, #4]
 8018eea:	68f8      	ldr	r0, [r7, #12]
 8018eec:	f7ff fe30 	bl	8018b50 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8018ef0:	4603      	mov	r3, r0
 8018ef2:	f103 0120 	add.w	r1, r3, #32
 8018ef6:	6a3b      	ldr	r3, [r7, #32]
 8018ef8:	683a      	ldr	r2, [r7, #0]
 8018efa:	68b8      	ldr	r0, [r7, #8]
 8018efc:	47a0      	blx	r4
 8018efe:	4603      	mov	r3, r0
 8018f00:	bf00      	nop
}
 8018f02:	4618      	mov	r0, r3
 8018f04:	3714      	adds	r7, #20
 8018f06:	46bd      	mov	sp, r7
 8018f08:	bd90      	pop	{r4, r7, pc}
	...

08018f0c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8018f0c:	b590      	push	{r4, r7, lr}
 8018f0e:	b085      	sub	sp, #20
 8018f10:	af00      	add	r7, sp, #0
 8018f12:	60f8      	str	r0, [r7, #12]
 8018f14:	60b9      	str	r1, [r7, #8]
 8018f16:	607a      	str	r2, [r7, #4]
 8018f18:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 8018f1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d00b      	beq.n	8018f3a <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 8018f22:	4b0e      	ldr	r3, [pc, #56]	; (8018f5c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8018f24:	681c      	ldr	r4, [r3, #0]
 8018f26:	6839      	ldr	r1, [r7, #0]
 8018f28:	68f8      	ldr	r0, [r7, #12]
 8018f2a:	f7ff fe11 	bl	8018b50 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8018f2e:	4603      	mov	r3, r0
 8018f30:	4619      	mov	r1, r3
 8018f32:	6878      	ldr	r0, [r7, #4]
 8018f34:	47a0      	blx	r4
 8018f36:	4603      	mov	r3, r0
 8018f38:	e00c      	b.n	8018f54 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 8018f3a:	4b08      	ldr	r3, [pc, #32]	; (8018f5c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8018f3c:	681c      	ldr	r4, [r3, #0]
 8018f3e:	6839      	ldr	r1, [r7, #0]
 8018f40:	68f8      	ldr	r0, [r7, #12]
 8018f42:	f7ff fe05 	bl	8018b50 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8018f46:	4603      	mov	r3, r0
 8018f48:	3320      	adds	r3, #32
 8018f4a:	4619      	mov	r1, r3
 8018f4c:	6878      	ldr	r0, [r7, #4]
 8018f4e:	47a0      	blx	r4
 8018f50:	4603      	mov	r3, r0
 8018f52:	bf00      	nop
}
 8018f54:	4618      	mov	r0, r3
 8018f56:	3714      	adds	r7, #20
 8018f58:	46bd      	mov	sp, r7
 8018f5a:	bd90      	pop	{r4, r7, pc}
 8018f5c:	200000cc 	.word	0x200000cc

08018f60 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8018f60:	b580      	push	{r7, lr}
 8018f62:	b084      	sub	sp, #16
 8018f64:	af00      	add	r7, sp, #0
 8018f66:	60f8      	str	r0, [r7, #12]
 8018f68:	60b9      	str	r1, [r7, #8]
 8018f6a:	607a      	str	r2, [r7, #4]
 8018f6c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8018f6e:	7e3b      	ldrb	r3, [r7, #24]
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d008      	beq.n	8018f86 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8018f74:	68bb      	ldr	r3, [r7, #8]
 8018f76:	681b      	ldr	r3, [r3, #0]
 8018f78:	3320      	adds	r3, #32
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	2120      	movs	r1, #32
 8018f7e:	68b8      	ldr	r0, [r7, #8]
 8018f80:	4798      	blx	r3
 8018f82:	4603      	mov	r3, r0
 8018f84:	e006      	b.n	8018f94 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 8018f86:	687a      	ldr	r2, [r7, #4]
 8018f88:	6839      	ldr	r1, [r7, #0]
 8018f8a:	68f8      	ldr	r0, [r7, #12]
 8018f8c:	f7ff fdef 	bl	8018b6e <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8018f90:	4603      	mov	r3, r0
 8018f92:	bf00      	nop
}
 8018f94:	4618      	mov	r0, r3
 8018f96:	3710      	adds	r7, #16
 8018f98:	46bd      	mov	sp, r7
 8018f9a:	bd80      	pop	{r7, pc}

08018f9c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8018f9c:	b580      	push	{r7, lr}
 8018f9e:	b08a      	sub	sp, #40	; 0x28
 8018fa0:	af04      	add	r7, sp, #16
 8018fa2:	60f8      	str	r0, [r7, #12]
 8018fa4:	60b9      	str	r1, [r7, #8]
 8018fa6:	607a      	str	r2, [r7, #4]
 8018fa8:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8018faa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018fae:	9301      	str	r3, [sp, #4]
 8018fb0:	6a3b      	ldr	r3, [r7, #32]
 8018fb2:	9300      	str	r3, [sp, #0]
 8018fb4:	683b      	ldr	r3, [r7, #0]
 8018fb6:	687a      	ldr	r2, [r7, #4]
 8018fb8:	68b9      	ldr	r1, [r7, #8]
 8018fba:	68f8      	ldr	r0, [r7, #12]
 8018fbc:	f7ff ff76 	bl	8018eac <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8018fc0:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8018fc2:	697b      	ldr	r3, [r7, #20]
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d101      	bne.n	8018fcc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8018fc8:	2300      	movs	r3, #0
 8018fca:	e017      	b.n	8018ffc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8018fcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018fd0:	9300      	str	r3, [sp, #0]
 8018fd2:	697b      	ldr	r3, [r7, #20]
 8018fd4:	687a      	ldr	r2, [r7, #4]
 8018fd6:	68b9      	ldr	r1, [r7, #8]
 8018fd8:	68f8      	ldr	r0, [r7, #12]
 8018fda:	f7ff ffc1 	bl	8018f60 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8018fde:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 8018fe0:	6a3b      	ldr	r3, [r7, #32]
 8018fe2:	9302      	str	r3, [sp, #8]
 8018fe4:	683b      	ldr	r3, [r7, #0]
 8018fe6:	9301      	str	r3, [sp, #4]
 8018fe8:	68bb      	ldr	r3, [r7, #8]
 8018fea:	9300      	str	r3, [sp, #0]
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	697a      	ldr	r2, [r7, #20]
 8018ff0:	6939      	ldr	r1, [r7, #16]
 8018ff2:	68f8      	ldr	r0, [r7, #12]
 8018ff4:	f7ff fdcc 	bl	8018b90 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8018ff8:	693b      	ldr	r3, [r7, #16]
 8018ffa:	689b      	ldr	r3, [r3, #8]
}
 8018ffc:	4618      	mov	r0, r3
 8018ffe:	3718      	adds	r7, #24
 8019000:	46bd      	mov	sp, r7
 8019002:	bd80      	pop	{r7, pc}

08019004 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 8019004:	b590      	push	{r4, r7, lr}
 8019006:	b089      	sub	sp, #36	; 0x24
 8019008:	af02      	add	r7, sp, #8
 801900a:	60f8      	str	r0, [r7, #12]
 801900c:	60b9      	str	r1, [r7, #8]
 801900e:	607a      	str	r2, [r7, #4]
 8019010:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	2b00      	cmp	r3, #0
 8019016:	d03a      	beq.n	801908e <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801901e:	331c      	adds	r3, #28
 8019020:	6879      	ldr	r1, [r7, #4]
 8019022:	4618      	mov	r0, r3
 8019024:	f7ff fc13 	bl	801884e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8019028:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 801902a:	697b      	ldr	r3, [r7, #20]
 801902c:	2b00      	cmp	r3, #0
 801902e:	d10b      	bne.n	8019048 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8019030:	68fb      	ldr	r3, [r7, #12]
 8019032:	f103 000c 	add.w	r0, r3, #12
 8019036:	68fb      	ldr	r3, [r7, #12]
 8019038:	685b      	ldr	r3, [r3, #4]
 801903a:	9300      	str	r3, [sp, #0]
 801903c:	68bb      	ldr	r3, [r7, #8]
 801903e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019040:	6839      	ldr	r1, [r7, #0]
 8019042:	f7ff fa0d 	bl	8018460 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 8019046:	e023      	b.n	8019090 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8019048:	68b8      	ldr	r0, [r7, #8]
 801904a:	f7f8 ff95 	bl	8011f78 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 801904e:	4603      	mov	r3, r0
 8019050:	f083 0301 	eor.w	r3, r3, #1
 8019054:	b2db      	uxtb	r3, r3
 8019056:	2b00      	cmp	r3, #0
 8019058:	d01a      	beq.n	8019090 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 801905a:	697b      	ldr	r3, [r7, #20]
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8019060:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019064:	9301      	str	r3, [sp, #4]
 8019066:	68bb      	ldr	r3, [r7, #8]
 8019068:	9300      	str	r3, [sp, #0]
 801906a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801906c:	683a      	ldr	r2, [r7, #0]
 801906e:	6979      	ldr	r1, [r7, #20]
 8019070:	68f8      	ldr	r0, [r7, #12]
 8019072:	f7ff fe95 	bl	8018da0 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8019076:	68bb      	ldr	r3, [r7, #8]
 8019078:	681b      	ldr	r3, [r3, #0]
 801907a:	330c      	adds	r3, #12
 801907c:	681c      	ldr	r4, [r3, #0]
 801907e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019080:	9300      	str	r3, [sp, #0]
 8019082:	683b      	ldr	r3, [r7, #0]
 8019084:	693a      	ldr	r2, [r7, #16]
 8019086:	6879      	ldr	r1, [r7, #4]
 8019088:	68b8      	ldr	r0, [r7, #8]
 801908a:	47a0      	blx	r4
 801908c:	e000      	b.n	8019090 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 801908e:	bf00      	nop
    }
}
 8019090:	371c      	adds	r7, #28
 8019092:	46bd      	mov	sp, r7
 8019094:	bd90      	pop	{r4, r7, pc}
	...

08019098 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8019098:	b580      	push	{r7, lr}
 801909a:	b086      	sub	sp, #24
 801909c:	af02      	add	r7, sp, #8
 801909e:	60f8      	str	r0, [r7, #12]
 80190a0:	60b9      	str	r1, [r7, #8]
 80190a2:	607a      	str	r2, [r7, #4]
 80190a4:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 80190a6:	4b08      	ldr	r3, [pc, #32]	; (80190c8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 80190a8:	681a      	ldr	r2, [r3, #0]
 80190aa:	78fb      	ldrb	r3, [r7, #3]
 80190ac:	9301      	str	r3, [sp, #4]
 80190ae:	2300      	movs	r3, #0
 80190b0:	9300      	str	r3, [sp, #0]
 80190b2:	4613      	mov	r3, r2
 80190b4:	687a      	ldr	r2, [r7, #4]
 80190b6:	68b9      	ldr	r1, [r7, #8]
 80190b8:	68f8      	ldr	r0, [r7, #12]
 80190ba:	f7ff ffa3 	bl	8019004 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 80190be:	bf00      	nop
 80190c0:	3710      	adds	r7, #16
 80190c2:	46bd      	mov	sp, r7
 80190c4:	bd80      	pop	{r7, pc}
 80190c6:	bf00      	nop
 80190c8:	20000100 	.word	0x20000100

080190cc <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	b08a      	sub	sp, #40	; 0x28
 80190d0:	af04      	add	r7, sp, #16
 80190d2:	60f8      	str	r0, [r7, #12]
 80190d4:	60b9      	str	r1, [r7, #8]
 80190d6:	607a      	str	r2, [r7, #4]
 80190d8:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d023      	beq.n	8019128 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80190e6:	331c      	adds	r3, #28
 80190e8:	6879      	ldr	r1, [r7, #4]
 80190ea:	4618      	mov	r0, r3
 80190ec:	f7ff fbaf 	bl	801884e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 80190f0:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 80190f2:	697b      	ldr	r3, [r7, #20]
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d10c      	bne.n	8019112 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	f103 000c 	add.w	r0, r3, #12
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	685b      	ldr	r3, [r3, #4]
 8019102:	9300      	str	r3, [sp, #0]
 8019104:	68bb      	ldr	r3, [r7, #8]
 8019106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019108:	6a39      	ldr	r1, [r7, #32]
 801910a:	f7ff f9a9 	bl	8018460 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 801910e:	2300      	movs	r3, #0
 8019110:	e019      	b.n	8019146 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8019112:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019116:	9301      	str	r3, [sp, #4]
 8019118:	68bb      	ldr	r3, [r7, #8]
 801911a:	9300      	str	r3, [sp, #0]
 801911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801911e:	6a3a      	ldr	r2, [r7, #32]
 8019120:	6979      	ldr	r1, [r7, #20]
 8019122:	68f8      	ldr	r0, [r7, #12]
 8019124:	f7ff fe3c 	bl	8018da0 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8019128:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801912c:	9302      	str	r3, [sp, #8]
 801912e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019130:	9301      	str	r3, [sp, #4]
 8019132:	6a3b      	ldr	r3, [r7, #32]
 8019134:	9300      	str	r3, [sp, #0]
 8019136:	683b      	ldr	r3, [r7, #0]
 8019138:	687a      	ldr	r2, [r7, #4]
 801913a:	68b9      	ldr	r1, [r7, #8]
 801913c:	68f8      	ldr	r0, [r7, #12]
 801913e:	f7ff fd62 	bl	8018c06 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8019142:	4603      	mov	r3, r0
 8019144:	bf00      	nop
}
 8019146:	4618      	mov	r0, r3
 8019148:	3718      	adds	r7, #24
 801914a:	46bd      	mov	sp, r7
 801914c:	bd80      	pop	{r7, pc}

0801914e <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 801914e:	b580      	push	{r7, lr}
 8019150:	b084      	sub	sp, #16
 8019152:	af00      	add	r7, sp, #0
 8019154:	6078      	str	r0, [r7, #4]
 8019156:	460b      	mov	r3, r1
 8019158:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019160:	331c      	adds	r3, #28
 8019162:	78fa      	ldrb	r2, [r7, #3]
 8019164:	4611      	mov	r1, r2
 8019166:	4618      	mov	r0, r3
 8019168:	f7ff fbc0 	bl	80188ec <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 801916c:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	330c      	adds	r3, #12
 8019172:	4618      	mov	r0, r3
 8019174:	f7ff f882 	bl	801827c <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d010      	beq.n	80191a0 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	330c      	adds	r3, #12
 8019182:	68f9      	ldr	r1, [r7, #12]
 8019184:	4618      	mov	r0, r3
 8019186:	f7ff f897 	bl	80182b8 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019190:	331c      	adds	r3, #28
 8019192:	78fa      	ldrb	r2, [r7, #3]
 8019194:	68f9      	ldr	r1, [r7, #12]
 8019196:	4618      	mov	r0, r3
 8019198:	f7ff fbcb 	bl	8018932 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801919c:	60f8      	str	r0, [r7, #12]
    while (leak) {
 801919e:	e7eb      	b.n	8019178 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	330c      	adds	r3, #12
 80191a4:	4618      	mov	r0, r3
 80191a6:	f7ff f8e7 	bl	8018378 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 80191aa:	bf00      	nop
 80191ac:	3710      	adds	r7, #16
 80191ae:	46bd      	mov	sp, r7
 80191b0:	bd80      	pop	{r7, pc}

080191b2 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 80191b2:	b580      	push	{r7, lr}
 80191b4:	b082      	sub	sp, #8
 80191b6:	af00      	add	r7, sp, #0
 80191b8:	6078      	str	r0, [r7, #4]
 80191ba:	460b      	mov	r3, r1
 80191bc:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 80191be:	78fb      	ldrb	r3, [r7, #3]
 80191c0:	4619      	mov	r1, r3
 80191c2:	6878      	ldr	r0, [r7, #4]
 80191c4:	f7ff ffc3 	bl	801914e <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	330c      	adds	r3, #12
 80191cc:	4618      	mov	r0, r3
 80191ce:	f7ff f9e5 	bl	801859c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 80191d2:	4603      	mov	r3, r0
}
 80191d4:	4618      	mov	r0, r3
 80191d6:	3708      	adds	r7, #8
 80191d8:	46bd      	mov	sp, r7
 80191da:	bd80      	pop	{r7, pc}

080191dc <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b084      	sub	sp, #16
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80191ea:	331c      	adds	r3, #28
 80191ec:	2103      	movs	r1, #3
 80191ee:	4618      	mov	r0, r3
 80191f0:	f7ff fb7c 	bl	80188ec <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 80191f4:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80191f6:	68fb      	ldr	r3, [r7, #12]
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d011      	beq.n	8019220 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	7e1b      	ldrb	r3, [r3, #24]
 8019200:	2b03      	cmp	r3, #3
 8019202:	d102      	bne.n	801920a <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	2202      	movs	r2, #2
 8019208:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019210:	331c      	adds	r3, #28
 8019212:	2203      	movs	r2, #3
 8019214:	68f9      	ldr	r1, [r7, #12]
 8019216:	4618      	mov	r0, r3
 8019218:	f7ff fb8b 	bl	8018932 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801921c:	60f8      	str	r0, [r7, #12]
    while (leak) {
 801921e:	e7ea      	b.n	80191f6 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 8019220:	bf00      	nop
 8019222:	3710      	adds	r7, #16
 8019224:	46bd      	mov	sp, r7
 8019226:	bd80      	pop	{r7, pc}

08019228 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 8019228:	b580      	push	{r7, lr}
 801922a:	b082      	sub	sp, #8
 801922c:	af00      	add	r7, sp, #0
 801922e:	6078      	str	r0, [r7, #4]
 8019230:	460b      	mov	r3, r1
 8019232:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801923a:	331c      	adds	r3, #28
 801923c:	78fa      	ldrb	r2, [r7, #3]
 801923e:	4611      	mov	r1, r2
 8019240:	4618      	mov	r0, r3
 8019242:	f7ff fb30 	bl	80188a6 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 8019246:	4603      	mov	r3, r0
}
 8019248:	4618      	mov	r0, r3
 801924a:	3708      	adds	r7, #8
 801924c:	46bd      	mov	sp, r7
 801924e:	bd80      	pop	{r7, pc}

08019250 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 8019250:	b580      	push	{r7, lr}
 8019252:	b084      	sub	sp, #16
 8019254:	af00      	add	r7, sp, #0
 8019256:	60f8      	str	r0, [r7, #12]
 8019258:	60b9      	str	r1, [r7, #8]
 801925a:	607a      	str	r2, [r7, #4]
 801925c:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	68b9      	ldr	r1, [r7, #8]
 8019262:	4618      	mov	r0, r3
 8019264:	f7f5 fb13 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
 8019268:	68fb      	ldr	r3, [r7, #12]
 801926a:	3308      	adds	r3, #8
 801926c:	6879      	ldr	r1, [r7, #4]
 801926e:	4618      	mov	r0, r3
 8019270:	f7f5 fb0d 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	683a      	ldr	r2, [r7, #0]
 8019278:	611a      	str	r2, [r3, #16]
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	2200      	movs	r2, #0
 801927e:	615a      	str	r2, [r3, #20]
 8019280:	68fb      	ldr	r3, [r7, #12]
 8019282:	4618      	mov	r0, r3
 8019284:	3710      	adds	r7, #16
 8019286:	46bd      	mov	sp, r7
 8019288:	bd80      	pop	{r7, pc}

0801928a <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 801928a:	b480      	push	{r7}
 801928c:	b083      	sub	sp, #12
 801928e:	af00      	add	r7, sp, #0
 8019290:	6078      	str	r0, [r7, #4]
 8019292:	6039      	str	r1, [r7, #0]
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	4618      	mov	r0, r3
 8019298:	370c      	adds	r7, #12
 801929a:	46bd      	mov	sp, r7
 801929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192a0:	4770      	bx	lr

080192a2 <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 80192a2:	b480      	push	{r7}
 80192a4:	b083      	sub	sp, #12
 80192a6:	af00      	add	r7, sp, #0
 80192a8:	6078      	str	r0, [r7, #4]
 80192aa:	6039      	str	r1, [r7, #0]
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	4618      	mov	r0, r3
 80192b0:	370c      	adds	r7, #12
 80192b2:	46bd      	mov	sp, r7
 80192b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192b8:	4770      	bx	lr

080192ba <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 80192ba:	b480      	push	{r7}
 80192bc:	b085      	sub	sp, #20
 80192be:	af00      	add	r7, sp, #0
 80192c0:	60f8      	str	r0, [r7, #12]
 80192c2:	60b9      	str	r1, [r7, #8]
 80192c4:	4613      	mov	r3, r2
 80192c6:	71fb      	strb	r3, [r7, #7]
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	4618      	mov	r0, r3
 80192cc:	3714      	adds	r7, #20
 80192ce:	46bd      	mov	sp, r7
 80192d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192d4:	4770      	bx	lr

080192d6 <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 80192d6:	b480      	push	{r7}
 80192d8:	b085      	sub	sp, #20
 80192da:	af00      	add	r7, sp, #0
 80192dc:	60f8      	str	r0, [r7, #12]
 80192de:	60b9      	str	r1, [r7, #8]
 80192e0:	607a      	str	r2, [r7, #4]
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	4618      	mov	r0, r3
 80192e6:	3714      	adds	r7, #20
 80192e8:	46bd      	mov	sp, r7
 80192ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ee:	4770      	bx	lr

080192f0 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 80192f0:	b480      	push	{r7}
 80192f2:	b085      	sub	sp, #20
 80192f4:	af00      	add	r7, sp, #0
 80192f6:	60f8      	str	r0, [r7, #12]
 80192f8:	60b9      	str	r1, [r7, #8]
 80192fa:	607a      	str	r2, [r7, #4]
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	4618      	mov	r0, r3
 8019300:	3714      	adds	r7, #20
 8019302:	46bd      	mov	sp, r7
 8019304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019308:	4770      	bx	lr

0801930a <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 801930a:	b480      	push	{r7}
 801930c:	b085      	sub	sp, #20
 801930e:	af00      	add	r7, sp, #0
 8019310:	60f8      	str	r0, [r7, #12]
 8019312:	60b9      	str	r1, [r7, #8]
 8019314:	607a      	str	r2, [r7, #4]
 8019316:	68fb      	ldr	r3, [r7, #12]
 8019318:	4618      	mov	r0, r3
 801931a:	3714      	adds	r7, #20
 801931c:	46bd      	mov	sp, r7
 801931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019322:	4770      	bx	lr

08019324 <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8019324:	b480      	push	{r7}
 8019326:	b085      	sub	sp, #20
 8019328:	af00      	add	r7, sp, #0
 801932a:	60f8      	str	r0, [r7, #12]
 801932c:	60b9      	str	r1, [r7, #8]
 801932e:	607a      	str	r2, [r7, #4]
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	4618      	mov	r0, r3
 8019334:	3714      	adds	r7, #20
 8019336:	46bd      	mov	sp, r7
 8019338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801933c:	4770      	bx	lr

0801933e <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 801933e:	b480      	push	{r7}
 8019340:	b085      	sub	sp, #20
 8019342:	af00      	add	r7, sp, #0
 8019344:	60f8      	str	r0, [r7, #12]
 8019346:	60b9      	str	r1, [r7, #8]
 8019348:	4639      	mov	r1, r7
 801934a:	e881 000c 	stmia.w	r1, {r2, r3}
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	4618      	mov	r0, r3
 8019352:	3714      	adds	r7, #20
 8019354:	46bd      	mov	sp, r7
 8019356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801935a:	4770      	bx	lr

0801935c <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 801935c:	b480      	push	{r7}
 801935e:	b085      	sub	sp, #20
 8019360:	af00      	add	r7, sp, #0
 8019362:	60f8      	str	r0, [r7, #12]
 8019364:	60b9      	str	r1, [r7, #8]
 8019366:	4639      	mov	r1, r7
 8019368:	e881 000c 	stmia.w	r1, {r2, r3}
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	4618      	mov	r0, r3
 8019370:	3714      	adds	r7, #20
 8019372:	46bd      	mov	sp, r7
 8019374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019378:	4770      	bx	lr

0801937a <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 801937a:	b480      	push	{r7}
 801937c:	b085      	sub	sp, #20
 801937e:	af00      	add	r7, sp, #0
 8019380:	60f8      	str	r0, [r7, #12]
 8019382:	60b9      	str	r1, [r7, #8]
 8019384:	ed87 0b00 	vstr	d0, [r7]
 8019388:	68fb      	ldr	r3, [r7, #12]
 801938a:	4618      	mov	r0, r3
 801938c:	3714      	adds	r7, #20
 801938e:	46bd      	mov	sp, r7
 8019390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019394:	4770      	bx	lr

08019396 <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8019396:	b480      	push	{r7}
 8019398:	b085      	sub	sp, #20
 801939a:	af00      	add	r7, sp, #0
 801939c:	60f8      	str	r0, [r7, #12]
 801939e:	60b9      	str	r1, [r7, #8]
 80193a0:	607a      	str	r2, [r7, #4]
 80193a2:	68fb      	ldr	r3, [r7, #12]
 80193a4:	4618      	mov	r0, r3
 80193a6:	3714      	adds	r7, #20
 80193a8:	46bd      	mov	sp, r7
 80193aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ae:	4770      	bx	lr

080193b0 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 80193b0:	b480      	push	{r7}
 80193b2:	b085      	sub	sp, #20
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	60f8      	str	r0, [r7, #12]
 80193b8:	60b9      	str	r1, [r7, #8]
 80193ba:	607a      	str	r2, [r7, #4]
 80193bc:	68fb      	ldr	r3, [r7, #12]
 80193be:	4618      	mov	r0, r3
 80193c0:	3714      	adds	r7, #20
 80193c2:	46bd      	mov	sp, r7
 80193c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193c8:	4770      	bx	lr

080193ca <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 80193ca:	b480      	push	{r7}
 80193cc:	b085      	sub	sp, #20
 80193ce:	af00      	add	r7, sp, #0
 80193d0:	60f8      	str	r0, [r7, #12]
 80193d2:	60b9      	str	r1, [r7, #8]
 80193d4:	607a      	str	r2, [r7, #4]
 80193d6:	68fb      	ldr	r3, [r7, #12]
 80193d8:	4618      	mov	r0, r3
 80193da:	3714      	adds	r7, #20
 80193dc:	46bd      	mov	sp, r7
 80193de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193e2:	4770      	bx	lr

080193e4 <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 80193e4:	b480      	push	{r7}
 80193e6:	b085      	sub	sp, #20
 80193e8:	af00      	add	r7, sp, #0
 80193ea:	60f8      	str	r0, [r7, #12]
 80193ec:	60b9      	str	r1, [r7, #8]
 80193ee:	607a      	str	r2, [r7, #4]
 80193f0:	68fb      	ldr	r3, [r7, #12]
 80193f2:	4618      	mov	r0, r3
 80193f4:	3714      	adds	r7, #20
 80193f6:	46bd      	mov	sp, r7
 80193f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193fc:	4770      	bx	lr

080193fe <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 80193fe:	b480      	push	{r7}
 8019400:	b085      	sub	sp, #20
 8019402:	af00      	add	r7, sp, #0
 8019404:	60f8      	str	r0, [r7, #12]
 8019406:	60b9      	str	r1, [r7, #8]
 8019408:	607a      	str	r2, [r7, #4]
 801940a:	603b      	str	r3, [r7, #0]
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	4618      	mov	r0, r3
 8019410:	3714      	adds	r7, #20
 8019412:	46bd      	mov	sp, r7
 8019414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019418:	4770      	bx	lr

0801941a <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801941a:	b480      	push	{r7}
 801941c:	b085      	sub	sp, #20
 801941e:	af00      	add	r7, sp, #0
 8019420:	60f8      	str	r0, [r7, #12]
 8019422:	60b9      	str	r1, [r7, #8]
 8019424:	607a      	str	r2, [r7, #4]
 8019426:	603b      	str	r3, [r7, #0]
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	4618      	mov	r0, r3
 801942c:	3714      	adds	r7, #20
 801942e:	46bd      	mov	sp, r7
 8019430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019434:	4770      	bx	lr

08019436 <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 8019436:	b480      	push	{r7}
 8019438:	b085      	sub	sp, #20
 801943a:	af00      	add	r7, sp, #0
 801943c:	60f8      	str	r0, [r7, #12]
 801943e:	60b9      	str	r1, [r7, #8]
 8019440:	607a      	str	r2, [r7, #4]
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	4618      	mov	r0, r3
 8019446:	3714      	adds	r7, #20
 8019448:	46bd      	mov	sp, r7
 801944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801944e:	4770      	bx	lr

08019450 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 8019450:	b480      	push	{r7}
 8019452:	b085      	sub	sp, #20
 8019454:	af00      	add	r7, sp, #0
 8019456:	60f8      	str	r0, [r7, #12]
 8019458:	60b9      	str	r1, [r7, #8]
 801945a:	607a      	str	r2, [r7, #4]
 801945c:	603b      	str	r3, [r7, #0]
 801945e:	68fb      	ldr	r3, [r7, #12]
 8019460:	4618      	mov	r0, r3
 8019462:	3714      	adds	r7, #20
 8019464:	46bd      	mov	sp, r7
 8019466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801946a:	4770      	bx	lr

0801946c <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 801946c:	b480      	push	{r7}
 801946e:	b083      	sub	sp, #12
 8019470:	af00      	add	r7, sp, #0
 8019472:	6078      	str	r0, [r7, #4]
 8019474:	2300      	movs	r3, #0
 8019476:	4618      	mov	r0, r3
 8019478:	370c      	adds	r7, #12
 801947a:	46bd      	mov	sp, r7
 801947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019480:	4770      	bx	lr
	...

08019484 <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 8019484:	b580      	push	{r7, lr}
 8019486:	b084      	sub	sp, #16
 8019488:	af00      	add	r7, sp, #0
 801948a:	6078      	str	r0, [r7, #4]
 801948c:	6039      	str	r1, [r7, #0]
 801948e:	f107 0308 	add.w	r3, r7, #8
 8019492:	4909      	ldr	r1, [pc, #36]	; (80194b8 <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 8019494:	4618      	mov	r0, r3
 8019496:	f7f5 f9a6 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801949a:	f107 0308 	add.w	r3, r7, #8
 801949e:	4619      	mov	r1, r3
 80194a0:	6878      	ldr	r0, [r7, #4]
 80194a2:	f005 fec5 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
 80194a6:	f107 0308 	add.w	r3, r7, #8
 80194aa:	4618      	mov	r0, r3
 80194ac:	f7f5 fd53 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80194b0:	6878      	ldr	r0, [r7, #4]
 80194b2:	3710      	adds	r7, #16
 80194b4:	46bd      	mov	sp, r7
 80194b6:	bd80      	pop	{r7, pc}
 80194b8:	0802815c 	.word	0x0802815c

080194bc <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 80194bc:	b480      	push	{r7}
 80194be:	b083      	sub	sp, #12
 80194c0:	af00      	add	r7, sp, #0
 80194c2:	6078      	str	r0, [r7, #4]
 80194c4:	460b      	mov	r3, r1
 80194c6:	70fb      	strb	r3, [r7, #3]
 80194c8:	78fb      	ldrb	r3, [r7, #3]
 80194ca:	4618      	mov	r0, r3
 80194cc:	370c      	adds	r7, #12
 80194ce:	46bd      	mov	sp, r7
 80194d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194d4:	4770      	bx	lr

080194d6 <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 80194d6:	b480      	push	{r7}
 80194d8:	b083      	sub	sp, #12
 80194da:	af00      	add	r7, sp, #0
 80194dc:	6078      	str	r0, [r7, #4]
 80194de:	2300      	movs	r3, #0
 80194e0:	4618      	mov	r0, r3
 80194e2:	370c      	adds	r7, #12
 80194e4:	46bd      	mov	sp, r7
 80194e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ea:	4770      	bx	lr

080194ec <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 80194ec:	b480      	push	{r7}
 80194ee:	b083      	sub	sp, #12
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	6078      	str	r0, [r7, #4]
 80194f4:	2300      	movs	r3, #0
 80194f6:	4618      	mov	r0, r3
 80194f8:	370c      	adds	r7, #12
 80194fa:	46bd      	mov	sp, r7
 80194fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019500:	4770      	bx	lr

08019502 <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 8019502:	b480      	push	{r7}
 8019504:	b083      	sub	sp, #12
 8019506:	af00      	add	r7, sp, #0
 8019508:	6078      	str	r0, [r7, #4]
 801950a:	6039      	str	r1, [r7, #0]
 801950c:	683b      	ldr	r3, [r7, #0]
 801950e:	4618      	mov	r0, r3
 8019510:	370c      	adds	r7, #12
 8019512:	46bd      	mov	sp, r7
 8019514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019518:	4770      	bx	lr

0801951a <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 801951a:	b480      	push	{r7}
 801951c:	b083      	sub	sp, #12
 801951e:	af00      	add	r7, sp, #0
 8019520:	6078      	str	r0, [r7, #4]
 8019522:	2300      	movs	r3, #0
 8019524:	4618      	mov	r0, r3
 8019526:	370c      	adds	r7, #12
 8019528:	46bd      	mov	sp, r7
 801952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801952e:	4770      	bx	lr

08019530 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 8019530:	b480      	push	{r7}
 8019532:	b083      	sub	sp, #12
 8019534:	af00      	add	r7, sp, #0
 8019536:	6078      	str	r0, [r7, #4]
 8019538:	6039      	str	r1, [r7, #0]
 801953a:	683b      	ldr	r3, [r7, #0]
 801953c:	4618      	mov	r0, r3
 801953e:	370c      	adds	r7, #12
 8019540:	46bd      	mov	sp, r7
 8019542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019546:	4770      	bx	lr

08019548 <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 8019548:	b480      	push	{r7}
 801954a:	b083      	sub	sp, #12
 801954c:	af00      	add	r7, sp, #0
 801954e:	6078      	str	r0, [r7, #4]
 8019550:	2300      	movs	r3, #0
 8019552:	4618      	mov	r0, r3
 8019554:	370c      	adds	r7, #12
 8019556:	46bd      	mov	sp, r7
 8019558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801955c:	4770      	bx	lr

0801955e <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 801955e:	b480      	push	{r7}
 8019560:	b083      	sub	sp, #12
 8019562:	af00      	add	r7, sp, #0
 8019564:	6078      	str	r0, [r7, #4]
 8019566:	6039      	str	r1, [r7, #0]
 8019568:	683b      	ldr	r3, [r7, #0]
 801956a:	4618      	mov	r0, r3
 801956c:	370c      	adds	r7, #12
 801956e:	46bd      	mov	sp, r7
 8019570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019574:	4770      	bx	lr

08019576 <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 8019576:	b580      	push	{r7, lr}
 8019578:	b082      	sub	sp, #8
 801957a:	af00      	add	r7, sp, #0
 801957c:	6078      	str	r0, [r7, #4]
 801957e:	6039      	str	r1, [r7, #0]
 8019580:	2100      	movs	r1, #0
 8019582:	6878      	ldr	r0, [r7, #4]
 8019584:	f7f3 f972 	bl	800c86c <_ZN18cpputest_ulonglongC1Ei>
 8019588:	6878      	ldr	r0, [r7, #4]
 801958a:	3708      	adds	r7, #8
 801958c:	46bd      	mov	sp, r7
 801958e:	bd80      	pop	{r7, pc}

08019590 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 8019590:	b480      	push	{r7}
 8019592:	b085      	sub	sp, #20
 8019594:	af00      	add	r7, sp, #0
 8019596:	60f8      	str	r0, [r7, #12]
 8019598:	60b9      	str	r1, [r7, #8]
 801959a:	4639      	mov	r1, r7
 801959c:	e881 000c 	stmia.w	r1, {r2, r3}
 80195a0:	68fb      	ldr	r3, [r7, #12]
 80195a2:	461a      	mov	r2, r3
 80195a4:	463b      	mov	r3, r7
 80195a6:	cb03      	ldmia	r3!, {r0, r1}
 80195a8:	6010      	str	r0, [r2, #0]
 80195aa:	6051      	str	r1, [r2, #4]
 80195ac:	68f8      	ldr	r0, [r7, #12]
 80195ae:	3714      	adds	r7, #20
 80195b0:	46bd      	mov	sp, r7
 80195b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195b6:	4770      	bx	lr

080195b8 <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 80195b8:	b580      	push	{r7, lr}
 80195ba:	b082      	sub	sp, #8
 80195bc:	af00      	add	r7, sp, #0
 80195be:	6078      	str	r0, [r7, #4]
 80195c0:	6039      	str	r1, [r7, #0]
 80195c2:	2100      	movs	r1, #0
 80195c4:	6878      	ldr	r0, [r7, #4]
 80195c6:	f7f3 f945 	bl	800c854 <_ZN17cpputest_longlongC1Ei>
 80195ca:	6878      	ldr	r0, [r7, #4]
 80195cc:	3708      	adds	r7, #8
 80195ce:	46bd      	mov	sp, r7
 80195d0:	bd80      	pop	{r7, pc}

080195d2 <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 80195d2:	b480      	push	{r7}
 80195d4:	b085      	sub	sp, #20
 80195d6:	af00      	add	r7, sp, #0
 80195d8:	60f8      	str	r0, [r7, #12]
 80195da:	60b9      	str	r1, [r7, #8]
 80195dc:	4639      	mov	r1, r7
 80195de:	e881 000c 	stmia.w	r1, {r2, r3}
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	461a      	mov	r2, r3
 80195e6:	463b      	mov	r3, r7
 80195e8:	cb03      	ldmia	r3!, {r0, r1}
 80195ea:	6010      	str	r0, [r2, #0]
 80195ec:	6051      	str	r1, [r2, #4]
 80195ee:	68f8      	ldr	r0, [r7, #12]
 80195f0:	3714      	adds	r7, #20
 80195f2:	46bd      	mov	sp, r7
 80195f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195f8:	4770      	bx	lr

080195fa <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 80195fa:	b480      	push	{r7}
 80195fc:	b083      	sub	sp, #12
 80195fe:	af00      	add	r7, sp, #0
 8019600:	6078      	str	r0, [r7, #4]
 8019602:	2300      	movs	r3, #0
 8019604:	4618      	mov	r0, r3
 8019606:	370c      	adds	r7, #12
 8019608:	46bd      	mov	sp, r7
 801960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801960e:	4770      	bx	lr

08019610 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 8019610:	b480      	push	{r7}
 8019612:	b083      	sub	sp, #12
 8019614:	af00      	add	r7, sp, #0
 8019616:	6078      	str	r0, [r7, #4]
 8019618:	6039      	str	r1, [r7, #0]
 801961a:	683b      	ldr	r3, [r7, #0]
 801961c:	4618      	mov	r0, r3
 801961e:	370c      	adds	r7, #12
 8019620:	46bd      	mov	sp, r7
 8019622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019626:	4770      	bx	lr

08019628 <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 8019628:	b480      	push	{r7}
 801962a:	b083      	sub	sp, #12
 801962c:	af00      	add	r7, sp, #0
 801962e:	6078      	str	r0, [r7, #4]
 8019630:	f04f 0200 	mov.w	r2, #0
 8019634:	f04f 0300 	mov.w	r3, #0
 8019638:	ec43 2b17 	vmov	d7, r2, r3
 801963c:	eeb0 0a47 	vmov.f32	s0, s14
 8019640:	eef0 0a67 	vmov.f32	s1, s15
 8019644:	370c      	adds	r7, #12
 8019646:	46bd      	mov	sp, r7
 8019648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801964c:	4770      	bx	lr

0801964e <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 801964e:	b480      	push	{r7}
 8019650:	b085      	sub	sp, #20
 8019652:	af00      	add	r7, sp, #0
 8019654:	60f8      	str	r0, [r7, #12]
 8019656:	ed87 0b00 	vstr	d0, [r7]
 801965a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801965e:	ec43 2b17 	vmov	d7, r2, r3
 8019662:	eeb0 0a47 	vmov.f32	s0, s14
 8019666:	eef0 0a67 	vmov.f32	s1, s15
 801966a:	3714      	adds	r7, #20
 801966c:	46bd      	mov	sp, r7
 801966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019672:	4770      	bx	lr

08019674 <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 8019674:	b480      	push	{r7}
 8019676:	b083      	sub	sp, #12
 8019678:	af00      	add	r7, sp, #0
 801967a:	6078      	str	r0, [r7, #4]
 801967c:	4b03      	ldr	r3, [pc, #12]	; (801968c <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 801967e:	4618      	mov	r0, r3
 8019680:	370c      	adds	r7, #12
 8019682:	46bd      	mov	sp, r7
 8019684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019688:	4770      	bx	lr
 801968a:	bf00      	nop
 801968c:	0802815c 	.word	0x0802815c

08019690 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 8019690:	b480      	push	{r7}
 8019692:	b083      	sub	sp, #12
 8019694:	af00      	add	r7, sp, #0
 8019696:	6078      	str	r0, [r7, #4]
 8019698:	6039      	str	r1, [r7, #0]
 801969a:	683b      	ldr	r3, [r7, #0]
 801969c:	4618      	mov	r0, r3
 801969e:	370c      	adds	r7, #12
 80196a0:	46bd      	mov	sp, r7
 80196a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196a6:	4770      	bx	lr

080196a8 <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 80196a8:	b480      	push	{r7}
 80196aa:	b083      	sub	sp, #12
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	6078      	str	r0, [r7, #4]
 80196b0:	2300      	movs	r3, #0
 80196b2:	4618      	mov	r0, r3
 80196b4:	370c      	adds	r7, #12
 80196b6:	46bd      	mov	sp, r7
 80196b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196bc:	4770      	bx	lr

080196be <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 80196be:	b480      	push	{r7}
 80196c0:	b083      	sub	sp, #12
 80196c2:	af00      	add	r7, sp, #0
 80196c4:	6078      	str	r0, [r7, #4]
 80196c6:	6039      	str	r1, [r7, #0]
 80196c8:	683b      	ldr	r3, [r7, #0]
 80196ca:	4618      	mov	r0, r3
 80196cc:	370c      	adds	r7, #12
 80196ce:	46bd      	mov	sp, r7
 80196d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196d4:	4770      	bx	lr

080196d6 <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 80196d6:	b480      	push	{r7}
 80196d8:	b083      	sub	sp, #12
 80196da:	af00      	add	r7, sp, #0
 80196dc:	6078      	str	r0, [r7, #4]
 80196de:	2300      	movs	r3, #0
 80196e0:	4618      	mov	r0, r3
 80196e2:	370c      	adds	r7, #12
 80196e4:	46bd      	mov	sp, r7
 80196e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ea:	4770      	bx	lr

080196ec <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 80196ec:	b480      	push	{r7}
 80196ee:	b083      	sub	sp, #12
 80196f0:	af00      	add	r7, sp, #0
 80196f2:	6078      	str	r0, [r7, #4]
 80196f4:	6039      	str	r1, [r7, #0]
 80196f6:	683b      	ldr	r3, [r7, #0]
 80196f8:	4618      	mov	r0, r3
 80196fa:	370c      	adds	r7, #12
 80196fc:	46bd      	mov	sp, r7
 80196fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019702:	4770      	bx	lr

08019704 <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 8019704:	b480      	push	{r7}
 8019706:	b083      	sub	sp, #12
 8019708:	af00      	add	r7, sp, #0
 801970a:	6078      	str	r0, [r7, #4]
 801970c:	2300      	movs	r3, #0
 801970e:	4618      	mov	r0, r3
 8019710:	370c      	adds	r7, #12
 8019712:	46bd      	mov	sp, r7
 8019714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019718:	4770      	bx	lr

0801971a <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 801971a:	b480      	push	{r7}
 801971c:	b083      	sub	sp, #12
 801971e:	af00      	add	r7, sp, #0
 8019720:	6078      	str	r0, [r7, #4]
 8019722:	6039      	str	r1, [r7, #0]
 8019724:	683b      	ldr	r3, [r7, #0]
 8019726:	4618      	mov	r0, r3
 8019728:	370c      	adds	r7, #12
 801972a:	46bd      	mov	sp, r7
 801972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019730:	4770      	bx	lr

08019732 <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 8019732:	b480      	push	{r7}
 8019734:	b083      	sub	sp, #12
 8019736:	af00      	add	r7, sp, #0
 8019738:	6078      	str	r0, [r7, #4]
 801973a:	6039      	str	r1, [r7, #0]
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	4618      	mov	r0, r3
 8019740:	370c      	adds	r7, #12
 8019742:	46bd      	mov	sp, r7
 8019744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019748:	4770      	bx	lr
	...

0801974c <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 801974c:	b480      	push	{r7}
 801974e:	b083      	sub	sp, #12
 8019750:	af00      	add	r7, sp, #0
 8019752:	6078      	str	r0, [r7, #4]
 8019754:	4a04      	ldr	r2, [pc, #16]	; (8019768 <_ZN14MockActualCallC1Ev+0x1c>)
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	601a      	str	r2, [r3, #0]
{
}
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	4618      	mov	r0, r3
 801975e:	370c      	adds	r7, #12
 8019760:	46bd      	mov	sp, r7
 8019762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019766:	4770      	bx	lr
 8019768:	0802b4b4 	.word	0x0802b4b4

0801976c <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 801976c:	b480      	push	{r7}
 801976e:	b083      	sub	sp, #12
 8019770:	af00      	add	r7, sp, #0
 8019772:	6078      	str	r0, [r7, #4]
 8019774:	4a04      	ldr	r2, [pc, #16]	; (8019788 <_ZN14MockActualCallD1Ev+0x1c>)
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	601a      	str	r2, [r3, #0]
{
}
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	4618      	mov	r0, r3
 801977e:	370c      	adds	r7, #12
 8019780:	46bd      	mov	sp, r7
 8019782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019786:	4770      	bx	lr
 8019788:	0802b4b4 	.word	0x0802b4b4

0801978c <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 801978c:	b580      	push	{r7, lr}
 801978e:	b082      	sub	sp, #8
 8019790:	af00      	add	r7, sp, #0
 8019792:	6078      	str	r0, [r7, #4]
 8019794:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	3304      	adds	r3, #4
 801979a:	6839      	ldr	r1, [r7, #0]
 801979c:	4618      	mov	r0, r3
 801979e:	f7f5 f88e 	bl	800e8be <_ZN12SimpleStringaSERKS_>
}
 80197a2:	bf00      	nop
 80197a4:	3708      	adds	r7, #8
 80197a6:	46bd      	mov	sp, r7
 80197a8:	bd80      	pop	{r7, pc}

080197aa <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 80197aa:	b580      	push	{r7, lr}
 80197ac:	b082      	sub	sp, #8
 80197ae:	af00      	add	r7, sp, #0
 80197b0:	6078      	str	r0, [r7, #4]
 80197b2:	6039      	str	r1, [r7, #0]
    return functionName_;
 80197b4:	683b      	ldr	r3, [r7, #0]
 80197b6:	3304      	adds	r3, #4
 80197b8:	4619      	mov	r1, r3
 80197ba:	6878      	ldr	r0, [r7, #4]
 80197bc:	f7f5 f867 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
}
 80197c0:	6878      	ldr	r0, [r7, #4]
 80197c2:	3708      	adds	r7, #8
 80197c4:	46bd      	mov	sp, r7
 80197c6:	bd80      	pop	{r7, pc}

080197c8 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 80197c8:	b580      	push	{r7, lr}
 80197ca:	b084      	sub	sp, #16
 80197cc:	af00      	add	r7, sp, #0
 80197ce:	60f8      	str	r0, [r7, #12]
 80197d0:	60b9      	str	r1, [r7, #8]
 80197d2:	607a      	str	r2, [r7, #4]
 80197d4:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	4618      	mov	r0, r3
 80197da:	f7ff ffb7 	bl	801974c <_ZN14MockActualCallC1Ev>
 80197de:	4a17      	ldr	r2, [pc, #92]	; (801983c <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 80197e0:	68fb      	ldr	r3, [r7, #12]
 80197e2:	601a      	str	r2, [r3, #0]
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	3304      	adds	r3, #4
 80197e8:	4915      	ldr	r1, [pc, #84]	; (8019840 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 80197ea:	4618      	mov	r0, r3
 80197ec:	f7f4 fffb 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	68ba      	ldr	r2, [r7, #8]
 80197f4:	60da      	str	r2, [r3, #12]
 80197f6:	68fb      	ldr	r3, [r7, #12]
 80197f8:	687a      	ldr	r2, [r7, #4]
 80197fa:	611a      	str	r2, [r3, #16]
 80197fc:	68fb      	ldr	r3, [r7, #12]
 80197fe:	2202      	movs	r2, #2
 8019800:	751a      	strb	r2, [r3, #20]
 8019802:	68fb      	ldr	r3, [r7, #12]
 8019804:	2200      	movs	r2, #0
 8019806:	755a      	strb	r2, [r3, #21]
 8019808:	68fb      	ldr	r3, [r7, #12]
 801980a:	2200      	movs	r2, #0
 801980c:	619a      	str	r2, [r3, #24]
 801980e:	68fb      	ldr	r3, [r7, #12]
 8019810:	331c      	adds	r3, #28
 8019812:	4618      	mov	r0, r3
 8019814:	f004 f814 	bl	801d840 <_ZN21MockExpectedCallsListC1Ev>
 8019818:	68fb      	ldr	r3, [r7, #12]
 801981a:	683a      	ldr	r2, [r7, #0]
 801981c:	625a      	str	r2, [r3, #36]	; 0x24
 801981e:	68fb      	ldr	r3, [r7, #12]
 8019820:	2200      	movs	r2, #0
 8019822:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	331c      	adds	r3, #28
 8019828:	6839      	ldr	r1, [r7, #0]
 801982a:	4618      	mov	r0, r3
 801982c:	f004 f986 	bl	801db3c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 8019830:	68fb      	ldr	r3, [r7, #12]
 8019832:	4618      	mov	r0, r3
 8019834:	3710      	adds	r7, #16
 8019836:	46bd      	mov	sp, r7
 8019838:	bd80      	pop	{r7, pc}
 801983a:	bf00      	nop
 801983c:	0802b3b4 	.word	0x0802b3b4
 8019840:	0802815c 	.word	0x0802815c

08019844 <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 8019844:	b580      	push	{r7, lr}
 8019846:	b082      	sub	sp, #8
 8019848:	af00      	add	r7, sp, #0
 801984a:	6078      	str	r0, [r7, #4]
 801984c:	4a0c      	ldr	r2, [pc, #48]	; (8019880 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 8019852:	6878      	ldr	r0, [r7, #4]
 8019854:	f001 fae4 	bl	801ae20 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	331c      	adds	r3, #28
 801985c:	4618      	mov	r0, r3
 801985e:	f004 f803 	bl	801d868 <_ZN21MockExpectedCallsListD1Ev>
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	3304      	adds	r3, #4
 8019866:	4618      	mov	r0, r3
 8019868:	f7f5 fb75 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	4618      	mov	r0, r3
 8019870:	f7ff ff7c 	bl	801976c <_ZN14MockActualCallD1Ev>
}
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	4618      	mov	r0, r3
 8019878:	3708      	adds	r7, #8
 801987a:	46bd      	mov	sp, r7
 801987c:	bd80      	pop	{r7, pc}
 801987e:	bf00      	nop
 8019880:	0802b3b4 	.word	0x0802b3b4

08019884 <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 8019884:	b580      	push	{r7, lr}
 8019886:	b082      	sub	sp, #8
 8019888:	af00      	add	r7, sp, #0
 801988a:	6078      	str	r0, [r7, #4]
}
 801988c:	6878      	ldr	r0, [r7, #4]
 801988e:	f7ff ffd9 	bl	8019844 <_ZN21MockCheckedActualCallD1Ev>
 8019892:	212c      	movs	r1, #44	; 0x2c
 8019894:	6878      	ldr	r0, [r7, #4]
 8019896:	f7f2 fbf7 	bl	800c088 <_ZdlPvj>
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	4618      	mov	r0, r3
 801989e:	3708      	adds	r7, #8
 80198a0:	46bd      	mov	sp, r7
 80198a2:	bd80      	pop	{r7, pc}

080198a4 <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 80198a4:	b480      	push	{r7}
 80198a6:	b083      	sub	sp, #12
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	6078      	str	r0, [r7, #4]
 80198ac:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	683a      	ldr	r2, [r7, #0]
 80198b2:	611a      	str	r2, [r3, #16]
}
 80198b4:	bf00      	nop
 80198b6:	370c      	adds	r7, #12
 80198b8:	46bd      	mov	sp, r7
 80198ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198be:	4770      	bx	lr

080198c0 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 80198c0:	b580      	push	{r7, lr}
 80198c2:	b082      	sub	sp, #8
 80198c4:	af00      	add	r7, sp, #0
 80198c6:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	691a      	ldr	r2, [r3, #16]
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	691b      	ldr	r3, [r3, #16]
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	330c      	adds	r3, #12
 80198d4:	681b      	ldr	r3, [r3, #0]
 80198d6:	4610      	mov	r0, r2
 80198d8:	4798      	blx	r3
 80198da:	4603      	mov	r3, r0
}
 80198dc:	4618      	mov	r0, r3
 80198de:	3708      	adds	r7, #8
 80198e0:	46bd      	mov	sp, r7
 80198e2:	bd80      	pop	{r7, pc}

080198e4 <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 80198e4:	b580      	push	{r7, lr}
 80198e6:	b082      	sub	sp, #8
 80198e8:	af00      	add	r7, sp, #0
 80198ea:	6078      	str	r0, [r7, #4]
 80198ec:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	33c0      	adds	r3, #192	; 0xc0
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	6878      	ldr	r0, [r7, #4]
 80198f8:	4798      	blx	r3
 80198fa:	4603      	mov	r3, r0
 80198fc:	f083 0301 	eor.w	r3, r3, #1
 8019900:	b2db      	uxtb	r3, r3
 8019902:	2b00      	cmp	r3, #0
 8019904:	d010      	beq.n	8019928 <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	33ec      	adds	r3, #236	; 0xec
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	2101      	movs	r1, #1
 8019910:	6878      	ldr	r0, [r7, #4]
 8019912:	4798      	blx	r3
        reporter_->failTest(failure);
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	691a      	ldr	r2, [r3, #16]
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	691b      	ldr	r3, [r3, #16]
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	3308      	adds	r3, #8
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	6839      	ldr	r1, [r7, #0]
 8019924:	4610      	mov	r0, r2
 8019926:	4798      	blx	r3
    }
}
 8019928:	bf00      	nop
 801992a:	3708      	adds	r7, #8
 801992c:	46bd      	mov	sp, r7
 801992e:	bd80      	pop	{r7, pc}

08019930 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 8019930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019934:	b0bc      	sub	sp, #240	; 0xf0
 8019936:	af00      	add	r7, sp, #0
 8019938:	6078      	str	r0, [r7, #4]
 801993a:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019940:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8019944:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8019948:	2b00      	cmp	r3, #0
 801994a:	f000 80f5 	beq.w	8019b38 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 801994e:	683b      	ldr	r3, [r7, #0]
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	339c      	adds	r3, #156	; 0x9c
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801995a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801995e:	6839      	ldr	r1, [r7, #0]
 8019960:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 8019962:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019966:	4618      	mov	r0, r3
 8019968:	f006 fa6e 	bl	801fe48 <_ZNK14MockNamedValue9getCopierEv>
 801996c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 8019970:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8019974:	2b00      	cmp	r3, #0
 8019976:	d013      	beq.n	80199a0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 8019978:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	3308      	adds	r3, #8
 8019980:	681c      	ldr	r4, [r3, #0]
 8019982:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8019986:	691d      	ldr	r5, [r3, #16]
 8019988:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801998c:	4618      	mov	r0, r3
 801998e:	f006 fa2b 	bl	801fde8 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 8019992:	4603      	mov	r3, r0
 8019994:	461a      	mov	r2, r3
 8019996:	4629      	mov	r1, r5
 8019998:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801999c:	47a0      	blx	r4
 801999e:	e0c0      	b.n	8019b22 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 80199a0:	2500      	movs	r5, #0
 80199a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80199a6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80199aa:	4611      	mov	r1, r2
 80199ac:	4618      	mov	r0, r3
 80199ae:	f005 ff0e 	bl	801f7ce <_ZNK14MockNamedValue7getTypeEv>
 80199b2:	2601      	movs	r6, #1
 80199b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80199b8:	4962      	ldr	r1, [pc, #392]	; (8019b44 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 80199ba:	4618      	mov	r0, r3
 80199bc:	f7f4 ff13 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80199c0:	f04f 0801 	mov.w	r8, #1
 80199c4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80199c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80199cc:	4611      	mov	r1, r2
 80199ce:	4618      	mov	r0, r3
 80199d0:	f7f5 facd 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 80199d4:	4603      	mov	r3, r0
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d015      	beq.n	8019a06 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 80199da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80199de:	f103 0408 	add.w	r4, r3, #8
 80199e2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80199e6:	4958      	ldr	r1, [pc, #352]	; (8019b48 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 80199e8:	4618      	mov	r0, r3
 80199ea:	f7f4 fefc 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80199ee:	2501      	movs	r5, #1
 80199f0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80199f4:	4619      	mov	r1, r3
 80199f6:	4620      	mov	r0, r4
 80199f8:	f7f5 fab9 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 80199fc:	4603      	mov	r3, r0
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d001      	beq.n	8019a06 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8019a02:	2401      	movs	r4, #1
 8019a04:	e000      	b.n	8019a08 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 8019a06:	2400      	movs	r4, #0
 8019a08:	2d00      	cmp	r5, #0
 8019a0a:	d004      	beq.n	8019a16 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 8019a0c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8019a10:	4618      	mov	r0, r3
 8019a12:	f7f5 faa0 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8019a16:	f1b8 0f00 	cmp.w	r8, #0
 8019a1a:	d004      	beq.n	8019a26 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 8019a1c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8019a20:	4618      	mov	r0, r3
 8019a22:	f7f5 fa98 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8019a26:	2e00      	cmp	r6, #0
 8019a28:	d004      	beq.n	8019a34 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 8019a2a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8019a2e:	4618      	mov	r0, r3
 8019a30:	f7f5 fa91 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8019a34:	2c00      	cmp	r4, #0
 8019a36:	d018      	beq.n	8019a6a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 8019a38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019a3c:	4618      	mov	r0, r3
 8019a3e:	f006 f95b 	bl	801fcf8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8019a42:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 8019a46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019a4a:	4618      	mov	r0, r3
 8019a4c:	f006 f9e4 	bl	801fe18 <_ZNK14MockNamedValue7getSizeEv>
 8019a50:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 8019a54:	4b3d      	ldr	r3, [pc, #244]	; (8019b4c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 8019a56:	681b      	ldr	r3, [r3, #0]
 8019a58:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8019a5c:	6910      	ldr	r0, [r2, #16]
 8019a5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8019a62:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8019a66:	4798      	blx	r3
 8019a68:	e05b      	b.n	8019b22 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 8019a6a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8019a6e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8019a72:	4611      	mov	r1, r2
 8019a74:	4618      	mov	r0, r3
 8019a76:	f005 fe9b 	bl	801f7b0 <_ZNK14MockNamedValue7getNameEv>
 8019a7a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8019a7e:	4934      	ldr	r1, [pc, #208]	; (8019b50 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 8019a80:	4618      	mov	r0, r3
 8019a82:	f7f4 feb0 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8019a86:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8019a8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8019a8e:	4611      	mov	r1, r2
 8019a90:	4618      	mov	r0, r3
 8019a92:	f7f5 fab1 	bl	800eff8 <_ZneRK12SimpleStringS1_>
 8019a96:	4603      	mov	r3, r0
 8019a98:	461c      	mov	r4, r3
 8019a9a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8019a9e:	4618      	mov	r0, r3
 8019aa0:	f7f5 fa59 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8019aa4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8019aa8:	4618      	mov	r0, r3
 8019aaa:	f7f5 fa54 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8019aae:	2c00      	cmp	r4, #0
 8019ab0:	d037      	beq.n	8019b22 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8019ab2:	683b      	ldr	r3, [r7, #0]
 8019ab4:	681b      	ldr	r3, [r3, #0]
 8019ab6:	339c      	adds	r3, #156	; 0x9c
 8019ab8:	681b      	ldr	r3, [r3, #0]
 8019aba:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8019abe:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8019ac2:	6839      	ldr	r1, [r7, #0]
 8019ac4:	4798      	blx	r3
 8019ac6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8019aca:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8019ace:	4611      	mov	r1, r2
 8019ad0:	4618      	mov	r0, r3
 8019ad2:	f005 fe7c 	bl	801f7ce <_ZNK14MockNamedValue7getTypeEv>
 8019ad6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8019ada:	4618      	mov	r0, r3
 8019adc:	f005 fbd2 	bl	801f284 <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	681b      	ldr	r3, [r3, #0]
 8019ae4:	33cc      	adds	r3, #204	; 0xcc
 8019ae6:	681b      	ldr	r3, [r3, #0]
 8019ae8:	6878      	ldr	r0, [r7, #4]
 8019aea:	4798      	blx	r3
 8019aec:	4601      	mov	r1, r0
 8019aee:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8019af2:	f107 030c 	add.w	r3, r7, #12
 8019af6:	4618      	mov	r0, r3
 8019af8:	f005 faee 	bl	801f0d8 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	33dc      	adds	r3, #220	; 0xdc
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	f107 020c 	add.w	r2, r7, #12
 8019b08:	4611      	mov	r1, r2
 8019b0a:	6878      	ldr	r0, [r7, #4]
 8019b0c:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8019b0e:	f107 030c 	add.w	r3, r7, #12
 8019b12:	4618      	mov	r0, r3
 8019b14:	f001 ffe2 	bl	801badc <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8019b18:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	f7f5 fa1a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8019b22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019b26:	4618      	mov	r0, r3
 8019b28:	f005 fbac 	bl	801f284 <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8019b2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8019b30:	695b      	ldr	r3, [r3, #20]
 8019b32:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8019b36:	e705      	b.n	8019944 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 8019b38:	bf00      	nop
 8019b3a:	37f0      	adds	r7, #240	; 0xf0
 8019b3c:	46bd      	mov	sp, r7
 8019b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b42:	bf00      	nop
 8019b44:	08028160 	.word	0x08028160
 8019b48:	0802816c 	.word	0x0802816c
 8019b4c:	200000d4 	.word	0x200000d4
 8019b50:	0802815c 	.word	0x0802815c

08019b54 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 8019b54:	b580      	push	{r7, lr}
 8019b56:	b084      	sub	sp, #16
 8019b58:	af00      	add	r7, sp, #0
 8019b5a:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	331c      	adds	r3, #28
 8019b60:	4618      	mov	r0, r3
 8019b62:	f004 f9bb 	bl	801dedc <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 8019b66:	4602      	mov	r2, r0
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	699b      	ldr	r3, [r3, #24]
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d00f      	beq.n	8019b94 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	681b      	ldr	r3, [r3, #0]
 8019b78:	33d4      	adds	r3, #212	; 0xd4
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	687a      	ldr	r2, [r7, #4]
 8019b7e:	6992      	ldr	r2, [r2, #24]
 8019b80:	4611      	mov	r1, r2
 8019b82:	6878      	ldr	r0, [r7, #4]
 8019b84:	4798      	blx	r3
        callHasSucceeded();
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	681b      	ldr	r3, [r3, #0]
 8019b8a:	33d0      	adds	r3, #208	; 0xd0
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	6878      	ldr	r0, [r7, #4]
 8019b90:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 8019b92:	e00f      	b.n	8019bb4 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	331c      	adds	r3, #28
 8019b98:	4618      	mov	r0, r3
 8019b9a:	f004 f9cc 	bl	801df36 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 8019b9e:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 8019ba0:	68fb      	ldr	r3, [r7, #12]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d006      	beq.n	8019bb4 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	33d4      	adds	r3, #212	; 0xd4
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	68f9      	ldr	r1, [r7, #12]
 8019bb0:	6878      	ldr	r0, [r7, #4]
 8019bb2:	4798      	blx	r3
}
 8019bb4:	bf00      	nop
 8019bb6:	3710      	adds	r7, #16
 8019bb8:	46bd      	mov	sp, r7
 8019bba:	bd80      	pop	{r7, pc}

08019bbc <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 8019bbc:	b580      	push	{r7, lr}
 8019bbe:	b082      	sub	sp, #8
 8019bc0:	af00      	add	r7, sp, #0
 8019bc2:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	681b      	ldr	r3, [r3, #0]
 8019bc8:	33ec      	adds	r3, #236	; 0xec
 8019bca:	681b      	ldr	r3, [r3, #0]
 8019bcc:	2102      	movs	r1, #2
 8019bce:	6878      	ldr	r0, [r7, #4]
 8019bd0:	4798      	blx	r3
}
 8019bd2:	bf00      	nop
 8019bd4:	3708      	adds	r7, #8
 8019bd6:	46bd      	mov	sp, r7
 8019bd8:	bd80      	pop	{r7, pc}

08019bda <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 8019bda:	b580      	push	{r7, lr}
 8019bdc:	b082      	sub	sp, #8
 8019bde:	af00      	add	r7, sp, #0
 8019be0:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	699b      	ldr	r3, [r3, #24]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d00b      	beq.n	8019c02 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	699a      	ldr	r2, [r3, #24]
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	699b      	ldr	r3, [r3, #24]
 8019bf2:	681b      	ldr	r3, [r3, #0]
 8019bf4:	33ec      	adds	r3, #236	; 0xec
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	4610      	mov	r0, r2
 8019bfa:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	2200      	movs	r2, #0
 8019c00:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	331c      	adds	r3, #28
 8019c06:	4618      	mov	r0, r3
 8019c08:	f004 f85c 	bl	801dcc4 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 8019c0c:	bf00      	nop
 8019c0e:	3708      	adds	r7, #8
 8019c10:	46bd      	mov	sp, r7
 8019c12:	bd80      	pop	{r7, pc}

08019c14 <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 8019c14:	b590      	push	{r4, r7, lr}
 8019c16:	b091      	sub	sp, #68	; 0x44
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
 8019c1c:	6039      	str	r1, [r7, #0]
    setName(name);
 8019c1e:	6839      	ldr	r1, [r7, #0]
 8019c20:	6878      	ldr	r0, [r7, #4]
 8019c22:	f7ff fdb3 	bl	801978c <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	33ec      	adds	r3, #236	; 0xec
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	2100      	movs	r1, #0
 8019c30:	6878      	ldr	r0, [r7, #4]
 8019c32:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	331c      	adds	r3, #28
 8019c38:	6839      	ldr	r1, [r7, #0]
 8019c3a:	4618      	mov	r0, r3
 8019c3c:	f003 ffec 	bl	801dc18 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	331c      	adds	r3, #28
 8019c44:	4618      	mov	r0, r3
 8019c46:	f003 fe7c 	bl	801d942 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8019c4a:	4603      	mov	r3, r0
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d01d      	beq.n	8019c8c <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	681b      	ldr	r3, [r3, #0]
 8019c54:	33cc      	adds	r3, #204	; 0xcc
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	6878      	ldr	r0, [r7, #4]
 8019c5a:	4798      	blx	r3
 8019c5c:	4601      	mov	r1, r0
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c62:	f107 000c 	add.w	r0, r7, #12
 8019c66:	683a      	ldr	r2, [r7, #0]
 8019c68:	f004 fe24 	bl	801e8b4 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	33dc      	adds	r3, #220	; 0xdc
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	f107 020c 	add.w	r2, r7, #12
 8019c78:	4611      	mov	r1, r2
 8019c7a:	6878      	ldr	r0, [r7, #4]
 8019c7c:	4798      	blx	r3
        return *this;
 8019c7e:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8019c80:	f107 030c 	add.w	r3, r7, #12
 8019c84:	4618      	mov	r0, r3
 8019c86:	f001 ff4b 	bl	801bb20 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8019c8a:	e006      	b.n	8019c9a <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	681b      	ldr	r3, [r3, #0]
 8019c90:	33d8      	adds	r3, #216	; 0xd8
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	6878      	ldr	r0, [r7, #4]
 8019c96:	4798      	blx	r3

    return *this;
 8019c98:	687c      	ldr	r4, [r7, #4]
 8019c9a:	4623      	mov	r3, r4
}
 8019c9c:	4618      	mov	r0, r3
 8019c9e:	3744      	adds	r7, #68	; 0x44
 8019ca0:	46bd      	mov	sp, r7
 8019ca2:	bd90      	pop	{r4, r7, pc}

08019ca4 <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 8019ca4:	b480      	push	{r7}
 8019ca6:	b083      	sub	sp, #12
 8019ca8:	af00      	add	r7, sp, #0
 8019caa:	6078      	str	r0, [r7, #4]
 8019cac:	6039      	str	r1, [r7, #0]
    return *this;
 8019cae:	687b      	ldr	r3, [r7, #4]
}
 8019cb0:	4618      	mov	r0, r3
 8019cb2:	370c      	adds	r7, #12
 8019cb4:	46bd      	mov	sp, r7
 8019cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cba:	4770      	bx	lr

08019cbc <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 8019cbc:	b590      	push	{r4, r7, lr}
 8019cbe:	b097      	sub	sp, #92	; 0x5c
 8019cc0:	af02      	add	r7, sp, #8
 8019cc2:	6078      	str	r0, [r7, #4]
 8019cc4:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	681b      	ldr	r3, [r3, #0]
 8019cca:	33c0      	adds	r3, #192	; 0xc0
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	6878      	ldr	r0, [r7, #4]
 8019cd0:	4798      	blx	r3
 8019cd2:	4603      	mov	r3, r0
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d164      	bne.n	8019da2 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	33ec      	adds	r3, #236	; 0xec
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	2100      	movs	r1, #0
 8019ce2:	6878      	ldr	r0, [r7, #4]
 8019ce4:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	33e8      	adds	r3, #232	; 0xe8
 8019cec:	681b      	ldr	r3, [r3, #0]
 8019cee:	6878      	ldr	r0, [r7, #4]
 8019cf0:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	331c      	adds	r3, #28
 8019cf6:	6839      	ldr	r1, [r7, #0]
 8019cf8:	4618      	mov	r0, r3
 8019cfa:	f004 f86b 	bl	801ddd4 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	331c      	adds	r3, #28
 8019d02:	4618      	mov	r0, r3
 8019d04:	f003 fe1d 	bl	801d942 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8019d08:	4603      	mov	r3, r0
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d02b      	beq.n	8019d66 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	33cc      	adds	r3, #204	; 0xcc
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	6878      	ldr	r0, [r7, #4]
 8019d18:	4798      	blx	r3
 8019d1a:	4604      	mov	r4, r0
 8019d1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019d20:	6879      	ldr	r1, [r7, #4]
 8019d22:	4618      	mov	r0, r3
 8019d24:	f7ff fd41 	bl	80197aa <_ZNK21MockCheckedActualCall7getNameEv>
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d2c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8019d30:	f107 000c 	add.w	r0, r7, #12
 8019d34:	9300      	str	r3, [sp, #0]
 8019d36:	683b      	ldr	r3, [r7, #0]
 8019d38:	4621      	mov	r1, r4
 8019d3a:	f004 fe7f 	bl	801ea3c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8019d3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019d42:	4618      	mov	r0, r3
 8019d44:	f7f5 f907 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	33dc      	adds	r3, #220	; 0xdc
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	f107 020c 	add.w	r2, r7, #12
 8019d54:	4611      	mov	r1, r2
 8019d56:	6878      	ldr	r0, [r7, #4]
 8019d58:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8019d5a:	f107 030c 	add.w	r3, r7, #12
 8019d5e:	4618      	mov	r0, r3
 8019d60:	f001 ff00 	bl	801bb64 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8019d64:	e01e      	b.n	8019da4 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	f103 041c 	add.w	r4, r3, #28
 8019d6c:	683b      	ldr	r3, [r7, #0]
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	335c      	adds	r3, #92	; 0x5c
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019d78:	6839      	ldr	r1, [r7, #0]
 8019d7a:	4610      	mov	r0, r2
 8019d7c:	4798      	blx	r3
 8019d7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019d82:	4619      	mov	r1, r3
 8019d84:	4620      	mov	r0, r4
 8019d86:	f004 f9b8 	bl	801e0fa <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 8019d8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019d8e:	4618      	mov	r0, r3
 8019d90:	f7f5 f8e1 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	33d8      	adds	r3, #216	; 0xd8
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	6878      	ldr	r0, [r7, #4]
 8019d9e:	4798      	blx	r3
 8019da0:	e000      	b.n	8019da4 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 8019da2:	bf00      	nop
}
 8019da4:	3754      	adds	r7, #84	; 0x54
 8019da6:	46bd      	mov	sp, r7
 8019da8:	bd90      	pop	{r4, r7, pc}

08019daa <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 8019daa:	b590      	push	{r4, r7, lr}
 8019dac:	b097      	sub	sp, #92	; 0x5c
 8019dae:	af02      	add	r7, sp, #8
 8019db0:	6078      	str	r0, [r7, #4]
 8019db2:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	33c0      	adds	r3, #192	; 0xc0
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	6878      	ldr	r0, [r7, #4]
 8019dbe:	4798      	blx	r3
 8019dc0:	4603      	mov	r3, r0
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d164      	bne.n	8019e90 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	681b      	ldr	r3, [r3, #0]
 8019dca:	33ec      	adds	r3, #236	; 0xec
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	2100      	movs	r1, #0
 8019dd0:	6878      	ldr	r0, [r7, #4]
 8019dd2:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	33e8      	adds	r3, #232	; 0xe8
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	6878      	ldr	r0, [r7, #4]
 8019dde:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	331c      	adds	r3, #28
 8019de4:	6839      	ldr	r1, [r7, #0]
 8019de6:	4618      	mov	r0, r3
 8019de8:	f004 f820 	bl	801de2c <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	331c      	adds	r3, #28
 8019df0:	4618      	mov	r0, r3
 8019df2:	f003 fda6 	bl	801d942 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8019df6:	4603      	mov	r3, r0
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d02b      	beq.n	8019e54 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	681b      	ldr	r3, [r3, #0]
 8019e00:	33cc      	adds	r3, #204	; 0xcc
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	6878      	ldr	r0, [r7, #4]
 8019e06:	4798      	blx	r3
 8019e08:	4604      	mov	r4, r0
 8019e0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019e0e:	6879      	ldr	r1, [r7, #4]
 8019e10:	4618      	mov	r0, r3
 8019e12:	f7ff fcca 	bl	80197aa <_ZNK21MockCheckedActualCall7getNameEv>
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e1a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8019e1e:	f107 000c 	add.w	r0, r7, #12
 8019e22:	9300      	str	r3, [sp, #0]
 8019e24:	683b      	ldr	r3, [r7, #0]
 8019e26:	4621      	mov	r1, r4
 8019e28:	f004 ff6a 	bl	801ed00 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8019e2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019e30:	4618      	mov	r0, r3
 8019e32:	f7f5 f890 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	681b      	ldr	r3, [r3, #0]
 8019e3a:	33dc      	adds	r3, #220	; 0xdc
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	f107 020c 	add.w	r2, r7, #12
 8019e42:	4611      	mov	r1, r2
 8019e44:	6878      	ldr	r0, [r7, #4]
 8019e46:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8019e48:	f107 030c 	add.w	r3, r7, #12
 8019e4c:	4618      	mov	r0, r3
 8019e4e:	f001 feab 	bl	801bba8 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8019e52:	e01e      	b.n	8019e92 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	f103 041c 	add.w	r4, r3, #28
 8019e5a:	683b      	ldr	r3, [r7, #0]
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	335c      	adds	r3, #92	; 0x5c
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019e66:	6839      	ldr	r1, [r7, #0]
 8019e68:	4610      	mov	r0, r2
 8019e6a:	4798      	blx	r3
 8019e6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019e70:	4619      	mov	r1, r3
 8019e72:	4620      	mov	r0, r4
 8019e74:	f004 f95e 	bl	801e134 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 8019e78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019e7c:	4618      	mov	r0, r3
 8019e7e:	f7f5 f86a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	33d8      	adds	r3, #216	; 0xd8
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	6878      	ldr	r0, [r7, #4]
 8019e8c:	4798      	blx	r3
 8019e8e:	e000      	b.n	8019e92 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 8019e90:	bf00      	nop
}
 8019e92:	3754      	adds	r7, #84	; 0x54
 8019e94:	46bd      	mov	sp, r7
 8019e96:	bd90      	pop	{r4, r7, pc}

08019e98 <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 8019e98:	b590      	push	{r4, r7, lr}
 8019e9a:	b093      	sub	sp, #76	; 0x4c
 8019e9c:	af00      	add	r7, sp, #0
 8019e9e:	60f8      	str	r0, [r7, #12]
 8019ea0:	60b9      	str	r1, [r7, #8]
 8019ea2:	4613      	mov	r3, r2
 8019ea4:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 8019ea6:	f107 0310 	add.w	r3, r7, #16
 8019eaa:	68b9      	ldr	r1, [r7, #8]
 8019eac:	4618      	mov	r0, r3
 8019eae:	f005 f9bf 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8019eb2:	79fa      	ldrb	r2, [r7, #7]
 8019eb4:	f107 0310 	add.w	r3, r7, #16
 8019eb8:	4611      	mov	r1, r2
 8019eba:	4618      	mov	r0, r3
 8019ebc:	f005 fa0a 	bl	801f2d4 <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	33e0      	adds	r3, #224	; 0xe0
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	f107 0210 	add.w	r2, r7, #16
 8019ecc:	4611      	mov	r1, r2
 8019ece:	68f8      	ldr	r0, [r7, #12]
 8019ed0:	4798      	blx	r3
    return *this;
 8019ed2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8019ed4:	f107 0310 	add.w	r3, r7, #16
 8019ed8:	4618      	mov	r0, r3
 8019eda:	f005 f9d3 	bl	801f284 <_ZN14MockNamedValueD1Ev>
    return *this;
 8019ede:	4623      	mov	r3, r4
}
 8019ee0:	4618      	mov	r0, r3
 8019ee2:	374c      	adds	r7, #76	; 0x4c
 8019ee4:	46bd      	mov	sp, r7
 8019ee6:	bd90      	pop	{r4, r7, pc}

08019ee8 <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8019ee8:	b590      	push	{r4, r7, lr}
 8019eea:	b093      	sub	sp, #76	; 0x4c
 8019eec:	af00      	add	r7, sp, #0
 8019eee:	60f8      	str	r0, [r7, #12]
 8019ef0:	60b9      	str	r1, [r7, #8]
 8019ef2:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8019ef4:	f107 0310 	add.w	r3, r7, #16
 8019ef8:	68b9      	ldr	r1, [r7, #8]
 8019efa:	4618      	mov	r0, r3
 8019efc:	f005 f998 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8019f00:	f107 0310 	add.w	r3, r7, #16
 8019f04:	6879      	ldr	r1, [r7, #4]
 8019f06:	4618      	mov	r0, r3
 8019f08:	f005 fa08 	bl	801f31c <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 8019f0c:	68fb      	ldr	r3, [r7, #12]
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	33e0      	adds	r3, #224	; 0xe0
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	f107 0210 	add.w	r2, r7, #16
 8019f18:	4611      	mov	r1, r2
 8019f1a:	68f8      	ldr	r0, [r7, #12]
 8019f1c:	4798      	blx	r3
    return *this;
 8019f1e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8019f20:	f107 0310 	add.w	r3, r7, #16
 8019f24:	4618      	mov	r0, r3
 8019f26:	f005 f9ad 	bl	801f284 <_ZN14MockNamedValueD1Ev>
    return *this;
 8019f2a:	4623      	mov	r3, r4
}
 8019f2c:	4618      	mov	r0, r3
 8019f2e:	374c      	adds	r7, #76	; 0x4c
 8019f30:	46bd      	mov	sp, r7
 8019f32:	bd90      	pop	{r4, r7, pc}

08019f34 <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 8019f34:	b590      	push	{r4, r7, lr}
 8019f36:	b093      	sub	sp, #76	; 0x4c
 8019f38:	af00      	add	r7, sp, #0
 8019f3a:	60f8      	str	r0, [r7, #12]
 8019f3c:	60b9      	str	r1, [r7, #8]
 8019f3e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8019f40:	f107 0310 	add.w	r3, r7, #16
 8019f44:	68b9      	ldr	r1, [r7, #8]
 8019f46:	4618      	mov	r0, r3
 8019f48:	f005 f972 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8019f4c:	f107 0310 	add.w	r3, r7, #16
 8019f50:	6879      	ldr	r1, [r7, #4]
 8019f52:	4618      	mov	r0, r3
 8019f54:	f005 fa04 	bl	801f360 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 8019f58:	68fb      	ldr	r3, [r7, #12]
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	33e0      	adds	r3, #224	; 0xe0
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	f107 0210 	add.w	r2, r7, #16
 8019f64:	4611      	mov	r1, r2
 8019f66:	68f8      	ldr	r0, [r7, #12]
 8019f68:	4798      	blx	r3
    return *this;
 8019f6a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8019f6c:	f107 0310 	add.w	r3, r7, #16
 8019f70:	4618      	mov	r0, r3
 8019f72:	f005 f987 	bl	801f284 <_ZN14MockNamedValueD1Ev>
    return *this;
 8019f76:	4623      	mov	r3, r4
}
 8019f78:	4618      	mov	r0, r3
 8019f7a:	374c      	adds	r7, #76	; 0x4c
 8019f7c:	46bd      	mov	sp, r7
 8019f7e:	bd90      	pop	{r4, r7, pc}

08019f80 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8019f80:	b590      	push	{r4, r7, lr}
 8019f82:	b093      	sub	sp, #76	; 0x4c
 8019f84:	af00      	add	r7, sp, #0
 8019f86:	60f8      	str	r0, [r7, #12]
 8019f88:	60b9      	str	r1, [r7, #8]
 8019f8a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8019f8c:	f107 0310 	add.w	r3, r7, #16
 8019f90:	68b9      	ldr	r1, [r7, #8]
 8019f92:	4618      	mov	r0, r3
 8019f94:	f005 f94c 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8019f98:	f107 0310 	add.w	r3, r7, #16
 8019f9c:	6879      	ldr	r1, [r7, #4]
 8019f9e:	4618      	mov	r0, r3
 8019fa0:	f005 fa22 	bl	801f3e8 <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 8019fa4:	68fb      	ldr	r3, [r7, #12]
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	33e0      	adds	r3, #224	; 0xe0
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	f107 0210 	add.w	r2, r7, #16
 8019fb0:	4611      	mov	r1, r2
 8019fb2:	68f8      	ldr	r0, [r7, #12]
 8019fb4:	4798      	blx	r3
    return *this;
 8019fb6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8019fb8:	f107 0310 	add.w	r3, r7, #16
 8019fbc:	4618      	mov	r0, r3
 8019fbe:	f005 f961 	bl	801f284 <_ZN14MockNamedValueD1Ev>
    return *this;
 8019fc2:	4623      	mov	r3, r4
}
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	374c      	adds	r7, #76	; 0x4c
 8019fc8:	46bd      	mov	sp, r7
 8019fca:	bd90      	pop	{r4, r7, pc}

08019fcc <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8019fcc:	b590      	push	{r4, r7, lr}
 8019fce:	b093      	sub	sp, #76	; 0x4c
 8019fd0:	af00      	add	r7, sp, #0
 8019fd2:	60f8      	str	r0, [r7, #12]
 8019fd4:	60b9      	str	r1, [r7, #8]
 8019fd6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8019fd8:	f107 0310 	add.w	r3, r7, #16
 8019fdc:	68b9      	ldr	r1, [r7, #8]
 8019fde:	4618      	mov	r0, r3
 8019fe0:	f005 f926 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8019fe4:	f107 0310 	add.w	r3, r7, #16
 8019fe8:	6879      	ldr	r1, [r7, #4]
 8019fea:	4618      	mov	r0, r3
 8019fec:	f005 f9da 	bl	801f3a4 <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 8019ff0:	68fb      	ldr	r3, [r7, #12]
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	33e0      	adds	r3, #224	; 0xe0
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	f107 0210 	add.w	r2, r7, #16
 8019ffc:	4611      	mov	r1, r2
 8019ffe:	68f8      	ldr	r0, [r7, #12]
 801a000:	4798      	blx	r3
    return *this;
 801a002:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801a004:	f107 0310 	add.w	r3, r7, #16
 801a008:	4618      	mov	r0, r3
 801a00a:	f005 f93b 	bl	801f284 <_ZN14MockNamedValueD1Ev>
    return *this;
 801a00e:	4623      	mov	r3, r4
}
 801a010:	4618      	mov	r0, r3
 801a012:	374c      	adds	r7, #76	; 0x4c
 801a014:	46bd      	mov	sp, r7
 801a016:	bd90      	pop	{r4, r7, pc}

0801a018 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801a018:	b5b0      	push	{r4, r5, r7, lr}
 801a01a:	b086      	sub	sp, #24
 801a01c:	af02      	add	r7, sp, #8
 801a01e:	60f8      	str	r0, [r7, #12]
 801a020:	60b9      	str	r1, [r7, #8]
 801a022:	4639      	mov	r1, r7
 801a024:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801a028:	f7fb ffc0 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801a02c:	4604      	mov	r4, r0
 801a02e:	6823      	ldr	r3, [r4, #0]
 801a030:	3368      	adds	r3, #104	; 0x68
 801a032:	681d      	ldr	r5, [r3, #0]
 801a034:	f7fb ffca 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a038:	4603      	mov	r3, r0
 801a03a:	9300      	str	r3, [sp, #0]
 801a03c:	f44f 7385 	mov.w	r3, #266	; 0x10a
 801a040:	4a04      	ldr	r2, [pc, #16]	; (801a054 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801a042:	4905      	ldr	r1, [pc, #20]	; (801a058 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 801a044:	4620      	mov	r0, r4
 801a046:	47a8      	blx	r5
    return *this;
 801a048:	68fb      	ldr	r3, [r7, #12]
}
 801a04a:	4618      	mov	r0, r3
 801a04c:	3710      	adds	r7, #16
 801a04e:	46bd      	mov	sp, r7
 801a050:	bdb0      	pop	{r4, r5, r7, pc}
 801a052:	bf00      	nop
 801a054:	08028174 	.word	0x08028174
 801a058:	08028190 	.word	0x08028190

0801a05c <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801a05c:	b5b0      	push	{r4, r5, r7, lr}
 801a05e:	b086      	sub	sp, #24
 801a060:	af02      	add	r7, sp, #8
 801a062:	60f8      	str	r0, [r7, #12]
 801a064:	60b9      	str	r1, [r7, #8]
 801a066:	4639      	mov	r1, r7
 801a068:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801a06c:	f7fb ff9e 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801a070:	4604      	mov	r4, r0
 801a072:	6823      	ldr	r3, [r4, #0]
 801a074:	3368      	adds	r3, #104	; 0x68
 801a076:	681d      	ldr	r5, [r3, #0]
 801a078:	f7fb ffa8 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a07c:	4603      	mov	r3, r0
 801a07e:	9300      	str	r3, [sp, #0]
 801a080:	f44f 7388 	mov.w	r3, #272	; 0x110
 801a084:	4a04      	ldr	r2, [pc, #16]	; (801a098 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801a086:	4905      	ldr	r1, [pc, #20]	; (801a09c <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 801a088:	4620      	mov	r0, r4
 801a08a:	47a8      	blx	r5
    return *this;
 801a08c:	68fb      	ldr	r3, [r7, #12]
}
 801a08e:	4618      	mov	r0, r3
 801a090:	3710      	adds	r7, #16
 801a092:	46bd      	mov	sp, r7
 801a094:	bdb0      	pop	{r4, r5, r7, pc}
 801a096:	bf00      	nop
 801a098:	08028174 	.word	0x08028174
 801a09c:	080281bc 	.word	0x080281bc

0801a0a0 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 801a0a0:	b590      	push	{r4, r7, lr}
 801a0a2:	b093      	sub	sp, #76	; 0x4c
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	60f8      	str	r0, [r7, #12]
 801a0a8:	60b9      	str	r1, [r7, #8]
 801a0aa:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 801a0ae:	f107 0310 	add.w	r3, r7, #16
 801a0b2:	68b9      	ldr	r1, [r7, #8]
 801a0b4:	4618      	mov	r0, r3
 801a0b6:	f005 f8bb 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801a0ba:	f107 0310 	add.w	r3, r7, #16
 801a0be:	ed97 0b00 	vldr	d0, [r7]
 801a0c2:	4618      	mov	r0, r3
 801a0c4:	f005 f9f0 	bl	801f4a8 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	33e0      	adds	r3, #224	; 0xe0
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	f107 0210 	add.w	r2, r7, #16
 801a0d4:	4611      	mov	r1, r2
 801a0d6:	68f8      	ldr	r0, [r7, #12]
 801a0d8:	4798      	blx	r3
    return *this;
 801a0da:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801a0dc:	f107 0310 	add.w	r3, r7, #16
 801a0e0:	4618      	mov	r0, r3
 801a0e2:	f005 f8cf 	bl	801f284 <_ZN14MockNamedValueD1Ev>
    return *this;
 801a0e6:	4623      	mov	r3, r4
}
 801a0e8:	4618      	mov	r0, r3
 801a0ea:	374c      	adds	r7, #76	; 0x4c
 801a0ec:	46bd      	mov	sp, r7
 801a0ee:	bd90      	pop	{r4, r7, pc}

0801a0f0 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 801a0f0:	b590      	push	{r4, r7, lr}
 801a0f2:	b093      	sub	sp, #76	; 0x4c
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	60f8      	str	r0, [r7, #12]
 801a0f8:	60b9      	str	r1, [r7, #8]
 801a0fa:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801a0fc:	f107 0310 	add.w	r3, r7, #16
 801a100:	68b9      	ldr	r1, [r7, #8]
 801a102:	4618      	mov	r0, r3
 801a104:	f005 f894 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801a108:	f107 0310 	add.w	r3, r7, #16
 801a10c:	6879      	ldr	r1, [r7, #4]
 801a10e:	4618      	mov	r0, r3
 801a110:	f005 fa74 	bl	801f5fc <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 801a114:	68fb      	ldr	r3, [r7, #12]
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	33e0      	adds	r3, #224	; 0xe0
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	f107 0210 	add.w	r2, r7, #16
 801a120:	4611      	mov	r1, r2
 801a122:	68f8      	ldr	r0, [r7, #12]
 801a124:	4798      	blx	r3
    return *this;
 801a126:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801a128:	f107 0310 	add.w	r3, r7, #16
 801a12c:	4618      	mov	r0, r3
 801a12e:	f005 f8a9 	bl	801f284 <_ZN14MockNamedValueD1Ev>
    return *this;
 801a132:	4623      	mov	r3, r4
}
 801a134:	4618      	mov	r0, r3
 801a136:	374c      	adds	r7, #76	; 0x4c
 801a138:	46bd      	mov	sp, r7
 801a13a:	bd90      	pop	{r4, r7, pc}

0801a13c <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 801a13c:	b590      	push	{r4, r7, lr}
 801a13e:	b093      	sub	sp, #76	; 0x4c
 801a140:	af00      	add	r7, sp, #0
 801a142:	60f8      	str	r0, [r7, #12]
 801a144:	60b9      	str	r1, [r7, #8]
 801a146:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801a148:	f107 0310 	add.w	r3, r7, #16
 801a14c:	68b9      	ldr	r1, [r7, #8]
 801a14e:	4618      	mov	r0, r3
 801a150:	f005 f86e 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801a154:	f107 0310 	add.w	r3, r7, #16
 801a158:	6879      	ldr	r1, [r7, #4]
 801a15a:	4618      	mov	r0, r3
 801a15c:	f005 f9e8 	bl	801f530 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	33e0      	adds	r3, #224	; 0xe0
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	f107 0210 	add.w	r2, r7, #16
 801a16c:	4611      	mov	r1, r2
 801a16e:	68f8      	ldr	r0, [r7, #12]
 801a170:	4798      	blx	r3
    return *this;
 801a172:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801a174:	f107 0310 	add.w	r3, r7, #16
 801a178:	4618      	mov	r0, r3
 801a17a:	f005 f883 	bl	801f284 <_ZN14MockNamedValueD1Ev>
    return *this;
 801a17e:	4623      	mov	r3, r4
}
 801a180:	4618      	mov	r0, r3
 801a182:	374c      	adds	r7, #76	; 0x4c
 801a184:	46bd      	mov	sp, r7
 801a186:	bd90      	pop	{r4, r7, pc}

0801a188 <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801a188:	b590      	push	{r4, r7, lr}
 801a18a:	b093      	sub	sp, #76	; 0x4c
 801a18c:	af00      	add	r7, sp, #0
 801a18e:	60f8      	str	r0, [r7, #12]
 801a190:	60b9      	str	r1, [r7, #8]
 801a192:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801a194:	f107 0310 	add.w	r3, r7, #16
 801a198:	68b9      	ldr	r1, [r7, #8]
 801a19a:	4618      	mov	r0, r3
 801a19c:	f005 f848 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801a1a0:	f107 0310 	add.w	r3, r7, #16
 801a1a4:	6879      	ldr	r1, [r7, #4]
 801a1a6:	4618      	mov	r0, r3
 801a1a8:	f005 f9e4 	bl	801f574 <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	33e0      	adds	r3, #224	; 0xe0
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	f107 0210 	add.w	r2, r7, #16
 801a1b8:	4611      	mov	r1, r2
 801a1ba:	68f8      	ldr	r0, [r7, #12]
 801a1bc:	4798      	blx	r3
    return *this;
 801a1be:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801a1c0:	f107 0310 	add.w	r3, r7, #16
 801a1c4:	4618      	mov	r0, r3
 801a1c6:	f005 f85d 	bl	801f284 <_ZN14MockNamedValueD1Ev>
    return *this;
 801a1ca:	4623      	mov	r3, r4
}
 801a1cc:	4618      	mov	r0, r3
 801a1ce:	374c      	adds	r7, #76	; 0x4c
 801a1d0:	46bd      	mov	sp, r7
 801a1d2:	bd90      	pop	{r4, r7, pc}

0801a1d4 <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801a1d4:	b590      	push	{r4, r7, lr}
 801a1d6:	b093      	sub	sp, #76	; 0x4c
 801a1d8:	af00      	add	r7, sp, #0
 801a1da:	60f8      	str	r0, [r7, #12]
 801a1dc:	60b9      	str	r1, [r7, #8]
 801a1de:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801a1e0:	f107 0310 	add.w	r3, r7, #16
 801a1e4:	68b9      	ldr	r1, [r7, #8]
 801a1e6:	4618      	mov	r0, r3
 801a1e8:	f005 f822 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801a1ec:	f107 0310 	add.w	r3, r7, #16
 801a1f0:	6879      	ldr	r1, [r7, #4]
 801a1f2:	4618      	mov	r0, r3
 801a1f4:	f005 f9e0 	bl	801f5b8 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	33e0      	adds	r3, #224	; 0xe0
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	f107 0210 	add.w	r2, r7, #16
 801a204:	4611      	mov	r1, r2
 801a206:	68f8      	ldr	r0, [r7, #12]
 801a208:	4798      	blx	r3
    return *this;
 801a20a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801a20c:	f107 0310 	add.w	r3, r7, #16
 801a210:	4618      	mov	r0, r3
 801a212:	f005 f837 	bl	801f284 <_ZN14MockNamedValueD1Ev>
    return *this;
 801a216:	4623      	mov	r3, r4
}
 801a218:	4618      	mov	r0, r3
 801a21a:	374c      	adds	r7, #76	; 0x4c
 801a21c:	46bd      	mov	sp, r7
 801a21e:	bd90      	pop	{r4, r7, pc}

0801a220 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801a220:	b590      	push	{r4, r7, lr}
 801a222:	b093      	sub	sp, #76	; 0x4c
 801a224:	af00      	add	r7, sp, #0
 801a226:	60f8      	str	r0, [r7, #12]
 801a228:	60b9      	str	r1, [r7, #8]
 801a22a:	607a      	str	r2, [r7, #4]
 801a22c:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 801a22e:	f107 0310 	add.w	r3, r7, #16
 801a232:	68b9      	ldr	r1, [r7, #8]
 801a234:	4618      	mov	r0, r3
 801a236:	f004 fffb 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 801a23a:	f107 0310 	add.w	r3, r7, #16
 801a23e:	683a      	ldr	r2, [r7, #0]
 801a240:	6879      	ldr	r1, [r7, #4]
 801a242:	4618      	mov	r0, r3
 801a244:	f005 f9fc 	bl	801f640 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 801a248:	68fb      	ldr	r3, [r7, #12]
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	33e0      	adds	r3, #224	; 0xe0
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	f107 0210 	add.w	r2, r7, #16
 801a254:	4611      	mov	r1, r2
 801a256:	68f8      	ldr	r0, [r7, #12]
 801a258:	4798      	blx	r3
    return *this;
 801a25a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801a25c:	f107 0310 	add.w	r3, r7, #16
 801a260:	4618      	mov	r0, r3
 801a262:	f005 f80f 	bl	801f284 <_ZN14MockNamedValueD1Ev>
    return *this;
 801a266:	4623      	mov	r3, r4
}
 801a268:	4618      	mov	r0, r3
 801a26a:	374c      	adds	r7, #76	; 0x4c
 801a26c:	46bd      	mov	sp, r7
 801a26e:	bd90      	pop	{r4, r7, pc}

0801a270 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 801a270:	b590      	push	{r4, r7, lr}
 801a272:	b0a1      	sub	sp, #132	; 0x84
 801a274:	af00      	add	r7, sp, #0
 801a276:	60f8      	str	r0, [r7, #12]
 801a278:	60b9      	str	r1, [r7, #8]
 801a27a:	607a      	str	r2, [r7, #4]
 801a27c:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 801a27e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a282:	6879      	ldr	r1, [r7, #4]
 801a284:	4618      	mov	r0, r3
 801a286:	f004 ffd3 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 801a28a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a28e:	683a      	ldr	r2, [r7, #0]
 801a290:	68b9      	ldr	r1, [r7, #8]
 801a292:	4618      	mov	r0, r3
 801a294:	f005 f9fa 	bl	801f68c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 801a298:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a29c:	4618      	mov	r0, r3
 801a29e:	f005 fdc7 	bl	801fe30 <_ZNK14MockNamedValue13getComparatorEv>
 801a2a2:	4603      	mov	r3, r0
 801a2a4:	2b00      	cmp	r3, #0
 801a2a6:	bf0c      	ite	eq
 801a2a8:	2301      	moveq	r3, #1
 801a2aa:	2300      	movne	r3, #0
 801a2ac:	b2db      	uxtb	r3, r3
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	d01c      	beq.n	801a2ec <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 801a2b2:	68fb      	ldr	r3, [r7, #12]
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	33cc      	adds	r3, #204	; 0xcc
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	68f8      	ldr	r0, [r7, #12]
 801a2bc:	4798      	blx	r3
 801a2be:	4601      	mov	r1, r0
 801a2c0:	f107 0314 	add.w	r3, r7, #20
 801a2c4:	68ba      	ldr	r2, [r7, #8]
 801a2c6:	4618      	mov	r0, r3
 801a2c8:	f004 fed6 	bl	801f078 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 801a2cc:	68fb      	ldr	r3, [r7, #12]
 801a2ce:	681b      	ldr	r3, [r3, #0]
 801a2d0:	33dc      	adds	r3, #220	; 0xdc
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	f107 0214 	add.w	r2, r7, #20
 801a2d8:	4611      	mov	r1, r2
 801a2da:	68f8      	ldr	r0, [r7, #12]
 801a2dc:	4798      	blx	r3
        return *this;
 801a2de:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 801a2e0:	f107 0314 	add.w	r3, r7, #20
 801a2e4:	4618      	mov	r0, r3
 801a2e6:	f001 fc81 	bl	801bbec <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 801a2ea:	e009      	b.n	801a300 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 801a2ec:	68fb      	ldr	r3, [r7, #12]
 801a2ee:	681b      	ldr	r3, [r3, #0]
 801a2f0:	33e0      	adds	r3, #224	; 0xe0
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801a2f8:	4611      	mov	r1, r2
 801a2fa:	68f8      	ldr	r0, [r7, #12]
 801a2fc:	4798      	blx	r3
    return *this;
 801a2fe:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801a300:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a304:	4618      	mov	r0, r3
 801a306:	f004 ffbd 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 801a30a:	4623      	mov	r3, r4
}
 801a30c:	4618      	mov	r0, r3
 801a30e:	3784      	adds	r7, #132	; 0x84
 801a310:	46bd      	mov	sp, r7
 801a312:	bd90      	pop	{r4, r7, pc}

0801a314 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 801a314:	b590      	push	{r4, r7, lr}
 801a316:	b095      	sub	sp, #84	; 0x54
 801a318:	af00      	add	r7, sp, #0
 801a31a:	60f8      	str	r0, [r7, #12]
 801a31c:	60b9      	str	r1, [r7, #8]
 801a31e:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 801a320:	68fb      	ldr	r3, [r7, #12]
 801a322:	681b      	ldr	r3, [r3, #0]
 801a324:	33f0      	adds	r3, #240	; 0xf0
 801a326:	681c      	ldr	r4, [r3, #0]
 801a328:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a32c:	4917      	ldr	r1, [pc, #92]	; (801a38c <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 801a32e:	4618      	mov	r0, r3
 801a330:	f7f4 fa59 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801a334:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	68b9      	ldr	r1, [r7, #8]
 801a33c:	68f8      	ldr	r0, [r7, #12]
 801a33e:	47a0      	blx	r4
 801a340:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a344:	4618      	mov	r0, r3
 801a346:	f7f4 fe06 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 801a34a:	f107 0310 	add.w	r3, r7, #16
 801a34e:	68b9      	ldr	r1, [r7, #8]
 801a350:	4618      	mov	r0, r3
 801a352:	f004 ff6d 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 801a356:	f107 0310 	add.w	r3, r7, #16
 801a35a:	6879      	ldr	r1, [r7, #4]
 801a35c:	4618      	mov	r0, r3
 801a35e:	f005 f8e7 	bl	801f530 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 801a362:	68fb      	ldr	r3, [r7, #12]
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	33e4      	adds	r3, #228	; 0xe4
 801a368:	681b      	ldr	r3, [r3, #0]
 801a36a:	f107 0210 	add.w	r2, r7, #16
 801a36e:	4611      	mov	r1, r2
 801a370:	68f8      	ldr	r0, [r7, #12]
 801a372:	4798      	blx	r3

    return *this;
 801a374:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 801a376:	f107 0310 	add.w	r3, r7, #16
 801a37a:	4618      	mov	r0, r3
 801a37c:	f004 ff82 	bl	801f284 <_ZN14MockNamedValueD1Ev>
    return *this;
 801a380:	4623      	mov	r3, r4
}
 801a382:	4618      	mov	r0, r3
 801a384:	3754      	adds	r7, #84	; 0x54
 801a386:	46bd      	mov	sp, r7
 801a388:	bd90      	pop	{r4, r7, pc}
 801a38a:	bf00      	nop
 801a38c:	0802816c 	.word	0x0802816c

0801a390 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 801a390:	b590      	push	{r4, r7, lr}
 801a392:	b093      	sub	sp, #76	; 0x4c
 801a394:	af00      	add	r7, sp, #0
 801a396:	60f8      	str	r0, [r7, #12]
 801a398:	60b9      	str	r1, [r7, #8]
 801a39a:	607a      	str	r2, [r7, #4]
 801a39c:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	33f0      	adds	r3, #240	; 0xf0
 801a3a4:	681c      	ldr	r4, [r3, #0]
 801a3a6:	683b      	ldr	r3, [r7, #0]
 801a3a8:	68ba      	ldr	r2, [r7, #8]
 801a3aa:	6879      	ldr	r1, [r7, #4]
 801a3ac:	68f8      	ldr	r0, [r7, #12]
 801a3ae:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 801a3b0:	f107 0310 	add.w	r3, r7, #16
 801a3b4:	6879      	ldr	r1, [r7, #4]
 801a3b6:	4618      	mov	r0, r3
 801a3b8:	f004 ff3a 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 801a3bc:	f107 0310 	add.w	r3, r7, #16
 801a3c0:	683a      	ldr	r2, [r7, #0]
 801a3c2:	68b9      	ldr	r1, [r7, #8]
 801a3c4:	4618      	mov	r0, r3
 801a3c6:	f005 f961 	bl	801f68c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 801a3ca:	68fb      	ldr	r3, [r7, #12]
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	33e4      	adds	r3, #228	; 0xe4
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	f107 0210 	add.w	r2, r7, #16
 801a3d6:	4611      	mov	r1, r2
 801a3d8:	68f8      	ldr	r0, [r7, #12]
 801a3da:	4798      	blx	r3

    return *this;
 801a3dc:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 801a3de:	f107 0310 	add.w	r3, r7, #16
 801a3e2:	4618      	mov	r0, r3
 801a3e4:	f004 ff4e 	bl	801f284 <_ZN14MockNamedValueD1Ev>
    return *this;
 801a3e8:	4623      	mov	r3, r4
}
 801a3ea:	4618      	mov	r0, r3
 801a3ec:	374c      	adds	r7, #76	; 0x4c
 801a3ee:	46bd      	mov	sp, r7
 801a3f0:	bd90      	pop	{r4, r7, pc}

0801a3f2 <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 801a3f2:	b480      	push	{r7}
 801a3f4:	b083      	sub	sp, #12
 801a3f6:	af00      	add	r7, sp, #0
 801a3f8:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	7d1b      	ldrb	r3, [r3, #20]
 801a3fe:	2b02      	cmp	r3, #2
 801a400:	bf0c      	ite	eq
 801a402:	2301      	moveq	r3, #1
 801a404:	2300      	movne	r3, #0
 801a406:	b2db      	uxtb	r3, r3
}
 801a408:	4618      	mov	r0, r3
 801a40a:	370c      	adds	r7, #12
 801a40c:	46bd      	mov	sp, r7
 801a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a412:	4770      	bx	lr

0801a414 <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 801a414:	b480      	push	{r7}
 801a416:	b083      	sub	sp, #12
 801a418:	af00      	add	r7, sp, #0
 801a41a:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	7d1b      	ldrb	r3, [r3, #20]
 801a420:	2b01      	cmp	r3, #1
 801a422:	bf0c      	ite	eq
 801a424:	2301      	moveq	r3, #1
 801a426:	2300      	movne	r3, #0
 801a428:	b2db      	uxtb	r3, r3
}
 801a42a:	4618      	mov	r0, r3
 801a42c:	370c      	adds	r7, #12
 801a42e:	46bd      	mov	sp, r7
 801a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a434:	4770      	bx	lr
	...

0801a438 <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 801a438:	b5b0      	push	{r4, r5, r7, lr}
 801a43a:	b096      	sub	sp, #88	; 0x58
 801a43c:	af02      	add	r7, sp, #8
 801a43e:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	7d5b      	ldrb	r3, [r3, #21]
 801a444:	2b00      	cmp	r3, #0
 801a446:	f040 80bc 	bne.w	801a5c2 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	2201      	movs	r2, #1
 801a44e:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	7d1b      	ldrb	r3, [r3, #20]
 801a454:	2b00      	cmp	r3, #0
 801a456:	d014      	beq.n	801a482 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	7d1b      	ldrb	r3, [r3, #20]
 801a45c:	2b02      	cmp	r3, #2
 801a45e:	d10a      	bne.n	801a476 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	6998      	ldr	r0, [r3, #24]
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	699b      	ldr	r3, [r3, #24]
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	33d8      	adds	r3, #216	; 0xd8
 801a46c:	681b      	ldr	r3, [r3, #0]
 801a46e:	687a      	ldr	r2, [r7, #4]
 801a470:	68d2      	ldr	r2, [r2, #12]
 801a472:	4611      	mov	r1, r2
 801a474:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	331c      	adds	r3, #28
 801a47a:	4618      	mov	r0, r3
 801a47c:	f003 fe07 	bl	801e08e <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 801a480:	e0a0      	b.n	801a5c4 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	331c      	adds	r3, #28
 801a486:	4618      	mov	r0, r3
 801a488:	f003 fac3 	bl	801da12 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 801a48c:	4603      	mov	r3, r0
 801a48e:	2b00      	cmp	r3, #0
 801a490:	d00f      	beq.n	801a4b2 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 801a492:	f7fb fd8b 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801a496:	4604      	mov	r4, r0
 801a498:	6823      	ldr	r3, [r4, #0]
 801a49a:	3368      	adds	r3, #104	; 0x68
 801a49c:	681d      	ldr	r5, [r3, #0]
 801a49e:	f7fb fd95 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a4a2:	4603      	mov	r3, r0
 801a4a4:	9300      	str	r3, [sp, #0]
 801a4a6:	f240 1385 	movw	r3, #389	; 0x185
 801a4aa:	4a48      	ldr	r2, [pc, #288]	; (801a5cc <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 801a4ac:	4948      	ldr	r1, [pc, #288]	; (801a5d0 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 801a4ae:	4620      	mov	r0, r4
 801a4b0:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	331c      	adds	r3, #28
 801a4b6:	4618      	mov	r0, r3
 801a4b8:	f003 fd5f 	bl	801df7a <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 801a4bc:	4602      	mov	r2, r0
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	699b      	ldr	r3, [r3, #24]
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d01f      	beq.n	801a50a <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	699a      	ldr	r2, [r3, #24]
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	699b      	ldr	r3, [r3, #24]
 801a4d2:	681b      	ldr	r3, [r3, #0]
 801a4d4:	33e4      	adds	r3, #228	; 0xe4
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	4610      	mov	r0, r2
 801a4da:	4798      	blx	r3
        callHasSucceeded();
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	33d0      	adds	r3, #208	; 0xd0
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	6878      	ldr	r0, [r7, #4]
 801a4e6:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	6998      	ldr	r0, [r3, #24]
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	699b      	ldr	r3, [r3, #24]
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	33d8      	adds	r3, #216	; 0xd8
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	687a      	ldr	r2, [r7, #4]
 801a4f8:	68d2      	ldr	r2, [r2, #12]
 801a4fa:	4611      	mov	r1, r2
 801a4fc:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	331c      	adds	r3, #28
 801a502:	4618      	mov	r0, r3
 801a504:	f003 fdc3 	bl	801e08e <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 801a508:	e05c      	b.n	801a5c4 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	331c      	adds	r3, #28
 801a50e:	4618      	mov	r0, r3
 801a510:	f003 ffc4 	bl	801e49c <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 801a514:	4603      	mov	r3, r0
 801a516:	2b00      	cmp	r3, #0
 801a518:	d029      	beq.n	801a56e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	681b      	ldr	r3, [r3, #0]
 801a51e:	33cc      	adds	r3, #204	; 0xcc
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	6878      	ldr	r0, [r7, #4]
 801a524:	4798      	blx	r3
 801a526:	4604      	mov	r4, r0
 801a528:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a52c:	6879      	ldr	r1, [r7, #4]
 801a52e:	4618      	mov	r0, r3
 801a530:	f7ff f93b 	bl	80197aa <_ZNK21MockCheckedActualCall7getNameEv>
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a538:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a53c:	f107 000c 	add.w	r0, r7, #12
 801a540:	4621      	mov	r1, r4
 801a542:	f004 fd21 	bl	801ef88 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 801a546:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a54a:	4618      	mov	r0, r3
 801a54c:	f7f4 fd03 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	681b      	ldr	r3, [r3, #0]
 801a554:	33dc      	adds	r3, #220	; 0xdc
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	f107 020c 	add.w	r2, r7, #12
 801a55c:	4611      	mov	r1, r2
 801a55e:	6878      	ldr	r0, [r7, #4]
 801a560:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801a562:	f107 030c 	add.w	r3, r7, #12
 801a566:	4618      	mov	r0, r3
 801a568:	f001 fb62 	bl	801bc30 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 801a56c:	e02a      	b.n	801a5c4 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	33cc      	adds	r3, #204	; 0xcc
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	6878      	ldr	r0, [r7, #4]
 801a578:	4798      	blx	r3
 801a57a:	4604      	mov	r4, r0
 801a57c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a580:	6879      	ldr	r1, [r7, #4]
 801a582:	4618      	mov	r0, r3
 801a584:	f7ff f911 	bl	80197aa <_ZNK21MockCheckedActualCall7getNameEv>
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a58c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801a590:	f107 000c 	add.w	r0, r7, #12
 801a594:	4621      	mov	r1, r4
 801a596:	f004 fe05 	bl	801f1a4 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 801a59a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a59e:	4618      	mov	r0, r3
 801a5a0:	f7f4 fcd9 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	681b      	ldr	r3, [r3, #0]
 801a5a8:	33dc      	adds	r3, #220	; 0xdc
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	f107 020c 	add.w	r2, r7, #12
 801a5b0:	4611      	mov	r1, r2
 801a5b2:	6878      	ldr	r0, [r7, #4]
 801a5b4:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801a5b6:	f107 030c 	add.w	r3, r7, #12
 801a5ba:	4618      	mov	r0, r3
 801a5bc:	f001 fb5a 	bl	801bc74 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801a5c0:	e000      	b.n	801a5c4 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 801a5c2:	bf00      	nop
    }
}
 801a5c4:	3750      	adds	r7, #80	; 0x50
 801a5c6:	46bd      	mov	sp, r7
 801a5c8:	bdb0      	pop	{r4, r5, r7, pc}
 801a5ca:	bf00      	nop
 801a5cc:	08028174 	.word	0x08028174
 801a5d0:	080281dc 	.word	0x080281dc

0801a5d4 <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 801a5d4:	b480      	push	{r7}
 801a5d6:	b083      	sub	sp, #12
 801a5d8:	af00      	add	r7, sp, #0
 801a5da:	6078      	str	r0, [r7, #4]
 801a5dc:	460b      	mov	r3, r1
 801a5de:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	78fa      	ldrb	r2, [r7, #3]
 801a5e4:	751a      	strb	r2, [r3, #20]
}
 801a5e6:	bf00      	nop
 801a5e8:	370c      	adds	r7, #12
 801a5ea:	46bd      	mov	sp, r7
 801a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5f0:	4770      	bx	lr
	...

0801a5f4 <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 801a5f4:	b580      	push	{r7, lr}
 801a5f6:	b084      	sub	sp, #16
 801a5f8:	af00      	add	r7, sp, #0
 801a5fa:	6078      	str	r0, [r7, #4]
 801a5fc:	6039      	str	r1, [r7, #0]
    checkExpectations();
 801a5fe:	683b      	ldr	r3, [r7, #0]
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	33c4      	adds	r3, #196	; 0xc4
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	6838      	ldr	r0, [r7, #0]
 801a608:	4798      	blx	r3
    if (matchingExpectation_)
 801a60a:	683b      	ldr	r3, [r7, #0]
 801a60c:	699b      	ldr	r3, [r3, #24]
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d00a      	beq.n	801a628 <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 801a612:	683b      	ldr	r3, [r7, #0]
 801a614:	6999      	ldr	r1, [r3, #24]
 801a616:	683b      	ldr	r3, [r7, #0]
 801a618:	699b      	ldr	r3, [r3, #24]
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	3394      	adds	r3, #148	; 0x94
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	687a      	ldr	r2, [r7, #4]
 801a622:	4610      	mov	r0, r2
 801a624:	4798      	blx	r3
 801a626:	e010      	b.n	801a64a <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 801a628:	f107 0308 	add.w	r3, r7, #8
 801a62c:	4909      	ldr	r1, [pc, #36]	; (801a654 <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 801a62e:	4618      	mov	r0, r3
 801a630:	f7f4 f8d9 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801a634:	f107 0308 	add.w	r3, r7, #8
 801a638:	4619      	mov	r1, r3
 801a63a:	6878      	ldr	r0, [r7, #4]
 801a63c:	f004 fdf8 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
 801a640:	f107 0308 	add.w	r3, r7, #8
 801a644:	4618      	mov	r0, r3
 801a646:	f7f4 fc86 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 801a64a:	6878      	ldr	r0, [r7, #4]
 801a64c:	3710      	adds	r7, #16
 801a64e:	46bd      	mov	sp, r7
 801a650:	bd80      	pop	{r7, pc}
 801a652:	bf00      	nop
 801a654:	08028258 	.word	0x08028258

0801a658 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 801a658:	b580      	push	{r7, lr}
 801a65a:	b082      	sub	sp, #8
 801a65c:	af00      	add	r7, sp, #0
 801a65e:	6078      	str	r0, [r7, #4]
 801a660:	460b      	mov	r3, r1
 801a662:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	3350      	adds	r3, #80	; 0x50
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	6878      	ldr	r0, [r7, #4]
 801a66e:	4798      	blx	r3
 801a670:	4603      	mov	r3, r0
 801a672:	f083 0301 	eor.w	r3, r3, #1
 801a676:	b2db      	uxtb	r3, r3
 801a678:	2b00      	cmp	r3, #0
 801a67a:	d001      	beq.n	801a680 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 801a67c:	78fb      	ldrb	r3, [r7, #3]
 801a67e:	e007      	b.n	801a690 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	335c      	adds	r3, #92	; 0x5c
 801a686:	681b      	ldr	r3, [r3, #0]
 801a688:	6878      	ldr	r0, [r7, #4]
 801a68a:	4798      	blx	r3
 801a68c:	4603      	mov	r3, r0
 801a68e:	bf00      	nop
}
 801a690:	4618      	mov	r0, r3
 801a692:	3708      	adds	r7, #8
 801a694:	46bd      	mov	sp, r7
 801a696:	bd80      	pop	{r7, pc}

0801a698 <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 801a698:	b590      	push	{r4, r7, lr}
 801a69a:	b091      	sub	sp, #68	; 0x44
 801a69c:	af00      	add	r7, sp, #0
 801a69e:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	681b      	ldr	r3, [r3, #0]
 801a6a4:	3354      	adds	r3, #84	; 0x54
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	f107 0208 	add.w	r2, r7, #8
 801a6ac:	6879      	ldr	r1, [r7, #4]
 801a6ae:	4610      	mov	r0, r2
 801a6b0:	4798      	blx	r3
 801a6b2:	f107 0308 	add.w	r3, r7, #8
 801a6b6:	4618      	mov	r0, r3
 801a6b8:	f005 f898 	bl	801f7ec <_ZNK14MockNamedValue12getBoolValueEv>
 801a6bc:	4603      	mov	r3, r0
 801a6be:	461c      	mov	r4, r3
 801a6c0:	bf00      	nop
 801a6c2:	f107 0308 	add.w	r3, r7, #8
 801a6c6:	4618      	mov	r0, r3
 801a6c8:	f004 fddc 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 801a6cc:	4623      	mov	r3, r4
}
 801a6ce:	4618      	mov	r0, r3
 801a6d0:	3744      	adds	r7, #68	; 0x44
 801a6d2:	46bd      	mov	sp, r7
 801a6d4:	bd90      	pop	{r4, r7, pc}

0801a6d6 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 801a6d6:	b580      	push	{r7, lr}
 801a6d8:	b082      	sub	sp, #8
 801a6da:	af00      	add	r7, sp, #0
 801a6dc:	6078      	str	r0, [r7, #4]
 801a6de:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	681b      	ldr	r3, [r3, #0]
 801a6e4:	3350      	adds	r3, #80	; 0x50
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	6878      	ldr	r0, [r7, #4]
 801a6ea:	4798      	blx	r3
 801a6ec:	4603      	mov	r3, r0
 801a6ee:	f083 0301 	eor.w	r3, r3, #1
 801a6f2:	b2db      	uxtb	r3, r3
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	d001      	beq.n	801a6fc <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 801a6f8:	683b      	ldr	r3, [r7, #0]
 801a6fa:	e007      	b.n	801a70c <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	3364      	adds	r3, #100	; 0x64
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	6878      	ldr	r0, [r7, #4]
 801a706:	4798      	blx	r3
 801a708:	4603      	mov	r3, r0
 801a70a:	bf00      	nop
}
 801a70c:	4618      	mov	r0, r3
 801a70e:	3708      	adds	r7, #8
 801a710:	46bd      	mov	sp, r7
 801a712:	bd80      	pop	{r7, pc}

0801a714 <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 801a714:	b590      	push	{r4, r7, lr}
 801a716:	b091      	sub	sp, #68	; 0x44
 801a718:	af00      	add	r7, sp, #0
 801a71a:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	3354      	adds	r3, #84	; 0x54
 801a722:	681b      	ldr	r3, [r3, #0]
 801a724:	f107 0208 	add.w	r2, r7, #8
 801a728:	6879      	ldr	r1, [r7, #4]
 801a72a:	4610      	mov	r0, r2
 801a72c:	4798      	blx	r3
 801a72e:	f107 0308 	add.w	r3, r7, #8
 801a732:	4618      	mov	r0, r3
 801a734:	f005 f8d2 	bl	801f8dc <_ZNK14MockNamedValue11getIntValueEv>
 801a738:	4604      	mov	r4, r0
 801a73a:	bf00      	nop
 801a73c:	f107 0308 	add.w	r3, r7, #8
 801a740:	4618      	mov	r0, r3
 801a742:	f004 fd9f 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 801a746:	4623      	mov	r3, r4
}
 801a748:	4618      	mov	r0, r3
 801a74a:	3744      	adds	r7, #68	; 0x44
 801a74c:	46bd      	mov	sp, r7
 801a74e:	bd90      	pop	{r4, r7, pc}

0801a750 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 801a750:	b590      	push	{r4, r7, lr}
 801a752:	b091      	sub	sp, #68	; 0x44
 801a754:	af00      	add	r7, sp, #0
 801a756:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	3354      	adds	r3, #84	; 0x54
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	f107 0208 	add.w	r2, r7, #8
 801a764:	6879      	ldr	r1, [r7, #4]
 801a766:	4610      	mov	r0, r2
 801a768:	4798      	blx	r3
 801a76a:	f107 0308 	add.w	r3, r7, #8
 801a76e:	4618      	mov	r0, r3
 801a770:	f005 f93e 	bl	801f9f0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 801a774:	4604      	mov	r4, r0
 801a776:	bf00      	nop
 801a778:	f107 0308 	add.w	r3, r7, #8
 801a77c:	4618      	mov	r0, r3
 801a77e:	f004 fd81 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 801a782:	4623      	mov	r3, r4
}
 801a784:	4618      	mov	r0, r3
 801a786:	3744      	adds	r7, #68	; 0x44
 801a788:	46bd      	mov	sp, r7
 801a78a:	bd90      	pop	{r4, r7, pc}

0801a78c <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 801a78c:	b580      	push	{r7, lr}
 801a78e:	b082      	sub	sp, #8
 801a790:	af00      	add	r7, sp, #0
 801a792:	6078      	str	r0, [r7, #4]
 801a794:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	3350      	adds	r3, #80	; 0x50
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	6878      	ldr	r0, [r7, #4]
 801a7a0:	4798      	blx	r3
 801a7a2:	4603      	mov	r3, r0
 801a7a4:	f083 0301 	eor.w	r3, r3, #1
 801a7a8:	b2db      	uxtb	r3, r3
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d001      	beq.n	801a7b2 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 801a7ae:	683b      	ldr	r3, [r7, #0]
 801a7b0:	e007      	b.n	801a7c2 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	3368      	adds	r3, #104	; 0x68
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	6878      	ldr	r0, [r7, #4]
 801a7bc:	4798      	blx	r3
 801a7be:	4603      	mov	r3, r0
 801a7c0:	bf00      	nop
}
 801a7c2:	4618      	mov	r0, r3
 801a7c4:	3708      	adds	r7, #8
 801a7c6:	46bd      	mov	sp, r7
 801a7c8:	bd80      	pop	{r7, pc}

0801a7ca <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 801a7ca:	b590      	push	{r4, r7, lr}
 801a7cc:	b091      	sub	sp, #68	; 0x44
 801a7ce:	af00      	add	r7, sp, #0
 801a7d0:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	3354      	adds	r3, #84	; 0x54
 801a7d8:	681b      	ldr	r3, [r3, #0]
 801a7da:	f107 0208 	add.w	r2, r7, #8
 801a7de:	6879      	ldr	r1, [r7, #4]
 801a7e0:	4610      	mov	r0, r2
 801a7e2:	4798      	blx	r3
 801a7e4:	f107 0308 	add.w	r3, r7, #8
 801a7e8:	4618      	mov	r0, r3
 801a7ea:	f005 f89f 	bl	801f92c <_ZNK14MockNamedValue15getLongIntValueEv>
 801a7ee:	4604      	mov	r4, r0
 801a7f0:	bf00      	nop
 801a7f2:	f107 0308 	add.w	r3, r7, #8
 801a7f6:	4618      	mov	r0, r3
 801a7f8:	f004 fd44 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 801a7fc:	4623      	mov	r3, r4
}
 801a7fe:	4618      	mov	r0, r3
 801a800:	3744      	adds	r7, #68	; 0x44
 801a802:	46bd      	mov	sp, r7
 801a804:	bd90      	pop	{r4, r7, pc}

0801a806 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 801a806:	b580      	push	{r7, lr}
 801a808:	b082      	sub	sp, #8
 801a80a:	af00      	add	r7, sp, #0
 801a80c:	6078      	str	r0, [r7, #4]
 801a80e:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	3350      	adds	r3, #80	; 0x50
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	6878      	ldr	r0, [r7, #4]
 801a81a:	4798      	blx	r3
 801a81c:	4603      	mov	r3, r0
 801a81e:	f083 0301 	eor.w	r3, r3, #1
 801a822:	b2db      	uxtb	r3, r3
 801a824:	2b00      	cmp	r3, #0
 801a826:	d001      	beq.n	801a82c <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 801a828:	683b      	ldr	r3, [r7, #0]
 801a82a:	e007      	b.n	801a83c <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	3370      	adds	r3, #112	; 0x70
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	6878      	ldr	r0, [r7, #4]
 801a836:	4798      	blx	r3
 801a838:	4603      	mov	r3, r0
 801a83a:	bf00      	nop
}
 801a83c:	4618      	mov	r0, r3
 801a83e:	3708      	adds	r7, #8
 801a840:	46bd      	mov	sp, r7
 801a842:	bd80      	pop	{r7, pc}

0801a844 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 801a844:	b5b0      	push	{r4, r5, r7, lr}
 801a846:	b084      	sub	sp, #16
 801a848:	af02      	add	r7, sp, #8
 801a84a:	6078      	str	r0, [r7, #4]
 801a84c:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801a84e:	f7fb fbad 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801a852:	4604      	mov	r4, r0
 801a854:	6823      	ldr	r3, [r4, #0]
 801a856:	3368      	adds	r3, #104	; 0x68
 801a858:	681d      	ldr	r5, [r3, #0]
 801a85a:	f7fb fbb7 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a85e:	4603      	mov	r3, r0
 801a860:	9300      	str	r3, [sp, #0]
 801a862:	f240 13fb 	movw	r3, #507	; 0x1fb
 801a866:	4a06      	ldr	r2, [pc, #24]	; (801a880 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 801a868:	4906      	ldr	r1, [pc, #24]	; (801a884 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 801a86a:	4620      	mov	r0, r4
 801a86c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801a86e:	2100      	movs	r1, #0
 801a870:	6878      	ldr	r0, [r7, #4]
 801a872:	f7f1 fffb 	bl	800c86c <_ZN18cpputest_ulonglongC1Ei>
}
 801a876:	6878      	ldr	r0, [r7, #4]
 801a878:	3708      	adds	r7, #8
 801a87a:	46bd      	mov	sp, r7
 801a87c:	bdb0      	pop	{r4, r5, r7, pc}
 801a87e:	bf00      	nop
 801a880:	08028174 	.word	0x08028174
 801a884:	08028190 	.word	0x08028190

0801a888 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 801a888:	b5b0      	push	{r4, r5, r7, lr}
 801a88a:	b086      	sub	sp, #24
 801a88c:	af02      	add	r7, sp, #8
 801a88e:	60f8      	str	r0, [r7, #12]
 801a890:	60b9      	str	r1, [r7, #8]
 801a892:	4639      	mov	r1, r7
 801a894:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801a898:	f7fb fb88 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801a89c:	4604      	mov	r4, r0
 801a89e:	6823      	ldr	r3, [r4, #0]
 801a8a0:	3368      	adds	r3, #104	; 0x68
 801a8a2:	681d      	ldr	r5, [r3, #0]
 801a8a4:	f7fb fb92 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a8a8:	4603      	mov	r3, r0
 801a8aa:	9300      	str	r3, [sp, #0]
 801a8ac:	f240 2301 	movw	r3, #513	; 0x201
 801a8b0:	4a06      	ldr	r2, [pc, #24]	; (801a8cc <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 801a8b2:	4907      	ldr	r1, [pc, #28]	; (801a8d0 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 801a8b4:	4620      	mov	r0, r4
 801a8b6:	47a8      	blx	r5
    return default_value;
 801a8b8:	68fb      	ldr	r3, [r7, #12]
 801a8ba:	461a      	mov	r2, r3
 801a8bc:	463b      	mov	r3, r7
 801a8be:	cb03      	ldmia	r3!, {r0, r1}
 801a8c0:	6010      	str	r0, [r2, #0]
 801a8c2:	6051      	str	r1, [r2, #4]
}
 801a8c4:	68f8      	ldr	r0, [r7, #12]
 801a8c6:	3710      	adds	r7, #16
 801a8c8:	46bd      	mov	sp, r7
 801a8ca:	bdb0      	pop	{r4, r5, r7, pc}
 801a8cc:	08028174 	.word	0x08028174
 801a8d0:	08028190 	.word	0x08028190

0801a8d4 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 801a8d4:	b5b0      	push	{r4, r5, r7, lr}
 801a8d6:	b084      	sub	sp, #16
 801a8d8:	af02      	add	r7, sp, #8
 801a8da:	6078      	str	r0, [r7, #4]
 801a8dc:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801a8de:	f7fb fb65 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801a8e2:	4604      	mov	r4, r0
 801a8e4:	6823      	ldr	r3, [r4, #0]
 801a8e6:	3368      	adds	r3, #104	; 0x68
 801a8e8:	681d      	ldr	r5, [r3, #0]
 801a8ea:	f7fb fb6f 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a8ee:	4603      	mov	r3, r0
 801a8f0:	9300      	str	r3, [sp, #0]
 801a8f2:	f240 2307 	movw	r3, #519	; 0x207
 801a8f6:	4a06      	ldr	r2, [pc, #24]	; (801a910 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 801a8f8:	4906      	ldr	r1, [pc, #24]	; (801a914 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 801a8fa:	4620      	mov	r0, r4
 801a8fc:	47a8      	blx	r5
    return cpputest_longlong(0);
 801a8fe:	2100      	movs	r1, #0
 801a900:	6878      	ldr	r0, [r7, #4]
 801a902:	f7f1 ffa7 	bl	800c854 <_ZN17cpputest_longlongC1Ei>
}
 801a906:	6878      	ldr	r0, [r7, #4]
 801a908:	3708      	adds	r7, #8
 801a90a:	46bd      	mov	sp, r7
 801a90c:	bdb0      	pop	{r4, r5, r7, pc}
 801a90e:	bf00      	nop
 801a910:	08028174 	.word	0x08028174
 801a914:	080281bc 	.word	0x080281bc

0801a918 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 801a918:	b5b0      	push	{r4, r5, r7, lr}
 801a91a:	b086      	sub	sp, #24
 801a91c:	af02      	add	r7, sp, #8
 801a91e:	60f8      	str	r0, [r7, #12]
 801a920:	60b9      	str	r1, [r7, #8]
 801a922:	4639      	mov	r1, r7
 801a924:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801a928:	f7fb fb40 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801a92c:	4604      	mov	r4, r0
 801a92e:	6823      	ldr	r3, [r4, #0]
 801a930:	3368      	adds	r3, #104	; 0x68
 801a932:	681d      	ldr	r5, [r3, #0]
 801a934:	f7fb fb4a 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a938:	4603      	mov	r3, r0
 801a93a:	9300      	str	r3, [sp, #0]
 801a93c:	f240 230d 	movw	r3, #525	; 0x20d
 801a940:	4a06      	ldr	r2, [pc, #24]	; (801a95c <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 801a942:	4907      	ldr	r1, [pc, #28]	; (801a960 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 801a944:	4620      	mov	r0, r4
 801a946:	47a8      	blx	r5
    return default_value;
 801a948:	68fb      	ldr	r3, [r7, #12]
 801a94a:	461a      	mov	r2, r3
 801a94c:	463b      	mov	r3, r7
 801a94e:	cb03      	ldmia	r3!, {r0, r1}
 801a950:	6010      	str	r0, [r2, #0]
 801a952:	6051      	str	r1, [r2, #4]
}
 801a954:	68f8      	ldr	r0, [r7, #12]
 801a956:	3710      	adds	r7, #16
 801a958:	46bd      	mov	sp, r7
 801a95a:	bdb0      	pop	{r4, r5, r7, pc}
 801a95c:	08028174 	.word	0x08028174
 801a960:	080281bc 	.word	0x080281bc

0801a964 <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 801a964:	b580      	push	{r7, lr}
 801a966:	ed2d 8b02 	vpush	{d8}
 801a96a:	b090      	sub	sp, #64	; 0x40
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	681b      	ldr	r3, [r3, #0]
 801a974:	3354      	adds	r3, #84	; 0x54
 801a976:	681b      	ldr	r3, [r3, #0]
 801a978:	f107 0208 	add.w	r2, r7, #8
 801a97c:	6879      	ldr	r1, [r7, #4]
 801a97e:	4610      	mov	r0, r2
 801a980:	4798      	blx	r3
 801a982:	f107 0308 	add.w	r3, r7, #8
 801a986:	4618      	mov	r0, r3
 801a988:	f005 f90a 	bl	801fba0 <_ZNK14MockNamedValue14getDoubleValueEv>
 801a98c:	eeb0 8a40 	vmov.f32	s16, s0
 801a990:	eef0 8a60 	vmov.f32	s17, s1
 801a994:	bf00      	nop
 801a996:	f107 0308 	add.w	r3, r7, #8
 801a99a:	4618      	mov	r0, r3
 801a99c:	f004 fc72 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 801a9a0:	eeb0 7a48 	vmov.f32	s14, s16
 801a9a4:	eef0 7a68 	vmov.f32	s15, s17
}
 801a9a8:	eeb0 0a47 	vmov.f32	s0, s14
 801a9ac:	eef0 0a67 	vmov.f32	s1, s15
 801a9b0:	3740      	adds	r7, #64	; 0x40
 801a9b2:	46bd      	mov	sp, r7
 801a9b4:	ecbd 8b02 	vpop	{d8}
 801a9b8:	bd80      	pop	{r7, pc}

0801a9ba <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 801a9ba:	b580      	push	{r7, lr}
 801a9bc:	b084      	sub	sp, #16
 801a9be:	af00      	add	r7, sp, #0
 801a9c0:	60f8      	str	r0, [r7, #12]
 801a9c2:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 801a9c6:	68fb      	ldr	r3, [r7, #12]
 801a9c8:	681b      	ldr	r3, [r3, #0]
 801a9ca:	3350      	adds	r3, #80	; 0x50
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	68f8      	ldr	r0, [r7, #12]
 801a9d0:	4798      	blx	r3
 801a9d2:	4603      	mov	r3, r0
 801a9d4:	f083 0301 	eor.w	r3, r3, #1
 801a9d8:	b2db      	uxtb	r3, r3
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d002      	beq.n	801a9e4 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 801a9de:	ed97 7b00 	vldr	d7, [r7]
 801a9e2:	e00a      	b.n	801a9fa <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 801a9e4:	68fb      	ldr	r3, [r7, #12]
 801a9e6:	681b      	ldr	r3, [r3, #0]
 801a9e8:	3398      	adds	r3, #152	; 0x98
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	68f8      	ldr	r0, [r7, #12]
 801a9ee:	4798      	blx	r3
 801a9f0:	eeb0 7a40 	vmov.f32	s14, s0
 801a9f4:	eef0 7a60 	vmov.f32	s15, s1
 801a9f8:	bf00      	nop
}
 801a9fa:	eeb0 0a47 	vmov.f32	s0, s14
 801a9fe:	eef0 0a67 	vmov.f32	s1, s15
 801aa02:	3710      	adds	r7, #16
 801aa04:	46bd      	mov	sp, r7
 801aa06:	bd80      	pop	{r7, pc}

0801aa08 <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 801aa08:	b590      	push	{r4, r7, lr}
 801aa0a:	b091      	sub	sp, #68	; 0x44
 801aa0c:	af00      	add	r7, sp, #0
 801aa0e:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	681b      	ldr	r3, [r3, #0]
 801aa14:	3354      	adds	r3, #84	; 0x54
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	f107 0208 	add.w	r2, r7, #8
 801aa1c:	6879      	ldr	r1, [r7, #4]
 801aa1e:	4610      	mov	r0, r2
 801aa20:	4798      	blx	r3
 801aa22:	f107 0308 	add.w	r3, r7, #8
 801aa26:	4618      	mov	r0, r3
 801aa28:	f004 ff08 	bl	801f83c <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 801aa2c:	4604      	mov	r4, r0
 801aa2e:	bf00      	nop
 801aa30:	f107 0308 	add.w	r3, r7, #8
 801aa34:	4618      	mov	r0, r3
 801aa36:	f004 fc25 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 801aa3a:	4623      	mov	r3, r4
}
 801aa3c:	4618      	mov	r0, r3
 801aa3e:	3744      	adds	r7, #68	; 0x44
 801aa40:	46bd      	mov	sp, r7
 801aa42:	bd90      	pop	{r4, r7, pc}

0801aa44 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 801aa44:	b580      	push	{r7, lr}
 801aa46:	b082      	sub	sp, #8
 801aa48:	af00      	add	r7, sp, #0
 801aa4a:	6078      	str	r0, [r7, #4]
 801aa4c:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	3350      	adds	r3, #80	; 0x50
 801aa54:	681b      	ldr	r3, [r3, #0]
 801aa56:	6878      	ldr	r0, [r7, #4]
 801aa58:	4798      	blx	r3
 801aa5a:	4603      	mov	r3, r0
 801aa5c:	f083 0301 	eor.w	r3, r3, #1
 801aa60:	b2db      	uxtb	r3, r3
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	d001      	beq.n	801aa6a <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 801aa66:	683b      	ldr	r3, [r7, #0]
 801aa68:	e007      	b.n	801aa7a <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	3388      	adds	r3, #136	; 0x88
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	6878      	ldr	r0, [r7, #4]
 801aa74:	4798      	blx	r3
 801aa76:	4603      	mov	r3, r0
 801aa78:	bf00      	nop
}
 801aa7a:	4618      	mov	r0, r3
 801aa7c:	3708      	adds	r7, #8
 801aa7e:	46bd      	mov	sp, r7
 801aa80:	bd80      	pop	{r7, pc}

0801aa82 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 801aa82:	b580      	push	{r7, lr}
 801aa84:	b082      	sub	sp, #8
 801aa86:	af00      	add	r7, sp, #0
 801aa88:	6078      	str	r0, [r7, #4]
 801aa8a:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	681b      	ldr	r3, [r3, #0]
 801aa90:	3350      	adds	r3, #80	; 0x50
 801aa92:	681b      	ldr	r3, [r3, #0]
 801aa94:	6878      	ldr	r0, [r7, #4]
 801aa96:	4798      	blx	r3
 801aa98:	4603      	mov	r3, r0
 801aa9a:	f083 0301 	eor.w	r3, r3, #1
 801aa9e:	b2db      	uxtb	r3, r3
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d001      	beq.n	801aaa8 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 801aaa4:	683b      	ldr	r3, [r7, #0]
 801aaa6:	e007      	b.n	801aab8 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	33a0      	adds	r3, #160	; 0xa0
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	6878      	ldr	r0, [r7, #4]
 801aab2:	4798      	blx	r3
 801aab4:	4603      	mov	r3, r0
 801aab6:	bf00      	nop
}
 801aab8:	4618      	mov	r0, r3
 801aaba:	3708      	adds	r7, #8
 801aabc:	46bd      	mov	sp, r7
 801aabe:	bd80      	pop	{r7, pc}

0801aac0 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 801aac0:	b590      	push	{r4, r7, lr}
 801aac2:	b091      	sub	sp, #68	; 0x44
 801aac4:	af00      	add	r7, sp, #0
 801aac6:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	3354      	adds	r3, #84	; 0x54
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	f107 0208 	add.w	r2, r7, #8
 801aad4:	6879      	ldr	r1, [r7, #4]
 801aad6:	4610      	mov	r0, r2
 801aad8:	4798      	blx	r3
 801aada:	f107 0308 	add.w	r3, r7, #8
 801aade:	4618      	mov	r0, r3
 801aae0:	f005 f8e2 	bl	801fca8 <_ZNK14MockNamedValue15getPointerValueEv>
 801aae4:	4604      	mov	r4, r0
 801aae6:	bf00      	nop
 801aae8:	f107 0308 	add.w	r3, r7, #8
 801aaec:	4618      	mov	r0, r3
 801aaee:	f004 fbc9 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 801aaf2:	4623      	mov	r3, r4
}
 801aaf4:	4618      	mov	r0, r3
 801aaf6:	3744      	adds	r7, #68	; 0x44
 801aaf8:	46bd      	mov	sp, r7
 801aafa:	bd90      	pop	{r4, r7, pc}

0801aafc <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 801aafc:	b590      	push	{r4, r7, lr}
 801aafe:	b091      	sub	sp, #68	; 0x44
 801ab00:	af00      	add	r7, sp, #0
 801ab02:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	3354      	adds	r3, #84	; 0x54
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	f107 0208 	add.w	r2, r7, #8
 801ab10:	6879      	ldr	r1, [r7, #4]
 801ab12:	4610      	mov	r0, r2
 801ab14:	4798      	blx	r3
 801ab16:	f107 0308 	add.w	r3, r7, #8
 801ab1a:	4618      	mov	r0, r3
 801ab1c:	f005 f8ec 	bl	801fcf8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 801ab20:	4604      	mov	r4, r0
 801ab22:	bf00      	nop
 801ab24:	f107 0308 	add.w	r3, r7, #8
 801ab28:	4618      	mov	r0, r3
 801ab2a:	f004 fbab 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 801ab2e:	4623      	mov	r3, r4
}
 801ab30:	4618      	mov	r0, r3
 801ab32:	3744      	adds	r7, #68	; 0x44
 801ab34:	46bd      	mov	sp, r7
 801ab36:	bd90      	pop	{r4, r7, pc}

0801ab38 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 801ab38:	b580      	push	{r7, lr}
 801ab3a:	b082      	sub	sp, #8
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	6078      	str	r0, [r7, #4]
 801ab40:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	3350      	adds	r3, #80	; 0x50
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	6878      	ldr	r0, [r7, #4]
 801ab4c:	4798      	blx	r3
 801ab4e:	4603      	mov	r3, r0
 801ab50:	f083 0301 	eor.w	r3, r3, #1
 801ab54:	b2db      	uxtb	r3, r3
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d001      	beq.n	801ab5e <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 801ab5a:	683b      	ldr	r3, [r7, #0]
 801ab5c:	e007      	b.n	801ab6e <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	681b      	ldr	r3, [r3, #0]
 801ab62:	33a8      	adds	r3, #168	; 0xa8
 801ab64:	681b      	ldr	r3, [r3, #0]
 801ab66:	6878      	ldr	r0, [r7, #4]
 801ab68:	4798      	blx	r3
 801ab6a:	4603      	mov	r3, r0
 801ab6c:	bf00      	nop
}
 801ab6e:	4618      	mov	r0, r3
 801ab70:	3708      	adds	r7, #8
 801ab72:	46bd      	mov	sp, r7
 801ab74:	bd80      	pop	{r7, pc}

0801ab76 <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 801ab76:	b590      	push	{r4, r7, lr}
 801ab78:	b091      	sub	sp, #68	; 0x44
 801ab7a:	af00      	add	r7, sp, #0
 801ab7c:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	3354      	adds	r3, #84	; 0x54
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	f107 0208 	add.w	r2, r7, #8
 801ab8a:	6879      	ldr	r1, [r7, #4]
 801ab8c:	4610      	mov	r0, r2
 801ab8e:	4798      	blx	r3
 801ab90:	f107 0308 	add.w	r3, r7, #8
 801ab94:	4618      	mov	r0, r3
 801ab96:	f005 f8d7 	bl	801fd48 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 801ab9a:	4604      	mov	r4, r0
 801ab9c:	bf00      	nop
 801ab9e:	f107 0308 	add.w	r3, r7, #8
 801aba2:	4618      	mov	r0, r3
 801aba4:	f004 fb6e 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 801aba8:	4623      	mov	r3, r4
}
 801abaa:	4618      	mov	r0, r3
 801abac:	3744      	adds	r7, #68	; 0x44
 801abae:	46bd      	mov	sp, r7
 801abb0:	bd90      	pop	{r4, r7, pc}

0801abb2 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 801abb2:	b580      	push	{r7, lr}
 801abb4:	b082      	sub	sp, #8
 801abb6:	af00      	add	r7, sp, #0
 801abb8:	6078      	str	r0, [r7, #4]
 801abba:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	3350      	adds	r3, #80	; 0x50
 801abc2:	681b      	ldr	r3, [r3, #0]
 801abc4:	6878      	ldr	r0, [r7, #4]
 801abc6:	4798      	blx	r3
 801abc8:	4603      	mov	r3, r0
 801abca:	f083 0301 	eor.w	r3, r3, #1
 801abce:	b2db      	uxtb	r3, r3
 801abd0:	2b00      	cmp	r3, #0
 801abd2:	d001      	beq.n	801abd8 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 801abd4:	683b      	ldr	r3, [r7, #0]
 801abd6:	e007      	b.n	801abe8 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	33b0      	adds	r3, #176	; 0xb0
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	6878      	ldr	r0, [r7, #4]
 801abe2:	4798      	blx	r3
 801abe4:	4603      	mov	r3, r0
 801abe6:	bf00      	nop
}
 801abe8:	4618      	mov	r0, r3
 801abea:	3708      	adds	r7, #8
 801abec:	46bd      	mov	sp, r7
 801abee:	bd80      	pop	{r7, pc}

0801abf0 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 801abf0:	b580      	push	{r7, lr}
 801abf2:	b082      	sub	sp, #8
 801abf4:	af00      	add	r7, sp, #0
 801abf6:	6078      	str	r0, [r7, #4]
 801abf8:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	681b      	ldr	r3, [r3, #0]
 801abfe:	3350      	adds	r3, #80	; 0x50
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	6878      	ldr	r0, [r7, #4]
 801ac04:	4798      	blx	r3
 801ac06:	4603      	mov	r3, r0
 801ac08:	f083 0301 	eor.w	r3, r3, #1
 801ac0c:	b2db      	uxtb	r3, r3
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d001      	beq.n	801ac16 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 801ac12:	683b      	ldr	r3, [r7, #0]
 801ac14:	e007      	b.n	801ac26 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	3394      	adds	r3, #148	; 0x94
 801ac1c:	681b      	ldr	r3, [r3, #0]
 801ac1e:	6878      	ldr	r0, [r7, #4]
 801ac20:	4798      	blx	r3
 801ac22:	4603      	mov	r3, r0
 801ac24:	bf00      	nop
}
 801ac26:	4618      	mov	r0, r3
 801ac28:	3708      	adds	r7, #8
 801ac2a:	46bd      	mov	sp, r7
 801ac2c:	bd80      	pop	{r7, pc}

0801ac2e <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 801ac2e:	b590      	push	{r4, r7, lr}
 801ac30:	b091      	sub	sp, #68	; 0x44
 801ac32:	af00      	add	r7, sp, #0
 801ac34:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	681b      	ldr	r3, [r3, #0]
 801ac3a:	3354      	adds	r3, #84	; 0x54
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	f107 0208 	add.w	r2, r7, #8
 801ac42:	6879      	ldr	r1, [r7, #4]
 801ac44:	4610      	mov	r0, r2
 801ac46:	4798      	blx	r3
 801ac48:	f107 0308 	add.w	r3, r7, #8
 801ac4c:	4618      	mov	r0, r3
 801ac4e:	f005 f803 	bl	801fc58 <_ZNK14MockNamedValue14getStringValueEv>
 801ac52:	4604      	mov	r4, r0
 801ac54:	bf00      	nop
 801ac56:	f107 0308 	add.w	r3, r7, #8
 801ac5a:	4618      	mov	r0, r3
 801ac5c:	f004 fb12 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 801ac60:	4623      	mov	r3, r4
}
 801ac62:	4618      	mov	r0, r3
 801ac64:	3744      	adds	r7, #68	; 0x44
 801ac66:	46bd      	mov	sp, r7
 801ac68:	bd90      	pop	{r4, r7, pc}

0801ac6a <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 801ac6a:	b590      	push	{r4, r7, lr}
 801ac6c:	b093      	sub	sp, #76	; 0x4c
 801ac6e:	af00      	add	r7, sp, #0
 801ac70:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	3354      	adds	r3, #84	; 0x54
 801ac78:	681b      	ldr	r3, [r3, #0]
 801ac7a:	f107 0210 	add.w	r2, r7, #16
 801ac7e:	6879      	ldr	r1, [r7, #4]
 801ac80:	4610      	mov	r0, r2
 801ac82:	4798      	blx	r3
 801ac84:	f107 0308 	add.w	r3, r7, #8
 801ac88:	f107 0210 	add.w	r2, r7, #16
 801ac8c:	4611      	mov	r1, r2
 801ac8e:	4618      	mov	r0, r3
 801ac90:	f004 fd8e 	bl	801f7b0 <_ZNK14MockNamedValue7getNameEv>
 801ac94:	f107 0308 	add.w	r3, r7, #8
 801ac98:	4618      	mov	r0, r3
 801ac9a:	f7f4 f94b 	bl	800ef34 <_ZNK12SimpleString7isEmptyEv>
 801ac9e:	4603      	mov	r3, r0
 801aca0:	f083 0301 	eor.w	r3, r3, #1
 801aca4:	b2dc      	uxtb	r4, r3
 801aca6:	f107 0308 	add.w	r3, r7, #8
 801acaa:	4618      	mov	r0, r3
 801acac:	f7f4 f953 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801acb0:	f107 0310 	add.w	r3, r7, #16
 801acb4:	4618      	mov	r0, r3
 801acb6:	f004 fae5 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 801acba:	4623      	mov	r3, r4
}
 801acbc:	4618      	mov	r0, r3
 801acbe:	374c      	adds	r7, #76	; 0x4c
 801acc0:	46bd      	mov	sp, r7
 801acc2:	bd90      	pop	{r4, r7, pc}

0801acc4 <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 801acc4:	b590      	push	{r4, r7, lr}
 801acc6:	b095      	sub	sp, #84	; 0x54
 801acc8:	af02      	add	r7, sp, #8
 801acca:	6078      	str	r0, [r7, #4]
 801accc:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	33c0      	adds	r3, #192	; 0xc0
 801acd4:	681b      	ldr	r3, [r3, #0]
 801acd6:	6878      	ldr	r0, [r7, #4]
 801acd8:	4798      	blx	r3
 801acda:	4603      	mov	r3, r0
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d001      	beq.n	801ace4 <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 801ace0:	687c      	ldr	r4, [r7, #4]
 801ace2:	e053      	b.n	801ad8c <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	331c      	adds	r3, #28
 801ace8:	6839      	ldr	r1, [r7, #0]
 801acea:	4618      	mov	r0, r3
 801acec:	f003 f8ca 	bl	801de84 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	699b      	ldr	r3, [r3, #24]
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d109      	bne.n	801ad0c <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	331c      	adds	r3, #28
 801acfc:	4618      	mov	r0, r3
 801acfe:	f002 fe20 	bl	801d942 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801ad02:	4603      	mov	r3, r0
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d001      	beq.n	801ad0c <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 801ad08:	2301      	movs	r3, #1
 801ad0a:	e000      	b.n	801ad0e <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 801ad0c:	2300      	movs	r3, #0
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	d02c      	beq.n	801ad6c <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	681b      	ldr	r3, [r3, #0]
 801ad16:	33cc      	adds	r3, #204	; 0xcc
 801ad18:	681b      	ldr	r3, [r3, #0]
 801ad1a:	6878      	ldr	r0, [r7, #4]
 801ad1c:	4798      	blx	r3
 801ad1e:	4604      	mov	r4, r0
 801ad20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ad24:	6879      	ldr	r1, [r7, #4]
 801ad26:	4618      	mov	r0, r3
 801ad28:	f7fe fd3f 	bl	80197aa <_ZNK21MockCheckedActualCall7getNameEv>
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad30:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801ad34:	f107 000c 	add.w	r0, r7, #12
 801ad38:	9300      	str	r3, [sp, #0]
 801ad3a:	683b      	ldr	r3, [r7, #0]
 801ad3c:	4621      	mov	r1, r4
 801ad3e:	f004 f9fb 	bl	801f138 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 801ad42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ad46:	4618      	mov	r0, r3
 801ad48:	f7f4 f905 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	33dc      	adds	r3, #220	; 0xdc
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	f107 020c 	add.w	r2, r7, #12
 801ad58:	4611      	mov	r1, r2
 801ad5a:	6878      	ldr	r0, [r7, #4]
 801ad5c:	4798      	blx	r3
        return *this;
 801ad5e:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 801ad60:	f107 030c 	add.w	r3, r7, #12
 801ad64:	4618      	mov	r0, r3
 801ad66:	f000 ffa7 	bl	801bcb8 <_ZN27MockUnexpectedObjectFailureD1Ev>
 801ad6a:	e00f      	b.n	801ad8c <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	331c      	adds	r3, #28
 801ad70:	4618      	mov	r0, r3
 801ad72:	f003 f9a7 	bl	801e0c4 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	699b      	ldr	r3, [r3, #24]
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	d105      	bne.n	801ad8a <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	681b      	ldr	r3, [r3, #0]
 801ad82:	33d8      	adds	r3, #216	; 0xd8
 801ad84:	681b      	ldr	r3, [r3, #0]
 801ad86:	6878      	ldr	r0, [r7, #4]
 801ad88:	4798      	blx	r3
    }

    return *this;
 801ad8a:	687c      	ldr	r4, [r7, #4]
 801ad8c:	4623      	mov	r3, r4
}
 801ad8e:	4618      	mov	r0, r3
 801ad90:	374c      	adds	r7, #76	; 0x4c
 801ad92:	46bd      	mov	sp, r7
 801ad94:	bd90      	pop	{r4, r7, pc}
	...

0801ad98 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 801ad98:	b590      	push	{r4, r7, lr}
 801ad9a:	b087      	sub	sp, #28
 801ad9c:	af00      	add	r7, sp, #0
 801ad9e:	60f8      	str	r0, [r7, #12]
 801ada0:	60b9      	str	r1, [r7, #8]
 801ada2:	607a      	str	r2, [r7, #4]
 801ada4:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 801ada6:	f240 2282 	movw	r2, #642	; 0x282
 801adaa:	4913      	ldr	r1, [pc, #76]	; (801adf8 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 801adac:	2018      	movs	r0, #24
 801adae:	f7f1 f957 	bl	800c060 <_ZnwjPKci>
 801adb2:	4604      	mov	r4, r0
 801adb4:	683b      	ldr	r3, [r7, #0]
 801adb6:	687a      	ldr	r2, [r7, #4]
 801adb8:	68b9      	ldr	r1, [r7, #8]
 801adba:	4620      	mov	r0, r4
 801adbc:	f7fe fa48 	bl	8019250 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 801adc0:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 801adc2:	68fb      	ldr	r3, [r7, #12]
 801adc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801adc6:	2b00      	cmp	r3, #0
 801adc8:	d103      	bne.n	801add2 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 801adca:	68fb      	ldr	r3, [r7, #12]
 801adcc:	693a      	ldr	r2, [r7, #16]
 801adce:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 801add0:	e00d      	b.n	801adee <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 801add2:	68fb      	ldr	r3, [r7, #12]
 801add4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801add6:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 801add8:	697b      	ldr	r3, [r7, #20]
 801adda:	695b      	ldr	r3, [r3, #20]
 801addc:	2b00      	cmp	r3, #0
 801adde:	d003      	beq.n	801ade8 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 801ade0:	697b      	ldr	r3, [r7, #20]
 801ade2:	695b      	ldr	r3, [r3, #20]
 801ade4:	617b      	str	r3, [r7, #20]
 801ade6:	e7f7      	b.n	801add8 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 801ade8:	697b      	ldr	r3, [r7, #20]
 801adea:	693a      	ldr	r2, [r7, #16]
 801adec:	615a      	str	r2, [r3, #20]
}
 801adee:	bf00      	nop
 801adf0:	371c      	adds	r7, #28
 801adf2:	46bd      	mov	sp, r7
 801adf4:	bd90      	pop	{r4, r7, pc}
 801adf6:	bf00      	nop
 801adf8:	08028174 	.word	0x08028174

0801adfc <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 801adfc:	b580      	push	{r7, lr}
 801adfe:	b082      	sub	sp, #8
 801ae00:	af00      	add	r7, sp, #0
 801ae02:	6078      	str	r0, [r7, #4]
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	3308      	adds	r3, #8
 801ae08:	4618      	mov	r0, r3
 801ae0a:	f7f4 f8a4 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	4618      	mov	r0, r3
 801ae12:	f7f4 f8a0 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	4618      	mov	r0, r3
 801ae1a:	3708      	adds	r7, #8
 801ae1c:	46bd      	mov	sp, r7
 801ae1e:	bd80      	pop	{r7, pc}

0801ae20 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 801ae20:	b590      	push	{r4, r7, lr}
 801ae22:	b085      	sub	sp, #20
 801ae24:	af00      	add	r7, sp, #0
 801ae26:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae2c:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 801ae2e:	2300      	movs	r3, #0
 801ae30:	60bb      	str	r3, [r7, #8]

    while (current) {
 801ae32:	68fb      	ldr	r3, [r7, #12]
 801ae34:	2b00      	cmp	r3, #0
 801ae36:	d012      	beq.n	801ae5e <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 801ae38:	68fb      	ldr	r3, [r7, #12]
 801ae3a:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 801ae3c:	68fb      	ldr	r3, [r7, #12]
 801ae3e:	695b      	ldr	r3, [r3, #20]
 801ae40:	60fb      	str	r3, [r7, #12]
 801ae42:	687b      	ldr	r3, [r7, #4]
 801ae44:	68fa      	ldr	r2, [r7, #12]
 801ae46:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 801ae48:	68bc      	ldr	r4, [r7, #8]
 801ae4a:	2c00      	cmp	r4, #0
 801ae4c:	d0f1      	beq.n	801ae32 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 801ae4e:	4620      	mov	r0, r4
 801ae50:	f7ff ffd4 	bl	801adfc <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 801ae54:	2118      	movs	r1, #24
 801ae56:	4620      	mov	r0, r4
 801ae58:	f7f1 f916 	bl	800c088 <_ZdlPvj>
    while (current) {
 801ae5c:	e7e9      	b.n	801ae32 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 801ae5e:	bf00      	nop
 801ae60:	3714      	adds	r7, #20
 801ae62:	46bd      	mov	sp, r7
 801ae64:	bd90      	pop	{r4, r7, pc}
	...

0801ae68 <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 801ae68:	b580      	push	{r7, lr}
 801ae6a:	b082      	sub	sp, #8
 801ae6c:	af00      	add	r7, sp, #0
 801ae6e:	6078      	str	r0, [r7, #4]
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	4618      	mov	r0, r3
 801ae74:	f7fe fc6a 	bl	801974c <_ZN14MockActualCallC1Ev>
 801ae78:	4a06      	ldr	r2, [pc, #24]	; (801ae94 <_ZN19MockActualCallTraceC1Ev+0x2c>)
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	601a      	str	r2, [r3, #0]
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	3304      	adds	r3, #4
 801ae82:	4905      	ldr	r1, [pc, #20]	; (801ae98 <_ZN19MockActualCallTraceC1Ev+0x30>)
 801ae84:	4618      	mov	r0, r3
 801ae86:	f7f3 fcae 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
{
}
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	4618      	mov	r0, r3
 801ae8e:	3708      	adds	r7, #8
 801ae90:	46bd      	mov	sp, r7
 801ae92:	bd80      	pop	{r7, pc}
 801ae94:	0802b2f0 	.word	0x0802b2f0
 801ae98:	0802815c 	.word	0x0802815c

0801ae9c <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 801ae9c:	b580      	push	{r7, lr}
 801ae9e:	b082      	sub	sp, #8
 801aea0:	af00      	add	r7, sp, #0
 801aea2:	6078      	str	r0, [r7, #4]
 801aea4:	4a08      	ldr	r2, [pc, #32]	; (801aec8 <_ZN19MockActualCallTraceD1Ev+0x2c>)
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	601a      	str	r2, [r3, #0]
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	3304      	adds	r3, #4
 801aeae:	4618      	mov	r0, r3
 801aeb0:	f7f4 f851 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	4618      	mov	r0, r3
 801aeb8:	f7fe fc58 	bl	801976c <_ZN14MockActualCallD1Ev>
{
}
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	4618      	mov	r0, r3
 801aec0:	3708      	adds	r7, #8
 801aec2:	46bd      	mov	sp, r7
 801aec4:	bd80      	pop	{r7, pc}
 801aec6:	bf00      	nop
 801aec8:	0802b2f0 	.word	0x0802b2f0

0801aecc <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 801aecc:	b580      	push	{r7, lr}
 801aece:	b082      	sub	sp, #8
 801aed0:	af00      	add	r7, sp, #0
 801aed2:	6078      	str	r0, [r7, #4]
}
 801aed4:	6878      	ldr	r0, [r7, #4]
 801aed6:	f7ff ffe1 	bl	801ae9c <_ZN19MockActualCallTraceD1Ev>
 801aeda:	210c      	movs	r1, #12
 801aedc:	6878      	ldr	r0, [r7, #4]
 801aede:	f7f1 f8d3 	bl	800c088 <_ZdlPvj>
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	4618      	mov	r0, r3
 801aee6:	3708      	adds	r7, #8
 801aee8:	46bd      	mov	sp, r7
 801aeea:	bd80      	pop	{r7, pc}

0801aeec <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 801aeec:	b580      	push	{r7, lr}
 801aeee:	b082      	sub	sp, #8
 801aef0:	af00      	add	r7, sp, #0
 801aef2:	6078      	str	r0, [r7, #4]
 801aef4:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	3304      	adds	r3, #4
 801aefa:	4907      	ldr	r1, [pc, #28]	; (801af18 <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 801aefc:	4618      	mov	r0, r3
 801aefe:	f7f4 f8b9 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	3304      	adds	r3, #4
 801af06:	6839      	ldr	r1, [r7, #0]
 801af08:	4618      	mov	r0, r3
 801af0a:	f7f4 f8a1 	bl	800f050 <_ZN12SimpleStringpLERKS_>
    return *this;
 801af0e:	687b      	ldr	r3, [r7, #4]
}
 801af10:	4618      	mov	r0, r3
 801af12:	3708      	adds	r7, #8
 801af14:	46bd      	mov	sp, r7
 801af16:	bd80      	pop	{r7, pc}
 801af18:	08028268 	.word	0x08028268

0801af1c <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 801af1c:	b590      	push	{r4, r7, lr}
 801af1e:	b085      	sub	sp, #20
 801af20:	af00      	add	r7, sp, #0
 801af22:	6078      	str	r0, [r7, #4]
 801af24:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	3304      	adds	r3, #4
 801af2a:	490e      	ldr	r1, [pc, #56]	; (801af64 <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 801af2c:	4618      	mov	r0, r3
 801af2e:	f7f4 f8a1 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	1d1c      	adds	r4, r3, #4
 801af36:	f107 0308 	add.w	r3, r7, #8
 801af3a:	6839      	ldr	r1, [r7, #0]
 801af3c:	4618      	mov	r0, r3
 801af3e:	f7f4 fd39 	bl	800f9b4 <_Z10StringFromj>
 801af42:	f107 0308 	add.w	r3, r7, #8
 801af46:	4619      	mov	r1, r3
 801af48:	4620      	mov	r0, r4
 801af4a:	f7f4 f881 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801af4e:	f107 0308 	add.w	r3, r7, #8
 801af52:	4618      	mov	r0, r3
 801af54:	f7f3 ffff 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return *this;
 801af58:	687b      	ldr	r3, [r7, #4]
}
 801af5a:	4618      	mov	r0, r3
 801af5c:	3714      	adds	r7, #20
 801af5e:	46bd      	mov	sp, r7
 801af60:	bd90      	pop	{r4, r7, pc}
 801af62:	bf00      	nop
 801af64:	08028278 	.word	0x08028278

0801af68 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 801af68:	b580      	push	{r7, lr}
 801af6a:	b082      	sub	sp, #8
 801af6c:	af00      	add	r7, sp, #0
 801af6e:	6078      	str	r0, [r7, #4]
 801af70:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	3304      	adds	r3, #4
 801af76:	490a      	ldr	r1, [pc, #40]	; (801afa0 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 801af78:	4618      	mov	r0, r3
 801af7a:	f7f4 f87b 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	3304      	adds	r3, #4
 801af82:	6839      	ldr	r1, [r7, #0]
 801af84:	4618      	mov	r0, r3
 801af86:	f7f4 f863 	bl	800f050 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	3304      	adds	r3, #4
 801af8e:	4905      	ldr	r1, [pc, #20]	; (801afa4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 801af90:	4618      	mov	r0, r3
 801af92:	f7f4 f86f 	bl	800f074 <_ZN12SimpleStringpLEPKc>
}
 801af96:	bf00      	nop
 801af98:	3708      	adds	r7, #8
 801af9a:	46bd      	mov	sp, r7
 801af9c:	bd80      	pop	{r7, pc}
 801af9e:	bf00      	nop
 801afa0:	08028288 	.word	0x08028288
 801afa4:	0802828c 	.word	0x0802828c

0801afa8 <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 801afa8:	b590      	push	{r4, r7, lr}
 801afaa:	b087      	sub	sp, #28
 801afac:	af00      	add	r7, sp, #0
 801afae:	60f8      	str	r0, [r7, #12]
 801afb0:	60b9      	str	r1, [r7, #8]
 801afb2:	4613      	mov	r3, r2
 801afb4:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 801afb6:	68b9      	ldr	r1, [r7, #8]
 801afb8:	68f8      	ldr	r0, [r7, #12]
 801afba:	f7ff ffd5 	bl	801af68 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801afbe:	68fb      	ldr	r3, [r7, #12]
 801afc0:	1d1c      	adds	r4, r3, #4
 801afc2:	f107 0310 	add.w	r3, r7, #16
 801afc6:	79fa      	ldrb	r2, [r7, #7]
 801afc8:	4611      	mov	r1, r2
 801afca:	4618      	mov	r0, r3
 801afcc:	f7f4 fa34 	bl	800f438 <_Z10StringFromb>
 801afd0:	f107 0310 	add.w	r3, r7, #16
 801afd4:	4619      	mov	r1, r3
 801afd6:	4620      	mov	r0, r4
 801afd8:	f7f4 f83a 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801afdc:	f107 0310 	add.w	r3, r7, #16
 801afe0:	4618      	mov	r0, r3
 801afe2:	f7f3 ffb8 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return *this;
 801afe6:	68fb      	ldr	r3, [r7, #12]
}
 801afe8:	4618      	mov	r0, r3
 801afea:	371c      	adds	r7, #28
 801afec:	46bd      	mov	sp, r7
 801afee:	bd90      	pop	{r4, r7, pc}

0801aff0 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801aff0:	b590      	push	{r4, r7, lr}
 801aff2:	b08f      	sub	sp, #60	; 0x3c
 801aff4:	af00      	add	r7, sp, #0
 801aff6:	60f8      	str	r0, [r7, #12]
 801aff8:	60b9      	str	r1, [r7, #8]
 801affa:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801affc:	68b9      	ldr	r1, [r7, #8]
 801affe:	68f8      	ldr	r0, [r7, #12]
 801b000:	f7ff ffb2 	bl	801af68 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801b004:	68fb      	ldr	r3, [r7, #12]
 801b006:	1d1c      	adds	r4, r3, #4
 801b008:	f107 0320 	add.w	r3, r7, #32
 801b00c:	6879      	ldr	r1, [r7, #4]
 801b00e:	4618      	mov	r0, r3
 801b010:	f7f4 fcd0 	bl	800f9b4 <_Z10StringFromj>
 801b014:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b018:	491f      	ldr	r1, [pc, #124]	; (801b098 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 801b01a:	4618      	mov	r0, r3
 801b01c:	f7f3 fbe3 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801b020:	f107 0318 	add.w	r3, r7, #24
 801b024:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b028:	f107 0120 	add.w	r1, r7, #32
 801b02c:	4618      	mov	r0, r3
 801b02e:	f7f3 fff4 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 801b032:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b036:	6879      	ldr	r1, [r7, #4]
 801b038:	4618      	mov	r0, r3
 801b03a:	f7f4 fb5f 	bl	800f6fc <_Z30BracketsFormattedHexStringFromj>
 801b03e:	f107 0310 	add.w	r3, r7, #16
 801b042:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801b046:	f107 0118 	add.w	r1, r7, #24
 801b04a:	4618      	mov	r0, r3
 801b04c:	f7f3 ffe5 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 801b050:	f107 0310 	add.w	r3, r7, #16
 801b054:	4619      	mov	r1, r3
 801b056:	4620      	mov	r0, r4
 801b058:	f7f3 fffa 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801b05c:	f107 0310 	add.w	r3, r7, #16
 801b060:	4618      	mov	r0, r3
 801b062:	f7f3 ff78 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801b066:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b06a:	4618      	mov	r0, r3
 801b06c:	f7f3 ff73 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801b070:	f107 0318 	add.w	r3, r7, #24
 801b074:	4618      	mov	r0, r3
 801b076:	f7f3 ff6e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801b07a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b07e:	4618      	mov	r0, r3
 801b080:	f7f3 ff69 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801b084:	f107 0320 	add.w	r3, r7, #32
 801b088:	4618      	mov	r0, r3
 801b08a:	f7f3 ff64 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return *this;
 801b08e:	68fb      	ldr	r3, [r7, #12]
}
 801b090:	4618      	mov	r0, r3
 801b092:	373c      	adds	r7, #60	; 0x3c
 801b094:	46bd      	mov	sp, r7
 801b096:	bd90      	pop	{r4, r7, pc}
 801b098:	08028288 	.word	0x08028288

0801b09c <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 801b09c:	b590      	push	{r4, r7, lr}
 801b09e:	b08f      	sub	sp, #60	; 0x3c
 801b0a0:	af00      	add	r7, sp, #0
 801b0a2:	60f8      	str	r0, [r7, #12]
 801b0a4:	60b9      	str	r1, [r7, #8]
 801b0a6:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801b0a8:	68b9      	ldr	r1, [r7, #8]
 801b0aa:	68f8      	ldr	r0, [r7, #12]
 801b0ac:	f7ff ff5c 	bl	801af68 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801b0b0:	68fb      	ldr	r3, [r7, #12]
 801b0b2:	1d1c      	adds	r4, r3, #4
 801b0b4:	f107 0320 	add.w	r3, r7, #32
 801b0b8:	6879      	ldr	r1, [r7, #4]
 801b0ba:	4618      	mov	r0, r3
 801b0bc:	f7f4 fa12 	bl	800f4e4 <_Z10StringFromi>
 801b0c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b0c4:	491f      	ldr	r1, [pc, #124]	; (801b144 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 801b0c6:	4618      	mov	r0, r3
 801b0c8:	f7f3 fb8d 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801b0cc:	f107 0318 	add.w	r3, r7, #24
 801b0d0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b0d4:	f107 0120 	add.w	r1, r7, #32
 801b0d8:	4618      	mov	r0, r3
 801b0da:	f7f3 ff9e 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 801b0de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b0e2:	6879      	ldr	r1, [r7, #4]
 801b0e4:	4618      	mov	r0, r3
 801b0e6:	f7f4 faed 	bl	800f6c4 <_Z30BracketsFormattedHexStringFromi>
 801b0ea:	f107 0310 	add.w	r3, r7, #16
 801b0ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801b0f2:	f107 0118 	add.w	r1, r7, #24
 801b0f6:	4618      	mov	r0, r3
 801b0f8:	f7f3 ff8f 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 801b0fc:	f107 0310 	add.w	r3, r7, #16
 801b100:	4619      	mov	r1, r3
 801b102:	4620      	mov	r0, r4
 801b104:	f7f3 ffa4 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801b108:	f107 0310 	add.w	r3, r7, #16
 801b10c:	4618      	mov	r0, r3
 801b10e:	f7f3 ff22 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801b112:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b116:	4618      	mov	r0, r3
 801b118:	f7f3 ff1d 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801b11c:	f107 0318 	add.w	r3, r7, #24
 801b120:	4618      	mov	r0, r3
 801b122:	f7f3 ff18 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801b126:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b12a:	4618      	mov	r0, r3
 801b12c:	f7f3 ff13 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801b130:	f107 0320 	add.w	r3, r7, #32
 801b134:	4618      	mov	r0, r3
 801b136:	f7f3 ff0e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return *this;
 801b13a:	68fb      	ldr	r3, [r7, #12]
}
 801b13c:	4618      	mov	r0, r3
 801b13e:	373c      	adds	r7, #60	; 0x3c
 801b140:	46bd      	mov	sp, r7
 801b142:	bd90      	pop	{r4, r7, pc}
 801b144:	08028288 	.word	0x08028288

0801b148 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801b148:	b590      	push	{r4, r7, lr}
 801b14a:	b08f      	sub	sp, #60	; 0x3c
 801b14c:	af00      	add	r7, sp, #0
 801b14e:	60f8      	str	r0, [r7, #12]
 801b150:	60b9      	str	r1, [r7, #8]
 801b152:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801b154:	68b9      	ldr	r1, [r7, #8]
 801b156:	68f8      	ldr	r0, [r7, #12]
 801b158:	f7ff ff06 	bl	801af68 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801b15c:	68fb      	ldr	r3, [r7, #12]
 801b15e:	1d1c      	adds	r4, r3, #4
 801b160:	f107 0320 	add.w	r3, r7, #32
 801b164:	6879      	ldr	r1, [r7, #4]
 801b166:	4618      	mov	r0, r3
 801b168:	f7f4 fc36 	bl	800f9d8 <_Z10StringFromm>
 801b16c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b170:	491f      	ldr	r1, [pc, #124]	; (801b1f0 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 801b172:	4618      	mov	r0, r3
 801b174:	f7f3 fb37 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801b178:	f107 0318 	add.w	r3, r7, #24
 801b17c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b180:	f107 0120 	add.w	r1, r7, #32
 801b184:	4618      	mov	r0, r3
 801b186:	f7f3 ff48 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 801b18a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b18e:	6879      	ldr	r1, [r7, #4]
 801b190:	4618      	mov	r0, r3
 801b192:	f7f4 faeb 	bl	800f76c <_Z30BracketsFormattedHexStringFromm>
 801b196:	f107 0310 	add.w	r3, r7, #16
 801b19a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801b19e:	f107 0118 	add.w	r1, r7, #24
 801b1a2:	4618      	mov	r0, r3
 801b1a4:	f7f3 ff39 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 801b1a8:	f107 0310 	add.w	r3, r7, #16
 801b1ac:	4619      	mov	r1, r3
 801b1ae:	4620      	mov	r0, r4
 801b1b0:	f7f3 ff4e 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801b1b4:	f107 0310 	add.w	r3, r7, #16
 801b1b8:	4618      	mov	r0, r3
 801b1ba:	f7f3 fecc 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801b1be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b1c2:	4618      	mov	r0, r3
 801b1c4:	f7f3 fec7 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801b1c8:	f107 0318 	add.w	r3, r7, #24
 801b1cc:	4618      	mov	r0, r3
 801b1ce:	f7f3 fec2 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801b1d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b1d6:	4618      	mov	r0, r3
 801b1d8:	f7f3 febd 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801b1dc:	f107 0320 	add.w	r3, r7, #32
 801b1e0:	4618      	mov	r0, r3
 801b1e2:	f7f3 feb8 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return *this;
 801b1e6:	68fb      	ldr	r3, [r7, #12]
}
 801b1e8:	4618      	mov	r0, r3
 801b1ea:	373c      	adds	r7, #60	; 0x3c
 801b1ec:	46bd      	mov	sp, r7
 801b1ee:	bd90      	pop	{r4, r7, pc}
 801b1f0:	08028288 	.word	0x08028288

0801b1f4 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 801b1f4:	b590      	push	{r4, r7, lr}
 801b1f6:	b08f      	sub	sp, #60	; 0x3c
 801b1f8:	af00      	add	r7, sp, #0
 801b1fa:	60f8      	str	r0, [r7, #12]
 801b1fc:	60b9      	str	r1, [r7, #8]
 801b1fe:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801b200:	68b9      	ldr	r1, [r7, #8]
 801b202:	68f8      	ldr	r0, [r7, #12]
 801b204:	f7ff feb0 	bl	801af68 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801b208:	68fb      	ldr	r3, [r7, #12]
 801b20a:	1d1c      	adds	r4, r3, #4
 801b20c:	f107 0320 	add.w	r3, r7, #32
 801b210:	6879      	ldr	r1, [r7, #4]
 801b212:	4618      	mov	r0, r3
 801b214:	f7f4 f978 	bl	800f508 <_Z10StringFroml>
 801b218:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b21c:	491f      	ldr	r1, [pc, #124]	; (801b29c <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 801b21e:	4618      	mov	r0, r3
 801b220:	f7f3 fae1 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801b224:	f107 0318 	add.w	r3, r7, #24
 801b228:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b22c:	f107 0120 	add.w	r1, r7, #32
 801b230:	4618      	mov	r0, r3
 801b232:	f7f3 fef2 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 801b236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b23a:	6879      	ldr	r1, [r7, #4]
 801b23c:	4618      	mov	r0, r3
 801b23e:	f7f4 fa79 	bl	800f734 <_Z30BracketsFormattedHexStringFroml>
 801b242:	f107 0310 	add.w	r3, r7, #16
 801b246:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801b24a:	f107 0118 	add.w	r1, r7, #24
 801b24e:	4618      	mov	r0, r3
 801b250:	f7f3 fee3 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 801b254:	f107 0310 	add.w	r3, r7, #16
 801b258:	4619      	mov	r1, r3
 801b25a:	4620      	mov	r0, r4
 801b25c:	f7f3 fef8 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801b260:	f107 0310 	add.w	r3, r7, #16
 801b264:	4618      	mov	r0, r3
 801b266:	f7f3 fe76 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801b26a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b26e:	4618      	mov	r0, r3
 801b270:	f7f3 fe71 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801b274:	f107 0318 	add.w	r3, r7, #24
 801b278:	4618      	mov	r0, r3
 801b27a:	f7f3 fe6c 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801b27e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b282:	4618      	mov	r0, r3
 801b284:	f7f3 fe67 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801b288:	f107 0320 	add.w	r3, r7, #32
 801b28c:	4618      	mov	r0, r3
 801b28e:	f7f3 fe62 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return *this;
 801b292:	68fb      	ldr	r3, [r7, #12]
}
 801b294:	4618      	mov	r0, r3
 801b296:	373c      	adds	r7, #60	; 0x3c
 801b298:	46bd      	mov	sp, r7
 801b29a:	bd90      	pop	{r4, r7, pc}
 801b29c:	08028288 	.word	0x08028288

0801b2a0 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801b2a0:	b5b0      	push	{r4, r5, r7, lr}
 801b2a2:	b086      	sub	sp, #24
 801b2a4:	af02      	add	r7, sp, #8
 801b2a6:	60f8      	str	r0, [r7, #12]
 801b2a8:	60b9      	str	r1, [r7, #8]
 801b2aa:	4639      	mov	r1, r7
 801b2ac:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801b2b0:	f7fa fe7c 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801b2b4:	4604      	mov	r4, r0
 801b2b6:	6823      	ldr	r3, [r4, #0]
 801b2b8:	3368      	adds	r3, #104	; 0x68
 801b2ba:	681d      	ldr	r5, [r3, #0]
 801b2bc:	f7fa fe86 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b2c0:	4603      	mov	r3, r0
 801b2c2:	9300      	str	r3, [sp, #0]
 801b2c4:	f240 23ee 	movw	r3, #750	; 0x2ee
 801b2c8:	4a04      	ldr	r2, [pc, #16]	; (801b2dc <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801b2ca:	4905      	ldr	r1, [pc, #20]	; (801b2e0 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 801b2cc:	4620      	mov	r0, r4
 801b2ce:	47a8      	blx	r5
    return *this;
 801b2d0:	68fb      	ldr	r3, [r7, #12]
}
 801b2d2:	4618      	mov	r0, r3
 801b2d4:	3710      	adds	r7, #16
 801b2d6:	46bd      	mov	sp, r7
 801b2d8:	bdb0      	pop	{r4, r5, r7, pc}
 801b2da:	bf00      	nop
 801b2dc:	08028174 	.word	0x08028174
 801b2e0:	08028190 	.word	0x08028190

0801b2e4 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801b2e4:	b5b0      	push	{r4, r5, r7, lr}
 801b2e6:	b086      	sub	sp, #24
 801b2e8:	af02      	add	r7, sp, #8
 801b2ea:	60f8      	str	r0, [r7, #12]
 801b2ec:	60b9      	str	r1, [r7, #8]
 801b2ee:	4639      	mov	r1, r7
 801b2f0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801b2f4:	f7fa fe5a 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801b2f8:	4604      	mov	r4, r0
 801b2fa:	6823      	ldr	r3, [r4, #0]
 801b2fc:	3368      	adds	r3, #104	; 0x68
 801b2fe:	681d      	ldr	r5, [r3, #0]
 801b300:	f7fa fe64 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b304:	4603      	mov	r3, r0
 801b306:	9300      	str	r3, [sp, #0]
 801b308:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 801b30c:	4a04      	ldr	r2, [pc, #16]	; (801b320 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801b30e:	4905      	ldr	r1, [pc, #20]	; (801b324 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 801b310:	4620      	mov	r0, r4
 801b312:	47a8      	blx	r5
    return *this;
 801b314:	68fb      	ldr	r3, [r7, #12]
}
 801b316:	4618      	mov	r0, r3
 801b318:	3710      	adds	r7, #16
 801b31a:	46bd      	mov	sp, r7
 801b31c:	bdb0      	pop	{r4, r5, r7, pc}
 801b31e:	bf00      	nop
 801b320:	08028174 	.word	0x08028174
 801b324:	080281bc 	.word	0x080281bc

0801b328 <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 801b328:	b590      	push	{r4, r7, lr}
 801b32a:	b087      	sub	sp, #28
 801b32c:	af00      	add	r7, sp, #0
 801b32e:	60f8      	str	r0, [r7, #12]
 801b330:	60b9      	str	r1, [r7, #8]
 801b332:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 801b336:	68b9      	ldr	r1, [r7, #8]
 801b338:	68f8      	ldr	r0, [r7, #12]
 801b33a:	f7ff fe15 	bl	801af68 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801b33e:	68fb      	ldr	r3, [r7, #12]
 801b340:	1d1c      	adds	r4, r3, #4
 801b342:	f107 0310 	add.w	r3, r7, #16
 801b346:	2106      	movs	r1, #6
 801b348:	ed97 0b00 	vldr	d0, [r7]
 801b34c:	4618      	mov	r0, r3
 801b34e:	f7f4 fac7 	bl	800f8e0 <_Z10StringFromdi>
 801b352:	f107 0310 	add.w	r3, r7, #16
 801b356:	4619      	mov	r1, r3
 801b358:	4620      	mov	r0, r4
 801b35a:	f7f3 fe79 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801b35e:	f107 0310 	add.w	r3, r7, #16
 801b362:	4618      	mov	r0, r3
 801b364:	f7f3 fdf7 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return *this;
 801b368:	68fb      	ldr	r3, [r7, #12]
}
 801b36a:	4618      	mov	r0, r3
 801b36c:	371c      	adds	r7, #28
 801b36e:	46bd      	mov	sp, r7
 801b370:	bd90      	pop	{r4, r7, pc}

0801b372 <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 801b372:	b590      	push	{r4, r7, lr}
 801b374:	b087      	sub	sp, #28
 801b376:	af00      	add	r7, sp, #0
 801b378:	60f8      	str	r0, [r7, #12]
 801b37a:	60b9      	str	r1, [r7, #8]
 801b37c:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801b37e:	68b9      	ldr	r1, [r7, #8]
 801b380:	68f8      	ldr	r0, [r7, #12]
 801b382:	f7ff fdf1 	bl	801af68 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801b386:	68fb      	ldr	r3, [r7, #12]
 801b388:	1d1c      	adds	r4, r3, #4
 801b38a:	f107 0310 	add.w	r3, r7, #16
 801b38e:	6879      	ldr	r1, [r7, #4]
 801b390:	4618      	mov	r0, r3
 801b392:	f7f4 f86d 	bl	800f470 <_Z10StringFromPKc>
 801b396:	f107 0310 	add.w	r3, r7, #16
 801b39a:	4619      	mov	r1, r3
 801b39c:	4620      	mov	r0, r4
 801b39e:	f7f3 fe57 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801b3a2:	f107 0310 	add.w	r3, r7, #16
 801b3a6:	4618      	mov	r0, r3
 801b3a8:	f7f3 fdd5 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return *this;
 801b3ac:	68fb      	ldr	r3, [r7, #12]
}
 801b3ae:	4618      	mov	r0, r3
 801b3b0:	371c      	adds	r7, #28
 801b3b2:	46bd      	mov	sp, r7
 801b3b4:	bd90      	pop	{r4, r7, pc}

0801b3b6 <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 801b3b6:	b590      	push	{r4, r7, lr}
 801b3b8:	b087      	sub	sp, #28
 801b3ba:	af00      	add	r7, sp, #0
 801b3bc:	60f8      	str	r0, [r7, #12]
 801b3be:	60b9      	str	r1, [r7, #8]
 801b3c0:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801b3c2:	68b9      	ldr	r1, [r7, #8]
 801b3c4:	68f8      	ldr	r0, [r7, #12]
 801b3c6:	f7ff fdcf 	bl	801af68 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801b3ca:	68fb      	ldr	r3, [r7, #12]
 801b3cc:	1d1c      	adds	r4, r3, #4
 801b3ce:	f107 0310 	add.w	r3, r7, #16
 801b3d2:	6879      	ldr	r1, [r7, #4]
 801b3d4:	4618      	mov	r0, r3
 801b3d6:	f7f4 f8a9 	bl	800f52c <_Z10StringFromPKv>
 801b3da:	f107 0310 	add.w	r3, r7, #16
 801b3de:	4619      	mov	r1, r3
 801b3e0:	4620      	mov	r0, r4
 801b3e2:	f7f3 fe35 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801b3e6:	f107 0310 	add.w	r3, r7, #16
 801b3ea:	4618      	mov	r0, r3
 801b3ec:	f7f3 fdb3 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return *this;
 801b3f0:	68fb      	ldr	r3, [r7, #12]
}
 801b3f2:	4618      	mov	r0, r3
 801b3f4:	371c      	adds	r7, #28
 801b3f6:	46bd      	mov	sp, r7
 801b3f8:	bd90      	pop	{r4, r7, pc}

0801b3fa <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801b3fa:	b590      	push	{r4, r7, lr}
 801b3fc:	b087      	sub	sp, #28
 801b3fe:	af00      	add	r7, sp, #0
 801b400:	60f8      	str	r0, [r7, #12]
 801b402:	60b9      	str	r1, [r7, #8]
 801b404:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801b406:	68b9      	ldr	r1, [r7, #8]
 801b408:	68f8      	ldr	r0, [r7, #12]
 801b40a:	f7ff fdad 	bl	801af68 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801b40e:	68fb      	ldr	r3, [r7, #12]
 801b410:	1d1c      	adds	r4, r3, #4
 801b412:	f107 0310 	add.w	r3, r7, #16
 801b416:	6879      	ldr	r1, [r7, #4]
 801b418:	4618      	mov	r0, r3
 801b41a:	f7f4 f887 	bl	800f52c <_Z10StringFromPKv>
 801b41e:	f107 0310 	add.w	r3, r7, #16
 801b422:	4619      	mov	r1, r3
 801b424:	4620      	mov	r0, r4
 801b426:	f7f3 fe13 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801b42a:	f107 0310 	add.w	r3, r7, #16
 801b42e:	4618      	mov	r0, r3
 801b430:	f7f3 fd91 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return *this;
 801b434:	68fb      	ldr	r3, [r7, #12]
}
 801b436:	4618      	mov	r0, r3
 801b438:	371c      	adds	r7, #28
 801b43a:	46bd      	mov	sp, r7
 801b43c:	bd90      	pop	{r4, r7, pc}

0801b43e <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801b43e:	b590      	push	{r4, r7, lr}
 801b440:	b087      	sub	sp, #28
 801b442:	af00      	add	r7, sp, #0
 801b444:	60f8      	str	r0, [r7, #12]
 801b446:	60b9      	str	r1, [r7, #8]
 801b448:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801b44a:	68b9      	ldr	r1, [r7, #8]
 801b44c:	68f8      	ldr	r0, [r7, #12]
 801b44e:	f7ff fd8b 	bl	801af68 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801b452:	68fb      	ldr	r3, [r7, #12]
 801b454:	1d1c      	adds	r4, r3, #4
 801b456:	f107 0310 	add.w	r3, r7, #16
 801b45a:	6879      	ldr	r1, [r7, #4]
 801b45c:	4618      	mov	r0, r3
 801b45e:	f7f4 f88f 	bl	800f580 <_Z10StringFromPFvvE>
 801b462:	f107 0310 	add.w	r3, r7, #16
 801b466:	4619      	mov	r1, r3
 801b468:	4620      	mov	r0, r4
 801b46a:	f7f3 fdf1 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801b46e:	f107 0310 	add.w	r3, r7, #16
 801b472:	4618      	mov	r0, r3
 801b474:	f7f3 fd6f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return *this;
 801b478:	68fb      	ldr	r3, [r7, #12]
}
 801b47a:	4618      	mov	r0, r3
 801b47c:	371c      	adds	r7, #28
 801b47e:	46bd      	mov	sp, r7
 801b480:	bd90      	pop	{r4, r7, pc}

0801b482 <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801b482:	b590      	push	{r4, r7, lr}
 801b484:	b087      	sub	sp, #28
 801b486:	af00      	add	r7, sp, #0
 801b488:	60f8      	str	r0, [r7, #12]
 801b48a:	60b9      	str	r1, [r7, #8]
 801b48c:	607a      	str	r2, [r7, #4]
 801b48e:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 801b490:	68b9      	ldr	r1, [r7, #8]
 801b492:	68f8      	ldr	r0, [r7, #12]
 801b494:	f7ff fd68 	bl	801af68 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 801b498:	68fb      	ldr	r3, [r7, #12]
 801b49a:	1d1c      	adds	r4, r3, #4
 801b49c:	f107 0310 	add.w	r3, r7, #16
 801b4a0:	683a      	ldr	r2, [r7, #0]
 801b4a2:	6879      	ldr	r1, [r7, #4]
 801b4a4:	4618      	mov	r0, r3
 801b4a6:	f7f4 fbaf 	bl	800fc08 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801b4aa:	f107 0310 	add.w	r3, r7, #16
 801b4ae:	4619      	mov	r1, r3
 801b4b0:	4620      	mov	r0, r4
 801b4b2:	f7f3 fdcd 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801b4b6:	f107 0310 	add.w	r3, r7, #16
 801b4ba:	4618      	mov	r0, r3
 801b4bc:	f7f3 fd4b 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return *this;
 801b4c0:	68fb      	ldr	r3, [r7, #12]
}
 801b4c2:	4618      	mov	r0, r3
 801b4c4:	371c      	adds	r7, #28
 801b4c6:	46bd      	mov	sp, r7
 801b4c8:	bd90      	pop	{r4, r7, pc}
	...

0801b4cc <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 801b4cc:	b590      	push	{r4, r7, lr}
 801b4ce:	b087      	sub	sp, #28
 801b4d0:	af00      	add	r7, sp, #0
 801b4d2:	60f8      	str	r0, [r7, #12]
 801b4d4:	60b9      	str	r1, [r7, #8]
 801b4d6:	607a      	str	r2, [r7, #4]
 801b4d8:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801b4da:	68fb      	ldr	r3, [r7, #12]
 801b4dc:	3304      	adds	r3, #4
 801b4de:	4913      	ldr	r1, [pc, #76]	; (801b52c <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 801b4e0:	4618      	mov	r0, r3
 801b4e2:	f7f3 fdc7 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 801b4e6:	68fb      	ldr	r3, [r7, #12]
 801b4e8:	3304      	adds	r3, #4
 801b4ea:	68b9      	ldr	r1, [r7, #8]
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	f7f3 fdaf 	bl	800f050 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 801b4f2:	6879      	ldr	r1, [r7, #4]
 801b4f4:	68f8      	ldr	r0, [r7, #12]
 801b4f6:	f7ff fd37 	bl	801af68 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801b4fa:	68fb      	ldr	r3, [r7, #12]
 801b4fc:	1d1c      	adds	r4, r3, #4
 801b4fe:	f107 0310 	add.w	r3, r7, #16
 801b502:	6839      	ldr	r1, [r7, #0]
 801b504:	4618      	mov	r0, r3
 801b506:	f7f4 f811 	bl	800f52c <_Z10StringFromPKv>
 801b50a:	f107 0310 	add.w	r3, r7, #16
 801b50e:	4619      	mov	r1, r3
 801b510:	4620      	mov	r0, r4
 801b512:	f7f3 fd9d 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801b516:	f107 0310 	add.w	r3, r7, #16
 801b51a:	4618      	mov	r0, r3
 801b51c:	f7f3 fd1b 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return *this;
 801b520:	68fb      	ldr	r3, [r7, #12]
}
 801b522:	4618      	mov	r0, r3
 801b524:	371c      	adds	r7, #28
 801b526:	46bd      	mov	sp, r7
 801b528:	bd90      	pop	{r4, r7, pc}
 801b52a:	bf00      	nop
 801b52c:	08028288 	.word	0x08028288

0801b530 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 801b530:	b590      	push	{r4, r7, lr}
 801b532:	b087      	sub	sp, #28
 801b534:	af00      	add	r7, sp, #0
 801b536:	60f8      	str	r0, [r7, #12]
 801b538:	60b9      	str	r1, [r7, #8]
 801b53a:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801b53c:	68b9      	ldr	r1, [r7, #8]
 801b53e:	68f8      	ldr	r0, [r7, #12]
 801b540:	f7ff fd12 	bl	801af68 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 801b544:	68fb      	ldr	r3, [r7, #12]
 801b546:	1d1c      	adds	r4, r3, #4
 801b548:	f107 0310 	add.w	r3, r7, #16
 801b54c:	6879      	ldr	r1, [r7, #4]
 801b54e:	4618      	mov	r0, r3
 801b550:	f7f3 ffec 	bl	800f52c <_Z10StringFromPKv>
 801b554:	f107 0310 	add.w	r3, r7, #16
 801b558:	4619      	mov	r1, r3
 801b55a:	4620      	mov	r0, r4
 801b55c:	f7f3 fd78 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801b560:	f107 0310 	add.w	r3, r7, #16
 801b564:	4618      	mov	r0, r3
 801b566:	f7f3 fcf6 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return *this;
 801b56a:	68fb      	ldr	r3, [r7, #12]
}
 801b56c:	4618      	mov	r0, r3
 801b56e:	371c      	adds	r7, #28
 801b570:	46bd      	mov	sp, r7
 801b572:	bd90      	pop	{r4, r7, pc}

0801b574 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 801b574:	b590      	push	{r4, r7, lr}
 801b576:	b087      	sub	sp, #28
 801b578:	af00      	add	r7, sp, #0
 801b57a:	60f8      	str	r0, [r7, #12]
 801b57c:	60b9      	str	r1, [r7, #8]
 801b57e:	607a      	str	r2, [r7, #4]
 801b580:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801b582:	68fb      	ldr	r3, [r7, #12]
 801b584:	3304      	adds	r3, #4
 801b586:	4913      	ldr	r1, [pc, #76]	; (801b5d4 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 801b588:	4618      	mov	r0, r3
 801b58a:	f7f3 fd73 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 801b58e:	68fb      	ldr	r3, [r7, #12]
 801b590:	3304      	adds	r3, #4
 801b592:	68b9      	ldr	r1, [r7, #8]
 801b594:	4618      	mov	r0, r3
 801b596:	f7f3 fd5b 	bl	800f050 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 801b59a:	6879      	ldr	r1, [r7, #4]
 801b59c:	68f8      	ldr	r0, [r7, #12]
 801b59e:	f7ff fce3 	bl	801af68 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 801b5a2:	68fb      	ldr	r3, [r7, #12]
 801b5a4:	1d1c      	adds	r4, r3, #4
 801b5a6:	f107 0310 	add.w	r3, r7, #16
 801b5aa:	6839      	ldr	r1, [r7, #0]
 801b5ac:	4618      	mov	r0, r3
 801b5ae:	f7f3 ffbd 	bl	800f52c <_Z10StringFromPKv>
 801b5b2:	f107 0310 	add.w	r3, r7, #16
 801b5b6:	4619      	mov	r1, r3
 801b5b8:	4620      	mov	r0, r4
 801b5ba:	f7f3 fd49 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801b5be:	f107 0310 	add.w	r3, r7, #16
 801b5c2:	4618      	mov	r0, r3
 801b5c4:	f7f3 fcc7 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return *this;
 801b5c8:	68fb      	ldr	r3, [r7, #12]
}
 801b5ca:	4618      	mov	r0, r3
 801b5cc:	371c      	adds	r7, #28
 801b5ce:	46bd      	mov	sp, r7
 801b5d0:	bd90      	pop	{r4, r7, pc}
 801b5d2:	bf00      	nop
 801b5d4:	08028288 	.word	0x08028288

0801b5d8 <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 801b5d8:	b480      	push	{r7}
 801b5da:	b083      	sub	sp, #12
 801b5dc:	af00      	add	r7, sp, #0
 801b5de:	6078      	str	r0, [r7, #4]
    return false;
 801b5e0:	2300      	movs	r3, #0
}
 801b5e2:	4618      	mov	r0, r3
 801b5e4:	370c      	adds	r7, #12
 801b5e6:	46bd      	mov	sp, r7
 801b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ec:	4770      	bx	lr
	...

0801b5f0 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 801b5f0:	b580      	push	{r7, lr}
 801b5f2:	b084      	sub	sp, #16
 801b5f4:	af00      	add	r7, sp, #0
 801b5f6:	6078      	str	r0, [r7, #4]
 801b5f8:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 801b5fa:	f107 0308 	add.w	r3, r7, #8
 801b5fe:	4909      	ldr	r1, [pc, #36]	; (801b624 <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 801b600:	4618      	mov	r0, r3
 801b602:	f7f3 f8f0 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801b606:	f107 0308 	add.w	r3, r7, #8
 801b60a:	4619      	mov	r1, r3
 801b60c:	6878      	ldr	r0, [r7, #4]
 801b60e:	f003 fe0f 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
 801b612:	f107 0308 	add.w	r3, r7, #8
 801b616:	4618      	mov	r0, r3
 801b618:	f7f3 fc9d 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 801b61c:	6878      	ldr	r0, [r7, #4]
 801b61e:	3710      	adds	r7, #16
 801b620:	46bd      	mov	sp, r7
 801b622:	bd80      	pop	{r7, pc}
 801b624:	0802815c 	.word	0x0802815c

0801b628 <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 801b628:	b480      	push	{r7}
 801b62a:	b083      	sub	sp, #12
 801b62c:	af00      	add	r7, sp, #0
 801b62e:	6078      	str	r0, [r7, #4]
    return 0;
 801b630:	2300      	movs	r3, #0
}
 801b632:	4618      	mov	r0, r3
 801b634:	370c      	adds	r7, #12
 801b636:	46bd      	mov	sp, r7
 801b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b63c:	4770      	bx	lr

0801b63e <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 801b63e:	b480      	push	{r7}
 801b640:	b083      	sub	sp, #12
 801b642:	af00      	add	r7, sp, #0
 801b644:	6078      	str	r0, [r7, #4]
    return 0;
 801b646:	2300      	movs	r3, #0
}
 801b648:	4618      	mov	r0, r3
 801b64a:	370c      	adds	r7, #12
 801b64c:	46bd      	mov	sp, r7
 801b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b652:	4770      	bx	lr

0801b654 <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 801b654:	b480      	push	{r7}
 801b656:	b083      	sub	sp, #12
 801b658:	af00      	add	r7, sp, #0
 801b65a:	6078      	str	r0, [r7, #4]
 801b65c:	6039      	str	r1, [r7, #0]
    return 0;
 801b65e:	2300      	movs	r3, #0
}
 801b660:	4618      	mov	r0, r3
 801b662:	370c      	adds	r7, #12
 801b664:	46bd      	mov	sp, r7
 801b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b66a:	4770      	bx	lr

0801b66c <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 801b66c:	b480      	push	{r7}
 801b66e:	b083      	sub	sp, #12
 801b670:	af00      	add	r7, sp, #0
 801b672:	6078      	str	r0, [r7, #4]
 801b674:	6039      	str	r1, [r7, #0]
    return 0;
 801b676:	2300      	movs	r3, #0
}
 801b678:	4618      	mov	r0, r3
 801b67a:	370c      	adds	r7, #12
 801b67c:	46bd      	mov	sp, r7
 801b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b682:	4770      	bx	lr

0801b684 <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 801b684:	b5b0      	push	{r4, r5, r7, lr}
 801b686:	b084      	sub	sp, #16
 801b688:	af02      	add	r7, sp, #8
 801b68a:	6078      	str	r0, [r7, #4]
 801b68c:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801b68e:	f7fa fc8d 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801b692:	4604      	mov	r4, r0
 801b694:	6823      	ldr	r3, [r4, #0]
 801b696:	3368      	adds	r3, #104	; 0x68
 801b698:	681d      	ldr	r5, [r3, #0]
 801b69a:	f7fa fc97 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b69e:	4603      	mov	r3, r0
 801b6a0:	9300      	str	r3, [sp, #0]
 801b6a2:	f240 3375 	movw	r3, #885	; 0x375
 801b6a6:	4a06      	ldr	r2, [pc, #24]	; (801b6c0 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 801b6a8:	4906      	ldr	r1, [pc, #24]	; (801b6c4 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 801b6aa:	4620      	mov	r0, r4
 801b6ac:	47a8      	blx	r5
    return cpputest_longlong(0);
 801b6ae:	2100      	movs	r1, #0
 801b6b0:	6878      	ldr	r0, [r7, #4]
 801b6b2:	f7f1 f8cf 	bl	800c854 <_ZN17cpputest_longlongC1Ei>
}
 801b6b6:	6878      	ldr	r0, [r7, #4]
 801b6b8:	3708      	adds	r7, #8
 801b6ba:	46bd      	mov	sp, r7
 801b6bc:	bdb0      	pop	{r4, r5, r7, pc}
 801b6be:	bf00      	nop
 801b6c0:	08028174 	.word	0x08028174
 801b6c4:	080281bc 	.word	0x080281bc

0801b6c8 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 801b6c8:	b5b0      	push	{r4, r5, r7, lr}
 801b6ca:	b084      	sub	sp, #16
 801b6cc:	af02      	add	r7, sp, #8
 801b6ce:	6078      	str	r0, [r7, #4]
 801b6d0:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801b6d2:	f7fa fc6b 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801b6d6:	4604      	mov	r4, r0
 801b6d8:	6823      	ldr	r3, [r4, #0]
 801b6da:	3368      	adds	r3, #104	; 0x68
 801b6dc:	681d      	ldr	r5, [r3, #0]
 801b6de:	f7fa fc75 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b6e2:	4603      	mov	r3, r0
 801b6e4:	9300      	str	r3, [sp, #0]
 801b6e6:	f240 337b 	movw	r3, #891	; 0x37b
 801b6ea:	4a06      	ldr	r2, [pc, #24]	; (801b704 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 801b6ec:	4906      	ldr	r1, [pc, #24]	; (801b708 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 801b6ee:	4620      	mov	r0, r4
 801b6f0:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801b6f2:	2100      	movs	r1, #0
 801b6f4:	6878      	ldr	r0, [r7, #4]
 801b6f6:	f7f1 f8b9 	bl	800c86c <_ZN18cpputest_ulonglongC1Ei>
}
 801b6fa:	6878      	ldr	r0, [r7, #4]
 801b6fc:	3708      	adds	r7, #8
 801b6fe:	46bd      	mov	sp, r7
 801b700:	bdb0      	pop	{r4, r5, r7, pc}
 801b702:	bf00      	nop
 801b704:	08028174 	.word	0x08028174
 801b708:	08028190 	.word	0x08028190

0801b70c <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 801b70c:	b5b0      	push	{r4, r5, r7, lr}
 801b70e:	b086      	sub	sp, #24
 801b710:	af02      	add	r7, sp, #8
 801b712:	60f8      	str	r0, [r7, #12]
 801b714:	60b9      	str	r1, [r7, #8]
 801b716:	4639      	mov	r1, r7
 801b718:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801b71c:	f7fa fc46 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801b720:	4604      	mov	r4, r0
 801b722:	6823      	ldr	r3, [r4, #0]
 801b724:	3368      	adds	r3, #104	; 0x68
 801b726:	681d      	ldr	r5, [r3, #0]
 801b728:	f7fa fc50 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b72c:	4603      	mov	r3, r0
 801b72e:	9300      	str	r3, [sp, #0]
 801b730:	f240 3381 	movw	r3, #897	; 0x381
 801b734:	4a05      	ldr	r2, [pc, #20]	; (801b74c <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 801b736:	4906      	ldr	r1, [pc, #24]	; (801b750 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 801b738:	4620      	mov	r0, r4
 801b73a:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801b73c:	2100      	movs	r1, #0
 801b73e:	68f8      	ldr	r0, [r7, #12]
 801b740:	f7f1 f894 	bl	800c86c <_ZN18cpputest_ulonglongC1Ei>
}
 801b744:	68f8      	ldr	r0, [r7, #12]
 801b746:	3710      	adds	r7, #16
 801b748:	46bd      	mov	sp, r7
 801b74a:	bdb0      	pop	{r4, r5, r7, pc}
 801b74c:	08028174 	.word	0x08028174
 801b750:	08028190 	.word	0x08028190

0801b754 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 801b754:	b5b0      	push	{r4, r5, r7, lr}
 801b756:	b086      	sub	sp, #24
 801b758:	af02      	add	r7, sp, #8
 801b75a:	60f8      	str	r0, [r7, #12]
 801b75c:	60b9      	str	r1, [r7, #8]
 801b75e:	4639      	mov	r1, r7
 801b760:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801b764:	f7fa fc22 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801b768:	4604      	mov	r4, r0
 801b76a:	6823      	ldr	r3, [r4, #0]
 801b76c:	3368      	adds	r3, #104	; 0x68
 801b76e:	681d      	ldr	r5, [r3, #0]
 801b770:	f7fa fc2c 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b774:	4603      	mov	r3, r0
 801b776:	9300      	str	r3, [sp, #0]
 801b778:	f240 3387 	movw	r3, #903	; 0x387
 801b77c:	4a05      	ldr	r2, [pc, #20]	; (801b794 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 801b77e:	4906      	ldr	r1, [pc, #24]	; (801b798 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 801b780:	4620      	mov	r0, r4
 801b782:	47a8      	blx	r5
    return cpputest_longlong(0);
 801b784:	2100      	movs	r1, #0
 801b786:	68f8      	ldr	r0, [r7, #12]
 801b788:	f7f1 f864 	bl	800c854 <_ZN17cpputest_longlongC1Ei>
}
 801b78c:	68f8      	ldr	r0, [r7, #12]
 801b78e:	3710      	adds	r7, #16
 801b790:	46bd      	mov	sp, r7
 801b792:	bdb0      	pop	{r4, r5, r7, pc}
 801b794:	08028174 	.word	0x08028174
 801b798:	080281bc 	.word	0x080281bc

0801b79c <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 801b79c:	b480      	push	{r7}
 801b79e:	b083      	sub	sp, #12
 801b7a0:	af00      	add	r7, sp, #0
 801b7a2:	6078      	str	r0, [r7, #4]
    return false;
 801b7a4:	2300      	movs	r3, #0
}
 801b7a6:	4618      	mov	r0, r3
 801b7a8:	370c      	adds	r7, #12
 801b7aa:	46bd      	mov	sp, r7
 801b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7b0:	4770      	bx	lr

0801b7b2 <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 801b7b2:	b480      	push	{r7}
 801b7b4:	b083      	sub	sp, #12
 801b7b6:	af00      	add	r7, sp, #0
 801b7b8:	6078      	str	r0, [r7, #4]
 801b7ba:	460b      	mov	r3, r1
 801b7bc:	70fb      	strb	r3, [r7, #3]
    return false;
 801b7be:	2300      	movs	r3, #0
}
 801b7c0:	4618      	mov	r0, r3
 801b7c2:	370c      	adds	r7, #12
 801b7c4:	46bd      	mov	sp, r7
 801b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7ca:	4770      	bx	lr

0801b7cc <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 801b7cc:	b480      	push	{r7}
 801b7ce:	b083      	sub	sp, #12
 801b7d0:	af00      	add	r7, sp, #0
 801b7d2:	6078      	str	r0, [r7, #4]
    return 0;
 801b7d4:	2300      	movs	r3, #0
}
 801b7d6:	4618      	mov	r0, r3
 801b7d8:	370c      	adds	r7, #12
 801b7da:	46bd      	mov	sp, r7
 801b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7e0:	4770      	bx	lr

0801b7e2 <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 801b7e2:	b480      	push	{r7}
 801b7e4:	b083      	sub	sp, #12
 801b7e6:	af00      	add	r7, sp, #0
 801b7e8:	6078      	str	r0, [r7, #4]
    return 0.0;
 801b7ea:	f04f 0200 	mov.w	r2, #0
 801b7ee:	f04f 0300 	mov.w	r3, #0
 801b7f2:	ec43 2b17 	vmov	d7, r2, r3
}
 801b7f6:	eeb0 0a47 	vmov.f32	s0, s14
 801b7fa:	eef0 0a67 	vmov.f32	s1, s15
 801b7fe:	370c      	adds	r7, #12
 801b800:	46bd      	mov	sp, r7
 801b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b806:	4770      	bx	lr

0801b808 <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 801b808:	b580      	push	{r7, lr}
 801b80a:	b084      	sub	sp, #16
 801b80c:	af00      	add	r7, sp, #0
 801b80e:	60f8      	str	r0, [r7, #12]
 801b810:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 801b814:	68fb      	ldr	r3, [r7, #12]
 801b816:	681b      	ldr	r3, [r3, #0]
 801b818:	3398      	adds	r3, #152	; 0x98
 801b81a:	681b      	ldr	r3, [r3, #0]
 801b81c:	68f8      	ldr	r0, [r7, #12]
 801b81e:	4798      	blx	r3
 801b820:	eeb0 7a40 	vmov.f32	s14, s0
 801b824:	eef0 7a60 	vmov.f32	s15, s1
}
 801b828:	eeb0 0a47 	vmov.f32	s0, s14
 801b82c:	eef0 0a67 	vmov.f32	s1, s15
 801b830:	3710      	adds	r7, #16
 801b832:	46bd      	mov	sp, r7
 801b834:	bd80      	pop	{r7, pc}

0801b836 <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 801b836:	b480      	push	{r7}
 801b838:	b083      	sub	sp, #12
 801b83a:	af00      	add	r7, sp, #0
 801b83c:	6078      	str	r0, [r7, #4]
    return 0;
 801b83e:	2300      	movs	r3, #0
}
 801b840:	4618      	mov	r0, r3
 801b842:	370c      	adds	r7, #12
 801b844:	46bd      	mov	sp, r7
 801b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b84a:	4770      	bx	lr

0801b84c <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 801b84c:	b480      	push	{r7}
 801b84e:	b083      	sub	sp, #12
 801b850:	af00      	add	r7, sp, #0
 801b852:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801b854:	2300      	movs	r3, #0
}
 801b856:	4618      	mov	r0, r3
 801b858:	370c      	adds	r7, #12
 801b85a:	46bd      	mov	sp, r7
 801b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b860:	4770      	bx	lr

0801b862 <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 801b862:	b480      	push	{r7}
 801b864:	b083      	sub	sp, #12
 801b866:	af00      	add	r7, sp, #0
 801b868:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801b86a:	2300      	movs	r3, #0
}
 801b86c:	4618      	mov	r0, r3
 801b86e:	370c      	adds	r7, #12
 801b870:	46bd      	mov	sp, r7
 801b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b876:	4770      	bx	lr

0801b878 <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 801b878:	b480      	push	{r7}
 801b87a:	b083      	sub	sp, #12
 801b87c:	af00      	add	r7, sp, #0
 801b87e:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801b880:	2300      	movs	r3, #0
}
 801b882:	4618      	mov	r0, r3
 801b884:	370c      	adds	r7, #12
 801b886:	46bd      	mov	sp, r7
 801b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b88c:	4770      	bx	lr

0801b88e <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 801b88e:	b580      	push	{r7, lr}
 801b890:	b082      	sub	sp, #8
 801b892:	af00      	add	r7, sp, #0
 801b894:	6078      	str	r0, [r7, #4]
 801b896:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	681b      	ldr	r3, [r3, #0]
 801b89c:	33a8      	adds	r3, #168	; 0xa8
 801b89e:	681b      	ldr	r3, [r3, #0]
 801b8a0:	6878      	ldr	r0, [r7, #4]
 801b8a2:	4798      	blx	r3
 801b8a4:	4603      	mov	r3, r0
}
 801b8a6:	4618      	mov	r0, r3
 801b8a8:	3708      	adds	r7, #8
 801b8aa:	46bd      	mov	sp, r7
 801b8ac:	bd80      	pop	{r7, pc}

0801b8ae <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 801b8ae:	b580      	push	{r7, lr}
 801b8b0:	b082      	sub	sp, #8
 801b8b2:	af00      	add	r7, sp, #0
 801b8b4:	6078      	str	r0, [r7, #4]
 801b8b6:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	681b      	ldr	r3, [r3, #0]
 801b8bc:	33a0      	adds	r3, #160	; 0xa0
 801b8be:	681b      	ldr	r3, [r3, #0]
 801b8c0:	6878      	ldr	r0, [r7, #4]
 801b8c2:	4798      	blx	r3
 801b8c4:	4603      	mov	r3, r0
}
 801b8c6:	4618      	mov	r0, r3
 801b8c8:	3708      	adds	r7, #8
 801b8ca:	46bd      	mov	sp, r7
 801b8cc:	bd80      	pop	{r7, pc}

0801b8ce <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 801b8ce:	b580      	push	{r7, lr}
 801b8d0:	b082      	sub	sp, #8
 801b8d2:	af00      	add	r7, sp, #0
 801b8d4:	6078      	str	r0, [r7, #4]
 801b8d6:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 801b8d8:	687b      	ldr	r3, [r7, #4]
 801b8da:	681b      	ldr	r3, [r3, #0]
 801b8dc:	33b0      	adds	r3, #176	; 0xb0
 801b8de:	681b      	ldr	r3, [r3, #0]
 801b8e0:	6878      	ldr	r0, [r7, #4]
 801b8e2:	4798      	blx	r3
 801b8e4:	4603      	mov	r3, r0
}
 801b8e6:	4618      	mov	r0, r3
 801b8e8:	3708      	adds	r7, #8
 801b8ea:	46bd      	mov	sp, r7
 801b8ec:	bd80      	pop	{r7, pc}
	...

0801b8f0 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 801b8f0:	b480      	push	{r7}
 801b8f2:	b083      	sub	sp, #12
 801b8f4:	af00      	add	r7, sp, #0
 801b8f6:	6078      	str	r0, [r7, #4]
    return "";
 801b8f8:	4b03      	ldr	r3, [pc, #12]	; (801b908 <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 801b8fa:	4618      	mov	r0, r3
 801b8fc:	370c      	adds	r7, #12
 801b8fe:	46bd      	mov	sp, r7
 801b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b904:	4770      	bx	lr
 801b906:	bf00      	nop
 801b908:	0802815c 	.word	0x0802815c

0801b90c <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 801b90c:	b580      	push	{r7, lr}
 801b90e:	b082      	sub	sp, #8
 801b910:	af00      	add	r7, sp, #0
 801b912:	6078      	str	r0, [r7, #4]
 801b914:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 801b916:	687b      	ldr	r3, [r7, #4]
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	3394      	adds	r3, #148	; 0x94
 801b91c:	681b      	ldr	r3, [r3, #0]
 801b91e:	6878      	ldr	r0, [r7, #4]
 801b920:	4798      	blx	r3
 801b922:	4603      	mov	r3, r0
}
 801b924:	4618      	mov	r0, r3
 801b926:	3708      	adds	r7, #8
 801b928:	46bd      	mov	sp, r7
 801b92a:	bd80      	pop	{r7, pc}

0801b92c <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 801b92c:	b480      	push	{r7}
 801b92e:	b083      	sub	sp, #12
 801b930:	af00      	add	r7, sp, #0
 801b932:	6078      	str	r0, [r7, #4]
 801b934:	6039      	str	r1, [r7, #0]
    return 0;
 801b936:	2300      	movs	r3, #0
}
 801b938:	4618      	mov	r0, r3
 801b93a:	370c      	adds	r7, #12
 801b93c:	46bd      	mov	sp, r7
 801b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b942:	4770      	bx	lr

0801b944 <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 801b944:	b580      	push	{r7, lr}
 801b946:	b082      	sub	sp, #8
 801b948:	af00      	add	r7, sp, #0
 801b94a:	6078      	str	r0, [r7, #4]
 801b94c:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	3388      	adds	r3, #136	; 0x88
 801b954:	681b      	ldr	r3, [r3, #0]
 801b956:	6878      	ldr	r0, [r7, #4]
 801b958:	4798      	blx	r3
 801b95a:	4603      	mov	r3, r0
}
 801b95c:	4618      	mov	r0, r3
 801b95e:	3708      	adds	r7, #8
 801b960:	46bd      	mov	sp, r7
 801b962:	bd80      	pop	{r7, pc}

0801b964 <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 801b964:	b590      	push	{r4, r7, lr}
 801b966:	b085      	sub	sp, #20
 801b968:	af00      	add	r7, sp, #0
 801b96a:	6078      	str	r0, [r7, #4]
 801b96c:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	3304      	adds	r3, #4
 801b972:	490e      	ldr	r1, [pc, #56]	; (801b9ac <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 801b974:	4618      	mov	r0, r3
 801b976:	f7f3 fb7d 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 801b97a:	687b      	ldr	r3, [r7, #4]
 801b97c:	1d1c      	adds	r4, r3, #4
 801b97e:	f107 0308 	add.w	r3, r7, #8
 801b982:	6839      	ldr	r1, [r7, #0]
 801b984:	4618      	mov	r0, r3
 801b986:	f7f3 fdd1 	bl	800f52c <_Z10StringFromPKv>
 801b98a:	f107 0308 	add.w	r3, r7, #8
 801b98e:	4619      	mov	r1, r3
 801b990:	4620      	mov	r0, r4
 801b992:	f7f3 fb5d 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801b996:	f107 0308 	add.w	r3, r7, #8
 801b99a:	4618      	mov	r0, r3
 801b99c:	f7f3 fadb 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return *this;
 801b9a0:	687b      	ldr	r3, [r7, #4]
}
 801b9a2:	4618      	mov	r0, r3
 801b9a4:	3714      	adds	r7, #20
 801b9a6:	46bd      	mov	sp, r7
 801b9a8:	bd90      	pop	{r4, r7, pc}
 801b9aa:	bf00      	nop
 801b9ac:	08028290 	.word	0x08028290

0801b9b0 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 801b9b0:	b598      	push	{r3, r4, r7, lr}
 801b9b2:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 801b9b4:	4b09      	ldr	r3, [pc, #36]	; (801b9dc <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801b9b6:	681b      	ldr	r3, [r3, #0]
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d10b      	bne.n	801b9d4 <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 801b9bc:	f240 32f3 	movw	r2, #1011	; 0x3f3
 801b9c0:	4907      	ldr	r1, [pc, #28]	; (801b9e0 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 801b9c2:	200c      	movs	r0, #12
 801b9c4:	f7f0 fb4c 	bl	800c060 <_ZnwjPKci>
 801b9c8:	4604      	mov	r4, r0
 801b9ca:	4620      	mov	r0, r4
 801b9cc:	f7ff fa4c 	bl	801ae68 <_ZN19MockActualCallTraceC1Ev>
 801b9d0:	4b02      	ldr	r3, [pc, #8]	; (801b9dc <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801b9d2:	601c      	str	r4, [r3, #0]
    return *instance_;
 801b9d4:	4b01      	ldr	r3, [pc, #4]	; (801b9dc <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801b9d6:	681b      	ldr	r3, [r3, #0]
}
 801b9d8:	4618      	mov	r0, r3
 801b9da:	bd98      	pop	{r3, r4, r7, pc}
 801b9dc:	20000f94 	.word	0x20000f94
 801b9e0:	08028174 	.word	0x08028174

0801b9e4 <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 801b9e4:	b580      	push	{r7, lr}
 801b9e6:	af00      	add	r7, sp, #0
    delete instance_;
 801b9e8:	4b06      	ldr	r3, [pc, #24]	; (801ba04 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801b9ea:	681b      	ldr	r3, [r3, #0]
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d004      	beq.n	801b9fa <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 801b9f0:	681a      	ldr	r2, [r3, #0]
 801b9f2:	3204      	adds	r2, #4
 801b9f4:	6812      	ldr	r2, [r2, #0]
 801b9f6:	4618      	mov	r0, r3
 801b9f8:	4790      	blx	r2
    instance_ = NULLPTR;
 801b9fa:	4b02      	ldr	r3, [pc, #8]	; (801ba04 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801b9fc:	2200      	movs	r2, #0
 801b9fe:	601a      	str	r2, [r3, #0]
}
 801ba00:	bf00      	nop
 801ba02:	bd80      	pop	{r7, pc}
 801ba04:	20000f94 	.word	0x20000f94

0801ba08 <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 801ba08:	b580      	push	{r7, lr}
 801ba0a:	b082      	sub	sp, #8
 801ba0c:	af00      	add	r7, sp, #0
 801ba0e:	6078      	str	r0, [r7, #4]
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	4618      	mov	r0, r3
 801ba14:	f7fd fe9a 	bl	801974c <_ZN14MockActualCallC1Ev>
 801ba18:	4a03      	ldr	r2, [pc, #12]	; (801ba28 <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	601a      	str	r2, [r3, #0]
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	4618      	mov	r0, r3
 801ba22:	3708      	adds	r7, #8
 801ba24:	46bd      	mov	sp, r7
 801ba26:	bd80      	pop	{r7, pc}
 801ba28:	0802b22c 	.word	0x0802b22c

0801ba2c <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 801ba2c:	b580      	push	{r7, lr}
 801ba2e:	af00      	add	r7, sp, #0
 801ba30:	4801      	ldr	r0, [pc, #4]	; (801ba38 <__tcf_0+0xc>)
 801ba32:	f000 f831 	bl	801ba98 <_ZN21MockIgnoredActualCallD1Ev>
 801ba36:	bd80      	pop	{r7, pc}
 801ba38:	20000f98 	.word	0x20000f98

0801ba3c <_ZN21MockIgnoredActualCall8instanceEv>:
{
 801ba3c:	b580      	push	{r7, lr}
 801ba3e:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 801ba40:	4b12      	ldr	r3, [pc, #72]	; (801ba8c <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801ba42:	781b      	ldrb	r3, [r3, #0]
 801ba44:	f3bf 8f5b 	dmb	ish
 801ba48:	b2db      	uxtb	r3, r3
 801ba4a:	f003 0301 	and.w	r3, r3, #1
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	bf0c      	ite	eq
 801ba52:	2301      	moveq	r3, #1
 801ba54:	2300      	movne	r3, #0
 801ba56:	b2db      	uxtb	r3, r3
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	d013      	beq.n	801ba84 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 801ba5c:	480b      	ldr	r0, [pc, #44]	; (801ba8c <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801ba5e:	f005 fd83 	bl	8021568 <__cxa_guard_acquire>
 801ba62:	4603      	mov	r3, r0
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	bf14      	ite	ne
 801ba68:	2301      	movne	r3, #1
 801ba6a:	2300      	moveq	r3, #0
 801ba6c:	b2db      	uxtb	r3, r3
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	d008      	beq.n	801ba84 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 801ba72:	4807      	ldr	r0, [pc, #28]	; (801ba90 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 801ba74:	f7ff ffc8 	bl	801ba08 <_ZN21MockIgnoredActualCallC1Ev>
 801ba78:	4804      	ldr	r0, [pc, #16]	; (801ba8c <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801ba7a:	f005 fd81 	bl	8021580 <__cxa_guard_release>
 801ba7e:	4805      	ldr	r0, [pc, #20]	; (801ba94 <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 801ba80:	f005 fda5 	bl	80215ce <atexit>
    return call;
 801ba84:	4b02      	ldr	r3, [pc, #8]	; (801ba90 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 801ba86:	4618      	mov	r0, r3
 801ba88:	bd80      	pop	{r7, pc}
 801ba8a:	bf00      	nop
 801ba8c:	20000f9c 	.word	0x20000f9c
 801ba90:	20000f98 	.word	0x20000f98
 801ba94:	0801ba2d 	.word	0x0801ba2d

0801ba98 <_ZN21MockIgnoredActualCallD1Ev>:
 801ba98:	b580      	push	{r7, lr}
 801ba9a:	b082      	sub	sp, #8
 801ba9c:	af00      	add	r7, sp, #0
 801ba9e:	6078      	str	r0, [r7, #4]
 801baa0:	4a05      	ldr	r2, [pc, #20]	; (801bab8 <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	601a      	str	r2, [r3, #0]
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	4618      	mov	r0, r3
 801baaa:	f7fd fe5f 	bl	801976c <_ZN14MockActualCallD1Ev>
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	4618      	mov	r0, r3
 801bab2:	3708      	adds	r7, #8
 801bab4:	46bd      	mov	sp, r7
 801bab6:	bd80      	pop	{r7, pc}
 801bab8:	0802b22c 	.word	0x0802b22c

0801babc <_ZN21MockIgnoredActualCallD0Ev>:
 801babc:	b580      	push	{r7, lr}
 801babe:	b082      	sub	sp, #8
 801bac0:	af00      	add	r7, sp, #0
 801bac2:	6078      	str	r0, [r7, #4]
 801bac4:	6878      	ldr	r0, [r7, #4]
 801bac6:	f7ff ffe7 	bl	801ba98 <_ZN21MockIgnoredActualCallD1Ev>
 801baca:	2104      	movs	r1, #4
 801bacc:	6878      	ldr	r0, [r7, #4]
 801bace:	f7f0 fadb 	bl	800c088 <_ZdlPvj>
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	4618      	mov	r0, r3
 801bad6:	3708      	adds	r7, #8
 801bad8:	46bd      	mov	sp, r7
 801bada:	bd80      	pop	{r7, pc}

0801badc <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 801badc:	b580      	push	{r7, lr}
 801bade:	b082      	sub	sp, #8
 801bae0:	af00      	add	r7, sp, #0
 801bae2:	6078      	str	r0, [r7, #4]
 801bae4:	4a05      	ldr	r2, [pc, #20]	; (801bafc <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	601a      	str	r2, [r3, #0]
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	4618      	mov	r0, r3
 801baee:	f7f0 fefd 	bl	800c8ec <_ZN11MockFailureD1Ev>
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	4618      	mov	r0, r3
 801baf6:	3708      	adds	r7, #8
 801baf8:	46bd      	mov	sp, r7
 801bafa:	bd80      	pop	{r7, pc}
 801bafc:	0802b124 	.word	0x0802b124

0801bb00 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 801bb00:	b580      	push	{r7, lr}
 801bb02:	b082      	sub	sp, #8
 801bb04:	af00      	add	r7, sp, #0
 801bb06:	6078      	str	r0, [r7, #4]
 801bb08:	6878      	ldr	r0, [r7, #4]
 801bb0a:	f7ff ffe7 	bl	801badc <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 801bb0e:	2134      	movs	r1, #52	; 0x34
 801bb10:	6878      	ldr	r0, [r7, #4]
 801bb12:	f7f0 fab9 	bl	800c088 <_ZdlPvj>
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	4618      	mov	r0, r3
 801bb1a:	3708      	adds	r7, #8
 801bb1c:	46bd      	mov	sp, r7
 801bb1e:	bd80      	pop	{r7, pc}

0801bb20 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 801bb20:	b580      	push	{r7, lr}
 801bb22:	b082      	sub	sp, #8
 801bb24:	af00      	add	r7, sp, #0
 801bb26:	6078      	str	r0, [r7, #4]
 801bb28:	4a05      	ldr	r2, [pc, #20]	; (801bb40 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	601a      	str	r2, [r3, #0]
 801bb2e:	687b      	ldr	r3, [r7, #4]
 801bb30:	4618      	mov	r0, r3
 801bb32:	f7f0 fedb 	bl	800c8ec <_ZN11MockFailureD1Ev>
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	4618      	mov	r0, r3
 801bb3a:	3708      	adds	r7, #8
 801bb3c:	46bd      	mov	sp, r7
 801bb3e:	bd80      	pop	{r7, pc}
 801bb40:	0802b200 	.word	0x0802b200

0801bb44 <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 801bb44:	b580      	push	{r7, lr}
 801bb46:	b082      	sub	sp, #8
 801bb48:	af00      	add	r7, sp, #0
 801bb4a:	6078      	str	r0, [r7, #4]
 801bb4c:	6878      	ldr	r0, [r7, #4]
 801bb4e:	f7ff ffe7 	bl	801bb20 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 801bb52:	2134      	movs	r1, #52	; 0x34
 801bb54:	6878      	ldr	r0, [r7, #4]
 801bb56:	f7f0 fa97 	bl	800c088 <_ZdlPvj>
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	4618      	mov	r0, r3
 801bb5e:	3708      	adds	r7, #8
 801bb60:	46bd      	mov	sp, r7
 801bb62:	bd80      	pop	{r7, pc}

0801bb64 <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 801bb64:	b580      	push	{r7, lr}
 801bb66:	b082      	sub	sp, #8
 801bb68:	af00      	add	r7, sp, #0
 801bb6a:	6078      	str	r0, [r7, #4]
 801bb6c:	4a05      	ldr	r2, [pc, #20]	; (801bb84 <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	601a      	str	r2, [r3, #0]
 801bb72:	687b      	ldr	r3, [r7, #4]
 801bb74:	4618      	mov	r0, r3
 801bb76:	f7f0 feb9 	bl	800c8ec <_ZN11MockFailureD1Ev>
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	4618      	mov	r0, r3
 801bb7e:	3708      	adds	r7, #8
 801bb80:	46bd      	mov	sp, r7
 801bb82:	bd80      	pop	{r7, pc}
 801bb84:	0802b1d4 	.word	0x0802b1d4

0801bb88 <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 801bb88:	b580      	push	{r7, lr}
 801bb8a:	b082      	sub	sp, #8
 801bb8c:	af00      	add	r7, sp, #0
 801bb8e:	6078      	str	r0, [r7, #4]
 801bb90:	6878      	ldr	r0, [r7, #4]
 801bb92:	f7ff ffe7 	bl	801bb64 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 801bb96:	2134      	movs	r1, #52	; 0x34
 801bb98:	6878      	ldr	r0, [r7, #4]
 801bb9a:	f7f0 fa75 	bl	800c088 <_ZdlPvj>
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	4618      	mov	r0, r3
 801bba2:	3708      	adds	r7, #8
 801bba4:	46bd      	mov	sp, r7
 801bba6:	bd80      	pop	{r7, pc}

0801bba8 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 801bba8:	b580      	push	{r7, lr}
 801bbaa:	b082      	sub	sp, #8
 801bbac:	af00      	add	r7, sp, #0
 801bbae:	6078      	str	r0, [r7, #4]
 801bbb0:	4a05      	ldr	r2, [pc, #20]	; (801bbc8 <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	601a      	str	r2, [r3, #0]
 801bbb6:	687b      	ldr	r3, [r7, #4]
 801bbb8:	4618      	mov	r0, r3
 801bbba:	f7f0 fe97 	bl	800c8ec <_ZN11MockFailureD1Ev>
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	4618      	mov	r0, r3
 801bbc2:	3708      	adds	r7, #8
 801bbc4:	46bd      	mov	sp, r7
 801bbc6:	bd80      	pop	{r7, pc}
 801bbc8:	0802b1a8 	.word	0x0802b1a8

0801bbcc <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 801bbcc:	b580      	push	{r7, lr}
 801bbce:	b082      	sub	sp, #8
 801bbd0:	af00      	add	r7, sp, #0
 801bbd2:	6078      	str	r0, [r7, #4]
 801bbd4:	6878      	ldr	r0, [r7, #4]
 801bbd6:	f7ff ffe7 	bl	801bba8 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801bbda:	2134      	movs	r1, #52	; 0x34
 801bbdc:	6878      	ldr	r0, [r7, #4]
 801bbde:	f7f0 fa53 	bl	800c088 <_ZdlPvj>
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	4618      	mov	r0, r3
 801bbe6:	3708      	adds	r7, #8
 801bbe8:	46bd      	mov	sp, r7
 801bbea:	bd80      	pop	{r7, pc}

0801bbec <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 801bbec:	b580      	push	{r7, lr}
 801bbee:	b082      	sub	sp, #8
 801bbf0:	af00      	add	r7, sp, #0
 801bbf2:	6078      	str	r0, [r7, #4]
 801bbf4:	4a05      	ldr	r2, [pc, #20]	; (801bc0c <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	601a      	str	r2, [r3, #0]
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	4618      	mov	r0, r3
 801bbfe:	f7f0 fe75 	bl	800c8ec <_ZN11MockFailureD1Ev>
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	4618      	mov	r0, r3
 801bc06:	3708      	adds	r7, #8
 801bc08:	46bd      	mov	sp, r7
 801bc0a:	bd80      	pop	{r7, pc}
 801bc0c:	0802b150 	.word	0x0802b150

0801bc10 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 801bc10:	b580      	push	{r7, lr}
 801bc12:	b082      	sub	sp, #8
 801bc14:	af00      	add	r7, sp, #0
 801bc16:	6078      	str	r0, [r7, #4]
 801bc18:	6878      	ldr	r0, [r7, #4]
 801bc1a:	f7ff ffe7 	bl	801bbec <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 801bc1e:	2134      	movs	r1, #52	; 0x34
 801bc20:	6878      	ldr	r0, [r7, #4]
 801bc22:	f7f0 fa31 	bl	800c088 <_ZdlPvj>
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	4618      	mov	r0, r3
 801bc2a:	3708      	adds	r7, #8
 801bc2c:	46bd      	mov	sp, r7
 801bc2e:	bd80      	pop	{r7, pc}

0801bc30 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 801bc30:	b580      	push	{r7, lr}
 801bc32:	b082      	sub	sp, #8
 801bc34:	af00      	add	r7, sp, #0
 801bc36:	6078      	str	r0, [r7, #4]
 801bc38:	4a05      	ldr	r2, [pc, #20]	; (801bc50 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	601a      	str	r2, [r3, #0]
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	4618      	mov	r0, r3
 801bc42:	f7f0 fe53 	bl	800c8ec <_ZN11MockFailureD1Ev>
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	4618      	mov	r0, r3
 801bc4a:	3708      	adds	r7, #8
 801bc4c:	46bd      	mov	sp, r7
 801bc4e:	bd80      	pop	{r7, pc}
 801bc50:	0802b17c 	.word	0x0802b17c

0801bc54 <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 801bc54:	b580      	push	{r7, lr}
 801bc56:	b082      	sub	sp, #8
 801bc58:	af00      	add	r7, sp, #0
 801bc5a:	6078      	str	r0, [r7, #4]
 801bc5c:	6878      	ldr	r0, [r7, #4]
 801bc5e:	f7ff ffe7 	bl	801bc30 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 801bc62:	2134      	movs	r1, #52	; 0x34
 801bc64:	6878      	ldr	r0, [r7, #4]
 801bc66:	f7f0 fa0f 	bl	800c088 <_ZdlPvj>
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	4618      	mov	r0, r3
 801bc6e:	3708      	adds	r7, #8
 801bc70:	46bd      	mov	sp, r7
 801bc72:	bd80      	pop	{r7, pc}

0801bc74 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 801bc74:	b580      	push	{r7, lr}
 801bc76:	b082      	sub	sp, #8
 801bc78:	af00      	add	r7, sp, #0
 801bc7a:	6078      	str	r0, [r7, #4]
 801bc7c:	4a05      	ldr	r2, [pc, #20]	; (801bc94 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	601a      	str	r2, [r3, #0]
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	4618      	mov	r0, r3
 801bc86:	f7f0 fe31 	bl	800c8ec <_ZN11MockFailureD1Ev>
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	4618      	mov	r0, r3
 801bc8e:	3708      	adds	r7, #8
 801bc90:	46bd      	mov	sp, r7
 801bc92:	bd80      	pop	{r7, pc}
 801bc94:	0802b0cc 	.word	0x0802b0cc

0801bc98 <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 801bc98:	b580      	push	{r7, lr}
 801bc9a:	b082      	sub	sp, #8
 801bc9c:	af00      	add	r7, sp, #0
 801bc9e:	6078      	str	r0, [r7, #4]
 801bca0:	6878      	ldr	r0, [r7, #4]
 801bca2:	f7ff ffe7 	bl	801bc74 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801bca6:	2134      	movs	r1, #52	; 0x34
 801bca8:	6878      	ldr	r0, [r7, #4]
 801bcaa:	f7f0 f9ed 	bl	800c088 <_ZdlPvj>
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	4618      	mov	r0, r3
 801bcb2:	3708      	adds	r7, #8
 801bcb4:	46bd      	mov	sp, r7
 801bcb6:	bd80      	pop	{r7, pc}

0801bcb8 <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 801bcb8:	b580      	push	{r7, lr}
 801bcba:	b082      	sub	sp, #8
 801bcbc:	af00      	add	r7, sp, #0
 801bcbe:	6078      	str	r0, [r7, #4]
 801bcc0:	4a05      	ldr	r2, [pc, #20]	; (801bcd8 <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	601a      	str	r2, [r3, #0]
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	4618      	mov	r0, r3
 801bcca:	f7f0 fe0f 	bl	800c8ec <_ZN11MockFailureD1Ev>
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	4618      	mov	r0, r3
 801bcd2:	3708      	adds	r7, #8
 801bcd4:	46bd      	mov	sp, r7
 801bcd6:	bd80      	pop	{r7, pc}
 801bcd8:	0802b0f8 	.word	0x0802b0f8

0801bcdc <_ZN27MockUnexpectedObjectFailureD0Ev>:
 801bcdc:	b580      	push	{r7, lr}
 801bcde:	b082      	sub	sp, #8
 801bce0:	af00      	add	r7, sp, #0
 801bce2:	6078      	str	r0, [r7, #4]
 801bce4:	6878      	ldr	r0, [r7, #4]
 801bce6:	f7ff ffe7 	bl	801bcb8 <_ZN27MockUnexpectedObjectFailureD1Ev>
 801bcea:	2134      	movs	r1, #52	; 0x34
 801bcec:	6878      	ldr	r0, [r7, #4]
 801bcee:	f7f0 f9cb 	bl	800c088 <_ZdlPvj>
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	4618      	mov	r0, r3
 801bcf6:	3708      	adds	r7, #8
 801bcf8:	46bd      	mov	sp, r7
 801bcfa:	bd80      	pop	{r7, pc}

0801bcfc <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 801bcfc:	b580      	push	{r7, lr}
 801bcfe:	b082      	sub	sp, #8
 801bd00:	af00      	add	r7, sp, #0
 801bd02:	6078      	str	r0, [r7, #4]
 801bd04:	6039      	str	r1, [r7, #0]
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	681b      	ldr	r3, [r3, #0]
 801bd0a:	3310      	adds	r3, #16
 801bd0c:	681b      	ldr	r3, [r3, #0]
 801bd0e:	683a      	ldr	r2, [r7, #0]
 801bd10:	6839      	ldr	r1, [r7, #0]
 801bd12:	6878      	ldr	r0, [r7, #4]
 801bd14:	4798      	blx	r3
 801bd16:	4603      	mov	r3, r0
 801bd18:	4618      	mov	r0, r3
 801bd1a:	3708      	adds	r7, #8
 801bd1c:	46bd      	mov	sp, r7
 801bd1e:	bd80      	pop	{r7, pc}

0801bd20 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 801bd20:	b480      	push	{r7}
 801bd22:	b083      	sub	sp, #12
 801bd24:	af00      	add	r7, sp, #0
 801bd26:	6078      	str	r0, [r7, #4]
 801bd28:	6039      	str	r1, [r7, #0]
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	4618      	mov	r0, r3
 801bd2e:	370c      	adds	r7, #12
 801bd30:	46bd      	mov	sp, r7
 801bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd36:	4770      	bx	lr

0801bd38 <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 801bd38:	b480      	push	{r7}
 801bd3a:	b083      	sub	sp, #12
 801bd3c:	af00      	add	r7, sp, #0
 801bd3e:	6078      	str	r0, [r7, #4]
 801bd40:	6039      	str	r1, [r7, #0]
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	4618      	mov	r0, r3
 801bd46:	370c      	adds	r7, #12
 801bd48:	46bd      	mov	sp, r7
 801bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd4e:	4770      	bx	lr

0801bd50 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 801bd50:	b480      	push	{r7}
 801bd52:	b085      	sub	sp, #20
 801bd54:	af00      	add	r7, sp, #0
 801bd56:	60f8      	str	r0, [r7, #12]
 801bd58:	60b9      	str	r1, [r7, #8]
 801bd5a:	607a      	str	r2, [r7, #4]
 801bd5c:	68fb      	ldr	r3, [r7, #12]
 801bd5e:	4618      	mov	r0, r3
 801bd60:	3714      	adds	r7, #20
 801bd62:	46bd      	mov	sp, r7
 801bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd68:	4770      	bx	lr

0801bd6a <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 801bd6a:	b480      	push	{r7}
 801bd6c:	b085      	sub	sp, #20
 801bd6e:	af00      	add	r7, sp, #0
 801bd70:	60f8      	str	r0, [r7, #12]
 801bd72:	60b9      	str	r1, [r7, #8]
 801bd74:	4613      	mov	r3, r2
 801bd76:	71fb      	strb	r3, [r7, #7]
 801bd78:	68fb      	ldr	r3, [r7, #12]
 801bd7a:	4618      	mov	r0, r3
 801bd7c:	3714      	adds	r7, #20
 801bd7e:	46bd      	mov	sp, r7
 801bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd84:	4770      	bx	lr

0801bd86 <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801bd86:	b480      	push	{r7}
 801bd88:	b085      	sub	sp, #20
 801bd8a:	af00      	add	r7, sp, #0
 801bd8c:	60f8      	str	r0, [r7, #12]
 801bd8e:	60b9      	str	r1, [r7, #8]
 801bd90:	607a      	str	r2, [r7, #4]
 801bd92:	68fb      	ldr	r3, [r7, #12]
 801bd94:	4618      	mov	r0, r3
 801bd96:	3714      	adds	r7, #20
 801bd98:	46bd      	mov	sp, r7
 801bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd9e:	4770      	bx	lr

0801bda0 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 801bda0:	b480      	push	{r7}
 801bda2:	b085      	sub	sp, #20
 801bda4:	af00      	add	r7, sp, #0
 801bda6:	60f8      	str	r0, [r7, #12]
 801bda8:	60b9      	str	r1, [r7, #8]
 801bdaa:	607a      	str	r2, [r7, #4]
 801bdac:	68fb      	ldr	r3, [r7, #12]
 801bdae:	4618      	mov	r0, r3
 801bdb0:	3714      	adds	r7, #20
 801bdb2:	46bd      	mov	sp, r7
 801bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdb8:	4770      	bx	lr

0801bdba <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 801bdba:	b480      	push	{r7}
 801bdbc:	b085      	sub	sp, #20
 801bdbe:	af00      	add	r7, sp, #0
 801bdc0:	60f8      	str	r0, [r7, #12]
 801bdc2:	60b9      	str	r1, [r7, #8]
 801bdc4:	607a      	str	r2, [r7, #4]
 801bdc6:	68fb      	ldr	r3, [r7, #12]
 801bdc8:	4618      	mov	r0, r3
 801bdca:	3714      	adds	r7, #20
 801bdcc:	46bd      	mov	sp, r7
 801bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdd2:	4770      	bx	lr

0801bdd4 <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 801bdd4:	b480      	push	{r7}
 801bdd6:	b085      	sub	sp, #20
 801bdd8:	af00      	add	r7, sp, #0
 801bdda:	60f8      	str	r0, [r7, #12]
 801bddc:	60b9      	str	r1, [r7, #8]
 801bdde:	607a      	str	r2, [r7, #4]
 801bde0:	68fb      	ldr	r3, [r7, #12]
 801bde2:	4618      	mov	r0, r3
 801bde4:	3714      	adds	r7, #20
 801bde6:	46bd      	mov	sp, r7
 801bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdec:	4770      	bx	lr

0801bdee <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 801bdee:	b480      	push	{r7}
 801bdf0:	b085      	sub	sp, #20
 801bdf2:	af00      	add	r7, sp, #0
 801bdf4:	60f8      	str	r0, [r7, #12]
 801bdf6:	60b9      	str	r1, [r7, #8]
 801bdf8:	4639      	mov	r1, r7
 801bdfa:	e881 000c 	stmia.w	r1, {r2, r3}
 801bdfe:	68fb      	ldr	r3, [r7, #12]
 801be00:	4618      	mov	r0, r3
 801be02:	3714      	adds	r7, #20
 801be04:	46bd      	mov	sp, r7
 801be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be0a:	4770      	bx	lr

0801be0c <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 801be0c:	b480      	push	{r7}
 801be0e:	b085      	sub	sp, #20
 801be10:	af00      	add	r7, sp, #0
 801be12:	60f8      	str	r0, [r7, #12]
 801be14:	60b9      	str	r1, [r7, #8]
 801be16:	4639      	mov	r1, r7
 801be18:	e881 000c 	stmia.w	r1, {r2, r3}
 801be1c:	68fb      	ldr	r3, [r7, #12]
 801be1e:	4618      	mov	r0, r3
 801be20:	3714      	adds	r7, #20
 801be22:	46bd      	mov	sp, r7
 801be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be28:	4770      	bx	lr

0801be2a <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 801be2a:	b480      	push	{r7}
 801be2c:	b085      	sub	sp, #20
 801be2e:	af00      	add	r7, sp, #0
 801be30:	60f8      	str	r0, [r7, #12]
 801be32:	60b9      	str	r1, [r7, #8]
 801be34:	ed87 0b00 	vstr	d0, [r7]
 801be38:	68fb      	ldr	r3, [r7, #12]
 801be3a:	4618      	mov	r0, r3
 801be3c:	3714      	adds	r7, #20
 801be3e:	46bd      	mov	sp, r7
 801be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be44:	4770      	bx	lr

0801be46 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 801be46:	b480      	push	{r7}
 801be48:	b087      	sub	sp, #28
 801be4a:	af00      	add	r7, sp, #0
 801be4c:	6178      	str	r0, [r7, #20]
 801be4e:	6139      	str	r1, [r7, #16]
 801be50:	ed87 0b02 	vstr	d0, [r7, #8]
 801be54:	ed87 1b00 	vstr	d1, [r7]
 801be58:	697b      	ldr	r3, [r7, #20]
 801be5a:	4618      	mov	r0, r3
 801be5c:	371c      	adds	r7, #28
 801be5e:	46bd      	mov	sp, r7
 801be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be64:	4770      	bx	lr

0801be66 <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 801be66:	b480      	push	{r7}
 801be68:	b085      	sub	sp, #20
 801be6a:	af00      	add	r7, sp, #0
 801be6c:	60f8      	str	r0, [r7, #12]
 801be6e:	60b9      	str	r1, [r7, #8]
 801be70:	607a      	str	r2, [r7, #4]
 801be72:	68fb      	ldr	r3, [r7, #12]
 801be74:	4618      	mov	r0, r3
 801be76:	3714      	adds	r7, #20
 801be78:	46bd      	mov	sp, r7
 801be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be7e:	4770      	bx	lr

0801be80 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 801be80:	b480      	push	{r7}
 801be82:	b085      	sub	sp, #20
 801be84:	af00      	add	r7, sp, #0
 801be86:	60f8      	str	r0, [r7, #12]
 801be88:	60b9      	str	r1, [r7, #8]
 801be8a:	607a      	str	r2, [r7, #4]
 801be8c:	68fb      	ldr	r3, [r7, #12]
 801be8e:	4618      	mov	r0, r3
 801be90:	3714      	adds	r7, #20
 801be92:	46bd      	mov	sp, r7
 801be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be98:	4770      	bx	lr

0801be9a <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 801be9a:	b480      	push	{r7}
 801be9c:	b085      	sub	sp, #20
 801be9e:	af00      	add	r7, sp, #0
 801bea0:	60f8      	str	r0, [r7, #12]
 801bea2:	60b9      	str	r1, [r7, #8]
 801bea4:	607a      	str	r2, [r7, #4]
 801bea6:	68fb      	ldr	r3, [r7, #12]
 801bea8:	4618      	mov	r0, r3
 801beaa:	3714      	adds	r7, #20
 801beac:	46bd      	mov	sp, r7
 801beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beb2:	4770      	bx	lr

0801beb4 <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 801beb4:	b480      	push	{r7}
 801beb6:	b085      	sub	sp, #20
 801beb8:	af00      	add	r7, sp, #0
 801beba:	60f8      	str	r0, [r7, #12]
 801bebc:	60b9      	str	r1, [r7, #8]
 801bebe:	607a      	str	r2, [r7, #4]
 801bec0:	68fb      	ldr	r3, [r7, #12]
 801bec2:	4618      	mov	r0, r3
 801bec4:	3714      	adds	r7, #20
 801bec6:	46bd      	mov	sp, r7
 801bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801becc:	4770      	bx	lr

0801bece <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 801bece:	b480      	push	{r7}
 801bed0:	b085      	sub	sp, #20
 801bed2:	af00      	add	r7, sp, #0
 801bed4:	60f8      	str	r0, [r7, #12]
 801bed6:	60b9      	str	r1, [r7, #8]
 801bed8:	607a      	str	r2, [r7, #4]
 801beda:	603b      	str	r3, [r7, #0]
 801bedc:	68fb      	ldr	r3, [r7, #12]
 801bede:	4618      	mov	r0, r3
 801bee0:	3714      	adds	r7, #20
 801bee2:	46bd      	mov	sp, r7
 801bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bee8:	4770      	bx	lr

0801beea <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801beea:	b480      	push	{r7}
 801beec:	b085      	sub	sp, #20
 801beee:	af00      	add	r7, sp, #0
 801bef0:	60f8      	str	r0, [r7, #12]
 801bef2:	60b9      	str	r1, [r7, #8]
 801bef4:	607a      	str	r2, [r7, #4]
 801bef6:	603b      	str	r3, [r7, #0]
 801bef8:	68fb      	ldr	r3, [r7, #12]
 801befa:	4618      	mov	r0, r3
 801befc:	3714      	adds	r7, #20
 801befe:	46bd      	mov	sp, r7
 801bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf04:	4770      	bx	lr

0801bf06 <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 801bf06:	b480      	push	{r7}
 801bf08:	b085      	sub	sp, #20
 801bf0a:	af00      	add	r7, sp, #0
 801bf0c:	60f8      	str	r0, [r7, #12]
 801bf0e:	60b9      	str	r1, [r7, #8]
 801bf10:	607a      	str	r2, [r7, #4]
 801bf12:	603b      	str	r3, [r7, #0]
 801bf14:	68fb      	ldr	r3, [r7, #12]
 801bf16:	4618      	mov	r0, r3
 801bf18:	3714      	adds	r7, #20
 801bf1a:	46bd      	mov	sp, r7
 801bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf20:	4770      	bx	lr

0801bf22 <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801bf22:	b480      	push	{r7}
 801bf24:	b085      	sub	sp, #20
 801bf26:	af00      	add	r7, sp, #0
 801bf28:	60f8      	str	r0, [r7, #12]
 801bf2a:	60b9      	str	r1, [r7, #8]
 801bf2c:	607a      	str	r2, [r7, #4]
 801bf2e:	603b      	str	r3, [r7, #0]
 801bf30:	68fb      	ldr	r3, [r7, #12]
 801bf32:	4618      	mov	r0, r3
 801bf34:	3714      	adds	r7, #20
 801bf36:	46bd      	mov	sp, r7
 801bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf3c:	4770      	bx	lr

0801bf3e <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 801bf3e:	b480      	push	{r7}
 801bf40:	b083      	sub	sp, #12
 801bf42:	af00      	add	r7, sp, #0
 801bf44:	6078      	str	r0, [r7, #4]
 801bf46:	6039      	str	r1, [r7, #0]
 801bf48:	687b      	ldr	r3, [r7, #4]
 801bf4a:	4618      	mov	r0, r3
 801bf4c:	370c      	adds	r7, #12
 801bf4e:	46bd      	mov	sp, r7
 801bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf54:	4770      	bx	lr

0801bf56 <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 801bf56:	b480      	push	{r7}
 801bf58:	b083      	sub	sp, #12
 801bf5a:	af00      	add	r7, sp, #0
 801bf5c:	6078      	str	r0, [r7, #4]
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	4618      	mov	r0, r3
 801bf62:	370c      	adds	r7, #12
 801bf64:	46bd      	mov	sp, r7
 801bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf6a:	4770      	bx	lr

0801bf6c <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 801bf6c:	b480      	push	{r7}
 801bf6e:	b083      	sub	sp, #12
 801bf70:	af00      	add	r7, sp, #0
 801bf72:	6078      	str	r0, [r7, #4]
 801bf74:	460b      	mov	r3, r1
 801bf76:	70fb      	strb	r3, [r7, #3]
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	4618      	mov	r0, r3
 801bf7c:	370c      	adds	r7, #12
 801bf7e:	46bd      	mov	sp, r7
 801bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf84:	4770      	bx	lr

0801bf86 <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 801bf86:	b480      	push	{r7}
 801bf88:	b083      	sub	sp, #12
 801bf8a:	af00      	add	r7, sp, #0
 801bf8c:	6078      	str	r0, [r7, #4]
 801bf8e:	6039      	str	r1, [r7, #0]
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	4618      	mov	r0, r3
 801bf94:	370c      	adds	r7, #12
 801bf96:	46bd      	mov	sp, r7
 801bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf9c:	4770      	bx	lr

0801bf9e <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 801bf9e:	b480      	push	{r7}
 801bfa0:	b083      	sub	sp, #12
 801bfa2:	af00      	add	r7, sp, #0
 801bfa4:	6078      	str	r0, [r7, #4]
 801bfa6:	6039      	str	r1, [r7, #0]
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	4618      	mov	r0, r3
 801bfac:	370c      	adds	r7, #12
 801bfae:	46bd      	mov	sp, r7
 801bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfb4:	4770      	bx	lr

0801bfb6 <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 801bfb6:	b480      	push	{r7}
 801bfb8:	b083      	sub	sp, #12
 801bfba:	af00      	add	r7, sp, #0
 801bfbc:	6078      	str	r0, [r7, #4]
 801bfbe:	6039      	str	r1, [r7, #0]
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	4618      	mov	r0, r3
 801bfc4:	370c      	adds	r7, #12
 801bfc6:	46bd      	mov	sp, r7
 801bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfcc:	4770      	bx	lr

0801bfce <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 801bfce:	b480      	push	{r7}
 801bfd0:	b083      	sub	sp, #12
 801bfd2:	af00      	add	r7, sp, #0
 801bfd4:	6078      	str	r0, [r7, #4]
 801bfd6:	6039      	str	r1, [r7, #0]
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	4618      	mov	r0, r3
 801bfdc:	370c      	adds	r7, #12
 801bfde:	46bd      	mov	sp, r7
 801bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfe4:	4770      	bx	lr

0801bfe6 <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 801bfe6:	b480      	push	{r7}
 801bfe8:	b085      	sub	sp, #20
 801bfea:	af00      	add	r7, sp, #0
 801bfec:	60f8      	str	r0, [r7, #12]
 801bfee:	1d3b      	adds	r3, r7, #4
 801bff0:	e883 0006 	stmia.w	r3, {r1, r2}
 801bff4:	68fb      	ldr	r3, [r7, #12]
 801bff6:	4618      	mov	r0, r3
 801bff8:	3714      	adds	r7, #20
 801bffa:	46bd      	mov	sp, r7
 801bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c000:	4770      	bx	lr

0801c002 <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 801c002:	b480      	push	{r7}
 801c004:	b085      	sub	sp, #20
 801c006:	af00      	add	r7, sp, #0
 801c008:	60f8      	str	r0, [r7, #12]
 801c00a:	1d3b      	adds	r3, r7, #4
 801c00c:	e883 0006 	stmia.w	r3, {r1, r2}
 801c010:	68fb      	ldr	r3, [r7, #12]
 801c012:	4618      	mov	r0, r3
 801c014:	3714      	adds	r7, #20
 801c016:	46bd      	mov	sp, r7
 801c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c01c:	4770      	bx	lr

0801c01e <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 801c01e:	b480      	push	{r7}
 801c020:	b085      	sub	sp, #20
 801c022:	af00      	add	r7, sp, #0
 801c024:	60f8      	str	r0, [r7, #12]
 801c026:	ed87 0b00 	vstr	d0, [r7]
 801c02a:	68fb      	ldr	r3, [r7, #12]
 801c02c:	4618      	mov	r0, r3
 801c02e:	3714      	adds	r7, #20
 801c030:	46bd      	mov	sp, r7
 801c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c036:	4770      	bx	lr

0801c038 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 801c038:	b480      	push	{r7}
 801c03a:	b083      	sub	sp, #12
 801c03c:	af00      	add	r7, sp, #0
 801c03e:	6078      	str	r0, [r7, #4]
 801c040:	6039      	str	r1, [r7, #0]
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	4618      	mov	r0, r3
 801c046:	370c      	adds	r7, #12
 801c048:	46bd      	mov	sp, r7
 801c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c04e:	4770      	bx	lr

0801c050 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 801c050:	b480      	push	{r7}
 801c052:	b083      	sub	sp, #12
 801c054:	af00      	add	r7, sp, #0
 801c056:	6078      	str	r0, [r7, #4]
 801c058:	6039      	str	r1, [r7, #0]
 801c05a:	687b      	ldr	r3, [r7, #4]
 801c05c:	4618      	mov	r0, r3
 801c05e:	370c      	adds	r7, #12
 801c060:	46bd      	mov	sp, r7
 801c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c066:	4770      	bx	lr

0801c068 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 801c068:	b480      	push	{r7}
 801c06a:	b083      	sub	sp, #12
 801c06c:	af00      	add	r7, sp, #0
 801c06e:	6078      	str	r0, [r7, #4]
 801c070:	6039      	str	r1, [r7, #0]
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	4618      	mov	r0, r3
 801c076:	370c      	adds	r7, #12
 801c078:	46bd      	mov	sp, r7
 801c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c07e:	4770      	bx	lr

0801c080 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 801c080:	b480      	push	{r7}
 801c082:	b083      	sub	sp, #12
 801c084:	af00      	add	r7, sp, #0
 801c086:	6078      	str	r0, [r7, #4]
 801c088:	6039      	str	r1, [r7, #0]
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	4618      	mov	r0, r3
 801c08e:	370c      	adds	r7, #12
 801c090:	46bd      	mov	sp, r7
 801c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c096:	4770      	bx	lr

0801c098 <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 801c098:	b480      	push	{r7}
 801c09a:	b083      	sub	sp, #12
 801c09c:	af00      	add	r7, sp, #0
 801c09e:	6078      	str	r0, [r7, #4]
 801c0a0:	6039      	str	r1, [r7, #0]
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	4618      	mov	r0, r3
 801c0a6:	370c      	adds	r7, #12
 801c0a8:	46bd      	mov	sp, r7
 801c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0ae:	4770      	bx	lr

0801c0b0 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 801c0b0:	b480      	push	{r7}
 801c0b2:	b083      	sub	sp, #12
 801c0b4:	af00      	add	r7, sp, #0
 801c0b6:	6078      	str	r0, [r7, #4]
 801c0b8:	4a04      	ldr	r2, [pc, #16]	; (801c0cc <_ZN16MockExpectedCallC1Ev+0x1c>)
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	601a      	str	r2, [r3, #0]
{
}
 801c0be:	687b      	ldr	r3, [r7, #4]
 801c0c0:	4618      	mov	r0, r3
 801c0c2:	370c      	adds	r7, #12
 801c0c4:	46bd      	mov	sp, r7
 801c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0ca:	4770      	bx	lr
 801c0cc:	0802b7d0 	.word	0x0802b7d0

0801c0d0 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 801c0d0:	b480      	push	{r7}
 801c0d2:	b083      	sub	sp, #12
 801c0d4:	af00      	add	r7, sp, #0
 801c0d6:	6078      	str	r0, [r7, #4]
 801c0d8:	4a04      	ldr	r2, [pc, #16]	; (801c0ec <_ZN16MockExpectedCallD1Ev+0x1c>)
 801c0da:	687b      	ldr	r3, [r7, #4]
 801c0dc:	601a      	str	r2, [r3, #0]
{
}
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	4618      	mov	r0, r3
 801c0e2:	370c      	adds	r7, #12
 801c0e4:	46bd      	mov	sp, r7
 801c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0ea:	4770      	bx	lr
 801c0ec:	0802b7d0 	.word	0x0802b7d0

0801c0f0 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 801c0f0:	b580      	push	{r7, lr}
 801c0f2:	b082      	sub	sp, #8
 801c0f4:	af00      	add	r7, sp, #0
 801c0f6:	6078      	str	r0, [r7, #4]
 801c0f8:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 801c0fa:	683b      	ldr	r3, [r7, #0]
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	3358      	adds	r3, #88	; 0x58
 801c100:	681b      	ldr	r3, [r3, #0]
 801c102:	687a      	ldr	r2, [r7, #4]
 801c104:	6839      	ldr	r1, [r7, #0]
 801c106:	4610      	mov	r0, r2
 801c108:	4798      	blx	r3
}
 801c10a:	6878      	ldr	r0, [r7, #4]
 801c10c:	3708      	adds	r7, #8
 801c10e:	46bd      	mov	sp, r7
 801c110:	bd80      	pop	{r7, pc}

0801c112 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 801c112:	b580      	push	{r7, lr}
 801c114:	b082      	sub	sp, #8
 801c116:	af00      	add	r7, sp, #0
 801c118:	6078      	str	r0, [r7, #4]
 801c11a:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	3304      	adds	r3, #4
 801c120:	6839      	ldr	r1, [r7, #0]
 801c122:	4618      	mov	r0, r3
 801c124:	f7f2 fbcb 	bl	800e8be <_ZN12SimpleStringaSERKS_>
}
 801c128:	bf00      	nop
 801c12a:	3708      	adds	r7, #8
 801c12c:	46bd      	mov	sp, r7
 801c12e:	bd80      	pop	{r7, pc}

0801c130 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 801c130:	b580      	push	{r7, lr}
 801c132:	b082      	sub	sp, #8
 801c134:	af00      	add	r7, sp, #0
 801c136:	6078      	str	r0, [r7, #4]
 801c138:	6039      	str	r1, [r7, #0]
    return functionName_;
 801c13a:	683b      	ldr	r3, [r7, #0]
 801c13c:	3304      	adds	r3, #4
 801c13e:	4619      	mov	r1, r3
 801c140:	6878      	ldr	r0, [r7, #4]
 801c142:	f7f2 fba4 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
}
 801c146:	6878      	ldr	r0, [r7, #4]
 801c148:	3708      	adds	r7, #8
 801c14a:	46bd      	mov	sp, r7
 801c14c:	bd80      	pop	{r7, pc}
	...

0801c150 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 801c150:	b590      	push	{r4, r7, lr}
 801c152:	b085      	sub	sp, #20
 801c154:	af00      	add	r7, sp, #0
 801c156:	6078      	str	r0, [r7, #4]
 801c158:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	4618      	mov	r0, r3
 801c15e:	f7ff ffa7 	bl	801c0b0 <_ZN16MockExpectedCallC1Ev>
 801c162:	4a2c      	ldr	r2, [pc, #176]	; (801c214 <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	601a      	str	r2, [r3, #0]
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	3304      	adds	r3, #4
 801c16c:	492a      	ldr	r1, [pc, #168]	; (801c218 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801c16e:	4618      	mov	r0, r3
 801c170:	f7f2 fb39 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	2200      	movs	r2, #0
 801c178:	731a      	strb	r2, [r3, #12]
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	2200      	movs	r2, #0
 801c17e:	735a      	strb	r2, [r3, #13]
 801c180:	687b      	ldr	r3, [r7, #4]
 801c182:	2200      	movs	r2, #0
 801c184:	611a      	str	r2, [r3, #16]
 801c186:	687b      	ldr	r3, [r7, #4]
 801c188:	2200      	movs	r2, #0
 801c18a:	615a      	str	r2, [r3, #20]
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	2200      	movs	r2, #0
 801c190:	761a      	strb	r2, [r3, #24]
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801c198:	f107 0308 	add.w	r3, r7, #8
 801c19c:	491e      	ldr	r1, [pc, #120]	; (801c218 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801c19e:	4618      	mov	r0, r3
 801c1a0:	f7f2 fb21 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801c1a4:	f107 0308 	add.w	r3, r7, #8
 801c1a8:	4619      	mov	r1, r3
 801c1aa:	4620      	mov	r0, r4
 801c1ac:	f003 f840 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
 801c1b0:	f107 0308 	add.w	r3, r7, #8
 801c1b4:	4618      	mov	r0, r3
 801c1b6:	f7f2 fece 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	2200      	movs	r2, #0
 801c1be:	661a      	str	r2, [r3, #96]	; 0x60
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	2200      	movs	r2, #0
 801c1c4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	2201      	movs	r2, #1
 801c1cc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	2200      	movs	r2, #0
 801c1d4:	669a      	str	r2, [r3, #104]	; 0x68
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	683a      	ldr	r2, [r7, #0]
 801c1da:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 801c1dc:	2246      	movs	r2, #70	; 0x46
 801c1de:	490f      	ldr	r1, [pc, #60]	; (801c21c <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801c1e0:	2004      	movs	r0, #4
 801c1e2:	f7ef ff3d 	bl	800c060 <_ZnwjPKci>
 801c1e6:	4604      	mov	r4, r0
 801c1e8:	4620      	mov	r0, r4
 801c1ea:	f004 ff36 	bl	802105a <_ZN18MockNamedValueListC1Ev>
 801c1ee:	687b      	ldr	r3, [r7, #4]
 801c1f0:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 801c1f2:	2247      	movs	r2, #71	; 0x47
 801c1f4:	4909      	ldr	r1, [pc, #36]	; (801c21c <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801c1f6:	2004      	movs	r0, #4
 801c1f8:	f7ef ff32 	bl	800c060 <_ZnwjPKci>
 801c1fc:	4604      	mov	r4, r0
 801c1fe:	4620      	mov	r0, r4
 801c200:	f004 ff2b 	bl	802105a <_ZN18MockNamedValueListC1Ev>
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	621c      	str	r4, [r3, #32]
}
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	4618      	mov	r0, r3
 801c20c:	3714      	adds	r7, #20
 801c20e:	46bd      	mov	sp, r7
 801c210:	bd90      	pop	{r4, r7, pc}
 801c212:	bf00      	nop
 801c214:	0802b614 	.word	0x0802b614
 801c218:	0802829c 	.word	0x0802829c
 801c21c:	080282a0 	.word	0x080282a0

0801c220 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801c220:	b580      	push	{r7, lr}
 801c222:	b082      	sub	sp, #8
 801c224:	af00      	add	r7, sp, #0
 801c226:	6078      	str	r0, [r7, #4]
 801c228:	4a17      	ldr	r2, [pc, #92]	; (801c288 <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 801c22a:	687b      	ldr	r3, [r7, #4]
 801c22c:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	69db      	ldr	r3, [r3, #28]
 801c232:	4618      	mov	r0, r3
 801c234:	f004 ff1f 	bl	8021076 <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	69db      	ldr	r3, [r3, #28]
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	d003      	beq.n	801c248 <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 801c240:	2104      	movs	r1, #4
 801c242:	4618      	mov	r0, r3
 801c244:	f7ef ff20 	bl	800c088 <_ZdlPvj>
    outputParameters_->clear();
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	6a1b      	ldr	r3, [r3, #32]
 801c24c:	4618      	mov	r0, r3
 801c24e:	f004 ff12 	bl	8021076 <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	6a1b      	ldr	r3, [r3, #32]
 801c256:	2b00      	cmp	r3, #0
 801c258:	d003      	beq.n	801c262 <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 801c25a:	2104      	movs	r1, #4
 801c25c:	4618      	mov	r0, r3
 801c25e:	f7ef ff13 	bl	800c088 <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	3328      	adds	r3, #40	; 0x28
 801c266:	4618      	mov	r0, r3
 801c268:	f003 f80c 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	3304      	adds	r3, #4
 801c270:	4618      	mov	r0, r3
 801c272:	f7f2 fe70 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801c276:	687b      	ldr	r3, [r7, #4]
 801c278:	4618      	mov	r0, r3
 801c27a:	f7ff ff29 	bl	801c0d0 <_ZN16MockExpectedCallD1Ev>
}
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	4618      	mov	r0, r3
 801c282:	3708      	adds	r7, #8
 801c284:	46bd      	mov	sp, r7
 801c286:	bd80      	pop	{r7, pc}
 801c288:	0802b614 	.word	0x0802b614

0801c28c <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801c28c:	b580      	push	{r7, lr}
 801c28e:	b082      	sub	sp, #8
 801c290:	af00      	add	r7, sp, #0
 801c292:	6078      	str	r0, [r7, #4]
}
 801c294:	6878      	ldr	r0, [r7, #4]
 801c296:	f7ff ffc3 	bl	801c220 <_ZN23MockCheckedExpectedCallD1Ev>
 801c29a:	2170      	movs	r1, #112	; 0x70
 801c29c:	6878      	ldr	r0, [r7, #4]
 801c29e:	f7ef fef3 	bl	800c088 <_ZdlPvj>
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	4618      	mov	r0, r3
 801c2a6:	3708      	adds	r7, #8
 801c2a8:	46bd      	mov	sp, r7
 801c2aa:	bd80      	pop	{r7, pc}

0801c2ac <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 801c2ac:	b580      	push	{r7, lr}
 801c2ae:	b082      	sub	sp, #8
 801c2b0:	af00      	add	r7, sp, #0
 801c2b2:	6078      	str	r0, [r7, #4]
 801c2b4:	6039      	str	r1, [r7, #0]
    setName(name);
 801c2b6:	6839      	ldr	r1, [r7, #0]
 801c2b8:	6878      	ldr	r0, [r7, #4]
 801c2ba:	f7ff ff2a 	bl	801c112 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 801c2be:	687b      	ldr	r3, [r7, #4]
}
 801c2c0:	4618      	mov	r0, r3
 801c2c2:	3708      	adds	r7, #8
 801c2c4:	46bd      	mov	sp, r7
 801c2c6:	bd80      	pop	{r7, pc}

0801c2c8 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 801c2c8:	b590      	push	{r4, r7, lr}
 801c2ca:	b087      	sub	sp, #28
 801c2cc:	af00      	add	r7, sp, #0
 801c2ce:	60f8      	str	r0, [r7, #12]
 801c2d0:	60b9      	str	r1, [r7, #8]
 801c2d2:	4613      	mov	r3, r2
 801c2d4:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801c2d6:	225a      	movs	r2, #90	; 0x5a
 801c2d8:	490e      	ldr	r1, [pc, #56]	; (801c314 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 801c2da:	2038      	movs	r0, #56	; 0x38
 801c2dc:	f7ef fec0 	bl	800c060 <_ZnwjPKci>
 801c2e0:	4604      	mov	r4, r0
 801c2e2:	68b9      	ldr	r1, [r7, #8]
 801c2e4:	4620      	mov	r0, r4
 801c2e6:	f001 f851 	bl	801d38c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801c2ea:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801c2ec:	68fb      	ldr	r3, [r7, #12]
 801c2ee:	69db      	ldr	r3, [r3, #28]
 801c2f0:	6979      	ldr	r1, [r7, #20]
 801c2f2:	4618      	mov	r0, r3
 801c2f4:	f004 fee2 	bl	80210bc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801c2f8:	697b      	ldr	r3, [r7, #20]
 801c2fa:	681b      	ldr	r3, [r3, #0]
 801c2fc:	3308      	adds	r3, #8
 801c2fe:	681b      	ldr	r3, [r3, #0]
 801c300:	79fa      	ldrb	r2, [r7, #7]
 801c302:	4611      	mov	r1, r2
 801c304:	6978      	ldr	r0, [r7, #20]
 801c306:	4798      	blx	r3
    return *this;
 801c308:	68fb      	ldr	r3, [r7, #12]
}
 801c30a:	4618      	mov	r0, r3
 801c30c:	371c      	adds	r7, #28
 801c30e:	46bd      	mov	sp, r7
 801c310:	bd90      	pop	{r4, r7, pc}
 801c312:	bf00      	nop
 801c314:	080282a0 	.word	0x080282a0

0801c318 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801c318:	b590      	push	{r4, r7, lr}
 801c31a:	b087      	sub	sp, #28
 801c31c:	af00      	add	r7, sp, #0
 801c31e:	60f8      	str	r0, [r7, #12]
 801c320:	60b9      	str	r1, [r7, #8]
 801c322:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801c324:	2262      	movs	r2, #98	; 0x62
 801c326:	490e      	ldr	r1, [pc, #56]	; (801c360 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 801c328:	2038      	movs	r0, #56	; 0x38
 801c32a:	f7ef fe99 	bl	800c060 <_ZnwjPKci>
 801c32e:	4604      	mov	r4, r0
 801c330:	68b9      	ldr	r1, [r7, #8]
 801c332:	4620      	mov	r0, r4
 801c334:	f001 f82a 	bl	801d38c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801c338:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801c33a:	68fb      	ldr	r3, [r7, #12]
 801c33c:	69db      	ldr	r3, [r3, #28]
 801c33e:	6979      	ldr	r1, [r7, #20]
 801c340:	4618      	mov	r0, r3
 801c342:	f004 febb 	bl	80210bc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801c346:	697b      	ldr	r3, [r7, #20]
 801c348:	681b      	ldr	r3, [r3, #0]
 801c34a:	3310      	adds	r3, #16
 801c34c:	681b      	ldr	r3, [r3, #0]
 801c34e:	6879      	ldr	r1, [r7, #4]
 801c350:	6978      	ldr	r0, [r7, #20]
 801c352:	4798      	blx	r3
    return *this;
 801c354:	68fb      	ldr	r3, [r7, #12]
}
 801c356:	4618      	mov	r0, r3
 801c358:	371c      	adds	r7, #28
 801c35a:	46bd      	mov	sp, r7
 801c35c:	bd90      	pop	{r4, r7, pc}
 801c35e:	bf00      	nop
 801c360:	080282a0 	.word	0x080282a0

0801c364 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 801c364:	b590      	push	{r4, r7, lr}
 801c366:	b087      	sub	sp, #28
 801c368:	af00      	add	r7, sp, #0
 801c36a:	60f8      	str	r0, [r7, #12]
 801c36c:	60b9      	str	r1, [r7, #8]
 801c36e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801c370:	226a      	movs	r2, #106	; 0x6a
 801c372:	490e      	ldr	r1, [pc, #56]	; (801c3ac <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 801c374:	2038      	movs	r0, #56	; 0x38
 801c376:	f7ef fe73 	bl	800c060 <_ZnwjPKci>
 801c37a:	4604      	mov	r4, r0
 801c37c:	68b9      	ldr	r1, [r7, #8]
 801c37e:	4620      	mov	r0, r4
 801c380:	f001 f804 	bl	801d38c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801c384:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801c386:	68fb      	ldr	r3, [r7, #12]
 801c388:	69db      	ldr	r3, [r3, #28]
 801c38a:	6979      	ldr	r1, [r7, #20]
 801c38c:	4618      	mov	r0, r3
 801c38e:	f004 fe95 	bl	80210bc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801c392:	697b      	ldr	r3, [r7, #20]
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	330c      	adds	r3, #12
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	6879      	ldr	r1, [r7, #4]
 801c39c:	6978      	ldr	r0, [r7, #20]
 801c39e:	4798      	blx	r3
    return *this;
 801c3a0:	68fb      	ldr	r3, [r7, #12]
}
 801c3a2:	4618      	mov	r0, r3
 801c3a4:	371c      	adds	r7, #28
 801c3a6:	46bd      	mov	sp, r7
 801c3a8:	bd90      	pop	{r4, r7, pc}
 801c3aa:	bf00      	nop
 801c3ac:	080282a0 	.word	0x080282a0

0801c3b0 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 801c3b0:	b590      	push	{r4, r7, lr}
 801c3b2:	b087      	sub	sp, #28
 801c3b4:	af00      	add	r7, sp, #0
 801c3b6:	60f8      	str	r0, [r7, #12]
 801c3b8:	60b9      	str	r1, [r7, #8]
 801c3ba:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801c3bc:	2272      	movs	r2, #114	; 0x72
 801c3be:	490e      	ldr	r1, [pc, #56]	; (801c3f8 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 801c3c0:	2038      	movs	r0, #56	; 0x38
 801c3c2:	f7ef fe4d 	bl	800c060 <_ZnwjPKci>
 801c3c6:	4604      	mov	r4, r0
 801c3c8:	68b9      	ldr	r1, [r7, #8]
 801c3ca:	4620      	mov	r0, r4
 801c3cc:	f000 ffde 	bl	801d38c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801c3d0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801c3d2:	68fb      	ldr	r3, [r7, #12]
 801c3d4:	69db      	ldr	r3, [r3, #28]
 801c3d6:	6979      	ldr	r1, [r7, #20]
 801c3d8:	4618      	mov	r0, r3
 801c3da:	f004 fe6f 	bl	80210bc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801c3de:	697b      	ldr	r3, [r7, #20]
 801c3e0:	681b      	ldr	r3, [r3, #0]
 801c3e2:	3314      	adds	r3, #20
 801c3e4:	681b      	ldr	r3, [r3, #0]
 801c3e6:	6879      	ldr	r1, [r7, #4]
 801c3e8:	6978      	ldr	r0, [r7, #20]
 801c3ea:	4798      	blx	r3
    return *this;
 801c3ec:	68fb      	ldr	r3, [r7, #12]
}
 801c3ee:	4618      	mov	r0, r3
 801c3f0:	371c      	adds	r7, #28
 801c3f2:	46bd      	mov	sp, r7
 801c3f4:	bd90      	pop	{r4, r7, pc}
 801c3f6:	bf00      	nop
 801c3f8:	080282a0 	.word	0x080282a0

0801c3fc <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801c3fc:	b590      	push	{r4, r7, lr}
 801c3fe:	b087      	sub	sp, #28
 801c400:	af00      	add	r7, sp, #0
 801c402:	60f8      	str	r0, [r7, #12]
 801c404:	60b9      	str	r1, [r7, #8]
 801c406:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801c408:	227a      	movs	r2, #122	; 0x7a
 801c40a:	490e      	ldr	r1, [pc, #56]	; (801c444 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 801c40c:	2038      	movs	r0, #56	; 0x38
 801c40e:	f7ef fe27 	bl	800c060 <_ZnwjPKci>
 801c412:	4604      	mov	r4, r0
 801c414:	68b9      	ldr	r1, [r7, #8]
 801c416:	4620      	mov	r0, r4
 801c418:	f000 ffb8 	bl	801d38c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801c41c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801c41e:	68fb      	ldr	r3, [r7, #12]
 801c420:	69db      	ldr	r3, [r3, #28]
 801c422:	6979      	ldr	r1, [r7, #20]
 801c424:	4618      	mov	r0, r3
 801c426:	f004 fe49 	bl	80210bc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801c42a:	697b      	ldr	r3, [r7, #20]
 801c42c:	681b      	ldr	r3, [r3, #0]
 801c42e:	3318      	adds	r3, #24
 801c430:	681b      	ldr	r3, [r3, #0]
 801c432:	6879      	ldr	r1, [r7, #4]
 801c434:	6978      	ldr	r0, [r7, #20]
 801c436:	4798      	blx	r3
    return *this;
 801c438:	68fb      	ldr	r3, [r7, #12]
}
 801c43a:	4618      	mov	r0, r3
 801c43c:	371c      	adds	r7, #28
 801c43e:	46bd      	mov	sp, r7
 801c440:	bd90      	pop	{r4, r7, pc}
 801c442:	bf00      	nop
 801c444:	080282a0 	.word	0x080282a0

0801c448 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801c448:	b5b0      	push	{r4, r5, r7, lr}
 801c44a:	b086      	sub	sp, #24
 801c44c:	af02      	add	r7, sp, #8
 801c44e:	60f8      	str	r0, [r7, #12]
 801c450:	60b9      	str	r1, [r7, #8]
 801c452:	4639      	mov	r1, r7
 801c454:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801c458:	f7f9 fda8 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801c45c:	4604      	mov	r4, r0
 801c45e:	6823      	ldr	r3, [r4, #0]
 801c460:	3368      	adds	r3, #104	; 0x68
 801c462:	681d      	ldr	r5, [r3, #0]
 801c464:	f7f9 fdb2 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c468:	4603      	mov	r3, r0
 801c46a:	9300      	str	r3, [sp, #0]
 801c46c:	2396      	movs	r3, #150	; 0x96
 801c46e:	4a04      	ldr	r2, [pc, #16]	; (801c480 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 801c470:	4904      	ldr	r1, [pc, #16]	; (801c484 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801c472:	4620      	mov	r0, r4
 801c474:	47a8      	blx	r5
    return *this;
 801c476:	68fb      	ldr	r3, [r7, #12]
}
 801c478:	4618      	mov	r0, r3
 801c47a:	3710      	adds	r7, #16
 801c47c:	46bd      	mov	sp, r7
 801c47e:	bdb0      	pop	{r4, r5, r7, pc}
 801c480:	080282a0 	.word	0x080282a0
 801c484:	080282bc 	.word	0x080282bc

0801c488 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801c488:	b5b0      	push	{r4, r5, r7, lr}
 801c48a:	b086      	sub	sp, #24
 801c48c:	af02      	add	r7, sp, #8
 801c48e:	60f8      	str	r0, [r7, #12]
 801c490:	60b9      	str	r1, [r7, #8]
 801c492:	4639      	mov	r1, r7
 801c494:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801c498:	f7f9 fd88 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801c49c:	4604      	mov	r4, r0
 801c49e:	6823      	ldr	r3, [r4, #0]
 801c4a0:	3368      	adds	r3, #104	; 0x68
 801c4a2:	681d      	ldr	r5, [r3, #0]
 801c4a4:	f7f9 fd92 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c4a8:	4603      	mov	r3, r0
 801c4aa:	9300      	str	r3, [sp, #0]
 801c4ac:	239c      	movs	r3, #156	; 0x9c
 801c4ae:	4a04      	ldr	r2, [pc, #16]	; (801c4c0 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 801c4b0:	4904      	ldr	r1, [pc, #16]	; (801c4c4 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801c4b2:	4620      	mov	r0, r4
 801c4b4:	47a8      	blx	r5
    return *this;
 801c4b6:	68fb      	ldr	r3, [r7, #12]
}
 801c4b8:	4618      	mov	r0, r3
 801c4ba:	3710      	adds	r7, #16
 801c4bc:	46bd      	mov	sp, r7
 801c4be:	bdb0      	pop	{r4, r5, r7, pc}
 801c4c0:	080282a0 	.word	0x080282a0
 801c4c4:	080282dc 	.word	0x080282dc

0801c4c8 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 801c4c8:	b590      	push	{r4, r7, lr}
 801c4ca:	b087      	sub	sp, #28
 801c4cc:	af00      	add	r7, sp, #0
 801c4ce:	60f8      	str	r0, [r7, #12]
 801c4d0:	60b9      	str	r1, [r7, #8]
 801c4d2:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801c4d6:	22a4      	movs	r2, #164	; 0xa4
 801c4d8:	490e      	ldr	r1, [pc, #56]	; (801c514 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 801c4da:	2038      	movs	r0, #56	; 0x38
 801c4dc:	f7ef fdc0 	bl	800c060 <_ZnwjPKci>
 801c4e0:	4604      	mov	r4, r0
 801c4e2:	68b9      	ldr	r1, [r7, #8]
 801c4e4:	4620      	mov	r0, r4
 801c4e6:	f000 ff51 	bl	801d38c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801c4ea:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801c4ec:	68fb      	ldr	r3, [r7, #12]
 801c4ee:	69db      	ldr	r3, [r3, #28]
 801c4f0:	6979      	ldr	r1, [r7, #20]
 801c4f2:	4618      	mov	r0, r3
 801c4f4:	f004 fde2 	bl	80210bc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801c4f8:	697b      	ldr	r3, [r7, #20]
 801c4fa:	681b      	ldr	r3, [r3, #0]
 801c4fc:	3324      	adds	r3, #36	; 0x24
 801c4fe:	681b      	ldr	r3, [r3, #0]
 801c500:	ed97 0b00 	vldr	d0, [r7]
 801c504:	6978      	ldr	r0, [r7, #20]
 801c506:	4798      	blx	r3
    return *this;
 801c508:	68fb      	ldr	r3, [r7, #12]
}
 801c50a:	4618      	mov	r0, r3
 801c50c:	371c      	adds	r7, #28
 801c50e:	46bd      	mov	sp, r7
 801c510:	bd90      	pop	{r4, r7, pc}
 801c512:	bf00      	nop
 801c514:	080282a0 	.word	0x080282a0

0801c518 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 801c518:	b590      	push	{r4, r7, lr}
 801c51a:	b089      	sub	sp, #36	; 0x24
 801c51c:	af00      	add	r7, sp, #0
 801c51e:	6178      	str	r0, [r7, #20]
 801c520:	6139      	str	r1, [r7, #16]
 801c522:	ed87 0b02 	vstr	d0, [r7, #8]
 801c526:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801c52a:	22ac      	movs	r2, #172	; 0xac
 801c52c:	490f      	ldr	r1, [pc, #60]	; (801c56c <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 801c52e:	2038      	movs	r0, #56	; 0x38
 801c530:	f7ef fd96 	bl	800c060 <_ZnwjPKci>
 801c534:	4604      	mov	r4, r0
 801c536:	6939      	ldr	r1, [r7, #16]
 801c538:	4620      	mov	r0, r4
 801c53a:	f000 ff27 	bl	801d38c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801c53e:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 801c540:	697b      	ldr	r3, [r7, #20]
 801c542:	69db      	ldr	r3, [r3, #28]
 801c544:	69f9      	ldr	r1, [r7, #28]
 801c546:	4618      	mov	r0, r3
 801c548:	f004 fdb8 	bl	80210bc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 801c54c:	69fb      	ldr	r3, [r7, #28]
 801c54e:	681b      	ldr	r3, [r3, #0]
 801c550:	3328      	adds	r3, #40	; 0x28
 801c552:	681b      	ldr	r3, [r3, #0]
 801c554:	ed97 1b00 	vldr	d1, [r7]
 801c558:	ed97 0b02 	vldr	d0, [r7, #8]
 801c55c:	69f8      	ldr	r0, [r7, #28]
 801c55e:	4798      	blx	r3
    return *this;
 801c560:	697b      	ldr	r3, [r7, #20]
}
 801c562:	4618      	mov	r0, r3
 801c564:	3724      	adds	r7, #36	; 0x24
 801c566:	46bd      	mov	sp, r7
 801c568:	bd90      	pop	{r4, r7, pc}
 801c56a:	bf00      	nop
 801c56c:	080282a0 	.word	0x080282a0

0801c570 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 801c570:	b590      	push	{r4, r7, lr}
 801c572:	b087      	sub	sp, #28
 801c574:	af00      	add	r7, sp, #0
 801c576:	60f8      	str	r0, [r7, #12]
 801c578:	60b9      	str	r1, [r7, #8]
 801c57a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801c57c:	22b4      	movs	r2, #180	; 0xb4
 801c57e:	490e      	ldr	r1, [pc, #56]	; (801c5b8 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 801c580:	2038      	movs	r0, #56	; 0x38
 801c582:	f7ef fd6d 	bl	800c060 <_ZnwjPKci>
 801c586:	4604      	mov	r4, r0
 801c588:	68b9      	ldr	r1, [r7, #8]
 801c58a:	4620      	mov	r0, r4
 801c58c:	f000 fefe 	bl	801d38c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801c590:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801c592:	68fb      	ldr	r3, [r7, #12]
 801c594:	69db      	ldr	r3, [r3, #28]
 801c596:	6979      	ldr	r1, [r7, #20]
 801c598:	4618      	mov	r0, r3
 801c59a:	f004 fd8f 	bl	80210bc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801c59e:	697b      	ldr	r3, [r7, #20]
 801c5a0:	681b      	ldr	r3, [r3, #0]
 801c5a2:	3338      	adds	r3, #56	; 0x38
 801c5a4:	681b      	ldr	r3, [r3, #0]
 801c5a6:	6879      	ldr	r1, [r7, #4]
 801c5a8:	6978      	ldr	r0, [r7, #20]
 801c5aa:	4798      	blx	r3
    return *this;
 801c5ac:	68fb      	ldr	r3, [r7, #12]
}
 801c5ae:	4618      	mov	r0, r3
 801c5b0:	371c      	adds	r7, #28
 801c5b2:	46bd      	mov	sp, r7
 801c5b4:	bd90      	pop	{r4, r7, pc}
 801c5b6:	bf00      	nop
 801c5b8:	080282a0 	.word	0x080282a0

0801c5bc <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 801c5bc:	b590      	push	{r4, r7, lr}
 801c5be:	b087      	sub	sp, #28
 801c5c0:	af00      	add	r7, sp, #0
 801c5c2:	60f8      	str	r0, [r7, #12]
 801c5c4:	60b9      	str	r1, [r7, #8]
 801c5c6:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801c5c8:	22bc      	movs	r2, #188	; 0xbc
 801c5ca:	490e      	ldr	r1, [pc, #56]	; (801c604 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 801c5cc:	2038      	movs	r0, #56	; 0x38
 801c5ce:	f7ef fd47 	bl	800c060 <_ZnwjPKci>
 801c5d2:	4604      	mov	r4, r0
 801c5d4:	68b9      	ldr	r1, [r7, #8]
 801c5d6:	4620      	mov	r0, r4
 801c5d8:	f000 fed8 	bl	801d38c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801c5dc:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801c5de:	68fb      	ldr	r3, [r7, #12]
 801c5e0:	69db      	ldr	r3, [r3, #28]
 801c5e2:	6979      	ldr	r1, [r7, #20]
 801c5e4:	4618      	mov	r0, r3
 801c5e6:	f004 fd69 	bl	80210bc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801c5ea:	697b      	ldr	r3, [r7, #20]
 801c5ec:	681b      	ldr	r3, [r3, #0]
 801c5ee:	332c      	adds	r3, #44	; 0x2c
 801c5f0:	681b      	ldr	r3, [r3, #0]
 801c5f2:	6879      	ldr	r1, [r7, #4]
 801c5f4:	6978      	ldr	r0, [r7, #20]
 801c5f6:	4798      	blx	r3
    return *this;
 801c5f8:	68fb      	ldr	r3, [r7, #12]
}
 801c5fa:	4618      	mov	r0, r3
 801c5fc:	371c      	adds	r7, #28
 801c5fe:	46bd      	mov	sp, r7
 801c600:	bd90      	pop	{r4, r7, pc}
 801c602:	bf00      	nop
 801c604:	080282a0 	.word	0x080282a0

0801c608 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801c608:	b590      	push	{r4, r7, lr}
 801c60a:	b087      	sub	sp, #28
 801c60c:	af00      	add	r7, sp, #0
 801c60e:	60f8      	str	r0, [r7, #12]
 801c610:	60b9      	str	r1, [r7, #8]
 801c612:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801c614:	22c4      	movs	r2, #196	; 0xc4
 801c616:	490e      	ldr	r1, [pc, #56]	; (801c650 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 801c618:	2038      	movs	r0, #56	; 0x38
 801c61a:	f7ef fd21 	bl	800c060 <_ZnwjPKci>
 801c61e:	4604      	mov	r4, r0
 801c620:	68b9      	ldr	r1, [r7, #8]
 801c622:	4620      	mov	r0, r4
 801c624:	f000 feb2 	bl	801d38c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801c628:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801c62a:	68fb      	ldr	r3, [r7, #12]
 801c62c:	69db      	ldr	r3, [r3, #28]
 801c62e:	6979      	ldr	r1, [r7, #20]
 801c630:	4618      	mov	r0, r3
 801c632:	f004 fd43 	bl	80210bc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801c636:	697b      	ldr	r3, [r7, #20]
 801c638:	681b      	ldr	r3, [r3, #0]
 801c63a:	3330      	adds	r3, #48	; 0x30
 801c63c:	681b      	ldr	r3, [r3, #0]
 801c63e:	6879      	ldr	r1, [r7, #4]
 801c640:	6978      	ldr	r0, [r7, #20]
 801c642:	4798      	blx	r3
    return *this;
 801c644:	68fb      	ldr	r3, [r7, #12]
}
 801c646:	4618      	mov	r0, r3
 801c648:	371c      	adds	r7, #28
 801c64a:	46bd      	mov	sp, r7
 801c64c:	bd90      	pop	{r4, r7, pc}
 801c64e:	bf00      	nop
 801c650:	080282a0 	.word	0x080282a0

0801c654 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801c654:	b590      	push	{r4, r7, lr}
 801c656:	b087      	sub	sp, #28
 801c658:	af00      	add	r7, sp, #0
 801c65a:	60f8      	str	r0, [r7, #12]
 801c65c:	60b9      	str	r1, [r7, #8]
 801c65e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801c660:	22cc      	movs	r2, #204	; 0xcc
 801c662:	490e      	ldr	r1, [pc, #56]	; (801c69c <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 801c664:	2038      	movs	r0, #56	; 0x38
 801c666:	f7ef fcfb 	bl	800c060 <_ZnwjPKci>
 801c66a:	4604      	mov	r4, r0
 801c66c:	68b9      	ldr	r1, [r7, #8]
 801c66e:	4620      	mov	r0, r4
 801c670:	f000 fe8c 	bl	801d38c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801c674:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801c676:	68fb      	ldr	r3, [r7, #12]
 801c678:	69db      	ldr	r3, [r3, #28]
 801c67a:	6979      	ldr	r1, [r7, #20]
 801c67c:	4618      	mov	r0, r3
 801c67e:	f004 fd1d 	bl	80210bc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801c682:	697b      	ldr	r3, [r7, #20]
 801c684:	681b      	ldr	r3, [r3, #0]
 801c686:	3334      	adds	r3, #52	; 0x34
 801c688:	681b      	ldr	r3, [r3, #0]
 801c68a:	6879      	ldr	r1, [r7, #4]
 801c68c:	6978      	ldr	r0, [r7, #20]
 801c68e:	4798      	blx	r3
    return *this;
 801c690:	68fb      	ldr	r3, [r7, #12]
}
 801c692:	4618      	mov	r0, r3
 801c694:	371c      	adds	r7, #28
 801c696:	46bd      	mov	sp, r7
 801c698:	bd90      	pop	{r4, r7, pc}
 801c69a:	bf00      	nop
 801c69c:	080282a0 	.word	0x080282a0

0801c6a0 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801c6a0:	b590      	push	{r4, r7, lr}
 801c6a2:	b087      	sub	sp, #28
 801c6a4:	af00      	add	r7, sp, #0
 801c6a6:	60f8      	str	r0, [r7, #12]
 801c6a8:	60b9      	str	r1, [r7, #8]
 801c6aa:	607a      	str	r2, [r7, #4]
 801c6ac:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801c6ae:	22d4      	movs	r2, #212	; 0xd4
 801c6b0:	490e      	ldr	r1, [pc, #56]	; (801c6ec <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 801c6b2:	2038      	movs	r0, #56	; 0x38
 801c6b4:	f7ef fcd4 	bl	800c060 <_ZnwjPKci>
 801c6b8:	4604      	mov	r4, r0
 801c6ba:	68b9      	ldr	r1, [r7, #8]
 801c6bc:	4620      	mov	r0, r4
 801c6be:	f000 fe65 	bl	801d38c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801c6c2:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801c6c4:	68fb      	ldr	r3, [r7, #12]
 801c6c6:	69db      	ldr	r3, [r3, #28]
 801c6c8:	6979      	ldr	r1, [r7, #20]
 801c6ca:	4618      	mov	r0, r3
 801c6cc:	f004 fcf6 	bl	80210bc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 801c6d0:	697b      	ldr	r3, [r7, #20]
 801c6d2:	681b      	ldr	r3, [r3, #0]
 801c6d4:	333c      	adds	r3, #60	; 0x3c
 801c6d6:	681b      	ldr	r3, [r3, #0]
 801c6d8:	683a      	ldr	r2, [r7, #0]
 801c6da:	6879      	ldr	r1, [r7, #4]
 801c6dc:	6978      	ldr	r0, [r7, #20]
 801c6de:	4798      	blx	r3
    return *this;
 801c6e0:	68fb      	ldr	r3, [r7, #12]
}
 801c6e2:	4618      	mov	r0, r3
 801c6e4:	371c      	adds	r7, #28
 801c6e6:	46bd      	mov	sp, r7
 801c6e8:	bd90      	pop	{r4, r7, pc}
 801c6ea:	bf00      	nop
 801c6ec:	080282a0 	.word	0x080282a0

0801c6f0 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 801c6f0:	b590      	push	{r4, r7, lr}
 801c6f2:	b087      	sub	sp, #28
 801c6f4:	af00      	add	r7, sp, #0
 801c6f6:	60f8      	str	r0, [r7, #12]
 801c6f8:	60b9      	str	r1, [r7, #8]
 801c6fa:	607a      	str	r2, [r7, #4]
 801c6fc:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801c6fe:	22dc      	movs	r2, #220	; 0xdc
 801c700:	490e      	ldr	r1, [pc, #56]	; (801c73c <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 801c702:	2038      	movs	r0, #56	; 0x38
 801c704:	f7ef fcac 	bl	800c060 <_ZnwjPKci>
 801c708:	4604      	mov	r4, r0
 801c70a:	6879      	ldr	r1, [r7, #4]
 801c70c:	4620      	mov	r0, r4
 801c70e:	f000 fe3d 	bl	801d38c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801c712:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801c714:	68fb      	ldr	r3, [r7, #12]
 801c716:	69db      	ldr	r3, [r3, #28]
 801c718:	6979      	ldr	r1, [r7, #20]
 801c71a:	4618      	mov	r0, r3
 801c71c:	f004 fcce 	bl	80210bc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801c720:	697b      	ldr	r3, [r7, #20]
 801c722:	681b      	ldr	r3, [r3, #0]
 801c724:	3340      	adds	r3, #64	; 0x40
 801c726:	681b      	ldr	r3, [r3, #0]
 801c728:	683a      	ldr	r2, [r7, #0]
 801c72a:	68b9      	ldr	r1, [r7, #8]
 801c72c:	6978      	ldr	r0, [r7, #20]
 801c72e:	4798      	blx	r3
    return *this;
 801c730:	68fb      	ldr	r3, [r7, #12]
}
 801c732:	4618      	mov	r0, r3
 801c734:	371c      	adds	r7, #28
 801c736:	46bd      	mov	sp, r7
 801c738:	bd90      	pop	{r4, r7, pc}
 801c73a:	bf00      	nop
 801c73c:	080282a0 	.word	0x080282a0

0801c740 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 801c740:	b590      	push	{r4, r7, lr}
 801c742:	b087      	sub	sp, #28
 801c744:	af00      	add	r7, sp, #0
 801c746:	60f8      	str	r0, [r7, #12]
 801c748:	60b9      	str	r1, [r7, #8]
 801c74a:	607a      	str	r2, [r7, #4]
 801c74c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801c74e:	22e4      	movs	r2, #228	; 0xe4
 801c750:	4911      	ldr	r1, [pc, #68]	; (801c798 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 801c752:	2038      	movs	r0, #56	; 0x38
 801c754:	f7ef fc84 	bl	800c060 <_ZnwjPKci>
 801c758:	4604      	mov	r4, r0
 801c75a:	68b9      	ldr	r1, [r7, #8]
 801c75c:	4620      	mov	r0, r4
 801c75e:	f000 fe15 	bl	801d38c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801c762:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801c764:	68fb      	ldr	r3, [r7, #12]
 801c766:	6a1b      	ldr	r3, [r3, #32]
 801c768:	6979      	ldr	r1, [r7, #20]
 801c76a:	4618      	mov	r0, r3
 801c76c:	f004 fca6 	bl	80210bc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801c770:	697b      	ldr	r3, [r7, #20]
 801c772:	681b      	ldr	r3, [r3, #0]
 801c774:	3330      	adds	r3, #48	; 0x30
 801c776:	681b      	ldr	r3, [r3, #0]
 801c778:	6879      	ldr	r1, [r7, #4]
 801c77a:	6978      	ldr	r0, [r7, #20]
 801c77c:	4798      	blx	r3
    newParameter->setSize(size);
 801c77e:	697b      	ldr	r3, [r7, #20]
 801c780:	681b      	ldr	r3, [r3, #0]
 801c782:	3348      	adds	r3, #72	; 0x48
 801c784:	681b      	ldr	r3, [r3, #0]
 801c786:	6839      	ldr	r1, [r7, #0]
 801c788:	6978      	ldr	r0, [r7, #20]
 801c78a:	4798      	blx	r3
    return *this;
 801c78c:	68fb      	ldr	r3, [r7, #12]
}
 801c78e:	4618      	mov	r0, r3
 801c790:	371c      	adds	r7, #28
 801c792:	46bd      	mov	sp, r7
 801c794:	bd90      	pop	{r4, r7, pc}
 801c796:	bf00      	nop
 801c798:	080282a0 	.word	0x080282a0

0801c79c <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 801c79c:	b590      	push	{r4, r7, lr}
 801c79e:	b087      	sub	sp, #28
 801c7a0:	af00      	add	r7, sp, #0
 801c7a2:	60f8      	str	r0, [r7, #12]
 801c7a4:	60b9      	str	r1, [r7, #8]
 801c7a6:	607a      	str	r2, [r7, #4]
 801c7a8:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801c7aa:	22ed      	movs	r2, #237	; 0xed
 801c7ac:	490e      	ldr	r1, [pc, #56]	; (801c7e8 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 801c7ae:	2038      	movs	r0, #56	; 0x38
 801c7b0:	f7ef fc56 	bl	800c060 <_ZnwjPKci>
 801c7b4:	4604      	mov	r4, r0
 801c7b6:	6879      	ldr	r1, [r7, #4]
 801c7b8:	4620      	mov	r0, r4
 801c7ba:	f000 fde7 	bl	801d38c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801c7be:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801c7c0:	68fb      	ldr	r3, [r7, #12]
 801c7c2:	6a1b      	ldr	r3, [r3, #32]
 801c7c4:	6979      	ldr	r1, [r7, #20]
 801c7c6:	4618      	mov	r0, r3
 801c7c8:	f004 fc78 	bl	80210bc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801c7cc:	697b      	ldr	r3, [r7, #20]
 801c7ce:	681b      	ldr	r3, [r3, #0]
 801c7d0:	3340      	adds	r3, #64	; 0x40
 801c7d2:	681b      	ldr	r3, [r3, #0]
 801c7d4:	683a      	ldr	r2, [r7, #0]
 801c7d6:	68b9      	ldr	r1, [r7, #8]
 801c7d8:	6978      	ldr	r0, [r7, #20]
 801c7da:	4798      	blx	r3
    return *this;
 801c7dc:	68fb      	ldr	r3, [r7, #12]
}
 801c7de:	4618      	mov	r0, r3
 801c7e0:	371c      	adds	r7, #28
 801c7e2:	46bd      	mov	sp, r7
 801c7e4:	bd90      	pop	{r4, r7, pc}
 801c7e6:	bf00      	nop
 801c7e8:	080282a0 	.word	0x080282a0

0801c7ec <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 801c7ec:	b590      	push	{r4, r7, lr}
 801c7ee:	b083      	sub	sp, #12
 801c7f0:	af00      	add	r7, sp, #0
 801c7f2:	6078      	str	r0, [r7, #4]
 801c7f4:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	681b      	ldr	r3, [r3, #0]
 801c7fa:	3318      	adds	r3, #24
 801c7fc:	681c      	ldr	r4, [r3, #0]
 801c7fe:	2300      	movs	r3, #0
 801c800:	2200      	movs	r2, #0
 801c802:	6839      	ldr	r1, [r7, #0]
 801c804:	6878      	ldr	r0, [r7, #4]
 801c806:	47a0      	blx	r4
 801c808:	4603      	mov	r3, r0
}
 801c80a:	4618      	mov	r0, r3
 801c80c:	370c      	adds	r7, #12
 801c80e:	46bd      	mov	sp, r7
 801c810:	bd90      	pop	{r4, r7, pc}
	...

0801c814 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 801c814:	b580      	push	{r7, lr}
 801c816:	b086      	sub	sp, #24
 801c818:	af00      	add	r7, sp, #0
 801c81a:	60f8      	str	r0, [r7, #12]
 801c81c:	60b9      	str	r1, [r7, #8]
 801c81e:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801c820:	68bb      	ldr	r3, [r7, #8]
 801c822:	69db      	ldr	r3, [r3, #28]
 801c824:	6879      	ldr	r1, [r7, #4]
 801c826:	4618      	mov	r0, r3
 801c828:	f004 fc7e 	bl	8021128 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801c82c:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 801c82e:	697b      	ldr	r3, [r7, #20]
 801c830:	2b00      	cmp	r3, #0
 801c832:	d008      	beq.n	801c846 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 801c834:	697b      	ldr	r3, [r7, #20]
 801c836:	681b      	ldr	r3, [r3, #0]
 801c838:	3360      	adds	r3, #96	; 0x60
 801c83a:	681b      	ldr	r3, [r3, #0]
 801c83c:	68fa      	ldr	r2, [r7, #12]
 801c83e:	6979      	ldr	r1, [r7, #20]
 801c840:	4610      	mov	r0, r2
 801c842:	4798      	blx	r3
 801c844:	e004      	b.n	801c850 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 801c846:	68fb      	ldr	r3, [r7, #12]
 801c848:	4903      	ldr	r1, [pc, #12]	; (801c858 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 801c84a:	4618      	mov	r0, r3
 801c84c:	f7f2 fe10 	bl	800f470 <_Z10StringFromPKc>
}
 801c850:	68f8      	ldr	r0, [r7, #12]
 801c852:	3718      	adds	r7, #24
 801c854:	46bd      	mov	sp, r7
 801c856:	bd80      	pop	{r7, pc}
 801c858:	0802829c 	.word	0x0802829c

0801c85c <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 801c85c:	b580      	push	{r7, lr}
 801c85e:	b084      	sub	sp, #16
 801c860:	af00      	add	r7, sp, #0
 801c862:	6078      	str	r0, [r7, #4]
 801c864:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801c866:	687b      	ldr	r3, [r7, #4]
 801c868:	69db      	ldr	r3, [r3, #28]
 801c86a:	6839      	ldr	r1, [r7, #0]
 801c86c:	4618      	mov	r0, r3
 801c86e:	f004 fc5b 	bl	8021128 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801c872:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801c874:	68fb      	ldr	r3, [r7, #12]
 801c876:	2b00      	cmp	r3, #0
 801c878:	bf14      	ite	ne
 801c87a:	2301      	movne	r3, #1
 801c87c:	2300      	moveq	r3, #0
 801c87e:	b2db      	uxtb	r3, r3
}
 801c880:	4618      	mov	r0, r3
 801c882:	3710      	adds	r7, #16
 801c884:	46bd      	mov	sp, r7
 801c886:	bd80      	pop	{r7, pc}

0801c888 <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 801c888:	b580      	push	{r7, lr}
 801c88a:	b084      	sub	sp, #16
 801c88c:	af00      	add	r7, sp, #0
 801c88e:	6078      	str	r0, [r7, #4]
 801c890:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801c892:	687b      	ldr	r3, [r7, #4]
 801c894:	6a1b      	ldr	r3, [r3, #32]
 801c896:	6839      	ldr	r1, [r7, #0]
 801c898:	4618      	mov	r0, r3
 801c89a:	f004 fc45 	bl	8021128 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801c89e:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801c8a0:	68fb      	ldr	r3, [r7, #12]
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	bf14      	ite	ne
 801c8a6:	2301      	movne	r3, #1
 801c8a8:	2300      	moveq	r3, #0
 801c8aa:	b2db      	uxtb	r3, r3
}
 801c8ac:	4618      	mov	r0, r3
 801c8ae:	3710      	adds	r7, #16
 801c8b0:	46bd      	mov	sp, r7
 801c8b2:	bd80      	pop	{r7, pc}

0801c8b4 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 801c8b4:	b590      	push	{r4, r7, lr}
 801c8b6:	b089      	sub	sp, #36	; 0x24
 801c8b8:	af00      	add	r7, sp, #0
 801c8ba:	60f8      	str	r0, [r7, #12]
 801c8bc:	60b9      	str	r1, [r7, #8]
 801c8be:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801c8c0:	68bb      	ldr	r3, [r7, #8]
 801c8c2:	69db      	ldr	r3, [r3, #28]
 801c8c4:	6879      	ldr	r1, [r7, #4]
 801c8c6:	4618      	mov	r0, r3
 801c8c8:	f004 fc2e 	bl	8021128 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801c8cc:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801c8ce:	2400      	movs	r4, #0
 801c8d0:	69fb      	ldr	r3, [r7, #28]
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	d004      	beq.n	801c8e0 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 801c8d6:	69f9      	ldr	r1, [r7, #28]
 801c8d8:	68f8      	ldr	r0, [r7, #12]
 801c8da:	f7f0 f829 	bl	800c930 <_ZN14MockNamedValueC1ERKS_>
 801c8de:	e00c      	b.n	801c8fa <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 801c8e0:	f107 0314 	add.w	r3, r7, #20
 801c8e4:	490a      	ldr	r1, [pc, #40]	; (801c910 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 801c8e6:	4618      	mov	r0, r3
 801c8e8:	f7f1 ff7d 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801c8ec:	2401      	movs	r4, #1
 801c8ee:	f107 0314 	add.w	r3, r7, #20
 801c8f2:	4619      	mov	r1, r3
 801c8f4:	68f8      	ldr	r0, [r7, #12]
 801c8f6:	f002 fc9b 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
 801c8fa:	2c00      	cmp	r4, #0
 801c8fc:	d004      	beq.n	801c908 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 801c8fe:	f107 0314 	add.w	r3, r7, #20
 801c902:	4618      	mov	r0, r3
 801c904:	f7f2 fb27 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 801c908:	68f8      	ldr	r0, [r7, #12]
 801c90a:	3724      	adds	r7, #36	; 0x24
 801c90c:	46bd      	mov	sp, r7
 801c90e:	bd90      	pop	{r4, r7, pc}
 801c910:	0802829c 	.word	0x0802829c

0801c914 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 801c914:	b590      	push	{r4, r7, lr}
 801c916:	b089      	sub	sp, #36	; 0x24
 801c918:	af00      	add	r7, sp, #0
 801c91a:	60f8      	str	r0, [r7, #12]
 801c91c:	60b9      	str	r1, [r7, #8]
 801c91e:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801c920:	68bb      	ldr	r3, [r7, #8]
 801c922:	6a1b      	ldr	r3, [r3, #32]
 801c924:	6879      	ldr	r1, [r7, #4]
 801c926:	4618      	mov	r0, r3
 801c928:	f004 fbfe 	bl	8021128 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801c92c:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801c92e:	2400      	movs	r4, #0
 801c930:	69fb      	ldr	r3, [r7, #28]
 801c932:	2b00      	cmp	r3, #0
 801c934:	d004      	beq.n	801c940 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 801c936:	69f9      	ldr	r1, [r7, #28]
 801c938:	68f8      	ldr	r0, [r7, #12]
 801c93a:	f7ef fff9 	bl	800c930 <_ZN14MockNamedValueC1ERKS_>
 801c93e:	e00c      	b.n	801c95a <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 801c940:	f107 0314 	add.w	r3, r7, #20
 801c944:	490a      	ldr	r1, [pc, #40]	; (801c970 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 801c946:	4618      	mov	r0, r3
 801c948:	f7f1 ff4d 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801c94c:	2401      	movs	r4, #1
 801c94e:	f107 0314 	add.w	r3, r7, #20
 801c952:	4619      	mov	r1, r3
 801c954:	68f8      	ldr	r0, [r7, #12]
 801c956:	f002 fc6b 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
 801c95a:	2c00      	cmp	r4, #0
 801c95c:	d004      	beq.n	801c968 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 801c95e:	f107 0314 	add.w	r3, r7, #20
 801c962:	4618      	mov	r0, r3
 801c964:	f7f2 faf7 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 801c968:	68f8      	ldr	r0, [r7, #12]
 801c96a:	3724      	adds	r7, #36	; 0x24
 801c96c:	46bd      	mov	sp, r7
 801c96e:	bd90      	pop	{r4, r7, pc}
 801c970:	0802829c 	.word	0x0802829c

0801c974 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 801c974:	b580      	push	{r7, lr}
 801c976:	b084      	sub	sp, #16
 801c978:	af00      	add	r7, sp, #0
 801c97a:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	69db      	ldr	r3, [r3, #28]
 801c980:	4618      	mov	r0, r3
 801c982:	f004 fc00 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 801c986:	60f8      	str	r0, [r7, #12]
 801c988:	68fb      	ldr	r3, [r7, #12]
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	d014      	beq.n	801c9b8 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 801c98e:	68f9      	ldr	r1, [r7, #12]
 801c990:	6878      	ldr	r0, [r7, #4]
 801c992:	f000 fced 	bl	801d370 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801c996:	4603      	mov	r3, r0
 801c998:	4618      	mov	r0, r3
 801c99a:	f000 fd1f 	bl	801d3dc <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801c99e:	4603      	mov	r3, r0
 801c9a0:	f083 0301 	eor.w	r3, r3, #1
 801c9a4:	b2db      	uxtb	r3, r3
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	d001      	beq.n	801c9ae <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 801c9aa:	2300      	movs	r3, #0
 801c9ac:	e023      	b.n	801c9f6 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 801c9ae:	68f8      	ldr	r0, [r7, #12]
 801c9b0:	f004 faf2 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 801c9b4:	60f8      	str	r0, [r7, #12]
 801c9b6:	e7e7      	b.n	801c988 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	6a1b      	ldr	r3, [r3, #32]
 801c9bc:	4618      	mov	r0, r3
 801c9be:	f004 fbe2 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 801c9c2:	60f8      	str	r0, [r7, #12]
 801c9c4:	68fb      	ldr	r3, [r7, #12]
 801c9c6:	2b00      	cmp	r3, #0
 801c9c8:	d014      	beq.n	801c9f4 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 801c9ca:	68f9      	ldr	r1, [r7, #12]
 801c9cc:	6878      	ldr	r0, [r7, #4]
 801c9ce:	f000 fccf 	bl	801d370 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801c9d2:	4603      	mov	r3, r0
 801c9d4:	4618      	mov	r0, r3
 801c9d6:	f000 fd01 	bl	801d3dc <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801c9da:	4603      	mov	r3, r0
 801c9dc:	f083 0301 	eor.w	r3, r3, #1
 801c9e0:	b2db      	uxtb	r3, r3
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d001      	beq.n	801c9ea <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 801c9e6:	2300      	movs	r3, #0
 801c9e8:	e005      	b.n	801c9f6 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 801c9ea:	68f8      	ldr	r0, [r7, #12]
 801c9ec:	f004 fad4 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 801c9f0:	60f8      	str	r0, [r7, #12]
 801c9f2:	e7e7      	b.n	801c9c4 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 801c9f4:	2301      	movs	r3, #1
}
 801c9f6:	4618      	mov	r0, r3
 801c9f8:	3710      	adds	r7, #16
 801c9fa:	46bd      	mov	sp, r7
 801c9fc:	bd80      	pop	{r7, pc}

0801c9fe <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 801c9fe:	b480      	push	{r7}
 801ca00:	b083      	sub	sp, #12
 801ca02:	af00      	add	r7, sp, #0
 801ca04:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 801ca06:	687b      	ldr	r3, [r7, #4]
 801ca08:	2201      	movs	r2, #1
 801ca0a:	731a      	strb	r2, [r3, #12]
    return *this;
 801ca0c:	687b      	ldr	r3, [r7, #4]
}
 801ca0e:	4618      	mov	r0, r3
 801ca10:	370c      	adds	r7, #12
 801ca12:	46bd      	mov	sp, r7
 801ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca18:	4770      	bx	lr

0801ca1a <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 801ca1a:	b480      	push	{r7}
 801ca1c:	b083      	sub	sp, #12
 801ca1e:	af00      	add	r7, sp, #0
 801ca20:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ca2a:	429a      	cmp	r2, r3
 801ca2c:	bf0c      	ite	eq
 801ca2e:	2301      	moveq	r3, #1
 801ca30:	2300      	movne	r3, #0
 801ca32:	b2db      	uxtb	r3, r3
}
 801ca34:	4618      	mov	r0, r3
 801ca36:	370c      	adds	r7, #12
 801ca38:	46bd      	mov	sp, r7
 801ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca3e:	4770      	bx	lr

0801ca40 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 801ca40:	b480      	push	{r7}
 801ca42:	b083      	sub	sp, #12
 801ca44:	af00      	add	r7, sp, #0
 801ca46:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 801ca48:	687b      	ldr	r3, [r7, #4]
 801ca4a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801ca4c:	687b      	ldr	r3, [r7, #4]
 801ca4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ca50:	429a      	cmp	r2, r3
 801ca52:	bf34      	ite	cc
 801ca54:	2301      	movcc	r3, #1
 801ca56:	2300      	movcs	r3, #0
 801ca58:	b2db      	uxtb	r3, r3
}
 801ca5a:	4618      	mov	r0, r3
 801ca5c:	370c      	adds	r7, #12
 801ca5e:	46bd      	mov	sp, r7
 801ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca64:	4770      	bx	lr

0801ca66 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 801ca66:	b580      	push	{r7, lr}
 801ca68:	b082      	sub	sp, #8
 801ca6a:	af00      	add	r7, sp, #0
 801ca6c:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	681b      	ldr	r3, [r3, #0]
 801ca72:	33cc      	adds	r3, #204	; 0xcc
 801ca74:	681b      	ldr	r3, [r3, #0]
 801ca76:	6878      	ldr	r0, [r7, #4]
 801ca78:	4798      	blx	r3
 801ca7a:	4603      	mov	r3, r0
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	d00c      	beq.n	801ca9a <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801ca80:	687b      	ldr	r3, [r7, #4]
 801ca82:	7b1b      	ldrb	r3, [r3, #12]
 801ca84:	f083 0301 	eor.w	r3, r3, #1
 801ca88:	b2db      	uxtb	r3, r3
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	d103      	bne.n	801ca96 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 801ca8e:	687b      	ldr	r3, [r7, #4]
 801ca90:	7b5b      	ldrb	r3, [r3, #13]
 801ca92:	2b00      	cmp	r3, #0
 801ca94:	d001      	beq.n	801ca9a <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801ca96:	2301      	movs	r3, #1
 801ca98:	e000      	b.n	801ca9c <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 801ca9a:	2300      	movs	r3, #0
}
 801ca9c:	4618      	mov	r0, r3
 801ca9e:	3708      	adds	r7, #8
 801caa0:	46bd      	mov	sp, r7
 801caa2:	bd80      	pop	{r7, pc}

0801caa4 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 801caa4:	b580      	push	{r7, lr}
 801caa6:	b082      	sub	sp, #8
 801caa8:	af00      	add	r7, sp, #0
 801caaa:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	681b      	ldr	r3, [r3, #0]
 801cab0:	33d0      	adds	r3, #208	; 0xd0
 801cab2:	681b      	ldr	r3, [r3, #0]
 801cab4:	6878      	ldr	r0, [r7, #4]
 801cab6:	4798      	blx	r3
 801cab8:	4603      	mov	r3, r0
 801caba:	2b00      	cmp	r3, #0
 801cabc:	d006      	beq.n	801cacc <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801cac4:	2b00      	cmp	r3, #0
 801cac6:	d001      	beq.n	801cacc <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801cac8:	2301      	movs	r3, #1
 801caca:	e000      	b.n	801cace <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 801cacc:	2300      	movs	r3, #0
}
 801cace:	4618      	mov	r0, r3
 801cad0:	3708      	adds	r7, #8
 801cad2:	46bd      	mov	sp, r7
 801cad4:	bd80      	pop	{r7, pc}

0801cad6 <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 801cad6:	b580      	push	{r7, lr}
 801cad8:	b082      	sub	sp, #8
 801cada:	af00      	add	r7, sp, #0
 801cadc:	6078      	str	r0, [r7, #4]
 801cade:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 801cae0:	687b      	ldr	r3, [r7, #4]
 801cae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801cae4:	1c5a      	adds	r2, r3, #1
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	691b      	ldr	r3, [r3, #16]
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d00c      	beq.n	801cb0c <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801caf2:	687b      	ldr	r3, [r7, #4]
 801caf4:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801caf6:	683a      	ldr	r2, [r7, #0]
 801caf8:	429a      	cmp	r2, r3
 801cafa:	d304      	bcc.n	801cb06 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	695b      	ldr	r3, [r3, #20]
 801cb00:	683a      	ldr	r2, [r7, #0]
 801cb02:	429a      	cmp	r2, r3
 801cb04:	d902      	bls.n	801cb0c <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	2201      	movs	r2, #1
 801cb0a:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 801cb0c:	687b      	ldr	r3, [r7, #4]
 801cb0e:	681b      	ldr	r3, [r3, #0]
 801cb10:	33ec      	adds	r3, #236	; 0xec
 801cb12:	681b      	ldr	r3, [r3, #0]
 801cb14:	6878      	ldr	r0, [r7, #4]
 801cb16:	4798      	blx	r3
}
 801cb18:	bf00      	nop
 801cb1a:	3708      	adds	r7, #8
 801cb1c:	46bd      	mov	sp, r7
 801cb1e:	bd80      	pop	{r7, pc}

0801cb20 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 801cb20:	b480      	push	{r7}
 801cb22:	b083      	sub	sp, #12
 801cb24:	af00      	add	r7, sp, #0
 801cb26:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 801cb28:	687b      	ldr	r3, [r7, #4]
 801cb2a:	2201      	movs	r2, #1
 801cb2c:	735a      	strb	r2, [r3, #13]
}
 801cb2e:	bf00      	nop
 801cb30:	370c      	adds	r7, #12
 801cb32:	46bd      	mov	sp, r7
 801cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb38:	4770      	bx	lr

0801cb3a <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 801cb3a:	b480      	push	{r7}
 801cb3c:	b083      	sub	sp, #12
 801cb3e:	af00      	add	r7, sp, #0
 801cb40:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 801cb42:	687b      	ldr	r3, [r7, #4]
 801cb44:	2201      	movs	r2, #1
 801cb46:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 801cb4a:	bf00      	nop
 801cb4c:	370c      	adds	r7, #12
 801cb4e:	46bd      	mov	sp, r7
 801cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb54:	4770      	bx	lr

0801cb56 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 801cb56:	b580      	push	{r7, lr}
 801cb58:	b084      	sub	sp, #16
 801cb5a:	af00      	add	r7, sp, #0
 801cb5c:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 801cb5e:	687b      	ldr	r3, [r7, #4]
 801cb60:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801cb64:	f083 0301 	eor.w	r3, r3, #1
 801cb68:	b2da      	uxtb	r2, r3
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 801cb70:	687b      	ldr	r3, [r7, #4]
 801cb72:	2200      	movs	r2, #0
 801cb74:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	69db      	ldr	r3, [r3, #28]
 801cb7a:	4618      	mov	r0, r3
 801cb7c:	f004 fb03 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 801cb80:	60f8      	str	r0, [r7, #12]
 801cb82:	68fb      	ldr	r3, [r7, #12]
 801cb84:	2b00      	cmp	r3, #0
 801cb86:	d00d      	beq.n	801cba4 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 801cb88:	68f9      	ldr	r1, [r7, #12]
 801cb8a:	6878      	ldr	r0, [r7, #4]
 801cb8c:	f000 fbf0 	bl	801d370 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801cb90:	4603      	mov	r3, r0
 801cb92:	2100      	movs	r1, #0
 801cb94:	4618      	mov	r0, r3
 801cb96:	f000 fc11 	bl	801d3bc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 801cb9a:	68f8      	ldr	r0, [r7, #12]
 801cb9c:	f004 f9fc 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 801cba0:	60f8      	str	r0, [r7, #12]
 801cba2:	e7ee      	b.n	801cb82 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	6a1b      	ldr	r3, [r3, #32]
 801cba8:	4618      	mov	r0, r3
 801cbaa:	f004 faec 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 801cbae:	60f8      	str	r0, [r7, #12]
 801cbb0:	68fb      	ldr	r3, [r7, #12]
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	d00d      	beq.n	801cbd2 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801cbb6:	68f9      	ldr	r1, [r7, #12]
 801cbb8:	6878      	ldr	r0, [r7, #4]
 801cbba:	f000 fbd9 	bl	801d370 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801cbbe:	4603      	mov	r3, r0
 801cbc0:	2100      	movs	r1, #0
 801cbc2:	4618      	mov	r0, r3
 801cbc4:	f000 fbfa 	bl	801d3bc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 801cbc8:	68f8      	ldr	r0, [r7, #12]
 801cbca:	f004 f9e5 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 801cbce:	60f8      	str	r0, [r7, #12]
 801cbd0:	e7ee      	b.n	801cbb0 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 801cbd2:	bf00      	nop
 801cbd4:	3710      	adds	r7, #16
 801cbd6:	46bd      	mov	sp, r7
 801cbd8:	bd80      	pop	{r7, pc}

0801cbda <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 801cbda:	b590      	push	{r4, r7, lr}
 801cbdc:	b087      	sub	sp, #28
 801cbde:	af00      	add	r7, sp, #0
 801cbe0:	6078      	str	r0, [r7, #4]
 801cbe2:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	69db      	ldr	r3, [r3, #28]
 801cbe8:	4618      	mov	r0, r3
 801cbea:	f004 facc 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 801cbee:	6178      	str	r0, [r7, #20]
 801cbf0:	697b      	ldr	r3, [r7, #20]
 801cbf2:	2b00      	cmp	r3, #0
 801cbf4:	d022      	beq.n	801cc3c <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801cbf6:	f107 030c 	add.w	r3, r7, #12
 801cbfa:	6979      	ldr	r1, [r7, #20]
 801cbfc:	4618      	mov	r0, r3
 801cbfe:	f004 fa06 	bl	802100e <_ZNK22MockNamedValueListNode7getNameEv>
 801cc02:	f107 030c 	add.w	r3, r7, #12
 801cc06:	6839      	ldr	r1, [r7, #0]
 801cc08:	4618      	mov	r0, r3
 801cc0a:	f7f2 f9b0 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 801cc0e:	4603      	mov	r3, r0
 801cc10:	461c      	mov	r4, r3
 801cc12:	f107 030c 	add.w	r3, r7, #12
 801cc16:	4618      	mov	r0, r3
 801cc18:	f7f2 f99d 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801cc1c:	2c00      	cmp	r4, #0
 801cc1e:	d008      	beq.n	801cc32 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801cc20:	6979      	ldr	r1, [r7, #20]
 801cc22:	6878      	ldr	r0, [r7, #4]
 801cc24:	f000 fba4 	bl	801d370 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801cc28:	4603      	mov	r3, r0
 801cc2a:	2101      	movs	r1, #1
 801cc2c:	4618      	mov	r0, r3
 801cc2e:	f000 fbc5 	bl	801d3bc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801cc32:	6978      	ldr	r0, [r7, #20]
 801cc34:	f004 f9b0 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 801cc38:	6178      	str	r0, [r7, #20]
 801cc3a:	e7d9      	b.n	801cbf0 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801cc3c:	bf00      	nop
 801cc3e:	371c      	adds	r7, #28
 801cc40:	46bd      	mov	sp, r7
 801cc42:	bd90      	pop	{r4, r7, pc}

0801cc44 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 801cc44:	b590      	push	{r4, r7, lr}
 801cc46:	b087      	sub	sp, #28
 801cc48:	af00      	add	r7, sp, #0
 801cc4a:	6078      	str	r0, [r7, #4]
 801cc4c:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801cc4e:	687b      	ldr	r3, [r7, #4]
 801cc50:	6a1b      	ldr	r3, [r3, #32]
 801cc52:	4618      	mov	r0, r3
 801cc54:	f004 fa97 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 801cc58:	6178      	str	r0, [r7, #20]
 801cc5a:	697b      	ldr	r3, [r7, #20]
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	d022      	beq.n	801cca6 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801cc60:	f107 030c 	add.w	r3, r7, #12
 801cc64:	6979      	ldr	r1, [r7, #20]
 801cc66:	4618      	mov	r0, r3
 801cc68:	f004 f9d1 	bl	802100e <_ZNK22MockNamedValueListNode7getNameEv>
 801cc6c:	f107 030c 	add.w	r3, r7, #12
 801cc70:	6839      	ldr	r1, [r7, #0]
 801cc72:	4618      	mov	r0, r3
 801cc74:	f7f2 f97b 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 801cc78:	4603      	mov	r3, r0
 801cc7a:	461c      	mov	r4, r3
 801cc7c:	f107 030c 	add.w	r3, r7, #12
 801cc80:	4618      	mov	r0, r3
 801cc82:	f7f2 f968 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801cc86:	2c00      	cmp	r4, #0
 801cc88:	d008      	beq.n	801cc9c <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801cc8a:	6979      	ldr	r1, [r7, #20]
 801cc8c:	6878      	ldr	r0, [r7, #4]
 801cc8e:	f000 fb6f 	bl	801d370 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801cc92:	4603      	mov	r3, r0
 801cc94:	2101      	movs	r1, #1
 801cc96:	4618      	mov	r0, r3
 801cc98:	f000 fb90 	bl	801d3bc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801cc9c:	6978      	ldr	r0, [r7, #20]
 801cc9e:	f004 f97b 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 801cca2:	6178      	str	r0, [r7, #20]
 801cca4:	e7d9      	b.n	801cc5a <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801cca6:	bf00      	nop
 801cca8:	371c      	adds	r7, #28
 801ccaa:	46bd      	mov	sp, r7
 801ccac:	bd90      	pop	{r4, r7, pc}
	...

0801ccb0 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 801ccb0:	b580      	push	{r7, lr}
 801ccb2:	b086      	sub	sp, #24
 801ccb4:	af00      	add	r7, sp, #0
 801ccb6:	60f8      	str	r0, [r7, #12]
 801ccb8:	60b9      	str	r1, [r7, #8]
 801ccba:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801ccbc:	68bb      	ldr	r3, [r7, #8]
 801ccbe:	69db      	ldr	r3, [r3, #28]
 801ccc0:	6879      	ldr	r1, [r7, #4]
 801ccc2:	4618      	mov	r0, r3
 801ccc4:	f004 fa30 	bl	8021128 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801ccc8:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 801ccca:	697b      	ldr	r3, [r7, #20]
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d005      	beq.n	801ccdc <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 801ccd0:	68fb      	ldr	r3, [r7, #12]
 801ccd2:	6979      	ldr	r1, [r7, #20]
 801ccd4:	4618      	mov	r0, r3
 801ccd6:	f7ff fa0b 	bl	801c0f0 <_Z10StringFromRK14MockNamedValue>
 801ccda:	e003      	b.n	801cce4 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 801ccdc:	4903      	ldr	r1, [pc, #12]	; (801ccec <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 801ccde:	68f8      	ldr	r0, [r7, #12]
 801cce0:	f7f1 fd81 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
}
 801cce4:	68f8      	ldr	r0, [r7, #12]
 801cce6:	3718      	adds	r7, #24
 801cce8:	46bd      	mov	sp, r7
 801ccea:	bd80      	pop	{r7, pc}
 801ccec:	08028308 	.word	0x08028308

0801ccf0 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 801ccf0:	b590      	push	{r4, r7, lr}
 801ccf2:	b087      	sub	sp, #28
 801ccf4:	af00      	add	r7, sp, #0
 801ccf6:	6078      	str	r0, [r7, #4]
 801ccf8:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	69dc      	ldr	r4, [r3, #28]
 801ccfe:	683b      	ldr	r3, [r7, #0]
 801cd00:	681b      	ldr	r3, [r3, #0]
 801cd02:	335c      	adds	r3, #92	; 0x5c
 801cd04:	681b      	ldr	r3, [r3, #0]
 801cd06:	f107 020c 	add.w	r2, r7, #12
 801cd0a:	6839      	ldr	r1, [r7, #0]
 801cd0c:	4610      	mov	r0, r2
 801cd0e:	4798      	blx	r3
 801cd10:	f107 030c 	add.w	r3, r7, #12
 801cd14:	4619      	mov	r1, r3
 801cd16:	4620      	mov	r0, r4
 801cd18:	f004 fa06 	bl	8021128 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801cd1c:	6178      	str	r0, [r7, #20]
 801cd1e:	f107 030c 	add.w	r3, r7, #12
 801cd22:	4618      	mov	r0, r3
 801cd24:	f7f2 f917 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 801cd28:	697b      	ldr	r3, [r7, #20]
 801cd2a:	2b00      	cmp	r3, #0
 801cd2c:	d00d      	beq.n	801cd4a <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 801cd2e:	697b      	ldr	r3, [r7, #20]
 801cd30:	681b      	ldr	r3, [r3, #0]
 801cd32:	3350      	adds	r3, #80	; 0x50
 801cd34:	681b      	ldr	r3, [r3, #0]
 801cd36:	6839      	ldr	r1, [r7, #0]
 801cd38:	6978      	ldr	r0, [r7, #20]
 801cd3a:	4798      	blx	r3
 801cd3c:	4603      	mov	r3, r0
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	bf14      	ite	ne
 801cd42:	2301      	movne	r3, #1
 801cd44:	2300      	moveq	r3, #0
 801cd46:	b2db      	uxtb	r3, r3
 801cd48:	e006      	b.n	801cd58 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	7b1b      	ldrb	r3, [r3, #12]
 801cd4e:	2b00      	cmp	r3, #0
 801cd50:	bf14      	ite	ne
 801cd52:	2301      	movne	r3, #1
 801cd54:	2300      	moveq	r3, #0
 801cd56:	b2db      	uxtb	r3, r3
}
 801cd58:	4618      	mov	r0, r3
 801cd5a:	371c      	adds	r7, #28
 801cd5c:	46bd      	mov	sp, r7
 801cd5e:	bd90      	pop	{r4, r7, pc}

0801cd60 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 801cd60:	b590      	push	{r4, r7, lr}
 801cd62:	b087      	sub	sp, #28
 801cd64:	af00      	add	r7, sp, #0
 801cd66:	6078      	str	r0, [r7, #4]
 801cd68:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	6a1c      	ldr	r4, [r3, #32]
 801cd6e:	683b      	ldr	r3, [r7, #0]
 801cd70:	681b      	ldr	r3, [r3, #0]
 801cd72:	335c      	adds	r3, #92	; 0x5c
 801cd74:	681b      	ldr	r3, [r3, #0]
 801cd76:	f107 020c 	add.w	r2, r7, #12
 801cd7a:	6839      	ldr	r1, [r7, #0]
 801cd7c:	4610      	mov	r0, r2
 801cd7e:	4798      	blx	r3
 801cd80:	f107 030c 	add.w	r3, r7, #12
 801cd84:	4619      	mov	r1, r3
 801cd86:	4620      	mov	r0, r4
 801cd88:	f004 f9ce 	bl	8021128 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801cd8c:	6178      	str	r0, [r7, #20]
 801cd8e:	f107 030c 	add.w	r3, r7, #12
 801cd92:	4618      	mov	r0, r3
 801cd94:	f7f2 f8df 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 801cd98:	697b      	ldr	r3, [r7, #20]
 801cd9a:	2b00      	cmp	r3, #0
 801cd9c:	d00d      	beq.n	801cdba <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 801cd9e:	697b      	ldr	r3, [r7, #20]
 801cda0:	681b      	ldr	r3, [r3, #0]
 801cda2:	3354      	adds	r3, #84	; 0x54
 801cda4:	681b      	ldr	r3, [r3, #0]
 801cda6:	6839      	ldr	r1, [r7, #0]
 801cda8:	6978      	ldr	r0, [r7, #20]
 801cdaa:	4798      	blx	r3
 801cdac:	4603      	mov	r3, r0
 801cdae:	2b00      	cmp	r3, #0
 801cdb0:	bf14      	ite	ne
 801cdb2:	2301      	movne	r3, #1
 801cdb4:	2300      	moveq	r3, #0
 801cdb6:	b2db      	uxtb	r3, r3
 801cdb8:	e006      	b.n	801cdc8 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	7b1b      	ldrb	r3, [r3, #12]
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	bf14      	ite	ne
 801cdc2:	2301      	movne	r3, #1
 801cdc4:	2300      	moveq	r3, #0
 801cdc6:	b2db      	uxtb	r3, r3
}
 801cdc8:	4618      	mov	r0, r3
 801cdca:	371c      	adds	r7, #28
 801cdcc:	46bd      	mov	sp, r7
 801cdce:	bd90      	pop	{r4, r7, pc}

0801cdd0 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 801cdd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cdd2:	b0a1      	sub	sp, #132	; 0x84
 801cdd4:	af02      	add	r7, sp, #8
 801cdd6:	6078      	str	r0, [r7, #4]
 801cdd8:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801cdda:	49bc      	ldr	r1, [pc, #752]	; (801d0cc <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801cddc:	6878      	ldr	r0, [r7, #4]
 801cdde:	f7f1 fd02 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 801cde2:	683b      	ldr	r3, [r7, #0]
 801cde4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801cde8:	2b00      	cmp	r3, #0
 801cdea:	d012      	beq.n	801ce12 <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 801cdec:	683b      	ldr	r3, [r7, #0]
 801cdee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801cdf0:	f107 030c 	add.w	r3, r7, #12
 801cdf4:	49b6      	ldr	r1, [pc, #728]	; (801d0d0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 801cdf6:	4618      	mov	r0, r3
 801cdf8:	f7f2 fdb4 	bl	800f964 <_Z16StringFromFormatPKcz>
 801cdfc:	f107 030c 	add.w	r3, r7, #12
 801ce00:	4619      	mov	r1, r3
 801ce02:	6878      	ldr	r0, [r7, #4]
 801ce04:	f7f1 fd5b 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801ce08:	f107 030c 	add.w	r3, r7, #12
 801ce0c:	4618      	mov	r0, r3
 801ce0e:	f7f2 f8a2 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    str += getName();
 801ce12:	f107 0314 	add.w	r3, r7, #20
 801ce16:	6839      	ldr	r1, [r7, #0]
 801ce18:	4618      	mov	r0, r3
 801ce1a:	f7ff f989 	bl	801c130 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801ce1e:	f107 0314 	add.w	r3, r7, #20
 801ce22:	4619      	mov	r1, r3
 801ce24:	6878      	ldr	r0, [r7, #4]
 801ce26:	f7f2 f913 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801ce2a:	f107 0314 	add.w	r3, r7, #20
 801ce2e:	4618      	mov	r0, r3
 801ce30:	f7f2 f891 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    str += " -> ";
 801ce34:	49a7      	ldr	r1, [pc, #668]	; (801d0d4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 801ce36:	6878      	ldr	r0, [r7, #4]
 801ce38:	f7f2 f91c 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 801ce3c:	683b      	ldr	r3, [r7, #0]
 801ce3e:	691b      	ldr	r3, [r3, #16]
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	d02d      	beq.n	801cea0 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 801ce44:	683b      	ldr	r3, [r7, #0]
 801ce46:	691a      	ldr	r2, [r3, #16]
 801ce48:	683b      	ldr	r3, [r7, #0]
 801ce4a:	695b      	ldr	r3, [r3, #20]
 801ce4c:	429a      	cmp	r2, r3
 801ce4e:	d113      	bne.n	801ce78 <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 801ce50:	683b      	ldr	r3, [r7, #0]
 801ce52:	691a      	ldr	r2, [r3, #16]
 801ce54:	f107 031c 	add.w	r3, r7, #28
 801ce58:	499f      	ldr	r1, [pc, #636]	; (801d0d8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 801ce5a:	4618      	mov	r0, r3
 801ce5c:	f7f2 fd82 	bl	800f964 <_Z16StringFromFormatPKcz>
 801ce60:	f107 031c 	add.w	r3, r7, #28
 801ce64:	4619      	mov	r1, r3
 801ce66:	6878      	ldr	r0, [r7, #4]
 801ce68:	f7f2 f8f2 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801ce6c:	f107 031c 	add.w	r3, r7, #28
 801ce70:	4618      	mov	r0, r3
 801ce72:	f7f2 f870 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801ce76:	e013      	b.n	801cea0 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 801ce78:	683b      	ldr	r3, [r7, #0]
 801ce7a:	691a      	ldr	r2, [r3, #16]
 801ce7c:	683b      	ldr	r3, [r7, #0]
 801ce7e:	695b      	ldr	r3, [r3, #20]
 801ce80:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801ce84:	4995      	ldr	r1, [pc, #596]	; (801d0dc <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 801ce86:	f7f2 fd6d 	bl	800f964 <_Z16StringFromFormatPKcz>
 801ce8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ce8e:	4619      	mov	r1, r3
 801ce90:	6878      	ldr	r0, [r7, #4]
 801ce92:	f7f2 f8dd 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801ce96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ce9a:	4618      	mov	r0, r3
 801ce9c:	f7f2 f85b 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 801cea0:	683b      	ldr	r3, [r7, #0]
 801cea2:	69db      	ldr	r3, [r3, #28]
 801cea4:	4618      	mov	r0, r3
 801cea6:	f004 f96e 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 801ceaa:	4603      	mov	r3, r0
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	d109      	bne.n	801cec4 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801ceb0:	683b      	ldr	r3, [r7, #0]
 801ceb2:	6a1b      	ldr	r3, [r3, #32]
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	f004 f966 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 801ceba:	4603      	mov	r3, r0
 801cebc:	2b00      	cmp	r3, #0
 801cebe:	d101      	bne.n	801cec4 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801cec0:	2301      	movs	r3, #1
 801cec2:	e000      	b.n	801cec6 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 801cec4:	2300      	movs	r3, #0
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d00b      	beq.n	801cee2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 801ceca:	683b      	ldr	r3, [r7, #0]
 801cecc:	7b1b      	ldrb	r3, [r3, #12]
 801cece:	2b00      	cmp	r3, #0
 801ced0:	d001      	beq.n	801ced6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 801ced2:	4b83      	ldr	r3, [pc, #524]	; (801d0e0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 801ced4:	e000      	b.n	801ced8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 801ced6:	4b83      	ldr	r3, [pc, #524]	; (801d0e4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 801ced8:	4619      	mov	r1, r3
 801ceda:	6878      	ldr	r0, [r7, #4]
 801cedc:	f7f2 f8ca 	bl	800f074 <_ZN12SimpleStringpLEPKc>
 801cee0:	e0e3      	b.n	801d0aa <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 801cee2:	683b      	ldr	r3, [r7, #0]
 801cee4:	69db      	ldr	r3, [r3, #28]
 801cee6:	4618      	mov	r0, r3
 801cee8:	f004 f94d 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 801ceec:	6778      	str	r0, [r7, #116]	; 0x74
 801ceee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cef0:	2b00      	cmp	r3, #0
 801cef2:	d069      	beq.n	801cfc8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 801cef4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801cef8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801cefa:	4618      	mov	r0, r3
 801cefc:	f004 f89a 	bl	8021034 <_ZNK22MockNamedValueListNode7getTypeEv>
 801cf00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801cf04:	4618      	mov	r0, r3
 801cf06:	f7f1 fff9 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801cf0a:	4605      	mov	r5, r0
 801cf0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801cf10:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801cf12:	4618      	mov	r0, r3
 801cf14:	f004 f87b 	bl	802100e <_ZNK22MockNamedValueListNode7getNameEv>
 801cf18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801cf1c:	4618      	mov	r0, r3
 801cf1e:	f7f1 ffed 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801cf22:	4606      	mov	r6, r0
 801cf24:	683b      	ldr	r3, [r7, #0]
 801cf26:	681b      	ldr	r3, [r3, #0]
 801cf28:	33a4      	adds	r3, #164	; 0xa4
 801cf2a:	681c      	ldr	r4, [r3, #0]
 801cf2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801cf30:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801cf32:	4618      	mov	r0, r3
 801cf34:	f004 f86b 	bl	802100e <_ZNK22MockNamedValueListNode7getNameEv>
 801cf38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801cf3c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801cf40:	6839      	ldr	r1, [r7, #0]
 801cf42:	4618      	mov	r0, r3
 801cf44:	47a0      	blx	r4
 801cf46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801cf4a:	4618      	mov	r0, r3
 801cf4c:	f7f1 ffd6 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801cf50:	4603      	mov	r3, r0
 801cf52:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801cf56:	9300      	str	r3, [sp, #0]
 801cf58:	4633      	mov	r3, r6
 801cf5a:	462a      	mov	r2, r5
 801cf5c:	4962      	ldr	r1, [pc, #392]	; (801d0e8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 801cf5e:	f7f2 fd01 	bl	800f964 <_Z16StringFromFormatPKcz>
 801cf62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801cf66:	4619      	mov	r1, r3
 801cf68:	6878      	ldr	r0, [r7, #4]
 801cf6a:	f7f2 f871 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801cf6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801cf72:	4618      	mov	r0, r3
 801cf74:	f7f1 ffef 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801cf78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801cf7c:	4618      	mov	r0, r3
 801cf7e:	f7f1 ffea 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801cf82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801cf86:	4618      	mov	r0, r3
 801cf88:	f7f1 ffe5 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801cf8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801cf90:	4618      	mov	r0, r3
 801cf92:	f7f1 ffe0 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801cf96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801cf9a:	4618      	mov	r0, r3
 801cf9c:	f7f1 ffdb 	bl	800ef56 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801cfa0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801cfa2:	f003 fff9 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 801cfa6:	4603      	mov	r3, r0
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	bf14      	ite	ne
 801cfac:	2301      	movne	r3, #1
 801cfae:	2300      	moveq	r3, #0
 801cfb0:	b2db      	uxtb	r3, r3
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	d003      	beq.n	801cfbe <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 801cfb6:	494d      	ldr	r1, [pc, #308]	; (801d0ec <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801cfb8:	6878      	ldr	r0, [r7, #4]
 801cfba:	f7f2 f85b 	bl	800f074 <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 801cfbe:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801cfc0:	f003 ffea 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 801cfc4:	6778      	str	r0, [r7, #116]	; 0x74
 801cfc6:	e792      	b.n	801ceee <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 801cfc8:	683b      	ldr	r3, [r7, #0]
 801cfca:	69db      	ldr	r3, [r3, #28]
 801cfcc:	4618      	mov	r0, r3
 801cfce:	f004 f8da 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 801cfd2:	4603      	mov	r3, r0
 801cfd4:	2b00      	cmp	r3, #0
 801cfd6:	d009      	beq.n	801cfec <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801cfd8:	683b      	ldr	r3, [r7, #0]
 801cfda:	6a1b      	ldr	r3, [r3, #32]
 801cfdc:	4618      	mov	r0, r3
 801cfde:	f004 f8d2 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 801cfe2:	4603      	mov	r3, r0
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	d001      	beq.n	801cfec <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801cfe8:	2301      	movs	r3, #1
 801cfea:	e000      	b.n	801cfee <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 801cfec:	2300      	movs	r3, #0
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	d003      	beq.n	801cffa <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 801cff2:	493e      	ldr	r1, [pc, #248]	; (801d0ec <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801cff4:	6878      	ldr	r0, [r7, #4]
 801cff6:	f7f2 f83d 	bl	800f074 <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 801cffa:	683b      	ldr	r3, [r7, #0]
 801cffc:	6a1b      	ldr	r3, [r3, #32]
 801cffe:	4618      	mov	r0, r3
 801d000:	f004 f8c1 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 801d004:	6778      	str	r0, [r7, #116]	; 0x74
 801d006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d008:	2b00      	cmp	r3, #0
 801d00a:	d046      	beq.n	801d09a <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 801d00c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801d010:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801d012:	4618      	mov	r0, r3
 801d014:	f004 f80e 	bl	8021034 <_ZNK22MockNamedValueListNode7getTypeEv>
 801d018:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801d01c:	4618      	mov	r0, r3
 801d01e:	f7f1 ff6d 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801d022:	4604      	mov	r4, r0
 801d024:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801d028:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801d02a:	4618      	mov	r0, r3
 801d02c:	f003 ffef 	bl	802100e <_ZNK22MockNamedValueListNode7getNameEv>
 801d030:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801d034:	4618      	mov	r0, r3
 801d036:	f7f1 ff61 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801d03a:	4603      	mov	r3, r0
 801d03c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801d040:	4622      	mov	r2, r4
 801d042:	492b      	ldr	r1, [pc, #172]	; (801d0f0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 801d044:	f7f2 fc8e 	bl	800f964 <_Z16StringFromFormatPKcz>
 801d048:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801d04c:	4619      	mov	r1, r3
 801d04e:	6878      	ldr	r0, [r7, #4]
 801d050:	f7f1 fffe 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801d054:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801d058:	4618      	mov	r0, r3
 801d05a:	f7f1 ff7c 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801d05e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801d062:	4618      	mov	r0, r3
 801d064:	f7f1 ff77 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801d068:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801d06c:	4618      	mov	r0, r3
 801d06e:	f7f1 ff72 	bl	800ef56 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801d072:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801d074:	f003 ff90 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 801d078:	4603      	mov	r3, r0
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	bf14      	ite	ne
 801d07e:	2301      	movne	r3, #1
 801d080:	2300      	moveq	r3, #0
 801d082:	b2db      	uxtb	r3, r3
 801d084:	2b00      	cmp	r3, #0
 801d086:	d003      	beq.n	801d090 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 801d088:	4918      	ldr	r1, [pc, #96]	; (801d0ec <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801d08a:	6878      	ldr	r0, [r7, #4]
 801d08c:	f7f1 fff2 	bl	800f074 <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 801d090:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801d092:	f003 ff81 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 801d096:	6778      	str	r0, [r7, #116]	; 0x74
 801d098:	e7b5      	b.n	801d006 <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 801d09a:	683b      	ldr	r3, [r7, #0]
 801d09c:	7b1b      	ldrb	r3, [r3, #12]
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	d003      	beq.n	801d0aa <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 801d0a2:	4914      	ldr	r1, [pc, #80]	; (801d0f4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 801d0a4:	6878      	ldr	r0, [r7, #4]
 801d0a6:	f7f1 ffe5 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801d0aa:	683b      	ldr	r3, [r7, #0]
 801d0ac:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801d0ae:	683b      	ldr	r3, [r7, #0]
 801d0b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801d0b2:	2b01      	cmp	r3, #1
 801d0b4:	d101      	bne.n	801d0ba <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 801d0b6:	4c05      	ldr	r4, [pc, #20]	; (801d0cc <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801d0b8:	e000      	b.n	801d0bc <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 801d0ba:	4c0f      	ldr	r4, [pc, #60]	; (801d0f8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 801d0bc:	683b      	ldr	r3, [r7, #0]
 801d0be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801d0c0:	683a      	ldr	r2, [r7, #0]
 801d0c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801d0c4:	2a01      	cmp	r2, #1
 801d0c6:	d119      	bne.n	801d0fc <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 801d0c8:	4a00      	ldr	r2, [pc, #0]	; (801d0cc <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801d0ca:	e018      	b.n	801d0fe <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 801d0cc:	0802829c 	.word	0x0802829c
 801d0d0:	08028310 	.word	0x08028310
 801d0d4:	08028328 	.word	0x08028328
 801d0d8:	08028330 	.word	0x08028330
 801d0dc:	08028350 	.word	0x08028350
 801d0e0:	08028374 	.word	0x08028374
 801d0e4:	0802838c 	.word	0x0802838c
 801d0e8:	0802839c 	.word	0x0802839c
 801d0ec:	080283a8 	.word	0x080283a8
 801d0f0:	080283ac 	.word	0x080283ac
 801d0f4:	080283bc 	.word	0x080283bc
 801d0f8:	080283dc 	.word	0x080283dc
 801d0fc:	4a0c      	ldr	r2, [pc, #48]	; (801d130 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 801d0fe:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801d102:	9201      	str	r2, [sp, #4]
 801d104:	9300      	str	r3, [sp, #0]
 801d106:	4623      	mov	r3, r4
 801d108:	460a      	mov	r2, r1
 801d10a:	490a      	ldr	r1, [pc, #40]	; (801d134 <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 801d10c:	f7f2 fc2a 	bl	800f964 <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801d110:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801d114:	4619      	mov	r1, r3
 801d116:	6878      	ldr	r0, [r7, #4]
 801d118:	f7f1 ff9a 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801d11c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801d120:	4618      	mov	r0, r3
 801d122:	f7f1 ff18 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    return str;
 801d126:	bf00      	nop
}
 801d128:	6878      	ldr	r0, [r7, #4]
 801d12a:	377c      	adds	r7, #124	; 0x7c
 801d12c:	46bd      	mov	sp, r7
 801d12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d130:	080283dc 	.word	0x080283dc
 801d134:	080283e0 	.word	0x080283e0

0801d138 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 801d138:	b590      	push	{r4, r7, lr}
 801d13a:	b095      	sub	sp, #84	; 0x54
 801d13c:	af00      	add	r7, sp, #0
 801d13e:	6078      	str	r0, [r7, #4]
 801d140:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801d142:	496c      	ldr	r1, [pc, #432]	; (801d2f4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801d144:	6878      	ldr	r0, [r7, #4]
 801d146:	f7f1 fb4e 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 801d14a:	683b      	ldr	r3, [r7, #0]
 801d14c:	69db      	ldr	r3, [r3, #28]
 801d14e:	4618      	mov	r0, r3
 801d150:	f004 f819 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 801d154:	64f8      	str	r0, [r7, #76]	; 0x4c
 801d156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d158:	2b00      	cmp	r3, #0
 801d15a:	d05e      	beq.n	801d21a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 801d15c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801d15e:	6838      	ldr	r0, [r7, #0]
 801d160:	f000 f906 	bl	801d370 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801d164:	4603      	mov	r3, r0
 801d166:	4618      	mov	r0, r3
 801d168:	f000 f938 	bl	801d3dc <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801d16c:	4603      	mov	r3, r0
 801d16e:	f083 0301 	eor.w	r3, r3, #1
 801d172:	b2db      	uxtb	r3, r3
 801d174:	2b00      	cmp	r3, #0
 801d176:	d04b      	beq.n	801d210 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 801d178:	f107 030c 	add.w	r3, r7, #12
 801d17c:	495d      	ldr	r1, [pc, #372]	; (801d2f4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801d17e:	4618      	mov	r0, r3
 801d180:	f7f1 fb31 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801d184:	f107 030c 	add.w	r3, r7, #12
 801d188:	4619      	mov	r1, r3
 801d18a:	6878      	ldr	r0, [r7, #4]
 801d18c:	f7f1 ff34 	bl	800eff8 <_ZneRK12SimpleStringS1_>
 801d190:	4603      	mov	r3, r0
 801d192:	461c      	mov	r4, r3
 801d194:	f107 030c 	add.w	r3, r7, #12
 801d198:	4618      	mov	r0, r3
 801d19a:	f7f1 fedc 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801d19e:	2c00      	cmp	r4, #0
 801d1a0:	d003      	beq.n	801d1aa <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 801d1a2:	4955      	ldr	r1, [pc, #340]	; (801d2f8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801d1a4:	6878      	ldr	r0, [r7, #4]
 801d1a6:	f7f1 ff65 	bl	800f074 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801d1aa:	f107 031c 	add.w	r3, r7, #28
 801d1ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801d1b0:	4618      	mov	r0, r3
 801d1b2:	f003 ff3f 	bl	8021034 <_ZNK22MockNamedValueListNode7getTypeEv>
 801d1b6:	f107 031c 	add.w	r3, r7, #28
 801d1ba:	4618      	mov	r0, r3
 801d1bc:	f7f1 fe9e 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801d1c0:	4604      	mov	r4, r0
 801d1c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d1c6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801d1c8:	4618      	mov	r0, r3
 801d1ca:	f003 ff20 	bl	802100e <_ZNK22MockNamedValueListNode7getNameEv>
 801d1ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d1d2:	4618      	mov	r0, r3
 801d1d4:	f7f1 fe92 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801d1d8:	4603      	mov	r3, r0
 801d1da:	f107 0014 	add.w	r0, r7, #20
 801d1de:	4622      	mov	r2, r4
 801d1e0:	4946      	ldr	r1, [pc, #280]	; (801d2fc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801d1e2:	f7f2 fbbf 	bl	800f964 <_Z16StringFromFormatPKcz>
 801d1e6:	f107 0314 	add.w	r3, r7, #20
 801d1ea:	4619      	mov	r1, r3
 801d1ec:	6878      	ldr	r0, [r7, #4]
 801d1ee:	f7f1 ff2f 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801d1f2:	f107 0314 	add.w	r3, r7, #20
 801d1f6:	4618      	mov	r0, r3
 801d1f8:	f7f1 fead 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801d1fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d200:	4618      	mov	r0, r3
 801d202:	f7f1 fea8 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801d206:	f107 031c 	add.w	r3, r7, #28
 801d20a:	4618      	mov	r0, r3
 801d20c:	f7f1 fea3 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 801d210:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801d212:	f003 fec1 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 801d216:	64f8      	str	r0, [r7, #76]	; 0x4c
 801d218:	e79d      	b.n	801d156 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801d21a:	683b      	ldr	r3, [r7, #0]
 801d21c:	6a1b      	ldr	r3, [r3, #32]
 801d21e:	4618      	mov	r0, r3
 801d220:	f003 ffb1 	bl	8021186 <_ZN18MockNamedValueList5beginEv>
 801d224:	64f8      	str	r0, [r7, #76]	; 0x4c
 801d226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d228:	2b00      	cmp	r3, #0
 801d22a:	d05e      	beq.n	801d2ea <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 801d22c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801d22e:	6838      	ldr	r0, [r7, #0]
 801d230:	f000 f89e 	bl	801d370 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801d234:	4603      	mov	r3, r0
 801d236:	4618      	mov	r0, r3
 801d238:	f000 f8d0 	bl	801d3dc <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801d23c:	4603      	mov	r3, r0
 801d23e:	f083 0301 	eor.w	r3, r3, #1
 801d242:	b2db      	uxtb	r3, r3
 801d244:	2b00      	cmp	r3, #0
 801d246:	d04b      	beq.n	801d2e0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 801d248:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d24c:	4929      	ldr	r1, [pc, #164]	; (801d2f4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801d24e:	4618      	mov	r0, r3
 801d250:	f7f1 fac9 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801d254:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d258:	4619      	mov	r1, r3
 801d25a:	6878      	ldr	r0, [r7, #4]
 801d25c:	f7f1 fecc 	bl	800eff8 <_ZneRK12SimpleStringS1_>
 801d260:	4603      	mov	r3, r0
 801d262:	461c      	mov	r4, r3
 801d264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d268:	4618      	mov	r0, r3
 801d26a:	f7f1 fe74 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801d26e:	2c00      	cmp	r4, #0
 801d270:	d003      	beq.n	801d27a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 801d272:	4921      	ldr	r1, [pc, #132]	; (801d2f8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801d274:	6878      	ldr	r0, [r7, #4]
 801d276:	f7f1 fefd 	bl	800f074 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801d27a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d27e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801d280:	4618      	mov	r0, r3
 801d282:	f003 fed7 	bl	8021034 <_ZNK22MockNamedValueListNode7getTypeEv>
 801d286:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d28a:	4618      	mov	r0, r3
 801d28c:	f7f1 fe36 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801d290:	4604      	mov	r4, r0
 801d292:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d296:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801d298:	4618      	mov	r0, r3
 801d29a:	f003 feb8 	bl	802100e <_ZNK22MockNamedValueListNode7getNameEv>
 801d29e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d2a2:	4618      	mov	r0, r3
 801d2a4:	f7f1 fe2a 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801d2a8:	4603      	mov	r3, r0
 801d2aa:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801d2ae:	4622      	mov	r2, r4
 801d2b0:	4912      	ldr	r1, [pc, #72]	; (801d2fc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801d2b2:	f7f2 fb57 	bl	800f964 <_Z16StringFromFormatPKcz>
 801d2b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801d2ba:	4619      	mov	r1, r3
 801d2bc:	6878      	ldr	r0, [r7, #4]
 801d2be:	f7f1 fec7 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801d2c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801d2c6:	4618      	mov	r0, r3
 801d2c8:	f7f1 fe45 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801d2cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d2d0:	4618      	mov	r0, r3
 801d2d2:	f7f1 fe40 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801d2d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d2da:	4618      	mov	r0, r3
 801d2dc:	f7f1 fe3b 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801d2e0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801d2e2:	f003 fe59 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 801d2e6:	64f8      	str	r0, [r7, #76]	; 0x4c
 801d2e8:	e79d      	b.n	801d226 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 801d2ea:	bf00      	nop
}
 801d2ec:	6878      	ldr	r0, [r7, #4]
 801d2ee:	3754      	adds	r7, #84	; 0x54
 801d2f0:	46bd      	mov	sp, r7
 801d2f2:	bd90      	pop	{r4, r7, pc}
 801d2f4:	0802829c 	.word	0x0802829c
 801d2f8:	080283a8 	.word	0x080283a8
 801d2fc:	08028408 	.word	0x08028408

0801d300 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 801d300:	b590      	push	{r4, r7, lr}
 801d302:	b085      	sub	sp, #20
 801d304:	af00      	add	r7, sp, #0
 801d306:	6078      	str	r0, [r7, #4]
 801d308:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 801d30a:	f107 0308 	add.w	r3, r7, #8
 801d30e:	6879      	ldr	r1, [r7, #4]
 801d310:	4618      	mov	r0, r3
 801d312:	f7fe ff0d 	bl	801c130 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801d316:	f107 0308 	add.w	r3, r7, #8
 801d31a:	4619      	mov	r1, r3
 801d31c:	6838      	ldr	r0, [r7, #0]
 801d31e:	f7f1 fe26 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 801d322:	4603      	mov	r3, r0
 801d324:	461c      	mov	r4, r3
 801d326:	f107 0308 	add.w	r3, r7, #8
 801d32a:	4618      	mov	r0, r3
 801d32c:	f7f1 fe13 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801d330:	4623      	mov	r3, r4
}
 801d332:	4618      	mov	r0, r3
 801d334:	3714      	adds	r7, #20
 801d336:	46bd      	mov	sp, r7
 801d338:	bd90      	pop	{r4, r7, pc}

0801d33a <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 801d33a:	b480      	push	{r7}
 801d33c:	b083      	sub	sp, #12
 801d33e:	af00      	add	r7, sp, #0
 801d340:	6078      	str	r0, [r7, #4]
 801d342:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 801d344:	687b      	ldr	r3, [r7, #4]
 801d346:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801d34a:	f083 0301 	eor.w	r3, r3, #1
 801d34e:	b2db      	uxtb	r3, r3
 801d350:	2b00      	cmp	r3, #0
 801d352:	d104      	bne.n	801d35e <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 801d354:	687b      	ldr	r3, [r7, #4]
 801d356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d358:	683a      	ldr	r2, [r7, #0]
 801d35a:	429a      	cmp	r2, r3
 801d35c:	d101      	bne.n	801d362 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 801d35e:	2301      	movs	r3, #1
 801d360:	e000      	b.n	801d364 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 801d362:	2300      	movs	r3, #0
}
 801d364:	4618      	mov	r0, r3
 801d366:	370c      	adds	r7, #12
 801d368:	46bd      	mov	sp, r7
 801d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d36e:	4770      	bx	lr

0801d370 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 801d370:	b580      	push	{r7, lr}
 801d372:	b082      	sub	sp, #8
 801d374:	af00      	add	r7, sp, #0
 801d376:	6078      	str	r0, [r7, #4]
 801d378:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 801d37a:	6838      	ldr	r0, [r7, #0]
 801d37c:	f003 fe18 	bl	8020fb0 <_ZN22MockNamedValueListNode4itemEv>
 801d380:	4603      	mov	r3, r0
}
 801d382:	4618      	mov	r0, r3
 801d384:	3708      	adds	r7, #8
 801d386:	46bd      	mov	sp, r7
 801d388:	bd80      	pop	{r7, pc}
	...

0801d38c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 801d38c:	b580      	push	{r7, lr}
 801d38e:	b082      	sub	sp, #8
 801d390:	af00      	add	r7, sp, #0
 801d392:	6078      	str	r0, [r7, #4]
 801d394:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 801d396:	687b      	ldr	r3, [r7, #4]
 801d398:	6839      	ldr	r1, [r7, #0]
 801d39a:	4618      	mov	r0, r3
 801d39c:	f001 ff48 	bl	801f230 <_ZN14MockNamedValueC1ERK12SimpleString>
 801d3a0:	4a05      	ldr	r2, [pc, #20]	; (801d3b8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 801d3a2:	687b      	ldr	r3, [r7, #4]
 801d3a4:	601a      	str	r2, [r3, #0]
 801d3a6:	687b      	ldr	r3, [r7, #4]
 801d3a8:	2200      	movs	r2, #0
 801d3aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 801d3ae:	687b      	ldr	r3, [r7, #4]
 801d3b0:	4618      	mov	r0, r3
 801d3b2:	3708      	adds	r7, #8
 801d3b4:	46bd      	mov	sp, r7
 801d3b6:	bd80      	pop	{r7, pc}
 801d3b8:	0802b718 	.word	0x0802b718

0801d3bc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 801d3bc:	b480      	push	{r7}
 801d3be:	b083      	sub	sp, #12
 801d3c0:	af00      	add	r7, sp, #0
 801d3c2:	6078      	str	r0, [r7, #4]
 801d3c4:	460b      	mov	r3, r1
 801d3c6:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	78fa      	ldrb	r2, [r7, #3]
 801d3cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 801d3d0:	bf00      	nop
 801d3d2:	370c      	adds	r7, #12
 801d3d4:	46bd      	mov	sp, r7
 801d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3da:	4770      	bx	lr

0801d3dc <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 801d3dc:	b480      	push	{r7}
 801d3de:	b083      	sub	sp, #12
 801d3e0:	af00      	add	r7, sp, #0
 801d3e2:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801d3ea:	4618      	mov	r0, r3
 801d3ec:	370c      	adds	r7, #12
 801d3ee:	46bd      	mov	sp, r7
 801d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3f4:	4770      	bx	lr
	...

0801d3f8 <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 801d3f8:	b580      	push	{r7, lr}
 801d3fa:	b082      	sub	sp, #8
 801d3fc:	af00      	add	r7, sp, #0
 801d3fe:	6078      	str	r0, [r7, #4]
 801d400:	460b      	mov	r3, r1
 801d402:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 801d404:	687b      	ldr	r3, [r7, #4]
 801d406:	3328      	adds	r3, #40	; 0x28
 801d408:	4907      	ldr	r1, [pc, #28]	; (801d428 <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 801d40a:	4618      	mov	r0, r3
 801d40c:	f002 f9b4 	bl	801f778 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	3328      	adds	r3, #40	; 0x28
 801d414:	78fa      	ldrb	r2, [r7, #3]
 801d416:	4611      	mov	r1, r2
 801d418:	4618      	mov	r0, r3
 801d41a:	f001 ff5b 	bl	801f2d4 <_ZN14MockNamedValue8setValueEb>
    return *this;
 801d41e:	687b      	ldr	r3, [r7, #4]
}
 801d420:	4618      	mov	r0, r3
 801d422:	3708      	adds	r7, #8
 801d424:	46bd      	mov	sp, r7
 801d426:	bd80      	pop	{r7, pc}
 801d428:	08028410 	.word	0x08028410

0801d42c <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 801d42c:	b580      	push	{r7, lr}
 801d42e:	b082      	sub	sp, #8
 801d430:	af00      	add	r7, sp, #0
 801d432:	6078      	str	r0, [r7, #4]
 801d434:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	3328      	adds	r3, #40	; 0x28
 801d43a:	4907      	ldr	r1, [pc, #28]	; (801d458 <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 801d43c:	4618      	mov	r0, r3
 801d43e:	f002 f99b 	bl	801f778 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801d442:	687b      	ldr	r3, [r7, #4]
 801d444:	3328      	adds	r3, #40	; 0x28
 801d446:	6839      	ldr	r1, [r7, #0]
 801d448:	4618      	mov	r0, r3
 801d44a:	f001 ff67 	bl	801f31c <_ZN14MockNamedValue8setValueEj>
    return *this;
 801d44e:	687b      	ldr	r3, [r7, #4]
}
 801d450:	4618      	mov	r0, r3
 801d452:	3708      	adds	r7, #8
 801d454:	46bd      	mov	sp, r7
 801d456:	bd80      	pop	{r7, pc}
 801d458:	08028410 	.word	0x08028410

0801d45c <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 801d45c:	b580      	push	{r7, lr}
 801d45e:	b082      	sub	sp, #8
 801d460:	af00      	add	r7, sp, #0
 801d462:	6078      	str	r0, [r7, #4]
 801d464:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801d466:	687b      	ldr	r3, [r7, #4]
 801d468:	3328      	adds	r3, #40	; 0x28
 801d46a:	4907      	ldr	r1, [pc, #28]	; (801d488 <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 801d46c:	4618      	mov	r0, r3
 801d46e:	f002 f983 	bl	801f778 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801d472:	687b      	ldr	r3, [r7, #4]
 801d474:	3328      	adds	r3, #40	; 0x28
 801d476:	6839      	ldr	r1, [r7, #0]
 801d478:	4618      	mov	r0, r3
 801d47a:	f001 ff71 	bl	801f360 <_ZN14MockNamedValue8setValueEi>
    return *this;
 801d47e:	687b      	ldr	r3, [r7, #4]
}
 801d480:	4618      	mov	r0, r3
 801d482:	3708      	adds	r7, #8
 801d484:	46bd      	mov	sp, r7
 801d486:	bd80      	pop	{r7, pc}
 801d488:	08028410 	.word	0x08028410

0801d48c <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 801d48c:	b580      	push	{r7, lr}
 801d48e:	b082      	sub	sp, #8
 801d490:	af00      	add	r7, sp, #0
 801d492:	6078      	str	r0, [r7, #4]
 801d494:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	3328      	adds	r3, #40	; 0x28
 801d49a:	4907      	ldr	r1, [pc, #28]	; (801d4b8 <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 801d49c:	4618      	mov	r0, r3
 801d49e:	f002 f96b 	bl	801f778 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801d4a2:	687b      	ldr	r3, [r7, #4]
 801d4a4:	3328      	adds	r3, #40	; 0x28
 801d4a6:	6839      	ldr	r1, [r7, #0]
 801d4a8:	4618      	mov	r0, r3
 801d4aa:	f001 ff7b 	bl	801f3a4 <_ZN14MockNamedValue8setValueEl>
    return *this;
 801d4ae:	687b      	ldr	r3, [r7, #4]
}
 801d4b0:	4618      	mov	r0, r3
 801d4b2:	3708      	adds	r7, #8
 801d4b4:	46bd      	mov	sp, r7
 801d4b6:	bd80      	pop	{r7, pc}
 801d4b8:	08028410 	.word	0x08028410

0801d4bc <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 801d4bc:	b580      	push	{r7, lr}
 801d4be:	b082      	sub	sp, #8
 801d4c0:	af00      	add	r7, sp, #0
 801d4c2:	6078      	str	r0, [r7, #4]
 801d4c4:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801d4c6:	687b      	ldr	r3, [r7, #4]
 801d4c8:	3328      	adds	r3, #40	; 0x28
 801d4ca:	4907      	ldr	r1, [pc, #28]	; (801d4e8 <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 801d4cc:	4618      	mov	r0, r3
 801d4ce:	f002 f953 	bl	801f778 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801d4d2:	687b      	ldr	r3, [r7, #4]
 801d4d4:	3328      	adds	r3, #40	; 0x28
 801d4d6:	6839      	ldr	r1, [r7, #0]
 801d4d8:	4618      	mov	r0, r3
 801d4da:	f001 ff85 	bl	801f3e8 <_ZN14MockNamedValue8setValueEm>
    return *this;
 801d4de:	687b      	ldr	r3, [r7, #4]
}
 801d4e0:	4618      	mov	r0, r3
 801d4e2:	3708      	adds	r7, #8
 801d4e4:	46bd      	mov	sp, r7
 801d4e6:	bd80      	pop	{r7, pc}
 801d4e8:	08028410 	.word	0x08028410

0801d4ec <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 801d4ec:	b5b0      	push	{r4, r5, r7, lr}
 801d4ee:	b086      	sub	sp, #24
 801d4f0:	af02      	add	r7, sp, #8
 801d4f2:	60f8      	str	r0, [r7, #12]
 801d4f4:	1d3b      	adds	r3, r7, #4
 801d4f6:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801d4fa:	f7f8 fd57 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801d4fe:	4604      	mov	r4, r0
 801d500:	6823      	ldr	r3, [r4, #0]
 801d502:	3368      	adds	r3, #104	; 0x68
 801d504:	681d      	ldr	r5, [r3, #0]
 801d506:	f7f8 fd61 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d50a:	4603      	mov	r3, r0
 801d50c:	9300      	str	r3, [sp, #0]
 801d50e:	f240 2319 	movw	r3, #537	; 0x219
 801d512:	4a04      	ldr	r2, [pc, #16]	; (801d524 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 801d514:	4904      	ldr	r1, [pc, #16]	; (801d528 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 801d516:	4620      	mov	r0, r4
 801d518:	47a8      	blx	r5
    return *this;
 801d51a:	68fb      	ldr	r3, [r7, #12]
}
 801d51c:	4618      	mov	r0, r3
 801d51e:	3710      	adds	r7, #16
 801d520:	46bd      	mov	sp, r7
 801d522:	bdb0      	pop	{r4, r5, r7, pc}
 801d524:	080282a0 	.word	0x080282a0
 801d528:	080282bc 	.word	0x080282bc

0801d52c <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 801d52c:	b5b0      	push	{r4, r5, r7, lr}
 801d52e:	b086      	sub	sp, #24
 801d530:	af02      	add	r7, sp, #8
 801d532:	60f8      	str	r0, [r7, #12]
 801d534:	1d3b      	adds	r3, r7, #4
 801d536:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801d53a:	f7f8 fd37 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801d53e:	4604      	mov	r4, r0
 801d540:	6823      	ldr	r3, [r4, #0]
 801d542:	3368      	adds	r3, #104	; 0x68
 801d544:	681d      	ldr	r5, [r3, #0]
 801d546:	f7f8 fd41 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d54a:	4603      	mov	r3, r0
 801d54c:	9300      	str	r3, [sp, #0]
 801d54e:	f240 231f 	movw	r3, #543	; 0x21f
 801d552:	4a04      	ldr	r2, [pc, #16]	; (801d564 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 801d554:	4904      	ldr	r1, [pc, #16]	; (801d568 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 801d556:	4620      	mov	r0, r4
 801d558:	47a8      	blx	r5
    return *this;
 801d55a:	68fb      	ldr	r3, [r7, #12]
}
 801d55c:	4618      	mov	r0, r3
 801d55e:	3710      	adds	r7, #16
 801d560:	46bd      	mov	sp, r7
 801d562:	bdb0      	pop	{r4, r5, r7, pc}
 801d564:	080282a0 	.word	0x080282a0
 801d568:	080282dc 	.word	0x080282dc

0801d56c <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 801d56c:	b580      	push	{r7, lr}
 801d56e:	b082      	sub	sp, #8
 801d570:	af00      	add	r7, sp, #0
 801d572:	6078      	str	r0, [r7, #4]
 801d574:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801d576:	687b      	ldr	r3, [r7, #4]
 801d578:	3328      	adds	r3, #40	; 0x28
 801d57a:	4907      	ldr	r1, [pc, #28]	; (801d598 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 801d57c:	4618      	mov	r0, r3
 801d57e:	f002 f8fb 	bl	801f778 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801d582:	687b      	ldr	r3, [r7, #4]
 801d584:	3328      	adds	r3, #40	; 0x28
 801d586:	6839      	ldr	r1, [r7, #0]
 801d588:	4618      	mov	r0, r3
 801d58a:	f002 f837 	bl	801f5fc <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 801d58e:	687b      	ldr	r3, [r7, #4]
}
 801d590:	4618      	mov	r0, r3
 801d592:	3708      	adds	r7, #8
 801d594:	46bd      	mov	sp, r7
 801d596:	bd80      	pop	{r7, pc}
 801d598:	08028410 	.word	0x08028410

0801d59c <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 801d59c:	b580      	push	{r7, lr}
 801d59e:	b084      	sub	sp, #16
 801d5a0:	af00      	add	r7, sp, #0
 801d5a2:	60f8      	str	r0, [r7, #12]
 801d5a4:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 801d5a8:	68fb      	ldr	r3, [r7, #12]
 801d5aa:	3328      	adds	r3, #40	; 0x28
 801d5ac:	4907      	ldr	r1, [pc, #28]	; (801d5cc <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 801d5ae:	4618      	mov	r0, r3
 801d5b0:	f002 f8e2 	bl	801f778 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801d5b4:	68fb      	ldr	r3, [r7, #12]
 801d5b6:	3328      	adds	r3, #40	; 0x28
 801d5b8:	ed97 0b00 	vldr	d0, [r7]
 801d5bc:	4618      	mov	r0, r3
 801d5be:	f001 ff73 	bl	801f4a8 <_ZN14MockNamedValue8setValueEd>
    return *this;
 801d5c2:	68fb      	ldr	r3, [r7, #12]
}
 801d5c4:	4618      	mov	r0, r3
 801d5c6:	3710      	adds	r7, #16
 801d5c8:	46bd      	mov	sp, r7
 801d5ca:	bd80      	pop	{r7, pc}
 801d5cc:	08028410 	.word	0x08028410

0801d5d0 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 801d5d0:	b580      	push	{r7, lr}
 801d5d2:	b082      	sub	sp, #8
 801d5d4:	af00      	add	r7, sp, #0
 801d5d6:	6078      	str	r0, [r7, #4]
 801d5d8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	3328      	adds	r3, #40	; 0x28
 801d5de:	4907      	ldr	r1, [pc, #28]	; (801d5fc <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 801d5e0:	4618      	mov	r0, r3
 801d5e2:	f002 f8c9 	bl	801f778 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	3328      	adds	r3, #40	; 0x28
 801d5ea:	6839      	ldr	r1, [r7, #0]
 801d5ec:	4618      	mov	r0, r3
 801d5ee:	f001 ff9f 	bl	801f530 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 801d5f2:	687b      	ldr	r3, [r7, #4]
}
 801d5f4:	4618      	mov	r0, r3
 801d5f6:	3708      	adds	r7, #8
 801d5f8:	46bd      	mov	sp, r7
 801d5fa:	bd80      	pop	{r7, pc}
 801d5fc:	08028410 	.word	0x08028410

0801d600 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 801d600:	b580      	push	{r7, lr}
 801d602:	b082      	sub	sp, #8
 801d604:	af00      	add	r7, sp, #0
 801d606:	6078      	str	r0, [r7, #4]
 801d608:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801d60a:	687b      	ldr	r3, [r7, #4]
 801d60c:	3328      	adds	r3, #40	; 0x28
 801d60e:	4907      	ldr	r1, [pc, #28]	; (801d62c <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 801d610:	4618      	mov	r0, r3
 801d612:	f002 f8b1 	bl	801f778 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	3328      	adds	r3, #40	; 0x28
 801d61a:	6839      	ldr	r1, [r7, #0]
 801d61c:	4618      	mov	r0, r3
 801d61e:	f001 ffa9 	bl	801f574 <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 801d622:	687b      	ldr	r3, [r7, #4]
}
 801d624:	4618      	mov	r0, r3
 801d626:	3708      	adds	r7, #8
 801d628:	46bd      	mov	sp, r7
 801d62a:	bd80      	pop	{r7, pc}
 801d62c:	08028410 	.word	0x08028410

0801d630 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 801d630:	b580      	push	{r7, lr}
 801d632:	b082      	sub	sp, #8
 801d634:	af00      	add	r7, sp, #0
 801d636:	6078      	str	r0, [r7, #4]
 801d638:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	3328      	adds	r3, #40	; 0x28
 801d63e:	4907      	ldr	r1, [pc, #28]	; (801d65c <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 801d640:	4618      	mov	r0, r3
 801d642:	f002 f899 	bl	801f778 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801d646:	687b      	ldr	r3, [r7, #4]
 801d648:	3328      	adds	r3, #40	; 0x28
 801d64a:	6839      	ldr	r1, [r7, #0]
 801d64c:	4618      	mov	r0, r3
 801d64e:	f001 ffb3 	bl	801f5b8 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 801d652:	687b      	ldr	r3, [r7, #4]
}
 801d654:	4618      	mov	r0, r3
 801d656:	3708      	adds	r7, #8
 801d658:	46bd      	mov	sp, r7
 801d65a:	bd80      	pop	{r7, pc}
 801d65c:	08028410 	.word	0x08028410

0801d660 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 801d660:	b480      	push	{r7}
 801d662:	b083      	sub	sp, #12
 801d664:	af00      	add	r7, sp, #0
 801d666:	6078      	str	r0, [r7, #4]
 801d668:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 801d66a:	687b      	ldr	r3, [r7, #4]
 801d66c:	2201      	movs	r2, #1
 801d66e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 801d672:	687b      	ldr	r3, [r7, #4]
 801d674:	2200      	movs	r2, #0
 801d676:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 801d67a:	687b      	ldr	r3, [r7, #4]
 801d67c:	683a      	ldr	r2, [r7, #0]
 801d67e:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 801d680:	687b      	ldr	r3, [r7, #4]
}
 801d682:	4618      	mov	r0, r3
 801d684:	370c      	adds	r7, #12
 801d686:	46bd      	mov	sp, r7
 801d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d68c:	4770      	bx	lr

0801d68e <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 801d68e:	b580      	push	{r7, lr}
 801d690:	b082      	sub	sp, #8
 801d692:	af00      	add	r7, sp, #0
 801d694:	6078      	str	r0, [r7, #4]
 801d696:	6039      	str	r1, [r7, #0]
    return returnValue_;
 801d698:	683b      	ldr	r3, [r7, #0]
 801d69a:	3328      	adds	r3, #40	; 0x28
 801d69c:	4619      	mov	r1, r3
 801d69e:	6878      	ldr	r0, [r7, #4]
 801d6a0:	f7ef f946 	bl	800c930 <_ZN14MockNamedValueC1ERKS_>
}
 801d6a4:	6878      	ldr	r0, [r7, #4]
 801d6a6:	3708      	adds	r7, #8
 801d6a8:	46bd      	mov	sp, r7
 801d6aa:	bd80      	pop	{r7, pc}

0801d6ac <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 801d6ac:	b480      	push	{r7}
 801d6ae:	b085      	sub	sp, #20
 801d6b0:	af00      	add	r7, sp, #0
 801d6b2:	60f8      	str	r0, [r7, #12]
 801d6b4:	60b9      	str	r1, [r7, #8]
 801d6b6:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 801d6b8:	68fb      	ldr	r3, [r7, #12]
 801d6ba:	68ba      	ldr	r2, [r7, #8]
 801d6bc:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 801d6be:	68fb      	ldr	r3, [r7, #12]
 801d6c0:	687a      	ldr	r2, [r7, #4]
 801d6c2:	615a      	str	r2, [r3, #20]
    return *this;
 801d6c4:	68fb      	ldr	r3, [r7, #12]
}
 801d6c6:	4618      	mov	r0, r3
 801d6c8:	3714      	adds	r7, #20
 801d6ca:	46bd      	mov	sp, r7
 801d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6d0:	4770      	bx	lr

0801d6d2 <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 801d6d2:	b480      	push	{r7}
 801d6d4:	b083      	sub	sp, #12
 801d6d6:	af00      	add	r7, sp, #0
 801d6d8:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 801d6da:	687b      	ldr	r3, [r7, #4]
 801d6dc:	7e1b      	ldrb	r3, [r3, #24]
}
 801d6de:	4618      	mov	r0, r3
 801d6e0:	370c      	adds	r7, #12
 801d6e2:	46bd      	mov	sp, r7
 801d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6e8:	4770      	bx	lr

0801d6ea <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 801d6ea:	b480      	push	{r7}
 801d6ec:	b083      	sub	sp, #12
 801d6ee:	af00      	add	r7, sp, #0
 801d6f0:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 801d6f2:	687b      	ldr	r3, [r7, #4]
 801d6f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 801d6f6:	4618      	mov	r0, r3
 801d6f8:	370c      	adds	r7, #12
 801d6fa:	46bd      	mov	sp, r7
 801d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d700:	4770      	bx	lr
	...

0801d704 <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 801d704:	b580      	push	{r7, lr}
 801d706:	b082      	sub	sp, #8
 801d708:	af00      	add	r7, sp, #0
 801d70a:	6078      	str	r0, [r7, #4]
 801d70c:	687b      	ldr	r3, [r7, #4]
 801d70e:	4618      	mov	r0, r3
 801d710:	f7fe fcce 	bl	801c0b0 <_ZN16MockExpectedCallC1Ev>
 801d714:	4a03      	ldr	r2, [pc, #12]	; (801d724 <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	601a      	str	r2, [r3, #0]
 801d71a:	687b      	ldr	r3, [r7, #4]
 801d71c:	4618      	mov	r0, r3
 801d71e:	3708      	adds	r7, #8
 801d720:	46bd      	mov	sp, r7
 801d722:	bd80      	pop	{r7, pc}
 801d724:	0802b578 	.word	0x0802b578

0801d728 <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 801d728:	b580      	push	{r7, lr}
 801d72a:	af00      	add	r7, sp, #0
 801d72c:	4801      	ldr	r0, [pc, #4]	; (801d734 <__tcf_0+0xc>)
 801d72e:	f000 f831 	bl	801d794 <_ZN23MockIgnoredExpectedCallD1Ev>
 801d732:	bd80      	pop	{r7, pc}
 801d734:	20000fa0 	.word	0x20000fa0

0801d738 <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 801d738:	b580      	push	{r7, lr}
 801d73a:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 801d73c:	4b12      	ldr	r3, [pc, #72]	; (801d788 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801d73e:	781b      	ldrb	r3, [r3, #0]
 801d740:	f3bf 8f5b 	dmb	ish
 801d744:	b2db      	uxtb	r3, r3
 801d746:	f003 0301 	and.w	r3, r3, #1
 801d74a:	2b00      	cmp	r3, #0
 801d74c:	bf0c      	ite	eq
 801d74e:	2301      	moveq	r3, #1
 801d750:	2300      	movne	r3, #0
 801d752:	b2db      	uxtb	r3, r3
 801d754:	2b00      	cmp	r3, #0
 801d756:	d013      	beq.n	801d780 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801d758:	480b      	ldr	r0, [pc, #44]	; (801d788 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801d75a:	f003 ff05 	bl	8021568 <__cxa_guard_acquire>
 801d75e:	4603      	mov	r3, r0
 801d760:	2b00      	cmp	r3, #0
 801d762:	bf14      	ite	ne
 801d764:	2301      	movne	r3, #1
 801d766:	2300      	moveq	r3, #0
 801d768:	b2db      	uxtb	r3, r3
 801d76a:	2b00      	cmp	r3, #0
 801d76c:	d008      	beq.n	801d780 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801d76e:	4807      	ldr	r0, [pc, #28]	; (801d78c <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 801d770:	f7ff ffc8 	bl	801d704 <_ZN23MockIgnoredExpectedCallC1Ev>
 801d774:	4804      	ldr	r0, [pc, #16]	; (801d788 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801d776:	f003 ff03 	bl	8021580 <__cxa_guard_release>
 801d77a:	4805      	ldr	r0, [pc, #20]	; (801d790 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 801d77c:	f003 ff27 	bl	80215ce <atexit>
    return call;
 801d780:	4b02      	ldr	r3, [pc, #8]	; (801d78c <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 801d782:	4618      	mov	r0, r3
 801d784:	bd80      	pop	{r7, pc}
 801d786:	bf00      	nop
 801d788:	20000fa4 	.word	0x20000fa4
 801d78c:	20000fa0 	.word	0x20000fa0
 801d790:	0801d729 	.word	0x0801d729

0801d794 <_ZN23MockIgnoredExpectedCallD1Ev>:
 801d794:	b580      	push	{r7, lr}
 801d796:	b082      	sub	sp, #8
 801d798:	af00      	add	r7, sp, #0
 801d79a:	6078      	str	r0, [r7, #4]
 801d79c:	4a05      	ldr	r2, [pc, #20]	; (801d7b4 <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 801d79e:	687b      	ldr	r3, [r7, #4]
 801d7a0:	601a      	str	r2, [r3, #0]
 801d7a2:	687b      	ldr	r3, [r7, #4]
 801d7a4:	4618      	mov	r0, r3
 801d7a6:	f7fe fc93 	bl	801c0d0 <_ZN16MockExpectedCallD1Ev>
 801d7aa:	687b      	ldr	r3, [r7, #4]
 801d7ac:	4618      	mov	r0, r3
 801d7ae:	3708      	adds	r7, #8
 801d7b0:	46bd      	mov	sp, r7
 801d7b2:	bd80      	pop	{r7, pc}
 801d7b4:	0802b578 	.word	0x0802b578

0801d7b8 <_ZN23MockIgnoredExpectedCallD0Ev>:
 801d7b8:	b580      	push	{r7, lr}
 801d7ba:	b082      	sub	sp, #8
 801d7bc:	af00      	add	r7, sp, #0
 801d7be:	6078      	str	r0, [r7, #4]
 801d7c0:	6878      	ldr	r0, [r7, #4]
 801d7c2:	f7ff ffe7 	bl	801d794 <_ZN23MockIgnoredExpectedCallD1Ev>
 801d7c6:	2104      	movs	r1, #4
 801d7c8:	6878      	ldr	r0, [r7, #4]
 801d7ca:	f7ee fc5d 	bl	800c088 <_ZdlPvj>
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	4618      	mov	r0, r3
 801d7d2:	3708      	adds	r7, #8
 801d7d4:	46bd      	mov	sp, r7
 801d7d6:	bd80      	pop	{r7, pc}

0801d7d8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 801d7d8:	b580      	push	{r7, lr}
 801d7da:	b082      	sub	sp, #8
 801d7dc:	af00      	add	r7, sp, #0
 801d7de:	6078      	str	r0, [r7, #4]
 801d7e0:	4a05      	ldr	r2, [pc, #20]	; (801d7f8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 801d7e2:	687b      	ldr	r3, [r7, #4]
 801d7e4:	601a      	str	r2, [r3, #0]
 801d7e6:	687b      	ldr	r3, [r7, #4]
 801d7e8:	4618      	mov	r0, r3
 801d7ea:	f001 fd4b 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 801d7ee:	687b      	ldr	r3, [r7, #4]
 801d7f0:	4618      	mov	r0, r3
 801d7f2:	3708      	adds	r7, #8
 801d7f4:	46bd      	mov	sp, r7
 801d7f6:	bd80      	pop	{r7, pc}
 801d7f8:	0802b718 	.word	0x0802b718

0801d7fc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 801d7fc:	b580      	push	{r7, lr}
 801d7fe:	b082      	sub	sp, #8
 801d800:	af00      	add	r7, sp, #0
 801d802:	6078      	str	r0, [r7, #4]
 801d804:	6878      	ldr	r0, [r7, #4]
 801d806:	f7ff ffe7 	bl	801d7d8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 801d80a:	2138      	movs	r1, #56	; 0x38
 801d80c:	6878      	ldr	r0, [r7, #4]
 801d80e:	f7ee fc3b 	bl	800c088 <_ZdlPvj>
 801d812:	687b      	ldr	r3, [r7, #4]
 801d814:	4618      	mov	r0, r3
 801d816:	3708      	adds	r7, #8
 801d818:	46bd      	mov	sp, r7
 801d81a:	bd80      	pop	{r7, pc}

0801d81c <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 801d81c:	b480      	push	{r7}
 801d81e:	b083      	sub	sp, #12
 801d820:	af00      	add	r7, sp, #0
 801d822:	6078      	str	r0, [r7, #4]
 801d824:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 801d826:	687b      	ldr	r3, [r7, #4]
 801d828:	683a      	ldr	r2, [r7, #0]
 801d82a:	601a      	str	r2, [r3, #0]
 801d82c:	687b      	ldr	r3, [r7, #4]
 801d82e:	2200      	movs	r2, #0
 801d830:	605a      	str	r2, [r3, #4]
 801d832:	687b      	ldr	r3, [r7, #4]
 801d834:	4618      	mov	r0, r3
 801d836:	370c      	adds	r7, #12
 801d838:	46bd      	mov	sp, r7
 801d83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d83e:	4770      	bx	lr

0801d840 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 801d840:	b480      	push	{r7}
 801d842:	b083      	sub	sp, #12
 801d844:	af00      	add	r7, sp, #0
 801d846:	6078      	str	r0, [r7, #4]
 801d848:	4a06      	ldr	r2, [pc, #24]	; (801d864 <_ZN21MockExpectedCallsListC1Ev+0x24>)
 801d84a:	687b      	ldr	r3, [r7, #4]
 801d84c:	601a      	str	r2, [r3, #0]
 801d84e:	687b      	ldr	r3, [r7, #4]
 801d850:	2200      	movs	r2, #0
 801d852:	605a      	str	r2, [r3, #4]
{
}
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	4618      	mov	r0, r3
 801d858:	370c      	adds	r7, #12
 801d85a:	46bd      	mov	sp, r7
 801d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d860:	4770      	bx	lr
 801d862:	bf00      	nop
 801d864:	0802b86c 	.word	0x0802b86c

0801d868 <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 801d868:	b580      	push	{r7, lr}
 801d86a:	b084      	sub	sp, #16
 801d86c:	af00      	add	r7, sp, #0
 801d86e:	6078      	str	r0, [r7, #4]
 801d870:	4a0d      	ldr	r2, [pc, #52]	; (801d8a8 <_ZN21MockExpectedCallsListD1Ev+0x40>)
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 801d876:	687b      	ldr	r3, [r7, #4]
 801d878:	685b      	ldr	r3, [r3, #4]
 801d87a:	2b00      	cmp	r3, #0
 801d87c:	d00f      	beq.n	801d89e <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	685b      	ldr	r3, [r3, #4]
 801d882:	685b      	ldr	r3, [r3, #4]
 801d884:	60fb      	str	r3, [r7, #12]
        delete head_;
 801d886:	687b      	ldr	r3, [r7, #4]
 801d888:	685b      	ldr	r3, [r3, #4]
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d003      	beq.n	801d896 <_ZN21MockExpectedCallsListD1Ev+0x2e>
 801d88e:	2108      	movs	r1, #8
 801d890:	4618      	mov	r0, r3
 801d892:	f7ee fbf9 	bl	800c088 <_ZdlPvj>
        head_ = next;
 801d896:	687b      	ldr	r3, [r7, #4]
 801d898:	68fa      	ldr	r2, [r7, #12]
 801d89a:	605a      	str	r2, [r3, #4]
    while (head_) {
 801d89c:	e7eb      	b.n	801d876 <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 801d89e:	687b      	ldr	r3, [r7, #4]
 801d8a0:	4618      	mov	r0, r3
 801d8a2:	3710      	adds	r7, #16
 801d8a4:	46bd      	mov	sp, r7
 801d8a6:	bd80      	pop	{r7, pc}
 801d8a8:	0802b86c 	.word	0x0802b86c

0801d8ac <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 801d8ac:	b580      	push	{r7, lr}
 801d8ae:	b082      	sub	sp, #8
 801d8b0:	af00      	add	r7, sp, #0
 801d8b2:	6078      	str	r0, [r7, #4]
}
 801d8b4:	6878      	ldr	r0, [r7, #4]
 801d8b6:	f7ff ffd7 	bl	801d868 <_ZN21MockExpectedCallsListD1Ev>
 801d8ba:	2108      	movs	r1, #8
 801d8bc:	6878      	ldr	r0, [r7, #4]
 801d8be:	f7ee fbe3 	bl	800c088 <_ZdlPvj>
 801d8c2:	687b      	ldr	r3, [r7, #4]
 801d8c4:	4618      	mov	r0, r3
 801d8c6:	3708      	adds	r7, #8
 801d8c8:	46bd      	mov	sp, r7
 801d8ca:	bd80      	pop	{r7, pc}

0801d8cc <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 801d8cc:	b580      	push	{r7, lr}
 801d8ce:	b084      	sub	sp, #16
 801d8d0:	af00      	add	r7, sp, #0
 801d8d2:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d8d4:	687b      	ldr	r3, [r7, #4]
 801d8d6:	685b      	ldr	r3, [r3, #4]
 801d8d8:	60fb      	str	r3, [r7, #12]
 801d8da:	68fb      	ldr	r3, [r7, #12]
 801d8dc:	2b00      	cmp	r3, #0
 801d8de:	d011      	beq.n	801d904 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 801d8e0:	68fb      	ldr	r3, [r7, #12]
 801d8e2:	681a      	ldr	r2, [r3, #0]
 801d8e4:	68fb      	ldr	r3, [r7, #12]
 801d8e6:	681b      	ldr	r3, [r3, #0]
 801d8e8:	681b      	ldr	r3, [r3, #0]
 801d8ea:	33d4      	adds	r3, #212	; 0xd4
 801d8ec:	681b      	ldr	r3, [r3, #0]
 801d8ee:	4610      	mov	r0, r2
 801d8f0:	4798      	blx	r3
 801d8f2:	4603      	mov	r3, r0
 801d8f4:	2b00      	cmp	r3, #0
 801d8f6:	d001      	beq.n	801d8fc <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 801d8f8:	2301      	movs	r3, #1
 801d8fa:	e004      	b.n	801d906 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d8fc:	68fb      	ldr	r3, [r7, #12]
 801d8fe:	685b      	ldr	r3, [r3, #4]
 801d900:	60fb      	str	r3, [r7, #12]
 801d902:	e7ea      	b.n	801d8da <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 801d904:	2300      	movs	r3, #0
}
 801d906:	4618      	mov	r0, r3
 801d908:	3710      	adds	r7, #16
 801d90a:	46bd      	mov	sp, r7
 801d90c:	bd80      	pop	{r7, pc}

0801d90e <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 801d90e:	b480      	push	{r7}
 801d910:	b085      	sub	sp, #20
 801d912:	af00      	add	r7, sp, #0
 801d914:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801d916:	2300      	movs	r3, #0
 801d918:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d91a:	687b      	ldr	r3, [r7, #4]
 801d91c:	685b      	ldr	r3, [r3, #4]
 801d91e:	60bb      	str	r3, [r7, #8]
 801d920:	68bb      	ldr	r3, [r7, #8]
 801d922:	2b00      	cmp	r3, #0
 801d924:	d006      	beq.n	801d934 <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 801d926:	68fb      	ldr	r3, [r7, #12]
 801d928:	3301      	adds	r3, #1
 801d92a:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d92c:	68bb      	ldr	r3, [r7, #8]
 801d92e:	685b      	ldr	r3, [r3, #4]
 801d930:	60bb      	str	r3, [r7, #8]
 801d932:	e7f5      	b.n	801d920 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 801d934:	68fb      	ldr	r3, [r7, #12]
}
 801d936:	4618      	mov	r0, r3
 801d938:	3714      	adds	r7, #20
 801d93a:	46bd      	mov	sp, r7
 801d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d940:	4770      	bx	lr

0801d942 <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 801d942:	b480      	push	{r7}
 801d944:	b083      	sub	sp, #12
 801d946:	af00      	add	r7, sp, #0
 801d948:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 801d94a:	687b      	ldr	r3, [r7, #4]
 801d94c:	685b      	ldr	r3, [r3, #4]
 801d94e:	2b00      	cmp	r3, #0
 801d950:	bf0c      	ite	eq
 801d952:	2301      	moveq	r3, #1
 801d954:	2300      	movne	r3, #0
 801d956:	b2db      	uxtb	r3, r3
}
 801d958:	4618      	mov	r0, r3
 801d95a:	370c      	adds	r7, #12
 801d95c:	46bd      	mov	sp, r7
 801d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d962:	4770      	bx	lr

0801d964 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 801d964:	b580      	push	{r7, lr}
 801d966:	b084      	sub	sp, #16
 801d968:	af00      	add	r7, sp, #0
 801d96a:	6078      	str	r0, [r7, #4]
 801d96c:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 801d96e:	2300      	movs	r3, #0
 801d970:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d972:	687b      	ldr	r3, [r7, #4]
 801d974:	685b      	ldr	r3, [r3, #4]
 801d976:	60bb      	str	r3, [r7, #8]
 801d978:	68bb      	ldr	r3, [r7, #8]
 801d97a:	2b00      	cmp	r3, #0
 801d97c:	d01d      	beq.n	801d9ba <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 801d97e:	68bb      	ldr	r3, [r7, #8]
 801d980:	681a      	ldr	r2, [r3, #0]
 801d982:	68bb      	ldr	r3, [r7, #8]
 801d984:	681b      	ldr	r3, [r3, #0]
 801d986:	681b      	ldr	r3, [r3, #0]
 801d988:	33b8      	adds	r3, #184	; 0xb8
 801d98a:	681b      	ldr	r3, [r3, #0]
 801d98c:	6839      	ldr	r1, [r7, #0]
 801d98e:	4610      	mov	r0, r2
 801d990:	4798      	blx	r3
 801d992:	4603      	mov	r3, r0
 801d994:	2b00      	cmp	r3, #0
 801d996:	d00c      	beq.n	801d9b2 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 801d998:	68bb      	ldr	r3, [r7, #8]
 801d99a:	681a      	ldr	r2, [r3, #0]
 801d99c:	68bb      	ldr	r3, [r7, #8]
 801d99e:	681b      	ldr	r3, [r3, #0]
 801d9a0:	681b      	ldr	r3, [r3, #0]
 801d9a2:	33f8      	adds	r3, #248	; 0xf8
 801d9a4:	681b      	ldr	r3, [r3, #0]
 801d9a6:	4610      	mov	r0, r2
 801d9a8:	4798      	blx	r3
 801d9aa:	4602      	mov	r2, r0
 801d9ac:	68fb      	ldr	r3, [r7, #12]
 801d9ae:	4413      	add	r3, r2
 801d9b0:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d9b2:	68bb      	ldr	r3, [r7, #8]
 801d9b4:	685b      	ldr	r3, [r3, #4]
 801d9b6:	60bb      	str	r3, [r7, #8]
 801d9b8:	e7de      	b.n	801d978 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 801d9ba:	68fb      	ldr	r3, [r7, #12]
}
 801d9bc:	4618      	mov	r0, r3
 801d9be:	3710      	adds	r7, #16
 801d9c0:	46bd      	mov	sp, r7
 801d9c2:	bd80      	pop	{r7, pc}

0801d9c4 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 801d9c4:	b580      	push	{r7, lr}
 801d9c6:	b084      	sub	sp, #16
 801d9c8:	af00      	add	r7, sp, #0
 801d9ca:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801d9cc:	2300      	movs	r3, #0
 801d9ce:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d9d0:	687b      	ldr	r3, [r7, #4]
 801d9d2:	685b      	ldr	r3, [r3, #4]
 801d9d4:	60bb      	str	r3, [r7, #8]
 801d9d6:	68bb      	ldr	r3, [r7, #8]
 801d9d8:	2b00      	cmp	r3, #0
 801d9da:	d015      	beq.n	801da08 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 801d9dc:	68bb      	ldr	r3, [r7, #8]
 801d9de:	681a      	ldr	r2, [r3, #0]
 801d9e0:	68bb      	ldr	r3, [r7, #8]
 801d9e2:	681b      	ldr	r3, [r3, #0]
 801d9e4:	681b      	ldr	r3, [r3, #0]
 801d9e6:	33c0      	adds	r3, #192	; 0xc0
 801d9e8:	681b      	ldr	r3, [r3, #0]
 801d9ea:	4610      	mov	r0, r2
 801d9ec:	4798      	blx	r3
 801d9ee:	4603      	mov	r3, r0
 801d9f0:	f083 0301 	eor.w	r3, r3, #1
 801d9f4:	b2db      	uxtb	r3, r3
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	d002      	beq.n	801da00 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 801d9fa:	68fb      	ldr	r3, [r7, #12]
 801d9fc:	3301      	adds	r3, #1
 801d9fe:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801da00:	68bb      	ldr	r3, [r7, #8]
 801da02:	685b      	ldr	r3, [r3, #4]
 801da04:	60bb      	str	r3, [r7, #8]
 801da06:	e7e6      	b.n	801d9d6 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 801da08:	68fb      	ldr	r3, [r7, #12]
}
 801da0a:	4618      	mov	r0, r3
 801da0c:	3710      	adds	r7, #16
 801da0e:	46bd      	mov	sp, r7
 801da10:	bd80      	pop	{r7, pc}

0801da12 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 801da12:	b580      	push	{r7, lr}
 801da14:	b084      	sub	sp, #16
 801da16:	af00      	add	r7, sp, #0
 801da18:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801da1a:	687b      	ldr	r3, [r7, #4]
 801da1c:	685b      	ldr	r3, [r3, #4]
 801da1e:	60fb      	str	r3, [r7, #12]
 801da20:	68fb      	ldr	r3, [r7, #12]
 801da22:	2b00      	cmp	r3, #0
 801da24:	d011      	beq.n	801da4a <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801da26:	68fb      	ldr	r3, [r7, #12]
 801da28:	681a      	ldr	r2, [r3, #0]
 801da2a:	68fb      	ldr	r3, [r7, #12]
 801da2c:	681b      	ldr	r3, [r3, #0]
 801da2e:	681b      	ldr	r3, [r3, #0]
 801da30:	33c8      	adds	r3, #200	; 0xc8
 801da32:	681b      	ldr	r3, [r3, #0]
 801da34:	4610      	mov	r0, r2
 801da36:	4798      	blx	r3
 801da38:	4603      	mov	r3, r0
 801da3a:	2b00      	cmp	r3, #0
 801da3c:	d001      	beq.n	801da42 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 801da3e:	2301      	movs	r3, #1
 801da40:	e004      	b.n	801da4c <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801da42:	68fb      	ldr	r3, [r7, #12]
 801da44:	685b      	ldr	r3, [r3, #4]
 801da46:	60fb      	str	r3, [r7, #12]
 801da48:	e7ea      	b.n	801da20 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801da4a:	2300      	movs	r3, #0
}
 801da4c:	4618      	mov	r0, r3
 801da4e:	3710      	adds	r7, #16
 801da50:	46bd      	mov	sp, r7
 801da52:	bd80      	pop	{r7, pc}

0801da54 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 801da54:	b580      	push	{r7, lr}
 801da56:	b084      	sub	sp, #16
 801da58:	af00      	add	r7, sp, #0
 801da5a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	685b      	ldr	r3, [r3, #4]
 801da60:	60fb      	str	r3, [r7, #12]
 801da62:	68fb      	ldr	r3, [r7, #12]
 801da64:	2b00      	cmp	r3, #0
 801da66:	d014      	beq.n	801da92 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801da68:	68fb      	ldr	r3, [r7, #12]
 801da6a:	681a      	ldr	r2, [r3, #0]
 801da6c:	68fb      	ldr	r3, [r7, #12]
 801da6e:	681b      	ldr	r3, [r3, #0]
 801da70:	681b      	ldr	r3, [r3, #0]
 801da72:	33c0      	adds	r3, #192	; 0xc0
 801da74:	681b      	ldr	r3, [r3, #0]
 801da76:	4610      	mov	r0, r2
 801da78:	4798      	blx	r3
 801da7a:	4603      	mov	r3, r0
 801da7c:	f083 0301 	eor.w	r3, r3, #1
 801da80:	b2db      	uxtb	r3, r3
 801da82:	2b00      	cmp	r3, #0
 801da84:	d001      	beq.n	801da8a <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801da86:	2301      	movs	r3, #1
 801da88:	e004      	b.n	801da94 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801da8a:	68fb      	ldr	r3, [r7, #12]
 801da8c:	685b      	ldr	r3, [r3, #4]
 801da8e:	60fb      	str	r3, [r7, #12]
 801da90:	e7e7      	b.n	801da62 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801da92:	2300      	movs	r3, #0
}
 801da94:	4618      	mov	r0, r3
 801da96:	3710      	adds	r7, #16
 801da98:	46bd      	mov	sp, r7
 801da9a:	bd80      	pop	{r7, pc}

0801da9c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 801da9c:	b580      	push	{r7, lr}
 801da9e:	b084      	sub	sp, #16
 801daa0:	af00      	add	r7, sp, #0
 801daa2:	6078      	str	r0, [r7, #4]
 801daa4:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801daa6:	687b      	ldr	r3, [r7, #4]
 801daa8:	685b      	ldr	r3, [r3, #4]
 801daaa:	60fb      	str	r3, [r7, #12]
 801daac:	68fb      	ldr	r3, [r7, #12]
 801daae:	2b00      	cmp	r3, #0
 801dab0:	d012      	beq.n	801dad8 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801dab2:	68fb      	ldr	r3, [r7, #12]
 801dab4:	681a      	ldr	r2, [r3, #0]
 801dab6:	68fb      	ldr	r3, [r7, #12]
 801dab8:	681b      	ldr	r3, [r3, #0]
 801daba:	681b      	ldr	r3, [r3, #0]
 801dabc:	33b8      	adds	r3, #184	; 0xb8
 801dabe:	681b      	ldr	r3, [r3, #0]
 801dac0:	6839      	ldr	r1, [r7, #0]
 801dac2:	4610      	mov	r0, r2
 801dac4:	4798      	blx	r3
 801dac6:	4603      	mov	r3, r0
 801dac8:	2b00      	cmp	r3, #0
 801daca:	d001      	beq.n	801dad0 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 801dacc:	2301      	movs	r3, #1
 801dace:	e004      	b.n	801dada <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801dad0:	68fb      	ldr	r3, [r7, #12]
 801dad2:	685b      	ldr	r3, [r3, #4]
 801dad4:	60fb      	str	r3, [r7, #12]
 801dad6:	e7e9      	b.n	801daac <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801dad8:	2300      	movs	r3, #0
}
 801dada:	4618      	mov	r0, r3
 801dadc:	3710      	adds	r7, #16
 801dade:	46bd      	mov	sp, r7
 801dae0:	bd80      	pop	{r7, pc}
	...

0801dae4 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 801dae4:	b590      	push	{r4, r7, lr}
 801dae6:	b085      	sub	sp, #20
 801dae8:	af00      	add	r7, sp, #0
 801daea:	6078      	str	r0, [r7, #4]
 801daec:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 801daee:	2273      	movs	r2, #115	; 0x73
 801daf0:	4911      	ldr	r1, [pc, #68]	; (801db38 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 801daf2:	2008      	movs	r0, #8
 801daf4:	f7ee fab4 	bl	800c060 <_ZnwjPKci>
 801daf8:	4604      	mov	r4, r0
 801dafa:	6839      	ldr	r1, [r7, #0]
 801dafc:	4620      	mov	r0, r4
 801dafe:	f7ff fe8d 	bl	801d81c <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 801db02:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 801db04:	687b      	ldr	r3, [r7, #4]
 801db06:	685b      	ldr	r3, [r3, #4]
 801db08:	2b00      	cmp	r3, #0
 801db0a:	d103      	bne.n	801db14 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 801db0c:	687b      	ldr	r3, [r7, #4]
 801db0e:	68ba      	ldr	r2, [r7, #8]
 801db10:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 801db12:	e00d      	b.n	801db30 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	685b      	ldr	r3, [r3, #4]
 801db18:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 801db1a:	68fb      	ldr	r3, [r7, #12]
 801db1c:	685b      	ldr	r3, [r3, #4]
 801db1e:	2b00      	cmp	r3, #0
 801db20:	d003      	beq.n	801db2a <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801db22:	68fb      	ldr	r3, [r7, #12]
 801db24:	685b      	ldr	r3, [r3, #4]
 801db26:	60fb      	str	r3, [r7, #12]
 801db28:	e7f7      	b.n	801db1a <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 801db2a:	68fb      	ldr	r3, [r7, #12]
 801db2c:	68ba      	ldr	r2, [r7, #8]
 801db2e:	605a      	str	r2, [r3, #4]
}
 801db30:	bf00      	nop
 801db32:	3714      	adds	r7, #20
 801db34:	46bd      	mov	sp, r7
 801db36:	bd90      	pop	{r4, r7, pc}
 801db38:	0802841c 	.word	0x0802841c

0801db3c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 801db3c:	b580      	push	{r7, lr}
 801db3e:	b084      	sub	sp, #16
 801db40:	af00      	add	r7, sp, #0
 801db42:	6078      	str	r0, [r7, #4]
 801db44:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801db46:	683b      	ldr	r3, [r7, #0]
 801db48:	685b      	ldr	r3, [r3, #4]
 801db4a:	60fb      	str	r3, [r7, #12]
 801db4c:	68fb      	ldr	r3, [r7, #12]
 801db4e:	2b00      	cmp	r3, #0
 801db50:	d018      	beq.n	801db84 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801db52:	68fb      	ldr	r3, [r7, #12]
 801db54:	681a      	ldr	r2, [r3, #0]
 801db56:	68fb      	ldr	r3, [r7, #12]
 801db58:	681b      	ldr	r3, [r3, #0]
 801db5a:	681b      	ldr	r3, [r3, #0]
 801db5c:	33c4      	adds	r3, #196	; 0xc4
 801db5e:	681b      	ldr	r3, [r3, #0]
 801db60:	4610      	mov	r0, r2
 801db62:	4798      	blx	r3
 801db64:	4603      	mov	r3, r0
 801db66:	2b00      	cmp	r3, #0
 801db68:	d008      	beq.n	801db7c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801db6a:	687b      	ldr	r3, [r7, #4]
 801db6c:	681b      	ldr	r3, [r3, #0]
 801db6e:	3330      	adds	r3, #48	; 0x30
 801db70:	681b      	ldr	r3, [r3, #0]
 801db72:	68fa      	ldr	r2, [r7, #12]
 801db74:	6812      	ldr	r2, [r2, #0]
 801db76:	4611      	mov	r1, r2
 801db78:	6878      	ldr	r0, [r7, #4]
 801db7a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801db7c:	68fb      	ldr	r3, [r7, #12]
 801db7e:	685b      	ldr	r3, [r3, #4]
 801db80:	60fb      	str	r3, [r7, #12]
 801db82:	e7e3      	b.n	801db4c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801db84:	bf00      	nop
 801db86:	3710      	adds	r7, #16
 801db88:	46bd      	mov	sp, r7
 801db8a:	bd80      	pop	{r7, pc}

0801db8c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 801db8c:	b580      	push	{r7, lr}
 801db8e:	b086      	sub	sp, #24
 801db90:	af00      	add	r7, sp, #0
 801db92:	60f8      	str	r0, [r7, #12]
 801db94:	60b9      	str	r1, [r7, #8]
 801db96:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801db98:	687b      	ldr	r3, [r7, #4]
 801db9a:	685b      	ldr	r3, [r3, #4]
 801db9c:	617b      	str	r3, [r7, #20]
 801db9e:	697b      	ldr	r3, [r7, #20]
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	d019      	beq.n	801dbd8 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801dba4:	697b      	ldr	r3, [r7, #20]
 801dba6:	681a      	ldr	r2, [r3, #0]
 801dba8:	697b      	ldr	r3, [r7, #20]
 801dbaa:	681b      	ldr	r3, [r3, #0]
 801dbac:	681b      	ldr	r3, [r3, #0]
 801dbae:	33b8      	adds	r3, #184	; 0xb8
 801dbb0:	681b      	ldr	r3, [r3, #0]
 801dbb2:	68b9      	ldr	r1, [r7, #8]
 801dbb4:	4610      	mov	r0, r2
 801dbb6:	4798      	blx	r3
 801dbb8:	4603      	mov	r3, r0
 801dbba:	2b00      	cmp	r3, #0
 801dbbc:	d008      	beq.n	801dbd0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 801dbbe:	68fb      	ldr	r3, [r7, #12]
 801dbc0:	681b      	ldr	r3, [r3, #0]
 801dbc2:	3330      	adds	r3, #48	; 0x30
 801dbc4:	681b      	ldr	r3, [r3, #0]
 801dbc6:	697a      	ldr	r2, [r7, #20]
 801dbc8:	6812      	ldr	r2, [r2, #0]
 801dbca:	4611      	mov	r1, r2
 801dbcc:	68f8      	ldr	r0, [r7, #12]
 801dbce:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801dbd0:	697b      	ldr	r3, [r7, #20]
 801dbd2:	685b      	ldr	r3, [r3, #4]
 801dbd4:	617b      	str	r3, [r7, #20]
 801dbd6:	e7e2      	b.n	801db9e <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801dbd8:	bf00      	nop
 801dbda:	3718      	adds	r7, #24
 801dbdc:	46bd      	mov	sp, r7
 801dbde:	bd80      	pop	{r7, pc}

0801dbe0 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 801dbe0:	b580      	push	{r7, lr}
 801dbe2:	b084      	sub	sp, #16
 801dbe4:	af00      	add	r7, sp, #0
 801dbe6:	6078      	str	r0, [r7, #4]
 801dbe8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801dbea:	683b      	ldr	r3, [r7, #0]
 801dbec:	685b      	ldr	r3, [r3, #4]
 801dbee:	60fb      	str	r3, [r7, #12]
 801dbf0:	68fb      	ldr	r3, [r7, #12]
 801dbf2:	2b00      	cmp	r3, #0
 801dbf4:	d00c      	beq.n	801dc10 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801dbf6:	687b      	ldr	r3, [r7, #4]
 801dbf8:	681b      	ldr	r3, [r3, #0]
 801dbfa:	3330      	adds	r3, #48	; 0x30
 801dbfc:	681b      	ldr	r3, [r3, #0]
 801dbfe:	68fa      	ldr	r2, [r7, #12]
 801dc00:	6812      	ldr	r2, [r2, #0]
 801dc02:	4611      	mov	r1, r2
 801dc04:	6878      	ldr	r0, [r7, #4]
 801dc06:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801dc08:	68fb      	ldr	r3, [r7, #12]
 801dc0a:	685b      	ldr	r3, [r3, #4]
 801dc0c:	60fb      	str	r3, [r7, #12]
 801dc0e:	e7ef      	b.n	801dbf0 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 801dc10:	bf00      	nop
 801dc12:	3710      	adds	r7, #16
 801dc14:	46bd      	mov	sp, r7
 801dc16:	bd80      	pop	{r7, pc}

0801dc18 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801dc18:	b580      	push	{r7, lr}
 801dc1a:	b084      	sub	sp, #16
 801dc1c:	af00      	add	r7, sp, #0
 801dc1e:	6078      	str	r0, [r7, #4]
 801dc20:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801dc22:	687b      	ldr	r3, [r7, #4]
 801dc24:	685b      	ldr	r3, [r3, #4]
 801dc26:	60fb      	str	r3, [r7, #12]
 801dc28:	68fb      	ldr	r3, [r7, #12]
 801dc2a:	2b00      	cmp	r3, #0
 801dc2c:	d016      	beq.n	801dc5c <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 801dc2e:	68fb      	ldr	r3, [r7, #12]
 801dc30:	681a      	ldr	r2, [r3, #0]
 801dc32:	68fb      	ldr	r3, [r7, #12]
 801dc34:	681b      	ldr	r3, [r3, #0]
 801dc36:	681b      	ldr	r3, [r3, #0]
 801dc38:	33b8      	adds	r3, #184	; 0xb8
 801dc3a:	681b      	ldr	r3, [r3, #0]
 801dc3c:	6839      	ldr	r1, [r7, #0]
 801dc3e:	4610      	mov	r0, r2
 801dc40:	4798      	blx	r3
 801dc42:	4603      	mov	r3, r0
 801dc44:	f083 0301 	eor.w	r3, r3, #1
 801dc48:	b2db      	uxtb	r3, r3
 801dc4a:	2b00      	cmp	r3, #0
 801dc4c:	d002      	beq.n	801dc54 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801dc4e:	68fb      	ldr	r3, [r7, #12]
 801dc50:	2200      	movs	r2, #0
 801dc52:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801dc54:	68fb      	ldr	r3, [r7, #12]
 801dc56:	685b      	ldr	r3, [r3, #4]
 801dc58:	60fb      	str	r3, [r7, #12]
 801dc5a:	e7e5      	b.n	801dc28 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 801dc5c:	687b      	ldr	r3, [r7, #4]
 801dc5e:	681b      	ldr	r3, [r3, #0]
 801dc60:	3388      	adds	r3, #136	; 0x88
 801dc62:	681b      	ldr	r3, [r3, #0]
 801dc64:	6878      	ldr	r0, [r7, #4]
 801dc66:	4798      	blx	r3
}
 801dc68:	bf00      	nop
 801dc6a:	3710      	adds	r7, #16
 801dc6c:	46bd      	mov	sp, r7
 801dc6e:	bd80      	pop	{r7, pc}

0801dc70 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 801dc70:	b580      	push	{r7, lr}
 801dc72:	b084      	sub	sp, #16
 801dc74:	af00      	add	r7, sp, #0
 801dc76:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801dc78:	687b      	ldr	r3, [r7, #4]
 801dc7a:	685b      	ldr	r3, [r3, #4]
 801dc7c:	60fb      	str	r3, [r7, #12]
 801dc7e:	68fb      	ldr	r3, [r7, #12]
 801dc80:	2b00      	cmp	r3, #0
 801dc82:	d015      	beq.n	801dcb0 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801dc84:	68fb      	ldr	r3, [r7, #12]
 801dc86:	681a      	ldr	r2, [r3, #0]
 801dc88:	68fb      	ldr	r3, [r7, #12]
 801dc8a:	681b      	ldr	r3, [r3, #0]
 801dc8c:	681b      	ldr	r3, [r3, #0]
 801dc8e:	33d4      	adds	r3, #212	; 0xd4
 801dc90:	681b      	ldr	r3, [r3, #0]
 801dc92:	4610      	mov	r0, r2
 801dc94:	4798      	blx	r3
 801dc96:	4603      	mov	r3, r0
 801dc98:	f083 0301 	eor.w	r3, r3, #1
 801dc9c:	b2db      	uxtb	r3, r3
 801dc9e:	2b00      	cmp	r3, #0
 801dca0:	d002      	beq.n	801dca8 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801dca2:	68fb      	ldr	r3, [r7, #12]
 801dca4:	2200      	movs	r2, #0
 801dca6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801dca8:	68fb      	ldr	r3, [r7, #12]
 801dcaa:	685b      	ldr	r3, [r3, #4]
 801dcac:	60fb      	str	r3, [r7, #12]
 801dcae:	e7e6      	b.n	801dc7e <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	681b      	ldr	r3, [r3, #0]
 801dcb4:	3388      	adds	r3, #136	; 0x88
 801dcb6:	681b      	ldr	r3, [r3, #0]
 801dcb8:	6878      	ldr	r0, [r7, #4]
 801dcba:	4798      	blx	r3
}
 801dcbc:	bf00      	nop
 801dcbe:	3710      	adds	r7, #16
 801dcc0:	46bd      	mov	sp, r7
 801dcc2:	bd80      	pop	{r7, pc}

0801dcc4 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 801dcc4:	b580      	push	{r7, lr}
 801dcc6:	b084      	sub	sp, #16
 801dcc8:	af00      	add	r7, sp, #0
 801dcca:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801dccc:	687b      	ldr	r3, [r7, #4]
 801dcce:	685b      	ldr	r3, [r3, #4]
 801dcd0:	60fb      	str	r3, [r7, #12]
 801dcd2:	68fb      	ldr	r3, [r7, #12]
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	d01b      	beq.n	801dd10 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801dcd8:	68fb      	ldr	r3, [r7, #12]
 801dcda:	681a      	ldr	r2, [r3, #0]
 801dcdc:	68fb      	ldr	r3, [r7, #12]
 801dcde:	681b      	ldr	r3, [r3, #0]
 801dce0:	681b      	ldr	r3, [r3, #0]
 801dce2:	33c8      	adds	r3, #200	; 0xc8
 801dce4:	681b      	ldr	r3, [r3, #0]
 801dce6:	4610      	mov	r0, r2
 801dce8:	4798      	blx	r3
 801dcea:	4603      	mov	r3, r0
 801dcec:	2b00      	cmp	r3, #0
 801dcee:	d00b      	beq.n	801dd08 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 801dcf0:	68fb      	ldr	r3, [r7, #12]
 801dcf2:	681a      	ldr	r2, [r3, #0]
 801dcf4:	68fb      	ldr	r3, [r7, #12]
 801dcf6:	681b      	ldr	r3, [r3, #0]
 801dcf8:	681b      	ldr	r3, [r3, #0]
 801dcfa:	33ec      	adds	r3, #236	; 0xec
 801dcfc:	681b      	ldr	r3, [r3, #0]
 801dcfe:	4610      	mov	r0, r2
 801dd00:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 801dd02:	68fb      	ldr	r3, [r7, #12]
 801dd04:	2200      	movs	r2, #0
 801dd06:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801dd08:	68fb      	ldr	r3, [r7, #12]
 801dd0a:	685b      	ldr	r3, [r3, #4]
 801dd0c:	60fb      	str	r3, [r7, #12]
 801dd0e:	e7e0      	b.n	801dcd2 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	681b      	ldr	r3, [r3, #0]
 801dd14:	3388      	adds	r3, #136	; 0x88
 801dd16:	681b      	ldr	r3, [r3, #0]
 801dd18:	6878      	ldr	r0, [r7, #4]
 801dd1a:	4798      	blx	r3
}
 801dd1c:	bf00      	nop
 801dd1e:	3710      	adds	r7, #16
 801dd20:	46bd      	mov	sp, r7
 801dd22:	bd80      	pop	{r7, pc}

0801dd24 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801dd24:	b580      	push	{r7, lr}
 801dd26:	b084      	sub	sp, #16
 801dd28:	af00      	add	r7, sp, #0
 801dd2a:	6078      	str	r0, [r7, #4]
 801dd2c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801dd2e:	687b      	ldr	r3, [r7, #4]
 801dd30:	685b      	ldr	r3, [r3, #4]
 801dd32:	60fb      	str	r3, [r7, #12]
 801dd34:	68fb      	ldr	r3, [r7, #12]
 801dd36:	2b00      	cmp	r3, #0
 801dd38:	d016      	beq.n	801dd68 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801dd3a:	68fb      	ldr	r3, [r7, #12]
 801dd3c:	681a      	ldr	r2, [r3, #0]
 801dd3e:	68fb      	ldr	r3, [r7, #12]
 801dd40:	681b      	ldr	r3, [r3, #0]
 801dd42:	681b      	ldr	r3, [r3, #0]
 801dd44:	33a8      	adds	r3, #168	; 0xa8
 801dd46:	681b      	ldr	r3, [r3, #0]
 801dd48:	6839      	ldr	r1, [r7, #0]
 801dd4a:	4610      	mov	r0, r2
 801dd4c:	4798      	blx	r3
 801dd4e:	4603      	mov	r3, r0
 801dd50:	f083 0301 	eor.w	r3, r3, #1
 801dd54:	b2db      	uxtb	r3, r3
 801dd56:	2b00      	cmp	r3, #0
 801dd58:	d002      	beq.n	801dd60 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801dd5a:	68fb      	ldr	r3, [r7, #12]
 801dd5c:	2200      	movs	r2, #0
 801dd5e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801dd60:	68fb      	ldr	r3, [r7, #12]
 801dd62:	685b      	ldr	r3, [r3, #4]
 801dd64:	60fb      	str	r3, [r7, #12]
 801dd66:	e7e5      	b.n	801dd34 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801dd68:	687b      	ldr	r3, [r7, #4]
 801dd6a:	681b      	ldr	r3, [r3, #0]
 801dd6c:	3388      	adds	r3, #136	; 0x88
 801dd6e:	681b      	ldr	r3, [r3, #0]
 801dd70:	6878      	ldr	r0, [r7, #4]
 801dd72:	4798      	blx	r3
}
 801dd74:	bf00      	nop
 801dd76:	3710      	adds	r7, #16
 801dd78:	46bd      	mov	sp, r7
 801dd7a:	bd80      	pop	{r7, pc}

0801dd7c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 801dd7c:	b580      	push	{r7, lr}
 801dd7e:	b084      	sub	sp, #16
 801dd80:	af00      	add	r7, sp, #0
 801dd82:	6078      	str	r0, [r7, #4]
 801dd84:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801dd86:	687b      	ldr	r3, [r7, #4]
 801dd88:	685b      	ldr	r3, [r3, #4]
 801dd8a:	60fb      	str	r3, [r7, #12]
 801dd8c:	68fb      	ldr	r3, [r7, #12]
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	d016      	beq.n	801ddc0 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801dd92:	68fb      	ldr	r3, [r7, #12]
 801dd94:	681a      	ldr	r2, [r3, #0]
 801dd96:	68fb      	ldr	r3, [r7, #12]
 801dd98:	681b      	ldr	r3, [r3, #0]
 801dd9a:	681b      	ldr	r3, [r3, #0]
 801dd9c:	33b0      	adds	r3, #176	; 0xb0
 801dd9e:	681b      	ldr	r3, [r3, #0]
 801dda0:	6839      	ldr	r1, [r7, #0]
 801dda2:	4610      	mov	r0, r2
 801dda4:	4798      	blx	r3
 801dda6:	4603      	mov	r3, r0
 801dda8:	f083 0301 	eor.w	r3, r3, #1
 801ddac:	b2db      	uxtb	r3, r3
 801ddae:	2b00      	cmp	r3, #0
 801ddb0:	d002      	beq.n	801ddb8 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801ddb2:	68fb      	ldr	r3, [r7, #12]
 801ddb4:	2200      	movs	r2, #0
 801ddb6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ddb8:	68fb      	ldr	r3, [r7, #12]
 801ddba:	685b      	ldr	r3, [r3, #4]
 801ddbc:	60fb      	str	r3, [r7, #12]
 801ddbe:	e7e5      	b.n	801dd8c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801ddc0:	687b      	ldr	r3, [r7, #4]
 801ddc2:	681b      	ldr	r3, [r3, #0]
 801ddc4:	3388      	adds	r3, #136	; 0x88
 801ddc6:	681b      	ldr	r3, [r3, #0]
 801ddc8:	6878      	ldr	r0, [r7, #4]
 801ddca:	4798      	blx	r3
}
 801ddcc:	bf00      	nop
 801ddce:	3710      	adds	r7, #16
 801ddd0:	46bd      	mov	sp, r7
 801ddd2:	bd80      	pop	{r7, pc}

0801ddd4 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 801ddd4:	b580      	push	{r7, lr}
 801ddd6:	b084      	sub	sp, #16
 801ddd8:	af00      	add	r7, sp, #0
 801ddda:	6078      	str	r0, [r7, #4]
 801dddc:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ddde:	687b      	ldr	r3, [r7, #4]
 801dde0:	685b      	ldr	r3, [r3, #4]
 801dde2:	60fb      	str	r3, [r7, #12]
 801dde4:	68fb      	ldr	r3, [r7, #12]
 801dde6:	2b00      	cmp	r3, #0
 801dde8:	d016      	beq.n	801de18 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801ddea:	68fb      	ldr	r3, [r7, #12]
 801ddec:	681a      	ldr	r2, [r3, #0]
 801ddee:	68fb      	ldr	r3, [r7, #12]
 801ddf0:	681b      	ldr	r3, [r3, #0]
 801ddf2:	681b      	ldr	r3, [r3, #0]
 801ddf4:	33ac      	adds	r3, #172	; 0xac
 801ddf6:	681b      	ldr	r3, [r3, #0]
 801ddf8:	6839      	ldr	r1, [r7, #0]
 801ddfa:	4610      	mov	r0, r2
 801ddfc:	4798      	blx	r3
 801ddfe:	4603      	mov	r3, r0
 801de00:	f083 0301 	eor.w	r3, r3, #1
 801de04:	b2db      	uxtb	r3, r3
 801de06:	2b00      	cmp	r3, #0
 801de08:	d002      	beq.n	801de10 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801de0a:	68fb      	ldr	r3, [r7, #12]
 801de0c:	2200      	movs	r2, #0
 801de0e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801de10:	68fb      	ldr	r3, [r7, #12]
 801de12:	685b      	ldr	r3, [r3, #4]
 801de14:	60fb      	str	r3, [r7, #12]
 801de16:	e7e5      	b.n	801dde4 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801de18:	687b      	ldr	r3, [r7, #4]
 801de1a:	681b      	ldr	r3, [r3, #0]
 801de1c:	3388      	adds	r3, #136	; 0x88
 801de1e:	681b      	ldr	r3, [r3, #0]
 801de20:	6878      	ldr	r0, [r7, #4]
 801de22:	4798      	blx	r3
}
 801de24:	bf00      	nop
 801de26:	3710      	adds	r7, #16
 801de28:	46bd      	mov	sp, r7
 801de2a:	bd80      	pop	{r7, pc}

0801de2c <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801de2c:	b580      	push	{r7, lr}
 801de2e:	b084      	sub	sp, #16
 801de30:	af00      	add	r7, sp, #0
 801de32:	6078      	str	r0, [r7, #4]
 801de34:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	685b      	ldr	r3, [r3, #4]
 801de3a:	60fb      	str	r3, [r7, #12]
 801de3c:	68fb      	ldr	r3, [r7, #12]
 801de3e:	2b00      	cmp	r3, #0
 801de40:	d016      	beq.n	801de70 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801de42:	68fb      	ldr	r3, [r7, #12]
 801de44:	681a      	ldr	r2, [r3, #0]
 801de46:	68fb      	ldr	r3, [r7, #12]
 801de48:	681b      	ldr	r3, [r3, #0]
 801de4a:	681b      	ldr	r3, [r3, #0]
 801de4c:	33b4      	adds	r3, #180	; 0xb4
 801de4e:	681b      	ldr	r3, [r3, #0]
 801de50:	6839      	ldr	r1, [r7, #0]
 801de52:	4610      	mov	r0, r2
 801de54:	4798      	blx	r3
 801de56:	4603      	mov	r3, r0
 801de58:	f083 0301 	eor.w	r3, r3, #1
 801de5c:	b2db      	uxtb	r3, r3
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d002      	beq.n	801de68 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801de62:	68fb      	ldr	r3, [r7, #12]
 801de64:	2200      	movs	r2, #0
 801de66:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801de68:	68fb      	ldr	r3, [r7, #12]
 801de6a:	685b      	ldr	r3, [r3, #4]
 801de6c:	60fb      	str	r3, [r7, #12]
 801de6e:	e7e5      	b.n	801de3c <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	681b      	ldr	r3, [r3, #0]
 801de74:	3388      	adds	r3, #136	; 0x88
 801de76:	681b      	ldr	r3, [r3, #0]
 801de78:	6878      	ldr	r0, [r7, #4]
 801de7a:	4798      	blx	r3
}
 801de7c:	bf00      	nop
 801de7e:	3710      	adds	r7, #16
 801de80:	46bd      	mov	sp, r7
 801de82:	bd80      	pop	{r7, pc}

0801de84 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801de84:	b580      	push	{r7, lr}
 801de86:	b084      	sub	sp, #16
 801de88:	af00      	add	r7, sp, #0
 801de8a:	6078      	str	r0, [r7, #4]
 801de8c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801de8e:	687b      	ldr	r3, [r7, #4]
 801de90:	685b      	ldr	r3, [r3, #4]
 801de92:	60fb      	str	r3, [r7, #12]
 801de94:	68fb      	ldr	r3, [r7, #12]
 801de96:	2b00      	cmp	r3, #0
 801de98:	d016      	beq.n	801dec8 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801de9a:	68fb      	ldr	r3, [r7, #12]
 801de9c:	681a      	ldr	r2, [r3, #0]
 801de9e:	68fb      	ldr	r3, [r7, #12]
 801dea0:	681b      	ldr	r3, [r3, #0]
 801dea2:	681b      	ldr	r3, [r3, #0]
 801dea4:	33bc      	adds	r3, #188	; 0xbc
 801dea6:	681b      	ldr	r3, [r3, #0]
 801dea8:	6839      	ldr	r1, [r7, #0]
 801deaa:	4610      	mov	r0, r2
 801deac:	4798      	blx	r3
 801deae:	4603      	mov	r3, r0
 801deb0:	f083 0301 	eor.w	r3, r3, #1
 801deb4:	b2db      	uxtb	r3, r3
 801deb6:	2b00      	cmp	r3, #0
 801deb8:	d002      	beq.n	801dec0 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801deba:	68fb      	ldr	r3, [r7, #12]
 801debc:	2200      	movs	r2, #0
 801debe:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801dec0:	68fb      	ldr	r3, [r7, #12]
 801dec2:	685b      	ldr	r3, [r3, #4]
 801dec4:	60fb      	str	r3, [r7, #12]
 801dec6:	e7e5      	b.n	801de94 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	681b      	ldr	r3, [r3, #0]
 801decc:	3388      	adds	r3, #136	; 0x88
 801dece:	681b      	ldr	r3, [r3, #0]
 801ded0:	6878      	ldr	r0, [r7, #4]
 801ded2:	4798      	blx	r3
}
 801ded4:	bf00      	nop
 801ded6:	3710      	adds	r7, #16
 801ded8:	46bd      	mov	sp, r7
 801deda:	bd80      	pop	{r7, pc}

0801dedc <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801dedc:	b580      	push	{r7, lr}
 801dede:	b084      	sub	sp, #16
 801dee0:	af00      	add	r7, sp, #0
 801dee2:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801dee4:	687b      	ldr	r3, [r7, #4]
 801dee6:	685b      	ldr	r3, [r3, #4]
 801dee8:	60fb      	str	r3, [r7, #12]
 801deea:	68fb      	ldr	r3, [r7, #12]
 801deec:	2b00      	cmp	r3, #0
 801deee:	d01d      	beq.n	801df2c <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801def0:	68fb      	ldr	r3, [r7, #12]
 801def2:	681a      	ldr	r2, [r3, #0]
 801def4:	68fb      	ldr	r3, [r7, #12]
 801def6:	681b      	ldr	r3, [r3, #0]
 801def8:	681b      	ldr	r3, [r3, #0]
 801defa:	33c8      	adds	r3, #200	; 0xc8
 801defc:	681b      	ldr	r3, [r3, #0]
 801defe:	4610      	mov	r0, r2
 801df00:	4798      	blx	r3
 801df02:	4603      	mov	r3, r0
 801df04:	2b00      	cmp	r3, #0
 801df06:	d00d      	beq.n	801df24 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801df08:	68fb      	ldr	r3, [r7, #12]
 801df0a:	681b      	ldr	r3, [r3, #0]
 801df0c:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801df0e:	68fb      	ldr	r3, [r7, #12]
 801df10:	2200      	movs	r2, #0
 801df12:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801df14:	687b      	ldr	r3, [r7, #4]
 801df16:	681b      	ldr	r3, [r3, #0]
 801df18:	3388      	adds	r3, #136	; 0x88
 801df1a:	681b      	ldr	r3, [r3, #0]
 801df1c:	6878      	ldr	r0, [r7, #4]
 801df1e:	4798      	blx	r3
            return matchingCall;
 801df20:	68bb      	ldr	r3, [r7, #8]
 801df22:	e004      	b.n	801df2e <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801df24:	68fb      	ldr	r3, [r7, #12]
 801df26:	685b      	ldr	r3, [r3, #4]
 801df28:	60fb      	str	r3, [r7, #12]
 801df2a:	e7de      	b.n	801deea <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801df2c:	2300      	movs	r3, #0
}
 801df2e:	4618      	mov	r0, r3
 801df30:	3710      	adds	r7, #16
 801df32:	46bd      	mov	sp, r7
 801df34:	bd80      	pop	{r7, pc}

0801df36 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801df36:	b580      	push	{r7, lr}
 801df38:	b084      	sub	sp, #16
 801df3a:	af00      	add	r7, sp, #0
 801df3c:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801df3e:	687b      	ldr	r3, [r7, #4]
 801df40:	685b      	ldr	r3, [r3, #4]
 801df42:	60fb      	str	r3, [r7, #12]
 801df44:	68fb      	ldr	r3, [r7, #12]
 801df46:	2b00      	cmp	r3, #0
 801df48:	d012      	beq.n	801df70 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801df4a:	68fb      	ldr	r3, [r7, #12]
 801df4c:	681a      	ldr	r2, [r3, #0]
 801df4e:	68fb      	ldr	r3, [r7, #12]
 801df50:	681b      	ldr	r3, [r3, #0]
 801df52:	681b      	ldr	r3, [r3, #0]
 801df54:	33cc      	adds	r3, #204	; 0xcc
 801df56:	681b      	ldr	r3, [r3, #0]
 801df58:	4610      	mov	r0, r2
 801df5a:	4798      	blx	r3
 801df5c:	4603      	mov	r3, r0
 801df5e:	2b00      	cmp	r3, #0
 801df60:	d002      	beq.n	801df68 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801df62:	68fb      	ldr	r3, [r7, #12]
 801df64:	681b      	ldr	r3, [r3, #0]
 801df66:	e004      	b.n	801df72 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801df68:	68fb      	ldr	r3, [r7, #12]
 801df6a:	685b      	ldr	r3, [r3, #4]
 801df6c:	60fb      	str	r3, [r7, #12]
 801df6e:	e7e9      	b.n	801df44 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801df70:	2300      	movs	r3, #0
}
 801df72:	4618      	mov	r0, r3
 801df74:	3710      	adds	r7, #16
 801df76:	46bd      	mov	sp, r7
 801df78:	bd80      	pop	{r7, pc}

0801df7a <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801df7a:	b580      	push	{r7, lr}
 801df7c:	b084      	sub	sp, #16
 801df7e:	af00      	add	r7, sp, #0
 801df80:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801df82:	687b      	ldr	r3, [r7, #4]
 801df84:	685b      	ldr	r3, [r3, #4]
 801df86:	60fb      	str	r3, [r7, #12]
 801df88:	68fb      	ldr	r3, [r7, #12]
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	d01d      	beq.n	801dfca <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801df8e:	68fb      	ldr	r3, [r7, #12]
 801df90:	681a      	ldr	r2, [r3, #0]
 801df92:	68fb      	ldr	r3, [r7, #12]
 801df94:	681b      	ldr	r3, [r3, #0]
 801df96:	681b      	ldr	r3, [r3, #0]
 801df98:	33cc      	adds	r3, #204	; 0xcc
 801df9a:	681b      	ldr	r3, [r3, #0]
 801df9c:	4610      	mov	r0, r2
 801df9e:	4798      	blx	r3
 801dfa0:	4603      	mov	r3, r0
 801dfa2:	2b00      	cmp	r3, #0
 801dfa4:	d00d      	beq.n	801dfc2 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801dfa6:	68fb      	ldr	r3, [r7, #12]
 801dfa8:	681b      	ldr	r3, [r3, #0]
 801dfaa:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801dfac:	68fb      	ldr	r3, [r7, #12]
 801dfae:	2200      	movs	r2, #0
 801dfb0:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801dfb2:	687b      	ldr	r3, [r7, #4]
 801dfb4:	681b      	ldr	r3, [r3, #0]
 801dfb6:	3388      	adds	r3, #136	; 0x88
 801dfb8:	681b      	ldr	r3, [r3, #0]
 801dfba:	6878      	ldr	r0, [r7, #4]
 801dfbc:	4798      	blx	r3
            return matchingCall;
 801dfbe:	68bb      	ldr	r3, [r7, #8]
 801dfc0:	e004      	b.n	801dfcc <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801dfc2:	68fb      	ldr	r3, [r7, #12]
 801dfc4:	685b      	ldr	r3, [r3, #4]
 801dfc6:	60fb      	str	r3, [r7, #12]
 801dfc8:	e7de      	b.n	801df88 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801dfca:	2300      	movs	r3, #0
}
 801dfcc:	4618      	mov	r0, r3
 801dfce:	3710      	adds	r7, #16
 801dfd0:	46bd      	mov	sp, r7
 801dfd2:	bd80      	pop	{r7, pc}

0801dfd4 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801dfd4:	b580      	push	{r7, lr}
 801dfd6:	b086      	sub	sp, #24
 801dfd8:	af00      	add	r7, sp, #0
 801dfda:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	685b      	ldr	r3, [r3, #4]
 801dfe0:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801dfe2:	2300      	movs	r3, #0
 801dfe4:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801dfe6:	2300      	movs	r3, #0
 801dfe8:	60fb      	str	r3, [r7, #12]

    while (current) {
 801dfea:	697b      	ldr	r3, [r7, #20]
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	d024      	beq.n	801e03a <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801dff0:	697b      	ldr	r3, [r7, #20]
 801dff2:	681b      	ldr	r3, [r3, #0]
 801dff4:	2b00      	cmp	r3, #0
 801dff6:	d11a      	bne.n	801e02e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801dff8:	697b      	ldr	r3, [r7, #20]
 801dffa:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801dffc:	693b      	ldr	r3, [r7, #16]
 801dffe:	2b00      	cmp	r3, #0
 801e000:	d106      	bne.n	801e010 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801e002:	697b      	ldr	r3, [r7, #20]
 801e004:	685b      	ldr	r3, [r3, #4]
 801e006:	617b      	str	r3, [r7, #20]
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	697a      	ldr	r2, [r7, #20]
 801e00c:	605a      	str	r2, [r3, #4]
 801e00e:	e006      	b.n	801e01e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801e010:	697b      	ldr	r3, [r7, #20]
 801e012:	685a      	ldr	r2, [r3, #4]
 801e014:	693b      	ldr	r3, [r7, #16]
 801e016:	605a      	str	r2, [r3, #4]
 801e018:	693b      	ldr	r3, [r7, #16]
 801e01a:	685b      	ldr	r3, [r3, #4]
 801e01c:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801e01e:	68fb      	ldr	r3, [r7, #12]
 801e020:	2b00      	cmp	r3, #0
 801e022:	d0e2      	beq.n	801dfea <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801e024:	2108      	movs	r1, #8
 801e026:	4618      	mov	r0, r3
 801e028:	f7ee f82e 	bl	800c088 <_ZdlPvj>
 801e02c:	e7dd      	b.n	801dfea <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801e02e:	697b      	ldr	r3, [r7, #20]
 801e030:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801e032:	697b      	ldr	r3, [r7, #20]
 801e034:	685b      	ldr	r3, [r3, #4]
 801e036:	617b      	str	r3, [r7, #20]
    while (current) {
 801e038:	e7d7      	b.n	801dfea <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801e03a:	bf00      	nop
 801e03c:	3718      	adds	r7, #24
 801e03e:	46bd      	mov	sp, r7
 801e040:	bd80      	pop	{r7, pc}

0801e042 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801e042:	b580      	push	{r7, lr}
 801e044:	b084      	sub	sp, #16
 801e046:	af00      	add	r7, sp, #0
 801e048:	6078      	str	r0, [r7, #4]
    while (head_) {
 801e04a:	687b      	ldr	r3, [r7, #4]
 801e04c:	685b      	ldr	r3, [r3, #4]
 801e04e:	2b00      	cmp	r3, #0
 801e050:	d019      	beq.n	801e086 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801e052:	687b      	ldr	r3, [r7, #4]
 801e054:	685b      	ldr	r3, [r3, #4]
 801e056:	685b      	ldr	r3, [r3, #4]
 801e058:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801e05a:	687b      	ldr	r3, [r7, #4]
 801e05c:	685b      	ldr	r3, [r3, #4]
 801e05e:	681b      	ldr	r3, [r3, #0]
 801e060:	2b00      	cmp	r3, #0
 801e062:	d004      	beq.n	801e06e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801e064:	681a      	ldr	r2, [r3, #0]
 801e066:	3204      	adds	r2, #4
 801e068:	6812      	ldr	r2, [r2, #0]
 801e06a:	4618      	mov	r0, r3
 801e06c:	4790      	blx	r2
        delete head_;
 801e06e:	687b      	ldr	r3, [r7, #4]
 801e070:	685b      	ldr	r3, [r3, #4]
 801e072:	2b00      	cmp	r3, #0
 801e074:	d003      	beq.n	801e07e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801e076:	2108      	movs	r1, #8
 801e078:	4618      	mov	r0, r3
 801e07a:	f7ee f805 	bl	800c088 <_ZdlPvj>
        head_ = next;
 801e07e:	687b      	ldr	r3, [r7, #4]
 801e080:	68fa      	ldr	r2, [r7, #12]
 801e082:	605a      	str	r2, [r3, #4]
    while (head_) {
 801e084:	e7e1      	b.n	801e04a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801e086:	bf00      	nop
 801e088:	3710      	adds	r7, #16
 801e08a:	46bd      	mov	sp, r7
 801e08c:	bd80      	pop	{r7, pc}

0801e08e <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801e08e:	b580      	push	{r7, lr}
 801e090:	b084      	sub	sp, #16
 801e092:	af00      	add	r7, sp, #0
 801e094:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e096:	687b      	ldr	r3, [r7, #4]
 801e098:	685b      	ldr	r3, [r3, #4]
 801e09a:	60fb      	str	r3, [r7, #12]
 801e09c:	68fb      	ldr	r3, [r7, #12]
 801e09e:	2b00      	cmp	r3, #0
 801e0a0:	d00c      	beq.n	801e0bc <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801e0a2:	68fb      	ldr	r3, [r7, #12]
 801e0a4:	681a      	ldr	r2, [r3, #0]
 801e0a6:	68fb      	ldr	r3, [r7, #12]
 801e0a8:	681b      	ldr	r3, [r3, #0]
 801e0aa:	681b      	ldr	r3, [r3, #0]
 801e0ac:	33ec      	adds	r3, #236	; 0xec
 801e0ae:	681b      	ldr	r3, [r3, #0]
 801e0b0:	4610      	mov	r0, r2
 801e0b2:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e0b4:	68fb      	ldr	r3, [r7, #12]
 801e0b6:	685b      	ldr	r3, [r3, #4]
 801e0b8:	60fb      	str	r3, [r7, #12]
 801e0ba:	e7ef      	b.n	801e09c <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801e0bc:	bf00      	nop
 801e0be:	3710      	adds	r7, #16
 801e0c0:	46bd      	mov	sp, r7
 801e0c2:	bd80      	pop	{r7, pc}

0801e0c4 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801e0c4:	b580      	push	{r7, lr}
 801e0c6:	b084      	sub	sp, #16
 801e0c8:	af00      	add	r7, sp, #0
 801e0ca:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	685b      	ldr	r3, [r3, #4]
 801e0d0:	60fb      	str	r3, [r7, #12]
 801e0d2:	68fb      	ldr	r3, [r7, #12]
 801e0d4:	2b00      	cmp	r3, #0
 801e0d6:	d00c      	beq.n	801e0f2 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801e0d8:	68fb      	ldr	r3, [r7, #12]
 801e0da:	681a      	ldr	r2, [r3, #0]
 801e0dc:	68fb      	ldr	r3, [r7, #12]
 801e0de:	681b      	ldr	r3, [r3, #0]
 801e0e0:	681b      	ldr	r3, [r3, #0]
 801e0e2:	33e8      	adds	r3, #232	; 0xe8
 801e0e4:	681b      	ldr	r3, [r3, #0]
 801e0e6:	4610      	mov	r0, r2
 801e0e8:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e0ea:	68fb      	ldr	r3, [r7, #12]
 801e0ec:	685b      	ldr	r3, [r3, #4]
 801e0ee:	60fb      	str	r3, [r7, #12]
 801e0f0:	e7ef      	b.n	801e0d2 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801e0f2:	bf00      	nop
 801e0f4:	3710      	adds	r7, #16
 801e0f6:	46bd      	mov	sp, r7
 801e0f8:	bd80      	pop	{r7, pc}

0801e0fa <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801e0fa:	b580      	push	{r7, lr}
 801e0fc:	b084      	sub	sp, #16
 801e0fe:	af00      	add	r7, sp, #0
 801e100:	6078      	str	r0, [r7, #4]
 801e102:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e104:	687b      	ldr	r3, [r7, #4]
 801e106:	685b      	ldr	r3, [r3, #4]
 801e108:	60fb      	str	r3, [r7, #12]
 801e10a:	68fb      	ldr	r3, [r7, #12]
 801e10c:	2b00      	cmp	r3, #0
 801e10e:	d00d      	beq.n	801e12c <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801e110:	68fb      	ldr	r3, [r7, #12]
 801e112:	681a      	ldr	r2, [r3, #0]
 801e114:	68fb      	ldr	r3, [r7, #12]
 801e116:	681b      	ldr	r3, [r3, #0]
 801e118:	681b      	ldr	r3, [r3, #0]
 801e11a:	33dc      	adds	r3, #220	; 0xdc
 801e11c:	681b      	ldr	r3, [r3, #0]
 801e11e:	6839      	ldr	r1, [r7, #0]
 801e120:	4610      	mov	r0, r2
 801e122:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e124:	68fb      	ldr	r3, [r7, #12]
 801e126:	685b      	ldr	r3, [r3, #4]
 801e128:	60fb      	str	r3, [r7, #12]
 801e12a:	e7ee      	b.n	801e10a <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801e12c:	bf00      	nop
 801e12e:	3710      	adds	r7, #16
 801e130:	46bd      	mov	sp, r7
 801e132:	bd80      	pop	{r7, pc}

0801e134 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801e134:	b580      	push	{r7, lr}
 801e136:	b084      	sub	sp, #16
 801e138:	af00      	add	r7, sp, #0
 801e13a:	6078      	str	r0, [r7, #4]
 801e13c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e13e:	687b      	ldr	r3, [r7, #4]
 801e140:	685b      	ldr	r3, [r3, #4]
 801e142:	60fb      	str	r3, [r7, #12]
 801e144:	68fb      	ldr	r3, [r7, #12]
 801e146:	2b00      	cmp	r3, #0
 801e148:	d00d      	beq.n	801e166 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801e14a:	68fb      	ldr	r3, [r7, #12]
 801e14c:	681a      	ldr	r2, [r3, #0]
 801e14e:	68fb      	ldr	r3, [r7, #12]
 801e150:	681b      	ldr	r3, [r3, #0]
 801e152:	681b      	ldr	r3, [r3, #0]
 801e154:	33e0      	adds	r3, #224	; 0xe0
 801e156:	681b      	ldr	r3, [r3, #0]
 801e158:	6839      	ldr	r1, [r7, #0]
 801e15a:	4610      	mov	r0, r2
 801e15c:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e15e:	68fb      	ldr	r3, [r7, #12]
 801e160:	685b      	ldr	r3, [r3, #4]
 801e162:	60fb      	str	r3, [r7, #12]
 801e164:	e7ee      	b.n	801e144 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801e166:	bf00      	nop
 801e168:	3710      	adds	r7, #16
 801e16a:	46bd      	mov	sp, r7
 801e16c:	bd80      	pop	{r7, pc}
	...

0801e170 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801e170:	b590      	push	{r4, r7, lr}
 801e172:	b087      	sub	sp, #28
 801e174:	af00      	add	r7, sp, #0
 801e176:	60f8      	str	r0, [r7, #12]
 801e178:	60b9      	str	r1, [r7, #8]
 801e17a:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801e17c:	68b9      	ldr	r1, [r7, #8]
 801e17e:	68f8      	ldr	r0, [r7, #12]
 801e180:	f7f0 fb85 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801e184:	f107 0310 	add.w	r3, r7, #16
 801e188:	490f      	ldr	r1, [pc, #60]	; (801e1c8 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801e18a:	4618      	mov	r0, r3
 801e18c:	f7f0 fb2b 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801e190:	f107 0310 	add.w	r3, r7, #16
 801e194:	4619      	mov	r1, r3
 801e196:	68f8      	ldr	r0, [r7, #12]
 801e198:	f7f0 fee9 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 801e19c:	4603      	mov	r3, r0
 801e19e:	461c      	mov	r4, r3
 801e1a0:	f107 0310 	add.w	r3, r7, #16
 801e1a4:	4618      	mov	r0, r3
 801e1a6:	f7f0 fed6 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801e1aa:	2c00      	cmp	r4, #0
 801e1ac:	d007      	beq.n	801e1be <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801e1ae:	6879      	ldr	r1, [r7, #4]
 801e1b0:	68f8      	ldr	r0, [r7, #12]
 801e1b2:	f7f0 ff4d 	bl	800f050 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801e1b6:	4905      	ldr	r1, [pc, #20]	; (801e1cc <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801e1b8:	68f8      	ldr	r0, [r7, #12]
 801e1ba:	f7f0 ff5b 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801e1be:	bf00      	nop
}
 801e1c0:	68f8      	ldr	r0, [r7, #12]
 801e1c2:	371c      	adds	r7, #28
 801e1c4:	46bd      	mov	sp, r7
 801e1c6:	bd90      	pop	{r4, r7, pc}
 801e1c8:	08028440 	.word	0x08028440
 801e1cc:	08028444 	.word	0x08028444

0801e1d0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801e1d0:	b590      	push	{r4, r7, lr}
 801e1d2:	b087      	sub	sp, #28
 801e1d4:	af00      	add	r7, sp, #0
 801e1d6:	60f8      	str	r0, [r7, #12]
 801e1d8:	60b9      	str	r1, [r7, #8]
 801e1da:	607a      	str	r2, [r7, #4]
 801e1dc:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801e1de:	68b9      	ldr	r1, [r7, #8]
 801e1e0:	68f8      	ldr	r0, [r7, #12]
 801e1e2:	f7f0 fb54 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801e1e6:	f107 0310 	add.w	r3, r7, #16
 801e1ea:	4912      	ldr	r1, [pc, #72]	; (801e234 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801e1ec:	4618      	mov	r0, r3
 801e1ee:	f7f0 fafa 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801e1f2:	f107 0310 	add.w	r3, r7, #16
 801e1f6:	4619      	mov	r1, r3
 801e1f8:	68f8      	ldr	r0, [r7, #12]
 801e1fa:	f7f0 fefd 	bl	800eff8 <_ZneRK12SimpleStringS1_>
 801e1fe:	4603      	mov	r3, r0
 801e200:	461c      	mov	r4, r3
 801e202:	f107 0310 	add.w	r3, r7, #16
 801e206:	4618      	mov	r0, r3
 801e208:	f7f0 fea5 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801e20c:	2c00      	cmp	r4, #0
 801e20e:	d003      	beq.n	801e218 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801e210:	4909      	ldr	r1, [pc, #36]	; (801e238 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801e212:	68f8      	ldr	r0, [r7, #12]
 801e214:	f7f0 ff2e 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801e218:	6879      	ldr	r1, [r7, #4]
 801e21a:	68f8      	ldr	r0, [r7, #12]
 801e21c:	f7f0 ff18 	bl	800f050 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801e220:	6839      	ldr	r1, [r7, #0]
 801e222:	68f8      	ldr	r0, [r7, #12]
 801e224:	f7f0 ff14 	bl	800f050 <_ZN12SimpleStringpLERKS_>
    return str;
 801e228:	bf00      	nop
}
 801e22a:	68f8      	ldr	r0, [r7, #12]
 801e22c:	371c      	adds	r7, #28
 801e22e:	46bd      	mov	sp, r7
 801e230:	bd90      	pop	{r4, r7, pc}
 801e232:	bf00      	nop
 801e234:	08028440 	.word	0x08028440
 801e238:	0802844c 	.word	0x0802844c

0801e23c <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801e23c:	b580      	push	{r7, lr}
 801e23e:	b08c      	sub	sp, #48	; 0x30
 801e240:	af00      	add	r7, sp, #0
 801e242:	60f8      	str	r0, [r7, #12]
 801e244:	60b9      	str	r1, [r7, #8]
 801e246:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801e248:	f107 0314 	add.w	r3, r7, #20
 801e24c:	4929      	ldr	r1, [pc, #164]	; (801e2f4 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801e24e:	4618      	mov	r0, r3
 801e250:	f7f0 fac9 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e254:	68bb      	ldr	r3, [r7, #8]
 801e256:	685b      	ldr	r3, [r3, #4]
 801e258:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e25c:	2b00      	cmp	r3, #0
 801e25e:	d038      	beq.n	801e2d2 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801e260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e262:	681a      	ldr	r2, [r3, #0]
 801e264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e266:	681b      	ldr	r3, [r3, #0]
 801e268:	681b      	ldr	r3, [r3, #0]
 801e26a:	33c0      	adds	r3, #192	; 0xc0
 801e26c:	681b      	ldr	r3, [r3, #0]
 801e26e:	4610      	mov	r0, r2
 801e270:	4798      	blx	r3
 801e272:	4603      	mov	r3, r0
 801e274:	f083 0301 	eor.w	r3, r3, #1
 801e278:	b2db      	uxtb	r3, r3
 801e27a:	2b00      	cmp	r3, #0
 801e27c:	d025      	beq.n	801e2ca <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801e27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e280:	6819      	ldr	r1, [r3, #0]
 801e282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e284:	681b      	ldr	r3, [r3, #0]
 801e286:	681b      	ldr	r3, [r3, #0]
 801e288:	33f0      	adds	r3, #240	; 0xf0
 801e28a:	681b      	ldr	r3, [r3, #0]
 801e28c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801e290:	4610      	mov	r0, r2
 801e292:	4798      	blx	r3
 801e294:	f107 001c 	add.w	r0, r7, #28
 801e298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e29c:	f107 0114 	add.w	r1, r7, #20
 801e2a0:	687a      	ldr	r2, [r7, #4]
 801e2a2:	f7ff ff95 	bl	801e1d0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801e2a6:	f107 021c 	add.w	r2, r7, #28
 801e2aa:	f107 0314 	add.w	r3, r7, #20
 801e2ae:	4611      	mov	r1, r2
 801e2b0:	4618      	mov	r0, r3
 801e2b2:	f7f0 fb04 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801e2b6:	f107 031c 	add.w	r3, r7, #28
 801e2ba:	4618      	mov	r0, r3
 801e2bc:	f7f0 fe4b 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801e2c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e2c4:	4618      	mov	r0, r3
 801e2c6:	f7f0 fe46 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2cc:	685b      	ldr	r3, [r3, #4]
 801e2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e2d0:	e7c3      	b.n	801e25a <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801e2d2:	68fb      	ldr	r3, [r7, #12]
 801e2d4:	f107 0114 	add.w	r1, r7, #20
 801e2d8:	687a      	ldr	r2, [r7, #4]
 801e2da:	4618      	mov	r0, r3
 801e2dc:	f7ff ff48 	bl	801e170 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801e2e0:	f107 0314 	add.w	r3, r7, #20
 801e2e4:	4618      	mov	r0, r3
 801e2e6:	f7f0 fe36 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801e2ea:	bf00      	nop
}
 801e2ec:	68f8      	ldr	r0, [r7, #12]
 801e2ee:	3730      	adds	r7, #48	; 0x30
 801e2f0:	46bd      	mov	sp, r7
 801e2f2:	bd80      	pop	{r7, pc}
 801e2f4:	08028440 	.word	0x08028440

0801e2f8 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801e2f8:	b580      	push	{r7, lr}
 801e2fa:	b08c      	sub	sp, #48	; 0x30
 801e2fc:	af00      	add	r7, sp, #0
 801e2fe:	60f8      	str	r0, [r7, #12]
 801e300:	60b9      	str	r1, [r7, #8]
 801e302:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801e304:	f107 0314 	add.w	r3, r7, #20
 801e308:	4928      	ldr	r1, [pc, #160]	; (801e3ac <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801e30a:	4618      	mov	r0, r3
 801e30c:	f7f0 fa6b 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e310:	68bb      	ldr	r3, [r7, #8]
 801e312:	685b      	ldr	r3, [r3, #4]
 801e314:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e318:	2b00      	cmp	r3, #0
 801e31a:	d035      	beq.n	801e388 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801e31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e31e:	681a      	ldr	r2, [r3, #0]
 801e320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e322:	681b      	ldr	r3, [r3, #0]
 801e324:	681b      	ldr	r3, [r3, #0]
 801e326:	33c0      	adds	r3, #192	; 0xc0
 801e328:	681b      	ldr	r3, [r3, #0]
 801e32a:	4610      	mov	r0, r2
 801e32c:	4798      	blx	r3
 801e32e:	4603      	mov	r3, r0
 801e330:	2b00      	cmp	r3, #0
 801e332:	d025      	beq.n	801e380 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801e334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e336:	6819      	ldr	r1, [r3, #0]
 801e338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e33a:	681b      	ldr	r3, [r3, #0]
 801e33c:	681b      	ldr	r3, [r3, #0]
 801e33e:	33f0      	adds	r3, #240	; 0xf0
 801e340:	681b      	ldr	r3, [r3, #0]
 801e342:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801e346:	4610      	mov	r0, r2
 801e348:	4798      	blx	r3
 801e34a:	f107 001c 	add.w	r0, r7, #28
 801e34e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e352:	f107 0114 	add.w	r1, r7, #20
 801e356:	687a      	ldr	r2, [r7, #4]
 801e358:	f7ff ff3a 	bl	801e1d0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801e35c:	f107 021c 	add.w	r2, r7, #28
 801e360:	f107 0314 	add.w	r3, r7, #20
 801e364:	4611      	mov	r1, r2
 801e366:	4618      	mov	r0, r3
 801e368:	f7f0 faa9 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801e36c:	f107 031c 	add.w	r3, r7, #28
 801e370:	4618      	mov	r0, r3
 801e372:	f7f0 fdf0 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801e376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e37a:	4618      	mov	r0, r3
 801e37c:	f7f0 fdeb 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e382:	685b      	ldr	r3, [r3, #4]
 801e384:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e386:	e7c6      	b.n	801e316 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801e388:	68fb      	ldr	r3, [r7, #12]
 801e38a:	f107 0114 	add.w	r1, r7, #20
 801e38e:	687a      	ldr	r2, [r7, #4]
 801e390:	4618      	mov	r0, r3
 801e392:	f7ff feed 	bl	801e170 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801e396:	f107 0314 	add.w	r3, r7, #20
 801e39a:	4618      	mov	r0, r3
 801e39c:	f7f0 fddb 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801e3a0:	bf00      	nop
}
 801e3a2:	68f8      	ldr	r0, [r7, #12]
 801e3a4:	3730      	adds	r7, #48	; 0x30
 801e3a6:	46bd      	mov	sp, r7
 801e3a8:	bd80      	pop	{r7, pc}
 801e3aa:	bf00      	nop
 801e3ac:	08028440 	.word	0x08028440

0801e3b0 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801e3b0:	b580      	push	{r7, lr}
 801e3b2:	b08e      	sub	sp, #56	; 0x38
 801e3b4:	af00      	add	r7, sp, #0
 801e3b6:	6078      	str	r0, [r7, #4]
 801e3b8:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801e3ba:	f107 030c 	add.w	r3, r7, #12
 801e3be:	4936      	ldr	r1, [pc, #216]	; (801e498 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801e3c0:	4618      	mov	r0, r3
 801e3c2:	f7f0 fa10 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e3c6:	683b      	ldr	r3, [r7, #0]
 801e3c8:	685b      	ldr	r3, [r3, #4]
 801e3ca:	637b      	str	r3, [r7, #52]	; 0x34
 801e3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e3ce:	2b00      	cmp	r3, #0
 801e3d0:	d044      	beq.n	801e45c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801e3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e3d4:	681a      	ldr	r2, [r3, #0]
 801e3d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e3d8:	681b      	ldr	r3, [r3, #0]
 801e3da:	681b      	ldr	r3, [r3, #0]
 801e3dc:	33cc      	adds	r3, #204	; 0xcc
 801e3de:	681b      	ldr	r3, [r3, #0]
 801e3e0:	4610      	mov	r0, r2
 801e3e2:	4798      	blx	r3
 801e3e4:	4603      	mov	r3, r0
 801e3e6:	f083 0301 	eor.w	r3, r3, #1
 801e3ea:	b2db      	uxtb	r3, r3
 801e3ec:	2b00      	cmp	r3, #0
 801e3ee:	d031      	beq.n	801e454 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801e3f0:	f107 031c 	add.w	r3, r7, #28
 801e3f4:	4928      	ldr	r1, [pc, #160]	; (801e498 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801e3f6:	4618      	mov	r0, r3
 801e3f8:	f7f0 f9f5 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801e3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e3fe:	6819      	ldr	r1, [r3, #0]
 801e400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e402:	681b      	ldr	r3, [r3, #0]
 801e404:	681b      	ldr	r3, [r3, #0]
 801e406:	33f4      	adds	r3, #244	; 0xf4
 801e408:	681b      	ldr	r3, [r3, #0]
 801e40a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801e40e:	4610      	mov	r0, r2
 801e410:	4798      	blx	r3
 801e412:	f107 0014 	add.w	r0, r7, #20
 801e416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e41a:	f107 021c 	add.w	r2, r7, #28
 801e41e:	f107 010c 	add.w	r1, r7, #12
 801e422:	f7ff fed5 	bl	801e1d0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801e426:	f107 0214 	add.w	r2, r7, #20
 801e42a:	f107 030c 	add.w	r3, r7, #12
 801e42e:	4611      	mov	r1, r2
 801e430:	4618      	mov	r0, r3
 801e432:	f7f0 fa44 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801e436:	f107 0314 	add.w	r3, r7, #20
 801e43a:	4618      	mov	r0, r3
 801e43c:	f7f0 fd8b 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801e440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e444:	4618      	mov	r0, r3
 801e446:	f7f0 fd86 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801e44a:	f107 031c 	add.w	r3, r7, #28
 801e44e:	4618      	mov	r0, r3
 801e450:	f7f0 fd81 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e456:	685b      	ldr	r3, [r3, #4]
 801e458:	637b      	str	r3, [r7, #52]	; 0x34
 801e45a:	e7b7      	b.n	801e3cc <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801e45c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e460:	490d      	ldr	r1, [pc, #52]	; (801e498 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801e462:	4618      	mov	r0, r3
 801e464:	f7f0 f9bf 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801e468:	687b      	ldr	r3, [r7, #4]
 801e46a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801e46e:	f107 010c 	add.w	r1, r7, #12
 801e472:	4618      	mov	r0, r3
 801e474:	f7ff fe7c 	bl	801e170 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801e478:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e47c:	4618      	mov	r0, r3
 801e47e:	f7f0 fd6a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801e482:	f107 030c 	add.w	r3, r7, #12
 801e486:	4618      	mov	r0, r3
 801e488:	f7f0 fd65 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801e48c:	bf00      	nop
}
 801e48e:	6878      	ldr	r0, [r7, #4]
 801e490:	3738      	adds	r7, #56	; 0x38
 801e492:	46bd      	mov	sp, r7
 801e494:	bd80      	pop	{r7, pc}
 801e496:	bf00      	nop
 801e498:	08028440 	.word	0x08028440

0801e49c <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801e49c:	b580      	push	{r7, lr}
 801e49e:	b084      	sub	sp, #16
 801e4a0:	af00      	add	r7, sp, #0
 801e4a2:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e4a4:	687b      	ldr	r3, [r7, #4]
 801e4a6:	685b      	ldr	r3, [r3, #4]
 801e4a8:	60fb      	str	r3, [r7, #12]
 801e4aa:	68fb      	ldr	r3, [r7, #12]
 801e4ac:	2b00      	cmp	r3, #0
 801e4ae:	d014      	beq.n	801e4da <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801e4b0:	68fb      	ldr	r3, [r7, #12]
 801e4b2:	681a      	ldr	r2, [r3, #0]
 801e4b4:	68fb      	ldr	r3, [r7, #12]
 801e4b6:	681b      	ldr	r3, [r3, #0]
 801e4b8:	681b      	ldr	r3, [r3, #0]
 801e4ba:	33d0      	adds	r3, #208	; 0xd0
 801e4bc:	681b      	ldr	r3, [r3, #0]
 801e4be:	4610      	mov	r0, r2
 801e4c0:	4798      	blx	r3
 801e4c2:	4603      	mov	r3, r0
 801e4c4:	f083 0301 	eor.w	r3, r3, #1
 801e4c8:	b2db      	uxtb	r3, r3
 801e4ca:	2b00      	cmp	r3, #0
 801e4cc:	d001      	beq.n	801e4d2 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801e4ce:	2301      	movs	r3, #1
 801e4d0:	e004      	b.n	801e4dc <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e4d2:	68fb      	ldr	r3, [r7, #12]
 801e4d4:	685b      	ldr	r3, [r3, #4]
 801e4d6:	60fb      	str	r3, [r7, #12]
 801e4d8:	e7e7      	b.n	801e4aa <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801e4da:	2300      	movs	r3, #0
}
 801e4dc:	4618      	mov	r0, r3
 801e4de:	3710      	adds	r7, #16
 801e4e0:	46bd      	mov	sp, r7
 801e4e2:	bd80      	pop	{r7, pc}

0801e4e4 <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801e4e4:	b480      	push	{r7}
 801e4e6:	b083      	sub	sp, #12
 801e4e8:	af00      	add	r7, sp, #0
 801e4ea:	6078      	str	r0, [r7, #4]
 801e4ec:	460b      	mov	r3, r1
 801e4ee:	70fb      	strb	r3, [r7, #3]
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	78fa      	ldrb	r2, [r7, #3]
 801e4f4:	711a      	strb	r2, [r3, #4]
 801e4f6:	bf00      	nop
 801e4f8:	370c      	adds	r7, #12
 801e4fa:	46bd      	mov	sp, r7
 801e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e500:	4770      	bx	lr
	...

0801e504 <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801e504:	b580      	push	{r7, lr}
 801e506:	b082      	sub	sp, #8
 801e508:	af00      	add	r7, sp, #0
 801e50a:	6078      	str	r0, [r7, #4]
 801e50c:	460b      	mov	r3, r1
 801e50e:	70fb      	strb	r3, [r7, #3]
 801e510:	687b      	ldr	r3, [r7, #4]
 801e512:	4618      	mov	r0, r3
 801e514:	f7ed ff6a 	bl	800c3ec <_ZN14TestTerminatorC1Ev>
 801e518:	4a05      	ldr	r2, [pc, #20]	; (801e530 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	601a      	str	r2, [r3, #0]
 801e51e:	687b      	ldr	r3, [r7, #4]
 801e520:	78fa      	ldrb	r2, [r7, #3]
 801e522:	711a      	strb	r2, [r3, #4]
    {
    }
 801e524:	687b      	ldr	r3, [r7, #4]
 801e526:	4618      	mov	r0, r3
 801e528:	3708      	adds	r7, #8
 801e52a:	46bd      	mov	sp, r7
 801e52c:	bd80      	pop	{r7, pc}
 801e52e:	bf00      	nop
 801e530:	0802b900 	.word	0x0802b900

0801e534 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801e534:	b580      	push	{r7, lr}
 801e536:	b082      	sub	sp, #8
 801e538:	af00      	add	r7, sp, #0
 801e53a:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801e53c:	687b      	ldr	r3, [r7, #4]
 801e53e:	791b      	ldrb	r3, [r3, #4]
 801e540:	2b00      	cmp	r3, #0
 801e542:	d001      	beq.n	801e548 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801e544:	f7f6 f9fe 	bl	8014944 <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801e548:	f7f7 fd40 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e54c:	4603      	mov	r3, r0
 801e54e:	681a      	ldr	r2, [r3, #0]
 801e550:	6812      	ldr	r2, [r2, #0]
 801e552:	4618      	mov	r0, r3
 801e554:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801e556:	bf00      	nop
 801e558:	3708      	adds	r7, #8
 801e55a:	46bd      	mov	sp, r7
 801e55c:	bd80      	pop	{r7, pc}
	...

0801e560 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801e560:	b580      	push	{r7, lr}
 801e562:	b082      	sub	sp, #8
 801e564:	af00      	add	r7, sp, #0
 801e566:	6078      	str	r0, [r7, #4]
    {
 801e568:	4a05      	ldr	r2, [pc, #20]	; (801e580 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801e56a:	687b      	ldr	r3, [r7, #4]
 801e56c:	601a      	str	r2, [r3, #0]
 801e56e:	687b      	ldr	r3, [r7, #4]
 801e570:	4618      	mov	r0, r3
 801e572:	f7f7 fdbb 	bl	80160ec <_ZN14TestTerminatorD1Ev>
    }
 801e576:	687b      	ldr	r3, [r7, #4]
 801e578:	4618      	mov	r0, r3
 801e57a:	3708      	adds	r7, #8
 801e57c:	46bd      	mov	sp, r7
 801e57e:	bd80      	pop	{r7, pc}
 801e580:	0802b900 	.word	0x0802b900

0801e584 <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801e584:	b580      	push	{r7, lr}
 801e586:	b082      	sub	sp, #8
 801e588:	af00      	add	r7, sp, #0
 801e58a:	6078      	str	r0, [r7, #4]
    }
 801e58c:	6878      	ldr	r0, [r7, #4]
 801e58e:	f7ff ffe7 	bl	801e560 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801e592:	2108      	movs	r1, #8
 801e594:	6878      	ldr	r0, [r7, #4]
 801e596:	f7ed fd77 	bl	800c088 <_ZdlPvj>
 801e59a:	687b      	ldr	r3, [r7, #4]
 801e59c:	4618      	mov	r0, r3
 801e59e:	3708      	adds	r7, #8
 801e5a0:	46bd      	mov	sp, r7
 801e5a2:	bd80      	pop	{r7, pc}

0801e5a4 <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801e5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5a6:	b085      	sub	sp, #20
 801e5a8:	af00      	add	r7, sp, #0
 801e5aa:	6078      	str	r0, [r7, #4]
 801e5ac:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801e5ae:	687b      	ldr	r3, [r7, #4]
 801e5b0:	681b      	ldr	r3, [r3, #0]
 801e5b2:	330c      	adds	r3, #12
 801e5b4:	681b      	ldr	r3, [r3, #0]
 801e5b6:	6878      	ldr	r0, [r7, #4]
 801e5b8:	4798      	blx	r3
 801e5ba:	4603      	mov	r3, r0
 801e5bc:	681a      	ldr	r2, [r3, #0]
 801e5be:	321c      	adds	r2, #28
 801e5c0:	6812      	ldr	r2, [r2, #0]
 801e5c2:	4618      	mov	r0, r3
 801e5c4:	4790      	blx	r2
 801e5c6:	4603      	mov	r3, r0
 801e5c8:	f083 0301 	eor.w	r3, r3, #1
 801e5cc:	b2db      	uxtb	r3, r3
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	d01d      	beq.n	801e60e <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801e5d2:	687b      	ldr	r3, [r7, #4]
 801e5d4:	681b      	ldr	r3, [r3, #0]
 801e5d6:	330c      	adds	r3, #12
 801e5d8:	681b      	ldr	r3, [r3, #0]
 801e5da:	6878      	ldr	r0, [r7, #4]
 801e5dc:	4798      	blx	r3
 801e5de:	4604      	mov	r4, r0
 801e5e0:	6823      	ldr	r3, [r4, #0]
 801e5e2:	339c      	adds	r3, #156	; 0x9c
 801e5e4:	681d      	ldr	r5, [r3, #0]
 801e5e6:	683e      	ldr	r6, [r7, #0]
 801e5e8:	687b      	ldr	r3, [r7, #4]
 801e5ea:	791a      	ldrb	r2, [r3, #4]
 801e5ec:	f107 0308 	add.w	r3, r7, #8
 801e5f0:	4611      	mov	r1, r2
 801e5f2:	4618      	mov	r0, r3
 801e5f4:	f7ff ff86 	bl	801e504 <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801e5f8:	f107 0308 	add.w	r3, r7, #8
 801e5fc:	461a      	mov	r2, r3
 801e5fe:	4631      	mov	r1, r6
 801e600:	4620      	mov	r0, r4
 801e602:	47a8      	blx	r5
 801e604:	f107 0308 	add.w	r3, r7, #8
 801e608:	4618      	mov	r0, r3
 801e60a:	f7ff ffa9 	bl	801e560 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801e60e:	bf00      	nop
 801e610:	3714      	adds	r7, #20
 801e612:	46bd      	mov	sp, r7
 801e614:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e616 <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801e616:	b580      	push	{r7, lr}
 801e618:	b082      	sub	sp, #8
 801e61a:	af00      	add	r7, sp, #0
 801e61c:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801e61e:	f7f7 fcc5 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801e622:	4603      	mov	r3, r0
}
 801e624:	4618      	mov	r0, r3
 801e626:	3708      	adds	r7, #8
 801e628:	46bd      	mov	sp, r7
 801e62a:	bd80      	pop	{r7, pc}

0801e62c <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801e62c:	b590      	push	{r4, r7, lr}
 801e62e:	b085      	sub	sp, #20
 801e630:	af00      	add	r7, sp, #0
 801e632:	6078      	str	r0, [r7, #4]
 801e634:	6039      	str	r1, [r7, #0]
 801e636:	687c      	ldr	r4, [r7, #4]
 801e638:	f107 0308 	add.w	r3, r7, #8
 801e63c:	490b      	ldr	r1, [pc, #44]	; (801e66c <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801e63e:	4618      	mov	r0, r3
 801e640:	f7f0 f8d1 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801e644:	f107 0308 	add.w	r3, r7, #8
 801e648:	461a      	mov	r2, r3
 801e64a:	6839      	ldr	r1, [r7, #0]
 801e64c:	4620      	mov	r0, r4
 801e64e:	f7f1 ff29 	bl	80104a4 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801e652:	f107 0308 	add.w	r3, r7, #8
 801e656:	4618      	mov	r0, r3
 801e658:	f7f0 fc7d 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801e65c:	4a04      	ldr	r2, [pc, #16]	; (801e670 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801e65e:	687b      	ldr	r3, [r7, #4]
 801e660:	601a      	str	r2, [r3, #0]
{
}
 801e662:	687b      	ldr	r3, [r7, #4]
 801e664:	4618      	mov	r0, r3
 801e666:	3714      	adds	r7, #20
 801e668:	46bd      	mov	sp, r7
 801e66a:	bd90      	pop	{r4, r7, pc}
 801e66c:	08028450 	.word	0x08028450
 801e670:	0802a88c 	.word	0x0802a88c

0801e674 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801e674:	b5b0      	push	{r4, r5, r7, lr}
 801e676:	b08a      	sub	sp, #40	; 0x28
 801e678:	af00      	add	r7, sp, #0
 801e67a:	6078      	str	r0, [r7, #4]
 801e67c:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801e67e:	687b      	ldr	r3, [r7, #4]
 801e680:	332c      	adds	r3, #44	; 0x2c
 801e682:	492b      	ldr	r1, [pc, #172]	; (801e730 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801e684:	4618      	mov	r0, r3
 801e686:	f7f0 fcf5 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801e68a:	687b      	ldr	r3, [r7, #4]
 801e68c:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801e690:	683b      	ldr	r3, [r7, #0]
 801e692:	681b      	ldr	r3, [r3, #0]
 801e694:	337c      	adds	r3, #124	; 0x7c
 801e696:	681c      	ldr	r4, [r3, #0]
 801e698:	f107 0310 	add.w	r3, r7, #16
 801e69c:	4925      	ldr	r1, [pc, #148]	; (801e734 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801e69e:	4618      	mov	r0, r3
 801e6a0:	f7f0 f8a1 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801e6a4:	f107 0308 	add.w	r3, r7, #8
 801e6a8:	f107 0210 	add.w	r2, r7, #16
 801e6ac:	6839      	ldr	r1, [r7, #0]
 801e6ae:	4618      	mov	r0, r3
 801e6b0:	47a0      	blx	r4
 801e6b2:	f107 0308 	add.w	r3, r7, #8
 801e6b6:	4619      	mov	r1, r3
 801e6b8:	4628      	mov	r0, r5
 801e6ba:	f7f0 fcc9 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801e6be:	f107 0308 	add.w	r3, r7, #8
 801e6c2:	4618      	mov	r0, r3
 801e6c4:	f7f0 fc47 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801e6c8:	f107 0310 	add.w	r3, r7, #16
 801e6cc:	4618      	mov	r0, r3
 801e6ce:	f7f0 fc42 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801e6d2:	687b      	ldr	r3, [r7, #4]
 801e6d4:	332c      	adds	r3, #44	; 0x2c
 801e6d6:	4918      	ldr	r1, [pc, #96]	; (801e738 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801e6d8:	4618      	mov	r0, r3
 801e6da:	f7f0 fccb 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801e6de:	687b      	ldr	r3, [r7, #4]
 801e6e0:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801e6e4:	683b      	ldr	r3, [r7, #0]
 801e6e6:	681b      	ldr	r3, [r3, #0]
 801e6e8:	3380      	adds	r3, #128	; 0x80
 801e6ea:	681c      	ldr	r4, [r3, #0]
 801e6ec:	f107 0320 	add.w	r3, r7, #32
 801e6f0:	4910      	ldr	r1, [pc, #64]	; (801e734 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801e6f2:	4618      	mov	r0, r3
 801e6f4:	f7f0 f877 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801e6f8:	f107 0318 	add.w	r3, r7, #24
 801e6fc:	f107 0220 	add.w	r2, r7, #32
 801e700:	6839      	ldr	r1, [r7, #0]
 801e702:	4618      	mov	r0, r3
 801e704:	47a0      	blx	r4
 801e706:	f107 0318 	add.w	r3, r7, #24
 801e70a:	4619      	mov	r1, r3
 801e70c:	4628      	mov	r0, r5
 801e70e:	f7f0 fc9f 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801e712:	f107 0318 	add.w	r3, r7, #24
 801e716:	4618      	mov	r0, r3
 801e718:	f7f0 fc1d 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801e71c:	f107 0320 	add.w	r3, r7, #32
 801e720:	4618      	mov	r0, r3
 801e722:	f7f0 fc18 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 801e726:	bf00      	nop
 801e728:	3728      	adds	r7, #40	; 0x28
 801e72a:	46bd      	mov	sp, r7
 801e72c:	bdb0      	pop	{r4, r5, r7, pc}
 801e72e:	bf00      	nop
 801e730:	080284a0 	.word	0x080284a0
 801e734:	080284cc 	.word	0x080284cc
 801e738:	080284d0 	.word	0x080284d0

0801e73c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801e73c:	b590      	push	{r4, r7, lr}
 801e73e:	b08f      	sub	sp, #60	; 0x3c
 801e740:	af00      	add	r7, sp, #0
 801e742:	60f8      	str	r0, [r7, #12]
 801e744:	60b9      	str	r1, [r7, #8]
 801e746:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801e748:	f107 0310 	add.w	r3, r7, #16
 801e74c:	4618      	mov	r0, r3
 801e74e:	f7ff f877 	bl	801d840 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801e752:	f107 0310 	add.w	r3, r7, #16
 801e756:	687a      	ldr	r2, [r7, #4]
 801e758:	68b9      	ldr	r1, [r7, #8]
 801e75a:	4618      	mov	r0, r3
 801e75c:	f7ff fa16 	bl	801db8c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801e760:	68fb      	ldr	r3, [r7, #12]
 801e762:	332c      	adds	r3, #44	; 0x2c
 801e764:	4937      	ldr	r1, [pc, #220]	; (801e844 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801e766:	4618      	mov	r0, r3
 801e768:	f7f0 fc84 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801e76c:	68fb      	ldr	r3, [r7, #12]
 801e76e:	332c      	adds	r3, #44	; 0x2c
 801e770:	68b9      	ldr	r1, [r7, #8]
 801e772:	4618      	mov	r0, r3
 801e774:	f7f0 fc6c 	bl	800f050 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801e778:	68fb      	ldr	r3, [r7, #12]
 801e77a:	332c      	adds	r3, #44	; 0x2c
 801e77c:	4932      	ldr	r1, [pc, #200]	; (801e848 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801e77e:	4618      	mov	r0, r3
 801e780:	f7f0 fc78 	bl	800f074 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801e784:	68fb      	ldr	r3, [r7, #12]
 801e786:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e78a:	f107 0320 	add.w	r3, r7, #32
 801e78e:	492f      	ldr	r1, [pc, #188]	; (801e84c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801e790:	4618      	mov	r0, r3
 801e792:	f7f0 f828 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801e796:	f107 0318 	add.w	r3, r7, #24
 801e79a:	f107 0220 	add.w	r2, r7, #32
 801e79e:	f107 0110 	add.w	r1, r7, #16
 801e7a2:	4618      	mov	r0, r3
 801e7a4:	f7ff fd4a 	bl	801e23c <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801e7a8:	f107 0318 	add.w	r3, r7, #24
 801e7ac:	4619      	mov	r1, r3
 801e7ae:	4620      	mov	r0, r4
 801e7b0:	f7f0 fc4e 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801e7b4:	f107 0318 	add.w	r3, r7, #24
 801e7b8:	4618      	mov	r0, r3
 801e7ba:	f7f0 fbcc 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801e7be:	f107 0320 	add.w	r3, r7, #32
 801e7c2:	4618      	mov	r0, r3
 801e7c4:	f7f0 fbc7 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801e7c8:	68fb      	ldr	r3, [r7, #12]
 801e7ca:	332c      	adds	r3, #44	; 0x2c
 801e7cc:	4920      	ldr	r1, [pc, #128]	; (801e850 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801e7ce:	4618      	mov	r0, r3
 801e7d0:	f7f0 fc50 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801e7d4:	68fb      	ldr	r3, [r7, #12]
 801e7d6:	332c      	adds	r3, #44	; 0x2c
 801e7d8:	68b9      	ldr	r1, [r7, #8]
 801e7da:	4618      	mov	r0, r3
 801e7dc:	f7f0 fc38 	bl	800f050 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801e7e0:	68fb      	ldr	r3, [r7, #12]
 801e7e2:	332c      	adds	r3, #44	; 0x2c
 801e7e4:	4918      	ldr	r1, [pc, #96]	; (801e848 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801e7e6:	4618      	mov	r0, r3
 801e7e8:	f7f0 fc44 	bl	800f074 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801e7ec:	68fb      	ldr	r3, [r7, #12]
 801e7ee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e7f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e7f6:	4915      	ldr	r1, [pc, #84]	; (801e84c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801e7f8:	4618      	mov	r0, r3
 801e7fa:	f7ef fff4 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801e7fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e802:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801e806:	f107 0110 	add.w	r1, r7, #16
 801e80a:	4618      	mov	r0, r3
 801e80c:	f7ff fd74 	bl	801e2f8 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801e810:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e814:	4619      	mov	r1, r3
 801e816:	4620      	mov	r0, r4
 801e818:	f7f0 fc1a 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801e81c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e820:	4618      	mov	r0, r3
 801e822:	f7f0 fb98 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801e826:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e82a:	4618      	mov	r0, r3
 801e82c:	f7f0 fb93 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801e830:	f107 0310 	add.w	r3, r7, #16
 801e834:	4618      	mov	r0, r3
 801e836:	f7ff f817 	bl	801d868 <_ZN21MockExpectedCallsListD1Ev>
}
 801e83a:	bf00      	nop
 801e83c:	373c      	adds	r7, #60	; 0x3c
 801e83e:	46bd      	mov	sp, r7
 801e840:	bd90      	pop	{r4, r7, pc}
 801e842:	bf00      	nop
 801e844:	080284f8 	.word	0x080284f8
 801e848:	08028538 	.word	0x08028538
 801e84c:	080284cc 	.word	0x080284cc
 801e850:	0802853c 	.word	0x0802853c

0801e854 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801e854:	b590      	push	{r4, r7, lr}
 801e856:	b087      	sub	sp, #28
 801e858:	af00      	add	r7, sp, #0
 801e85a:	60f8      	str	r0, [r7, #12]
 801e85c:	60b9      	str	r1, [r7, #8]
 801e85e:	607a      	str	r2, [r7, #4]
 801e860:	68fb      	ldr	r3, [r7, #12]
 801e862:	68b9      	ldr	r1, [r7, #8]
 801e864:	4618      	mov	r0, r3
 801e866:	f7ff fee1 	bl	801e62c <_ZN11MockFailureC1EP10UtestShell>
 801e86a:	4a10      	ldr	r2, [pc, #64]	; (801e8ac <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801e86c:	68fb      	ldr	r3, [r7, #12]
 801e86e:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801e870:	68fb      	ldr	r3, [r7, #12]
 801e872:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e876:	f107 0310 	add.w	r3, r7, #16
 801e87a:	490d      	ldr	r1, [pc, #52]	; (801e8b0 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801e87c:	4618      	mov	r0, r3
 801e87e:	f7ef ffb2 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801e882:	f107 0310 	add.w	r3, r7, #16
 801e886:	4619      	mov	r1, r3
 801e888:	4620      	mov	r0, r4
 801e88a:	f7f0 f818 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801e88e:	f107 0310 	add.w	r3, r7, #16
 801e892:	4618      	mov	r0, r3
 801e894:	f7f0 fb5f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801e898:	68fb      	ldr	r3, [r7, #12]
 801e89a:	6879      	ldr	r1, [r7, #4]
 801e89c:	4618      	mov	r0, r3
 801e89e:	f7ff fee9 	bl	801e674 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801e8a2:	68fb      	ldr	r3, [r7, #12]
 801e8a4:	4618      	mov	r0, r3
 801e8a6:	371c      	adds	r7, #28
 801e8a8:	46bd      	mov	sp, r7
 801e8aa:	bd90      	pop	{r4, r7, pc}
 801e8ac:	0802a860 	.word	0x0802a860
 801e8b0:	08028578 	.word	0x08028578

0801e8b4 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801e8b4:	b590      	push	{r4, r7, lr}
 801e8b6:	b08d      	sub	sp, #52	; 0x34
 801e8b8:	af00      	add	r7, sp, #0
 801e8ba:	60f8      	str	r0, [r7, #12]
 801e8bc:	60b9      	str	r1, [r7, #8]
 801e8be:	607a      	str	r2, [r7, #4]
 801e8c0:	603b      	str	r3, [r7, #0]
 801e8c2:	68fb      	ldr	r3, [r7, #12]
 801e8c4:	68b9      	ldr	r1, [r7, #8]
 801e8c6:	4618      	mov	r0, r3
 801e8c8:	f7ff feb0 	bl	801e62c <_ZN11MockFailureC1EP10UtestShell>
 801e8cc:	4a2f      	ldr	r2, [pc, #188]	; (801e98c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801e8ce:	68fb      	ldr	r3, [r7, #12]
 801e8d0:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801e8d2:	683b      	ldr	r3, [r7, #0]
 801e8d4:	681b      	ldr	r3, [r3, #0]
 801e8d6:	3310      	adds	r3, #16
 801e8d8:	681b      	ldr	r3, [r3, #0]
 801e8da:	6879      	ldr	r1, [r7, #4]
 801e8dc:	6838      	ldr	r0, [r7, #0]
 801e8de:	4798      	blx	r3
 801e8e0:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801e8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e8e4:	2b00      	cmp	r3, #0
 801e8e6:	d027      	beq.n	801e938 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801e8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e8ea:	1c5a      	adds	r2, r3, #1
 801e8ec:	f107 0314 	add.w	r3, r7, #20
 801e8f0:	4611      	mov	r1, r2
 801e8f2:	4618      	mov	r0, r3
 801e8f4:	f7f1 fa00 	bl	800fcf8 <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801e8f8:	68fb      	ldr	r3, [r7, #12]
 801e8fa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e8fe:	f107 0314 	add.w	r3, r7, #20
 801e902:	4618      	mov	r0, r3
 801e904:	f7f0 fafa 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801e908:	4602      	mov	r2, r0
 801e90a:	f107 031c 	add.w	r3, r7, #28
 801e90e:	4920      	ldr	r1, [pc, #128]	; (801e990 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801e910:	4618      	mov	r0, r3
 801e912:	f7f1 f827 	bl	800f964 <_Z16StringFromFormatPKcz>
 801e916:	f107 031c 	add.w	r3, r7, #28
 801e91a:	4619      	mov	r1, r3
 801e91c:	4620      	mov	r0, r4
 801e91e:	f7ef ffce 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801e922:	f107 031c 	add.w	r3, r7, #28
 801e926:	4618      	mov	r0, r3
 801e928:	f7f0 fb15 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801e92c:	f107 0314 	add.w	r3, r7, #20
 801e930:	4618      	mov	r0, r3
 801e932:	f7f0 fb10 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801e936:	e013      	b.n	801e960 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801e938:	68fb      	ldr	r3, [r7, #12]
 801e93a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e93e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e942:	4914      	ldr	r1, [pc, #80]	; (801e994 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801e944:	4618      	mov	r0, r3
 801e946:	f7ef ff4e 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801e94a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e94e:	4619      	mov	r1, r3
 801e950:	4620      	mov	r0, r4
 801e952:	f7ef ffb4 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801e956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e95a:	4618      	mov	r0, r3
 801e95c:	f7f0 fafb 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801e960:	68fb      	ldr	r3, [r7, #12]
 801e962:	332c      	adds	r3, #44	; 0x2c
 801e964:	6879      	ldr	r1, [r7, #4]
 801e966:	4618      	mov	r0, r3
 801e968:	f7f0 fb72 	bl	800f050 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801e96c:	68fb      	ldr	r3, [r7, #12]
 801e96e:	332c      	adds	r3, #44	; 0x2c
 801e970:	4909      	ldr	r1, [pc, #36]	; (801e998 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801e972:	4618      	mov	r0, r3
 801e974:	f7f0 fb7e 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801e978:	68fb      	ldr	r3, [r7, #12]
 801e97a:	6839      	ldr	r1, [r7, #0]
 801e97c:	4618      	mov	r0, r3
 801e97e:	f7ff fe79 	bl	801e674 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801e982:	68fb      	ldr	r3, [r7, #12]
 801e984:	4618      	mov	r0, r3
 801e986:	3734      	adds	r7, #52	; 0x34
 801e988:	46bd      	mov	sp, r7
 801e98a:	bd90      	pop	{r4, r7, pc}
 801e98c:	0802b200 	.word	0x0802b200
 801e990:	080285a8 	.word	0x080285a8
 801e994:	080285e4 	.word	0x080285e4
 801e998:	08028538 	.word	0x08028538

0801e99c <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801e99c:	b590      	push	{r4, r7, lr}
 801e99e:	b089      	sub	sp, #36	; 0x24
 801e9a0:	af00      	add	r7, sp, #0
 801e9a2:	60f8      	str	r0, [r7, #12]
 801e9a4:	60b9      	str	r1, [r7, #8]
 801e9a6:	607a      	str	r2, [r7, #4]
 801e9a8:	68fb      	ldr	r3, [r7, #12]
 801e9aa:	68b9      	ldr	r1, [r7, #8]
 801e9ac:	4618      	mov	r0, r3
 801e9ae:	f7ff fe3d 	bl	801e62c <_ZN11MockFailureC1EP10UtestShell>
 801e9b2:	4a1f      	ldr	r2, [pc, #124]	; (801ea30 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801e9b4:	68fb      	ldr	r3, [r7, #12]
 801e9b6:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801e9b8:	f107 0310 	add.w	r3, r7, #16
 801e9bc:	4618      	mov	r0, r3
 801e9be:	f7fe ff3f 	bl	801d840 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801e9c2:	f107 0310 	add.w	r3, r7, #16
 801e9c6:	6879      	ldr	r1, [r7, #4]
 801e9c8:	4618      	mov	r0, r3
 801e9ca:	f7ff f909 	bl	801dbe0 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801e9ce:	f107 0310 	add.w	r3, r7, #16
 801e9d2:	4618      	mov	r0, r3
 801e9d4:	f7ff f94c 	bl	801dc70 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801e9d8:	68fb      	ldr	r3, [r7, #12]
 801e9da:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e9de:	f107 0318 	add.w	r3, r7, #24
 801e9e2:	4914      	ldr	r1, [pc, #80]	; (801ea34 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801e9e4:	4618      	mov	r0, r3
 801e9e6:	f7ef fefe 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801e9ea:	f107 0318 	add.w	r3, r7, #24
 801e9ee:	4619      	mov	r1, r3
 801e9f0:	4620      	mov	r0, r4
 801e9f2:	f7ef ff64 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801e9f6:	f107 0318 	add.w	r3, r7, #24
 801e9fa:	4618      	mov	r0, r3
 801e9fc:	f7f0 faab 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801ea00:	68fb      	ldr	r3, [r7, #12]
 801ea02:	332c      	adds	r3, #44	; 0x2c
 801ea04:	490c      	ldr	r1, [pc, #48]	; (801ea38 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801ea06:	4618      	mov	r0, r3
 801ea08:	f7f0 fb34 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801ea0c:	68fb      	ldr	r3, [r7, #12]
 801ea0e:	f107 0210 	add.w	r2, r7, #16
 801ea12:	4611      	mov	r1, r2
 801ea14:	4618      	mov	r0, r3
 801ea16:	f7ff fe2d 	bl	801e674 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801ea1a:	f107 0310 	add.w	r3, r7, #16
 801ea1e:	4618      	mov	r0, r3
 801ea20:	f7fe ff22 	bl	801d868 <_ZN21MockExpectedCallsListD1Ev>
}
 801ea24:	68fb      	ldr	r3, [r7, #12]
 801ea26:	4618      	mov	r0, r3
 801ea28:	3724      	adds	r7, #36	; 0x24
 801ea2a:	46bd      	mov	sp, r7
 801ea2c:	bd90      	pop	{r4, r7, pc}
 801ea2e:	bf00      	nop
 801ea30:	0802a834 	.word	0x0802a834
 801ea34:	08028610 	.word	0x08028610
 801ea38:	08028538 	.word	0x08028538

0801ea3c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801ea3c:	b590      	push	{r4, r7, lr}
 801ea3e:	b099      	sub	sp, #100	; 0x64
 801ea40:	af00      	add	r7, sp, #0
 801ea42:	60f8      	str	r0, [r7, #12]
 801ea44:	60b9      	str	r1, [r7, #8]
 801ea46:	607a      	str	r2, [r7, #4]
 801ea48:	603b      	str	r3, [r7, #0]
 801ea4a:	68fb      	ldr	r3, [r7, #12]
 801ea4c:	68b9      	ldr	r1, [r7, #8]
 801ea4e:	4618      	mov	r0, r3
 801ea50:	f7ff fdec 	bl	801e62c <_ZN11MockFailureC1EP10UtestShell>
 801ea54:	4a9e      	ldr	r2, [pc, #632]	; (801ecd0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801ea56:	68fb      	ldr	r3, [r7, #12]
 801ea58:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801ea5a:	f107 0310 	add.w	r3, r7, #16
 801ea5e:	4618      	mov	r0, r3
 801ea60:	f7fe feee 	bl	801d840 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801ea64:	f107 0310 	add.w	r3, r7, #16
 801ea68:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801ea6a:	6879      	ldr	r1, [r7, #4]
 801ea6c:	4618      	mov	r0, r3
 801ea6e:	f7ff f88d 	bl	801db8c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801ea72:	683b      	ldr	r3, [r7, #0]
 801ea74:	681b      	ldr	r3, [r3, #0]
 801ea76:	335c      	adds	r3, #92	; 0x5c
 801ea78:	681b      	ldr	r3, [r3, #0]
 801ea7a:	f107 0218 	add.w	r2, r7, #24
 801ea7e:	6839      	ldr	r1, [r7, #0]
 801ea80:	4610      	mov	r0, r2
 801ea82:	4798      	blx	r3
 801ea84:	f107 0218 	add.w	r2, r7, #24
 801ea88:	f107 0310 	add.w	r3, r7, #16
 801ea8c:	4611      	mov	r1, r2
 801ea8e:	4618      	mov	r0, r3
 801ea90:	f7ff f948 	bl	801dd24 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801ea94:	f107 0318 	add.w	r3, r7, #24
 801ea98:	4618      	mov	r0, r3
 801ea9a:	f7f0 fa5c 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801ea9e:	f107 0310 	add.w	r3, r7, #16
 801eaa2:	4618      	mov	r0, r3
 801eaa4:	f7fe ff4d 	bl	801d942 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801eaa8:	4603      	mov	r3, r0
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	d037      	beq.n	801eb1e <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801eaae:	68fb      	ldr	r3, [r7, #12]
 801eab0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801eab4:	f107 0320 	add.w	r3, r7, #32
 801eab8:	4986      	ldr	r1, [pc, #536]	; (801ecd4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801eaba:	4618      	mov	r0, r3
 801eabc:	f7ef fe93 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801eac0:	f107 0320 	add.w	r3, r7, #32
 801eac4:	4619      	mov	r1, r3
 801eac6:	4620      	mov	r0, r4
 801eac8:	f7ef fef9 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801eacc:	f107 0320 	add.w	r3, r7, #32
 801ead0:	4618      	mov	r0, r3
 801ead2:	f7f0 fa40 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801ead6:	68fb      	ldr	r3, [r7, #12]
 801ead8:	332c      	adds	r3, #44	; 0x2c
 801eada:	6879      	ldr	r1, [r7, #4]
 801eadc:	4618      	mov	r0, r3
 801eade:	f7f0 fab7 	bl	800f050 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801eae2:	68fb      	ldr	r3, [r7, #12]
 801eae4:	332c      	adds	r3, #44	; 0x2c
 801eae6:	497c      	ldr	r1, [pc, #496]	; (801ecd8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801eae8:	4618      	mov	r0, r3
 801eaea:	f7f0 fac3 	bl	800f074 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801eaee:	68fb      	ldr	r3, [r7, #12]
 801eaf0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801eaf4:	683b      	ldr	r3, [r7, #0]
 801eaf6:	681b      	ldr	r3, [r3, #0]
 801eaf8:	335c      	adds	r3, #92	; 0x5c
 801eafa:	681b      	ldr	r3, [r3, #0]
 801eafc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801eb00:	6839      	ldr	r1, [r7, #0]
 801eb02:	4610      	mov	r0, r2
 801eb04:	4798      	blx	r3
 801eb06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801eb0a:	4619      	mov	r1, r3
 801eb0c:	4620      	mov	r0, r4
 801eb0e:	f7f0 fa9f 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801eb12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801eb16:	4618      	mov	r0, r3
 801eb18:	f7f0 fa1d 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801eb1c:	e056      	b.n	801ebcc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801eb1e:	68fb      	ldr	r3, [r7, #12]
 801eb20:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801eb24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801eb28:	496c      	ldr	r1, [pc, #432]	; (801ecdc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801eb2a:	4618      	mov	r0, r3
 801eb2c:	f7ef fe5b 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801eb30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801eb34:	4619      	mov	r1, r3
 801eb36:	4620      	mov	r0, r4
 801eb38:	f7ef fec1 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801eb3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801eb40:	4618      	mov	r0, r3
 801eb42:	f7f0 fa08 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801eb46:	68fb      	ldr	r3, [r7, #12]
 801eb48:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801eb4c:	683b      	ldr	r3, [r7, #0]
 801eb4e:	681b      	ldr	r3, [r3, #0]
 801eb50:	335c      	adds	r3, #92	; 0x5c
 801eb52:	681b      	ldr	r3, [r3, #0]
 801eb54:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801eb58:	6839      	ldr	r1, [r7, #0]
 801eb5a:	4610      	mov	r0, r2
 801eb5c:	4798      	blx	r3
 801eb5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801eb62:	4619      	mov	r1, r3
 801eb64:	4620      	mov	r0, r4
 801eb66:	f7f0 fa73 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801eb6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801eb6e:	4618      	mov	r0, r3
 801eb70:	f7f0 f9f1 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801eb74:	68fb      	ldr	r3, [r7, #12]
 801eb76:	332c      	adds	r3, #44	; 0x2c
 801eb78:	4959      	ldr	r1, [pc, #356]	; (801ece0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801eb7a:	4618      	mov	r0, r3
 801eb7c:	f7f0 fa7a 	bl	800f074 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801eb80:	68fb      	ldr	r3, [r7, #12]
 801eb82:	332c      	adds	r3, #44	; 0x2c
 801eb84:	6879      	ldr	r1, [r7, #4]
 801eb86:	4618      	mov	r0, r3
 801eb88:	f7f0 fa62 	bl	800f050 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801eb8c:	68fb      	ldr	r3, [r7, #12]
 801eb8e:	332c      	adds	r3, #44	; 0x2c
 801eb90:	4954      	ldr	r1, [pc, #336]	; (801ece4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801eb92:	4618      	mov	r0, r3
 801eb94:	f7f0 fa6e 	bl	800f074 <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801eb98:	68fb      	ldr	r3, [r7, #12]
 801eb9a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801eb9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801eba2:	6839      	ldr	r1, [r7, #0]
 801eba4:	4618      	mov	r0, r3
 801eba6:	f7fd faa3 	bl	801c0f0 <_Z10StringFromRK14MockNamedValue>
 801ebaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ebae:	4619      	mov	r1, r3
 801ebb0:	4620      	mov	r0, r4
 801ebb2:	f7f0 fa4d 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801ebb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ebba:	4618      	mov	r0, r3
 801ebbc:	f7f0 f9cb 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801ebc0:	68fb      	ldr	r3, [r7, #12]
 801ebc2:	332c      	adds	r3, #44	; 0x2c
 801ebc4:	4948      	ldr	r1, [pc, #288]	; (801ece8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801ebc6:	4618      	mov	r0, r3
 801ebc8:	f7f0 fa54 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801ebcc:	68fb      	ldr	r3, [r7, #12]
 801ebce:	332c      	adds	r3, #44	; 0x2c
 801ebd0:	4946      	ldr	r1, [pc, #280]	; (801ecec <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801ebd2:	4618      	mov	r0, r3
 801ebd4:	f7f0 fa4e 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801ebd8:	68fb      	ldr	r3, [r7, #12]
 801ebda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801ebdc:	6879      	ldr	r1, [r7, #4]
 801ebde:	4618      	mov	r0, r3
 801ebe0:	f7ff fdac 	bl	801e73c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801ebe4:	68fb      	ldr	r3, [r7, #12]
 801ebe6:	332c      	adds	r3, #44	; 0x2c
 801ebe8:	4941      	ldr	r1, [pc, #260]	; (801ecf0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801ebea:	4618      	mov	r0, r3
 801ebec:	f7f0 fa42 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801ebf0:	68fb      	ldr	r3, [r7, #12]
 801ebf2:	332c      	adds	r3, #44	; 0x2c
 801ebf4:	6879      	ldr	r1, [r7, #4]
 801ebf6:	4618      	mov	r0, r3
 801ebf8:	f7f0 fa2a 	bl	800f050 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801ebfc:	68fb      	ldr	r3, [r7, #12]
 801ebfe:	332c      	adds	r3, #44	; 0x2c
 801ec00:	493a      	ldr	r1, [pc, #232]	; (801ecec <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801ec02:	4618      	mov	r0, r3
 801ec04:	f7f0 fa36 	bl	800f074 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801ec08:	68fb      	ldr	r3, [r7, #12]
 801ec0a:	332c      	adds	r3, #44	; 0x2c
 801ec0c:	4939      	ldr	r1, [pc, #228]	; (801ecf4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801ec0e:	4618      	mov	r0, r3
 801ec10:	f7f0 fa30 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801ec14:	68fb      	ldr	r3, [r7, #12]
 801ec16:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ec1a:	683b      	ldr	r3, [r7, #0]
 801ec1c:	681b      	ldr	r3, [r3, #0]
 801ec1e:	3360      	adds	r3, #96	; 0x60
 801ec20:	681b      	ldr	r3, [r3, #0]
 801ec22:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801ec26:	6839      	ldr	r1, [r7, #0]
 801ec28:	4610      	mov	r0, r2
 801ec2a:	4798      	blx	r3
 801ec2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ec30:	4619      	mov	r1, r3
 801ec32:	4620      	mov	r0, r4
 801ec34:	f7f0 fa0c 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801ec38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ec3c:	4618      	mov	r0, r3
 801ec3e:	f7f0 f98a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801ec42:	68fb      	ldr	r3, [r7, #12]
 801ec44:	332c      	adds	r3, #44	; 0x2c
 801ec46:	492c      	ldr	r1, [pc, #176]	; (801ecf8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801ec48:	4618      	mov	r0, r3
 801ec4a:	f7f0 fa13 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801ec4e:	68fb      	ldr	r3, [r7, #12]
 801ec50:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ec54:	683b      	ldr	r3, [r7, #0]
 801ec56:	681b      	ldr	r3, [r3, #0]
 801ec58:	335c      	adds	r3, #92	; 0x5c
 801ec5a:	681b      	ldr	r3, [r3, #0]
 801ec5c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801ec60:	6839      	ldr	r1, [r7, #0]
 801ec62:	4610      	mov	r0, r2
 801ec64:	4798      	blx	r3
 801ec66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ec6a:	4619      	mov	r1, r3
 801ec6c:	4620      	mov	r0, r4
 801ec6e:	f7f0 f9ef 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801ec72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ec76:	4618      	mov	r0, r3
 801ec78:	f7f0 f96d 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801ec7c:	68fb      	ldr	r3, [r7, #12]
 801ec7e:	332c      	adds	r3, #44	; 0x2c
 801ec80:	491e      	ldr	r1, [pc, #120]	; (801ecfc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801ec82:	4618      	mov	r0, r3
 801ec84:	f7f0 f9f6 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801ec88:	68fb      	ldr	r3, [r7, #12]
 801ec8a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ec8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ec92:	6839      	ldr	r1, [r7, #0]
 801ec94:	4618      	mov	r0, r3
 801ec96:	f7fd fa2b 	bl	801c0f0 <_Z10StringFromRK14MockNamedValue>
 801ec9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ec9e:	4619      	mov	r1, r3
 801eca0:	4620      	mov	r0, r4
 801eca2:	f7f0 f9d5 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801eca6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ecaa:	4618      	mov	r0, r3
 801ecac:	f7f0 f953 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801ecb0:	68fb      	ldr	r3, [r7, #12]
 801ecb2:	332c      	adds	r3, #44	; 0x2c
 801ecb4:	490c      	ldr	r1, [pc, #48]	; (801ece8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801ecb6:	4618      	mov	r0, r3
 801ecb8:	f7f0 f9dc 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801ecbc:	f107 0310 	add.w	r3, r7, #16
 801ecc0:	4618      	mov	r0, r3
 801ecc2:	f7fe fdd1 	bl	801d868 <_ZN21MockExpectedCallsListD1Ev>
}
 801ecc6:	68fb      	ldr	r3, [r7, #12]
 801ecc8:	4618      	mov	r0, r3
 801ecca:	3764      	adds	r7, #100	; 0x64
 801eccc:	46bd      	mov	sp, r7
 801ecce:	bd90      	pop	{r4, r7, pc}
 801ecd0:	0802b1d4 	.word	0x0802b1d4
 801ecd4:	08028634 	.word	0x08028634
 801ecd8:	0802866c 	.word	0x0802866c
 801ecdc:	08028670 	.word	0x08028670
 801ece0:	080286a8 	.word	0x080286a8
 801ece4:	080286b8 	.word	0x080286b8
 801ece8:	080286c0 	.word	0x080286c0
 801ecec:	08028538 	.word	0x08028538
 801ecf0:	080286c4 	.word	0x080286c4
 801ecf4:	080284cc 	.word	0x080284cc
 801ecf8:	080286f8 	.word	0x080286f8
 801ecfc:	080286fc 	.word	0x080286fc

0801ed00 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801ed00:	b590      	push	{r4, r7, lr}
 801ed02:	b097      	sub	sp, #92	; 0x5c
 801ed04:	af00      	add	r7, sp, #0
 801ed06:	60f8      	str	r0, [r7, #12]
 801ed08:	60b9      	str	r1, [r7, #8]
 801ed0a:	607a      	str	r2, [r7, #4]
 801ed0c:	603b      	str	r3, [r7, #0]
 801ed0e:	68fb      	ldr	r3, [r7, #12]
 801ed10:	68b9      	ldr	r1, [r7, #8]
 801ed12:	4618      	mov	r0, r3
 801ed14:	f7ff fc8a 	bl	801e62c <_ZN11MockFailureC1EP10UtestShell>
 801ed18:	4a90      	ldr	r2, [pc, #576]	; (801ef5c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801ed1a:	68fb      	ldr	r3, [r7, #12]
 801ed1c:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801ed1e:	f107 0310 	add.w	r3, r7, #16
 801ed22:	4618      	mov	r0, r3
 801ed24:	f7fe fd8c 	bl	801d840 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801ed28:	f107 0310 	add.w	r3, r7, #16
 801ed2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801ed2e:	6879      	ldr	r1, [r7, #4]
 801ed30:	4618      	mov	r0, r3
 801ed32:	f7fe ff2b 	bl	801db8c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801ed36:	683b      	ldr	r3, [r7, #0]
 801ed38:	681b      	ldr	r3, [r3, #0]
 801ed3a:	335c      	adds	r3, #92	; 0x5c
 801ed3c:	681b      	ldr	r3, [r3, #0]
 801ed3e:	f107 0218 	add.w	r2, r7, #24
 801ed42:	6839      	ldr	r1, [r7, #0]
 801ed44:	4610      	mov	r0, r2
 801ed46:	4798      	blx	r3
 801ed48:	f107 0218 	add.w	r2, r7, #24
 801ed4c:	f107 0310 	add.w	r3, r7, #16
 801ed50:	4611      	mov	r1, r2
 801ed52:	4618      	mov	r0, r3
 801ed54:	f7ff f812 	bl	801dd7c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801ed58:	f107 0318 	add.w	r3, r7, #24
 801ed5c:	4618      	mov	r0, r3
 801ed5e:	f7f0 f8fa 	bl	800ef56 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801ed62:	f107 0310 	add.w	r3, r7, #16
 801ed66:	4618      	mov	r0, r3
 801ed68:	f7fe fdeb 	bl	801d942 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801ed6c:	4603      	mov	r3, r0
 801ed6e:	2b00      	cmp	r3, #0
 801ed70:	d037      	beq.n	801ede2 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801ed72:	68fb      	ldr	r3, [r7, #12]
 801ed74:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ed78:	f107 0320 	add.w	r3, r7, #32
 801ed7c:	4978      	ldr	r1, [pc, #480]	; (801ef60 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801ed7e:	4618      	mov	r0, r3
 801ed80:	f7ef fd31 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801ed84:	f107 0320 	add.w	r3, r7, #32
 801ed88:	4619      	mov	r1, r3
 801ed8a:	4620      	mov	r0, r4
 801ed8c:	f7ef fd97 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801ed90:	f107 0320 	add.w	r3, r7, #32
 801ed94:	4618      	mov	r0, r3
 801ed96:	f7f0 f8de 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801ed9a:	68fb      	ldr	r3, [r7, #12]
 801ed9c:	332c      	adds	r3, #44	; 0x2c
 801ed9e:	6879      	ldr	r1, [r7, #4]
 801eda0:	4618      	mov	r0, r3
 801eda2:	f7f0 f955 	bl	800f050 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801eda6:	68fb      	ldr	r3, [r7, #12]
 801eda8:	332c      	adds	r3, #44	; 0x2c
 801edaa:	496e      	ldr	r1, [pc, #440]	; (801ef64 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801edac:	4618      	mov	r0, r3
 801edae:	f7f0 f961 	bl	800f074 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801edb2:	68fb      	ldr	r3, [r7, #12]
 801edb4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801edb8:	683b      	ldr	r3, [r7, #0]
 801edba:	681b      	ldr	r3, [r3, #0]
 801edbc:	335c      	adds	r3, #92	; 0x5c
 801edbe:	681b      	ldr	r3, [r3, #0]
 801edc0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801edc4:	6839      	ldr	r1, [r7, #0]
 801edc6:	4610      	mov	r0, r2
 801edc8:	4798      	blx	r3
 801edca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801edce:	4619      	mov	r1, r3
 801edd0:	4620      	mov	r0, r4
 801edd2:	f7f0 f93d 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801edd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801edda:	4618      	mov	r0, r3
 801eddc:	f7f0 f8bb 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801ede0:	e059      	b.n	801ee96 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801ede2:	68fb      	ldr	r3, [r7, #12]
 801ede4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ede8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801edec:	495e      	ldr	r1, [pc, #376]	; (801ef68 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801edee:	4618      	mov	r0, r3
 801edf0:	f7ef fcf9 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801edf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801edf8:	4619      	mov	r1, r3
 801edfa:	4620      	mov	r0, r4
 801edfc:	f7ef fd5f 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801ee00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ee04:	4618      	mov	r0, r3
 801ee06:	f7f0 f8a6 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801ee0a:	68fb      	ldr	r3, [r7, #12]
 801ee0c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ee10:	683b      	ldr	r3, [r7, #0]
 801ee12:	681b      	ldr	r3, [r3, #0]
 801ee14:	3360      	adds	r3, #96	; 0x60
 801ee16:	681b      	ldr	r3, [r3, #0]
 801ee18:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801ee1c:	6839      	ldr	r1, [r7, #0]
 801ee1e:	4610      	mov	r0, r2
 801ee20:	4798      	blx	r3
 801ee22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ee26:	4619      	mov	r1, r3
 801ee28:	4620      	mov	r0, r4
 801ee2a:	f7f0 f911 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801ee2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ee32:	4618      	mov	r0, r3
 801ee34:	f7f0 f88f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801ee38:	68fb      	ldr	r3, [r7, #12]
 801ee3a:	332c      	adds	r3, #44	; 0x2c
 801ee3c:	494b      	ldr	r1, [pc, #300]	; (801ef6c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801ee3e:	4618      	mov	r0, r3
 801ee40:	f7f0 f918 	bl	800f074 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801ee44:	68fb      	ldr	r3, [r7, #12]
 801ee46:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ee4a:	683b      	ldr	r3, [r7, #0]
 801ee4c:	681b      	ldr	r3, [r3, #0]
 801ee4e:	335c      	adds	r3, #92	; 0x5c
 801ee50:	681b      	ldr	r3, [r3, #0]
 801ee52:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801ee56:	6839      	ldr	r1, [r7, #0]
 801ee58:	4610      	mov	r0, r2
 801ee5a:	4798      	blx	r3
 801ee5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ee60:	4619      	mov	r1, r3
 801ee62:	4620      	mov	r0, r4
 801ee64:	f7f0 f8f4 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801ee68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ee6c:	4618      	mov	r0, r3
 801ee6e:	f7f0 f872 	bl	800ef56 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801ee72:	68fb      	ldr	r3, [r7, #12]
 801ee74:	332c      	adds	r3, #44	; 0x2c
 801ee76:	493e      	ldr	r1, [pc, #248]	; (801ef70 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801ee78:	4618      	mov	r0, r3
 801ee7a:	f7f0 f8fb 	bl	800f074 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801ee7e:	68fb      	ldr	r3, [r7, #12]
 801ee80:	332c      	adds	r3, #44	; 0x2c
 801ee82:	6879      	ldr	r1, [r7, #4]
 801ee84:	4618      	mov	r0, r3
 801ee86:	f7f0 f8e3 	bl	800f050 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801ee8a:	68fb      	ldr	r3, [r7, #12]
 801ee8c:	332c      	adds	r3, #44	; 0x2c
 801ee8e:	4939      	ldr	r1, [pc, #228]	; (801ef74 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801ee90:	4618      	mov	r0, r3
 801ee92:	f7f0 f8ef 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801ee96:	68fb      	ldr	r3, [r7, #12]
 801ee98:	332c      	adds	r3, #44	; 0x2c
 801ee9a:	4937      	ldr	r1, [pc, #220]	; (801ef78 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801ee9c:	4618      	mov	r0, r3
 801ee9e:	f7f0 f8e9 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801eea2:	68fb      	ldr	r3, [r7, #12]
 801eea4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801eea6:	6879      	ldr	r1, [r7, #4]
 801eea8:	4618      	mov	r0, r3
 801eeaa:	f7ff fc47 	bl	801e73c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801eeae:	68fb      	ldr	r3, [r7, #12]
 801eeb0:	332c      	adds	r3, #44	; 0x2c
 801eeb2:	4932      	ldr	r1, [pc, #200]	; (801ef7c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801eeb4:	4618      	mov	r0, r3
 801eeb6:	f7f0 f8dd 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801eeba:	68fb      	ldr	r3, [r7, #12]
 801eebc:	332c      	adds	r3, #44	; 0x2c
 801eebe:	6879      	ldr	r1, [r7, #4]
 801eec0:	4618      	mov	r0, r3
 801eec2:	f7f0 f8c5 	bl	800f050 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801eec6:	68fb      	ldr	r3, [r7, #12]
 801eec8:	332c      	adds	r3, #44	; 0x2c
 801eeca:	492b      	ldr	r1, [pc, #172]	; (801ef78 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801eecc:	4618      	mov	r0, r3
 801eece:	f7f0 f8d1 	bl	800f074 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801eed2:	68fb      	ldr	r3, [r7, #12]
 801eed4:	332c      	adds	r3, #44	; 0x2c
 801eed6:	492a      	ldr	r1, [pc, #168]	; (801ef80 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801eed8:	4618      	mov	r0, r3
 801eeda:	f7f0 f8cb 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801eede:	68fb      	ldr	r3, [r7, #12]
 801eee0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801eee4:	683b      	ldr	r3, [r7, #0]
 801eee6:	681b      	ldr	r3, [r3, #0]
 801eee8:	3360      	adds	r3, #96	; 0x60
 801eeea:	681b      	ldr	r3, [r3, #0]
 801eeec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801eef0:	6839      	ldr	r1, [r7, #0]
 801eef2:	4610      	mov	r0, r2
 801eef4:	4798      	blx	r3
 801eef6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801eefa:	4619      	mov	r1, r3
 801eefc:	4620      	mov	r0, r4
 801eefe:	f7f0 f8a7 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801ef02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ef06:	4618      	mov	r0, r3
 801ef08:	f7f0 f825 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801ef0c:	68fb      	ldr	r3, [r7, #12]
 801ef0e:	332c      	adds	r3, #44	; 0x2c
 801ef10:	491c      	ldr	r1, [pc, #112]	; (801ef84 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801ef12:	4618      	mov	r0, r3
 801ef14:	f7f0 f8ae 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801ef18:	68fb      	ldr	r3, [r7, #12]
 801ef1a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ef1e:	683b      	ldr	r3, [r7, #0]
 801ef20:	681b      	ldr	r3, [r3, #0]
 801ef22:	335c      	adds	r3, #92	; 0x5c
 801ef24:	681b      	ldr	r3, [r3, #0]
 801ef26:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801ef2a:	6839      	ldr	r1, [r7, #0]
 801ef2c:	4610      	mov	r0, r2
 801ef2e:	4798      	blx	r3
 801ef30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ef34:	4619      	mov	r1, r3
 801ef36:	4620      	mov	r0, r4
 801ef38:	f7f0 f88a 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801ef3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ef40:	4618      	mov	r0, r3
 801ef42:	f7f0 f808 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801ef46:	f107 0310 	add.w	r3, r7, #16
 801ef4a:	4618      	mov	r0, r3
 801ef4c:	f7fe fc8c 	bl	801d868 <_ZN21MockExpectedCallsListD1Ev>
}
 801ef50:	68fb      	ldr	r3, [r7, #12]
 801ef52:	4618      	mov	r0, r3
 801ef54:	375c      	adds	r7, #92	; 0x5c
 801ef56:	46bd      	mov	sp, r7
 801ef58:	bd90      	pop	{r4, r7, pc}
 801ef5a:	bf00      	nop
 801ef5c:	0802b1a8 	.word	0x0802b1a8
 801ef60:	08028700 	.word	0x08028700
 801ef64:	0802866c 	.word	0x0802866c
 801ef68:	08028740 	.word	0x08028740
 801ef6c:	0802876c 	.word	0x0802876c
 801ef70:	080286a8 	.word	0x080286a8
 801ef74:	08028784 	.word	0x08028784
 801ef78:	08028538 	.word	0x08028538
 801ef7c:	08028788 	.word	0x08028788
 801ef80:	080284cc 	.word	0x080284cc
 801ef84:	080286f8 	.word	0x080286f8

0801ef88 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801ef88:	b590      	push	{r4, r7, lr}
 801ef8a:	b08b      	sub	sp, #44	; 0x2c
 801ef8c:	af00      	add	r7, sp, #0
 801ef8e:	60f8      	str	r0, [r7, #12]
 801ef90:	60b9      	str	r1, [r7, #8]
 801ef92:	607a      	str	r2, [r7, #4]
 801ef94:	603b      	str	r3, [r7, #0]
 801ef96:	68fb      	ldr	r3, [r7, #12]
 801ef98:	68b9      	ldr	r1, [r7, #8]
 801ef9a:	4618      	mov	r0, r3
 801ef9c:	f7ff fb46 	bl	801e62c <_ZN11MockFailureC1EP10UtestShell>
 801efa0:	4a30      	ldr	r2, [pc, #192]	; (801f064 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801efa2:	68fb      	ldr	r3, [r7, #12]
 801efa4:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801efa6:	f107 0310 	add.w	r3, r7, #16
 801efaa:	4618      	mov	r0, r3
 801efac:	f7fe fc48 	bl	801d840 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801efb0:	f107 0310 	add.w	r3, r7, #16
 801efb4:	683a      	ldr	r2, [r7, #0]
 801efb6:	6879      	ldr	r1, [r7, #4]
 801efb8:	4618      	mov	r0, r3
 801efba:	f7fe fde7 	bl	801db8c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801efbe:	68fb      	ldr	r3, [r7, #12]
 801efc0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801efc4:	f107 0318 	add.w	r3, r7, #24
 801efc8:	4927      	ldr	r1, [pc, #156]	; (801f068 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801efca:	4618      	mov	r0, r3
 801efcc:	f7ef fc0b 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801efd0:	f107 0318 	add.w	r3, r7, #24
 801efd4:	4619      	mov	r1, r3
 801efd6:	4620      	mov	r0, r4
 801efd8:	f7ef fc71 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801efdc:	f107 0318 	add.w	r3, r7, #24
 801efe0:	4618      	mov	r0, r3
 801efe2:	f7ef ffb8 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801efe6:	68fb      	ldr	r3, [r7, #12]
 801efe8:	332c      	adds	r3, #44	; 0x2c
 801efea:	6879      	ldr	r1, [r7, #4]
 801efec:	4618      	mov	r0, r3
 801efee:	f7f0 f82f 	bl	800f050 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801eff2:	68fb      	ldr	r3, [r7, #12]
 801eff4:	332c      	adds	r3, #44	; 0x2c
 801eff6:	491d      	ldr	r1, [pc, #116]	; (801f06c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801eff8:	4618      	mov	r0, r3
 801effa:	f7f0 f83b 	bl	800f074 <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801effe:	68fb      	ldr	r3, [r7, #12]
 801f000:	683a      	ldr	r2, [r7, #0]
 801f002:	6879      	ldr	r1, [r7, #4]
 801f004:	4618      	mov	r0, r3
 801f006:	f7ff fb99 	bl	801e73c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801f00a:	68fb      	ldr	r3, [r7, #12]
 801f00c:	332c      	adds	r3, #44	; 0x2c
 801f00e:	4918      	ldr	r1, [pc, #96]	; (801f070 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801f010:	4618      	mov	r0, r3
 801f012:	f7f0 f82f 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801f016:	68fb      	ldr	r3, [r7, #12]
 801f018:	332c      	adds	r3, #44	; 0x2c
 801f01a:	4916      	ldr	r1, [pc, #88]	; (801f074 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801f01c:	4618      	mov	r0, r3
 801f01e:	f7f0 f829 	bl	800f074 <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801f022:	68fb      	ldr	r3, [r7, #12]
 801f024:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f028:	f107 0320 	add.w	r3, r7, #32
 801f02c:	f107 0210 	add.w	r2, r7, #16
 801f030:	4611      	mov	r1, r2
 801f032:	4618      	mov	r0, r3
 801f034:	f7ff f9bc 	bl	801e3b0 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801f038:	f107 0320 	add.w	r3, r7, #32
 801f03c:	4619      	mov	r1, r3
 801f03e:	4620      	mov	r0, r4
 801f040:	f7f0 f806 	bl	800f050 <_ZN12SimpleStringpLERKS_>
 801f044:	f107 0320 	add.w	r3, r7, #32
 801f048:	4618      	mov	r0, r3
 801f04a:	f7ef ff84 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801f04e:	f107 0310 	add.w	r3, r7, #16
 801f052:	4618      	mov	r0, r3
 801f054:	f7fe fc08 	bl	801d868 <_ZN21MockExpectedCallsListD1Ev>
}
 801f058:	68fb      	ldr	r3, [r7, #12]
 801f05a:	4618      	mov	r0, r3
 801f05c:	372c      	adds	r7, #44	; 0x2c
 801f05e:	46bd      	mov	sp, r7
 801f060:	bd90      	pop	{r4, r7, pc}
 801f062:	bf00      	nop
 801f064:	0802b17c 	.word	0x0802b17c
 801f068:	080287c4 	.word	0x080287c4
 801f06c:	080287f4 	.word	0x080287f4
 801f070:	08028808 	.word	0x08028808
 801f074:	080284cc 	.word	0x080284cc

0801f078 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801f078:	b590      	push	{r4, r7, lr}
 801f07a:	b087      	sub	sp, #28
 801f07c:	af00      	add	r7, sp, #0
 801f07e:	60f8      	str	r0, [r7, #12]
 801f080:	60b9      	str	r1, [r7, #8]
 801f082:	607a      	str	r2, [r7, #4]
 801f084:	68fb      	ldr	r3, [r7, #12]
 801f086:	68b9      	ldr	r1, [r7, #8]
 801f088:	4618      	mov	r0, r3
 801f08a:	f7ff facf 	bl	801e62c <_ZN11MockFailureC1EP10UtestShell>
 801f08e:	4a10      	ldr	r2, [pc, #64]	; (801f0d0 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801f090:	68fb      	ldr	r3, [r7, #12]
 801f092:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801f094:	68fb      	ldr	r3, [r7, #12]
 801f096:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f09a:	6878      	ldr	r0, [r7, #4]
 801f09c:	f7ef ff2e 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801f0a0:	4602      	mov	r2, r0
 801f0a2:	f107 0310 	add.w	r3, r7, #16
 801f0a6:	490b      	ldr	r1, [pc, #44]	; (801f0d4 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801f0a8:	4618      	mov	r0, r3
 801f0aa:	f7f0 fc5b 	bl	800f964 <_Z16StringFromFormatPKcz>
 801f0ae:	f107 0310 	add.w	r3, r7, #16
 801f0b2:	4619      	mov	r1, r3
 801f0b4:	4620      	mov	r0, r4
 801f0b6:	f7ef fc02 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801f0ba:	f107 0310 	add.w	r3, r7, #16
 801f0be:	4618      	mov	r0, r3
 801f0c0:	f7ef ff49 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 801f0c4:	68fb      	ldr	r3, [r7, #12]
 801f0c6:	4618      	mov	r0, r3
 801f0c8:	371c      	adds	r7, #28
 801f0ca:	46bd      	mov	sp, r7
 801f0cc:	bd90      	pop	{r4, r7, pc}
 801f0ce:	bf00      	nop
 801f0d0:	0802b150 	.word	0x0802b150
 801f0d4:	08028834 	.word	0x08028834

0801f0d8 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801f0d8:	b590      	push	{r4, r7, lr}
 801f0da:	b087      	sub	sp, #28
 801f0dc:	af00      	add	r7, sp, #0
 801f0de:	60f8      	str	r0, [r7, #12]
 801f0e0:	60b9      	str	r1, [r7, #8]
 801f0e2:	607a      	str	r2, [r7, #4]
 801f0e4:	68fb      	ldr	r3, [r7, #12]
 801f0e6:	68b9      	ldr	r1, [r7, #8]
 801f0e8:	4618      	mov	r0, r3
 801f0ea:	f7ff fa9f 	bl	801e62c <_ZN11MockFailureC1EP10UtestShell>
 801f0ee:	4a10      	ldr	r2, [pc, #64]	; (801f130 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801f0f0:	68fb      	ldr	r3, [r7, #12]
 801f0f2:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801f0f4:	68fb      	ldr	r3, [r7, #12]
 801f0f6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f0fa:	6878      	ldr	r0, [r7, #4]
 801f0fc:	f7ef fefe 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801f100:	4602      	mov	r2, r0
 801f102:	f107 0310 	add.w	r3, r7, #16
 801f106:	490b      	ldr	r1, [pc, #44]	; (801f134 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801f108:	4618      	mov	r0, r3
 801f10a:	f7f0 fc2b 	bl	800f964 <_Z16StringFromFormatPKcz>
 801f10e:	f107 0310 	add.w	r3, r7, #16
 801f112:	4619      	mov	r1, r3
 801f114:	4620      	mov	r0, r4
 801f116:	f7ef fbd2 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801f11a:	f107 0310 	add.w	r3, r7, #16
 801f11e:	4618      	mov	r0, r3
 801f120:	f7ef ff19 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 801f124:	68fb      	ldr	r3, [r7, #12]
 801f126:	4618      	mov	r0, r3
 801f128:	371c      	adds	r7, #28
 801f12a:	46bd      	mov	sp, r7
 801f12c:	bd90      	pop	{r4, r7, pc}
 801f12e:	bf00      	nop
 801f130:	0802b124 	.word	0x0802b124
 801f134:	0802888c 	.word	0x0802888c

0801f138 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801f138:	b590      	push	{r4, r7, lr}
 801f13a:	b087      	sub	sp, #28
 801f13c:	af00      	add	r7, sp, #0
 801f13e:	60f8      	str	r0, [r7, #12]
 801f140:	60b9      	str	r1, [r7, #8]
 801f142:	607a      	str	r2, [r7, #4]
 801f144:	603b      	str	r3, [r7, #0]
 801f146:	68fb      	ldr	r3, [r7, #12]
 801f148:	68b9      	ldr	r1, [r7, #8]
 801f14a:	4618      	mov	r0, r3
 801f14c:	f7ff fa6e 	bl	801e62c <_ZN11MockFailureC1EP10UtestShell>
 801f150:	4a12      	ldr	r2, [pc, #72]	; (801f19c <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801f152:	68fb      	ldr	r3, [r7, #12]
 801f154:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801f156:	68fb      	ldr	r3, [r7, #12]
 801f158:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801f15c:	6878      	ldr	r0, [r7, #4]
 801f15e:	f7ef fecd 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801f162:	4602      	mov	r2, r0
 801f164:	f107 0010 	add.w	r0, r7, #16
 801f168:	683b      	ldr	r3, [r7, #0]
 801f16a:	490d      	ldr	r1, [pc, #52]	; (801f1a0 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801f16c:	f7f0 fbfa 	bl	800f964 <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801f170:	f107 0310 	add.w	r3, r7, #16
 801f174:	4619      	mov	r1, r3
 801f176:	4620      	mov	r0, r4
 801f178:	f7ef fba1 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801f17c:	f107 0310 	add.w	r3, r7, #16
 801f180:	4618      	mov	r0, r3
 801f182:	f7ef fee8 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801f186:	68fb      	ldr	r3, [r7, #12]
 801f188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f18a:	6879      	ldr	r1, [r7, #4]
 801f18c:	4618      	mov	r0, r3
 801f18e:	f7ff fad5 	bl	801e73c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801f192:	68fb      	ldr	r3, [r7, #12]
 801f194:	4618      	mov	r0, r3
 801f196:	371c      	adds	r7, #28
 801f198:	46bd      	mov	sp, r7
 801f19a:	bd90      	pop	{r4, r7, pc}
 801f19c:	0802b0f8 	.word	0x0802b0f8
 801f1a0:	080288dc 	.word	0x080288dc

0801f1a4 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801f1a4:	b590      	push	{r4, r7, lr}
 801f1a6:	b087      	sub	sp, #28
 801f1a8:	af00      	add	r7, sp, #0
 801f1aa:	60f8      	str	r0, [r7, #12]
 801f1ac:	60b9      	str	r1, [r7, #8]
 801f1ae:	607a      	str	r2, [r7, #4]
 801f1b0:	603b      	str	r3, [r7, #0]
 801f1b2:	68fb      	ldr	r3, [r7, #12]
 801f1b4:	68b9      	ldr	r1, [r7, #8]
 801f1b6:	4618      	mov	r0, r3
 801f1b8:	f7ff fa38 	bl	801e62c <_ZN11MockFailureC1EP10UtestShell>
 801f1bc:	4a12      	ldr	r2, [pc, #72]	; (801f208 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801f1be:	68fb      	ldr	r3, [r7, #12]
 801f1c0:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801f1c2:	68fb      	ldr	r3, [r7, #12]
 801f1c4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f1c8:	6878      	ldr	r0, [r7, #4]
 801f1ca:	f7ef fe97 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801f1ce:	4602      	mov	r2, r0
 801f1d0:	f107 0310 	add.w	r3, r7, #16
 801f1d4:	490d      	ldr	r1, [pc, #52]	; (801f20c <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801f1d6:	4618      	mov	r0, r3
 801f1d8:	f7f0 fbc4 	bl	800f964 <_Z16StringFromFormatPKcz>
 801f1dc:	f107 0310 	add.w	r3, r7, #16
 801f1e0:	4619      	mov	r1, r3
 801f1e2:	4620      	mov	r0, r4
 801f1e4:	f7ef fb6b 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801f1e8:	f107 0310 	add.w	r3, r7, #16
 801f1ec:	4618      	mov	r0, r3
 801f1ee:	f7ef feb2 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801f1f2:	68fb      	ldr	r3, [r7, #12]
 801f1f4:	683a      	ldr	r2, [r7, #0]
 801f1f6:	6879      	ldr	r1, [r7, #4]
 801f1f8:	4618      	mov	r0, r3
 801f1fa:	f7ff fa9f 	bl	801e73c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801f1fe:	68fb      	ldr	r3, [r7, #12]
 801f200:	4618      	mov	r0, r3
 801f202:	371c      	adds	r7, #28
 801f204:	46bd      	mov	sp, r7
 801f206:	bd90      	pop	{r4, r7, pc}
 801f208:	0802b0cc 	.word	0x0802b0cc
 801f20c:	08028940 	.word	0x08028940

0801f210 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801f210:	b480      	push	{r7}
 801f212:	b083      	sub	sp, #12
 801f214:	af00      	add	r7, sp, #0
 801f216:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801f218:	4a04      	ldr	r2, [pc, #16]	; (801f22c <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801f21a:	687b      	ldr	r3, [r7, #4]
 801f21c:	6013      	str	r3, [r2, #0]
}
 801f21e:	bf00      	nop
 801f220:	370c      	adds	r7, #12
 801f222:	46bd      	mov	sp, r7
 801f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f228:	4770      	bx	lr
 801f22a:	bf00      	nop
 801f22c:	20000fa8 	.word	0x20000fa8

0801f230 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801f230:	b580      	push	{r7, lr}
 801f232:	b082      	sub	sp, #8
 801f234:	af00      	add	r7, sp, #0
 801f236:	6078      	str	r0, [r7, #4]
 801f238:	6039      	str	r1, [r7, #0]
 801f23a:	4a10      	ldr	r2, [pc, #64]	; (801f27c <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801f23c:	687b      	ldr	r3, [r7, #4]
 801f23e:	601a      	str	r2, [r3, #0]
 801f240:	687b      	ldr	r3, [r7, #4]
 801f242:	3304      	adds	r3, #4
 801f244:	6839      	ldr	r1, [r7, #0]
 801f246:	4618      	mov	r0, r3
 801f248:	f7ef fb21 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
 801f24c:	687b      	ldr	r3, [r7, #4]
 801f24e:	330c      	adds	r3, #12
 801f250:	490b      	ldr	r1, [pc, #44]	; (801f280 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801f252:	4618      	mov	r0, r3
 801f254:	f7ef fac7 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801f258:	687b      	ldr	r3, [r7, #4]
 801f25a:	2200      	movs	r2, #0
 801f25c:	629a      	str	r2, [r3, #40]	; 0x28
 801f25e:	687b      	ldr	r3, [r7, #4]
 801f260:	2200      	movs	r2, #0
 801f262:	62da      	str	r2, [r3, #44]	; 0x2c
 801f264:	687b      	ldr	r3, [r7, #4]
 801f266:	2200      	movs	r2, #0
 801f268:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801f26a:	687b      	ldr	r3, [r7, #4]
 801f26c:	2200      	movs	r2, #0
 801f26e:	619a      	str	r2, [r3, #24]
}
 801f270:	687b      	ldr	r3, [r7, #4]
 801f272:	4618      	mov	r0, r3
 801f274:	3708      	adds	r7, #8
 801f276:	46bd      	mov	sp, r7
 801f278:	bd80      	pop	{r7, pc}
 801f27a:	bf00      	nop
 801f27c:	0802b954 	.word	0x0802b954
 801f280:	08028990 	.word	0x08028990

0801f284 <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801f284:	b580      	push	{r7, lr}
 801f286:	b082      	sub	sp, #8
 801f288:	af00      	add	r7, sp, #0
 801f28a:	6078      	str	r0, [r7, #4]
 801f28c:	4a08      	ldr	r2, [pc, #32]	; (801f2b0 <_ZN14MockNamedValueD1Ev+0x2c>)
 801f28e:	687b      	ldr	r3, [r7, #4]
 801f290:	601a      	str	r2, [r3, #0]
 801f292:	687b      	ldr	r3, [r7, #4]
 801f294:	330c      	adds	r3, #12
 801f296:	4618      	mov	r0, r3
 801f298:	f7ef fe5d 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801f29c:	687b      	ldr	r3, [r7, #4]
 801f29e:	3304      	adds	r3, #4
 801f2a0:	4618      	mov	r0, r3
 801f2a2:	f7ef fe58 	bl	800ef56 <_ZN12SimpleStringD1Ev>
{
}
 801f2a6:	687b      	ldr	r3, [r7, #4]
 801f2a8:	4618      	mov	r0, r3
 801f2aa:	3708      	adds	r7, #8
 801f2ac:	46bd      	mov	sp, r7
 801f2ae:	bd80      	pop	{r7, pc}
 801f2b0:	0802b954 	.word	0x0802b954

0801f2b4 <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801f2b4:	b580      	push	{r7, lr}
 801f2b6:	b082      	sub	sp, #8
 801f2b8:	af00      	add	r7, sp, #0
 801f2ba:	6078      	str	r0, [r7, #4]
}
 801f2bc:	6878      	ldr	r0, [r7, #4]
 801f2be:	f7ff ffe1 	bl	801f284 <_ZN14MockNamedValueD1Ev>
 801f2c2:	2138      	movs	r1, #56	; 0x38
 801f2c4:	6878      	ldr	r0, [r7, #4]
 801f2c6:	f7ec fedf 	bl	800c088 <_ZdlPvj>
 801f2ca:	687b      	ldr	r3, [r7, #4]
 801f2cc:	4618      	mov	r0, r3
 801f2ce:	3708      	adds	r7, #8
 801f2d0:	46bd      	mov	sp, r7
 801f2d2:	bd80      	pop	{r7, pc}

0801f2d4 <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801f2d4:	b590      	push	{r4, r7, lr}
 801f2d6:	b085      	sub	sp, #20
 801f2d8:	af00      	add	r7, sp, #0
 801f2da:	6078      	str	r0, [r7, #4]
 801f2dc:	460b      	mov	r3, r1
 801f2de:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801f2e0:	687b      	ldr	r3, [r7, #4]
 801f2e2:	f103 040c 	add.w	r4, r3, #12
 801f2e6:	f107 0308 	add.w	r3, r7, #8
 801f2ea:	490b      	ldr	r1, [pc, #44]	; (801f318 <_ZN14MockNamedValue8setValueEb+0x44>)
 801f2ec:	4618      	mov	r0, r3
 801f2ee:	f7ef fa7a 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801f2f2:	f107 0308 	add.w	r3, r7, #8
 801f2f6:	4619      	mov	r1, r3
 801f2f8:	4620      	mov	r0, r4
 801f2fa:	f7ef fae0 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801f2fe:	f107 0308 	add.w	r3, r7, #8
 801f302:	4618      	mov	r0, r3
 801f304:	f7ef fe27 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801f308:	687b      	ldr	r3, [r7, #4]
 801f30a:	78fa      	ldrb	r2, [r7, #3]
 801f30c:	761a      	strb	r2, [r3, #24]
}
 801f30e:	bf00      	nop
 801f310:	3714      	adds	r7, #20
 801f312:	46bd      	mov	sp, r7
 801f314:	bd90      	pop	{r4, r7, pc}
 801f316:	bf00      	nop
 801f318:	08028994 	.word	0x08028994

0801f31c <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801f31c:	b590      	push	{r4, r7, lr}
 801f31e:	b085      	sub	sp, #20
 801f320:	af00      	add	r7, sp, #0
 801f322:	6078      	str	r0, [r7, #4]
 801f324:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801f326:	687b      	ldr	r3, [r7, #4]
 801f328:	f103 040c 	add.w	r4, r3, #12
 801f32c:	f107 0308 	add.w	r3, r7, #8
 801f330:	490a      	ldr	r1, [pc, #40]	; (801f35c <_ZN14MockNamedValue8setValueEj+0x40>)
 801f332:	4618      	mov	r0, r3
 801f334:	f7ef fa57 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801f338:	f107 0308 	add.w	r3, r7, #8
 801f33c:	4619      	mov	r1, r3
 801f33e:	4620      	mov	r0, r4
 801f340:	f7ef fabd 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801f344:	f107 0308 	add.w	r3, r7, #8
 801f348:	4618      	mov	r0, r3
 801f34a:	f7ef fe04 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801f34e:	687b      	ldr	r3, [r7, #4]
 801f350:	683a      	ldr	r2, [r7, #0]
 801f352:	619a      	str	r2, [r3, #24]
}
 801f354:	bf00      	nop
 801f356:	3714      	adds	r7, #20
 801f358:	46bd      	mov	sp, r7
 801f35a:	bd90      	pop	{r4, r7, pc}
 801f35c:	0802899c 	.word	0x0802899c

0801f360 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801f360:	b590      	push	{r4, r7, lr}
 801f362:	b085      	sub	sp, #20
 801f364:	af00      	add	r7, sp, #0
 801f366:	6078      	str	r0, [r7, #4]
 801f368:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801f36a:	687b      	ldr	r3, [r7, #4]
 801f36c:	f103 040c 	add.w	r4, r3, #12
 801f370:	f107 0308 	add.w	r3, r7, #8
 801f374:	490a      	ldr	r1, [pc, #40]	; (801f3a0 <_ZN14MockNamedValue8setValueEi+0x40>)
 801f376:	4618      	mov	r0, r3
 801f378:	f7ef fa35 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801f37c:	f107 0308 	add.w	r3, r7, #8
 801f380:	4619      	mov	r1, r3
 801f382:	4620      	mov	r0, r4
 801f384:	f7ef fa9b 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801f388:	f107 0308 	add.w	r3, r7, #8
 801f38c:	4618      	mov	r0, r3
 801f38e:	f7ef fde2 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801f392:	687b      	ldr	r3, [r7, #4]
 801f394:	683a      	ldr	r2, [r7, #0]
 801f396:	619a      	str	r2, [r3, #24]
}
 801f398:	bf00      	nop
 801f39a:	3714      	adds	r7, #20
 801f39c:	46bd      	mov	sp, r7
 801f39e:	bd90      	pop	{r4, r7, pc}
 801f3a0:	08028990 	.word	0x08028990

0801f3a4 <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801f3a4:	b590      	push	{r4, r7, lr}
 801f3a6:	b085      	sub	sp, #20
 801f3a8:	af00      	add	r7, sp, #0
 801f3aa:	6078      	str	r0, [r7, #4]
 801f3ac:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801f3ae:	687b      	ldr	r3, [r7, #4]
 801f3b0:	f103 040c 	add.w	r4, r3, #12
 801f3b4:	f107 0308 	add.w	r3, r7, #8
 801f3b8:	490a      	ldr	r1, [pc, #40]	; (801f3e4 <_ZN14MockNamedValue8setValueEl+0x40>)
 801f3ba:	4618      	mov	r0, r3
 801f3bc:	f7ef fa13 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801f3c0:	f107 0308 	add.w	r3, r7, #8
 801f3c4:	4619      	mov	r1, r3
 801f3c6:	4620      	mov	r0, r4
 801f3c8:	f7ef fa79 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801f3cc:	f107 0308 	add.w	r3, r7, #8
 801f3d0:	4618      	mov	r0, r3
 801f3d2:	f7ef fdc0 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801f3d6:	687b      	ldr	r3, [r7, #4]
 801f3d8:	683a      	ldr	r2, [r7, #0]
 801f3da:	619a      	str	r2, [r3, #24]
}
 801f3dc:	bf00      	nop
 801f3de:	3714      	adds	r7, #20
 801f3e0:	46bd      	mov	sp, r7
 801f3e2:	bd90      	pop	{r4, r7, pc}
 801f3e4:	080289ac 	.word	0x080289ac

0801f3e8 <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801f3e8:	b590      	push	{r4, r7, lr}
 801f3ea:	b085      	sub	sp, #20
 801f3ec:	af00      	add	r7, sp, #0
 801f3ee:	6078      	str	r0, [r7, #4]
 801f3f0:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801f3f2:	687b      	ldr	r3, [r7, #4]
 801f3f4:	f103 040c 	add.w	r4, r3, #12
 801f3f8:	f107 0308 	add.w	r3, r7, #8
 801f3fc:	490a      	ldr	r1, [pc, #40]	; (801f428 <_ZN14MockNamedValue8setValueEm+0x40>)
 801f3fe:	4618      	mov	r0, r3
 801f400:	f7ef f9f1 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801f404:	f107 0308 	add.w	r3, r7, #8
 801f408:	4619      	mov	r1, r3
 801f40a:	4620      	mov	r0, r4
 801f40c:	f7ef fa57 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801f410:	f107 0308 	add.w	r3, r7, #8
 801f414:	4618      	mov	r0, r3
 801f416:	f7ef fd9e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801f41a:	687b      	ldr	r3, [r7, #4]
 801f41c:	683a      	ldr	r2, [r7, #0]
 801f41e:	619a      	str	r2, [r3, #24]
}
 801f420:	bf00      	nop
 801f422:	3714      	adds	r7, #20
 801f424:	46bd      	mov	sp, r7
 801f426:	bd90      	pop	{r4, r7, pc}
 801f428:	080289b8 	.word	0x080289b8

0801f42c <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801f42c:	b5b0      	push	{r4, r5, r7, lr}
 801f42e:	b086      	sub	sp, #24
 801f430:	af02      	add	r7, sp, #8
 801f432:	60f8      	str	r0, [r7, #12]
 801f434:	1d3b      	adds	r3, r7, #4
 801f436:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801f43a:	f7f6 fdb7 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801f43e:	4604      	mov	r4, r0
 801f440:	6823      	ldr	r3, [r4, #0]
 801f442:	3368      	adds	r3, #104	; 0x68
 801f444:	681d      	ldr	r5, [r3, #0]
 801f446:	f7f6 fdc1 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f44a:	4603      	mov	r3, r0
 801f44c:	9300      	str	r3, [sp, #0]
 801f44e:	2367      	movs	r3, #103	; 0x67
 801f450:	4a03      	ldr	r2, [pc, #12]	; (801f460 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801f452:	4904      	ldr	r1, [pc, #16]	; (801f464 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801f454:	4620      	mov	r0, r4
 801f456:	47a8      	blx	r5
}
 801f458:	bf00      	nop
 801f45a:	3710      	adds	r7, #16
 801f45c:	46bd      	mov	sp, r7
 801f45e:	bdb0      	pop	{r4, r5, r7, pc}
 801f460:	080289cc 	.word	0x080289cc
 801f464:	080289e8 	.word	0x080289e8

0801f468 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801f468:	b5b0      	push	{r4, r5, r7, lr}
 801f46a:	b086      	sub	sp, #24
 801f46c:	af02      	add	r7, sp, #8
 801f46e:	60f8      	str	r0, [r7, #12]
 801f470:	1d3b      	adds	r3, r7, #4
 801f472:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801f476:	f7f6 fd99 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801f47a:	4604      	mov	r4, r0
 801f47c:	6823      	ldr	r3, [r4, #0]
 801f47e:	3368      	adds	r3, #104	; 0x68
 801f480:	681d      	ldr	r5, [r3, #0]
 801f482:	f7f6 fda3 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f486:	4603      	mov	r3, r0
 801f488:	9300      	str	r3, [sp, #0]
 801f48a:	236c      	movs	r3, #108	; 0x6c
 801f48c:	4a03      	ldr	r2, [pc, #12]	; (801f49c <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801f48e:	4904      	ldr	r1, [pc, #16]	; (801f4a0 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801f490:	4620      	mov	r0, r4
 801f492:	47a8      	blx	r5
}
 801f494:	bf00      	nop
 801f496:	3710      	adds	r7, #16
 801f498:	46bd      	mov	sp, r7
 801f49a:	bdb0      	pop	{r4, r5, r7, pc}
 801f49c:	080289cc 	.word	0x080289cc
 801f4a0:	08028a08 	.word	0x08028a08
 801f4a4:	00000000 	.word	0x00000000

0801f4a8 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801f4a8:	b580      	push	{r7, lr}
 801f4aa:	b084      	sub	sp, #16
 801f4ac:	af00      	add	r7, sp, #0
 801f4ae:	60f8      	str	r0, [r7, #12]
 801f4b0:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801f4b4:	68fb      	ldr	r3, [r7, #12]
 801f4b6:	681b      	ldr	r3, [r3, #0]
 801f4b8:	3328      	adds	r3, #40	; 0x28
 801f4ba:	681b      	ldr	r3, [r3, #0]
 801f4bc:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801f4d0 <_ZN14MockNamedValue8setValueEd+0x28>
 801f4c0:	ed97 0b00 	vldr	d0, [r7]
 801f4c4:	68f8      	ldr	r0, [r7, #12]
 801f4c6:	4798      	blx	r3
}
 801f4c8:	bf00      	nop
 801f4ca:	3710      	adds	r7, #16
 801f4cc:	46bd      	mov	sp, r7
 801f4ce:	bd80      	pop	{r7, pc}
 801f4d0:	47ae147b 	.word	0x47ae147b
 801f4d4:	3f747ae1 	.word	0x3f747ae1

0801f4d8 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801f4d8:	b590      	push	{r4, r7, lr}
 801f4da:	b089      	sub	sp, #36	; 0x24
 801f4dc:	af00      	add	r7, sp, #0
 801f4de:	6178      	str	r0, [r7, #20]
 801f4e0:	ed87 0b02 	vstr	d0, [r7, #8]
 801f4e4:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801f4e8:	697b      	ldr	r3, [r7, #20]
 801f4ea:	f103 040c 	add.w	r4, r3, #12
 801f4ee:	f107 0318 	add.w	r3, r7, #24
 801f4f2:	490e      	ldr	r1, [pc, #56]	; (801f52c <_ZN14MockNamedValue8setValueEdd+0x54>)
 801f4f4:	4618      	mov	r0, r3
 801f4f6:	f7ef f976 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801f4fa:	f107 0318 	add.w	r3, r7, #24
 801f4fe:	4619      	mov	r1, r3
 801f500:	4620      	mov	r0, r4
 801f502:	f7ef f9dc 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801f506:	f107 0318 	add.w	r3, r7, #24
 801f50a:	4618      	mov	r0, r3
 801f50c:	f7ef fd23 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801f510:	6979      	ldr	r1, [r7, #20]
 801f512:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801f516:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801f51a:	6979      	ldr	r1, [r7, #20]
 801f51c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f520:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801f524:	bf00      	nop
 801f526:	3724      	adds	r7, #36	; 0x24
 801f528:	46bd      	mov	sp, r7
 801f52a:	bd90      	pop	{r4, r7, pc}
 801f52c:	08028a34 	.word	0x08028a34

0801f530 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801f530:	b590      	push	{r4, r7, lr}
 801f532:	b085      	sub	sp, #20
 801f534:	af00      	add	r7, sp, #0
 801f536:	6078      	str	r0, [r7, #4]
 801f538:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801f53a:	687b      	ldr	r3, [r7, #4]
 801f53c:	f103 040c 	add.w	r4, r3, #12
 801f540:	f107 0308 	add.w	r3, r7, #8
 801f544:	490a      	ldr	r1, [pc, #40]	; (801f570 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801f546:	4618      	mov	r0, r3
 801f548:	f7ef f94d 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801f54c:	f107 0308 	add.w	r3, r7, #8
 801f550:	4619      	mov	r1, r3
 801f552:	4620      	mov	r0, r4
 801f554:	f7ef f9b3 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801f558:	f107 0308 	add.w	r3, r7, #8
 801f55c:	4618      	mov	r0, r3
 801f55e:	f7ef fcfa 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801f562:	687b      	ldr	r3, [r7, #4]
 801f564:	683a      	ldr	r2, [r7, #0]
 801f566:	619a      	str	r2, [r3, #24]
}
 801f568:	bf00      	nop
 801f56a:	3714      	adds	r7, #20
 801f56c:	46bd      	mov	sp, r7
 801f56e:	bd90      	pop	{r4, r7, pc}
 801f570:	08028a3c 	.word	0x08028a3c

0801f574 <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801f574:	b590      	push	{r4, r7, lr}
 801f576:	b085      	sub	sp, #20
 801f578:	af00      	add	r7, sp, #0
 801f57a:	6078      	str	r0, [r7, #4]
 801f57c:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801f57e:	687b      	ldr	r3, [r7, #4]
 801f580:	f103 040c 	add.w	r4, r3, #12
 801f584:	f107 0308 	add.w	r3, r7, #8
 801f588:	490a      	ldr	r1, [pc, #40]	; (801f5b4 <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801f58a:	4618      	mov	r0, r3
 801f58c:	f7ef f92b 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801f590:	f107 0308 	add.w	r3, r7, #8
 801f594:	4619      	mov	r1, r3
 801f596:	4620      	mov	r0, r4
 801f598:	f7ef f991 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801f59c:	f107 0308 	add.w	r3, r7, #8
 801f5a0:	4618      	mov	r0, r3
 801f5a2:	f7ef fcd8 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801f5a6:	687b      	ldr	r3, [r7, #4]
 801f5a8:	683a      	ldr	r2, [r7, #0]
 801f5aa:	619a      	str	r2, [r3, #24]
}
 801f5ac:	bf00      	nop
 801f5ae:	3714      	adds	r7, #20
 801f5b0:	46bd      	mov	sp, r7
 801f5b2:	bd90      	pop	{r4, r7, pc}
 801f5b4:	08028a44 	.word	0x08028a44

0801f5b8 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801f5b8:	b590      	push	{r4, r7, lr}
 801f5ba:	b085      	sub	sp, #20
 801f5bc:	af00      	add	r7, sp, #0
 801f5be:	6078      	str	r0, [r7, #4]
 801f5c0:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801f5c2:	687b      	ldr	r3, [r7, #4]
 801f5c4:	f103 040c 	add.w	r4, r3, #12
 801f5c8:	f107 0308 	add.w	r3, r7, #8
 801f5cc:	490a      	ldr	r1, [pc, #40]	; (801f5f8 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801f5ce:	4618      	mov	r0, r3
 801f5d0:	f7ef f909 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801f5d4:	f107 0308 	add.w	r3, r7, #8
 801f5d8:	4619      	mov	r1, r3
 801f5da:	4620      	mov	r0, r4
 801f5dc:	f7ef f96f 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801f5e0:	f107 0308 	add.w	r3, r7, #8
 801f5e4:	4618      	mov	r0, r3
 801f5e6:	f7ef fcb6 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801f5ea:	687b      	ldr	r3, [r7, #4]
 801f5ec:	683a      	ldr	r2, [r7, #0]
 801f5ee:	619a      	str	r2, [r3, #24]
}
 801f5f0:	bf00      	nop
 801f5f2:	3714      	adds	r7, #20
 801f5f4:	46bd      	mov	sp, r7
 801f5f6:	bd90      	pop	{r4, r7, pc}
 801f5f8:	08028a50 	.word	0x08028a50

0801f5fc <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801f5fc:	b590      	push	{r4, r7, lr}
 801f5fe:	b085      	sub	sp, #20
 801f600:	af00      	add	r7, sp, #0
 801f602:	6078      	str	r0, [r7, #4]
 801f604:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801f606:	687b      	ldr	r3, [r7, #4]
 801f608:	f103 040c 	add.w	r4, r3, #12
 801f60c:	f107 0308 	add.w	r3, r7, #8
 801f610:	490a      	ldr	r1, [pc, #40]	; (801f63c <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801f612:	4618      	mov	r0, r3
 801f614:	f7ef f8e7 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801f618:	f107 0308 	add.w	r3, r7, #8
 801f61c:	4619      	mov	r1, r3
 801f61e:	4620      	mov	r0, r4
 801f620:	f7ef f94d 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801f624:	f107 0308 	add.w	r3, r7, #8
 801f628:	4618      	mov	r0, r3
 801f62a:	f7ef fc94 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801f62e:	687b      	ldr	r3, [r7, #4]
 801f630:	683a      	ldr	r2, [r7, #0]
 801f632:	619a      	str	r2, [r3, #24]
}
 801f634:	bf00      	nop
 801f636:	3714      	adds	r7, #20
 801f638:	46bd      	mov	sp, r7
 801f63a:	bd90      	pop	{r4, r7, pc}
 801f63c:	08028a5c 	.word	0x08028a5c

0801f640 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801f640:	b590      	push	{r4, r7, lr}
 801f642:	b087      	sub	sp, #28
 801f644:	af00      	add	r7, sp, #0
 801f646:	60f8      	str	r0, [r7, #12]
 801f648:	60b9      	str	r1, [r7, #8]
 801f64a:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801f64c:	68fb      	ldr	r3, [r7, #12]
 801f64e:	f103 040c 	add.w	r4, r3, #12
 801f652:	f107 0310 	add.w	r3, r7, #16
 801f656:	490c      	ldr	r1, [pc, #48]	; (801f688 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801f658:	4618      	mov	r0, r3
 801f65a:	f7ef f8c4 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801f65e:	f107 0310 	add.w	r3, r7, #16
 801f662:	4619      	mov	r1, r3
 801f664:	4620      	mov	r0, r4
 801f666:	f7ef f92a 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801f66a:	f107 0310 	add.w	r3, r7, #16
 801f66e:	4618      	mov	r0, r3
 801f670:	f7ef fc71 	bl	800ef56 <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801f674:	68fb      	ldr	r3, [r7, #12]
 801f676:	68ba      	ldr	r2, [r7, #8]
 801f678:	619a      	str	r2, [r3, #24]
    size_ = size;
 801f67a:	68fb      	ldr	r3, [r7, #12]
 801f67c:	687a      	ldr	r2, [r7, #4]
 801f67e:	629a      	str	r2, [r3, #40]	; 0x28
}
 801f680:	bf00      	nop
 801f682:	371c      	adds	r7, #28
 801f684:	46bd      	mov	sp, r7
 801f686:	bd90      	pop	{r4, r7, pc}
 801f688:	08028a68 	.word	0x08028a68

0801f68c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801f68c:	b580      	push	{r7, lr}
 801f68e:	b084      	sub	sp, #16
 801f690:	af00      	add	r7, sp, #0
 801f692:	60f8      	str	r0, [r7, #12]
 801f694:	60b9      	str	r1, [r7, #8]
 801f696:	607a      	str	r2, [r7, #4]
    type_ = type;
 801f698:	68fb      	ldr	r3, [r7, #12]
 801f69a:	330c      	adds	r3, #12
 801f69c:	68b9      	ldr	r1, [r7, #8]
 801f69e:	4618      	mov	r0, r3
 801f6a0:	f7ef f90d 	bl	800e8be <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801f6a4:	68fb      	ldr	r3, [r7, #12]
 801f6a6:	687a      	ldr	r2, [r7, #4]
 801f6a8:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801f6aa:	4b11      	ldr	r3, [pc, #68]	; (801f6f0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801f6ac:	681b      	ldr	r3, [r3, #0]
 801f6ae:	2b00      	cmp	r3, #0
 801f6b0:	d019      	beq.n	801f6e6 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801f6b2:	4b0f      	ldr	r3, [pc, #60]	; (801f6f0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801f6b4:	681a      	ldr	r2, [r3, #0]
 801f6b6:	4b0e      	ldr	r3, [pc, #56]	; (801f6f0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801f6b8:	681b      	ldr	r3, [r3, #0]
 801f6ba:	681b      	ldr	r3, [r3, #0]
 801f6bc:	3314      	adds	r3, #20
 801f6be:	681b      	ldr	r3, [r3, #0]
 801f6c0:	68b9      	ldr	r1, [r7, #8]
 801f6c2:	4610      	mov	r0, r2
 801f6c4:	4798      	blx	r3
 801f6c6:	4602      	mov	r2, r0
 801f6c8:	68fb      	ldr	r3, [r7, #12]
 801f6ca:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801f6cc:	4b08      	ldr	r3, [pc, #32]	; (801f6f0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801f6ce:	681a      	ldr	r2, [r3, #0]
 801f6d0:	4b07      	ldr	r3, [pc, #28]	; (801f6f0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801f6d2:	681b      	ldr	r3, [r3, #0]
 801f6d4:	681b      	ldr	r3, [r3, #0]
 801f6d6:	3318      	adds	r3, #24
 801f6d8:	681b      	ldr	r3, [r3, #0]
 801f6da:	68b9      	ldr	r1, [r7, #8]
 801f6dc:	4610      	mov	r0, r2
 801f6de:	4798      	blx	r3
 801f6e0:	4602      	mov	r2, r0
 801f6e2:	68fb      	ldr	r3, [r7, #12]
 801f6e4:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801f6e6:	bf00      	nop
 801f6e8:	3710      	adds	r7, #16
 801f6ea:	46bd      	mov	sp, r7
 801f6ec:	bd80      	pop	{r7, pc}
 801f6ee:	bf00      	nop
 801f6f0:	20000fa8 	.word	0x20000fa8

0801f6f4 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801f6f4:	b580      	push	{r7, lr}
 801f6f6:	b084      	sub	sp, #16
 801f6f8:	af00      	add	r7, sp, #0
 801f6fa:	60f8      	str	r0, [r7, #12]
 801f6fc:	60b9      	str	r1, [r7, #8]
 801f6fe:	607a      	str	r2, [r7, #4]
    type_ = type;
 801f700:	68fb      	ldr	r3, [r7, #12]
 801f702:	330c      	adds	r3, #12
 801f704:	68b9      	ldr	r1, [r7, #8]
 801f706:	4618      	mov	r0, r3
 801f708:	f7ef f8d9 	bl	800e8be <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801f70c:	68fb      	ldr	r3, [r7, #12]
 801f70e:	687a      	ldr	r2, [r7, #4]
 801f710:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801f712:	4b11      	ldr	r3, [pc, #68]	; (801f758 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801f714:	681b      	ldr	r3, [r3, #0]
 801f716:	2b00      	cmp	r3, #0
 801f718:	d019      	beq.n	801f74e <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801f71a:	4b0f      	ldr	r3, [pc, #60]	; (801f758 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801f71c:	681a      	ldr	r2, [r3, #0]
 801f71e:	4b0e      	ldr	r3, [pc, #56]	; (801f758 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801f720:	681b      	ldr	r3, [r3, #0]
 801f722:	681b      	ldr	r3, [r3, #0]
 801f724:	3314      	adds	r3, #20
 801f726:	681b      	ldr	r3, [r3, #0]
 801f728:	68b9      	ldr	r1, [r7, #8]
 801f72a:	4610      	mov	r0, r2
 801f72c:	4798      	blx	r3
 801f72e:	4602      	mov	r2, r0
 801f730:	68fb      	ldr	r3, [r7, #12]
 801f732:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801f734:	4b08      	ldr	r3, [pc, #32]	; (801f758 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801f736:	681a      	ldr	r2, [r3, #0]
 801f738:	4b07      	ldr	r3, [pc, #28]	; (801f758 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801f73a:	681b      	ldr	r3, [r3, #0]
 801f73c:	681b      	ldr	r3, [r3, #0]
 801f73e:	3318      	adds	r3, #24
 801f740:	681b      	ldr	r3, [r3, #0]
 801f742:	68b9      	ldr	r1, [r7, #8]
 801f744:	4610      	mov	r0, r2
 801f746:	4798      	blx	r3
 801f748:	4602      	mov	r2, r0
 801f74a:	68fb      	ldr	r3, [r7, #12]
 801f74c:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801f74e:	bf00      	nop
 801f750:	3710      	adds	r7, #16
 801f752:	46bd      	mov	sp, r7
 801f754:	bd80      	pop	{r7, pc}
 801f756:	bf00      	nop
 801f758:	20000fa8 	.word	0x20000fa8

0801f75c <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801f75c:	b480      	push	{r7}
 801f75e:	b083      	sub	sp, #12
 801f760:	af00      	add	r7, sp, #0
 801f762:	6078      	str	r0, [r7, #4]
 801f764:	6039      	str	r1, [r7, #0]
    size_ = size;
 801f766:	687b      	ldr	r3, [r7, #4]
 801f768:	683a      	ldr	r2, [r7, #0]
 801f76a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801f76c:	bf00      	nop
 801f76e:	370c      	adds	r7, #12
 801f770:	46bd      	mov	sp, r7
 801f772:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f776:	4770      	bx	lr

0801f778 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801f778:	b590      	push	{r4, r7, lr}
 801f77a:	b085      	sub	sp, #20
 801f77c:	af00      	add	r7, sp, #0
 801f77e:	6078      	str	r0, [r7, #4]
 801f780:	6039      	str	r1, [r7, #0]
    name_ = name;
 801f782:	687b      	ldr	r3, [r7, #4]
 801f784:	1d1c      	adds	r4, r3, #4
 801f786:	f107 0308 	add.w	r3, r7, #8
 801f78a:	6839      	ldr	r1, [r7, #0]
 801f78c:	4618      	mov	r0, r3
 801f78e:	f7ef f82a 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801f792:	f107 0308 	add.w	r3, r7, #8
 801f796:	4619      	mov	r1, r3
 801f798:	4620      	mov	r0, r4
 801f79a:	f7ef f890 	bl	800e8be <_ZN12SimpleStringaSERKS_>
 801f79e:	f107 0308 	add.w	r3, r7, #8
 801f7a2:	4618      	mov	r0, r3
 801f7a4:	f7ef fbd7 	bl	800ef56 <_ZN12SimpleStringD1Ev>
}
 801f7a8:	bf00      	nop
 801f7aa:	3714      	adds	r7, #20
 801f7ac:	46bd      	mov	sp, r7
 801f7ae:	bd90      	pop	{r4, r7, pc}

0801f7b0 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801f7b0:	b580      	push	{r7, lr}
 801f7b2:	b082      	sub	sp, #8
 801f7b4:	af00      	add	r7, sp, #0
 801f7b6:	6078      	str	r0, [r7, #4]
 801f7b8:	6039      	str	r1, [r7, #0]
    return name_;
 801f7ba:	683b      	ldr	r3, [r7, #0]
 801f7bc:	3304      	adds	r3, #4
 801f7be:	4619      	mov	r1, r3
 801f7c0:	6878      	ldr	r0, [r7, #4]
 801f7c2:	f7ef f864 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
}
 801f7c6:	6878      	ldr	r0, [r7, #4]
 801f7c8:	3708      	adds	r7, #8
 801f7ca:	46bd      	mov	sp, r7
 801f7cc:	bd80      	pop	{r7, pc}

0801f7ce <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801f7ce:	b580      	push	{r7, lr}
 801f7d0:	b082      	sub	sp, #8
 801f7d2:	af00      	add	r7, sp, #0
 801f7d4:	6078      	str	r0, [r7, #4]
 801f7d6:	6039      	str	r1, [r7, #0]
    return type_;
 801f7d8:	683b      	ldr	r3, [r7, #0]
 801f7da:	330c      	adds	r3, #12
 801f7dc:	4619      	mov	r1, r3
 801f7de:	6878      	ldr	r0, [r7, #4]
 801f7e0:	f7ef f855 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
}
 801f7e4:	6878      	ldr	r0, [r7, #4]
 801f7e6:	3708      	adds	r7, #8
 801f7e8:	46bd      	mov	sp, r7
 801f7ea:	bd80      	pop	{r7, pc}

0801f7ec <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801f7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f7ee:	b087      	sub	sp, #28
 801f7f0:	af04      	add	r7, sp, #16
 801f7f2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801f7f4:	f7f6 fbda 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801f7f8:	4604      	mov	r4, r0
 801f7fa:	6823      	ldr	r3, [r4, #0]
 801f7fc:	3324      	adds	r3, #36	; 0x24
 801f7fe:	681d      	ldr	r5, [r3, #0]
 801f800:	687b      	ldr	r3, [r7, #4]
 801f802:	330c      	adds	r3, #12
 801f804:	4618      	mov	r0, r3
 801f806:	f7ef fb79 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801f80a:	4606      	mov	r6, r0
 801f80c:	f7f6 fbde 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f810:	4603      	mov	r3, r0
 801f812:	9302      	str	r3, [sp, #8]
 801f814:	23c8      	movs	r3, #200	; 0xc8
 801f816:	9301      	str	r3, [sp, #4]
 801f818:	4b06      	ldr	r3, [pc, #24]	; (801f834 <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801f81a:	9300      	str	r3, [sp, #0]
 801f81c:	2300      	movs	r3, #0
 801f81e:	4632      	mov	r2, r6
 801f820:	4905      	ldr	r1, [pc, #20]	; (801f838 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801f822:	4620      	mov	r0, r4
 801f824:	47a8      	blx	r5
    return value_.boolValue_;
 801f826:	687b      	ldr	r3, [r7, #4]
 801f828:	7e1b      	ldrb	r3, [r3, #24]
}
 801f82a:	4618      	mov	r0, r3
 801f82c:	370c      	adds	r7, #12
 801f82e:	46bd      	mov	sp, r7
 801f830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f832:	bf00      	nop
 801f834:	080289cc 	.word	0x080289cc
 801f838:	08028994 	.word	0x08028994

0801f83c <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801f83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f83e:	b089      	sub	sp, #36	; 0x24
 801f840:	af04      	add	r7, sp, #16
 801f842:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801f844:	687b      	ldr	r3, [r7, #4]
 801f846:	f103 040c 	add.w	r4, r3, #12
 801f84a:	f107 0308 	add.w	r3, r7, #8
 801f84e:	4920      	ldr	r1, [pc, #128]	; (801f8d0 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801f850:	4618      	mov	r0, r3
 801f852:	f7ee ffc8 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801f856:	2501      	movs	r5, #1
 801f858:	f107 0308 	add.w	r3, r7, #8
 801f85c:	4619      	mov	r1, r3
 801f85e:	4620      	mov	r0, r4
 801f860:	f7ef fb85 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 801f864:	4603      	mov	r3, r0
 801f866:	2b00      	cmp	r3, #0
 801f868:	d005      	beq.n	801f876 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801f86a:	687b      	ldr	r3, [r7, #4]
 801f86c:	699b      	ldr	r3, [r3, #24]
 801f86e:	2b00      	cmp	r3, #0
 801f870:	db01      	blt.n	801f876 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801f872:	2401      	movs	r4, #1
 801f874:	e000      	b.n	801f878 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801f876:	2400      	movs	r4, #0
 801f878:	2d00      	cmp	r5, #0
 801f87a:	d004      	beq.n	801f886 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801f87c:	f107 0308 	add.w	r3, r7, #8
 801f880:	4618      	mov	r0, r3
 801f882:	f7ef fb68 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801f886:	2c00      	cmp	r4, #0
 801f888:	d002      	beq.n	801f890 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801f88a:	687b      	ldr	r3, [r7, #4]
 801f88c:	699b      	ldr	r3, [r3, #24]
 801f88e:	e01a      	b.n	801f8c6 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801f890:	f7f6 fb8c 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801f894:	4604      	mov	r4, r0
 801f896:	6823      	ldr	r3, [r4, #0]
 801f898:	3324      	adds	r3, #36	; 0x24
 801f89a:	681d      	ldr	r5, [r3, #0]
 801f89c:	687b      	ldr	r3, [r7, #4]
 801f89e:	330c      	adds	r3, #12
 801f8a0:	4618      	mov	r0, r3
 801f8a2:	f7ef fb2b 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801f8a6:	4606      	mov	r6, r0
 801f8a8:	f7f6 fb90 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f8ac:	4603      	mov	r3, r0
 801f8ae:	9302      	str	r3, [sp, #8]
 801f8b0:	23d2      	movs	r3, #210	; 0xd2
 801f8b2:	9301      	str	r3, [sp, #4]
 801f8b4:	4b07      	ldr	r3, [pc, #28]	; (801f8d4 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801f8b6:	9300      	str	r3, [sp, #0]
 801f8b8:	2300      	movs	r3, #0
 801f8ba:	4632      	mov	r2, r6
 801f8bc:	4906      	ldr	r1, [pc, #24]	; (801f8d8 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801f8be:	4620      	mov	r0, r4
 801f8c0:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801f8c2:	687b      	ldr	r3, [r7, #4]
 801f8c4:	699b      	ldr	r3, [r3, #24]
    }
}
 801f8c6:	4618      	mov	r0, r3
 801f8c8:	3714      	adds	r7, #20
 801f8ca:	46bd      	mov	sp, r7
 801f8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f8ce:	bf00      	nop
 801f8d0:	08028990 	.word	0x08028990
 801f8d4:	080289cc 	.word	0x080289cc
 801f8d8:	0802899c 	.word	0x0802899c

0801f8dc <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801f8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f8de:	b087      	sub	sp, #28
 801f8e0:	af04      	add	r7, sp, #16
 801f8e2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801f8e4:	f7f6 fb62 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801f8e8:	4604      	mov	r4, r0
 801f8ea:	6823      	ldr	r3, [r4, #0]
 801f8ec:	3324      	adds	r3, #36	; 0x24
 801f8ee:	681d      	ldr	r5, [r3, #0]
 801f8f0:	687b      	ldr	r3, [r7, #4]
 801f8f2:	330c      	adds	r3, #12
 801f8f4:	4618      	mov	r0, r3
 801f8f6:	f7ef fb01 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801f8fa:	4606      	mov	r6, r0
 801f8fc:	f7f6 fb66 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f900:	4603      	mov	r3, r0
 801f902:	9302      	str	r3, [sp, #8]
 801f904:	23d9      	movs	r3, #217	; 0xd9
 801f906:	9301      	str	r3, [sp, #4]
 801f908:	4b06      	ldr	r3, [pc, #24]	; (801f924 <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801f90a:	9300      	str	r3, [sp, #0]
 801f90c:	2300      	movs	r3, #0
 801f90e:	4632      	mov	r2, r6
 801f910:	4905      	ldr	r1, [pc, #20]	; (801f928 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801f912:	4620      	mov	r0, r4
 801f914:	47a8      	blx	r5
    return value_.intValue_;
 801f916:	687b      	ldr	r3, [r7, #4]
 801f918:	699b      	ldr	r3, [r3, #24]
}
 801f91a:	4618      	mov	r0, r3
 801f91c:	370c      	adds	r7, #12
 801f91e:	46bd      	mov	sp, r7
 801f920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f922:	bf00      	nop
 801f924:	080289cc 	.word	0x080289cc
 801f928:	08028990 	.word	0x08028990

0801f92c <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801f92c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f92e:	b08b      	sub	sp, #44	; 0x2c
 801f930:	af04      	add	r7, sp, #16
 801f932:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801f934:	687b      	ldr	r3, [r7, #4]
 801f936:	f103 040c 	add.w	r4, r3, #12
 801f93a:	f107 0308 	add.w	r3, r7, #8
 801f93e:	4928      	ldr	r1, [pc, #160]	; (801f9e0 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801f940:	4618      	mov	r0, r3
 801f942:	f7ee ff50 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801f946:	f107 0308 	add.w	r3, r7, #8
 801f94a:	4619      	mov	r1, r3
 801f94c:	4620      	mov	r0, r4
 801f94e:	f7ef fb0e 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 801f952:	4603      	mov	r3, r0
 801f954:	461c      	mov	r4, r3
 801f956:	f107 0308 	add.w	r3, r7, #8
 801f95a:	4618      	mov	r0, r3
 801f95c:	f7ef fafb 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801f960:	2c00      	cmp	r4, #0
 801f962:	d002      	beq.n	801f96a <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801f964:	687b      	ldr	r3, [r7, #4]
 801f966:	699b      	ldr	r3, [r3, #24]
 801f968:	e035      	b.n	801f9d6 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801f96a:	687b      	ldr	r3, [r7, #4]
 801f96c:	f103 040c 	add.w	r4, r3, #12
 801f970:	f107 0310 	add.w	r3, r7, #16
 801f974:	491b      	ldr	r1, [pc, #108]	; (801f9e4 <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801f976:	4618      	mov	r0, r3
 801f978:	f7ee ff35 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801f97c:	f107 0310 	add.w	r3, r7, #16
 801f980:	4619      	mov	r1, r3
 801f982:	4620      	mov	r0, r4
 801f984:	f7ef faf3 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 801f988:	4603      	mov	r3, r0
 801f98a:	461c      	mov	r4, r3
 801f98c:	f107 0310 	add.w	r3, r7, #16
 801f990:	4618      	mov	r0, r3
 801f992:	f7ef fae0 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801f996:	2c00      	cmp	r4, #0
 801f998:	d002      	beq.n	801f9a0 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801f99a:	687b      	ldr	r3, [r7, #4]
 801f99c:	699b      	ldr	r3, [r3, #24]
 801f99e:	e01a      	b.n	801f9d6 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801f9a0:	f7f6 fb04 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801f9a4:	4604      	mov	r4, r0
 801f9a6:	6823      	ldr	r3, [r4, #0]
 801f9a8:	3324      	adds	r3, #36	; 0x24
 801f9aa:	681d      	ldr	r5, [r3, #0]
 801f9ac:	687b      	ldr	r3, [r7, #4]
 801f9ae:	330c      	adds	r3, #12
 801f9b0:	4618      	mov	r0, r3
 801f9b2:	f7ef faa3 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801f9b6:	4606      	mov	r6, r0
 801f9b8:	f7f6 fb08 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f9bc:	4603      	mov	r3, r0
 801f9be:	9302      	str	r3, [sp, #8]
 801f9c0:	23e5      	movs	r3, #229	; 0xe5
 801f9c2:	9301      	str	r3, [sp, #4]
 801f9c4:	4b08      	ldr	r3, [pc, #32]	; (801f9e8 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801f9c6:	9300      	str	r3, [sp, #0]
 801f9c8:	2300      	movs	r3, #0
 801f9ca:	4632      	mov	r2, r6
 801f9cc:	4907      	ldr	r1, [pc, #28]	; (801f9ec <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801f9ce:	4620      	mov	r0, r4
 801f9d0:	47a8      	blx	r5
        return value_.longIntValue_;
 801f9d2:	687b      	ldr	r3, [r7, #4]
 801f9d4:	699b      	ldr	r3, [r3, #24]
    }
}
 801f9d6:	4618      	mov	r0, r3
 801f9d8:	371c      	adds	r7, #28
 801f9da:	46bd      	mov	sp, r7
 801f9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f9de:	bf00      	nop
 801f9e0:	08028990 	.word	0x08028990
 801f9e4:	0802899c 	.word	0x0802899c
 801f9e8:	080289cc 	.word	0x080289cc
 801f9ec:	080289ac 	.word	0x080289ac

0801f9f0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801f9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f9f2:	b08d      	sub	sp, #52	; 0x34
 801f9f4:	af04      	add	r7, sp, #16
 801f9f6:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801f9f8:	687b      	ldr	r3, [r7, #4]
 801f9fa:	f103 040c 	add.w	r4, r3, #12
 801f9fe:	f107 0308 	add.w	r3, r7, #8
 801fa02:	4940      	ldr	r1, [pc, #256]	; (801fb04 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801fa04:	4618      	mov	r0, r3
 801fa06:	f7ee feee 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801fa0a:	f107 0308 	add.w	r3, r7, #8
 801fa0e:	4619      	mov	r1, r3
 801fa10:	4620      	mov	r0, r4
 801fa12:	f7ef faac 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 801fa16:	4603      	mov	r3, r0
 801fa18:	461c      	mov	r4, r3
 801fa1a:	f107 0308 	add.w	r3, r7, #8
 801fa1e:	4618      	mov	r0, r3
 801fa20:	f7ef fa99 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801fa24:	2c00      	cmp	r4, #0
 801fa26:	d002      	beq.n	801fa2e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801fa28:	687b      	ldr	r3, [r7, #4]
 801fa2a:	699b      	ldr	r3, [r3, #24]
 801fa2c:	e066      	b.n	801fafc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801fa2e:	687b      	ldr	r3, [r7, #4]
 801fa30:	f103 040c 	add.w	r4, r3, #12
 801fa34:	f107 0310 	add.w	r3, r7, #16
 801fa38:	4933      	ldr	r1, [pc, #204]	; (801fb08 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801fa3a:	4618      	mov	r0, r3
 801fa3c:	f7ee fed3 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801fa40:	2501      	movs	r5, #1
 801fa42:	f107 0310 	add.w	r3, r7, #16
 801fa46:	4619      	mov	r1, r3
 801fa48:	4620      	mov	r0, r4
 801fa4a:	f7ef fa90 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 801fa4e:	4603      	mov	r3, r0
 801fa50:	2b00      	cmp	r3, #0
 801fa52:	d005      	beq.n	801fa60 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801fa54:	687b      	ldr	r3, [r7, #4]
 801fa56:	699b      	ldr	r3, [r3, #24]
 801fa58:	2b00      	cmp	r3, #0
 801fa5a:	db01      	blt.n	801fa60 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801fa5c:	2401      	movs	r4, #1
 801fa5e:	e000      	b.n	801fa62 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801fa60:	2400      	movs	r4, #0
 801fa62:	2d00      	cmp	r5, #0
 801fa64:	d004      	beq.n	801fa70 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801fa66:	f107 0310 	add.w	r3, r7, #16
 801fa6a:	4618      	mov	r0, r3
 801fa6c:	f7ef fa73 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801fa70:	2c00      	cmp	r4, #0
 801fa72:	d002      	beq.n	801fa7a <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801fa74:	687b      	ldr	r3, [r7, #4]
 801fa76:	699b      	ldr	r3, [r3, #24]
 801fa78:	e040      	b.n	801fafc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801fa7a:	687b      	ldr	r3, [r7, #4]
 801fa7c:	f103 040c 	add.w	r4, r3, #12
 801fa80:	f107 0318 	add.w	r3, r7, #24
 801fa84:	4921      	ldr	r1, [pc, #132]	; (801fb0c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801fa86:	4618      	mov	r0, r3
 801fa88:	f7ee fead 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801fa8c:	2501      	movs	r5, #1
 801fa8e:	f107 0318 	add.w	r3, r7, #24
 801fa92:	4619      	mov	r1, r3
 801fa94:	4620      	mov	r0, r4
 801fa96:	f7ef fa6a 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 801fa9a:	4603      	mov	r3, r0
 801fa9c:	2b00      	cmp	r3, #0
 801fa9e:	d005      	beq.n	801faac <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801faa0:	687b      	ldr	r3, [r7, #4]
 801faa2:	699b      	ldr	r3, [r3, #24]
 801faa4:	2b00      	cmp	r3, #0
 801faa6:	db01      	blt.n	801faac <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801faa8:	2401      	movs	r4, #1
 801faaa:	e000      	b.n	801faae <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801faac:	2400      	movs	r4, #0
 801faae:	2d00      	cmp	r5, #0
 801fab0:	d004      	beq.n	801fabc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801fab2:	f107 0318 	add.w	r3, r7, #24
 801fab6:	4618      	mov	r0, r3
 801fab8:	f7ef fa4d 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801fabc:	2c00      	cmp	r4, #0
 801fabe:	d002      	beq.n	801fac6 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801fac0:	687b      	ldr	r3, [r7, #4]
 801fac2:	699b      	ldr	r3, [r3, #24]
 801fac4:	e01a      	b.n	801fafc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801fac6:	f7f6 fa71 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801faca:	4604      	mov	r4, r0
 801facc:	6823      	ldr	r3, [r4, #0]
 801face:	3324      	adds	r3, #36	; 0x24
 801fad0:	681d      	ldr	r5, [r3, #0]
 801fad2:	687b      	ldr	r3, [r7, #4]
 801fad4:	330c      	adds	r3, #12
 801fad6:	4618      	mov	r0, r3
 801fad8:	f7ef fa10 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801fadc:	4606      	mov	r6, r0
 801fade:	f7f6 fa75 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801fae2:	4603      	mov	r3, r0
 801fae4:	9302      	str	r3, [sp, #8]
 801fae6:	23f4      	movs	r3, #244	; 0xf4
 801fae8:	9301      	str	r3, [sp, #4]
 801faea:	4b09      	ldr	r3, [pc, #36]	; (801fb10 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801faec:	9300      	str	r3, [sp, #0]
 801faee:	2300      	movs	r3, #0
 801faf0:	4632      	mov	r2, r6
 801faf2:	4908      	ldr	r1, [pc, #32]	; (801fb14 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801faf4:	4620      	mov	r0, r4
 801faf6:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801faf8:	687b      	ldr	r3, [r7, #4]
 801fafa:	699b      	ldr	r3, [r3, #24]
    }
}
 801fafc:	4618      	mov	r0, r3
 801fafe:	3724      	adds	r7, #36	; 0x24
 801fb00:	46bd      	mov	sp, r7
 801fb02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fb04:	0802899c 	.word	0x0802899c
 801fb08:	08028990 	.word	0x08028990
 801fb0c:	080289ac 	.word	0x080289ac
 801fb10:	080289cc 	.word	0x080289cc
 801fb14:	080289b8 	.word	0x080289b8

0801fb18 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801fb18:	b5b0      	push	{r4, r5, r7, lr}
 801fb1a:	b084      	sub	sp, #16
 801fb1c:	af02      	add	r7, sp, #8
 801fb1e:	6078      	str	r0, [r7, #4]
 801fb20:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801fb22:	f7f6 fa43 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801fb26:	4604      	mov	r4, r0
 801fb28:	6823      	ldr	r3, [r4, #0]
 801fb2a:	3368      	adds	r3, #104	; 0x68
 801fb2c:	681d      	ldr	r5, [r3, #0]
 801fb2e:	f7f6 fa4d 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801fb32:	4603      	mov	r3, r0
 801fb34:	9300      	str	r3, [sp, #0]
 801fb36:	f240 1323 	movw	r3, #291	; 0x123
 801fb3a:	4a06      	ldr	r2, [pc, #24]	; (801fb54 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801fb3c:	4906      	ldr	r1, [pc, #24]	; (801fb58 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801fb3e:	4620      	mov	r0, r4
 801fb40:	47a8      	blx	r5
    return cpputest_longlong(0);
 801fb42:	2100      	movs	r1, #0
 801fb44:	6878      	ldr	r0, [r7, #4]
 801fb46:	f7ec fe85 	bl	800c854 <_ZN17cpputest_longlongC1Ei>
}
 801fb4a:	6878      	ldr	r0, [r7, #4]
 801fb4c:	3708      	adds	r7, #8
 801fb4e:	46bd      	mov	sp, r7
 801fb50:	bdb0      	pop	{r4, r5, r7, pc}
 801fb52:	bf00      	nop
 801fb54:	080289cc 	.word	0x080289cc
 801fb58:	080289e8 	.word	0x080289e8

0801fb5c <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801fb5c:	b5b0      	push	{r4, r5, r7, lr}
 801fb5e:	b084      	sub	sp, #16
 801fb60:	af02      	add	r7, sp, #8
 801fb62:	6078      	str	r0, [r7, #4]
 801fb64:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801fb66:	f7f6 fa21 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801fb6a:	4604      	mov	r4, r0
 801fb6c:	6823      	ldr	r3, [r4, #0]
 801fb6e:	3368      	adds	r3, #104	; 0x68
 801fb70:	681d      	ldr	r5, [r3, #0]
 801fb72:	f7f6 fa2b 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801fb76:	4603      	mov	r3, r0
 801fb78:	9300      	str	r3, [sp, #0]
 801fb7a:	f240 1329 	movw	r3, #297	; 0x129
 801fb7e:	4a06      	ldr	r2, [pc, #24]	; (801fb98 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801fb80:	4906      	ldr	r1, [pc, #24]	; (801fb9c <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801fb82:	4620      	mov	r0, r4
 801fb84:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801fb86:	2100      	movs	r1, #0
 801fb88:	6878      	ldr	r0, [r7, #4]
 801fb8a:	f7ec fe6f 	bl	800c86c <_ZN18cpputest_ulonglongC1Ei>
}
 801fb8e:	6878      	ldr	r0, [r7, #4]
 801fb90:	3708      	adds	r7, #8
 801fb92:	46bd      	mov	sp, r7
 801fb94:	bdb0      	pop	{r4, r5, r7, pc}
 801fb96:	bf00      	nop
 801fb98:	080289cc 	.word	0x080289cc
 801fb9c:	08028a08 	.word	0x08028a08

0801fba0 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801fba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fba2:	b087      	sub	sp, #28
 801fba4:	af04      	add	r7, sp, #16
 801fba6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801fba8:	f7f6 fa00 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801fbac:	4604      	mov	r4, r0
 801fbae:	6823      	ldr	r3, [r4, #0]
 801fbb0:	3324      	adds	r3, #36	; 0x24
 801fbb2:	681d      	ldr	r5, [r3, #0]
 801fbb4:	687b      	ldr	r3, [r7, #4]
 801fbb6:	330c      	adds	r3, #12
 801fbb8:	4618      	mov	r0, r3
 801fbba:	f7ef f99f 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801fbbe:	4606      	mov	r6, r0
 801fbc0:	f7f6 fa04 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801fbc4:	4603      	mov	r3, r0
 801fbc6:	9302      	str	r3, [sp, #8]
 801fbc8:	f240 1331 	movw	r3, #305	; 0x131
 801fbcc:	9301      	str	r3, [sp, #4]
 801fbce:	4b09      	ldr	r3, [pc, #36]	; (801fbf4 <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801fbd0:	9300      	str	r3, [sp, #0]
 801fbd2:	2300      	movs	r3, #0
 801fbd4:	4632      	mov	r2, r6
 801fbd6:	4908      	ldr	r1, [pc, #32]	; (801fbf8 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801fbd8:	4620      	mov	r0, r4
 801fbda:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801fbdc:	687b      	ldr	r3, [r7, #4]
 801fbde:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801fbe2:	ec43 2b17 	vmov	d7, r2, r3
}
 801fbe6:	eeb0 0a47 	vmov.f32	s0, s14
 801fbea:	eef0 0a67 	vmov.f32	s1, s15
 801fbee:	370c      	adds	r7, #12
 801fbf0:	46bd      	mov	sp, r7
 801fbf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fbf4:	080289cc 	.word	0x080289cc
 801fbf8:	08028a34 	.word	0x08028a34

0801fbfc <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801fbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fbfe:	b087      	sub	sp, #28
 801fc00:	af04      	add	r7, sp, #16
 801fc02:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801fc04:	f7f6 f9d2 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801fc08:	4604      	mov	r4, r0
 801fc0a:	6823      	ldr	r3, [r4, #0]
 801fc0c:	3324      	adds	r3, #36	; 0x24
 801fc0e:	681d      	ldr	r5, [r3, #0]
 801fc10:	687b      	ldr	r3, [r7, #4]
 801fc12:	330c      	adds	r3, #12
 801fc14:	4618      	mov	r0, r3
 801fc16:	f7ef f971 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801fc1a:	4606      	mov	r6, r0
 801fc1c:	f7f6 f9d6 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801fc20:	4603      	mov	r3, r0
 801fc22:	9302      	str	r3, [sp, #8]
 801fc24:	f240 1337 	movw	r3, #311	; 0x137
 801fc28:	9301      	str	r3, [sp, #4]
 801fc2a:	4b09      	ldr	r3, [pc, #36]	; (801fc50 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801fc2c:	9300      	str	r3, [sp, #0]
 801fc2e:	2300      	movs	r3, #0
 801fc30:	4632      	mov	r2, r6
 801fc32:	4908      	ldr	r1, [pc, #32]	; (801fc54 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801fc34:	4620      	mov	r0, r4
 801fc36:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801fc38:	687b      	ldr	r3, [r7, #4]
 801fc3a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801fc3e:	ec43 2b17 	vmov	d7, r2, r3
}
 801fc42:	eeb0 0a47 	vmov.f32	s0, s14
 801fc46:	eef0 0a67 	vmov.f32	s1, s15
 801fc4a:	370c      	adds	r7, #12
 801fc4c:	46bd      	mov	sp, r7
 801fc4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fc50:	080289cc 	.word	0x080289cc
 801fc54:	08028a34 	.word	0x08028a34

0801fc58 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801fc58:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc5a:	b087      	sub	sp, #28
 801fc5c:	af04      	add	r7, sp, #16
 801fc5e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801fc60:	f7f6 f9a4 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801fc64:	4604      	mov	r4, r0
 801fc66:	6823      	ldr	r3, [r4, #0]
 801fc68:	3324      	adds	r3, #36	; 0x24
 801fc6a:	681d      	ldr	r5, [r3, #0]
 801fc6c:	687b      	ldr	r3, [r7, #4]
 801fc6e:	330c      	adds	r3, #12
 801fc70:	4618      	mov	r0, r3
 801fc72:	f7ef f943 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801fc76:	4606      	mov	r6, r0
 801fc78:	f7f6 f9a8 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801fc7c:	4603      	mov	r3, r0
 801fc7e:	9302      	str	r3, [sp, #8]
 801fc80:	f240 133d 	movw	r3, #317	; 0x13d
 801fc84:	9301      	str	r3, [sp, #4]
 801fc86:	4b06      	ldr	r3, [pc, #24]	; (801fca0 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801fc88:	9300      	str	r3, [sp, #0]
 801fc8a:	2300      	movs	r3, #0
 801fc8c:	4632      	mov	r2, r6
 801fc8e:	4905      	ldr	r1, [pc, #20]	; (801fca4 <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801fc90:	4620      	mov	r0, r4
 801fc92:	47a8      	blx	r5
    return value_.stringValue_;
 801fc94:	687b      	ldr	r3, [r7, #4]
 801fc96:	699b      	ldr	r3, [r3, #24]
}
 801fc98:	4618      	mov	r0, r3
 801fc9a:	370c      	adds	r7, #12
 801fc9c:	46bd      	mov	sp, r7
 801fc9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fca0:	080289cc 	.word	0x080289cc
 801fca4:	08028a5c 	.word	0x08028a5c

0801fca8 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801fca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fcaa:	b087      	sub	sp, #28
 801fcac:	af04      	add	r7, sp, #16
 801fcae:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801fcb0:	f7f6 f97c 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801fcb4:	4604      	mov	r4, r0
 801fcb6:	6823      	ldr	r3, [r4, #0]
 801fcb8:	3324      	adds	r3, #36	; 0x24
 801fcba:	681d      	ldr	r5, [r3, #0]
 801fcbc:	687b      	ldr	r3, [r7, #4]
 801fcbe:	330c      	adds	r3, #12
 801fcc0:	4618      	mov	r0, r3
 801fcc2:	f7ef f91b 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801fcc6:	4606      	mov	r6, r0
 801fcc8:	f7f6 f980 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801fccc:	4603      	mov	r3, r0
 801fcce:	9302      	str	r3, [sp, #8]
 801fcd0:	f240 1343 	movw	r3, #323	; 0x143
 801fcd4:	9301      	str	r3, [sp, #4]
 801fcd6:	4b06      	ldr	r3, [pc, #24]	; (801fcf0 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801fcd8:	9300      	str	r3, [sp, #0]
 801fcda:	2300      	movs	r3, #0
 801fcdc:	4632      	mov	r2, r6
 801fcde:	4905      	ldr	r1, [pc, #20]	; (801fcf4 <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801fce0:	4620      	mov	r0, r4
 801fce2:	47a8      	blx	r5
    return value_.pointerValue_;
 801fce4:	687b      	ldr	r3, [r7, #4]
 801fce6:	699b      	ldr	r3, [r3, #24]
}
 801fce8:	4618      	mov	r0, r3
 801fcea:	370c      	adds	r7, #12
 801fcec:	46bd      	mov	sp, r7
 801fcee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fcf0:	080289cc 	.word	0x080289cc
 801fcf4:	08028a3c 	.word	0x08028a3c

0801fcf8 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801fcf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fcfa:	b087      	sub	sp, #28
 801fcfc:	af04      	add	r7, sp, #16
 801fcfe:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801fd00:	f7f6 f954 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801fd04:	4604      	mov	r4, r0
 801fd06:	6823      	ldr	r3, [r4, #0]
 801fd08:	3324      	adds	r3, #36	; 0x24
 801fd0a:	681d      	ldr	r5, [r3, #0]
 801fd0c:	687b      	ldr	r3, [r7, #4]
 801fd0e:	330c      	adds	r3, #12
 801fd10:	4618      	mov	r0, r3
 801fd12:	f7ef f8f3 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801fd16:	4606      	mov	r6, r0
 801fd18:	f7f6 f958 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801fd1c:	4603      	mov	r3, r0
 801fd1e:	9302      	str	r3, [sp, #8]
 801fd20:	f240 1349 	movw	r3, #329	; 0x149
 801fd24:	9301      	str	r3, [sp, #4]
 801fd26:	4b06      	ldr	r3, [pc, #24]	; (801fd40 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801fd28:	9300      	str	r3, [sp, #0]
 801fd2a:	2300      	movs	r3, #0
 801fd2c:	4632      	mov	r2, r6
 801fd2e:	4905      	ldr	r1, [pc, #20]	; (801fd44 <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801fd30:	4620      	mov	r0, r4
 801fd32:	47a8      	blx	r5
    return value_.pointerValue_;
 801fd34:	687b      	ldr	r3, [r7, #4]
 801fd36:	699b      	ldr	r3, [r3, #24]
}
 801fd38:	4618      	mov	r0, r3
 801fd3a:	370c      	adds	r7, #12
 801fd3c:	46bd      	mov	sp, r7
 801fd3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fd40:	080289cc 	.word	0x080289cc
 801fd44:	08028a44 	.word	0x08028a44

0801fd48 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801fd48:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fd4a:	b087      	sub	sp, #28
 801fd4c:	af04      	add	r7, sp, #16
 801fd4e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801fd50:	f7f6 f92c 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801fd54:	4604      	mov	r4, r0
 801fd56:	6823      	ldr	r3, [r4, #0]
 801fd58:	3324      	adds	r3, #36	; 0x24
 801fd5a:	681d      	ldr	r5, [r3, #0]
 801fd5c:	687b      	ldr	r3, [r7, #4]
 801fd5e:	330c      	adds	r3, #12
 801fd60:	4618      	mov	r0, r3
 801fd62:	f7ef f8cb 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801fd66:	4606      	mov	r6, r0
 801fd68:	f7f6 f930 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801fd6c:	4603      	mov	r3, r0
 801fd6e:	9302      	str	r3, [sp, #8]
 801fd70:	f240 134f 	movw	r3, #335	; 0x14f
 801fd74:	9301      	str	r3, [sp, #4]
 801fd76:	4b06      	ldr	r3, [pc, #24]	; (801fd90 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801fd78:	9300      	str	r3, [sp, #0]
 801fd7a:	2300      	movs	r3, #0
 801fd7c:	4632      	mov	r2, r6
 801fd7e:	4905      	ldr	r1, [pc, #20]	; (801fd94 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801fd80:	4620      	mov	r0, r4
 801fd82:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801fd84:	687b      	ldr	r3, [r7, #4]
 801fd86:	699b      	ldr	r3, [r3, #24]
}
 801fd88:	4618      	mov	r0, r3
 801fd8a:	370c      	adds	r7, #12
 801fd8c:	46bd      	mov	sp, r7
 801fd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fd90:	080289cc 	.word	0x080289cc
 801fd94:	08028a50 	.word	0x08028a50

0801fd98 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801fd98:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fd9a:	b087      	sub	sp, #28
 801fd9c:	af04      	add	r7, sp, #16
 801fd9e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801fda0:	f7f6 f904 	bl	8015fac <_ZN10UtestShell10getCurrentEv>
 801fda4:	4604      	mov	r4, r0
 801fda6:	6823      	ldr	r3, [r4, #0]
 801fda8:	3324      	adds	r3, #36	; 0x24
 801fdaa:	681d      	ldr	r5, [r3, #0]
 801fdac:	687b      	ldr	r3, [r7, #4]
 801fdae:	330c      	adds	r3, #12
 801fdb0:	4618      	mov	r0, r3
 801fdb2:	f7ef f8a3 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 801fdb6:	4606      	mov	r6, r0
 801fdb8:	f7f6 f908 	bl	8015fcc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801fdbc:	4603      	mov	r3, r0
 801fdbe:	9302      	str	r3, [sp, #8]
 801fdc0:	f240 1355 	movw	r3, #341	; 0x155
 801fdc4:	9301      	str	r3, [sp, #4]
 801fdc6:	4b06      	ldr	r3, [pc, #24]	; (801fde0 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801fdc8:	9300      	str	r3, [sp, #0]
 801fdca:	2300      	movs	r3, #0
 801fdcc:	4632      	mov	r2, r6
 801fdce:	4905      	ldr	r1, [pc, #20]	; (801fde4 <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801fdd0:	4620      	mov	r0, r4
 801fdd2:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801fdd4:	687b      	ldr	r3, [r7, #4]
 801fdd6:	699b      	ldr	r3, [r3, #24]
}
 801fdd8:	4618      	mov	r0, r3
 801fdda:	370c      	adds	r7, #12
 801fddc:	46bd      	mov	sp, r7
 801fdde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fde0:	080289cc 	.word	0x080289cc
 801fde4:	08028a68 	.word	0x08028a68

0801fde8 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801fde8:	b480      	push	{r7}
 801fdea:	b083      	sub	sp, #12
 801fdec:	af00      	add	r7, sp, #0
 801fdee:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801fdf0:	687b      	ldr	r3, [r7, #4]
 801fdf2:	699b      	ldr	r3, [r3, #24]
}
 801fdf4:	4618      	mov	r0, r3
 801fdf6:	370c      	adds	r7, #12
 801fdf8:	46bd      	mov	sp, r7
 801fdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdfe:	4770      	bx	lr

0801fe00 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801fe00:	b480      	push	{r7}
 801fe02:	b083      	sub	sp, #12
 801fe04:	af00      	add	r7, sp, #0
 801fe06:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801fe08:	687b      	ldr	r3, [r7, #4]
 801fe0a:	699b      	ldr	r3, [r3, #24]
}
 801fe0c:	4618      	mov	r0, r3
 801fe0e:	370c      	adds	r7, #12
 801fe10:	46bd      	mov	sp, r7
 801fe12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe16:	4770      	bx	lr

0801fe18 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801fe18:	b480      	push	{r7}
 801fe1a:	b083      	sub	sp, #12
 801fe1c:	af00      	add	r7, sp, #0
 801fe1e:	6078      	str	r0, [r7, #4]
    return size_;
 801fe20:	687b      	ldr	r3, [r7, #4]
 801fe22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801fe24:	4618      	mov	r0, r3
 801fe26:	370c      	adds	r7, #12
 801fe28:	46bd      	mov	sp, r7
 801fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe2e:	4770      	bx	lr

0801fe30 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801fe30:	b480      	push	{r7}
 801fe32:	b083      	sub	sp, #12
 801fe34:	af00      	add	r7, sp, #0
 801fe36:	6078      	str	r0, [r7, #4]
    return comparator_;
 801fe38:	687b      	ldr	r3, [r7, #4]
 801fe3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801fe3c:	4618      	mov	r0, r3
 801fe3e:	370c      	adds	r7, #12
 801fe40:	46bd      	mov	sp, r7
 801fe42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe46:	4770      	bx	lr

0801fe48 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801fe48:	b480      	push	{r7}
 801fe4a:	b083      	sub	sp, #12
 801fe4c:	af00      	add	r7, sp, #0
 801fe4e:	6078      	str	r0, [r7, #4]
    return copier_;
 801fe50:	687b      	ldr	r3, [r7, #4]
 801fe52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801fe54:	4618      	mov	r0, r3
 801fe56:	370c      	adds	r7, #12
 801fe58:	46bd      	mov	sp, r7
 801fe5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe5e:	4770      	bx	lr

0801fe60 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801fe60:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe62:	b0cd      	sub	sp, #308	; 0x134
 801fe64:	af00      	add	r7, sp, #0
 801fe66:	1d3b      	adds	r3, r7, #4
 801fe68:	6018      	str	r0, [r3, #0]
 801fe6a:	463b      	mov	r3, r7
 801fe6c:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801fe6e:	2500      	movs	r5, #0
 801fe70:	1d3b      	adds	r3, r7, #4
 801fe72:	681b      	ldr	r3, [r3, #0]
 801fe74:	f103 040c 	add.w	r4, r3, #12
 801fe78:	f107 0308 	add.w	r3, r7, #8
 801fe7c:	49bb      	ldr	r1, [pc, #748]	; (802016c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801fe7e:	4618      	mov	r0, r3
 801fe80:	f7ee fcb1 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801fe84:	2601      	movs	r6, #1
 801fe86:	f107 0308 	add.w	r3, r7, #8
 801fe8a:	4619      	mov	r1, r3
 801fe8c:	4620      	mov	r0, r4
 801fe8e:	f7ef f86e 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 801fe92:	4603      	mov	r3, r0
 801fe94:	2b00      	cmp	r3, #0
 801fe96:	d015      	beq.n	801fec4 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801fe98:	463b      	mov	r3, r7
 801fe9a:	681b      	ldr	r3, [r3, #0]
 801fe9c:	f103 040c 	add.w	r4, r3, #12
 801fea0:	f107 0310 	add.w	r3, r7, #16
 801fea4:	49b2      	ldr	r1, [pc, #712]	; (8020170 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801fea6:	4618      	mov	r0, r3
 801fea8:	f7ee fc9d 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801feac:	2501      	movs	r5, #1
 801feae:	f107 0310 	add.w	r3, r7, #16
 801feb2:	4619      	mov	r1, r3
 801feb4:	4620      	mov	r0, r4
 801feb6:	f7ef f85a 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 801feba:	4603      	mov	r3, r0
 801febc:	2b00      	cmp	r3, #0
 801febe:	d001      	beq.n	801fec4 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801fec0:	2401      	movs	r4, #1
 801fec2:	e000      	b.n	801fec6 <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801fec4:	2400      	movs	r4, #0
 801fec6:	2d00      	cmp	r5, #0
 801fec8:	d004      	beq.n	801fed4 <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801feca:	f107 0310 	add.w	r3, r7, #16
 801fece:	4618      	mov	r0, r3
 801fed0:	f7ef f841 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801fed4:	2e00      	cmp	r6, #0
 801fed6:	d004      	beq.n	801fee2 <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801fed8:	f107 0308 	add.w	r3, r7, #8
 801fedc:	4618      	mov	r0, r3
 801fede:	f7ef f83a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801fee2:	2c00      	cmp	r4, #0
 801fee4:	d00c      	beq.n	801ff00 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801fee6:	1d3b      	adds	r3, r7, #4
 801fee8:	681b      	ldr	r3, [r3, #0]
 801feea:	699a      	ldr	r2, [r3, #24]
 801feec:	463b      	mov	r3, r7
 801feee:	681b      	ldr	r3, [r3, #0]
 801fef0:	699b      	ldr	r3, [r3, #24]
 801fef2:	429a      	cmp	r2, r3
 801fef4:	bf0c      	ite	eq
 801fef6:	2301      	moveq	r3, #1
 801fef8:	2300      	movne	r3, #0
 801fefa:	b2dc      	uxtb	r4, r3
 801fefc:	f000 bd60 	b.w	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801ff00:	2500      	movs	r5, #0
 801ff02:	1d3b      	adds	r3, r7, #4
 801ff04:	681b      	ldr	r3, [r3, #0]
 801ff06:	f103 040c 	add.w	r4, r3, #12
 801ff0a:	f107 0318 	add.w	r3, r7, #24
 801ff0e:	4998      	ldr	r1, [pc, #608]	; (8020170 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801ff10:	4618      	mov	r0, r3
 801ff12:	f7ee fc68 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801ff16:	2601      	movs	r6, #1
 801ff18:	f107 0318 	add.w	r3, r7, #24
 801ff1c:	4619      	mov	r1, r3
 801ff1e:	4620      	mov	r0, r4
 801ff20:	f7ef f825 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 801ff24:	4603      	mov	r3, r0
 801ff26:	2b00      	cmp	r3, #0
 801ff28:	d015      	beq.n	801ff56 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801ff2a:	463b      	mov	r3, r7
 801ff2c:	681b      	ldr	r3, [r3, #0]
 801ff2e:	f103 040c 	add.w	r4, r3, #12
 801ff32:	f107 0320 	add.w	r3, r7, #32
 801ff36:	498d      	ldr	r1, [pc, #564]	; (802016c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801ff38:	4618      	mov	r0, r3
 801ff3a:	f7ee fc54 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801ff3e:	2501      	movs	r5, #1
 801ff40:	f107 0320 	add.w	r3, r7, #32
 801ff44:	4619      	mov	r1, r3
 801ff46:	4620      	mov	r0, r4
 801ff48:	f7ef f811 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 801ff4c:	4603      	mov	r3, r0
 801ff4e:	2b00      	cmp	r3, #0
 801ff50:	d001      	beq.n	801ff56 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801ff52:	2401      	movs	r4, #1
 801ff54:	e000      	b.n	801ff58 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801ff56:	2400      	movs	r4, #0
 801ff58:	2d00      	cmp	r5, #0
 801ff5a:	d004      	beq.n	801ff66 <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801ff5c:	f107 0320 	add.w	r3, r7, #32
 801ff60:	4618      	mov	r0, r3
 801ff62:	f7ee fff8 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801ff66:	2e00      	cmp	r6, #0
 801ff68:	d004      	beq.n	801ff74 <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801ff6a:	f107 0318 	add.w	r3, r7, #24
 801ff6e:	4618      	mov	r0, r3
 801ff70:	f7ee fff1 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801ff74:	2c00      	cmp	r4, #0
 801ff76:	d00c      	beq.n	801ff92 <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801ff78:	1d3b      	adds	r3, r7, #4
 801ff7a:	681b      	ldr	r3, [r3, #0]
 801ff7c:	699a      	ldr	r2, [r3, #24]
 801ff7e:	463b      	mov	r3, r7
 801ff80:	681b      	ldr	r3, [r3, #0]
 801ff82:	699b      	ldr	r3, [r3, #24]
 801ff84:	429a      	cmp	r2, r3
 801ff86:	bf0c      	ite	eq
 801ff88:	2301      	moveq	r3, #1
 801ff8a:	2300      	movne	r3, #0
 801ff8c:	b2dc      	uxtb	r4, r3
 801ff8e:	f000 bd17 	b.w	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801ff92:	2500      	movs	r5, #0
 801ff94:	1d3b      	adds	r3, r7, #4
 801ff96:	681b      	ldr	r3, [r3, #0]
 801ff98:	f103 040c 	add.w	r4, r3, #12
 801ff9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ffa0:	4974      	ldr	r1, [pc, #464]	; (8020174 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801ffa2:	4618      	mov	r0, r3
 801ffa4:	f7ee fc1f 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801ffa8:	2601      	movs	r6, #1
 801ffaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ffae:	4619      	mov	r1, r3
 801ffb0:	4620      	mov	r0, r4
 801ffb2:	f7ee ffdc 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 801ffb6:	4603      	mov	r3, r0
 801ffb8:	2b00      	cmp	r3, #0
 801ffba:	d015      	beq.n	801ffe8 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801ffbc:	463b      	mov	r3, r7
 801ffbe:	681b      	ldr	r3, [r3, #0]
 801ffc0:	f103 040c 	add.w	r4, r3, #12
 801ffc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ffc8:	4969      	ldr	r1, [pc, #420]	; (8020170 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801ffca:	4618      	mov	r0, r3
 801ffcc:	f7ee fc0b 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 801ffd0:	2501      	movs	r5, #1
 801ffd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ffd6:	4619      	mov	r1, r3
 801ffd8:	4620      	mov	r0, r4
 801ffda:	f7ee ffc8 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 801ffde:	4603      	mov	r3, r0
 801ffe0:	2b00      	cmp	r3, #0
 801ffe2:	d001      	beq.n	801ffe8 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801ffe4:	2401      	movs	r4, #1
 801ffe6:	e000      	b.n	801ffea <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801ffe8:	2400      	movs	r4, #0
 801ffea:	2d00      	cmp	r5, #0
 801ffec:	d004      	beq.n	801fff8 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801ffee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801fff2:	4618      	mov	r0, r3
 801fff4:	f7ee ffaf 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 801fff8:	2e00      	cmp	r6, #0
 801fffa:	d004      	beq.n	8020006 <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801fffc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8020000:	4618      	mov	r0, r3
 8020002:	f7ee ffa8 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020006:	2c00      	cmp	r4, #0
 8020008:	d012      	beq.n	8020030 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 802000a:	463b      	mov	r3, r7
 802000c:	681b      	ldr	r3, [r3, #0]
 802000e:	699b      	ldr	r3, [r3, #24]
 8020010:	2b00      	cmp	r3, #0
 8020012:	db0a      	blt.n	802002a <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 8020014:	1d3b      	adds	r3, r7, #4
 8020016:	681b      	ldr	r3, [r3, #0]
 8020018:	699b      	ldr	r3, [r3, #24]
 802001a:	463a      	mov	r2, r7
 802001c:	6812      	ldr	r2, [r2, #0]
 802001e:	6992      	ldr	r2, [r2, #24]
 8020020:	4293      	cmp	r3, r2
 8020022:	d102      	bne.n	802002a <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 8020024:	2401      	movs	r4, #1
 8020026:	f000 bccb 	b.w	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 802002a:	2400      	movs	r4, #0
 802002c:	f000 bcc8 	b.w	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 8020030:	2500      	movs	r5, #0
 8020032:	1d3b      	adds	r3, r7, #4
 8020034:	681b      	ldr	r3, [r3, #0]
 8020036:	f103 040c 	add.w	r4, r3, #12
 802003a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802003e:	494c      	ldr	r1, [pc, #304]	; (8020170 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 8020040:	4618      	mov	r0, r3
 8020042:	f7ee fbd0 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020046:	2601      	movs	r6, #1
 8020048:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802004c:	4619      	mov	r1, r3
 802004e:	4620      	mov	r0, r4
 8020050:	f7ee ff8d 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020054:	4603      	mov	r3, r0
 8020056:	2b00      	cmp	r3, #0
 8020058:	d015      	beq.n	8020086 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 802005a:	463b      	mov	r3, r7
 802005c:	681b      	ldr	r3, [r3, #0]
 802005e:	f103 040c 	add.w	r4, r3, #12
 8020062:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020066:	4943      	ldr	r1, [pc, #268]	; (8020174 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 8020068:	4618      	mov	r0, r3
 802006a:	f7ee fbbc 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 802006e:	2501      	movs	r5, #1
 8020070:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020074:	4619      	mov	r1, r3
 8020076:	4620      	mov	r0, r4
 8020078:	f7ee ff79 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 802007c:	4603      	mov	r3, r0
 802007e:	2b00      	cmp	r3, #0
 8020080:	d001      	beq.n	8020086 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 8020082:	2401      	movs	r4, #1
 8020084:	e000      	b.n	8020088 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 8020086:	2400      	movs	r4, #0
 8020088:	2d00      	cmp	r5, #0
 802008a:	d004      	beq.n	8020096 <_ZNK14MockNamedValue6equalsERKS_+0x236>
 802008c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020090:	4618      	mov	r0, r3
 8020092:	f7ee ff60 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020096:	2e00      	cmp	r6, #0
 8020098:	d004      	beq.n	80200a4 <_ZNK14MockNamedValue6equalsERKS_+0x244>
 802009a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802009e:	4618      	mov	r0, r3
 80200a0:	f7ee ff59 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80200a4:	2c00      	cmp	r4, #0
 80200a6:	d012      	beq.n	80200ce <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 80200a8:	1d3b      	adds	r3, r7, #4
 80200aa:	681b      	ldr	r3, [r3, #0]
 80200ac:	699b      	ldr	r3, [r3, #24]
 80200ae:	2b00      	cmp	r3, #0
 80200b0:	db0a      	blt.n	80200c8 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 80200b2:	1d3b      	adds	r3, r7, #4
 80200b4:	681b      	ldr	r3, [r3, #0]
 80200b6:	699b      	ldr	r3, [r3, #24]
 80200b8:	463a      	mov	r2, r7
 80200ba:	6812      	ldr	r2, [r2, #0]
 80200bc:	6992      	ldr	r2, [r2, #24]
 80200be:	4293      	cmp	r3, r2
 80200c0:	d102      	bne.n	80200c8 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 80200c2:	2401      	movs	r4, #1
 80200c4:	f000 bc7c 	b.w	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 80200c8:	2400      	movs	r4, #0
 80200ca:	f000 bc79 	b.w	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 80200ce:	2500      	movs	r5, #0
 80200d0:	1d3b      	adds	r3, r7, #4
 80200d2:	681b      	ldr	r3, [r3, #0]
 80200d4:	f103 040c 	add.w	r4, r3, #12
 80200d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80200dc:	4926      	ldr	r1, [pc, #152]	; (8020178 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 80200de:	4618      	mov	r0, r3
 80200e0:	f7ee fb81 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80200e4:	2601      	movs	r6, #1
 80200e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80200ea:	4619      	mov	r1, r3
 80200ec:	4620      	mov	r0, r4
 80200ee:	f7ee ff3e 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 80200f2:	4603      	mov	r3, r0
 80200f4:	2b00      	cmp	r3, #0
 80200f6:	d015      	beq.n	8020124 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 80200f8:	463b      	mov	r3, r7
 80200fa:	681b      	ldr	r3, [r3, #0]
 80200fc:	f103 040c 	add.w	r4, r3, #12
 8020100:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8020104:	491a      	ldr	r1, [pc, #104]	; (8020170 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 8020106:	4618      	mov	r0, r3
 8020108:	f7ee fb6d 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 802010c:	2501      	movs	r5, #1
 802010e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8020112:	4619      	mov	r1, r3
 8020114:	4620      	mov	r0, r4
 8020116:	f7ee ff2a 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 802011a:	4603      	mov	r3, r0
 802011c:	2b00      	cmp	r3, #0
 802011e:	d001      	beq.n	8020124 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 8020120:	2401      	movs	r4, #1
 8020122:	e000      	b.n	8020126 <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 8020124:	2400      	movs	r4, #0
 8020126:	2d00      	cmp	r5, #0
 8020128:	d004      	beq.n	8020134 <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 802012a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802012e:	4618      	mov	r0, r3
 8020130:	f7ee ff11 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020134:	2e00      	cmp	r6, #0
 8020136:	d004      	beq.n	8020142 <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 8020138:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802013c:	4618      	mov	r0, r3
 802013e:	f7ee ff0a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020142:	2c00      	cmp	r4, #0
 8020144:	d01a      	beq.n	802017c <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 8020146:	463b      	mov	r3, r7
 8020148:	681b      	ldr	r3, [r3, #0]
 802014a:	699b      	ldr	r3, [r3, #24]
 802014c:	2b00      	cmp	r3, #0
 802014e:	db0a      	blt.n	8020166 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 8020150:	1d3b      	adds	r3, r7, #4
 8020152:	681b      	ldr	r3, [r3, #0]
 8020154:	699b      	ldr	r3, [r3, #24]
 8020156:	463a      	mov	r2, r7
 8020158:	6812      	ldr	r2, [r2, #0]
 802015a:	6992      	ldr	r2, [r2, #24]
 802015c:	4293      	cmp	r3, r2
 802015e:	d102      	bne.n	8020166 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 8020160:	2401      	movs	r4, #1
 8020162:	f000 bc2d 	b.w	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8020166:	2400      	movs	r4, #0
 8020168:	f000 bc2a 	b.w	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 802016c:	080289ac 	.word	0x080289ac
 8020170:	08028990 	.word	0x08028990
 8020174:	0802899c 	.word	0x0802899c
 8020178:	080289b8 	.word	0x080289b8
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 802017c:	2500      	movs	r5, #0
 802017e:	1d3b      	adds	r3, r7, #4
 8020180:	681b      	ldr	r3, [r3, #0]
 8020182:	f103 040c 	add.w	r4, r3, #12
 8020186:	f107 0358 	add.w	r3, r7, #88	; 0x58
 802018a:	49b8      	ldr	r1, [pc, #736]	; (802046c <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 802018c:	4618      	mov	r0, r3
 802018e:	f7ee fb2a 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020192:	2601      	movs	r6, #1
 8020194:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8020198:	4619      	mov	r1, r3
 802019a:	4620      	mov	r0, r4
 802019c:	f7ee fee7 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 80201a0:	4603      	mov	r3, r0
 80201a2:	2b00      	cmp	r3, #0
 80201a4:	d015      	beq.n	80201d2 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 80201a6:	463b      	mov	r3, r7
 80201a8:	681b      	ldr	r3, [r3, #0]
 80201aa:	f103 040c 	add.w	r4, r3, #12
 80201ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80201b2:	49af      	ldr	r1, [pc, #700]	; (8020470 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 80201b4:	4618      	mov	r0, r3
 80201b6:	f7ee fb16 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80201ba:	2501      	movs	r5, #1
 80201bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80201c0:	4619      	mov	r1, r3
 80201c2:	4620      	mov	r0, r4
 80201c4:	f7ee fed3 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 80201c8:	4603      	mov	r3, r0
 80201ca:	2b00      	cmp	r3, #0
 80201cc:	d001      	beq.n	80201d2 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 80201ce:	2401      	movs	r4, #1
 80201d0:	e000      	b.n	80201d4 <_ZNK14MockNamedValue6equalsERKS_+0x374>
 80201d2:	2400      	movs	r4, #0
 80201d4:	2d00      	cmp	r5, #0
 80201d6:	d004      	beq.n	80201e2 <_ZNK14MockNamedValue6equalsERKS_+0x382>
 80201d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80201dc:	4618      	mov	r0, r3
 80201de:	f7ee feba 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80201e2:	2e00      	cmp	r6, #0
 80201e4:	d004      	beq.n	80201f0 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 80201e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80201ea:	4618      	mov	r0, r3
 80201ec:	f7ee feb3 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80201f0:	2c00      	cmp	r4, #0
 80201f2:	d010      	beq.n	8020216 <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 80201f4:	1d3b      	adds	r3, r7, #4
 80201f6:	681b      	ldr	r3, [r3, #0]
 80201f8:	699b      	ldr	r3, [r3, #24]
 80201fa:	2b00      	cmp	r3, #0
 80201fc:	db09      	blt.n	8020212 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 80201fe:	1d3b      	adds	r3, r7, #4
 8020200:	681b      	ldr	r3, [r3, #0]
 8020202:	699b      	ldr	r3, [r3, #24]
 8020204:	463a      	mov	r2, r7
 8020206:	6812      	ldr	r2, [r2, #0]
 8020208:	6992      	ldr	r2, [r2, #24]
 802020a:	4293      	cmp	r3, r2
 802020c:	d101      	bne.n	8020212 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 802020e:	2401      	movs	r4, #1
 8020210:	e3d6      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8020212:	2400      	movs	r4, #0
 8020214:	e3d4      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 8020216:	2500      	movs	r5, #0
 8020218:	1d3b      	adds	r3, r7, #4
 802021a:	681b      	ldr	r3, [r3, #0]
 802021c:	f103 040c 	add.w	r4, r3, #12
 8020220:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8020224:	4993      	ldr	r1, [pc, #588]	; (8020474 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 8020226:	4618      	mov	r0, r3
 8020228:	f7ee fadd 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 802022c:	2601      	movs	r6, #1
 802022e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8020232:	4619      	mov	r1, r3
 8020234:	4620      	mov	r0, r4
 8020236:	f7ee fe9a 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 802023a:	4603      	mov	r3, r0
 802023c:	2b00      	cmp	r3, #0
 802023e:	d015      	beq.n	802026c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 8020240:	463b      	mov	r3, r7
 8020242:	681b      	ldr	r3, [r3, #0]
 8020244:	f103 040c 	add.w	r4, r3, #12
 8020248:	f107 0370 	add.w	r3, r7, #112	; 0x70
 802024c:	498a      	ldr	r1, [pc, #552]	; (8020478 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 802024e:	4618      	mov	r0, r3
 8020250:	f7ee fac9 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020254:	2501      	movs	r5, #1
 8020256:	f107 0370 	add.w	r3, r7, #112	; 0x70
 802025a:	4619      	mov	r1, r3
 802025c:	4620      	mov	r0, r4
 802025e:	f7ee fe86 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020262:	4603      	mov	r3, r0
 8020264:	2b00      	cmp	r3, #0
 8020266:	d001      	beq.n	802026c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 8020268:	2401      	movs	r4, #1
 802026a:	e000      	b.n	802026e <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 802026c:	2400      	movs	r4, #0
 802026e:	2d00      	cmp	r5, #0
 8020270:	d004      	beq.n	802027c <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 8020272:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8020276:	4618      	mov	r0, r3
 8020278:	f7ee fe6d 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 802027c:	2e00      	cmp	r6, #0
 802027e:	d004      	beq.n	802028a <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 8020280:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8020284:	4618      	mov	r0, r3
 8020286:	f7ee fe66 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 802028a:	2c00      	cmp	r4, #0
 802028c:	d010      	beq.n	80202b0 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 802028e:	463b      	mov	r3, r7
 8020290:	681b      	ldr	r3, [r3, #0]
 8020292:	699b      	ldr	r3, [r3, #24]
 8020294:	2b00      	cmp	r3, #0
 8020296:	db09      	blt.n	80202ac <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 8020298:	1d3b      	adds	r3, r7, #4
 802029a:	681b      	ldr	r3, [r3, #0]
 802029c:	699b      	ldr	r3, [r3, #24]
 802029e:	463a      	mov	r2, r7
 80202a0:	6812      	ldr	r2, [r2, #0]
 80202a2:	6992      	ldr	r2, [r2, #24]
 80202a4:	4293      	cmp	r3, r2
 80202a6:	d101      	bne.n	80202ac <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 80202a8:	2401      	movs	r4, #1
 80202aa:	e389      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 80202ac:	2400      	movs	r4, #0
 80202ae:	e387      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 80202b0:	2500      	movs	r5, #0
 80202b2:	1d3b      	adds	r3, r7, #4
 80202b4:	681b      	ldr	r3, [r3, #0]
 80202b6:	f103 040c 	add.w	r4, r3, #12
 80202ba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80202be:	496e      	ldr	r1, [pc, #440]	; (8020478 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 80202c0:	4618      	mov	r0, r3
 80202c2:	f7ee fa90 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80202c6:	2601      	movs	r6, #1
 80202c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80202cc:	4619      	mov	r1, r3
 80202ce:	4620      	mov	r0, r4
 80202d0:	f7ee fe4d 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 80202d4:	4603      	mov	r3, r0
 80202d6:	2b00      	cmp	r3, #0
 80202d8:	d015      	beq.n	8020306 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 80202da:	463b      	mov	r3, r7
 80202dc:	681b      	ldr	r3, [r3, #0]
 80202de:	f103 040c 	add.w	r4, r3, #12
 80202e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80202e6:	4963      	ldr	r1, [pc, #396]	; (8020474 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 80202e8:	4618      	mov	r0, r3
 80202ea:	f7ee fa7c 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80202ee:	2501      	movs	r5, #1
 80202f0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80202f4:	4619      	mov	r1, r3
 80202f6:	4620      	mov	r0, r4
 80202f8:	f7ee fe39 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 80202fc:	4603      	mov	r3, r0
 80202fe:	2b00      	cmp	r3, #0
 8020300:	d001      	beq.n	8020306 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 8020302:	2401      	movs	r4, #1
 8020304:	e000      	b.n	8020308 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 8020306:	2400      	movs	r4, #0
 8020308:	2d00      	cmp	r5, #0
 802030a:	d004      	beq.n	8020316 <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 802030c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8020310:	4618      	mov	r0, r3
 8020312:	f7ee fe20 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020316:	2e00      	cmp	r6, #0
 8020318:	d004      	beq.n	8020324 <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 802031a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 802031e:	4618      	mov	r0, r3
 8020320:	f7ee fe19 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020324:	2c00      	cmp	r4, #0
 8020326:	d010      	beq.n	802034a <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 8020328:	1d3b      	adds	r3, r7, #4
 802032a:	681b      	ldr	r3, [r3, #0]
 802032c:	699b      	ldr	r3, [r3, #24]
 802032e:	2b00      	cmp	r3, #0
 8020330:	db09      	blt.n	8020346 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 8020332:	1d3b      	adds	r3, r7, #4
 8020334:	681b      	ldr	r3, [r3, #0]
 8020336:	699b      	ldr	r3, [r3, #24]
 8020338:	463a      	mov	r2, r7
 802033a:	6812      	ldr	r2, [r2, #0]
 802033c:	6992      	ldr	r2, [r2, #24]
 802033e:	4293      	cmp	r3, r2
 8020340:	d101      	bne.n	8020346 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 8020342:	2401      	movs	r4, #1
 8020344:	e33c      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8020346:	2400      	movs	r4, #0
 8020348:	e33a      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 802034a:	2500      	movs	r5, #0
 802034c:	1d3b      	adds	r3, r7, #4
 802034e:	681b      	ldr	r3, [r3, #0]
 8020350:	f103 040c 	add.w	r4, r3, #12
 8020354:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8020358:	4946      	ldr	r1, [pc, #280]	; (8020474 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 802035a:	4618      	mov	r0, r3
 802035c:	f7ee fa43 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020360:	2601      	movs	r6, #1
 8020362:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8020366:	4619      	mov	r1, r3
 8020368:	4620      	mov	r0, r4
 802036a:	f7ee fe00 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 802036e:	4603      	mov	r3, r0
 8020370:	2b00      	cmp	r3, #0
 8020372:	d015      	beq.n	80203a0 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 8020374:	463b      	mov	r3, r7
 8020376:	681b      	ldr	r3, [r3, #0]
 8020378:	f103 040c 	add.w	r4, r3, #12
 802037c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8020380:	493b      	ldr	r1, [pc, #236]	; (8020470 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 8020382:	4618      	mov	r0, r3
 8020384:	f7ee fa2f 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020388:	2501      	movs	r5, #1
 802038a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 802038e:	4619      	mov	r1, r3
 8020390:	4620      	mov	r0, r4
 8020392:	f7ee fdec 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020396:	4603      	mov	r3, r0
 8020398:	2b00      	cmp	r3, #0
 802039a:	d001      	beq.n	80203a0 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 802039c:	2401      	movs	r4, #1
 802039e:	e000      	b.n	80203a2 <_ZNK14MockNamedValue6equalsERKS_+0x542>
 80203a0:	2400      	movs	r4, #0
 80203a2:	2d00      	cmp	r5, #0
 80203a4:	d004      	beq.n	80203b0 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 80203a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80203aa:	4618      	mov	r0, r3
 80203ac:	f7ee fdd3 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80203b0:	2e00      	cmp	r6, #0
 80203b2:	d004      	beq.n	80203be <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 80203b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80203b8:	4618      	mov	r0, r3
 80203ba:	f7ee fdcc 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80203be:	2c00      	cmp	r4, #0
 80203c0:	d00b      	beq.n	80203da <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 80203c2:	1d3b      	adds	r3, r7, #4
 80203c4:	681b      	ldr	r3, [r3, #0]
 80203c6:	699a      	ldr	r2, [r3, #24]
 80203c8:	463b      	mov	r3, r7
 80203ca:	681b      	ldr	r3, [r3, #0]
 80203cc:	699b      	ldr	r3, [r3, #24]
 80203ce:	429a      	cmp	r2, r3
 80203d0:	bf0c      	ite	eq
 80203d2:	2301      	moveq	r3, #1
 80203d4:	2300      	movne	r3, #0
 80203d6:	b2dc      	uxtb	r4, r3
 80203d8:	e2f2      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 80203da:	2500      	movs	r5, #0
 80203dc:	1d3b      	adds	r3, r7, #4
 80203de:	681b      	ldr	r3, [r3, #0]
 80203e0:	f103 040c 	add.w	r4, r3, #12
 80203e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80203e8:	4921      	ldr	r1, [pc, #132]	; (8020470 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 80203ea:	4618      	mov	r0, r3
 80203ec:	f7ee f9fb 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80203f0:	2601      	movs	r6, #1
 80203f2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80203f6:	4619      	mov	r1, r3
 80203f8:	4620      	mov	r0, r4
 80203fa:	f7ee fdb8 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 80203fe:	4603      	mov	r3, r0
 8020400:	2b00      	cmp	r3, #0
 8020402:	d015      	beq.n	8020430 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 8020404:	463b      	mov	r3, r7
 8020406:	681b      	ldr	r3, [r3, #0]
 8020408:	f103 040c 	add.w	r4, r3, #12
 802040c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8020410:	4918      	ldr	r1, [pc, #96]	; (8020474 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 8020412:	4618      	mov	r0, r3
 8020414:	f7ee f9e7 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020418:	2501      	movs	r5, #1
 802041a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 802041e:	4619      	mov	r1, r3
 8020420:	4620      	mov	r0, r4
 8020422:	f7ee fda4 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020426:	4603      	mov	r3, r0
 8020428:	2b00      	cmp	r3, #0
 802042a:	d001      	beq.n	8020430 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 802042c:	2401      	movs	r4, #1
 802042e:	e000      	b.n	8020432 <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 8020430:	2400      	movs	r4, #0
 8020432:	2d00      	cmp	r5, #0
 8020434:	d004      	beq.n	8020440 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 8020436:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 802043a:	4618      	mov	r0, r3
 802043c:	f7ee fd8b 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020440:	2e00      	cmp	r6, #0
 8020442:	d004      	beq.n	802044e <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 8020444:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8020448:	4618      	mov	r0, r3
 802044a:	f7ee fd84 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 802044e:	2c00      	cmp	r4, #0
 8020450:	d014      	beq.n	802047c <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 8020452:	1d3b      	adds	r3, r7, #4
 8020454:	681b      	ldr	r3, [r3, #0]
 8020456:	699a      	ldr	r2, [r3, #24]
 8020458:	463b      	mov	r3, r7
 802045a:	681b      	ldr	r3, [r3, #0]
 802045c:	699b      	ldr	r3, [r3, #24]
 802045e:	429a      	cmp	r2, r3
 8020460:	bf0c      	ite	eq
 8020462:	2301      	moveq	r3, #1
 8020464:	2300      	movne	r3, #0
 8020466:	b2dc      	uxtb	r4, r3
 8020468:	e2aa      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 802046a:	bf00      	nop
 802046c:	08028990 	.word	0x08028990
 8020470:	080289b8 	.word	0x080289b8
 8020474:	0802899c 	.word	0x0802899c
 8020478:	080289ac 	.word	0x080289ac
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 802047c:	2500      	movs	r5, #0
 802047e:	1d3b      	adds	r3, r7, #4
 8020480:	681b      	ldr	r3, [r3, #0]
 8020482:	f103 040c 	add.w	r4, r3, #12
 8020486:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 802048a:	49ae      	ldr	r1, [pc, #696]	; (8020744 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 802048c:	4618      	mov	r0, r3
 802048e:	f7ee f9aa 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020492:	2601      	movs	r6, #1
 8020494:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8020498:	4619      	mov	r1, r3
 802049a:	4620      	mov	r0, r4
 802049c:	f7ee fd67 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 80204a0:	4603      	mov	r3, r0
 80204a2:	2b00      	cmp	r3, #0
 80204a4:	d015      	beq.n	80204d2 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 80204a6:	463b      	mov	r3, r7
 80204a8:	681b      	ldr	r3, [r3, #0]
 80204aa:	f103 040c 	add.w	r4, r3, #12
 80204ae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80204b2:	49a5      	ldr	r1, [pc, #660]	; (8020748 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 80204b4:	4618      	mov	r0, r3
 80204b6:	f7ee f996 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80204ba:	2501      	movs	r5, #1
 80204bc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80204c0:	4619      	mov	r1, r3
 80204c2:	4620      	mov	r0, r4
 80204c4:	f7ee fd53 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 80204c8:	4603      	mov	r3, r0
 80204ca:	2b00      	cmp	r3, #0
 80204cc:	d001      	beq.n	80204d2 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 80204ce:	2401      	movs	r4, #1
 80204d0:	e000      	b.n	80204d4 <_ZNK14MockNamedValue6equalsERKS_+0x674>
 80204d2:	2400      	movs	r4, #0
 80204d4:	2d00      	cmp	r5, #0
 80204d6:	d004      	beq.n	80204e2 <_ZNK14MockNamedValue6equalsERKS_+0x682>
 80204d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80204dc:	4618      	mov	r0, r3
 80204de:	f7ee fd3a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80204e2:	2e00      	cmp	r6, #0
 80204e4:	d004      	beq.n	80204f0 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 80204e6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80204ea:	4618      	mov	r0, r3
 80204ec:	f7ee fd33 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80204f0:	2c00      	cmp	r4, #0
 80204f2:	d010      	beq.n	8020516 <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 80204f4:	1d3b      	adds	r3, r7, #4
 80204f6:	681b      	ldr	r3, [r3, #0]
 80204f8:	699b      	ldr	r3, [r3, #24]
 80204fa:	2b00      	cmp	r3, #0
 80204fc:	db09      	blt.n	8020512 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 80204fe:	1d3b      	adds	r3, r7, #4
 8020500:	681b      	ldr	r3, [r3, #0]
 8020502:	699b      	ldr	r3, [r3, #24]
 8020504:	463a      	mov	r2, r7
 8020506:	6812      	ldr	r2, [r2, #0]
 8020508:	6992      	ldr	r2, [r2, #24]
 802050a:	4293      	cmp	r3, r2
 802050c:	d101      	bne.n	8020512 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 802050e:	2401      	movs	r4, #1
 8020510:	e256      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8020512:	2400      	movs	r4, #0
 8020514:	e254      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 8020516:	2500      	movs	r5, #0
 8020518:	1d3b      	adds	r3, r7, #4
 802051a:	681b      	ldr	r3, [r3, #0]
 802051c:	f103 040c 	add.w	r4, r3, #12
 8020520:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8020524:	4988      	ldr	r1, [pc, #544]	; (8020748 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 8020526:	4618      	mov	r0, r3
 8020528:	f7ee f95d 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 802052c:	2601      	movs	r6, #1
 802052e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8020532:	4619      	mov	r1, r3
 8020534:	4620      	mov	r0, r4
 8020536:	f7ee fd1a 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 802053a:	4603      	mov	r3, r0
 802053c:	2b00      	cmp	r3, #0
 802053e:	d015      	beq.n	802056c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 8020540:	463b      	mov	r3, r7
 8020542:	681b      	ldr	r3, [r3, #0]
 8020544:	f103 040c 	add.w	r4, r3, #12
 8020548:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 802054c:	497d      	ldr	r1, [pc, #500]	; (8020744 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 802054e:	4618      	mov	r0, r3
 8020550:	f7ee f949 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020554:	2501      	movs	r5, #1
 8020556:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 802055a:	4619      	mov	r1, r3
 802055c:	4620      	mov	r0, r4
 802055e:	f7ee fd06 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020562:	4603      	mov	r3, r0
 8020564:	2b00      	cmp	r3, #0
 8020566:	d001      	beq.n	802056c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 8020568:	2401      	movs	r4, #1
 802056a:	e000      	b.n	802056e <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 802056c:	2400      	movs	r4, #0
 802056e:	2d00      	cmp	r5, #0
 8020570:	d004      	beq.n	802057c <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 8020572:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8020576:	4618      	mov	r0, r3
 8020578:	f7ee fced 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 802057c:	2e00      	cmp	r6, #0
 802057e:	d004      	beq.n	802058a <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 8020580:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8020584:	4618      	mov	r0, r3
 8020586:	f7ee fce6 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 802058a:	2c00      	cmp	r4, #0
 802058c:	d010      	beq.n	80205b0 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 802058e:	463b      	mov	r3, r7
 8020590:	681b      	ldr	r3, [r3, #0]
 8020592:	699b      	ldr	r3, [r3, #24]
 8020594:	2b00      	cmp	r3, #0
 8020596:	db09      	blt.n	80205ac <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 8020598:	1d3b      	adds	r3, r7, #4
 802059a:	681b      	ldr	r3, [r3, #0]
 802059c:	699b      	ldr	r3, [r3, #24]
 802059e:	463a      	mov	r2, r7
 80205a0:	6812      	ldr	r2, [r2, #0]
 80205a2:	6992      	ldr	r2, [r2, #24]
 80205a4:	4293      	cmp	r3, r2
 80205a6:	d101      	bne.n	80205ac <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 80205a8:	2401      	movs	r4, #1
 80205aa:	e209      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 80205ac:	2400      	movs	r4, #0
 80205ae:	e207      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 80205b0:	1d3b      	adds	r3, r7, #4
 80205b2:	681b      	ldr	r3, [r3, #0]
 80205b4:	f103 020c 	add.w	r2, r3, #12
 80205b8:	463b      	mov	r3, r7
 80205ba:	681b      	ldr	r3, [r3, #0]
 80205bc:	330c      	adds	r3, #12
 80205be:	4619      	mov	r1, r3
 80205c0:	4610      	mov	r0, r2
 80205c2:	f7ee fd19 	bl	800eff8 <_ZneRK12SimpleStringS1_>
 80205c6:	4603      	mov	r3, r0
 80205c8:	2b00      	cmp	r3, #0
 80205ca:	d001      	beq.n	80205d0 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 80205cc:	2400      	movs	r4, #0
 80205ce:	e1f7      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 80205d0:	1d3b      	adds	r3, r7, #4
 80205d2:	681b      	ldr	r3, [r3, #0]
 80205d4:	f103 040c 	add.w	r4, r3, #12
 80205d8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80205dc:	495b      	ldr	r1, [pc, #364]	; (802074c <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 80205de:	4618      	mov	r0, r3
 80205e0:	f7ee f901 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80205e4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80205e8:	4619      	mov	r1, r3
 80205ea:	4620      	mov	r0, r4
 80205ec:	f7ee fcbf 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 80205f0:	4603      	mov	r3, r0
 80205f2:	461c      	mov	r4, r3
 80205f4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80205f8:	4618      	mov	r0, r3
 80205fa:	f7ee fcac 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80205fe:	2c00      	cmp	r4, #0
 8020600:	d00b      	beq.n	802061a <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 8020602:	1d3b      	adds	r3, r7, #4
 8020604:	681b      	ldr	r3, [r3, #0]
 8020606:	7e1a      	ldrb	r2, [r3, #24]
 8020608:	463b      	mov	r3, r7
 802060a:	681b      	ldr	r3, [r3, #0]
 802060c:	7e1b      	ldrb	r3, [r3, #24]
 802060e:	429a      	cmp	r2, r3
 8020610:	bf0c      	ite	eq
 8020612:	2301      	moveq	r3, #1
 8020614:	2300      	movne	r3, #0
 8020616:	b2dc      	uxtb	r4, r3
 8020618:	e1d2      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 802061a:	1d3b      	adds	r3, r7, #4
 802061c:	681b      	ldr	r3, [r3, #0]
 802061e:	f103 040c 	add.w	r4, r3, #12
 8020622:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8020626:	494a      	ldr	r1, [pc, #296]	; (8020750 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 8020628:	4618      	mov	r0, r3
 802062a:	f7ee f8dc 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 802062e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8020632:	4619      	mov	r1, r3
 8020634:	4620      	mov	r0, r4
 8020636:	f7ee fc9a 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 802063a:	4603      	mov	r3, r0
 802063c:	461c      	mov	r4, r3
 802063e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8020642:	4618      	mov	r0, r3
 8020644:	f7ee fc87 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020648:	2c00      	cmp	r4, #0
 802064a:	d00b      	beq.n	8020664 <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 802064c:	1d3b      	adds	r3, r7, #4
 802064e:	681b      	ldr	r3, [r3, #0]
 8020650:	699a      	ldr	r2, [r3, #24]
 8020652:	463b      	mov	r3, r7
 8020654:	681b      	ldr	r3, [r3, #0]
 8020656:	699b      	ldr	r3, [r3, #24]
 8020658:	429a      	cmp	r2, r3
 802065a:	bf0c      	ite	eq
 802065c:	2301      	moveq	r3, #1
 802065e:	2300      	movne	r3, #0
 8020660:	b2dc      	uxtb	r4, r3
 8020662:	e1ad      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 8020664:	1d3b      	adds	r3, r7, #4
 8020666:	681b      	ldr	r3, [r3, #0]
 8020668:	f103 040c 	add.w	r4, r3, #12
 802066c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8020670:	4938      	ldr	r1, [pc, #224]	; (8020754 <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 8020672:	4618      	mov	r0, r3
 8020674:	f7ee f8b7 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020678:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 802067c:	4619      	mov	r1, r3
 802067e:	4620      	mov	r0, r4
 8020680:	f7ee fc75 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020684:	4603      	mov	r3, r0
 8020686:	461c      	mov	r4, r3
 8020688:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 802068c:	4618      	mov	r0, r3
 802068e:	f7ee fc62 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020692:	2c00      	cmp	r4, #0
 8020694:	d00b      	beq.n	80206ae <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 8020696:	1d3b      	adds	r3, r7, #4
 8020698:	681b      	ldr	r3, [r3, #0]
 802069a:	699a      	ldr	r2, [r3, #24]
 802069c:	463b      	mov	r3, r7
 802069e:	681b      	ldr	r3, [r3, #0]
 80206a0:	699b      	ldr	r3, [r3, #24]
 80206a2:	429a      	cmp	r2, r3
 80206a4:	bf0c      	ite	eq
 80206a6:	2301      	moveq	r3, #1
 80206a8:	2300      	movne	r3, #0
 80206aa:	b2dc      	uxtb	r4, r3
 80206ac:	e188      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 80206ae:	1d3b      	adds	r3, r7, #4
 80206b0:	681b      	ldr	r3, [r3, #0]
 80206b2:	f103 040c 	add.w	r4, r3, #12
 80206b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80206ba:	4922      	ldr	r1, [pc, #136]	; (8020744 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 80206bc:	4618      	mov	r0, r3
 80206be:	f7ee f892 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80206c2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80206c6:	4619      	mov	r1, r3
 80206c8:	4620      	mov	r0, r4
 80206ca:	f7ee fc50 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 80206ce:	4603      	mov	r3, r0
 80206d0:	461c      	mov	r4, r3
 80206d2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80206d6:	4618      	mov	r0, r3
 80206d8:	f7ee fc3d 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80206dc:	2c00      	cmp	r4, #0
 80206de:	d00b      	beq.n	80206f8 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 80206e0:	1d3b      	adds	r3, r7, #4
 80206e2:	681b      	ldr	r3, [r3, #0]
 80206e4:	699a      	ldr	r2, [r3, #24]
 80206e6:	463b      	mov	r3, r7
 80206e8:	681b      	ldr	r3, [r3, #0]
 80206ea:	699b      	ldr	r3, [r3, #24]
 80206ec:	429a      	cmp	r2, r3
 80206ee:	bf0c      	ite	eq
 80206f0:	2301      	moveq	r3, #1
 80206f2:	2300      	movne	r3, #0
 80206f4:	b2dc      	uxtb	r4, r3
 80206f6:	e163      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 80206f8:	1d3b      	adds	r3, r7, #4
 80206fa:	681b      	ldr	r3, [r3, #0]
 80206fc:	f103 040c 	add.w	r4, r3, #12
 8020700:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8020704:	4910      	ldr	r1, [pc, #64]	; (8020748 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 8020706:	4618      	mov	r0, r3
 8020708:	f7ee f86d 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 802070c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8020710:	4619      	mov	r1, r3
 8020712:	4620      	mov	r0, r4
 8020714:	f7ee fc2b 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020718:	4603      	mov	r3, r0
 802071a:	461c      	mov	r4, r3
 802071c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8020720:	4618      	mov	r0, r3
 8020722:	f7ee fc18 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020726:	2c00      	cmp	r4, #0
 8020728:	d016      	beq.n	8020758 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 802072a:	1d3b      	adds	r3, r7, #4
 802072c:	681b      	ldr	r3, [r3, #0]
 802072e:	699a      	ldr	r2, [r3, #24]
 8020730:	463b      	mov	r3, r7
 8020732:	681b      	ldr	r3, [r3, #0]
 8020734:	699b      	ldr	r3, [r3, #24]
 8020736:	429a      	cmp	r2, r3
 8020738:	bf0c      	ite	eq
 802073a:	2301      	moveq	r3, #1
 802073c:	2300      	movne	r3, #0
 802073e:	b2dc      	uxtb	r4, r3
 8020740:	e13e      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8020742:	bf00      	nop
 8020744:	080289ac 	.word	0x080289ac
 8020748:	080289b8 	.word	0x080289b8
 802074c:	08028994 	.word	0x08028994
 8020750:	08028990 	.word	0x08028990
 8020754:	0802899c 	.word	0x0802899c
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 8020758:	1d3b      	adds	r3, r7, #4
 802075a:	681b      	ldr	r3, [r3, #0]
 802075c:	f103 040c 	add.w	r4, r3, #12
 8020760:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8020764:	4999      	ldr	r1, [pc, #612]	; (80209cc <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 8020766:	4618      	mov	r0, r3
 8020768:	f7ee f83d 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 802076c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8020770:	4619      	mov	r1, r3
 8020772:	4620      	mov	r0, r4
 8020774:	f7ee fbfb 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020778:	4603      	mov	r3, r0
 802077a:	461c      	mov	r4, r3
 802077c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8020780:	4618      	mov	r0, r3
 8020782:	f7ee fbe8 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020786:	2c00      	cmp	r4, #0
 8020788:	d026      	beq.n	80207d8 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 802078a:	1d3b      	adds	r3, r7, #4
 802078c:	681b      	ldr	r3, [r3, #0]
 802078e:	699a      	ldr	r2, [r3, #24]
 8020790:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8020794:	4611      	mov	r1, r2
 8020796:	4618      	mov	r0, r3
 8020798:	f7ee f825 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 802079c:	463b      	mov	r3, r7
 802079e:	681b      	ldr	r3, [r3, #0]
 80207a0:	699a      	ldr	r2, [r3, #24]
 80207a2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80207a6:	4611      	mov	r1, r2
 80207a8:	4618      	mov	r0, r3
 80207aa:	f7ee f81c 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80207ae:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80207b2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80207b6:	4611      	mov	r1, r2
 80207b8:	4618      	mov	r0, r3
 80207ba:	f7ee fbd8 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 80207be:	4603      	mov	r3, r0
 80207c0:	461c      	mov	r4, r3
 80207c2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80207c6:	4618      	mov	r0, r3
 80207c8:	f7ee fbc5 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80207cc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80207d0:	4618      	mov	r0, r3
 80207d2:	f7ee fbc0 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80207d6:	e0f3      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 80207d8:	1d3b      	adds	r3, r7, #4
 80207da:	681b      	ldr	r3, [r3, #0]
 80207dc:	f103 040c 	add.w	r4, r3, #12
 80207e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80207e4:	497a      	ldr	r1, [pc, #488]	; (80209d0 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 80207e6:	4618      	mov	r0, r3
 80207e8:	f7ed fffd 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80207ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80207f0:	4619      	mov	r1, r3
 80207f2:	4620      	mov	r0, r4
 80207f4:	f7ee fbbb 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 80207f8:	4603      	mov	r3, r0
 80207fa:	461c      	mov	r4, r3
 80207fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020800:	4618      	mov	r0, r3
 8020802:	f7ee fba8 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020806:	2c00      	cmp	r4, #0
 8020808:	d00b      	beq.n	8020822 <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 802080a:	1d3b      	adds	r3, r7, #4
 802080c:	681b      	ldr	r3, [r3, #0]
 802080e:	699a      	ldr	r2, [r3, #24]
 8020810:	463b      	mov	r3, r7
 8020812:	681b      	ldr	r3, [r3, #0]
 8020814:	699b      	ldr	r3, [r3, #24]
 8020816:	429a      	cmp	r2, r3
 8020818:	bf0c      	ite	eq
 802081a:	2301      	moveq	r3, #1
 802081c:	2300      	movne	r3, #0
 802081e:	b2dc      	uxtb	r4, r3
 8020820:	e0ce      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 8020822:	1d3b      	adds	r3, r7, #4
 8020824:	681b      	ldr	r3, [r3, #0]
 8020826:	f103 040c 	add.w	r4, r3, #12
 802082a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 802082e:	4969      	ldr	r1, [pc, #420]	; (80209d4 <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 8020830:	4618      	mov	r0, r3
 8020832:	f7ed ffd8 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020836:	f507 7388 	add.w	r3, r7, #272	; 0x110
 802083a:	4619      	mov	r1, r3
 802083c:	4620      	mov	r0, r4
 802083e:	f7ee fb96 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020842:	4603      	mov	r3, r0
 8020844:	461c      	mov	r4, r3
 8020846:	f507 7388 	add.w	r3, r7, #272	; 0x110
 802084a:	4618      	mov	r0, r3
 802084c:	f7ee fb83 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020850:	2c00      	cmp	r4, #0
 8020852:	d00b      	beq.n	802086c <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 8020854:	1d3b      	adds	r3, r7, #4
 8020856:	681b      	ldr	r3, [r3, #0]
 8020858:	699a      	ldr	r2, [r3, #24]
 802085a:	463b      	mov	r3, r7
 802085c:	681b      	ldr	r3, [r3, #0]
 802085e:	699b      	ldr	r3, [r3, #24]
 8020860:	429a      	cmp	r2, r3
 8020862:	bf0c      	ite	eq
 8020864:	2301      	moveq	r3, #1
 8020866:	2300      	movne	r3, #0
 8020868:	b2dc      	uxtb	r4, r3
 802086a:	e0a9      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 802086c:	1d3b      	adds	r3, r7, #4
 802086e:	681b      	ldr	r3, [r3, #0]
 8020870:	f103 040c 	add.w	r4, r3, #12
 8020874:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8020878:	4957      	ldr	r1, [pc, #348]	; (80209d8 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 802087a:	4618      	mov	r0, r3
 802087c:	f7ed ffb3 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020880:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8020884:	4619      	mov	r1, r3
 8020886:	4620      	mov	r0, r4
 8020888:	f7ee fb71 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 802088c:	4603      	mov	r3, r0
 802088e:	461c      	mov	r4, r3
 8020890:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8020894:	4618      	mov	r0, r3
 8020896:	f7ee fb5e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 802089a:	2c00      	cmp	r4, #0
 802089c:	d00b      	beq.n	80208b6 <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 802089e:	1d3b      	adds	r3, r7, #4
 80208a0:	681b      	ldr	r3, [r3, #0]
 80208a2:	699a      	ldr	r2, [r3, #24]
 80208a4:	463b      	mov	r3, r7
 80208a6:	681b      	ldr	r3, [r3, #0]
 80208a8:	699b      	ldr	r3, [r3, #24]
 80208aa:	429a      	cmp	r2, r3
 80208ac:	bf0c      	ite	eq
 80208ae:	2301      	moveq	r3, #1
 80208b0:	2300      	movne	r3, #0
 80208b2:	b2dc      	uxtb	r4, r3
 80208b4:	e084      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 80208b6:	1d3b      	adds	r3, r7, #4
 80208b8:	681b      	ldr	r3, [r3, #0]
 80208ba:	f103 040c 	add.w	r4, r3, #12
 80208be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80208c2:	4946      	ldr	r1, [pc, #280]	; (80209dc <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 80208c4:	4618      	mov	r0, r3
 80208c6:	f7ed ff8e 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 80208ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80208ce:	4619      	mov	r1, r3
 80208d0:	4620      	mov	r0, r4
 80208d2:	f7ee fb4c 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 80208d6:	4603      	mov	r3, r0
 80208d8:	461c      	mov	r4, r3
 80208da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80208de:	4618      	mov	r0, r3
 80208e0:	f7ee fb39 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80208e4:	2c00      	cmp	r4, #0
 80208e6:	d01c      	beq.n	8020922 <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 80208e8:	1d3b      	adds	r3, r7, #4
 80208ea:	681b      	ldr	r3, [r3, #0]
 80208ec:	ed93 7b06 	vldr	d7, [r3, #24]
 80208f0:	463b      	mov	r3, r7
 80208f2:	681b      	ldr	r3, [r3, #0]
 80208f4:	ed93 6b06 	vldr	d6, [r3, #24]
 80208f8:	1d3b      	adds	r3, r7, #4
 80208fa:	681b      	ldr	r3, [r3, #0]
 80208fc:	ed93 5b08 	vldr	d5, [r3, #32]
 8020900:	eeb0 2a45 	vmov.f32	s4, s10
 8020904:	eef0 2a65 	vmov.f32	s5, s11
 8020908:	eeb0 1a46 	vmov.f32	s2, s12
 802090c:	eef0 1a66 	vmov.f32	s3, s13
 8020910:	eeb0 0a47 	vmov.f32	s0, s14
 8020914:	eef0 0a67 	vmov.f32	s1, s15
 8020918:	f7f3 fe18 	bl	801454c <_Z13doubles_equalddd>
 802091c:	4603      	mov	r3, r0
 802091e:	461c      	mov	r4, r3
 8020920:	e04e      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 8020922:	1d3b      	adds	r3, r7, #4
 8020924:	681b      	ldr	r3, [r3, #0]
 8020926:	f103 040c 	add.w	r4, r3, #12
 802092a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802092e:	492c      	ldr	r1, [pc, #176]	; (80209e0 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 8020930:	4618      	mov	r0, r3
 8020932:	f7ed ff58 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020936:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802093a:	4619      	mov	r1, r3
 802093c:	4620      	mov	r0, r4
 802093e:	f7ee fb16 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020942:	4603      	mov	r3, r0
 8020944:	461c      	mov	r4, r3
 8020946:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802094a:	4618      	mov	r0, r3
 802094c:	f7ee fb03 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020950:	2c00      	cmp	r4, #0
 8020952:	d01c      	beq.n	802098e <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 8020954:	1d3b      	adds	r3, r7, #4
 8020956:	681b      	ldr	r3, [r3, #0]
 8020958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802095a:	463b      	mov	r3, r7
 802095c:	681b      	ldr	r3, [r3, #0]
 802095e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020960:	429a      	cmp	r2, r3
 8020962:	d001      	beq.n	8020968 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 8020964:	2400      	movs	r4, #0
 8020966:	e02b      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 8020968:	1d3b      	adds	r3, r7, #4
 802096a:	681b      	ldr	r3, [r3, #0]
 802096c:	6998      	ldr	r0, [r3, #24]
 802096e:	463b      	mov	r3, r7
 8020970:	681b      	ldr	r3, [r3, #0]
 8020972:	6999      	ldr	r1, [r3, #24]
 8020974:	1d3b      	adds	r3, r7, #4
 8020976:	681b      	ldr	r3, [r3, #0]
 8020978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802097a:	461a      	mov	r2, r3
 802097c:	f7ed fe52 	bl	800e624 <_ZN12SimpleString6MemCmpEPKvS1_j>
 8020980:	4603      	mov	r3, r0
 8020982:	2b00      	cmp	r3, #0
 8020984:	bf0c      	ite	eq
 8020986:	2301      	moveq	r3, #1
 8020988:	2300      	movne	r3, #0
 802098a:	b2dc      	uxtb	r4, r3
 802098c:	e018      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 802098e:	1d3b      	adds	r3, r7, #4
 8020990:	681b      	ldr	r3, [r3, #0]
 8020992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020994:	2b00      	cmp	r3, #0
 8020996:	d012      	beq.n	80209be <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 8020998:	1d3b      	adds	r3, r7, #4
 802099a:	681b      	ldr	r3, [r3, #0]
 802099c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 802099e:	1d3b      	adds	r3, r7, #4
 80209a0:	681b      	ldr	r3, [r3, #0]
 80209a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80209a4:	681b      	ldr	r3, [r3, #0]
 80209a6:	3308      	adds	r3, #8
 80209a8:	681b      	ldr	r3, [r3, #0]
 80209aa:	1d3a      	adds	r2, r7, #4
 80209ac:	6812      	ldr	r2, [r2, #0]
 80209ae:	6991      	ldr	r1, [r2, #24]
 80209b0:	463a      	mov	r2, r7
 80209b2:	6812      	ldr	r2, [r2, #0]
 80209b4:	6992      	ldr	r2, [r2, #24]
 80209b6:	4798      	blx	r3
 80209b8:	4603      	mov	r3, r0
 80209ba:	461c      	mov	r4, r3
 80209bc:	e000      	b.n	80209c0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 80209be:	2400      	movs	r4, #0
 80209c0:	4623      	mov	r3, r4
}
 80209c2:	4618      	mov	r0, r3
 80209c4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80209c8:	46bd      	mov	sp, r7
 80209ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80209cc:	08028a5c 	.word	0x08028a5c
 80209d0:	08028a3c 	.word	0x08028a3c
 80209d4:	08028a44 	.word	0x08028a44
 80209d8:	08028a50 	.word	0x08028a50
 80209dc:	08028a34 	.word	0x08028a34
 80209e0:	08028a68 	.word	0x08028a68

080209e4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 80209e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80209e6:	b087      	sub	sp, #28
 80209e8:	af00      	add	r7, sp, #0
 80209ea:	6078      	str	r0, [r7, #4]
 80209ec:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 80209ee:	687b      	ldr	r3, [r7, #4]
 80209f0:	f103 020c 	add.w	r2, r3, #12
 80209f4:	683b      	ldr	r3, [r7, #0]
 80209f6:	330c      	adds	r3, #12
 80209f8:	4619      	mov	r1, r3
 80209fa:	4610      	mov	r0, r2
 80209fc:	f7ee fab7 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020a00:	4603      	mov	r3, r0
 8020a02:	2b00      	cmp	r3, #0
 8020a04:	d001      	beq.n	8020a0a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 8020a06:	2301      	movs	r3, #1
 8020a08:	e03c      	b.n	8020a84 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 8020a0a:	2500      	movs	r5, #0
 8020a0c:	687b      	ldr	r3, [r7, #4]
 8020a0e:	f103 040c 	add.w	r4, r3, #12
 8020a12:	f107 0308 	add.w	r3, r7, #8
 8020a16:	491d      	ldr	r1, [pc, #116]	; (8020a8c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 8020a18:	4618      	mov	r0, r3
 8020a1a:	f7ed fee4 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020a1e:	2601      	movs	r6, #1
 8020a20:	f107 0308 	add.w	r3, r7, #8
 8020a24:	4619      	mov	r1, r3
 8020a26:	4620      	mov	r0, r4
 8020a28:	f7ee faa1 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020a2c:	4603      	mov	r3, r0
 8020a2e:	2b00      	cmp	r3, #0
 8020a30:	d014      	beq.n	8020a5c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 8020a32:	683b      	ldr	r3, [r7, #0]
 8020a34:	f103 040c 	add.w	r4, r3, #12
 8020a38:	f107 0310 	add.w	r3, r7, #16
 8020a3c:	4914      	ldr	r1, [pc, #80]	; (8020a90 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 8020a3e:	4618      	mov	r0, r3
 8020a40:	f7ed fed1 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020a44:	2501      	movs	r5, #1
 8020a46:	f107 0310 	add.w	r3, r7, #16
 8020a4a:	4619      	mov	r1, r3
 8020a4c:	4620      	mov	r0, r4
 8020a4e:	f7ee fa8e 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020a52:	4603      	mov	r3, r0
 8020a54:	2b00      	cmp	r3, #0
 8020a56:	d001      	beq.n	8020a5c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 8020a58:	2401      	movs	r4, #1
 8020a5a:	e000      	b.n	8020a5e <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 8020a5c:	2400      	movs	r4, #0
 8020a5e:	2d00      	cmp	r5, #0
 8020a60:	d004      	beq.n	8020a6c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 8020a62:	f107 0310 	add.w	r3, r7, #16
 8020a66:	4618      	mov	r0, r3
 8020a68:	f7ee fa75 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020a6c:	2e00      	cmp	r6, #0
 8020a6e:	d004      	beq.n	8020a7a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 8020a70:	f107 0308 	add.w	r3, r7, #8
 8020a74:	4618      	mov	r0, r3
 8020a76:	f7ee fa6e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020a7a:	2c00      	cmp	r4, #0
 8020a7c:	d001      	beq.n	8020a82 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 8020a7e:	2301      	movs	r3, #1
 8020a80:	e000      	b.n	8020a84 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 8020a82:	2300      	movs	r3, #0
}
 8020a84:	4618      	mov	r0, r3
 8020a86:	371c      	adds	r7, #28
 8020a88:	46bd      	mov	sp, r7
 8020a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020a8c:	08028a44 	.word	0x08028a44
 8020a90:	08028a3c 	.word	0x08028a3c

08020a94 <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 8020a94:	b590      	push	{r4, r7, lr}
 8020a96:	b0b9      	sub	sp, #228	; 0xe4
 8020a98:	af00      	add	r7, sp, #0
 8020a9a:	6078      	str	r0, [r7, #4]
 8020a9c:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 8020a9e:	683b      	ldr	r3, [r7, #0]
 8020aa0:	f103 040c 	add.w	r4, r3, #12
 8020aa4:	f107 0308 	add.w	r3, r7, #8
 8020aa8:	49d4      	ldr	r1, [pc, #848]	; (8020dfc <_ZNK14MockNamedValue8toStringEv+0x368>)
 8020aaa:	4618      	mov	r0, r3
 8020aac:	f7ed fe9b 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020ab0:	f107 0308 	add.w	r3, r7, #8
 8020ab4:	4619      	mov	r1, r3
 8020ab6:	4620      	mov	r0, r4
 8020ab8:	f7ee fa59 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020abc:	4603      	mov	r3, r0
 8020abe:	461c      	mov	r4, r3
 8020ac0:	f107 0308 	add.w	r3, r7, #8
 8020ac4:	4618      	mov	r0, r3
 8020ac6:	f7ee fa46 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020aca:	2c00      	cmp	r4, #0
 8020acc:	d007      	beq.n	8020ade <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 8020ace:	683b      	ldr	r3, [r7, #0]
 8020ad0:	7e1a      	ldrb	r2, [r3, #24]
 8020ad2:	687b      	ldr	r3, [r7, #4]
 8020ad4:	4611      	mov	r1, r2
 8020ad6:	4618      	mov	r0, r3
 8020ad8:	f7ee fcae 	bl	800f438 <_Z10StringFromb>
 8020adc:	e23f      	b.n	8020f5e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 8020ade:	683b      	ldr	r3, [r7, #0]
 8020ae0:	f103 040c 	add.w	r4, r3, #12
 8020ae4:	f107 0310 	add.w	r3, r7, #16
 8020ae8:	49c5      	ldr	r1, [pc, #788]	; (8020e00 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 8020aea:	4618      	mov	r0, r3
 8020aec:	f7ed fe7b 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020af0:	f107 0310 	add.w	r3, r7, #16
 8020af4:	4619      	mov	r1, r3
 8020af6:	4620      	mov	r0, r4
 8020af8:	f7ee fa39 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020afc:	4603      	mov	r3, r0
 8020afe:	461c      	mov	r4, r3
 8020b00:	f107 0310 	add.w	r3, r7, #16
 8020b04:	4618      	mov	r0, r3
 8020b06:	f7ee fa26 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020b0a:	2c00      	cmp	r4, #0
 8020b0c:	d03b      	beq.n	8020b86 <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 8020b0e:	683b      	ldr	r3, [r7, #0]
 8020b10:	699a      	ldr	r2, [r3, #24]
 8020b12:	f107 0320 	add.w	r3, r7, #32
 8020b16:	4611      	mov	r1, r2
 8020b18:	4618      	mov	r0, r3
 8020b1a:	f7ee fce3 	bl	800f4e4 <_Z10StringFromi>
 8020b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8020b22:	49b8      	ldr	r1, [pc, #736]	; (8020e04 <_ZNK14MockNamedValue8toStringEv+0x370>)
 8020b24:	4618      	mov	r0, r3
 8020b26:	f7ed fe5e 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020b2a:	f107 0318 	add.w	r3, r7, #24
 8020b2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8020b32:	f107 0120 	add.w	r1, r7, #32
 8020b36:	4618      	mov	r0, r3
 8020b38:	f7ee fa6f 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 8020b3c:	683b      	ldr	r3, [r7, #0]
 8020b3e:	699a      	ldr	r2, [r3, #24]
 8020b40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8020b44:	4611      	mov	r1, r2
 8020b46:	4618      	mov	r0, r3
 8020b48:	f7ee fdbc 	bl	800f6c4 <_Z30BracketsFormattedHexStringFromi>
 8020b4c:	687b      	ldr	r3, [r7, #4]
 8020b4e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8020b52:	f107 0118 	add.w	r1, r7, #24
 8020b56:	4618      	mov	r0, r3
 8020b58:	f7ee fa5f 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 8020b5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8020b60:	4618      	mov	r0, r3
 8020b62:	f7ee f9f8 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020b66:	f107 0318 	add.w	r3, r7, #24
 8020b6a:	4618      	mov	r0, r3
 8020b6c:	f7ee f9f3 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020b70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8020b74:	4618      	mov	r0, r3
 8020b76:	f7ee f9ee 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020b7a:	f107 0320 	add.w	r3, r7, #32
 8020b7e:	4618      	mov	r0, r3
 8020b80:	f7ee f9e9 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020b84:	e1eb      	b.n	8020f5e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 8020b86:	683b      	ldr	r3, [r7, #0]
 8020b88:	f103 040c 	add.w	r4, r3, #12
 8020b8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8020b90:	499d      	ldr	r1, [pc, #628]	; (8020e08 <_ZNK14MockNamedValue8toStringEv+0x374>)
 8020b92:	4618      	mov	r0, r3
 8020b94:	f7ed fe27 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020b98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8020b9c:	4619      	mov	r1, r3
 8020b9e:	4620      	mov	r0, r4
 8020ba0:	f7ee f9e5 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020ba4:	4603      	mov	r3, r0
 8020ba6:	461c      	mov	r4, r3
 8020ba8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8020bac:	4618      	mov	r0, r3
 8020bae:	f7ee f9d2 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020bb2:	2c00      	cmp	r4, #0
 8020bb4:	d03b      	beq.n	8020c2e <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 8020bb6:	683b      	ldr	r3, [r7, #0]
 8020bb8:	699a      	ldr	r2, [r3, #24]
 8020bba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8020bbe:	4611      	mov	r1, r2
 8020bc0:	4618      	mov	r0, r3
 8020bc2:	f7ee fef7 	bl	800f9b4 <_Z10StringFromj>
 8020bc6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8020bca:	498e      	ldr	r1, [pc, #568]	; (8020e04 <_ZNK14MockNamedValue8toStringEv+0x370>)
 8020bcc:	4618      	mov	r0, r3
 8020bce:	f7ed fe0a 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020bd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020bd6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8020bda:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8020bde:	4618      	mov	r0, r3
 8020be0:	f7ee fa1b 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 8020be4:	683b      	ldr	r3, [r7, #0]
 8020be6:	699a      	ldr	r2, [r3, #24]
 8020be8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8020bec:	4611      	mov	r1, r2
 8020bee:	4618      	mov	r0, r3
 8020bf0:	f7ee fd84 	bl	800f6fc <_Z30BracketsFormattedHexStringFromj>
 8020bf4:	687b      	ldr	r3, [r7, #4]
 8020bf6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8020bfa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8020bfe:	4618      	mov	r0, r3
 8020c00:	f7ee fa0b 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 8020c04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8020c08:	4618      	mov	r0, r3
 8020c0a:	f7ee f9a4 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020c0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020c12:	4618      	mov	r0, r3
 8020c14:	f7ee f99f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020c18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8020c1c:	4618      	mov	r0, r3
 8020c1e:	f7ee f99a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020c22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8020c26:	4618      	mov	r0, r3
 8020c28:	f7ee f995 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020c2c:	e197      	b.n	8020f5e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 8020c2e:	683b      	ldr	r3, [r7, #0]
 8020c30:	f103 040c 	add.w	r4, r3, #12
 8020c34:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8020c38:	4974      	ldr	r1, [pc, #464]	; (8020e0c <_ZNK14MockNamedValue8toStringEv+0x378>)
 8020c3a:	4618      	mov	r0, r3
 8020c3c:	f7ed fdd3 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020c40:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8020c44:	4619      	mov	r1, r3
 8020c46:	4620      	mov	r0, r4
 8020c48:	f7ee f991 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020c4c:	4603      	mov	r3, r0
 8020c4e:	461c      	mov	r4, r3
 8020c50:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8020c54:	4618      	mov	r0, r3
 8020c56:	f7ee f97e 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020c5a:	2c00      	cmp	r4, #0
 8020c5c:	d03b      	beq.n	8020cd6 <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 8020c5e:	683b      	ldr	r3, [r7, #0]
 8020c60:	699a      	ldr	r2, [r3, #24]
 8020c62:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8020c66:	4611      	mov	r1, r2
 8020c68:	4618      	mov	r0, r3
 8020c6a:	f7ee fc4d 	bl	800f508 <_Z10StringFroml>
 8020c6e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8020c72:	4964      	ldr	r1, [pc, #400]	; (8020e04 <_ZNK14MockNamedValue8toStringEv+0x370>)
 8020c74:	4618      	mov	r0, r3
 8020c76:	f7ed fdb6 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020c7a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8020c7e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8020c82:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8020c86:	4618      	mov	r0, r3
 8020c88:	f7ee f9c7 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 8020c8c:	683b      	ldr	r3, [r7, #0]
 8020c8e:	699a      	ldr	r2, [r3, #24]
 8020c90:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8020c94:	4611      	mov	r1, r2
 8020c96:	4618      	mov	r0, r3
 8020c98:	f7ee fd4c 	bl	800f734 <_Z30BracketsFormattedHexStringFroml>
 8020c9c:	687b      	ldr	r3, [r7, #4]
 8020c9e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8020ca2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8020ca6:	4618      	mov	r0, r3
 8020ca8:	f7ee f9b7 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 8020cac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8020cb0:	4618      	mov	r0, r3
 8020cb2:	f7ee f950 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020cb6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8020cba:	4618      	mov	r0, r3
 8020cbc:	f7ee f94b 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020cc0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8020cc4:	4618      	mov	r0, r3
 8020cc6:	f7ee f946 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020cca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8020cce:	4618      	mov	r0, r3
 8020cd0:	f7ee f941 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020cd4:	e143      	b.n	8020f5e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 8020cd6:	683b      	ldr	r3, [r7, #0]
 8020cd8:	f103 040c 	add.w	r4, r3, #12
 8020cdc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8020ce0:	494b      	ldr	r1, [pc, #300]	; (8020e10 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 8020ce2:	4618      	mov	r0, r3
 8020ce4:	f7ed fd7f 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020ce8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8020cec:	4619      	mov	r1, r3
 8020cee:	4620      	mov	r0, r4
 8020cf0:	f7ee f93d 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020cf4:	4603      	mov	r3, r0
 8020cf6:	461c      	mov	r4, r3
 8020cf8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8020cfc:	4618      	mov	r0, r3
 8020cfe:	f7ee f92a 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020d02:	2c00      	cmp	r4, #0
 8020d04:	d03b      	beq.n	8020d7e <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 8020d06:	683b      	ldr	r3, [r7, #0]
 8020d08:	699a      	ldr	r2, [r3, #24]
 8020d0a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8020d0e:	4611      	mov	r1, r2
 8020d10:	4618      	mov	r0, r3
 8020d12:	f7ee fe61 	bl	800f9d8 <_Z10StringFromm>
 8020d16:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8020d1a:	493a      	ldr	r1, [pc, #232]	; (8020e04 <_ZNK14MockNamedValue8toStringEv+0x370>)
 8020d1c:	4618      	mov	r0, r3
 8020d1e:	f7ed fd62 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020d22:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8020d26:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8020d2a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8020d2e:	4618      	mov	r0, r3
 8020d30:	f7ee f973 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 8020d34:	683b      	ldr	r3, [r7, #0]
 8020d36:	699a      	ldr	r2, [r3, #24]
 8020d38:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8020d3c:	4611      	mov	r1, r2
 8020d3e:	4618      	mov	r0, r3
 8020d40:	f7ee fd14 	bl	800f76c <_Z30BracketsFormattedHexStringFromm>
 8020d44:	687b      	ldr	r3, [r7, #4]
 8020d46:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8020d4a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8020d4e:	4618      	mov	r0, r3
 8020d50:	f7ee f963 	bl	800f01a <_ZNK12SimpleStringplERKS_>
 8020d54:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8020d58:	4618      	mov	r0, r3
 8020d5a:	f7ee f8fc 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020d5e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8020d62:	4618      	mov	r0, r3
 8020d64:	f7ee f8f7 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020d68:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8020d6c:	4618      	mov	r0, r3
 8020d6e:	f7ee f8f2 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020d72:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8020d76:	4618      	mov	r0, r3
 8020d78:	f7ee f8ed 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020d7c:	e0ef      	b.n	8020f5e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 8020d7e:	683b      	ldr	r3, [r7, #0]
 8020d80:	f103 040c 	add.w	r4, r3, #12
 8020d84:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8020d88:	4922      	ldr	r1, [pc, #136]	; (8020e14 <_ZNK14MockNamedValue8toStringEv+0x380>)
 8020d8a:	4618      	mov	r0, r3
 8020d8c:	f7ed fd2b 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020d90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8020d94:	4619      	mov	r1, r3
 8020d96:	4620      	mov	r0, r4
 8020d98:	f7ee f8e9 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020d9c:	4603      	mov	r3, r0
 8020d9e:	461c      	mov	r4, r3
 8020da0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8020da4:	4618      	mov	r0, r3
 8020da6:	f7ee f8d6 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020daa:	2c00      	cmp	r4, #0
 8020dac:	d006      	beq.n	8020dbc <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 8020dae:	683b      	ldr	r3, [r7, #0]
 8020db0:	699b      	ldr	r3, [r3, #24]
 8020db2:	4619      	mov	r1, r3
 8020db4:	6878      	ldr	r0, [r7, #4]
 8020db6:	f7ed fd16 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020dba:	e0d0      	b.n	8020f5e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 8020dbc:	683b      	ldr	r3, [r7, #0]
 8020dbe:	f103 040c 	add.w	r4, r3, #12
 8020dc2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8020dc6:	4914      	ldr	r1, [pc, #80]	; (8020e18 <_ZNK14MockNamedValue8toStringEv+0x384>)
 8020dc8:	4618      	mov	r0, r3
 8020dca:	f7ed fd0c 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020dce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8020dd2:	4619      	mov	r1, r3
 8020dd4:	4620      	mov	r0, r4
 8020dd6:	f7ee f8ca 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020dda:	4603      	mov	r3, r0
 8020ddc:	461c      	mov	r4, r3
 8020dde:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8020de2:	4618      	mov	r0, r3
 8020de4:	f7ee f8b7 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020de8:	2c00      	cmp	r4, #0
 8020dea:	d017      	beq.n	8020e1c <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 8020dec:	683b      	ldr	r3, [r7, #0]
 8020dee:	699a      	ldr	r2, [r3, #24]
 8020df0:	687b      	ldr	r3, [r7, #4]
 8020df2:	4611      	mov	r1, r2
 8020df4:	4618      	mov	r0, r3
 8020df6:	f7ee fb99 	bl	800f52c <_Z10StringFromPKv>
 8020dfa:	e0b0      	b.n	8020f5e <_ZNK14MockNamedValue8toStringEv+0x4ca>
 8020dfc:	08028994 	.word	0x08028994
 8020e00:	08028990 	.word	0x08028990
 8020e04:	08028a80 	.word	0x08028a80
 8020e08:	0802899c 	.word	0x0802899c
 8020e0c:	080289ac 	.word	0x080289ac
 8020e10:	080289b8 	.word	0x080289b8
 8020e14:	08028a5c 	.word	0x08028a5c
 8020e18:	08028a3c 	.word	0x08028a3c
    else if (type_ == "void (*)()")
 8020e1c:	683b      	ldr	r3, [r7, #0]
 8020e1e:	f103 040c 	add.w	r4, r3, #12
 8020e22:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8020e26:	4950      	ldr	r1, [pc, #320]	; (8020f68 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 8020e28:	4618      	mov	r0, r3
 8020e2a:	f7ed fcdc 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020e2e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8020e32:	4619      	mov	r1, r3
 8020e34:	4620      	mov	r0, r4
 8020e36:	f7ee f89a 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020e3a:	4603      	mov	r3, r0
 8020e3c:	461c      	mov	r4, r3
 8020e3e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8020e42:	4618      	mov	r0, r3
 8020e44:	f7ee f887 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020e48:	2c00      	cmp	r4, #0
 8020e4a:	d007      	beq.n	8020e5c <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 8020e4c:	683b      	ldr	r3, [r7, #0]
 8020e4e:	699a      	ldr	r2, [r3, #24]
 8020e50:	687b      	ldr	r3, [r7, #4]
 8020e52:	4611      	mov	r1, r2
 8020e54:	4618      	mov	r0, r3
 8020e56:	f7ee fb93 	bl	800f580 <_Z10StringFromPFvvE>
 8020e5a:	e080      	b.n	8020f5e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 8020e5c:	683b      	ldr	r3, [r7, #0]
 8020e5e:	f103 040c 	add.w	r4, r3, #12
 8020e62:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8020e66:	4941      	ldr	r1, [pc, #260]	; (8020f6c <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 8020e68:	4618      	mov	r0, r3
 8020e6a:	f7ed fcbc 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020e6e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8020e72:	4619      	mov	r1, r3
 8020e74:	4620      	mov	r0, r4
 8020e76:	f7ee f87a 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020e7a:	4603      	mov	r3, r0
 8020e7c:	461c      	mov	r4, r3
 8020e7e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8020e82:	4618      	mov	r0, r3
 8020e84:	f7ee f867 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020e88:	2c00      	cmp	r4, #0
 8020e8a:	d007      	beq.n	8020e9c <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 8020e8c:	683b      	ldr	r3, [r7, #0]
 8020e8e:	699a      	ldr	r2, [r3, #24]
 8020e90:	687b      	ldr	r3, [r7, #4]
 8020e92:	4611      	mov	r1, r2
 8020e94:	4618      	mov	r0, r3
 8020e96:	f7ee fb49 	bl	800f52c <_Z10StringFromPKv>
 8020e9a:	e060      	b.n	8020f5e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 8020e9c:	683b      	ldr	r3, [r7, #0]
 8020e9e:	f103 040c 	add.w	r4, r3, #12
 8020ea2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8020ea6:	4932      	ldr	r1, [pc, #200]	; (8020f70 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 8020ea8:	4618      	mov	r0, r3
 8020eaa:	f7ed fc9c 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020eae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8020eb2:	4619      	mov	r1, r3
 8020eb4:	4620      	mov	r0, r4
 8020eb6:	f7ee f85a 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020eba:	4603      	mov	r3, r0
 8020ebc:	461c      	mov	r4, r3
 8020ebe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8020ec2:	4618      	mov	r0, r3
 8020ec4:	f7ee f847 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020ec8:	2c00      	cmp	r4, #0
 8020eca:	d00c      	beq.n	8020ee6 <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 8020ecc:	683b      	ldr	r3, [r7, #0]
 8020ece:	ed93 7b06 	vldr	d7, [r3, #24]
 8020ed2:	687b      	ldr	r3, [r7, #4]
 8020ed4:	2106      	movs	r1, #6
 8020ed6:	eeb0 0a47 	vmov.f32	s0, s14
 8020eda:	eef0 0a67 	vmov.f32	s1, s15
 8020ede:	4618      	mov	r0, r3
 8020ee0:	f7ee fcfe 	bl	800f8e0 <_Z10StringFromdi>
 8020ee4:	e03b      	b.n	8020f5e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 8020ee6:	683b      	ldr	r3, [r7, #0]
 8020ee8:	f103 040c 	add.w	r4, r3, #12
 8020eec:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8020ef0:	4920      	ldr	r1, [pc, #128]	; (8020f74 <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 8020ef2:	4618      	mov	r0, r3
 8020ef4:	f7ed fc77 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8020ef8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8020efc:	4619      	mov	r1, r3
 8020efe:	4620      	mov	r0, r4
 8020f00:	f7ee f835 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8020f04:	4603      	mov	r3, r0
 8020f06:	461c      	mov	r4, r3
 8020f08:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8020f0c:	4618      	mov	r0, r3
 8020f0e:	f7ee f822 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8020f12:	2c00      	cmp	r4, #0
 8020f14:	d008      	beq.n	8020f28 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 8020f16:	683b      	ldr	r3, [r7, #0]
 8020f18:	6999      	ldr	r1, [r3, #24]
 8020f1a:	683b      	ldr	r3, [r7, #0]
 8020f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8020f1e:	687b      	ldr	r3, [r7, #4]
 8020f20:	4618      	mov	r0, r3
 8020f22:	f7ee fe71 	bl	800fc08 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 8020f26:	e01a      	b.n	8020f5e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 8020f28:	683b      	ldr	r3, [r7, #0]
 8020f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020f2c:	2b00      	cmp	r3, #0
 8020f2e:	d00b      	beq.n	8020f48 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 8020f30:	683b      	ldr	r3, [r7, #0]
 8020f32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8020f34:	683b      	ldr	r3, [r7, #0]
 8020f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020f38:	681b      	ldr	r3, [r3, #0]
 8020f3a:	330c      	adds	r3, #12
 8020f3c:	681b      	ldr	r3, [r3, #0]
 8020f3e:	683a      	ldr	r2, [r7, #0]
 8020f40:	6992      	ldr	r2, [r2, #24]
 8020f42:	6878      	ldr	r0, [r7, #4]
 8020f44:	4798      	blx	r3
 8020f46:	e00a      	b.n	8020f5e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 8020f48:	683b      	ldr	r3, [r7, #0]
 8020f4a:	330c      	adds	r3, #12
 8020f4c:	4618      	mov	r0, r3
 8020f4e:	f7ed ffd5 	bl	800eefc <_ZNK12SimpleString12asCharStringEv>
 8020f52:	4602      	mov	r2, r0
 8020f54:	687b      	ldr	r3, [r7, #4]
 8020f56:	4908      	ldr	r1, [pc, #32]	; (8020f78 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 8020f58:	4618      	mov	r0, r3
 8020f5a:	f7ee fd03 	bl	800f964 <_Z16StringFromFormatPKcz>

}
 8020f5e:	6878      	ldr	r0, [r7, #4]
 8020f60:	37e4      	adds	r7, #228	; 0xe4
 8020f62:	46bd      	mov	sp, r7
 8020f64:	bd90      	pop	{r4, r7, pc}
 8020f66:	bf00      	nop
 8020f68:	08028a50 	.word	0x08028a50
 8020f6c:	08028a44 	.word	0x08028a44
 8020f70:	08028a34 	.word	0x08028a34
 8020f74:	08028a68 	.word	0x08028a68
 8020f78:	08028a84 	.word	0x08028a84

08020f7c <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 8020f7c:	b480      	push	{r7}
 8020f7e:	b083      	sub	sp, #12
 8020f80:	af00      	add	r7, sp, #0
 8020f82:	6078      	str	r0, [r7, #4]
 8020f84:	6039      	str	r1, [r7, #0]
    next_ = node;
 8020f86:	687b      	ldr	r3, [r7, #4]
 8020f88:	683a      	ldr	r2, [r7, #0]
 8020f8a:	605a      	str	r2, [r3, #4]
}
 8020f8c:	bf00      	nop
 8020f8e:	370c      	adds	r7, #12
 8020f90:	46bd      	mov	sp, r7
 8020f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f96:	4770      	bx	lr

08020f98 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 8020f98:	b480      	push	{r7}
 8020f9a:	b083      	sub	sp, #12
 8020f9c:	af00      	add	r7, sp, #0
 8020f9e:	6078      	str	r0, [r7, #4]
    return next_;
 8020fa0:	687b      	ldr	r3, [r7, #4]
 8020fa2:	685b      	ldr	r3, [r3, #4]
}
 8020fa4:	4618      	mov	r0, r3
 8020fa6:	370c      	adds	r7, #12
 8020fa8:	46bd      	mov	sp, r7
 8020faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fae:	4770      	bx	lr

08020fb0 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 8020fb0:	b480      	push	{r7}
 8020fb2:	b083      	sub	sp, #12
 8020fb4:	af00      	add	r7, sp, #0
 8020fb6:	6078      	str	r0, [r7, #4]
    return data_;
 8020fb8:	687b      	ldr	r3, [r7, #4]
 8020fba:	681b      	ldr	r3, [r3, #0]
}
 8020fbc:	4618      	mov	r0, r3
 8020fbe:	370c      	adds	r7, #12
 8020fc0:	46bd      	mov	sp, r7
 8020fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fc6:	4770      	bx	lr

08020fc8 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 8020fc8:	b580      	push	{r7, lr}
 8020fca:	b082      	sub	sp, #8
 8020fcc:	af00      	add	r7, sp, #0
 8020fce:	6078      	str	r0, [r7, #4]
    delete data_;
 8020fd0:	687b      	ldr	r3, [r7, #4]
 8020fd2:	681b      	ldr	r3, [r3, #0]
 8020fd4:	2b00      	cmp	r3, #0
 8020fd6:	d004      	beq.n	8020fe2 <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 8020fd8:	681a      	ldr	r2, [r3, #0]
 8020fda:	3204      	adds	r2, #4
 8020fdc:	6812      	ldr	r2, [r2, #0]
 8020fde:	4618      	mov	r0, r3
 8020fe0:	4790      	blx	r2
}
 8020fe2:	bf00      	nop
 8020fe4:	3708      	adds	r7, #8
 8020fe6:	46bd      	mov	sp, r7
 8020fe8:	bd80      	pop	{r7, pc}

08020fea <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 8020fea:	b480      	push	{r7}
 8020fec:	b083      	sub	sp, #12
 8020fee:	af00      	add	r7, sp, #0
 8020ff0:	6078      	str	r0, [r7, #4]
 8020ff2:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 8020ff4:	687b      	ldr	r3, [r7, #4]
 8020ff6:	683a      	ldr	r2, [r7, #0]
 8020ff8:	601a      	str	r2, [r3, #0]
 8020ffa:	687b      	ldr	r3, [r7, #4]
 8020ffc:	2200      	movs	r2, #0
 8020ffe:	605a      	str	r2, [r3, #4]
{
}
 8021000:	687b      	ldr	r3, [r7, #4]
 8021002:	4618      	mov	r0, r3
 8021004:	370c      	adds	r7, #12
 8021006:	46bd      	mov	sp, r7
 8021008:	f85d 7b04 	ldr.w	r7, [sp], #4
 802100c:	4770      	bx	lr

0802100e <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 802100e:	b580      	push	{r7, lr}
 8021010:	b082      	sub	sp, #8
 8021012:	af00      	add	r7, sp, #0
 8021014:	6078      	str	r0, [r7, #4]
 8021016:	6039      	str	r1, [r7, #0]
    return data_->getName();
 8021018:	683b      	ldr	r3, [r7, #0]
 802101a:	6819      	ldr	r1, [r3, #0]
 802101c:	683b      	ldr	r3, [r7, #0]
 802101e:	681b      	ldr	r3, [r3, #0]
 8021020:	681b      	ldr	r3, [r3, #0]
 8021022:	335c      	adds	r3, #92	; 0x5c
 8021024:	681b      	ldr	r3, [r3, #0]
 8021026:	687a      	ldr	r2, [r7, #4]
 8021028:	4610      	mov	r0, r2
 802102a:	4798      	blx	r3
}
 802102c:	6878      	ldr	r0, [r7, #4]
 802102e:	3708      	adds	r7, #8
 8021030:	46bd      	mov	sp, r7
 8021032:	bd80      	pop	{r7, pc}

08021034 <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 8021034:	b580      	push	{r7, lr}
 8021036:	b082      	sub	sp, #8
 8021038:	af00      	add	r7, sp, #0
 802103a:	6078      	str	r0, [r7, #4]
 802103c:	6039      	str	r1, [r7, #0]
    return data_->getType();
 802103e:	683b      	ldr	r3, [r7, #0]
 8021040:	6819      	ldr	r1, [r3, #0]
 8021042:	683b      	ldr	r3, [r7, #0]
 8021044:	681b      	ldr	r3, [r3, #0]
 8021046:	681b      	ldr	r3, [r3, #0]
 8021048:	3360      	adds	r3, #96	; 0x60
 802104a:	681b      	ldr	r3, [r3, #0]
 802104c:	687a      	ldr	r2, [r7, #4]
 802104e:	4610      	mov	r0, r2
 8021050:	4798      	blx	r3
}
 8021052:	6878      	ldr	r0, [r7, #4]
 8021054:	3708      	adds	r7, #8
 8021056:	46bd      	mov	sp, r7
 8021058:	bd80      	pop	{r7, pc}

0802105a <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 802105a:	b480      	push	{r7}
 802105c:	b083      	sub	sp, #12
 802105e:	af00      	add	r7, sp, #0
 8021060:	6078      	str	r0, [r7, #4]
 8021062:	687b      	ldr	r3, [r7, #4]
 8021064:	2200      	movs	r2, #0
 8021066:	601a      	str	r2, [r3, #0]
{
}
 8021068:	687b      	ldr	r3, [r7, #4]
 802106a:	4618      	mov	r0, r3
 802106c:	370c      	adds	r7, #12
 802106e:	46bd      	mov	sp, r7
 8021070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021074:	4770      	bx	lr

08021076 <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 8021076:	b580      	push	{r7, lr}
 8021078:	b084      	sub	sp, #16
 802107a:	af00      	add	r7, sp, #0
 802107c:	6078      	str	r0, [r7, #4]
    while (head_) {
 802107e:	687b      	ldr	r3, [r7, #4]
 8021080:	681b      	ldr	r3, [r3, #0]
 8021082:	2b00      	cmp	r3, #0
 8021084:	d016      	beq.n	80210b4 <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 8021086:	687b      	ldr	r3, [r7, #4]
 8021088:	681b      	ldr	r3, [r3, #0]
 802108a:	4618      	mov	r0, r3
 802108c:	f7ff ff84 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 8021090:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	681b      	ldr	r3, [r3, #0]
 8021096:	4618      	mov	r0, r3
 8021098:	f7ff ff96 	bl	8020fc8 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 802109c:	687b      	ldr	r3, [r7, #4]
 802109e:	681b      	ldr	r3, [r3, #0]
 80210a0:	2b00      	cmp	r3, #0
 80210a2:	d003      	beq.n	80210ac <_ZN18MockNamedValueList5clearEv+0x36>
 80210a4:	2108      	movs	r1, #8
 80210a6:	4618      	mov	r0, r3
 80210a8:	f7ea ffee 	bl	800c088 <_ZdlPvj>
        head_ = n;
 80210ac:	687b      	ldr	r3, [r7, #4]
 80210ae:	68fa      	ldr	r2, [r7, #12]
 80210b0:	601a      	str	r2, [r3, #0]
    while (head_) {
 80210b2:	e7e4      	b.n	802107e <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 80210b4:	bf00      	nop
 80210b6:	3710      	adds	r7, #16
 80210b8:	46bd      	mov	sp, r7
 80210ba:	bd80      	pop	{r7, pc}

080210bc <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 80210bc:	b590      	push	{r4, r7, lr}
 80210be:	b085      	sub	sp, #20
 80210c0:	af00      	add	r7, sp, #0
 80210c2:	6078      	str	r0, [r7, #4]
 80210c4:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 80210c6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80210ca:	4916      	ldr	r1, [pc, #88]	; (8021124 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 80210cc:	2008      	movs	r0, #8
 80210ce:	f7ea ffc7 	bl	800c060 <_ZnwjPKci>
 80210d2:	4604      	mov	r4, r0
 80210d4:	6839      	ldr	r1, [r7, #0]
 80210d6:	4620      	mov	r0, r4
 80210d8:	f7ff ff87 	bl	8020fea <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 80210dc:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 80210de:	687b      	ldr	r3, [r7, #4]
 80210e0:	681b      	ldr	r3, [r3, #0]
 80210e2:	2b00      	cmp	r3, #0
 80210e4:	d103      	bne.n	80210ee <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 80210e6:	687b      	ldr	r3, [r7, #4]
 80210e8:	68ba      	ldr	r2, [r7, #8]
 80210ea:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 80210ec:	e016      	b.n	802111c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 80210ee:	687b      	ldr	r3, [r7, #4]
 80210f0:	681b      	ldr	r3, [r3, #0]
 80210f2:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 80210f4:	68f8      	ldr	r0, [r7, #12]
 80210f6:	f7ff ff4f 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 80210fa:	4603      	mov	r3, r0
 80210fc:	2b00      	cmp	r3, #0
 80210fe:	bf14      	ite	ne
 8021100:	2301      	movne	r3, #1
 8021102:	2300      	moveq	r3, #0
 8021104:	b2db      	uxtb	r3, r3
 8021106:	2b00      	cmp	r3, #0
 8021108:	d004      	beq.n	8021114 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 802110a:	68f8      	ldr	r0, [r7, #12]
 802110c:	f7ff ff44 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 8021110:	60f8      	str	r0, [r7, #12]
 8021112:	e7ef      	b.n	80210f4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 8021114:	68b9      	ldr	r1, [r7, #8]
 8021116:	68f8      	ldr	r0, [r7, #12]
 8021118:	f7ff ff30 	bl	8020f7c <_ZN22MockNamedValueListNode7setNextEPS_>
}
 802111c:	bf00      	nop
 802111e:	3714      	adds	r7, #20
 8021120:	46bd      	mov	sp, r7
 8021122:	bd90      	pop	{r4, r7, pc}
 8021124:	080289cc 	.word	0x080289cc

08021128 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 8021128:	b590      	push	{r4, r7, lr}
 802112a:	b087      	sub	sp, #28
 802112c:	af00      	add	r7, sp, #0
 802112e:	6078      	str	r0, [r7, #4]
 8021130:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 8021132:	687b      	ldr	r3, [r7, #4]
 8021134:	681b      	ldr	r3, [r3, #0]
 8021136:	617b      	str	r3, [r7, #20]
 8021138:	697b      	ldr	r3, [r7, #20]
 802113a:	2b00      	cmp	r3, #0
 802113c:	d01e      	beq.n	802117c <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 802113e:	f107 030c 	add.w	r3, r7, #12
 8021142:	6979      	ldr	r1, [r7, #20]
 8021144:	4618      	mov	r0, r3
 8021146:	f7ff ff62 	bl	802100e <_ZNK22MockNamedValueListNode7getNameEv>
 802114a:	f107 030c 	add.w	r3, r7, #12
 802114e:	6839      	ldr	r1, [r7, #0]
 8021150:	4618      	mov	r0, r3
 8021152:	f7ed ff0c 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8021156:	4603      	mov	r3, r0
 8021158:	461c      	mov	r4, r3
 802115a:	f107 030c 	add.w	r3, r7, #12
 802115e:	4618      	mov	r0, r3
 8021160:	f7ed fef9 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 8021164:	2c00      	cmp	r4, #0
 8021166:	d004      	beq.n	8021172 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 8021168:	6978      	ldr	r0, [r7, #20]
 802116a:	f7ff ff21 	bl	8020fb0 <_ZN22MockNamedValueListNode4itemEv>
 802116e:	4603      	mov	r3, r0
 8021170:	e005      	b.n	802117e <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 8021172:	6978      	ldr	r0, [r7, #20]
 8021174:	f7ff ff10 	bl	8020f98 <_ZN22MockNamedValueListNode4nextEv>
 8021178:	6178      	str	r0, [r7, #20]
 802117a:	e7dd      	b.n	8021138 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 802117c:	2300      	movs	r3, #0
}
 802117e:	4618      	mov	r0, r3
 8021180:	371c      	adds	r7, #28
 8021182:	46bd      	mov	sp, r7
 8021184:	bd90      	pop	{r4, r7, pc}

08021186 <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 8021186:	b480      	push	{r7}
 8021188:	b083      	sub	sp, #12
 802118a:	af00      	add	r7, sp, #0
 802118c:	6078      	str	r0, [r7, #4]
    return head_;
 802118e:	687b      	ldr	r3, [r7, #4]
 8021190:	681b      	ldr	r3, [r3, #0]
}
 8021192:	4618      	mov	r0, r3
 8021194:	370c      	adds	r7, #12
 8021196:	46bd      	mov	sp, r7
 8021198:	f85d 7b04 	ldr.w	r7, [sp], #4
 802119c:	4770      	bx	lr

0802119e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 802119e:	b580      	push	{r7, lr}
 80211a0:	b084      	sub	sp, #16
 80211a2:	af00      	add	r7, sp, #0
 80211a4:	60f8      	str	r0, [r7, #12]
 80211a6:	60b9      	str	r1, [r7, #8]
 80211a8:	607a      	str	r2, [r7, #4]
 80211aa:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 80211ac:	68fb      	ldr	r3, [r7, #12]
 80211ae:	68b9      	ldr	r1, [r7, #8]
 80211b0:	4618      	mov	r0, r3
 80211b2:	f7ed fb6c 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
 80211b6:	68fb      	ldr	r3, [r7, #12]
 80211b8:	687a      	ldr	r2, [r7, #4]
 80211ba:	609a      	str	r2, [r3, #8]
 80211bc:	68fb      	ldr	r3, [r7, #12]
 80211be:	2200      	movs	r2, #0
 80211c0:	60da      	str	r2, [r3, #12]
 80211c2:	68fb      	ldr	r3, [r7, #12]
 80211c4:	683a      	ldr	r2, [r7, #0]
 80211c6:	611a      	str	r2, [r3, #16]
 80211c8:	68fb      	ldr	r3, [r7, #12]
 80211ca:	4618      	mov	r0, r3
 80211cc:	3710      	adds	r7, #16
 80211ce:	46bd      	mov	sp, r7
 80211d0:	bd80      	pop	{r7, pc}

080211d2 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 80211d2:	b580      	push	{r7, lr}
 80211d4:	b084      	sub	sp, #16
 80211d6:	af00      	add	r7, sp, #0
 80211d8:	60f8      	str	r0, [r7, #12]
 80211da:	60b9      	str	r1, [r7, #8]
 80211dc:	607a      	str	r2, [r7, #4]
 80211de:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 80211e0:	68fb      	ldr	r3, [r7, #12]
 80211e2:	68b9      	ldr	r1, [r7, #8]
 80211e4:	4618      	mov	r0, r3
 80211e6:	f7ed fb52 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
 80211ea:	68fb      	ldr	r3, [r7, #12]
 80211ec:	2200      	movs	r2, #0
 80211ee:	609a      	str	r2, [r3, #8]
 80211f0:	68fb      	ldr	r3, [r7, #12]
 80211f2:	687a      	ldr	r2, [r7, #4]
 80211f4:	60da      	str	r2, [r3, #12]
 80211f6:	68fb      	ldr	r3, [r7, #12]
 80211f8:	683a      	ldr	r2, [r7, #0]
 80211fa:	611a      	str	r2, [r3, #16]
 80211fc:	68fb      	ldr	r3, [r7, #12]
 80211fe:	4618      	mov	r0, r3
 8021200:	3710      	adds	r7, #16
 8021202:	46bd      	mov	sp, r7
 8021204:	bd80      	pop	{r7, pc}

08021206 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 8021206:	b580      	push	{r7, lr}
 8021208:	b084      	sub	sp, #16
 802120a:	af00      	add	r7, sp, #0
 802120c:	60f8      	str	r0, [r7, #12]
 802120e:	60b9      	str	r1, [r7, #8]
 8021210:	607a      	str	r2, [r7, #4]
 8021212:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 8021214:	68fb      	ldr	r3, [r7, #12]
 8021216:	68b9      	ldr	r1, [r7, #8]
 8021218:	4618      	mov	r0, r3
 802121a:	f7ed fb38 	bl	800e88e <_ZN12SimpleStringC1ERKS_>
 802121e:	68fb      	ldr	r3, [r7, #12]
 8021220:	687a      	ldr	r2, [r7, #4]
 8021222:	609a      	str	r2, [r3, #8]
 8021224:	68fb      	ldr	r3, [r7, #12]
 8021226:	683a      	ldr	r2, [r7, #0]
 8021228:	60da      	str	r2, [r3, #12]
 802122a:	68fb      	ldr	r3, [r7, #12]
 802122c:	69ba      	ldr	r2, [r7, #24]
 802122e:	611a      	str	r2, [r3, #16]
 8021230:	68fb      	ldr	r3, [r7, #12]
 8021232:	4618      	mov	r0, r3
 8021234:	3710      	adds	r7, #16
 8021236:	46bd      	mov	sp, r7
 8021238:	bd80      	pop	{r7, pc}
	...

0802123c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 802123c:	b480      	push	{r7}
 802123e:	b083      	sub	sp, #12
 8021240:	af00      	add	r7, sp, #0
 8021242:	6078      	str	r0, [r7, #4]
 8021244:	4a06      	ldr	r2, [pc, #24]	; (8021260 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 8021246:	687b      	ldr	r3, [r7, #4]
 8021248:	601a      	str	r2, [r3, #0]
 802124a:	687b      	ldr	r3, [r7, #4]
 802124c:	2200      	movs	r2, #0
 802124e:	605a      	str	r2, [r3, #4]
{

}
 8021250:	687b      	ldr	r3, [r7, #4]
 8021252:	4618      	mov	r0, r3
 8021254:	370c      	adds	r7, #12
 8021256:	46bd      	mov	sp, r7
 8021258:	f85d 7b04 	ldr.w	r7, [sp], #4
 802125c:	4770      	bx	lr
 802125e:	bf00      	nop
 8021260:	0802b930 	.word	0x0802b930

08021264 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 8021264:	b580      	push	{r7, lr}
 8021266:	b082      	sub	sp, #8
 8021268:	af00      	add	r7, sp, #0
 802126a:	6078      	str	r0, [r7, #4]
 802126c:	4a05      	ldr	r2, [pc, #20]	; (8021284 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 802126e:	687b      	ldr	r3, [r7, #4]
 8021270:	601a      	str	r2, [r3, #0]
{
    clear();
 8021272:	6878      	ldr	r0, [r7, #4]
 8021274:	f000 f825 	bl	80212c2 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 8021278:	687b      	ldr	r3, [r7, #4]
 802127a:	4618      	mov	r0, r3
 802127c:	3708      	adds	r7, #8
 802127e:	46bd      	mov	sp, r7
 8021280:	bd80      	pop	{r7, pc}
 8021282:	bf00      	nop
 8021284:	0802b930 	.word	0x0802b930

08021288 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 8021288:	b580      	push	{r7, lr}
 802128a:	b082      	sub	sp, #8
 802128c:	af00      	add	r7, sp, #0
 802128e:	6078      	str	r0, [r7, #4]
}
 8021290:	6878      	ldr	r0, [r7, #4]
 8021292:	f7ff ffe7 	bl	8021264 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 8021296:	2108      	movs	r1, #8
 8021298:	6878      	ldr	r0, [r7, #4]
 802129a:	f7ea fef5 	bl	800c088 <_ZdlPvj>
 802129e:	687b      	ldr	r3, [r7, #4]
 80212a0:	4618      	mov	r0, r3
 80212a2:	3708      	adds	r7, #8
 80212a4:	46bd      	mov	sp, r7
 80212a6:	bd80      	pop	{r7, pc}

080212a8 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 80212a8:	b580      	push	{r7, lr}
 80212aa:	b082      	sub	sp, #8
 80212ac:	af00      	add	r7, sp, #0
 80212ae:	6078      	str	r0, [r7, #4]
 80212b0:	687b      	ldr	r3, [r7, #4]
 80212b2:	4618      	mov	r0, r3
 80212b4:	f7ed fe4f 	bl	800ef56 <_ZN12SimpleStringD1Ev>
 80212b8:	687b      	ldr	r3, [r7, #4]
 80212ba:	4618      	mov	r0, r3
 80212bc:	3708      	adds	r7, #8
 80212be:	46bd      	mov	sp, r7
 80212c0:	bd80      	pop	{r7, pc}

080212c2 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 80212c2:	b590      	push	{r4, r7, lr}
 80212c4:	b085      	sub	sp, #20
 80212c6:	af00      	add	r7, sp, #0
 80212c8:	6078      	str	r0, [r7, #4]
    while (head_) {
 80212ca:	687b      	ldr	r3, [r7, #4]
 80212cc:	685b      	ldr	r3, [r3, #4]
 80212ce:	2b00      	cmp	r3, #0
 80212d0:	d012      	beq.n	80212f8 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 80212d2:	687b      	ldr	r3, [r7, #4]
 80212d4:	685b      	ldr	r3, [r3, #4]
 80212d6:	691b      	ldr	r3, [r3, #16]
 80212d8:	60fb      	str	r3, [r7, #12]
        delete head_;
 80212da:	687b      	ldr	r3, [r7, #4]
 80212dc:	685c      	ldr	r4, [r3, #4]
 80212de:	2c00      	cmp	r4, #0
 80212e0:	d006      	beq.n	80212f0 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 80212e2:	4620      	mov	r0, r4
 80212e4:	f7ff ffe0 	bl	80212a8 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 80212e8:	2114      	movs	r1, #20
 80212ea:	4620      	mov	r0, r4
 80212ec:	f7ea fecc 	bl	800c088 <_ZdlPvj>
        head_ = next;
 80212f0:	687b      	ldr	r3, [r7, #4]
 80212f2:	68fa      	ldr	r2, [r7, #12]
 80212f4:	605a      	str	r2, [r3, #4]
    while (head_) {
 80212f6:	e7e8      	b.n	80212ca <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 80212f8:	bf00      	nop
 80212fa:	3714      	adds	r7, #20
 80212fc:	46bd      	mov	sp, r7
 80212fe:	bd90      	pop	{r4, r7, pc}

08021300 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 8021300:	b590      	push	{r4, r7, lr}
 8021302:	b085      	sub	sp, #20
 8021304:	af00      	add	r7, sp, #0
 8021306:	60f8      	str	r0, [r7, #12]
 8021308:	60b9      	str	r1, [r7, #8]
 802130a:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 802130c:	f240 227a 	movw	r2, #634	; 0x27a
 8021310:	4908      	ldr	r1, [pc, #32]	; (8021334 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 8021312:	2014      	movs	r0, #20
 8021314:	f7ea fea4 	bl	800c060 <_ZnwjPKci>
 8021318:	4604      	mov	r4, r0
 802131a:	68fb      	ldr	r3, [r7, #12]
 802131c:	685b      	ldr	r3, [r3, #4]
 802131e:	687a      	ldr	r2, [r7, #4]
 8021320:	68b9      	ldr	r1, [r7, #8]
 8021322:	4620      	mov	r0, r4
 8021324:	f7ff ff3b 	bl	802119e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 8021328:	68fb      	ldr	r3, [r7, #12]
 802132a:	605c      	str	r4, [r3, #4]
}
 802132c:	bf00      	nop
 802132e:	3714      	adds	r7, #20
 8021330:	46bd      	mov	sp, r7
 8021332:	bd90      	pop	{r4, r7, pc}
 8021334:	080289cc 	.word	0x080289cc

08021338 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 8021338:	b590      	push	{r4, r7, lr}
 802133a:	b085      	sub	sp, #20
 802133c:	af00      	add	r7, sp, #0
 802133e:	60f8      	str	r0, [r7, #12]
 8021340:	60b9      	str	r1, [r7, #8]
 8021342:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 8021344:	f240 227f 	movw	r2, #639	; 0x27f
 8021348:	4908      	ldr	r1, [pc, #32]	; (802136c <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 802134a:	2014      	movs	r0, #20
 802134c:	f7ea fe88 	bl	800c060 <_ZnwjPKci>
 8021350:	4604      	mov	r4, r0
 8021352:	68fb      	ldr	r3, [r7, #12]
 8021354:	685b      	ldr	r3, [r3, #4]
 8021356:	687a      	ldr	r2, [r7, #4]
 8021358:	68b9      	ldr	r1, [r7, #8]
 802135a:	4620      	mov	r0, r4
 802135c:	f7ff ff39 	bl	80211d2 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 8021360:	68fb      	ldr	r3, [r7, #12]
 8021362:	605c      	str	r4, [r3, #4]
}
 8021364:	bf00      	nop
 8021366:	3714      	adds	r7, #20
 8021368:	46bd      	mov	sp, r7
 802136a:	bd90      	pop	{r4, r7, pc}
 802136c:	080289cc 	.word	0x080289cc

08021370 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 8021370:	b580      	push	{r7, lr}
 8021372:	b084      	sub	sp, #16
 8021374:	af00      	add	r7, sp, #0
 8021376:	6078      	str	r0, [r7, #4]
 8021378:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 802137a:	687b      	ldr	r3, [r7, #4]
 802137c:	685b      	ldr	r3, [r3, #4]
 802137e:	60fb      	str	r3, [r7, #12]
 8021380:	68fb      	ldr	r3, [r7, #12]
 8021382:	2b00      	cmp	r3, #0
 8021384:	d017      	beq.n	80213b6 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 8021386:	68fb      	ldr	r3, [r7, #12]
 8021388:	6839      	ldr	r1, [r7, #0]
 802138a:	4618      	mov	r0, r3
 802138c:	f7ed fdef 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 8021390:	4603      	mov	r3, r0
 8021392:	2b00      	cmp	r3, #0
 8021394:	d005      	beq.n	80213a2 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 8021396:	68fb      	ldr	r3, [r7, #12]
 8021398:	689b      	ldr	r3, [r3, #8]
 802139a:	2b00      	cmp	r3, #0
 802139c:	d001      	beq.n	80213a2 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 802139e:	2301      	movs	r3, #1
 80213a0:	e000      	b.n	80213a4 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 80213a2:	2300      	movs	r3, #0
 80213a4:	2b00      	cmp	r3, #0
 80213a6:	d002      	beq.n	80213ae <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 80213a8:	68fb      	ldr	r3, [r7, #12]
 80213aa:	689b      	ldr	r3, [r3, #8]
 80213ac:	e004      	b.n	80213b8 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 80213ae:	68fb      	ldr	r3, [r7, #12]
 80213b0:	691b      	ldr	r3, [r3, #16]
 80213b2:	60fb      	str	r3, [r7, #12]
 80213b4:	e7e4      	b.n	8021380 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 80213b6:	2300      	movs	r3, #0
}
 80213b8:	4618      	mov	r0, r3
 80213ba:	3710      	adds	r7, #16
 80213bc:	46bd      	mov	sp, r7
 80213be:	bd80      	pop	{r7, pc}

080213c0 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 80213c0:	b580      	push	{r7, lr}
 80213c2:	b084      	sub	sp, #16
 80213c4:	af00      	add	r7, sp, #0
 80213c6:	6078      	str	r0, [r7, #4]
 80213c8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 80213ca:	687b      	ldr	r3, [r7, #4]
 80213cc:	685b      	ldr	r3, [r3, #4]
 80213ce:	60fb      	str	r3, [r7, #12]
 80213d0:	68fb      	ldr	r3, [r7, #12]
 80213d2:	2b00      	cmp	r3, #0
 80213d4:	d017      	beq.n	8021406 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 80213d6:	68fb      	ldr	r3, [r7, #12]
 80213d8:	6839      	ldr	r1, [r7, #0]
 80213da:	4618      	mov	r0, r3
 80213dc:	f7ed fdc7 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 80213e0:	4603      	mov	r3, r0
 80213e2:	2b00      	cmp	r3, #0
 80213e4:	d005      	beq.n	80213f2 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 80213e6:	68fb      	ldr	r3, [r7, #12]
 80213e8:	68db      	ldr	r3, [r3, #12]
 80213ea:	2b00      	cmp	r3, #0
 80213ec:	d001      	beq.n	80213f2 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 80213ee:	2301      	movs	r3, #1
 80213f0:	e000      	b.n	80213f4 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 80213f2:	2300      	movs	r3, #0
 80213f4:	2b00      	cmp	r3, #0
 80213f6:	d002      	beq.n	80213fe <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 80213f8:	68fb      	ldr	r3, [r7, #12]
 80213fa:	68db      	ldr	r3, [r3, #12]
 80213fc:	e004      	b.n	8021408 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 80213fe:	68fb      	ldr	r3, [r7, #12]
 8021400:	691b      	ldr	r3, [r3, #16]
 8021402:	60fb      	str	r3, [r7, #12]
 8021404:	e7e4      	b.n	80213d0 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 8021406:	2300      	movs	r3, #0
}
 8021408:	4618      	mov	r0, r3
 802140a:	3710      	adds	r7, #16
 802140c:	46bd      	mov	sp, r7
 802140e:	bd80      	pop	{r7, pc}

08021410 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 8021410:	b590      	push	{r4, r7, lr}
 8021412:	b087      	sub	sp, #28
 8021414:	af02      	add	r7, sp, #8
 8021416:	6078      	str	r0, [r7, #4]
 8021418:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 802141a:	683b      	ldr	r3, [r7, #0]
 802141c:	685b      	ldr	r3, [r3, #4]
 802141e:	60fb      	str	r3, [r7, #12]
 8021420:	68fb      	ldr	r3, [r7, #12]
 8021422:	2b00      	cmp	r3, #0
 8021424:	d018      	beq.n	8021458 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 8021426:	f240 2293 	movw	r2, #659	; 0x293
 802142a:	490d      	ldr	r1, [pc, #52]	; (8021460 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 802142c:	2014      	movs	r0, #20
 802142e:	f7ea fe17 	bl	800c060 <_ZnwjPKci>
 8021432:	4604      	mov	r4, r0
 8021434:	68f9      	ldr	r1, [r7, #12]
 8021436:	68fb      	ldr	r3, [r7, #12]
 8021438:	689a      	ldr	r2, [r3, #8]
 802143a:	68fb      	ldr	r3, [r7, #12]
 802143c:	68d8      	ldr	r0, [r3, #12]
 802143e:	687b      	ldr	r3, [r7, #4]
 8021440:	685b      	ldr	r3, [r3, #4]
 8021442:	9300      	str	r3, [sp, #0]
 8021444:	4603      	mov	r3, r0
 8021446:	4620      	mov	r0, r4
 8021448:	f7ff fedd 	bl	8021206 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 802144c:	687b      	ldr	r3, [r7, #4]
 802144e:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 8021450:	68fb      	ldr	r3, [r7, #12]
 8021452:	691b      	ldr	r3, [r3, #16]
 8021454:	60fb      	str	r3, [r7, #12]
 8021456:	e7e3      	b.n	8021420 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 8021458:	bf00      	nop
 802145a:	3714      	adds	r7, #20
 802145c:	46bd      	mov	sp, r7
 802145e:	bd90      	pop	{r4, r7, pc}
 8021460:	080289cc 	.word	0x080289cc

08021464 <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 8021464:	b580      	push	{r7, lr}
 8021466:	b082      	sub	sp, #8
 8021468:	af00      	add	r7, sp, #0
 802146a:	6078      	str	r0, [r7, #4]
 802146c:	6039      	str	r1, [r7, #0]
 802146e:	687b      	ldr	r3, [r7, #4]
 8021470:	490b      	ldr	r1, [pc, #44]	; (80214a0 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 8021472:	4618      	mov	r0, r3
 8021474:	f7ed f9b7 	bl	800e7e6 <_ZN12SimpleStringC1EPKc>
 8021478:	687b      	ldr	r3, [r7, #4]
 802147a:	2200      	movs	r2, #0
 802147c:	721a      	strb	r2, [r3, #8]
 802147e:	687b      	ldr	r3, [r7, #4]
 8021480:	2200      	movs	r2, #0
 8021482:	725a      	strb	r2, [r3, #9]
 8021484:	687b      	ldr	r3, [r7, #4]
 8021486:	2200      	movs	r2, #0
 8021488:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 802148a:	687b      	ldr	r3, [r7, #4]
 802148c:	6839      	ldr	r1, [r7, #0]
 802148e:	4618      	mov	r0, r3
 8021490:	f7ed fa15 	bl	800e8be <_ZN12SimpleStringaSERKS_>
}
 8021494:	687b      	ldr	r3, [r7, #4]
 8021496:	4618      	mov	r0, r3
 8021498:	3708      	adds	r7, #8
 802149a:	46bd      	mov	sp, r7
 802149c:	bd80      	pop	{r7, pc}
 802149e:	bf00      	nop
 80214a0:	08028aa8 	.word	0x08028aa8

080214a4 <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 80214a4:	b480      	push	{r7}
 80214a6:	b083      	sub	sp, #12
 80214a8:	af00      	add	r7, sp, #0
 80214aa:	6078      	str	r0, [r7, #4]
 80214ac:	6039      	str	r1, [r7, #0]
    next_ = filter;
 80214ae:	687b      	ldr	r3, [r7, #4]
 80214b0:	683a      	ldr	r2, [r7, #0]
 80214b2:	60da      	str	r2, [r3, #12]
    return this;
 80214b4:	687b      	ldr	r3, [r7, #4]
}
 80214b6:	4618      	mov	r0, r3
 80214b8:	370c      	adds	r7, #12
 80214ba:	46bd      	mov	sp, r7
 80214bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214c0:	4770      	bx	lr

080214c2 <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 80214c2:	b480      	push	{r7}
 80214c4:	b083      	sub	sp, #12
 80214c6:	af00      	add	r7, sp, #0
 80214c8:	6078      	str	r0, [r7, #4]
    return next_;
 80214ca:	687b      	ldr	r3, [r7, #4]
 80214cc:	68db      	ldr	r3, [r3, #12]
}
 80214ce:	4618      	mov	r0, r3
 80214d0:	370c      	adds	r7, #12
 80214d2:	46bd      	mov	sp, r7
 80214d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214d8:	4770      	bx	lr

080214da <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 80214da:	b480      	push	{r7}
 80214dc:	b083      	sub	sp, #12
 80214de:	af00      	add	r7, sp, #0
 80214e0:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 80214e2:	687b      	ldr	r3, [r7, #4]
 80214e4:	2201      	movs	r2, #1
 80214e6:	721a      	strb	r2, [r3, #8]
}
 80214e8:	bf00      	nop
 80214ea:	370c      	adds	r7, #12
 80214ec:	46bd      	mov	sp, r7
 80214ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214f2:	4770      	bx	lr

080214f4 <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 80214f4:	b480      	push	{r7}
 80214f6:	b083      	sub	sp, #12
 80214f8:	af00      	add	r7, sp, #0
 80214fa:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 80214fc:	687b      	ldr	r3, [r7, #4]
 80214fe:	2201      	movs	r2, #1
 8021500:	725a      	strb	r2, [r3, #9]
}
 8021502:	bf00      	nop
 8021504:	370c      	adds	r7, #12
 8021506:	46bd      	mov	sp, r7
 8021508:	f85d 7b04 	ldr.w	r7, [sp], #4
 802150c:	4770      	bx	lr

0802150e <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 802150e:	b580      	push	{r7, lr}
 8021510:	b084      	sub	sp, #16
 8021512:	af00      	add	r7, sp, #0
 8021514:	6078      	str	r0, [r7, #4]
 8021516:	6039      	str	r1, [r7, #0]
    bool matches = false;
 8021518:	2300      	movs	r3, #0
 802151a:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 802151c:	687b      	ldr	r3, [r7, #4]
 802151e:	7a1b      	ldrb	r3, [r3, #8]
 8021520:	2b00      	cmp	r3, #0
 8021522:	d007      	beq.n	8021534 <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 8021524:	687b      	ldr	r3, [r7, #4]
 8021526:	4619      	mov	r1, r3
 8021528:	6838      	ldr	r0, [r7, #0]
 802152a:	f7ed fd20 	bl	800ef6e <_ZeqRK12SimpleStringS1_>
 802152e:	4603      	mov	r3, r0
 8021530:	73fb      	strb	r3, [r7, #15]
 8021532:	e006      	b.n	8021542 <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 8021534:	687b      	ldr	r3, [r7, #4]
 8021536:	4619      	mov	r1, r3
 8021538:	6838      	ldr	r0, [r7, #0]
 802153a:	f7ed f9d2 	bl	800e8e2 <_ZNK12SimpleString8containsERKS_>
 802153e:	4603      	mov	r3, r0
 8021540:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 8021542:	687b      	ldr	r3, [r7, #4]
 8021544:	7a5b      	ldrb	r3, [r3, #9]
 8021546:	2b00      	cmp	r3, #0
 8021548:	d004      	beq.n	8021554 <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 802154a:	7bfb      	ldrb	r3, [r7, #15]
 802154c:	f083 0301 	eor.w	r3, r3, #1
 8021550:	b2db      	uxtb	r3, r3
 8021552:	e005      	b.n	8021560 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 8021554:	7bfb      	ldrb	r3, [r7, #15]
 8021556:	2b00      	cmp	r3, #0
 8021558:	bf14      	ite	ne
 802155a:	2301      	movne	r3, #1
 802155c:	2300      	moveq	r3, #0
 802155e:	b2db      	uxtb	r3, r3
}
 8021560:	4618      	mov	r0, r3
 8021562:	3710      	adds	r7, #16
 8021564:	46bd      	mov	sp, r7
 8021566:	bd80      	pop	{r7, pc}

08021568 <__cxa_guard_acquire>:
 8021568:	6803      	ldr	r3, [r0, #0]
 802156a:	07db      	lsls	r3, r3, #31
 802156c:	d406      	bmi.n	802157c <__cxa_guard_acquire+0x14>
 802156e:	7843      	ldrb	r3, [r0, #1]
 8021570:	b103      	cbz	r3, 8021574 <__cxa_guard_acquire+0xc>
 8021572:	deff      	udf	#255	; 0xff
 8021574:	2301      	movs	r3, #1
 8021576:	7043      	strb	r3, [r0, #1]
 8021578:	4618      	mov	r0, r3
 802157a:	4770      	bx	lr
 802157c:	2000      	movs	r0, #0
 802157e:	4770      	bx	lr

08021580 <__cxa_guard_release>:
 8021580:	2301      	movs	r3, #1
 8021582:	6003      	str	r3, [r0, #0]
 8021584:	4770      	bx	lr

08021586 <__cxa_pure_virtual>:
 8021586:	b508      	push	{r3, lr}
 8021588:	f000 f80c 	bl	80215a4 <_ZSt9terminatev>

0802158c <_ZN10__cxxabiv111__terminateEPFvvE>:
 802158c:	b508      	push	{r3, lr}
 802158e:	4780      	blx	r0
 8021590:	f000 f816 	bl	80215c0 <abort>

08021594 <_ZSt13get_terminatev>:
 8021594:	4b02      	ldr	r3, [pc, #8]	; (80215a0 <_ZSt13get_terminatev+0xc>)
 8021596:	6818      	ldr	r0, [r3, #0]
 8021598:	f3bf 8f5b 	dmb	ish
 802159c:	4770      	bx	lr
 802159e:	bf00      	nop
 80215a0:	20000104 	.word	0x20000104

080215a4 <_ZSt9terminatev>:
 80215a4:	b508      	push	{r3, lr}
 80215a6:	f7ff fff5 	bl	8021594 <_ZSt13get_terminatev>
 80215aa:	f7ff ffef 	bl	802158c <_ZN10__cxxabiv111__terminateEPFvvE>

080215ae <fabs>:
 80215ae:	ec51 0b10 	vmov	r0, r1, d0
 80215b2:	ee10 2a10 	vmov	r2, s0
 80215b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80215ba:	ec43 2b10 	vmov	d0, r2, r3
 80215be:	4770      	bx	lr

080215c0 <abort>:
 80215c0:	b508      	push	{r3, lr}
 80215c2:	2006      	movs	r0, #6
 80215c4:	f000 ff8c 	bl	80224e0 <raise>
 80215c8:	2001      	movs	r0, #1
 80215ca:	f7df fc12 	bl	8000df2 <_exit>

080215ce <atexit>:
 80215ce:	2300      	movs	r3, #0
 80215d0:	4601      	mov	r1, r0
 80215d2:	461a      	mov	r2, r3
 80215d4:	4618      	mov	r0, r3
 80215d6:	f002 b9db 	b.w	8023990 <__register_exitproc>

080215da <atoi>:
 80215da:	220a      	movs	r2, #10
 80215dc:	2100      	movs	r1, #0
 80215de:	f001 be03 	b.w	80231e8 <strtol>
	...

080215e4 <calloc>:
 80215e4:	4b02      	ldr	r3, [pc, #8]	; (80215f0 <calloc+0xc>)
 80215e6:	460a      	mov	r2, r1
 80215e8:	4601      	mov	r1, r0
 80215ea:	6818      	ldr	r0, [r3, #0]
 80215ec:	f000 bde8 	b.w	80221c0 <_calloc_r>
 80215f0:	20000108 	.word	0x20000108

080215f4 <__errno>:
 80215f4:	4b01      	ldr	r3, [pc, #4]	; (80215fc <__errno+0x8>)
 80215f6:	6818      	ldr	r0, [r3, #0]
 80215f8:	4770      	bx	lr
 80215fa:	bf00      	nop
 80215fc:	20000108 	.word	0x20000108

08021600 <_fclose_r>:
 8021600:	b570      	push	{r4, r5, r6, lr}
 8021602:	4605      	mov	r5, r0
 8021604:	460c      	mov	r4, r1
 8021606:	b911      	cbnz	r1, 802160e <_fclose_r+0xe>
 8021608:	2600      	movs	r6, #0
 802160a:	4630      	mov	r0, r6
 802160c:	bd70      	pop	{r4, r5, r6, pc}
 802160e:	b118      	cbz	r0, 8021618 <_fclose_r+0x18>
 8021610:	6983      	ldr	r3, [r0, #24]
 8021612:	b90b      	cbnz	r3, 8021618 <_fclose_r+0x18>
 8021614:	f000 f994 	bl	8021940 <__sinit>
 8021618:	4b2c      	ldr	r3, [pc, #176]	; (80216cc <_fclose_r+0xcc>)
 802161a:	429c      	cmp	r4, r3
 802161c:	d114      	bne.n	8021648 <_fclose_r+0x48>
 802161e:	686c      	ldr	r4, [r5, #4]
 8021620:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021622:	07d8      	lsls	r0, r3, #31
 8021624:	d405      	bmi.n	8021632 <_fclose_r+0x32>
 8021626:	89a3      	ldrh	r3, [r4, #12]
 8021628:	0599      	lsls	r1, r3, #22
 802162a:	d402      	bmi.n	8021632 <_fclose_r+0x32>
 802162c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802162e:	f000 fd3a 	bl	80220a6 <__retarget_lock_acquire_recursive>
 8021632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021636:	b98b      	cbnz	r3, 802165c <_fclose_r+0x5c>
 8021638:	6e66      	ldr	r6, [r4, #100]	; 0x64
 802163a:	f016 0601 	ands.w	r6, r6, #1
 802163e:	d1e3      	bne.n	8021608 <_fclose_r+0x8>
 8021640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021642:	f000 fd32 	bl	80220aa <__retarget_lock_release_recursive>
 8021646:	e7e0      	b.n	802160a <_fclose_r+0xa>
 8021648:	4b21      	ldr	r3, [pc, #132]	; (80216d0 <_fclose_r+0xd0>)
 802164a:	429c      	cmp	r4, r3
 802164c:	d101      	bne.n	8021652 <_fclose_r+0x52>
 802164e:	68ac      	ldr	r4, [r5, #8]
 8021650:	e7e6      	b.n	8021620 <_fclose_r+0x20>
 8021652:	4b20      	ldr	r3, [pc, #128]	; (80216d4 <_fclose_r+0xd4>)
 8021654:	429c      	cmp	r4, r3
 8021656:	bf08      	it	eq
 8021658:	68ec      	ldreq	r4, [r5, #12]
 802165a:	e7e1      	b.n	8021620 <_fclose_r+0x20>
 802165c:	4621      	mov	r1, r4
 802165e:	4628      	mov	r0, r5
 8021660:	f000 f842 	bl	80216e8 <__sflush_r>
 8021664:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8021666:	4606      	mov	r6, r0
 8021668:	b133      	cbz	r3, 8021678 <_fclose_r+0x78>
 802166a:	6a21      	ldr	r1, [r4, #32]
 802166c:	4628      	mov	r0, r5
 802166e:	4798      	blx	r3
 8021670:	2800      	cmp	r0, #0
 8021672:	bfb8      	it	lt
 8021674:	f04f 36ff 	movlt.w	r6, #4294967295
 8021678:	89a3      	ldrh	r3, [r4, #12]
 802167a:	061a      	lsls	r2, r3, #24
 802167c:	d503      	bpl.n	8021686 <_fclose_r+0x86>
 802167e:	6921      	ldr	r1, [r4, #16]
 8021680:	4628      	mov	r0, r5
 8021682:	f000 fdad 	bl	80221e0 <_free_r>
 8021686:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021688:	b141      	cbz	r1, 802169c <_fclose_r+0x9c>
 802168a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802168e:	4299      	cmp	r1, r3
 8021690:	d002      	beq.n	8021698 <_fclose_r+0x98>
 8021692:	4628      	mov	r0, r5
 8021694:	f000 fda4 	bl	80221e0 <_free_r>
 8021698:	2300      	movs	r3, #0
 802169a:	6363      	str	r3, [r4, #52]	; 0x34
 802169c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802169e:	b121      	cbz	r1, 80216aa <_fclose_r+0xaa>
 80216a0:	4628      	mov	r0, r5
 80216a2:	f000 fd9d 	bl	80221e0 <_free_r>
 80216a6:	2300      	movs	r3, #0
 80216a8:	64a3      	str	r3, [r4, #72]	; 0x48
 80216aa:	f000 f931 	bl	8021910 <__sfp_lock_acquire>
 80216ae:	2300      	movs	r3, #0
 80216b0:	81a3      	strh	r3, [r4, #12]
 80216b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80216b4:	07db      	lsls	r3, r3, #31
 80216b6:	d402      	bmi.n	80216be <_fclose_r+0xbe>
 80216b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80216ba:	f000 fcf6 	bl	80220aa <__retarget_lock_release_recursive>
 80216be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80216c0:	f000 fcef 	bl	80220a2 <__retarget_lock_close_recursive>
 80216c4:	f000 f92a 	bl	802191c <__sfp_lock_release>
 80216c8:	e79f      	b.n	802160a <_fclose_r+0xa>
 80216ca:	bf00      	nop
 80216cc:	0802ba24 	.word	0x0802ba24
 80216d0:	0802ba44 	.word	0x0802ba44
 80216d4:	0802ba04 	.word	0x0802ba04

080216d8 <fclose>:
 80216d8:	4b02      	ldr	r3, [pc, #8]	; (80216e4 <fclose+0xc>)
 80216da:	4601      	mov	r1, r0
 80216dc:	6818      	ldr	r0, [r3, #0]
 80216de:	f7ff bf8f 	b.w	8021600 <_fclose_r>
 80216e2:	bf00      	nop
 80216e4:	20000108 	.word	0x20000108

080216e8 <__sflush_r>:
 80216e8:	898a      	ldrh	r2, [r1, #12]
 80216ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80216ee:	4605      	mov	r5, r0
 80216f0:	0710      	lsls	r0, r2, #28
 80216f2:	460c      	mov	r4, r1
 80216f4:	d458      	bmi.n	80217a8 <__sflush_r+0xc0>
 80216f6:	684b      	ldr	r3, [r1, #4]
 80216f8:	2b00      	cmp	r3, #0
 80216fa:	dc05      	bgt.n	8021708 <__sflush_r+0x20>
 80216fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80216fe:	2b00      	cmp	r3, #0
 8021700:	dc02      	bgt.n	8021708 <__sflush_r+0x20>
 8021702:	2000      	movs	r0, #0
 8021704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802170a:	2e00      	cmp	r6, #0
 802170c:	d0f9      	beq.n	8021702 <__sflush_r+0x1a>
 802170e:	2300      	movs	r3, #0
 8021710:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021714:	682f      	ldr	r7, [r5, #0]
 8021716:	602b      	str	r3, [r5, #0]
 8021718:	d032      	beq.n	8021780 <__sflush_r+0x98>
 802171a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802171c:	89a3      	ldrh	r3, [r4, #12]
 802171e:	075a      	lsls	r2, r3, #29
 8021720:	d505      	bpl.n	802172e <__sflush_r+0x46>
 8021722:	6863      	ldr	r3, [r4, #4]
 8021724:	1ac0      	subs	r0, r0, r3
 8021726:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021728:	b10b      	cbz	r3, 802172e <__sflush_r+0x46>
 802172a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802172c:	1ac0      	subs	r0, r0, r3
 802172e:	2300      	movs	r3, #0
 8021730:	4602      	mov	r2, r0
 8021732:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021734:	6a21      	ldr	r1, [r4, #32]
 8021736:	4628      	mov	r0, r5
 8021738:	47b0      	blx	r6
 802173a:	1c43      	adds	r3, r0, #1
 802173c:	89a3      	ldrh	r3, [r4, #12]
 802173e:	d106      	bne.n	802174e <__sflush_r+0x66>
 8021740:	6829      	ldr	r1, [r5, #0]
 8021742:	291d      	cmp	r1, #29
 8021744:	d82c      	bhi.n	80217a0 <__sflush_r+0xb8>
 8021746:	4a2a      	ldr	r2, [pc, #168]	; (80217f0 <__sflush_r+0x108>)
 8021748:	40ca      	lsrs	r2, r1
 802174a:	07d6      	lsls	r6, r2, #31
 802174c:	d528      	bpl.n	80217a0 <__sflush_r+0xb8>
 802174e:	2200      	movs	r2, #0
 8021750:	6062      	str	r2, [r4, #4]
 8021752:	04d9      	lsls	r1, r3, #19
 8021754:	6922      	ldr	r2, [r4, #16]
 8021756:	6022      	str	r2, [r4, #0]
 8021758:	d504      	bpl.n	8021764 <__sflush_r+0x7c>
 802175a:	1c42      	adds	r2, r0, #1
 802175c:	d101      	bne.n	8021762 <__sflush_r+0x7a>
 802175e:	682b      	ldr	r3, [r5, #0]
 8021760:	b903      	cbnz	r3, 8021764 <__sflush_r+0x7c>
 8021762:	6560      	str	r0, [r4, #84]	; 0x54
 8021764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021766:	602f      	str	r7, [r5, #0]
 8021768:	2900      	cmp	r1, #0
 802176a:	d0ca      	beq.n	8021702 <__sflush_r+0x1a>
 802176c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021770:	4299      	cmp	r1, r3
 8021772:	d002      	beq.n	802177a <__sflush_r+0x92>
 8021774:	4628      	mov	r0, r5
 8021776:	f000 fd33 	bl	80221e0 <_free_r>
 802177a:	2000      	movs	r0, #0
 802177c:	6360      	str	r0, [r4, #52]	; 0x34
 802177e:	e7c1      	b.n	8021704 <__sflush_r+0x1c>
 8021780:	6a21      	ldr	r1, [r4, #32]
 8021782:	2301      	movs	r3, #1
 8021784:	4628      	mov	r0, r5
 8021786:	47b0      	blx	r6
 8021788:	1c41      	adds	r1, r0, #1
 802178a:	d1c7      	bne.n	802171c <__sflush_r+0x34>
 802178c:	682b      	ldr	r3, [r5, #0]
 802178e:	2b00      	cmp	r3, #0
 8021790:	d0c4      	beq.n	802171c <__sflush_r+0x34>
 8021792:	2b1d      	cmp	r3, #29
 8021794:	d001      	beq.n	802179a <__sflush_r+0xb2>
 8021796:	2b16      	cmp	r3, #22
 8021798:	d101      	bne.n	802179e <__sflush_r+0xb6>
 802179a:	602f      	str	r7, [r5, #0]
 802179c:	e7b1      	b.n	8021702 <__sflush_r+0x1a>
 802179e:	89a3      	ldrh	r3, [r4, #12]
 80217a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80217a4:	81a3      	strh	r3, [r4, #12]
 80217a6:	e7ad      	b.n	8021704 <__sflush_r+0x1c>
 80217a8:	690f      	ldr	r7, [r1, #16]
 80217aa:	2f00      	cmp	r7, #0
 80217ac:	d0a9      	beq.n	8021702 <__sflush_r+0x1a>
 80217ae:	0793      	lsls	r3, r2, #30
 80217b0:	680e      	ldr	r6, [r1, #0]
 80217b2:	bf08      	it	eq
 80217b4:	694b      	ldreq	r3, [r1, #20]
 80217b6:	600f      	str	r7, [r1, #0]
 80217b8:	bf18      	it	ne
 80217ba:	2300      	movne	r3, #0
 80217bc:	eba6 0807 	sub.w	r8, r6, r7
 80217c0:	608b      	str	r3, [r1, #8]
 80217c2:	f1b8 0f00 	cmp.w	r8, #0
 80217c6:	dd9c      	ble.n	8021702 <__sflush_r+0x1a>
 80217c8:	6a21      	ldr	r1, [r4, #32]
 80217ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80217cc:	4643      	mov	r3, r8
 80217ce:	463a      	mov	r2, r7
 80217d0:	4628      	mov	r0, r5
 80217d2:	47b0      	blx	r6
 80217d4:	2800      	cmp	r0, #0
 80217d6:	dc06      	bgt.n	80217e6 <__sflush_r+0xfe>
 80217d8:	89a3      	ldrh	r3, [r4, #12]
 80217da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80217de:	81a3      	strh	r3, [r4, #12]
 80217e0:	f04f 30ff 	mov.w	r0, #4294967295
 80217e4:	e78e      	b.n	8021704 <__sflush_r+0x1c>
 80217e6:	4407      	add	r7, r0
 80217e8:	eba8 0800 	sub.w	r8, r8, r0
 80217ec:	e7e9      	b.n	80217c2 <__sflush_r+0xda>
 80217ee:	bf00      	nop
 80217f0:	20400001 	.word	0x20400001

080217f4 <_fflush_r>:
 80217f4:	b538      	push	{r3, r4, r5, lr}
 80217f6:	690b      	ldr	r3, [r1, #16]
 80217f8:	4605      	mov	r5, r0
 80217fa:	460c      	mov	r4, r1
 80217fc:	b913      	cbnz	r3, 8021804 <_fflush_r+0x10>
 80217fe:	2500      	movs	r5, #0
 8021800:	4628      	mov	r0, r5
 8021802:	bd38      	pop	{r3, r4, r5, pc}
 8021804:	b118      	cbz	r0, 802180e <_fflush_r+0x1a>
 8021806:	6983      	ldr	r3, [r0, #24]
 8021808:	b90b      	cbnz	r3, 802180e <_fflush_r+0x1a>
 802180a:	f000 f899 	bl	8021940 <__sinit>
 802180e:	4b14      	ldr	r3, [pc, #80]	; (8021860 <_fflush_r+0x6c>)
 8021810:	429c      	cmp	r4, r3
 8021812:	d11b      	bne.n	802184c <_fflush_r+0x58>
 8021814:	686c      	ldr	r4, [r5, #4]
 8021816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802181a:	2b00      	cmp	r3, #0
 802181c:	d0ef      	beq.n	80217fe <_fflush_r+0xa>
 802181e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021820:	07d0      	lsls	r0, r2, #31
 8021822:	d404      	bmi.n	802182e <_fflush_r+0x3a>
 8021824:	0599      	lsls	r1, r3, #22
 8021826:	d402      	bmi.n	802182e <_fflush_r+0x3a>
 8021828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802182a:	f000 fc3c 	bl	80220a6 <__retarget_lock_acquire_recursive>
 802182e:	4628      	mov	r0, r5
 8021830:	4621      	mov	r1, r4
 8021832:	f7ff ff59 	bl	80216e8 <__sflush_r>
 8021836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021838:	07da      	lsls	r2, r3, #31
 802183a:	4605      	mov	r5, r0
 802183c:	d4e0      	bmi.n	8021800 <_fflush_r+0xc>
 802183e:	89a3      	ldrh	r3, [r4, #12]
 8021840:	059b      	lsls	r3, r3, #22
 8021842:	d4dd      	bmi.n	8021800 <_fflush_r+0xc>
 8021844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021846:	f000 fc30 	bl	80220aa <__retarget_lock_release_recursive>
 802184a:	e7d9      	b.n	8021800 <_fflush_r+0xc>
 802184c:	4b05      	ldr	r3, [pc, #20]	; (8021864 <_fflush_r+0x70>)
 802184e:	429c      	cmp	r4, r3
 8021850:	d101      	bne.n	8021856 <_fflush_r+0x62>
 8021852:	68ac      	ldr	r4, [r5, #8]
 8021854:	e7df      	b.n	8021816 <_fflush_r+0x22>
 8021856:	4b04      	ldr	r3, [pc, #16]	; (8021868 <_fflush_r+0x74>)
 8021858:	429c      	cmp	r4, r3
 802185a:	bf08      	it	eq
 802185c:	68ec      	ldreq	r4, [r5, #12]
 802185e:	e7da      	b.n	8021816 <_fflush_r+0x22>
 8021860:	0802ba24 	.word	0x0802ba24
 8021864:	0802ba44 	.word	0x0802ba44
 8021868:	0802ba04 	.word	0x0802ba04

0802186c <fflush>:
 802186c:	4601      	mov	r1, r0
 802186e:	b920      	cbnz	r0, 802187a <fflush+0xe>
 8021870:	4b04      	ldr	r3, [pc, #16]	; (8021884 <fflush+0x18>)
 8021872:	4905      	ldr	r1, [pc, #20]	; (8021888 <fflush+0x1c>)
 8021874:	6818      	ldr	r0, [r3, #0]
 8021876:	f000 babb 	b.w	8021df0 <_fwalk_reent>
 802187a:	4b04      	ldr	r3, [pc, #16]	; (802188c <fflush+0x20>)
 802187c:	6818      	ldr	r0, [r3, #0]
 802187e:	f7ff bfb9 	b.w	80217f4 <_fflush_r>
 8021882:	bf00      	nop
 8021884:	0802ba64 	.word	0x0802ba64
 8021888:	080217f5 	.word	0x080217f5
 802188c:	20000108 	.word	0x20000108

08021890 <std>:
 8021890:	2300      	movs	r3, #0
 8021892:	b510      	push	{r4, lr}
 8021894:	4604      	mov	r4, r0
 8021896:	e9c0 3300 	strd	r3, r3, [r0]
 802189a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802189e:	6083      	str	r3, [r0, #8]
 80218a0:	8181      	strh	r1, [r0, #12]
 80218a2:	6643      	str	r3, [r0, #100]	; 0x64
 80218a4:	81c2      	strh	r2, [r0, #14]
 80218a6:	6183      	str	r3, [r0, #24]
 80218a8:	4619      	mov	r1, r3
 80218aa:	2208      	movs	r2, #8
 80218ac:	305c      	adds	r0, #92	; 0x5c
 80218ae:	f000 fc7f 	bl	80221b0 <memset>
 80218b2:	4b05      	ldr	r3, [pc, #20]	; (80218c8 <std+0x38>)
 80218b4:	6263      	str	r3, [r4, #36]	; 0x24
 80218b6:	4b05      	ldr	r3, [pc, #20]	; (80218cc <std+0x3c>)
 80218b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80218ba:	4b05      	ldr	r3, [pc, #20]	; (80218d0 <std+0x40>)
 80218bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80218be:	4b05      	ldr	r3, [pc, #20]	; (80218d4 <std+0x44>)
 80218c0:	6224      	str	r4, [r4, #32]
 80218c2:	6323      	str	r3, [r4, #48]	; 0x30
 80218c4:	bd10      	pop	{r4, pc}
 80218c6:	bf00      	nop
 80218c8:	08022559 	.word	0x08022559
 80218cc:	0802257f 	.word	0x0802257f
 80218d0:	080225b7 	.word	0x080225b7
 80218d4:	080225db 	.word	0x080225db

080218d8 <_cleanup_r>:
 80218d8:	4901      	ldr	r1, [pc, #4]	; (80218e0 <_cleanup_r+0x8>)
 80218da:	f000 ba89 	b.w	8021df0 <_fwalk_reent>
 80218de:	bf00      	nop
 80218e0:	080217f5 	.word	0x080217f5

080218e4 <__sfmoreglue>:
 80218e4:	b570      	push	{r4, r5, r6, lr}
 80218e6:	1e4a      	subs	r2, r1, #1
 80218e8:	2568      	movs	r5, #104	; 0x68
 80218ea:	4355      	muls	r5, r2
 80218ec:	460e      	mov	r6, r1
 80218ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80218f2:	f000 fcc5 	bl	8022280 <_malloc_r>
 80218f6:	4604      	mov	r4, r0
 80218f8:	b140      	cbz	r0, 802190c <__sfmoreglue+0x28>
 80218fa:	2100      	movs	r1, #0
 80218fc:	e9c0 1600 	strd	r1, r6, [r0]
 8021900:	300c      	adds	r0, #12
 8021902:	60a0      	str	r0, [r4, #8]
 8021904:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021908:	f000 fc52 	bl	80221b0 <memset>
 802190c:	4620      	mov	r0, r4
 802190e:	bd70      	pop	{r4, r5, r6, pc}

08021910 <__sfp_lock_acquire>:
 8021910:	4801      	ldr	r0, [pc, #4]	; (8021918 <__sfp_lock_acquire+0x8>)
 8021912:	f000 bbc8 	b.w	80220a6 <__retarget_lock_acquire_recursive>
 8021916:	bf00      	nop
 8021918:	20001078 	.word	0x20001078

0802191c <__sfp_lock_release>:
 802191c:	4801      	ldr	r0, [pc, #4]	; (8021924 <__sfp_lock_release+0x8>)
 802191e:	f000 bbc4 	b.w	80220aa <__retarget_lock_release_recursive>
 8021922:	bf00      	nop
 8021924:	20001078 	.word	0x20001078

08021928 <__sinit_lock_acquire>:
 8021928:	4801      	ldr	r0, [pc, #4]	; (8021930 <__sinit_lock_acquire+0x8>)
 802192a:	f000 bbbc 	b.w	80220a6 <__retarget_lock_acquire_recursive>
 802192e:	bf00      	nop
 8021930:	20001073 	.word	0x20001073

08021934 <__sinit_lock_release>:
 8021934:	4801      	ldr	r0, [pc, #4]	; (802193c <__sinit_lock_release+0x8>)
 8021936:	f000 bbb8 	b.w	80220aa <__retarget_lock_release_recursive>
 802193a:	bf00      	nop
 802193c:	20001073 	.word	0x20001073

08021940 <__sinit>:
 8021940:	b510      	push	{r4, lr}
 8021942:	4604      	mov	r4, r0
 8021944:	f7ff fff0 	bl	8021928 <__sinit_lock_acquire>
 8021948:	69a3      	ldr	r3, [r4, #24]
 802194a:	b11b      	cbz	r3, 8021954 <__sinit+0x14>
 802194c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021950:	f7ff bff0 	b.w	8021934 <__sinit_lock_release>
 8021954:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021958:	6523      	str	r3, [r4, #80]	; 0x50
 802195a:	4b13      	ldr	r3, [pc, #76]	; (80219a8 <__sinit+0x68>)
 802195c:	4a13      	ldr	r2, [pc, #76]	; (80219ac <__sinit+0x6c>)
 802195e:	681b      	ldr	r3, [r3, #0]
 8021960:	62a2      	str	r2, [r4, #40]	; 0x28
 8021962:	42a3      	cmp	r3, r4
 8021964:	bf04      	itt	eq
 8021966:	2301      	moveq	r3, #1
 8021968:	61a3      	streq	r3, [r4, #24]
 802196a:	4620      	mov	r0, r4
 802196c:	f000 f820 	bl	80219b0 <__sfp>
 8021970:	6060      	str	r0, [r4, #4]
 8021972:	4620      	mov	r0, r4
 8021974:	f000 f81c 	bl	80219b0 <__sfp>
 8021978:	60a0      	str	r0, [r4, #8]
 802197a:	4620      	mov	r0, r4
 802197c:	f000 f818 	bl	80219b0 <__sfp>
 8021980:	2200      	movs	r2, #0
 8021982:	60e0      	str	r0, [r4, #12]
 8021984:	2104      	movs	r1, #4
 8021986:	6860      	ldr	r0, [r4, #4]
 8021988:	f7ff ff82 	bl	8021890 <std>
 802198c:	68a0      	ldr	r0, [r4, #8]
 802198e:	2201      	movs	r2, #1
 8021990:	2109      	movs	r1, #9
 8021992:	f7ff ff7d 	bl	8021890 <std>
 8021996:	68e0      	ldr	r0, [r4, #12]
 8021998:	2202      	movs	r2, #2
 802199a:	2112      	movs	r1, #18
 802199c:	f7ff ff78 	bl	8021890 <std>
 80219a0:	2301      	movs	r3, #1
 80219a2:	61a3      	str	r3, [r4, #24]
 80219a4:	e7d2      	b.n	802194c <__sinit+0xc>
 80219a6:	bf00      	nop
 80219a8:	0802ba64 	.word	0x0802ba64
 80219ac:	080218d9 	.word	0x080218d9

080219b0 <__sfp>:
 80219b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80219b2:	4607      	mov	r7, r0
 80219b4:	f7ff ffac 	bl	8021910 <__sfp_lock_acquire>
 80219b8:	4b1e      	ldr	r3, [pc, #120]	; (8021a34 <__sfp+0x84>)
 80219ba:	681e      	ldr	r6, [r3, #0]
 80219bc:	69b3      	ldr	r3, [r6, #24]
 80219be:	b913      	cbnz	r3, 80219c6 <__sfp+0x16>
 80219c0:	4630      	mov	r0, r6
 80219c2:	f7ff ffbd 	bl	8021940 <__sinit>
 80219c6:	3648      	adds	r6, #72	; 0x48
 80219c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80219cc:	3b01      	subs	r3, #1
 80219ce:	d503      	bpl.n	80219d8 <__sfp+0x28>
 80219d0:	6833      	ldr	r3, [r6, #0]
 80219d2:	b30b      	cbz	r3, 8021a18 <__sfp+0x68>
 80219d4:	6836      	ldr	r6, [r6, #0]
 80219d6:	e7f7      	b.n	80219c8 <__sfp+0x18>
 80219d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80219dc:	b9d5      	cbnz	r5, 8021a14 <__sfp+0x64>
 80219de:	4b16      	ldr	r3, [pc, #88]	; (8021a38 <__sfp+0x88>)
 80219e0:	60e3      	str	r3, [r4, #12]
 80219e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80219e6:	6665      	str	r5, [r4, #100]	; 0x64
 80219e8:	f000 fb5a 	bl	80220a0 <__retarget_lock_init_recursive>
 80219ec:	f7ff ff96 	bl	802191c <__sfp_lock_release>
 80219f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80219f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80219f8:	6025      	str	r5, [r4, #0]
 80219fa:	61a5      	str	r5, [r4, #24]
 80219fc:	2208      	movs	r2, #8
 80219fe:	4629      	mov	r1, r5
 8021a00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021a04:	f000 fbd4 	bl	80221b0 <memset>
 8021a08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021a0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021a10:	4620      	mov	r0, r4
 8021a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021a14:	3468      	adds	r4, #104	; 0x68
 8021a16:	e7d9      	b.n	80219cc <__sfp+0x1c>
 8021a18:	2104      	movs	r1, #4
 8021a1a:	4638      	mov	r0, r7
 8021a1c:	f7ff ff62 	bl	80218e4 <__sfmoreglue>
 8021a20:	4604      	mov	r4, r0
 8021a22:	6030      	str	r0, [r6, #0]
 8021a24:	2800      	cmp	r0, #0
 8021a26:	d1d5      	bne.n	80219d4 <__sfp+0x24>
 8021a28:	f7ff ff78 	bl	802191c <__sfp_lock_release>
 8021a2c:	230c      	movs	r3, #12
 8021a2e:	603b      	str	r3, [r7, #0]
 8021a30:	e7ee      	b.n	8021a10 <__sfp+0x60>
 8021a32:	bf00      	nop
 8021a34:	0802ba64 	.word	0x0802ba64
 8021a38:	ffff0001 	.word	0xffff0001

08021a3c <_fopen_r>:
 8021a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021a3e:	460f      	mov	r7, r1
 8021a40:	4611      	mov	r1, r2
 8021a42:	aa01      	add	r2, sp, #4
 8021a44:	4605      	mov	r5, r0
 8021a46:	f002 f837 	bl	8023ab8 <__sflags>
 8021a4a:	4606      	mov	r6, r0
 8021a4c:	b918      	cbnz	r0, 8021a56 <_fopen_r+0x1a>
 8021a4e:	2400      	movs	r4, #0
 8021a50:	4620      	mov	r0, r4
 8021a52:	b003      	add	sp, #12
 8021a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021a56:	4628      	mov	r0, r5
 8021a58:	f7ff ffaa 	bl	80219b0 <__sfp>
 8021a5c:	4604      	mov	r4, r0
 8021a5e:	2800      	cmp	r0, #0
 8021a60:	d0f5      	beq.n	8021a4e <_fopen_r+0x12>
 8021a62:	4639      	mov	r1, r7
 8021a64:	9a01      	ldr	r2, [sp, #4]
 8021a66:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8021a6a:	4628      	mov	r0, r5
 8021a6c:	f000 fc62 	bl	8022334 <_open_r>
 8021a70:	1e07      	subs	r7, r0, #0
 8021a72:	da09      	bge.n	8021a88 <_fopen_r+0x4c>
 8021a74:	2500      	movs	r5, #0
 8021a76:	f7ff ff4b 	bl	8021910 <__sfp_lock_acquire>
 8021a7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021a7c:	81a5      	strh	r5, [r4, #12]
 8021a7e:	f000 fb10 	bl	80220a2 <__retarget_lock_close_recursive>
 8021a82:	f7ff ff4b 	bl	802191c <__sfp_lock_release>
 8021a86:	e7e2      	b.n	8021a4e <_fopen_r+0x12>
 8021a88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021a8a:	07db      	lsls	r3, r3, #31
 8021a8c:	d405      	bmi.n	8021a9a <_fopen_r+0x5e>
 8021a8e:	89a3      	ldrh	r3, [r4, #12]
 8021a90:	0598      	lsls	r0, r3, #22
 8021a92:	d402      	bmi.n	8021a9a <_fopen_r+0x5e>
 8021a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021a96:	f000 fb06 	bl	80220a6 <__retarget_lock_acquire_recursive>
 8021a9a:	4b0e      	ldr	r3, [pc, #56]	; (8021ad4 <_fopen_r+0x98>)
 8021a9c:	6263      	str	r3, [r4, #36]	; 0x24
 8021a9e:	4b0e      	ldr	r3, [pc, #56]	; (8021ad8 <_fopen_r+0x9c>)
 8021aa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8021aa2:	4b0e      	ldr	r3, [pc, #56]	; (8021adc <_fopen_r+0xa0>)
 8021aa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021aa6:	05f1      	lsls	r1, r6, #23
 8021aa8:	4b0d      	ldr	r3, [pc, #52]	; (8021ae0 <_fopen_r+0xa4>)
 8021aaa:	81e7      	strh	r7, [r4, #14]
 8021aac:	81a6      	strh	r6, [r4, #12]
 8021aae:	6224      	str	r4, [r4, #32]
 8021ab0:	6323      	str	r3, [r4, #48]	; 0x30
 8021ab2:	d505      	bpl.n	8021ac0 <_fopen_r+0x84>
 8021ab4:	2302      	movs	r3, #2
 8021ab6:	2200      	movs	r2, #0
 8021ab8:	4621      	mov	r1, r4
 8021aba:	4628      	mov	r0, r5
 8021abc:	f000 f888 	bl	8021bd0 <_fseek_r>
 8021ac0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021ac2:	07da      	lsls	r2, r3, #31
 8021ac4:	d4c4      	bmi.n	8021a50 <_fopen_r+0x14>
 8021ac6:	89a3      	ldrh	r3, [r4, #12]
 8021ac8:	059b      	lsls	r3, r3, #22
 8021aca:	d4c1      	bmi.n	8021a50 <_fopen_r+0x14>
 8021acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021ace:	f000 faec 	bl	80220aa <__retarget_lock_release_recursive>
 8021ad2:	e7bd      	b.n	8021a50 <_fopen_r+0x14>
 8021ad4:	08022559 	.word	0x08022559
 8021ad8:	0802257f 	.word	0x0802257f
 8021adc:	080225b7 	.word	0x080225b7
 8021ae0:	080225db 	.word	0x080225db

08021ae4 <fopen>:
 8021ae4:	4b02      	ldr	r3, [pc, #8]	; (8021af0 <fopen+0xc>)
 8021ae6:	460a      	mov	r2, r1
 8021ae8:	4601      	mov	r1, r0
 8021aea:	6818      	ldr	r0, [r3, #0]
 8021aec:	f7ff bfa6 	b.w	8021a3c <_fopen_r>
 8021af0:	20000108 	.word	0x20000108

08021af4 <_fputs_r>:
 8021af4:	b570      	push	{r4, r5, r6, lr}
 8021af6:	460e      	mov	r6, r1
 8021af8:	4614      	mov	r4, r2
 8021afa:	4605      	mov	r5, r0
 8021afc:	b118      	cbz	r0, 8021b06 <_fputs_r+0x12>
 8021afe:	6983      	ldr	r3, [r0, #24]
 8021b00:	b90b      	cbnz	r3, 8021b06 <_fputs_r+0x12>
 8021b02:	f7ff ff1d 	bl	8021940 <__sinit>
 8021b06:	4b2b      	ldr	r3, [pc, #172]	; (8021bb4 <_fputs_r+0xc0>)
 8021b08:	429c      	cmp	r4, r3
 8021b0a:	d11e      	bne.n	8021b4a <_fputs_r+0x56>
 8021b0c:	686c      	ldr	r4, [r5, #4]
 8021b0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021b10:	07da      	lsls	r2, r3, #31
 8021b12:	d405      	bmi.n	8021b20 <_fputs_r+0x2c>
 8021b14:	89a3      	ldrh	r3, [r4, #12]
 8021b16:	059b      	lsls	r3, r3, #22
 8021b18:	d402      	bmi.n	8021b20 <_fputs_r+0x2c>
 8021b1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021b1c:	f000 fac3 	bl	80220a6 <__retarget_lock_acquire_recursive>
 8021b20:	89a3      	ldrh	r3, [r4, #12]
 8021b22:	0718      	lsls	r0, r3, #28
 8021b24:	d51b      	bpl.n	8021b5e <_fputs_r+0x6a>
 8021b26:	6923      	ldr	r3, [r4, #16]
 8021b28:	b1cb      	cbz	r3, 8021b5e <_fputs_r+0x6a>
 8021b2a:	3e01      	subs	r6, #1
 8021b2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8021b30:	bb39      	cbnz	r1, 8021b82 <_fputs_r+0x8e>
 8021b32:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8021b34:	f015 0501 	ands.w	r5, r5, #1
 8021b38:	d139      	bne.n	8021bae <_fputs_r+0xba>
 8021b3a:	89a3      	ldrh	r3, [r4, #12]
 8021b3c:	0599      	lsls	r1, r3, #22
 8021b3e:	d402      	bmi.n	8021b46 <_fputs_r+0x52>
 8021b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021b42:	f000 fab2 	bl	80220aa <__retarget_lock_release_recursive>
 8021b46:	4628      	mov	r0, r5
 8021b48:	bd70      	pop	{r4, r5, r6, pc}
 8021b4a:	4b1b      	ldr	r3, [pc, #108]	; (8021bb8 <_fputs_r+0xc4>)
 8021b4c:	429c      	cmp	r4, r3
 8021b4e:	d101      	bne.n	8021b54 <_fputs_r+0x60>
 8021b50:	68ac      	ldr	r4, [r5, #8]
 8021b52:	e7dc      	b.n	8021b0e <_fputs_r+0x1a>
 8021b54:	4b19      	ldr	r3, [pc, #100]	; (8021bbc <_fputs_r+0xc8>)
 8021b56:	429c      	cmp	r4, r3
 8021b58:	bf08      	it	eq
 8021b5a:	68ec      	ldreq	r4, [r5, #12]
 8021b5c:	e7d7      	b.n	8021b0e <_fputs_r+0x1a>
 8021b5e:	4621      	mov	r1, r4
 8021b60:	4628      	mov	r0, r5
 8021b62:	f001 fea7 	bl	80238b4 <__swsetup_r>
 8021b66:	2800      	cmp	r0, #0
 8021b68:	d0df      	beq.n	8021b2a <_fputs_r+0x36>
 8021b6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021b6c:	07da      	lsls	r2, r3, #31
 8021b6e:	d405      	bmi.n	8021b7c <_fputs_r+0x88>
 8021b70:	89a3      	ldrh	r3, [r4, #12]
 8021b72:	059b      	lsls	r3, r3, #22
 8021b74:	d402      	bmi.n	8021b7c <_fputs_r+0x88>
 8021b76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021b78:	f000 fa97 	bl	80220aa <__retarget_lock_release_recursive>
 8021b7c:	f04f 35ff 	mov.w	r5, #4294967295
 8021b80:	e7e1      	b.n	8021b46 <_fputs_r+0x52>
 8021b82:	68a3      	ldr	r3, [r4, #8]
 8021b84:	3b01      	subs	r3, #1
 8021b86:	2b00      	cmp	r3, #0
 8021b88:	60a3      	str	r3, [r4, #8]
 8021b8a:	da04      	bge.n	8021b96 <_fputs_r+0xa2>
 8021b8c:	69a2      	ldr	r2, [r4, #24]
 8021b8e:	4293      	cmp	r3, r2
 8021b90:	db06      	blt.n	8021ba0 <_fputs_r+0xac>
 8021b92:	290a      	cmp	r1, #10
 8021b94:	d004      	beq.n	8021ba0 <_fputs_r+0xac>
 8021b96:	6823      	ldr	r3, [r4, #0]
 8021b98:	1c5a      	adds	r2, r3, #1
 8021b9a:	6022      	str	r2, [r4, #0]
 8021b9c:	7019      	strb	r1, [r3, #0]
 8021b9e:	e7c5      	b.n	8021b2c <_fputs_r+0x38>
 8021ba0:	4622      	mov	r2, r4
 8021ba2:	4628      	mov	r0, r5
 8021ba4:	f001 fe22 	bl	80237ec <__swbuf_r>
 8021ba8:	3001      	adds	r0, #1
 8021baa:	d1bf      	bne.n	8021b2c <_fputs_r+0x38>
 8021bac:	e7dd      	b.n	8021b6a <_fputs_r+0x76>
 8021bae:	460d      	mov	r5, r1
 8021bb0:	e7c9      	b.n	8021b46 <_fputs_r+0x52>
 8021bb2:	bf00      	nop
 8021bb4:	0802ba24 	.word	0x0802ba24
 8021bb8:	0802ba44 	.word	0x0802ba44
 8021bbc:	0802ba04 	.word	0x0802ba04

08021bc0 <fputs>:
 8021bc0:	4b02      	ldr	r3, [pc, #8]	; (8021bcc <fputs+0xc>)
 8021bc2:	460a      	mov	r2, r1
 8021bc4:	4601      	mov	r1, r0
 8021bc6:	6818      	ldr	r0, [r3, #0]
 8021bc8:	f7ff bf94 	b.w	8021af4 <_fputs_r>
 8021bcc:	20000108 	.word	0x20000108

08021bd0 <_fseek_r>:
 8021bd0:	f000 b800 	b.w	8021bd4 <_fseeko_r>

08021bd4 <_fseeko_r>:
 8021bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021bd8:	460c      	mov	r4, r1
 8021bda:	4617      	mov	r7, r2
 8021bdc:	461e      	mov	r6, r3
 8021bde:	4605      	mov	r5, r0
 8021be0:	b118      	cbz	r0, 8021bea <_fseeko_r+0x16>
 8021be2:	6983      	ldr	r3, [r0, #24]
 8021be4:	b90b      	cbnz	r3, 8021bea <_fseeko_r+0x16>
 8021be6:	f7ff feab 	bl	8021940 <__sinit>
 8021bea:	4b44      	ldr	r3, [pc, #272]	; (8021cfc <_fseeko_r+0x128>)
 8021bec:	429c      	cmp	r4, r3
 8021bee:	d122      	bne.n	8021c36 <_fseeko_r+0x62>
 8021bf0:	686c      	ldr	r4, [r5, #4]
 8021bf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021bf4:	07d9      	lsls	r1, r3, #31
 8021bf6:	d405      	bmi.n	8021c04 <_fseeko_r+0x30>
 8021bf8:	89a3      	ldrh	r3, [r4, #12]
 8021bfa:	059a      	lsls	r2, r3, #22
 8021bfc:	d402      	bmi.n	8021c04 <_fseeko_r+0x30>
 8021bfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021c00:	f000 fa51 	bl	80220a6 <__retarget_lock_acquire_recursive>
 8021c04:	89a3      	ldrh	r3, [r4, #12]
 8021c06:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8021c0a:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8021c0e:	d103      	bne.n	8021c18 <_fseeko_r+0x44>
 8021c10:	4621      	mov	r1, r4
 8021c12:	4628      	mov	r0, r5
 8021c14:	f7ff fdee 	bl	80217f4 <_fflush_r>
 8021c18:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8021c1c:	f1b8 0f00 	cmp.w	r8, #0
 8021c20:	d113      	bne.n	8021c4a <_fseeko_r+0x76>
 8021c22:	231d      	movs	r3, #29
 8021c24:	602b      	str	r3, [r5, #0]
 8021c26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021c28:	07d9      	lsls	r1, r3, #31
 8021c2a:	d55d      	bpl.n	8021ce8 <_fseeko_r+0x114>
 8021c2c:	f04f 36ff 	mov.w	r6, #4294967295
 8021c30:	4630      	mov	r0, r6
 8021c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021c36:	4b32      	ldr	r3, [pc, #200]	; (8021d00 <_fseeko_r+0x12c>)
 8021c38:	429c      	cmp	r4, r3
 8021c3a:	d101      	bne.n	8021c40 <_fseeko_r+0x6c>
 8021c3c:	68ac      	ldr	r4, [r5, #8]
 8021c3e:	e7d8      	b.n	8021bf2 <_fseeko_r+0x1e>
 8021c40:	4b30      	ldr	r3, [pc, #192]	; (8021d04 <_fseeko_r+0x130>)
 8021c42:	429c      	cmp	r4, r3
 8021c44:	bf08      	it	eq
 8021c46:	68ec      	ldreq	r4, [r5, #12]
 8021c48:	e7d3      	b.n	8021bf2 <_fseeko_r+0x1e>
 8021c4a:	2e01      	cmp	r6, #1
 8021c4c:	d036      	beq.n	8021cbc <_fseeko_r+0xe8>
 8021c4e:	f036 0302 	bics.w	r3, r6, #2
 8021c52:	d147      	bne.n	8021ce4 <_fseeko_r+0x110>
 8021c54:	6923      	ldr	r3, [r4, #16]
 8021c56:	b91b      	cbnz	r3, 8021c60 <_fseeko_r+0x8c>
 8021c58:	4621      	mov	r1, r4
 8021c5a:	4628      	mov	r0, r5
 8021c5c:	f000 fa4a 	bl	80220f4 <__smakebuf_r>
 8021c60:	4621      	mov	r1, r4
 8021c62:	4628      	mov	r0, r5
 8021c64:	f7ff fdc6 	bl	80217f4 <_fflush_r>
 8021c68:	2800      	cmp	r0, #0
 8021c6a:	d1dc      	bne.n	8021c26 <_fseeko_r+0x52>
 8021c6c:	6a21      	ldr	r1, [r4, #32]
 8021c6e:	4633      	mov	r3, r6
 8021c70:	463a      	mov	r2, r7
 8021c72:	4628      	mov	r0, r5
 8021c74:	47c0      	blx	r8
 8021c76:	3001      	adds	r0, #1
 8021c78:	d0d5      	beq.n	8021c26 <_fseeko_r+0x52>
 8021c7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021c7c:	b141      	cbz	r1, 8021c90 <_fseeko_r+0xbc>
 8021c7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021c82:	4299      	cmp	r1, r3
 8021c84:	d002      	beq.n	8021c8c <_fseeko_r+0xb8>
 8021c86:	4628      	mov	r0, r5
 8021c88:	f000 faaa 	bl	80221e0 <_free_r>
 8021c8c:	2300      	movs	r3, #0
 8021c8e:	6363      	str	r3, [r4, #52]	; 0x34
 8021c90:	6923      	ldr	r3, [r4, #16]
 8021c92:	6023      	str	r3, [r4, #0]
 8021c94:	89a3      	ldrh	r3, [r4, #12]
 8021c96:	2500      	movs	r5, #0
 8021c98:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8021c9c:	6065      	str	r5, [r4, #4]
 8021c9e:	81a3      	strh	r3, [r4, #12]
 8021ca0:	2208      	movs	r2, #8
 8021ca2:	4629      	mov	r1, r5
 8021ca4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021ca8:	f000 fa82 	bl	80221b0 <memset>
 8021cac:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8021cae:	f016 0601 	ands.w	r6, r6, #1
 8021cb2:	d120      	bne.n	8021cf6 <_fseeko_r+0x122>
 8021cb4:	89a3      	ldrh	r3, [r4, #12]
 8021cb6:	059b      	lsls	r3, r3, #22
 8021cb8:	d4ba      	bmi.n	8021c30 <_fseeko_r+0x5c>
 8021cba:	e00c      	b.n	8021cd6 <_fseeko_r+0x102>
 8021cbc:	4621      	mov	r1, r4
 8021cbe:	4628      	mov	r0, r5
 8021cc0:	f000 f822 	bl	8021d08 <_ftello_r>
 8021cc4:	1c43      	adds	r3, r0, #1
 8021cc6:	4606      	mov	r6, r0
 8021cc8:	d109      	bne.n	8021cde <_fseeko_r+0x10a>
 8021cca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021ccc:	07dd      	lsls	r5, r3, #31
 8021cce:	d4ad      	bmi.n	8021c2c <_fseeko_r+0x58>
 8021cd0:	89a3      	ldrh	r3, [r4, #12]
 8021cd2:	0598      	lsls	r0, r3, #22
 8021cd4:	d4aa      	bmi.n	8021c2c <_fseeko_r+0x58>
 8021cd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021cd8:	f000 f9e7 	bl	80220aa <__retarget_lock_release_recursive>
 8021cdc:	e7a8      	b.n	8021c30 <_fseeko_r+0x5c>
 8021cde:	4407      	add	r7, r0
 8021ce0:	2600      	movs	r6, #0
 8021ce2:	e7b7      	b.n	8021c54 <_fseeko_r+0x80>
 8021ce4:	2316      	movs	r3, #22
 8021ce6:	e79d      	b.n	8021c24 <_fseeko_r+0x50>
 8021ce8:	89a3      	ldrh	r3, [r4, #12]
 8021cea:	059a      	lsls	r2, r3, #22
 8021cec:	d49e      	bmi.n	8021c2c <_fseeko_r+0x58>
 8021cee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021cf0:	f000 f9db 	bl	80220aa <__retarget_lock_release_recursive>
 8021cf4:	e79a      	b.n	8021c2c <_fseeko_r+0x58>
 8021cf6:	462e      	mov	r6, r5
 8021cf8:	e79a      	b.n	8021c30 <_fseeko_r+0x5c>
 8021cfa:	bf00      	nop
 8021cfc:	0802ba24 	.word	0x0802ba24
 8021d00:	0802ba44 	.word	0x0802ba44
 8021d04:	0802ba04 	.word	0x0802ba04

08021d08 <_ftello_r>:
 8021d08:	b570      	push	{r4, r5, r6, lr}
 8021d0a:	460c      	mov	r4, r1
 8021d0c:	4605      	mov	r5, r0
 8021d0e:	b118      	cbz	r0, 8021d18 <_ftello_r+0x10>
 8021d10:	6983      	ldr	r3, [r0, #24]
 8021d12:	b90b      	cbnz	r3, 8021d18 <_ftello_r+0x10>
 8021d14:	f7ff fe14 	bl	8021940 <__sinit>
 8021d18:	4b32      	ldr	r3, [pc, #200]	; (8021de4 <_ftello_r+0xdc>)
 8021d1a:	429c      	cmp	r4, r3
 8021d1c:	d114      	bne.n	8021d48 <_ftello_r+0x40>
 8021d1e:	686c      	ldr	r4, [r5, #4]
 8021d20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021d22:	07da      	lsls	r2, r3, #31
 8021d24:	d405      	bmi.n	8021d32 <_ftello_r+0x2a>
 8021d26:	89a3      	ldrh	r3, [r4, #12]
 8021d28:	059b      	lsls	r3, r3, #22
 8021d2a:	d402      	bmi.n	8021d32 <_ftello_r+0x2a>
 8021d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021d2e:	f000 f9ba 	bl	80220a6 <__retarget_lock_acquire_recursive>
 8021d32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021d34:	b9ce      	cbnz	r6, 8021d6a <_ftello_r+0x62>
 8021d36:	231d      	movs	r3, #29
 8021d38:	602b      	str	r3, [r5, #0]
 8021d3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021d3c:	07de      	lsls	r6, r3, #31
 8021d3e:	d50d      	bpl.n	8021d5c <_ftello_r+0x54>
 8021d40:	f04f 35ff 	mov.w	r5, #4294967295
 8021d44:	4628      	mov	r0, r5
 8021d46:	bd70      	pop	{r4, r5, r6, pc}
 8021d48:	4b27      	ldr	r3, [pc, #156]	; (8021de8 <_ftello_r+0xe0>)
 8021d4a:	429c      	cmp	r4, r3
 8021d4c:	d101      	bne.n	8021d52 <_ftello_r+0x4a>
 8021d4e:	68ac      	ldr	r4, [r5, #8]
 8021d50:	e7e6      	b.n	8021d20 <_ftello_r+0x18>
 8021d52:	4b26      	ldr	r3, [pc, #152]	; (8021dec <_ftello_r+0xe4>)
 8021d54:	429c      	cmp	r4, r3
 8021d56:	bf08      	it	eq
 8021d58:	68ec      	ldreq	r4, [r5, #12]
 8021d5a:	e7e1      	b.n	8021d20 <_ftello_r+0x18>
 8021d5c:	89a3      	ldrh	r3, [r4, #12]
 8021d5e:	059d      	lsls	r5, r3, #22
 8021d60:	d4ee      	bmi.n	8021d40 <_ftello_r+0x38>
 8021d62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021d64:	f000 f9a1 	bl	80220aa <__retarget_lock_release_recursive>
 8021d68:	e7ea      	b.n	8021d40 <_ftello_r+0x38>
 8021d6a:	89a2      	ldrh	r2, [r4, #12]
 8021d6c:	f002 030c 	and.w	r3, r2, #12
 8021d70:	2b08      	cmp	r3, #8
 8021d72:	d119      	bne.n	8021da8 <_ftello_r+0xa0>
 8021d74:	6823      	ldr	r3, [r4, #0]
 8021d76:	b1bb      	cbz	r3, 8021da8 <_ftello_r+0xa0>
 8021d78:	6921      	ldr	r1, [r4, #16]
 8021d7a:	1a5b      	subs	r3, r3, r1
 8021d7c:	2b00      	cmp	r3, #0
 8021d7e:	dd13      	ble.n	8021da8 <_ftello_r+0xa0>
 8021d80:	05d0      	lsls	r0, r2, #23
 8021d82:	d511      	bpl.n	8021da8 <_ftello_r+0xa0>
 8021d84:	2302      	movs	r3, #2
 8021d86:	2200      	movs	r2, #0
 8021d88:	6a21      	ldr	r1, [r4, #32]
 8021d8a:	4628      	mov	r0, r5
 8021d8c:	47b0      	blx	r6
 8021d8e:	1c41      	adds	r1, r0, #1
 8021d90:	4605      	mov	r5, r0
 8021d92:	d10d      	bne.n	8021db0 <_ftello_r+0xa8>
 8021d94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021d96:	07da      	lsls	r2, r3, #31
 8021d98:	d4d2      	bmi.n	8021d40 <_ftello_r+0x38>
 8021d9a:	89a3      	ldrh	r3, [r4, #12]
 8021d9c:	059b      	lsls	r3, r3, #22
 8021d9e:	d4cf      	bmi.n	8021d40 <_ftello_r+0x38>
 8021da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021da2:	f000 f982 	bl	80220aa <__retarget_lock_release_recursive>
 8021da6:	e7cd      	b.n	8021d44 <_ftello_r+0x3c>
 8021da8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021dac:	d00f      	beq.n	8021dce <_ftello_r+0xc6>
 8021dae:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8021db0:	89a2      	ldrh	r2, [r4, #12]
 8021db2:	0756      	lsls	r6, r2, #29
 8021db4:	d50d      	bpl.n	8021dd2 <_ftello_r+0xca>
 8021db6:	6863      	ldr	r3, [r4, #4]
 8021db8:	1aed      	subs	r5, r5, r3
 8021dba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021dbc:	b10b      	cbz	r3, 8021dc2 <_ftello_r+0xba>
 8021dbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021dc0:	1aed      	subs	r5, r5, r3
 8021dc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021dc4:	07d9      	lsls	r1, r3, #31
 8021dc6:	d4bd      	bmi.n	8021d44 <_ftello_r+0x3c>
 8021dc8:	0593      	lsls	r3, r2, #22
 8021dca:	d4bb      	bmi.n	8021d44 <_ftello_r+0x3c>
 8021dcc:	e7e8      	b.n	8021da0 <_ftello_r+0x98>
 8021dce:	2301      	movs	r3, #1
 8021dd0:	e7da      	b.n	8021d88 <_ftello_r+0x80>
 8021dd2:	0710      	lsls	r0, r2, #28
 8021dd4:	d5f5      	bpl.n	8021dc2 <_ftello_r+0xba>
 8021dd6:	6823      	ldr	r3, [r4, #0]
 8021dd8:	2b00      	cmp	r3, #0
 8021dda:	d0f2      	beq.n	8021dc2 <_ftello_r+0xba>
 8021ddc:	6921      	ldr	r1, [r4, #16]
 8021dde:	1a5b      	subs	r3, r3, r1
 8021de0:	441d      	add	r5, r3
 8021de2:	e7ee      	b.n	8021dc2 <_ftello_r+0xba>
 8021de4:	0802ba24 	.word	0x0802ba24
 8021de8:	0802ba44 	.word	0x0802ba44
 8021dec:	0802ba04 	.word	0x0802ba04

08021df0 <_fwalk_reent>:
 8021df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021df4:	4606      	mov	r6, r0
 8021df6:	4688      	mov	r8, r1
 8021df8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021dfc:	2700      	movs	r7, #0
 8021dfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021e02:	f1b9 0901 	subs.w	r9, r9, #1
 8021e06:	d505      	bpl.n	8021e14 <_fwalk_reent+0x24>
 8021e08:	6824      	ldr	r4, [r4, #0]
 8021e0a:	2c00      	cmp	r4, #0
 8021e0c:	d1f7      	bne.n	8021dfe <_fwalk_reent+0xe>
 8021e0e:	4638      	mov	r0, r7
 8021e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021e14:	89ab      	ldrh	r3, [r5, #12]
 8021e16:	2b01      	cmp	r3, #1
 8021e18:	d907      	bls.n	8021e2a <_fwalk_reent+0x3a>
 8021e1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021e1e:	3301      	adds	r3, #1
 8021e20:	d003      	beq.n	8021e2a <_fwalk_reent+0x3a>
 8021e22:	4629      	mov	r1, r5
 8021e24:	4630      	mov	r0, r6
 8021e26:	47c0      	blx	r8
 8021e28:	4307      	orrs	r7, r0
 8021e2a:	3568      	adds	r5, #104	; 0x68
 8021e2c:	e7e9      	b.n	8021e02 <_fwalk_reent+0x12>
	...

08021e30 <__libc_init_array>:
 8021e30:	b570      	push	{r4, r5, r6, lr}
 8021e32:	4d0d      	ldr	r5, [pc, #52]	; (8021e68 <__libc_init_array+0x38>)
 8021e34:	4c0d      	ldr	r4, [pc, #52]	; (8021e6c <__libc_init_array+0x3c>)
 8021e36:	1b64      	subs	r4, r4, r5
 8021e38:	10a4      	asrs	r4, r4, #2
 8021e3a:	2600      	movs	r6, #0
 8021e3c:	42a6      	cmp	r6, r4
 8021e3e:	d109      	bne.n	8021e54 <__libc_init_array+0x24>
 8021e40:	4d0b      	ldr	r5, [pc, #44]	; (8021e70 <__libc_init_array+0x40>)
 8021e42:	4c0c      	ldr	r4, [pc, #48]	; (8021e74 <__libc_init_array+0x44>)
 8021e44:	f003 f8d6 	bl	8024ff4 <_init>
 8021e48:	1b64      	subs	r4, r4, r5
 8021e4a:	10a4      	asrs	r4, r4, #2
 8021e4c:	2600      	movs	r6, #0
 8021e4e:	42a6      	cmp	r6, r4
 8021e50:	d105      	bne.n	8021e5e <__libc_init_array+0x2e>
 8021e52:	bd70      	pop	{r4, r5, r6, pc}
 8021e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8021e58:	4798      	blx	r3
 8021e5a:	3601      	adds	r6, #1
 8021e5c:	e7ee      	b.n	8021e3c <__libc_init_array+0xc>
 8021e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8021e62:	4798      	blx	r3
 8021e64:	3601      	adds	r6, #1
 8021e66:	e7f2      	b.n	8021e4e <__libc_init_array+0x1e>
 8021e68:	0802bffc 	.word	0x0802bffc
 8021e6c:	0802bffc 	.word	0x0802bffc
 8021e70:	0802bffc 	.word	0x0802bffc
 8021e74:	0802c010 	.word	0x0802c010

08021e78 <localtime>:
 8021e78:	b538      	push	{r3, r4, r5, lr}
 8021e7a:	4b0b      	ldr	r3, [pc, #44]	; (8021ea8 <localtime+0x30>)
 8021e7c:	681d      	ldr	r5, [r3, #0]
 8021e7e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8021e80:	4604      	mov	r4, r0
 8021e82:	b953      	cbnz	r3, 8021e9a <localtime+0x22>
 8021e84:	2024      	movs	r0, #36	; 0x24
 8021e86:	f000 f975 	bl	8022174 <malloc>
 8021e8a:	4602      	mov	r2, r0
 8021e8c:	63e8      	str	r0, [r5, #60]	; 0x3c
 8021e8e:	b920      	cbnz	r0, 8021e9a <localtime+0x22>
 8021e90:	4b06      	ldr	r3, [pc, #24]	; (8021eac <localtime+0x34>)
 8021e92:	4807      	ldr	r0, [pc, #28]	; (8021eb0 <localtime+0x38>)
 8021e94:	2132      	movs	r1, #50	; 0x32
 8021e96:	f001 fde1 	bl	8023a5c <__assert_func>
 8021e9a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8021e9c:	4620      	mov	r0, r4
 8021e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021ea2:	f000 b807 	b.w	8021eb4 <localtime_r>
 8021ea6:	bf00      	nop
 8021ea8:	20000108 	.word	0x20000108
 8021eac:	0802ba68 	.word	0x0802ba68
 8021eb0:	0802ba7f 	.word	0x0802ba7f

08021eb4 <localtime_r>:
 8021eb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8021eb8:	4607      	mov	r7, r0
 8021eba:	9101      	str	r1, [sp, #4]
 8021ebc:	f001 fe98 	bl	8023bf0 <__gettzinfo>
 8021ec0:	9901      	ldr	r1, [sp, #4]
 8021ec2:	4680      	mov	r8, r0
 8021ec4:	4638      	mov	r0, r7
 8021ec6:	f001 fe97 	bl	8023bf8 <gmtime_r>
 8021eca:	6943      	ldr	r3, [r0, #20]
 8021ecc:	079a      	lsls	r2, r3, #30
 8021ece:	4604      	mov	r4, r0
 8021ed0:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8021ed4:	d105      	bne.n	8021ee2 <localtime_r+0x2e>
 8021ed6:	2264      	movs	r2, #100	; 0x64
 8021ed8:	fb96 f3f2 	sdiv	r3, r6, r2
 8021edc:	fb02 6313 	mls	r3, r2, r3, r6
 8021ee0:	bb7b      	cbnz	r3, 8021f42 <localtime_r+0x8e>
 8021ee2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8021ee6:	fb96 f5f3 	sdiv	r5, r6, r3
 8021eea:	fb03 6515 	mls	r5, r3, r5, r6
 8021eee:	fab5 f585 	clz	r5, r5
 8021ef2:	096d      	lsrs	r5, r5, #5
 8021ef4:	4b68      	ldr	r3, [pc, #416]	; (8022098 <localtime_r+0x1e4>)
 8021ef6:	2230      	movs	r2, #48	; 0x30
 8021ef8:	fb02 3505 	mla	r5, r2, r5, r3
 8021efc:	f001 faae 	bl	802345c <__tz_lock>
 8021f00:	f001 fab8 	bl	8023474 <_tzset_unlocked>
 8021f04:	4b65      	ldr	r3, [pc, #404]	; (802209c <localtime_r+0x1e8>)
 8021f06:	681b      	ldr	r3, [r3, #0]
 8021f08:	b353      	cbz	r3, 8021f60 <localtime_r+0xac>
 8021f0a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021f0e:	42b3      	cmp	r3, r6
 8021f10:	d119      	bne.n	8021f46 <localtime_r+0x92>
 8021f12:	f8d8 1000 	ldr.w	r1, [r8]
 8021f16:	e9d7 6700 	ldrd	r6, r7, [r7]
 8021f1a:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8021f1e:	b9d1      	cbnz	r1, 8021f56 <localtime_r+0xa2>
 8021f20:	4296      	cmp	r6, r2
 8021f22:	eb77 0303 	sbcs.w	r3, r7, r3
 8021f26:	da23      	bge.n	8021f70 <localtime_r+0xbc>
 8021f28:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8021f2c:	4296      	cmp	r6, r2
 8021f2e:	eb77 0303 	sbcs.w	r3, r7, r3
 8021f32:	bfb4      	ite	lt
 8021f34:	2301      	movlt	r3, #1
 8021f36:	2300      	movge	r3, #0
 8021f38:	6223      	str	r3, [r4, #32]
 8021f3a:	db1b      	blt.n	8021f74 <localtime_r+0xc0>
 8021f3c:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8021f40:	e01a      	b.n	8021f78 <localtime_r+0xc4>
 8021f42:	2501      	movs	r5, #1
 8021f44:	e7d6      	b.n	8021ef4 <localtime_r+0x40>
 8021f46:	4630      	mov	r0, r6
 8021f48:	f001 f9e0 	bl	802330c <__tzcalc_limits>
 8021f4c:	2800      	cmp	r0, #0
 8021f4e:	d1e0      	bne.n	8021f12 <localtime_r+0x5e>
 8021f50:	f04f 33ff 	mov.w	r3, #4294967295
 8021f54:	e004      	b.n	8021f60 <localtime_r+0xac>
 8021f56:	4296      	cmp	r6, r2
 8021f58:	eb77 0303 	sbcs.w	r3, r7, r3
 8021f5c:	da02      	bge.n	8021f64 <localtime_r+0xb0>
 8021f5e:	2300      	movs	r3, #0
 8021f60:	6223      	str	r3, [r4, #32]
 8021f62:	e7eb      	b.n	8021f3c <localtime_r+0x88>
 8021f64:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8021f68:	4296      	cmp	r6, r2
 8021f6a:	eb77 0303 	sbcs.w	r3, r7, r3
 8021f6e:	daf6      	bge.n	8021f5e <localtime_r+0xaa>
 8021f70:	2301      	movs	r3, #1
 8021f72:	6223      	str	r3, [r4, #32]
 8021f74:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8021f78:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8021f7c:	203c      	movs	r0, #60	; 0x3c
 8021f7e:	fb91 f6f3 	sdiv	r6, r1, r3
 8021f82:	fb03 1316 	mls	r3, r3, r6, r1
 8021f86:	6861      	ldr	r1, [r4, #4]
 8021f88:	fb93 f2f0 	sdiv	r2, r3, r0
 8021f8c:	fb00 3012 	mls	r0, r0, r2, r3
 8021f90:	6823      	ldr	r3, [r4, #0]
 8021f92:	1a89      	subs	r1, r1, r2
 8021f94:	68a2      	ldr	r2, [r4, #8]
 8021f96:	6061      	str	r1, [r4, #4]
 8021f98:	1a1b      	subs	r3, r3, r0
 8021f9a:	1b92      	subs	r2, r2, r6
 8021f9c:	2b3b      	cmp	r3, #59	; 0x3b
 8021f9e:	6023      	str	r3, [r4, #0]
 8021fa0:	60a2      	str	r2, [r4, #8]
 8021fa2:	dd35      	ble.n	8022010 <localtime_r+0x15c>
 8021fa4:	3101      	adds	r1, #1
 8021fa6:	6061      	str	r1, [r4, #4]
 8021fa8:	3b3c      	subs	r3, #60	; 0x3c
 8021faa:	6023      	str	r3, [r4, #0]
 8021fac:	6863      	ldr	r3, [r4, #4]
 8021fae:	2b3b      	cmp	r3, #59	; 0x3b
 8021fb0:	dd34      	ble.n	802201c <localtime_r+0x168>
 8021fb2:	3201      	adds	r2, #1
 8021fb4:	60a2      	str	r2, [r4, #8]
 8021fb6:	3b3c      	subs	r3, #60	; 0x3c
 8021fb8:	6063      	str	r3, [r4, #4]
 8021fba:	68a3      	ldr	r3, [r4, #8]
 8021fbc:	2b17      	cmp	r3, #23
 8021fbe:	dd33      	ble.n	8022028 <localtime_r+0x174>
 8021fc0:	69e2      	ldr	r2, [r4, #28]
 8021fc2:	3201      	adds	r2, #1
 8021fc4:	61e2      	str	r2, [r4, #28]
 8021fc6:	69a2      	ldr	r2, [r4, #24]
 8021fc8:	3201      	adds	r2, #1
 8021fca:	2a06      	cmp	r2, #6
 8021fcc:	bfc8      	it	gt
 8021fce:	2200      	movgt	r2, #0
 8021fd0:	61a2      	str	r2, [r4, #24]
 8021fd2:	68e2      	ldr	r2, [r4, #12]
 8021fd4:	3b18      	subs	r3, #24
 8021fd6:	3201      	adds	r2, #1
 8021fd8:	60a3      	str	r3, [r4, #8]
 8021fda:	6923      	ldr	r3, [r4, #16]
 8021fdc:	60e2      	str	r2, [r4, #12]
 8021fde:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8021fe2:	428a      	cmp	r2, r1
 8021fe4:	dd0e      	ble.n	8022004 <localtime_r+0x150>
 8021fe6:	2b0b      	cmp	r3, #11
 8021fe8:	eba2 0201 	sub.w	r2, r2, r1
 8021fec:	60e2      	str	r2, [r4, #12]
 8021fee:	f103 0201 	add.w	r2, r3, #1
 8021ff2:	bf09      	itett	eq
 8021ff4:	6963      	ldreq	r3, [r4, #20]
 8021ff6:	6122      	strne	r2, [r4, #16]
 8021ff8:	2200      	moveq	r2, #0
 8021ffa:	3301      	addeq	r3, #1
 8021ffc:	bf02      	ittt	eq
 8021ffe:	6122      	streq	r2, [r4, #16]
 8022000:	6163      	streq	r3, [r4, #20]
 8022002:	61e2      	streq	r2, [r4, #28]
 8022004:	f001 fa30 	bl	8023468 <__tz_unlock>
 8022008:	4620      	mov	r0, r4
 802200a:	b002      	add	sp, #8
 802200c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022010:	2b00      	cmp	r3, #0
 8022012:	dacb      	bge.n	8021fac <localtime_r+0xf8>
 8022014:	3901      	subs	r1, #1
 8022016:	6061      	str	r1, [r4, #4]
 8022018:	333c      	adds	r3, #60	; 0x3c
 802201a:	e7c6      	b.n	8021faa <localtime_r+0xf6>
 802201c:	2b00      	cmp	r3, #0
 802201e:	dacc      	bge.n	8021fba <localtime_r+0x106>
 8022020:	3a01      	subs	r2, #1
 8022022:	60a2      	str	r2, [r4, #8]
 8022024:	333c      	adds	r3, #60	; 0x3c
 8022026:	e7c7      	b.n	8021fb8 <localtime_r+0x104>
 8022028:	2b00      	cmp	r3, #0
 802202a:	daeb      	bge.n	8022004 <localtime_r+0x150>
 802202c:	69e2      	ldr	r2, [r4, #28]
 802202e:	3a01      	subs	r2, #1
 8022030:	61e2      	str	r2, [r4, #28]
 8022032:	69a2      	ldr	r2, [r4, #24]
 8022034:	3a01      	subs	r2, #1
 8022036:	bf48      	it	mi
 8022038:	2206      	movmi	r2, #6
 802203a:	61a2      	str	r2, [r4, #24]
 802203c:	68e2      	ldr	r2, [r4, #12]
 802203e:	3318      	adds	r3, #24
 8022040:	3a01      	subs	r2, #1
 8022042:	60e2      	str	r2, [r4, #12]
 8022044:	60a3      	str	r3, [r4, #8]
 8022046:	2a00      	cmp	r2, #0
 8022048:	d1dc      	bne.n	8022004 <localtime_r+0x150>
 802204a:	6923      	ldr	r3, [r4, #16]
 802204c:	3b01      	subs	r3, #1
 802204e:	d405      	bmi.n	802205c <localtime_r+0x1a8>
 8022050:	6123      	str	r3, [r4, #16]
 8022052:	6923      	ldr	r3, [r4, #16]
 8022054:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8022058:	60e3      	str	r3, [r4, #12]
 802205a:	e7d3      	b.n	8022004 <localtime_r+0x150>
 802205c:	230b      	movs	r3, #11
 802205e:	6123      	str	r3, [r4, #16]
 8022060:	6963      	ldr	r3, [r4, #20]
 8022062:	1e5a      	subs	r2, r3, #1
 8022064:	6162      	str	r2, [r4, #20]
 8022066:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 802206a:	0793      	lsls	r3, r2, #30
 802206c:	d105      	bne.n	802207a <localtime_r+0x1c6>
 802206e:	2164      	movs	r1, #100	; 0x64
 8022070:	fb92 f3f1 	sdiv	r3, r2, r1
 8022074:	fb01 2313 	mls	r3, r1, r3, r2
 8022078:	b963      	cbnz	r3, 8022094 <localtime_r+0x1e0>
 802207a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 802207e:	fb92 f3f1 	sdiv	r3, r2, r1
 8022082:	fb01 2313 	mls	r3, r1, r3, r2
 8022086:	fab3 f383 	clz	r3, r3
 802208a:	095b      	lsrs	r3, r3, #5
 802208c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8022090:	61e3      	str	r3, [r4, #28]
 8022092:	e7de      	b.n	8022052 <localtime_r+0x19e>
 8022094:	2301      	movs	r3, #1
 8022096:	e7f9      	b.n	802208c <localtime_r+0x1d8>
 8022098:	0802bae0 	.word	0x0802bae0
 802209c:	20000fd0 	.word	0x20000fd0

080220a0 <__retarget_lock_init_recursive>:
 80220a0:	4770      	bx	lr

080220a2 <__retarget_lock_close_recursive>:
 80220a2:	4770      	bx	lr

080220a4 <__retarget_lock_acquire>:
 80220a4:	4770      	bx	lr

080220a6 <__retarget_lock_acquire_recursive>:
 80220a6:	4770      	bx	lr

080220a8 <__retarget_lock_release>:
 80220a8:	4770      	bx	lr

080220aa <__retarget_lock_release_recursive>:
 80220aa:	4770      	bx	lr

080220ac <__swhatbuf_r>:
 80220ac:	b570      	push	{r4, r5, r6, lr}
 80220ae:	460e      	mov	r6, r1
 80220b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80220b4:	2900      	cmp	r1, #0
 80220b6:	b096      	sub	sp, #88	; 0x58
 80220b8:	4614      	mov	r4, r2
 80220ba:	461d      	mov	r5, r3
 80220bc:	da07      	bge.n	80220ce <__swhatbuf_r+0x22>
 80220be:	2300      	movs	r3, #0
 80220c0:	602b      	str	r3, [r5, #0]
 80220c2:	89b3      	ldrh	r3, [r6, #12]
 80220c4:	061a      	lsls	r2, r3, #24
 80220c6:	d410      	bmi.n	80220ea <__swhatbuf_r+0x3e>
 80220c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80220cc:	e00e      	b.n	80220ec <__swhatbuf_r+0x40>
 80220ce:	466a      	mov	r2, sp
 80220d0:	f001 fd3a 	bl	8023b48 <_fstat_r>
 80220d4:	2800      	cmp	r0, #0
 80220d6:	dbf2      	blt.n	80220be <__swhatbuf_r+0x12>
 80220d8:	9a01      	ldr	r2, [sp, #4]
 80220da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80220de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80220e2:	425a      	negs	r2, r3
 80220e4:	415a      	adcs	r2, r3
 80220e6:	602a      	str	r2, [r5, #0]
 80220e8:	e7ee      	b.n	80220c8 <__swhatbuf_r+0x1c>
 80220ea:	2340      	movs	r3, #64	; 0x40
 80220ec:	2000      	movs	r0, #0
 80220ee:	6023      	str	r3, [r4, #0]
 80220f0:	b016      	add	sp, #88	; 0x58
 80220f2:	bd70      	pop	{r4, r5, r6, pc}

080220f4 <__smakebuf_r>:
 80220f4:	898b      	ldrh	r3, [r1, #12]
 80220f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80220f8:	079d      	lsls	r5, r3, #30
 80220fa:	4606      	mov	r6, r0
 80220fc:	460c      	mov	r4, r1
 80220fe:	d507      	bpl.n	8022110 <__smakebuf_r+0x1c>
 8022100:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022104:	6023      	str	r3, [r4, #0]
 8022106:	6123      	str	r3, [r4, #16]
 8022108:	2301      	movs	r3, #1
 802210a:	6163      	str	r3, [r4, #20]
 802210c:	b002      	add	sp, #8
 802210e:	bd70      	pop	{r4, r5, r6, pc}
 8022110:	ab01      	add	r3, sp, #4
 8022112:	466a      	mov	r2, sp
 8022114:	f7ff ffca 	bl	80220ac <__swhatbuf_r>
 8022118:	9900      	ldr	r1, [sp, #0]
 802211a:	4605      	mov	r5, r0
 802211c:	4630      	mov	r0, r6
 802211e:	f000 f8af 	bl	8022280 <_malloc_r>
 8022122:	b948      	cbnz	r0, 8022138 <__smakebuf_r+0x44>
 8022124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022128:	059a      	lsls	r2, r3, #22
 802212a:	d4ef      	bmi.n	802210c <__smakebuf_r+0x18>
 802212c:	f023 0303 	bic.w	r3, r3, #3
 8022130:	f043 0302 	orr.w	r3, r3, #2
 8022134:	81a3      	strh	r3, [r4, #12]
 8022136:	e7e3      	b.n	8022100 <__smakebuf_r+0xc>
 8022138:	4b0d      	ldr	r3, [pc, #52]	; (8022170 <__smakebuf_r+0x7c>)
 802213a:	62b3      	str	r3, [r6, #40]	; 0x28
 802213c:	89a3      	ldrh	r3, [r4, #12]
 802213e:	6020      	str	r0, [r4, #0]
 8022140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022144:	81a3      	strh	r3, [r4, #12]
 8022146:	9b00      	ldr	r3, [sp, #0]
 8022148:	6163      	str	r3, [r4, #20]
 802214a:	9b01      	ldr	r3, [sp, #4]
 802214c:	6120      	str	r0, [r4, #16]
 802214e:	b15b      	cbz	r3, 8022168 <__smakebuf_r+0x74>
 8022150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022154:	4630      	mov	r0, r6
 8022156:	f001 fdff 	bl	8023d58 <_isatty_r>
 802215a:	b128      	cbz	r0, 8022168 <__smakebuf_r+0x74>
 802215c:	89a3      	ldrh	r3, [r4, #12]
 802215e:	f023 0303 	bic.w	r3, r3, #3
 8022162:	f043 0301 	orr.w	r3, r3, #1
 8022166:	81a3      	strh	r3, [r4, #12]
 8022168:	89a0      	ldrh	r0, [r4, #12]
 802216a:	4305      	orrs	r5, r0
 802216c:	81a5      	strh	r5, [r4, #12]
 802216e:	e7cd      	b.n	802210c <__smakebuf_r+0x18>
 8022170:	080218d9 	.word	0x080218d9

08022174 <malloc>:
 8022174:	4b02      	ldr	r3, [pc, #8]	; (8022180 <malloc+0xc>)
 8022176:	4601      	mov	r1, r0
 8022178:	6818      	ldr	r0, [r3, #0]
 802217a:	f000 b881 	b.w	8022280 <_malloc_r>
 802217e:	bf00      	nop
 8022180:	20000108 	.word	0x20000108

08022184 <free>:
 8022184:	4b02      	ldr	r3, [pc, #8]	; (8022190 <free+0xc>)
 8022186:	4601      	mov	r1, r0
 8022188:	6818      	ldr	r0, [r3, #0]
 802218a:	f000 b829 	b.w	80221e0 <_free_r>
 802218e:	bf00      	nop
 8022190:	20000108 	.word	0x20000108

08022194 <memcpy>:
 8022194:	440a      	add	r2, r1
 8022196:	4291      	cmp	r1, r2
 8022198:	f100 33ff 	add.w	r3, r0, #4294967295
 802219c:	d100      	bne.n	80221a0 <memcpy+0xc>
 802219e:	4770      	bx	lr
 80221a0:	b510      	push	{r4, lr}
 80221a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80221a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80221aa:	4291      	cmp	r1, r2
 80221ac:	d1f9      	bne.n	80221a2 <memcpy+0xe>
 80221ae:	bd10      	pop	{r4, pc}

080221b0 <memset>:
 80221b0:	4402      	add	r2, r0
 80221b2:	4603      	mov	r3, r0
 80221b4:	4293      	cmp	r3, r2
 80221b6:	d100      	bne.n	80221ba <memset+0xa>
 80221b8:	4770      	bx	lr
 80221ba:	f803 1b01 	strb.w	r1, [r3], #1
 80221be:	e7f9      	b.n	80221b4 <memset+0x4>

080221c0 <_calloc_r>:
 80221c0:	b513      	push	{r0, r1, r4, lr}
 80221c2:	434a      	muls	r2, r1
 80221c4:	4611      	mov	r1, r2
 80221c6:	9201      	str	r2, [sp, #4]
 80221c8:	f000 f85a 	bl	8022280 <_malloc_r>
 80221cc:	4604      	mov	r4, r0
 80221ce:	b118      	cbz	r0, 80221d8 <_calloc_r+0x18>
 80221d0:	9a01      	ldr	r2, [sp, #4]
 80221d2:	2100      	movs	r1, #0
 80221d4:	f7ff ffec 	bl	80221b0 <memset>
 80221d8:	4620      	mov	r0, r4
 80221da:	b002      	add	sp, #8
 80221dc:	bd10      	pop	{r4, pc}
	...

080221e0 <_free_r>:
 80221e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80221e2:	2900      	cmp	r1, #0
 80221e4:	d048      	beq.n	8022278 <_free_r+0x98>
 80221e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80221ea:	9001      	str	r0, [sp, #4]
 80221ec:	2b00      	cmp	r3, #0
 80221ee:	f1a1 0404 	sub.w	r4, r1, #4
 80221f2:	bfb8      	it	lt
 80221f4:	18e4      	addlt	r4, r4, r3
 80221f6:	f001 fde7 	bl	8023dc8 <__malloc_lock>
 80221fa:	4a20      	ldr	r2, [pc, #128]	; (802227c <_free_r+0x9c>)
 80221fc:	9801      	ldr	r0, [sp, #4]
 80221fe:	6813      	ldr	r3, [r2, #0]
 8022200:	4615      	mov	r5, r2
 8022202:	b933      	cbnz	r3, 8022212 <_free_r+0x32>
 8022204:	6063      	str	r3, [r4, #4]
 8022206:	6014      	str	r4, [r2, #0]
 8022208:	b003      	add	sp, #12
 802220a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802220e:	f001 bde1 	b.w	8023dd4 <__malloc_unlock>
 8022212:	42a3      	cmp	r3, r4
 8022214:	d90b      	bls.n	802222e <_free_r+0x4e>
 8022216:	6821      	ldr	r1, [r4, #0]
 8022218:	1862      	adds	r2, r4, r1
 802221a:	4293      	cmp	r3, r2
 802221c:	bf04      	itt	eq
 802221e:	681a      	ldreq	r2, [r3, #0]
 8022220:	685b      	ldreq	r3, [r3, #4]
 8022222:	6063      	str	r3, [r4, #4]
 8022224:	bf04      	itt	eq
 8022226:	1852      	addeq	r2, r2, r1
 8022228:	6022      	streq	r2, [r4, #0]
 802222a:	602c      	str	r4, [r5, #0]
 802222c:	e7ec      	b.n	8022208 <_free_r+0x28>
 802222e:	461a      	mov	r2, r3
 8022230:	685b      	ldr	r3, [r3, #4]
 8022232:	b10b      	cbz	r3, 8022238 <_free_r+0x58>
 8022234:	42a3      	cmp	r3, r4
 8022236:	d9fa      	bls.n	802222e <_free_r+0x4e>
 8022238:	6811      	ldr	r1, [r2, #0]
 802223a:	1855      	adds	r5, r2, r1
 802223c:	42a5      	cmp	r5, r4
 802223e:	d10b      	bne.n	8022258 <_free_r+0x78>
 8022240:	6824      	ldr	r4, [r4, #0]
 8022242:	4421      	add	r1, r4
 8022244:	1854      	adds	r4, r2, r1
 8022246:	42a3      	cmp	r3, r4
 8022248:	6011      	str	r1, [r2, #0]
 802224a:	d1dd      	bne.n	8022208 <_free_r+0x28>
 802224c:	681c      	ldr	r4, [r3, #0]
 802224e:	685b      	ldr	r3, [r3, #4]
 8022250:	6053      	str	r3, [r2, #4]
 8022252:	4421      	add	r1, r4
 8022254:	6011      	str	r1, [r2, #0]
 8022256:	e7d7      	b.n	8022208 <_free_r+0x28>
 8022258:	d902      	bls.n	8022260 <_free_r+0x80>
 802225a:	230c      	movs	r3, #12
 802225c:	6003      	str	r3, [r0, #0]
 802225e:	e7d3      	b.n	8022208 <_free_r+0x28>
 8022260:	6825      	ldr	r5, [r4, #0]
 8022262:	1961      	adds	r1, r4, r5
 8022264:	428b      	cmp	r3, r1
 8022266:	bf04      	itt	eq
 8022268:	6819      	ldreq	r1, [r3, #0]
 802226a:	685b      	ldreq	r3, [r3, #4]
 802226c:	6063      	str	r3, [r4, #4]
 802226e:	bf04      	itt	eq
 8022270:	1949      	addeq	r1, r1, r5
 8022272:	6021      	streq	r1, [r4, #0]
 8022274:	6054      	str	r4, [r2, #4]
 8022276:	e7c7      	b.n	8022208 <_free_r+0x28>
 8022278:	b003      	add	sp, #12
 802227a:	bd30      	pop	{r4, r5, pc}
 802227c:	20000fac 	.word	0x20000fac

08022280 <_malloc_r>:
 8022280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022282:	1ccd      	adds	r5, r1, #3
 8022284:	f025 0503 	bic.w	r5, r5, #3
 8022288:	3508      	adds	r5, #8
 802228a:	2d0c      	cmp	r5, #12
 802228c:	bf38      	it	cc
 802228e:	250c      	movcc	r5, #12
 8022290:	2d00      	cmp	r5, #0
 8022292:	4606      	mov	r6, r0
 8022294:	db01      	blt.n	802229a <_malloc_r+0x1a>
 8022296:	42a9      	cmp	r1, r5
 8022298:	d903      	bls.n	80222a2 <_malloc_r+0x22>
 802229a:	230c      	movs	r3, #12
 802229c:	6033      	str	r3, [r6, #0]
 802229e:	2000      	movs	r0, #0
 80222a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80222a2:	f001 fd91 	bl	8023dc8 <__malloc_lock>
 80222a6:	4921      	ldr	r1, [pc, #132]	; (802232c <_malloc_r+0xac>)
 80222a8:	680a      	ldr	r2, [r1, #0]
 80222aa:	4614      	mov	r4, r2
 80222ac:	b99c      	cbnz	r4, 80222d6 <_malloc_r+0x56>
 80222ae:	4f20      	ldr	r7, [pc, #128]	; (8022330 <_malloc_r+0xb0>)
 80222b0:	683b      	ldr	r3, [r7, #0]
 80222b2:	b923      	cbnz	r3, 80222be <_malloc_r+0x3e>
 80222b4:	4621      	mov	r1, r4
 80222b6:	4630      	mov	r0, r6
 80222b8:	f000 f8da 	bl	8022470 <_sbrk_r>
 80222bc:	6038      	str	r0, [r7, #0]
 80222be:	4629      	mov	r1, r5
 80222c0:	4630      	mov	r0, r6
 80222c2:	f000 f8d5 	bl	8022470 <_sbrk_r>
 80222c6:	1c43      	adds	r3, r0, #1
 80222c8:	d123      	bne.n	8022312 <_malloc_r+0x92>
 80222ca:	230c      	movs	r3, #12
 80222cc:	6033      	str	r3, [r6, #0]
 80222ce:	4630      	mov	r0, r6
 80222d0:	f001 fd80 	bl	8023dd4 <__malloc_unlock>
 80222d4:	e7e3      	b.n	802229e <_malloc_r+0x1e>
 80222d6:	6823      	ldr	r3, [r4, #0]
 80222d8:	1b5b      	subs	r3, r3, r5
 80222da:	d417      	bmi.n	802230c <_malloc_r+0x8c>
 80222dc:	2b0b      	cmp	r3, #11
 80222de:	d903      	bls.n	80222e8 <_malloc_r+0x68>
 80222e0:	6023      	str	r3, [r4, #0]
 80222e2:	441c      	add	r4, r3
 80222e4:	6025      	str	r5, [r4, #0]
 80222e6:	e004      	b.n	80222f2 <_malloc_r+0x72>
 80222e8:	6863      	ldr	r3, [r4, #4]
 80222ea:	42a2      	cmp	r2, r4
 80222ec:	bf0c      	ite	eq
 80222ee:	600b      	streq	r3, [r1, #0]
 80222f0:	6053      	strne	r3, [r2, #4]
 80222f2:	4630      	mov	r0, r6
 80222f4:	f001 fd6e 	bl	8023dd4 <__malloc_unlock>
 80222f8:	f104 000b 	add.w	r0, r4, #11
 80222fc:	1d23      	adds	r3, r4, #4
 80222fe:	f020 0007 	bic.w	r0, r0, #7
 8022302:	1ac2      	subs	r2, r0, r3
 8022304:	d0cc      	beq.n	80222a0 <_malloc_r+0x20>
 8022306:	1a1b      	subs	r3, r3, r0
 8022308:	50a3      	str	r3, [r4, r2]
 802230a:	e7c9      	b.n	80222a0 <_malloc_r+0x20>
 802230c:	4622      	mov	r2, r4
 802230e:	6864      	ldr	r4, [r4, #4]
 8022310:	e7cc      	b.n	80222ac <_malloc_r+0x2c>
 8022312:	1cc4      	adds	r4, r0, #3
 8022314:	f024 0403 	bic.w	r4, r4, #3
 8022318:	42a0      	cmp	r0, r4
 802231a:	d0e3      	beq.n	80222e4 <_malloc_r+0x64>
 802231c:	1a21      	subs	r1, r4, r0
 802231e:	4630      	mov	r0, r6
 8022320:	f000 f8a6 	bl	8022470 <_sbrk_r>
 8022324:	3001      	adds	r0, #1
 8022326:	d1dd      	bne.n	80222e4 <_malloc_r+0x64>
 8022328:	e7cf      	b.n	80222ca <_malloc_r+0x4a>
 802232a:	bf00      	nop
 802232c:	20000fac 	.word	0x20000fac
 8022330:	20000fb0 	.word	0x20000fb0

08022334 <_open_r>:
 8022334:	b538      	push	{r3, r4, r5, lr}
 8022336:	4d07      	ldr	r5, [pc, #28]	; (8022354 <_open_r+0x20>)
 8022338:	4604      	mov	r4, r0
 802233a:	4608      	mov	r0, r1
 802233c:	4611      	mov	r1, r2
 802233e:	2200      	movs	r2, #0
 8022340:	602a      	str	r2, [r5, #0]
 8022342:	461a      	mov	r2, r3
 8022344:	f7de fdcc 	bl	8000ee0 <_open>
 8022348:	1c43      	adds	r3, r0, #1
 802234a:	d102      	bne.n	8022352 <_open_r+0x1e>
 802234c:	682b      	ldr	r3, [r5, #0]
 802234e:	b103      	cbz	r3, 8022352 <_open_r+0x1e>
 8022350:	6023      	str	r3, [r4, #0]
 8022352:	bd38      	pop	{r3, r4, r5, pc}
 8022354:	2000107c 	.word	0x2000107c

08022358 <putchar>:
 8022358:	4b09      	ldr	r3, [pc, #36]	; (8022380 <putchar+0x28>)
 802235a:	b513      	push	{r0, r1, r4, lr}
 802235c:	681c      	ldr	r4, [r3, #0]
 802235e:	4601      	mov	r1, r0
 8022360:	b134      	cbz	r4, 8022370 <putchar+0x18>
 8022362:	69a3      	ldr	r3, [r4, #24]
 8022364:	b923      	cbnz	r3, 8022370 <putchar+0x18>
 8022366:	9001      	str	r0, [sp, #4]
 8022368:	4620      	mov	r0, r4
 802236a:	f7ff fae9 	bl	8021940 <__sinit>
 802236e:	9901      	ldr	r1, [sp, #4]
 8022370:	68a2      	ldr	r2, [r4, #8]
 8022372:	4620      	mov	r0, r4
 8022374:	b002      	add	sp, #8
 8022376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802237a:	f002 b9a1 	b.w	80246c0 <_putc_r>
 802237e:	bf00      	nop
 8022380:	20000108 	.word	0x20000108

08022384 <srand>:
 8022384:	b538      	push	{r3, r4, r5, lr}
 8022386:	4b10      	ldr	r3, [pc, #64]	; (80223c8 <srand+0x44>)
 8022388:	681d      	ldr	r5, [r3, #0]
 802238a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 802238c:	4604      	mov	r4, r0
 802238e:	b9b3      	cbnz	r3, 80223be <srand+0x3a>
 8022390:	2018      	movs	r0, #24
 8022392:	f7ff feef 	bl	8022174 <malloc>
 8022396:	4602      	mov	r2, r0
 8022398:	63a8      	str	r0, [r5, #56]	; 0x38
 802239a:	b920      	cbnz	r0, 80223a6 <srand+0x22>
 802239c:	4b0b      	ldr	r3, [pc, #44]	; (80223cc <srand+0x48>)
 802239e:	480c      	ldr	r0, [pc, #48]	; (80223d0 <srand+0x4c>)
 80223a0:	2142      	movs	r1, #66	; 0x42
 80223a2:	f001 fb5b 	bl	8023a5c <__assert_func>
 80223a6:	490b      	ldr	r1, [pc, #44]	; (80223d4 <srand+0x50>)
 80223a8:	4b0b      	ldr	r3, [pc, #44]	; (80223d8 <srand+0x54>)
 80223aa:	e9c0 1300 	strd	r1, r3, [r0]
 80223ae:	4b0b      	ldr	r3, [pc, #44]	; (80223dc <srand+0x58>)
 80223b0:	6083      	str	r3, [r0, #8]
 80223b2:	230b      	movs	r3, #11
 80223b4:	8183      	strh	r3, [r0, #12]
 80223b6:	2100      	movs	r1, #0
 80223b8:	2001      	movs	r0, #1
 80223ba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80223be:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80223c0:	2200      	movs	r2, #0
 80223c2:	611c      	str	r4, [r3, #16]
 80223c4:	615a      	str	r2, [r3, #20]
 80223c6:	bd38      	pop	{r3, r4, r5, pc}
 80223c8:	20000108 	.word	0x20000108
 80223cc:	0802ba68 	.word	0x0802ba68
 80223d0:	0802bb40 	.word	0x0802bb40
 80223d4:	abcd330e 	.word	0xabcd330e
 80223d8:	e66d1234 	.word	0xe66d1234
 80223dc:	0005deec 	.word	0x0005deec

080223e0 <rand>:
 80223e0:	4b17      	ldr	r3, [pc, #92]	; (8022440 <rand+0x60>)
 80223e2:	b510      	push	{r4, lr}
 80223e4:	681c      	ldr	r4, [r3, #0]
 80223e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80223e8:	b9b3      	cbnz	r3, 8022418 <rand+0x38>
 80223ea:	2018      	movs	r0, #24
 80223ec:	f7ff fec2 	bl	8022174 <malloc>
 80223f0:	63a0      	str	r0, [r4, #56]	; 0x38
 80223f2:	b928      	cbnz	r0, 8022400 <rand+0x20>
 80223f4:	4602      	mov	r2, r0
 80223f6:	4b13      	ldr	r3, [pc, #76]	; (8022444 <rand+0x64>)
 80223f8:	4813      	ldr	r0, [pc, #76]	; (8022448 <rand+0x68>)
 80223fa:	214e      	movs	r1, #78	; 0x4e
 80223fc:	f001 fb2e 	bl	8023a5c <__assert_func>
 8022400:	4a12      	ldr	r2, [pc, #72]	; (802244c <rand+0x6c>)
 8022402:	4b13      	ldr	r3, [pc, #76]	; (8022450 <rand+0x70>)
 8022404:	e9c0 2300 	strd	r2, r3, [r0]
 8022408:	4b12      	ldr	r3, [pc, #72]	; (8022454 <rand+0x74>)
 802240a:	6083      	str	r3, [r0, #8]
 802240c:	230b      	movs	r3, #11
 802240e:	8183      	strh	r3, [r0, #12]
 8022410:	2201      	movs	r2, #1
 8022412:	2300      	movs	r3, #0
 8022414:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8022418:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802241a:	480f      	ldr	r0, [pc, #60]	; (8022458 <rand+0x78>)
 802241c:	690a      	ldr	r2, [r1, #16]
 802241e:	694b      	ldr	r3, [r1, #20]
 8022420:	4c0e      	ldr	r4, [pc, #56]	; (802245c <rand+0x7c>)
 8022422:	4350      	muls	r0, r2
 8022424:	fb04 0003 	mla	r0, r4, r3, r0
 8022428:	fba2 3404 	umull	r3, r4, r2, r4
 802242c:	1c5a      	adds	r2, r3, #1
 802242e:	4404      	add	r4, r0
 8022430:	f144 0000 	adc.w	r0, r4, #0
 8022434:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8022438:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802243c:	bd10      	pop	{r4, pc}
 802243e:	bf00      	nop
 8022440:	20000108 	.word	0x20000108
 8022444:	0802ba68 	.word	0x0802ba68
 8022448:	0802bb40 	.word	0x0802bb40
 802244c:	abcd330e 	.word	0xabcd330e
 8022450:	e66d1234 	.word	0xe66d1234
 8022454:	0005deec 	.word	0x0005deec
 8022458:	5851f42d 	.word	0x5851f42d
 802245c:	4c957f2d 	.word	0x4c957f2d

08022460 <realloc>:
 8022460:	4b02      	ldr	r3, [pc, #8]	; (802246c <realloc+0xc>)
 8022462:	460a      	mov	r2, r1
 8022464:	4601      	mov	r1, r0
 8022466:	6818      	ldr	r0, [r3, #0]
 8022468:	f001 bcba 	b.w	8023de0 <_realloc_r>
 802246c:	20000108 	.word	0x20000108

08022470 <_sbrk_r>:
 8022470:	b538      	push	{r3, r4, r5, lr}
 8022472:	4d06      	ldr	r5, [pc, #24]	; (802248c <_sbrk_r+0x1c>)
 8022474:	2300      	movs	r3, #0
 8022476:	4604      	mov	r4, r0
 8022478:	4608      	mov	r0, r1
 802247a:	602b      	str	r3, [r5, #0]
 802247c:	f7de fd3e 	bl	8000efc <_sbrk>
 8022480:	1c43      	adds	r3, r0, #1
 8022482:	d102      	bne.n	802248a <_sbrk_r+0x1a>
 8022484:	682b      	ldr	r3, [r5, #0]
 8022486:	b103      	cbz	r3, 802248a <_sbrk_r+0x1a>
 8022488:	6023      	str	r3, [r4, #0]
 802248a:	bd38      	pop	{r3, r4, r5, pc}
 802248c:	2000107c 	.word	0x2000107c

08022490 <_raise_r>:
 8022490:	291f      	cmp	r1, #31
 8022492:	b538      	push	{r3, r4, r5, lr}
 8022494:	4604      	mov	r4, r0
 8022496:	460d      	mov	r5, r1
 8022498:	d904      	bls.n	80224a4 <_raise_r+0x14>
 802249a:	2316      	movs	r3, #22
 802249c:	6003      	str	r3, [r0, #0]
 802249e:	f04f 30ff 	mov.w	r0, #4294967295
 80224a2:	bd38      	pop	{r3, r4, r5, pc}
 80224a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80224a6:	b112      	cbz	r2, 80224ae <_raise_r+0x1e>
 80224a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80224ac:	b94b      	cbnz	r3, 80224c2 <_raise_r+0x32>
 80224ae:	4620      	mov	r0, r4
 80224b0:	f000 f830 	bl	8022514 <_getpid_r>
 80224b4:	462a      	mov	r2, r5
 80224b6:	4601      	mov	r1, r0
 80224b8:	4620      	mov	r0, r4
 80224ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80224be:	f000 b817 	b.w	80224f0 <_kill_r>
 80224c2:	2b01      	cmp	r3, #1
 80224c4:	d00a      	beq.n	80224dc <_raise_r+0x4c>
 80224c6:	1c59      	adds	r1, r3, #1
 80224c8:	d103      	bne.n	80224d2 <_raise_r+0x42>
 80224ca:	2316      	movs	r3, #22
 80224cc:	6003      	str	r3, [r0, #0]
 80224ce:	2001      	movs	r0, #1
 80224d0:	e7e7      	b.n	80224a2 <_raise_r+0x12>
 80224d2:	2400      	movs	r4, #0
 80224d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80224d8:	4628      	mov	r0, r5
 80224da:	4798      	blx	r3
 80224dc:	2000      	movs	r0, #0
 80224de:	e7e0      	b.n	80224a2 <_raise_r+0x12>

080224e0 <raise>:
 80224e0:	4b02      	ldr	r3, [pc, #8]	; (80224ec <raise+0xc>)
 80224e2:	4601      	mov	r1, r0
 80224e4:	6818      	ldr	r0, [r3, #0]
 80224e6:	f7ff bfd3 	b.w	8022490 <_raise_r>
 80224ea:	bf00      	nop
 80224ec:	20000108 	.word	0x20000108

080224f0 <_kill_r>:
 80224f0:	b538      	push	{r3, r4, r5, lr}
 80224f2:	4d07      	ldr	r5, [pc, #28]	; (8022510 <_kill_r+0x20>)
 80224f4:	2300      	movs	r3, #0
 80224f6:	4604      	mov	r4, r0
 80224f8:	4608      	mov	r0, r1
 80224fa:	4611      	mov	r1, r2
 80224fc:	602b      	str	r3, [r5, #0]
 80224fe:	f7de fc68 	bl	8000dd2 <_kill>
 8022502:	1c43      	adds	r3, r0, #1
 8022504:	d102      	bne.n	802250c <_kill_r+0x1c>
 8022506:	682b      	ldr	r3, [r5, #0]
 8022508:	b103      	cbz	r3, 802250c <_kill_r+0x1c>
 802250a:	6023      	str	r3, [r4, #0]
 802250c:	bd38      	pop	{r3, r4, r5, pc}
 802250e:	bf00      	nop
 8022510:	2000107c 	.word	0x2000107c

08022514 <_getpid_r>:
 8022514:	f7de bc55 	b.w	8000dc2 <_getpid>

08022518 <siprintf>:
 8022518:	b40e      	push	{r1, r2, r3}
 802251a:	b500      	push	{lr}
 802251c:	b09c      	sub	sp, #112	; 0x70
 802251e:	ab1d      	add	r3, sp, #116	; 0x74
 8022520:	9002      	str	r0, [sp, #8]
 8022522:	9006      	str	r0, [sp, #24]
 8022524:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022528:	4809      	ldr	r0, [pc, #36]	; (8022550 <siprintf+0x38>)
 802252a:	9107      	str	r1, [sp, #28]
 802252c:	9104      	str	r1, [sp, #16]
 802252e:	4909      	ldr	r1, [pc, #36]	; (8022554 <siprintf+0x3c>)
 8022530:	f853 2b04 	ldr.w	r2, [r3], #4
 8022534:	9105      	str	r1, [sp, #20]
 8022536:	6800      	ldr	r0, [r0, #0]
 8022538:	9301      	str	r3, [sp, #4]
 802253a:	a902      	add	r1, sp, #8
 802253c:	f001 fcd2 	bl	8023ee4 <_svfiprintf_r>
 8022540:	9b02      	ldr	r3, [sp, #8]
 8022542:	2200      	movs	r2, #0
 8022544:	701a      	strb	r2, [r3, #0]
 8022546:	b01c      	add	sp, #112	; 0x70
 8022548:	f85d eb04 	ldr.w	lr, [sp], #4
 802254c:	b003      	add	sp, #12
 802254e:	4770      	bx	lr
 8022550:	20000108 	.word	0x20000108
 8022554:	ffff0208 	.word	0xffff0208

08022558 <__sread>:
 8022558:	b510      	push	{r4, lr}
 802255a:	460c      	mov	r4, r1
 802255c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022560:	f002 f8f6 	bl	8024750 <_read_r>
 8022564:	2800      	cmp	r0, #0
 8022566:	bfab      	itete	ge
 8022568:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802256a:	89a3      	ldrhlt	r3, [r4, #12]
 802256c:	181b      	addge	r3, r3, r0
 802256e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022572:	bfac      	ite	ge
 8022574:	6563      	strge	r3, [r4, #84]	; 0x54
 8022576:	81a3      	strhlt	r3, [r4, #12]
 8022578:	bd10      	pop	{r4, pc}

0802257a <__seofread>:
 802257a:	2000      	movs	r0, #0
 802257c:	4770      	bx	lr

0802257e <__swrite>:
 802257e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022582:	461f      	mov	r7, r3
 8022584:	898b      	ldrh	r3, [r1, #12]
 8022586:	05db      	lsls	r3, r3, #23
 8022588:	4605      	mov	r5, r0
 802258a:	460c      	mov	r4, r1
 802258c:	4616      	mov	r6, r2
 802258e:	d505      	bpl.n	802259c <__swrite+0x1e>
 8022590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022594:	2302      	movs	r3, #2
 8022596:	2200      	movs	r2, #0
 8022598:	f001 fbf2 	bl	8023d80 <_lseek_r>
 802259c:	89a3      	ldrh	r3, [r4, #12]
 802259e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80225a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80225a6:	81a3      	strh	r3, [r4, #12]
 80225a8:	4632      	mov	r2, r6
 80225aa:	463b      	mov	r3, r7
 80225ac:	4628      	mov	r0, r5
 80225ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80225b2:	f001 b96d 	b.w	8023890 <_write_r>

080225b6 <__sseek>:
 80225b6:	b510      	push	{r4, lr}
 80225b8:	460c      	mov	r4, r1
 80225ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80225be:	f001 fbdf 	bl	8023d80 <_lseek_r>
 80225c2:	1c43      	adds	r3, r0, #1
 80225c4:	89a3      	ldrh	r3, [r4, #12]
 80225c6:	bf15      	itete	ne
 80225c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80225ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80225ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80225d2:	81a3      	strheq	r3, [r4, #12]
 80225d4:	bf18      	it	ne
 80225d6:	81a3      	strhne	r3, [r4, #12]
 80225d8:	bd10      	pop	{r4, pc}

080225da <__sclose>:
 80225da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80225de:	f001 ba5b 	b.w	8023a98 <_close_r>

080225e2 <strcpy>:
 80225e2:	4603      	mov	r3, r0
 80225e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80225e8:	f803 2b01 	strb.w	r2, [r3], #1
 80225ec:	2a00      	cmp	r2, #0
 80225ee:	d1f9      	bne.n	80225e4 <strcpy+0x2>
 80225f0:	4770      	bx	lr
	...

080225f4 <iso_year_adjust>:
 80225f4:	6941      	ldr	r1, [r0, #20]
 80225f6:	2900      	cmp	r1, #0
 80225f8:	f240 736c 	movw	r3, #1900	; 0x76c
 80225fc:	bfa8      	it	ge
 80225fe:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8022602:	18ca      	adds	r2, r1, r3
 8022604:	078b      	lsls	r3, r1, #30
 8022606:	d105      	bne.n	8022614 <iso_year_adjust+0x20>
 8022608:	2164      	movs	r1, #100	; 0x64
 802260a:	fb92 f3f1 	sdiv	r3, r2, r1
 802260e:	fb01 2313 	mls	r3, r1, r3, r2
 8022612:	b9db      	cbnz	r3, 802264c <iso_year_adjust+0x58>
 8022614:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8022618:	fb92 f3f1 	sdiv	r3, r2, r1
 802261c:	fb01 2313 	mls	r3, r1, r3, r2
 8022620:	fab3 f383 	clz	r3, r3
 8022624:	095b      	lsrs	r3, r3, #5
 8022626:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 802262a:	0040      	lsls	r0, r0, #1
 802262c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8022630:	4418      	add	r0, r3
 8022632:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8022636:	4298      	cmp	r0, r3
 8022638:	d03a      	beq.n	80226b0 <iso_year_adjust+0xbc>
 802263a:	dc21      	bgt.n	8022680 <iso_year_adjust+0x8c>
 802263c:	2801      	cmp	r0, #1
 802263e:	dc1a      	bgt.n	8022676 <iso_year_adjust+0x82>
 8022640:	2800      	cmp	r0, #0
 8022642:	bfb4      	ite	lt
 8022644:	2000      	movlt	r0, #0
 8022646:	f04f 30ff 	movge.w	r0, #4294967295
 802264a:	4770      	bx	lr
 802264c:	2301      	movs	r3, #1
 802264e:	e7ea      	b.n	8022626 <iso_year_adjust+0x32>
 8022650:	2817      	cmp	r0, #23
 8022652:	d813      	bhi.n	802267c <iso_year_adjust+0x88>
 8022654:	e8df f000 	tbb	[pc, r0]
 8022658:	0c0c0c0c 	.word	0x0c0c0c0c
 802265c:	0c0c1212 	.word	0x0c0c1212
 8022660:	12121212 	.word	0x12121212
 8022664:	12121212 	.word	0x12121212
 8022668:	0c0c1212 	.word	0x0c0c1212
 802266c:	0c0c1212 	.word	0x0c0c1212
 8022670:	f04f 30ff 	mov.w	r0, #4294967295
 8022674:	4770      	bx	lr
 8022676:	380a      	subs	r0, #10
 8022678:	2817      	cmp	r0, #23
 802267a:	d9e9      	bls.n	8022650 <iso_year_adjust+0x5c>
 802267c:	2000      	movs	r0, #0
 802267e:	4770      	bx	lr
 8022680:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8022684:	4298      	cmp	r0, r3
 8022686:	dc06      	bgt.n	8022696 <iso_year_adjust+0xa2>
 8022688:	f241 63b1 	movw	r3, #5809	; 0x16b1
 802268c:	4298      	cmp	r0, r3
 802268e:	bfd4      	ite	le
 8022690:	2000      	movle	r0, #0
 8022692:	2001      	movgt	r0, #1
 8022694:	4770      	bx	lr
 8022696:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 802269a:	3802      	subs	r0, #2
 802269c:	2815      	cmp	r0, #21
 802269e:	d8ed      	bhi.n	802267c <iso_year_adjust+0x88>
 80226a0:	2301      	movs	r3, #1
 80226a2:	4083      	lsls	r3, r0
 80226a4:	4803      	ldr	r0, [pc, #12]	; (80226b4 <iso_year_adjust+0xc0>)
 80226a6:	4018      	ands	r0, r3
 80226a8:	3800      	subs	r0, #0
 80226aa:	bf18      	it	ne
 80226ac:	2001      	movne	r0, #1
 80226ae:	4770      	bx	lr
 80226b0:	2001      	movs	r0, #1
 80226b2:	4770      	bx	lr
 80226b4:	002a001f 	.word	0x002a001f

080226b8 <__strftime>:
 80226b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226bc:	b091      	sub	sp, #68	; 0x44
 80226be:	461d      	mov	r5, r3
 80226c0:	2300      	movs	r3, #0
 80226c2:	4681      	mov	r9, r0
 80226c4:	4688      	mov	r8, r1
 80226c6:	9304      	str	r3, [sp, #16]
 80226c8:	461c      	mov	r4, r3
 80226ca:	7813      	ldrb	r3, [r2, #0]
 80226cc:	2b00      	cmp	r3, #0
 80226ce:	f000 84d1 	beq.w	8023074 <__strftime+0x9bc>
 80226d2:	2b25      	cmp	r3, #37	; 0x25
 80226d4:	d11b      	bne.n	802270e <__strftime+0x56>
 80226d6:	7857      	ldrb	r7, [r2, #1]
 80226d8:	2f30      	cmp	r7, #48	; 0x30
 80226da:	d024      	beq.n	8022726 <__strftime+0x6e>
 80226dc:	2f2b      	cmp	r7, #43	; 0x2b
 80226de:	d022      	beq.n	8022726 <__strftime+0x6e>
 80226e0:	f102 0b01 	add.w	fp, r2, #1
 80226e4:	2700      	movs	r7, #0
 80226e6:	f89b 3000 	ldrb.w	r3, [fp]
 80226ea:	3b31      	subs	r3, #49	; 0x31
 80226ec:	2b08      	cmp	r3, #8
 80226ee:	d81d      	bhi.n	802272c <__strftime+0x74>
 80226f0:	4658      	mov	r0, fp
 80226f2:	220a      	movs	r2, #10
 80226f4:	a908      	add	r1, sp, #32
 80226f6:	f000 fdff 	bl	80232f8 <strtoul>
 80226fa:	f8dd b020 	ldr.w	fp, [sp, #32]
 80226fe:	4606      	mov	r6, r0
 8022700:	f89b 3000 	ldrb.w	r3, [fp]
 8022704:	2b45      	cmp	r3, #69	; 0x45
 8022706:	d113      	bne.n	8022730 <__strftime+0x78>
 8022708:	f10b 0b01 	add.w	fp, fp, #1
 802270c:	e012      	b.n	8022734 <__strftime+0x7c>
 802270e:	f108 31ff 	add.w	r1, r8, #4294967295
 8022712:	42a1      	cmp	r1, r4
 8022714:	d802      	bhi.n	802271c <__strftime+0x64>
 8022716:	2400      	movs	r4, #0
 8022718:	f000 bcb2 	b.w	8023080 <__strftime+0x9c8>
 802271c:	f809 3004 	strb.w	r3, [r9, r4]
 8022720:	3201      	adds	r2, #1
 8022722:	3401      	adds	r4, #1
 8022724:	e7d1      	b.n	80226ca <__strftime+0x12>
 8022726:	f102 0b02 	add.w	fp, r2, #2
 802272a:	e7dc      	b.n	80226e6 <__strftime+0x2e>
 802272c:	2600      	movs	r6, #0
 802272e:	e7e7      	b.n	8022700 <__strftime+0x48>
 8022730:	2b4f      	cmp	r3, #79	; 0x4f
 8022732:	d0e9      	beq.n	8022708 <__strftime+0x50>
 8022734:	f89b 0000 	ldrb.w	r0, [fp]
 8022738:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 802273c:	2b55      	cmp	r3, #85	; 0x55
 802273e:	d8ea      	bhi.n	8022716 <__strftime+0x5e>
 8022740:	a201      	add	r2, pc, #4	; (adr r2, 8022748 <__strftime+0x90>)
 8022742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022746:	bf00      	nop
 8022748:	08023067 	.word	0x08023067
 802274c:	08022717 	.word	0x08022717
 8022750:	08022717 	.word	0x08022717
 8022754:	08022717 	.word	0x08022717
 8022758:	08022717 	.word	0x08022717
 802275c:	08022717 	.word	0x08022717
 8022760:	08022717 	.word	0x08022717
 8022764:	08022717 	.word	0x08022717
 8022768:	08022717 	.word	0x08022717
 802276c:	08022717 	.word	0x08022717
 8022770:	08022717 	.word	0x08022717
 8022774:	08022717 	.word	0x08022717
 8022778:	08022717 	.word	0x08022717
 802277c:	08022717 	.word	0x08022717
 8022780:	08022717 	.word	0x08022717
 8022784:	08022717 	.word	0x08022717
 8022788:	08022717 	.word	0x08022717
 802278c:	08022717 	.word	0x08022717
 8022790:	08022717 	.word	0x08022717
 8022794:	08022717 	.word	0x08022717
 8022798:	08022717 	.word	0x08022717
 802279c:	08022717 	.word	0x08022717
 80227a0:	08022717 	.word	0x08022717
 80227a4:	08022717 	.word	0x08022717
 80227a8:	08022717 	.word	0x08022717
 80227ac:	08022717 	.word	0x08022717
 80227b0:	08022717 	.word	0x08022717
 80227b4:	08022717 	.word	0x08022717
 80227b8:	080228df 	.word	0x080228df
 80227bc:	08022939 	.word	0x08022939
 80227c0:	080229af 	.word	0x080229af
 80227c4:	08022a49 	.word	0x08022a49
 80227c8:	08022717 	.word	0x08022717
 80227cc:	08022a95 	.word	0x08022a95
 80227d0:	08022b75 	.word	0x08022b75
 80227d4:	08022c77 	.word	0x08022c77
 80227d8:	08022c85 	.word	0x08022c85
 80227dc:	08022717 	.word	0x08022717
 80227e0:	08022717 	.word	0x08022717
 80227e4:	08022717 	.word	0x08022717
 80227e8:	08022cb5 	.word	0x08022cb5
 80227ec:	08022717 	.word	0x08022717
 80227f0:	08022717 	.word	0x08022717
 80227f4:	08022ccd 	.word	0x08022ccd
 80227f8:	08022717 	.word	0x08022717
 80227fc:	08022d1b 	.word	0x08022d1b
 8022800:	08022e31 	.word	0x08022e31
 8022804:	08022e43 	.word	0x08022e43
 8022808:	08022e9b 	.word	0x08022e9b
 802280c:	08022eab 	.word	0x08022eab
 8022810:	08022f21 	.word	0x08022f21
 8022814:	080229a7 	.word	0x080229a7
 8022818:	08022f55 	.word	0x08022f55
 802281c:	08023013 	.word	0x08023013
 8022820:	08022717 	.word	0x08022717
 8022824:	08022717 	.word	0x08022717
 8022828:	08022717 	.word	0x08022717
 802282c:	08022717 	.word	0x08022717
 8022830:	08022717 	.word	0x08022717
 8022834:	08022717 	.word	0x08022717
 8022838:	080228a1 	.word	0x080228a1
 802283c:	0802290d 	.word	0x0802290d
 8022840:	08022967 	.word	0x08022967
 8022844:	08022a21 	.word	0x08022a21
 8022848:	08022a21 	.word	0x08022a21
 802284c:	08022717 	.word	0x08022717
 8022850:	08022add 	.word	0x08022add
 8022854:	0802290d 	.word	0x0802290d
 8022858:	08022717 	.word	0x08022717
 802285c:	08022ca7 	.word	0x08022ca7
 8022860:	08022c77 	.word	0x08022c77
 8022864:	08022c85 	.word	0x08022c85
 8022868:	08022caf 	.word	0x08022caf
 802286c:	08022cb9 	.word	0x08022cb9
 8022870:	08022717 	.word	0x08022717
 8022874:	08022ccd 	.word	0x08022ccd
 8022878:	08022717 	.word	0x08022717
 802287c:	08022997 	.word	0x08022997
 8022880:	08022d31 	.word	0x08022d31
 8022884:	08022e35 	.word	0x08022e35
 8022888:	08022e7d 	.word	0x08022e7d
 802288c:	08022717 	.word	0x08022717
 8022890:	08022f11 	.word	0x08022f11
 8022894:	0802299f 	.word	0x0802299f
 8022898:	08022f39 	.word	0x08022f39
 802289c:	08022fa5 	.word	0x08022fa5
 80228a0:	69ab      	ldr	r3, [r5, #24]
 80228a2:	4aa7      	ldr	r2, [pc, #668]	; (8022b40 <__strftime+0x488>)
 80228a4:	3318      	adds	r3, #24
 80228a6:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80228aa:	4630      	mov	r0, r6
 80228ac:	f7dd fcc6 	bl	800023c <strlen>
 80228b0:	3e01      	subs	r6, #1
 80228b2:	4420      	add	r0, r4
 80228b4:	f108 33ff 	add.w	r3, r8, #4294967295
 80228b8:	42a0      	cmp	r0, r4
 80228ba:	d107      	bne.n	80228cc <__strftime+0x214>
 80228bc:	f89b 3000 	ldrb.w	r3, [fp]
 80228c0:	2b00      	cmp	r3, #0
 80228c2:	f000 83d7 	beq.w	8023074 <__strftime+0x9bc>
 80228c6:	f10b 0201 	add.w	r2, fp, #1
 80228ca:	e6fe      	b.n	80226ca <__strftime+0x12>
 80228cc:	42a3      	cmp	r3, r4
 80228ce:	f67f af22 	bls.w	8022716 <__strftime+0x5e>
 80228d2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80228d6:	f809 2004 	strb.w	r2, [r9, r4]
 80228da:	3401      	adds	r4, #1
 80228dc:	e7ec      	b.n	80228b8 <__strftime+0x200>
 80228de:	69aa      	ldr	r2, [r5, #24]
 80228e0:	4b97      	ldr	r3, [pc, #604]	; (8022b40 <__strftime+0x488>)
 80228e2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80228e6:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 80228e8:	4630      	mov	r0, r6
 80228ea:	f7dd fca7 	bl	800023c <strlen>
 80228ee:	3e01      	subs	r6, #1
 80228f0:	4420      	add	r0, r4
 80228f2:	f108 33ff 	add.w	r3, r8, #4294967295
 80228f6:	42a0      	cmp	r0, r4
 80228f8:	d0e0      	beq.n	80228bc <__strftime+0x204>
 80228fa:	42a3      	cmp	r3, r4
 80228fc:	f67f af0b 	bls.w	8022716 <__strftime+0x5e>
 8022900:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8022904:	f809 2004 	strb.w	r2, [r9, r4]
 8022908:	3401      	adds	r4, #1
 802290a:	e7f4      	b.n	80228f6 <__strftime+0x23e>
 802290c:	4b8c      	ldr	r3, [pc, #560]	; (8022b40 <__strftime+0x488>)
 802290e:	692a      	ldr	r2, [r5, #16]
 8022910:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8022914:	4630      	mov	r0, r6
 8022916:	f7dd fc91 	bl	800023c <strlen>
 802291a:	3e01      	subs	r6, #1
 802291c:	4420      	add	r0, r4
 802291e:	f108 33ff 	add.w	r3, r8, #4294967295
 8022922:	42a0      	cmp	r0, r4
 8022924:	d0ca      	beq.n	80228bc <__strftime+0x204>
 8022926:	42a3      	cmp	r3, r4
 8022928:	f67f aef5 	bls.w	8022716 <__strftime+0x5e>
 802292c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8022930:	f809 2004 	strb.w	r2, [r9, r4]
 8022934:	3401      	adds	r4, #1
 8022936:	e7f4      	b.n	8022922 <__strftime+0x26a>
 8022938:	692b      	ldr	r3, [r5, #16]
 802293a:	4a81      	ldr	r2, [pc, #516]	; (8022b40 <__strftime+0x488>)
 802293c:	330c      	adds	r3, #12
 802293e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8022942:	4630      	mov	r0, r6
 8022944:	f7dd fc7a 	bl	800023c <strlen>
 8022948:	3e01      	subs	r6, #1
 802294a:	4420      	add	r0, r4
 802294c:	f108 33ff 	add.w	r3, r8, #4294967295
 8022950:	42a0      	cmp	r0, r4
 8022952:	d0b3      	beq.n	80228bc <__strftime+0x204>
 8022954:	42a3      	cmp	r3, r4
 8022956:	f67f aede 	bls.w	8022716 <__strftime+0x5e>
 802295a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 802295e:	f809 2004 	strb.w	r2, [r9, r4]
 8022962:	3401      	adds	r4, #1
 8022964:	e7f4      	b.n	8022950 <__strftime+0x298>
 8022966:	4b76      	ldr	r3, [pc, #472]	; (8022b40 <__strftime+0x488>)
 8022968:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 802296c:	4630      	mov	r0, r6
 802296e:	f7dd fc65 	bl	800023c <strlen>
 8022972:	7833      	ldrb	r3, [r6, #0]
 8022974:	2b00      	cmp	r3, #0
 8022976:	d0a1      	beq.n	80228bc <__strftime+0x204>
 8022978:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802297a:	9300      	str	r3, [sp, #0]
 802297c:	4632      	mov	r2, r6
 802297e:	462b      	mov	r3, r5
 8022980:	eba8 0104 	sub.w	r1, r8, r4
 8022984:	eb09 0004 	add.w	r0, r9, r4
 8022988:	f7ff fe96 	bl	80226b8 <__strftime>
 802298c:	2800      	cmp	r0, #0
 802298e:	f77f aec2 	ble.w	8022716 <__strftime+0x5e>
 8022992:	4404      	add	r4, r0
 8022994:	e792      	b.n	80228bc <__strftime+0x204>
 8022996:	4b6a      	ldr	r3, [pc, #424]	; (8022b40 <__strftime+0x488>)
 8022998:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 802299c:	e7e6      	b.n	802296c <__strftime+0x2b4>
 802299e:	4b68      	ldr	r3, [pc, #416]	; (8022b40 <__strftime+0x488>)
 80229a0:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 80229a4:	e7e2      	b.n	802296c <__strftime+0x2b4>
 80229a6:	4b66      	ldr	r3, [pc, #408]	; (8022b40 <__strftime+0x488>)
 80229a8:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 80229ac:	e7de      	b.n	802296c <__strftime+0x2b4>
 80229ae:	4965      	ldr	r1, [pc, #404]	; (8022b44 <__strftime+0x48c>)
 80229b0:	f8d5 a014 	ldr.w	sl, [r5, #20]
 80229b4:	458a      	cmp	sl, r1
 80229b6:	bfac      	ite	ge
 80229b8:	2100      	movge	r1, #0
 80229ba:	2101      	movlt	r1, #1
 80229bc:	f1ba 0f00 	cmp.w	sl, #0
 80229c0:	db0e      	blt.n	80229e0 <__strftime+0x328>
 80229c2:	2064      	movs	r0, #100	; 0x64
 80229c4:	fb9a f0f0 	sdiv	r0, sl, r0
 80229c8:	3013      	adds	r0, #19
 80229ca:	b19f      	cbz	r7, 80229f4 <__strftime+0x33c>
 80229cc:	2863      	cmp	r0, #99	; 0x63
 80229ce:	dd25      	ble.n	8022a1c <__strftime+0x364>
 80229d0:	4a5d      	ldr	r2, [pc, #372]	; (8022b48 <__strftime+0x490>)
 80229d2:	4b5e      	ldr	r3, [pc, #376]	; (8022b4c <__strftime+0x494>)
 80229d4:	2f2b      	cmp	r7, #43	; 0x2b
 80229d6:	bf14      	ite	ne
 80229d8:	4617      	movne	r7, r2
 80229da:	461f      	moveq	r7, r3
 80229dc:	4a5c      	ldr	r2, [pc, #368]	; (8022b50 <__strftime+0x498>)
 80229de:	e00b      	b.n	80229f8 <__strftime+0x340>
 80229e0:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 80229e4:	9105      	str	r1, [sp, #20]
 80229e6:	f001 f835 	bl	8023a54 <abs>
 80229ea:	2364      	movs	r3, #100	; 0x64
 80229ec:	9905      	ldr	r1, [sp, #20]
 80229ee:	fb90 f0f3 	sdiv	r0, r0, r3
 80229f2:	e7ea      	b.n	80229ca <__strftime+0x312>
 80229f4:	4f54      	ldr	r7, [pc, #336]	; (8022b48 <__strftime+0x490>)
 80229f6:	4a57      	ldr	r2, [pc, #348]	; (8022b54 <__strftime+0x49c>)
 80229f8:	4b57      	ldr	r3, [pc, #348]	; (8022b58 <__strftime+0x4a0>)
 80229fa:	9001      	str	r0, [sp, #4]
 80229fc:	2e02      	cmp	r6, #2
 80229fe:	bf2c      	ite	cs
 8022a00:	ebc1 0606 	rsbcs	r6, r1, r6
 8022a04:	f1c1 0602 	rsbcc	r6, r1, #2
 8022a08:	494e      	ldr	r1, [pc, #312]	; (8022b44 <__strftime+0x48c>)
 8022a0a:	9600      	str	r6, [sp, #0]
 8022a0c:	458a      	cmp	sl, r1
 8022a0e:	bfa8      	it	ge
 8022a10:	463b      	movge	r3, r7
 8022a12:	eba8 0104 	sub.w	r1, r8, r4
 8022a16:	eb09 0004 	add.w	r0, r9, r4
 8022a1a:	e02a      	b.n	8022a72 <__strftime+0x3ba>
 8022a1c:	4f4a      	ldr	r7, [pc, #296]	; (8022b48 <__strftime+0x490>)
 8022a1e:	e7dd      	b.n	80229dc <__strftime+0x324>
 8022a20:	494e      	ldr	r1, [pc, #312]	; (8022b5c <__strftime+0x4a4>)
 8022a22:	4a4f      	ldr	r2, [pc, #316]	; (8022b60 <__strftime+0x4a8>)
 8022a24:	68eb      	ldr	r3, [r5, #12]
 8022a26:	2864      	cmp	r0, #100	; 0x64
 8022a28:	bf08      	it	eq
 8022a2a:	460a      	moveq	r2, r1
 8022a2c:	eba8 0104 	sub.w	r1, r8, r4
 8022a30:	eb09 0004 	add.w	r0, r9, r4
 8022a34:	f001 fe9e 	bl	8024774 <sniprintf>
 8022a38:	2800      	cmp	r0, #0
 8022a3a:	f6ff ae6c 	blt.w	8022716 <__strftime+0x5e>
 8022a3e:	4404      	add	r4, r0
 8022a40:	45a0      	cmp	r8, r4
 8022a42:	f63f af3b 	bhi.w	80228bc <__strftime+0x204>
 8022a46:	e666      	b.n	8022716 <__strftime+0x5e>
 8022a48:	6968      	ldr	r0, [r5, #20]
 8022a4a:	692b      	ldr	r3, [r5, #16]
 8022a4c:	68ef      	ldr	r7, [r5, #12]
 8022a4e:	2800      	cmp	r0, #0
 8022a50:	eb09 0604 	add.w	r6, r9, r4
 8022a54:	eba8 0104 	sub.w	r1, r8, r4
 8022a58:	f103 0301 	add.w	r3, r3, #1
 8022a5c:	db0c      	blt.n	8022a78 <__strftime+0x3c0>
 8022a5e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8022a62:	fb90 f2fc 	sdiv	r2, r0, ip
 8022a66:	fb0c 0212 	mls	r2, ip, r2, r0
 8022a6a:	e9cd 7200 	strd	r7, r2, [sp]
 8022a6e:	4a3d      	ldr	r2, [pc, #244]	; (8022b64 <__strftime+0x4ac>)
 8022a70:	4630      	mov	r0, r6
 8022a72:	f001 fe7f 	bl	8024774 <sniprintf>
 8022a76:	e7df      	b.n	8022a38 <__strftime+0x380>
 8022a78:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8022a7c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8022a80:	f000 ffe8 	bl	8023a54 <abs>
 8022a84:	2264      	movs	r2, #100	; 0x64
 8022a86:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8022a8a:	fb90 fcf2 	sdiv	ip, r0, r2
 8022a8e:	fb0c 0212 	mls	r2, ip, r2, r0
 8022a92:	e7ea      	b.n	8022a6a <__strftime+0x3b2>
 8022a94:	2325      	movs	r3, #37	; 0x25
 8022a96:	f88d 3020 	strb.w	r3, [sp, #32]
 8022a9a:	b187      	cbz	r7, 8022abe <__strftime+0x406>
 8022a9c:	2e06      	cmp	r6, #6
 8022a9e:	bf38      	it	cc
 8022aa0:	2606      	movcc	r6, #6
 8022aa2:	1fb3      	subs	r3, r6, #6
 8022aa4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8022aa8:	d10c      	bne.n	8022ac4 <__strftime+0x40c>
 8022aaa:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8022aae:	492e      	ldr	r1, [pc, #184]	; (8022b68 <__strftime+0x4b0>)
 8022ab0:	f7ff fd97 	bl	80225e2 <strcpy>
 8022ab4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022ab6:	9300      	str	r3, [sp, #0]
 8022ab8:	aa08      	add	r2, sp, #32
 8022aba:	462b      	mov	r3, r5
 8022abc:	e760      	b.n	8022980 <__strftime+0x2c8>
 8022abe:	272b      	movs	r7, #43	; 0x2b
 8022ac0:	260a      	movs	r6, #10
 8022ac2:	e7ee      	b.n	8022aa2 <__strftime+0x3ea>
 8022ac4:	4a29      	ldr	r2, [pc, #164]	; (8022b6c <__strftime+0x4b4>)
 8022ac6:	211e      	movs	r1, #30
 8022ac8:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8022acc:	f001 fe52 	bl	8024774 <sniprintf>
 8022ad0:	2800      	cmp	r0, #0
 8022ad2:	ddea      	ble.n	8022aaa <__strftime+0x3f2>
 8022ad4:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8022ad8:	4418      	add	r0, r3
 8022ada:	e7e8      	b.n	8022aae <__strftime+0x3f6>
 8022adc:	4628      	mov	r0, r5
 8022ade:	f7ff fd89 	bl	80225f4 <iso_year_adjust>
 8022ae2:	4606      	mov	r6, r0
 8022ae4:	6968      	ldr	r0, [r5, #20]
 8022ae6:	2800      	cmp	r0, #0
 8022ae8:	db11      	blt.n	8022b0e <__strftime+0x456>
 8022aea:	2264      	movs	r2, #100	; 0x64
 8022aec:	fb90 f3f2 	sdiv	r3, r0, r2
 8022af0:	fb02 0313 	mls	r3, r2, r3, r0
 8022af4:	441e      	add	r6, r3
 8022af6:	2364      	movs	r3, #100	; 0x64
 8022af8:	fb96 f0f3 	sdiv	r0, r6, r3
 8022afc:	fb03 6610 	mls	r6, r3, r0, r6
 8022b00:	441e      	add	r6, r3
 8022b02:	fbb6 f2f3 	udiv	r2, r6, r3
 8022b06:	fb03 6312 	mls	r3, r3, r2, r6
 8022b0a:	4a14      	ldr	r2, [pc, #80]	; (8022b5c <__strftime+0x4a4>)
 8022b0c:	e78e      	b.n	8022a2c <__strftime+0x374>
 8022b0e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8022b12:	f000 ff9f 	bl	8023a54 <abs>
 8022b16:	2364      	movs	r3, #100	; 0x64
 8022b18:	2e00      	cmp	r6, #0
 8022b1a:	fb90 f2f3 	sdiv	r2, r0, r3
 8022b1e:	fb02 0313 	mls	r3, r2, r3, r0
 8022b22:	da05      	bge.n	8022b30 <__strftime+0x478>
 8022b24:	6969      	ldr	r1, [r5, #20]
 8022b26:	4a12      	ldr	r2, [pc, #72]	; (8022b70 <__strftime+0x4b8>)
 8022b28:	4291      	cmp	r1, r2
 8022b2a:	bfb8      	it	lt
 8022b2c:	2601      	movlt	r6, #1
 8022b2e:	e7e1      	b.n	8022af4 <__strftime+0x43c>
 8022b30:	d0e0      	beq.n	8022af4 <__strftime+0x43c>
 8022b32:	6969      	ldr	r1, [r5, #20]
 8022b34:	4a03      	ldr	r2, [pc, #12]	; (8022b44 <__strftime+0x48c>)
 8022b36:	4291      	cmp	r1, r2
 8022b38:	bfb8      	it	lt
 8022b3a:	f04f 36ff 	movlt.w	r6, #4294967295
 8022b3e:	e7d9      	b.n	8022af4 <__strftime+0x43c>
 8022b40:	0802bd24 	.word	0x0802bd24
 8022b44:	fffff894 	.word	0xfffff894
 8022b48:	0802be97 	.word	0x0802be97
 8022b4c:	0802bbae 	.word	0x0802bbae
 8022b50:	0802bba6 	.word	0x0802bba6
 8022b54:	0802bb9f 	.word	0x0802bb9f
 8022b58:	0802bfd7 	.word	0x0802bfd7
 8022b5c:	0802bbbe 	.word	0x0802bbbe
 8022b60:	0802bbb0 	.word	0x0802bbb0
 8022b64:	0802bbb4 	.word	0x0802bbb4
 8022b68:	0802bbc7 	.word	0x0802bbc7
 8022b6c:	0802bbc3 	.word	0x0802bbc3
 8022b70:	fffff895 	.word	0xfffff895
 8022b74:	4bb6      	ldr	r3, [pc, #728]	; (8022e50 <__strftime+0x798>)
 8022b76:	6969      	ldr	r1, [r5, #20]
 8022b78:	4299      	cmp	r1, r3
 8022b7a:	bfac      	ite	ge
 8022b7c:	2300      	movge	r3, #0
 8022b7e:	2301      	movlt	r3, #1
 8022b80:	4628      	mov	r0, r5
 8022b82:	e9cd 3105 	strd	r3, r1, [sp, #20]
 8022b86:	f7ff fd35 	bl	80225f4 <iso_year_adjust>
 8022b8a:	9906      	ldr	r1, [sp, #24]
 8022b8c:	2900      	cmp	r1, #0
 8022b8e:	4682      	mov	sl, r0
 8022b90:	db27      	blt.n	8022be2 <__strftime+0x52a>
 8022b92:	2264      	movs	r2, #100	; 0x64
 8022b94:	fb91 f2f2 	sdiv	r2, r1, r2
 8022b98:	3213      	adds	r2, #19
 8022b9a:	6968      	ldr	r0, [r5, #20]
 8022b9c:	2800      	cmp	r0, #0
 8022b9e:	db2b      	blt.n	8022bf8 <__strftime+0x540>
 8022ba0:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8022ba4:	fb90 fefc 	sdiv	lr, r0, ip
 8022ba8:	fb0c 001e 	mls	r0, ip, lr, r0
 8022bac:	f1ba 0f00 	cmp.w	sl, #0
 8022bb0:	da31      	bge.n	8022c16 <__strftime+0x55e>
 8022bb2:	6969      	ldr	r1, [r5, #20]
 8022bb4:	4ba7      	ldr	r3, [pc, #668]	; (8022e54 <__strftime+0x79c>)
 8022bb6:	4299      	cmp	r1, r3
 8022bb8:	db38      	blt.n	8022c2c <__strftime+0x574>
 8022bba:	eb0a 0300 	add.w	r3, sl, r0
 8022bbe:	1c59      	adds	r1, r3, #1
 8022bc0:	d139      	bne.n	8022c36 <__strftime+0x57e>
 8022bc2:	3a01      	subs	r2, #1
 8022bc4:	2363      	movs	r3, #99	; 0x63
 8022bc6:	2064      	movs	r0, #100	; 0x64
 8022bc8:	fb00 3202 	mla	r2, r0, r2, r3
 8022bcc:	9b05      	ldr	r3, [sp, #20]
 8022bce:	2b00      	cmp	r3, #0
 8022bd0:	d036      	beq.n	8022c40 <__strftime+0x588>
 8022bd2:	232d      	movs	r3, #45	; 0x2d
 8022bd4:	f88d 3020 	strb.w	r3, [sp, #32]
 8022bd8:	b106      	cbz	r6, 8022bdc <__strftime+0x524>
 8022bda:	3e01      	subs	r6, #1
 8022bdc:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8022be0:	e038      	b.n	8022c54 <__strftime+0x59c>
 8022be2:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8022be6:	9106      	str	r1, [sp, #24]
 8022be8:	f000 ff34 	bl	8023a54 <abs>
 8022bec:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8022bf0:	9906      	ldr	r1, [sp, #24]
 8022bf2:	fb90 f2fc 	sdiv	r2, r0, ip
 8022bf6:	e7d0      	b.n	8022b9a <__strftime+0x4e2>
 8022bf8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8022bfc:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8022c00:	f000 ff28 	bl	8023a54 <abs>
 8022c04:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8022c08:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8022c0c:	fb90 fefc 	sdiv	lr, r0, ip
 8022c10:	fb0e 001c 	mls	r0, lr, ip, r0
 8022c14:	e7ca      	b.n	8022bac <__strftime+0x4f4>
 8022c16:	d0d0      	beq.n	8022bba <__strftime+0x502>
 8022c18:	4b8d      	ldr	r3, [pc, #564]	; (8022e50 <__strftime+0x798>)
 8022c1a:	4299      	cmp	r1, r3
 8022c1c:	bfb4      	ite	lt
 8022c1e:	2301      	movlt	r3, #1
 8022c20:	2300      	movge	r3, #0
 8022c22:	9305      	str	r3, [sp, #20]
 8022c24:	bfb8      	it	lt
 8022c26:	f04f 3aff 	movlt.w	sl, #4294967295
 8022c2a:	e7c6      	b.n	8022bba <__strftime+0x502>
 8022c2c:	f04f 0a01 	mov.w	sl, #1
 8022c30:	f8cd a014 	str.w	sl, [sp, #20]
 8022c34:	e7c1      	b.n	8022bba <__strftime+0x502>
 8022c36:	2b64      	cmp	r3, #100	; 0x64
 8022c38:	bf04      	itt	eq
 8022c3a:	3201      	addeq	r2, #1
 8022c3c:	2300      	moveq	r3, #0
 8022c3e:	e7c2      	b.n	8022bc6 <__strftime+0x50e>
 8022c40:	2f2b      	cmp	r7, #43	; 0x2b
 8022c42:	d106      	bne.n	8022c52 <__strftime+0x59a>
 8022c44:	f242 730f 	movw	r3, #9999	; 0x270f
 8022c48:	429a      	cmp	r2, r3
 8022c4a:	d902      	bls.n	8022c52 <__strftime+0x59a>
 8022c4c:	f88d 7020 	strb.w	r7, [sp, #32]
 8022c50:	e7c2      	b.n	8022bd8 <__strftime+0x520>
 8022c52:	ab08      	add	r3, sp, #32
 8022c54:	2125      	movs	r1, #37	; 0x25
 8022c56:	7019      	strb	r1, [r3, #0]
 8022c58:	b94f      	cbnz	r7, 8022c6e <__strftime+0x5b6>
 8022c5a:	1c58      	adds	r0, r3, #1
 8022c5c:	497e      	ldr	r1, [pc, #504]	; (8022e58 <__strftime+0x7a0>)
 8022c5e:	9205      	str	r2, [sp, #20]
 8022c60:	f7ff fcbf 	bl	80225e2 <strcpy>
 8022c64:	9a05      	ldr	r2, [sp, #20]
 8022c66:	9200      	str	r2, [sp, #0]
 8022c68:	4633      	mov	r3, r6
 8022c6a:	aa08      	add	r2, sp, #32
 8022c6c:	e059      	b.n	8022d22 <__strftime+0x66a>
 8022c6e:	2130      	movs	r1, #48	; 0x30
 8022c70:	1c98      	adds	r0, r3, #2
 8022c72:	7059      	strb	r1, [r3, #1]
 8022c74:	e7f2      	b.n	8022c5c <__strftime+0x5a4>
 8022c76:	4979      	ldr	r1, [pc, #484]	; (8022e5c <__strftime+0x7a4>)
 8022c78:	4a79      	ldr	r2, [pc, #484]	; (8022e60 <__strftime+0x7a8>)
 8022c7a:	68ab      	ldr	r3, [r5, #8]
 8022c7c:	286b      	cmp	r0, #107	; 0x6b
 8022c7e:	bf08      	it	eq
 8022c80:	460a      	moveq	r2, r1
 8022c82:	e6d3      	b.n	8022a2c <__strftime+0x374>
 8022c84:	68ab      	ldr	r3, [r5, #8]
 8022c86:	b163      	cbz	r3, 8022ca2 <__strftime+0x5ea>
 8022c88:	2b0c      	cmp	r3, #12
 8022c8a:	d004      	beq.n	8022c96 <__strftime+0x5de>
 8022c8c:	210c      	movs	r1, #12
 8022c8e:	fb93 f2f1 	sdiv	r2, r3, r1
 8022c92:	fb01 3312 	mls	r3, r1, r2, r3
 8022c96:	4972      	ldr	r1, [pc, #456]	; (8022e60 <__strftime+0x7a8>)
 8022c98:	4a70      	ldr	r2, [pc, #448]	; (8022e5c <__strftime+0x7a4>)
 8022c9a:	2849      	cmp	r0, #73	; 0x49
 8022c9c:	bf08      	it	eq
 8022c9e:	460a      	moveq	r2, r1
 8022ca0:	e6c4      	b.n	8022a2c <__strftime+0x374>
 8022ca2:	230c      	movs	r3, #12
 8022ca4:	e7f7      	b.n	8022c96 <__strftime+0x5de>
 8022ca6:	69eb      	ldr	r3, [r5, #28]
 8022ca8:	4a6e      	ldr	r2, [pc, #440]	; (8022e64 <__strftime+0x7ac>)
 8022caa:	3301      	adds	r3, #1
 8022cac:	e6be      	b.n	8022a2c <__strftime+0x374>
 8022cae:	692b      	ldr	r3, [r5, #16]
 8022cb0:	3301      	adds	r3, #1
 8022cb2:	e72a      	b.n	8022b0a <__strftime+0x452>
 8022cb4:	686b      	ldr	r3, [r5, #4]
 8022cb6:	e728      	b.n	8022b0a <__strftime+0x452>
 8022cb8:	f108 33ff 	add.w	r3, r8, #4294967295
 8022cbc:	42a3      	cmp	r3, r4
 8022cbe:	f67f ad2a 	bls.w	8022716 <__strftime+0x5e>
 8022cc2:	230a      	movs	r3, #10
 8022cc4:	f809 3004 	strb.w	r3, [r9, r4]
 8022cc8:	3401      	adds	r4, #1
 8022cca:	e5f7      	b.n	80228bc <__strftime+0x204>
 8022ccc:	68ab      	ldr	r3, [r5, #8]
 8022cce:	2b0b      	cmp	r3, #11
 8022cd0:	bfcc      	ite	gt
 8022cd2:	22a4      	movgt	r2, #164	; 0xa4
 8022cd4:	22a0      	movle	r2, #160	; 0xa0
 8022cd6:	4b64      	ldr	r3, [pc, #400]	; (8022e68 <__strftime+0x7b0>)
 8022cd8:	4413      	add	r3, r2
 8022cda:	685e      	ldr	r6, [r3, #4]
 8022cdc:	4630      	mov	r0, r6
 8022cde:	f7dd faad 	bl	800023c <strlen>
 8022ce2:	1e72      	subs	r2, r6, #1
 8022ce4:	4420      	add	r0, r4
 8022ce6:	f108 36ff 	add.w	r6, r8, #4294967295
 8022cea:	42a0      	cmp	r0, r4
 8022cec:	f43f ade6 	beq.w	80228bc <__strftime+0x204>
 8022cf0:	42a6      	cmp	r6, r4
 8022cf2:	f67f ad10 	bls.w	8022716 <__strftime+0x5e>
 8022cf6:	f89b 1000 	ldrb.w	r1, [fp]
 8022cfa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8022cfe:	2950      	cmp	r1, #80	; 0x50
 8022d00:	d107      	bne.n	8022d12 <__strftime+0x65a>
 8022d02:	495a      	ldr	r1, [pc, #360]	; (8022e6c <__strftime+0x7b4>)
 8022d04:	5cc9      	ldrb	r1, [r1, r3]
 8022d06:	f001 0103 	and.w	r1, r1, #3
 8022d0a:	2901      	cmp	r1, #1
 8022d0c:	bf08      	it	eq
 8022d0e:	3320      	addeq	r3, #32
 8022d10:	b2db      	uxtb	r3, r3
 8022d12:	f809 3004 	strb.w	r3, [r9, r4]
 8022d16:	3401      	adds	r4, #1
 8022d18:	e7e7      	b.n	8022cea <__strftime+0x632>
 8022d1a:	686b      	ldr	r3, [r5, #4]
 8022d1c:	9300      	str	r3, [sp, #0]
 8022d1e:	4a54      	ldr	r2, [pc, #336]	; (8022e70 <__strftime+0x7b8>)
 8022d20:	68ab      	ldr	r3, [r5, #8]
 8022d22:	eba8 0104 	sub.w	r1, r8, r4
 8022d26:	eb09 0004 	add.w	r0, r9, r4
 8022d2a:	f001 fd23 	bl	8024774 <sniprintf>
 8022d2e:	e683      	b.n	8022a38 <__strftime+0x380>
 8022d30:	6a2b      	ldr	r3, [r5, #32]
 8022d32:	2b00      	cmp	r3, #0
 8022d34:	db79      	blt.n	8022e2a <__strftime+0x772>
 8022d36:	f000 fb91 	bl	802345c <__tz_lock>
 8022d3a:	9b04      	ldr	r3, [sp, #16]
 8022d3c:	b90b      	cbnz	r3, 8022d42 <__strftime+0x68a>
 8022d3e:	f000 fb99 	bl	8023474 <_tzset_unlocked>
 8022d42:	f000 ff55 	bl	8023bf0 <__gettzinfo>
 8022d46:	6a2b      	ldr	r3, [r5, #32]
 8022d48:	2b00      	cmp	r3, #0
 8022d4a:	bfcc      	ite	gt
 8022d4c:	2350      	movgt	r3, #80	; 0x50
 8022d4e:	2328      	movle	r3, #40	; 0x28
 8022d50:	58c3      	ldr	r3, [r0, r3]
 8022d52:	f1c3 0a00 	rsb	sl, r3, #0
 8022d56:	f000 fb87 	bl	8023468 <__tz_unlock>
 8022d5a:	2301      	movs	r3, #1
 8022d5c:	9304      	str	r3, [sp, #16]
 8022d5e:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8022d62:	4662      	mov	r2, ip
 8022d64:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8022d68:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8022d6c:	9602      	str	r6, [sp, #8]
 8022d6e:	f143 36ff 	adc.w	r6, r3, #4294967295
 8022d72:	9603      	str	r6, [sp, #12]
 8022d74:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8022d78:	2e00      	cmp	r6, #0
 8022d7a:	f177 0600 	sbcs.w	r6, r7, #0
 8022d7e:	eba8 0104 	sub.w	r1, r8, r4
 8022d82:	eb09 0004 	add.w	r0, r9, r4
 8022d86:	da05      	bge.n	8022d94 <__strftime+0x6dc>
 8022d88:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 8022d8c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8022d90:	9602      	str	r6, [sp, #8]
 8022d92:	9303      	str	r3, [sp, #12]
 8022d94:	9b02      	ldr	r3, [sp, #8]
 8022d96:	089e      	lsrs	r6, r3, #2
 8022d98:	9b03      	ldr	r3, [sp, #12]
 8022d9a:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 8022d9e:	f10c 32ff 	add.w	r2, ip, #4294967295
 8022da2:	109f      	asrs	r7, r3, #2
 8022da4:	2364      	movs	r3, #100	; 0x64
 8022da6:	fb92 f3f3 	sdiv	r3, r2, r3
 8022daa:	1af6      	subs	r6, r6, r3
 8022dac:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 8022db0:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 8022db4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8022db8:	fb92 f3f3 	sdiv	r3, r2, r3
 8022dbc:	18f6      	adds	r6, r6, r3
 8022dbe:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8022dc2:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8022dc6:	f240 136d 	movw	r3, #365	; 0x16d
 8022dca:	fb03 fc0c 	mul.w	ip, r3, ip
 8022dce:	69eb      	ldr	r3, [r5, #28]
 8022dd0:	eb16 060c 	adds.w	r6, r6, ip
 8022dd4:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8022dd8:	18f6      	adds	r6, r6, r3
 8022dda:	f04f 0c18 	mov.w	ip, #24
 8022dde:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8022de2:	fba6 230c 	umull	r2, r3, r6, ip
 8022de6:	68ae      	ldr	r6, [r5, #8]
 8022de8:	fb0c 3307 	mla	r3, ip, r7, r3
 8022dec:	1992      	adds	r2, r2, r6
 8022dee:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8022df2:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8022df6:	fba2 670c 	umull	r6, r7, r2, ip
 8022dfa:	fb0c 7703 	mla	r7, ip, r3, r7
 8022dfe:	686b      	ldr	r3, [r5, #4]
 8022e00:	18f6      	adds	r6, r6, r3
 8022e02:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8022e06:	fba6 230c 	umull	r2, r3, r6, ip
 8022e0a:	682e      	ldr	r6, [r5, #0]
 8022e0c:	fb0c 3307 	mla	r3, ip, r7, r3
 8022e10:	1992      	adds	r2, r2, r6
 8022e12:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8022e16:	ebb2 020a 	subs.w	r2, r2, sl
 8022e1a:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 8022e1e:	e9cd 2300 	strd	r2, r3, [sp]
 8022e22:	4a14      	ldr	r2, [pc, #80]	; (8022e74 <__strftime+0x7bc>)
 8022e24:	f001 fca6 	bl	8024774 <sniprintf>
 8022e28:	e606      	b.n	8022a38 <__strftime+0x380>
 8022e2a:	f04f 0a00 	mov.w	sl, #0
 8022e2e:	e796      	b.n	8022d5e <__strftime+0x6a6>
 8022e30:	682b      	ldr	r3, [r5, #0]
 8022e32:	e66a      	b.n	8022b0a <__strftime+0x452>
 8022e34:	f108 33ff 	add.w	r3, r8, #4294967295
 8022e38:	42a3      	cmp	r3, r4
 8022e3a:	f67f ac6c 	bls.w	8022716 <__strftime+0x5e>
 8022e3e:	2309      	movs	r3, #9
 8022e40:	e740      	b.n	8022cc4 <__strftime+0x60c>
 8022e42:	682b      	ldr	r3, [r5, #0]
 8022e44:	9301      	str	r3, [sp, #4]
 8022e46:	686b      	ldr	r3, [r5, #4]
 8022e48:	9300      	str	r3, [sp, #0]
 8022e4a:	4a0b      	ldr	r2, [pc, #44]	; (8022e78 <__strftime+0x7c0>)
 8022e4c:	68ab      	ldr	r3, [r5, #8]
 8022e4e:	e5e0      	b.n	8022a12 <__strftime+0x35a>
 8022e50:	fffff894 	.word	0xfffff894
 8022e54:	fffff895 	.word	0xfffff895
 8022e58:	0802bbcf 	.word	0x0802bbcf
 8022e5c:	0802bbb0 	.word	0x0802bbb0
 8022e60:	0802bbbe 	.word	0x0802bbbe
 8022e64:	0802bbd3 	.word	0x0802bbd3
 8022e68:	0802bd24 	.word	0x0802bd24
 8022e6c:	0802be99 	.word	0x0802be99
 8022e70:	0802bbe2 	.word	0x0802bbe2
 8022e74:	0802bbd8 	.word	0x0802bbd8
 8022e78:	0802bbdd 	.word	0x0802bbdd
 8022e7c:	f108 33ff 	add.w	r3, r8, #4294967295
 8022e80:	42a3      	cmp	r3, r4
 8022e82:	f67f ac48 	bls.w	8022716 <__strftime+0x5e>
 8022e86:	69ab      	ldr	r3, [r5, #24]
 8022e88:	eb09 0204 	add.w	r2, r9, r4
 8022e8c:	3401      	adds	r4, #1
 8022e8e:	b913      	cbnz	r3, 8022e96 <__strftime+0x7de>
 8022e90:	2337      	movs	r3, #55	; 0x37
 8022e92:	7013      	strb	r3, [r2, #0]
 8022e94:	e512      	b.n	80228bc <__strftime+0x204>
 8022e96:	3330      	adds	r3, #48	; 0x30
 8022e98:	e7fb      	b.n	8022e92 <__strftime+0x7da>
 8022e9a:	69eb      	ldr	r3, [r5, #28]
 8022e9c:	69aa      	ldr	r2, [r5, #24]
 8022e9e:	3307      	adds	r3, #7
 8022ea0:	1a9b      	subs	r3, r3, r2
 8022ea2:	2207      	movs	r2, #7
 8022ea4:	fb93 f3f2 	sdiv	r3, r3, r2
 8022ea8:	e62f      	b.n	8022b0a <__strftime+0x452>
 8022eaa:	4628      	mov	r0, r5
 8022eac:	f7ff fba2 	bl	80225f4 <iso_year_adjust>
 8022eb0:	69aa      	ldr	r2, [r5, #24]
 8022eb2:	b132      	cbz	r2, 8022ec2 <__strftime+0x80a>
 8022eb4:	3a01      	subs	r2, #1
 8022eb6:	2800      	cmp	r0, #0
 8022eb8:	dc28      	bgt.n	8022f0c <__strftime+0x854>
 8022eba:	69eb      	ldr	r3, [r5, #28]
 8022ebc:	d103      	bne.n	8022ec6 <__strftime+0x80e>
 8022ebe:	330a      	adds	r3, #10
 8022ec0:	e7ee      	b.n	8022ea0 <__strftime+0x7e8>
 8022ec2:	2206      	movs	r2, #6
 8022ec4:	e7f7      	b.n	8022eb6 <__strftime+0x7fe>
 8022ec6:	6968      	ldr	r0, [r5, #20]
 8022ec8:	2800      	cmp	r0, #0
 8022eca:	eba2 0303 	sub.w	r3, r2, r3
 8022ece:	f240 726b 	movw	r2, #1899	; 0x76b
 8022ed2:	bfa8      	it	ge
 8022ed4:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8022ed8:	4410      	add	r0, r2
 8022eda:	0782      	lsls	r2, r0, #30
 8022edc:	d105      	bne.n	8022eea <__strftime+0x832>
 8022ede:	2264      	movs	r2, #100	; 0x64
 8022ee0:	fb90 f1f2 	sdiv	r1, r0, r2
 8022ee4:	fb02 0111 	mls	r1, r2, r1, r0
 8022ee8:	b971      	cbnz	r1, 8022f08 <__strftime+0x850>
 8022eea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8022eee:	fb90 f2f1 	sdiv	r2, r0, r1
 8022ef2:	fb01 0212 	mls	r2, r1, r2, r0
 8022ef6:	fab2 f282 	clz	r2, r2
 8022efa:	0952      	lsrs	r2, r2, #5
 8022efc:	1a9a      	subs	r2, r3, r2
 8022efe:	2a05      	cmp	r2, #5
 8022f00:	bfb4      	ite	lt
 8022f02:	2335      	movlt	r3, #53	; 0x35
 8022f04:	2334      	movge	r3, #52	; 0x34
 8022f06:	e600      	b.n	8022b0a <__strftime+0x452>
 8022f08:	2201      	movs	r2, #1
 8022f0a:	e7f7      	b.n	8022efc <__strftime+0x844>
 8022f0c:	2301      	movs	r3, #1
 8022f0e:	e5fc      	b.n	8022b0a <__strftime+0x452>
 8022f10:	f108 33ff 	add.w	r3, r8, #4294967295
 8022f14:	42a3      	cmp	r3, r4
 8022f16:	f67f abfe 	bls.w	8022716 <__strftime+0x5e>
 8022f1a:	69ab      	ldr	r3, [r5, #24]
 8022f1c:	3330      	adds	r3, #48	; 0x30
 8022f1e:	e6d1      	b.n	8022cc4 <__strftime+0x60c>
 8022f20:	69ab      	ldr	r3, [r5, #24]
 8022f22:	b13b      	cbz	r3, 8022f34 <__strftime+0x87c>
 8022f24:	3b01      	subs	r3, #1
 8022f26:	69ea      	ldr	r2, [r5, #28]
 8022f28:	3207      	adds	r2, #7
 8022f2a:	1ad2      	subs	r2, r2, r3
 8022f2c:	2307      	movs	r3, #7
 8022f2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022f32:	e5ea      	b.n	8022b0a <__strftime+0x452>
 8022f34:	2306      	movs	r3, #6
 8022f36:	e7f6      	b.n	8022f26 <__strftime+0x86e>
 8022f38:	6968      	ldr	r0, [r5, #20]
 8022f3a:	2800      	cmp	r0, #0
 8022f3c:	db05      	blt.n	8022f4a <__strftime+0x892>
 8022f3e:	2264      	movs	r2, #100	; 0x64
 8022f40:	fb90 f3f2 	sdiv	r3, r0, r2
 8022f44:	fb03 0312 	mls	r3, r3, r2, r0
 8022f48:	e5df      	b.n	8022b0a <__strftime+0x452>
 8022f4a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8022f4e:	f000 fd81 	bl	8023a54 <abs>
 8022f52:	e7f4      	b.n	8022f3e <__strftime+0x886>
 8022f54:	696b      	ldr	r3, [r5, #20]
 8022f56:	4a4c      	ldr	r2, [pc, #304]	; (8023088 <__strftime+0x9d0>)
 8022f58:	4293      	cmp	r3, r2
 8022f5a:	da09      	bge.n	8022f70 <__strftime+0x8b8>
 8022f5c:	212d      	movs	r1, #45	; 0x2d
 8022f5e:	f88d 1020 	strb.w	r1, [sp, #32]
 8022f62:	eba2 0a03 	sub.w	sl, r2, r3
 8022f66:	b106      	cbz	r6, 8022f6a <__strftime+0x8b2>
 8022f68:	3e01      	subs	r6, #1
 8022f6a:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8022f6e:	e00b      	b.n	8022f88 <__strftime+0x8d0>
 8022f70:	2f2b      	cmp	r7, #43	; 0x2b
 8022f72:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8022f76:	d106      	bne.n	8022f86 <__strftime+0x8ce>
 8022f78:	f242 730f 	movw	r3, #9999	; 0x270f
 8022f7c:	459a      	cmp	sl, r3
 8022f7e:	d902      	bls.n	8022f86 <__strftime+0x8ce>
 8022f80:	f88d 7020 	strb.w	r7, [sp, #32]
 8022f84:	e7ef      	b.n	8022f66 <__strftime+0x8ae>
 8022f86:	ab08      	add	r3, sp, #32
 8022f88:	2225      	movs	r2, #37	; 0x25
 8022f8a:	701a      	strb	r2, [r3, #0]
 8022f8c:	b937      	cbnz	r7, 8022f9c <__strftime+0x8e4>
 8022f8e:	1c58      	adds	r0, r3, #1
 8022f90:	493e      	ldr	r1, [pc, #248]	; (802308c <__strftime+0x9d4>)
 8022f92:	f7ff fb26 	bl	80225e2 <strcpy>
 8022f96:	f8cd a000 	str.w	sl, [sp]
 8022f9a:	e665      	b.n	8022c68 <__strftime+0x5b0>
 8022f9c:	2230      	movs	r2, #48	; 0x30
 8022f9e:	1c98      	adds	r0, r3, #2
 8022fa0:	705a      	strb	r2, [r3, #1]
 8022fa2:	e7f5      	b.n	8022f90 <__strftime+0x8d8>
 8022fa4:	6a2b      	ldr	r3, [r5, #32]
 8022fa6:	2b00      	cmp	r3, #0
 8022fa8:	f6ff ac88 	blt.w	80228bc <__strftime+0x204>
 8022fac:	f000 fa56 	bl	802345c <__tz_lock>
 8022fb0:	9b04      	ldr	r3, [sp, #16]
 8022fb2:	b90b      	cbnz	r3, 8022fb8 <__strftime+0x900>
 8022fb4:	f000 fa5e 	bl	8023474 <_tzset_unlocked>
 8022fb8:	f000 fe1a 	bl	8023bf0 <__gettzinfo>
 8022fbc:	6a2b      	ldr	r3, [r5, #32]
 8022fbe:	2b00      	cmp	r3, #0
 8022fc0:	bfcc      	ite	gt
 8022fc2:	2350      	movgt	r3, #80	; 0x50
 8022fc4:	2328      	movle	r3, #40	; 0x28
 8022fc6:	eb09 0704 	add.w	r7, r9, r4
 8022fca:	58c6      	ldr	r6, [r0, r3]
 8022fcc:	f000 fa4c 	bl	8023468 <__tz_unlock>
 8022fd0:	4276      	negs	r6, r6
 8022fd2:	233c      	movs	r3, #60	; 0x3c
 8022fd4:	fb96 f0f3 	sdiv	r0, r6, r3
 8022fd8:	f000 fece 	bl	8023d78 <labs>
 8022fdc:	233c      	movs	r3, #60	; 0x3c
 8022fde:	eba8 0a04 	sub.w	sl, r8, r4
 8022fe2:	fb90 f2f3 	sdiv	r2, r0, r3
 8022fe6:	fb02 0013 	mls	r0, r2, r3, r0
 8022fea:	9000      	str	r0, [sp, #0]
 8022fec:	4a28      	ldr	r2, [pc, #160]	; (8023090 <__strftime+0x9d8>)
 8022fee:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8022ff2:	4651      	mov	r1, sl
 8022ff4:	4638      	mov	r0, r7
 8022ff6:	fb96 f3f3 	sdiv	r3, r6, r3
 8022ffa:	f001 fbbb 	bl	8024774 <sniprintf>
 8022ffe:	2800      	cmp	r0, #0
 8023000:	f6ff ab89 	blt.w	8022716 <__strftime+0x5e>
 8023004:	4404      	add	r4, r0
 8023006:	45a0      	cmp	r8, r4
 8023008:	f67f ab85 	bls.w	8022716 <__strftime+0x5e>
 802300c:	2301      	movs	r3, #1
 802300e:	9304      	str	r3, [sp, #16]
 8023010:	e454      	b.n	80228bc <__strftime+0x204>
 8023012:	6a2b      	ldr	r3, [r5, #32]
 8023014:	2b00      	cmp	r3, #0
 8023016:	f6ff ac51 	blt.w	80228bc <__strftime+0x204>
 802301a:	f000 fa1f 	bl	802345c <__tz_lock>
 802301e:	9b04      	ldr	r3, [sp, #16]
 8023020:	b90b      	cbnz	r3, 8023026 <__strftime+0x96e>
 8023022:	f000 fa27 	bl	8023474 <_tzset_unlocked>
 8023026:	6a2b      	ldr	r3, [r5, #32]
 8023028:	4a1a      	ldr	r2, [pc, #104]	; (8023094 <__strftime+0x9dc>)
 802302a:	2b00      	cmp	r3, #0
 802302c:	bfd4      	ite	le
 802302e:	2300      	movle	r3, #0
 8023030:	2301      	movgt	r3, #1
 8023032:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8023036:	4630      	mov	r0, r6
 8023038:	f7dd f900 	bl	800023c <strlen>
 802303c:	3e01      	subs	r6, #1
 802303e:	4420      	add	r0, r4
 8023040:	f108 33ff 	add.w	r3, r8, #4294967295
 8023044:	42a0      	cmp	r0, r4
 8023046:	d102      	bne.n	802304e <__strftime+0x996>
 8023048:	f000 fa0e 	bl	8023468 <__tz_unlock>
 802304c:	e7de      	b.n	802300c <__strftime+0x954>
 802304e:	42a3      	cmp	r3, r4
 8023050:	d905      	bls.n	802305e <__strftime+0x9a6>
 8023052:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8023056:	f809 2004 	strb.w	r2, [r9, r4]
 802305a:	3401      	adds	r4, #1
 802305c:	e7f2      	b.n	8023044 <__strftime+0x98c>
 802305e:	f000 fa03 	bl	8023468 <__tz_unlock>
 8023062:	f7ff bb58 	b.w	8022716 <__strftime+0x5e>
 8023066:	f108 33ff 	add.w	r3, r8, #4294967295
 802306a:	42a3      	cmp	r3, r4
 802306c:	f67f ab53 	bls.w	8022716 <__strftime+0x5e>
 8023070:	2325      	movs	r3, #37	; 0x25
 8023072:	e627      	b.n	8022cc4 <__strftime+0x60c>
 8023074:	f1b8 0f00 	cmp.w	r8, #0
 8023078:	d002      	beq.n	8023080 <__strftime+0x9c8>
 802307a:	2300      	movs	r3, #0
 802307c:	f809 3004 	strb.w	r3, [r9, r4]
 8023080:	4620      	mov	r0, r4
 8023082:	b011      	add	sp, #68	; 0x44
 8023084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023088:	fffff894 	.word	0xfffff894
 802308c:	0802bbcf 	.word	0x0802bbcf
 8023090:	0802bbec 	.word	0x0802bbec
 8023094:	2000016c 	.word	0x2000016c

08023098 <strftime>:
 8023098:	b513      	push	{r0, r1, r4, lr}
 802309a:	4c03      	ldr	r4, [pc, #12]	; (80230a8 <strftime+0x10>)
 802309c:	9400      	str	r4, [sp, #0]
 802309e:	f7ff fb0b 	bl	80226b8 <__strftime>
 80230a2:	b002      	add	sp, #8
 80230a4:	bd10      	pop	{r4, pc}
 80230a6:	bf00      	nop
 80230a8:	200001d0 	.word	0x200001d0

080230ac <strstr>:
 80230ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80230ae:	780c      	ldrb	r4, [r1, #0]
 80230b0:	b164      	cbz	r4, 80230cc <strstr+0x20>
 80230b2:	4603      	mov	r3, r0
 80230b4:	781a      	ldrb	r2, [r3, #0]
 80230b6:	4618      	mov	r0, r3
 80230b8:	1c5e      	adds	r6, r3, #1
 80230ba:	b90a      	cbnz	r2, 80230c0 <strstr+0x14>
 80230bc:	4610      	mov	r0, r2
 80230be:	e005      	b.n	80230cc <strstr+0x20>
 80230c0:	4294      	cmp	r4, r2
 80230c2:	d108      	bne.n	80230d6 <strstr+0x2a>
 80230c4:	460d      	mov	r5, r1
 80230c6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80230ca:	b902      	cbnz	r2, 80230ce <strstr+0x22>
 80230cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80230ce:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80230d2:	4297      	cmp	r7, r2
 80230d4:	d0f7      	beq.n	80230c6 <strstr+0x1a>
 80230d6:	4633      	mov	r3, r6
 80230d8:	e7ec      	b.n	80230b4 <strstr+0x8>
	...

080230dc <_strtol_l.isra.0>:
 80230dc:	2b01      	cmp	r3, #1
 80230de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80230e2:	d001      	beq.n	80230e8 <_strtol_l.isra.0+0xc>
 80230e4:	2b24      	cmp	r3, #36	; 0x24
 80230e6:	d906      	bls.n	80230f6 <_strtol_l.isra.0+0x1a>
 80230e8:	f7fe fa84 	bl	80215f4 <__errno>
 80230ec:	2316      	movs	r3, #22
 80230ee:	6003      	str	r3, [r0, #0]
 80230f0:	2000      	movs	r0, #0
 80230f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80230f6:	4f3a      	ldr	r7, [pc, #232]	; (80231e0 <_strtol_l.isra.0+0x104>)
 80230f8:	468e      	mov	lr, r1
 80230fa:	4676      	mov	r6, lr
 80230fc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8023100:	5de5      	ldrb	r5, [r4, r7]
 8023102:	f015 0508 	ands.w	r5, r5, #8
 8023106:	d1f8      	bne.n	80230fa <_strtol_l.isra.0+0x1e>
 8023108:	2c2d      	cmp	r4, #45	; 0x2d
 802310a:	d134      	bne.n	8023176 <_strtol_l.isra.0+0x9a>
 802310c:	f89e 4000 	ldrb.w	r4, [lr]
 8023110:	f04f 0801 	mov.w	r8, #1
 8023114:	f106 0e02 	add.w	lr, r6, #2
 8023118:	2b00      	cmp	r3, #0
 802311a:	d05c      	beq.n	80231d6 <_strtol_l.isra.0+0xfa>
 802311c:	2b10      	cmp	r3, #16
 802311e:	d10c      	bne.n	802313a <_strtol_l.isra.0+0x5e>
 8023120:	2c30      	cmp	r4, #48	; 0x30
 8023122:	d10a      	bne.n	802313a <_strtol_l.isra.0+0x5e>
 8023124:	f89e 4000 	ldrb.w	r4, [lr]
 8023128:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802312c:	2c58      	cmp	r4, #88	; 0x58
 802312e:	d14d      	bne.n	80231cc <_strtol_l.isra.0+0xf0>
 8023130:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8023134:	2310      	movs	r3, #16
 8023136:	f10e 0e02 	add.w	lr, lr, #2
 802313a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 802313e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023142:	2600      	movs	r6, #0
 8023144:	fbbc f9f3 	udiv	r9, ip, r3
 8023148:	4635      	mov	r5, r6
 802314a:	fb03 ca19 	mls	sl, r3, r9, ip
 802314e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8023152:	2f09      	cmp	r7, #9
 8023154:	d818      	bhi.n	8023188 <_strtol_l.isra.0+0xac>
 8023156:	463c      	mov	r4, r7
 8023158:	42a3      	cmp	r3, r4
 802315a:	dd24      	ble.n	80231a6 <_strtol_l.isra.0+0xca>
 802315c:	2e00      	cmp	r6, #0
 802315e:	db1f      	blt.n	80231a0 <_strtol_l.isra.0+0xc4>
 8023160:	45a9      	cmp	r9, r5
 8023162:	d31d      	bcc.n	80231a0 <_strtol_l.isra.0+0xc4>
 8023164:	d101      	bne.n	802316a <_strtol_l.isra.0+0x8e>
 8023166:	45a2      	cmp	sl, r4
 8023168:	db1a      	blt.n	80231a0 <_strtol_l.isra.0+0xc4>
 802316a:	fb05 4503 	mla	r5, r5, r3, r4
 802316e:	2601      	movs	r6, #1
 8023170:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8023174:	e7eb      	b.n	802314e <_strtol_l.isra.0+0x72>
 8023176:	2c2b      	cmp	r4, #43	; 0x2b
 8023178:	bf08      	it	eq
 802317a:	f89e 4000 	ldrbeq.w	r4, [lr]
 802317e:	46a8      	mov	r8, r5
 8023180:	bf08      	it	eq
 8023182:	f106 0e02 	addeq.w	lr, r6, #2
 8023186:	e7c7      	b.n	8023118 <_strtol_l.isra.0+0x3c>
 8023188:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 802318c:	2f19      	cmp	r7, #25
 802318e:	d801      	bhi.n	8023194 <_strtol_l.isra.0+0xb8>
 8023190:	3c37      	subs	r4, #55	; 0x37
 8023192:	e7e1      	b.n	8023158 <_strtol_l.isra.0+0x7c>
 8023194:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8023198:	2f19      	cmp	r7, #25
 802319a:	d804      	bhi.n	80231a6 <_strtol_l.isra.0+0xca>
 802319c:	3c57      	subs	r4, #87	; 0x57
 802319e:	e7db      	b.n	8023158 <_strtol_l.isra.0+0x7c>
 80231a0:	f04f 36ff 	mov.w	r6, #4294967295
 80231a4:	e7e4      	b.n	8023170 <_strtol_l.isra.0+0x94>
 80231a6:	2e00      	cmp	r6, #0
 80231a8:	da05      	bge.n	80231b6 <_strtol_l.isra.0+0xda>
 80231aa:	2322      	movs	r3, #34	; 0x22
 80231ac:	6003      	str	r3, [r0, #0]
 80231ae:	4665      	mov	r5, ip
 80231b0:	b942      	cbnz	r2, 80231c4 <_strtol_l.isra.0+0xe8>
 80231b2:	4628      	mov	r0, r5
 80231b4:	e79d      	b.n	80230f2 <_strtol_l.isra.0+0x16>
 80231b6:	f1b8 0f00 	cmp.w	r8, #0
 80231ba:	d000      	beq.n	80231be <_strtol_l.isra.0+0xe2>
 80231bc:	426d      	negs	r5, r5
 80231be:	2a00      	cmp	r2, #0
 80231c0:	d0f7      	beq.n	80231b2 <_strtol_l.isra.0+0xd6>
 80231c2:	b10e      	cbz	r6, 80231c8 <_strtol_l.isra.0+0xec>
 80231c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80231c8:	6011      	str	r1, [r2, #0]
 80231ca:	e7f2      	b.n	80231b2 <_strtol_l.isra.0+0xd6>
 80231cc:	2430      	movs	r4, #48	; 0x30
 80231ce:	2b00      	cmp	r3, #0
 80231d0:	d1b3      	bne.n	802313a <_strtol_l.isra.0+0x5e>
 80231d2:	2308      	movs	r3, #8
 80231d4:	e7b1      	b.n	802313a <_strtol_l.isra.0+0x5e>
 80231d6:	2c30      	cmp	r4, #48	; 0x30
 80231d8:	d0a4      	beq.n	8023124 <_strtol_l.isra.0+0x48>
 80231da:	230a      	movs	r3, #10
 80231dc:	e7ad      	b.n	802313a <_strtol_l.isra.0+0x5e>
 80231de:	bf00      	nop
 80231e0:	0802be99 	.word	0x0802be99

080231e4 <_strtol_r>:
 80231e4:	f7ff bf7a 	b.w	80230dc <_strtol_l.isra.0>

080231e8 <strtol>:
 80231e8:	4613      	mov	r3, r2
 80231ea:	460a      	mov	r2, r1
 80231ec:	4601      	mov	r1, r0
 80231ee:	4802      	ldr	r0, [pc, #8]	; (80231f8 <strtol+0x10>)
 80231f0:	6800      	ldr	r0, [r0, #0]
 80231f2:	f7ff bf73 	b.w	80230dc <_strtol_l.isra.0>
 80231f6:	bf00      	nop
 80231f8:	20000108 	.word	0x20000108

080231fc <_strtoul_l.isra.0>:
 80231fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023200:	4e3b      	ldr	r6, [pc, #236]	; (80232f0 <_strtoul_l.isra.0+0xf4>)
 8023202:	4686      	mov	lr, r0
 8023204:	468c      	mov	ip, r1
 8023206:	4660      	mov	r0, ip
 8023208:	f81c 4b01 	ldrb.w	r4, [ip], #1
 802320c:	5da5      	ldrb	r5, [r4, r6]
 802320e:	f015 0508 	ands.w	r5, r5, #8
 8023212:	d1f8      	bne.n	8023206 <_strtoul_l.isra.0+0xa>
 8023214:	2c2d      	cmp	r4, #45	; 0x2d
 8023216:	d134      	bne.n	8023282 <_strtoul_l.isra.0+0x86>
 8023218:	f89c 4000 	ldrb.w	r4, [ip]
 802321c:	f04f 0801 	mov.w	r8, #1
 8023220:	f100 0c02 	add.w	ip, r0, #2
 8023224:	2b00      	cmp	r3, #0
 8023226:	d05e      	beq.n	80232e6 <_strtoul_l.isra.0+0xea>
 8023228:	2b10      	cmp	r3, #16
 802322a:	d10c      	bne.n	8023246 <_strtoul_l.isra.0+0x4a>
 802322c:	2c30      	cmp	r4, #48	; 0x30
 802322e:	d10a      	bne.n	8023246 <_strtoul_l.isra.0+0x4a>
 8023230:	f89c 0000 	ldrb.w	r0, [ip]
 8023234:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8023238:	2858      	cmp	r0, #88	; 0x58
 802323a:	d14f      	bne.n	80232dc <_strtoul_l.isra.0+0xe0>
 802323c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8023240:	2310      	movs	r3, #16
 8023242:	f10c 0c02 	add.w	ip, ip, #2
 8023246:	f04f 37ff 	mov.w	r7, #4294967295
 802324a:	2500      	movs	r5, #0
 802324c:	fbb7 f7f3 	udiv	r7, r7, r3
 8023250:	fb03 f907 	mul.w	r9, r3, r7
 8023254:	ea6f 0909 	mvn.w	r9, r9
 8023258:	4628      	mov	r0, r5
 802325a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 802325e:	2e09      	cmp	r6, #9
 8023260:	d818      	bhi.n	8023294 <_strtoul_l.isra.0+0x98>
 8023262:	4634      	mov	r4, r6
 8023264:	42a3      	cmp	r3, r4
 8023266:	dd24      	ble.n	80232b2 <_strtoul_l.isra.0+0xb6>
 8023268:	2d00      	cmp	r5, #0
 802326a:	db1f      	blt.n	80232ac <_strtoul_l.isra.0+0xb0>
 802326c:	4287      	cmp	r7, r0
 802326e:	d31d      	bcc.n	80232ac <_strtoul_l.isra.0+0xb0>
 8023270:	d101      	bne.n	8023276 <_strtoul_l.isra.0+0x7a>
 8023272:	45a1      	cmp	r9, r4
 8023274:	db1a      	blt.n	80232ac <_strtoul_l.isra.0+0xb0>
 8023276:	fb00 4003 	mla	r0, r0, r3, r4
 802327a:	2501      	movs	r5, #1
 802327c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8023280:	e7eb      	b.n	802325a <_strtoul_l.isra.0+0x5e>
 8023282:	2c2b      	cmp	r4, #43	; 0x2b
 8023284:	bf08      	it	eq
 8023286:	f89c 4000 	ldrbeq.w	r4, [ip]
 802328a:	46a8      	mov	r8, r5
 802328c:	bf08      	it	eq
 802328e:	f100 0c02 	addeq.w	ip, r0, #2
 8023292:	e7c7      	b.n	8023224 <_strtoul_l.isra.0+0x28>
 8023294:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8023298:	2e19      	cmp	r6, #25
 802329a:	d801      	bhi.n	80232a0 <_strtoul_l.isra.0+0xa4>
 802329c:	3c37      	subs	r4, #55	; 0x37
 802329e:	e7e1      	b.n	8023264 <_strtoul_l.isra.0+0x68>
 80232a0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80232a4:	2e19      	cmp	r6, #25
 80232a6:	d804      	bhi.n	80232b2 <_strtoul_l.isra.0+0xb6>
 80232a8:	3c57      	subs	r4, #87	; 0x57
 80232aa:	e7db      	b.n	8023264 <_strtoul_l.isra.0+0x68>
 80232ac:	f04f 35ff 	mov.w	r5, #4294967295
 80232b0:	e7e4      	b.n	802327c <_strtoul_l.isra.0+0x80>
 80232b2:	2d00      	cmp	r5, #0
 80232b4:	da07      	bge.n	80232c6 <_strtoul_l.isra.0+0xca>
 80232b6:	2322      	movs	r3, #34	; 0x22
 80232b8:	f8ce 3000 	str.w	r3, [lr]
 80232bc:	f04f 30ff 	mov.w	r0, #4294967295
 80232c0:	b942      	cbnz	r2, 80232d4 <_strtoul_l.isra.0+0xd8>
 80232c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80232c6:	f1b8 0f00 	cmp.w	r8, #0
 80232ca:	d000      	beq.n	80232ce <_strtoul_l.isra.0+0xd2>
 80232cc:	4240      	negs	r0, r0
 80232ce:	2a00      	cmp	r2, #0
 80232d0:	d0f7      	beq.n	80232c2 <_strtoul_l.isra.0+0xc6>
 80232d2:	b10d      	cbz	r5, 80232d8 <_strtoul_l.isra.0+0xdc>
 80232d4:	f10c 31ff 	add.w	r1, ip, #4294967295
 80232d8:	6011      	str	r1, [r2, #0]
 80232da:	e7f2      	b.n	80232c2 <_strtoul_l.isra.0+0xc6>
 80232dc:	2430      	movs	r4, #48	; 0x30
 80232de:	2b00      	cmp	r3, #0
 80232e0:	d1b1      	bne.n	8023246 <_strtoul_l.isra.0+0x4a>
 80232e2:	2308      	movs	r3, #8
 80232e4:	e7af      	b.n	8023246 <_strtoul_l.isra.0+0x4a>
 80232e6:	2c30      	cmp	r4, #48	; 0x30
 80232e8:	d0a2      	beq.n	8023230 <_strtoul_l.isra.0+0x34>
 80232ea:	230a      	movs	r3, #10
 80232ec:	e7ab      	b.n	8023246 <_strtoul_l.isra.0+0x4a>
 80232ee:	bf00      	nop
 80232f0:	0802be99 	.word	0x0802be99

080232f4 <_strtoul_r>:
 80232f4:	f7ff bf82 	b.w	80231fc <_strtoul_l.isra.0>

080232f8 <strtoul>:
 80232f8:	4613      	mov	r3, r2
 80232fa:	460a      	mov	r2, r1
 80232fc:	4601      	mov	r1, r0
 80232fe:	4802      	ldr	r0, [pc, #8]	; (8023308 <strtoul+0x10>)
 8023300:	6800      	ldr	r0, [r0, #0]
 8023302:	f7ff bf7b 	b.w	80231fc <_strtoul_l.isra.0>
 8023306:	bf00      	nop
 8023308:	20000108 	.word	0x20000108

0802330c <__tzcalc_limits>:
 802330c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023310:	4680      	mov	r8, r0
 8023312:	f000 fc6d 	bl	8023bf0 <__gettzinfo>
 8023316:	f240 73b1 	movw	r3, #1969	; 0x7b1
 802331a:	4598      	cmp	r8, r3
 802331c:	f340 8098 	ble.w	8023450 <__tzcalc_limits+0x144>
 8023320:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8023324:	4443      	add	r3, r8
 8023326:	109b      	asrs	r3, r3, #2
 8023328:	f240 126d 	movw	r2, #365	; 0x16d
 802332c:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8023330:	fb02 3505 	mla	r5, r2, r5, r3
 8023334:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8023338:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 802333c:	fb93 f3f2 	sdiv	r3, r3, r2
 8023340:	441d      	add	r5, r3
 8023342:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8023346:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 802334a:	fb98 f7f3 	sdiv	r7, r8, r3
 802334e:	fb03 8717 	mls	r7, r3, r7, r8
 8023352:	4442      	add	r2, r8
 8023354:	fab7 fc87 	clz	ip, r7
 8023358:	fbb2 f2f3 	udiv	r2, r2, r3
 802335c:	f008 0303 	and.w	r3, r8, #3
 8023360:	4415      	add	r5, r2
 8023362:	2264      	movs	r2, #100	; 0x64
 8023364:	f8c0 8004 	str.w	r8, [r0, #4]
 8023368:	fb98 f6f2 	sdiv	r6, r8, r2
 802336c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023370:	fb02 8616 	mls	r6, r2, r6, r8
 8023374:	4604      	mov	r4, r0
 8023376:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 802337a:	9300      	str	r3, [sp, #0]
 802337c:	f04f 0e07 	mov.w	lr, #7
 8023380:	7a22      	ldrb	r2, [r4, #8]
 8023382:	6963      	ldr	r3, [r4, #20]
 8023384:	2a4a      	cmp	r2, #74	; 0x4a
 8023386:	d128      	bne.n	80233da <__tzcalc_limits+0xce>
 8023388:	9900      	ldr	r1, [sp, #0]
 802338a:	18ea      	adds	r2, r5, r3
 802338c:	b901      	cbnz	r1, 8023390 <__tzcalc_limits+0x84>
 802338e:	b906      	cbnz	r6, 8023392 <__tzcalc_limits+0x86>
 8023390:	bb0f      	cbnz	r7, 80233d6 <__tzcalc_limits+0xca>
 8023392:	2b3b      	cmp	r3, #59	; 0x3b
 8023394:	bfd4      	ite	le
 8023396:	2300      	movle	r3, #0
 8023398:	2301      	movgt	r3, #1
 802339a:	4413      	add	r3, r2
 802339c:	1e5a      	subs	r2, r3, #1
 802339e:	69a3      	ldr	r3, [r4, #24]
 80233a0:	492c      	ldr	r1, [pc, #176]	; (8023454 <__tzcalc_limits+0x148>)
 80233a2:	fb01 3202 	mla	r2, r1, r2, r3
 80233a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80233a8:	4413      	add	r3, r2
 80233aa:	461a      	mov	r2, r3
 80233ac:	17db      	asrs	r3, r3, #31
 80233ae:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80233b2:	3428      	adds	r4, #40	; 0x28
 80233b4:	45a3      	cmp	fp, r4
 80233b6:	d1e3      	bne.n	8023380 <__tzcalc_limits+0x74>
 80233b8:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80233bc:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80233c0:	4294      	cmp	r4, r2
 80233c2:	eb75 0303 	sbcs.w	r3, r5, r3
 80233c6:	bfb4      	ite	lt
 80233c8:	2301      	movlt	r3, #1
 80233ca:	2300      	movge	r3, #0
 80233cc:	6003      	str	r3, [r0, #0]
 80233ce:	2001      	movs	r0, #1
 80233d0:	b003      	add	sp, #12
 80233d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233d6:	2300      	movs	r3, #0
 80233d8:	e7df      	b.n	802339a <__tzcalc_limits+0x8e>
 80233da:	2a44      	cmp	r2, #68	; 0x44
 80233dc:	d101      	bne.n	80233e2 <__tzcalc_limits+0xd6>
 80233de:	18ea      	adds	r2, r5, r3
 80233e0:	e7dd      	b.n	802339e <__tzcalc_limits+0x92>
 80233e2:	9a00      	ldr	r2, [sp, #0]
 80233e4:	bb72      	cbnz	r2, 8023444 <__tzcalc_limits+0x138>
 80233e6:	2e00      	cmp	r6, #0
 80233e8:	bf0c      	ite	eq
 80233ea:	46e0      	moveq	r8, ip
 80233ec:	f04f 0801 	movne.w	r8, #1
 80233f0:	4919      	ldr	r1, [pc, #100]	; (8023458 <__tzcalc_limits+0x14c>)
 80233f2:	68e2      	ldr	r2, [r4, #12]
 80233f4:	9201      	str	r2, [sp, #4]
 80233f6:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80233fa:	fb0a 1808 	mla	r8, sl, r8, r1
 80233fe:	462a      	mov	r2, r5
 8023400:	f04f 0900 	mov.w	r9, #0
 8023404:	f1a8 0804 	sub.w	r8, r8, #4
 8023408:	9901      	ldr	r1, [sp, #4]
 802340a:	f109 0901 	add.w	r9, r9, #1
 802340e:	4549      	cmp	r1, r9
 8023410:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8023414:	dc18      	bgt.n	8023448 <__tzcalc_limits+0x13c>
 8023416:	f102 0804 	add.w	r8, r2, #4
 802341a:	fb98 f9fe 	sdiv	r9, r8, lr
 802341e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8023422:	eba8 0909 	sub.w	r9, r8, r9
 8023426:	ebb3 0909 	subs.w	r9, r3, r9
 802342a:	6923      	ldr	r3, [r4, #16]
 802342c:	f103 33ff 	add.w	r3, r3, #4294967295
 8023430:	bf48      	it	mi
 8023432:	f109 0907 	addmi.w	r9, r9, #7
 8023436:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802343a:	444b      	add	r3, r9
 802343c:	4553      	cmp	r3, sl
 802343e:	da05      	bge.n	802344c <__tzcalc_limits+0x140>
 8023440:	441a      	add	r2, r3
 8023442:	e7ac      	b.n	802339e <__tzcalc_limits+0x92>
 8023444:	46e0      	mov	r8, ip
 8023446:	e7d3      	b.n	80233f0 <__tzcalc_limits+0xe4>
 8023448:	4452      	add	r2, sl
 802344a:	e7dd      	b.n	8023408 <__tzcalc_limits+0xfc>
 802344c:	3b07      	subs	r3, #7
 802344e:	e7f5      	b.n	802343c <__tzcalc_limits+0x130>
 8023450:	2000      	movs	r0, #0
 8023452:	e7bd      	b.n	80233d0 <__tzcalc_limits+0xc4>
 8023454:	00015180 	.word	0x00015180
 8023458:	0802bae0 	.word	0x0802bae0

0802345c <__tz_lock>:
 802345c:	4801      	ldr	r0, [pc, #4]	; (8023464 <__tz_lock+0x8>)
 802345e:	f7fe be21 	b.w	80220a4 <__retarget_lock_acquire>
 8023462:	bf00      	nop
 8023464:	20001077 	.word	0x20001077

08023468 <__tz_unlock>:
 8023468:	4801      	ldr	r0, [pc, #4]	; (8023470 <__tz_unlock+0x8>)
 802346a:	f7fe be1d 	b.w	80220a8 <__retarget_lock_release>
 802346e:	bf00      	nop
 8023470:	20001077 	.word	0x20001077

08023474 <_tzset_unlocked>:
 8023474:	4b01      	ldr	r3, [pc, #4]	; (802347c <_tzset_unlocked+0x8>)
 8023476:	6818      	ldr	r0, [r3, #0]
 8023478:	f000 b802 	b.w	8023480 <_tzset_unlocked_r>
 802347c:	20000108 	.word	0x20000108

08023480 <_tzset_unlocked_r>:
 8023480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023484:	b08d      	sub	sp, #52	; 0x34
 8023486:	4607      	mov	r7, r0
 8023488:	f000 fbb2 	bl	8023bf0 <__gettzinfo>
 802348c:	49ae      	ldr	r1, [pc, #696]	; (8023748 <_tzset_unlocked_r+0x2c8>)
 802348e:	4eaf      	ldr	r6, [pc, #700]	; (802374c <_tzset_unlocked_r+0x2cc>)
 8023490:	4605      	mov	r5, r0
 8023492:	4638      	mov	r0, r7
 8023494:	f000 fba4 	bl	8023be0 <_getenv_r>
 8023498:	4604      	mov	r4, r0
 802349a:	b970      	cbnz	r0, 80234ba <_tzset_unlocked_r+0x3a>
 802349c:	4bac      	ldr	r3, [pc, #688]	; (8023750 <_tzset_unlocked_r+0x2d0>)
 802349e:	4aad      	ldr	r2, [pc, #692]	; (8023754 <_tzset_unlocked_r+0x2d4>)
 80234a0:	6018      	str	r0, [r3, #0]
 80234a2:	4bad      	ldr	r3, [pc, #692]	; (8023758 <_tzset_unlocked_r+0x2d8>)
 80234a4:	6018      	str	r0, [r3, #0]
 80234a6:	4bad      	ldr	r3, [pc, #692]	; (802375c <_tzset_unlocked_r+0x2dc>)
 80234a8:	6830      	ldr	r0, [r6, #0]
 80234aa:	e9c3 2200 	strd	r2, r2, [r3]
 80234ae:	f7fe fe69 	bl	8022184 <free>
 80234b2:	6034      	str	r4, [r6, #0]
 80234b4:	b00d      	add	sp, #52	; 0x34
 80234b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234ba:	6831      	ldr	r1, [r6, #0]
 80234bc:	2900      	cmp	r1, #0
 80234be:	d15f      	bne.n	8023580 <_tzset_unlocked_r+0x100>
 80234c0:	6830      	ldr	r0, [r6, #0]
 80234c2:	f7fe fe5f 	bl	8022184 <free>
 80234c6:	4620      	mov	r0, r4
 80234c8:	f7dc feb8 	bl	800023c <strlen>
 80234cc:	1c41      	adds	r1, r0, #1
 80234ce:	4638      	mov	r0, r7
 80234d0:	f7fe fed6 	bl	8022280 <_malloc_r>
 80234d4:	6030      	str	r0, [r6, #0]
 80234d6:	2800      	cmp	r0, #0
 80234d8:	d157      	bne.n	802358a <_tzset_unlocked_r+0x10a>
 80234da:	7823      	ldrb	r3, [r4, #0]
 80234dc:	4aa0      	ldr	r2, [pc, #640]	; (8023760 <_tzset_unlocked_r+0x2e0>)
 80234de:	49a1      	ldr	r1, [pc, #644]	; (8023764 <_tzset_unlocked_r+0x2e4>)
 80234e0:	2b3a      	cmp	r3, #58	; 0x3a
 80234e2:	bf08      	it	eq
 80234e4:	3401      	addeq	r4, #1
 80234e6:	ae0a      	add	r6, sp, #40	; 0x28
 80234e8:	4633      	mov	r3, r6
 80234ea:	4620      	mov	r0, r4
 80234ec:	f001 f976 	bl	80247dc <siscanf>
 80234f0:	2800      	cmp	r0, #0
 80234f2:	dddf      	ble.n	80234b4 <_tzset_unlocked_r+0x34>
 80234f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80234f6:	18e7      	adds	r7, r4, r3
 80234f8:	5ce3      	ldrb	r3, [r4, r3]
 80234fa:	2b2d      	cmp	r3, #45	; 0x2d
 80234fc:	d149      	bne.n	8023592 <_tzset_unlocked_r+0x112>
 80234fe:	3701      	adds	r7, #1
 8023500:	f04f 34ff 	mov.w	r4, #4294967295
 8023504:	f10d 0a20 	add.w	sl, sp, #32
 8023508:	f10d 0b1e 	add.w	fp, sp, #30
 802350c:	f04f 0800 	mov.w	r8, #0
 8023510:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8023514:	4994      	ldr	r1, [pc, #592]	; (8023768 <_tzset_unlocked_r+0x2e8>)
 8023516:	9603      	str	r6, [sp, #12]
 8023518:	f8cd b000 	str.w	fp, [sp]
 802351c:	4633      	mov	r3, r6
 802351e:	aa07      	add	r2, sp, #28
 8023520:	4638      	mov	r0, r7
 8023522:	f8ad 801e 	strh.w	r8, [sp, #30]
 8023526:	f8ad 8020 	strh.w	r8, [sp, #32]
 802352a:	f001 f957 	bl	80247dc <siscanf>
 802352e:	4540      	cmp	r0, r8
 8023530:	ddc0      	ble.n	80234b4 <_tzset_unlocked_r+0x34>
 8023532:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8023536:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802353a:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8023774 <_tzset_unlocked_r+0x2f4>
 802353e:	213c      	movs	r1, #60	; 0x3c
 8023540:	fb01 2203 	mla	r2, r1, r3, r2
 8023544:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8023548:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802354c:	fb01 2303 	mla	r3, r1, r3, r2
 8023550:	435c      	muls	r4, r3
 8023552:	62ac      	str	r4, [r5, #40]	; 0x28
 8023554:	4c81      	ldr	r4, [pc, #516]	; (802375c <_tzset_unlocked_r+0x2dc>)
 8023556:	4b82      	ldr	r3, [pc, #520]	; (8023760 <_tzset_unlocked_r+0x2e0>)
 8023558:	6023      	str	r3, [r4, #0]
 802355a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802355c:	4981      	ldr	r1, [pc, #516]	; (8023764 <_tzset_unlocked_r+0x2e4>)
 802355e:	441f      	add	r7, r3
 8023560:	464a      	mov	r2, r9
 8023562:	4633      	mov	r3, r6
 8023564:	4638      	mov	r0, r7
 8023566:	f001 f939 	bl	80247dc <siscanf>
 802356a:	4540      	cmp	r0, r8
 802356c:	dc16      	bgt.n	802359c <_tzset_unlocked_r+0x11c>
 802356e:	6823      	ldr	r3, [r4, #0]
 8023570:	6063      	str	r3, [r4, #4]
 8023572:	4b77      	ldr	r3, [pc, #476]	; (8023750 <_tzset_unlocked_r+0x2d0>)
 8023574:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8023576:	601a      	str	r2, [r3, #0]
 8023578:	4b77      	ldr	r3, [pc, #476]	; (8023758 <_tzset_unlocked_r+0x2d8>)
 802357a:	f8c3 8000 	str.w	r8, [r3]
 802357e:	e799      	b.n	80234b4 <_tzset_unlocked_r+0x34>
 8023580:	f7dc fe64 	bl	800024c <strcmp>
 8023584:	2800      	cmp	r0, #0
 8023586:	d19b      	bne.n	80234c0 <_tzset_unlocked_r+0x40>
 8023588:	e794      	b.n	80234b4 <_tzset_unlocked_r+0x34>
 802358a:	4621      	mov	r1, r4
 802358c:	f7ff f829 	bl	80225e2 <strcpy>
 8023590:	e7a3      	b.n	80234da <_tzset_unlocked_r+0x5a>
 8023592:	2b2b      	cmp	r3, #43	; 0x2b
 8023594:	bf08      	it	eq
 8023596:	3701      	addeq	r7, #1
 8023598:	2401      	movs	r4, #1
 802359a:	e7b3      	b.n	8023504 <_tzset_unlocked_r+0x84>
 802359c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802359e:	f8c4 9004 	str.w	r9, [r4, #4]
 80235a2:	18fc      	adds	r4, r7, r3
 80235a4:	5cfb      	ldrb	r3, [r7, r3]
 80235a6:	2b2d      	cmp	r3, #45	; 0x2d
 80235a8:	f040 808b 	bne.w	80236c2 <_tzset_unlocked_r+0x242>
 80235ac:	3401      	adds	r4, #1
 80235ae:	f04f 37ff 	mov.w	r7, #4294967295
 80235b2:	2300      	movs	r3, #0
 80235b4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80235b8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80235bc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80235c0:	930a      	str	r3, [sp, #40]	; 0x28
 80235c2:	e9cd a602 	strd	sl, r6, [sp, #8]
 80235c6:	e9cd b600 	strd	fp, r6, [sp]
 80235ca:	4967      	ldr	r1, [pc, #412]	; (8023768 <_tzset_unlocked_r+0x2e8>)
 80235cc:	4633      	mov	r3, r6
 80235ce:	aa07      	add	r2, sp, #28
 80235d0:	4620      	mov	r0, r4
 80235d2:	f001 f903 	bl	80247dc <siscanf>
 80235d6:	2800      	cmp	r0, #0
 80235d8:	dc78      	bgt.n	80236cc <_tzset_unlocked_r+0x24c>
 80235da:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80235dc:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80235e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80235e2:	652f      	str	r7, [r5, #80]	; 0x50
 80235e4:	441c      	add	r4, r3
 80235e6:	462f      	mov	r7, r5
 80235e8:	f04f 0900 	mov.w	r9, #0
 80235ec:	7823      	ldrb	r3, [r4, #0]
 80235ee:	2b2c      	cmp	r3, #44	; 0x2c
 80235f0:	bf08      	it	eq
 80235f2:	3401      	addeq	r4, #1
 80235f4:	f894 8000 	ldrb.w	r8, [r4]
 80235f8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80235fc:	d178      	bne.n	80236f0 <_tzset_unlocked_r+0x270>
 80235fe:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8023602:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8023606:	ab09      	add	r3, sp, #36	; 0x24
 8023608:	9300      	str	r3, [sp, #0]
 802360a:	4958      	ldr	r1, [pc, #352]	; (802376c <_tzset_unlocked_r+0x2ec>)
 802360c:	9603      	str	r6, [sp, #12]
 802360e:	4633      	mov	r3, r6
 8023610:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8023614:	4620      	mov	r0, r4
 8023616:	f001 f8e1 	bl	80247dc <siscanf>
 802361a:	2803      	cmp	r0, #3
 802361c:	f47f af4a 	bne.w	80234b4 <_tzset_unlocked_r+0x34>
 8023620:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8023624:	1e4b      	subs	r3, r1, #1
 8023626:	2b0b      	cmp	r3, #11
 8023628:	f63f af44 	bhi.w	80234b4 <_tzset_unlocked_r+0x34>
 802362c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8023630:	1e53      	subs	r3, r2, #1
 8023632:	2b04      	cmp	r3, #4
 8023634:	f63f af3e 	bhi.w	80234b4 <_tzset_unlocked_r+0x34>
 8023638:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 802363c:	2b06      	cmp	r3, #6
 802363e:	f63f af39 	bhi.w	80234b4 <_tzset_unlocked_r+0x34>
 8023642:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8023646:	f887 8008 	strb.w	r8, [r7, #8]
 802364a:	617b      	str	r3, [r7, #20]
 802364c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802364e:	eb04 0803 	add.w	r8, r4, r3
 8023652:	2302      	movs	r3, #2
 8023654:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023658:	2300      	movs	r3, #0
 802365a:	f8ad 301e 	strh.w	r3, [sp, #30]
 802365e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8023662:	930a      	str	r3, [sp, #40]	; 0x28
 8023664:	f898 3000 	ldrb.w	r3, [r8]
 8023668:	2b2f      	cmp	r3, #47	; 0x2f
 802366a:	d109      	bne.n	8023680 <_tzset_unlocked_r+0x200>
 802366c:	e9cd a602 	strd	sl, r6, [sp, #8]
 8023670:	e9cd b600 	strd	fp, r6, [sp]
 8023674:	493e      	ldr	r1, [pc, #248]	; (8023770 <_tzset_unlocked_r+0x2f0>)
 8023676:	4633      	mov	r3, r6
 8023678:	aa07      	add	r2, sp, #28
 802367a:	4640      	mov	r0, r8
 802367c:	f001 f8ae 	bl	80247dc <siscanf>
 8023680:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8023684:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8023688:	213c      	movs	r1, #60	; 0x3c
 802368a:	fb01 2203 	mla	r2, r1, r3, r2
 802368e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8023692:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8023696:	fb01 2303 	mla	r3, r1, r3, r2
 802369a:	61bb      	str	r3, [r7, #24]
 802369c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802369e:	3728      	adds	r7, #40	; 0x28
 80236a0:	4444      	add	r4, r8
 80236a2:	f1b9 0f00 	cmp.w	r9, #0
 80236a6:	d020      	beq.n	80236ea <_tzset_unlocked_r+0x26a>
 80236a8:	6868      	ldr	r0, [r5, #4]
 80236aa:	f7ff fe2f 	bl	802330c <__tzcalc_limits>
 80236ae:	4b28      	ldr	r3, [pc, #160]	; (8023750 <_tzset_unlocked_r+0x2d0>)
 80236b0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80236b2:	601a      	str	r2, [r3, #0]
 80236b4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80236b6:	1a9b      	subs	r3, r3, r2
 80236b8:	4a27      	ldr	r2, [pc, #156]	; (8023758 <_tzset_unlocked_r+0x2d8>)
 80236ba:	bf18      	it	ne
 80236bc:	2301      	movne	r3, #1
 80236be:	6013      	str	r3, [r2, #0]
 80236c0:	e6f8      	b.n	80234b4 <_tzset_unlocked_r+0x34>
 80236c2:	2b2b      	cmp	r3, #43	; 0x2b
 80236c4:	bf08      	it	eq
 80236c6:	3401      	addeq	r4, #1
 80236c8:	2701      	movs	r7, #1
 80236ca:	e772      	b.n	80235b2 <_tzset_unlocked_r+0x132>
 80236cc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80236d0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80236d4:	213c      	movs	r1, #60	; 0x3c
 80236d6:	fb01 2203 	mla	r2, r1, r3, r2
 80236da:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80236de:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80236e2:	fb01 2303 	mla	r3, r1, r3, r2
 80236e6:	435f      	muls	r7, r3
 80236e8:	e77a      	b.n	80235e0 <_tzset_unlocked_r+0x160>
 80236ea:	f04f 0901 	mov.w	r9, #1
 80236ee:	e77d      	b.n	80235ec <_tzset_unlocked_r+0x16c>
 80236f0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80236f4:	bf06      	itte	eq
 80236f6:	3401      	addeq	r4, #1
 80236f8:	4643      	moveq	r3, r8
 80236fa:	2344      	movne	r3, #68	; 0x44
 80236fc:	220a      	movs	r2, #10
 80236fe:	a90b      	add	r1, sp, #44	; 0x2c
 8023700:	4620      	mov	r0, r4
 8023702:	9305      	str	r3, [sp, #20]
 8023704:	f7ff fdf8 	bl	80232f8 <strtoul>
 8023708:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 802370c:	9b05      	ldr	r3, [sp, #20]
 802370e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8023712:	45a0      	cmp	r8, r4
 8023714:	d114      	bne.n	8023740 <_tzset_unlocked_r+0x2c0>
 8023716:	234d      	movs	r3, #77	; 0x4d
 8023718:	f1b9 0f00 	cmp.w	r9, #0
 802371c:	d107      	bne.n	802372e <_tzset_unlocked_r+0x2ae>
 802371e:	722b      	strb	r3, [r5, #8]
 8023720:	2103      	movs	r1, #3
 8023722:	2302      	movs	r3, #2
 8023724:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8023728:	f8c5 9014 	str.w	r9, [r5, #20]
 802372c:	e791      	b.n	8023652 <_tzset_unlocked_r+0x1d2>
 802372e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8023732:	220b      	movs	r2, #11
 8023734:	2301      	movs	r3, #1
 8023736:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 802373a:	2300      	movs	r3, #0
 802373c:	63eb      	str	r3, [r5, #60]	; 0x3c
 802373e:	e788      	b.n	8023652 <_tzset_unlocked_r+0x1d2>
 8023740:	b280      	uxth	r0, r0
 8023742:	723b      	strb	r3, [r7, #8]
 8023744:	6178      	str	r0, [r7, #20]
 8023746:	e784      	b.n	8023652 <_tzset_unlocked_r+0x1d2>
 8023748:	0802be20 	.word	0x0802be20
 802374c:	20000fcc 	.word	0x20000fcc
 8023750:	20000fd4 	.word	0x20000fd4
 8023754:	0802be23 	.word	0x0802be23
 8023758:	20000fd0 	.word	0x20000fd0
 802375c:	2000016c 	.word	0x2000016c
 8023760:	20000fbf 	.word	0x20000fbf
 8023764:	0802be27 	.word	0x0802be27
 8023768:	0802be4a 	.word	0x0802be4a
 802376c:	0802be36 	.word	0x0802be36
 8023770:	0802be49 	.word	0x0802be49
 8023774:	20000fb4 	.word	0x20000fb4

08023778 <_vsniprintf_r>:
 8023778:	b530      	push	{r4, r5, lr}
 802377a:	1e14      	subs	r4, r2, #0
 802377c:	4605      	mov	r5, r0
 802377e:	b09b      	sub	sp, #108	; 0x6c
 8023780:	4618      	mov	r0, r3
 8023782:	da05      	bge.n	8023790 <_vsniprintf_r+0x18>
 8023784:	238b      	movs	r3, #139	; 0x8b
 8023786:	602b      	str	r3, [r5, #0]
 8023788:	f04f 30ff 	mov.w	r0, #4294967295
 802378c:	b01b      	add	sp, #108	; 0x6c
 802378e:	bd30      	pop	{r4, r5, pc}
 8023790:	f44f 7302 	mov.w	r3, #520	; 0x208
 8023794:	f8ad 300c 	strh.w	r3, [sp, #12]
 8023798:	bf14      	ite	ne
 802379a:	f104 33ff 	addne.w	r3, r4, #4294967295
 802379e:	4623      	moveq	r3, r4
 80237a0:	9302      	str	r3, [sp, #8]
 80237a2:	9305      	str	r3, [sp, #20]
 80237a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80237a8:	9100      	str	r1, [sp, #0]
 80237aa:	9104      	str	r1, [sp, #16]
 80237ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 80237b0:	4602      	mov	r2, r0
 80237b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80237b4:	4669      	mov	r1, sp
 80237b6:	4628      	mov	r0, r5
 80237b8:	f000 fb94 	bl	8023ee4 <_svfiprintf_r>
 80237bc:	1c43      	adds	r3, r0, #1
 80237be:	bfbc      	itt	lt
 80237c0:	238b      	movlt	r3, #139	; 0x8b
 80237c2:	602b      	strlt	r3, [r5, #0]
 80237c4:	2c00      	cmp	r4, #0
 80237c6:	d0e1      	beq.n	802378c <_vsniprintf_r+0x14>
 80237c8:	9b00      	ldr	r3, [sp, #0]
 80237ca:	2200      	movs	r2, #0
 80237cc:	701a      	strb	r2, [r3, #0]
 80237ce:	e7dd      	b.n	802378c <_vsniprintf_r+0x14>

080237d0 <vsniprintf>:
 80237d0:	b507      	push	{r0, r1, r2, lr}
 80237d2:	9300      	str	r3, [sp, #0]
 80237d4:	4613      	mov	r3, r2
 80237d6:	460a      	mov	r2, r1
 80237d8:	4601      	mov	r1, r0
 80237da:	4803      	ldr	r0, [pc, #12]	; (80237e8 <vsniprintf+0x18>)
 80237dc:	6800      	ldr	r0, [r0, #0]
 80237de:	f7ff ffcb 	bl	8023778 <_vsniprintf_r>
 80237e2:	b003      	add	sp, #12
 80237e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80237e8:	20000108 	.word	0x20000108

080237ec <__swbuf_r>:
 80237ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80237ee:	460e      	mov	r6, r1
 80237f0:	4614      	mov	r4, r2
 80237f2:	4605      	mov	r5, r0
 80237f4:	b118      	cbz	r0, 80237fe <__swbuf_r+0x12>
 80237f6:	6983      	ldr	r3, [r0, #24]
 80237f8:	b90b      	cbnz	r3, 80237fe <__swbuf_r+0x12>
 80237fa:	f7fe f8a1 	bl	8021940 <__sinit>
 80237fe:	4b21      	ldr	r3, [pc, #132]	; (8023884 <__swbuf_r+0x98>)
 8023800:	429c      	cmp	r4, r3
 8023802:	d12b      	bne.n	802385c <__swbuf_r+0x70>
 8023804:	686c      	ldr	r4, [r5, #4]
 8023806:	69a3      	ldr	r3, [r4, #24]
 8023808:	60a3      	str	r3, [r4, #8]
 802380a:	89a3      	ldrh	r3, [r4, #12]
 802380c:	071a      	lsls	r2, r3, #28
 802380e:	d52f      	bpl.n	8023870 <__swbuf_r+0x84>
 8023810:	6923      	ldr	r3, [r4, #16]
 8023812:	b36b      	cbz	r3, 8023870 <__swbuf_r+0x84>
 8023814:	6923      	ldr	r3, [r4, #16]
 8023816:	6820      	ldr	r0, [r4, #0]
 8023818:	1ac0      	subs	r0, r0, r3
 802381a:	6963      	ldr	r3, [r4, #20]
 802381c:	b2f6      	uxtb	r6, r6
 802381e:	4283      	cmp	r3, r0
 8023820:	4637      	mov	r7, r6
 8023822:	dc04      	bgt.n	802382e <__swbuf_r+0x42>
 8023824:	4621      	mov	r1, r4
 8023826:	4628      	mov	r0, r5
 8023828:	f7fd ffe4 	bl	80217f4 <_fflush_r>
 802382c:	bb30      	cbnz	r0, 802387c <__swbuf_r+0x90>
 802382e:	68a3      	ldr	r3, [r4, #8]
 8023830:	3b01      	subs	r3, #1
 8023832:	60a3      	str	r3, [r4, #8]
 8023834:	6823      	ldr	r3, [r4, #0]
 8023836:	1c5a      	adds	r2, r3, #1
 8023838:	6022      	str	r2, [r4, #0]
 802383a:	701e      	strb	r6, [r3, #0]
 802383c:	6963      	ldr	r3, [r4, #20]
 802383e:	3001      	adds	r0, #1
 8023840:	4283      	cmp	r3, r0
 8023842:	d004      	beq.n	802384e <__swbuf_r+0x62>
 8023844:	89a3      	ldrh	r3, [r4, #12]
 8023846:	07db      	lsls	r3, r3, #31
 8023848:	d506      	bpl.n	8023858 <__swbuf_r+0x6c>
 802384a:	2e0a      	cmp	r6, #10
 802384c:	d104      	bne.n	8023858 <__swbuf_r+0x6c>
 802384e:	4621      	mov	r1, r4
 8023850:	4628      	mov	r0, r5
 8023852:	f7fd ffcf 	bl	80217f4 <_fflush_r>
 8023856:	b988      	cbnz	r0, 802387c <__swbuf_r+0x90>
 8023858:	4638      	mov	r0, r7
 802385a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802385c:	4b0a      	ldr	r3, [pc, #40]	; (8023888 <__swbuf_r+0x9c>)
 802385e:	429c      	cmp	r4, r3
 8023860:	d101      	bne.n	8023866 <__swbuf_r+0x7a>
 8023862:	68ac      	ldr	r4, [r5, #8]
 8023864:	e7cf      	b.n	8023806 <__swbuf_r+0x1a>
 8023866:	4b09      	ldr	r3, [pc, #36]	; (802388c <__swbuf_r+0xa0>)
 8023868:	429c      	cmp	r4, r3
 802386a:	bf08      	it	eq
 802386c:	68ec      	ldreq	r4, [r5, #12]
 802386e:	e7ca      	b.n	8023806 <__swbuf_r+0x1a>
 8023870:	4621      	mov	r1, r4
 8023872:	4628      	mov	r0, r5
 8023874:	f000 f81e 	bl	80238b4 <__swsetup_r>
 8023878:	2800      	cmp	r0, #0
 802387a:	d0cb      	beq.n	8023814 <__swbuf_r+0x28>
 802387c:	f04f 37ff 	mov.w	r7, #4294967295
 8023880:	e7ea      	b.n	8023858 <__swbuf_r+0x6c>
 8023882:	bf00      	nop
 8023884:	0802ba24 	.word	0x0802ba24
 8023888:	0802ba44 	.word	0x0802ba44
 802388c:	0802ba04 	.word	0x0802ba04

08023890 <_write_r>:
 8023890:	b538      	push	{r3, r4, r5, lr}
 8023892:	4d07      	ldr	r5, [pc, #28]	; (80238b0 <_write_r+0x20>)
 8023894:	4604      	mov	r4, r0
 8023896:	4608      	mov	r0, r1
 8023898:	4611      	mov	r1, r2
 802389a:	2200      	movs	r2, #0
 802389c:	602a      	str	r2, [r5, #0]
 802389e:	461a      	mov	r2, r3
 80238a0:	f7dd face 	bl	8000e40 <_write>
 80238a4:	1c43      	adds	r3, r0, #1
 80238a6:	d102      	bne.n	80238ae <_write_r+0x1e>
 80238a8:	682b      	ldr	r3, [r5, #0]
 80238aa:	b103      	cbz	r3, 80238ae <_write_r+0x1e>
 80238ac:	6023      	str	r3, [r4, #0]
 80238ae:	bd38      	pop	{r3, r4, r5, pc}
 80238b0:	2000107c 	.word	0x2000107c

080238b4 <__swsetup_r>:
 80238b4:	4b32      	ldr	r3, [pc, #200]	; (8023980 <__swsetup_r+0xcc>)
 80238b6:	b570      	push	{r4, r5, r6, lr}
 80238b8:	681d      	ldr	r5, [r3, #0]
 80238ba:	4606      	mov	r6, r0
 80238bc:	460c      	mov	r4, r1
 80238be:	b125      	cbz	r5, 80238ca <__swsetup_r+0x16>
 80238c0:	69ab      	ldr	r3, [r5, #24]
 80238c2:	b913      	cbnz	r3, 80238ca <__swsetup_r+0x16>
 80238c4:	4628      	mov	r0, r5
 80238c6:	f7fe f83b 	bl	8021940 <__sinit>
 80238ca:	4b2e      	ldr	r3, [pc, #184]	; (8023984 <__swsetup_r+0xd0>)
 80238cc:	429c      	cmp	r4, r3
 80238ce:	d10f      	bne.n	80238f0 <__swsetup_r+0x3c>
 80238d0:	686c      	ldr	r4, [r5, #4]
 80238d2:	89a3      	ldrh	r3, [r4, #12]
 80238d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80238d8:	0719      	lsls	r1, r3, #28
 80238da:	d42c      	bmi.n	8023936 <__swsetup_r+0x82>
 80238dc:	06dd      	lsls	r5, r3, #27
 80238de:	d411      	bmi.n	8023904 <__swsetup_r+0x50>
 80238e0:	2309      	movs	r3, #9
 80238e2:	6033      	str	r3, [r6, #0]
 80238e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80238e8:	81a3      	strh	r3, [r4, #12]
 80238ea:	f04f 30ff 	mov.w	r0, #4294967295
 80238ee:	e03e      	b.n	802396e <__swsetup_r+0xba>
 80238f0:	4b25      	ldr	r3, [pc, #148]	; (8023988 <__swsetup_r+0xd4>)
 80238f2:	429c      	cmp	r4, r3
 80238f4:	d101      	bne.n	80238fa <__swsetup_r+0x46>
 80238f6:	68ac      	ldr	r4, [r5, #8]
 80238f8:	e7eb      	b.n	80238d2 <__swsetup_r+0x1e>
 80238fa:	4b24      	ldr	r3, [pc, #144]	; (802398c <__swsetup_r+0xd8>)
 80238fc:	429c      	cmp	r4, r3
 80238fe:	bf08      	it	eq
 8023900:	68ec      	ldreq	r4, [r5, #12]
 8023902:	e7e6      	b.n	80238d2 <__swsetup_r+0x1e>
 8023904:	0758      	lsls	r0, r3, #29
 8023906:	d512      	bpl.n	802392e <__swsetup_r+0x7a>
 8023908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802390a:	b141      	cbz	r1, 802391e <__swsetup_r+0x6a>
 802390c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023910:	4299      	cmp	r1, r3
 8023912:	d002      	beq.n	802391a <__swsetup_r+0x66>
 8023914:	4630      	mov	r0, r6
 8023916:	f7fe fc63 	bl	80221e0 <_free_r>
 802391a:	2300      	movs	r3, #0
 802391c:	6363      	str	r3, [r4, #52]	; 0x34
 802391e:	89a3      	ldrh	r3, [r4, #12]
 8023920:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023924:	81a3      	strh	r3, [r4, #12]
 8023926:	2300      	movs	r3, #0
 8023928:	6063      	str	r3, [r4, #4]
 802392a:	6923      	ldr	r3, [r4, #16]
 802392c:	6023      	str	r3, [r4, #0]
 802392e:	89a3      	ldrh	r3, [r4, #12]
 8023930:	f043 0308 	orr.w	r3, r3, #8
 8023934:	81a3      	strh	r3, [r4, #12]
 8023936:	6923      	ldr	r3, [r4, #16]
 8023938:	b94b      	cbnz	r3, 802394e <__swsetup_r+0x9a>
 802393a:	89a3      	ldrh	r3, [r4, #12]
 802393c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023944:	d003      	beq.n	802394e <__swsetup_r+0x9a>
 8023946:	4621      	mov	r1, r4
 8023948:	4630      	mov	r0, r6
 802394a:	f7fe fbd3 	bl	80220f4 <__smakebuf_r>
 802394e:	89a0      	ldrh	r0, [r4, #12]
 8023950:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023954:	f010 0301 	ands.w	r3, r0, #1
 8023958:	d00a      	beq.n	8023970 <__swsetup_r+0xbc>
 802395a:	2300      	movs	r3, #0
 802395c:	60a3      	str	r3, [r4, #8]
 802395e:	6963      	ldr	r3, [r4, #20]
 8023960:	425b      	negs	r3, r3
 8023962:	61a3      	str	r3, [r4, #24]
 8023964:	6923      	ldr	r3, [r4, #16]
 8023966:	b943      	cbnz	r3, 802397a <__swsetup_r+0xc6>
 8023968:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802396c:	d1ba      	bne.n	80238e4 <__swsetup_r+0x30>
 802396e:	bd70      	pop	{r4, r5, r6, pc}
 8023970:	0781      	lsls	r1, r0, #30
 8023972:	bf58      	it	pl
 8023974:	6963      	ldrpl	r3, [r4, #20]
 8023976:	60a3      	str	r3, [r4, #8]
 8023978:	e7f4      	b.n	8023964 <__swsetup_r+0xb0>
 802397a:	2000      	movs	r0, #0
 802397c:	e7f7      	b.n	802396e <__swsetup_r+0xba>
 802397e:	bf00      	nop
 8023980:	20000108 	.word	0x20000108
 8023984:	0802ba24 	.word	0x0802ba24
 8023988:	0802ba44 	.word	0x0802ba44
 802398c:	0802ba04 	.word	0x0802ba04

08023990 <__register_exitproc>:
 8023990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023994:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8023a50 <__register_exitproc+0xc0>
 8023998:	4606      	mov	r6, r0
 802399a:	f8d8 0000 	ldr.w	r0, [r8]
 802399e:	461f      	mov	r7, r3
 80239a0:	460d      	mov	r5, r1
 80239a2:	4691      	mov	r9, r2
 80239a4:	f7fe fb7f 	bl	80220a6 <__retarget_lock_acquire_recursive>
 80239a8:	4b25      	ldr	r3, [pc, #148]	; (8023a40 <__register_exitproc+0xb0>)
 80239aa:	681c      	ldr	r4, [r3, #0]
 80239ac:	b934      	cbnz	r4, 80239bc <__register_exitproc+0x2c>
 80239ae:	4c25      	ldr	r4, [pc, #148]	; (8023a44 <__register_exitproc+0xb4>)
 80239b0:	601c      	str	r4, [r3, #0]
 80239b2:	4b25      	ldr	r3, [pc, #148]	; (8023a48 <__register_exitproc+0xb8>)
 80239b4:	b113      	cbz	r3, 80239bc <__register_exitproc+0x2c>
 80239b6:	681b      	ldr	r3, [r3, #0]
 80239b8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80239bc:	6863      	ldr	r3, [r4, #4]
 80239be:	2b1f      	cmp	r3, #31
 80239c0:	dd07      	ble.n	80239d2 <__register_exitproc+0x42>
 80239c2:	f8d8 0000 	ldr.w	r0, [r8]
 80239c6:	f7fe fb70 	bl	80220aa <__retarget_lock_release_recursive>
 80239ca:	f04f 30ff 	mov.w	r0, #4294967295
 80239ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80239d2:	b34e      	cbz	r6, 8023a28 <__register_exitproc+0x98>
 80239d4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80239d8:	b988      	cbnz	r0, 80239fe <__register_exitproc+0x6e>
 80239da:	4b1c      	ldr	r3, [pc, #112]	; (8023a4c <__register_exitproc+0xbc>)
 80239dc:	b923      	cbnz	r3, 80239e8 <__register_exitproc+0x58>
 80239de:	f8d8 0000 	ldr.w	r0, [r8]
 80239e2:	f7fe fb61 	bl	80220a8 <__retarget_lock_release>
 80239e6:	e7f0      	b.n	80239ca <__register_exitproc+0x3a>
 80239e8:	f44f 7084 	mov.w	r0, #264	; 0x108
 80239ec:	f7fe fbc2 	bl	8022174 <malloc>
 80239f0:	2800      	cmp	r0, #0
 80239f2:	d0f4      	beq.n	80239de <__register_exitproc+0x4e>
 80239f4:	2300      	movs	r3, #0
 80239f6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80239fa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80239fe:	6863      	ldr	r3, [r4, #4]
 8023a00:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8023a04:	2201      	movs	r2, #1
 8023a06:	409a      	lsls	r2, r3
 8023a08:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8023a0c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8023a10:	4313      	orrs	r3, r2
 8023a12:	2e02      	cmp	r6, #2
 8023a14:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8023a18:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8023a1c:	bf02      	ittt	eq
 8023a1e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8023a22:	431a      	orreq	r2, r3
 8023a24:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8023a28:	6863      	ldr	r3, [r4, #4]
 8023a2a:	f8d8 0000 	ldr.w	r0, [r8]
 8023a2e:	1c5a      	adds	r2, r3, #1
 8023a30:	3302      	adds	r3, #2
 8023a32:	6062      	str	r2, [r4, #4]
 8023a34:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8023a38:	f7fe fb37 	bl	80220aa <__retarget_lock_release_recursive>
 8023a3c:	2000      	movs	r0, #0
 8023a3e:	e7c6      	b.n	80239ce <__register_exitproc+0x3e>
 8023a40:	20001064 	.word	0x20001064
 8023a44:	20000fd8 	.word	0x20000fd8
 8023a48:	00000000 	.word	0x00000000
 8023a4c:	08022175 	.word	0x08022175
 8023a50:	20000174 	.word	0x20000174

08023a54 <abs>:
 8023a54:	2800      	cmp	r0, #0
 8023a56:	bfb8      	it	lt
 8023a58:	4240      	neglt	r0, r0
 8023a5a:	4770      	bx	lr

08023a5c <__assert_func>:
 8023a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023a5e:	4614      	mov	r4, r2
 8023a60:	461a      	mov	r2, r3
 8023a62:	4b09      	ldr	r3, [pc, #36]	; (8023a88 <__assert_func+0x2c>)
 8023a64:	681b      	ldr	r3, [r3, #0]
 8023a66:	4605      	mov	r5, r0
 8023a68:	68d8      	ldr	r0, [r3, #12]
 8023a6a:	b14c      	cbz	r4, 8023a80 <__assert_func+0x24>
 8023a6c:	4b07      	ldr	r3, [pc, #28]	; (8023a8c <__assert_func+0x30>)
 8023a6e:	9100      	str	r1, [sp, #0]
 8023a70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023a74:	4906      	ldr	r1, [pc, #24]	; (8023a90 <__assert_func+0x34>)
 8023a76:	462b      	mov	r3, r5
 8023a78:	f000 f854 	bl	8023b24 <fiprintf>
 8023a7c:	f7fd fda0 	bl	80215c0 <abort>
 8023a80:	4b04      	ldr	r3, [pc, #16]	; (8023a94 <__assert_func+0x38>)
 8023a82:	461c      	mov	r4, r3
 8023a84:	e7f3      	b.n	8023a6e <__assert_func+0x12>
 8023a86:	bf00      	nop
 8023a88:	20000108 	.word	0x20000108
 8023a8c:	0802be5c 	.word	0x0802be5c
 8023a90:	0802be69 	.word	0x0802be69
 8023a94:	0802be97 	.word	0x0802be97

08023a98 <_close_r>:
 8023a98:	b538      	push	{r3, r4, r5, lr}
 8023a9a:	4d06      	ldr	r5, [pc, #24]	; (8023ab4 <_close_r+0x1c>)
 8023a9c:	2300      	movs	r3, #0
 8023a9e:	4604      	mov	r4, r0
 8023aa0:	4608      	mov	r0, r1
 8023aa2:	602b      	str	r3, [r5, #0]
 8023aa4:	f7dd f9e8 	bl	8000e78 <_close>
 8023aa8:	1c43      	adds	r3, r0, #1
 8023aaa:	d102      	bne.n	8023ab2 <_close_r+0x1a>
 8023aac:	682b      	ldr	r3, [r5, #0]
 8023aae:	b103      	cbz	r3, 8023ab2 <_close_r+0x1a>
 8023ab0:	6023      	str	r3, [r4, #0]
 8023ab2:	bd38      	pop	{r3, r4, r5, pc}
 8023ab4:	2000107c 	.word	0x2000107c

08023ab8 <__sflags>:
 8023ab8:	780b      	ldrb	r3, [r1, #0]
 8023aba:	2b72      	cmp	r3, #114	; 0x72
 8023abc:	b530      	push	{r4, r5, lr}
 8023abe:	d022      	beq.n	8023b06 <__sflags+0x4e>
 8023ac0:	2b77      	cmp	r3, #119	; 0x77
 8023ac2:	d024      	beq.n	8023b0e <__sflags+0x56>
 8023ac4:	2b61      	cmp	r3, #97	; 0x61
 8023ac6:	d027      	beq.n	8023b18 <__sflags+0x60>
 8023ac8:	2316      	movs	r3, #22
 8023aca:	6003      	str	r3, [r0, #0]
 8023acc:	2000      	movs	r0, #0
 8023ace:	bd30      	pop	{r4, r5, pc}
 8023ad0:	2d62      	cmp	r5, #98	; 0x62
 8023ad2:	d012      	beq.n	8023afa <__sflags+0x42>
 8023ad4:	2d78      	cmp	r5, #120	; 0x78
 8023ad6:	d013      	beq.n	8023b00 <__sflags+0x48>
 8023ad8:	2d2b      	cmp	r5, #43	; 0x2b
 8023ada:	d107      	bne.n	8023aec <__sflags+0x34>
 8023adc:	f020 001c 	bic.w	r0, r0, #28
 8023ae0:	f023 0303 	bic.w	r3, r3, #3
 8023ae4:	f040 0010 	orr.w	r0, r0, #16
 8023ae8:	f043 0302 	orr.w	r3, r3, #2
 8023aec:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8023af0:	2d00      	cmp	r5, #0
 8023af2:	d1ed      	bne.n	8023ad0 <__sflags+0x18>
 8023af4:	4323      	orrs	r3, r4
 8023af6:	6013      	str	r3, [r2, #0]
 8023af8:	e7e9      	b.n	8023ace <__sflags+0x16>
 8023afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023afe:	e7f5      	b.n	8023aec <__sflags+0x34>
 8023b00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8023b04:	e7f2      	b.n	8023aec <__sflags+0x34>
 8023b06:	2400      	movs	r4, #0
 8023b08:	4623      	mov	r3, r4
 8023b0a:	2004      	movs	r0, #4
 8023b0c:	e7ee      	b.n	8023aec <__sflags+0x34>
 8023b0e:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 8023b12:	2301      	movs	r3, #1
 8023b14:	2008      	movs	r0, #8
 8023b16:	e7e9      	b.n	8023aec <__sflags+0x34>
 8023b18:	f44f 7402 	mov.w	r4, #520	; 0x208
 8023b1c:	2301      	movs	r3, #1
 8023b1e:	f44f 7084 	mov.w	r0, #264	; 0x108
 8023b22:	e7e3      	b.n	8023aec <__sflags+0x34>

08023b24 <fiprintf>:
 8023b24:	b40e      	push	{r1, r2, r3}
 8023b26:	b503      	push	{r0, r1, lr}
 8023b28:	4601      	mov	r1, r0
 8023b2a:	ab03      	add	r3, sp, #12
 8023b2c:	4805      	ldr	r0, [pc, #20]	; (8023b44 <fiprintf+0x20>)
 8023b2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023b32:	6800      	ldr	r0, [r0, #0]
 8023b34:	9301      	str	r3, [sp, #4]
 8023b36:	f000 faff 	bl	8024138 <_vfiprintf_r>
 8023b3a:	b002      	add	sp, #8
 8023b3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023b40:	b003      	add	sp, #12
 8023b42:	4770      	bx	lr
 8023b44:	20000108 	.word	0x20000108

08023b48 <_fstat_r>:
 8023b48:	b538      	push	{r3, r4, r5, lr}
 8023b4a:	4d07      	ldr	r5, [pc, #28]	; (8023b68 <_fstat_r+0x20>)
 8023b4c:	2300      	movs	r3, #0
 8023b4e:	4604      	mov	r4, r0
 8023b50:	4608      	mov	r0, r1
 8023b52:	4611      	mov	r1, r2
 8023b54:	602b      	str	r3, [r5, #0]
 8023b56:	f7dd f99b 	bl	8000e90 <_fstat>
 8023b5a:	1c43      	adds	r3, r0, #1
 8023b5c:	d102      	bne.n	8023b64 <_fstat_r+0x1c>
 8023b5e:	682b      	ldr	r3, [r5, #0]
 8023b60:	b103      	cbz	r3, 8023b64 <_fstat_r+0x1c>
 8023b62:	6023      	str	r3, [r4, #0]
 8023b64:	bd38      	pop	{r3, r4, r5, pc}
 8023b66:	bf00      	nop
 8023b68:	2000107c 	.word	0x2000107c

08023b6c <_findenv_r>:
 8023b6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b70:	4607      	mov	r7, r0
 8023b72:	4689      	mov	r9, r1
 8023b74:	4616      	mov	r6, r2
 8023b76:	f000 fe7d 	bl	8024874 <__env_lock>
 8023b7a:	4b18      	ldr	r3, [pc, #96]	; (8023bdc <_findenv_r+0x70>)
 8023b7c:	681c      	ldr	r4, [r3, #0]
 8023b7e:	469a      	mov	sl, r3
 8023b80:	b134      	cbz	r4, 8023b90 <_findenv_r+0x24>
 8023b82:	464b      	mov	r3, r9
 8023b84:	4698      	mov	r8, r3
 8023b86:	f813 1b01 	ldrb.w	r1, [r3], #1
 8023b8a:	b139      	cbz	r1, 8023b9c <_findenv_r+0x30>
 8023b8c:	293d      	cmp	r1, #61	; 0x3d
 8023b8e:	d1f9      	bne.n	8023b84 <_findenv_r+0x18>
 8023b90:	4638      	mov	r0, r7
 8023b92:	f000 fe75 	bl	8024880 <__env_unlock>
 8023b96:	2000      	movs	r0, #0
 8023b98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b9c:	eba8 0809 	sub.w	r8, r8, r9
 8023ba0:	46a3      	mov	fp, r4
 8023ba2:	f854 0b04 	ldr.w	r0, [r4], #4
 8023ba6:	2800      	cmp	r0, #0
 8023ba8:	d0f2      	beq.n	8023b90 <_findenv_r+0x24>
 8023baa:	4642      	mov	r2, r8
 8023bac:	4649      	mov	r1, r9
 8023bae:	f000 fe41 	bl	8024834 <strncmp>
 8023bb2:	2800      	cmp	r0, #0
 8023bb4:	d1f4      	bne.n	8023ba0 <_findenv_r+0x34>
 8023bb6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8023bba:	eb03 0508 	add.w	r5, r3, r8
 8023bbe:	f813 3008 	ldrb.w	r3, [r3, r8]
 8023bc2:	2b3d      	cmp	r3, #61	; 0x3d
 8023bc4:	d1ec      	bne.n	8023ba0 <_findenv_r+0x34>
 8023bc6:	f8da 3000 	ldr.w	r3, [sl]
 8023bca:	ebab 0303 	sub.w	r3, fp, r3
 8023bce:	109b      	asrs	r3, r3, #2
 8023bd0:	4638      	mov	r0, r7
 8023bd2:	6033      	str	r3, [r6, #0]
 8023bd4:	f000 fe54 	bl	8024880 <__env_unlock>
 8023bd8:	1c68      	adds	r0, r5, #1
 8023bda:	e7dd      	b.n	8023b98 <_findenv_r+0x2c>
 8023bdc:	20000000 	.word	0x20000000

08023be0 <_getenv_r>:
 8023be0:	b507      	push	{r0, r1, r2, lr}
 8023be2:	aa01      	add	r2, sp, #4
 8023be4:	f7ff ffc2 	bl	8023b6c <_findenv_r>
 8023be8:	b003      	add	sp, #12
 8023bea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08023bf0 <__gettzinfo>:
 8023bf0:	4800      	ldr	r0, [pc, #0]	; (8023bf4 <__gettzinfo+0x4>)
 8023bf2:	4770      	bx	lr
 8023bf4:	20000178 	.word	0x20000178

08023bf8 <gmtime_r>:
 8023bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023bfc:	e9d0 6700 	ldrd	r6, r7, [r0]
 8023c00:	460c      	mov	r4, r1
 8023c02:	4a51      	ldr	r2, [pc, #324]	; (8023d48 <gmtime_r+0x150>)
 8023c04:	2300      	movs	r3, #0
 8023c06:	4630      	mov	r0, r6
 8023c08:	4639      	mov	r1, r7
 8023c0a:	f7dc fdd3 	bl	80007b4 <__aeabi_ldivmod>
 8023c0e:	4639      	mov	r1, r7
 8023c10:	4605      	mov	r5, r0
 8023c12:	4a4d      	ldr	r2, [pc, #308]	; (8023d48 <gmtime_r+0x150>)
 8023c14:	4630      	mov	r0, r6
 8023c16:	2300      	movs	r3, #0
 8023c18:	f7dc fdcc 	bl	80007b4 <__aeabi_ldivmod>
 8023c1c:	2a00      	cmp	r2, #0
 8023c1e:	bfbc      	itt	lt
 8023c20:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8023c24:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8023c28:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8023c2c:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8023c30:	fbb2 f3f1 	udiv	r3, r2, r1
 8023c34:	fb01 2213 	mls	r2, r1, r3, r2
 8023c38:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8023c3c:	bfac      	ite	ge
 8023c3e:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8023c42:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8023c46:	60a3      	str	r3, [r4, #8]
 8023c48:	fbb2 f3f1 	udiv	r3, r2, r1
 8023c4c:	fb01 2213 	mls	r2, r1, r3, r2
 8023c50:	6063      	str	r3, [r4, #4]
 8023c52:	6022      	str	r2, [r4, #0]
 8023c54:	1cc3      	adds	r3, r0, #3
 8023c56:	2207      	movs	r2, #7
 8023c58:	fb93 f2f2 	sdiv	r2, r3, r2
 8023c5c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8023c60:	1a9b      	subs	r3, r3, r2
 8023c62:	bf48      	it	mi
 8023c64:	3307      	addmi	r3, #7
 8023c66:	2800      	cmp	r0, #0
 8023c68:	61a3      	str	r3, [r4, #24]
 8023c6a:	bfb8      	it	lt
 8023c6c:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8023c70:	4936      	ldr	r1, [pc, #216]	; (8023d4c <gmtime_r+0x154>)
 8023c72:	bfae      	itee	ge
 8023c74:	fb90 f1f1 	sdivge	r1, r0, r1
 8023c78:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8023c7c:	fb93 f1f1 	sdivlt	r1, r3, r1
 8023c80:	4b33      	ldr	r3, [pc, #204]	; (8023d50 <gmtime_r+0x158>)
 8023c82:	fb03 0001 	mla	r0, r3, r1, r0
 8023c86:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8023c8a:	fbb0 f2f2 	udiv	r2, r0, r2
 8023c8e:	4402      	add	r2, r0
 8023c90:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8023c94:	fbb0 f3fc 	udiv	r3, r0, ip
 8023c98:	1ad2      	subs	r2, r2, r3
 8023c9a:	f240 176d 	movw	r7, #365	; 0x16d
 8023c9e:	4b2d      	ldr	r3, [pc, #180]	; (8023d54 <gmtime_r+0x15c>)
 8023ca0:	fbb0 f3f3 	udiv	r3, r0, r3
 8023ca4:	2664      	movs	r6, #100	; 0x64
 8023ca6:	1ad3      	subs	r3, r2, r3
 8023ca8:	fbb3 f5f7 	udiv	r5, r3, r7
 8023cac:	fbb3 f3fc 	udiv	r3, r3, ip
 8023cb0:	fbb5 f2f6 	udiv	r2, r5, r6
 8023cb4:	1ad3      	subs	r3, r2, r3
 8023cb6:	4403      	add	r3, r0
 8023cb8:	fb07 3315 	mls	r3, r7, r5, r3
 8023cbc:	2099      	movs	r0, #153	; 0x99
 8023cbe:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8023cc2:	f10c 0c02 	add.w	ip, ip, #2
 8023cc6:	f103 0e01 	add.w	lr, r3, #1
 8023cca:	fbbc f7f0 	udiv	r7, ip, r0
 8023cce:	4378      	muls	r0, r7
 8023cd0:	3002      	adds	r0, #2
 8023cd2:	f04f 0805 	mov.w	r8, #5
 8023cd6:	fbb0 f0f8 	udiv	r0, r0, r8
 8023cda:	ebae 0000 	sub.w	r0, lr, r0
 8023cde:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8023ce2:	45f4      	cmp	ip, lr
 8023ce4:	bf94      	ite	ls
 8023ce6:	f04f 0c02 	movls.w	ip, #2
 8023cea:	f06f 0c09 	mvnhi.w	ip, #9
 8023cee:	4467      	add	r7, ip
 8023cf0:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8023cf4:	fb0c 5101 	mla	r1, ip, r1, r5
 8023cf8:	2f01      	cmp	r7, #1
 8023cfa:	bf98      	it	ls
 8023cfc:	3101      	addls	r1, #1
 8023cfe:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8023d02:	d30c      	bcc.n	8023d1e <gmtime_r+0x126>
 8023d04:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8023d08:	61e3      	str	r3, [r4, #28]
 8023d0a:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8023d0e:	2300      	movs	r3, #0
 8023d10:	60e0      	str	r0, [r4, #12]
 8023d12:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8023d16:	6223      	str	r3, [r4, #32]
 8023d18:	4620      	mov	r0, r4
 8023d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023d1e:	f015 0f03 	tst.w	r5, #3
 8023d22:	d102      	bne.n	8023d2a <gmtime_r+0x132>
 8023d24:	fb06 5212 	mls	r2, r6, r2, r5
 8023d28:	b95a      	cbnz	r2, 8023d42 <gmtime_r+0x14a>
 8023d2a:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8023d2e:	fbb5 f2f6 	udiv	r2, r5, r6
 8023d32:	fb06 5212 	mls	r2, r6, r2, r5
 8023d36:	fab2 f282 	clz	r2, r2
 8023d3a:	0952      	lsrs	r2, r2, #5
 8023d3c:	333b      	adds	r3, #59	; 0x3b
 8023d3e:	4413      	add	r3, r2
 8023d40:	e7e2      	b.n	8023d08 <gmtime_r+0x110>
 8023d42:	2201      	movs	r2, #1
 8023d44:	e7fa      	b.n	8023d3c <gmtime_r+0x144>
 8023d46:	bf00      	nop
 8023d48:	00015180 	.word	0x00015180
 8023d4c:	00023ab1 	.word	0x00023ab1
 8023d50:	fffdc54f 	.word	0xfffdc54f
 8023d54:	00023ab0 	.word	0x00023ab0

08023d58 <_isatty_r>:
 8023d58:	b538      	push	{r3, r4, r5, lr}
 8023d5a:	4d06      	ldr	r5, [pc, #24]	; (8023d74 <_isatty_r+0x1c>)
 8023d5c:	2300      	movs	r3, #0
 8023d5e:	4604      	mov	r4, r0
 8023d60:	4608      	mov	r0, r1
 8023d62:	602b      	str	r3, [r5, #0]
 8023d64:	f7dd f8a4 	bl	8000eb0 <_isatty>
 8023d68:	1c43      	adds	r3, r0, #1
 8023d6a:	d102      	bne.n	8023d72 <_isatty_r+0x1a>
 8023d6c:	682b      	ldr	r3, [r5, #0]
 8023d6e:	b103      	cbz	r3, 8023d72 <_isatty_r+0x1a>
 8023d70:	6023      	str	r3, [r4, #0]
 8023d72:	bd38      	pop	{r3, r4, r5, pc}
 8023d74:	2000107c 	.word	0x2000107c

08023d78 <labs>:
 8023d78:	2800      	cmp	r0, #0
 8023d7a:	bfb8      	it	lt
 8023d7c:	4240      	neglt	r0, r0
 8023d7e:	4770      	bx	lr

08023d80 <_lseek_r>:
 8023d80:	b538      	push	{r3, r4, r5, lr}
 8023d82:	4d07      	ldr	r5, [pc, #28]	; (8023da0 <_lseek_r+0x20>)
 8023d84:	4604      	mov	r4, r0
 8023d86:	4608      	mov	r0, r1
 8023d88:	4611      	mov	r1, r2
 8023d8a:	2200      	movs	r2, #0
 8023d8c:	602a      	str	r2, [r5, #0]
 8023d8e:	461a      	mov	r2, r3
 8023d90:	f7dd f899 	bl	8000ec6 <_lseek>
 8023d94:	1c43      	adds	r3, r0, #1
 8023d96:	d102      	bne.n	8023d9e <_lseek_r+0x1e>
 8023d98:	682b      	ldr	r3, [r5, #0]
 8023d9a:	b103      	cbz	r3, 8023d9e <_lseek_r+0x1e>
 8023d9c:	6023      	str	r3, [r4, #0]
 8023d9e:	bd38      	pop	{r3, r4, r5, pc}
 8023da0:	2000107c 	.word	0x2000107c

08023da4 <__ascii_mbtowc>:
 8023da4:	b082      	sub	sp, #8
 8023da6:	b901      	cbnz	r1, 8023daa <__ascii_mbtowc+0x6>
 8023da8:	a901      	add	r1, sp, #4
 8023daa:	b142      	cbz	r2, 8023dbe <__ascii_mbtowc+0x1a>
 8023dac:	b14b      	cbz	r3, 8023dc2 <__ascii_mbtowc+0x1e>
 8023dae:	7813      	ldrb	r3, [r2, #0]
 8023db0:	600b      	str	r3, [r1, #0]
 8023db2:	7812      	ldrb	r2, [r2, #0]
 8023db4:	1e10      	subs	r0, r2, #0
 8023db6:	bf18      	it	ne
 8023db8:	2001      	movne	r0, #1
 8023dba:	b002      	add	sp, #8
 8023dbc:	4770      	bx	lr
 8023dbe:	4610      	mov	r0, r2
 8023dc0:	e7fb      	b.n	8023dba <__ascii_mbtowc+0x16>
 8023dc2:	f06f 0001 	mvn.w	r0, #1
 8023dc6:	e7f8      	b.n	8023dba <__ascii_mbtowc+0x16>

08023dc8 <__malloc_lock>:
 8023dc8:	4801      	ldr	r0, [pc, #4]	; (8023dd0 <__malloc_lock+0x8>)
 8023dca:	f7fe b96c 	b.w	80220a6 <__retarget_lock_acquire_recursive>
 8023dce:	bf00      	nop
 8023dd0:	20001074 	.word	0x20001074

08023dd4 <__malloc_unlock>:
 8023dd4:	4801      	ldr	r0, [pc, #4]	; (8023ddc <__malloc_unlock+0x8>)
 8023dd6:	f7fe b968 	b.w	80220aa <__retarget_lock_release_recursive>
 8023dda:	bf00      	nop
 8023ddc:	20001074 	.word	0x20001074

08023de0 <_realloc_r>:
 8023de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023de2:	4607      	mov	r7, r0
 8023de4:	4614      	mov	r4, r2
 8023de6:	460e      	mov	r6, r1
 8023de8:	b921      	cbnz	r1, 8023df4 <_realloc_r+0x14>
 8023dea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8023dee:	4611      	mov	r1, r2
 8023df0:	f7fe ba46 	b.w	8022280 <_malloc_r>
 8023df4:	b922      	cbnz	r2, 8023e00 <_realloc_r+0x20>
 8023df6:	f7fe f9f3 	bl	80221e0 <_free_r>
 8023dfa:	4625      	mov	r5, r4
 8023dfc:	4628      	mov	r0, r5
 8023dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023e00:	f000 fd5e 	bl	80248c0 <_malloc_usable_size_r>
 8023e04:	42a0      	cmp	r0, r4
 8023e06:	d20f      	bcs.n	8023e28 <_realloc_r+0x48>
 8023e08:	4621      	mov	r1, r4
 8023e0a:	4638      	mov	r0, r7
 8023e0c:	f7fe fa38 	bl	8022280 <_malloc_r>
 8023e10:	4605      	mov	r5, r0
 8023e12:	2800      	cmp	r0, #0
 8023e14:	d0f2      	beq.n	8023dfc <_realloc_r+0x1c>
 8023e16:	4631      	mov	r1, r6
 8023e18:	4622      	mov	r2, r4
 8023e1a:	f7fe f9bb 	bl	8022194 <memcpy>
 8023e1e:	4631      	mov	r1, r6
 8023e20:	4638      	mov	r0, r7
 8023e22:	f7fe f9dd 	bl	80221e0 <_free_r>
 8023e26:	e7e9      	b.n	8023dfc <_realloc_r+0x1c>
 8023e28:	4635      	mov	r5, r6
 8023e2a:	e7e7      	b.n	8023dfc <_realloc_r+0x1c>

08023e2c <__ssputs_r>:
 8023e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023e30:	688e      	ldr	r6, [r1, #8]
 8023e32:	429e      	cmp	r6, r3
 8023e34:	4682      	mov	sl, r0
 8023e36:	460c      	mov	r4, r1
 8023e38:	4690      	mov	r8, r2
 8023e3a:	461f      	mov	r7, r3
 8023e3c:	d838      	bhi.n	8023eb0 <__ssputs_r+0x84>
 8023e3e:	898a      	ldrh	r2, [r1, #12]
 8023e40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8023e44:	d032      	beq.n	8023eac <__ssputs_r+0x80>
 8023e46:	6825      	ldr	r5, [r4, #0]
 8023e48:	6909      	ldr	r1, [r1, #16]
 8023e4a:	eba5 0901 	sub.w	r9, r5, r1
 8023e4e:	6965      	ldr	r5, [r4, #20]
 8023e50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023e54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023e58:	3301      	adds	r3, #1
 8023e5a:	444b      	add	r3, r9
 8023e5c:	106d      	asrs	r5, r5, #1
 8023e5e:	429d      	cmp	r5, r3
 8023e60:	bf38      	it	cc
 8023e62:	461d      	movcc	r5, r3
 8023e64:	0553      	lsls	r3, r2, #21
 8023e66:	d531      	bpl.n	8023ecc <__ssputs_r+0xa0>
 8023e68:	4629      	mov	r1, r5
 8023e6a:	f7fe fa09 	bl	8022280 <_malloc_r>
 8023e6e:	4606      	mov	r6, r0
 8023e70:	b950      	cbnz	r0, 8023e88 <__ssputs_r+0x5c>
 8023e72:	230c      	movs	r3, #12
 8023e74:	f8ca 3000 	str.w	r3, [sl]
 8023e78:	89a3      	ldrh	r3, [r4, #12]
 8023e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023e7e:	81a3      	strh	r3, [r4, #12]
 8023e80:	f04f 30ff 	mov.w	r0, #4294967295
 8023e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023e88:	6921      	ldr	r1, [r4, #16]
 8023e8a:	464a      	mov	r2, r9
 8023e8c:	f7fe f982 	bl	8022194 <memcpy>
 8023e90:	89a3      	ldrh	r3, [r4, #12]
 8023e92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8023e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023e9a:	81a3      	strh	r3, [r4, #12]
 8023e9c:	6126      	str	r6, [r4, #16]
 8023e9e:	6165      	str	r5, [r4, #20]
 8023ea0:	444e      	add	r6, r9
 8023ea2:	eba5 0509 	sub.w	r5, r5, r9
 8023ea6:	6026      	str	r6, [r4, #0]
 8023ea8:	60a5      	str	r5, [r4, #8]
 8023eaa:	463e      	mov	r6, r7
 8023eac:	42be      	cmp	r6, r7
 8023eae:	d900      	bls.n	8023eb2 <__ssputs_r+0x86>
 8023eb0:	463e      	mov	r6, r7
 8023eb2:	4632      	mov	r2, r6
 8023eb4:	6820      	ldr	r0, [r4, #0]
 8023eb6:	4641      	mov	r1, r8
 8023eb8:	f000 fce8 	bl	802488c <memmove>
 8023ebc:	68a3      	ldr	r3, [r4, #8]
 8023ebe:	6822      	ldr	r2, [r4, #0]
 8023ec0:	1b9b      	subs	r3, r3, r6
 8023ec2:	4432      	add	r2, r6
 8023ec4:	60a3      	str	r3, [r4, #8]
 8023ec6:	6022      	str	r2, [r4, #0]
 8023ec8:	2000      	movs	r0, #0
 8023eca:	e7db      	b.n	8023e84 <__ssputs_r+0x58>
 8023ecc:	462a      	mov	r2, r5
 8023ece:	f7ff ff87 	bl	8023de0 <_realloc_r>
 8023ed2:	4606      	mov	r6, r0
 8023ed4:	2800      	cmp	r0, #0
 8023ed6:	d1e1      	bne.n	8023e9c <__ssputs_r+0x70>
 8023ed8:	6921      	ldr	r1, [r4, #16]
 8023eda:	4650      	mov	r0, sl
 8023edc:	f7fe f980 	bl	80221e0 <_free_r>
 8023ee0:	e7c7      	b.n	8023e72 <__ssputs_r+0x46>
	...

08023ee4 <_svfiprintf_r>:
 8023ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ee8:	4698      	mov	r8, r3
 8023eea:	898b      	ldrh	r3, [r1, #12]
 8023eec:	061b      	lsls	r3, r3, #24
 8023eee:	b09d      	sub	sp, #116	; 0x74
 8023ef0:	4607      	mov	r7, r0
 8023ef2:	460d      	mov	r5, r1
 8023ef4:	4614      	mov	r4, r2
 8023ef6:	d50e      	bpl.n	8023f16 <_svfiprintf_r+0x32>
 8023ef8:	690b      	ldr	r3, [r1, #16]
 8023efa:	b963      	cbnz	r3, 8023f16 <_svfiprintf_r+0x32>
 8023efc:	2140      	movs	r1, #64	; 0x40
 8023efe:	f7fe f9bf 	bl	8022280 <_malloc_r>
 8023f02:	6028      	str	r0, [r5, #0]
 8023f04:	6128      	str	r0, [r5, #16]
 8023f06:	b920      	cbnz	r0, 8023f12 <_svfiprintf_r+0x2e>
 8023f08:	230c      	movs	r3, #12
 8023f0a:	603b      	str	r3, [r7, #0]
 8023f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8023f10:	e0d1      	b.n	80240b6 <_svfiprintf_r+0x1d2>
 8023f12:	2340      	movs	r3, #64	; 0x40
 8023f14:	616b      	str	r3, [r5, #20]
 8023f16:	2300      	movs	r3, #0
 8023f18:	9309      	str	r3, [sp, #36]	; 0x24
 8023f1a:	2320      	movs	r3, #32
 8023f1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023f20:	f8cd 800c 	str.w	r8, [sp, #12]
 8023f24:	2330      	movs	r3, #48	; 0x30
 8023f26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80240d0 <_svfiprintf_r+0x1ec>
 8023f2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023f2e:	f04f 0901 	mov.w	r9, #1
 8023f32:	4623      	mov	r3, r4
 8023f34:	469a      	mov	sl, r3
 8023f36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023f3a:	b10a      	cbz	r2, 8023f40 <_svfiprintf_r+0x5c>
 8023f3c:	2a25      	cmp	r2, #37	; 0x25
 8023f3e:	d1f9      	bne.n	8023f34 <_svfiprintf_r+0x50>
 8023f40:	ebba 0b04 	subs.w	fp, sl, r4
 8023f44:	d00b      	beq.n	8023f5e <_svfiprintf_r+0x7a>
 8023f46:	465b      	mov	r3, fp
 8023f48:	4622      	mov	r2, r4
 8023f4a:	4629      	mov	r1, r5
 8023f4c:	4638      	mov	r0, r7
 8023f4e:	f7ff ff6d 	bl	8023e2c <__ssputs_r>
 8023f52:	3001      	adds	r0, #1
 8023f54:	f000 80aa 	beq.w	80240ac <_svfiprintf_r+0x1c8>
 8023f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023f5a:	445a      	add	r2, fp
 8023f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8023f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8023f62:	2b00      	cmp	r3, #0
 8023f64:	f000 80a2 	beq.w	80240ac <_svfiprintf_r+0x1c8>
 8023f68:	2300      	movs	r3, #0
 8023f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8023f6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023f72:	f10a 0a01 	add.w	sl, sl, #1
 8023f76:	9304      	str	r3, [sp, #16]
 8023f78:	9307      	str	r3, [sp, #28]
 8023f7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023f7e:	931a      	str	r3, [sp, #104]	; 0x68
 8023f80:	4654      	mov	r4, sl
 8023f82:	2205      	movs	r2, #5
 8023f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023f88:	4851      	ldr	r0, [pc, #324]	; (80240d0 <_svfiprintf_r+0x1ec>)
 8023f8a:	f7dc f969 	bl	8000260 <memchr>
 8023f8e:	9a04      	ldr	r2, [sp, #16]
 8023f90:	b9d8      	cbnz	r0, 8023fca <_svfiprintf_r+0xe6>
 8023f92:	06d0      	lsls	r0, r2, #27
 8023f94:	bf44      	itt	mi
 8023f96:	2320      	movmi	r3, #32
 8023f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023f9c:	0711      	lsls	r1, r2, #28
 8023f9e:	bf44      	itt	mi
 8023fa0:	232b      	movmi	r3, #43	; 0x2b
 8023fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8023faa:	2b2a      	cmp	r3, #42	; 0x2a
 8023fac:	d015      	beq.n	8023fda <_svfiprintf_r+0xf6>
 8023fae:	9a07      	ldr	r2, [sp, #28]
 8023fb0:	4654      	mov	r4, sl
 8023fb2:	2000      	movs	r0, #0
 8023fb4:	f04f 0c0a 	mov.w	ip, #10
 8023fb8:	4621      	mov	r1, r4
 8023fba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023fbe:	3b30      	subs	r3, #48	; 0x30
 8023fc0:	2b09      	cmp	r3, #9
 8023fc2:	d94e      	bls.n	8024062 <_svfiprintf_r+0x17e>
 8023fc4:	b1b0      	cbz	r0, 8023ff4 <_svfiprintf_r+0x110>
 8023fc6:	9207      	str	r2, [sp, #28]
 8023fc8:	e014      	b.n	8023ff4 <_svfiprintf_r+0x110>
 8023fca:	eba0 0308 	sub.w	r3, r0, r8
 8023fce:	fa09 f303 	lsl.w	r3, r9, r3
 8023fd2:	4313      	orrs	r3, r2
 8023fd4:	9304      	str	r3, [sp, #16]
 8023fd6:	46a2      	mov	sl, r4
 8023fd8:	e7d2      	b.n	8023f80 <_svfiprintf_r+0x9c>
 8023fda:	9b03      	ldr	r3, [sp, #12]
 8023fdc:	1d19      	adds	r1, r3, #4
 8023fde:	681b      	ldr	r3, [r3, #0]
 8023fe0:	9103      	str	r1, [sp, #12]
 8023fe2:	2b00      	cmp	r3, #0
 8023fe4:	bfbb      	ittet	lt
 8023fe6:	425b      	neglt	r3, r3
 8023fe8:	f042 0202 	orrlt.w	r2, r2, #2
 8023fec:	9307      	strge	r3, [sp, #28]
 8023fee:	9307      	strlt	r3, [sp, #28]
 8023ff0:	bfb8      	it	lt
 8023ff2:	9204      	strlt	r2, [sp, #16]
 8023ff4:	7823      	ldrb	r3, [r4, #0]
 8023ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8023ff8:	d10c      	bne.n	8024014 <_svfiprintf_r+0x130>
 8023ffa:	7863      	ldrb	r3, [r4, #1]
 8023ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8023ffe:	d135      	bne.n	802406c <_svfiprintf_r+0x188>
 8024000:	9b03      	ldr	r3, [sp, #12]
 8024002:	1d1a      	adds	r2, r3, #4
 8024004:	681b      	ldr	r3, [r3, #0]
 8024006:	9203      	str	r2, [sp, #12]
 8024008:	2b00      	cmp	r3, #0
 802400a:	bfb8      	it	lt
 802400c:	f04f 33ff 	movlt.w	r3, #4294967295
 8024010:	3402      	adds	r4, #2
 8024012:	9305      	str	r3, [sp, #20]
 8024014:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80240e0 <_svfiprintf_r+0x1fc>
 8024018:	7821      	ldrb	r1, [r4, #0]
 802401a:	2203      	movs	r2, #3
 802401c:	4650      	mov	r0, sl
 802401e:	f7dc f91f 	bl	8000260 <memchr>
 8024022:	b140      	cbz	r0, 8024036 <_svfiprintf_r+0x152>
 8024024:	2340      	movs	r3, #64	; 0x40
 8024026:	eba0 000a 	sub.w	r0, r0, sl
 802402a:	fa03 f000 	lsl.w	r0, r3, r0
 802402e:	9b04      	ldr	r3, [sp, #16]
 8024030:	4303      	orrs	r3, r0
 8024032:	3401      	adds	r4, #1
 8024034:	9304      	str	r3, [sp, #16]
 8024036:	f814 1b01 	ldrb.w	r1, [r4], #1
 802403a:	4826      	ldr	r0, [pc, #152]	; (80240d4 <_svfiprintf_r+0x1f0>)
 802403c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024040:	2206      	movs	r2, #6
 8024042:	f7dc f90d 	bl	8000260 <memchr>
 8024046:	2800      	cmp	r0, #0
 8024048:	d038      	beq.n	80240bc <_svfiprintf_r+0x1d8>
 802404a:	4b23      	ldr	r3, [pc, #140]	; (80240d8 <_svfiprintf_r+0x1f4>)
 802404c:	bb1b      	cbnz	r3, 8024096 <_svfiprintf_r+0x1b2>
 802404e:	9b03      	ldr	r3, [sp, #12]
 8024050:	3307      	adds	r3, #7
 8024052:	f023 0307 	bic.w	r3, r3, #7
 8024056:	3308      	adds	r3, #8
 8024058:	9303      	str	r3, [sp, #12]
 802405a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802405c:	4433      	add	r3, r6
 802405e:	9309      	str	r3, [sp, #36]	; 0x24
 8024060:	e767      	b.n	8023f32 <_svfiprintf_r+0x4e>
 8024062:	fb0c 3202 	mla	r2, ip, r2, r3
 8024066:	460c      	mov	r4, r1
 8024068:	2001      	movs	r0, #1
 802406a:	e7a5      	b.n	8023fb8 <_svfiprintf_r+0xd4>
 802406c:	2300      	movs	r3, #0
 802406e:	3401      	adds	r4, #1
 8024070:	9305      	str	r3, [sp, #20]
 8024072:	4619      	mov	r1, r3
 8024074:	f04f 0c0a 	mov.w	ip, #10
 8024078:	4620      	mov	r0, r4
 802407a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802407e:	3a30      	subs	r2, #48	; 0x30
 8024080:	2a09      	cmp	r2, #9
 8024082:	d903      	bls.n	802408c <_svfiprintf_r+0x1a8>
 8024084:	2b00      	cmp	r3, #0
 8024086:	d0c5      	beq.n	8024014 <_svfiprintf_r+0x130>
 8024088:	9105      	str	r1, [sp, #20]
 802408a:	e7c3      	b.n	8024014 <_svfiprintf_r+0x130>
 802408c:	fb0c 2101 	mla	r1, ip, r1, r2
 8024090:	4604      	mov	r4, r0
 8024092:	2301      	movs	r3, #1
 8024094:	e7f0      	b.n	8024078 <_svfiprintf_r+0x194>
 8024096:	ab03      	add	r3, sp, #12
 8024098:	9300      	str	r3, [sp, #0]
 802409a:	462a      	mov	r2, r5
 802409c:	4b0f      	ldr	r3, [pc, #60]	; (80240dc <_svfiprintf_r+0x1f8>)
 802409e:	a904      	add	r1, sp, #16
 80240a0:	4638      	mov	r0, r7
 80240a2:	f3af 8000 	nop.w
 80240a6:	1c42      	adds	r2, r0, #1
 80240a8:	4606      	mov	r6, r0
 80240aa:	d1d6      	bne.n	802405a <_svfiprintf_r+0x176>
 80240ac:	89ab      	ldrh	r3, [r5, #12]
 80240ae:	065b      	lsls	r3, r3, #25
 80240b0:	f53f af2c 	bmi.w	8023f0c <_svfiprintf_r+0x28>
 80240b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80240b6:	b01d      	add	sp, #116	; 0x74
 80240b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80240bc:	ab03      	add	r3, sp, #12
 80240be:	9300      	str	r3, [sp, #0]
 80240c0:	462a      	mov	r2, r5
 80240c2:	4b06      	ldr	r3, [pc, #24]	; (80240dc <_svfiprintf_r+0x1f8>)
 80240c4:	a904      	add	r1, sp, #16
 80240c6:	4638      	mov	r0, r7
 80240c8:	f000 f9d4 	bl	8024474 <_printf_i>
 80240cc:	e7eb      	b.n	80240a6 <_svfiprintf_r+0x1c2>
 80240ce:	bf00      	nop
 80240d0:	0802bfa3 	.word	0x0802bfa3
 80240d4:	0802bfad 	.word	0x0802bfad
 80240d8:	00000000 	.word	0x00000000
 80240dc:	08023e2d 	.word	0x08023e2d
 80240e0:	0802bfa9 	.word	0x0802bfa9

080240e4 <__sfputc_r>:
 80240e4:	6893      	ldr	r3, [r2, #8]
 80240e6:	3b01      	subs	r3, #1
 80240e8:	2b00      	cmp	r3, #0
 80240ea:	b410      	push	{r4}
 80240ec:	6093      	str	r3, [r2, #8]
 80240ee:	da08      	bge.n	8024102 <__sfputc_r+0x1e>
 80240f0:	6994      	ldr	r4, [r2, #24]
 80240f2:	42a3      	cmp	r3, r4
 80240f4:	db01      	blt.n	80240fa <__sfputc_r+0x16>
 80240f6:	290a      	cmp	r1, #10
 80240f8:	d103      	bne.n	8024102 <__sfputc_r+0x1e>
 80240fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80240fe:	f7ff bb75 	b.w	80237ec <__swbuf_r>
 8024102:	6813      	ldr	r3, [r2, #0]
 8024104:	1c58      	adds	r0, r3, #1
 8024106:	6010      	str	r0, [r2, #0]
 8024108:	7019      	strb	r1, [r3, #0]
 802410a:	4608      	mov	r0, r1
 802410c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024110:	4770      	bx	lr

08024112 <__sfputs_r>:
 8024112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024114:	4606      	mov	r6, r0
 8024116:	460f      	mov	r7, r1
 8024118:	4614      	mov	r4, r2
 802411a:	18d5      	adds	r5, r2, r3
 802411c:	42ac      	cmp	r4, r5
 802411e:	d101      	bne.n	8024124 <__sfputs_r+0x12>
 8024120:	2000      	movs	r0, #0
 8024122:	e007      	b.n	8024134 <__sfputs_r+0x22>
 8024124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024128:	463a      	mov	r2, r7
 802412a:	4630      	mov	r0, r6
 802412c:	f7ff ffda 	bl	80240e4 <__sfputc_r>
 8024130:	1c43      	adds	r3, r0, #1
 8024132:	d1f3      	bne.n	802411c <__sfputs_r+0xa>
 8024134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024138 <_vfiprintf_r>:
 8024138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802413c:	460d      	mov	r5, r1
 802413e:	b09d      	sub	sp, #116	; 0x74
 8024140:	4614      	mov	r4, r2
 8024142:	4698      	mov	r8, r3
 8024144:	4606      	mov	r6, r0
 8024146:	b118      	cbz	r0, 8024150 <_vfiprintf_r+0x18>
 8024148:	6983      	ldr	r3, [r0, #24]
 802414a:	b90b      	cbnz	r3, 8024150 <_vfiprintf_r+0x18>
 802414c:	f7fd fbf8 	bl	8021940 <__sinit>
 8024150:	4b89      	ldr	r3, [pc, #548]	; (8024378 <_vfiprintf_r+0x240>)
 8024152:	429d      	cmp	r5, r3
 8024154:	d11b      	bne.n	802418e <_vfiprintf_r+0x56>
 8024156:	6875      	ldr	r5, [r6, #4]
 8024158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802415a:	07d9      	lsls	r1, r3, #31
 802415c:	d405      	bmi.n	802416a <_vfiprintf_r+0x32>
 802415e:	89ab      	ldrh	r3, [r5, #12]
 8024160:	059a      	lsls	r2, r3, #22
 8024162:	d402      	bmi.n	802416a <_vfiprintf_r+0x32>
 8024164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024166:	f7fd ff9e 	bl	80220a6 <__retarget_lock_acquire_recursive>
 802416a:	89ab      	ldrh	r3, [r5, #12]
 802416c:	071b      	lsls	r3, r3, #28
 802416e:	d501      	bpl.n	8024174 <_vfiprintf_r+0x3c>
 8024170:	692b      	ldr	r3, [r5, #16]
 8024172:	b9eb      	cbnz	r3, 80241b0 <_vfiprintf_r+0x78>
 8024174:	4629      	mov	r1, r5
 8024176:	4630      	mov	r0, r6
 8024178:	f7ff fb9c 	bl	80238b4 <__swsetup_r>
 802417c:	b1c0      	cbz	r0, 80241b0 <_vfiprintf_r+0x78>
 802417e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024180:	07dc      	lsls	r4, r3, #31
 8024182:	d50e      	bpl.n	80241a2 <_vfiprintf_r+0x6a>
 8024184:	f04f 30ff 	mov.w	r0, #4294967295
 8024188:	b01d      	add	sp, #116	; 0x74
 802418a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802418e:	4b7b      	ldr	r3, [pc, #492]	; (802437c <_vfiprintf_r+0x244>)
 8024190:	429d      	cmp	r5, r3
 8024192:	d101      	bne.n	8024198 <_vfiprintf_r+0x60>
 8024194:	68b5      	ldr	r5, [r6, #8]
 8024196:	e7df      	b.n	8024158 <_vfiprintf_r+0x20>
 8024198:	4b79      	ldr	r3, [pc, #484]	; (8024380 <_vfiprintf_r+0x248>)
 802419a:	429d      	cmp	r5, r3
 802419c:	bf08      	it	eq
 802419e:	68f5      	ldreq	r5, [r6, #12]
 80241a0:	e7da      	b.n	8024158 <_vfiprintf_r+0x20>
 80241a2:	89ab      	ldrh	r3, [r5, #12]
 80241a4:	0598      	lsls	r0, r3, #22
 80241a6:	d4ed      	bmi.n	8024184 <_vfiprintf_r+0x4c>
 80241a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80241aa:	f7fd ff7e 	bl	80220aa <__retarget_lock_release_recursive>
 80241ae:	e7e9      	b.n	8024184 <_vfiprintf_r+0x4c>
 80241b0:	2300      	movs	r3, #0
 80241b2:	9309      	str	r3, [sp, #36]	; 0x24
 80241b4:	2320      	movs	r3, #32
 80241b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80241ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80241be:	2330      	movs	r3, #48	; 0x30
 80241c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8024384 <_vfiprintf_r+0x24c>
 80241c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80241c8:	f04f 0901 	mov.w	r9, #1
 80241cc:	4623      	mov	r3, r4
 80241ce:	469a      	mov	sl, r3
 80241d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80241d4:	b10a      	cbz	r2, 80241da <_vfiprintf_r+0xa2>
 80241d6:	2a25      	cmp	r2, #37	; 0x25
 80241d8:	d1f9      	bne.n	80241ce <_vfiprintf_r+0x96>
 80241da:	ebba 0b04 	subs.w	fp, sl, r4
 80241de:	d00b      	beq.n	80241f8 <_vfiprintf_r+0xc0>
 80241e0:	465b      	mov	r3, fp
 80241e2:	4622      	mov	r2, r4
 80241e4:	4629      	mov	r1, r5
 80241e6:	4630      	mov	r0, r6
 80241e8:	f7ff ff93 	bl	8024112 <__sfputs_r>
 80241ec:	3001      	adds	r0, #1
 80241ee:	f000 80aa 	beq.w	8024346 <_vfiprintf_r+0x20e>
 80241f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80241f4:	445a      	add	r2, fp
 80241f6:	9209      	str	r2, [sp, #36]	; 0x24
 80241f8:	f89a 3000 	ldrb.w	r3, [sl]
 80241fc:	2b00      	cmp	r3, #0
 80241fe:	f000 80a2 	beq.w	8024346 <_vfiprintf_r+0x20e>
 8024202:	2300      	movs	r3, #0
 8024204:	f04f 32ff 	mov.w	r2, #4294967295
 8024208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802420c:	f10a 0a01 	add.w	sl, sl, #1
 8024210:	9304      	str	r3, [sp, #16]
 8024212:	9307      	str	r3, [sp, #28]
 8024214:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024218:	931a      	str	r3, [sp, #104]	; 0x68
 802421a:	4654      	mov	r4, sl
 802421c:	2205      	movs	r2, #5
 802421e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024222:	4858      	ldr	r0, [pc, #352]	; (8024384 <_vfiprintf_r+0x24c>)
 8024224:	f7dc f81c 	bl	8000260 <memchr>
 8024228:	9a04      	ldr	r2, [sp, #16]
 802422a:	b9d8      	cbnz	r0, 8024264 <_vfiprintf_r+0x12c>
 802422c:	06d1      	lsls	r1, r2, #27
 802422e:	bf44      	itt	mi
 8024230:	2320      	movmi	r3, #32
 8024232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024236:	0713      	lsls	r3, r2, #28
 8024238:	bf44      	itt	mi
 802423a:	232b      	movmi	r3, #43	; 0x2b
 802423c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024240:	f89a 3000 	ldrb.w	r3, [sl]
 8024244:	2b2a      	cmp	r3, #42	; 0x2a
 8024246:	d015      	beq.n	8024274 <_vfiprintf_r+0x13c>
 8024248:	9a07      	ldr	r2, [sp, #28]
 802424a:	4654      	mov	r4, sl
 802424c:	2000      	movs	r0, #0
 802424e:	f04f 0c0a 	mov.w	ip, #10
 8024252:	4621      	mov	r1, r4
 8024254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024258:	3b30      	subs	r3, #48	; 0x30
 802425a:	2b09      	cmp	r3, #9
 802425c:	d94e      	bls.n	80242fc <_vfiprintf_r+0x1c4>
 802425e:	b1b0      	cbz	r0, 802428e <_vfiprintf_r+0x156>
 8024260:	9207      	str	r2, [sp, #28]
 8024262:	e014      	b.n	802428e <_vfiprintf_r+0x156>
 8024264:	eba0 0308 	sub.w	r3, r0, r8
 8024268:	fa09 f303 	lsl.w	r3, r9, r3
 802426c:	4313      	orrs	r3, r2
 802426e:	9304      	str	r3, [sp, #16]
 8024270:	46a2      	mov	sl, r4
 8024272:	e7d2      	b.n	802421a <_vfiprintf_r+0xe2>
 8024274:	9b03      	ldr	r3, [sp, #12]
 8024276:	1d19      	adds	r1, r3, #4
 8024278:	681b      	ldr	r3, [r3, #0]
 802427a:	9103      	str	r1, [sp, #12]
 802427c:	2b00      	cmp	r3, #0
 802427e:	bfbb      	ittet	lt
 8024280:	425b      	neglt	r3, r3
 8024282:	f042 0202 	orrlt.w	r2, r2, #2
 8024286:	9307      	strge	r3, [sp, #28]
 8024288:	9307      	strlt	r3, [sp, #28]
 802428a:	bfb8      	it	lt
 802428c:	9204      	strlt	r2, [sp, #16]
 802428e:	7823      	ldrb	r3, [r4, #0]
 8024290:	2b2e      	cmp	r3, #46	; 0x2e
 8024292:	d10c      	bne.n	80242ae <_vfiprintf_r+0x176>
 8024294:	7863      	ldrb	r3, [r4, #1]
 8024296:	2b2a      	cmp	r3, #42	; 0x2a
 8024298:	d135      	bne.n	8024306 <_vfiprintf_r+0x1ce>
 802429a:	9b03      	ldr	r3, [sp, #12]
 802429c:	1d1a      	adds	r2, r3, #4
 802429e:	681b      	ldr	r3, [r3, #0]
 80242a0:	9203      	str	r2, [sp, #12]
 80242a2:	2b00      	cmp	r3, #0
 80242a4:	bfb8      	it	lt
 80242a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80242aa:	3402      	adds	r4, #2
 80242ac:	9305      	str	r3, [sp, #20]
 80242ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8024394 <_vfiprintf_r+0x25c>
 80242b2:	7821      	ldrb	r1, [r4, #0]
 80242b4:	2203      	movs	r2, #3
 80242b6:	4650      	mov	r0, sl
 80242b8:	f7db ffd2 	bl	8000260 <memchr>
 80242bc:	b140      	cbz	r0, 80242d0 <_vfiprintf_r+0x198>
 80242be:	2340      	movs	r3, #64	; 0x40
 80242c0:	eba0 000a 	sub.w	r0, r0, sl
 80242c4:	fa03 f000 	lsl.w	r0, r3, r0
 80242c8:	9b04      	ldr	r3, [sp, #16]
 80242ca:	4303      	orrs	r3, r0
 80242cc:	3401      	adds	r4, #1
 80242ce:	9304      	str	r3, [sp, #16]
 80242d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80242d4:	482c      	ldr	r0, [pc, #176]	; (8024388 <_vfiprintf_r+0x250>)
 80242d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80242da:	2206      	movs	r2, #6
 80242dc:	f7db ffc0 	bl	8000260 <memchr>
 80242e0:	2800      	cmp	r0, #0
 80242e2:	d03f      	beq.n	8024364 <_vfiprintf_r+0x22c>
 80242e4:	4b29      	ldr	r3, [pc, #164]	; (802438c <_vfiprintf_r+0x254>)
 80242e6:	bb1b      	cbnz	r3, 8024330 <_vfiprintf_r+0x1f8>
 80242e8:	9b03      	ldr	r3, [sp, #12]
 80242ea:	3307      	adds	r3, #7
 80242ec:	f023 0307 	bic.w	r3, r3, #7
 80242f0:	3308      	adds	r3, #8
 80242f2:	9303      	str	r3, [sp, #12]
 80242f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242f6:	443b      	add	r3, r7
 80242f8:	9309      	str	r3, [sp, #36]	; 0x24
 80242fa:	e767      	b.n	80241cc <_vfiprintf_r+0x94>
 80242fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8024300:	460c      	mov	r4, r1
 8024302:	2001      	movs	r0, #1
 8024304:	e7a5      	b.n	8024252 <_vfiprintf_r+0x11a>
 8024306:	2300      	movs	r3, #0
 8024308:	3401      	adds	r4, #1
 802430a:	9305      	str	r3, [sp, #20]
 802430c:	4619      	mov	r1, r3
 802430e:	f04f 0c0a 	mov.w	ip, #10
 8024312:	4620      	mov	r0, r4
 8024314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024318:	3a30      	subs	r2, #48	; 0x30
 802431a:	2a09      	cmp	r2, #9
 802431c:	d903      	bls.n	8024326 <_vfiprintf_r+0x1ee>
 802431e:	2b00      	cmp	r3, #0
 8024320:	d0c5      	beq.n	80242ae <_vfiprintf_r+0x176>
 8024322:	9105      	str	r1, [sp, #20]
 8024324:	e7c3      	b.n	80242ae <_vfiprintf_r+0x176>
 8024326:	fb0c 2101 	mla	r1, ip, r1, r2
 802432a:	4604      	mov	r4, r0
 802432c:	2301      	movs	r3, #1
 802432e:	e7f0      	b.n	8024312 <_vfiprintf_r+0x1da>
 8024330:	ab03      	add	r3, sp, #12
 8024332:	9300      	str	r3, [sp, #0]
 8024334:	462a      	mov	r2, r5
 8024336:	4b16      	ldr	r3, [pc, #88]	; (8024390 <_vfiprintf_r+0x258>)
 8024338:	a904      	add	r1, sp, #16
 802433a:	4630      	mov	r0, r6
 802433c:	f3af 8000 	nop.w
 8024340:	4607      	mov	r7, r0
 8024342:	1c78      	adds	r0, r7, #1
 8024344:	d1d6      	bne.n	80242f4 <_vfiprintf_r+0x1bc>
 8024346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024348:	07d9      	lsls	r1, r3, #31
 802434a:	d405      	bmi.n	8024358 <_vfiprintf_r+0x220>
 802434c:	89ab      	ldrh	r3, [r5, #12]
 802434e:	059a      	lsls	r2, r3, #22
 8024350:	d402      	bmi.n	8024358 <_vfiprintf_r+0x220>
 8024352:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024354:	f7fd fea9 	bl	80220aa <__retarget_lock_release_recursive>
 8024358:	89ab      	ldrh	r3, [r5, #12]
 802435a:	065b      	lsls	r3, r3, #25
 802435c:	f53f af12 	bmi.w	8024184 <_vfiprintf_r+0x4c>
 8024360:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024362:	e711      	b.n	8024188 <_vfiprintf_r+0x50>
 8024364:	ab03      	add	r3, sp, #12
 8024366:	9300      	str	r3, [sp, #0]
 8024368:	462a      	mov	r2, r5
 802436a:	4b09      	ldr	r3, [pc, #36]	; (8024390 <_vfiprintf_r+0x258>)
 802436c:	a904      	add	r1, sp, #16
 802436e:	4630      	mov	r0, r6
 8024370:	f000 f880 	bl	8024474 <_printf_i>
 8024374:	e7e4      	b.n	8024340 <_vfiprintf_r+0x208>
 8024376:	bf00      	nop
 8024378:	0802ba24 	.word	0x0802ba24
 802437c:	0802ba44 	.word	0x0802ba44
 8024380:	0802ba04 	.word	0x0802ba04
 8024384:	0802bfa3 	.word	0x0802bfa3
 8024388:	0802bfad 	.word	0x0802bfad
 802438c:	00000000 	.word	0x00000000
 8024390:	08024113 	.word	0x08024113
 8024394:	0802bfa9 	.word	0x0802bfa9

08024398 <_printf_common>:
 8024398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802439c:	4616      	mov	r6, r2
 802439e:	4699      	mov	r9, r3
 80243a0:	688a      	ldr	r2, [r1, #8]
 80243a2:	690b      	ldr	r3, [r1, #16]
 80243a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80243a8:	4293      	cmp	r3, r2
 80243aa:	bfb8      	it	lt
 80243ac:	4613      	movlt	r3, r2
 80243ae:	6033      	str	r3, [r6, #0]
 80243b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80243b4:	4607      	mov	r7, r0
 80243b6:	460c      	mov	r4, r1
 80243b8:	b10a      	cbz	r2, 80243be <_printf_common+0x26>
 80243ba:	3301      	adds	r3, #1
 80243bc:	6033      	str	r3, [r6, #0]
 80243be:	6823      	ldr	r3, [r4, #0]
 80243c0:	0699      	lsls	r1, r3, #26
 80243c2:	bf42      	ittt	mi
 80243c4:	6833      	ldrmi	r3, [r6, #0]
 80243c6:	3302      	addmi	r3, #2
 80243c8:	6033      	strmi	r3, [r6, #0]
 80243ca:	6825      	ldr	r5, [r4, #0]
 80243cc:	f015 0506 	ands.w	r5, r5, #6
 80243d0:	d106      	bne.n	80243e0 <_printf_common+0x48>
 80243d2:	f104 0a19 	add.w	sl, r4, #25
 80243d6:	68e3      	ldr	r3, [r4, #12]
 80243d8:	6832      	ldr	r2, [r6, #0]
 80243da:	1a9b      	subs	r3, r3, r2
 80243dc:	42ab      	cmp	r3, r5
 80243de:	dc26      	bgt.n	802442e <_printf_common+0x96>
 80243e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80243e4:	1e13      	subs	r3, r2, #0
 80243e6:	6822      	ldr	r2, [r4, #0]
 80243e8:	bf18      	it	ne
 80243ea:	2301      	movne	r3, #1
 80243ec:	0692      	lsls	r2, r2, #26
 80243ee:	d42b      	bmi.n	8024448 <_printf_common+0xb0>
 80243f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80243f4:	4649      	mov	r1, r9
 80243f6:	4638      	mov	r0, r7
 80243f8:	47c0      	blx	r8
 80243fa:	3001      	adds	r0, #1
 80243fc:	d01e      	beq.n	802443c <_printf_common+0xa4>
 80243fe:	6823      	ldr	r3, [r4, #0]
 8024400:	68e5      	ldr	r5, [r4, #12]
 8024402:	6832      	ldr	r2, [r6, #0]
 8024404:	f003 0306 	and.w	r3, r3, #6
 8024408:	2b04      	cmp	r3, #4
 802440a:	bf08      	it	eq
 802440c:	1aad      	subeq	r5, r5, r2
 802440e:	68a3      	ldr	r3, [r4, #8]
 8024410:	6922      	ldr	r2, [r4, #16]
 8024412:	bf0c      	ite	eq
 8024414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024418:	2500      	movne	r5, #0
 802441a:	4293      	cmp	r3, r2
 802441c:	bfc4      	itt	gt
 802441e:	1a9b      	subgt	r3, r3, r2
 8024420:	18ed      	addgt	r5, r5, r3
 8024422:	2600      	movs	r6, #0
 8024424:	341a      	adds	r4, #26
 8024426:	42b5      	cmp	r5, r6
 8024428:	d11a      	bne.n	8024460 <_printf_common+0xc8>
 802442a:	2000      	movs	r0, #0
 802442c:	e008      	b.n	8024440 <_printf_common+0xa8>
 802442e:	2301      	movs	r3, #1
 8024430:	4652      	mov	r2, sl
 8024432:	4649      	mov	r1, r9
 8024434:	4638      	mov	r0, r7
 8024436:	47c0      	blx	r8
 8024438:	3001      	adds	r0, #1
 802443a:	d103      	bne.n	8024444 <_printf_common+0xac>
 802443c:	f04f 30ff 	mov.w	r0, #4294967295
 8024440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024444:	3501      	adds	r5, #1
 8024446:	e7c6      	b.n	80243d6 <_printf_common+0x3e>
 8024448:	18e1      	adds	r1, r4, r3
 802444a:	1c5a      	adds	r2, r3, #1
 802444c:	2030      	movs	r0, #48	; 0x30
 802444e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024452:	4422      	add	r2, r4
 8024454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802445c:	3302      	adds	r3, #2
 802445e:	e7c7      	b.n	80243f0 <_printf_common+0x58>
 8024460:	2301      	movs	r3, #1
 8024462:	4622      	mov	r2, r4
 8024464:	4649      	mov	r1, r9
 8024466:	4638      	mov	r0, r7
 8024468:	47c0      	blx	r8
 802446a:	3001      	adds	r0, #1
 802446c:	d0e6      	beq.n	802443c <_printf_common+0xa4>
 802446e:	3601      	adds	r6, #1
 8024470:	e7d9      	b.n	8024426 <_printf_common+0x8e>
	...

08024474 <_printf_i>:
 8024474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024478:	460c      	mov	r4, r1
 802447a:	4691      	mov	r9, r2
 802447c:	7e27      	ldrb	r7, [r4, #24]
 802447e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024480:	2f78      	cmp	r7, #120	; 0x78
 8024482:	4680      	mov	r8, r0
 8024484:	469a      	mov	sl, r3
 8024486:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802448a:	d807      	bhi.n	802449c <_printf_i+0x28>
 802448c:	2f62      	cmp	r7, #98	; 0x62
 802448e:	d80a      	bhi.n	80244a6 <_printf_i+0x32>
 8024490:	2f00      	cmp	r7, #0
 8024492:	f000 80d8 	beq.w	8024646 <_printf_i+0x1d2>
 8024496:	2f58      	cmp	r7, #88	; 0x58
 8024498:	f000 80a3 	beq.w	80245e2 <_printf_i+0x16e>
 802449c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80244a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80244a4:	e03a      	b.n	802451c <_printf_i+0xa8>
 80244a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80244aa:	2b15      	cmp	r3, #21
 80244ac:	d8f6      	bhi.n	802449c <_printf_i+0x28>
 80244ae:	a001      	add	r0, pc, #4	; (adr r0, 80244b4 <_printf_i+0x40>)
 80244b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80244b4:	0802450d 	.word	0x0802450d
 80244b8:	08024521 	.word	0x08024521
 80244bc:	0802449d 	.word	0x0802449d
 80244c0:	0802449d 	.word	0x0802449d
 80244c4:	0802449d 	.word	0x0802449d
 80244c8:	0802449d 	.word	0x0802449d
 80244cc:	08024521 	.word	0x08024521
 80244d0:	0802449d 	.word	0x0802449d
 80244d4:	0802449d 	.word	0x0802449d
 80244d8:	0802449d 	.word	0x0802449d
 80244dc:	0802449d 	.word	0x0802449d
 80244e0:	0802462d 	.word	0x0802462d
 80244e4:	08024551 	.word	0x08024551
 80244e8:	0802460f 	.word	0x0802460f
 80244ec:	0802449d 	.word	0x0802449d
 80244f0:	0802449d 	.word	0x0802449d
 80244f4:	0802464f 	.word	0x0802464f
 80244f8:	0802449d 	.word	0x0802449d
 80244fc:	08024551 	.word	0x08024551
 8024500:	0802449d 	.word	0x0802449d
 8024504:	0802449d 	.word	0x0802449d
 8024508:	08024617 	.word	0x08024617
 802450c:	680b      	ldr	r3, [r1, #0]
 802450e:	1d1a      	adds	r2, r3, #4
 8024510:	681b      	ldr	r3, [r3, #0]
 8024512:	600a      	str	r2, [r1, #0]
 8024514:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8024518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802451c:	2301      	movs	r3, #1
 802451e:	e0a3      	b.n	8024668 <_printf_i+0x1f4>
 8024520:	6825      	ldr	r5, [r4, #0]
 8024522:	6808      	ldr	r0, [r1, #0]
 8024524:	062e      	lsls	r6, r5, #24
 8024526:	f100 0304 	add.w	r3, r0, #4
 802452a:	d50a      	bpl.n	8024542 <_printf_i+0xce>
 802452c:	6805      	ldr	r5, [r0, #0]
 802452e:	600b      	str	r3, [r1, #0]
 8024530:	2d00      	cmp	r5, #0
 8024532:	da03      	bge.n	802453c <_printf_i+0xc8>
 8024534:	232d      	movs	r3, #45	; 0x2d
 8024536:	426d      	negs	r5, r5
 8024538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802453c:	485e      	ldr	r0, [pc, #376]	; (80246b8 <_printf_i+0x244>)
 802453e:	230a      	movs	r3, #10
 8024540:	e019      	b.n	8024576 <_printf_i+0x102>
 8024542:	f015 0f40 	tst.w	r5, #64	; 0x40
 8024546:	6805      	ldr	r5, [r0, #0]
 8024548:	600b      	str	r3, [r1, #0]
 802454a:	bf18      	it	ne
 802454c:	b22d      	sxthne	r5, r5
 802454e:	e7ef      	b.n	8024530 <_printf_i+0xbc>
 8024550:	680b      	ldr	r3, [r1, #0]
 8024552:	6825      	ldr	r5, [r4, #0]
 8024554:	1d18      	adds	r0, r3, #4
 8024556:	6008      	str	r0, [r1, #0]
 8024558:	0628      	lsls	r0, r5, #24
 802455a:	d501      	bpl.n	8024560 <_printf_i+0xec>
 802455c:	681d      	ldr	r5, [r3, #0]
 802455e:	e002      	b.n	8024566 <_printf_i+0xf2>
 8024560:	0669      	lsls	r1, r5, #25
 8024562:	d5fb      	bpl.n	802455c <_printf_i+0xe8>
 8024564:	881d      	ldrh	r5, [r3, #0]
 8024566:	4854      	ldr	r0, [pc, #336]	; (80246b8 <_printf_i+0x244>)
 8024568:	2f6f      	cmp	r7, #111	; 0x6f
 802456a:	bf0c      	ite	eq
 802456c:	2308      	moveq	r3, #8
 802456e:	230a      	movne	r3, #10
 8024570:	2100      	movs	r1, #0
 8024572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024576:	6866      	ldr	r6, [r4, #4]
 8024578:	60a6      	str	r6, [r4, #8]
 802457a:	2e00      	cmp	r6, #0
 802457c:	bfa2      	ittt	ge
 802457e:	6821      	ldrge	r1, [r4, #0]
 8024580:	f021 0104 	bicge.w	r1, r1, #4
 8024584:	6021      	strge	r1, [r4, #0]
 8024586:	b90d      	cbnz	r5, 802458c <_printf_i+0x118>
 8024588:	2e00      	cmp	r6, #0
 802458a:	d04d      	beq.n	8024628 <_printf_i+0x1b4>
 802458c:	4616      	mov	r6, r2
 802458e:	fbb5 f1f3 	udiv	r1, r5, r3
 8024592:	fb03 5711 	mls	r7, r3, r1, r5
 8024596:	5dc7      	ldrb	r7, [r0, r7]
 8024598:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802459c:	462f      	mov	r7, r5
 802459e:	42bb      	cmp	r3, r7
 80245a0:	460d      	mov	r5, r1
 80245a2:	d9f4      	bls.n	802458e <_printf_i+0x11a>
 80245a4:	2b08      	cmp	r3, #8
 80245a6:	d10b      	bne.n	80245c0 <_printf_i+0x14c>
 80245a8:	6823      	ldr	r3, [r4, #0]
 80245aa:	07df      	lsls	r7, r3, #31
 80245ac:	d508      	bpl.n	80245c0 <_printf_i+0x14c>
 80245ae:	6923      	ldr	r3, [r4, #16]
 80245b0:	6861      	ldr	r1, [r4, #4]
 80245b2:	4299      	cmp	r1, r3
 80245b4:	bfde      	ittt	le
 80245b6:	2330      	movle	r3, #48	; 0x30
 80245b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80245bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80245c0:	1b92      	subs	r2, r2, r6
 80245c2:	6122      	str	r2, [r4, #16]
 80245c4:	f8cd a000 	str.w	sl, [sp]
 80245c8:	464b      	mov	r3, r9
 80245ca:	aa03      	add	r2, sp, #12
 80245cc:	4621      	mov	r1, r4
 80245ce:	4640      	mov	r0, r8
 80245d0:	f7ff fee2 	bl	8024398 <_printf_common>
 80245d4:	3001      	adds	r0, #1
 80245d6:	d14c      	bne.n	8024672 <_printf_i+0x1fe>
 80245d8:	f04f 30ff 	mov.w	r0, #4294967295
 80245dc:	b004      	add	sp, #16
 80245de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80245e2:	4835      	ldr	r0, [pc, #212]	; (80246b8 <_printf_i+0x244>)
 80245e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80245e8:	6823      	ldr	r3, [r4, #0]
 80245ea:	680e      	ldr	r6, [r1, #0]
 80245ec:	061f      	lsls	r7, r3, #24
 80245ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80245f2:	600e      	str	r6, [r1, #0]
 80245f4:	d514      	bpl.n	8024620 <_printf_i+0x1ac>
 80245f6:	07d9      	lsls	r1, r3, #31
 80245f8:	bf44      	itt	mi
 80245fa:	f043 0320 	orrmi.w	r3, r3, #32
 80245fe:	6023      	strmi	r3, [r4, #0]
 8024600:	b91d      	cbnz	r5, 802460a <_printf_i+0x196>
 8024602:	6823      	ldr	r3, [r4, #0]
 8024604:	f023 0320 	bic.w	r3, r3, #32
 8024608:	6023      	str	r3, [r4, #0]
 802460a:	2310      	movs	r3, #16
 802460c:	e7b0      	b.n	8024570 <_printf_i+0xfc>
 802460e:	6823      	ldr	r3, [r4, #0]
 8024610:	f043 0320 	orr.w	r3, r3, #32
 8024614:	6023      	str	r3, [r4, #0]
 8024616:	2378      	movs	r3, #120	; 0x78
 8024618:	4828      	ldr	r0, [pc, #160]	; (80246bc <_printf_i+0x248>)
 802461a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802461e:	e7e3      	b.n	80245e8 <_printf_i+0x174>
 8024620:	065e      	lsls	r6, r3, #25
 8024622:	bf48      	it	mi
 8024624:	b2ad      	uxthmi	r5, r5
 8024626:	e7e6      	b.n	80245f6 <_printf_i+0x182>
 8024628:	4616      	mov	r6, r2
 802462a:	e7bb      	b.n	80245a4 <_printf_i+0x130>
 802462c:	680b      	ldr	r3, [r1, #0]
 802462e:	6826      	ldr	r6, [r4, #0]
 8024630:	6960      	ldr	r0, [r4, #20]
 8024632:	1d1d      	adds	r5, r3, #4
 8024634:	600d      	str	r5, [r1, #0]
 8024636:	0635      	lsls	r5, r6, #24
 8024638:	681b      	ldr	r3, [r3, #0]
 802463a:	d501      	bpl.n	8024640 <_printf_i+0x1cc>
 802463c:	6018      	str	r0, [r3, #0]
 802463e:	e002      	b.n	8024646 <_printf_i+0x1d2>
 8024640:	0671      	lsls	r1, r6, #25
 8024642:	d5fb      	bpl.n	802463c <_printf_i+0x1c8>
 8024644:	8018      	strh	r0, [r3, #0]
 8024646:	2300      	movs	r3, #0
 8024648:	6123      	str	r3, [r4, #16]
 802464a:	4616      	mov	r6, r2
 802464c:	e7ba      	b.n	80245c4 <_printf_i+0x150>
 802464e:	680b      	ldr	r3, [r1, #0]
 8024650:	1d1a      	adds	r2, r3, #4
 8024652:	600a      	str	r2, [r1, #0]
 8024654:	681e      	ldr	r6, [r3, #0]
 8024656:	6862      	ldr	r2, [r4, #4]
 8024658:	2100      	movs	r1, #0
 802465a:	4630      	mov	r0, r6
 802465c:	f7db fe00 	bl	8000260 <memchr>
 8024660:	b108      	cbz	r0, 8024666 <_printf_i+0x1f2>
 8024662:	1b80      	subs	r0, r0, r6
 8024664:	6060      	str	r0, [r4, #4]
 8024666:	6863      	ldr	r3, [r4, #4]
 8024668:	6123      	str	r3, [r4, #16]
 802466a:	2300      	movs	r3, #0
 802466c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024670:	e7a8      	b.n	80245c4 <_printf_i+0x150>
 8024672:	6923      	ldr	r3, [r4, #16]
 8024674:	4632      	mov	r2, r6
 8024676:	4649      	mov	r1, r9
 8024678:	4640      	mov	r0, r8
 802467a:	47d0      	blx	sl
 802467c:	3001      	adds	r0, #1
 802467e:	d0ab      	beq.n	80245d8 <_printf_i+0x164>
 8024680:	6823      	ldr	r3, [r4, #0]
 8024682:	079b      	lsls	r3, r3, #30
 8024684:	d413      	bmi.n	80246ae <_printf_i+0x23a>
 8024686:	68e0      	ldr	r0, [r4, #12]
 8024688:	9b03      	ldr	r3, [sp, #12]
 802468a:	4298      	cmp	r0, r3
 802468c:	bfb8      	it	lt
 802468e:	4618      	movlt	r0, r3
 8024690:	e7a4      	b.n	80245dc <_printf_i+0x168>
 8024692:	2301      	movs	r3, #1
 8024694:	4632      	mov	r2, r6
 8024696:	4649      	mov	r1, r9
 8024698:	4640      	mov	r0, r8
 802469a:	47d0      	blx	sl
 802469c:	3001      	adds	r0, #1
 802469e:	d09b      	beq.n	80245d8 <_printf_i+0x164>
 80246a0:	3501      	adds	r5, #1
 80246a2:	68e3      	ldr	r3, [r4, #12]
 80246a4:	9903      	ldr	r1, [sp, #12]
 80246a6:	1a5b      	subs	r3, r3, r1
 80246a8:	42ab      	cmp	r3, r5
 80246aa:	dcf2      	bgt.n	8024692 <_printf_i+0x21e>
 80246ac:	e7eb      	b.n	8024686 <_printf_i+0x212>
 80246ae:	2500      	movs	r5, #0
 80246b0:	f104 0619 	add.w	r6, r4, #25
 80246b4:	e7f5      	b.n	80246a2 <_printf_i+0x22e>
 80246b6:	bf00      	nop
 80246b8:	0802bfb4 	.word	0x0802bfb4
 80246bc:	0802bfc5 	.word	0x0802bfc5

080246c0 <_putc_r>:
 80246c0:	b570      	push	{r4, r5, r6, lr}
 80246c2:	460d      	mov	r5, r1
 80246c4:	4614      	mov	r4, r2
 80246c6:	4606      	mov	r6, r0
 80246c8:	b118      	cbz	r0, 80246d2 <_putc_r+0x12>
 80246ca:	6983      	ldr	r3, [r0, #24]
 80246cc:	b90b      	cbnz	r3, 80246d2 <_putc_r+0x12>
 80246ce:	f7fd f937 	bl	8021940 <__sinit>
 80246d2:	4b1c      	ldr	r3, [pc, #112]	; (8024744 <_putc_r+0x84>)
 80246d4:	429c      	cmp	r4, r3
 80246d6:	d124      	bne.n	8024722 <_putc_r+0x62>
 80246d8:	6874      	ldr	r4, [r6, #4]
 80246da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80246dc:	07d8      	lsls	r0, r3, #31
 80246de:	d405      	bmi.n	80246ec <_putc_r+0x2c>
 80246e0:	89a3      	ldrh	r3, [r4, #12]
 80246e2:	0599      	lsls	r1, r3, #22
 80246e4:	d402      	bmi.n	80246ec <_putc_r+0x2c>
 80246e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80246e8:	f7fd fcdd 	bl	80220a6 <__retarget_lock_acquire_recursive>
 80246ec:	68a3      	ldr	r3, [r4, #8]
 80246ee:	3b01      	subs	r3, #1
 80246f0:	2b00      	cmp	r3, #0
 80246f2:	60a3      	str	r3, [r4, #8]
 80246f4:	da05      	bge.n	8024702 <_putc_r+0x42>
 80246f6:	69a2      	ldr	r2, [r4, #24]
 80246f8:	4293      	cmp	r3, r2
 80246fa:	db1c      	blt.n	8024736 <_putc_r+0x76>
 80246fc:	b2eb      	uxtb	r3, r5
 80246fe:	2b0a      	cmp	r3, #10
 8024700:	d019      	beq.n	8024736 <_putc_r+0x76>
 8024702:	6823      	ldr	r3, [r4, #0]
 8024704:	1c5a      	adds	r2, r3, #1
 8024706:	6022      	str	r2, [r4, #0]
 8024708:	701d      	strb	r5, [r3, #0]
 802470a:	b2ed      	uxtb	r5, r5
 802470c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802470e:	07da      	lsls	r2, r3, #31
 8024710:	d405      	bmi.n	802471e <_putc_r+0x5e>
 8024712:	89a3      	ldrh	r3, [r4, #12]
 8024714:	059b      	lsls	r3, r3, #22
 8024716:	d402      	bmi.n	802471e <_putc_r+0x5e>
 8024718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802471a:	f7fd fcc6 	bl	80220aa <__retarget_lock_release_recursive>
 802471e:	4628      	mov	r0, r5
 8024720:	bd70      	pop	{r4, r5, r6, pc}
 8024722:	4b09      	ldr	r3, [pc, #36]	; (8024748 <_putc_r+0x88>)
 8024724:	429c      	cmp	r4, r3
 8024726:	d101      	bne.n	802472c <_putc_r+0x6c>
 8024728:	68b4      	ldr	r4, [r6, #8]
 802472a:	e7d6      	b.n	80246da <_putc_r+0x1a>
 802472c:	4b07      	ldr	r3, [pc, #28]	; (802474c <_putc_r+0x8c>)
 802472e:	429c      	cmp	r4, r3
 8024730:	bf08      	it	eq
 8024732:	68f4      	ldreq	r4, [r6, #12]
 8024734:	e7d1      	b.n	80246da <_putc_r+0x1a>
 8024736:	4629      	mov	r1, r5
 8024738:	4622      	mov	r2, r4
 802473a:	4630      	mov	r0, r6
 802473c:	f7ff f856 	bl	80237ec <__swbuf_r>
 8024740:	4605      	mov	r5, r0
 8024742:	e7e3      	b.n	802470c <_putc_r+0x4c>
 8024744:	0802ba24 	.word	0x0802ba24
 8024748:	0802ba44 	.word	0x0802ba44
 802474c:	0802ba04 	.word	0x0802ba04

08024750 <_read_r>:
 8024750:	b538      	push	{r3, r4, r5, lr}
 8024752:	4d07      	ldr	r5, [pc, #28]	; (8024770 <_read_r+0x20>)
 8024754:	4604      	mov	r4, r0
 8024756:	4608      	mov	r0, r1
 8024758:	4611      	mov	r1, r2
 802475a:	2200      	movs	r2, #0
 802475c:	602a      	str	r2, [r5, #0]
 802475e:	461a      	mov	r2, r3
 8024760:	f7dc fb51 	bl	8000e06 <_read>
 8024764:	1c43      	adds	r3, r0, #1
 8024766:	d102      	bne.n	802476e <_read_r+0x1e>
 8024768:	682b      	ldr	r3, [r5, #0]
 802476a:	b103      	cbz	r3, 802476e <_read_r+0x1e>
 802476c:	6023      	str	r3, [r4, #0]
 802476e:	bd38      	pop	{r3, r4, r5, pc}
 8024770:	2000107c 	.word	0x2000107c

08024774 <sniprintf>:
 8024774:	b40c      	push	{r2, r3}
 8024776:	b530      	push	{r4, r5, lr}
 8024778:	4b17      	ldr	r3, [pc, #92]	; (80247d8 <sniprintf+0x64>)
 802477a:	1e0c      	subs	r4, r1, #0
 802477c:	681d      	ldr	r5, [r3, #0]
 802477e:	b09d      	sub	sp, #116	; 0x74
 8024780:	da08      	bge.n	8024794 <sniprintf+0x20>
 8024782:	238b      	movs	r3, #139	; 0x8b
 8024784:	602b      	str	r3, [r5, #0]
 8024786:	f04f 30ff 	mov.w	r0, #4294967295
 802478a:	b01d      	add	sp, #116	; 0x74
 802478c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024790:	b002      	add	sp, #8
 8024792:	4770      	bx	lr
 8024794:	f44f 7302 	mov.w	r3, #520	; 0x208
 8024798:	f8ad 3014 	strh.w	r3, [sp, #20]
 802479c:	bf14      	ite	ne
 802479e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80247a2:	4623      	moveq	r3, r4
 80247a4:	9304      	str	r3, [sp, #16]
 80247a6:	9307      	str	r3, [sp, #28]
 80247a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80247ac:	9002      	str	r0, [sp, #8]
 80247ae:	9006      	str	r0, [sp, #24]
 80247b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80247b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80247b6:	ab21      	add	r3, sp, #132	; 0x84
 80247b8:	a902      	add	r1, sp, #8
 80247ba:	4628      	mov	r0, r5
 80247bc:	9301      	str	r3, [sp, #4]
 80247be:	f7ff fb91 	bl	8023ee4 <_svfiprintf_r>
 80247c2:	1c43      	adds	r3, r0, #1
 80247c4:	bfbc      	itt	lt
 80247c6:	238b      	movlt	r3, #139	; 0x8b
 80247c8:	602b      	strlt	r3, [r5, #0]
 80247ca:	2c00      	cmp	r4, #0
 80247cc:	d0dd      	beq.n	802478a <sniprintf+0x16>
 80247ce:	9b02      	ldr	r3, [sp, #8]
 80247d0:	2200      	movs	r2, #0
 80247d2:	701a      	strb	r2, [r3, #0]
 80247d4:	e7d9      	b.n	802478a <sniprintf+0x16>
 80247d6:	bf00      	nop
 80247d8:	20000108 	.word	0x20000108

080247dc <siscanf>:
 80247dc:	b40e      	push	{r1, r2, r3}
 80247de:	b510      	push	{r4, lr}
 80247e0:	b09f      	sub	sp, #124	; 0x7c
 80247e2:	ac21      	add	r4, sp, #132	; 0x84
 80247e4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80247e8:	f854 2b04 	ldr.w	r2, [r4], #4
 80247ec:	9201      	str	r2, [sp, #4]
 80247ee:	f8ad 101c 	strh.w	r1, [sp, #28]
 80247f2:	9004      	str	r0, [sp, #16]
 80247f4:	9008      	str	r0, [sp, #32]
 80247f6:	f7db fd21 	bl	800023c <strlen>
 80247fa:	4b0c      	ldr	r3, [pc, #48]	; (802482c <siscanf+0x50>)
 80247fc:	9005      	str	r0, [sp, #20]
 80247fe:	9009      	str	r0, [sp, #36]	; 0x24
 8024800:	930d      	str	r3, [sp, #52]	; 0x34
 8024802:	480b      	ldr	r0, [pc, #44]	; (8024830 <siscanf+0x54>)
 8024804:	9a01      	ldr	r2, [sp, #4]
 8024806:	6800      	ldr	r0, [r0, #0]
 8024808:	9403      	str	r4, [sp, #12]
 802480a:	2300      	movs	r3, #0
 802480c:	9311      	str	r3, [sp, #68]	; 0x44
 802480e:	9316      	str	r3, [sp, #88]	; 0x58
 8024810:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024814:	f8ad 301e 	strh.w	r3, [sp, #30]
 8024818:	a904      	add	r1, sp, #16
 802481a:	4623      	mov	r3, r4
 802481c:	f000 f8b2 	bl	8024984 <__ssvfiscanf_r>
 8024820:	b01f      	add	sp, #124	; 0x7c
 8024822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024826:	b003      	add	sp, #12
 8024828:	4770      	bx	lr
 802482a:	bf00      	nop
 802482c:	0802257b 	.word	0x0802257b
 8024830:	20000108 	.word	0x20000108

08024834 <strncmp>:
 8024834:	b510      	push	{r4, lr}
 8024836:	b16a      	cbz	r2, 8024854 <strncmp+0x20>
 8024838:	3901      	subs	r1, #1
 802483a:	1884      	adds	r4, r0, r2
 802483c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8024840:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8024844:	4293      	cmp	r3, r2
 8024846:	d103      	bne.n	8024850 <strncmp+0x1c>
 8024848:	42a0      	cmp	r0, r4
 802484a:	d001      	beq.n	8024850 <strncmp+0x1c>
 802484c:	2b00      	cmp	r3, #0
 802484e:	d1f5      	bne.n	802483c <strncmp+0x8>
 8024850:	1a98      	subs	r0, r3, r2
 8024852:	bd10      	pop	{r4, pc}
 8024854:	4610      	mov	r0, r2
 8024856:	e7fc      	b.n	8024852 <strncmp+0x1e>

08024858 <__ascii_wctomb>:
 8024858:	b149      	cbz	r1, 802486e <__ascii_wctomb+0x16>
 802485a:	2aff      	cmp	r2, #255	; 0xff
 802485c:	bf85      	ittet	hi
 802485e:	238a      	movhi	r3, #138	; 0x8a
 8024860:	6003      	strhi	r3, [r0, #0]
 8024862:	700a      	strbls	r2, [r1, #0]
 8024864:	f04f 30ff 	movhi.w	r0, #4294967295
 8024868:	bf98      	it	ls
 802486a:	2001      	movls	r0, #1
 802486c:	4770      	bx	lr
 802486e:	4608      	mov	r0, r1
 8024870:	4770      	bx	lr
	...

08024874 <__env_lock>:
 8024874:	4801      	ldr	r0, [pc, #4]	; (802487c <__env_lock+0x8>)
 8024876:	f7fd bc16 	b.w	80220a6 <__retarget_lock_acquire_recursive>
 802487a:	bf00      	nop
 802487c:	20001072 	.word	0x20001072

08024880 <__env_unlock>:
 8024880:	4801      	ldr	r0, [pc, #4]	; (8024888 <__env_unlock+0x8>)
 8024882:	f7fd bc12 	b.w	80220aa <__retarget_lock_release_recursive>
 8024886:	bf00      	nop
 8024888:	20001072 	.word	0x20001072

0802488c <memmove>:
 802488c:	4288      	cmp	r0, r1
 802488e:	b510      	push	{r4, lr}
 8024890:	eb01 0402 	add.w	r4, r1, r2
 8024894:	d902      	bls.n	802489c <memmove+0x10>
 8024896:	4284      	cmp	r4, r0
 8024898:	4623      	mov	r3, r4
 802489a:	d807      	bhi.n	80248ac <memmove+0x20>
 802489c:	1e43      	subs	r3, r0, #1
 802489e:	42a1      	cmp	r1, r4
 80248a0:	d008      	beq.n	80248b4 <memmove+0x28>
 80248a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80248a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80248aa:	e7f8      	b.n	802489e <memmove+0x12>
 80248ac:	4402      	add	r2, r0
 80248ae:	4601      	mov	r1, r0
 80248b0:	428a      	cmp	r2, r1
 80248b2:	d100      	bne.n	80248b6 <memmove+0x2a>
 80248b4:	bd10      	pop	{r4, pc}
 80248b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80248ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80248be:	e7f7      	b.n	80248b0 <memmove+0x24>

080248c0 <_malloc_usable_size_r>:
 80248c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80248c4:	1f18      	subs	r0, r3, #4
 80248c6:	2b00      	cmp	r3, #0
 80248c8:	bfbc      	itt	lt
 80248ca:	580b      	ldrlt	r3, [r1, r0]
 80248cc:	18c0      	addlt	r0, r0, r3
 80248ce:	4770      	bx	lr

080248d0 <_sungetc_r>:
 80248d0:	b538      	push	{r3, r4, r5, lr}
 80248d2:	1c4b      	adds	r3, r1, #1
 80248d4:	4614      	mov	r4, r2
 80248d6:	d103      	bne.n	80248e0 <_sungetc_r+0x10>
 80248d8:	f04f 35ff 	mov.w	r5, #4294967295
 80248dc:	4628      	mov	r0, r5
 80248de:	bd38      	pop	{r3, r4, r5, pc}
 80248e0:	8993      	ldrh	r3, [r2, #12]
 80248e2:	f023 0320 	bic.w	r3, r3, #32
 80248e6:	8193      	strh	r3, [r2, #12]
 80248e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80248ea:	6852      	ldr	r2, [r2, #4]
 80248ec:	b2cd      	uxtb	r5, r1
 80248ee:	b18b      	cbz	r3, 8024914 <_sungetc_r+0x44>
 80248f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80248f2:	4293      	cmp	r3, r2
 80248f4:	dd08      	ble.n	8024908 <_sungetc_r+0x38>
 80248f6:	6823      	ldr	r3, [r4, #0]
 80248f8:	1e5a      	subs	r2, r3, #1
 80248fa:	6022      	str	r2, [r4, #0]
 80248fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8024900:	6863      	ldr	r3, [r4, #4]
 8024902:	3301      	adds	r3, #1
 8024904:	6063      	str	r3, [r4, #4]
 8024906:	e7e9      	b.n	80248dc <_sungetc_r+0xc>
 8024908:	4621      	mov	r1, r4
 802490a:	f000 fb39 	bl	8024f80 <__submore>
 802490e:	2800      	cmp	r0, #0
 8024910:	d0f1      	beq.n	80248f6 <_sungetc_r+0x26>
 8024912:	e7e1      	b.n	80248d8 <_sungetc_r+0x8>
 8024914:	6921      	ldr	r1, [r4, #16]
 8024916:	6823      	ldr	r3, [r4, #0]
 8024918:	b151      	cbz	r1, 8024930 <_sungetc_r+0x60>
 802491a:	4299      	cmp	r1, r3
 802491c:	d208      	bcs.n	8024930 <_sungetc_r+0x60>
 802491e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8024922:	42a9      	cmp	r1, r5
 8024924:	d104      	bne.n	8024930 <_sungetc_r+0x60>
 8024926:	3b01      	subs	r3, #1
 8024928:	3201      	adds	r2, #1
 802492a:	6023      	str	r3, [r4, #0]
 802492c:	6062      	str	r2, [r4, #4]
 802492e:	e7d5      	b.n	80248dc <_sungetc_r+0xc>
 8024930:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8024934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024938:	6363      	str	r3, [r4, #52]	; 0x34
 802493a:	2303      	movs	r3, #3
 802493c:	63a3      	str	r3, [r4, #56]	; 0x38
 802493e:	4623      	mov	r3, r4
 8024940:	f803 5f46 	strb.w	r5, [r3, #70]!
 8024944:	6023      	str	r3, [r4, #0]
 8024946:	2301      	movs	r3, #1
 8024948:	e7dc      	b.n	8024904 <_sungetc_r+0x34>

0802494a <__ssrefill_r>:
 802494a:	b510      	push	{r4, lr}
 802494c:	460c      	mov	r4, r1
 802494e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8024950:	b169      	cbz	r1, 802496e <__ssrefill_r+0x24>
 8024952:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024956:	4299      	cmp	r1, r3
 8024958:	d001      	beq.n	802495e <__ssrefill_r+0x14>
 802495a:	f7fd fc41 	bl	80221e0 <_free_r>
 802495e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024960:	6063      	str	r3, [r4, #4]
 8024962:	2000      	movs	r0, #0
 8024964:	6360      	str	r0, [r4, #52]	; 0x34
 8024966:	b113      	cbz	r3, 802496e <__ssrefill_r+0x24>
 8024968:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802496a:	6023      	str	r3, [r4, #0]
 802496c:	bd10      	pop	{r4, pc}
 802496e:	6923      	ldr	r3, [r4, #16]
 8024970:	6023      	str	r3, [r4, #0]
 8024972:	2300      	movs	r3, #0
 8024974:	6063      	str	r3, [r4, #4]
 8024976:	89a3      	ldrh	r3, [r4, #12]
 8024978:	f043 0320 	orr.w	r3, r3, #32
 802497c:	81a3      	strh	r3, [r4, #12]
 802497e:	f04f 30ff 	mov.w	r0, #4294967295
 8024982:	e7f3      	b.n	802496c <__ssrefill_r+0x22>

08024984 <__ssvfiscanf_r>:
 8024984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024988:	460c      	mov	r4, r1
 802498a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 802498e:	2100      	movs	r1, #0
 8024990:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8024994:	49b2      	ldr	r1, [pc, #712]	; (8024c60 <__ssvfiscanf_r+0x2dc>)
 8024996:	91a0      	str	r1, [sp, #640]	; 0x280
 8024998:	f10d 0804 	add.w	r8, sp, #4
 802499c:	49b1      	ldr	r1, [pc, #708]	; (8024c64 <__ssvfiscanf_r+0x2e0>)
 802499e:	4fb2      	ldr	r7, [pc, #712]	; (8024c68 <__ssvfiscanf_r+0x2e4>)
 80249a0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8024c6c <__ssvfiscanf_r+0x2e8>
 80249a4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80249a8:	4606      	mov	r6, r0
 80249aa:	91a1      	str	r1, [sp, #644]	; 0x284
 80249ac:	9300      	str	r3, [sp, #0]
 80249ae:	f892 a000 	ldrb.w	sl, [r2]
 80249b2:	f1ba 0f00 	cmp.w	sl, #0
 80249b6:	f000 8151 	beq.w	8024c5c <__ssvfiscanf_r+0x2d8>
 80249ba:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80249be:	f013 0308 	ands.w	r3, r3, #8
 80249c2:	f102 0501 	add.w	r5, r2, #1
 80249c6:	d019      	beq.n	80249fc <__ssvfiscanf_r+0x78>
 80249c8:	6863      	ldr	r3, [r4, #4]
 80249ca:	2b00      	cmp	r3, #0
 80249cc:	dd0f      	ble.n	80249ee <__ssvfiscanf_r+0x6a>
 80249ce:	6823      	ldr	r3, [r4, #0]
 80249d0:	781a      	ldrb	r2, [r3, #0]
 80249d2:	5cba      	ldrb	r2, [r7, r2]
 80249d4:	0712      	lsls	r2, r2, #28
 80249d6:	d401      	bmi.n	80249dc <__ssvfiscanf_r+0x58>
 80249d8:	462a      	mov	r2, r5
 80249da:	e7e8      	b.n	80249ae <__ssvfiscanf_r+0x2a>
 80249dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80249de:	3201      	adds	r2, #1
 80249e0:	9245      	str	r2, [sp, #276]	; 0x114
 80249e2:	6862      	ldr	r2, [r4, #4]
 80249e4:	3301      	adds	r3, #1
 80249e6:	3a01      	subs	r2, #1
 80249e8:	6062      	str	r2, [r4, #4]
 80249ea:	6023      	str	r3, [r4, #0]
 80249ec:	e7ec      	b.n	80249c8 <__ssvfiscanf_r+0x44>
 80249ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80249f0:	4621      	mov	r1, r4
 80249f2:	4630      	mov	r0, r6
 80249f4:	4798      	blx	r3
 80249f6:	2800      	cmp	r0, #0
 80249f8:	d0e9      	beq.n	80249ce <__ssvfiscanf_r+0x4a>
 80249fa:	e7ed      	b.n	80249d8 <__ssvfiscanf_r+0x54>
 80249fc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8024a00:	f040 8083 	bne.w	8024b0a <__ssvfiscanf_r+0x186>
 8024a04:	9341      	str	r3, [sp, #260]	; 0x104
 8024a06:	9343      	str	r3, [sp, #268]	; 0x10c
 8024a08:	7853      	ldrb	r3, [r2, #1]
 8024a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8024a0c:	bf02      	ittt	eq
 8024a0e:	2310      	moveq	r3, #16
 8024a10:	1c95      	addeq	r5, r2, #2
 8024a12:	9341      	streq	r3, [sp, #260]	; 0x104
 8024a14:	220a      	movs	r2, #10
 8024a16:	46ab      	mov	fp, r5
 8024a18:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8024a1c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8024a20:	2b09      	cmp	r3, #9
 8024a22:	d91d      	bls.n	8024a60 <__ssvfiscanf_r+0xdc>
 8024a24:	4891      	ldr	r0, [pc, #580]	; (8024c6c <__ssvfiscanf_r+0x2e8>)
 8024a26:	2203      	movs	r2, #3
 8024a28:	f7db fc1a 	bl	8000260 <memchr>
 8024a2c:	b140      	cbz	r0, 8024a40 <__ssvfiscanf_r+0xbc>
 8024a2e:	2301      	movs	r3, #1
 8024a30:	eba0 0009 	sub.w	r0, r0, r9
 8024a34:	fa03 f000 	lsl.w	r0, r3, r0
 8024a38:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8024a3a:	4318      	orrs	r0, r3
 8024a3c:	9041      	str	r0, [sp, #260]	; 0x104
 8024a3e:	465d      	mov	r5, fp
 8024a40:	f815 3b01 	ldrb.w	r3, [r5], #1
 8024a44:	2b78      	cmp	r3, #120	; 0x78
 8024a46:	d806      	bhi.n	8024a56 <__ssvfiscanf_r+0xd2>
 8024a48:	2b57      	cmp	r3, #87	; 0x57
 8024a4a:	d810      	bhi.n	8024a6e <__ssvfiscanf_r+0xea>
 8024a4c:	2b25      	cmp	r3, #37	; 0x25
 8024a4e:	d05c      	beq.n	8024b0a <__ssvfiscanf_r+0x186>
 8024a50:	d856      	bhi.n	8024b00 <__ssvfiscanf_r+0x17c>
 8024a52:	2b00      	cmp	r3, #0
 8024a54:	d074      	beq.n	8024b40 <__ssvfiscanf_r+0x1bc>
 8024a56:	2303      	movs	r3, #3
 8024a58:	9347      	str	r3, [sp, #284]	; 0x11c
 8024a5a:	230a      	movs	r3, #10
 8024a5c:	9342      	str	r3, [sp, #264]	; 0x108
 8024a5e:	e081      	b.n	8024b64 <__ssvfiscanf_r+0x1e0>
 8024a60:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8024a62:	fb02 1303 	mla	r3, r2, r3, r1
 8024a66:	3b30      	subs	r3, #48	; 0x30
 8024a68:	9343      	str	r3, [sp, #268]	; 0x10c
 8024a6a:	465d      	mov	r5, fp
 8024a6c:	e7d3      	b.n	8024a16 <__ssvfiscanf_r+0x92>
 8024a6e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8024a72:	2a20      	cmp	r2, #32
 8024a74:	d8ef      	bhi.n	8024a56 <__ssvfiscanf_r+0xd2>
 8024a76:	a101      	add	r1, pc, #4	; (adr r1, 8024a7c <__ssvfiscanf_r+0xf8>)
 8024a78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8024a7c:	08024b4f 	.word	0x08024b4f
 8024a80:	08024a57 	.word	0x08024a57
 8024a84:	08024a57 	.word	0x08024a57
 8024a88:	08024bad 	.word	0x08024bad
 8024a8c:	08024a57 	.word	0x08024a57
 8024a90:	08024a57 	.word	0x08024a57
 8024a94:	08024a57 	.word	0x08024a57
 8024a98:	08024a57 	.word	0x08024a57
 8024a9c:	08024a57 	.word	0x08024a57
 8024aa0:	08024a57 	.word	0x08024a57
 8024aa4:	08024a57 	.word	0x08024a57
 8024aa8:	08024bc3 	.word	0x08024bc3
 8024aac:	08024b99 	.word	0x08024b99
 8024ab0:	08024b07 	.word	0x08024b07
 8024ab4:	08024b07 	.word	0x08024b07
 8024ab8:	08024b07 	.word	0x08024b07
 8024abc:	08024a57 	.word	0x08024a57
 8024ac0:	08024b9d 	.word	0x08024b9d
 8024ac4:	08024a57 	.word	0x08024a57
 8024ac8:	08024a57 	.word	0x08024a57
 8024acc:	08024a57 	.word	0x08024a57
 8024ad0:	08024a57 	.word	0x08024a57
 8024ad4:	08024bd3 	.word	0x08024bd3
 8024ad8:	08024ba5 	.word	0x08024ba5
 8024adc:	08024b47 	.word	0x08024b47
 8024ae0:	08024a57 	.word	0x08024a57
 8024ae4:	08024a57 	.word	0x08024a57
 8024ae8:	08024bcf 	.word	0x08024bcf
 8024aec:	08024a57 	.word	0x08024a57
 8024af0:	08024b99 	.word	0x08024b99
 8024af4:	08024a57 	.word	0x08024a57
 8024af8:	08024a57 	.word	0x08024a57
 8024afc:	08024b4f 	.word	0x08024b4f
 8024b00:	3b45      	subs	r3, #69	; 0x45
 8024b02:	2b02      	cmp	r3, #2
 8024b04:	d8a7      	bhi.n	8024a56 <__ssvfiscanf_r+0xd2>
 8024b06:	2305      	movs	r3, #5
 8024b08:	e02b      	b.n	8024b62 <__ssvfiscanf_r+0x1de>
 8024b0a:	6863      	ldr	r3, [r4, #4]
 8024b0c:	2b00      	cmp	r3, #0
 8024b0e:	dd0d      	ble.n	8024b2c <__ssvfiscanf_r+0x1a8>
 8024b10:	6823      	ldr	r3, [r4, #0]
 8024b12:	781a      	ldrb	r2, [r3, #0]
 8024b14:	4552      	cmp	r2, sl
 8024b16:	f040 80a1 	bne.w	8024c5c <__ssvfiscanf_r+0x2d8>
 8024b1a:	3301      	adds	r3, #1
 8024b1c:	6862      	ldr	r2, [r4, #4]
 8024b1e:	6023      	str	r3, [r4, #0]
 8024b20:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8024b22:	3a01      	subs	r2, #1
 8024b24:	3301      	adds	r3, #1
 8024b26:	6062      	str	r2, [r4, #4]
 8024b28:	9345      	str	r3, [sp, #276]	; 0x114
 8024b2a:	e755      	b.n	80249d8 <__ssvfiscanf_r+0x54>
 8024b2c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8024b2e:	4621      	mov	r1, r4
 8024b30:	4630      	mov	r0, r6
 8024b32:	4798      	blx	r3
 8024b34:	2800      	cmp	r0, #0
 8024b36:	d0eb      	beq.n	8024b10 <__ssvfiscanf_r+0x18c>
 8024b38:	9844      	ldr	r0, [sp, #272]	; 0x110
 8024b3a:	2800      	cmp	r0, #0
 8024b3c:	f040 8084 	bne.w	8024c48 <__ssvfiscanf_r+0x2c4>
 8024b40:	f04f 30ff 	mov.w	r0, #4294967295
 8024b44:	e086      	b.n	8024c54 <__ssvfiscanf_r+0x2d0>
 8024b46:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8024b48:	f042 0220 	orr.w	r2, r2, #32
 8024b4c:	9241      	str	r2, [sp, #260]	; 0x104
 8024b4e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8024b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024b54:	9241      	str	r2, [sp, #260]	; 0x104
 8024b56:	2210      	movs	r2, #16
 8024b58:	2b6f      	cmp	r3, #111	; 0x6f
 8024b5a:	9242      	str	r2, [sp, #264]	; 0x108
 8024b5c:	bf34      	ite	cc
 8024b5e:	2303      	movcc	r3, #3
 8024b60:	2304      	movcs	r3, #4
 8024b62:	9347      	str	r3, [sp, #284]	; 0x11c
 8024b64:	6863      	ldr	r3, [r4, #4]
 8024b66:	2b00      	cmp	r3, #0
 8024b68:	dd41      	ble.n	8024bee <__ssvfiscanf_r+0x26a>
 8024b6a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8024b6c:	0659      	lsls	r1, r3, #25
 8024b6e:	d404      	bmi.n	8024b7a <__ssvfiscanf_r+0x1f6>
 8024b70:	6823      	ldr	r3, [r4, #0]
 8024b72:	781a      	ldrb	r2, [r3, #0]
 8024b74:	5cba      	ldrb	r2, [r7, r2]
 8024b76:	0712      	lsls	r2, r2, #28
 8024b78:	d440      	bmi.n	8024bfc <__ssvfiscanf_r+0x278>
 8024b7a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8024b7c:	2b02      	cmp	r3, #2
 8024b7e:	dc4f      	bgt.n	8024c20 <__ssvfiscanf_r+0x29c>
 8024b80:	466b      	mov	r3, sp
 8024b82:	4622      	mov	r2, r4
 8024b84:	a941      	add	r1, sp, #260	; 0x104
 8024b86:	4630      	mov	r0, r6
 8024b88:	f000 f874 	bl	8024c74 <_scanf_chars>
 8024b8c:	2801      	cmp	r0, #1
 8024b8e:	d065      	beq.n	8024c5c <__ssvfiscanf_r+0x2d8>
 8024b90:	2802      	cmp	r0, #2
 8024b92:	f47f af21 	bne.w	80249d8 <__ssvfiscanf_r+0x54>
 8024b96:	e7cf      	b.n	8024b38 <__ssvfiscanf_r+0x1b4>
 8024b98:	220a      	movs	r2, #10
 8024b9a:	e7dd      	b.n	8024b58 <__ssvfiscanf_r+0x1d4>
 8024b9c:	2300      	movs	r3, #0
 8024b9e:	9342      	str	r3, [sp, #264]	; 0x108
 8024ba0:	2303      	movs	r3, #3
 8024ba2:	e7de      	b.n	8024b62 <__ssvfiscanf_r+0x1de>
 8024ba4:	2308      	movs	r3, #8
 8024ba6:	9342      	str	r3, [sp, #264]	; 0x108
 8024ba8:	2304      	movs	r3, #4
 8024baa:	e7da      	b.n	8024b62 <__ssvfiscanf_r+0x1de>
 8024bac:	4629      	mov	r1, r5
 8024bae:	4640      	mov	r0, r8
 8024bb0:	f000 f9ac 	bl	8024f0c <__sccl>
 8024bb4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8024bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024bba:	9341      	str	r3, [sp, #260]	; 0x104
 8024bbc:	4605      	mov	r5, r0
 8024bbe:	2301      	movs	r3, #1
 8024bc0:	e7cf      	b.n	8024b62 <__ssvfiscanf_r+0x1de>
 8024bc2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8024bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024bc8:	9341      	str	r3, [sp, #260]	; 0x104
 8024bca:	2300      	movs	r3, #0
 8024bcc:	e7c9      	b.n	8024b62 <__ssvfiscanf_r+0x1de>
 8024bce:	2302      	movs	r3, #2
 8024bd0:	e7c7      	b.n	8024b62 <__ssvfiscanf_r+0x1de>
 8024bd2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8024bd4:	06c3      	lsls	r3, r0, #27
 8024bd6:	f53f aeff 	bmi.w	80249d8 <__ssvfiscanf_r+0x54>
 8024bda:	9b00      	ldr	r3, [sp, #0]
 8024bdc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8024bde:	1d19      	adds	r1, r3, #4
 8024be0:	9100      	str	r1, [sp, #0]
 8024be2:	681b      	ldr	r3, [r3, #0]
 8024be4:	07c0      	lsls	r0, r0, #31
 8024be6:	bf4c      	ite	mi
 8024be8:	801a      	strhmi	r2, [r3, #0]
 8024bea:	601a      	strpl	r2, [r3, #0]
 8024bec:	e6f4      	b.n	80249d8 <__ssvfiscanf_r+0x54>
 8024bee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8024bf0:	4621      	mov	r1, r4
 8024bf2:	4630      	mov	r0, r6
 8024bf4:	4798      	blx	r3
 8024bf6:	2800      	cmp	r0, #0
 8024bf8:	d0b7      	beq.n	8024b6a <__ssvfiscanf_r+0x1e6>
 8024bfa:	e79d      	b.n	8024b38 <__ssvfiscanf_r+0x1b4>
 8024bfc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8024bfe:	3201      	adds	r2, #1
 8024c00:	9245      	str	r2, [sp, #276]	; 0x114
 8024c02:	6862      	ldr	r2, [r4, #4]
 8024c04:	3a01      	subs	r2, #1
 8024c06:	2a00      	cmp	r2, #0
 8024c08:	6062      	str	r2, [r4, #4]
 8024c0a:	dd02      	ble.n	8024c12 <__ssvfiscanf_r+0x28e>
 8024c0c:	3301      	adds	r3, #1
 8024c0e:	6023      	str	r3, [r4, #0]
 8024c10:	e7ae      	b.n	8024b70 <__ssvfiscanf_r+0x1ec>
 8024c12:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8024c14:	4621      	mov	r1, r4
 8024c16:	4630      	mov	r0, r6
 8024c18:	4798      	blx	r3
 8024c1a:	2800      	cmp	r0, #0
 8024c1c:	d0a8      	beq.n	8024b70 <__ssvfiscanf_r+0x1ec>
 8024c1e:	e78b      	b.n	8024b38 <__ssvfiscanf_r+0x1b4>
 8024c20:	2b04      	cmp	r3, #4
 8024c22:	dc06      	bgt.n	8024c32 <__ssvfiscanf_r+0x2ae>
 8024c24:	466b      	mov	r3, sp
 8024c26:	4622      	mov	r2, r4
 8024c28:	a941      	add	r1, sp, #260	; 0x104
 8024c2a:	4630      	mov	r0, r6
 8024c2c:	f000 f87a 	bl	8024d24 <_scanf_i>
 8024c30:	e7ac      	b.n	8024b8c <__ssvfiscanf_r+0x208>
 8024c32:	4b0f      	ldr	r3, [pc, #60]	; (8024c70 <__ssvfiscanf_r+0x2ec>)
 8024c34:	2b00      	cmp	r3, #0
 8024c36:	f43f aecf 	beq.w	80249d8 <__ssvfiscanf_r+0x54>
 8024c3a:	466b      	mov	r3, sp
 8024c3c:	4622      	mov	r2, r4
 8024c3e:	a941      	add	r1, sp, #260	; 0x104
 8024c40:	4630      	mov	r0, r6
 8024c42:	f3af 8000 	nop.w
 8024c46:	e7a1      	b.n	8024b8c <__ssvfiscanf_r+0x208>
 8024c48:	89a3      	ldrh	r3, [r4, #12]
 8024c4a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8024c4e:	bf18      	it	ne
 8024c50:	f04f 30ff 	movne.w	r0, #4294967295
 8024c54:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8024c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c5c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8024c5e:	e7f9      	b.n	8024c54 <__ssvfiscanf_r+0x2d0>
 8024c60:	080248d1 	.word	0x080248d1
 8024c64:	0802494b 	.word	0x0802494b
 8024c68:	0802be99 	.word	0x0802be99
 8024c6c:	0802bfa9 	.word	0x0802bfa9
 8024c70:	00000000 	.word	0x00000000

08024c74 <_scanf_chars>:
 8024c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024c78:	4615      	mov	r5, r2
 8024c7a:	688a      	ldr	r2, [r1, #8]
 8024c7c:	4680      	mov	r8, r0
 8024c7e:	460c      	mov	r4, r1
 8024c80:	b932      	cbnz	r2, 8024c90 <_scanf_chars+0x1c>
 8024c82:	698a      	ldr	r2, [r1, #24]
 8024c84:	2a00      	cmp	r2, #0
 8024c86:	bf0c      	ite	eq
 8024c88:	2201      	moveq	r2, #1
 8024c8a:	f04f 32ff 	movne.w	r2, #4294967295
 8024c8e:	608a      	str	r2, [r1, #8]
 8024c90:	6822      	ldr	r2, [r4, #0]
 8024c92:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8024d20 <_scanf_chars+0xac>
 8024c96:	06d1      	lsls	r1, r2, #27
 8024c98:	bf5f      	itttt	pl
 8024c9a:	681a      	ldrpl	r2, [r3, #0]
 8024c9c:	1d11      	addpl	r1, r2, #4
 8024c9e:	6019      	strpl	r1, [r3, #0]
 8024ca0:	6816      	ldrpl	r6, [r2, #0]
 8024ca2:	2700      	movs	r7, #0
 8024ca4:	69a0      	ldr	r0, [r4, #24]
 8024ca6:	b188      	cbz	r0, 8024ccc <_scanf_chars+0x58>
 8024ca8:	2801      	cmp	r0, #1
 8024caa:	d107      	bne.n	8024cbc <_scanf_chars+0x48>
 8024cac:	682b      	ldr	r3, [r5, #0]
 8024cae:	781a      	ldrb	r2, [r3, #0]
 8024cb0:	6963      	ldr	r3, [r4, #20]
 8024cb2:	5c9b      	ldrb	r3, [r3, r2]
 8024cb4:	b953      	cbnz	r3, 8024ccc <_scanf_chars+0x58>
 8024cb6:	bb27      	cbnz	r7, 8024d02 <_scanf_chars+0x8e>
 8024cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024cbc:	2802      	cmp	r0, #2
 8024cbe:	d120      	bne.n	8024d02 <_scanf_chars+0x8e>
 8024cc0:	682b      	ldr	r3, [r5, #0]
 8024cc2:	781b      	ldrb	r3, [r3, #0]
 8024cc4:	f813 3009 	ldrb.w	r3, [r3, r9]
 8024cc8:	071b      	lsls	r3, r3, #28
 8024cca:	d41a      	bmi.n	8024d02 <_scanf_chars+0x8e>
 8024ccc:	6823      	ldr	r3, [r4, #0]
 8024cce:	06da      	lsls	r2, r3, #27
 8024cd0:	bf5e      	ittt	pl
 8024cd2:	682b      	ldrpl	r3, [r5, #0]
 8024cd4:	781b      	ldrbpl	r3, [r3, #0]
 8024cd6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8024cda:	682a      	ldr	r2, [r5, #0]
 8024cdc:	686b      	ldr	r3, [r5, #4]
 8024cde:	3201      	adds	r2, #1
 8024ce0:	602a      	str	r2, [r5, #0]
 8024ce2:	68a2      	ldr	r2, [r4, #8]
 8024ce4:	3b01      	subs	r3, #1
 8024ce6:	3a01      	subs	r2, #1
 8024ce8:	606b      	str	r3, [r5, #4]
 8024cea:	3701      	adds	r7, #1
 8024cec:	60a2      	str	r2, [r4, #8]
 8024cee:	b142      	cbz	r2, 8024d02 <_scanf_chars+0x8e>
 8024cf0:	2b00      	cmp	r3, #0
 8024cf2:	dcd7      	bgt.n	8024ca4 <_scanf_chars+0x30>
 8024cf4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8024cf8:	4629      	mov	r1, r5
 8024cfa:	4640      	mov	r0, r8
 8024cfc:	4798      	blx	r3
 8024cfe:	2800      	cmp	r0, #0
 8024d00:	d0d0      	beq.n	8024ca4 <_scanf_chars+0x30>
 8024d02:	6823      	ldr	r3, [r4, #0]
 8024d04:	f013 0310 	ands.w	r3, r3, #16
 8024d08:	d105      	bne.n	8024d16 <_scanf_chars+0xa2>
 8024d0a:	68e2      	ldr	r2, [r4, #12]
 8024d0c:	3201      	adds	r2, #1
 8024d0e:	60e2      	str	r2, [r4, #12]
 8024d10:	69a2      	ldr	r2, [r4, #24]
 8024d12:	b102      	cbz	r2, 8024d16 <_scanf_chars+0xa2>
 8024d14:	7033      	strb	r3, [r6, #0]
 8024d16:	6923      	ldr	r3, [r4, #16]
 8024d18:	441f      	add	r7, r3
 8024d1a:	6127      	str	r7, [r4, #16]
 8024d1c:	2000      	movs	r0, #0
 8024d1e:	e7cb      	b.n	8024cb8 <_scanf_chars+0x44>
 8024d20:	0802be99 	.word	0x0802be99

08024d24 <_scanf_i>:
 8024d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d28:	4698      	mov	r8, r3
 8024d2a:	4b74      	ldr	r3, [pc, #464]	; (8024efc <_scanf_i+0x1d8>)
 8024d2c:	460c      	mov	r4, r1
 8024d2e:	4682      	mov	sl, r0
 8024d30:	4616      	mov	r6, r2
 8024d32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8024d36:	b087      	sub	sp, #28
 8024d38:	ab03      	add	r3, sp, #12
 8024d3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8024d3e:	4b70      	ldr	r3, [pc, #448]	; (8024f00 <_scanf_i+0x1dc>)
 8024d40:	69a1      	ldr	r1, [r4, #24]
 8024d42:	4a70      	ldr	r2, [pc, #448]	; (8024f04 <_scanf_i+0x1e0>)
 8024d44:	2903      	cmp	r1, #3
 8024d46:	bf18      	it	ne
 8024d48:	461a      	movne	r2, r3
 8024d4a:	68a3      	ldr	r3, [r4, #8]
 8024d4c:	9201      	str	r2, [sp, #4]
 8024d4e:	1e5a      	subs	r2, r3, #1
 8024d50:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8024d54:	bf88      	it	hi
 8024d56:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8024d5a:	4627      	mov	r7, r4
 8024d5c:	bf82      	ittt	hi
 8024d5e:	eb03 0905 	addhi.w	r9, r3, r5
 8024d62:	f240 135d 	movwhi	r3, #349	; 0x15d
 8024d66:	60a3      	strhi	r3, [r4, #8]
 8024d68:	f857 3b1c 	ldr.w	r3, [r7], #28
 8024d6c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8024d70:	bf98      	it	ls
 8024d72:	f04f 0900 	movls.w	r9, #0
 8024d76:	6023      	str	r3, [r4, #0]
 8024d78:	463d      	mov	r5, r7
 8024d7a:	f04f 0b00 	mov.w	fp, #0
 8024d7e:	6831      	ldr	r1, [r6, #0]
 8024d80:	ab03      	add	r3, sp, #12
 8024d82:	7809      	ldrb	r1, [r1, #0]
 8024d84:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8024d88:	2202      	movs	r2, #2
 8024d8a:	f7db fa69 	bl	8000260 <memchr>
 8024d8e:	b328      	cbz	r0, 8024ddc <_scanf_i+0xb8>
 8024d90:	f1bb 0f01 	cmp.w	fp, #1
 8024d94:	d159      	bne.n	8024e4a <_scanf_i+0x126>
 8024d96:	6862      	ldr	r2, [r4, #4]
 8024d98:	b92a      	cbnz	r2, 8024da6 <_scanf_i+0x82>
 8024d9a:	6822      	ldr	r2, [r4, #0]
 8024d9c:	2308      	movs	r3, #8
 8024d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024da2:	6063      	str	r3, [r4, #4]
 8024da4:	6022      	str	r2, [r4, #0]
 8024da6:	6822      	ldr	r2, [r4, #0]
 8024da8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8024dac:	6022      	str	r2, [r4, #0]
 8024dae:	68a2      	ldr	r2, [r4, #8]
 8024db0:	1e51      	subs	r1, r2, #1
 8024db2:	60a1      	str	r1, [r4, #8]
 8024db4:	b192      	cbz	r2, 8024ddc <_scanf_i+0xb8>
 8024db6:	6832      	ldr	r2, [r6, #0]
 8024db8:	1c51      	adds	r1, r2, #1
 8024dba:	6031      	str	r1, [r6, #0]
 8024dbc:	7812      	ldrb	r2, [r2, #0]
 8024dbe:	f805 2b01 	strb.w	r2, [r5], #1
 8024dc2:	6872      	ldr	r2, [r6, #4]
 8024dc4:	3a01      	subs	r2, #1
 8024dc6:	2a00      	cmp	r2, #0
 8024dc8:	6072      	str	r2, [r6, #4]
 8024dca:	dc07      	bgt.n	8024ddc <_scanf_i+0xb8>
 8024dcc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8024dd0:	4631      	mov	r1, r6
 8024dd2:	4650      	mov	r0, sl
 8024dd4:	4790      	blx	r2
 8024dd6:	2800      	cmp	r0, #0
 8024dd8:	f040 8085 	bne.w	8024ee6 <_scanf_i+0x1c2>
 8024ddc:	f10b 0b01 	add.w	fp, fp, #1
 8024de0:	f1bb 0f03 	cmp.w	fp, #3
 8024de4:	d1cb      	bne.n	8024d7e <_scanf_i+0x5a>
 8024de6:	6863      	ldr	r3, [r4, #4]
 8024de8:	b90b      	cbnz	r3, 8024dee <_scanf_i+0xca>
 8024dea:	230a      	movs	r3, #10
 8024dec:	6063      	str	r3, [r4, #4]
 8024dee:	6863      	ldr	r3, [r4, #4]
 8024df0:	4945      	ldr	r1, [pc, #276]	; (8024f08 <_scanf_i+0x1e4>)
 8024df2:	6960      	ldr	r0, [r4, #20]
 8024df4:	1ac9      	subs	r1, r1, r3
 8024df6:	f000 f889 	bl	8024f0c <__sccl>
 8024dfa:	f04f 0b00 	mov.w	fp, #0
 8024dfe:	68a3      	ldr	r3, [r4, #8]
 8024e00:	6822      	ldr	r2, [r4, #0]
 8024e02:	2b00      	cmp	r3, #0
 8024e04:	d03d      	beq.n	8024e82 <_scanf_i+0x15e>
 8024e06:	6831      	ldr	r1, [r6, #0]
 8024e08:	6960      	ldr	r0, [r4, #20]
 8024e0a:	f891 c000 	ldrb.w	ip, [r1]
 8024e0e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8024e12:	2800      	cmp	r0, #0
 8024e14:	d035      	beq.n	8024e82 <_scanf_i+0x15e>
 8024e16:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8024e1a:	d124      	bne.n	8024e66 <_scanf_i+0x142>
 8024e1c:	0510      	lsls	r0, r2, #20
 8024e1e:	d522      	bpl.n	8024e66 <_scanf_i+0x142>
 8024e20:	f10b 0b01 	add.w	fp, fp, #1
 8024e24:	f1b9 0f00 	cmp.w	r9, #0
 8024e28:	d003      	beq.n	8024e32 <_scanf_i+0x10e>
 8024e2a:	3301      	adds	r3, #1
 8024e2c:	f109 39ff 	add.w	r9, r9, #4294967295
 8024e30:	60a3      	str	r3, [r4, #8]
 8024e32:	6873      	ldr	r3, [r6, #4]
 8024e34:	3b01      	subs	r3, #1
 8024e36:	2b00      	cmp	r3, #0
 8024e38:	6073      	str	r3, [r6, #4]
 8024e3a:	dd1b      	ble.n	8024e74 <_scanf_i+0x150>
 8024e3c:	6833      	ldr	r3, [r6, #0]
 8024e3e:	3301      	adds	r3, #1
 8024e40:	6033      	str	r3, [r6, #0]
 8024e42:	68a3      	ldr	r3, [r4, #8]
 8024e44:	3b01      	subs	r3, #1
 8024e46:	60a3      	str	r3, [r4, #8]
 8024e48:	e7d9      	b.n	8024dfe <_scanf_i+0xda>
 8024e4a:	f1bb 0f02 	cmp.w	fp, #2
 8024e4e:	d1ae      	bne.n	8024dae <_scanf_i+0x8a>
 8024e50:	6822      	ldr	r2, [r4, #0]
 8024e52:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8024e56:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8024e5a:	d1bf      	bne.n	8024ddc <_scanf_i+0xb8>
 8024e5c:	2310      	movs	r3, #16
 8024e5e:	6063      	str	r3, [r4, #4]
 8024e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8024e64:	e7a2      	b.n	8024dac <_scanf_i+0x88>
 8024e66:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8024e6a:	6022      	str	r2, [r4, #0]
 8024e6c:	780b      	ldrb	r3, [r1, #0]
 8024e6e:	f805 3b01 	strb.w	r3, [r5], #1
 8024e72:	e7de      	b.n	8024e32 <_scanf_i+0x10e>
 8024e74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8024e78:	4631      	mov	r1, r6
 8024e7a:	4650      	mov	r0, sl
 8024e7c:	4798      	blx	r3
 8024e7e:	2800      	cmp	r0, #0
 8024e80:	d0df      	beq.n	8024e42 <_scanf_i+0x11e>
 8024e82:	6823      	ldr	r3, [r4, #0]
 8024e84:	05d9      	lsls	r1, r3, #23
 8024e86:	d50d      	bpl.n	8024ea4 <_scanf_i+0x180>
 8024e88:	42bd      	cmp	r5, r7
 8024e8a:	d909      	bls.n	8024ea0 <_scanf_i+0x17c>
 8024e8c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8024e90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8024e94:	4632      	mov	r2, r6
 8024e96:	4650      	mov	r0, sl
 8024e98:	4798      	blx	r3
 8024e9a:	f105 39ff 	add.w	r9, r5, #4294967295
 8024e9e:	464d      	mov	r5, r9
 8024ea0:	42bd      	cmp	r5, r7
 8024ea2:	d028      	beq.n	8024ef6 <_scanf_i+0x1d2>
 8024ea4:	6822      	ldr	r2, [r4, #0]
 8024ea6:	f012 0210 	ands.w	r2, r2, #16
 8024eaa:	d113      	bne.n	8024ed4 <_scanf_i+0x1b0>
 8024eac:	702a      	strb	r2, [r5, #0]
 8024eae:	6863      	ldr	r3, [r4, #4]
 8024eb0:	9e01      	ldr	r6, [sp, #4]
 8024eb2:	4639      	mov	r1, r7
 8024eb4:	4650      	mov	r0, sl
 8024eb6:	47b0      	blx	r6
 8024eb8:	f8d8 3000 	ldr.w	r3, [r8]
 8024ebc:	6821      	ldr	r1, [r4, #0]
 8024ebe:	1d1a      	adds	r2, r3, #4
 8024ec0:	f8c8 2000 	str.w	r2, [r8]
 8024ec4:	f011 0f20 	tst.w	r1, #32
 8024ec8:	681b      	ldr	r3, [r3, #0]
 8024eca:	d00f      	beq.n	8024eec <_scanf_i+0x1c8>
 8024ecc:	6018      	str	r0, [r3, #0]
 8024ece:	68e3      	ldr	r3, [r4, #12]
 8024ed0:	3301      	adds	r3, #1
 8024ed2:	60e3      	str	r3, [r4, #12]
 8024ed4:	1bed      	subs	r5, r5, r7
 8024ed6:	44ab      	add	fp, r5
 8024ed8:	6925      	ldr	r5, [r4, #16]
 8024eda:	445d      	add	r5, fp
 8024edc:	6125      	str	r5, [r4, #16]
 8024ede:	2000      	movs	r0, #0
 8024ee0:	b007      	add	sp, #28
 8024ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ee6:	f04f 0b00 	mov.w	fp, #0
 8024eea:	e7ca      	b.n	8024e82 <_scanf_i+0x15e>
 8024eec:	07ca      	lsls	r2, r1, #31
 8024eee:	bf4c      	ite	mi
 8024ef0:	8018      	strhmi	r0, [r3, #0]
 8024ef2:	6018      	strpl	r0, [r3, #0]
 8024ef4:	e7eb      	b.n	8024ece <_scanf_i+0x1aa>
 8024ef6:	2001      	movs	r0, #1
 8024ef8:	e7f2      	b.n	8024ee0 <_scanf_i+0x1bc>
 8024efa:	bf00      	nop
 8024efc:	08028b10 	.word	0x08028b10
 8024f00:	080232f5 	.word	0x080232f5
 8024f04:	080231e5 	.word	0x080231e5
 8024f08:	0802bfef 	.word	0x0802bfef

08024f0c <__sccl>:
 8024f0c:	b570      	push	{r4, r5, r6, lr}
 8024f0e:	780b      	ldrb	r3, [r1, #0]
 8024f10:	4604      	mov	r4, r0
 8024f12:	2b5e      	cmp	r3, #94	; 0x5e
 8024f14:	bf0b      	itete	eq
 8024f16:	784b      	ldrbeq	r3, [r1, #1]
 8024f18:	1c48      	addne	r0, r1, #1
 8024f1a:	1c88      	addeq	r0, r1, #2
 8024f1c:	2200      	movne	r2, #0
 8024f1e:	bf08      	it	eq
 8024f20:	2201      	moveq	r2, #1
 8024f22:	1e61      	subs	r1, r4, #1
 8024f24:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8024f28:	f801 2f01 	strb.w	r2, [r1, #1]!
 8024f2c:	42a9      	cmp	r1, r5
 8024f2e:	d1fb      	bne.n	8024f28 <__sccl+0x1c>
 8024f30:	b90b      	cbnz	r3, 8024f36 <__sccl+0x2a>
 8024f32:	3801      	subs	r0, #1
 8024f34:	bd70      	pop	{r4, r5, r6, pc}
 8024f36:	f082 0101 	eor.w	r1, r2, #1
 8024f3a:	54e1      	strb	r1, [r4, r3]
 8024f3c:	1c42      	adds	r2, r0, #1
 8024f3e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8024f42:	2d2d      	cmp	r5, #45	; 0x2d
 8024f44:	f102 36ff 	add.w	r6, r2, #4294967295
 8024f48:	4610      	mov	r0, r2
 8024f4a:	d006      	beq.n	8024f5a <__sccl+0x4e>
 8024f4c:	2d5d      	cmp	r5, #93	; 0x5d
 8024f4e:	d0f1      	beq.n	8024f34 <__sccl+0x28>
 8024f50:	b90d      	cbnz	r5, 8024f56 <__sccl+0x4a>
 8024f52:	4630      	mov	r0, r6
 8024f54:	e7ee      	b.n	8024f34 <__sccl+0x28>
 8024f56:	462b      	mov	r3, r5
 8024f58:	e7ef      	b.n	8024f3a <__sccl+0x2e>
 8024f5a:	7816      	ldrb	r6, [r2, #0]
 8024f5c:	2e5d      	cmp	r6, #93	; 0x5d
 8024f5e:	d0fa      	beq.n	8024f56 <__sccl+0x4a>
 8024f60:	42b3      	cmp	r3, r6
 8024f62:	dcf8      	bgt.n	8024f56 <__sccl+0x4a>
 8024f64:	4618      	mov	r0, r3
 8024f66:	3001      	adds	r0, #1
 8024f68:	4286      	cmp	r6, r0
 8024f6a:	5421      	strb	r1, [r4, r0]
 8024f6c:	dcfb      	bgt.n	8024f66 <__sccl+0x5a>
 8024f6e:	43d8      	mvns	r0, r3
 8024f70:	4430      	add	r0, r6
 8024f72:	1c5d      	adds	r5, r3, #1
 8024f74:	42b3      	cmp	r3, r6
 8024f76:	bfa8      	it	ge
 8024f78:	2000      	movge	r0, #0
 8024f7a:	182b      	adds	r3, r5, r0
 8024f7c:	3202      	adds	r2, #2
 8024f7e:	e7de      	b.n	8024f3e <__sccl+0x32>

08024f80 <__submore>:
 8024f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024f84:	460c      	mov	r4, r1
 8024f86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8024f88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024f8c:	4299      	cmp	r1, r3
 8024f8e:	d11d      	bne.n	8024fcc <__submore+0x4c>
 8024f90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024f94:	f7fd f974 	bl	8022280 <_malloc_r>
 8024f98:	b918      	cbnz	r0, 8024fa2 <__submore+0x22>
 8024f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8024f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024fa6:	63a3      	str	r3, [r4, #56]	; 0x38
 8024fa8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8024fac:	6360      	str	r0, [r4, #52]	; 0x34
 8024fae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8024fb2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8024fb6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8024fba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8024fbe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8024fc2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8024fc6:	6020      	str	r0, [r4, #0]
 8024fc8:	2000      	movs	r0, #0
 8024fca:	e7e8      	b.n	8024f9e <__submore+0x1e>
 8024fcc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8024fce:	0077      	lsls	r7, r6, #1
 8024fd0:	463a      	mov	r2, r7
 8024fd2:	f7fe ff05 	bl	8023de0 <_realloc_r>
 8024fd6:	4605      	mov	r5, r0
 8024fd8:	2800      	cmp	r0, #0
 8024fda:	d0de      	beq.n	8024f9a <__submore+0x1a>
 8024fdc:	eb00 0806 	add.w	r8, r0, r6
 8024fe0:	4601      	mov	r1, r0
 8024fe2:	4632      	mov	r2, r6
 8024fe4:	4640      	mov	r0, r8
 8024fe6:	f7fd f8d5 	bl	8022194 <memcpy>
 8024fea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8024fee:	f8c4 8000 	str.w	r8, [r4]
 8024ff2:	e7e9      	b.n	8024fc8 <__submore+0x48>

08024ff4 <_init>:
 8024ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024ff6:	bf00      	nop
 8024ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024ffa:	bc08      	pop	{r3}
 8024ffc:	469e      	mov	lr, r3
 8024ffe:	4770      	bx	lr

08025000 <_fini>:
 8025000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025002:	bf00      	nop
 8025004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025006:	bc08      	pop	{r3}
 8025008:	469e      	mov	lr, r3
 802500a:	4770      	bx	lr
 802500c:	0000      	movs	r0, r0
	...

08025010 <__time_veneer>:
 8025010:	e51ff004 	ldr	pc, [pc, #-4]	; 8025014 <__time_veneer+0x4>
 8025014:	200004a4 	.word	0x200004a4
