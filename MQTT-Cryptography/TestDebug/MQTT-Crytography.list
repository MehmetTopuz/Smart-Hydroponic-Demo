
MQTT-Crytography.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000238d0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000067dc  08023ab0  08023ab0  00033ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a28c  0802a28c  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  0802a28c  0802a28c  0003a28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a294  0802a294  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0802a294  0802a294  0003a294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000014  0802a2a8  0802a2a8  0003a2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  0802a2bc  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cdc  2000033c  0802a5f8  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001018  0802a5f8  00041018  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006c1bd  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c630  00000000  00000000  000ac529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000045b8  00000000  00000000  000b8b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004378  00000000  00000000  000bd118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd40  00000000  00000000  000c1490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e49a  00000000  00000000  000ef1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114cbc  00000000  00000000  0011d66a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00232326  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00015038  00000000  00000000  0023237c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08023a8c 	.word	0x08023a8c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	08023a8c 	.word	0x08023a8c

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f001 f889 	bl	8001c98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a47      	ldr	r2, [pc, #284]	; (8000cd0 <HAL_UART_MspInit+0x13c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b47      	ldr	r3, [pc, #284]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a46      	ldr	r2, [pc, #280]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b44      	ldr	r3, [pc, #272]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b41      	ldr	r3, [pc, #260]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a40      	ldr	r2, [pc, #256]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b3e      	ldr	r3, [pc, #248]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fde6 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e05d      	b.n	8000cc6 <HAL_UART_MspInit+0x132>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_UART_MspInit+0x144>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d158      	bne.n	8000cc6 <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a2e      	ldr	r2, [pc, #184]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	481f      	ldr	r0, [pc, #124]	; (8000cdc <HAL_UART_MspInit+0x148>)
 8000c60:	f000 fdb8 	bl	80017d4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c66:	4a1f      	ldr	r2, [pc, #124]	; (8000ce4 <HAL_UART_MspInit+0x150>)
 8000c68:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c6c:	2218      	movs	r2, #24
 8000c6e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c90:	2220      	movs	r2, #32
 8000c92:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c9a:	4811      	ldr	r0, [pc, #68]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c9c:	f000 fb20 	bl	80012e0 <HAL_DMA_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_UART_MspInit+0x116>
      Error_Handler();
 8000ca6:	f008 f86f 	bl	8008d88 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a0c      	ldr	r2, [pc, #48]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000cae:	67da      	str	r2, [r3, #124]	; 0x7c
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2025      	movs	r0, #37	; 0x25
 8000cbc:	f000 fadb 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cc0:	2025      	movs	r0, #37	; 0x25
 8000cc2:	f000 faf2 	bl	80012aa <HAL_NVIC_EnableIRQ>
}
 8000cc6:	bf00      	nop
 8000cc8:	3730      	adds	r7, #48	; 0x30
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40008000 	.word	0x40008000
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40013800 	.word	0x40013800
 8000cdc:	48000800 	.word	0x48000800
 8000ce0:	20000848 	.word	0x20000848
 8000ce4:	40020008 	.word	0x40020008

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f9a6 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <DMA1_Channel1_IRQHandler+0x10>)
 8000d42:	f000 fc35 	bl	80015b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000848 	.word	0x20000848

08000d50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <USART1_IRQHandler+0x10>)
 8000d56:	f001 ff7f 	bl	8002c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200007b8 	.word	0x200007b8

08000d64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d6c:	f000 fecc 	bl	8001b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d80:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d013      	beq.n	8000db4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d90:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d94:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00b      	beq.n	8000db4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d9c:	e000      	b.n	8000da0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d9e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000da0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f9      	beq.n	8000d9e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000daa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
	return 1;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <_kill>:

int _kill(int pid, int sig)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ddc:	f01f f956 	bl	802008c <__errno>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2216      	movs	r2, #22
 8000de4:	601a      	str	r2, [r3, #0]
	return -1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <_exit>:

void _exit (int status)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffe7 	bl	8000dd2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e04:	e7fe      	b.n	8000e04 <_exit+0x12>

08000e06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	e00a      	b.n	8000e2e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e18:	f3af 8000 	nop.w
 8000e1c:	4601      	mov	r1, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	60ba      	str	r2, [r7, #8]
 8000e24:	b2ca      	uxtb	r2, r1
 8000e26:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	dbf0      	blt.n	8000e18 <_read+0x12>
	}

return len;
 8000e36:	687b      	ldr	r3, [r7, #4]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	e009      	b.n	8000e66 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1c5a      	adds	r2, r3, #1
 8000e56:	60ba      	str	r2, [r7, #8]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff8a 	bl	8000d74 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	dbf1      	blt.n	8000e52 <_write+0x12>
	}
	return len;
 8000e6e:	687b      	ldr	r3, [r7, #4]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_close>:

int _close(int file)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea0:	605a      	str	r2, [r3, #4]
	return 0;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_isatty>:

int _isatty(int file)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	return 1;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b085      	sub	sp, #20
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
	return 0;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_open>:

int _open(char *path, int flags, ...)
{
 8000ee0:	b40e      	push	{r1, r2, r3}
 8000ee2:	b480      	push	{r7}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	b003      	add	sp, #12
 8000efa:	4770      	bx	lr

08000efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f04:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <_sbrk+0x5c>)
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <_sbrk+0x60>)
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <_sbrk+0x64>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <_sbrk+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d207      	bcs.n	8000f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f2c:	f01f f8ae 	bl	802008c <__errno>
 8000f30:	4603      	mov	r3, r0
 8000f32:	220c      	movs	r2, #12
 8000f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	e009      	b.n	8000f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <_sbrk+0x64>)
 8000f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20020000 	.word	0x20020000
 8000f5c:	00000400 	.word	0x00000400
 8000f60:	2000035c 	.word	0x2000035c
 8000f64:	20001018 	.word	0x20001018

08000f68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f92:	490e      	ldr	r1, [pc, #56]	; (8000fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <LoopForever+0xe>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa8:	4c0b      	ldr	r4, [pc, #44]	; (8000fd8 <LoopForever+0x16>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fb6:	f7ff ffd7 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fba:	f01f fc85 	bl	80208c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fbe:	f007 fcf7 	bl	80089b0 <main>

08000fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc2:	e7fe      	b.n	8000fc2 <LoopForever>
  ldr   r0, =_estack
 8000fc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000fd0:	0802a2bc 	.word	0x0802a2bc
  ldr r2, =_sbss
 8000fd4:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000fd8:	20001018 	.word	0x20001018

08000fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC1_2_IRQHandler>

08000fde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f939 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 f80e 	bl	8001010 <HAL_InitTick>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	e001      	b.n	8001004 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001000:	f7ff fda4 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001004:	79fb      	ldrb	r3, [r7, #7]

}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HAL_InitTick+0x68>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d022      	beq.n	800106a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_InitTick+0x6c>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <HAL_InitTick+0x68>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001030:	fbb1 f3f3 	udiv	r3, r1, r3
 8001034:	fbb2 f3f3 	udiv	r3, r2, r3
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f944 	bl	80012c6 <HAL_SYSTICK_Config>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10f      	bne.n	8001064 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b0f      	cmp	r3, #15
 8001048:	d809      	bhi.n	800105e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104a:	2200      	movs	r2, #0
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	f04f 30ff 	mov.w	r0, #4294967295
 8001052:	f000 f910 	bl	8001276 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_InitTick+0x70>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	e007      	b.n	800106e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e004      	b.n	800106e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e001      	b.n	800106e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000000c 	.word	0x2000000c
 800107c:	20000004 	.word	0x20000004
 8001080:	20000008 	.word	0x20000008

08001084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x1c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x20>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4413      	add	r3, r2
 8001092:	4a03      	ldr	r2, [pc, #12]	; (80010a0 <HAL_IncTick+0x1c>)
 8001094:	6013      	str	r3, [r2, #0]
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	20001004 	.word	0x20001004
 80010a4:	2000000c 	.word	0x2000000c

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20001004 	.word	0x20001004

080010c0 <__NVIC_SetPriorityGrouping>:
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff29 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff40 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff90 	bl	80011b4 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5f 	bl	8001160 <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff33 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa4 	bl	800121c <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e08d      	b.n	800140e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_DMA_Init+0x138>)
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d80f      	bhi.n	800131e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	4b45      	ldr	r3, [pc, #276]	; (800141c <HAL_DMA_Init+0x13c>)
 8001306:	4413      	add	r3, r2
 8001308:	4a45      	ldr	r2, [pc, #276]	; (8001420 <HAL_DMA_Init+0x140>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	009a      	lsls	r2, r3, #2
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a42      	ldr	r2, [pc, #264]	; (8001424 <HAL_DMA_Init+0x144>)
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
 800131c:	e00e      	b.n	800133c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	4b40      	ldr	r3, [pc, #256]	; (8001428 <HAL_DMA_Init+0x148>)
 8001326:	4413      	add	r3, r2
 8001328:	4a3d      	ldr	r2, [pc, #244]	; (8001420 <HAL_DMA_Init+0x140>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	009a      	lsls	r2, r3, #2
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a3c      	ldr	r2, [pc, #240]	; (800142c <HAL_DMA_Init+0x14c>)
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2202      	movs	r2, #2
 8001340:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001356:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f9be 	bl	8001710 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800139c:	d102      	bne.n	80013a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d010      	beq.n	80013e4 <HAL_DMA_Init+0x104>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d80c      	bhi.n	80013e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f9de 	bl	800178c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	e008      	b.n	80013f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40020407 	.word	0x40020407
 800141c:	bffdfff8 	.word	0xbffdfff8
 8001420:	cccccccd 	.word	0xcccccccd
 8001424:	40020000 	.word	0x40020000
 8001428:	bffdfbf8 	.word	0xbffdfbf8
 800142c:	40020400 	.word	0x40020400

08001430 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d005      	beq.n	8001454 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2204      	movs	r2, #4
 800144c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	e037      	b.n	80014c4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 020e 	bic.w	r2, r2, #14
 8001462:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001472:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	2101      	movs	r1, #1
 8001492:	fa01 f202 	lsl.w	r2, r1, r2
 8001496:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014a0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00c      	beq.n	80014c4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014b8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014c2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d00d      	beq.n	8001516 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2204      	movs	r2, #4
 80014fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	e047      	b.n	80015a6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 020e 	bic.w	r2, r2, #14
 8001524:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0201 	bic.w	r2, r2, #1
 8001534:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001544:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f003 021f 	and.w	r2, r3, #31
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	2101      	movs	r1, #1
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001562:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00c      	beq.n	8001586 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800157a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001584:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
    }
  }
  return status;
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	2204      	movs	r2, #4
 80015d2:	409a      	lsls	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d026      	beq.n	800162a <HAL_DMA_IRQHandler+0x7a>
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d021      	beq.n	800162a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0320 	and.w	r3, r3, #32
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d107      	bne.n	8001604 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0204 	bic.w	r2, r2, #4
 8001602:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	2104      	movs	r1, #4
 8001612:	fa01 f202 	lsl.w	r2, r1, r2
 8001616:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	2b00      	cmp	r3, #0
 800161e:	d071      	beq.n	8001704 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001628:	e06c      	b.n	8001704 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	2202      	movs	r2, #2
 8001634:	409a      	lsls	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4013      	ands	r3, r2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d02e      	beq.n	800169c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d029      	beq.n	800169c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10b      	bne.n	800166e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 020a 	bic.w	r2, r2, #10
 8001664:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f003 021f 	and.w	r2, r3, #31
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	2102      	movs	r1, #2
 800167c:	fa01 f202 	lsl.w	r2, r1, r2
 8001680:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	2b00      	cmp	r3, #0
 8001690:	d038      	beq.n	8001704 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800169a:	e033      	b.n	8001704 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	2208      	movs	r2, #8
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d02a      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d025      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 020e 	bic.w	r2, r2, #14
 80016c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f003 021f 	and.w	r2, r3, #31
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	2101      	movs	r1, #1
 80016d8:	fa01 f202 	lsl.w	r2, r1, r2
 80016dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001704:	bf00      	nop
 8001706:	bf00      	nop
}
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001720:	429a      	cmp	r2, r3
 8001722:	d802      	bhi.n	800172a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e001      	b.n	800172e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800172c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	3b08      	subs	r3, #8
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	009a      	lsls	r2, r3, #2
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4413      	add	r3, r2
 8001750:	461a      	mov	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800175a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 031f 	and.w	r3, r3, #31
 8001762:	2201      	movs	r2, #1
 8001764:	409a      	lsls	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	651a      	str	r2, [r3, #80]	; 0x50
}
 800176a:	bf00      	nop
 800176c:	371c      	adds	r7, #28
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40020407 	.word	0x40020407
 800177c:	40020800 	.word	0x40020800
 8001780:	40020820 	.word	0x40020820
 8001784:	cccccccd 	.word	0xcccccccd
 8001788:	40020880 	.word	0x40020880

0800178c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	461a      	mov	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	2201      	movs	r2, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	1000823f 	.word	0x1000823f
 80017d0:	40020940 	.word	0x40020940

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017e2:	e15a      	b.n	8001a9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2101      	movs	r1, #1
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	4013      	ands	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 814c 	beq.w	8001a94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d00b      	beq.n	800181c <HAL_GPIO_Init+0x48>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d007      	beq.n	800181c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001810:	2b11      	cmp	r3, #17
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b12      	cmp	r3, #18
 800181a:	d130      	bne.n	800187e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001852:	2201      	movs	r2, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	f003 0201 	and.w	r2, r3, #1
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0xea>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d123      	bne.n	8001906 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	08da      	lsrs	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	691a      	ldr	r2, [r3, #16]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	6939      	ldr	r1, [r7, #16]
 8001902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0203 	and.w	r2, r3, #3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80a6 	beq.w	8001a94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001948:	4b5b      	ldr	r3, [pc, #364]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 800194a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194c:	4a5a      	ldr	r2, [pc, #360]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6613      	str	r3, [r2, #96]	; 0x60
 8001954:	4b58      	ldr	r3, [pc, #352]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 8001956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001960:	4a56      	ldr	r2, [pc, #344]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800198a:	d01f      	beq.n	80019cc <HAL_GPIO_Init+0x1f8>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a4c      	ldr	r2, [pc, #304]	; (8001ac0 <HAL_GPIO_Init+0x2ec>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d019      	beq.n	80019c8 <HAL_GPIO_Init+0x1f4>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a4b      	ldr	r2, [pc, #300]	; (8001ac4 <HAL_GPIO_Init+0x2f0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d013      	beq.n	80019c4 <HAL_GPIO_Init+0x1f0>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a4a      	ldr	r2, [pc, #296]	; (8001ac8 <HAL_GPIO_Init+0x2f4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d00d      	beq.n	80019c0 <HAL_GPIO_Init+0x1ec>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a49      	ldr	r2, [pc, #292]	; (8001acc <HAL_GPIO_Init+0x2f8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d007      	beq.n	80019bc <HAL_GPIO_Init+0x1e8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a48      	ldr	r2, [pc, #288]	; (8001ad0 <HAL_GPIO_Init+0x2fc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_GPIO_Init+0x1e4>
 80019b4:	2305      	movs	r3, #5
 80019b6:	e00a      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019b8:	2306      	movs	r3, #6
 80019ba:	e008      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019bc:	2304      	movs	r3, #4
 80019be:	e006      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c0:	2303      	movs	r3, #3
 80019c2:	e004      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e002      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019cc:	2300      	movs	r3, #0
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	f002 0203 	and.w	r2, r2, #3
 80019d4:	0092      	lsls	r2, r2, #2
 80019d6:	4093      	lsls	r3, r2
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019de:	4937      	ldr	r1, [pc, #220]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019ec:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a10:	4a30      	ldr	r2, [pc, #192]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a3a:	4a26      	ldr	r2, [pc, #152]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a40:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a8e:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f47f ae9d 	bne.w	80017e4 <HAL_GPIO_Init+0x10>
  }
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010000 	.word	0x40010000
 8001ac0:	48000400 	.word	0x48000400
 8001ac4:	48000800 	.word	0x48000800
 8001ac8:	48000c00 	.word	0x48000c00
 8001acc:	48001000 	.word	0x48001000
 8001ad0:	48001400 	.word	0x48001400
 8001ad4:	40010400 	.word	0x40010400

08001ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001af4:	e002      	b.n	8001afc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001af6:	887a      	ldrh	r2, [r7, #2]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f806 	bl	8001b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40010400 	.word	0x40010400

08001b38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d141      	bne.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b5e:	4b4b      	ldr	r3, [pc, #300]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6a:	d131      	bne.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b6c:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b72:	4a46      	ldr	r2, [pc, #280]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b7c:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b84:	4a41      	ldr	r2, [pc, #260]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b8c:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2232      	movs	r2, #50	; 0x32
 8001b92:	fb02 f303 	mul.w	r3, r2, r3
 8001b96:	4a3f      	ldr	r2, [pc, #252]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b98:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9c:	0c9b      	lsrs	r3, r3, #18
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba2:	e002      	b.n	8001baa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb6:	d102      	bne.n	8001bbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f2      	bne.n	8001ba4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bca:	d158      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e057      	b.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bd6:	4a2d      	ldr	r2, [pc, #180]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001be0:	e04d      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be8:	d141      	bne.n	8001c6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf6:	d131      	bne.n	8001c5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bfe:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c10:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2232      	movs	r2, #50	; 0x32
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	0c9b      	lsrs	r3, r3, #18
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c2e:	e002      	b.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c42:	d102      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f2      	bne.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c56:	d112      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e011      	b.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c6c:	e007      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	20000004 	.word	0x20000004
 8001c94:	431bde83 	.word	0x431bde83

08001c98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca6:	6093      	str	r3, [r2, #8]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40007000 	.word	0x40007000

08001cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e308      	b.n	80022dc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d075      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	4ba3      	ldr	r3, [pc, #652]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce0:	4ba0      	ldr	r3, [pc, #640]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b0c      	cmp	r3, #12
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3e>
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d002      	beq.n	8001cfc <HAL_RCC_OscConfig+0x44>
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d10b      	bne.n	8001d14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	4b99      	ldr	r3, [pc, #612]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d05b      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x108>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d157      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e2e3      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1c:	d106      	bne.n	8001d2c <HAL_RCC_OscConfig+0x74>
 8001d1e:	4b91      	ldr	r3, [pc, #580]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a90      	ldr	r2, [pc, #576]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e01d      	b.n	8001d68 <HAL_RCC_OscConfig+0xb0>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x98>
 8001d36:	4b8b      	ldr	r3, [pc, #556]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a8a      	ldr	r2, [pc, #552]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b88      	ldr	r3, [pc, #544]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a87      	ldr	r2, [pc, #540]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0xb0>
 8001d50:	4b84      	ldr	r3, [pc, #528]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a83      	ldr	r2, [pc, #524]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b81      	ldr	r3, [pc, #516]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a80      	ldr	r2, [pc, #512]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d013      	beq.n	8001d98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7ff f99a 	bl	80010a8 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff f996 	bl	80010a8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e2a8      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0xc0>
 8001d96:	e014      	b.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff f986 	bl	80010a8 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7ff f982 	bl	80010a8 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e294      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001db2:	4b6c      	ldr	r3, [pc, #432]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0xe8>
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d075      	beq.n	8001eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dce:	4b65      	ldr	r3, [pc, #404]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd8:	4b62      	ldr	r3, [pc, #392]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2b0c      	cmp	r3, #12
 8001de6:	d102      	bne.n	8001dee <HAL_RCC_OscConfig+0x136>
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_OscConfig+0x13c>
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d11f      	bne.n	8001e34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df4:	4b5b      	ldr	r3, [pc, #364]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_OscConfig+0x154>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e267      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0c:	4b55      	ldr	r3, [pc, #340]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	4952      	ldr	r1, [pc, #328]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e20:	4b51      	ldr	r3, [pc, #324]	; (8001f68 <HAL_RCC_OscConfig+0x2b0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f8f3 	bl	8001010 <HAL_InitTick>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d043      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e253      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d023      	beq.n	8001e84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3c:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a48      	ldr	r2, [pc, #288]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7ff f92e 	bl	80010a8 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e50:	f7ff f92a 	bl	80010a8 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e23c      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e62:	4b40      	ldr	r3, [pc, #256]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	061b      	lsls	r3, r3, #24
 8001e7c:	4939      	ldr	r1, [pc, #228]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
 8001e82:	e01a      	b.n	8001eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e84:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a36      	ldr	r2, [pc, #216]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff f90a 	bl	80010a8 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e98:	f7ff f906 	bl	80010a8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e218      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eaa:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x1e0>
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d03c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01c      	beq.n	8001f08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ece:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed4:	4a23      	ldr	r2, [pc, #140]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ede:	f7ff f8e3 	bl	80010a8 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee6:	f7ff f8df 	bl	80010a8 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1f1      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0ef      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x22e>
 8001f06:	e01b      	b.n	8001f40 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0e:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f18:	f7ff f8c6 	bl	80010a8 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f20:	f7ff f8c2 	bl	80010a8 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e1d4      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1ef      	bne.n	8001f20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80ab 	beq.w	80020a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <HAL_RCC_OscConfig+0x2b4>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e005      	b.n	8001f6e <HAL_RCC_OscConfig+0x2b6>
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00d      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4baf      	ldr	r3, [pc, #700]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	4aae      	ldr	r2, [pc, #696]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7e:	4bac      	ldr	r3, [pc, #688]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8e:	4ba9      	ldr	r3, [pc, #676]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f9a:	4ba6      	ldr	r3, [pc, #664]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4aa5      	ldr	r2, [pc, #660]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f87f 	bl	80010a8 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fae:	f7ff f87b 	bl	80010a8 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e18d      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc0:	4b9c      	ldr	r3, [pc, #624]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d108      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x32e>
 8001fd4:	4b96      	ldr	r3, [pc, #600]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fda:	4a95      	ldr	r2, [pc, #596]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fe4:	e024      	b.n	8002030 <HAL_RCC_OscConfig+0x378>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d110      	bne.n	8002010 <HAL_RCC_OscConfig+0x358>
 8001fee:	4b90      	ldr	r3, [pc, #576]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff4:	4a8e      	ldr	r2, [pc, #568]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ffe:	4b8c      	ldr	r3, [pc, #560]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002004:	4a8a      	ldr	r2, [pc, #552]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800200e:	e00f      	b.n	8002030 <HAL_RCC_OscConfig+0x378>
 8002010:	4b87      	ldr	r3, [pc, #540]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	4a86      	ldr	r2, [pc, #536]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002020:	4b83      	ldr	r3, [pc, #524]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	4a82      	ldr	r2, [pc, #520]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002028:	f023 0304 	bic.w	r3, r3, #4
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d016      	beq.n	8002066 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7ff f836 	bl	80010a8 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203e:	e00a      	b.n	8002056 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002040:	f7ff f832 	bl	80010a8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e142      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002056:	4b76      	ldr	r3, [pc, #472]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ed      	beq.n	8002040 <HAL_RCC_OscConfig+0x388>
 8002064:	e015      	b.n	8002092 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002066:	f7ff f81f 	bl	80010a8 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7ff f81b 	bl	80010a8 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	; 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e12b      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002084:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ed      	bne.n	800206e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002092:	7ffb      	ldrb	r3, [r7, #31]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d105      	bne.n	80020a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002098:	4b65      	ldr	r3, [pc, #404]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	4a64      	ldr	r2, [pc, #400]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800209e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d03c      	beq.n	800212a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020b8:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020be:	4a5c      	ldr	r2, [pc, #368]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7fe ffee 	bl	80010a8 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020d0:	f7fe ffea 	bl	80010a8 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e0fc      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020e2:	4b53      	ldr	r3, [pc, #332]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ef      	beq.n	80020d0 <HAL_RCC_OscConfig+0x418>
 80020f0:	e01b      	b.n	800212a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020f2:	4b4f      	ldr	r3, [pc, #316]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020f8:	4a4d      	ldr	r2, [pc, #308]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002102:	f7fe ffd1 	bl	80010a8 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800210a:	f7fe ffcd 	bl	80010a8 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0df      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800211c:	4b44      	ldr	r3, [pc, #272]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800211e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ef      	bne.n	800210a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 80d3 	beq.w	80022da <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002134:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b0c      	cmp	r3, #12
 800213e:	f000 808d 	beq.w	800225c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d15a      	bne.n	8002200 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214a:	4b39      	ldr	r3, [pc, #228]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a38      	ldr	r2, [pc, #224]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002150:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7fe ffa7 	bl	80010a8 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215e:	f7fe ffa3 	bl	80010a8 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0b5      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002170:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f0      	bne.n	800215e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800217c:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_RCC_OscConfig+0x580>)
 8002182:	4013      	ands	r3, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6a11      	ldr	r1, [r2, #32]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800218c:	3a01      	subs	r2, #1
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	4311      	orrs	r1, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002196:	0212      	lsls	r2, r2, #8
 8002198:	4311      	orrs	r1, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800219e:	0852      	lsrs	r2, r2, #1
 80021a0:	3a01      	subs	r2, #1
 80021a2:	0552      	lsls	r2, r2, #21
 80021a4:	4311      	orrs	r1, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021aa:	0852      	lsrs	r2, r2, #1
 80021ac:	3a01      	subs	r2, #1
 80021ae:	0652      	lsls	r2, r2, #25
 80021b0:	4311      	orrs	r1, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021b6:	06d2      	lsls	r2, r2, #27
 80021b8:	430a      	orrs	r2, r1
 80021ba:	491d      	ldr	r1, [pc, #116]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a1a      	ldr	r2, [pc, #104]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a17      	ldr	r2, [pc, #92]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe ff66 	bl	80010a8 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe ff62 	bl	80010a8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e074      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x528>
 80021fe:	e06c      	b.n	80022da <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800220a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002212:	f023 0303 	bic.w	r3, r3, #3
 8002216:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800221e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe ff3e 	bl	80010a8 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222e:	e00e      	b.n	800224e <HAL_RCC_OscConfig+0x596>
 8002230:	40021000 	.word	0x40021000
 8002234:	40007000 	.word	0x40007000
 8002238:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe ff34 	bl	80010a8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e046      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224e:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <HAL_RCC_OscConfig+0x62c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x584>
 800225a:	e03e      	b.n	80022da <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e039      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_RCC_OscConfig+0x62c>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f003 0203 	and.w	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	429a      	cmp	r2, r3
 800227a:	d12c      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	3b01      	subs	r3, #1
 8002288:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d123      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d11b      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d113      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	3b01      	subs	r3, #1
 80022bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	3b01      	subs	r3, #1
 80022d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000

080022e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e11e      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b91      	ldr	r3, [pc, #580]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d910      	bls.n	8002330 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b8e      	ldr	r3, [pc, #568]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 020f 	bic.w	r2, r3, #15
 8002316:	498c      	ldr	r1, [pc, #560]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b8a      	ldr	r3, [pc, #552]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e106      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d073      	beq.n	8002424 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d129      	bne.n	8002398 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002344:	4b81      	ldr	r3, [pc, #516]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0f4      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002354:	f000 f99e 	bl	8002694 <RCC_GetSysClockFreqFromPLLSource>
 8002358:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4a7c      	ldr	r2, [pc, #496]	; (8002550 <HAL_RCC_ClockConfig+0x268>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d93f      	bls.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002362:	4b7a      	ldr	r3, [pc, #488]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002376:	2b00      	cmp	r3, #0
 8002378:	d033      	beq.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800237e:	2b00      	cmp	r3, #0
 8002380:	d12f      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002382:	4b72      	ldr	r3, [pc, #456]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800238a:	4a70      	ldr	r2, [pc, #448]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800238c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002390:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e024      	b.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a0:	4b6a      	ldr	r3, [pc, #424]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d109      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0c6      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b0:	4b66      	ldr	r3, [pc, #408]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0be      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023c0:	f000 f8ce 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4a61      	ldr	r2, [pc, #388]	; (8002550 <HAL_RCC_ClockConfig+0x268>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d909      	bls.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ce:	4b5f      	ldr	r3, [pc, #380]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023d6:	4a5d      	ldr	r2, [pc, #372]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023e2:	4b5a      	ldr	r3, [pc, #360]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f023 0203 	bic.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4957      	ldr	r1, [pc, #348]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f4:	f7fe fe58 	bl	80010a8 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7fe fe54 	bl	80010a8 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	; 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e095      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	4b4e      	ldr	r3, [pc, #312]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 020c 	and.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d1eb      	bne.n	80023fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d023      	beq.n	8002478 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800243c:	4b43      	ldr	r3, [pc, #268]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a42      	ldr	r2, [pc, #264]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002442:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002446:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002454:	4b3d      	ldr	r3, [pc, #244]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800245c:	4a3b      	ldr	r2, [pc, #236]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800245e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002462:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b39      	ldr	r3, [pc, #228]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4936      	ldr	r1, [pc, #216]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
 8002476:	e008      	b.n	800248a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b80      	cmp	r3, #128	; 0x80
 800247c:	d105      	bne.n	800248a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800247e:	4b33      	ldr	r3, [pc, #204]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	4a32      	ldr	r2, [pc, #200]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002488:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800248a:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d21d      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002498:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 020f 	bic.w	r2, r3, #15
 80024a0:	4929      	ldr	r1, [pc, #164]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024a8:	f7fe fdfe 	bl	80010a8 <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7fe fdfa 	bl	80010a8 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e03b      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1ed      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e0:	4b1a      	ldr	r3, [pc, #104]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4917      	ldr	r1, [pc, #92]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	490f      	ldr	r1, [pc, #60]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002512:	f000 f825 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8002516:	4602      	mov	r2, r0
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	490c      	ldr	r1, [pc, #48]	; (8002554 <HAL_RCC_ClockConfig+0x26c>)
 8002524:	5ccb      	ldrb	r3, [r1, r3]
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <HAL_RCC_ClockConfig+0x270>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_RCC_ClockConfig+0x274>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fd6a 	bl	8001010 <HAL_InitTick>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40022000 	.word	0x40022000
 800254c:	40021000 	.word	0x40021000
 8002550:	04c4b400 	.word	0x04c4b400
 8002554:	08027018 	.word	0x08027018
 8002558:	20000004 	.word	0x20000004
 800255c:	20000008 	.word	0x20000008

08002560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002566:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b04      	cmp	r3, #4
 8002570:	d102      	bne.n	8002578 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002572:	4b2a      	ldr	r3, [pc, #168]	; (800261c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e047      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d102      	bne.n	800258a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002584:	4b26      	ldr	r3, [pc, #152]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	e03e      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d136      	bne.n	8002604 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3301      	adds	r3, #1
 80025ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d10c      	bne.n	80025ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025b4:	4a1a      	ldr	r2, [pc, #104]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	4a16      	ldr	r2, [pc, #88]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025be:	68d2      	ldr	r2, [r2, #12]
 80025c0:	0a12      	lsrs	r2, r2, #8
 80025c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	617b      	str	r3, [r7, #20]
      break;
 80025cc:	e00c      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ce:	4a13      	ldr	r2, [pc, #76]	; (800261c <HAL_RCC_GetSysClockFreq+0xbc>)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	4a10      	ldr	r2, [pc, #64]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d8:	68d2      	ldr	r2, [r2, #12]
 80025da:	0a12      	lsrs	r2, r2, #8
 80025dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
      break;
 80025e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0e5b      	lsrs	r3, r3, #25
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	3301      	adds	r3, #1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	e001      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002608:	693b      	ldr	r3, [r7, #16]
}
 800260a:	4618      	mov	r0, r3
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	00f42400 	.word	0x00f42400
 8002620:	016e3600 	.word	0x016e3600

08002624 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_RCC_GetHCLKFreq+0x14>)
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000004 	.word	0x20000004

0800263c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002640:	f7ff fff0 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4904      	ldr	r1, [pc, #16]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000
 8002664:	08027028 	.word	0x08027028

08002668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800266c:	f7ff ffda 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0adb      	lsrs	r3, r3, #11
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4904      	ldr	r1, [pc, #16]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x28>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	08027028 	.word	0x08027028

08002694 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800269a:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3301      	adds	r3, #1
 80026b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d10c      	bne.n	80026d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026b8:	4a17      	ldr	r2, [pc, #92]	; (8002718 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026c2:	68d2      	ldr	r2, [r2, #12]
 80026c4:	0a12      	lsrs	r2, r2, #8
 80026c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	617b      	str	r3, [r7, #20]
    break;
 80026d0:	e00c      	b.n	80026ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026d2:	4a12      	ldr	r2, [pc, #72]	; (800271c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026dc:	68d2      	ldr	r2, [r2, #12]
 80026de:	0a12      	lsrs	r2, r2, #8
 80026e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026e4:	fb02 f303 	mul.w	r3, r2, r3
 80026e8:	617b      	str	r3, [r7, #20]
    break;
 80026ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0e5b      	lsrs	r3, r3, #25
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002706:	687b      	ldr	r3, [r7, #4]
}
 8002708:	4618      	mov	r0, r3
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40021000 	.word	0x40021000
 8002718:	016e3600 	.word	0x016e3600
 800271c:	00f42400 	.word	0x00f42400

08002720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002728:	2300      	movs	r3, #0
 800272a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800272c:	2300      	movs	r3, #0
 800272e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8098 	beq.w	800286e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002742:	4b43      	ldr	r3, [pc, #268]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	4b40      	ldr	r3, [pc, #256]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	4a3f      	ldr	r2, [pc, #252]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	6593      	str	r3, [r2, #88]	; 0x58
 800275a:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800276a:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a39      	ldr	r2, [pc, #228]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002776:	f7fe fc97 	bl	80010a8 <HAL_GetTick>
 800277a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800277c:	e009      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7fe fc93 	bl	80010a8 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d902      	bls.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	74fb      	strb	r3, [r7, #19]
        break;
 8002790:	e005      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002792:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ef      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d159      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027a4:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01e      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d019      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027cc:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d2:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027dc:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027ec:	4a18      	ldr	r2, [pc, #96]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d016      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fc53 	bl	80010a8 <HAL_GetTick>
 8002802:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002804:	e00b      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7fe fc4f 	bl	80010a8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d902      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	74fb      	strb	r3, [r7, #19]
            break;
 800281c:	e006      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ec      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10b      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002840:	4903      	ldr	r1, [pc, #12]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002848:	e008      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	74bb      	strb	r3, [r7, #18]
 800284e:	e005      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285c:	7c7b      	ldrb	r3, [r7, #17]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d105      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002862:	4baf      	ldr	r3, [pc, #700]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	4aae      	ldr	r2, [pc, #696]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800287a:	4ba9      	ldr	r3, [pc, #676]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002880:	f023 0203 	bic.w	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	49a5      	ldr	r1, [pc, #660]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800289c:	4ba0      	ldr	r3, [pc, #640]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f023 020c 	bic.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	499d      	ldr	r1, [pc, #628]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028be:	4b98      	ldr	r3, [pc, #608]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4994      	ldr	r1, [pc, #592]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028e0:	4b8f      	ldr	r3, [pc, #572]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	498c      	ldr	r1, [pc, #560]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002902:	4b87      	ldr	r3, [pc, #540]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	4983      	ldr	r1, [pc, #524]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002924:	4b7e      	ldr	r3, [pc, #504]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	497b      	ldr	r1, [pc, #492]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002946:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	4972      	ldr	r1, [pc, #456]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002968:	4b6d      	ldr	r3, [pc, #436]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	496a      	ldr	r1, [pc, #424]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800298a:	4b65      	ldr	r3, [pc, #404]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	4961      	ldr	r1, [pc, #388]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029ac:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	4959      	ldr	r1, [pc, #356]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ce:	4b54      	ldr	r3, [pc, #336]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	4950      	ldr	r1, [pc, #320]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d015      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f0:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4948      	ldr	r1, [pc, #288]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a10:	4b43      	ldr	r3, [pc, #268]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a42      	ldr	r2, [pc, #264]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d015      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a28:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a36:	493a      	ldr	r1, [pc, #232]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a46:	d105      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a48:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a34      	ldr	r2, [pc, #208]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a52:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d015      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a60:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	492c      	ldr	r1, [pc, #176]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a80:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a26      	ldr	r2, [pc, #152]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d015      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a98:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	491e      	ldr	r1, [pc, #120]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ac2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d015      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ad0:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4910      	ldr	r1, [pc, #64]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aee:	d105      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002afa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d018      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	4902      	ldr	r1, [pc, #8]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b1e:	e001      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002b20:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b2c:	d105      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b2e:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4a20      	ldr	r2, [pc, #128]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b38:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d015      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b46:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b54:	4917      	ldr	r1, [pc, #92]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b64:	d105      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b66:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d015      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8c:	4909      	ldr	r1, [pc, #36]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b9c:	d105      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ba4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ba8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002baa:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e042      	b.n	8002c50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fd ffd9 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2224      	movs	r2, #36	; 0x24
 8002be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0201 	bic.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa80 	bl	8003100 <UART_SetConfig>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e022      	b.n	8002c50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fd3e 	bl	8003694 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fdc5 	bl	80037d8 <UART_CheckIdleState>
 8002c4e:	4603      	mov	r3, r0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d118      	bne.n	8002cba <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d013      	beq.n	8002cba <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d104      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 81fb 	beq.w	80030a6 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
      }
      return;
 8002cb8:	e1f5      	b.n	80030a6 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80ef 	beq.w	8002ea0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4b73      	ldr	r3, [pc, #460]	; (8002e94 <HAL_UART_IRQHandler+0x23c>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4b72      	ldr	r3, [pc, #456]	; (8002e98 <HAL_UART_IRQHandler+0x240>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80e4 	beq.w	8002ea0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d010      	beq.n	8002d04 <HAL_UART_IRQHandler+0xac>
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00b      	beq.n	8002d04 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d010      	beq.n	8002d30 <HAL_UART_IRQHandler+0xd8>
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d26:	f043 0204 	orr.w	r2, r3, #4
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d010      	beq.n	8002d5c <HAL_UART_IRQHandler+0x104>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2204      	movs	r2, #4
 8002d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d52:	f043 0202 	orr.w	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d015      	beq.n	8002d92 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d104      	bne.n	8002d7a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4b48      	ldr	r3, [pc, #288]	; (8002e94 <HAL_UART_IRQHandler+0x23c>)
 8002d74:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2208      	movs	r2, #8
 8002d80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d88:	f043 0208 	orr.w	r2, r3, #8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d011      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x168>
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00c      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002db6:	f043 0220 	orr.w	r2, r3, #32
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 816f 	beq.w	80030aa <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d011      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d104      	bne.n	8002dea <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d007      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e00:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	d004      	beq.n	8002e1a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d031      	beq.n	8002e7e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fda7 	bl	800396e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	d123      	bne.n	8002e76 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d013      	beq.n	8002e6e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4a:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <HAL_UART_IRQHandler+0x244>)
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fb45 	bl	80014e2 <HAL_DMA_Abort_IT>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d017      	beq.n	8002e8e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6c:	e00f      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f930 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e74:	e00b      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f92c 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e7c:	e007      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f928 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002e8c:	e10d      	b.n	80030aa <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8e:	bf00      	nop
    return;
 8002e90:	e10b      	b.n	80030aa <HAL_UART_IRQHandler+0x452>
 8002e92:	bf00      	nop
 8002e94:	10000001 	.word	0x10000001
 8002e98:	04000120 	.word	0x04000120
 8002e9c:	080039d3 	.word	0x080039d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	f040 80ab 	bne.w	8003000 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80a5 	beq.w	8003000 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 809f 	beq.w	8003000 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d155      	bne.n	8002f84 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002ee2:	893b      	ldrh	r3, [r7, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80e2 	beq.w	80030ae <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002ef0:	893a      	ldrh	r2, [r7, #8]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	f080 80db 	bcs.w	80030ae <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	893a      	ldrh	r2, [r7, #8]
 8002efc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d12b      	bne.n	8002f68 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f1e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f3e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0210 	bic.w	r2, r2, #16
 8002f5c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe fa64 	bl	8001430 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f8b3 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f82:	e094      	b.n	80030ae <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8087 	beq.w	80030b2 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002fa4:	897b      	ldrh	r3, [r7, #10]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8083 	beq.w	80030b2 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fba:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0210 	bic.w	r2, r2, #16
 8002ff2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ff4:	897b      	ldrh	r3, [r7, #10]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f875 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ffe:	e058      	b.n	80030b2 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00d      	beq.n	8003026 <HAL_UART_IRQHandler+0x3ce>
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800301c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fd07 	bl	8003a32 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003024:	e048      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302c:	2b00      	cmp	r3, #0
 800302e:	d012      	beq.n	8003056 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003048:	2b00      	cmp	r3, #0
 800304a:	d034      	beq.n	80030b6 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
    }
    return;
 8003054:	e02f      	b.n	80030b6 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_UART_IRQHandler+0x41a>
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fcc7 	bl	80039fe <UART_EndTransmit_IT>
    return;
 8003070:	e022      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_UART_IRQHandler+0x436>
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fce7 	bl	8003a5a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800308c:	e014      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00f      	beq.n	80030b8 <HAL_UART_IRQHandler+0x460>
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	da0c      	bge.n	80030b8 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fcd1 	bl	8003a46 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030a4:	e008      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030a6:	bf00      	nop
 80030a8:	e006      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
    return;
 80030aa:	bf00      	nop
 80030ac:	e004      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030ae:	bf00      	nop
 80030b0:	e002      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030b2:	bf00      	nop
 80030b4:	e000      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
    return;
 80030b6:	bf00      	nop
  }
}
 80030b8:	3720      	adds	r7, #32
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop

080030c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003100:	b5b0      	push	{r4, r5, r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4313      	orrs	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4bb1      	ldr	r3, [pc, #708]	; (80033f0 <UART_SetConfig+0x2f0>)
 800312c:	4013      	ands	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	69f9      	ldr	r1, [r7, #28]
 8003134:	430b      	orrs	r3, r1
 8003136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4aa6      	ldr	r2, [pc, #664]	; (80033f4 <UART_SetConfig+0x2f4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	4313      	orrs	r3, r2
 8003166:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003172:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	69f9      	ldr	r1, [r7, #28]
 800317c:	430b      	orrs	r3, r1
 800317e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	f023 010f 	bic.w	r1, r3, #15
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a97      	ldr	r2, [pc, #604]	; (80033f8 <UART_SetConfig+0x2f8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d120      	bne.n	80031e2 <UART_SetConfig+0xe2>
 80031a0:	4b96      	ldr	r3, [pc, #600]	; (80033fc <UART_SetConfig+0x2fc>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d816      	bhi.n	80031dc <UART_SetConfig+0xdc>
 80031ae:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <UART_SetConfig+0xb4>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031c5 	.word	0x080031c5
 80031b8:	080031d1 	.word	0x080031d1
 80031bc:	080031cb 	.word	0x080031cb
 80031c0:	080031d7 	.word	0x080031d7
 80031c4:	2301      	movs	r3, #1
 80031c6:	76fb      	strb	r3, [r7, #27]
 80031c8:	e0e7      	b.n	800339a <UART_SetConfig+0x29a>
 80031ca:	2302      	movs	r3, #2
 80031cc:	76fb      	strb	r3, [r7, #27]
 80031ce:	e0e4      	b.n	800339a <UART_SetConfig+0x29a>
 80031d0:	2304      	movs	r3, #4
 80031d2:	76fb      	strb	r3, [r7, #27]
 80031d4:	e0e1      	b.n	800339a <UART_SetConfig+0x29a>
 80031d6:	2308      	movs	r3, #8
 80031d8:	76fb      	strb	r3, [r7, #27]
 80031da:	e0de      	b.n	800339a <UART_SetConfig+0x29a>
 80031dc:	2310      	movs	r3, #16
 80031de:	76fb      	strb	r3, [r7, #27]
 80031e0:	e0db      	b.n	800339a <UART_SetConfig+0x29a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a86      	ldr	r2, [pc, #536]	; (8003400 <UART_SetConfig+0x300>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d132      	bne.n	8003252 <UART_SetConfig+0x152>
 80031ec:	4b83      	ldr	r3, [pc, #524]	; (80033fc <UART_SetConfig+0x2fc>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d828      	bhi.n	800324c <UART_SetConfig+0x14c>
 80031fa:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <UART_SetConfig+0x100>)
 80031fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003200:	08003235 	.word	0x08003235
 8003204:	0800324d 	.word	0x0800324d
 8003208:	0800324d 	.word	0x0800324d
 800320c:	0800324d 	.word	0x0800324d
 8003210:	08003241 	.word	0x08003241
 8003214:	0800324d 	.word	0x0800324d
 8003218:	0800324d 	.word	0x0800324d
 800321c:	0800324d 	.word	0x0800324d
 8003220:	0800323b 	.word	0x0800323b
 8003224:	0800324d 	.word	0x0800324d
 8003228:	0800324d 	.word	0x0800324d
 800322c:	0800324d 	.word	0x0800324d
 8003230:	08003247 	.word	0x08003247
 8003234:	2300      	movs	r3, #0
 8003236:	76fb      	strb	r3, [r7, #27]
 8003238:	e0af      	b.n	800339a <UART_SetConfig+0x29a>
 800323a:	2302      	movs	r3, #2
 800323c:	76fb      	strb	r3, [r7, #27]
 800323e:	e0ac      	b.n	800339a <UART_SetConfig+0x29a>
 8003240:	2304      	movs	r3, #4
 8003242:	76fb      	strb	r3, [r7, #27]
 8003244:	e0a9      	b.n	800339a <UART_SetConfig+0x29a>
 8003246:	2308      	movs	r3, #8
 8003248:	76fb      	strb	r3, [r7, #27]
 800324a:	e0a6      	b.n	800339a <UART_SetConfig+0x29a>
 800324c:	2310      	movs	r3, #16
 800324e:	76fb      	strb	r3, [r7, #27]
 8003250:	e0a3      	b.n	800339a <UART_SetConfig+0x29a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a6b      	ldr	r2, [pc, #428]	; (8003404 <UART_SetConfig+0x304>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d120      	bne.n	800329e <UART_SetConfig+0x19e>
 800325c:	4b67      	ldr	r3, [pc, #412]	; (80033fc <UART_SetConfig+0x2fc>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003266:	2b30      	cmp	r3, #48	; 0x30
 8003268:	d013      	beq.n	8003292 <UART_SetConfig+0x192>
 800326a:	2b30      	cmp	r3, #48	; 0x30
 800326c:	d814      	bhi.n	8003298 <UART_SetConfig+0x198>
 800326e:	2b20      	cmp	r3, #32
 8003270:	d009      	beq.n	8003286 <UART_SetConfig+0x186>
 8003272:	2b20      	cmp	r3, #32
 8003274:	d810      	bhi.n	8003298 <UART_SetConfig+0x198>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <UART_SetConfig+0x180>
 800327a:	2b10      	cmp	r3, #16
 800327c:	d006      	beq.n	800328c <UART_SetConfig+0x18c>
 800327e:	e00b      	b.n	8003298 <UART_SetConfig+0x198>
 8003280:	2300      	movs	r3, #0
 8003282:	76fb      	strb	r3, [r7, #27]
 8003284:	e089      	b.n	800339a <UART_SetConfig+0x29a>
 8003286:	2302      	movs	r3, #2
 8003288:	76fb      	strb	r3, [r7, #27]
 800328a:	e086      	b.n	800339a <UART_SetConfig+0x29a>
 800328c:	2304      	movs	r3, #4
 800328e:	76fb      	strb	r3, [r7, #27]
 8003290:	e083      	b.n	800339a <UART_SetConfig+0x29a>
 8003292:	2308      	movs	r3, #8
 8003294:	76fb      	strb	r3, [r7, #27]
 8003296:	e080      	b.n	800339a <UART_SetConfig+0x29a>
 8003298:	2310      	movs	r3, #16
 800329a:	76fb      	strb	r3, [r7, #27]
 800329c:	e07d      	b.n	800339a <UART_SetConfig+0x29a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a59      	ldr	r2, [pc, #356]	; (8003408 <UART_SetConfig+0x308>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d120      	bne.n	80032ea <UART_SetConfig+0x1ea>
 80032a8:	4b54      	ldr	r3, [pc, #336]	; (80033fc <UART_SetConfig+0x2fc>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032b2:	2bc0      	cmp	r3, #192	; 0xc0
 80032b4:	d013      	beq.n	80032de <UART_SetConfig+0x1de>
 80032b6:	2bc0      	cmp	r3, #192	; 0xc0
 80032b8:	d814      	bhi.n	80032e4 <UART_SetConfig+0x1e4>
 80032ba:	2b80      	cmp	r3, #128	; 0x80
 80032bc:	d009      	beq.n	80032d2 <UART_SetConfig+0x1d2>
 80032be:	2b80      	cmp	r3, #128	; 0x80
 80032c0:	d810      	bhi.n	80032e4 <UART_SetConfig+0x1e4>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <UART_SetConfig+0x1cc>
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d006      	beq.n	80032d8 <UART_SetConfig+0x1d8>
 80032ca:	e00b      	b.n	80032e4 <UART_SetConfig+0x1e4>
 80032cc:	2300      	movs	r3, #0
 80032ce:	76fb      	strb	r3, [r7, #27]
 80032d0:	e063      	b.n	800339a <UART_SetConfig+0x29a>
 80032d2:	2302      	movs	r3, #2
 80032d4:	76fb      	strb	r3, [r7, #27]
 80032d6:	e060      	b.n	800339a <UART_SetConfig+0x29a>
 80032d8:	2304      	movs	r3, #4
 80032da:	76fb      	strb	r3, [r7, #27]
 80032dc:	e05d      	b.n	800339a <UART_SetConfig+0x29a>
 80032de:	2308      	movs	r3, #8
 80032e0:	76fb      	strb	r3, [r7, #27]
 80032e2:	e05a      	b.n	800339a <UART_SetConfig+0x29a>
 80032e4:	2310      	movs	r3, #16
 80032e6:	76fb      	strb	r3, [r7, #27]
 80032e8:	e057      	b.n	800339a <UART_SetConfig+0x29a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a47      	ldr	r2, [pc, #284]	; (800340c <UART_SetConfig+0x30c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d125      	bne.n	8003340 <UART_SetConfig+0x240>
 80032f4:	4b41      	ldr	r3, [pc, #260]	; (80033fc <UART_SetConfig+0x2fc>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003302:	d017      	beq.n	8003334 <UART_SetConfig+0x234>
 8003304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003308:	d817      	bhi.n	800333a <UART_SetConfig+0x23a>
 800330a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330e:	d00b      	beq.n	8003328 <UART_SetConfig+0x228>
 8003310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003314:	d811      	bhi.n	800333a <UART_SetConfig+0x23a>
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <UART_SetConfig+0x222>
 800331a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331e:	d006      	beq.n	800332e <UART_SetConfig+0x22e>
 8003320:	e00b      	b.n	800333a <UART_SetConfig+0x23a>
 8003322:	2300      	movs	r3, #0
 8003324:	76fb      	strb	r3, [r7, #27]
 8003326:	e038      	b.n	800339a <UART_SetConfig+0x29a>
 8003328:	2302      	movs	r3, #2
 800332a:	76fb      	strb	r3, [r7, #27]
 800332c:	e035      	b.n	800339a <UART_SetConfig+0x29a>
 800332e:	2304      	movs	r3, #4
 8003330:	76fb      	strb	r3, [r7, #27]
 8003332:	e032      	b.n	800339a <UART_SetConfig+0x29a>
 8003334:	2308      	movs	r3, #8
 8003336:	76fb      	strb	r3, [r7, #27]
 8003338:	e02f      	b.n	800339a <UART_SetConfig+0x29a>
 800333a:	2310      	movs	r3, #16
 800333c:	76fb      	strb	r3, [r7, #27]
 800333e:	e02c      	b.n	800339a <UART_SetConfig+0x29a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <UART_SetConfig+0x2f4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d125      	bne.n	8003396 <UART_SetConfig+0x296>
 800334a:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <UART_SetConfig+0x2fc>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003350:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003358:	d017      	beq.n	800338a <UART_SetConfig+0x28a>
 800335a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800335e:	d817      	bhi.n	8003390 <UART_SetConfig+0x290>
 8003360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003364:	d00b      	beq.n	800337e <UART_SetConfig+0x27e>
 8003366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336a:	d811      	bhi.n	8003390 <UART_SetConfig+0x290>
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <UART_SetConfig+0x278>
 8003370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003374:	d006      	beq.n	8003384 <UART_SetConfig+0x284>
 8003376:	e00b      	b.n	8003390 <UART_SetConfig+0x290>
 8003378:	2300      	movs	r3, #0
 800337a:	76fb      	strb	r3, [r7, #27]
 800337c:	e00d      	b.n	800339a <UART_SetConfig+0x29a>
 800337e:	2302      	movs	r3, #2
 8003380:	76fb      	strb	r3, [r7, #27]
 8003382:	e00a      	b.n	800339a <UART_SetConfig+0x29a>
 8003384:	2304      	movs	r3, #4
 8003386:	76fb      	strb	r3, [r7, #27]
 8003388:	e007      	b.n	800339a <UART_SetConfig+0x29a>
 800338a:	2308      	movs	r3, #8
 800338c:	76fb      	strb	r3, [r7, #27]
 800338e:	e004      	b.n	800339a <UART_SetConfig+0x29a>
 8003390:	2310      	movs	r3, #16
 8003392:	76fb      	strb	r3, [r7, #27]
 8003394:	e001      	b.n	800339a <UART_SetConfig+0x29a>
 8003396:	2310      	movs	r3, #16
 8003398:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a15      	ldr	r2, [pc, #84]	; (80033f4 <UART_SetConfig+0x2f4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	f040 809f 	bne.w	80034e4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033a6:	7efb      	ldrb	r3, [r7, #27]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d837      	bhi.n	800341c <UART_SetConfig+0x31c>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <UART_SetConfig+0x2b4>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033d9 	.word	0x080033d9
 80033b8:	0800341d 	.word	0x0800341d
 80033bc:	080033e1 	.word	0x080033e1
 80033c0:	0800341d 	.word	0x0800341d
 80033c4:	080033e7 	.word	0x080033e7
 80033c8:	0800341d 	.word	0x0800341d
 80033cc:	0800341d 	.word	0x0800341d
 80033d0:	0800341d 	.word	0x0800341d
 80033d4:	08003415 	.word	0x08003415
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d8:	f7ff f930 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 80033dc:	6178      	str	r0, [r7, #20]
        break;
 80033de:	e022      	b.n	8003426 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <UART_SetConfig+0x310>)
 80033e2:	617b      	str	r3, [r7, #20]
        break;
 80033e4:	e01f      	b.n	8003426 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e6:	f7ff f8bb 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 80033ea:	6178      	str	r0, [r7, #20]
        break;
 80033ec:	e01b      	b.n	8003426 <UART_SetConfig+0x326>
 80033ee:	bf00      	nop
 80033f0:	cfff69f3 	.word	0xcfff69f3
 80033f4:	40008000 	.word	0x40008000
 80033f8:	40013800 	.word	0x40013800
 80033fc:	40021000 	.word	0x40021000
 8003400:	40004400 	.word	0x40004400
 8003404:	40004800 	.word	0x40004800
 8003408:	40004c00 	.word	0x40004c00
 800340c:	40005000 	.word	0x40005000
 8003410:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003418:	617b      	str	r3, [r7, #20]
        break;
 800341a:	e004      	b.n	8003426 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	76bb      	strb	r3, [r7, #26]
        break;
 8003424:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 811b 	beq.w	8003664 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	4a96      	ldr	r2, [pc, #600]	; (800368c <UART_SetConfig+0x58c>)
 8003434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003438:	461a      	mov	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003440:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	429a      	cmp	r2, r3
 8003450:	d305      	bcc.n	800345e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	d902      	bls.n	8003464 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	76bb      	strb	r3, [r7, #26]
 8003462:	e0ff      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	4618      	mov	r0, r3
 8003468:	f04f 0100 	mov.w	r1, #0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	4a86      	ldr	r2, [pc, #536]	; (800368c <UART_SetConfig+0x58c>)
 8003472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003476:	b29a      	uxth	r2, r3
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	f7fd f9ea 	bl	8000854 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	020b      	lsls	r3, r1, #8
 8003492:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003496:	0202      	lsls	r2, r0, #8
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	6849      	ldr	r1, [r1, #4]
 800349c:	0849      	lsrs	r1, r1, #1
 800349e:	4608      	mov	r0, r1
 80034a0:	f04f 0100 	mov.w	r1, #0
 80034a4:	1814      	adds	r4, r2, r0
 80034a6:	eb43 0501 	adc.w	r5, r3, r1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	461a      	mov	r2, r3
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	4620      	mov	r0, r4
 80034b6:	4629      	mov	r1, r5
 80034b8:	f7fd f9cc 	bl	8000854 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4613      	mov	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ca:	d308      	bcc.n	80034de <UART_SetConfig+0x3de>
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d2:	d204      	bcs.n	80034de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	e0c2      	b.n	8003664 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	76bb      	strb	r3, [r7, #26]
 80034e2:	e0bf      	b.n	8003664 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ec:	d165      	bne.n	80035ba <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80034ee:	7efb      	ldrb	r3, [r7, #27]
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d828      	bhi.n	8003546 <UART_SetConfig+0x446>
 80034f4:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <UART_SetConfig+0x3fc>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	08003521 	.word	0x08003521
 8003500:	08003529 	.word	0x08003529
 8003504:	08003531 	.word	0x08003531
 8003508:	08003547 	.word	0x08003547
 800350c:	08003537 	.word	0x08003537
 8003510:	08003547 	.word	0x08003547
 8003514:	08003547 	.word	0x08003547
 8003518:	08003547 	.word	0x08003547
 800351c:	0800353f 	.word	0x0800353f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003520:	f7ff f88c 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8003524:	6178      	str	r0, [r7, #20]
        break;
 8003526:	e013      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003528:	f7ff f89e 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 800352c:	6178      	str	r0, [r7, #20]
        break;
 800352e:	e00f      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003530:	4b57      	ldr	r3, [pc, #348]	; (8003690 <UART_SetConfig+0x590>)
 8003532:	617b      	str	r3, [r7, #20]
        break;
 8003534:	e00c      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003536:	f7ff f813 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 800353a:	6178      	str	r0, [r7, #20]
        break;
 800353c:	e008      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003542:	617b      	str	r3, [r7, #20]
        break;
 8003544:	e004      	b.n	8003550 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	76bb      	strb	r3, [r7, #26]
        break;
 800354e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8086 	beq.w	8003664 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	4a4b      	ldr	r2, [pc, #300]	; (800368c <UART_SetConfig+0x58c>)
 800355e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003562:	461a      	mov	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fbb3 f3f2 	udiv	r3, r3, r2
 800356a:	005a      	lsls	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	441a      	add	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	fbb2 f3f3 	udiv	r3, r2, r3
 800357c:	b29b      	uxth	r3, r3
 800357e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	2b0f      	cmp	r3, #15
 8003584:	d916      	bls.n	80035b4 <UART_SetConfig+0x4b4>
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	d212      	bcs.n	80035b4 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	b29b      	uxth	r3, r3
 8003592:	f023 030f 	bic.w	r3, r3, #15
 8003596:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	085b      	lsrs	r3, r3, #1
 800359c:	b29b      	uxth	r3, r3
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	89fb      	ldrh	r3, [r7, #14]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	89fa      	ldrh	r2, [r7, #14]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	e057      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	76bb      	strb	r3, [r7, #26]
 80035b8:	e054      	b.n	8003664 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035ba:	7efb      	ldrb	r3, [r7, #27]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d828      	bhi.n	8003612 <UART_SetConfig+0x512>
 80035c0:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <UART_SetConfig+0x4c8>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035ed 	.word	0x080035ed
 80035cc:	080035f5 	.word	0x080035f5
 80035d0:	080035fd 	.word	0x080035fd
 80035d4:	08003613 	.word	0x08003613
 80035d8:	08003603 	.word	0x08003603
 80035dc:	08003613 	.word	0x08003613
 80035e0:	08003613 	.word	0x08003613
 80035e4:	08003613 	.word	0x08003613
 80035e8:	0800360b 	.word	0x0800360b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ec:	f7ff f826 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 80035f0:	6178      	str	r0, [r7, #20]
        break;
 80035f2:	e013      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035f4:	f7ff f838 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 80035f8:	6178      	str	r0, [r7, #20]
        break;
 80035fa:	e00f      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035fc:	4b24      	ldr	r3, [pc, #144]	; (8003690 <UART_SetConfig+0x590>)
 80035fe:	617b      	str	r3, [r7, #20]
        break;
 8003600:	e00c      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003602:	f7fe ffad 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8003606:	6178      	str	r0, [r7, #20]
        break;
 8003608:	e008      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800360a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360e:	617b      	str	r3, [r7, #20]
        break;
 8003610:	e004      	b.n	800361c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	76bb      	strb	r3, [r7, #26]
        break;
 800361a:	bf00      	nop
    }

    if (pclk != 0U)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d020      	beq.n	8003664 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	4a19      	ldr	r2, [pc, #100]	; (800368c <UART_SetConfig+0x58c>)
 8003628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800362c:	461a      	mov	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	fbb3 f2f2 	udiv	r2, r3, r2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	085b      	lsrs	r3, r3, #1
 800363a:	441a      	add	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	b29b      	uxth	r3, r3
 8003646:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2b0f      	cmp	r3, #15
 800364c:	d908      	bls.n	8003660 <UART_SetConfig+0x560>
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003654:	d204      	bcs.n	8003660 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	e001      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003680:	7ebb      	ldrb	r3, [r7, #26]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3720      	adds	r7, #32
 8003686:	46bd      	mov	sp, r7
 8003688:	bdb0      	pop	{r4, r5, r7, pc}
 800368a:	bf00      	nop
 800368c:	08027030 	.word	0x08027030
 8003690:	00f42400 	.word	0x00f42400

08003694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01a      	beq.n	80037aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003792:	d10a      	bne.n	80037aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
  }
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af02      	add	r7, sp, #8
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037e8:	f7fd fc5e 	bl	80010a8 <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d10e      	bne.n	800381a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f82f 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e025      	b.n	8003866 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b04      	cmp	r3, #4
 8003826:	d10e      	bne.n	8003846 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f819 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e00f      	b.n	8003866 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	4613      	mov	r3, r2
 800387c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387e:	e062      	b.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d05e      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003888:	f7fd fc0e 	bl	80010a8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	429a      	cmp	r2, r3
 8003896:	d302      	bcc.n	800389e <UART_WaitOnFlagUntilTimeout+0x30>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11d      	bne.n	80038da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e045      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d02e      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f6:	d126      	bne.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003900:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003910:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e00f      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4013      	ands	r3, r2
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	429a      	cmp	r2, r3
 8003962:	d08d      	beq.n	8003880 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003984:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d107      	bne.n	80039b2 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0210 	bic.w	r2, r2, #16
 80039b0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	671a      	str	r2, [r3, #112]	; 0x70
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff fb6f 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a14:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fb4b 	bl	80030c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_UARTEx_DisableFifoMode+0x16>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e027      	b.n	8003ad4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2224      	movs	r2, #36	; 0x24
 8003a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003ab2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e02d      	b.n	8003b54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	; 0x24
 8003b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f84f 	bl	8003bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e02d      	b.n	8003bd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	; 0x24
 8003b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f811 	bl	8003bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d108      	bne.n	8003bfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003bf8:	e031      	b.n	8003c5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003bfe:	2308      	movs	r3, #8
 8003c00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	0e5b      	lsrs	r3, r3, #25
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	0f5b      	lsrs	r3, r3, #29
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c22:	7bbb      	ldrb	r3, [r7, #14]
 8003c24:	7b3a      	ldrb	r2, [r7, #12]
 8003c26:	4911      	ldr	r1, [pc, #68]	; (8003c6c <UARTEx_SetNbDataToProcess+0x94>)
 8003c28:	5c8a      	ldrb	r2, [r1, r2]
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c2e:	7b3a      	ldrb	r2, [r7, #12]
 8003c30:	490f      	ldr	r1, [pc, #60]	; (8003c70 <UARTEx_SetNbDataToProcess+0x98>)
 8003c32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c34:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	7b7a      	ldrb	r2, [r7, #13]
 8003c44:	4909      	ldr	r1, [pc, #36]	; (8003c6c <UARTEx_SetNbDataToProcess+0x94>)
 8003c46:	5c8a      	ldrb	r2, [r1, r2]
 8003c48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c4c:	7b7a      	ldrb	r2, [r7, #13]
 8003c4e:	4908      	ldr	r1, [pc, #32]	; (8003c70 <UARTEx_SetNbDataToProcess+0x98>)
 8003c50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c52:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	08027048 	.word	0x08027048
 8003c70:	08027050 	.word	0x08027050

08003c74 <ESP_Init>:
 */
int32_t ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 	 uint8_t 	(*UART_Receive)(void),
				 uint32_t 	(*getTick)(void),
				 uint32_t	UART_Buffer_Size)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01d      	beq.n	8003cc4 <ESP_Init+0x50>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d01a      	beq.n	8003cc4 <ESP_Init+0x50>
	   UART_Receive	!= NULL			&&
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d017      	beq.n	8003cc4 <ESP_Init+0x50>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003c94:	4a0e      	ldr	r2, [pc, #56]	; (8003cd0 <ESP_Init+0x5c>)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 8003c9a:	4a0d      	ldr	r2, [pc, #52]	; (8003cd0 <ESP_Init+0x5c>)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003ca0:	4a0b      	ldr	r2, [pc, #44]	; (8003cd0 <ESP_Init+0x5c>)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 8003ca6:	6838      	ldr	r0, [r7, #0]
 8003ca8:	f000 faab 	bl	8004202 <ringBuffer_init>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <ESP_Init+0x60>)
 8003cb0:	6013      	str	r3, [r2, #0]

		if(rx_buffer != NULL)
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <ESP_Init+0x60>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <ESP_Init+0x4a>
			return 1;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e004      	b.n	8003cc8 <ESP_Init+0x54>
		else
			return -1;
 8003cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc2:	e001      	b.n	8003cc8 <ESP_Init+0x54>
	}
	else
	{
		return -1;
 8003cc4:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000360 	.word	0x20000360
 8003cd4:	2000037c 	.word	0x2000037c

08003cd8 <Send_AT_Command>:
 * 			as a function pointer in the ESP_Init function to send AT commands over UART.
 * @param 	cmd is a string containing the AT command.
 * @retval	None.
 */
void Send_AT_Command(char *cmd)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003ce0:	4b03      	ldr	r3, [pc, #12]	; (8003cf0 <Send_AT_Command+0x18>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4798      	blx	r3
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000360 	.word	0x20000360

08003cf4 <ESP_UART_ReceiveHandler>:
 * 			this function in the UART ISR.
 * @param 	None.
 * @retval	None.
 */
void ESP_UART_ReceiveHandler(void)
{
 8003cf4:	b598      	push	{r3, r4, r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
	ringBuffer_push(rx_buffer, ESP8266.UART_Receive());
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <ESP_UART_ReceiveHandler+0x1c>)
 8003cfa:	681c      	ldr	r4, [r3, #0]
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <ESP_UART_ReceiveHandler+0x20>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4798      	blx	r3
 8003d02:	4603      	mov	r3, r0
 8003d04:	4619      	mov	r1, r3
 8003d06:	4620      	mov	r0, r4
 8003d08:	f000 fabc 	bl	8004284 <ringBuffer_push>
}
 8003d0c:	bf00      	nop
 8003d0e:	bd98      	pop	{r3, r4, r7, pc}
 8003d10:	2000037c 	.word	0x2000037c
 8003d14:	20000360 	.word	0x20000360

08003d18 <Read_Response>:
 * @param 	response is a string is checked if it is in the ring buffer.
 * @retval	1: There is a string passed as a parameter in the ring buffer.
 * @retval	0: There is no string passed as a parameter in the ring buffer.
 */
uint32_t Read_Response(char * response)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <Read_Response+0x20>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fb36 	bl	8004398 <ringBuffer_lookFor>
 8003d2c:	4603      	mov	r3, r0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	2000037c 	.word	0x2000037c

08003d3c <Wait_Response>:
 * @retval	FOUND			:There is a string passed as a parameter in the ring buffer.
 * @retval	TIMEOUT_ERROR	:It returns when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Wait_Response(char* response, uint32_t timeout)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 8003d46:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <Wait_Response+0x74>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d108      	bne.n	8003d60 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 8003d4e:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <Wait_Response+0x78>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	4798      	blx	r3
 8003d54:	4603      	mov	r3, r0
 8003d56:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <Wait_Response+0x7c>)
 8003d58:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 8003d5a:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <Wait_Response+0x74>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 8003d60:	4b16      	ldr	r3, [pc, #88]	; (8003dbc <Wait_Response+0x80>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fb16 	bl	8004398 <ringBuffer_lookFor>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <Wait_Response+0x46>
	{
		firstCall = 0;
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <Wait_Response+0x74>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <Wait_Response+0x7c>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
		return FOUND;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e012      	b.n	8003da8 <Wait_Response+0x6c>
	}
	else if(ESP8266.getTick() - time >= timeout)
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <Wait_Response+0x78>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	4798      	blx	r3
 8003d88:	4602      	mov	r2, r0
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <Wait_Response+0x7c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d807      	bhi.n	8003da6 <Wait_Response+0x6a>
	{
		firstCall = 0;
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <Wait_Response+0x74>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <Wait_Response+0x7c>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <Wait_Response+0x6c>
	}
	else
	{
		return IDLE;
 8003da6:	2304      	movs	r3, #4
	}

}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	2000036c 	.word	0x2000036c
 8003db4:	20000360 	.word	0x20000360
 8003db8:	20000370 	.word	0x20000370
 8003dbc:	2000037c 	.word	0x2000037c

08003dc0 <Connect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_Wifi(char* ssid, char* password)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b098      	sub	sp, #96	; 0x60
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
	char *command_buffer[3] =
 8003dca:	4a16      	ldr	r2, [pc, #88]	; (8003e24 <Connect_Wifi+0x64>)
 8003dcc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_CWMODE_STATION,
		AT_CWQAP,
		""
	};
	char *response_buffer[3] =
 8003dd6:	4a14      	ldr	r2, [pc, #80]	; (8003e28 <Connect_Wifi+0x68>)
 8003dd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ddc:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};
	Status response_state = IDLE;
 8003de2:	2304      	movs	r3, #4
 8003de4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char wifi_buffer[50];

	sprintf(wifi_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003de8:	f107 0008 	add.w	r0, r7, #8
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a0e      	ldr	r2, [pc, #56]	; (8003e2c <Connect_Wifi+0x6c>)
 8003df4:	490e      	ldr	r1, [pc, #56]	; (8003e30 <Connect_Wifi+0x70>)
 8003df6:	f01d f8db 	bl	8020fb0 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003dfa:	f107 0308 	add.w	r3, r7, #8
 8003dfe:	653b      	str	r3, [r7, #80]	; 0x50

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003e00:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003e04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e08:	2203      	movs	r2, #3
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f82e 	bl	8003e6c <Command_Process>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	return response_state;
 8003e16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3758      	adds	r7, #88	; 0x58
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	08023b0c 	.word	0x08023b0c
 8003e28:	08023b18 	.word	0x08023b18
 8003e2c:	08023af0 	.word	0x08023af0
 8003e30:	08023afc 	.word	0x08023afc

08003e34 <Disconnect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about disconnect operation.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_Wifi(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
	char *command_buffer[1] = { AT_CWQAP };
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <Disconnect_Wifi+0x30>)
 8003e3c:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <Disconnect_Wifi+0x34>)
 8003e40:	607b      	str	r3, [r7, #4]

	Status response_state = IDLE;
 8003e42:	2304      	movs	r3, #4
 8003e44:	73fb      	strb	r3, [r7, #15]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8003e46:	1d39      	adds	r1, r7, #4
 8003e48:	f107 0308 	add.w	r3, r7, #8
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f80c 	bl	8003e6c <Command_Process>
 8003e54:	4603      	mov	r3, r0
 8003e56:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8003e58:	7bfb      	ldrb	r3, [r7, #15]

}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	08023ac0 	.word	0x08023ac0
 8003e68:	08023ad0 	.word	0x08023ad0

08003e6c <Command_Process>:
 * @retval	STATUS_ERROR	:It returns when ESP send the ERROR message or number of commands is equal zero.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Command_Process(char **commandArray, char **responseArray, uint8_t numberOfCommands)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	4613      	mov	r3, r2
 8003e78:	71fb      	strb	r3, [r7, #7]
	static uint8_t commandFlag  = 1, currentCommand = 0;
	Status response;

	if(!numberOfCommands || currentCommand >= numberOfCommands)
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d004      	beq.n	8003e8a <Command_Process+0x1e>
 8003e80:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <Command_Process+0x104>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	79fa      	ldrb	r2, [r7, #7]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d806      	bhi.n	8003e98 <Command_Process+0x2c>
	{
		ringBuffer_flush(rx_buffer);
 8003e8a:	4b3a      	ldr	r3, [pc, #232]	; (8003f74 <Command_Process+0x108>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fa4c 	bl	800432c <ringBuffer_flush>
		return STATUS_ERROR;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e067      	b.n	8003f68 <Command_Process+0xfc>
	}
	else
	{
		if(commandFlag)
 8003e98:	4b37      	ldr	r3, [pc, #220]	; (8003f78 <Command_Process+0x10c>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00b      	beq.n	8003eb8 <Command_Process+0x4c>
		{
			Send_AT_Command(commandArray[currentCommand]);
 8003ea0:	4b33      	ldr	r3, [pc, #204]	; (8003f70 <Command_Process+0x104>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff ff13 	bl	8003cd8 <Send_AT_Command>
			commandFlag = 0;
 8003eb2:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <Command_Process+0x10c>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
		}
			response = Wait_Response(responseArray[currentCommand], TIMEOUT);
 8003eb8:	4b2d      	ldr	r3, [pc, #180]	; (8003f70 <Command_Process+0x104>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f242 7110 	movw	r1, #10000	; 0x2710
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff ff37 	bl	8003d3c <Wait_Response>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	75fb      	strb	r3, [r7, #23]

			if(Read_Response("ERROR"))
 8003ed2:	482a      	ldr	r0, [pc, #168]	; (8003f7c <Command_Process+0x110>)
 8003ed4:	f7ff ff20 	bl	8003d18 <Read_Response>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00c      	beq.n	8003ef8 <Command_Process+0x8c>
			{
				commandFlag = 1;
 8003ede:	4b26      	ldr	r3, [pc, #152]	; (8003f78 <Command_Process+0x10c>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003ee4:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <Command_Process+0x104>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003eea:	4b22      	ldr	r3, [pc, #136]	; (8003f74 <Command_Process+0x108>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fa1c 	bl	800432c <ringBuffer_flush>
				return STATUS_ERROR;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e037      	b.n	8003f68 <Command_Process+0xfc>
			}
			else if(response == IDLE)
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d101      	bne.n	8003f02 <Command_Process+0x96>
			{
				return response;
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
 8003f00:	e032      	b.n	8003f68 <Command_Process+0xfc>
			}
			else if(response == FOUND)
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d123      	bne.n	8003f50 <Command_Process+0xe4>
			{
				if(currentCommand == (numberOfCommands-1))
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <Command_Process+0x104>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d10c      	bne.n	8003f30 <Command_Process+0xc4>
				{
					commandFlag = 1;
 8003f16:	4b18      	ldr	r3, [pc, #96]	; (8003f78 <Command_Process+0x10c>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]
					currentCommand = 0;
 8003f1c:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <Command_Process+0x104>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003f22:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <Command_Process+0x108>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fa00 	bl	800432c <ringBuffer_flush>
					return STATUS_OK;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e01b      	b.n	8003f68 <Command_Process+0xfc>
				}
				else
				{
					commandFlag = 1;
 8003f30:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <Command_Process+0x10c>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
					currentCommand += 1;
 8003f36:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <Command_Process+0x104>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <Command_Process+0x104>)
 8003f40:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003f42:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <Command_Process+0x108>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 f9f0 	bl	800432c <ringBuffer_flush>
					return IDLE;
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	e00b      	b.n	8003f68 <Command_Process+0xfc>
				}

			}
			else
			{
				commandFlag = 1;
 8003f50:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <Command_Process+0x10c>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <Command_Process+0x104>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003f5c:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <Command_Process+0x108>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 f9e3 	bl	800432c <ringBuffer_flush>
				return response;
 8003f66:	7dfb      	ldrb	r3, [r7, #23]
			}
	}


}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000374 	.word	0x20000374
 8003f74:	2000037c 	.word	0x2000037c
 8003f78:	20000010 	.word	0x20000010
 8003f7c:	08023b24 	.word	0x08023b24

08003f80 <Connect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_TCP_Server(char* ip, char* port)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b0a2      	sub	sp, #136	; 0x88
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
	Status response_state = IDLE;
 8003f8a:	2304      	movs	r3, #4
 8003f8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	char *command_buffer[2] =
 8003f90:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <Connect_TCP_Server+0x68>)
 8003f92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f9a:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		AT_CIPMUX_SINGLE,
		""
	};

	char *response_buffer[2] =
 8003f9e:	4a13      	ldr	r2, [pc, #76]	; (8003fec <Connect_TCP_Server+0x6c>)
 8003fa0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fa8:	e883 0003 	stmia.w	r3, {r0, r1}
		AT_RESPONSE_OK
	};

	char wifi_buffer[100];

	sprintf(wifi_buffer,"%s\"%s\",%s\r\n",AT_CIPSTART_TCP,ip,port);
 8003fac:	f107 0008 	add.w	r0, r7, #8
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a0e      	ldr	r2, [pc, #56]	; (8003ff0 <Connect_TCP_Server+0x70>)
 8003fb8:	490e      	ldr	r1, [pc, #56]	; (8003ff4 <Connect_TCP_Server+0x74>)
 8003fba:	f01c fff9 	bl	8020fb0 <siprintf>

	command_buffer[1] = wifi_buffer;
 8003fbe:	f107 0308 	add.w	r3, r7, #8
 8003fc2:	67bb      	str	r3, [r7, #120]	; 0x78

	response_state = Command_Process(command_buffer, response_buffer, 2);
 8003fc4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003fc8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003fcc:	2202      	movs	r2, #2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff ff4c 	bl	8003e6c <Command_Process>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	return response_state;
 8003fda:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3780      	adds	r7, #128	; 0x80
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	08023b4c 	.word	0x08023b4c
 8003fec:	08023b54 	.word	0x08023b54
 8003ff0:	08023b2c 	.word	0x08023b2c
 8003ff4:	08023b40 	.word	0x08023b40

08003ff8 <Disconnect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about disconnection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_TCP_Server(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
	Status response_state = IDLE;
 8003ffe:	2304      	movs	r3, #4
 8004000:	73fb      	strb	r3, [r7, #15]

	char *command_buffer[1] = { AT_CIPCLOSE };
 8004002:	4b09      	ldr	r3, [pc, #36]	; (8004028 <Disconnect_TCP_Server+0x30>)
 8004004:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <Disconnect_TCP_Server+0x34>)
 8004008:	607b      	str	r3, [r7, #4]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 800400a:	1d39      	adds	r1, r7, #4
 800400c:	f107 0308 	add.w	r3, r7, #8
 8004010:	2201      	movs	r2, #1
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff ff2a 	bl	8003e6c <Command_Process>
 8004018:	4603      	mov	r3, r0
 800401a:	73fb      	strb	r3, [r7, #15]

	return response_state;
 800401c:	7bfb      	ldrb	r3, [r7, #15]

}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	08023b5c 	.word	0x08023b5c
 800402c:	08023ad0 	.word	0x08023ad0

08004030 <Send_TCP_Message>:
 * @retval	STATUS_ERROR	:There is an error about sending message.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Send_TCP_Message(char* message)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b096      	sub	sp, #88	; 0x58
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
	Status response_state = STATUS_ERROR;
 8004038:	2303      	movs	r3, #3
 800403a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint32_t length=0;
 800403e:	2300      	movs	r3, #0
 8004040:	653b      	str	r3, [r7, #80]	; 0x50

	length = strlen(message);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fc f8fa 	bl	800023c <strlen>
 8004048:	6538      	str	r0, [r7, #80]	; 0x50

	char cipSendBuffer[50];

	sprintf(cipSendBuffer,"%s%ld\r\n",AT_CIPSEND,length);
 800404a:	f107 001c 	add.w	r0, r7, #28
 800404e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004050:	4a10      	ldr	r2, [pc, #64]	; (8004094 <Send_TCP_Message+0x64>)
 8004052:	4911      	ldr	r1, [pc, #68]	; (8004098 <Send_TCP_Message+0x68>)
 8004054:	f01c ffac 	bl	8020fb0 <siprintf>

	char *command_buffer[2];

	command_buffer[0] = cipSendBuffer;
 8004058:	f107 031c 	add.w	r3, r7, #28
 800405c:	617b      	str	r3, [r7, #20]
	command_buffer[1] = message;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	61bb      	str	r3, [r7, #24]

	char *response_buffer[2] =
 8004062:	4a0e      	ldr	r2, [pc, #56]	; (800409c <Send_TCP_Message+0x6c>)
 8004064:	f107 030c 	add.w	r3, r7, #12
 8004068:	e892 0003 	ldmia.w	r2, {r0, r1}
 800406c:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	response_state = Command_Process(command_buffer, response_buffer, 2);
 8004070:	f107 010c 	add.w	r1, r7, #12
 8004074:	f107 0314 	add.w	r3, r7, #20
 8004078:	2202      	movs	r2, #2
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fef6 	bl	8003e6c <Command_Process>
 8004080:	4603      	mov	r3, r0
 8004082:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	return response_state;
 8004086:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57

}
 800408a:	4618      	mov	r0, r3
 800408c:	3758      	adds	r7, #88	; 0x58
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	08023b6c 	.word	0x08023b6c
 8004098:	08023b78 	.word	0x08023b78
 800409c:	08023b80 	.word	0x08023b80

080040a0 <Read_TCP_Message>:
 * @param 	receviedMessage : If a message is received, it is assigned to receivedMessage.
 * @retval	STATUS_OK		:The message has been read successfully.
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 */
Status Read_TCP_Message(char* receivedMessage)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

	char *substring = strstr((char*)rx_buffer->buffer,"+IPD,");
 80040a8:	4b2d      	ldr	r3, [pc, #180]	; (8004160 <Read_TCP_Message+0xc0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	492d      	ldr	r1, [pc, #180]	; (8004164 <Read_TCP_Message+0xc4>)
 80040b0:	4618      	mov	r0, r3
 80040b2:	f01d fd47 	bl	8021b44 <strstr>
 80040b6:	6138      	str	r0, [r7, #16]

	char messageLengthString[3];

	uint32_t messageLength=0,index=0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]


	if(substring != NULL)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d042      	beq.n	800414c <Read_TCP_Message+0xac>
	{
		for(uint8_t i=0;i<3;i++)
 80040c6:	2300      	movs	r3, #0
 80040c8:	76fb      	strb	r3, [r7, #27]
 80040ca:	e017      	b.n	80040fc <Read_TCP_Message+0x5c>
		{
			if(*(substring+5+i) == ':')
 80040cc:	7efb      	ldrb	r3, [r7, #27]
 80040ce:	3305      	adds	r3, #5
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4413      	add	r3, r2
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b3a      	cmp	r3, #58	; 0x3a
 80040d8:	d014      	beq.n	8004104 <Read_TCP_Message+0x64>
				break;
			messageLengthString[i] = *(substring+5+i);
 80040da:	7efb      	ldrb	r3, [r7, #27]
 80040dc:	3305      	adds	r3, #5
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	441a      	add	r2, r3
 80040e2:	7efb      	ldrb	r3, [r7, #27]
 80040e4:	7812      	ldrb	r2, [r2, #0]
 80040e6:	f107 0120 	add.w	r1, r7, #32
 80040ea:	440b      	add	r3, r1
 80040ec:	f803 2c18 	strb.w	r2, [r3, #-24]
			index += 1;
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	3301      	adds	r3, #1
 80040f4:	61fb      	str	r3, [r7, #28]
		for(uint8_t i=0;i<3;i++)
 80040f6:	7efb      	ldrb	r3, [r7, #27]
 80040f8:	3301      	adds	r3, #1
 80040fa:	76fb      	strb	r3, [r7, #27]
 80040fc:	7efb      	ldrb	r3, [r7, #27]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d9e4      	bls.n	80040cc <Read_TCP_Message+0x2c>
 8004102:	e000      	b.n	8004106 <Read_TCP_Message+0x66>
				break;
 8004104:	bf00      	nop

		}

		messageLength = atoi(messageLengthString);
 8004106:	f107 0308 	add.w	r3, r7, #8
 800410a:	4618      	mov	r0, r3
 800410c:	f01b ffb1 	bl	8020072 <atoi>
 8004110:	4603      	mov	r3, r0
 8004112:	60fb      	str	r3, [r7, #12]

		for(uint32_t i=0;i<messageLength;i++)
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	e00d      	b.n	8004136 <Read_TCP_Message+0x96>
		{
			receivedMessage[i] = *(substring+6+index+i);
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	4413      	add	r3, r2
 8004120:	3306      	adds	r3, #6
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	441a      	add	r2, r3
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	440b      	add	r3, r1
 800412c:	7812      	ldrb	r2, [r2, #0]
 800412e:	701a      	strb	r2, [r3, #0]
		for(uint32_t i=0;i<messageLength;i++)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	3301      	adds	r3, #1
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	429a      	cmp	r2, r3
 800413c:	d3ed      	bcc.n	800411a <Read_TCP_Message+0x7a>
		}
		ringBuffer_flush(rx_buffer);
 800413e:	4b08      	ldr	r3, [pc, #32]	; (8004160 <Read_TCP_Message+0xc0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f8f2 	bl	800432c <ringBuffer_flush>
		return STATUS_OK;
 8004148:	2302      	movs	r3, #2
 800414a:	e005      	b.n	8004158 <Read_TCP_Message+0xb8>


	}
	else
	{
		ringBuffer_flush(rx_buffer);
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <Read_TCP_Message+0xc0>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f000 f8eb 	bl	800432c <ringBuffer_flush>
		return STATUS_ERROR;
 8004156:	2303      	movs	r3, #3
	}



}
 8004158:	4618      	mov	r0, r3
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	2000037c 	.word	0x2000037c
 8004164:	08023b88 	.word	0x08023b88

08004168 <Wait_TCP_Message>:
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE
 */
Status Wait_TCP_Message(char* receivedMessage, uint32_t timeout)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
	static uint8_t firstCall = 1;
	static uint32_t time = 0;

	if(firstCall)
 8004172:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <Wait_TCP_Message+0x70>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <Wait_TCP_Message+0x24>
	{
		time = ESP8266.getTick();
 800417a:	4b18      	ldr	r3, [pc, #96]	; (80041dc <Wait_TCP_Message+0x74>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	4798      	blx	r3
 8004180:	4603      	mov	r3, r0
 8004182:	4a17      	ldr	r2, [pc, #92]	; (80041e0 <Wait_TCP_Message+0x78>)
 8004184:	6013      	str	r3, [r2, #0]
		firstCall = 0;
 8004186:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <Wait_TCP_Message+0x70>)
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
	}

	if(Read_TCP_Message(receivedMessage) == STATUS_OK)
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff ff87 	bl	80040a0 <Read_TCP_Message>
 8004192:	4603      	mov	r3, r0
 8004194:	2b02      	cmp	r3, #2
 8004196:	d107      	bne.n	80041a8 <Wait_TCP_Message+0x40>
	{
		time = 0;
 8004198:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <Wait_TCP_Message+0x78>)
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 800419e:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <Wait_TCP_Message+0x70>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
 80041a4:	2302      	movs	r3, #2
 80041a6:	e012      	b.n	80041ce <Wait_TCP_Message+0x66>
	}
	else if(ESP8266.getTick()-time >= timeout)
 80041a8:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <Wait_TCP_Message+0x74>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	4798      	blx	r3
 80041ae:	4602      	mov	r2, r0
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <Wait_TCP_Message+0x78>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d807      	bhi.n	80041cc <Wait_TCP_Message+0x64>
	{
		time = 0;
 80041bc:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <Wait_TCP_Message+0x78>)
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 80041c2:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <Wait_TCP_Message+0x70>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	701a      	strb	r2, [r3, #0]
		return TIMEOUT_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <Wait_TCP_Message+0x66>
	}
	else
		return IDLE;
 80041cc:	2304      	movs	r3, #4

}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000011 	.word	0x20000011
 80041dc:	20000360 	.word	0x20000360
 80041e0:	20000378 	.word	0x20000378

080041e4 <mqtt_encode_packet>:


#include "mqtt.h"


int32_t mqtt_encode_packet(uint8_t *buffer, void *packet, mqtt_packet_types packetType ){
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	4613      	mov	r3, r2
 80041f0:	71fb      	strb	r3, [r7, #7]

	return -1;
 80041f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 800420a:	2010      	movs	r0, #16
 800420c:	f01c fcfe 	bl	8020c0c <malloc>
 8004210:	4603      	mov	r3, r0
 8004212:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <ringBuffer_init+0x1c>
	{
		// Error
		return 0;
 800421a:	2300      	movs	r3, #0
 800421c:	e017      	b.n	800424e <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8004230:	2101      	movs	r1, #1
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f01b ff22 	bl	802007c <calloc>
 8004238:	4603      	mov	r3, r0
 800423a:	461a      	mov	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <ringBuffer_init+0x4a>
		{
			// Error
			return 0;
 8004248:	2300      	movs	r3, #0
 800424a:	e000      	b.n	800424e <ringBuffer_init+0x4c>
		}

	return rBuf;
 800424c:	68fb      	ldr	r3, [r7, #12]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b082      	sub	sp, #8
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00b      	beq.n	800427c <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d004      	beq.n	8004276 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	4618      	mov	r0, r3
 8004272:	f01c fcd3 	bl	8020c1c <free>
		}
		free(buffer);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f01c fcd0 	bl	8020c1c <free>
	}
}
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	3b01      	subs	r3, #1
 800429a:	429a      	cmp	r2, r3
 800429c:	d00c      	beq.n	80042b8 <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4413      	add	r3, r2
 80042a8:	78fa      	ldrb	r2, [r7, #3]
 80042aa:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 80042b6:	e009      	b.n	80042cc <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4413      	add	r3, r2
 80042c2:	78fa      	ldrb	r2, [r7, #3]
 80042c4:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d00d      	beq.n	800430a <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4413      	add	r3, r2
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	605a      	str	r2, [r3, #4]
		return data;
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	e00a      	b.n	8004320 <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	4413      	add	r3, r2
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	605a      	str	r2, [r3, #4]
		return data;
 800431e:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,(uint8_t)0x00,(size_t)ringBuffer->size);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68d8      	ldr	r0, [r3, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	461a      	mov	r2, r3
 800433e:	2100      	movs	r1, #0
 8004340:	f01c fc82 	bl	8020c48 <memset>
	ringBuffer->head = ringBuffer->tail = 0;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	605a      	str	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	601a      	str	r2, [r3, #0]
}
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	e00a      	b.n	8004380 <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	4413      	add	r3, r2
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	4619      	mov	r1, r3
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff ff85 	bl	8004284 <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3301      	adds	r3, #1
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	6838      	ldr	r0, [r7, #0]
 8004382:	f7fb ff5b 	bl	800023c <strlen>
 8004386:	4602      	mov	r2, r0
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	429a      	cmp	r2, r3
 800438c:	d8ed      	bhi.n	800436a <ringBuffer_pushArray+0x10>
}
 800438e:	bf00      	nop
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * @retval	0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	6839      	ldr	r1, [r7, #0]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f01d fbcb 	bl	8021b44 <strstr>
 80043ae:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <ringBuffer_lookFor+0x22>
		return 1;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <ringBuffer_lookFor+0x24>
	else
		return 0;
 80043ba:	2300      	movs	r3, #0

}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 80043e4:	2032      	movs	r0, #50	; 0x32
 80043e6:	f7ff ff0c 	bl	8004202 <ringBuffer_init>
 80043ea:	4602      	mov	r2, r0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	605a      	str	r2, [r3, #4]

	}
 80043f0:	bf00      	nop
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff ff26 	bl	8004256 <ringBuffer_deInit>
	}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4618      	mov	r0, r3
 8004420:	f010 fb3a 	bl	8014a98 <_ZN5UtestC1Ev>
 8004424:	4a03      	ldr	r2, [pc, #12]	; (8004434 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	0802879c 	.word	0x0802879c

08004438 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	4a05      	ldr	r2, [pc, #20]	; (8004458 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4618      	mov	r0, r3
 800444a:	f010 fb35 	bl	8014ab8 <_ZN5UtestD1Ev>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	0802879c 	.word	0x0802879c

0800445c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff ffe7 	bl	8004438 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800446a:	2108      	movs	r1, #8
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f006 fb57 	bl	800ab20 <_ZdlPvj>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	605a      	str	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff ffbe 	bl	8004414 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004498:	4a03      	ldr	r2, [pc, #12]	; (80044a8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	0802877c 	.word	0x0802877c

080044ac <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 80044ac:	b590      	push	{r4, r7, lr}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	2229      	movs	r2, #41	; 0x29
 80044b6:	4906      	ldr	r1, [pc, #24]	; (80044d0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 80044b8:	2008      	movs	r0, #8
 80044ba:	f006 fb1d 	bl	800aaf8 <_ZnwjPKci>
 80044be:	4604      	mov	r4, r0
 80044c0:	4620      	mov	r0, r4
 80044c2:	f7ff ffdb 	bl	800447c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 80044c6:	4623      	mov	r3, r4
 80044c8:	4618      	mov	r0, r3
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd90      	pop	{r4, r7, pc}
 80044d0:	08023c04 	.word	0x08023c04

080044d4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4618      	mov	r0, r3
 80044e0:	f00e fef8 	bl	80132d4 <_ZN10UtestShellC1Ev>
 80044e4:	4a03      	ldr	r2, [pc, #12]	; (80044f4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	080286d0 	.word	0x080286d0

080044f8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 80044f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af04      	add	r7, sp, #16
 80044fe:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8004500:	f010 faa0 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8004504:	4604      	mov	r4, r0
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	3338      	adds	r3, #56	; 0x38
 800450a:	681d      	ldr	r5, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	461e      	mov	r6, r3
 8004514:	f010 faa6 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004518:	4603      	mov	r3, r0
 800451a:	9302      	str	r3, [sp, #8]
 800451c:	232c      	movs	r3, #44	; 0x2c
 800451e:	9301      	str	r3, [sp, #4]
 8004520:	4b2a      	ldr	r3, [pc, #168]	; (80045cc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	4b2a      	ldr	r3, [pc, #168]	; (80045d0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 8004526:	4632      	mov	r2, r6
 8004528:	2132      	movs	r1, #50	; 0x32
 800452a:	4620      	mov	r0, r4
 800452c:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 800452e:	f010 fa89 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8004532:	4604      	mov	r4, r0
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	3320      	adds	r3, #32
 8004538:	681d      	ldr	r5, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	bf14      	ite	ne
 8004544:	2301      	movne	r3, #1
 8004546:	2300      	moveq	r3, #0
 8004548:	b2de      	uxtb	r6, r3
 800454a:	f010 fa8b 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800454e:	4603      	mov	r3, r0
 8004550:	9303      	str	r3, [sp, #12]
 8004552:	232d      	movs	r3, #45	; 0x2d
 8004554:	9302      	str	r3, [sp, #8]
 8004556:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004558:	9301      	str	r3, [sp, #4]
 800455a:	2300      	movs	r3, #0
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8004560:	4a1d      	ldr	r2, [pc, #116]	; (80045d8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 8004562:	4631      	mov	r1, r6
 8004564:	4620      	mov	r0, r4
 8004566:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8004568:	f010 fa6c 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 800456c:	4604      	mov	r4, r0
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	3338      	adds	r3, #56	; 0x38
 8004572:	681d      	ldr	r5, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	461e      	mov	r6, r3
 800457c:	f010 fa72 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004580:	4603      	mov	r3, r0
 8004582:	9302      	str	r3, [sp, #8]
 8004584:	232e      	movs	r3, #46	; 0x2e
 8004586:	9301      	str	r3, [sp, #4]
 8004588:	4b10      	ldr	r3, [pc, #64]	; (80045cc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	4b13      	ldr	r3, [pc, #76]	; (80045dc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 800458e:	4632      	mov	r2, r6
 8004590:	2100      	movs	r1, #0
 8004592:	4620      	mov	r0, r4
 8004594:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 8004596:	f010 fa55 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 800459a:	4604      	mov	r4, r0
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	3338      	adds	r3, #56	; 0x38
 80045a0:	681d      	ldr	r5, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	461e      	mov	r6, r3
 80045aa:	f010 fa5b 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80045ae:	4603      	mov	r3, r0
 80045b0:	9302      	str	r3, [sp, #8]
 80045b2:	232f      	movs	r3, #47	; 0x2f
 80045b4:	9301      	str	r3, [sp, #4]
 80045b6:	4b05      	ldr	r3, [pc, #20]	; (80045cc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 80045bc:	4632      	mov	r2, r6
 80045be:	2100      	movs	r1, #0
 80045c0:	4620      	mov	r0, r4
 80045c2:	47a8      	blx	r5

}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045cc:	08023c04 	.word	0x08023c04
 80045d0:	08023c24 	.word	0x08023c24
 80045d4:	08023c4c 	.word	0x08023c4c
 80045d8:	08023c64 	.word	0x08023c64
 80045dc:	08023c6c 	.word	0x08023c6c
 80045e0:	08023c94 	.word	0x08023c94

080045e4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	605a      	str	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff ff0a 	bl	8004414 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004600:	4a03      	ldr	r2, [pc, #12]	; (8004610 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4618      	mov	r0, r3
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	080286b0 	.word	0x080286b0

08004614 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 8004614:	b590      	push	{r4, r7, lr}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	2233      	movs	r2, #51	; 0x33
 800461e:	4906      	ldr	r1, [pc, #24]	; (8004638 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 8004620:	2008      	movs	r0, #8
 8004622:	f006 fa69 	bl	800aaf8 <_ZnwjPKci>
 8004626:	4604      	mov	r4, r0
 8004628:	4620      	mov	r0, r4
 800462a:	f7ff ffdb 	bl	80045e4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 800462e:	4623      	mov	r3, r4
 8004630:	4618      	mov	r0, r3
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	bd90      	pop	{r4, r7, pc}
 8004638:	08023c04 	.word	0x08023c04

0800463c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4618      	mov	r0, r3
 8004648:	f00e fe44 	bl	80132d4 <_ZN10UtestShellC1Ev>
 800464c:	4a03      	ldr	r2, [pc, #12]	; (800465c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	08028604 	.word	0x08028604

08004660 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 8004660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004662:	b087      	sub	sp, #28
 8004664:	af04      	add	r7, sp, #16
 8004666:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2145      	movs	r1, #69	; 0x45
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff fe08 	bl	8004284 <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 8004674:	f010 f9e6 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8004678:	4604      	mov	r4, r0
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	3338      	adds	r3, #56	; 0x38
 800467e:	681d      	ldr	r5, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	461e      	mov	r6, r3
 800468a:	f010 f9eb 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800468e:	4603      	mov	r3, r0
 8004690:	9302      	str	r3, [sp, #8]
 8004692:	2336      	movs	r3, #54	; 0x36
 8004694:	9301      	str	r3, [sp, #4]
 8004696:	4b15      	ldr	r3, [pc, #84]	; (80046ec <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 800469c:	4632      	mov	r2, r6
 800469e:	2145      	movs	r1, #69	; 0x45
 80046a0:	4620      	mov	r0, r4
 80046a2:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2110      	movs	r1, #16
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff fdea 	bl	8004284 <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 80046b0:	f010 f9c8 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 80046b4:	4604      	mov	r4, r0
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	3338      	adds	r3, #56	; 0x38
 80046ba:	681d      	ldr	r5, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	3301      	adds	r3, #1
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	461e      	mov	r6, r3
 80046c8:	f010 f9cc 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046cc:	4603      	mov	r3, r0
 80046ce:	9302      	str	r3, [sp, #8]
 80046d0:	2339      	movs	r3, #57	; 0x39
 80046d2:	9301      	str	r3, [sp, #4]
 80046d4:	4b05      	ldr	r3, [pc, #20]	; (80046ec <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 80046da:	4632      	mov	r2, r6
 80046dc:	2110      	movs	r1, #16
 80046de:	4620      	mov	r0, r4
 80046e0:	47a8      	blx	r5

}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ea:	bf00      	nop
 80046ec:	08023c04 	.word	0x08023c04
 80046f0:	08023cbc 	.word	0x08023cbc
 80046f4:	08023cec 	.word	0x08023cec

080046f8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	605a      	str	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff fe80 	bl	8004414 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004714:	4a03      	ldr	r2, [pc, #12]	; (8004724 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4618      	mov	r0, r3
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	080285e4 	.word	0x080285e4

08004728 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004728:	b590      	push	{r4, r7, lr}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	223d      	movs	r2, #61	; 0x3d
 8004732:	4906      	ldr	r1, [pc, #24]	; (800474c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 8004734:	2008      	movs	r0, #8
 8004736:	f006 f9df 	bl	800aaf8 <_ZnwjPKci>
 800473a:	4604      	mov	r4, r0
 800473c:	4620      	mov	r0, r4
 800473e:	f7ff ffdb 	bl	80046f8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 8004742:	4623      	mov	r3, r4
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	bd90      	pop	{r4, r7, pc}
 800474c:	08023c04 	.word	0x08023c04

08004750 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4618      	mov	r0, r3
 800475c:	f00e fdba 	bl	80132d4 <_ZN10UtestShellC1Ev>
 8004760:	4a03      	ldr	r2, [pc, #12]	; (8004770 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	08028538 	.word	0x08028538

08004774 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 8004774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004776:	b089      	sub	sp, #36	; 0x24
 8004778:	af04      	add	r7, sp, #16
 800477a:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	3b01      	subs	r3, #1
 8004792:	429a      	cmp	r2, r3
 8004794:	bf0c      	ite	eq
 8004796:	2301      	moveq	r3, #1
 8004798:	2300      	movne	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4293      	cmp	r3, r2
 80047a2:	da0b      	bge.n	80047bc <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	4611      	mov	r1, r2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff fd68 	bl	8004284 <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	3301      	adds	r3, #1
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	e7e3      	b.n	8004784 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	21ff      	movs	r1, #255	; 0xff
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff fd5e 	bl	8004284 <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 80047c8:	f010 f93c 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 80047cc:	4604      	mov	r4, r0
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	3338      	adds	r3, #56	; 0x38
 80047d2:	681d      	ldr	r5, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	461e      	mov	r6, r3
 80047de:	f010 f941 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80047e2:	4603      	mov	r3, r0
 80047e4:	9302      	str	r3, [sp, #8]
 80047e6:	2345      	movs	r3, #69	; 0x45
 80047e8:	9301      	str	r3, [sp, #4]
 80047ea:	4b05      	ldr	r3, [pc, #20]	; (8004800 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	4b05      	ldr	r3, [pc, #20]	; (8004804 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 80047f0:	4632      	mov	r2, r6
 80047f2:	21ff      	movs	r1, #255	; 0xff
 80047f4:	4620      	mov	r0, r4
 80047f6:	47a8      	blx	r5
}
 80047f8:	bf00      	nop
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004800:	08023c04 	.word	0x08023c04
 8004804:	08023d1c 	.word	0x08023d1c

08004808 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	605a      	str	r2, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff fdf8 	bl	8004414 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004824:	4a03      	ldr	r2, [pc, #12]	; (8004834 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	08028518 	.word	0x08028518

08004838 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004838:	b590      	push	{r4, r7, lr}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	2248      	movs	r2, #72	; 0x48
 8004842:	4906      	ldr	r1, [pc, #24]	; (800485c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 8004844:	2008      	movs	r0, #8
 8004846:	f006 f957 	bl	800aaf8 <_ZnwjPKci>
 800484a:	4604      	mov	r4, r0
 800484c:	4620      	mov	r0, r4
 800484e:	f7ff ffdb 	bl	8004808 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 8004852:	4623      	mov	r3, r4
 8004854:	4618      	mov	r0, r3
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	bd90      	pop	{r4, r7, pc}
 800485c:	08023c04 	.word	0x08023c04

08004860 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4618      	mov	r0, r3
 800486c:	f00e fd32 	bl	80132d4 <_ZN10UtestShellC1Ev>
 8004870:	4a03      	ldr	r2, [pc, #12]	; (8004880 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	0802846c 	.word	0x0802846c

08004884 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 8004884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004886:	b089      	sub	sp, #36	; 0x24
 8004888:	af04      	add	r7, sp, #16
 800488a:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	21ff      	movs	r1, #255	; 0xff
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff fcf6 	bl	8004284 <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff fd1b 	bl	80042d8 <ringBuffer_pop>
 80048a2:	4603      	mov	r3, r0
 80048a4:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 80048a6:	f010 f8cd 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 80048aa:	4604      	mov	r4, r0
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	3338      	adds	r3, #56	; 0x38
 80048b0:	681d      	ldr	r5, [r3, #0]
 80048b2:	7bfe      	ldrb	r6, [r7, #15]
 80048b4:	f010 f8d6 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80048b8:	4603      	mov	r3, r0
 80048ba:	9302      	str	r3, [sp, #8]
 80048bc:	234d      	movs	r3, #77	; 0x4d
 80048be:	9301      	str	r3, [sp, #4]
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	4b05      	ldr	r3, [pc, #20]	; (80048dc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 80048c6:	4632      	mov	r2, r6
 80048c8:	21ff      	movs	r1, #255	; 0xff
 80048ca:	4620      	mov	r0, r4
 80048cc:	47a8      	blx	r5

}
 80048ce:	bf00      	nop
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048d6:	bf00      	nop
 80048d8:	08023c04 	.word	0x08023c04
 80048dc:	08023d4c 	.word	0x08023d4c

080048e0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	605a      	str	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff fd8c 	bl	8004414 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80048fc:	4a03      	ldr	r2, [pc, #12]	; (800490c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4618      	mov	r0, r3
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	0802844c 	.word	0x0802844c

08004910 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 8004910:	b590      	push	{r4, r7, lr}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	2251      	movs	r2, #81	; 0x51
 800491a:	4906      	ldr	r1, [pc, #24]	; (8004934 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 800491c:	2008      	movs	r0, #8
 800491e:	f006 f8eb 	bl	800aaf8 <_ZnwjPKci>
 8004922:	4604      	mov	r4, r0
 8004924:	4620      	mov	r0, r4
 8004926:	f7ff ffdb 	bl	80048e0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 800492a:	4623      	mov	r3, r4
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	bd90      	pop	{r4, r7, pc}
 8004934:	08023c04 	.word	0x08023c04

08004938 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4618      	mov	r0, r3
 8004944:	f00e fcc6 	bl	80132d4 <_ZN10UtestShellC1Ev>
 8004948:	4a03      	ldr	r2, [pc, #12]	; (8004958 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	080283a0 	.word	0x080283a0

0800495c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 800495c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800495e:	b089      	sub	sp, #36	; 0x24
 8004960:	af04      	add	r7, sp, #16
 8004962:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8004964:	2300      	movs	r3, #0
 8004966:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	21aa      	movs	r1, #170	; 0xaa
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff fc88 	bl	8004284 <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	3b01      	subs	r3, #1
 800498a:	429a      	cmp	r2, r3
 800498c:	bf0c      	ite	eq
 800498e:	2301      	moveq	r3, #1
 8004990:	2300      	movne	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4293      	cmp	r3, r2
 800499a:	da0a      	bge.n	80049b2 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff fc99 	bl	80042d8 <ringBuffer_pop>
 80049a6:	4603      	mov	r3, r0
 80049a8:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3301      	adds	r3, #1
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e7e4      	b.n	800497c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff fc8e 	bl	80042d8 <ringBuffer_pop>
 80049bc:	4603      	mov	r3, r0
 80049be:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 80049c0:	f010 f840 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 80049c4:	4604      	mov	r4, r0
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	3338      	adds	r3, #56	; 0x38
 80049ca:	681d      	ldr	r5, [r3, #0]
 80049cc:	7afe      	ldrb	r6, [r7, #11]
 80049ce:	f010 f849 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80049d2:	4603      	mov	r3, r0
 80049d4:	9302      	str	r3, [sp, #8]
 80049d6:	235e      	movs	r3, #94	; 0x5e
 80049d8:	9301      	str	r3, [sp, #4]
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 80049e0:	4632      	mov	r2, r6
 80049e2:	21aa      	movs	r1, #170	; 0xaa
 80049e4:	4620      	mov	r0, r4
 80049e6:	47a8      	blx	r5
}
 80049e8:	bf00      	nop
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049f0:	08023c04 	.word	0x08023c04
 80049f4:	08023d6c 	.word	0x08023d6c

080049f8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	605a      	str	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff fd00 	bl	8004414 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004a14:	4a03      	ldr	r2, [pc, #12]	; (8004a24 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	08028380 	.word	0x08028380

08004a28 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004a28:	b590      	push	{r4, r7, lr}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	2261      	movs	r2, #97	; 0x61
 8004a32:	4906      	ldr	r1, [pc, #24]	; (8004a4c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 8004a34:	2008      	movs	r0, #8
 8004a36:	f006 f85f 	bl	800aaf8 <_ZnwjPKci>
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f7ff ffdb 	bl	80049f8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 8004a42:	4623      	mov	r3, r4
 8004a44:	4618      	mov	r0, r3
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd90      	pop	{r4, r7, pc}
 8004a4c:	08023c04 	.word	0x08023c04

08004a50 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f00e fc3a 	bl	80132d4 <_ZN10UtestShellC1Ev>
 8004a60:	4a03      	ldr	r2, [pc, #12]	; (8004a70 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	080282d4 	.word	0x080282d4

08004a74 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 8004a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a76:	b089      	sub	sp, #36	; 0x24
 8004a78:	af04      	add	r7, sp, #16
 8004a7a:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d20b      	bcs.n	8004aa4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	4611      	mov	r1, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff fbf4 	bl	8004284 <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	e7ed      	b.n	8004a80 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 8004aa4:	f00f ffce 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	3338      	adds	r3, #56	; 0x38
 8004aae:	681d      	ldr	r5, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	4413      	add	r3, r2
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	461e      	mov	r6, r3
 8004ac4:	f00f ffce 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	9302      	str	r3, [sp, #8]
 8004acc:	2368      	movs	r3, #104	; 0x68
 8004ace:	9301      	str	r3, [sp, #4]
 8004ad0:	4b24      	ldr	r3, [pc, #144]	; (8004b64 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	4b24      	ldr	r3, [pc, #144]	; (8004b68 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 8004ad6:	4632      	mov	r2, r6
 8004ad8:	2131      	movs	r1, #49	; 0x31
 8004ada:	4620      	mov	r0, r4
 8004adc:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7ff fc22 	bl	800432c <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 8004ae8:	f00f ffac 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8004aec:	4604      	mov	r4, r0
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	3338      	adds	r3, #56	; 0x38
 8004af2:	681d      	ldr	r5, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	3b01      	subs	r3, #1
 8004b02:	4413      	add	r3, r2
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	461e      	mov	r6, r3
 8004b08:	f00f ffac 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	9302      	str	r3, [sp, #8]
 8004b10:	236c      	movs	r3, #108	; 0x6c
 8004b12:	9301      	str	r3, [sp, #4]
 8004b14:	4b13      	ldr	r3, [pc, #76]	; (8004b64 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	4b14      	ldr	r3, [pc, #80]	; (8004b6c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 8004b1a:	4632      	mov	r2, r6
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	4620      	mov	r0, r4
 8004b20:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 8004b22:	f00f ff8f 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8004b26:	4604      	mov	r4, r0
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	3338      	adds	r3, #56	; 0x38
 8004b2c:	681d      	ldr	r5, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	085b      	lsrs	r3, r3, #1
 8004b3c:	4413      	add	r3, r2
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	461e      	mov	r6, r3
 8004b42:	f00f ff8f 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b46:	4603      	mov	r3, r0
 8004b48:	9302      	str	r3, [sp, #8]
 8004b4a:	236d      	movs	r3, #109	; 0x6d
 8004b4c:	9301      	str	r3, [sp, #4]
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 8004b54:	4632      	mov	r2, r6
 8004b56:	2100      	movs	r1, #0
 8004b58:	4620      	mov	r0, r4
 8004b5a:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all the elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b64:	08023c04 	.word	0x08023c04
 8004b68:	08023d8c 	.word	0x08023d8c
 8004b6c:	08023dc8 	.word	0x08023dc8
 8004b70:	08023e04 	.word	0x08023e04

08004b74 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	605a      	str	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff fc42 	bl	8004414 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004b90:	4a03      	ldr	r2, [pc, #12]	; (8004ba0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	080282b4 	.word	0x080282b4

08004ba4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 8004ba4:	b590      	push	{r4, r7, lr}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	2276      	movs	r2, #118	; 0x76
 8004bae:	4906      	ldr	r1, [pc, #24]	; (8004bc8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004bb0:	2008      	movs	r0, #8
 8004bb2:	f005 ffa1 	bl	800aaf8 <_ZnwjPKci>
 8004bb6:	4604      	mov	r4, r0
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f7ff ffdb 	bl	8004b74 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 8004bbe:	4623      	mov	r3, r4
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd90      	pop	{r4, r7, pc}
 8004bc8:	08023c04 	.word	0x08023c04

08004bcc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f00e fb7c 	bl	80132d4 <_ZN10UtestShellC1Ev>
 8004bdc:	4a03      	ldr	r2, [pc, #12]	; (8004bec <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	08028208 	.word	0x08028208

08004bf0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8004bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af04      	add	r7, sp, #16
 8004bf6:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	490e      	ldr	r1, [pc, #56]	; (8004c38 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7ff fbab 	bl	800435a <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 8004c04:	f00f ff1e 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8004c08:	4604      	mov	r4, r0
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	3324      	adds	r3, #36	; 0x24
 8004c0e:	681d      	ldr	r5, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	68de      	ldr	r6, [r3, #12]
 8004c16:	f00f ff25 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	9302      	str	r3, [sp, #8]
 8004c1e:	237a      	movs	r3, #122	; 0x7a
 8004c20:	9301      	str	r3, [sp, #4]
 8004c22:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	2300      	movs	r3, #0
 8004c28:	4632      	mov	r2, r6
 8004c2a:	4903      	ldr	r1, [pc, #12]	; (8004c38 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	47a8      	blx	r5
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c38:	08023e3c 	.word	0x08023e3c
 8004c3c:	08023c04 	.word	0x08023c04

08004c40 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	605a      	str	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff fbdc 	bl	8004414 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004c5c:	4a03      	ldr	r2, [pc, #12]	; (8004c6c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	080281e8 	.word	0x080281e8

08004c70 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8004c70:	b590      	push	{r4, r7, lr}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	227d      	movs	r2, #125	; 0x7d
 8004c7a:	4906      	ldr	r1, [pc, #24]	; (8004c94 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004c7c:	2008      	movs	r0, #8
 8004c7e:	f005 ff3b 	bl	800aaf8 <_ZnwjPKci>
 8004c82:	4604      	mov	r4, r0
 8004c84:	4620      	mov	r0, r4
 8004c86:	f7ff ffdb 	bl	8004c40 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004c8a:	4623      	mov	r3, r4
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd90      	pop	{r4, r7, pc}
 8004c94:	08023c04 	.word	0x08023c04

08004c98 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f00e fb16 	bl	80132d4 <_ZN10UtestShellC1Ev>
 8004ca8:	4a03      	ldr	r2, [pc, #12]	; (8004cb8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	0802813c 	.word	0x0802813c

08004cbc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc0:	b08a      	sub	sp, #40	; 0x28
 8004cc2:	af04      	add	r7, sp, #16
 8004cc4:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	494e      	ldr	r1, [pc, #312]	; (8004e04 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff fb44 	bl	800435a <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 8004cd2:	f00f feb7 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	3324      	adds	r3, #36	; 0x24
 8004cdc:	681d      	ldr	r5, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	68de      	ldr	r6, [r3, #12]
 8004ce4:	f00f febe 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	9302      	str	r3, [sp, #8]
 8004cec:	2381      	movs	r3, #129	; 0x81
 8004cee:	9301      	str	r3, [sp, #4]
 8004cf0:	4b45      	ldr	r3, [pc, #276]	; (8004e08 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	4632      	mov	r2, r6
 8004cf8:	4942      	ldr	r1, [pc, #264]	; (8004e04 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	4942      	ldr	r1, [pc, #264]	; (8004e0c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff fb47 	bl	8004398 <ringBuffer_lookFor>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	bf14      	ite	ne
 8004d10:	2301      	movne	r3, #1
 8004d12:	2300      	moveq	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d05c      	beq.n	8004dd4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	493b      	ldr	r1, [pc, #236]	; (8004e0c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff fb39 	bl	8004398 <ringBuffer_lookFor>
 8004d26:	4604      	mov	r4, r0
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	4937      	ldr	r1, [pc, #220]	; (8004e0c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff fb32 	bl	8004398 <ringBuffer_lookFor>
 8004d34:	4603      	mov	r3, r0
 8004d36:	429c      	cmp	r4, r3
 8004d38:	bf14      	ite	ne
 8004d3a:	2301      	movne	r3, #1
 8004d3c:	2300      	moveq	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d008      	beq.n	8004d56 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 8004d44:	f00f fe7e 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8004d48:	6803      	ldr	r3, [r0, #0]
 8004d4a:	3370      	adds	r3, #112	; 0x70
 8004d4c:	681c      	ldr	r4, [r3, #0]
 8004d4e:	2382      	movs	r3, #130	; 0x82
 8004d50:	4a2d      	ldr	r2, [pc, #180]	; (8004e08 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004d52:	492f      	ldr	r1, [pc, #188]	; (8004e10 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 8004d54:	47a0      	blx	r4
 8004d56:	f00f fe75 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	3358      	adds	r3, #88	; 0x58
 8004d60:	681d      	ldr	r5, [r3, #0]
 8004d62:	f107 0308 	add.w	r3, r7, #8
 8004d66:	2101      	movs	r1, #1
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f009 f907 	bl	800df7c <_Z10StringFromi>
 8004d6e:	f107 0308 	add.w	r3, r7, #8
 8004d72:	4618      	mov	r0, r3
 8004d74:	f008 fe0e 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 8004d78:	4606      	mov	r6, r0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	4923      	ldr	r1, [pc, #140]	; (8004e0c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff fb09 	bl	8004398 <ringBuffer_lookFor>
 8004d86:	4602      	mov	r2, r0
 8004d88:	f107 0310 	add.w	r3, r7, #16
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f009 fb6e 	bl	800e470 <_Z10StringFromm>
 8004d94:	f107 0310 	add.w	r3, r7, #16
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f008 fdfb 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 8004d9e:	4680      	mov	r8, r0
 8004da0:	f00f fe60 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004da4:	4603      	mov	r3, r0
 8004da6:	9303      	str	r3, [sp, #12]
 8004da8:	2382      	movs	r3, #130	; 0x82
 8004daa:	9302      	str	r3, [sp, #8]
 8004dac:	4b16      	ldr	r3, [pc, #88]	; (8004e08 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004dae:	9301      	str	r3, [sp, #4]
 8004db0:	2300      	movs	r3, #0
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	4643      	mov	r3, r8
 8004db6:	4632      	mov	r2, r6
 8004db8:	2101      	movs	r1, #1
 8004dba:	4620      	mov	r0, r4
 8004dbc:	47a8      	blx	r5
 8004dbe:	f107 0310 	add.w	r3, r7, #16
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f008 fe13 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8004dc8:	f107 0308 	add.w	r3, r7, #8
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f008 fe0e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 8004dd2:	e012      	b.n	8004dfa <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004dd4:	f00f fe36 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8004dd8:	4604      	mov	r4, r0
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	3338      	adds	r3, #56	; 0x38
 8004dde:	681d      	ldr	r5, [r3, #0]
 8004de0:	f00f fe40 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004de4:	4603      	mov	r3, r0
 8004de6:	9302      	str	r3, [sp, #8]
 8004de8:	2382      	movs	r3, #130	; 0x82
 8004dea:	9301      	str	r3, [sp, #4]
 8004dec:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	2300      	movs	r3, #0
 8004df2:	2200      	movs	r2, #0
 8004df4:	2100      	movs	r1, #0
 8004df6:	4620      	mov	r0, r4
 8004df8:	47a8      	blx	r5
}
 8004dfa:	bf00      	nop
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e04:	08023e44 	.word	0x08023e44
 8004e08:	08023c04 	.word	0x08023c04
 8004e0c:	08023e50 	.word	0x08023e50
 8004e10:	08023e58 	.word	0x08023e58

08004e14 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	605a      	str	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff faf2 	bl	8004414 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004e30:	4a03      	ldr	r2, [pc, #12]	; (8004e40 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	0802811c 	.word	0x0802811c

08004e44 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 8004e44:	b590      	push	{r4, r7, lr}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	2285      	movs	r2, #133	; 0x85
 8004e4e:	4906      	ldr	r1, [pc, #24]	; (8004e68 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8004e50:	2008      	movs	r0, #8
 8004e52:	f005 fe51 	bl	800aaf8 <_ZnwjPKci>
 8004e56:	4604      	mov	r4, r0
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f7ff ffdb 	bl	8004e14 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8004e5e:	4623      	mov	r3, r4
 8004e60:	4618      	mov	r0, r3
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd90      	pop	{r4, r7, pc}
 8004e68:	08023c04 	.word	0x08023c04

08004e6c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f00e fa2c 	bl	80132d4 <_ZN10UtestShellC1Ev>
 8004e7c:	4a03      	ldr	r2, [pc, #12]	; (8004e8c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	08028070 	.word	0x08028070

08004e90 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af04      	add	r7, sp, #16
 8004e96:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004e98:	f00f fdd4 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	3338      	adds	r3, #56	; 0x38
 8004ea2:	681d      	ldr	r5, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff fa8b 	bl	80043c4 <ringBuffer_capacity>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	461e      	mov	r6, r3
 8004eb2:	f00f fdd7 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	9302      	str	r3, [sp, #8]
 8004eba:	2388      	movs	r3, #136	; 0x88
 8004ebc:	9301      	str	r3, [sp, #4]
 8004ebe:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8004ec4:	4632      	mov	r2, r6
 8004ec6:	2132      	movs	r1, #50	; 0x32
 8004ec8:	4620      	mov	r0, r4
 8004eca:	47a8      	blx	r5

}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ed4:	08023c04 	.word	0x08023c04
 8004ed8:	08023efc 	.word	0x08023efc

08004edc <_Z18UART_Transmit_FakePh>:

/* Mpck functions-----------------------------------------------------------------------*/

void UART_Transmit_Fake(uint8_t* data)
{
 8004edc:	b5b0      	push	{r4, r5, r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]

	mock().actualCall("UART_Transmit_Fake").withStringParameter("data", (char*)data);
 8004ee4:	f107 0308 	add.w	r3, r7, #8
 8004ee8:	491d      	ldr	r1, [pc, #116]	; (8004f60 <_Z18UART_Transmit_FakePh+0x84>)
 8004eea:	4618      	mov	r0, r3
 8004eec:	f008 f9c7 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8004ef0:	f107 0308 	add.w	r3, r7, #8
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f006 fa9a 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004efc:	4604      	mov	r4, r0
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	3318      	adds	r3, #24
 8004f02:	681d      	ldr	r5, [r3, #0]
 8004f04:	f107 0310 	add.w	r3, r7, #16
 8004f08:	4916      	ldr	r1, [pc, #88]	; (8004f64 <_Z18UART_Transmit_FakePh+0x88>)
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f008 f9b7 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8004f10:	f107 0310 	add.w	r3, r7, #16
 8004f14:	4619      	mov	r1, r3
 8004f16:	4620      	mov	r0, r4
 8004f18:	47a8      	blx	r5
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	333c      	adds	r3, #60	; 0x3c
 8004f20:	681d      	ldr	r5, [r3, #0]
 8004f22:	f107 0318 	add.w	r3, r7, #24
 8004f26:	4910      	ldr	r1, [pc, #64]	; (8004f68 <_Z18UART_Transmit_FakePh+0x8c>)
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f008 f9a8 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8004f2e:	f107 0318 	add.w	r3, r7, #24
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	4619      	mov	r1, r3
 8004f36:	4620      	mov	r0, r4
 8004f38:	47a8      	blx	r5
 8004f3a:	f107 0318 	add.w	r3, r7, #24
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f008 fd55 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8004f44:	f107 0310 	add.w	r3, r7, #16
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f008 fd50 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8004f4e:	f107 0308 	add.w	r3, r7, #8
 8004f52:	4618      	mov	r0, r3
 8004f54:	f008 fd4b 	bl	800d9ee <_ZN12SimpleStringD1Ev>

}
 8004f58:	bf00      	nop
 8004f5a:	3720      	adds	r7, #32
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bdb0      	pop	{r4, r5, r7, pc}
 8004f60:	08023f34 	.word	0x08023f34
 8004f64:	08023f38 	.word	0x08023f38
 8004f68:	08023f4c 	.word	0x08023f4c

08004f6c <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8004f6c:	b5b0      	push	{r4, r5, r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 8004f72:	463b      	mov	r3, r7
 8004f74:	4916      	ldr	r1, [pc, #88]	; (8004fd0 <_Z17UART_Receive_Fakev+0x64>)
 8004f76:	4618      	mov	r0, r3
 8004f78:	f008 f981 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8004f7c:	463b      	mov	r3, r7
 8004f7e:	2100      	movs	r1, #0
 8004f80:	4618      	mov	r0, r3
 8004f82:	f006 fa55 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004f86:	4604      	mov	r4, r0
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	3318      	adds	r3, #24
 8004f8c:	681d      	ldr	r5, [r3, #0]
 8004f8e:	f107 0308 	add.w	r3, r7, #8
 8004f92:	4910      	ldr	r1, [pc, #64]	; (8004fd4 <_Z17UART_Receive_Fakev+0x68>)
 8004f94:	4618      	mov	r0, r3
 8004f96:	f008 f972 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8004f9a:	f107 0308 	add.w	r3, r7, #8
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	47a8      	blx	r5
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	3264      	adds	r2, #100	; 0x64
 8004faa:	6812      	ldr	r2, [r2, #0]
 8004fac:	4618      	mov	r0, r3
 8004fae:	4790      	blx	r2
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	b2dc      	uxtb	r4, r3
 8004fb4:	f107 0308 	add.w	r3, r7, #8
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f008 fd18 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8004fbe:	463b      	mov	r3, r7
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f008 fd14 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8004fc6:	4623      	mov	r3, r4
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bdb0      	pop	{r4, r5, r7, pc}
 8004fd0:	08023f34 	.word	0x08023f34
 8004fd4:	08023f54 	.word	0x08023f54

08004fd8 <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 8004fdc:	4b0a      	ldr	r3, [pc, #40]	; (8005008 <_Z12getTick_Fakev+0x30>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe4:	d103      	bne.n	8004fee <_Z12getTick_Fakev+0x16>
		time = 0;
 8004fe6:	4b08      	ldr	r3, [pc, #32]	; (8005008 <_Z12getTick_Fakev+0x30>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	e004      	b.n	8004ff8 <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 8004fee:	4b06      	ldr	r3, [pc, #24]	; (8005008 <_Z12getTick_Fakev+0x30>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	4a04      	ldr	r2, [pc, #16]	; (8005008 <_Z12getTick_Fakev+0x30>)
 8004ff6:	6013      	str	r3, [r2, #0]
	return time;
 8004ff8:	4b03      	ldr	r3, [pc, #12]	; (8005008 <_Z12getTick_Fakev+0x30>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	200004a0 	.word	0x200004a0

0800500c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
/* Test functions of the ring buffer-----------------------------------------------------------------------*/

TEST_GROUP(EspDriver_Test_Group)
{

	void setup()
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8005014:	2364      	movs	r3, #100	; 0x64
 8005016:	4a04      	ldr	r2, [pc, #16]	; (8005028 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8005018:	4904      	ldr	r1, [pc, #16]	; (800502c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 800501a:	4805      	ldr	r0, [pc, #20]	; (8005030 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 800501c:	f7fe fe2a 	bl	8003c74 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);					// buffer size

	}
 8005020:	bf00      	nop
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	08004fd9 	.word	0x08004fd9
 800502c:	08004f6d 	.word	0x08004f6d
 8005030:	08004edd 	.word	0x08004edd

08005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
	{

		mock().checkExpectations();
 800503c:	f107 0308 	add.w	r3, r7, #8
 8005040:	4917      	ldr	r1, [pc, #92]	; (80050a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8005042:	4618      	mov	r0, r3
 8005044:	f008 f91b 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005048:	f107 0308 	add.w	r3, r7, #8
 800504c:	2100      	movs	r1, #0
 800504e:	4618      	mov	r0, r3
 8005050:	f006 f9ee 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005054:	4603      	mov	r3, r0
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	3294      	adds	r2, #148	; 0x94
 800505a:	6812      	ldr	r2, [r2, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	4790      	blx	r2
 8005060:	f107 0308 	add.w	r3, r7, #8
 8005064:	4618      	mov	r0, r3
 8005066:	f008 fcc2 	bl	800d9ee <_ZN12SimpleStringD1Ev>
		mock().clear();
 800506a:	f107 0310 	add.w	r3, r7, #16
 800506e:	490c      	ldr	r1, [pc, #48]	; (80050a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8005070:	4618      	mov	r0, r3
 8005072:	f008 f904 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005076:	f107 0310 	add.w	r3, r7, #16
 800507a:	2100      	movs	r1, #0
 800507c:	4618      	mov	r0, r3
 800507e:	f006 f9d7 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005082:	4603      	mov	r3, r0
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	329c      	adds	r2, #156	; 0x9c
 8005088:	6812      	ldr	r2, [r2, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	4790      	blx	r2
 800508e:	f107 0310 	add.w	r3, r7, #16
 8005092:	4618      	mov	r0, r3
 8005094:	f008 fcab 	bl	800d9ee <_ZN12SimpleStringD1Ev>
	}
 8005098:	bf00      	nop
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	08023f34 	.word	0x08023f34

080050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f00f fcf2 	bl	8014a98 <_ZN5UtestC1Ev>
 80050b4:	4a03      	ldr	r2, [pc, #12]	; (80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	08028050 	.word	0x08028050

080050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	4a05      	ldr	r2, [pc, #20]	; (80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4618      	mov	r0, r3
 80050da:	f00f fced 	bl	8014ab8 <_ZN5UtestD1Ev>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	08028050 	.word	0x08028050

080050ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7ff ffe7 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80050fa:	2104      	movs	r1, #4
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f005 fd0f 	bl	800ab20 <_ZdlPvj>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff ffc4 	bl	80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800511c:	4a03      	ldr	r2, [pc, #12]	; (800512c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	08028030 	.word	0x08028030

08005130 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8005130:	b590      	push	{r4, r7, lr}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	22c0      	movs	r2, #192	; 0xc0
 800513a:	4906      	ldr	r1, [pc, #24]	; (8005154 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 800513c:	2004      	movs	r0, #4
 800513e:	f005 fcdb 	bl	800aaf8 <_ZnwjPKci>
 8005142:	4604      	mov	r4, r0
 8005144:	4620      	mov	r0, r4
 8005146:	f7ff ffe1 	bl	800510c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 800514a:	4623      	mov	r3, r4
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	bd90      	pop	{r4, r7, pc}
 8005154:	08023c04 	.word	0x08023c04

08005158 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4618      	mov	r0, r3
 8005164:	f00e f8b6 	bl	80132d4 <_ZN10UtestShellC1Ev>
 8005168:	4a03      	ldr	r2, [pc, #12]	; (8005178 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4618      	mov	r0, r3
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	08027f84 	.word	0x08027f84

0800517c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 800517c:	b5b0      	push	{r4, r5, r7, lr}
 800517e:	b088      	sub	sp, #32
 8005180:	af04      	add	r7, sp, #16
 8005182:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; 			// or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 8005184:	4b10      	ldr	r3, [pc, #64]	; (80051c8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8005186:	4a11      	ldr	r2, [pc, #68]	; (80051cc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 8005188:	601a      	str	r2, [r3, #0]
	int32_t result = ESP_Init(transmit,
 800518a:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	2364      	movs	r3, #100	; 0x64
 8005190:	4a0f      	ldr	r2, [pc, #60]	; (80051d0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 8005192:	4910      	ldr	r1, [pc, #64]	; (80051d4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 8005194:	f7fe fd6e 	bl	8003c74 <ESP_Init>
 8005198:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 800519a:	f00f fc53 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 800519e:	4604      	mov	r4, r0
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	3338      	adds	r3, #56	; 0x38
 80051a4:	681d      	ldr	r5, [r3, #0]
 80051a6:	f00f fc5d 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80051aa:	4603      	mov	r3, r0
 80051ac:	9302      	str	r3, [sp, #8]
 80051ae:	23ce      	movs	r3, #206	; 0xce
 80051b0:	9301      	str	r3, [sp, #4]
 80051b2:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	4b09      	ldr	r3, [pc, #36]	; (80051dc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	2101      	movs	r1, #1
 80051bc:	4620      	mov	r0, r4
 80051be:	47a8      	blx	r5

}
 80051c0:	bf00      	nop
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bdb0      	pop	{r4, r5, r7, pc}
 80051c8:	200004a4 	.word	0x200004a4
 80051cc:	08004edd 	.word	0x08004edd
 80051d0:	08004fd9 	.word	0x08004fd9
 80051d4:	08004f6d 	.word	0x08004f6d
 80051d8:	08023c04 	.word	0x08023c04
 80051dc:	08023f68 	.word	0x08023f68

080051e0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff ff5a 	bl	80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80051f0:	4a03      	ldr	r2, [pc, #12]	; (8005200 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4618      	mov	r0, r3
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	08027f64 	.word	0x08027f64

08005204 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 8005204:	b590      	push	{r4, r7, lr}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	22d2      	movs	r2, #210	; 0xd2
 800520e:	4906      	ldr	r1, [pc, #24]	; (8005228 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 8005210:	2004      	movs	r0, #4
 8005212:	f005 fc71 	bl	800aaf8 <_ZnwjPKci>
 8005216:	4604      	mov	r4, r0
 8005218:	4620      	mov	r0, r4
 800521a:	f7ff ffe1 	bl	80051e0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 800521e:	4623      	mov	r3, r4
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	bd90      	pop	{r4, r7, pc}
 8005228:	08023c04 	.word	0x08023c04

0800522c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4618      	mov	r0, r3
 8005238:	f00e f84c 	bl	80132d4 <_ZN10UtestShellC1Ev>
 800523c:	4a03      	ldr	r2, [pc, #12]	; (800524c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4618      	mov	r0, r3
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	08027eb8 	.word	0x08027eb8

08005250 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 8005250:	b5b0      	push	{r4, r5, r7, lr}
 8005252:	b08e      	sub	sp, #56	; 0x38
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Test");  // UART_Transmit_Fake function waits "Test" string.
 8005258:	f107 0308 	add.w	r3, r7, #8
 800525c:	493d      	ldr	r1, [pc, #244]	; (8005354 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 800525e:	4618      	mov	r0, r3
 8005260:	f008 f80d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005264:	f107 0308 	add.w	r3, r7, #8
 8005268:	2100      	movs	r1, #0
 800526a:	4618      	mov	r0, r3
 800526c:	f006 f8e0 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005270:	4604      	mov	r4, r0
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	330c      	adds	r3, #12
 8005276:	681d      	ldr	r5, [r3, #0]
 8005278:	f107 0310 	add.w	r3, r7, #16
 800527c:	4936      	ldr	r1, [pc, #216]	; (8005358 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 800527e:	4618      	mov	r0, r3
 8005280:	f007 fffd 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005284:	f107 0310 	add.w	r3, r7, #16
 8005288:	4619      	mov	r1, r3
 800528a:	4620      	mov	r0, r4
 800528c:	47a8      	blx	r5
 800528e:	4604      	mov	r4, r0
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	334c      	adds	r3, #76	; 0x4c
 8005294:	681d      	ldr	r5, [r3, #0]
 8005296:	f107 0318 	add.w	r3, r7, #24
 800529a:	4930      	ldr	r1, [pc, #192]	; (800535c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 800529c:	4618      	mov	r0, r3
 800529e:	f007 ffee 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80052a2:	f107 0318 	add.w	r3, r7, #24
 80052a6:	4a2e      	ldr	r2, [pc, #184]	; (8005360 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 80052a8:	4619      	mov	r1, r3
 80052aa:	4620      	mov	r0, r4
 80052ac:	47a8      	blx	r5
 80052ae:	f107 0318 	add.w	r3, r7, #24
 80052b2:	4618      	mov	r0, r3
 80052b4:	f008 fb9b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80052b8:	f107 0310 	add.w	r3, r7, #16
 80052bc:	4618      	mov	r0, r3
 80052be:	f008 fb96 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80052c2:	f107 0308 	add.w	r3, r7, #8
 80052c6:	4618      	mov	r0, r3
 80052c8:	f008 fb91 	bl	800d9ee <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT\r\n");
 80052cc:	f107 0320 	add.w	r3, r7, #32
 80052d0:	4920      	ldr	r1, [pc, #128]	; (8005354 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 80052d2:	4618      	mov	r0, r3
 80052d4:	f007 ffd3 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80052d8:	f107 0320 	add.w	r3, r7, #32
 80052dc:	2100      	movs	r1, #0
 80052de:	4618      	mov	r0, r3
 80052e0:	f006 f8a6 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80052e4:	4604      	mov	r4, r0
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	330c      	adds	r3, #12
 80052ea:	681d      	ldr	r5, [r3, #0]
 80052ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052f0:	4919      	ldr	r1, [pc, #100]	; (8005358 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 80052f2:	4618      	mov	r0, r3
 80052f4:	f007 ffc3 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80052f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052fc:	4619      	mov	r1, r3
 80052fe:	4620      	mov	r0, r4
 8005300:	47a8      	blx	r5
 8005302:	4604      	mov	r4, r0
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	334c      	adds	r3, #76	; 0x4c
 8005308:	681d      	ldr	r5, [r3, #0]
 800530a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800530e:	4913      	ldr	r1, [pc, #76]	; (800535c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 8005310:	4618      	mov	r0, r3
 8005312:	f007 ffb4 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005316:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800531a:	4a12      	ldr	r2, [pc, #72]	; (8005364 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 800531c:	4619      	mov	r1, r3
 800531e:	4620      	mov	r0, r4
 8005320:	47a8      	blx	r5
 8005322:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005326:	4618      	mov	r0, r3
 8005328:	f008 fb61 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800532c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005330:	4618      	mov	r0, r3
 8005332:	f008 fb5c 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8005336:	f107 0320 	add.w	r3, r7, #32
 800533a:	4618      	mov	r0, r3
 800533c:	f008 fb57 	bl	800d9ee <_ZN12SimpleStringD1Ev>

	Send_AT_Command((char*)"Test");
 8005340:	4807      	ldr	r0, [pc, #28]	; (8005360 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 8005342:	f7fe fcc9 	bl	8003cd8 <Send_AT_Command>
	Send_AT_Command((char*)"AT\r\n");
 8005346:	4807      	ldr	r0, [pc, #28]	; (8005364 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 8005348:	f7fe fcc6 	bl	8003cd8 <Send_AT_Command>

	// There is no assertion macro here because the function returns nothing.
	// Mocking library checks if the function has been called.
}
 800534c:	bf00      	nop
 800534e:	3738      	adds	r7, #56	; 0x38
 8005350:	46bd      	mov	sp, r7
 8005352:	bdb0      	pop	{r4, r5, r7, pc}
 8005354:	08023f34 	.word	0x08023f34
 8005358:	08023f38 	.word	0x08023f38
 800535c:	08023f4c 	.word	0x08023f4c
 8005360:	08023e3c 	.word	0x08023e3c
 8005364:	08023f88 	.word	0x08023f88

08005368 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff fe96 	bl	80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005378:	4a03      	ldr	r2, [pc, #12]	; (8005388 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	08027e98 	.word	0x08027e98

0800538c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 800538c:	b590      	push	{r4, r7, lr}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	22de      	movs	r2, #222	; 0xde
 8005396:	4906      	ldr	r1, [pc, #24]	; (80053b0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 8005398:	2004      	movs	r0, #4
 800539a:	f005 fbad 	bl	800aaf8 <_ZnwjPKci>
 800539e:	4604      	mov	r4, r0
 80053a0:	4620      	mov	r0, r4
 80053a2:	f7ff ffe1 	bl	8005368 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 80053a6:	4623      	mov	r3, r4
 80053a8:	4618      	mov	r0, r3
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd90      	pop	{r4, r7, pc}
 80053b0:	08023c04 	.word	0x08023c04

080053b4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4618      	mov	r0, r3
 80053c0:	f00d ff88 	bl	80132d4 <_ZN10UtestShellC1Ev>
 80053c4:	4a03      	ldr	r2, [pc, #12]	; (80053d4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	08027dec 	.word	0x08027dec

080053d8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 80053d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053da:	b08f      	sub	sp, #60	; 0x3c
 80053dc:	af04      	add	r7, sp, #16
 80053de:	6078      	str	r0, [r7, #4]

	const char response[] = "OK\r\n";
 80053e0:	4a31      	ldr	r2, [pc, #196]	; (80054a8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 80053e2:	f107 030c 	add.w	r3, r7, #12
 80053e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053ea:	6018      	str	r0, [r3, #0]
 80053ec:	3304      	adds	r3, #4
 80053ee:	7019      	strb	r1, [r3, #0]

	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 80053f0:	2300      	movs	r3, #0
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24
 80053f4:	f107 030c 	add.w	r3, r7, #12
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fa ff1f 	bl	800023c <strlen>
 80053fe:	4603      	mov	r3, r0
 8005400:	461a      	mov	r2, r3
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	4293      	cmp	r3, r2
 8005406:	da35      	bge.n	8005474 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005408:	f107 0314 	add.w	r3, r7, #20
 800540c:	4927      	ldr	r1, [pc, #156]	; (80054ac <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd4>)
 800540e:	4618      	mov	r0, r3
 8005410:	f007 ff35 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005414:	f107 0314 	add.w	r3, r7, #20
 8005418:	2100      	movs	r1, #0
 800541a:	4618      	mov	r0, r3
 800541c:	f006 f808 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005420:	4604      	mov	r4, r0
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	330c      	adds	r3, #12
 8005426:	681d      	ldr	r5, [r3, #0]
 8005428:	f107 031c 	add.w	r3, r7, #28
 800542c:	4920      	ldr	r1, [pc, #128]	; (80054b0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd8>)
 800542e:	4618      	mov	r0, r3
 8005430:	f007 ff25 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005434:	f107 031c 	add.w	r3, r7, #28
 8005438:	4619      	mov	r1, r3
 800543a:	4620      	mov	r0, r4
 800543c:	47a8      	blx	r5
 800543e:	4603      	mov	r3, r0
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	3264      	adds	r2, #100	; 0x64
 8005444:	6812      	ldr	r2, [r2, #0]
 8005446:	f107 000c 	add.w	r0, r7, #12
 800544a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800544c:	4401      	add	r1, r0
 800544e:	7809      	ldrb	r1, [r1, #0]
 8005450:	4618      	mov	r0, r3
 8005452:	4790      	blx	r2
 8005454:	f107 031c 	add.w	r3, r7, #28
 8005458:	4618      	mov	r0, r3
 800545a:	f008 fac8 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800545e:	f107 0314 	add.w	r3, r7, #20
 8005462:	4618      	mov	r0, r3
 8005464:	f008 fac3 	bl	800d9ee <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8005468:	f7fe fc44 	bl	8003cf4 <ESP_UART_ReceiveHandler>
	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	3301      	adds	r3, #1
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
 8005472:	e7bf      	b.n	80053f4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1c>
	}

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the ring buffer.
 8005474:	f00f fae6 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8005478:	4604      	mov	r4, r0
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	3324      	adds	r3, #36	; 0x24
 800547e:	681d      	ldr	r5, [r3, #0]
 8005480:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xdc>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68de      	ldr	r6, [r3, #12]
 8005486:	f00f faed 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800548a:	4603      	mov	r3, r0
 800548c:	9302      	str	r3, [sp, #8]
 800548e:	23e9      	movs	r3, #233	; 0xe9
 8005490:	9301      	str	r3, [sp, #4]
 8005492:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xe0>)
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	2300      	movs	r3, #0
 8005498:	4632      	mov	r2, r6
 800549a:	4903      	ldr	r1, [pc, #12]	; (80054a8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 800549c:	4620      	mov	r0, r4
 800549e:	47a8      	blx	r5

}
 80054a0:	bf00      	nop
 80054a2:	372c      	adds	r7, #44	; 0x2c
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054a8:	08023f90 	.word	0x08023f90
 80054ac:	08023f34 	.word	0x08023f34
 80054b0:	08023f54 	.word	0x08023f54
 80054b4:	2000037c 	.word	0x2000037c
 80054b8:	08023c04 	.word	0x08023c04

080054bc <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff fdec 	bl	80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80054cc:	4a03      	ldr	r2, [pc, #12]	; (80054dc <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4618      	mov	r0, r3
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	08027dcc 	.word	0x08027dcc

080054e0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 80054e0:	b590      	push	{r4, r7, lr}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	22ed      	movs	r2, #237	; 0xed
 80054ea:	4906      	ldr	r1, [pc, #24]	; (8005504 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 80054ec:	2004      	movs	r0, #4
 80054ee:	f005 fb03 	bl	800aaf8 <_ZnwjPKci>
 80054f2:	4604      	mov	r4, r0
 80054f4:	4620      	mov	r0, r4
 80054f6:	f7ff ffe1 	bl	80054bc <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 80054fa:	4623      	mov	r3, r4
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	bd90      	pop	{r4, r7, pc}
 8005504:	08023c04 	.word	0x08023c04

08005508 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4618      	mov	r0, r3
 8005514:	f00d fede 	bl	80132d4 <_ZN10UtestShellC1Ev>
 8005518:	4a03      	ldr	r2, [pc, #12]	; (8005528 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4618      	mov	r0, r3
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	08027d20 	.word	0x08027d20

0800552c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 800552c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800552e:	b08f      	sub	sp, #60	; 0x3c
 8005530:	af04      	add	r7, sp, #16
 8005532:	6078      	str	r0, [r7, #4]
	const char response[] = "OK\r\n";
 8005534:	4a32      	ldr	r2, [pc, #200]	; (8005600 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd4>)
 8005536:	f107 0308 	add.w	r3, r7, #8
 800553a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800553e:	6018      	str	r0, [r3, #0]
 8005540:	3304      	adds	r3, #4
 8005542:	7019      	strb	r1, [r3, #0]

	for(int i=0;i<(int)strlen(response);i++)
 8005544:	2300      	movs	r3, #0
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
 8005548:	f107 0308 	add.w	r3, r7, #8
 800554c:	4618      	mov	r0, r3
 800554e:	f7fa fe75 	bl	800023c <strlen>
 8005552:	4603      	mov	r3, r0
 8005554:	461a      	mov	r2, r3
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	4293      	cmp	r3, r2
 800555a:	da35      	bge.n	80055c8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 800555c:	f107 0310 	add.w	r3, r7, #16
 8005560:	4928      	ldr	r1, [pc, #160]	; (8005604 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd8>)
 8005562:	4618      	mov	r0, r3
 8005564:	f007 fe8b 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005568:	f107 0310 	add.w	r3, r7, #16
 800556c:	2100      	movs	r1, #0
 800556e:	4618      	mov	r0, r3
 8005570:	f005 ff5e 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005574:	4604      	mov	r4, r0
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	330c      	adds	r3, #12
 800557a:	681d      	ldr	r5, [r3, #0]
 800557c:	f107 0318 	add.w	r3, r7, #24
 8005580:	4921      	ldr	r1, [pc, #132]	; (8005608 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xdc>)
 8005582:	4618      	mov	r0, r3
 8005584:	f007 fe7b 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005588:	f107 0318 	add.w	r3, r7, #24
 800558c:	4619      	mov	r1, r3
 800558e:	4620      	mov	r0, r4
 8005590:	47a8      	blx	r5
 8005592:	4603      	mov	r3, r0
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	3264      	adds	r2, #100	; 0x64
 8005598:	6812      	ldr	r2, [r2, #0]
 800559a:	f107 0008 	add.w	r0, r7, #8
 800559e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055a0:	4401      	add	r1, r0
 80055a2:	7809      	ldrb	r1, [r1, #0]
 80055a4:	4618      	mov	r0, r3
 80055a6:	4790      	blx	r2
 80055a8:	f107 0318 	add.w	r3, r7, #24
 80055ac:	4618      	mov	r0, r3
 80055ae:	f008 fa1e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80055b2:	f107 0310 	add.w	r3, r7, #16
 80055b6:	4618      	mov	r0, r3
 80055b8:	f008 fa19 	bl	800d9ee <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 80055bc:	f7fe fb9a 	bl	8003cf4 <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	3301      	adds	r3, #1
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
 80055c6:	e7bf      	b.n	8005548 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x1c>
	}

	uint32_t result = Read_Response((char*)"OK");
 80055c8:	4810      	ldr	r0, [pc, #64]	; (800560c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe0>)
 80055ca:	f7fe fba5 	bl	8003d18 <Read_Response>
 80055ce:	6238      	str	r0, [r7, #32]

	LONGS_EQUAL(1,result);
 80055d0:	f00f fa38 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 80055d4:	4604      	mov	r4, r0
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	3338      	adds	r3, #56	; 0x38
 80055da:	681d      	ldr	r5, [r3, #0]
 80055dc:	6a3e      	ldr	r6, [r7, #32]
 80055de:	f00f fa41 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80055e2:	4603      	mov	r3, r0
 80055e4:	9302      	str	r3, [sp, #8]
 80055e6:	23f9      	movs	r3, #249	; 0xf9
 80055e8:	9301      	str	r3, [sp, #4]
 80055ea:	4b09      	ldr	r3, [pc, #36]	; (8005610 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe4>)
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	4b09      	ldr	r3, [pc, #36]	; (8005614 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe8>)
 80055f0:	4632      	mov	r2, r6
 80055f2:	2101      	movs	r1, #1
 80055f4:	4620      	mov	r0, r4
 80055f6:	47a8      	blx	r5

}
 80055f8:	bf00      	nop
 80055fa:	372c      	adds	r7, #44	; 0x2c
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005600:	08023f90 	.word	0x08023f90
 8005604:	08023f34 	.word	0x08023f34
 8005608:	08023f54 	.word	0x08023f54
 800560c:	08023b90 	.word	0x08023b90
 8005610:	08023c04 	.word	0x08023c04
 8005614:	08023f68 	.word	0x08023f68

08005618 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff fd3e 	bl	80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005628:	4a03      	ldr	r2, [pc, #12]	; (8005638 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4618      	mov	r0, r3
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	08027d00 	.word	0x08027d00

0800563c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 800563c:	b590      	push	{r4, r7, lr}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	22fe      	movs	r2, #254	; 0xfe
 8005646:	4906      	ldr	r1, [pc, #24]	; (8005660 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x24>)
 8005648:	2004      	movs	r0, #4
 800564a:	f005 fa55 	bl	800aaf8 <_ZnwjPKci>
 800564e:	4604      	mov	r4, r0
 8005650:	4620      	mov	r0, r4
 8005652:	f7ff ffe1 	bl	8005618 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 8005656:	4623      	mov	r3, r4
 8005658:	4618      	mov	r0, r3
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	bd90      	pop	{r4, r7, pc}
 8005660:	08023c04 	.word	0x08023c04

08005664 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4618      	mov	r0, r3
 8005670:	f00d fe30 	bl	80132d4 <_ZN10UtestShellC1Ev>
 8005674:	4a03      	ldr	r2, [pc, #12]	; (8005684 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4618      	mov	r0, r3
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	08027c54 	.word	0x08027c54

08005688 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 8005688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800568a:	b089      	sub	sp, #36	; 0x24
 800568c:	af04      	add	r7, sp, #16
 800568e:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 8005690:	2304      	movs	r3, #4
 8005692:	73fb      	strb	r3, [r7, #15]

	while(1)	// wait the message until timeout occurs.
	{
		response_state = Wait_Response((char*)"OK", 1000);
 8005694:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005698:	4811      	ldr	r0, [pc, #68]	; (80056e0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 800569a:	f7fe fb4f 	bl	8003d3c <Wait_Response>
 800569e:	4603      	mov	r3, r0
 80056a0:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d100      	bne.n	80056aa <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 80056a8:	e7f4      	b.n	8005694 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 80056aa:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 80056ac:	f00f f9ca 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 80056b0:	4604      	mov	r4, r0
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	3338      	adds	r3, #56	; 0x38
 80056b6:	681d      	ldr	r5, [r3, #0]
 80056b8:	7bfe      	ldrb	r6, [r7, #15]
 80056ba:	f00f f9d3 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80056be:	4603      	mov	r3, r0
 80056c0:	9302      	str	r3, [sp, #8]
 80056c2:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	4b06      	ldr	r3, [pc, #24]	; (80056e4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 80056ce:	4632      	mov	r2, r6
 80056d0:	2101      	movs	r1, #1
 80056d2:	4620      	mov	r0, r4
 80056d4:	47a8      	blx	r5

}
 80056d6:	bf00      	nop
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056de:	bf00      	nop
 80056e0:	08023b90 	.word	0x08023b90
 80056e4:	08023c04 	.word	0x08023c04
 80056e8:	08023f98 	.word	0x08023f98

080056ec <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff fcd4 	bl	80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80056fc:	4a03      	ldr	r2, [pc, #12]	; (800570c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	08027c34 	.word	0x08027c34

08005710 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 8005710:	b590      	push	{r4, r7, lr}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800571c:	4906      	ldr	r1, [pc, #24]	; (8005738 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 800571e:	2004      	movs	r0, #4
 8005720:	f005 f9ea 	bl	800aaf8 <_ZnwjPKci>
 8005724:	4604      	mov	r4, r0
 8005726:	4620      	mov	r0, r4
 8005728:	f7ff ffe0 	bl	80056ec <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 800572c:	4623      	mov	r3, r4
 800572e:	4618      	mov	r0, r3
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	bd90      	pop	{r4, r7, pc}
 8005736:	bf00      	nop
 8005738:	08023c04 	.word	0x08023c04

0800573c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4618      	mov	r0, r3
 8005748:	f00d fdc4 	bl	80132d4 <_ZN10UtestShellC1Ev>
 800574c:	4a03      	ldr	r2, [pc, #12]	; (800575c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4618      	mov	r0, r3
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	08027b88 	.word	0x08027b88

08005760 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 8005760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005762:	b08f      	sub	sp, #60	; 0x3c
 8005764:	af04      	add	r7, sp, #16
 8005766:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8005768:	2304      	movs	r3, #4
 800576a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	const char response[] = "OK\r\n";
 800576e:	4a38      	ldr	r2, [pc, #224]	; (8005850 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf0>)
 8005770:	f107 0308 	add.w	r3, r7, #8
 8005774:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005778:	6018      	str	r0, [r3, #0]
 800577a:	3304      	adds	r3, #4
 800577c:	7019      	strb	r1, [r3, #0]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 800577e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005782:	4834      	ldr	r0, [pc, #208]	; (8005854 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf4>)
 8005784:	f7fe fada 	bl	8003d3c <Wait_Response>
 8005788:	4603      	mov	r3, r0
 800578a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if(response_state != IDLE)
 800578e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005792:	2b04      	cmp	r3, #4
 8005794:	d141      	bne.n	800581a <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xba>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 8005796:	2300      	movs	r3, #0
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
 800579a:	f107 0308 	add.w	r3, r7, #8
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fa fd4c 	bl	800023c <strlen>
 80057a4:	4603      	mov	r3, r0
 80057a6:	461a      	mov	r2, r3
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	4293      	cmp	r3, r2
 80057ac:	dae7      	bge.n	800577e <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x1e>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80057ae:	f107 0310 	add.w	r3, r7, #16
 80057b2:	4929      	ldr	r1, [pc, #164]	; (8005858 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf8>)
 80057b4:	4618      	mov	r0, r3
 80057b6:	f007 fd62 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80057ba:	f107 0310 	add.w	r3, r7, #16
 80057be:	2100      	movs	r1, #0
 80057c0:	4618      	mov	r0, r3
 80057c2:	f005 fe35 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80057c6:	4604      	mov	r4, r0
 80057c8:	6823      	ldr	r3, [r4, #0]
 80057ca:	330c      	adds	r3, #12
 80057cc:	681d      	ldr	r5, [r3, #0]
 80057ce:	f107 0318 	add.w	r3, r7, #24
 80057d2:	4922      	ldr	r1, [pc, #136]	; (800585c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 80057d4:	4618      	mov	r0, r3
 80057d6:	f007 fd52 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80057da:	f107 0318 	add.w	r3, r7, #24
 80057de:	4619      	mov	r1, r3
 80057e0:	4620      	mov	r0, r4
 80057e2:	47a8      	blx	r5
 80057e4:	4603      	mov	r3, r0
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	3264      	adds	r2, #100	; 0x64
 80057ea:	6812      	ldr	r2, [r2, #0]
 80057ec:	f107 0008 	add.w	r0, r7, #8
 80057f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057f2:	4401      	add	r1, r0
 80057f4:	7809      	ldrb	r1, [r1, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	4790      	blx	r2
 80057fa:	f107 0318 	add.w	r3, r7, #24
 80057fe:	4618      	mov	r0, r3
 8005800:	f008 f8f5 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8005804:	f107 0310 	add.w	r3, r7, #16
 8005808:	4618      	mov	r0, r3
 800580a:	f008 f8f0 	bl	800d9ee <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 800580e:	f7fe fa71 	bl	8003cf4 <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	3301      	adds	r3, #1
 8005816:	627b      	str	r3, [r7, #36]	; 0x24
 8005818:	e7bf      	b.n	800579a <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x3a>
			break;
 800581a:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 800581c:	f00f f912 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8005820:	4604      	mov	r4, r0
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	3338      	adds	r3, #56	; 0x38
 8005826:	681d      	ldr	r5, [r3, #0]
 8005828:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
 800582c:	f00f f91a 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005830:	4603      	mov	r3, r0
 8005832:	9302      	str	r3, [sp, #8]
 8005834:	f240 1321 	movw	r3, #289	; 0x121
 8005838:	9301      	str	r3, [sp, #4]
 800583a:	4b09      	ldr	r3, [pc, #36]	; (8005860 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	4b09      	ldr	r3, [pc, #36]	; (8005864 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 8005840:	4632      	mov	r2, r6
 8005842:	2100      	movs	r1, #0
 8005844:	4620      	mov	r0, r4
 8005846:	47a8      	blx	r5
}
 8005848:	bf00      	nop
 800584a:	372c      	adds	r7, #44	; 0x2c
 800584c:	46bd      	mov	sp, r7
 800584e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005850:	08023f90 	.word	0x08023f90
 8005854:	08023b90 	.word	0x08023b90
 8005858:	08023f34 	.word	0x08023f34
 800585c:	08023f54 	.word	0x08023f54
 8005860:	08023c04 	.word	0x08023c04
 8005864:	08023fcc 	.word	0x08023fcc

08005868 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff fc16 	bl	80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005878:	4a03      	ldr	r2, [pc, #12]	; (8005888 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4618      	mov	r0, r3
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	08027b68 	.word	0x08027b68

0800588c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 800588c:	b590      	push	{r4, r7, lr}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	f44f 7292 	mov.w	r2, #292	; 0x124
 8005898:	4906      	ldr	r1, [pc, #24]	; (80058b4 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 800589a:	2004      	movs	r0, #4
 800589c:	f005 f92c 	bl	800aaf8 <_ZnwjPKci>
 80058a0:	4604      	mov	r4, r0
 80058a2:	4620      	mov	r0, r4
 80058a4:	f7ff ffe0 	bl	8005868 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 80058a8:	4623      	mov	r3, r4
 80058aa:	4618      	mov	r0, r3
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd90      	pop	{r4, r7, pc}
 80058b2:	bf00      	nop
 80058b4:	08023c04 	.word	0x08023c04

080058b8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f00d fd06 	bl	80132d4 <_ZN10UtestShellC1Ev>
 80058c8:	4a03      	ldr	r2, [pc, #12]	; (80058d8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	08027abc 	.word	0x08027abc

080058dc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 80058dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058de:	b08f      	sub	sp, #60	; 0x3c
 80058e0:	af04      	add	r7, sp, #16
 80058e2:	6078      	str	r0, [r7, #4]
	Status response = TIMEOUT_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data",AT_CWMODE_STATION);
 80058ea:	f107 030c 	add.w	r3, r7, #12
 80058ee:	492f      	ldr	r1, [pc, #188]	; (80059ac <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 80058f0:	4618      	mov	r0, r3
 80058f2:	f007 fcc4 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80058f6:	f107 030c 	add.w	r3, r7, #12
 80058fa:	2100      	movs	r1, #0
 80058fc:	4618      	mov	r0, r3
 80058fe:	f005 fd97 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005902:	4604      	mov	r4, r0
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	330c      	adds	r3, #12
 8005908:	681d      	ldr	r5, [r3, #0]
 800590a:	f107 0314 	add.w	r3, r7, #20
 800590e:	4928      	ldr	r1, [pc, #160]	; (80059b0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 8005910:	4618      	mov	r0, r3
 8005912:	f007 fcb4 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005916:	f107 0314 	add.w	r3, r7, #20
 800591a:	4619      	mov	r1, r3
 800591c:	4620      	mov	r0, r4
 800591e:	47a8      	blx	r5
 8005920:	4604      	mov	r4, r0
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	334c      	adds	r3, #76	; 0x4c
 8005926:	681d      	ldr	r5, [r3, #0]
 8005928:	f107 031c 	add.w	r3, r7, #28
 800592c:	4921      	ldr	r1, [pc, #132]	; (80059b4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 800592e:	4618      	mov	r0, r3
 8005930:	f007 fca5 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005934:	f107 031c 	add.w	r3, r7, #28
 8005938:	4a1f      	ldr	r2, [pc, #124]	; (80059b8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 800593a:	4619      	mov	r1, r3
 800593c:	4620      	mov	r0, r4
 800593e:	47a8      	blx	r5
 8005940:	f107 031c 	add.w	r3, r7, #28
 8005944:	4618      	mov	r0, r3
 8005946:	f008 f852 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800594a:	f107 0314 	add.w	r3, r7, #20
 800594e:	4618      	mov	r0, r3
 8005950:	f008 f84d 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8005954:	f107 030c 	add.w	r3, r7, #12
 8005958:	4618      	mov	r0, r3
 800595a:	f008 f848 	bl	800d9ee <_ZN12SimpleStringD1Ev>

	while(1)
	{

		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 800595e:	4917      	ldr	r1, [pc, #92]	; (80059bc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe0>)
 8005960:	4817      	ldr	r0, [pc, #92]	; (80059c0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe4>)
 8005962:	f7fe fa2d 	bl	8003dc0 <Connect_Wifi>
 8005966:	4603      	mov	r3, r0
 8005968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 800596c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005970:	2b04      	cmp	r3, #4
 8005972:	d100      	bne.n	8005976 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x9a>
		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005974:	e7f3      	b.n	800595e <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x82>
		{
			break;
 8005976:	bf00      	nop
		}

	}


	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005978:	f00f f864 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 800597c:	4604      	mov	r4, r0
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	3338      	adds	r3, #56	; 0x38
 8005982:	681d      	ldr	r5, [r3, #0]
 8005984:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8005988:	f00f f86c 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800598c:	4603      	mov	r3, r0
 800598e:	9302      	str	r3, [sp, #8]
 8005990:	f240 1337 	movw	r3, #311	; 0x137
 8005994:	9301      	str	r3, [sp, #4]
 8005996:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe8>)
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xec>)
 800599c:	4632      	mov	r2, r6
 800599e:	2101      	movs	r1, #1
 80059a0:	4620      	mov	r0, r4
 80059a2:	47a8      	blx	r5

}
 80059a4:	bf00      	nop
 80059a6:	372c      	adds	r7, #44	; 0x2c
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ac:	08023f34 	.word	0x08023f34
 80059b0:	08023f38 	.word	0x08023f38
 80059b4:	08023f4c 	.word	0x08023f4c
 80059b8:	08023b94 	.word	0x08023b94
 80059bc:	08023ff8 	.word	0x08023ff8
 80059c0:	08024000 	.word	0x08024000
 80059c4:	08023c04 	.word	0x08023c04
 80059c8:	08024008 	.word	0x08024008

080059cc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff fb64 	bl	80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80059dc:	4a03      	ldr	r2, [pc, #12]	; (80059ec <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	08027a9c 	.word	0x08027a9c

080059f0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 80059f0:	b590      	push	{r4, r7, lr}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	f240 123b 	movw	r2, #315	; 0x13b
 80059fc:	4906      	ldr	r1, [pc, #24]	; (8005a18 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 80059fe:	2004      	movs	r0, #4
 8005a00:	f005 f87a 	bl	800aaf8 <_ZnwjPKci>
 8005a04:	4604      	mov	r4, r0
 8005a06:	4620      	mov	r0, r4
 8005a08:	f7ff ffe0 	bl	80059cc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 8005a0c:	4623      	mov	r3, r4
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd90      	pop	{r4, r7, pc}
 8005a16:	bf00      	nop
 8005a18:	08023c04 	.word	0x08023c04

08005a1c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f00d fc54 	bl	80132d4 <_ZN10UtestShellC1Ev>
 8005a2c:	4a03      	ldr	r2, [pc, #12]	; (8005a3c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4618      	mov	r0, r3
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	080279f0 	.word	0x080279f0

08005a40 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 8005a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a42:	b0e1      	sub	sp, #388	; 0x184
 8005a44:	af04      	add	r7, sp, #16
 8005a46:	1d3b      	adds	r3, r7, #4
 8005a48:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 8005a4a:	4a75      	ldr	r2, [pc, #468]	; (8005c20 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e0>)
 8005a4c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005a50:	4611      	mov	r1, r2
 8005a52:	2296      	movs	r2, #150	; 0x96
 8005a54:	4618      	mov	r0, r3
 8005a56:	f01b f8e9 	bl	8020c2c <memcpy>
	{ "OK\r\n",									// station mode response (AT+CWMODE=1)
	  "OK\r\n",									//  disconnect command response (AT+CWQAP)
	  "ERROR\r\n"								// connect wifi command response (AT+CWJAP="SSID","password")
	};

	const char fake_tx_buffer[3][50] =
 8005a5a:	f107 0308 	add.w	r3, r7, #8
 8005a5e:	4a71      	ldr	r2, [pc, #452]	; (8005c24 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e4>)
 8005a60:	4618      	mov	r0, r3
 8005a62:	4611      	mov	r1, r2
 8005a64:	2396      	movs	r3, #150	; 0x96
 8005a66:	461a      	mov	r2, r3
 8005a68:	f01b f8e0 	bl	8020c2c <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005a72:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	dc46      	bgt.n	8005b08 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005a7a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a7e:	496a      	ldr	r1, [pc, #424]	; (8005c28 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e8>)
 8005a80:	4618      	mov	r0, r3
 8005a82:	f007 fbfc 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005a86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f005 fccf 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005a92:	4604      	mov	r4, r0
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	330c      	adds	r3, #12
 8005a98:	681d      	ldr	r5, [r3, #0]
 8005a9a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005a9e:	4963      	ldr	r1, [pc, #396]	; (8005c2c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1ec>)
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f007 fbec 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005aa6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4620      	mov	r0, r4
 8005aae:	47a8      	blx	r5
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	334c      	adds	r3, #76	; 0x4c
 8005ab6:	681d      	ldr	r5, [r3, #0]
 8005ab8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005abc:	495c      	ldr	r1, [pc, #368]	; (8005c30 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f0>)
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f007 fbdd 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005ac4:	f107 0208 	add.w	r2, r7, #8
 8005ac8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005acc:	2132      	movs	r1, #50	; 0x32
 8005ace:	fb01 f303 	mul.w	r3, r1, r3
 8005ad2:	441a      	add	r2, r3
 8005ad4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4620      	mov	r0, r4
 8005adc:	47a8      	blx	r5
 8005ade:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f007 ff83 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8005ae8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005aec:	4618      	mov	r0, r3
 8005aee:	f007 ff7e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8005af2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005af6:	4618      	mov	r0, r3
 8005af8:	f007 ff79 	bl	800d9ee <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005afc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005b00:	3301      	adds	r3, #1
 8005b02:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005b06:	e7b4      	b.n	8005a72 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x32>
	}
	Status response = IDLE;
 8005b08:	2304      	movs	r3, #4
 8005b0a:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	int i = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005b14:	4947      	ldr	r1, [pc, #284]	; (8005c34 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005b16:	4848      	ldr	r0, [pc, #288]	; (8005c38 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f8>)
 8005b18:	f7fe f952 	bl	8003dc0 <Connect_Wifi>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response != IDLE)
 8005b22:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d15d      	bne.n	8005be6 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1a6>
		{
			break;
		}

		if(i<3)
 8005b2a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	dcf0      	bgt.n	8005b14 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005b32:	2300      	movs	r3, #0
 8005b34:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005b38:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005b3c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005b40:	2132      	movs	r1, #50	; 0x32
 8005b42:	fb01 f303 	mul.w	r3, r1, r3
 8005b46:	4413      	add	r3, r2
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fa fb77 	bl	800023c <strlen>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	461a      	mov	r2, r3
 8005b52:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b56:	4293      	cmp	r3, r2
 8005b58:	da3f      	bge.n	8005bda <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x19a>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005b5a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005b5e:	4932      	ldr	r1, [pc, #200]	; (8005c28 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e8>)
 8005b60:	4618      	mov	r0, r3
 8005b62:	f007 fb8c 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005b66:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f005 fc5f 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005b72:	4604      	mov	r4, r0
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	330c      	adds	r3, #12
 8005b78:	681d      	ldr	r5, [r3, #0]
 8005b7a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005b7e:	492f      	ldr	r1, [pc, #188]	; (8005c3c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1fc>)
 8005b80:	4618      	mov	r0, r3
 8005b82:	f007 fb7c 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005b86:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	47a8      	blx	r5
 8005b90:	4603      	mov	r3, r0
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	3264      	adds	r2, #100	; 0x64
 8005b96:	6812      	ldr	r2, [r2, #0]
 8005b98:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005b9c:	2032      	movs	r0, #50	; 0x32
 8005b9e:	fb00 f101 	mul.w	r1, r0, r1
 8005ba2:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005ba6:	4408      	add	r0, r1
 8005ba8:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005bac:	4401      	add	r1, r0
 8005bae:	39d0      	subs	r1, #208	; 0xd0
 8005bb0:	7809      	ldrb	r1, [r1, #0]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	4790      	blx	r2
 8005bb6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f007 ff17 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8005bc0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f007 ff12 	bl	800d9ee <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005bca:	f7fe f893 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005bce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005bd8:	e7ae      	b.n	8005b38 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xf8>
			}
			i++;
 8005bda:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005bde:	3301      	adds	r3, #1
 8005be0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005be4:	e796      	b.n	8005b14 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
			break;
 8005be6:	bf00      	nop
	LONGS_EQUAL(STATUS_ERROR,response);
 8005be8:	f00e ff2c 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8005bec:	4604      	mov	r4, r0
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	3338      	adds	r3, #56	; 0x38
 8005bf2:	681d      	ldr	r5, [r3, #0]
 8005bf4:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005bf8:	f00e ff34 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	9302      	str	r3, [sp, #8]
 8005c00:	f240 1363 	movw	r3, #355	; 0x163
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	4b0e      	ldr	r3, [pc, #56]	; (8005c40 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x200>)
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	4b0e      	ldr	r3, [pc, #56]	; (8005c44 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x204>)
 8005c0c:	4632      	mov	r2, r6
 8005c0e:	2103      	movs	r1, #3
 8005c10:	4620      	mov	r0, r4
 8005c12:	47a8      	blx	r5

}
 8005c14:	bf00      	nop
 8005c16:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	08024060 	.word	0x08024060
 8005c24:	080240f8 	.word	0x080240f8
 8005c28:	08023f34 	.word	0x08023f34
 8005c2c:	08023f38 	.word	0x08023f38
 8005c30:	08023f4c 	.word	0x08023f4c
 8005c34:	08023ff8 	.word	0x08023ff8
 8005c38:	08024000 	.word	0x08024000
 8005c3c:	08023f54 	.word	0x08023f54
 8005c40:	08023c04 	.word	0x08023c04
 8005c44:	08024034 	.word	0x08024034

08005c48 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7ff fa26 	bl	80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005c58:	4a03      	ldr	r2, [pc, #12]	; (8005c68 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4618      	mov	r0, r3
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	080279d0 	.word	0x080279d0

08005c6c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 8005c6c:	b590      	push	{r4, r7, lr}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	f240 1267 	movw	r2, #359	; 0x167
 8005c78:	4906      	ldr	r1, [pc, #24]	; (8005c94 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 8005c7a:	2004      	movs	r0, #4
 8005c7c:	f004 ff3c 	bl	800aaf8 <_ZnwjPKci>
 8005c80:	4604      	mov	r4, r0
 8005c82:	4620      	mov	r0, r4
 8005c84:	f7ff ffe0 	bl	8005c48 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 8005c88:	4623      	mov	r3, r4
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd90      	pop	{r4, r7, pc}
 8005c92:	bf00      	nop
 8005c94:	08023c04 	.word	0x08023c04

08005c98 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f00d fb16 	bl	80132d4 <_ZN10UtestShellC1Ev>
 8005ca8:	4a03      	ldr	r2, [pc, #12]	; (8005cb8 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	08027924 	.word	0x08027924

08005cbc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 8005cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cbe:	b0e1      	sub	sp, #388	; 0x184
 8005cc0:	af04      	add	r7, sp, #16
 8005cc2:	1d3b      	adds	r3, r7, #4
 8005cc4:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 8005cc6:	4a73      	ldr	r2, [pc, #460]	; (8005e94 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1d8>)
 8005cc8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005ccc:	4611      	mov	r1, r2
 8005cce:	2296      	movs	r2, #150	; 0x96
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f01a ffab 	bl	8020c2c <memcpy>
	{ "OK\r\n",
	  "OK\r\n",
	  "OK\r\n"
	};

	const char fake_tx_buffer[3][50] =
 8005cd6:	f107 0308 	add.w	r3, r7, #8
 8005cda:	4a6f      	ldr	r2, [pc, #444]	; (8005e98 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1dc>)
 8005cdc:	4618      	mov	r0, r3
 8005cde:	4611      	mov	r1, r2
 8005ce0:	2396      	movs	r3, #150	; 0x96
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f01a ffa2 	bl	8020c2c <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005cee:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	dc46      	bgt.n	8005d84 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005cf6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005cfa:	4968      	ldr	r1, [pc, #416]	; (8005e9c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e0>)
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f007 fabe 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005d02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d06:	2100      	movs	r1, #0
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f005 fb91 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005d0e:	4604      	mov	r4, r0
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	330c      	adds	r3, #12
 8005d14:	681d      	ldr	r5, [r3, #0]
 8005d16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d1a:	4961      	ldr	r1, [pc, #388]	; (8005ea0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e4>)
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f007 faae 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005d22:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d26:	4619      	mov	r1, r3
 8005d28:	4620      	mov	r0, r4
 8005d2a:	47a8      	blx	r5
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	334c      	adds	r3, #76	; 0x4c
 8005d32:	681d      	ldr	r5, [r3, #0]
 8005d34:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d38:	495a      	ldr	r1, [pc, #360]	; (8005ea4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e8>)
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f007 fa9f 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005d40:	f107 0208 	add.w	r2, r7, #8
 8005d44:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005d48:	2132      	movs	r1, #50	; 0x32
 8005d4a:	fb01 f303 	mul.w	r3, r1, r3
 8005d4e:	441a      	add	r2, r3
 8005d50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d54:	4619      	mov	r1, r3
 8005d56:	4620      	mov	r0, r4
 8005d58:	47a8      	blx	r5
 8005d5a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f007 fe45 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8005d64:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f007 fe40 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8005d6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d72:	4618      	mov	r0, r3
 8005d74:	f007 fe3b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005d78:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005d82:	e7b4      	b.n	8005cee <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x32>
	}
	Status response;
	int i = 0;
 8005d84:	2300      	movs	r3, #0
 8005d86:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005d8a:	4947      	ldr	r1, [pc, #284]	; (8005ea8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1ec>)
 8005d8c:	4847      	ldr	r0, [pc, #284]	; (8005eac <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005d8e:	f7fe f817 	bl	8003dc0 <Connect_Wifi>
 8005d92:	4603      	mov	r3, r0
 8005d94:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response != IDLE)
 8005d98:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005d9c:	2b04      	cmp	r3, #4
 8005d9e:	d15d      	bne.n	8005e5c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1a0>
		{
			break;
		}

		if(i<3)
 8005da0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	dcf0      	bgt.n	8005d8a <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005da8:	2300      	movs	r3, #0
 8005daa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005dae:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005db2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005db6:	2132      	movs	r1, #50	; 0x32
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fa fa3c 	bl	800023c <strlen>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	da3f      	bge.n	8005e50 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x194>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005dd0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005dd4:	4931      	ldr	r1, [pc, #196]	; (8005e9c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e0>)
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f007 fa51 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005ddc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005de0:	2100      	movs	r1, #0
 8005de2:	4618      	mov	r0, r3
 8005de4:	f005 fb24 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005de8:	4604      	mov	r4, r0
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	330c      	adds	r3, #12
 8005dee:	681d      	ldr	r5, [r3, #0]
 8005df0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005df4:	492e      	ldr	r1, [pc, #184]	; (8005eb0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f4>)
 8005df6:	4618      	mov	r0, r3
 8005df8:	f007 fa41 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005dfc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005e00:	4619      	mov	r1, r3
 8005e02:	4620      	mov	r0, r4
 8005e04:	47a8      	blx	r5
 8005e06:	4603      	mov	r3, r0
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	3264      	adds	r2, #100	; 0x64
 8005e0c:	6812      	ldr	r2, [r2, #0]
 8005e0e:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005e12:	2032      	movs	r0, #50	; 0x32
 8005e14:	fb00 f101 	mul.w	r1, r0, r1
 8005e18:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005e1c:	4408      	add	r0, r1
 8005e1e:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005e22:	4401      	add	r1, r0
 8005e24:	39d0      	subs	r1, #208	; 0xd0
 8005e26:	7809      	ldrb	r1, [r1, #0]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	4790      	blx	r2
 8005e2c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005e30:	4618      	mov	r0, r3
 8005e32:	f007 fddc 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8005e36:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f007 fdd7 	bl	800d9ee <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005e40:	f7fd ff58 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005e44:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005e48:	3301      	adds	r3, #1
 8005e4a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005e4e:	e7ae      	b.n	8005dae <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xf2>
			}
			i++;
 8005e50:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005e54:	3301      	adds	r3, #1
 8005e56:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005e5a:	e796      	b.n	8005d8a <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
			break;
 8005e5c:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 8005e5e:	f00e fdf1 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8005e62:	4604      	mov	r4, r0
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	3338      	adds	r3, #56	; 0x38
 8005e68:	681d      	ldr	r5, [r3, #0]
 8005e6a:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005e6e:	f00e fdf9 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005e72:	4603      	mov	r3, r0
 8005e74:	9302      	str	r3, [sp, #8]
 8005e76:	f240 138f 	movw	r3, #399	; 0x18f
 8005e7a:	9301      	str	r3, [sp, #4]
 8005e7c:	4b0d      	ldr	r3, [pc, #52]	; (8005eb4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f8>)
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	4b0d      	ldr	r3, [pc, #52]	; (8005eb8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1fc>)
 8005e82:	4632      	mov	r2, r6
 8005e84:	2102      	movs	r1, #2
 8005e86:	4620      	mov	r0, r4
 8005e88:	47a8      	blx	r5

}
 8005e8a:	bf00      	nop
 8005e8c:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e94:	080241b8 	.word	0x080241b8
 8005e98:	080240f8 	.word	0x080240f8
 8005e9c:	08023f34 	.word	0x08023f34
 8005ea0:	08023f38 	.word	0x08023f38
 8005ea4:	08023f4c 	.word	0x08023f4c
 8005ea8:	08023ff8 	.word	0x08023ff8
 8005eac:	08024000 	.word	0x08024000
 8005eb0:	08023f54 	.word	0x08023f54
 8005eb4:	08023c04 	.word	0x08023c04
 8005eb8:	08024190 	.word	0x08024190

08005ebc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff f8ec 	bl	80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005ecc:	4a03      	ldr	r2, [pc, #12]	; (8005edc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	08027904 	.word	0x08027904

08005ee0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005ee0:	b590      	push	{r4, r7, lr}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	f240 1293 	movw	r2, #403	; 0x193
 8005eec:	4906      	ldr	r1, [pc, #24]	; (8005f08 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 8005eee:	2004      	movs	r0, #4
 8005ef0:	f004 fe02 	bl	800aaf8 <_ZnwjPKci>
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f7ff ffe0 	bl	8005ebc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>
 8005efc:	4623      	mov	r3, r4
 8005efe:	4618      	mov	r0, r3
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd90      	pop	{r4, r7, pc}
 8005f06:	bf00      	nop
 8005f08:	08023c04 	.word	0x08023c04

08005f0c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>:
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f00d f9dc 	bl	80132d4 <_ZN10UtestShellC1Ev>
 8005f1c:	4a03      	ldr	r2, [pc, #12]	; (8005f2c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4618      	mov	r0, r3
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	08027858 	.word	0x08027858

08005f30 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8005f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f32:	b08f      	sub	sp, #60	; 0x3c
 8005f34:	af04      	add	r7, sp, #16
 8005f36:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 8005f38:	f107 030c 	add.w	r3, r7, #12
 8005f3c:	492e      	ldr	r1, [pc, #184]	; (8005ff8 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xc8>)
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f007 f99d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005f44:	f107 030c 	add.w	r3, r7, #12
 8005f48:	2100      	movs	r1, #0
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f005 fa70 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005f50:	4604      	mov	r4, r0
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	330c      	adds	r3, #12
 8005f56:	681d      	ldr	r5, [r3, #0]
 8005f58:	f107 0314 	add.w	r3, r7, #20
 8005f5c:	4927      	ldr	r1, [pc, #156]	; (8005ffc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xcc>)
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f007 f98d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005f64:	f107 0314 	add.w	r3, r7, #20
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	47a8      	blx	r5
 8005f6e:	4604      	mov	r4, r0
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	334c      	adds	r3, #76	; 0x4c
 8005f74:	681d      	ldr	r5, [r3, #0]
 8005f76:	f107 031c 	add.w	r3, r7, #28
 8005f7a:	4921      	ldr	r1, [pc, #132]	; (8006000 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f007 f97e 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8005f82:	f107 031c 	add.w	r3, r7, #28
 8005f86:	4a1f      	ldr	r2, [pc, #124]	; (8006004 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	47a8      	blx	r5
 8005f8e:	f107 031c 	add.w	r3, r7, #28
 8005f92:	4618      	mov	r0, r3
 8005f94:	f007 fd2b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8005f98:	f107 0314 	add.w	r3, r7, #20
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f007 fd26 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8005fa2:	f107 030c 	add.w	r3, r7, #12
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f007 fd21 	bl	800d9ee <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 8005fac:	f7fd ff42 	bl	8003e34 <Disconnect_Wifi>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 8005fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d100      	bne.n	8005fc0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x90>
		response = Disconnect_Wifi();
 8005fbe:	e7f5      	b.n	8005fac <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x7c>
			break;
 8005fc0:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005fc2:	f00e fd3f 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	3338      	adds	r3, #56	; 0x38
 8005fcc:	681d      	ldr	r5, [r3, #0]
 8005fce:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8005fd2:	f00e fd47 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	9302      	str	r3, [sp, #8]
 8005fda:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
 8005fde:	9301      	str	r3, [sp, #4]
 8005fe0:	4b09      	ldr	r3, [pc, #36]	; (8006008 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	4b09      	ldr	r3, [pc, #36]	; (800600c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 8005fe6:	4632      	mov	r2, r6
 8005fe8:	2101      	movs	r1, #1
 8005fea:	4620      	mov	r0, r4
 8005fec:	47a8      	blx	r5
}
 8005fee:	bf00      	nop
 8005ff0:	372c      	adds	r7, #44	; 0x2c
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	08023f34 	.word	0x08023f34
 8005ffc:	08023f38 	.word	0x08023f38
 8006000:	08023f4c 	.word	0x08023f4c
 8006004:	08023ba4 	.word	0x08023ba4
 8006008:	08023c04 	.word	0x08023c04
 800600c:	08024008 	.word	0x08024008

08006010 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff f842 	bl	80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006020:	4a03      	ldr	r2, [pc, #12]	; (8006030 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev+0x20>)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4618      	mov	r0, r3
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	08027838 	.word	0x08027838

08006034 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv>:
 8006034:	b590      	push	{r4, r7, lr}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	f240 12a5 	movw	r2, #421	; 0x1a5
 8006040:	4906      	ldr	r1, [pc, #24]	; (800605c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv+0x28>)
 8006042:	2004      	movs	r0, #4
 8006044:	f004 fd58 	bl	800aaf8 <_ZnwjPKci>
 8006048:	4604      	mov	r4, r0
 800604a:	4620      	mov	r0, r4
 800604c:	f7ff ffe0 	bl	8006010 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>
 8006050:	4623      	mov	r3, r4
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	bd90      	pop	{r4, r7, pc}
 800605a:	bf00      	nop
 800605c:	08023c04 	.word	0x08023c04

08006060 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>:
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4618      	mov	r0, r3
 800606c:	f00d f932 	bl	80132d4 <_ZN10UtestShellC1Ev>
 8006070:	4a03      	ldr	r2, [pc, #12]	; (8006080 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev+0x20>)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4618      	mov	r0, r3
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	0802778c 	.word	0x0802778c

08006084 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv>:
{
 8006084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006086:	b093      	sub	sp, #76	; 0x4c
 8006088:	af04      	add	r7, sp, #16
 800608a:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 800608c:	f107 0308 	add.w	r3, r7, #8
 8006090:	494a      	ldr	r1, [pc, #296]	; (80061bc <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 8006092:	4618      	mov	r0, r3
 8006094:	f007 f8f3 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006098:	f107 0308 	add.w	r3, r7, #8
 800609c:	2100      	movs	r1, #0
 800609e:	4618      	mov	r0, r3
 80060a0:	f005 f9c6 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80060a4:	4604      	mov	r4, r0
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	330c      	adds	r3, #12
 80060aa:	681d      	ldr	r5, [r3, #0]
 80060ac:	f107 0310 	add.w	r3, r7, #16
 80060b0:	4943      	ldr	r1, [pc, #268]	; (80061c0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x13c>)
 80060b2:	4618      	mov	r0, r3
 80060b4:	f007 f8e3 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80060b8:	f107 0310 	add.w	r3, r7, #16
 80060bc:	4619      	mov	r1, r3
 80060be:	4620      	mov	r0, r4
 80060c0:	47a8      	blx	r5
 80060c2:	4604      	mov	r4, r0
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	334c      	adds	r3, #76	; 0x4c
 80060c8:	681d      	ldr	r5, [r3, #0]
 80060ca:	f107 0318 	add.w	r3, r7, #24
 80060ce:	493d      	ldr	r1, [pc, #244]	; (80061c4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x140>)
 80060d0:	4618      	mov	r0, r3
 80060d2:	f007 f8d4 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80060d6:	f107 0318 	add.w	r3, r7, #24
 80060da:	4a3b      	ldr	r2, [pc, #236]	; (80061c8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x144>)
 80060dc:	4619      	mov	r1, r3
 80060de:	4620      	mov	r0, r4
 80060e0:	47a8      	blx	r5
 80060e2:	f107 0318 	add.w	r3, r7, #24
 80060e6:	4618      	mov	r0, r3
 80060e8:	f007 fc81 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80060ec:	f107 0310 	add.w	r3, r7, #16
 80060f0:	4618      	mov	r0, r3
 80060f2:	f007 fc7c 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80060f6:	f107 0308 	add.w	r3, r7, #8
 80060fa:	4618      	mov	r0, r3
 80060fc:	f007 fc77 	bl	800d9ee <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 8006100:	f7fd fe98 	bl	8003e34 <Disconnect_Wifi>
 8006104:	4603      	mov	r3, r0
 8006106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 800610a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800610e:	2b04      	cmp	r3, #4
 8006110:	d139      	bne.n	8006186 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006112:	2300      	movs	r3, #0
 8006114:	637b      	str	r3, [r7, #52]	; 0x34
 8006116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006118:	2b01      	cmp	r3, #1
 800611a:	dcf1      	bgt.n	8006100 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 800611c:	f107 0320 	add.w	r3, r7, #32
 8006120:	4926      	ldr	r1, [pc, #152]	; (80061bc <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 8006122:	4618      	mov	r0, r3
 8006124:	f007 f8ab 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006128:	f107 0320 	add.w	r3, r7, #32
 800612c:	2100      	movs	r1, #0
 800612e:	4618      	mov	r0, r3
 8006130:	f005 f97e 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006134:	4604      	mov	r4, r0
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	330c      	adds	r3, #12
 800613a:	681d      	ldr	r5, [r3, #0]
 800613c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006140:	4922      	ldr	r1, [pc, #136]	; (80061cc <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x148>)
 8006142:	4618      	mov	r0, r3
 8006144:	f007 f89b 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006148:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800614c:	4619      	mov	r1, r3
 800614e:	4620      	mov	r0, r4
 8006150:	47a8      	blx	r5
 8006152:	4603      	mov	r3, r0
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	3264      	adds	r2, #100	; 0x64
 8006158:	6812      	ldr	r2, [r2, #0]
 800615a:	481d      	ldr	r0, [pc, #116]	; (80061d0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x14c>)
 800615c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800615e:	4401      	add	r1, r0
 8006160:	7809      	ldrb	r1, [r1, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	4790      	blx	r2
 8006166:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800616a:	4618      	mov	r0, r3
 800616c:	f007 fc3f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8006170:	f107 0320 	add.w	r3, r7, #32
 8006174:	4618      	mov	r0, r3
 8006176:	f007 fc3a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 800617a:	f7fd fdbb 	bl	8003cf4 <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 800617e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006180:	3301      	adds	r3, #1
 8006182:	637b      	str	r3, [r7, #52]	; 0x34
 8006184:	e7c7      	b.n	8006116 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x92>
			break;
 8006186:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 8006188:	f00e fc5c 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 800618c:	4604      	mov	r4, r0
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	3338      	adds	r3, #56	; 0x38
 8006192:	681d      	ldr	r5, [r3, #0]
 8006194:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 8006198:	f00e fc64 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800619c:	4603      	mov	r3, r0
 800619e:	9302      	str	r3, [sp, #8]
 80061a0:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	4b0b      	ldr	r3, [pc, #44]	; (80061d4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x150>)
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x154>)
 80061ac:	4632      	mov	r2, r6
 80061ae:	2102      	movs	r1, #2
 80061b0:	4620      	mov	r0, r4
 80061b2:	47a8      	blx	r5
}
 80061b4:	bf00      	nop
 80061b6:	373c      	adds	r7, #60	; 0x3c
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061bc:	08023f34 	.word	0x08023f34
 80061c0:	08023f38 	.word	0x08023f38
 80061c4:	08023f4c 	.word	0x08023f4c
 80061c8:	08023ba4 	.word	0x08023ba4
 80061cc:	08023f54 	.word	0x08023f54
 80061d0:	08023b90 	.word	0x08023b90
 80061d4:	08023c04 	.word	0x08023c04
 80061d8:	08024190 	.word	0x08024190

080061dc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Command_Process_Test)
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fe ff5c 	bl	80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80061ec:	4a03      	ldr	r2, [pc, #12]	; (80061fc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev+0x20>)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4618      	mov	r0, r3
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	0802776c 	.word	0x0802776c

08006200 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv>:
 8006200:	b590      	push	{r4, r7, lr}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	f240 12bd 	movw	r2, #445	; 0x1bd
 800620c:	4906      	ldr	r1, [pc, #24]	; (8006228 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv+0x28>)
 800620e:	2004      	movs	r0, #4
 8006210:	f004 fc72 	bl	800aaf8 <_ZnwjPKci>
 8006214:	4604      	mov	r4, r0
 8006216:	4620      	mov	r0, r4
 8006218:	f7ff ffe0 	bl	80061dc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>
 800621c:	4623      	mov	r3, r4
 800621e:	4618      	mov	r0, r3
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	bd90      	pop	{r4, r7, pc}
 8006226:	bf00      	nop
 8006228:	08023c04 	.word	0x08023c04

0800622c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>:
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4618      	mov	r0, r3
 8006238:	f00d f84c 	bl	80132d4 <_ZN10UtestShellC1Ev>
 800623c:	4a03      	ldr	r2, [pc, #12]	; (800624c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev+0x20>)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	080276c0 	.word	0x080276c0

08006250 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv>:
{
 8006250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006252:	b09b      	sub	sp, #108	; 0x6c
 8006254:	af04      	add	r7, sp, #16
 8006256:	6078      	str	r0, [r7, #4]
	char *response_arr[3] =
 8006258:	4a6a      	ldr	r2, [pc, #424]	; (8006404 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1b4>)
 800625a:	f107 0314 	add.w	r3, r7, #20
 800625e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006260:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{ (char*)AT_RESPONSE_OK,									// station mode response
	  (char*)AT_RESPONSE_OK,									// check wifi connection response
	  (char*)AT_RESPONSE_OK										// connect wifi command response
	};

	char *fake_command_buffer[3] =
 8006264:	4a68      	ldr	r2, [pc, #416]	; (8006408 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1b8>)
 8006266:	f107 0308 	add.w	r3, r7, #8
 800626a:	ca07      	ldmia	r2, {r0, r1, r2}
 800626c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)AT_CWMODE_STATION,
		(char*)AT_CWQAP,
		(char*)"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8006270:	2300      	movs	r3, #0
 8006272:	657b      	str	r3, [r7, #84]	; 0x54
 8006274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006276:	2b02      	cmp	r3, #2
 8006278:	dc43      	bgt.n	8006302 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 800627a:	f107 0320 	add.w	r3, r7, #32
 800627e:	4963      	ldr	r1, [pc, #396]	; (800640c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1bc>)
 8006280:	4618      	mov	r0, r3
 8006282:	f006 fffc 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006286:	f107 0320 	add.w	r3, r7, #32
 800628a:	2100      	movs	r1, #0
 800628c:	4618      	mov	r0, r3
 800628e:	f005 f8cf 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006292:	4604      	mov	r4, r0
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	330c      	adds	r3, #12
 8006298:	681d      	ldr	r5, [r3, #0]
 800629a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800629e:	495c      	ldr	r1, [pc, #368]	; (8006410 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c0>)
 80062a0:	4618      	mov	r0, r3
 80062a2:	f006 ffec 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80062a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062aa:	4619      	mov	r1, r3
 80062ac:	4620      	mov	r0, r4
 80062ae:	47a8      	blx	r5
 80062b0:	4604      	mov	r4, r0
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	334c      	adds	r3, #76	; 0x4c
 80062b6:	681d      	ldr	r5, [r3, #0]
 80062b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062bc:	4955      	ldr	r1, [pc, #340]	; (8006414 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c4>)
 80062be:	4618      	mov	r0, r3
 80062c0:	f006 ffdd 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80062c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80062cc:	4413      	add	r3, r2
 80062ce:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80062d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062d6:	4619      	mov	r1, r3
 80062d8:	4620      	mov	r0, r4
 80062da:	47a8      	blx	r5
 80062dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062e0:	4618      	mov	r0, r3
 80062e2:	f007 fb84 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80062e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062ea:	4618      	mov	r0, r3
 80062ec:	f007 fb7f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80062f0:	f107 0320 	add.w	r3, r7, #32
 80062f4:	4618      	mov	r0, r3
 80062f6:	f007 fb7a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 80062fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062fc:	3301      	adds	r3, #1
 80062fe:	657b      	str	r3, [r7, #84]	; 0x54
 8006300:	e7b8      	b.n	8006274 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x24>
	}
	Status response;
	int i = 0;
 8006302:	2300      	movs	r3, #0
 8006304:	653b      	str	r3, [r7, #80]	; 0x50
	while(1)
	{
		response = Command_Process(fake_command_buffer, response_arr, 3);
 8006306:	f107 0114 	add.w	r1, r7, #20
 800630a:	f107 0308 	add.w	r3, r7, #8
 800630e:	2203      	movs	r2, #3
 8006310:	4618      	mov	r0, r3
 8006312:	f7fd fdab 	bl	8003e6c <Command_Process>
 8006316:	4603      	mov	r3, r0
 8006318:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		if(response != IDLE)
 800631c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006320:	2b04      	cmp	r3, #4
 8006322:	d153      	bne.n	80063cc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x17c>
		{
			break;
		}

		if(i<3)
 8006324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006326:	2b02      	cmp	r3, #2
 8006328:	dced      	bgt.n	8006306 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800632a:	2300      	movs	r3, #0
 800632c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800632e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006336:	4413      	add	r3, r2
 8006338:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800633c:	4618      	mov	r0, r3
 800633e:	f7f9 ff7d 	bl	800023c <strlen>
 8006342:	4603      	mov	r3, r0
 8006344:	461a      	mov	r2, r3
 8006346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006348:	4293      	cmp	r3, r2
 800634a:	da3b      	bge.n	80063c4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x174>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 800634c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006350:	492e      	ldr	r1, [pc, #184]	; (800640c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1bc>)
 8006352:	4618      	mov	r0, r3
 8006354:	f006 ff93 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006358:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800635c:	2100      	movs	r1, #0
 800635e:	4618      	mov	r0, r3
 8006360:	f005 f866 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006364:	4604      	mov	r4, r0
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	330c      	adds	r3, #12
 800636a:	681d      	ldr	r5, [r3, #0]
 800636c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006370:	4929      	ldr	r1, [pc, #164]	; (8006418 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c8>)
 8006372:	4618      	mov	r0, r3
 8006374:	f006 ff83 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006378:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800637c:	4619      	mov	r1, r3
 800637e:	4620      	mov	r0, r4
 8006380:	47a8      	blx	r5
 8006382:	4602      	mov	r2, r0
 8006384:	6813      	ldr	r3, [r2, #0]
 8006386:	3364      	adds	r3, #100	; 0x64
 8006388:	681c      	ldr	r4, [r3, #0]
 800638a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006392:	440b      	add	r3, r1
 8006394:	f853 1c44 	ldr.w	r1, [r3, #-68]
 8006398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800639a:	440b      	add	r3, r1
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	47a0      	blx	r4
 80063a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80063a8:	4618      	mov	r0, r3
 80063aa:	f007 fb20 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80063ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80063b2:	4618      	mov	r0, r3
 80063b4:	f007 fb1b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 80063b8:	f7fd fc9c 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80063bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063be:	3301      	adds	r3, #1
 80063c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063c2:	e7b4      	b.n	800632e <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xde>
			}
			i++;
 80063c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063c6:	3301      	adds	r3, #1
 80063c8:	653b      	str	r3, [r7, #80]	; 0x50
		}

	}
 80063ca:	e79c      	b.n	8006306 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
			break;
 80063cc:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 80063ce:	f00e fb39 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 80063d2:	4604      	mov	r4, r0
 80063d4:	6823      	ldr	r3, [r4, #0]
 80063d6:	3338      	adds	r3, #56	; 0x38
 80063d8:	681d      	ldr	r5, [r3, #0]
 80063da:	f897 604b 	ldrb.w	r6, [r7, #75]	; 0x4b
 80063de:	f00e fb41 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80063e2:	4603      	mov	r3, r0
 80063e4:	9302      	str	r3, [sp, #8]
 80063e6:	f240 13e5 	movw	r3, #485	; 0x1e5
 80063ea:	9301      	str	r3, [sp, #4]
 80063ec:	4b0b      	ldr	r3, [pc, #44]	; (800641c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1cc>)
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	4b0b      	ldr	r3, [pc, #44]	; (8006420 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d0>)
 80063f2:	4632      	mov	r2, r6
 80063f4:	2102      	movs	r1, #2
 80063f6:	4620      	mov	r0, r4
 80063f8:	47a8      	blx	r5

}
 80063fa:	bf00      	nop
 80063fc:	375c      	adds	r7, #92	; 0x5c
 80063fe:	46bd      	mov	sp, r7
 8006400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006402:	bf00      	nop
 8006404:	08024250 	.word	0x08024250
 8006408:	0802425c 	.word	0x0802425c
 800640c:	08023f34 	.word	0x08023f34
 8006410:	08023f38 	.word	0x08023f38
 8006414:	08023f4c 	.word	0x08023f4c
 8006418:	08023f54 	.word	0x08023f54
 800641c:	08023c04 	.word	0x08023c04
 8006420:	08024190 	.word	0x08024190

08006424 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4618      	mov	r0, r3
 8006430:	f7fe fe38 	bl	80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006434:	4a03      	ldr	r2, [pc, #12]	; (8006444 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev+0x20>)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4618      	mov	r0, r3
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	080276a0 	.word	0x080276a0

08006448 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv>:
 8006448:	b590      	push	{r4, r7, lr}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	f240 12e9 	movw	r2, #489	; 0x1e9
 8006454:	4906      	ldr	r1, [pc, #24]	; (8006470 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv+0x28>)
 8006456:	2004      	movs	r0, #4
 8006458:	f004 fb4e 	bl	800aaf8 <_ZnwjPKci>
 800645c:	4604      	mov	r4, r0
 800645e:	4620      	mov	r0, r4
 8006460:	f7ff ffe0 	bl	8006424 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>
 8006464:	4623      	mov	r3, r4
 8006466:	4618      	mov	r0, r3
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	bd90      	pop	{r4, r7, pc}
 800646e:	bf00      	nop
 8006470:	08023c04 	.word	0x08023c04

08006474 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>:
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4618      	mov	r0, r3
 8006480:	f00c ff28 	bl	80132d4 <_ZN10UtestShellC1Ev>
 8006484:	4a03      	ldr	r2, [pc, #12]	; (8006494 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev+0x20>)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4618      	mov	r0, r3
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	080275f4 	.word	0x080275f4

08006498 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv>:
{
 8006498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800649a:	b0b1      	sub	sp, #196	; 0xc4
 800649c:	af04      	add	r7, sp, #16
 800649e:	6078      	str	r0, [r7, #4]
	char response_arr[2][50] =
 80064a0:	4a71      	ldr	r2, [pc, #452]	; (8006668 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d0>)
 80064a2:	f107 0314 	add.w	r3, r7, #20
 80064a6:	4611      	mov	r1, r2
 80064a8:	2264      	movs	r2, #100	; 0x64
 80064aa:	4618      	mov	r0, r3
 80064ac:	f01a fbbe 	bl	8020c2c <memcpy>
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};

	char *fake_command_buffer[2] =
 80064b0:	4a6e      	ldr	r2, [pc, #440]	; (800666c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d4>)
 80064b2:	f107 030c 	add.w	r3, r7, #12
 80064b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064ba:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<2;i++)
 80064be:	2300      	movs	r3, #0
 80064c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	dc46      	bgt.n	800655a <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 80064cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80064d0:	4967      	ldr	r1, [pc, #412]	; (8006670 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d8>)
 80064d2:	4618      	mov	r0, r3
 80064d4:	f006 fed3 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80064d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80064dc:	2100      	movs	r1, #0
 80064de:	4618      	mov	r0, r3
 80064e0:	f004 ffa6 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80064e4:	4604      	mov	r4, r0
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	330c      	adds	r3, #12
 80064ea:	681d      	ldr	r5, [r3, #0]
 80064ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80064f0:	4960      	ldr	r1, [pc, #384]	; (8006674 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1dc>)
 80064f2:	4618      	mov	r0, r3
 80064f4:	f006 fec3 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80064f8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80064fc:	4619      	mov	r1, r3
 80064fe:	4620      	mov	r0, r4
 8006500:	47a8      	blx	r5
 8006502:	4604      	mov	r4, r0
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	334c      	adds	r3, #76	; 0x4c
 8006508:	681d      	ldr	r5, [r3, #0]
 800650a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800650e:	495a      	ldr	r1, [pc, #360]	; (8006678 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e0>)
 8006510:	4618      	mov	r0, r3
 8006512:	f006 feb4 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8006520:	4413      	add	r3, r2
 8006522:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 8006526:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800652a:	4619      	mov	r1, r3
 800652c:	4620      	mov	r0, r4
 800652e:	47a8      	blx	r5
 8006530:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006534:	4618      	mov	r0, r3
 8006536:	f007 fa5a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800653a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800653e:	4618      	mov	r0, r3
 8006540:	f007 fa55 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8006544:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006548:	4618      	mov	r0, r3
 800654a:	f007 fa50 	bl	800d9ee <_ZN12SimpleStringD1Ev>
	for(int i=0;i<2;i++)
 800654e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006552:	3301      	adds	r3, #1
 8006554:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006558:	e7b4      	b.n	80064c4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x2c>
	}

	Status response;
	int i = 0;
 800655a:	2300      	movs	r3, #0
 800655c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006560:	4946      	ldr	r1, [pc, #280]	; (800667c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e4>)
 8006562:	4847      	ldr	r0, [pc, #284]	; (8006680 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e8>)
 8006564:	f7fd fd0c 	bl	8003f80 <Connect_TCP_Server>
 8006568:	4603      	mov	r3, r0
 800656a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		if(response != IDLE)
 800656e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8006572:	2b04      	cmp	r3, #4
 8006574:	d15d      	bne.n	8006632 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x19a>
		{
			break;
		}

		if(i<3)
 8006576:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800657a:	2b02      	cmp	r3, #2
 800657c:	dcf0      	bgt.n	8006560 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc8>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800657e:	2300      	movs	r3, #0
 8006580:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006584:	f107 0214 	add.w	r2, r7, #20
 8006588:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800658c:	2132      	movs	r1, #50	; 0x32
 800658e:	fb01 f303 	mul.w	r3, r1, r3
 8006592:	4413      	add	r3, r2
 8006594:	4618      	mov	r0, r3
 8006596:	f7f9 fe51 	bl	800023c <strlen>
 800659a:	4603      	mov	r3, r0
 800659c:	461a      	mov	r2, r3
 800659e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065a2:	4293      	cmp	r3, r2
 80065a4:	da3f      	bge.n	8006626 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x18e>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 80065a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80065aa:	4931      	ldr	r1, [pc, #196]	; (8006670 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d8>)
 80065ac:	4618      	mov	r0, r3
 80065ae:	f006 fe66 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80065b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80065b6:	2100      	movs	r1, #0
 80065b8:	4618      	mov	r0, r3
 80065ba:	f004 ff39 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80065be:	4604      	mov	r4, r0
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	330c      	adds	r3, #12
 80065c4:	681d      	ldr	r5, [r3, #0]
 80065c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80065ca:	492e      	ldr	r1, [pc, #184]	; (8006684 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1ec>)
 80065cc:	4618      	mov	r0, r3
 80065ce:	f006 fe56 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80065d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80065d6:	4619      	mov	r1, r3
 80065d8:	4620      	mov	r0, r4
 80065da:	47a8      	blx	r5
 80065dc:	4603      	mov	r3, r0
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	3264      	adds	r2, #100	; 0x64
 80065e2:	6812      	ldr	r2, [r2, #0]
 80065e4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80065e8:	2032      	movs	r0, #50	; 0x32
 80065ea:	fb00 f101 	mul.w	r1, r0, r1
 80065ee:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80065f2:	4408      	add	r0, r1
 80065f4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065f8:	4401      	add	r1, r0
 80065fa:	399c      	subs	r1, #156	; 0x9c
 80065fc:	7809      	ldrb	r1, [r1, #0]
 80065fe:	4618      	mov	r0, r3
 8006600:	4790      	blx	r2
 8006602:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006606:	4618      	mov	r0, r3
 8006608:	f007 f9f1 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800660c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006610:	4618      	mov	r0, r3
 8006612:	f007 f9ec 	bl	800d9ee <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006616:	f7fd fb6d 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800661a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800661e:	3301      	adds	r3, #1
 8006620:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006624:	e7ae      	b.n	8006584 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xec>
			}
			i++;
 8006626:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800662a:	3301      	adds	r3, #1
 800662c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

	}
 8006630:	e796      	b.n	8006560 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc8>
			break;
 8006632:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 8006634:	f00e fa06 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8006638:	4604      	mov	r4, r0
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	3338      	adds	r3, #56	; 0x38
 800663e:	681d      	ldr	r5, [r3, #0]
 8006640:	f897 60a3 	ldrb.w	r6, [r7, #163]	; 0xa3
 8006644:	f00e fa0e 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006648:	4603      	mov	r3, r0
 800664a:	9302      	str	r3, [sp, #8]
 800664c:	f240 2311 	movw	r3, #529	; 0x211
 8006650:	9301      	str	r3, [sp, #4]
 8006652:	4b0d      	ldr	r3, [pc, #52]	; (8006688 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f0>)
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	4b0d      	ldr	r3, [pc, #52]	; (800668c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f4>)
 8006658:	4632      	mov	r2, r6
 800665a:	2102      	movs	r1, #2
 800665c:	4620      	mov	r0, r4
 800665e:	47a8      	blx	r5

}
 8006660:	bf00      	nop
 8006662:	37b4      	adds	r7, #180	; 0xb4
 8006664:	46bd      	mov	sp, r7
 8006666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006668:	08024278 	.word	0x08024278
 800666c:	080242dc 	.word	0x080242dc
 8006670:	08023f34 	.word	0x08023f34
 8006674:	08023f38 	.word	0x08023f38
 8006678:	08023f4c 	.word	0x08023f4c
 800667c:	08024268 	.word	0x08024268
 8006680:	0802426c 	.word	0x0802426c
 8006684:	08023f54 	.word	0x08023f54
 8006688:	08023c04 	.word	0x08023c04
 800668c:	08024190 	.word	0x08024190

08006690 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4618      	mov	r0, r3
 800669c:	f7fe fd02 	bl	80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80066a0:	4a03      	ldr	r2, [pc, #12]	; (80066b0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev+0x20>)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4618      	mov	r0, r3
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	080275d4 	.word	0x080275d4

080066b4 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv>:
 80066b4:	b590      	push	{r4, r7, lr}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	f240 2215 	movw	r2, #533	; 0x215
 80066c0:	4906      	ldr	r1, [pc, #24]	; (80066dc <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv+0x28>)
 80066c2:	2004      	movs	r0, #4
 80066c4:	f004 fa18 	bl	800aaf8 <_ZnwjPKci>
 80066c8:	4604      	mov	r4, r0
 80066ca:	4620      	mov	r0, r4
 80066cc:	f7ff ffe0 	bl	8006690 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>
 80066d0:	4623      	mov	r3, r4
 80066d2:	4618      	mov	r0, r3
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd90      	pop	{r4, r7, pc}
 80066da:	bf00      	nop
 80066dc:	08023c04 	.word	0x08023c04

080066e0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>:
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f00c fdf2 	bl	80132d4 <_ZN10UtestShellC1Ev>
 80066f0:	4a03      	ldr	r2, [pc, #12]	; (8006700 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev+0x20>)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4618      	mov	r0, r3
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	08027528 	.word	0x08027528

08006704 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv>:
{
 8006704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006706:	b091      	sub	sp, #68	; 0x44
 8006708:	af04      	add	r7, sp, #16
 800670a:	6078      	str	r0, [r7, #4]

	char *fake_command_buffer[2] =
 800670c:	4a33      	ldr	r2, [pc, #204]	; (80067dc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xd8>)
 800670e:	f107 030c 	add.w	r3, r7, #12
 8006712:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006716:	e883 0003 	stmia.w	r3, {r0, r1}

		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[0]);
 800671a:	f107 0314 	add.w	r3, r7, #20
 800671e:	4930      	ldr	r1, [pc, #192]	; (80067e0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xdc>)
 8006720:	4618      	mov	r0, r3
 8006722:	f006 fdac 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006726:	f107 0314 	add.w	r3, r7, #20
 800672a:	2100      	movs	r1, #0
 800672c:	4618      	mov	r0, r3
 800672e:	f004 fe7f 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006732:	4604      	mov	r4, r0
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	330c      	adds	r3, #12
 8006738:	681d      	ldr	r5, [r3, #0]
 800673a:	f107 031c 	add.w	r3, r7, #28
 800673e:	4929      	ldr	r1, [pc, #164]	; (80067e4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe0>)
 8006740:	4618      	mov	r0, r3
 8006742:	f006 fd9c 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006746:	f107 031c 	add.w	r3, r7, #28
 800674a:	4619      	mov	r1, r3
 800674c:	4620      	mov	r0, r4
 800674e:	47a8      	blx	r5
 8006750:	4604      	mov	r4, r0
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	334c      	adds	r3, #76	; 0x4c
 8006756:	681d      	ldr	r5, [r3, #0]
 8006758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800675c:	4922      	ldr	r1, [pc, #136]	; (80067e8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe4>)
 800675e:	4618      	mov	r0, r3
 8006760:	f006 fd8d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800676a:	4619      	mov	r1, r3
 800676c:	4620      	mov	r0, r4
 800676e:	47a8      	blx	r5
 8006770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006774:	4618      	mov	r0, r3
 8006776:	f007 f93a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800677a:	f107 031c 	add.w	r3, r7, #28
 800677e:	4618      	mov	r0, r3
 8006780:	f007 f935 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8006784:	f107 0314 	add.w	r3, r7, #20
 8006788:	4618      	mov	r0, r3
 800678a:	f007 f930 	bl	800d9ee <_ZN12SimpleStringD1Ev>


	Status response;
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 800678e:	4917      	ldr	r1, [pc, #92]	; (80067ec <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe8>)
 8006790:	4817      	ldr	r0, [pc, #92]	; (80067f0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xec>)
 8006792:	f7fd fbf5 	bl	8003f80 <Connect_TCP_Server>
 8006796:	4603      	mov	r3, r0
 8006798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(response != IDLE)
 800679c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	d100      	bne.n	80067a6 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xa2>
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 80067a4:	e7f3      	b.n	800678e <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x8a>
		{
			break;
 80067a6:	bf00      	nop
		}

	}
	LONGS_EQUAL(TIMEOUT_ERROR,response);
 80067a8:	f00e f94c 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 80067ac:	4604      	mov	r4, r0
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	3338      	adds	r3, #56	; 0x38
 80067b2:	681d      	ldr	r5, [r3, #0]
 80067b4:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 80067b8:	f00e f954 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80067bc:	4603      	mov	r3, r0
 80067be:	9302      	str	r3, [sp, #8]
 80067c0:	f44f 730b 	mov.w	r3, #556	; 0x22c
 80067c4:	9301      	str	r3, [sp, #4]
 80067c6:	4b0b      	ldr	r3, [pc, #44]	; (80067f4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf0>)
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	4b0b      	ldr	r3, [pc, #44]	; (80067f8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf4>)
 80067cc:	4632      	mov	r2, r6
 80067ce:	2101      	movs	r1, #1
 80067d0:	4620      	mov	r0, r4
 80067d2:	47a8      	blx	r5

}
 80067d4:	bf00      	nop
 80067d6:	3734      	adds	r7, #52	; 0x34
 80067d8:	46bd      	mov	sp, r7
 80067da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067dc:	080242dc 	.word	0x080242dc
 80067e0:	08023f34 	.word	0x08023f34
 80067e4:	08023f38 	.word	0x08023f38
 80067e8:	08023f4c 	.word	0x08023f4c
 80067ec:	08024268 	.word	0x08024268
 80067f0:	0802426c 	.word	0x0802426c
 80067f4:	08023c04 	.word	0x08023c04
 80067f8:	08024008 	.word	0x08024008

080067fc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4618      	mov	r0, r3
 8006808:	f7fe fc4c 	bl	80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800680c:	4a03      	ldr	r2, [pc, #12]	; (800681c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev+0x20>)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4618      	mov	r0, r3
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	08027508 	.word	0x08027508

08006820 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv>:
 8006820:	b590      	push	{r4, r7, lr}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	f44f 720c 	mov.w	r2, #560	; 0x230
 800682c:	4906      	ldr	r1, [pc, #24]	; (8006848 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv+0x28>)
 800682e:	2004      	movs	r0, #4
 8006830:	f004 f962 	bl	800aaf8 <_ZnwjPKci>
 8006834:	4604      	mov	r4, r0
 8006836:	4620      	mov	r0, r4
 8006838:	f7ff ffe0 	bl	80067fc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>
 800683c:	4623      	mov	r3, r4
 800683e:	4618      	mov	r0, r3
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	bd90      	pop	{r4, r7, pc}
 8006846:	bf00      	nop
 8006848:	08023c04 	.word	0x08023c04

0800684c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>:
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4618      	mov	r0, r3
 8006858:	f00c fd3c 	bl	80132d4 <_ZN10UtestShellC1Ev>
 800685c:	4a03      	ldr	r2, [pc, #12]	; (800686c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev+0x20>)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4618      	mov	r0, r3
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	0802745c 	.word	0x0802745c

08006870 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv>:
{
 8006870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006872:	b0b1      	sub	sp, #196	; 0xc4
 8006874:	af04      	add	r7, sp, #16
 8006876:	6078      	str	r0, [r7, #4]
	char response_arr[2][50] =
 8006878:	4a71      	ldr	r2, [pc, #452]	; (8006a40 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d0>)
 800687a:	f107 0314 	add.w	r3, r7, #20
 800687e:	4611      	mov	r1, r2
 8006880:	2264      	movs	r2, #100	; 0x64
 8006882:	4618      	mov	r0, r3
 8006884:	f01a f9d2 	bl	8020c2c <memcpy>
	{
	  AT_RESPONSE_OK,
	  AT_RESPONSE_ERROR
	};

	char *fake_command_buffer[2] =
 8006888:	4a6e      	ldr	r2, [pc, #440]	; (8006a44 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d4>)
 800688a:	f107 030c 	add.w	r3, r7, #12
 800688e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006892:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<2;i++)
 8006896:	2300      	movs	r3, #0
 8006898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800689c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	dc46      	bgt.n	8006932 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 80068a4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80068a8:	4967      	ldr	r1, [pc, #412]	; (8006a48 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d8>)
 80068aa:	4618      	mov	r0, r3
 80068ac:	f006 fce7 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80068b0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80068b4:	2100      	movs	r1, #0
 80068b6:	4618      	mov	r0, r3
 80068b8:	f004 fdba 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80068bc:	4604      	mov	r4, r0
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	330c      	adds	r3, #12
 80068c2:	681d      	ldr	r5, [r3, #0]
 80068c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80068c8:	4960      	ldr	r1, [pc, #384]	; (8006a4c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1dc>)
 80068ca:	4618      	mov	r0, r3
 80068cc:	f006 fcd7 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80068d0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80068d4:	4619      	mov	r1, r3
 80068d6:	4620      	mov	r0, r4
 80068d8:	47a8      	blx	r5
 80068da:	4604      	mov	r4, r0
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	334c      	adds	r3, #76	; 0x4c
 80068e0:	681d      	ldr	r5, [r3, #0]
 80068e2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80068e6:	495a      	ldr	r1, [pc, #360]	; (8006a50 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e0>)
 80068e8:	4618      	mov	r0, r3
 80068ea:	f006 fcc8 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80068ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80068f8:	4413      	add	r3, r2
 80068fa:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 80068fe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006902:	4619      	mov	r1, r3
 8006904:	4620      	mov	r0, r4
 8006906:	47a8      	blx	r5
 8006908:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800690c:	4618      	mov	r0, r3
 800690e:	f007 f86e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8006912:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006916:	4618      	mov	r0, r3
 8006918:	f007 f869 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800691c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006920:	4618      	mov	r0, r3
 8006922:	f007 f864 	bl	800d9ee <_ZN12SimpleStringD1Ev>
	for(int i=0;i<2;i++)
 8006926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800692a:	3301      	adds	r3, #1
 800692c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006930:	e7b4      	b.n	800689c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x2c>
	}

	Status response;
	int i = 0;
 8006932:	2300      	movs	r3, #0
 8006934:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006938:	4946      	ldr	r1, [pc, #280]	; (8006a54 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e4>)
 800693a:	4847      	ldr	r0, [pc, #284]	; (8006a58 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e8>)
 800693c:	f7fd fb20 	bl	8003f80 <Connect_TCP_Server>
 8006940:	4603      	mov	r3, r0
 8006942:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		if(response != IDLE)
 8006946:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800694a:	2b04      	cmp	r3, #4
 800694c:	d15d      	bne.n	8006a0a <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x19a>
		{
			break;
		}

		if(i<3)
 800694e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006952:	2b02      	cmp	r3, #2
 8006954:	dcf0      	bgt.n	8006938 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc8>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006956:	2300      	movs	r3, #0
 8006958:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800695c:	f107 0214 	add.w	r2, r7, #20
 8006960:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006964:	2132      	movs	r1, #50	; 0x32
 8006966:	fb01 f303 	mul.w	r3, r1, r3
 800696a:	4413      	add	r3, r2
 800696c:	4618      	mov	r0, r3
 800696e:	f7f9 fc65 	bl	800023c <strlen>
 8006972:	4603      	mov	r3, r0
 8006974:	461a      	mov	r2, r3
 8006976:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800697a:	4293      	cmp	r3, r2
 800697c:	da3f      	bge.n	80069fe <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x18e>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 800697e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006982:	4931      	ldr	r1, [pc, #196]	; (8006a48 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d8>)
 8006984:	4618      	mov	r0, r3
 8006986:	f006 fc7a 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800698a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800698e:	2100      	movs	r1, #0
 8006990:	4618      	mov	r0, r3
 8006992:	f004 fd4d 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006996:	4604      	mov	r4, r0
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	330c      	adds	r3, #12
 800699c:	681d      	ldr	r5, [r3, #0]
 800699e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80069a2:	492e      	ldr	r1, [pc, #184]	; (8006a5c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1ec>)
 80069a4:	4618      	mov	r0, r3
 80069a6:	f006 fc6a 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80069aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80069ae:	4619      	mov	r1, r3
 80069b0:	4620      	mov	r0, r4
 80069b2:	47a8      	blx	r5
 80069b4:	4603      	mov	r3, r0
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	3264      	adds	r2, #100	; 0x64
 80069ba:	6812      	ldr	r2, [r2, #0]
 80069bc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80069c0:	2032      	movs	r0, #50	; 0x32
 80069c2:	fb00 f101 	mul.w	r1, r0, r1
 80069c6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80069ca:	4408      	add	r0, r1
 80069cc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069d0:	4401      	add	r1, r0
 80069d2:	399c      	subs	r1, #156	; 0x9c
 80069d4:	7809      	ldrb	r1, [r1, #0]
 80069d6:	4618      	mov	r0, r3
 80069d8:	4790      	blx	r2
 80069da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80069de:	4618      	mov	r0, r3
 80069e0:	f007 f805 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80069e4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80069e8:	4618      	mov	r0, r3
 80069ea:	f007 f800 	bl	800d9ee <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 80069ee:	f7fd f981 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80069f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80069f6:	3301      	adds	r3, #1
 80069f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80069fc:	e7ae      	b.n	800695c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xec>
			}
			i++;
 80069fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a02:	3301      	adds	r3, #1
 8006a04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

	}
 8006a08:	e796      	b.n	8006938 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc8>
			break;
 8006a0a:	bf00      	nop
	LONGS_EQUAL(STATUS_ERROR,response);
 8006a0c:	f00e f81a 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8006a10:	4604      	mov	r4, r0
 8006a12:	6823      	ldr	r3, [r4, #0]
 8006a14:	3338      	adds	r3, #56	; 0x38
 8006a16:	681d      	ldr	r5, [r3, #0]
 8006a18:	f897 60a3 	ldrb.w	r6, [r7, #163]	; 0xa3
 8006a1c:	f00e f822 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006a20:	4603      	mov	r3, r0
 8006a22:	9302      	str	r3, [sp, #8]
 8006a24:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006a28:	9301      	str	r3, [sp, #4]
 8006a2a:	4b0d      	ldr	r3, [pc, #52]	; (8006a60 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f0>)
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	4b0d      	ldr	r3, [pc, #52]	; (8006a64 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f4>)
 8006a30:	4632      	mov	r2, r6
 8006a32:	2103      	movs	r1, #3
 8006a34:	4620      	mov	r0, r4
 8006a36:	47a8      	blx	r5

}
 8006a38:	bf00      	nop
 8006a3a:	37b4      	adds	r7, #180	; 0xb4
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a40:	080242e4 	.word	0x080242e4
 8006a44:	080242dc 	.word	0x080242dc
 8006a48:	08023f34 	.word	0x08023f34
 8006a4c:	08023f38 	.word	0x08023f38
 8006a50:	08023f4c 	.word	0x08023f4c
 8006a54:	08024268 	.word	0x08024268
 8006a58:	0802426c 	.word	0x0802426c
 8006a5c:	08023f54 	.word	0x08023f54
 8006a60:	08023c04 	.word	0x08023c04
 8006a64:	08024034 	.word	0x08024034

08006a68 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe fb16 	bl	80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006a78:	4a03      	ldr	r2, [pc, #12]	; (8006a88 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev+0x20>)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4618      	mov	r0, r3
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	0802743c 	.word	0x0802743c

08006a8c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv>:
 8006a8c:	b590      	push	{r4, r7, lr}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8006a98:	4906      	ldr	r1, [pc, #24]	; (8006ab4 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv+0x28>)
 8006a9a:	2004      	movs	r0, #4
 8006a9c:	f004 f82c 	bl	800aaf8 <_ZnwjPKci>
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f7ff ffe0 	bl	8006a68 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>
 8006aa8:	4623      	mov	r3, r4
 8006aaa:	4618      	mov	r0, r3
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd90      	pop	{r4, r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	08023c04 	.word	0x08023c04

08006ab8 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>:
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f00c fc06 	bl	80132d4 <_ZN10UtestShellC1Ev>
 8006ac8:	4a03      	ldr	r2, [pc, #12]	; (8006ad8 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev+0x20>)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	08027390 	.word	0x08027390

08006adc <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv>:
{
 8006adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ade:	b093      	sub	sp, #76	; 0x4c
 8006ae0:	af04      	add	r7, sp, #16
 8006ae2:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CIPCLOSE);
 8006ae4:	f107 0308 	add.w	r3, r7, #8
 8006ae8:	494a      	ldr	r1, [pc, #296]	; (8006c14 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006aea:	4618      	mov	r0, r3
 8006aec:	f006 fbc7 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006af0:	f107 0308 	add.w	r3, r7, #8
 8006af4:	2100      	movs	r1, #0
 8006af6:	4618      	mov	r0, r3
 8006af8:	f004 fc9a 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006afc:	4604      	mov	r4, r0
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	330c      	adds	r3, #12
 8006b02:	681d      	ldr	r5, [r3, #0]
 8006b04:	f107 0310 	add.w	r3, r7, #16
 8006b08:	4943      	ldr	r1, [pc, #268]	; (8006c18 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x13c>)
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f006 fbb7 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006b10:	f107 0310 	add.w	r3, r7, #16
 8006b14:	4619      	mov	r1, r3
 8006b16:	4620      	mov	r0, r4
 8006b18:	47a8      	blx	r5
 8006b1a:	4604      	mov	r4, r0
 8006b1c:	6823      	ldr	r3, [r4, #0]
 8006b1e:	334c      	adds	r3, #76	; 0x4c
 8006b20:	681d      	ldr	r5, [r3, #0]
 8006b22:	f107 0318 	add.w	r3, r7, #24
 8006b26:	493d      	ldr	r1, [pc, #244]	; (8006c1c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x140>)
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f006 fba8 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006b2e:	f107 0318 	add.w	r3, r7, #24
 8006b32:	4a3b      	ldr	r2, [pc, #236]	; (8006c20 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x144>)
 8006b34:	4619      	mov	r1, r3
 8006b36:	4620      	mov	r0, r4
 8006b38:	47a8      	blx	r5
 8006b3a:	f107 0318 	add.w	r3, r7, #24
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f006 ff55 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8006b44:	f107 0310 	add.w	r3, r7, #16
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f006 ff50 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8006b4e:	f107 0308 	add.w	r3, r7, #8
 8006b52:	4618      	mov	r0, r3
 8006b54:	f006 ff4b 	bl	800d9ee <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_TCP_Server();
 8006b58:	f7fd fa4e 	bl	8003ff8 <Disconnect_TCP_Server>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 8006b62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d139      	bne.n	8006bde <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	dcf1      	bgt.n	8006b58 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 8006b74:	f107 0320 	add.w	r3, r7, #32
 8006b78:	4926      	ldr	r1, [pc, #152]	; (8006c14 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f006 fb7f 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006b80:	f107 0320 	add.w	r3, r7, #32
 8006b84:	2100      	movs	r1, #0
 8006b86:	4618      	mov	r0, r3
 8006b88:	f004 fc52 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	330c      	adds	r3, #12
 8006b92:	681d      	ldr	r5, [r3, #0]
 8006b94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b98:	4922      	ldr	r1, [pc, #136]	; (8006c24 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x148>)
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f006 fb6f 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006ba0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	47a8      	blx	r5
 8006baa:	4603      	mov	r3, r0
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	3264      	adds	r2, #100	; 0x64
 8006bb0:	6812      	ldr	r2, [r2, #0]
 8006bb2:	481d      	ldr	r0, [pc, #116]	; (8006c28 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x14c>)
 8006bb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bb6:	4401      	add	r1, r0
 8006bb8:	7809      	ldrb	r1, [r1, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	4790      	blx	r2
 8006bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f006 ff13 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8006bc8:	f107 0320 	add.w	r3, r7, #32
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f006 ff0e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8006bd2:	f7fd f88f 	bl	8003cf4 <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd8:	3301      	adds	r3, #1
 8006bda:	637b      	str	r3, [r7, #52]	; 0x34
 8006bdc:	e7c7      	b.n	8006b6e <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x92>
			break;
 8006bde:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 8006be0:	f00d ff30 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8006be4:	4604      	mov	r4, r0
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	3338      	adds	r3, #56	; 0x38
 8006bea:	681d      	ldr	r5, [r3, #0]
 8006bec:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 8006bf0:	f00d ff38 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	9302      	str	r3, [sp, #8]
 8006bf8:	f240 2371 	movw	r3, #625	; 0x271
 8006bfc:	9301      	str	r3, [sp, #4]
 8006bfe:	4b0b      	ldr	r3, [pc, #44]	; (8006c2c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x150>)
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x154>)
 8006c04:	4632      	mov	r2, r6
 8006c06:	2102      	movs	r1, #2
 8006c08:	4620      	mov	r0, r4
 8006c0a:	47a8      	blx	r5

}
 8006c0c:	bf00      	nop
 8006c0e:	373c      	adds	r7, #60	; 0x3c
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c14:	08023f34 	.word	0x08023f34
 8006c18:	08023f38 	.word	0x08023f38
 8006c1c:	08023f4c 	.word	0x08023f4c
 8006c20:	08024348 	.word	0x08024348
 8006c24:	08023f54 	.word	0x08023f54
 8006c28:	08023b90 	.word	0x08023b90
 8006c2c:	08023c04 	.word	0x08023c04
 8006c30:	08024190 	.word	0x08024190

08006c34 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe fa30 	bl	80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006c44:	4a03      	ldr	r2, [pc, #12]	; (8006c54 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev+0x20>)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	08027370 	.word	0x08027370

08006c58 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv>:
 8006c58:	b590      	push	{r4, r7, lr}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	f240 2275 	movw	r2, #629	; 0x275
 8006c64:	4906      	ldr	r1, [pc, #24]	; (8006c80 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8006c66:	2004      	movs	r0, #4
 8006c68:	f003 ff46 	bl	800aaf8 <_ZnwjPKci>
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f7ff ffe0 	bl	8006c34 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>
 8006c74:	4623      	mov	r3, r4
 8006c76:	4618      	mov	r0, r3
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd90      	pop	{r4, r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	08023c04 	.word	0x08023c04

08006c84 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>:
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f00c fb20 	bl	80132d4 <_ZN10UtestShellC1Ev>
 8006c94:	4a03      	ldr	r2, [pc, #12]	; (8006ca4 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev+0x20>)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	080272c4 	.word	0x080272c4

08006ca8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv>:
{
 8006ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006caa:	b0b3      	sub	sp, #204	; 0xcc
 8006cac:	af04      	add	r7, sp, #16
 8006cae:	6078      	str	r0, [r7, #4]
	Status response;
	int i = 0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	char response_arr[2][50] =
 8006cb6:	4a7f      	ldr	r2, [pc, #508]	; (8006eb4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x20c>)
 8006cb8:	f107 0308 	add.w	r3, r7, #8
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	2264      	movs	r2, #100	; 0x64
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f019 ffb3 	bl	8020c2c <memcpy>
	{ AT_RESPONSE_GREATER_THAN,
	  AT_RESPONSE_SEND_OK,
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT+CIPSEND=11\r\n");
 8006cc6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006cca:	497b      	ldr	r1, [pc, #492]	; (8006eb8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f006 fad6 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006cd2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f004 fba9 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006cde:	4604      	mov	r4, r0
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	330c      	adds	r3, #12
 8006ce4:	681d      	ldr	r5, [r3, #0]
 8006ce6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006cea:	4974      	ldr	r1, [pc, #464]	; (8006ebc <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x214>)
 8006cec:	4618      	mov	r0, r3
 8006cee:	f006 fac6 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006cf2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	47a8      	blx	r5
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	334c      	adds	r3, #76	; 0x4c
 8006d02:	681d      	ldr	r5, [r3, #0]
 8006d04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006d08:	496d      	ldr	r1, [pc, #436]	; (8006ec0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x218>)
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f006 fab7 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006d10:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006d14:	4a6b      	ldr	r2, [pc, #428]	; (8006ec4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x21c>)
 8006d16:	4619      	mov	r1, r3
 8006d18:	4620      	mov	r0, r4
 8006d1a:	47a8      	blx	r5
 8006d1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006d20:	4618      	mov	r0, r3
 8006d22:	f006 fe64 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8006d26:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f006 fe5f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8006d30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006d34:	4618      	mov	r0, r3
 8006d36:	f006 fe5a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Hello World");
 8006d3a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006d3e:	495e      	ldr	r1, [pc, #376]	; (8006eb8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 8006d40:	4618      	mov	r0, r3
 8006d42:	f006 fa9c 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006d46:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f004 fb6f 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006d52:	4604      	mov	r4, r0
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	330c      	adds	r3, #12
 8006d58:	681d      	ldr	r5, [r3, #0]
 8006d5a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006d5e:	4957      	ldr	r1, [pc, #348]	; (8006ebc <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x214>)
 8006d60:	4618      	mov	r0, r3
 8006d62:	f006 fa8c 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006d66:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	47a8      	blx	r5
 8006d70:	4604      	mov	r4, r0
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	334c      	adds	r3, #76	; 0x4c
 8006d76:	681d      	ldr	r5, [r3, #0]
 8006d78:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006d7c:	4950      	ldr	r1, [pc, #320]	; (8006ec0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x218>)
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f006 fa7d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006d84:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006d88:	4a4f      	ldr	r2, [pc, #316]	; (8006ec8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	47a8      	blx	r5
 8006d90:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006d94:	4618      	mov	r0, r3
 8006d96:	f006 fe2a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8006d9a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f006 fe25 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8006da4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006da8:	4618      	mov	r0, r3
 8006daa:	f006 fe20 	bl	800d9ee <_ZN12SimpleStringD1Ev>
	while(1)
	{
		response = Send_TCP_Message((char*)"Hello World");
 8006dae:	4846      	ldr	r0, [pc, #280]	; (8006ec8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006db0:	f7fd f93e 	bl	8004030 <Send_TCP_Message>
 8006db4:	4603      	mov	r3, r0
 8006db6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

		if(response != IDLE)
 8006dba:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	d15d      	bne.n	8006e7e <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1d6>
		{
			break;
		}

		if(i<2)
 8006dc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	dcf1      	bgt.n	8006dae <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006dca:	2300      	movs	r3, #0
 8006dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dd0:	f107 0208 	add.w	r2, r7, #8
 8006dd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006dd8:	2132      	movs	r1, #50	; 0x32
 8006dda:	fb01 f303 	mul.w	r3, r1, r3
 8006dde:	4413      	add	r3, r2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7f9 fa2b 	bl	800023c <strlen>
 8006de6:	4603      	mov	r3, r0
 8006de8:	461a      	mov	r2, r3
 8006dea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006dee:	4293      	cmp	r3, r2
 8006df0:	da3f      	bge.n	8006e72 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1ca>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006df2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006df6:	4930      	ldr	r1, [pc, #192]	; (8006eb8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f006 fa40 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006dfe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006e02:	2100      	movs	r1, #0
 8006e04:	4618      	mov	r0, r3
 8006e06:	f004 fb13 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	330c      	adds	r3, #12
 8006e10:	681d      	ldr	r5, [r3, #0]
 8006e12:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e16:	492d      	ldr	r1, [pc, #180]	; (8006ecc <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x224>)
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f006 fa30 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006e1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e22:	4619      	mov	r1, r3
 8006e24:	4620      	mov	r0, r4
 8006e26:	47a8      	blx	r5
 8006e28:	4603      	mov	r3, r0
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	3264      	adds	r2, #100	; 0x64
 8006e2e:	6812      	ldr	r2, [r2, #0]
 8006e30:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006e34:	2032      	movs	r0, #50	; 0x32
 8006e36:	fb00 f101 	mul.w	r1, r0, r1
 8006e3a:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8006e3e:	4408      	add	r0, r1
 8006e40:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8006e44:	4401      	add	r1, r0
 8006e46:	39b0      	subs	r1, #176	; 0xb0
 8006e48:	7809      	ldrb	r1, [r1, #0]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	4790      	blx	r2
 8006e4e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e52:	4618      	mov	r0, r3
 8006e54:	f006 fdcb 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8006e58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f006 fdc6 	bl	800d9ee <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006e62:	f7fc ff47 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006e66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e70:	e7ae      	b.n	8006dd0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x128>
			}
			i++;
 8006e72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e76:	3301      	adds	r3, #1
 8006e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		}

	}
 8006e7c:	e797      	b.n	8006dae <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>
			break;
 8006e7e:	bf00      	nop

	LONGS_EQUAL(STATUS_OK,response);
 8006e80:	f00d fde0 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8006e84:	4604      	mov	r4, r0
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	3338      	adds	r3, #56	; 0x38
 8006e8a:	681d      	ldr	r5, [r3, #0]
 8006e8c:	f897 60af 	ldrb.w	r6, [r7, #175]	; 0xaf
 8006e90:	f00d fde8 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006e94:	4603      	mov	r3, r0
 8006e96:	9302      	str	r3, [sp, #8]
 8006e98:	f240 2396 	movw	r3, #662	; 0x296
 8006e9c:	9301      	str	r3, [sp, #4]
 8006e9e:	4b0c      	ldr	r3, [pc, #48]	; (8006ed0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x228>)
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	4b0c      	ldr	r3, [pc, #48]	; (8006ed4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x22c>)
 8006ea4:	4632      	mov	r2, r6
 8006ea6:	2102      	movs	r1, #2
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	47a8      	blx	r5

}
 8006eac:	bf00      	nop
 8006eae:	37bc      	adds	r7, #188	; 0xbc
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eb4:	08024368 	.word	0x08024368
 8006eb8:	08023f34 	.word	0x08023f34
 8006ebc:	08023f38 	.word	0x08023f38
 8006ec0:	08023f4c 	.word	0x08023f4c
 8006ec4:	08024358 	.word	0x08024358
 8006ec8:	08023e44 	.word	0x08023e44
 8006ecc:	08023f54 	.word	0x08023f54
 8006ed0:	08023c04 	.word	0x08023c04
 8006ed4:	08024190 	.word	0x08024190

08006ed8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fe f8de 	bl	80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006ee8:	4a03      	ldr	r2, [pc, #12]	; (8006ef8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev+0x20>)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	080272a4 	.word	0x080272a4

08006efc <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv>:
 8006efc:	b590      	push	{r4, r7, lr}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	f240 229a 	movw	r2, #666	; 0x29a
 8006f08:	4906      	ldr	r1, [pc, #24]	; (8006f24 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8006f0a:	2004      	movs	r0, #4
 8006f0c:	f003 fdf4 	bl	800aaf8 <_ZnwjPKci>
 8006f10:	4604      	mov	r4, r0
 8006f12:	4620      	mov	r0, r4
 8006f14:	f7ff ffe0 	bl	8006ed8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>
 8006f18:	4623      	mov	r3, r4
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd90      	pop	{r4, r7, pc}
 8006f22:	bf00      	nop
 8006f24:	08023c04 	.word	0x08023c04

08006f28 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>:
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f00c f9ce 	bl	80132d4 <_ZN10UtestShellC1Ev>
 8006f38:	4a03      	ldr	r2, [pc, #12]	; (8006f48 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev+0x20>)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4618      	mov	r0, r3
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	080271f8 	.word	0x080271f8

08006f4c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv>:
{
 8006f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f4e:	b0a3      	sub	sp, #140	; 0x8c
 8006f50:	af04      	add	r7, sp, #16
 8006f52:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,11:Hello World";		// an example data that ESP received from server
 8006f54:	4b49      	ldr	r3, [pc, #292]	; (800707c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x130>)
 8006f56:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8006f5a:	461d      	mov	r5, r3
 8006f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	6023      	str	r3, [r4, #0]
 8006f64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006f68:	2200      	movs	r2, #0
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	605a      	str	r2, [r3, #4]
 8006f6e:	811a      	strh	r2, [r3, #8]

	Status response_state = IDLE;
 8006f70:	2304      	movs	r3, #4
 8006f72:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50] ={0};
 8006f76:	2300      	movs	r3, #0
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	f107 0310 	add.w	r3, r7, #16
 8006f7e:	222e      	movs	r2, #46	; 0x2e
 8006f80:	2100      	movs	r1, #0
 8006f82:	4618      	mov	r0, r3
 8006f84:	f019 fe60 	bl	8020c48 <memset>

	for(int i=0;i<(int)strlen(response);i++)
 8006f88:	2300      	movs	r3, #0
 8006f8a:	677b      	str	r3, [r7, #116]	; 0x74
 8006f8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7f9 f953 	bl	800023c <strlen>
 8006f96:	4603      	mov	r3, r0
 8006f98:	461a      	mov	r2, r3
 8006f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	da35      	bge.n	800700c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8006fa0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006fa4:	4936      	ldr	r1, [pc, #216]	; (8007080 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x134>)
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f006 f969 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006fac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f004 fa3c 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006fb8:	4604      	mov	r4, r0
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	330c      	adds	r3, #12
 8006fbe:	681d      	ldr	r5, [r3, #0]
 8006fc0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006fc4:	492f      	ldr	r1, [pc, #188]	; (8007084 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x138>)
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f006 f959 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8006fcc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	47a8      	blx	r5
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	3264      	adds	r2, #100	; 0x64
 8006fdc:	6812      	ldr	r2, [r2, #0]
 8006fde:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8006fe2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006fe4:	4401      	add	r1, r0
 8006fe6:	7809      	ldrb	r1, [r1, #0]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	4790      	blx	r2
 8006fec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f006 fcfc 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8006ff6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f006 fcf7 	bl	800d9ee <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8007000:	f7fc fe78 	bl	8003cf4 <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 8007004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007006:	3301      	adds	r3, #1
 8007008:	677b      	str	r3, [r7, #116]	; 0x74
 800700a:	e7bf      	b.n	8006f8c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x40>
	}

	response_state = Read_TCP_Message(received_message);
 800700c:	f107 030c 	add.w	r3, r7, #12
 8007010:	4618      	mov	r0, r3
 8007012:	f7fd f845 	bl	80040a0 <Read_TCP_Message>
 8007016:	4603      	mov	r3, r0
 8007018:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LONGS_EQUAL(STATUS_OK,response_state);
 800701c:	f00d fd12 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8007020:	4604      	mov	r4, r0
 8007022:	6823      	ldr	r3, [r4, #0]
 8007024:	3338      	adds	r3, #56	; 0x38
 8007026:	681d      	ldr	r5, [r3, #0]
 8007028:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 800702c:	f00d fd1a 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007030:	4603      	mov	r3, r0
 8007032:	9302      	str	r3, [sp, #8]
 8007034:	f240 23aa 	movw	r3, #682	; 0x2aa
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	4b13      	ldr	r3, [pc, #76]	; (8007088 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x13c>)
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	4b13      	ldr	r3, [pc, #76]	; (800708c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x140>)
 8007040:	4632      	mov	r2, r6
 8007042:	2102      	movs	r1, #2
 8007044:	4620      	mov	r0, r4
 8007046:	47a8      	blx	r5

	STRCMP_EQUAL("Hello World",received_message);
 8007048:	f00d fcfc 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 800704c:	4604      	mov	r4, r0
 800704e:	6823      	ldr	r3, [r4, #0]
 8007050:	3324      	adds	r3, #36	; 0x24
 8007052:	681d      	ldr	r5, [r3, #0]
 8007054:	f00d fd06 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007058:	4603      	mov	r3, r0
 800705a:	f107 020c 	add.w	r2, r7, #12
 800705e:	9302      	str	r3, [sp, #8]
 8007060:	f44f 732b 	mov.w	r3, #684	; 0x2ac
 8007064:	9301      	str	r3, [sp, #4]
 8007066:	4b08      	ldr	r3, [pc, #32]	; (8007088 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x13c>)
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	2300      	movs	r3, #0
 800706c:	4908      	ldr	r1, [pc, #32]	; (8007090 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x144>)
 800706e:	4620      	mov	r0, r4
 8007070:	47a8      	blx	r5

}
 8007072:	bf00      	nop
 8007074:	377c      	adds	r7, #124	; 0x7c
 8007076:	46bd      	mov	sp, r7
 8007078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800707a:	bf00      	nop
 800707c:	080243fc 	.word	0x080243fc
 8007080:	08023f34 	.word	0x08023f34
 8007084:	08023f54 	.word	0x08023f54
 8007088:	08023c04 	.word	0x08023c04
 800708c:	080243cc 	.word	0x080243cc
 8007090:	08023e44 	.word	0x08023e44

08007094 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fe f800 	bl	80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80070a4:	4a03      	ldr	r2, [pc, #12]	; (80070b4 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev+0x20>)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	080271d8 	.word	0x080271d8

080070b8 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv>:
 80070b8:	b590      	push	{r4, r7, lr}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 80070c4:	4906      	ldr	r1, [pc, #24]	; (80070e0 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv+0x28>)
 80070c6:	2004      	movs	r0, #4
 80070c8:	f003 fd16 	bl	800aaf8 <_ZnwjPKci>
 80070cc:	4604      	mov	r4, r0
 80070ce:	4620      	mov	r0, r4
 80070d0:	f7ff ffe0 	bl	8007094 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>
 80070d4:	4623      	mov	r3, r4
 80070d6:	4618      	mov	r0, r3
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd90      	pop	{r4, r7, pc}
 80070de:	bf00      	nop
 80070e0:	08023c04 	.word	0x08023c04

080070e4 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>:
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f00c f8f0 	bl	80132d4 <_ZN10UtestShellC1Ev>
 80070f4:	4a03      	ldr	r2, [pc, #12]	; (8007104 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev+0x20>)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	0802712c 	.word	0x0802712c

08007108 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv>:
{
 8007108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800710a:	b095      	sub	sp, #84	; 0x54
 800710c:	af04      	add	r7, sp, #16
 800710e:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8007110:	2304      	movs	r3, #4
 8007112:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	char received_message[50] ={0};
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	f107 0310 	add.w	r3, r7, #16
 800711e:	222e      	movs	r2, #46	; 0x2e
 8007120:	2100      	movs	r1, #0
 8007122:	4618      	mov	r0, r3
 8007124:	f019 fd90 	bl	8020c48 <memset>
	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8007128:	f107 030c 	add.w	r3, r7, #12
 800712c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007130:	4618      	mov	r0, r3
 8007132:	f7fd f819 	bl	8004168 <Wait_TCP_Message>
 8007136:	4603      	mov	r3, r0
 8007138:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(response_state != IDLE)
 800713c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007140:	2b04      	cmp	r3, #4
 8007142:	d100      	bne.n	8007146 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x3e>
		response_state = Wait_TCP_Message(received_message, 1000);
 8007144:	e7f0      	b.n	8007128 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x20>
			break;
 8007146:	bf00      	nop
	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 8007148:	f00d fc7c 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 800714c:	4604      	mov	r4, r0
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	3338      	adds	r3, #56	; 0x38
 8007152:	681d      	ldr	r5, [r3, #0]
 8007154:	f897 603f 	ldrb.w	r6, [r7, #63]	; 0x3f
 8007158:	f00d fc84 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800715c:	4603      	mov	r3, r0
 800715e:	9302      	str	r3, [sp, #8]
 8007160:	f240 23bd 	movw	r3, #701	; 0x2bd
 8007164:	9301      	str	r3, [sp, #4]
 8007166:	4b05      	ldr	r3, [pc, #20]	; (800717c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x74>)
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	4b05      	ldr	r3, [pc, #20]	; (8007180 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x78>)
 800716c:	4632      	mov	r2, r6
 800716e:	2101      	movs	r1, #1
 8007170:	4620      	mov	r0, r4
 8007172:	47a8      	blx	r5

}
 8007174:	bf00      	nop
 8007176:	3744      	adds	r7, #68	; 0x44
 8007178:	46bd      	mov	sp, r7
 800717a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800717c:	08023c04 	.word	0x08023c04
 8007180:	08023f98 	.word	0x08023f98

08007184 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4618      	mov	r0, r3
 8007190:	f7fd ff88 	bl	80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007194:	4a03      	ldr	r2, [pc, #12]	; (80071a4 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev+0x20>)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	0802710c 	.word	0x0802710c

080071a8 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv>:
 80071a8:	b590      	push	{r4, r7, lr}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	f240 22c1 	movw	r2, #705	; 0x2c1
 80071b4:	4906      	ldr	r1, [pc, #24]	; (80071d0 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv+0x28>)
 80071b6:	2004      	movs	r0, #4
 80071b8:	f003 fc9e 	bl	800aaf8 <_ZnwjPKci>
 80071bc:	4604      	mov	r4, r0
 80071be:	4620      	mov	r0, r4
 80071c0:	f7ff ffe0 	bl	8007184 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>
 80071c4:	4623      	mov	r3, r4
 80071c6:	4618      	mov	r0, r3
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd90      	pop	{r4, r7, pc}
 80071ce:	bf00      	nop
 80071d0:	08023c04 	.word	0x08023c04

080071d4 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>:
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4618      	mov	r0, r3
 80071e0:	f00c f878 	bl	80132d4 <_ZN10UtestShellC1Ev>
 80071e4:	4a03      	ldr	r2, [pc, #12]	; (80071f4 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev+0x20>)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	601a      	str	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4618      	mov	r0, r3
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	08027060 	.word	0x08027060

080071f8 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv>:
{
 80071f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071fa:	b0a3      	sub	sp, #140	; 0x8c
 80071fc:	af04      	add	r7, sp, #16
 80071fe:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,13:PUMP_MOTOR=ON";		// an example string data that ESP received from server
 8007200:	4b4d      	ldr	r3, [pc, #308]	; (8007338 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x140>)
 8007202:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8007206:	461d      	mov	r5, r3
 8007208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800720a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800720c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007210:	6020      	str	r0, [r4, #0]
 8007212:	3404      	adds	r4, #4
 8007214:	8021      	strh	r1, [r4, #0]
 8007216:	f107 0356 	add.w	r3, r7, #86	; 0x56
 800721a:	2200      	movs	r2, #0
 800721c:	601a      	str	r2, [r3, #0]
 800721e:	605a      	str	r2, [r3, #4]

	Status response_state = IDLE;
 8007220:	2304      	movs	r3, #4
 8007222:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50] ={0};
 8007226:	2300      	movs	r3, #0
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	f107 0310 	add.w	r3, r7, #16
 800722e:	222e      	movs	r2, #46	; 0x2e
 8007230:	2100      	movs	r1, #0
 8007232:	4618      	mov	r0, r3
 8007234:	f019 fd08 	bl	8020c48 <memset>

	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8007238:	f107 030c 	add.w	r3, r7, #12
 800723c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007240:	4618      	mov	r0, r3
 8007242:	f7fc ff91 	bl	8004168 <Wait_TCP_Message>
 8007246:	4603      	mov	r3, r0
 8007248:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

		if(response_state != IDLE)
 800724c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8007250:	2b04      	cmp	r3, #4
 8007252:	d141      	bne.n	80072d8 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0xe0>
			break;

		for(int i=0;i<(int)strlen(response);i++)
 8007254:	2300      	movs	r3, #0
 8007256:	677b      	str	r3, [r7, #116]	; 0x74
 8007258:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800725c:	4618      	mov	r0, r3
 800725e:	f7f8 ffed 	bl	800023c <strlen>
 8007262:	4603      	mov	r3, r0
 8007264:	461a      	mov	r2, r3
 8007266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007268:	4293      	cmp	r3, r2
 800726a:	dae5      	bge.n	8007238 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x40>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 800726c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007270:	4932      	ldr	r1, [pc, #200]	; (800733c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x144>)
 8007272:	4618      	mov	r0, r3
 8007274:	f006 f803 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8007278:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800727c:	2100      	movs	r1, #0
 800727e:	4618      	mov	r0, r3
 8007280:	f004 f8d6 	bl	800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007284:	4604      	mov	r4, r0
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	330c      	adds	r3, #12
 800728a:	681d      	ldr	r5, [r3, #0]
 800728c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007290:	492b      	ldr	r1, [pc, #172]	; (8007340 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x148>)
 8007292:	4618      	mov	r0, r3
 8007294:	f005 fff3 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8007298:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800729c:	4619      	mov	r1, r3
 800729e:	4620      	mov	r0, r4
 80072a0:	47a8      	blx	r5
 80072a2:	4603      	mov	r3, r0
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	3264      	adds	r2, #100	; 0x64
 80072a8:	6812      	ldr	r2, [r2, #0]
 80072aa:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80072ae:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80072b0:	4401      	add	r1, r0
 80072b2:	7809      	ldrb	r1, [r1, #0]
 80072b4:	4618      	mov	r0, r3
 80072b6:	4790      	blx	r2
 80072b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80072bc:	4618      	mov	r0, r3
 80072be:	f006 fb96 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80072c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80072c6:	4618      	mov	r0, r3
 80072c8:	f006 fb91 	bl	800d9ee <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80072cc:	f7fc fd12 	bl	8003cf4 <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 80072d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072d2:	3301      	adds	r3, #1
 80072d4:	677b      	str	r3, [r7, #116]	; 0x74
 80072d6:	e7bf      	b.n	8007258 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x60>
			break;
 80072d8:	bf00      	nop
		}
	}

	LONGS_EQUAL(STATUS_OK,response_state);
 80072da:	f00d fbb3 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 80072de:	4604      	mov	r4, r0
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	3338      	adds	r3, #56	; 0x38
 80072e4:	681d      	ldr	r5, [r3, #0]
 80072e6:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 80072ea:	f00d fbbb 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80072ee:	4603      	mov	r3, r0
 80072f0:	9302      	str	r3, [sp, #8]
 80072f2:	f240 23d7 	movw	r3, #727	; 0x2d7
 80072f6:	9301      	str	r3, [sp, #4]
 80072f8:	4b12      	ldr	r3, [pc, #72]	; (8007344 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x14c>)
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	4b12      	ldr	r3, [pc, #72]	; (8007348 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x150>)
 80072fe:	4632      	mov	r2, r6
 8007300:	2102      	movs	r1, #2
 8007302:	4620      	mov	r0, r4
 8007304:	47a8      	blx	r5
	STRCMP_EQUAL("PUMP_MOTOR=ON",received_message);
 8007306:	f00d fb9d 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 800730a:	4604      	mov	r4, r0
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	3324      	adds	r3, #36	; 0x24
 8007310:	681d      	ldr	r5, [r3, #0]
 8007312:	f00d fba7 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007316:	4603      	mov	r3, r0
 8007318:	f107 020c 	add.w	r2, r7, #12
 800731c:	9302      	str	r3, [sp, #8]
 800731e:	f44f 7336 	mov.w	r3, #728	; 0x2d8
 8007322:	9301      	str	r3, [sp, #4]
 8007324:	4b07      	ldr	r3, [pc, #28]	; (8007344 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x14c>)
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	2300      	movs	r3, #0
 800732a:	4908      	ldr	r1, [pc, #32]	; (800734c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x154>)
 800732c:	4620      	mov	r0, r4
 800732e:	47a8      	blx	r5

}
 8007330:	bf00      	nop
 8007332:	377c      	adds	r7, #124	; 0x7c
 8007334:	46bd      	mov	sp, r7
 8007336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007338:	0802442c 	.word	0x0802442c
 800733c:	08023f34 	.word	0x08023f34
 8007340:	08023f54 	.word	0x08023f54
 8007344:	08023c04 	.word	0x08023c04
 8007348:	080243cc 	.word	0x080243cc
 800734c:	0802441c 	.word	0x0802441c

08007350 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	4a05      	ldr	r2, [pc, #20]	; (8007370 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev+0x20>)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4618      	mov	r0, r3
 8007362:	f00c f80b 	bl	801337c <_ZN10UtestShellD1Ev>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4618      	mov	r0, r3
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	08027060 	.word	0x08027060

08007374 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD0Ev>:
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7ff ffe7 	bl	8007350 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
 8007382:	211c      	movs	r1, #28
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f003 fbcb 	bl	800ab20 <_ZdlPvj>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4618      	mov	r0, r3
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>:
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	4a05      	ldr	r2, [pc, #20]	; (80073b4 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev+0x20>)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7fd fe8f 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4618      	mov	r0, r3
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	0802710c 	.word	0x0802710c

080073b8 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD0Ev>:
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7ff ffe7 	bl	8007394 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>
 80073c6:	2104      	movs	r1, #4
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f003 fba9 	bl	800ab20 <_ZdlPvj>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4618      	mov	r0, r3
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	4a05      	ldr	r2, [pc, #20]	; (80073f8 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev+0x20>)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f00b ffc7 	bl	801337c <_ZN10UtestShellD1Ev>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	0802712c 	.word	0x0802712c

080073fc <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD0Ev>:
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7ff ffe7 	bl	80073d8 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
 800740a:	211c      	movs	r1, #28
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f003 fb87 	bl	800ab20 <_ZdlPvj>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4618      	mov	r0, r3
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>:
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	4a05      	ldr	r2, [pc, #20]	; (800743c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev+0x20>)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4618      	mov	r0, r3
 800742e:	f7fd fe4b 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4618      	mov	r0, r3
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	080271d8 	.word	0x080271d8

08007440 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD0Ev>:
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7ff ffe7 	bl	800741c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>
 800744e:	2104      	movs	r1, #4
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f003 fb65 	bl	800ab20 <_ZdlPvj>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	4a05      	ldr	r2, [pc, #20]	; (8007480 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev+0x20>)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4618      	mov	r0, r3
 8007472:	f00b ff83 	bl	801337c <_ZN10UtestShellD1Ev>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4618      	mov	r0, r3
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	080271f8 	.word	0x080271f8

08007484 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD0Ev>:
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f7ff ffe7 	bl	8007460 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
 8007492:	211c      	movs	r1, #28
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f003 fb43 	bl	800ab20 <_ZdlPvj>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>:
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	4a05      	ldr	r2, [pc, #20]	; (80074c4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev+0x20>)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fd fe07 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	080272a4 	.word	0x080272a4

080074c8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD0Ev>:
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7ff ffe7 	bl	80074a4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>
 80074d6:	2104      	movs	r1, #4
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f003 fb21 	bl	800ab20 <_ZdlPvj>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	4a05      	ldr	r2, [pc, #20]	; (8007508 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev+0x20>)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f00b ff3f 	bl	801337c <_ZN10UtestShellD1Ev>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4618      	mov	r0, r3
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	080272c4 	.word	0x080272c4

0800750c <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD0Ev>:
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7ff ffe7 	bl	80074e8 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
 800751a:	211c      	movs	r1, #28
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f003 faff 	bl	800ab20 <_ZdlPvj>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4618      	mov	r0, r3
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>:
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	4a05      	ldr	r2, [pc, #20]	; (800754c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev+0x20>)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	601a      	str	r2, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4618      	mov	r0, r3
 800753e:	f7fd fdc3 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4618      	mov	r0, r3
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	08027370 	.word	0x08027370

08007550 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD0Ev>:
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7ff ffe7 	bl	800752c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>
 800755e:	2104      	movs	r1, #4
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f003 fadd 	bl	800ab20 <_ZdlPvj>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4618      	mov	r0, r3
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	4a05      	ldr	r2, [pc, #20]	; (8007590 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev+0x20>)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4618      	mov	r0, r3
 8007582:	f00b fefb 	bl	801337c <_ZN10UtestShellD1Ev>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4618      	mov	r0, r3
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	08027390 	.word	0x08027390

08007594 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD0Ev>:
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7ff ffe7 	bl	8007570 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
 80075a2:	211c      	movs	r1, #28
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f003 fabb 	bl	800ab20 <_ZdlPvj>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>:
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	4a05      	ldr	r2, [pc, #20]	; (80075d4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev+0x20>)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fd fd7f 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4618      	mov	r0, r3
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	0802743c 	.word	0x0802743c

080075d8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD0Ev>:
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7ff ffe7 	bl	80075b4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>
 80075e6:	2104      	movs	r1, #4
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f003 fa99 	bl	800ab20 <_ZdlPvj>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4618      	mov	r0, r3
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	4a05      	ldr	r2, [pc, #20]	; (8007618 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev+0x20>)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4618      	mov	r0, r3
 800760a:	f00b feb7 	bl	801337c <_ZN10UtestShellD1Ev>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4618      	mov	r0, r3
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	0802745c 	.word	0x0802745c

0800761c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD0Ev>:
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7ff ffe7 	bl	80075f8 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
 800762a:	211c      	movs	r1, #28
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f003 fa77 	bl	800ab20 <_ZdlPvj>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4618      	mov	r0, r3
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>:
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	4a05      	ldr	r2, [pc, #20]	; (800765c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev+0x20>)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4618      	mov	r0, r3
 800764e:	f7fd fd3b 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4618      	mov	r0, r3
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	08027508 	.word	0x08027508

08007660 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD0Ev>:
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff ffe7 	bl	800763c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>
 800766e:	2104      	movs	r1, #4
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f003 fa55 	bl	800ab20 <_ZdlPvj>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	4a05      	ldr	r2, [pc, #20]	; (80076a0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev+0x20>)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4618      	mov	r0, r3
 8007692:	f00b fe73 	bl	801337c <_ZN10UtestShellD1Ev>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4618      	mov	r0, r3
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	08027528 	.word	0x08027528

080076a4 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD0Ev>:
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7ff ffe7 	bl	8007680 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
 80076b2:	211c      	movs	r1, #28
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f003 fa33 	bl	800ab20 <_ZdlPvj>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>:
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	4a05      	ldr	r2, [pc, #20]	; (80076e4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev+0x20>)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fd fcf7 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	080275d4 	.word	0x080275d4

080076e8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD0Ev>:
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7ff ffe7 	bl	80076c4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>
 80076f6:	2104      	movs	r1, #4
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f003 fa11 	bl	800ab20 <_ZdlPvj>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4618      	mov	r0, r3
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	4a05      	ldr	r2, [pc, #20]	; (8007728 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev+0x20>)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4618      	mov	r0, r3
 800771a:	f00b fe2f 	bl	801337c <_ZN10UtestShellD1Ev>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4618      	mov	r0, r3
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	080275f4 	.word	0x080275f4

0800772c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD0Ev>:
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7ff ffe7 	bl	8007708 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
 800773a:	211c      	movs	r1, #28
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f003 f9ef 	bl	800ab20 <_ZdlPvj>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>:
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	4a05      	ldr	r2, [pc, #20]	; (800776c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev+0x20>)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4618      	mov	r0, r3
 800775e:	f7fd fcb3 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4618      	mov	r0, r3
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	080276a0 	.word	0x080276a0

08007770 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD0Ev>:
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7ff ffe7 	bl	800774c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>
 800777e:	2104      	movs	r1, #4
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f003 f9cd 	bl	800ab20 <_ZdlPvj>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4618      	mov	r0, r3
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Command_Process_Test)
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	4a05      	ldr	r2, [pc, #20]	; (80077b0 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev+0x20>)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f00b fdeb 	bl	801337c <_ZN10UtestShellD1Ev>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4618      	mov	r0, r3
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	080276c0 	.word	0x080276c0

080077b4 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD0Ev>:
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7ff ffe7 	bl	8007790 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
 80077c2:	211c      	movs	r1, #28
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f003 f9ab 	bl	800ab20 <_ZdlPvj>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4618      	mov	r0, r3
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>:
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	4a05      	ldr	r2, [pc, #20]	; (80077f4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev+0x20>)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fd fc6f 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	0802776c 	.word	0x0802776c

080077f8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD0Ev>:
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff ffe7 	bl	80077d4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>
 8007806:	2104      	movs	r1, #4
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f003 f989 	bl	800ab20 <_ZdlPvj>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	4a05      	ldr	r2, [pc, #20]	; (8007838 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev+0x20>)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4618      	mov	r0, r3
 800782a:	f00b fda7 	bl	801337c <_ZN10UtestShellD1Ev>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	0802778c 	.word	0x0802778c

0800783c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD0Ev>:
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7ff ffe7 	bl	8007818 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
 800784a:	211c      	movs	r1, #28
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f003 f967 	bl	800ab20 <_ZdlPvj>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4618      	mov	r0, r3
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>:
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	4a05      	ldr	r2, [pc, #20]	; (800787c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev+0x20>)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4618      	mov	r0, r3
 800786e:	f7fd fc2b 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4618      	mov	r0, r3
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	08027838 	.word	0x08027838

08007880 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD0Ev>:
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7ff ffe7 	bl	800785c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>
 800788e:	2104      	movs	r1, #4
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f003 f945 	bl	800ab20 <_ZdlPvj>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	4a05      	ldr	r2, [pc, #20]	; (80078c0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f00b fd63 	bl	801337c <_ZN10UtestShellD1Ev>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4618      	mov	r0, r3
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	08027858 	.word	0x08027858

080078c4 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD0Ev>:
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff ffe7 	bl	80078a0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
 80078d2:	211c      	movs	r1, #28
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f003 f923 	bl	800ab20 <_ZdlPvj>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4618      	mov	r0, r3
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>:
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	4a05      	ldr	r2, [pc, #20]	; (8007904 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7fd fbe7 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4618      	mov	r0, r3
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	08027904 	.word	0x08027904

08007908 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD0Ev>:
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7ff ffe7 	bl	80078e4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>
 8007916:	2104      	movs	r1, #4
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f003 f901 	bl	800ab20 <_ZdlPvj>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4618      	mov	r0, r3
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	4a05      	ldr	r2, [pc, #20]	; (8007948 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4618      	mov	r0, r3
 800793a:	f00b fd1f 	bl	801337c <_ZN10UtestShellD1Ev>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4618      	mov	r0, r3
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	08027924 	.word	0x08027924

0800794c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff ffe7 	bl	8007928 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 800795a:	211c      	movs	r1, #28
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f003 f8df 	bl	800ab20 <_ZdlPvj>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	4a05      	ldr	r2, [pc, #20]	; (800798c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	601a      	str	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4618      	mov	r0, r3
 800797e:	f7fd fba3 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4618      	mov	r0, r3
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	080279d0 	.word	0x080279d0

08007990 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7ff ffe7 	bl	800796c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 800799e:	2104      	movs	r1, #4
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f003 f8bd 	bl	800ab20 <_ZdlPvj>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4618      	mov	r0, r3
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	4a05      	ldr	r2, [pc, #20]	; (80079d0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f00b fcdb 	bl	801337c <_ZN10UtestShellD1Ev>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4618      	mov	r0, r3
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	080279f0 	.word	0x080279f0

080079d4 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7ff ffe7 	bl	80079b0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 80079e2:	211c      	movs	r1, #28
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f003 f89b 	bl	800ab20 <_ZdlPvj>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	4a05      	ldr	r2, [pc, #20]	; (8007a14 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fd fb5f 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	08027a9c 	.word	0x08027a9c

08007a18 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7ff ffe7 	bl	80079f4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 8007a26:	2104      	movs	r1, #4
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f003 f879 	bl	800ab20 <_ZdlPvj>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4618      	mov	r0, r3
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	4a05      	ldr	r2, [pc, #20]	; (8007a58 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	601a      	str	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f00b fc97 	bl	801337c <_ZN10UtestShellD1Ev>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4618      	mov	r0, r3
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	08027abc 	.word	0x08027abc

08007a5c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7ff ffe7 	bl	8007a38 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 8007a6a:	211c      	movs	r1, #28
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f003 f857 	bl	800ab20 <_ZdlPvj>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4618      	mov	r0, r3
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	4a05      	ldr	r2, [pc, #20]	; (8007a9c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fd fb1b 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4618      	mov	r0, r3
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	08027b68 	.word	0x08027b68

08007aa0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7ff ffe7 	bl	8007a7c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 8007aae:	2104      	movs	r1, #4
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f003 f835 	bl	800ab20 <_ZdlPvj>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	4a05      	ldr	r2, [pc, #20]	; (8007ae0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f00b fc53 	bl	801337c <_ZN10UtestShellD1Ev>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	08027b88 	.word	0x08027b88

08007ae4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f7ff ffe7 	bl	8007ac0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 8007af2:	211c      	movs	r1, #28
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f003 f813 	bl	800ab20 <_ZdlPvj>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	4a05      	ldr	r2, [pc, #20]	; (8007b24 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	601a      	str	r2, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7fd fad7 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	08027c34 	.word	0x08027c34

08007b28 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7ff ffe7 	bl	8007b04 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 8007b36:	2104      	movs	r1, #4
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f002 fff1 	bl	800ab20 <_ZdlPvj>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4618      	mov	r0, r3
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	4a05      	ldr	r2, [pc, #20]	; (8007b68 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	601a      	str	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f00b fc0f 	bl	801337c <_ZN10UtestShellD1Ev>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4618      	mov	r0, r3
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	08027c54 	.word	0x08027c54

08007b6c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff ffe7 	bl	8007b48 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 8007b7a:	211c      	movs	r1, #28
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f002 ffcf 	bl	800ab20 <_ZdlPvj>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4618      	mov	r0, r3
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	4a05      	ldr	r2, [pc, #20]	; (8007bac <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	601a      	str	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fd fa93 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	08027d00 	.word	0x08027d00

08007bb0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff ffe7 	bl	8007b8c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 8007bbe:	2104      	movs	r1, #4
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f002 ffad 	bl	800ab20 <_ZdlPvj>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	4a05      	ldr	r2, [pc, #20]	; (8007bf0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f00b fbcb 	bl	801337c <_ZN10UtestShellD1Ev>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4618      	mov	r0, r3
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	08027d20 	.word	0x08027d20

08007bf4 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7ff ffe7 	bl	8007bd0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 8007c02:	211c      	movs	r1, #28
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f002 ff8b 	bl	800ab20 <_ZdlPvj>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	4a05      	ldr	r2, [pc, #20]	; (8007c34 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fd fa4f 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	08027dcc 	.word	0x08027dcc

08007c38 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7ff ffe7 	bl	8007c14 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 8007c46:	2104      	movs	r1, #4
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f002 ff69 	bl	800ab20 <_ZdlPvj>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	4a05      	ldr	r2, [pc, #20]	; (8007c78 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f00b fb87 	bl	801337c <_ZN10UtestShellD1Ev>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4618      	mov	r0, r3
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	08027dec 	.word	0x08027dec

08007c7c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7ff ffe7 	bl	8007c58 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 8007c8a:	211c      	movs	r1, #28
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f002 ff47 	bl	800ab20 <_ZdlPvj>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4618      	mov	r0, r3
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	4a05      	ldr	r2, [pc, #20]	; (8007cbc <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fd fa0b 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	08027e98 	.word	0x08027e98

08007cc0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff ffe7 	bl	8007c9c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 8007cce:	2104      	movs	r1, #4
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f002 ff25 	bl	800ab20 <_ZdlPvj>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	4a05      	ldr	r2, [pc, #20]	; (8007d00 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f00b fb43 	bl	801337c <_ZN10UtestShellD1Ev>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	08027eb8 	.word	0x08027eb8

08007d04 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7ff ffe7 	bl	8007ce0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 8007d12:	211c      	movs	r1, #28
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f002 ff03 	bl	800ab20 <_ZdlPvj>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	4a05      	ldr	r2, [pc, #20]	; (8007d44 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fd f9c7 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	08027f64 	.word	0x08027f64

08007d48 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff ffe7 	bl	8007d24 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8007d56:	2104      	movs	r1, #4
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f002 fee1 	bl	800ab20 <_ZdlPvj>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4618      	mov	r0, r3
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	4a05      	ldr	r2, [pc, #20]	; (8007d88 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f00b faff 	bl	801337c <_ZN10UtestShellD1Ev>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4618      	mov	r0, r3
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	08027f84 	.word	0x08027f84

08007d8c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7ff ffe7 	bl	8007d68 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8007d9a:	211c      	movs	r1, #28
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f002 febf 	bl	800ab20 <_ZdlPvj>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4618      	mov	r0, r3
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	4a05      	ldr	r2, [pc, #20]	; (8007dcc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	601a      	str	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fd f983 	bl	80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	08028030 	.word	0x08028030

08007dd0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7ff ffe7 	bl	8007dac <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 8007dde:	2104      	movs	r1, #4
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f002 fe9d 	bl	800ab20 <_ZdlPvj>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4618      	mov	r0, r3
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	4a05      	ldr	r2, [pc, #20]	; (8007e10 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4618      	mov	r0, r3
 8007e02:	f00b fabb 	bl	801337c <_ZN10UtestShellD1Ev>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	08028070 	.word	0x08028070

08007e14 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7ff ffe7 	bl	8007df0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 8007e22:	211c      	movs	r1, #28
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f002 fe7b 	bl	800ab20 <_ZdlPvj>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	4a05      	ldr	r2, [pc, #20]	; (8007e54 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	601a      	str	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fc faf7 	bl	8004438 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	0802811c 	.word	0x0802811c

08007e58 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7ff ffe7 	bl	8007e34 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8007e66:	2108      	movs	r1, #8
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f002 fe59 	bl	800ab20 <_ZdlPvj>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	4a05      	ldr	r2, [pc, #20]	; (8007e98 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f00b fa77 	bl	801337c <_ZN10UtestShellD1Ev>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4618      	mov	r0, r3
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	0802813c 	.word	0x0802813c

08007e9c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff ffe7 	bl	8007e78 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8007eaa:	211c      	movs	r1, #28
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f002 fe37 	bl	800ab20 <_ZdlPvj>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	4a05      	ldr	r2, [pc, #20]	; (8007edc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fc fab3 	bl	8004438 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	080281e8 	.word	0x080281e8

08007ee0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7ff ffe7 	bl	8007ebc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 8007eee:	2108      	movs	r1, #8
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f002 fe15 	bl	800ab20 <_ZdlPvj>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	4a05      	ldr	r2, [pc, #20]	; (8007f20 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f00b fa33 	bl	801337c <_ZN10UtestShellD1Ev>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	08028208 	.word	0x08028208

08007f24 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff ffe7 	bl	8007f00 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 8007f32:	211c      	movs	r1, #28
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f002 fdf3 	bl	800ab20 <_ZdlPvj>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	4a05      	ldr	r2, [pc, #20]	; (8007f64 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	601a      	str	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fc fa6f 	bl	8004438 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	080282b4 	.word	0x080282b4

08007f68 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7ff ffe7 	bl	8007f44 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 8007f76:	2108      	movs	r1, #8
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f002 fdd1 	bl	800ab20 <_ZdlPvj>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4618      	mov	r0, r3
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	4a05      	ldr	r2, [pc, #20]	; (8007fa8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f00b f9ef 	bl	801337c <_ZN10UtestShellD1Ev>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	080282d4 	.word	0x080282d4

08007fac <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7ff ffe7 	bl	8007f88 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 8007fba:	211c      	movs	r1, #28
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f002 fdaf 	bl	800ab20 <_ZdlPvj>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	4a05      	ldr	r2, [pc, #20]	; (8007fec <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	601a      	str	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fc fa2b 	bl	8004438 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	08028380 	.word	0x08028380

08007ff0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7ff ffe7 	bl	8007fcc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 8007ffe:	2108      	movs	r1, #8
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f002 fd8d 	bl	800ab20 <_ZdlPvj>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4618      	mov	r0, r3
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	4a05      	ldr	r2, [pc, #20]	; (8008030 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4618      	mov	r0, r3
 8008022:	f00b f9ab 	bl	801337c <_ZN10UtestShellD1Ev>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4618      	mov	r0, r3
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	080283a0 	.word	0x080283a0

08008034 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7ff ffe7 	bl	8008010 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8008042:	211c      	movs	r1, #28
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f002 fd6b 	bl	800ab20 <_ZdlPvj>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4618      	mov	r0, r3
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	4a05      	ldr	r2, [pc, #20]	; (8008074 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4618      	mov	r0, r3
 8008066:	f7fc f9e7 	bl	8004438 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4618      	mov	r0, r3
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	0802844c 	.word	0x0802844c

08008078 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7ff ffe7 	bl	8008054 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 8008086:	2108      	movs	r1, #8
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f002 fd49 	bl	800ab20 <_ZdlPvj>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4618      	mov	r0, r3
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	4a05      	ldr	r2, [pc, #20]	; (80080b8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f00b f967 	bl	801337c <_ZN10UtestShellD1Ev>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4618      	mov	r0, r3
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	0802846c 	.word	0x0802846c

080080bc <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7ff ffe7 	bl	8008098 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 80080ca:	211c      	movs	r1, #28
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f002 fd27 	bl	800ab20 <_ZdlPvj>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4618      	mov	r0, r3
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	4a05      	ldr	r2, [pc, #20]	; (80080fc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fc f9a3 	bl	8004438 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4618      	mov	r0, r3
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	08028518 	.word	0x08028518

08008100 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7ff ffe7 	bl	80080dc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 800810e:	2108      	movs	r1, #8
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f002 fd05 	bl	800ab20 <_ZdlPvj>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4618      	mov	r0, r3
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	4a05      	ldr	r2, [pc, #20]	; (8008140 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4618      	mov	r0, r3
 8008132:	f00b f923 	bl	801337c <_ZN10UtestShellD1Ev>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4618      	mov	r0, r3
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	08028538 	.word	0x08028538

08008144 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7ff ffe7 	bl	8008120 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8008152:	211c      	movs	r1, #28
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f002 fce3 	bl	800ab20 <_ZdlPvj>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4618      	mov	r0, r3
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	4a05      	ldr	r2, [pc, #20]	; (8008184 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	601a      	str	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4618      	mov	r0, r3
 8008176:	f7fc f95f 	bl	8004438 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4618      	mov	r0, r3
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	080285e4 	.word	0x080285e4

08008188 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7ff ffe7 	bl	8008164 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 8008196:	2108      	movs	r1, #8
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f002 fcc1 	bl	800ab20 <_ZdlPvj>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4618      	mov	r0, r3
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	4a05      	ldr	r2, [pc, #20]	; (80081c8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f00b f8df 	bl	801337c <_ZN10UtestShellD1Ev>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4618      	mov	r0, r3
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	08028604 	.word	0x08028604

080081cc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7ff ffe7 	bl	80081a8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 80081da:	211c      	movs	r1, #28
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f002 fc9f 	bl	800ab20 <_ZdlPvj>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4618      	mov	r0, r3
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	4a05      	ldr	r2, [pc, #20]	; (800820c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fc f91b 	bl	8004438 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4618      	mov	r0, r3
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	080286b0 	.word	0x080286b0

08008210 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7ff ffe7 	bl	80081ec <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 800821e:	2108      	movs	r1, #8
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f002 fc7d 	bl	800ab20 <_ZdlPvj>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4618      	mov	r0, r3
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	4a05      	ldr	r2, [pc, #20]	; (8008250 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4618      	mov	r0, r3
 8008242:	f00b f89b 	bl	801337c <_ZN10UtestShellD1Ev>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4618      	mov	r0, r3
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	080286d0 	.word	0x080286d0

08008254 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7ff ffe7 	bl	8008230 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 8008262:	211c      	movs	r1, #28
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f002 fc5b 	bl	800ab20 <_ZdlPvj>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4618      	mov	r0, r3
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	4a05      	ldr	r2, [pc, #20]	; (8008294 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4618      	mov	r0, r3
 8008286:	f7fc f8d7 	bl	8004438 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4618      	mov	r0, r3
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	0802877c 	.word	0x0802877c

08008298 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7ff ffe7 	bl	8008274 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 80082a6:	2108      	movs	r1, #8
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f002 fc39 	bl	800ab20 <_ZdlPvj>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4618      	mov	r0, r3
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <_Z41__static_initialization_and_destruction_0ii>:
}
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af02      	add	r7, sp, #8
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	f040 8224 	bne.w	8008712 <_Z41__static_initialization_and_destruction_0ii+0x45a>
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082d0:	4293      	cmp	r3, r2
 80082d2:	f040 821e 	bne.w	8008712 <_Z41__static_initialization_and_destruction_0ii+0x45a>
TEST(RingBuffer_Test_Group, InitTest)
 80082d6:	489f      	ldr	r0, [pc, #636]	; (8008554 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 80082d8:	f7fc f8fc 	bl	80044d4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 80082dc:	2329      	movs	r3, #41	; 0x29
 80082de:	9301      	str	r3, [sp, #4]
 80082e0:	4b9d      	ldr	r3, [pc, #628]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	4b9d      	ldr	r3, [pc, #628]	; (800855c <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 80082e6:	4a9e      	ldr	r2, [pc, #632]	; (8008560 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80082e8:	499a      	ldr	r1, [pc, #616]	; (8008554 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 80082ea:	489e      	ldr	r0, [pc, #632]	; (8008564 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80082ec:	f00c fe42 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 80082f0:	489d      	ldr	r0, [pc, #628]	; (8008568 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80082f2:	f7fc f9a3 	bl	800463c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 80082f6:	2333      	movs	r3, #51	; 0x33
 80082f8:	9301      	str	r3, [sp, #4]
 80082fa:	4b97      	ldr	r3, [pc, #604]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	4b9b      	ldr	r3, [pc, #620]	; (800856c <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8008300:	4a97      	ldr	r2, [pc, #604]	; (8008560 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008302:	4999      	ldr	r1, [pc, #612]	; (8008568 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8008304:	489a      	ldr	r0, [pc, #616]	; (8008570 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8008306:	f00c fe35 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800830a:	489a      	ldr	r0, [pc, #616]	; (8008574 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800830c:	f7fc fa20 	bl	8004750 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8008310:	233d      	movs	r3, #61	; 0x3d
 8008312:	9301      	str	r3, [sp, #4]
 8008314:	4b90      	ldr	r3, [pc, #576]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	4b97      	ldr	r3, [pc, #604]	; (8008578 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800831a:	4a91      	ldr	r2, [pc, #580]	; (8008560 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800831c:	4995      	ldr	r1, [pc, #596]	; (8008574 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800831e:	4897      	ldr	r0, [pc, #604]	; (800857c <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8008320:	f00c fe28 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8008324:	4896      	ldr	r0, [pc, #600]	; (8008580 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8008326:	f7fc fa9b 	bl	8004860 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 800832a:	2348      	movs	r3, #72	; 0x48
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	4b8a      	ldr	r3, [pc, #552]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	4b94      	ldr	r3, [pc, #592]	; (8008584 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8008334:	4a8a      	ldr	r2, [pc, #552]	; (8008560 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008336:	4992      	ldr	r1, [pc, #584]	; (8008580 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8008338:	4893      	ldr	r0, [pc, #588]	; (8008588 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 800833a:	f00c fe1b 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800833e:	4893      	ldr	r0, [pc, #588]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8008340:	f7fc fafa 	bl	8004938 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8008344:	2351      	movs	r3, #81	; 0x51
 8008346:	9301      	str	r3, [sp, #4]
 8008348:	4b83      	ldr	r3, [pc, #524]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	4b90      	ldr	r3, [pc, #576]	; (8008590 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 800834e:	4a84      	ldr	r2, [pc, #528]	; (8008560 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008350:	498e      	ldr	r1, [pc, #568]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8008352:	4890      	ldr	r0, [pc, #576]	; (8008594 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8008354:	f00c fe0e 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8008358:	488f      	ldr	r0, [pc, #572]	; (8008598 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 800835a:	f7fc fb79 	bl	8004a50 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 800835e:	2361      	movs	r3, #97	; 0x61
 8008360:	9301      	str	r3, [sp, #4]
 8008362:	4b7d      	ldr	r3, [pc, #500]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	4b8d      	ldr	r3, [pc, #564]	; (800859c <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8008368:	4a7d      	ldr	r2, [pc, #500]	; (8008560 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800836a:	498b      	ldr	r1, [pc, #556]	; (8008598 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 800836c:	488c      	ldr	r0, [pc, #560]	; (80085a0 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 800836e:	f00c fe01 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8008372:	488c      	ldr	r0, [pc, #560]	; (80085a4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8008374:	f7fc fc2a 	bl	8004bcc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 8008378:	2376      	movs	r3, #118	; 0x76
 800837a:	9301      	str	r3, [sp, #4]
 800837c:	4b76      	ldr	r3, [pc, #472]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	4b89      	ldr	r3, [pc, #548]	; (80085a8 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8008382:	4a77      	ldr	r2, [pc, #476]	; (8008560 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008384:	4987      	ldr	r1, [pc, #540]	; (80085a4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8008386:	4889      	ldr	r0, [pc, #548]	; (80085ac <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8008388:	f00c fdf4 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 800838c:	4888      	ldr	r0, [pc, #544]	; (80085b0 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 800838e:	f7fc fc83 	bl	8004c98 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 8008392:	237d      	movs	r3, #125	; 0x7d
 8008394:	9301      	str	r3, [sp, #4]
 8008396:	4b70      	ldr	r3, [pc, #448]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	4b86      	ldr	r3, [pc, #536]	; (80085b4 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800839c:	4a70      	ldr	r2, [pc, #448]	; (8008560 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800839e:	4984      	ldr	r1, [pc, #528]	; (80085b0 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80083a0:	4885      	ldr	r0, [pc, #532]	; (80085b8 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80083a2:	f00c fde7 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 80083a6:	4885      	ldr	r0, [pc, #532]	; (80085bc <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80083a8:	f7fc fd60 	bl	8004e6c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 80083ac:	2385      	movs	r3, #133	; 0x85
 80083ae:	9301      	str	r3, [sp, #4]
 80083b0:	4b69      	ldr	r3, [pc, #420]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	4b82      	ldr	r3, [pc, #520]	; (80085c0 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 80083b6:	4a6a      	ldr	r2, [pc, #424]	; (8008560 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80083b8:	4980      	ldr	r1, [pc, #512]	; (80085bc <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80083ba:	4882      	ldr	r0, [pc, #520]	; (80085c4 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80083bc:	f00c fdda 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80083c0:	4881      	ldr	r0, [pc, #516]	; (80085c8 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80083c2:	f7fc fec9 	bl	8005158 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 80083c6:	23c0      	movs	r3, #192	; 0xc0
 80083c8:	9301      	str	r3, [sp, #4]
 80083ca:	4b63      	ldr	r3, [pc, #396]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	4b7f      	ldr	r3, [pc, #508]	; (80085cc <_Z41__static_initialization_and_destruction_0ii+0x314>)
 80083d0:	4a7f      	ldr	r2, [pc, #508]	; (80085d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80083d2:	497d      	ldr	r1, [pc, #500]	; (80085c8 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80083d4:	487f      	ldr	r0, [pc, #508]	; (80085d4 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 80083d6:	f00c fdcd 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80083da:	487f      	ldr	r0, [pc, #508]	; (80085d8 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80083dc:	f7fc ff26 	bl	800522c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 80083e0:	23d2      	movs	r3, #210	; 0xd2
 80083e2:	9301      	str	r3, [sp, #4]
 80083e4:	4b5c      	ldr	r3, [pc, #368]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	4b7c      	ldr	r3, [pc, #496]	; (80085dc <_Z41__static_initialization_and_destruction_0ii+0x324>)
 80083ea:	4a79      	ldr	r2, [pc, #484]	; (80085d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80083ec:	497a      	ldr	r1, [pc, #488]	; (80085d8 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80083ee:	487c      	ldr	r0, [pc, #496]	; (80085e0 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 80083f0:	f00c fdc0 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80083f4:	487b      	ldr	r0, [pc, #492]	; (80085e4 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 80083f6:	f7fc ffdd 	bl	80053b4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 80083fa:	23de      	movs	r3, #222	; 0xde
 80083fc:	9301      	str	r3, [sp, #4]
 80083fe:	4b56      	ldr	r3, [pc, #344]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	4b79      	ldr	r3, [pc, #484]	; (80085e8 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8008404:	4a72      	ldr	r2, [pc, #456]	; (80085d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008406:	4977      	ldr	r1, [pc, #476]	; (80085e4 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8008408:	4878      	ldr	r0, [pc, #480]	; (80085ec <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800840a:	f00c fdb3 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 800840e:	4878      	ldr	r0, [pc, #480]	; (80085f0 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8008410:	f7fd f87a 	bl	8005508 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 8008414:	23ed      	movs	r3, #237	; 0xed
 8008416:	9301      	str	r3, [sp, #4]
 8008418:	4b4f      	ldr	r3, [pc, #316]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	4b75      	ldr	r3, [pc, #468]	; (80085f4 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 800841e:	4a6c      	ldr	r2, [pc, #432]	; (80085d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008420:	4973      	ldr	r1, [pc, #460]	; (80085f0 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8008422:	4875      	ldr	r0, [pc, #468]	; (80085f8 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8008424:	f00c fda6 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8008428:	4874      	ldr	r0, [pc, #464]	; (80085fc <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800842a:	f7fd f91b 	bl	8005664 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 800842e:	23fe      	movs	r3, #254	; 0xfe
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	4b49      	ldr	r3, [pc, #292]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	4b72      	ldr	r3, [pc, #456]	; (8008600 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8008438:	4a65      	ldr	r2, [pc, #404]	; (80085d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800843a:	4970      	ldr	r1, [pc, #448]	; (80085fc <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800843c:	4871      	ldr	r0, [pc, #452]	; (8008604 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800843e:	f00c fd99 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8008442:	4871      	ldr	r0, [pc, #452]	; (8008608 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8008444:	f7fd f97a 	bl	800573c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 8008448:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800844c:	9301      	str	r3, [sp, #4]
 800844e:	4b42      	ldr	r3, [pc, #264]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	4b6e      	ldr	r3, [pc, #440]	; (800860c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8008454:	4a5e      	ldr	r2, [pc, #376]	; (80085d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008456:	496c      	ldr	r1, [pc, #432]	; (8008608 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8008458:	486d      	ldr	r0, [pc, #436]	; (8008610 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 800845a:	f00c fd8b 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 800845e:	486d      	ldr	r0, [pc, #436]	; (8008614 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8008460:	f7fd fa2a 	bl	80058b8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 8008464:	f44f 7392 	mov.w	r3, #292	; 0x124
 8008468:	9301      	str	r3, [sp, #4]
 800846a:	4b3b      	ldr	r3, [pc, #236]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	4b6a      	ldr	r3, [pc, #424]	; (8008618 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8008470:	4a57      	ldr	r2, [pc, #348]	; (80085d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008472:	4968      	ldr	r1, [pc, #416]	; (8008614 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8008474:	4869      	ldr	r0, [pc, #420]	; (800861c <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8008476:	f00c fd7d 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 800847a:	4869      	ldr	r0, [pc, #420]	; (8008620 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 800847c:	f7fd face 	bl	8005a1c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 8008480:	f240 133b 	movw	r3, #315	; 0x13b
 8008484:	9301      	str	r3, [sp, #4]
 8008486:	4b34      	ldr	r3, [pc, #208]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	4b66      	ldr	r3, [pc, #408]	; (8008624 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800848c:	4a50      	ldr	r2, [pc, #320]	; (80085d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800848e:	4964      	ldr	r1, [pc, #400]	; (8008620 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8008490:	4865      	ldr	r0, [pc, #404]	; (8008628 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8008492:	f00c fd6f 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8008496:	4865      	ldr	r0, [pc, #404]	; (800862c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8008498:	f7fd fbfe 	bl	8005c98 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 800849c:	f240 1367 	movw	r3, #359	; 0x167
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	4b2d      	ldr	r3, [pc, #180]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	4b62      	ldr	r3, [pc, #392]	; (8008630 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 80084a8:	4a49      	ldr	r2, [pc, #292]	; (80085d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80084aa:	4960      	ldr	r1, [pc, #384]	; (800862c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80084ac:	4861      	ldr	r0, [pc, #388]	; (8008634 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 80084ae:	f00c fd61 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80084b2:	4861      	ldr	r0, [pc, #388]	; (8008638 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 80084b4:	f7fd fd2a 	bl	8005f0c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>
 80084b8:	f240 1393 	movw	r3, #403	; 0x193
 80084bc:	9301      	str	r3, [sp, #4]
 80084be:	4b26      	ldr	r3, [pc, #152]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	4b5e      	ldr	r3, [pc, #376]	; (800863c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80084c4:	4a42      	ldr	r2, [pc, #264]	; (80085d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80084c6:	495c      	ldr	r1, [pc, #368]	; (8008638 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 80084c8:	485d      	ldr	r0, [pc, #372]	; (8008640 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80084ca:	f00c fd53 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80084ce:	485d      	ldr	r0, [pc, #372]	; (8008644 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80084d0:	f7fd fdc6 	bl	8006060 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>
 80084d4:	f240 13a5 	movw	r3, #421	; 0x1a5
 80084d8:	9301      	str	r3, [sp, #4]
 80084da:	4b1f      	ldr	r3, [pc, #124]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	4b5a      	ldr	r3, [pc, #360]	; (8008648 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80084e0:	4a3b      	ldr	r2, [pc, #236]	; (80085d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80084e2:	4958      	ldr	r1, [pc, #352]	; (8008644 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80084e4:	4859      	ldr	r0, [pc, #356]	; (800864c <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80084e6:	f00c fd45 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Command_Process_Test)
 80084ea:	4859      	ldr	r0, [pc, #356]	; (8008650 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80084ec:	f7fd fe9e 	bl	800622c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>
 80084f0:	f240 13bd 	movw	r3, #445	; 0x1bd
 80084f4:	9301      	str	r3, [sp, #4]
 80084f6:	4b18      	ldr	r3, [pc, #96]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	4b56      	ldr	r3, [pc, #344]	; (8008654 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80084fc:	4a34      	ldr	r2, [pc, #208]	; (80085d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80084fe:	4954      	ldr	r1, [pc, #336]	; (8008650 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8008500:	4855      	ldr	r0, [pc, #340]	; (8008658 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8008502:	f00c fd37 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8008506:	4855      	ldr	r0, [pc, #340]	; (800865c <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8008508:	f7fd ffb4 	bl	8006474 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>
 800850c:	f240 13e9 	movw	r3, #489	; 0x1e9
 8008510:	9301      	str	r3, [sp, #4]
 8008512:	4b11      	ldr	r3, [pc, #68]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	4b52      	ldr	r3, [pc, #328]	; (8008660 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8008518:	4a2d      	ldr	r2, [pc, #180]	; (80085d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800851a:	4950      	ldr	r1, [pc, #320]	; (800865c <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800851c:	4851      	ldr	r0, [pc, #324]	; (8008664 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800851e:	f00c fd29 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8008522:	4851      	ldr	r0, [pc, #324]	; (8008668 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8008524:	f7fe f8dc 	bl	80066e0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>
 8008528:	f240 2315 	movw	r3, #533	; 0x215
 800852c:	9301      	str	r3, [sp, #4]
 800852e:	4b0a      	ldr	r3, [pc, #40]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	4b4e      	ldr	r3, [pc, #312]	; (800866c <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8008534:	4a26      	ldr	r2, [pc, #152]	; (80085d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008536:	494c      	ldr	r1, [pc, #304]	; (8008668 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8008538:	484d      	ldr	r0, [pc, #308]	; (8008670 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 800853a:	f00c fd1b 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 800853e:	484d      	ldr	r0, [pc, #308]	; (8008674 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8008540:	f7fe f984 	bl	800684c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>
 8008544:	f44f 730c 	mov.w	r3, #560	; 0x230
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	4b03      	ldr	r3, [pc, #12]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	4b4a      	ldr	r3, [pc, #296]	; (8008678 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8008550:	e094      	b.n	800867c <_Z41__static_initialization_and_destruction_0ii+0x3c4>
 8008552:	bf00      	nop
 8008554:	20000380 	.word	0x20000380
 8008558:	08023c04 	.word	0x08023c04
 800855c:	0802444c 	.word	0x0802444c
 8008560:	08024458 	.word	0x08024458
 8008564:	2000039c 	.word	0x2000039c
 8008568:	200003a0 	.word	0x200003a0
 800856c:	08024470 	.word	0x08024470
 8008570:	200003bc 	.word	0x200003bc
 8008574:	200003c0 	.word	0x200003c0
 8008578:	08024480 	.word	0x08024480
 800857c:	200003dc 	.word	0x200003dc
 8008580:	200003e0 	.word	0x200003e0
 8008584:	08024494 	.word	0x08024494
 8008588:	200003fc 	.word	0x200003fc
 800858c:	20000400 	.word	0x20000400
 8008590:	080244a4 	.word	0x080244a4
 8008594:	2000041c 	.word	0x2000041c
 8008598:	20000420 	.word	0x20000420
 800859c:	080244bc 	.word	0x080244bc
 80085a0:	2000043c 	.word	0x2000043c
 80085a4:	20000440 	.word	0x20000440
 80085a8:	080244cc 	.word	0x080244cc
 80085ac:	2000045c 	.word	0x2000045c
 80085b0:	20000460 	.word	0x20000460
 80085b4:	080244dc 	.word	0x080244dc
 80085b8:	2000047c 	.word	0x2000047c
 80085bc:	20000480 	.word	0x20000480
 80085c0:	080244e8 	.word	0x080244e8
 80085c4:	2000049c 	.word	0x2000049c
 80085c8:	200004a8 	.word	0x200004a8
 80085cc:	080244f8 	.word	0x080244f8
 80085d0:	08024508 	.word	0x08024508
 80085d4:	200004c4 	.word	0x200004c4
 80085d8:	200004c8 	.word	0x200004c8
 80085dc:	08024520 	.word	0x08024520
 80085e0:	200004e4 	.word	0x200004e4
 80085e4:	200004e8 	.word	0x200004e8
 80085e8:	08024538 	.word	0x08024538
 80085ec:	20000504 	.word	0x20000504
 80085f0:	20000508 	.word	0x20000508
 80085f4:	08024554 	.word	0x08024554
 80085f8:	20000524 	.word	0x20000524
 80085fc:	20000528 	.word	0x20000528
 8008600:	08024568 	.word	0x08024568
 8008604:	20000544 	.word	0x20000544
 8008608:	20000548 	.word	0x20000548
 800860c:	08024584 	.word	0x08024584
 8008610:	20000564 	.word	0x20000564
 8008614:	20000568 	.word	0x20000568
 8008618:	08024598 	.word	0x08024598
 800861c:	20000584 	.word	0x20000584
 8008620:	20000588 	.word	0x20000588
 8008624:	080245b4 	.word	0x080245b4
 8008628:	200005a4 	.word	0x200005a4
 800862c:	200005a8 	.word	0x200005a8
 8008630:	080245cc 	.word	0x080245cc
 8008634:	200005c4 	.word	0x200005c4
 8008638:	200005c8 	.word	0x200005c8
 800863c:	080245e0 	.word	0x080245e0
 8008640:	200005e4 	.word	0x200005e4
 8008644:	200005e8 	.word	0x200005e8
 8008648:	08024600 	.word	0x08024600
 800864c:	20000604 	.word	0x20000604
 8008650:	20000608 	.word	0x20000608
 8008654:	08024618 	.word	0x08024618
 8008658:	20000624 	.word	0x20000624
 800865c:	20000628 	.word	0x20000628
 8008660:	08024630 	.word	0x08024630
 8008664:	20000644 	.word	0x20000644
 8008668:	20000648 	.word	0x20000648
 800866c:	08024644 	.word	0x08024644
 8008670:	20000664 	.word	0x20000664
 8008674:	20000668 	.word	0x20000668
 8008678:	08024660 	.word	0x08024660
 800867c:	4a83      	ldr	r2, [pc, #524]	; (800888c <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800867e:	4984      	ldr	r1, [pc, #528]	; (8008890 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 8008680:	4884      	ldr	r0, [pc, #528]	; (8008894 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8008682:	f00c fc77 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8008686:	4884      	ldr	r0, [pc, #528]	; (8008898 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 8008688:	f7fe fa16 	bl	8006ab8 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>
 800868c:	f44f 7317 	mov.w	r3, #604	; 0x25c
 8008690:	9301      	str	r3, [sp, #4]
 8008692:	4b82      	ldr	r3, [pc, #520]	; (800889c <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	4b82      	ldr	r3, [pc, #520]	; (80088a0 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 8008698:	4a7c      	ldr	r2, [pc, #496]	; (800888c <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800869a:	497f      	ldr	r1, [pc, #508]	; (8008898 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 800869c:	4881      	ldr	r0, [pc, #516]	; (80088a4 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800869e:	f00c fc69 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 80086a2:	4881      	ldr	r0, [pc, #516]	; (80088a8 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 80086a4:	f7fe faee 	bl	8006c84 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>
 80086a8:	f240 2375 	movw	r3, #629	; 0x275
 80086ac:	9301      	str	r3, [sp, #4]
 80086ae:	4b7b      	ldr	r3, [pc, #492]	; (800889c <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	4b7e      	ldr	r3, [pc, #504]	; (80088ac <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 80086b4:	4a75      	ldr	r2, [pc, #468]	; (800888c <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80086b6:	497c      	ldr	r1, [pc, #496]	; (80088a8 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 80086b8:	487d      	ldr	r0, [pc, #500]	; (80088b0 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 80086ba:	f00c fc5b 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 80086be:	487d      	ldr	r0, [pc, #500]	; (80088b4 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80086c0:	f7fe fc32 	bl	8006f28 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>
 80086c4:	f240 239a 	movw	r3, #666	; 0x29a
 80086c8:	9301      	str	r3, [sp, #4]
 80086ca:	4b74      	ldr	r3, [pc, #464]	; (800889c <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	4b7a      	ldr	r3, [pc, #488]	; (80088b8 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 80086d0:	4a6e      	ldr	r2, [pc, #440]	; (800888c <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80086d2:	4978      	ldr	r1, [pc, #480]	; (80088b4 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80086d4:	4879      	ldr	r0, [pc, #484]	; (80088bc <_Z41__static_initialization_and_destruction_0ii+0x604>)
 80086d6:	f00c fc4d 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 80086da:	4879      	ldr	r0, [pc, #484]	; (80088c0 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 80086dc:	f7fe fd02 	bl	80070e4 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>
 80086e0:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	4b6d      	ldr	r3, [pc, #436]	; (800889c <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	4b76      	ldr	r3, [pc, #472]	; (80088c4 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80086ec:	4a67      	ldr	r2, [pc, #412]	; (800888c <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80086ee:	4974      	ldr	r1, [pc, #464]	; (80088c0 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 80086f0:	4875      	ldr	r0, [pc, #468]	; (80088c8 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 80086f2:	f00c fc3f 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 80086f6:	4875      	ldr	r0, [pc, #468]	; (80088cc <_Z41__static_initialization_and_destruction_0ii+0x614>)
 80086f8:	f7fe fd6c 	bl	80071d4 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>
 80086fc:	f240 23c1 	movw	r3, #705	; 0x2c1
 8008700:	9301      	str	r3, [sp, #4]
 8008702:	4b66      	ldr	r3, [pc, #408]	; (800889c <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	4b72      	ldr	r3, [pc, #456]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 8008708:	4a60      	ldr	r2, [pc, #384]	; (800888c <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800870a:	4970      	ldr	r1, [pc, #448]	; (80088cc <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800870c:	4871      	ldr	r0, [pc, #452]	; (80088d4 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 800870e:	f00c fc31 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	f040 80b4 	bne.w	8008882 <_Z41__static_initialization_and_destruction_0ii+0x5ca>
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008720:	4293      	cmp	r3, r2
 8008722:	f040 80ae 	bne.w	8008882 <_Z41__static_initialization_and_destruction_0ii+0x5ca>
 8008726:	486b      	ldr	r0, [pc, #428]	; (80088d4 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8008728:	f00c fc4e 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 800872c:	4867      	ldr	r0, [pc, #412]	; (80088cc <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800872e:	f7fe fe0f 	bl	8007350 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8008732:	4865      	ldr	r0, [pc, #404]	; (80088c8 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 8008734:	f00c fc48 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 8008738:	4861      	ldr	r0, [pc, #388]	; (80088c0 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 800873a:	f7fe fe4d 	bl	80073d8 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 800873e:	485f      	ldr	r0, [pc, #380]	; (80088bc <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8008740:	f00c fc42 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 8008744:	485b      	ldr	r0, [pc, #364]	; (80088b4 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8008746:	f7fe fe8b 	bl	8007460 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 800874a:	4859      	ldr	r0, [pc, #356]	; (80088b0 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 800874c:	f00c fc3c 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 8008750:	4855      	ldr	r0, [pc, #340]	; (80088a8 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 8008752:	f7fe fec9 	bl	80074e8 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8008756:	4853      	ldr	r0, [pc, #332]	; (80088a4 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 8008758:	f00c fc36 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 800875c:	484e      	ldr	r0, [pc, #312]	; (8008898 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 800875e:	f7fe ff07 	bl	8007570 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8008762:	484c      	ldr	r0, [pc, #304]	; (8008894 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8008764:	f00c fc30 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 8008768:	4849      	ldr	r0, [pc, #292]	; (8008890 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 800876a:	f7fe ff45 	bl	80075f8 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 800876e:	485a      	ldr	r0, [pc, #360]	; (80088d8 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 8008770:	f00c fc2a 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 8008774:	4859      	ldr	r0, [pc, #356]	; (80088dc <_Z41__static_initialization_and_destruction_0ii+0x624>)
 8008776:	f7fe ff83 	bl	8007680 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 800877a:	4859      	ldr	r0, [pc, #356]	; (80088e0 <_Z41__static_initialization_and_destruction_0ii+0x628>)
 800877c:	f00c fc24 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 8008780:	4858      	ldr	r0, [pc, #352]	; (80088e4 <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 8008782:	f7fe ffc1 	bl	8007708 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Command_Process_Test)
 8008786:	4858      	ldr	r0, [pc, #352]	; (80088e8 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 8008788:	f00c fc1e 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 800878c:	4857      	ldr	r0, [pc, #348]	; (80088ec <_Z41__static_initialization_and_destruction_0ii+0x634>)
 800878e:	f7fe ffff 	bl	8007790 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8008792:	4857      	ldr	r0, [pc, #348]	; (80088f0 <_Z41__static_initialization_and_destruction_0ii+0x638>)
 8008794:	f00c fc18 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 8008798:	4856      	ldr	r0, [pc, #344]	; (80088f4 <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 800879a:	f7ff f83d 	bl	8007818 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 800879e:	4856      	ldr	r0, [pc, #344]	; (80088f8 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 80087a0:	f00c fc12 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 80087a4:	4855      	ldr	r0, [pc, #340]	; (80088fc <_Z41__static_initialization_and_destruction_0ii+0x644>)
 80087a6:	f7ff f87b 	bl	80078a0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 80087aa:	4855      	ldr	r0, [pc, #340]	; (8008900 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 80087ac:	f00c fc0c 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 80087b0:	4854      	ldr	r0, [pc, #336]	; (8008904 <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 80087b2:	f7ff f8b9 	bl	8007928 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80087b6:	4854      	ldr	r0, [pc, #336]	; (8008908 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 80087b8:	f00c fc06 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 80087bc:	4853      	ldr	r0, [pc, #332]	; (800890c <_Z41__static_initialization_and_destruction_0ii+0x654>)
 80087be:	f7ff f8f7 	bl	80079b0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80087c2:	4853      	ldr	r0, [pc, #332]	; (8008910 <_Z41__static_initialization_and_destruction_0ii+0x658>)
 80087c4:	f00c fc00 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 80087c8:	4852      	ldr	r0, [pc, #328]	; (8008914 <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 80087ca:	f7ff f935 	bl	8007a38 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 80087ce:	4852      	ldr	r0, [pc, #328]	; (8008918 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 80087d0:	f00c fbfa 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 80087d4:	4851      	ldr	r0, [pc, #324]	; (800891c <_Z41__static_initialization_and_destruction_0ii+0x664>)
 80087d6:	f7ff f973 	bl	8007ac0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 80087da:	4851      	ldr	r0, [pc, #324]	; (8008920 <_Z41__static_initialization_and_destruction_0ii+0x668>)
 80087dc:	f00c fbf4 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 80087e0:	4850      	ldr	r0, [pc, #320]	; (8008924 <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 80087e2:	f7ff f9b1 	bl	8007b48 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 80087e6:	4850      	ldr	r0, [pc, #320]	; (8008928 <_Z41__static_initialization_and_destruction_0ii+0x670>)
 80087e8:	f00c fbee 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 80087ec:	484f      	ldr	r0, [pc, #316]	; (800892c <_Z41__static_initialization_and_destruction_0ii+0x674>)
 80087ee:	f7ff f9ef 	bl	8007bd0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80087f2:	484f      	ldr	r0, [pc, #316]	; (8008930 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 80087f4:	f00c fbe8 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 80087f8:	484e      	ldr	r0, [pc, #312]	; (8008934 <_Z41__static_initialization_and_destruction_0ii+0x67c>)
 80087fa:	f7ff fa2d 	bl	8007c58 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80087fe:	484e      	ldr	r0, [pc, #312]	; (8008938 <_Z41__static_initialization_and_destruction_0ii+0x680>)
 8008800:	f00c fbe2 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 8008804:	484d      	ldr	r0, [pc, #308]	; (800893c <_Z41__static_initialization_and_destruction_0ii+0x684>)
 8008806:	f7ff fa6b 	bl	8007ce0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 800880a:	484d      	ldr	r0, [pc, #308]	; (8008940 <_Z41__static_initialization_and_destruction_0ii+0x688>)
 800880c:	f00c fbdc 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 8008810:	484c      	ldr	r0, [pc, #304]	; (8008944 <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 8008812:	f7ff faa9 	bl	8007d68 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 8008816:	484c      	ldr	r0, [pc, #304]	; (8008948 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 8008818:	f00c fbd6 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 800881c:	484b      	ldr	r0, [pc, #300]	; (800894c <_Z41__static_initialization_and_destruction_0ii+0x694>)
 800881e:	f7ff fae7 	bl	8007df0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 8008822:	484b      	ldr	r0, [pc, #300]	; (8008950 <_Z41__static_initialization_and_destruction_0ii+0x698>)
 8008824:	f00c fbd0 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 8008828:	484a      	ldr	r0, [pc, #296]	; (8008954 <_Z41__static_initialization_and_destruction_0ii+0x69c>)
 800882a:	f7ff fb25 	bl	8007e78 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 800882e:	484a      	ldr	r0, [pc, #296]	; (8008958 <_Z41__static_initialization_and_destruction_0ii+0x6a0>)
 8008830:	f00c fbca 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 8008834:	4849      	ldr	r0, [pc, #292]	; (800895c <_Z41__static_initialization_and_destruction_0ii+0x6a4>)
 8008836:	f7ff fb63 	bl	8007f00 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 800883a:	4849      	ldr	r0, [pc, #292]	; (8008960 <_Z41__static_initialization_and_destruction_0ii+0x6a8>)
 800883c:	f00c fbc4 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 8008840:	4848      	ldr	r0, [pc, #288]	; (8008964 <_Z41__static_initialization_and_destruction_0ii+0x6ac>)
 8008842:	f7ff fba1 	bl	8007f88 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8008846:	4848      	ldr	r0, [pc, #288]	; (8008968 <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 8008848:	f00c fbbe 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 800884c:	4847      	ldr	r0, [pc, #284]	; (800896c <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800884e:	f7ff fbdf 	bl	8008010 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 8008852:	4847      	ldr	r0, [pc, #284]	; (8008970 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 8008854:	f00c fbb8 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 8008858:	4846      	ldr	r0, [pc, #280]	; (8008974 <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 800885a:	f7ff fc1d 	bl	8008098 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800885e:	4846      	ldr	r0, [pc, #280]	; (8008978 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 8008860:	f00c fbb2 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 8008864:	4845      	ldr	r0, [pc, #276]	; (800897c <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 8008866:	f7ff fc5b 	bl	8008120 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 800886a:	4845      	ldr	r0, [pc, #276]	; (8008980 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 800886c:	f00c fbac 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 8008870:	4844      	ldr	r0, [pc, #272]	; (8008984 <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 8008872:	f7ff fc99 	bl	80081a8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 8008876:	4844      	ldr	r0, [pc, #272]	; (8008988 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 8008878:	f00c fba6 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 800887c:	4843      	ldr	r0, [pc, #268]	; (800898c <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800887e:	f7ff fcd7 	bl	8008230 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 8008882:	bf00      	nop
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	08024508 	.word	0x08024508
 8008890:	20000668 	.word	0x20000668
 8008894:	20000684 	.word	0x20000684
 8008898:	20000688 	.word	0x20000688
 800889c:	08023c04 	.word	0x08023c04
 80088a0:	08024678 	.word	0x08024678
 80088a4:	200006a4 	.word	0x200006a4
 80088a8:	200006a8 	.word	0x200006a8
 80088ac:	0802468c 	.word	0x0802468c
 80088b0:	200006c4 	.word	0x200006c4
 80088b4:	200006c8 	.word	0x200006c8
 80088b8:	080246a4 	.word	0x080246a4
 80088bc:	200006e4 	.word	0x200006e4
 80088c0:	200006e8 	.word	0x200006e8
 80088c4:	080246bc 	.word	0x080246bc
 80088c8:	20000704 	.word	0x20000704
 80088cc:	20000708 	.word	0x20000708
 80088d0:	080246dc 	.word	0x080246dc
 80088d4:	20000724 	.word	0x20000724
 80088d8:	20000664 	.word	0x20000664
 80088dc:	20000648 	.word	0x20000648
 80088e0:	20000644 	.word	0x20000644
 80088e4:	20000628 	.word	0x20000628
 80088e8:	20000624 	.word	0x20000624
 80088ec:	20000608 	.word	0x20000608
 80088f0:	20000604 	.word	0x20000604
 80088f4:	200005e8 	.word	0x200005e8
 80088f8:	200005e4 	.word	0x200005e4
 80088fc:	200005c8 	.word	0x200005c8
 8008900:	200005c4 	.word	0x200005c4
 8008904:	200005a8 	.word	0x200005a8
 8008908:	200005a4 	.word	0x200005a4
 800890c:	20000588 	.word	0x20000588
 8008910:	20000584 	.word	0x20000584
 8008914:	20000568 	.word	0x20000568
 8008918:	20000564 	.word	0x20000564
 800891c:	20000548 	.word	0x20000548
 8008920:	20000544 	.word	0x20000544
 8008924:	20000528 	.word	0x20000528
 8008928:	20000524 	.word	0x20000524
 800892c:	20000508 	.word	0x20000508
 8008930:	20000504 	.word	0x20000504
 8008934:	200004e8 	.word	0x200004e8
 8008938:	200004e4 	.word	0x200004e4
 800893c:	200004c8 	.word	0x200004c8
 8008940:	200004c4 	.word	0x200004c4
 8008944:	200004a8 	.word	0x200004a8
 8008948:	2000049c 	.word	0x2000049c
 800894c:	20000480 	.word	0x20000480
 8008950:	2000047c 	.word	0x2000047c
 8008954:	20000460 	.word	0x20000460
 8008958:	2000045c 	.word	0x2000045c
 800895c:	20000440 	.word	0x20000440
 8008960:	2000043c 	.word	0x2000043c
 8008964:	20000420 	.word	0x20000420
 8008968:	2000041c 	.word	0x2000041c
 800896c:	20000400 	.word	0x20000400
 8008970:	200003fc 	.word	0x200003fc
 8008974:	200003e0 	.word	0x200003e0
 8008978:	200003dc 	.word	0x200003dc
 800897c:	200003c0 	.word	0x200003c0
 8008980:	200003bc 	.word	0x200003bc
 8008984:	200003a0 	.word	0x200003a0
 8008988:	2000039c 	.word	0x2000039c
 800898c:	20000380 	.word	0x20000380

08008990 <_GLOBAL__sub_I_rx_buffer>:
 8008990:	b580      	push	{r7, lr}
 8008992:	af00      	add	r7, sp, #0
 8008994:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008998:	2001      	movs	r0, #1
 800899a:	f7ff fc8d 	bl	80082b8 <_Z41__static_initialization_and_destruction_0ii>
 800899e:	bd80      	pop	{r7, pc}

080089a0 <_GLOBAL__sub_D_rx_buffer>:
 80089a0:	b580      	push	{r7, lr}
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80089a8:	2000      	movs	r0, #0
 80089aa:	f7ff fc85 	bl	80082b8 <_Z41__static_initialization_and_destruction_0ii>
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80089b6:	f7f8 fb12 	bl	8000fde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80089ba:	f000 f817 	bl	80089ec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80089be:	f000 f973 	bl	8008ca8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80089c2:	f000 f947 	bl	8008c54 <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 80089c6:	f000 f887 	bl	8008ad8 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 80089ca:	f000 f8e3 	bl	8008b94 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  const char * av_override[] = { "exe","-v" };      // verbose mode
 80089ce:	4a06      	ldr	r2, [pc, #24]	; (80089e8 <main+0x38>)
 80089d0:	463b      	mov	r3, r7
 80089d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80089d6:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 80089da:	463b      	mov	r3, r7
 80089dc:	4619      	mov	r1, r3
 80089de:	2002      	movs	r0, #2
 80089e0:	f000 fbbc 	bl	800915c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>
  while (1)
 80089e4:	e7fe      	b.n	80089e4 <main+0x34>
 80089e6:	bf00      	nop
 80089e8:	080246fc 	.word	0x080246fc

080089ec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b0a8      	sub	sp, #160	; 0xa0
 80089f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80089f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80089f6:	2238      	movs	r2, #56	; 0x38
 80089f8:	2100      	movs	r1, #0
 80089fa:	4618      	mov	r0, r3
 80089fc:	f018 f924 	bl	8020c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008a00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008a04:	2200      	movs	r2, #0
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	605a      	str	r2, [r3, #4]
 8008a0a:	609a      	str	r2, [r3, #8]
 8008a0c:	60da      	str	r2, [r3, #12]
 8008a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008a10:	463b      	mov	r3, r7
 8008a12:	2254      	movs	r2, #84	; 0x54
 8008a14:	2100      	movs	r1, #0
 8008a16:	4618      	mov	r0, r3
 8008a18:	f018 f916 	bl	8020c48 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	f7f9 f897 	bl	8001b50 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008a22:	2301      	movs	r3, #1
 8008a24:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008a26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008a32:	2303      	movs	r3, #3
 8008a34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8008a38:	2306      	movs	r3, #6
 8008a3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8008a3e:	2355      	movs	r3, #85	; 0x55
 8008a40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008a44:	2302      	movs	r3, #2
 8008a46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008a50:	2302      	movs	r3, #2
 8008a52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008a56:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7f9 f92c 	bl	8001cb8 <HAL_RCC_OscConfig>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	bf14      	ite	ne
 8008a66:	2301      	movne	r3, #1
 8008a68:	2300      	moveq	r3, #0
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8008a70:	f000 f98a 	bl	8008d88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008a74:	230f      	movs	r3, #15
 8008a76:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008a80:	2300      	movs	r3, #0
 8008a82:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008a84:	2300      	movs	r3, #0
 8008a86:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008a88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008a8c:	2104      	movs	r1, #4
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7f9 fc2a 	bl	80022e8 <HAL_RCC_ClockConfig>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	bf14      	ite	ne
 8008a9a:	2301      	movne	r3, #1
 8008a9c:	2300      	moveq	r3, #0
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8008aa4:	f000 f970 	bl	8008d88 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8008aa8:	2321      	movs	r3, #33	; 0x21
 8008aaa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008aac:	2300      	movs	r3, #0
 8008aae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008ab4:	463b      	mov	r3, r7
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7f9 fe32 	bl	8002720 <HAL_RCCEx_PeriphCLKConfig>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	bf14      	ite	ne
 8008ac2:	2301      	movne	r3, #1
 8008ac4:	2300      	moveq	r3, #0
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <_Z18SystemClock_Configv+0xe4>
  {
    Error_Handler();
 8008acc:	f000 f95c 	bl	8008d88 <Error_Handler>
  }
}
 8008ad0:	bf00      	nop
 8008ad2:	37a0      	adds	r7, #160	; 0xa0
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8008adc:	4b2b      	ldr	r3, [pc, #172]	; (8008b8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008ade:	4a2c      	ldr	r2, [pc, #176]	; (8008b90 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008ae0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8008ae2:	4b2a      	ldr	r3, [pc, #168]	; (8008b8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008ae8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008aea:	4b28      	ldr	r3, [pc, #160]	; (8008b8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8008af0:	4b26      	ldr	r3, [pc, #152]	; (8008b8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8008af6:	4b25      	ldr	r3, [pc, #148]	; (8008b8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8008afc:	4b23      	ldr	r3, [pc, #140]	; (8008b8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008afe:	220c      	movs	r2, #12
 8008b00:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008b02:	4b22      	ldr	r3, [pc, #136]	; (8008b8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008b08:	4b20      	ldr	r3, [pc, #128]	; (8008b8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008b0e:	4b1f      	ldr	r3, [pc, #124]	; (8008b8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008b14:	4b1d      	ldr	r3, [pc, #116]	; (8008b8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8008b1a:	481c      	ldr	r0, [pc, #112]	; (8008b8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008b1c:	f7fa f84c 	bl	8002bb8 <HAL_UART_Init>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	bf14      	ite	ne
 8008b26:	2301      	movne	r3, #1
 8008b28:	2300      	moveq	r3, #0
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d001      	beq.n	8008b34 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8008b30:	f000 f92a 	bl	8008d88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008b34:	2100      	movs	r1, #0
 8008b36:	4815      	ldr	r0, [pc, #84]	; (8008b8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008b38:	f7fa ffd2 	bl	8003ae0 <HAL_UARTEx_SetTxFifoThreshold>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	bf14      	ite	ne
 8008b42:	2301      	movne	r3, #1
 8008b44:	2300      	moveq	r3, #0
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d001      	beq.n	8008b50 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8008b4c:	f000 f91c 	bl	8008d88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008b50:	2100      	movs	r1, #0
 8008b52:	480e      	ldr	r0, [pc, #56]	; (8008b8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008b54:	f7fb f802 	bl	8003b5c <HAL_UARTEx_SetRxFifoThreshold>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	bf14      	ite	ne
 8008b5e:	2301      	movne	r3, #1
 8008b60:	2300      	moveq	r3, #0
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8008b68:	f000 f90e 	bl	8008d88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8008b6c:	4807      	ldr	r0, [pc, #28]	; (8008b8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008b6e:	f7fa ff7e 	bl	8003a6e <HAL_UARTEx_DisableFifoMode>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	bf14      	ite	ne
 8008b78:	2301      	movne	r3, #1
 8008b7a:	2300      	moveq	r3, #0
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d001      	beq.n	8008b86 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8008b82:	f000 f901 	bl	8008d88 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8008b86:	bf00      	nop
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	20000728 	.word	0x20000728
 8008b90:	40008000 	.word	0x40008000

08008b94 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008b98:	4b2c      	ldr	r3, [pc, #176]	; (8008c4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008b9a:	4a2d      	ldr	r2, [pc, #180]	; (8008c50 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8008b9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008b9e:	4b2b      	ldr	r3, [pc, #172]	; (8008c4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008ba4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008ba6:	4b29      	ldr	r3, [pc, #164]	; (8008c4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008bac:	4b27      	ldr	r3, [pc, #156]	; (8008c4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008bb2:	4b26      	ldr	r3, [pc, #152]	; (8008c4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008bb8:	4b24      	ldr	r3, [pc, #144]	; (8008c4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008bba:	220c      	movs	r2, #12
 8008bbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008bbe:	4b23      	ldr	r3, [pc, #140]	; (8008c4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008bc4:	4b21      	ldr	r3, [pc, #132]	; (8008c4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008bca:	4b20      	ldr	r3, [pc, #128]	; (8008c4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008bd0:	4b1e      	ldr	r3, [pc, #120]	; (8008c4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008bd6:	4b1d      	ldr	r3, [pc, #116]	; (8008c4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008bdc:	481b      	ldr	r0, [pc, #108]	; (8008c4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008bde:	f7f9 ffeb 	bl	8002bb8 <HAL_UART_Init>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	bf14      	ite	ne
 8008be8:	2301      	movne	r3, #1
 8008bea:	2300      	moveq	r3, #0
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8008bf2:	f000 f8c9 	bl	8008d88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	4814      	ldr	r0, [pc, #80]	; (8008c4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008bfa:	f7fa ff71 	bl	8003ae0 <HAL_UARTEx_SetTxFifoThreshold>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	bf14      	ite	ne
 8008c04:	2301      	movne	r3, #1
 8008c06:	2300      	moveq	r3, #0
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8008c0e:	f000 f8bb 	bl	8008d88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008c12:	2100      	movs	r1, #0
 8008c14:	480d      	ldr	r0, [pc, #52]	; (8008c4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008c16:	f7fa ffa1 	bl	8003b5c <HAL_UARTEx_SetRxFifoThreshold>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	bf14      	ite	ne
 8008c20:	2301      	movne	r3, #1
 8008c22:	2300      	moveq	r3, #0
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8008c2a:	f000 f8ad 	bl	8008d88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008c2e:	4807      	ldr	r0, [pc, #28]	; (8008c4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008c30:	f7fa ff1d 	bl	8003a6e <HAL_UARTEx_DisableFifoMode>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	bf14      	ite	ne
 8008c3a:	2301      	movne	r3, #1
 8008c3c:	2300      	moveq	r3, #0
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8008c44:	f000 f8a0 	bl	8008d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008c48:	bf00      	nop
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	200007b8 	.word	0x200007b8
 8008c50:	40013800 	.word	0x40013800

08008c54 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8008c5a:	4b12      	ldr	r3, [pc, #72]	; (8008ca4 <_ZL11MX_DMA_Initv+0x50>)
 8008c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c5e:	4a11      	ldr	r2, [pc, #68]	; (8008ca4 <_ZL11MX_DMA_Initv+0x50>)
 8008c60:	f043 0304 	orr.w	r3, r3, #4
 8008c64:	6493      	str	r3, [r2, #72]	; 0x48
 8008c66:	4b0f      	ldr	r3, [pc, #60]	; (8008ca4 <_ZL11MX_DMA_Initv+0x50>)
 8008c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c6a:	f003 0304 	and.w	r3, r3, #4
 8008c6e:	607b      	str	r3, [r7, #4]
 8008c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008c72:	4b0c      	ldr	r3, [pc, #48]	; (8008ca4 <_ZL11MX_DMA_Initv+0x50>)
 8008c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c76:	4a0b      	ldr	r2, [pc, #44]	; (8008ca4 <_ZL11MX_DMA_Initv+0x50>)
 8008c78:	f043 0301 	orr.w	r3, r3, #1
 8008c7c:	6493      	str	r3, [r2, #72]	; 0x48
 8008c7e:	4b09      	ldr	r3, [pc, #36]	; (8008ca4 <_ZL11MX_DMA_Initv+0x50>)
 8008c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	603b      	str	r3, [r7, #0]
 8008c88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	200b      	movs	r0, #11
 8008c90:	f7f8 faf1 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008c94:	200b      	movs	r0, #11
 8008c96:	f7f8 fb08 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 8008c9a:	bf00      	nop
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	40021000 	.word	0x40021000

08008ca8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08a      	sub	sp, #40	; 0x28
 8008cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cae:	f107 0314 	add.w	r3, r7, #20
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	605a      	str	r2, [r3, #4]
 8008cb8:	609a      	str	r2, [r3, #8]
 8008cba:	60da      	str	r2, [r3, #12]
 8008cbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008cbe:	4b2f      	ldr	r3, [pc, #188]	; (8008d7c <_ZL12MX_GPIO_Initv+0xd4>)
 8008cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cc2:	4a2e      	ldr	r2, [pc, #184]	; (8008d7c <_ZL12MX_GPIO_Initv+0xd4>)
 8008cc4:	f043 0304 	orr.w	r3, r3, #4
 8008cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008cca:	4b2c      	ldr	r3, [pc, #176]	; (8008d7c <_ZL12MX_GPIO_Initv+0xd4>)
 8008ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cce:	f003 0304 	and.w	r3, r3, #4
 8008cd2:	613b      	str	r3, [r7, #16]
 8008cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008cd6:	4b29      	ldr	r3, [pc, #164]	; (8008d7c <_ZL12MX_GPIO_Initv+0xd4>)
 8008cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cda:	4a28      	ldr	r2, [pc, #160]	; (8008d7c <_ZL12MX_GPIO_Initv+0xd4>)
 8008cdc:	f043 0320 	orr.w	r3, r3, #32
 8008ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ce2:	4b26      	ldr	r3, [pc, #152]	; (8008d7c <_ZL12MX_GPIO_Initv+0xd4>)
 8008ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ce6:	f003 0320 	and.w	r3, r3, #32
 8008cea:	60fb      	str	r3, [r7, #12]
 8008cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cee:	4b23      	ldr	r3, [pc, #140]	; (8008d7c <_ZL12MX_GPIO_Initv+0xd4>)
 8008cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cf2:	4a22      	ldr	r2, [pc, #136]	; (8008d7c <_ZL12MX_GPIO_Initv+0xd4>)
 8008cf4:	f043 0301 	orr.w	r3, r3, #1
 8008cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008cfa:	4b20      	ldr	r3, [pc, #128]	; (8008d7c <_ZL12MX_GPIO_Initv+0xd4>)
 8008cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	60bb      	str	r3, [r7, #8]
 8008d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d06:	4b1d      	ldr	r3, [pc, #116]	; (8008d7c <_ZL12MX_GPIO_Initv+0xd4>)
 8008d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d0a:	4a1c      	ldr	r2, [pc, #112]	; (8008d7c <_ZL12MX_GPIO_Initv+0xd4>)
 8008d0c:	f043 0302 	orr.w	r3, r3, #2
 8008d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d12:	4b1a      	ldr	r3, [pc, #104]	; (8008d7c <_ZL12MX_GPIO_Initv+0xd4>)
 8008d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d16:	f003 0302 	and.w	r3, r3, #2
 8008d1a:	607b      	str	r3, [r7, #4]
 8008d1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008d1e:	2200      	movs	r2, #0
 8008d20:	2120      	movs	r1, #32
 8008d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d26:	f7f8 fed7 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008d30:	4b13      	ldr	r3, [pc, #76]	; (8008d80 <_ZL12MX_GPIO_Initv+0xd8>)
 8008d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d34:	2300      	movs	r3, #0
 8008d36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008d38:	f107 0314 	add.w	r3, r7, #20
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4811      	ldr	r0, [pc, #68]	; (8008d84 <_ZL12MX_GPIO_Initv+0xdc>)
 8008d40:	f7f8 fd48 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8008d44:	2320      	movs	r3, #32
 8008d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d50:	2300      	movs	r3, #0
 8008d52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008d54:	f107 0314 	add.w	r3, r7, #20
 8008d58:	4619      	mov	r1, r3
 8008d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d5e:	f7f8 fd39 	bl	80017d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008d62:	2200      	movs	r2, #0
 8008d64:	2100      	movs	r1, #0
 8008d66:	2028      	movs	r0, #40	; 0x28
 8008d68:	f7f8 fa85 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008d6c:	2028      	movs	r0, #40	; 0x28
 8008d6e:	f7f8 fa9c 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 8008d72:	bf00      	nop
 8008d74:	3728      	adds	r7, #40	; 0x28
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	40021000 	.word	0x40021000
 8008d80:	10110000 	.word	0x10110000
 8008d84:	48000800 	.word	0x48000800

08008d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008d8c:	b672      	cpsid	i
}
 8008d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008d90:	e7fe      	b.n	8008d90 <Error_Handler+0x8>

08008d92 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup5setupEv>:
/* Test functions of the MQTT library-----------------------------------------------------------------------*/

TEST_GROUP(MqttTestGroup)
{

	void setup()
 8008d92:	b480      	push	{r7}
 8008d94:	b083      	sub	sp, #12
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
	{

	}
 8008d9a:	bf00      	nop
 8008d9c:	370c      	adds	r7, #12
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup8teardownEv>:

	void teardown()
 8008da6:	b480      	push	{r7}
 8008da8:	b083      	sub	sp, #12
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
	{

	}
 8008dae:	bf00      	nop
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
	...

08008dbc <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>:
TEST_GROUP(MqttTestGroup)
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f00b fe66 	bl	8014a98 <_ZN5UtestC1Ev>
 8008dcc:	4a03      	ldr	r2, [pc, #12]	; (8008ddc <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev+0x20>)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	601a      	str	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	08028888 	.word	0x08028888

08008de0 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>:
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	4a05      	ldr	r2, [pc, #20]	; (8008e00 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev+0x20>)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f00b fe61 	bl	8014ab8 <_ZN5UtestD1Ev>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	08028888 	.word	0x08028888

08008e04 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD0Ev>:
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f7ff ffe7 	bl	8008de0 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 8008e12:	2104      	movs	r1, #4
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f001 fe83 	bl	800ab20 <_ZdlPvj>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev>:
};

TEST(MqttTestGroup, ConnectPacketTest)
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7ff ffc4 	bl	8008dbc <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>
 8008e34:	4a03      	ldr	r2, [pc, #12]	; (8008e44 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev+0x20>)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	601a      	str	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	08028868 	.word	0x08028868

08008e48 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShell10createTestEv>:
 8008e48:	b590      	push	{r4, r7, lr}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	2222      	movs	r2, #34	; 0x22
 8008e52:	4906      	ldr	r1, [pc, #24]	; (8008e6c <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShell10createTestEv+0x24>)
 8008e54:	2004      	movs	r0, #4
 8008e56:	f001 fe4f 	bl	800aaf8 <_ZnwjPKci>
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f7ff ffe1 	bl	8008e24 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev>
 8008e62:	4623      	mov	r3, r4
 8008e64:	4618      	mov	r0, r3
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd90      	pop	{r4, r7, pc}
 8008e6c:	08024704 	.word	0x08024704

08008e70 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev>:
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f00a fa2a 	bl	80132d4 <_ZN10UtestShellC1Ev>
 8008e80:	4a03      	ldr	r2, [pc, #12]	; (8008e90 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev+0x20>)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	601a      	str	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	080287bc 	.word	0x080287bc

08008e94 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv>:
{
 8008e94:	b5b0      	push	{r4, r5, r7, lr}
 8008e96:	b0b4      	sub	sp, #208	; 0xd0
 8008e98:	af04      	add	r7, sp, #16
 8008e9a:	6078      	str	r0, [r7, #4]
	char clientID[] = "Topuz";
 8008e9c:	4a2c      	ldr	r2, [pc, #176]	; (8008f50 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0xbc>)
 8008e9e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008ea2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ea6:	6018      	str	r0, [r3, #0]
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	8019      	strh	r1, [r3, #0]
	uint16_t ClientIDLength = strlen(clientID);
 8008eac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7f7 f9c3 	bl	800023c <strlen>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	uint8_t remainLength = (uint8_t)ClientIDLength + 12;  // 12 represents the bytes in the packets between remain length and Client ID byte.
 8008ebc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	330c      	adds	r3, #12
 8008ec4:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd

	uint8_t outputStream[100];

	MQTT_Connect_Packet connectPacket;

	connectPacket.ConnectByte = 0x10;
 8008ec8:	2310      	movs	r3, #16
 8008eca:	733b      	strb	r3, [r7, #12]
	connectPacket.RemainLength = remainLength;
 8008ecc:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8008ed0:	737b      	strb	r3, [r7, #13]
	connectPacket.ProtocolNameLength = 0x04;
 8008ed2:	2304      	movs	r3, #4
 8008ed4:	81fb      	strh	r3, [r7, #14]
	strcpy(connectPacket.ProtocolName,"MQTT");
 8008ed6:	f107 030c 	add.w	r3, r7, #12
 8008eda:	3304      	adds	r3, #4
 8008edc:	4a1d      	ldr	r2, [pc, #116]	; (8008f54 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0xc0>)
 8008ede:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ee2:	6018      	str	r0, [r3, #0]
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	7019      	strb	r1, [r3, #0]
	connectPacket.Level = 0x04;
 8008ee8:	2304      	movs	r3, #4
 8008eea:	753b      	strb	r3, [r7, #20]
	connectPacket.Flag = 0x02;
 8008eec:	2302      	movs	r3, #2
 8008eee:	757b      	strb	r3, [r7, #21]
	connectPacket.KeepAlive = 60;
 8008ef0:	233c      	movs	r3, #60	; 0x3c
 8008ef2:	82fb      	strh	r3, [r7, #22]
	connectPacket.ClientIDLength = ClientIDLength;
 8008ef4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ef8:	833b      	strh	r3, [r7, #24]
	strcpy(connectPacket.ClientID,clientID);
 8008efa:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008efe:	f107 030c 	add.w	r3, r7, #12
 8008f02:	330e      	adds	r3, #14
 8008f04:	4611      	mov	r1, r2
 8008f06:	4618      	mov	r0, r3
 8008f08:	f018 f8b7 	bl	802107a <strcpy>

	int32_t status = mqtt_encode_packet(outputStream, &connectPacket, CONNECT_PACKET);
 8008f0c:	f107 010c 	add.w	r1, r7, #12
 8008f10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008f14:	2200      	movs	r2, #0
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7fb f964 	bl	80041e4 <mqtt_encode_packet>
 8008f1c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

	LONGS_EQUAL(1,status);
 8008f20:	f00b fd90 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8008f24:	4604      	mov	r4, r0
 8008f26:	6823      	ldr	r3, [r4, #0]
 8008f28:	3338      	adds	r3, #56	; 0x38
 8008f2a:	681d      	ldr	r5, [r3, #0]
 8008f2c:	f00b fd9a 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8008f30:	4603      	mov	r3, r0
 8008f32:	9302      	str	r3, [sp, #8]
 8008f34:	2338      	movs	r3, #56	; 0x38
 8008f36:	9301      	str	r3, [sp, #4]
 8008f38:	4b07      	ldr	r3, [pc, #28]	; (8008f58 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0xc4>)
 8008f3a:	9300      	str	r3, [sp, #0]
 8008f3c:	4b07      	ldr	r3, [pc, #28]	; (8008f5c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0xc8>)
 8008f3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008f42:	2101      	movs	r1, #1
 8008f44:	4620      	mov	r0, r4
 8008f46:	47a8      	blx	r5





}
 8008f48:	bf00      	nop
 8008f4a:	37c0      	adds	r7, #192	; 0xc0
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8008f50:	08024748 	.word	0x08024748
 8008f54:	08024720 	.word	0x08024720
 8008f58:	08024704 	.word	0x08024704
 8008f5c:	08024728 	.word	0x08024728

08008f60 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>:
TEST(MqttTestGroup, ConnectPacketTest)
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	4a05      	ldr	r2, [pc, #20]	; (8008f80 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev+0x20>)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f00a fa03 	bl	801337c <_ZN10UtestShellD1Ev>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	080287bc 	.word	0x080287bc

08008f84 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD0Ev>:
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7ff ffe7 	bl	8008f60 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>
 8008f92:	211c      	movs	r1, #28
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f001 fdc3 	bl	800ab20 <_ZdlPvj>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev>:
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	4a05      	ldr	r2, [pc, #20]	; (8008fc4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev+0x20>)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	601a      	str	r2, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7ff ff13 	bl	8008de0 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	08028868 	.word	0x08028868

08008fc8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD0Ev>:
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f7ff ffe7 	bl	8008fa4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev>
 8008fd6:	2104      	movs	r1, #4
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f001 fda1 	bl	800ab20 <_ZdlPvj>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <_Z41__static_initialization_and_destruction_0ii>:
}
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af02      	add	r7, sp, #8
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d111      	bne.n	800901c <_Z41__static_initialization_and_destruction_0ii+0x34>
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d10c      	bne.n	800901c <_Z41__static_initialization_and_destruction_0ii+0x34>
TEST(MqttTestGroup, ConnectPacketTest)
 8009002:	480f      	ldr	r0, [pc, #60]	; (8009040 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8009004:	f7ff ff34 	bl	8008e70 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev>
 8009008:	2322      	movs	r3, #34	; 0x22
 800900a:	9301      	str	r3, [sp, #4]
 800900c:	4b0d      	ldr	r3, [pc, #52]	; (8009044 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	4b0d      	ldr	r3, [pc, #52]	; (8009048 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8009012:	4a0e      	ldr	r2, [pc, #56]	; (800904c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8009014:	490a      	ldr	r1, [pc, #40]	; (8009040 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8009016:	480e      	ldr	r0, [pc, #56]	; (8009050 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8009018:	f00b ffac 	bl	8014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10a      	bne.n	8009038 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009028:	4293      	cmp	r3, r2
 800902a:	d105      	bne.n	8009038 <_Z41__static_initialization_and_destruction_0ii+0x50>
 800902c:	4808      	ldr	r0, [pc, #32]	; (8009050 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800902e:	f00b ffcb 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 8009032:	4803      	ldr	r0, [pc, #12]	; (8009040 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8009034:	f7ff ff94 	bl	8008f60 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>
}
 8009038:	bf00      	nop
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	200008a8 	.word	0x200008a8
 8009044:	08024704 	.word	0x08024704
 8009048:	08024750 	.word	0x08024750
 800904c:	08024764 	.word	0x08024764
 8009050:	200008c4 	.word	0x200008c4

08009054 <_GLOBAL__sub_I_externTestGroupMqttTestGroup>:
 8009054:	b580      	push	{r7, lr}
 8009056:	af00      	add	r7, sp, #0
 8009058:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800905c:	2001      	movs	r0, #1
 800905e:	f7ff ffc3 	bl	8008fe8 <_Z41__static_initialization_and_destruction_0ii>
 8009062:	bd80      	pop	{r7, pc}

08009064 <_GLOBAL__sub_D_externTestGroupMqttTestGroup>:
 8009064:	b580      	push	{r7, lr}
 8009066:	af00      	add	r7, sp, #0
 8009068:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800906c:	2000      	movs	r0, #0
 800906e:	f7ff ffbb 	bl	8008fe8 <_Z41__static_initialization_and_destruction_0ii>
 8009072:	bd80      	pop	{r7, pc}

08009074 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	68db      	ldr	r3, [r3, #12]
    }
 8009080:	4618      	mov	r0, r3
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	69db      	ldr	r3, [r3, #28]
    }
 8009098:	4618      	mov	r0, r3
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	695b      	ldr	r3, [r3, #20]
    }
 80090b0:	4618      	mov	r0, r3
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 80090bc:	b590      	push	{r4, r7, lr}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7ff ffed 	bl	80090a4 <_ZNK10TestResult15getFailureCountEv>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10a      	bne.n	80090e6 <_ZNK10TestResult9isFailureEv+0x2a>
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7ff ffcf 	bl	8009074 <_ZNK10TestResult11getRunCountEv>
 80090d6:	4604      	mov	r4, r0
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7ff ffd7 	bl	800908c <_ZNK10TestResult15getIgnoredCountEv>
 80090de:	4603      	mov	r3, r0
 80090e0:	4423      	add	r3, r4
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <_ZNK10TestResult9isFailureEv+0x2e>
 80090e6:	2301      	movs	r3, #1
 80090e8:	e000      	b.n	80090ec <_ZNK10TestResult9isFailureEv+0x30>
 80090ea:	2300      	movs	r3, #0
    }
 80090ec:	4618      	mov	r0, r3
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd90      	pop	{r4, r7, pc}

080090f4 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
    {
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4618      	mov	r0, r3
 8009100:	f007 fde6 	bl	8010cd0 <_ZN10TestOutputC1Ev>
 8009104:	4a03      	ldr	r2, [pc, #12]	; (8009114 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	601a      	str	r2, [r3, #0]
    }
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4618      	mov	r0, r3
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	08028f1c 	.word	0x08028f1c

08009118 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
    {
 8009120:	4a05      	ldr	r2, [pc, #20]	; (8009138 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	601a      	str	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4618      	mov	r0, r3
 800912a:	f007 fdef 	bl	8010d0c <_ZN10TestOutputD1Ev>
    }
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4618      	mov	r0, r3
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	08028f1c 	.word	0x08028f1c

0800913c <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
    }
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7ff ffe7 	bl	8009118 <_ZN17ConsoleTestOutputD1Ev>
 800914a:	2110      	movs	r1, #16
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f001 fce7 	bl	800ab20 <_ZdlPvj>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4618      	mov	r0, r3
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 800915c:	b5b0      	push	{r4, r5, r7, lr}
 800915e:	b098      	sub	sp, #96	; 0x60
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
    int result = 0;
 8009166:	2300      	movs	r3, #0
 8009168:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 800916a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800916e:	4618      	mov	r0, r3
 8009170:	f7ff ffc0 	bl	80090f4 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8009174:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009178:	4935      	ldr	r1, [pc, #212]	; (8009250 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 800917a:	4618      	mov	r0, r3
 800917c:	f004 f87f 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8009180:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8009184:	f107 0318 	add.w	r3, r7, #24
 8009188:	2200      	movs	r2, #0
 800918a:	4618      	mov	r0, r3
 800918c:	f001 ff6a 	bl	800b064 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 8009190:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009194:	4618      	mov	r0, r3
 8009196:	f004 fc2a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 800919a:	f107 0318 	add.w	r3, r7, #24
 800919e:	2101      	movs	r1, #1
 80091a0:	4618      	mov	r0, r3
 80091a2:	f001 ff2f 	bl	800b004 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 80091a6:	f009 fb21 	bl	80127ec <_ZN12TestRegistry18getCurrentRegistryEv>
 80091aa:	4603      	mov	r3, r0
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	3234      	adds	r2, #52	; 0x34
 80091b0:	6812      	ldr	r2, [r2, #0]
 80091b2:	f107 0118 	add.w	r1, r7, #24
 80091b6:	4618      	mov	r0, r3
 80091b8:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 80091ba:	f009 fb17 	bl	80127ec <_ZN12TestRegistry18getCurrentRegistryEv>
 80091be:	4603      	mov	r3, r0
 80091c0:	f107 0008 	add.w	r0, r7, #8
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	6879      	ldr	r1, [r7, #4]
 80091c8:	f000 f844 	bl	8009254 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 80091cc:	f107 0308 	add.w	r3, r7, #8
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 f899 	bl	8009308 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 80091d6:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 80091d8:	f107 0308 	add.w	r3, r7, #8
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 f863 	bl	80092a8 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 80091e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10c      	bne.n	8009202 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 80091e8:	f107 0318 	add.w	r3, r7, #24
 80091ec:	2100      	movs	r1, #0
 80091ee:	4618      	mov	r0, r3
 80091f0:	f002 f83a 	bl	800b268 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 80091f4:	4602      	mov	r2, r0
 80091f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80091fa:	4611      	mov	r1, r2
 80091fc:	4618      	mov	r0, r3
 80091fe:	f007 fe27 	bl	8010e50 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 8009202:	f009 faf3 	bl	80127ec <_ZN12TestRegistry18getCurrentRegistryEv>
 8009206:	4604      	mov	r4, r0
 8009208:	6823      	ldr	r3, [r4, #0]
 800920a:	3344      	adds	r3, #68	; 0x44
 800920c:	681d      	ldr	r5, [r3, #0]
 800920e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009212:	490f      	ldr	r1, [pc, #60]	; (8009250 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8009214:	4618      	mov	r0, r3
 8009216:	f004 f832 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800921a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800921e:	4619      	mov	r1, r3
 8009220:	4620      	mov	r0, r4
 8009222:	47a8      	blx	r5
 8009224:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009228:	4618      	mov	r0, r3
 800922a:	f004 fbe0 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return result;
 800922e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8009230:	f107 0318 	add.w	r3, r7, #24
 8009234:	4618      	mov	r0, r3
 8009236:	f001 ff4d 	bl	800b0d4 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 800923a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800923e:	4618      	mov	r0, r3
 8009240:	f7ff ff6a 	bl	8009118 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8009244:	4623      	mov	r3, r4
}
 8009246:	4618      	mov	r0, r3
 8009248:	3760      	adds	r7, #96	; 0x60
 800924a:	46bd      	mov	sp, r7
 800924c:	bdb0      	pop	{r4, r5, r7, pc}
 800924e:	bf00      	nop
 8009250:	08024774 	.word	0x08024774

08009254 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8009254:	b590      	push	{r4, r7, lr}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
 8009260:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 8009262:	4a0f      	ldr	r2, [pc, #60]	; (80092a0 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	601a      	str	r2, [r3, #0]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2200      	movs	r2, #0
 800926c:	605a      	str	r2, [r3, #4]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	609a      	str	r2, [r3, #8]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 800927a:	2241      	movs	r2, #65	; 0x41
 800927c:	4909      	ldr	r1, [pc, #36]	; (80092a4 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 800927e:	2038      	movs	r0, #56	; 0x38
 8009280:	f001 fc3a 	bl	800aaf8 <_ZnwjPKci>
 8009284:	4604      	mov	r4, r0
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	68b9      	ldr	r1, [r7, #8]
 800928a:	4620      	mov	r0, r4
 800928c:	f00c f84a 	bl	8015324 <_ZN20CommandLineArgumentsC1EiPKPKc>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	609c      	str	r4, [r3, #8]
}
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4618      	mov	r0, r3
 8009298:	3714      	adds	r7, #20
 800929a:	46bd      	mov	sp, r7
 800929c:	bd90      	pop	{r4, r7, pc}
 800929e:	bf00      	nop
 80092a0:	080288a8 	.word	0x080288a8
 80092a4:	08024788 	.word	0x08024788

080092a8 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	4a0c      	ldr	r2, [pc, #48]	; (80092e4 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d004      	beq.n	80092c8 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	3204      	adds	r2, #4
 80092c2:	6812      	ldr	r2, [r2, #0]
 80092c4:	4618      	mov	r0, r3
 80092c6:	4790      	blx	r2
    delete output_;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d004      	beq.n	80092da <_ZN21CommandLineTestRunnerD1Ev+0x32>
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	3204      	adds	r2, #4
 80092d4:	6812      	ldr	r2, [r2, #0]
 80092d6:	4618      	mov	r0, r3
 80092d8:	4790      	blx	r2
}
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4618      	mov	r0, r3
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	080288a8 	.word	0x080288a8

080092e8 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
}
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7ff ffd9 	bl	80092a8 <_ZN21CommandLineTestRunnerD1Ev>
 80092f6:	2110      	movs	r1, #16
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f001 fc11 	bl	800ab20 <_ZdlPvj>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4618      	mov	r0, r3
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 8009308:	b5b0      	push	{r4, r5, r7, lr}
 800930a:	b08c      	sub	sp, #48	; 0x30
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 8009310:	2301      	movs	r3, #1
 8009312:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8009314:	f107 031c 	add.w	r3, r7, #28
 8009318:	4929      	ldr	r1, [pc, #164]	; (80093c0 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800931a:	4618      	mov	r0, r3
 800931c:	f003 ffaf 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8009320:	f107 021c 	add.w	r2, r7, #28
 8009324:	f107 0308 	add.w	r3, r7, #8
 8009328:	4611      	mov	r1, r2
 800932a:	4618      	mov	r0, r3
 800932c:	f008 fe1c 	bl	8011f68 <_ZN16SetPointerPluginC1ERK12SimpleString>
 8009330:	f107 031c 	add.w	r3, r7, #28
 8009334:	4618      	mov	r0, r3
 8009336:	f004 fb5a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68da      	ldr	r2, [r3, #12]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3334      	adds	r3, #52	; 0x34
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f107 0108 	add.w	r1, r7, #8
 800934c:	4610      	mov	r0, r2
 800934e:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	68da      	ldr	r2, [r3, #12]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	333c      	adds	r3, #60	; 0x3c
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4610      	mov	r0, r2
 8009360:	4798      	blx	r3
 8009362:	4603      	mov	r3, r0
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fa3e 	bl	80097e8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f8ac 	bl	80094d0 <_ZN21CommandLineTestRunner11runAllTestsEv>
 8009378:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	68dd      	ldr	r5, [r3, #12]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3344      	adds	r3, #68	; 0x44
 8009386:	681c      	ldr	r4, [r3, #0]
 8009388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800938c:	490c      	ldr	r1, [pc, #48]	; (80093c0 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800938e:	4618      	mov	r0, r3
 8009390:	f003 ff75 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8009394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009398:	4619      	mov	r1, r3
 800939a:	4628      	mov	r0, r5
 800939c:	47a0      	blx	r4
 800939e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093a2:	4618      	mov	r0, r3
 80093a4:	f004 fb23 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return testResult;
 80093a8:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 80093aa:	f107 0308 	add.w	r3, r7, #8
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 faaa 	bl	8009908 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 80093b4:	4623      	mov	r3, r4
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3730      	adds	r7, #48	; 0x30
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bdb0      	pop	{r4, r5, r7, pc}
 80093be:	bf00      	nop
 80093c0:	080247ac 	.word	0x080247ac

080093c4 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 80093c4:	b5b0      	push	{r4, r5, r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	68dd      	ldr	r5, [r3, #12]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3330      	adds	r3, #48	; 0x30
 80093d8:	681c      	ldr	r4, [r3, #0]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	4618      	mov	r0, r3
 80093e0:	f00c fce0 	bl	8015da4 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 80093e4:	4603      	mov	r3, r0
 80093e6:	4619      	mov	r1, r3
 80093e8:	4628      	mov	r0, r5
 80093ea:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	68dd      	ldr	r5, [r3, #12]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	332c      	adds	r3, #44	; 0x2c
 80093f8:	681c      	ldr	r4, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	4618      	mov	r0, r3
 8009400:	f00c fcdc 	bl	8015dbc <_ZNK20CommandLineArguments14getNameFiltersEv>
 8009404:	4603      	mov	r3, r0
 8009406:	4619      	mov	r1, r3
 8009408:	4628      	mov	r0, r5
 800940a:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	4618      	mov	r0, r3
 8009412:	f00c fc2b 	bl	8015c6c <_ZNK20CommandLineArguments9isVerboseEv>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d009      	beq.n	8009430 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	685a      	ldr	r2, [r3, #4]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	3320      	adds	r3, #32
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2101      	movs	r1, #1
 800942c:	4610      	mov	r0, r2
 800942e:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	4618      	mov	r0, r3
 8009436:	f00c fc25 	bl	8015c84 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d009      	beq.n	8009454 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3320      	adds	r3, #32
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2102      	movs	r1, #2
 8009450:	4610      	mov	r0, r2
 8009452:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	4618      	mov	r0, r3
 800945a:	f00c fc1f 	bl	8015c9c <_ZNK20CommandLineArguments7isColorEv>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d008      	beq.n	8009476 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	685a      	ldr	r2, [r3, #4]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3324      	adds	r3, #36	; 0x24
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4610      	mov	r0, r2
 8009474:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	4618      	mov	r0, r3
 800947c:	f00c fc4a 	bl	8015d14 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d008      	beq.n	8009498 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	3360      	adds	r3, #96	; 0x60
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4610      	mov	r0, r2
 8009496:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	4618      	mov	r0, r3
 800949e:	f00c fc2d 	bl	8015cfc <_ZNK20CommandLineArguments12isRunIgnoredEv>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d004      	beq.n	80094b2 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	4618      	mov	r0, r3
 80094ae:	f009 fa19 	bl	80128e4 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f00c fc50 	bl	8015d5c <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 80094c2:	f00b fadb 	bl	8014a7c <_ZN10UtestShell14setCrashOnFailEv>
}
 80094c6:	bf00      	nop
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080094d0 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 80094d0:	b5b0      	push	{r4, r5, r7, lr}
 80094d2:	b094      	sub	sp, #80	; 0x50
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7ff ff73 	bl	80093c4 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 80094de:	2300      	movs	r3, #0
 80094e0:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 80094e2:	2300      	movs	r3, #0
 80094e4:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 80094e6:	2300      	movs	r3, #0
 80094e8:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f00c fc1c 	bl	8015d2c <_ZNK20CommandLineArguments14getRepeatCountEv>
 80094f4:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f00c fbda 	bl	8015cb4 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d019      	beq.n	800953a <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685a      	ldr	r2, [r3, #4]
 800950a:	f107 0308 	add.w	r3, r7, #8
 800950e:	4611      	mov	r1, r2
 8009510:	4618      	mov	r0, r3
 8009512:	f009 fbaf 	bl	8012c74 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68da      	ldr	r2, [r3, #12]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	3320      	adds	r3, #32
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f107 0108 	add.w	r1, r7, #8
 8009528:	4610      	mov	r0, r2
 800952a:	4798      	blx	r3
        return 0;
 800952c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800952e:	f107 0308 	add.w	r3, r7, #8
 8009532:	4618      	mov	r0, r3
 8009534:	f009 fbd6 	bl	8012ce4 <_ZN10TestResultD1Ev>
 8009538:	e0e1      	b.n	80096fe <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	4618      	mov	r0, r3
 8009540:	f00c fbc4 	bl	8015ccc <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d019      	beq.n	800957e <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	685a      	ldr	r2, [r3, #4]
 800954e:	f107 0308 	add.w	r3, r7, #8
 8009552:	4611      	mov	r1, r2
 8009554:	4618      	mov	r0, r3
 8009556:	f009 fb8d 	bl	8012c74 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68da      	ldr	r2, [r3, #12]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3324      	adds	r3, #36	; 0x24
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f107 0108 	add.w	r1, r7, #8
 800956c:	4610      	mov	r0, r2
 800956e:	4798      	blx	r3
        return 0;
 8009570:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8009572:	f107 0308 	add.w	r3, r7, #8
 8009576:	4618      	mov	r0, r3
 8009578:	f009 fbb4 	bl	8012ce4 <_ZN10TestResultD1Ev>
 800957c:	e0bf      	b.n	80096fe <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	4618      	mov	r0, r3
 8009584:	f00c fbae 	bl	8015ce4 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d019      	beq.n	80095c2 <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	685a      	ldr	r2, [r3, #4]
 8009592:	f107 0308 	add.w	r3, r7, #8
 8009596:	4611      	mov	r1, r2
 8009598:	4618      	mov	r0, r3
 800959a:	f009 fb6b 	bl	8012c74 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68da      	ldr	r2, [r3, #12]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3328      	adds	r3, #40	; 0x28
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f107 0108 	add.w	r1, r7, #8
 80095b0:	4610      	mov	r0, r2
 80095b2:	4798      	blx	r3
        return 0;
 80095b4:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80095b6:	f107 0308 	add.w	r3, r7, #8
 80095ba:	4618      	mov	r0, r3
 80095bc:	f009 fb92 	bl	8012ce4 <_ZN10TestResultD1Ev>
 80095c0:	e09d      	b.n	80096fe <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f00c fbbc 	bl	8015d44 <_ZNK20CommandLineArguments11isReversingEv>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d008      	beq.n	80095e4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68da      	ldr	r2, [r3, #12]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	331c      	adds	r3, #28
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4610      	mov	r0, r2
 80095e2:	4798      	blx	r3

    if (arguments_->isShuffling())
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f00c fbc3 	bl	8015d74 <_ZNK20CommandLineArguments11isShufflingEv>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d023      	beq.n	800963c <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	332c      	adds	r3, #44	; 0x2c
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4941      	ldr	r1, [pc, #260]	; (8009708 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 8009604:	4610      	mov	r0, r2
 8009606:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685d      	ldr	r5, [r3, #4]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	3334      	adds	r3, #52	; 0x34
 8009614:	681c      	ldr	r4, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	4618      	mov	r0, r3
 800961c:	f00c fbb6 	bl	8015d8c <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8009620:	4603      	mov	r3, r0
 8009622:	4619      	mov	r1, r3
 8009624:	4628      	mov	r0, r5
 8009626:	47a0      	blx	r4
        output_->print("\n");
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	332c      	adds	r3, #44	; 0x2c
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4935      	ldr	r1, [pc, #212]	; (800970c <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8009638:	4610      	mov	r0, r2
 800963a:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 800963c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800963e:	1c5a      	adds	r2, r3, #1
 8009640:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009644:	429a      	cmp	r2, r3
 8009646:	bf8c      	ite	hi
 8009648:	2301      	movhi	r3, #1
 800964a:	2300      	movls	r3, #0
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d04e      	beq.n	80096f0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	4618      	mov	r0, r3
 8009658:	f00c fb8c 	bl	8015d74 <_ZNK20CommandLineArguments11isShufflingEv>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00f      	beq.n	8009682 <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68dd      	ldr	r5, [r3, #12]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	3318      	adds	r3, #24
 800966e:	681c      	ldr	r4, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	4618      	mov	r0, r3
 8009676:	f00c fb89 	bl	8015d8c <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800967a:	4603      	mov	r3, r0
 800967c:	4619      	mov	r1, r3
 800967e:	4628      	mov	r0, r5
 8009680:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6858      	ldr	r0, [r3, #4]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	3340      	adds	r3, #64	; 0x40
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009692:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009694:	4798      	blx	r3
        TestResult tr(*output_);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	685a      	ldr	r2, [r3, #4]
 800969a:	f107 0308 	add.w	r3, r7, #8
 800969e:	4611      	mov	r1, r2
 80096a0:	4618      	mov	r0, r3
 80096a2:	f009 fae7 	bl	8012c74 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	68da      	ldr	r2, [r3, #12]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3314      	adds	r3, #20
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f107 0108 	add.w	r1, r7, #8
 80096b8:	4610      	mov	r0, r2
 80096ba:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 80096bc:	f107 0308 	add.w	r3, r7, #8
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7ff fcef 	bl	80090a4 <_ZNK10TestResult15getFailureCountEv>
 80096c6:	4602      	mov	r2, r0
 80096c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096ca:	4413      	add	r3, r2
 80096cc:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 80096ce:	f107 0308 	add.w	r3, r7, #8
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7ff fcf2 	bl	80090bc <_ZNK10TestResult9isFailureEv>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 80096de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096e0:	3301      	adds	r3, #1
 80096e2:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 80096e4:	f107 0308 	add.w	r3, r7, #8
 80096e8:	4618      	mov	r0, r3
 80096ea:	f009 fafb 	bl	8012ce4 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 80096ee:	e7a5      	b.n	800963c <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 80096f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d001      	beq.n	80096fa <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 80096f6:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80096f8:	e000      	b.n	80096fc <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 80096fa:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80096fc:	bf00      	nop
 80096fe:	4623      	mov	r3, r4
}
 8009700:	4618      	mov	r0, r3
 8009702:	3750      	adds	r7, #80	; 0x50
 8009704:	46bd      	mov	sp, r7
 8009706:	bdb0      	pop	{r4, r5, r7, pc}
 8009708:	080247c0 	.word	0x080247c0
 800970c:	080247ec 	.word	0x080247ec

08009710 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 8009710:	b590      	push	{r4, r7, lr}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 8009718:	229d      	movs	r2, #157	; 0x9d
 800971a:	4906      	ldr	r1, [pc, #24]	; (8009734 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 800971c:	201c      	movs	r0, #28
 800971e:	f001 f9eb 	bl	800aaf8 <_ZnwjPKci>
 8009722:	4604      	mov	r4, r0
 8009724:	4620      	mov	r0, r4
 8009726:	f005 f955 	bl	800e9d4 <_ZN18TeamCityTestOutputC1Ev>
 800972a:	4623      	mov	r3, r4
}
 800972c:	4618      	mov	r0, r3
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	bd90      	pop	{r4, r7, pc}
 8009734:	08024788 	.word	0x08024788

08009738 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 8009738:	b590      	push	{r4, r7, lr}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 8009742:	22a2      	movs	r2, #162	; 0xa2
 8009744:	490a      	ldr	r1, [pc, #40]	; (8009770 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 8009746:	2014      	movs	r0, #20
 8009748:	f001 f9d6 	bl	800aaf8 <_ZnwjPKci>
 800974c:	4604      	mov	r4, r0
 800974e:	4620      	mov	r0, r4
 8009750:	f000 f980 	bl	8009a54 <_ZN15JUnitTestOutputC1Ev>
 8009754:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d003      	beq.n	8009764 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f000 fbb2 	bl	8009ec8 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 8009764:	68fb      	ldr	r3, [r7, #12]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3714      	adds	r7, #20
 800976a:	46bd      	mov	sp, r7
 800976c:	bd90      	pop	{r4, r7, pc}
 800976e:	bf00      	nop
 8009770:	08024788 	.word	0x08024788

08009774 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 8009774:	b590      	push	{r4, r7, lr}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 800977c:	22ab      	movs	r2, #171	; 0xab
 800977e:	4906      	ldr	r1, [pc, #24]	; (8009798 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 8009780:	2010      	movs	r0, #16
 8009782:	f001 f9b9 	bl	800aaf8 <_ZnwjPKci>
 8009786:	4604      	mov	r4, r0
 8009788:	4620      	mov	r0, r4
 800978a:	f7ff fcb3 	bl	80090f4 <_ZN17ConsoleTestOutputC1Ev>
 800978e:	4623      	mov	r3, r4
}
 8009790:	4618      	mov	r0, r3
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	bd90      	pop	{r4, r7, pc}
 8009798:	08024788 	.word	0x08024788

0800979c <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 800979c:	b590      	push	{r4, r7, lr}
 800979e:	b087      	sub	sp, #28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 80097a8:	22b0      	movs	r2, #176	; 0xb0
 80097aa:	490e      	ldr	r1, [pc, #56]	; (80097e4 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 80097ac:	2018      	movs	r0, #24
 80097ae:	f001 f9a3 	bl	800aaf8 <_ZnwjPKci>
 80097b2:	4604      	mov	r4, r0
 80097b4:	4620      	mov	r0, r4
 80097b6:	f007 ff83 	bl	80116c0 <_ZN19CompositeTestOutputC1Ev>
 80097ba:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	335c      	adds	r3, #92	; 0x5c
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68b9      	ldr	r1, [r7, #8]
 80097c6:	6978      	ldr	r0, [r7, #20]
 80097c8:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	3360      	adds	r3, #96	; 0x60
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	6879      	ldr	r1, [r7, #4]
 80097d4:	6978      	ldr	r0, [r7, #20]
 80097d6:	4798      	blx	r3
  return composite;
 80097d8:	697b      	ldr	r3, [r7, #20]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	371c      	adds	r7, #28
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd90      	pop	{r4, r7, pc}
 80097e2:	bf00      	nop
 80097e4:	08024788 	.word	0x08024788

080097e8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 80097e8:	b5b0      	push	{r4, r5, r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	6839      	ldr	r1, [r7, #0]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f00b fe4f 	bl	801549c <_ZN20CommandLineArguments5parseEP10TestPlugin>
 80097fe:	4603      	mov	r3, r0
 8009800:	f083 0301 	eor.w	r3, r3, #1
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	d029      	beq.n	800985e <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	3310      	adds	r3, #16
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	4798      	blx	r3
 8009816:	4602      	mov	r2, r0
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685d      	ldr	r5, [r3, #4]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	332c      	adds	r3, #44	; 0x2c
 8009828:	681c      	ldr	r4, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	4618      	mov	r0, r3
 8009830:	f00c fa10 	bl	8015c54 <_ZNK20CommandLineArguments8needHelpEv>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d006      	beq.n	8009848 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	4618      	mov	r0, r3
 8009840:	f00c f9fa 	bl	8015c38 <_ZNK20CommandLineArguments4helpEv>
 8009844:	4603      	mov	r3, r0
 8009846:	e005      	b.n	8009854 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	4618      	mov	r0, r3
 800984e:	f00c f9e5 	bl	8015c1c <_ZNK20CommandLineArguments5usageEv>
 8009852:	4603      	mov	r3, r0
 8009854:	4619      	mov	r1, r3
 8009856:	4628      	mov	r0, r5
 8009858:	47a0      	blx	r4
    return false;
 800985a:	2300      	movs	r3, #0
 800985c:	e050      	b.n	8009900 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	4618      	mov	r0, r3
 8009864:	f00d f84c 	bl	8016900 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d02c      	beq.n	80098c8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	330c      	adds	r3, #12
 8009874:	681c      	ldr	r4, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	4618      	mov	r0, r3
 800987c:	f00d f864 	bl	8016948 <_ZNK20CommandLineArguments14getPackageNameEv>
 8009880:	4603      	mov	r3, r0
 8009882:	4619      	mov	r1, r3
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	47a0      	blx	r4
 8009888:	4602      	mov	r2, r0
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	4618      	mov	r0, r3
 8009894:	f00c f9ea 	bl	8015c6c <_ZNK20CommandLineArguments9isVerboseEv>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d02f      	beq.n	80098fe <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3314      	adds	r3, #20
 80098a4:	681c      	ldr	r4, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685d      	ldr	r5, [r3, #4]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	3310      	adds	r3, #16
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	4798      	blx	r3
 80098b6:	4603      	mov	r3, r0
 80098b8:	461a      	mov	r2, r3
 80098ba:	4629      	mov	r1, r5
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	47a0      	blx	r4
 80098c0:	4602      	mov	r2, r0
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	605a      	str	r2, [r3, #4]
 80098c6:	e01a      	b.n	80098fe <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f00d f829 	bl	8016924 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d009      	beq.n	80098ec <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3308      	adds	r3, #8
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	4798      	blx	r3
 80098e4:	4602      	mov	r2, r0
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	605a      	str	r2, [r3, #4]
 80098ea:	e008      	b.n	80098fe <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	3310      	adds	r3, #16
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	4798      	blx	r3
 80098f8:	4602      	mov	r2, r0
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	605a      	str	r2, [r3, #4]
  return true;
 80098fe:	2301      	movs	r3, #1
}
 8009900:	4618      	mov	r0, r3
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bdb0      	pop	{r4, r5, r7, pc}

08009908 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	4a05      	ldr	r2, [pc, #20]	; (8009928 <_ZN16SetPointerPluginD1Ev+0x20>)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	601a      	str	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4618      	mov	r0, r3
 800991a:	f008 f9e7 	bl	8011cec <_ZN10TestPluginD1Ev>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4618      	mov	r0, r3
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	08029028 	.word	0x08029028

0800992c <_ZN16SetPointerPluginD0Ev>:
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f7ff ffe7 	bl	8009908 <_ZN16SetPointerPluginD1Ev>
 800993a:	2114      	movs	r1, #20
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f001 f8ef 	bl	800ab20 <_ZdlPvj>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4618      	mov	r0, r3
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	691b      	ldr	r3, [r3, #16]
    }
 8009958:	4618      	mov	r0, r3
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4910      	ldr	r1, [pc, #64]	; (80099b0 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8009970:	4618      	mov	r0, r3
 8009972:	f003 fc84 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	609a      	str	r2, [r3, #8]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	60da      	str	r2, [r3, #12]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	741a      	strb	r2, [r3, #16]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	3314      	adds	r3, #20
 800998c:	4908      	ldr	r1, [pc, #32]	; (80099b0 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 800998e:	4618      	mov	r0, r3
 8009990:	f003 fc75 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	61da      	str	r2, [r3, #28]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	621a      	str	r2, [r3, #32]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4618      	mov	r0, r3
 80099aa:	3708      	adds	r7, #8
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	080247f0 	.word	0x080247f0

080099b4 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	601a      	str	r2, [r3, #0]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	605a      	str	r2, [r3, #4]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	609a      	str	r2, [r3, #8]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	60da      	str	r2, [r3, #12]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	611a      	str	r2, [r3, #16]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	3314      	adds	r3, #20
 80099de:	4907      	ldr	r1, [pc, #28]	; (80099fc <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 80099e0:	4618      	mov	r0, r3
 80099e2:	f003 fc4c 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	61da      	str	r2, [r3, #28]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	621a      	str	r2, [r3, #32]
    {
    }
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4618      	mov	r0, r3
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	080247f0 	.word	0x080247f0

08009a00 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	3314      	adds	r3, #20
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f003 ffee 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4618      	mov	r0, r3
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7ff ffc4 	bl	80099b4 <_ZN20JUnitTestGroupResultC1Ev>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	3328      	adds	r3, #40	; 0x28
 8009a30:	4907      	ldr	r1, [pc, #28]	; (8009a50 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8009a32:	4618      	mov	r0, r3
 8009a34:	f003 fc23 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	3330      	adds	r3, #48	; 0x30
 8009a3c:	4904      	ldr	r1, [pc, #16]	; (8009a50 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f003 fc1d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4618      	mov	r0, r3
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	080247f0 	.word	0x080247f0

08009a54 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8009a54:	b590      	push	{r4, r7, lr}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f007 f936 	bl	8010cd0 <_ZN10TestOutputC1Ev>
 8009a64:	4a09      	ldr	r2, [pc, #36]	; (8009a8c <_ZN15JUnitTestOutputC1Ev+0x38>)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	601a      	str	r2, [r3, #0]
 8009a6a:	224d      	movs	r2, #77	; 0x4d
 8009a6c:	4908      	ldr	r1, [pc, #32]	; (8009a90 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 8009a6e:	2038      	movs	r0, #56	; 0x38
 8009a70:	f001 f842 	bl	800aaf8 <_ZnwjPKci>
 8009a74:	4604      	mov	r4, r0
 8009a76:	4620      	mov	r0, r4
 8009a78:	f7ff ffd0 	bl	8009a1c <_ZN19JUnitTestOutputImplC1Ev>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	611c      	str	r4, [r3, #16]
{
}
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4618      	mov	r0, r3
 8009a84:	370c      	adds	r7, #12
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd90      	pop	{r4, r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	080288c8 	.word	0x080288c8
 8009a90:	080247f4 	.word	0x080247f4

08009a94 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	3330      	adds	r3, #48	; 0x30
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f003 ffa4 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	3328      	adds	r3, #40	; 0x28
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f003 ff9f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7ff ffa4 	bl	8009a00 <_ZN20JUnitTestGroupResultD1Ev>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4618      	mov	r0, r3
 8009abc:	3708      	adds	r7, #8
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
	...

08009ac4 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8009ac4:	b590      	push	{r4, r7, lr}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	4a0c      	ldr	r2, [pc, #48]	; (8009b00 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f838 	bl	8009b48 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	691c      	ldr	r4, [r3, #16]
 8009adc:	2c00      	cmp	r4, #0
 8009ade:	d006      	beq.n	8009aee <_ZN15JUnitTestOutputD1Ev+0x2a>
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f7ff ffd7 	bl	8009a94 <_ZN19JUnitTestOutputImplD1Ev>
 8009ae6:	2138      	movs	r1, #56	; 0x38
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f001 f819 	bl	800ab20 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f007 f90b 	bl	8010d0c <_ZN10TestOutputD1Ev>
}
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4618      	mov	r0, r3
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd90      	pop	{r4, r7, pc}
 8009b00:	080288c8 	.word	0x080288c8

08009b04 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
}
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f7ff ffd9 	bl	8009ac4 <_ZN15JUnitTestOutputD1Ev>
 8009b12:	2114      	movs	r1, #20
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f001 f803 	bl	800ab20 <_ZdlPvj>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	3314      	adds	r3, #20
 8009b30:	4618      	mov	r0, r3
 8009b32:	f003 ff5c 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f003 ff58 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4618      	mov	r0, r3
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 8009b48:	b590      	push	{r4, r7, lr}
 8009b4a:	b087      	sub	sp, #28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	2200      	movs	r2, #0
 8009b56:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	f103 0414 	add.w	r4, r3, #20
 8009b68:	f107 0308 	add.w	r3, r7, #8
 8009b6c:	491d      	ldr	r1, [pc, #116]	; (8009be4 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f003 fb85 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8009b74:	f107 0308 	add.w	r3, r7, #8
 8009b78:	4619      	mov	r1, r3
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f003 fbeb 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 8009b80:	f107 0308 	add.w	r3, r7, #8
 8009b84:	4618      	mov	r0, r3
 8009b86:	f003 ff32 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	69db      	ldr	r3, [r3, #28]
 8009b90:	617b      	str	r3, [r7, #20]
    while (cur) {
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d018      	beq.n	8009bca <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9c:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d004      	beq.n	8009bb0 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	3204      	adds	r2, #4
 8009baa:	6812      	ldr	r2, [r2, #0]
 8009bac:	4618      	mov	r0, r3
 8009bae:	4790      	blx	r2
        delete cur;
 8009bb0:	697c      	ldr	r4, [r7, #20]
 8009bb2:	2c00      	cmp	r4, #0
 8009bb4:	d006      	beq.n	8009bc4 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f7ff ffb4 	bl	8009b24 <_ZN23JUnitTestCaseResultNodeD1Ev>
 8009bbc:	2128      	movs	r1, #40	; 0x28
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f000 ffae 	bl	800ab20 <_ZdlPvj>
        cur = tmp;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	617b      	str	r3, [r7, #20]
    while (cur) {
 8009bc8:	e7e3      	b.n	8009b92 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	621a      	str	r2, [r3, #32]
}
 8009bda:	bf00      	nop
 8009bdc:	371c      	adds	r7, #28
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd90      	pop	{r4, r7, pc}
 8009be2:	bf00      	nop
 8009be4:	080247f0 	.word	0x080247f0

08009be8 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
}
 8009c06:	bf00      	nop
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 8009c12:	b590      	push	{r4, r7, lr}
 8009c14:	b083      	sub	sp, #12
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
 8009c1a:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	6a1c      	ldr	r4, [r3, #32]
 8009c22:	6838      	ldr	r0, [r7, #0]
 8009c24:	f009 f9c6 	bl	8012fb4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	6a1c      	ldr	r4, [r3, #32]
 8009c32:	6838      	ldr	r0, [r7, #0]
 8009c34:	f7ff fe8a 	bl	800994c <_ZNK10TestResult13getCheckCountEv>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	6223      	str	r3, [r4, #32]
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd90      	pop	{r4, r7, pc}

08009c44 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
}
 8009c4e:	bf00      	nop
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 8009c5a:	b590      	push	{r4, r7, lr}
 8009c5c:	b083      	sub	sp, #12
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	691c      	ldr	r4, [r3, #16]
 8009c68:	6838      	ldr	r0, [r7, #0]
 8009c6a:	f009 f9af 	bl	8012fcc <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	3364      	adds	r3, #100	; 0x64
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	4798      	blx	r3
    resetTestGroupResult();
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f7ff ff62 	bl	8009b48 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 8009c84:	bf00      	nop
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd90      	pop	{r4, r7, pc}

08009c8c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8009c8c:	b590      	push	{r4, r7, lr}
 8009c8e:	b089      	sub	sp, #36	; 0x24
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	3201      	adds	r2, #1
 8009c9e:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	f103 0414 	add.w	r4, r3, #20
 8009ca8:	f107 0308 	add.w	r3, r7, #8
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f009 fcef 	bl	8013692 <_ZNK10UtestShell8getGroupEv>
 8009cb4:	f107 0308 	add.w	r3, r7, #8
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f003 fb4b 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 8009cc0:	f107 0308 	add.w	r3, r7, #8
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f003 fe92 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 8009cca:	4b3c      	ldr	r3, [pc, #240]	; (8009dbc <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4798      	blx	r3
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	6a1b      	ldr	r3, [r3, #32]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d110      	bne.n	8009d04 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 8009ce2:	2288      	movs	r2, #136	; 0x88
 8009ce4:	4936      	ldr	r1, [pc, #216]	; (8009dc0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8009ce6:	2028      	movs	r0, #40	; 0x28
 8009ce8:	f000 ff06 	bl	800aaf8 <_ZnwjPKci>
 8009cec:	4604      	mov	r4, r0
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f7ff fe38 	bl	8009964 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 8009cf8:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	6912      	ldr	r2, [r2, #16]
 8009cfe:	6a1b      	ldr	r3, [r3, #32]
 8009d00:	61d3      	str	r3, [r2, #28]
 8009d02:	e013      	b.n	8009d2c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 8009d04:	228b      	movs	r2, #139	; 0x8b
 8009d06:	492e      	ldr	r1, [pc, #184]	; (8009dc0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8009d08:	2028      	movs	r0, #40	; 0x28
 8009d0a:	f000 fef5 	bl	800aaf8 <_ZnwjPKci>
 8009d0e:	4604      	mov	r4, r0
 8009d10:	4620      	mov	r0, r4
 8009d12:	f7ff fe27 	bl	8009964 <_ZN23JUnitTestCaseResultNodeC1Ev>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	691b      	ldr	r3, [r3, #16]
 8009d1a:	6a1b      	ldr	r3, [r3, #32]
 8009d1c:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	6a1a      	ldr	r2, [r3, #32]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	691b      	ldr	r3, [r3, #16]
 8009d28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009d2a:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	461c      	mov	r4, r3
 8009d34:	f107 0310 	add.w	r3, r7, #16
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f009 fc9a 	bl	8013674 <_ZNK10UtestShell7getNameEv>
 8009d40:	f107 0310 	add.w	r3, r7, #16
 8009d44:	4619      	mov	r1, r3
 8009d46:	4620      	mov	r0, r4
 8009d48:	f003 fb05 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 8009d4c:	f107 0310 	add.w	r3, r7, #16
 8009d50:	4618      	mov	r0, r3
 8009d52:	f003 fe4c 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	6a1b      	ldr	r3, [r3, #32]
 8009d5c:	f103 0414 	add.w	r4, r3, #20
 8009d60:	f107 0318 	add.w	r3, r7, #24
 8009d64:	6839      	ldr	r1, [r7, #0]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f009 fd55 	bl	8013816 <_ZNK10UtestShell7getFileEv>
 8009d6c:	f107 0318 	add.w	r3, r7, #24
 8009d70:	4619      	mov	r1, r3
 8009d72:	4620      	mov	r0, r4
 8009d74:	f003 faef 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 8009d78:	f107 0318 	add.w	r3, r7, #24
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f003 fe36 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	691b      	ldr	r3, [r3, #16]
 8009d86:	6a1c      	ldr	r4, [r3, #32]
 8009d88:	6838      	ldr	r0, [r7, #0]
 8009d8a:	f009 fd53 	bl	8013834 <_ZNK10UtestShell13getLineNumberEv>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3318      	adds	r3, #24
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	6838      	ldr	r0, [r7, #0]
 8009d9c:	4798      	blx	r3
 8009d9e:	4603      	mov	r3, r0
 8009da0:	f083 0301 	eor.w	r3, r3, #1
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d004      	beq.n	8009db4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	6a1b      	ldr	r3, [r3, #32]
 8009db0:	2201      	movs	r2, #1
 8009db2:	741a      	strb	r2, [r3, #16]
    }
}
 8009db4:	bf00      	nop
 8009db6:	3724      	adds	r7, #36	; 0x24
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd90      	pop	{r4, r7, pc}
 8009dbc:	200000a8 	.word	0x200000a8
 8009dc0:	080247f4 	.word	0x080247f4

08009dc4 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b08a      	sub	sp, #40	; 0x28
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 8009dd0:	f107 0310 	add.w	r3, r7, #16
 8009dd4:	4928      	ldr	r1, [pc, #160]	; (8009e78 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f003 fa51 	bl	800d27e <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	3328      	adds	r3, #40	; 0x28
 8009de2:	4618      	mov	r0, r3
 8009de4:	f003 fdf2 	bl	800d9cc <_ZNK12SimpleString7isEmptyEv>
 8009de8:	4603      	mov	r3, r0
 8009dea:	f083 0301 	eor.w	r3, r3, #1
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00f      	beq.n	8009e14 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8009dfc:	f107 0310 	add.w	r3, r7, #16
 8009e00:	4611      	mov	r1, r2
 8009e02:	4618      	mov	r0, r3
 8009e04:	f003 fe70 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 8009e08:	f107 0310 	add.w	r3, r7, #16
 8009e0c:	491b      	ldr	r1, [pc, #108]	; (8009e7c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f003 fe7c 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 8009e14:	f107 0310 	add.w	r3, r7, #16
 8009e18:	6879      	ldr	r1, [r7, #4]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f003 fe64 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	3384      	adds	r3, #132	; 0x84
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f107 0018 	add.w	r0, r7, #24
 8009e2c:	f107 0210 	add.w	r2, r7, #16
 8009e30:	68b9      	ldr	r1, [r7, #8]
 8009e32:	4798      	blx	r3
 8009e34:	f107 0320 	add.w	r3, r7, #32
 8009e38:	4911      	ldr	r1, [pc, #68]	; (8009e80 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f003 fa1f 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f107 0220 	add.w	r2, r7, #32
 8009e46:	f107 0118 	add.w	r1, r7, #24
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f003 fe31 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 8009e50:	f107 0320 	add.w	r3, r7, #32
 8009e54:	4618      	mov	r0, r3
 8009e56:	f003 fdca 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8009e5a:	f107 0318 	add.w	r3, r7, #24
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f003 fdc5 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 8009e64:	f107 0310 	add.w	r3, r7, #16
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f003 fdc0 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 8009e6e:	bf00      	nop
}
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	3728      	adds	r7, #40	; 0x28
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	08024810 	.word	0x08024810
 8009e7c:	0802481c 	.word	0x0802481c
 8009e80:	08024820 	.word	0x08024820

08009e84 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 8009e90:	6879      	ldr	r1, [r7, #4]
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	f003 fa47 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8009e98:	4b0a      	ldr	r3, [pc, #40]	; (8009ec4 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 8009e9a:	617b      	str	r3, [r7, #20]
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00a      	beq.n	8009eba <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	225f      	movs	r2, #95	; 0x5f
 8009eaa:	4619      	mov	r1, r3
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f003 fbcc 	bl	800d64a <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	617b      	str	r3, [r7, #20]
 8009eb8:	e7f0      	b.n	8009e9c <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 8009eba:	bf00      	nop
}
 8009ebc:	68f8      	ldr	r0, [r7, #12]
 8009ebe:	3718      	adds	r7, #24
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	08024828 	.word	0x08024828

08009ec8 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	691b      	ldr	r3, [r3, #16]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d006      	beq.n	8009ee8 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	3328      	adds	r3, #40	; 0x28
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f003 fa37 	bl	800d356 <_ZN12SimpleStringaSERKS_>
    }
}
 8009ee8:	bf00      	nop
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 8009ef0:	b590      	push	{r4, r7, lr}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	3368      	adds	r3, #104	; 0x68
 8009efe:	681c      	ldr	r4, [r3, #0]
 8009f00:	f107 0308 	add.w	r3, r7, #8
 8009f04:	4908      	ldr	r1, [pc, #32]	; (8009f28 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 8009f06:	4618      	mov	r0, r3
 8009f08:	f003 f9b9 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8009f0c:	f107 0308 	add.w	r3, r7, #8
 8009f10:	4619      	mov	r1, r3
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	47a0      	blx	r4
 8009f16:	f107 0308 	add.w	r3, r7, #8
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f003 fd67 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 8009f20:	bf00      	nop
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd90      	pop	{r4, r7, pc}
 8009f28:	08024834 	.word	0x08024834

08009f2c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 8009f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f30:	b08a      	sub	sp, #40	; 0x28
 8009f32:	af04      	add	r7, sp, #16
 8009f34:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 8009f3c:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 8009f42:	3314      	adds	r3, #20
 8009f44:	4618      	mov	r0, r3
 8009f46:	f003 fd25 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 8009f4a:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	691b      	ldr	r3, [r3, #16]
 8009f50:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 8009f52:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	4a23      	ldr	r2, [pc, #140]	; (8009fe8 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8009f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f60:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 8009f62:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	691a      	ldr	r2, [r3, #16]
 8009f6a:	4b1f      	ldr	r3, [pc, #124]	; (8009fe8 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8009f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8009f70:	099b      	lsrs	r3, r3, #6
 8009f72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009f76:	fb01 f303 	mul.w	r3, r1, r3
 8009f7a:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8009f7c:	603b      	str	r3, [r7, #0]
 8009f7e:	4b1b      	ldr	r3, [pc, #108]	; (8009fec <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4798      	blx	r3
 8009f84:	4603      	mov	r3, r0
 8009f86:	f107 0008 	add.w	r0, r7, #8
 8009f8a:	9303      	str	r3, [sp, #12]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	9302      	str	r3, [sp, #8]
 8009f90:	9601      	str	r6, [sp, #4]
 8009f92:	9500      	str	r5, [sp, #0]
 8009f94:	4623      	mov	r3, r4
 8009f96:	4642      	mov	r2, r8
 8009f98:	4915      	ldr	r1, [pc, #84]	; (8009ff0 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 8009f9a:	f004 fa2f 	bl	800e3fc <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	3368      	adds	r3, #104	; 0x68
 8009fa4:	681c      	ldr	r4, [r3, #0]
 8009fa6:	f107 0308 	add.w	r3, r7, #8
 8009faa:	4618      	mov	r0, r3
 8009fac:	f003 fcf2 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	f107 0310 	add.w	r3, r7, #16
 8009fb6:	4611      	mov	r1, r2
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f003 f960 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8009fbe:	f107 0310 	add.w	r3, r7, #16
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	47a0      	blx	r4
 8009fc8:	f107 0310 	add.w	r3, r7, #16
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f003 fd0e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 8009fd2:	f107 0308 	add.w	r3, r7, #8
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f003 fd09 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 8009fdc:	bf00      	nop
 8009fde:	3718      	adds	r7, #24
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe6:	bf00      	nop
 8009fe8:	10624dd3 	.word	0x10624dd3
 8009fec:	200000ac 	.word	0x200000ac
 8009ff0:	08024860 	.word	0x08024860

08009ff4 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 8009ff4:	b590      	push	{r4, r7, lr}
 8009ff6:	b087      	sub	sp, #28
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	3368      	adds	r3, #104	; 0x68
 800a002:	681c      	ldr	r4, [r3, #0]
 800a004:	f107 0308 	add.w	r3, r7, #8
 800a008:	4912      	ldr	r1, [pc, #72]	; (800a054 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 800a00a:	4618      	mov	r0, r3
 800a00c:	f003 f937 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800a010:	f107 0308 	add.w	r3, r7, #8
 800a014:	4619      	mov	r1, r3
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	47a0      	blx	r4
 800a01a:	f107 0308 	add.w	r3, r7, #8
 800a01e:	4618      	mov	r0, r3
 800a020:	f003 fce5 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	3368      	adds	r3, #104	; 0x68
 800a02a:	681c      	ldr	r4, [r3, #0]
 800a02c:	f107 0310 	add.w	r3, r7, #16
 800a030:	4909      	ldr	r1, [pc, #36]	; (800a058 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 800a032:	4618      	mov	r0, r3
 800a034:	f003 f923 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800a038:	f107 0310 	add.w	r3, r7, #16
 800a03c:	4619      	mov	r1, r3
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	47a0      	blx	r4
 800a042:	f107 0310 	add.w	r3, r7, #16
 800a046:	4618      	mov	r0, r3
 800a048:	f003 fcd1 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 800a04c:	bf00      	nop
 800a04e:	371c      	adds	r7, #28
 800a050:	46bd      	mov	sp, r7
 800a052:	bd90      	pop	{r4, r7, pc}
 800a054:	080248d0 	.word	0x080248d0
 800a058:	080248e0 	.word	0x080248e0

0800a05c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f003 fc93 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800a06e:	4603      	mov	r3, r0
 800a070:	4619      	mov	r1, r3
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	f003 f903 	bl	800d27e <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 800a078:	4a0e      	ldr	r2, [pc, #56]	; (800a0b4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 800a07a:	490f      	ldr	r1, [pc, #60]	; (800a0b8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f003 fb13 	bl	800d6a8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 800a082:	4a0e      	ldr	r2, [pc, #56]	; (800a0bc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 800a084:	490e      	ldr	r1, [pc, #56]	; (800a0c0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f003 fb0e 	bl	800d6a8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 800a08c:	4a0d      	ldr	r2, [pc, #52]	; (800a0c4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 800a08e:	490e      	ldr	r1, [pc, #56]	; (800a0c8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f003 fb09 	bl	800d6a8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 800a096:	4a0d      	ldr	r2, [pc, #52]	; (800a0cc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 800a098:	490d      	ldr	r1, [pc, #52]	; (800a0d0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f003 fb04 	bl	800d6a8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 800a0a0:	4a0c      	ldr	r2, [pc, #48]	; (800a0d4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 800a0a2:	490d      	ldr	r1, [pc, #52]	; (800a0d8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	f003 faff 	bl	800d6a8 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 800a0aa:	bf00      	nop
}
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	3710      	adds	r7, #16
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	080248f0 	.word	0x080248f0
 800a0b8:	080248f8 	.word	0x080248f8
 800a0bc:	080248fc 	.word	0x080248fc
 800a0c0:	08024904 	.word	0x08024904
 800a0c4:	08024908 	.word	0x08024908
 800a0c8:	08024910 	.word	0x08024910
 800a0cc:	08024914 	.word	0x08024914
 800a0d0:	0802491c 	.word	0x0802491c
 800a0d4:	08024920 	.word	0x08024920
 800a0d8:	0802492c 	.word	0x0802492c

0800a0dc <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 800a0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e0:	b096      	sub	sp, #88	; 0x58
 800a0e2:	af08      	add	r7, sp, #32
 800a0e4:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	69db      	ldr	r3, [r3, #28]
 800a0ec:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 800a0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f000 80b2 	beq.w	800a25a <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 800a0fa:	3328      	adds	r3, #40	; 0x28
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f003 fc49 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800a102:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	3328      	adds	r3, #40	; 0x28
 800a10a:	4618      	mov	r0, r3
 800a10c:	f003 fc5e 	bl	800d9cc <_ZNK12SimpleString7isEmptyEv>
 800a110:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 800a112:	2b00      	cmp	r3, #0
 800a114:	d001      	beq.n	800a11a <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 800a116:	4c53      	ldr	r4, [pc, #332]	; (800a264 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 800a118:	e000      	b.n	800a11c <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 800a11a:	4c53      	ldr	r4, [pc, #332]	; (800a268 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 800a120:	3314      	adds	r3, #20
 800a122:	4618      	mov	r0, r3
 800a124:	f003 fc36 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800a128:	4605      	mov	r5, r0
 800a12a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a12c:	4618      	mov	r0, r3
 800a12e:	f003 fc31 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800a132:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 800a134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a136:	6a1a      	ldr	r2, [r3, #32]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800a140:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800a142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	4a49      	ldr	r2, [pc, #292]	; (800a26c <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800a148:	fba2 2303 	umull	r2, r3, r2, r3
 800a14c:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 800a14e:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800a150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a152:	689a      	ldr	r2, [r3, #8]
 800a154:	4b45      	ldr	r3, [pc, #276]	; (800a26c <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800a156:	fba3 1302 	umull	r1, r3, r3, r2
 800a15a:	099b      	lsrs	r3, r3, #6
 800a15c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a160:	fb01 f303 	mul.w	r3, r1, r3
 800a164:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800a166:	603b      	str	r3, [r7, #0]
 800a168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a16a:	3314      	adds	r3, #20
 800a16c:	4618      	mov	r0, r3
 800a16e:	f003 fc11 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800a172:	4602      	mov	r2, r0
 800a174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a176:	69db      	ldr	r3, [r3, #28]
 800a178:	f107 0014 	add.w	r0, r7, #20
 800a17c:	9306      	str	r3, [sp, #24]
 800a17e:	9205      	str	r2, [sp, #20]
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	9204      	str	r2, [sp, #16]
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	9203      	str	r2, [sp, #12]
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	9302      	str	r3, [sp, #8]
 800a18c:	9601      	str	r6, [sp, #4]
 800a18e:	9500      	str	r5, [sp, #0]
 800a190:	4623      	mov	r3, r4
 800a192:	4642      	mov	r2, r8
 800a194:	4936      	ldr	r1, [pc, #216]	; (800a270 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 800a196:	f004 f931 	bl	800e3fc <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	3368      	adds	r3, #104	; 0x68
 800a1a0:	681c      	ldr	r4, [r3, #0]
 800a1a2:	f107 0314 	add.w	r3, r7, #20
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f003 fbf4 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	f107 031c 	add.w	r3, r7, #28
 800a1b2:	4611      	mov	r1, r2
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f003 f862 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800a1ba:	f107 031c 	add.w	r3, r7, #28
 800a1be:	4619      	mov	r1, r3
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	47a0      	blx	r4
 800a1c4:	f107 031c 	add.w	r3, r7, #28
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f003 fc10 	bl	800d9ee <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1d4:	6a12      	ldr	r2, [r2, #32]
 800a1d6:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 800a1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d007      	beq.n	800a1f0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3388      	adds	r3, #136	; 0x88
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	4798      	blx	r3
 800a1ee:	e017      	b.n	800a220 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 800a1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f2:	7c1b      	ldrb	r3, [r3, #16]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d013      	beq.n	800a220 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	3368      	adds	r3, #104	; 0x68
 800a1fe:	681c      	ldr	r4, [r3, #0]
 800a200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a204:	491b      	ldr	r1, [pc, #108]	; (800a274 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 800a206:	4618      	mov	r0, r3
 800a208:	f003 f839 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800a20c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a210:	4619      	mov	r1, r3
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	47a0      	blx	r4
 800a216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a21a:	4618      	mov	r0, r3
 800a21c:	f003 fbe7 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	3368      	adds	r3, #104	; 0x68
 800a226:	681c      	ldr	r4, [r3, #0]
 800a228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a22c:	4912      	ldr	r1, [pc, #72]	; (800a278 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 800a22e:	4618      	mov	r0, r3
 800a230:	f003 f825 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800a234:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a238:	4619      	mov	r1, r3
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	47a0      	blx	r4
 800a23e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a242:	4618      	mov	r0, r3
 800a244:	f003 fbd3 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 800a248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24c:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 800a24e:	f107 0314 	add.w	r3, r7, #20
 800a252:	4618      	mov	r0, r3
 800a254:	f003 fbcb 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    while (cur) {
 800a258:	e749      	b.n	800a0ee <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 800a25a:	bf00      	nop
 800a25c:	3738      	adds	r7, #56	; 0x38
 800a25e:	46bd      	mov	sp, r7
 800a260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a264:	080247f0 	.word	0x080247f0
 800a268:	08024930 	.word	0x08024930
 800a26c:	10624dd3 	.word	0x10624dd3
 800a270:	08024934 	.word	0x08024934
 800a274:	08024990 	.word	0x08024990
 800a278:	080249a0 	.word	0x080249a0

0800a27c <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 800a27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a27e:	b091      	sub	sp, #68	; 0x44
 800a280:	af02      	add	r7, sp, #8
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	68d9      	ldr	r1, [r3, #12]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	3308      	adds	r3, #8
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f107 0210 	add.w	r2, r7, #16
 800a298:	4610      	mov	r0, r2
 800a29a:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800a29c:	f107 0310 	add.w	r3, r7, #16
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f003 fb77 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800a2a6:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	68da      	ldr	r2, [r3, #12]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	3314      	adds	r3, #20
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4610      	mov	r0, r2
 800a2b8:	4798      	blx	r3
 800a2ba:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800a2bc:	461e      	mov	r6, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	3380      	adds	r3, #128	; 0x80
 800a2c4:	681c      	ldr	r4, [r3, #0]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	68d9      	ldr	r1, [r3, #12]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	3318      	adds	r3, #24
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f107 0220 	add.w	r2, r7, #32
 800a2d8:	4610      	mov	r0, r2
 800a2da:	4798      	blx	r3
 800a2dc:	f107 0318 	add.w	r3, r7, #24
 800a2e0:	f107 0220 	add.w	r2, r7, #32
 800a2e4:	6879      	ldr	r1, [r7, #4]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	47a0      	blx	r4
 800a2ea:	f107 0318 	add.w	r3, r7, #24
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f003 fb50 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	f107 0008 	add.w	r0, r7, #8
 800a2fa:	9300      	str	r3, [sp, #0]
 800a2fc:	4633      	mov	r3, r6
 800a2fe:	462a      	mov	r2, r5
 800a300:	4924      	ldr	r1, [pc, #144]	; (800a394 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 800a302:	f004 f87b 	bl	800e3fc <_Z16StringFromFormatPKcz>
 800a306:	f107 0318 	add.w	r3, r7, #24
 800a30a:	4618      	mov	r0, r3
 800a30c:	f003 fb6f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800a310:	f107 0320 	add.w	r3, r7, #32
 800a314:	4618      	mov	r0, r3
 800a316:	f003 fb6a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 800a31a:	f107 0310 	add.w	r3, r7, #16
 800a31e:	4618      	mov	r0, r3
 800a320:	f003 fb65 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	3368      	adds	r3, #104	; 0x68
 800a32a:	681c      	ldr	r4, [r3, #0]
 800a32c:	f107 0308 	add.w	r3, r7, #8
 800a330:	4618      	mov	r0, r3
 800a332:	f003 fb2f 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800a336:	4602      	mov	r2, r0
 800a338:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a33c:	4611      	mov	r1, r2
 800a33e:	4618      	mov	r0, r3
 800a340:	f002 ff9d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800a344:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a348:	4619      	mov	r1, r3
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	47a0      	blx	r4
 800a34e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a352:	4618      	mov	r0, r3
 800a354:	f003 fb4b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	3368      	adds	r3, #104	; 0x68
 800a35e:	681c      	ldr	r4, [r3, #0]
 800a360:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a364:	490c      	ldr	r1, [pc, #48]	; (800a398 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 800a366:	4618      	mov	r0, r3
 800a368:	f002 ff89 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800a36c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a370:	4619      	mov	r1, r3
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	47a0      	blx	r4
 800a376:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a37a:	4618      	mov	r0, r3
 800a37c:	f003 fb37 	bl	800d9ee <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800a380:	f107 0308 	add.w	r3, r7, #8
 800a384:	4618      	mov	r0, r3
 800a386:	f003 fb32 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 800a38a:	bf00      	nop
 800a38c:	373c      	adds	r7, #60	; 0x3c
 800a38e:	46bd      	mov	sp, r7
 800a390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a392:	bf00      	nop
 800a394:	080249b0 	.word	0x080249b0
 800a398:	080249ec 	.word	0x080249ec

0800a39c <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 800a39c:	b590      	push	{r4, r7, lr}
 800a39e:	b08d      	sub	sp, #52	; 0x34
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	3368      	adds	r3, #104	; 0x68
 800a3aa:	681c      	ldr	r4, [r3, #0]
 800a3ac:	f107 0308 	add.w	r3, r7, #8
 800a3b0:	4933      	ldr	r1, [pc, #204]	; (800a480 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f002 ff63 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800a3b8:	f107 0308 	add.w	r3, r7, #8
 800a3bc:	4619      	mov	r1, r3
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	47a0      	blx	r4
 800a3c2:	f107 0308 	add.w	r3, r7, #8
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f003 fb11 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	3368      	adds	r3, #104	; 0x68
 800a3d2:	681c      	ldr	r4, [r3, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	3380      	adds	r3, #128	; 0x80
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	6912      	ldr	r2, [r2, #16]
 800a3e0:	3230      	adds	r2, #48	; 0x30
 800a3e2:	f107 0010 	add.w	r0, r7, #16
 800a3e6:	6879      	ldr	r1, [r7, #4]
 800a3e8:	4798      	blx	r3
 800a3ea:	f107 0310 	add.w	r3, r7, #16
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	47a0      	blx	r4
 800a3f4:	f107 0310 	add.w	r3, r7, #16
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f003 faf8 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3368      	adds	r3, #104	; 0x68
 800a404:	681c      	ldr	r4, [r3, #0]
 800a406:	f107 0318 	add.w	r3, r7, #24
 800a40a:	491e      	ldr	r1, [pc, #120]	; (800a484 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 800a40c:	4618      	mov	r0, r3
 800a40e:	f002 ff36 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800a412:	f107 0318 	add.w	r3, r7, #24
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	47a0      	blx	r4
 800a41c:	f107 0318 	add.w	r3, r7, #24
 800a420:	4618      	mov	r0, r3
 800a422:	f003 fae4 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3368      	adds	r3, #104	; 0x68
 800a42c:	681c      	ldr	r4, [r3, #0]
 800a42e:	f107 0320 	add.w	r3, r7, #32
 800a432:	4915      	ldr	r1, [pc, #84]	; (800a488 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 800a434:	4618      	mov	r0, r3
 800a436:	f002 ff22 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800a43a:	f107 0320 	add.w	r3, r7, #32
 800a43e:	4619      	mov	r1, r3
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	47a0      	blx	r4
 800a444:	f107 0320 	add.w	r3, r7, #32
 800a448:	4618      	mov	r0, r3
 800a44a:	f003 fad0 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	3368      	adds	r3, #104	; 0x68
 800a454:	681c      	ldr	r4, [r3, #0]
 800a456:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a45a:	490c      	ldr	r1, [pc, #48]	; (800a48c <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 800a45c:	4618      	mov	r0, r3
 800a45e:	f002 ff0e 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800a462:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a466:	4619      	mov	r1, r3
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	47a0      	blx	r4
 800a46c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a470:	4618      	mov	r0, r3
 800a472:	f003 fabc 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 800a476:	bf00      	nop
 800a478:	3734      	adds	r7, #52	; 0x34
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd90      	pop	{r4, r7, pc}
 800a47e:	bf00      	nop
 800a480:	080249f8 	.word	0x080249f8
 800a484:	08024a08 	.word	0x08024a08
 800a488:	08024a18 	.word	0x08024a18
 800a48c:	08024a34 	.word	0x08024a34

0800a490 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 800a490:	b590      	push	{r4, r7, lr}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	3360      	adds	r3, #96	; 0x60
 800a49e:	681c      	ldr	r4, [r3, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	335c      	adds	r3, #92	; 0x5c
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	6912      	ldr	r2, [r2, #16]
 800a4ac:	3214      	adds	r2, #20
 800a4ae:	f107 0008 	add.w	r0, r7, #8
 800a4b2:	6879      	ldr	r1, [r7, #4]
 800a4b4:	4798      	blx	r3
 800a4b6:	f107 0308 	add.w	r3, r7, #8
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	47a0      	blx	r4
 800a4c0:	f107 0308 	add.w	r3, r7, #8
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f003 fa92 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	3370      	adds	r3, #112	; 0x70
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	4798      	blx	r3
    writeTestSuiteSummary();
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	3374      	adds	r3, #116	; 0x74
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	4798      	blx	r3
    writeProperties();
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	3378      	adds	r3, #120	; 0x78
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	4798      	blx	r3
    writeTestCases();
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	337c      	adds	r3, #124	; 0x7c
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	4798      	blx	r3
    writeFileEnding();
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	338c      	adds	r3, #140	; 0x8c
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	4798      	blx	r3
    closeFile();
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	336c      	adds	r3, #108	; 0x6c
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	4798      	blx	r3
}
 800a512:	bf00      	nop
 800a514:	3714      	adds	r7, #20
 800a516:	46bd      	mov	sp, r7
 800a518:	bd90      	pop	{r4, r7, pc}

0800a51a <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 800a51a:	b480      	push	{r7}
 800a51c:	b083      	sub	sp, #12
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	6039      	str	r1, [r7, #0]
}
 800a524:	bf00      	nop
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	3330      	adds	r3, #48	; 0x30
 800a540:	6839      	ldr	r1, [r7, #0]
 800a542:	4618      	mov	r0, r3
 800a544:	f003 fae2 	bl	800db0c <_ZN12SimpleStringpLEPKc>
}
 800a548:	bf00      	nop
 800a54a:	3708      	adds	r7, #8
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
}
 800a55a:	bf00      	nop
 800a55c:	370c      	adds	r7, #12
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr

0800a566 <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 800a566:	b480      	push	{r7}
 800a568:	b083      	sub	sp, #12
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
 800a56e:	6039      	str	r1, [r7, #0]
}
 800a570:	bf00      	nop
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 800a590:	b590      	push	{r4, r7, lr}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	6a1b      	ldr	r3, [r3, #32]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d113      	bne.n	800a5ce <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	685a      	ldr	r2, [r3, #4]
 800a5ac:	3201      	adds	r2, #1
 800a5ae:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 800a5b0:	f240 1233 	movw	r2, #307	; 0x133
 800a5b4:	4908      	ldr	r1, [pc, #32]	; (800a5d8 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 800a5b6:	2034      	movs	r0, #52	; 0x34
 800a5b8:	f000 fa9e 	bl	800aaf8 <_ZnwjPKci>
 800a5bc:	4604      	mov	r4, r0
 800a5be:	6839      	ldr	r1, [r7, #0]
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f004 fd37 	bl	800f034 <_ZN11TestFailureC1ERKS_>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	6a1b      	ldr	r3, [r3, #32]
 800a5cc:	60dc      	str	r4, [r3, #12]
    }
}
 800a5ce:	bf00      	nop
 800a5d0:	370c      	adds	r7, #12
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd90      	pop	{r4, r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	080247f4 	.word	0x080247f4

0800a5dc <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 800a5dc:	b5b0      	push	{r4, r5, r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 800a5e6:	4b08      	ldr	r3, [pc, #32]	; (800a608 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 800a5e8:	681d      	ldr	r5, [r3, #0]
 800a5ea:	6838      	ldr	r0, [r7, #0]
 800a5ec:	f003 f9d2 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	691c      	ldr	r4, [r3, #16]
 800a5f6:	4905      	ldr	r1, [pc, #20]	; (800a60c <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 800a5f8:	4610      	mov	r0, r2
 800a5fa:	47a8      	blx	r5
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	6263      	str	r3, [r4, #36]	; 0x24
}
 800a600:	bf00      	nop
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bdb0      	pop	{r4, r5, r7, pc}
 800a608:	200000b4 	.word	0x200000b4
 800a60c:	08024a44 	.word	0x08024a44

0800a610 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 800a610:	b590      	push	{r4, r7, lr}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 800a61a:	4b08      	ldr	r3, [pc, #32]	; (800a63c <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 800a61c:	681c      	ldr	r4, [r3, #0]
 800a61e:	6838      	ldr	r0, [r7, #0]
 800a620:	f003 f9b8 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800a624:	4602      	mov	r2, r0
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62c:	4619      	mov	r1, r3
 800a62e:	4610      	mov	r0, r2
 800a630:	47a0      	blx	r4
}
 800a632:	bf00      	nop
 800a634:	370c      	adds	r7, #12
 800a636:	46bd      	mov	sp, r7
 800a638:	bd90      	pop	{r4, r7, pc}
 800a63a:	bf00      	nop
 800a63c:	200000b8 	.word	0x200000b8

0800a640 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 800a648:	4b05      	ldr	r3, [pc, #20]	; (800a660 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	6912      	ldr	r2, [r2, #16]
 800a650:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a652:	4610      	mov	r0, r2
 800a654:	4798      	blx	r3
}
 800a656:	bf00      	nop
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	200000bc 	.word	0x200000bc

0800a664 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
 800a670:	603b      	str	r3, [r7, #0]
        return false;
 800a672:	2300      	movs	r3, #0
    }
 800a674:	4618      	mov	r0, r3
 800a676:	3714      	adds	r7, #20
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
    {
 800a688:	4a04      	ldr	r2, [pc, #16]	; (800a69c <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	601a      	str	r2, [r3, #0]
    }
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4618      	mov	r0, r3
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr
 800a69c:	08028974 	.word	0x08028974

0800a6a0 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
    }
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7ff ffe9 	bl	800a680 <_ZN17MemoryLeakFailureD1Ev>
 800a6ae:	2104      	movs	r1, #4
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fa35 	bl	800ab20 <_ZdlPvj>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 800a6c0:	b590      	push	{r4, r7, lr}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	687c      	ldr	r4, [r7, #4]
 800a6ca:	f000 fc71 	bl	800afb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f00c ff6c 	bl	80175ae <_ZN18MemoryLeakDetector8getMutexEv>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	4619      	mov	r1, r3
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f002 fb24 	bl	800cd28 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	370c      	adds	r7, #12
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd90      	pop	{r4, r7, pc}

0800a6ea <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b082      	sub	sp, #8
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f002 fb29 	bl	800cd4c <_ZN15ScopedMutexLockD1Ev>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3708      	adds	r7, #8
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 800a704:	b590      	push	{r4, r7, lr}
 800a706:	b087      	sub	sp, #28
 800a708:	af02      	add	r7, sp, #8
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 800a710:	f000 fc4e 	bl	800afb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a714:	4604      	mov	r4, r0
 800a716:	f006 f8df 	bl	80108d8 <_Z25getCurrentMallocAllocatorv>
 800a71a:	4601      	mov	r1, r0
 800a71c:	2301      	movs	r3, #1
 800a71e:	9301      	str	r3, [sp, #4]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	68fa      	ldr	r2, [r7, #12]
 800a728:	4620      	mov	r0, r4
 800a72a:	f00d f983 	bl	8017a34 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800a72e:	4603      	mov	r3, r0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3714      	adds	r7, #20
 800a734:	46bd      	mov	sp, r7
 800a736:	bd90      	pop	{r4, r7, pc}

0800a738 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 800a738:	b590      	push	{r4, r7, lr}
 800a73a:	b087      	sub	sp, #28
 800a73c:	af02      	add	r7, sp, #8
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 800a744:	f000 fc34 	bl	800afb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a748:	4603      	mov	r3, r0
 800a74a:	68f9      	ldr	r1, [r7, #12]
 800a74c:	4618      	mov	r0, r3
 800a74e:	f00c ffdd 	bl	801770c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 800a752:	f000 fc2d 	bl	800afb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a756:	4604      	mov	r4, r0
 800a758:	f006 f8be 	bl	80108d8 <_Z25getCurrentMallocAllocatorv>
 800a75c:	4601      	mov	r1, r0
 800a75e:	2301      	movs	r3, #1
 800a760:	9301      	str	r3, [sp, #4]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	4620      	mov	r0, r4
 800a76c:	f00d f996 	bl	8017a9c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 800a770:	bf00      	nop
 800a772:	3714      	adds	r7, #20
 800a774:	46bd      	mov	sp, r7
 800a776:	bd90      	pop	{r4, r7, pc}

0800a778 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 800a778:	b590      	push	{r4, r7, lr}
 800a77a:	b089      	sub	sp, #36	; 0x24
 800a77c:	af04      	add	r7, sp, #16
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 800a786:	f000 fc13 	bl	800afb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a78a:	4604      	mov	r4, r0
 800a78c:	f006 f8a4 	bl	80108d8 <_Z25getCurrentMallocAllocatorv>
 800a790:	4601      	mov	r1, r0
 800a792:	2301      	movs	r3, #1
 800a794:	9302      	str	r3, [sp, #8]
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	9301      	str	r3, [sp, #4]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	68fa      	ldr	r2, [r7, #12]
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f00d f9de 	bl	8017b64 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 800a7a8:	4603      	mov	r3, r0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3714      	adds	r7, #20
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd90      	pop	{r4, r7, pc}
	...

0800a7b4 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 800a7c0:	4b04      	ldr	r3, [pc, #16]	; (800a7d4 <_ZL13normal_mallocjPKcj+0x20>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	4798      	blx	r3
 800a7c8:	4603      	mov	r3, r0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	200000c8 	.word	0x200000c8

0800a7d8 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]
 800a7e4:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 800a7e6:	4b05      	ldr	r3, [pc, #20]	; (800a7fc <_ZL14normal_reallocPvjPKcj+0x24>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	68b9      	ldr	r1, [r7, #8]
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	4798      	blx	r3
 800a7f0:	4603      	mov	r3, r0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	200000cc 	.word	0x200000cc

0800a800 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 800a80c:	4b03      	ldr	r3, [pc, #12]	; (800a81c <_ZL11normal_freePvPKcj+0x1c>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	4798      	blx	r3
}
 800a814:	bf00      	nop
 800a816:	3710      	adds	r7, #16
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	200000d0 	.word	0x200000d0

0800a820 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800a820:	b590      	push	{r4, r7, lr}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 800a828:	f107 0308 	add.w	r3, r7, #8
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7ff ff47 	bl	800a6c0 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800a832:	f000 fbbd 	bl	800afb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a836:	4604      	mov	r4, r0
 800a838:	f005 ff9e 	bl	8010778 <_Z22getCurrentNewAllocatorv>
 800a83c:	4601      	mov	r1, r0
 800a83e:	2300      	movs	r3, #0
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	4620      	mov	r0, r4
 800a844:	f00d f864 	bl	8017910 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a848:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a84a:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 800a84c:	f107 0308 	add.w	r3, r7, #8
 800a850:	4618      	mov	r0, r3
 800a852:	f7ff ff4a 	bl	800a6ea <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 800a856:	4623      	mov	r3, r4
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3714      	adds	r7, #20
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd90      	pop	{r4, r7, pc}

0800a860 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800a860:	b590      	push	{r4, r7, lr}
 800a862:	b085      	sub	sp, #20
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800a868:	f000 fba2 	bl	800afb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a86c:	4604      	mov	r4, r0
 800a86e:	f005 ff83 	bl	8010778 <_Z22getCurrentNewAllocatorv>
 800a872:	4601      	mov	r1, r0
 800a874:	2300      	movs	r3, #0
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	4620      	mov	r0, r4
 800a87a:	f00d f849 	bl	8017910 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a87e:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a880:	68fb      	ldr	r3, [r7, #12]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3714      	adds	r7, #20
 800a886:	46bd      	mov	sp, r7
 800a888:	bd90      	pop	{r4, r7, pc}

0800a88a <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800a88a:	b590      	push	{r4, r7, lr}
 800a88c:	b083      	sub	sp, #12
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800a892:	f000 fb8d 	bl	800afb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a896:	4604      	mov	r4, r0
 800a898:	f005 ff6e 	bl	8010778 <_Z22getCurrentNewAllocatorv>
 800a89c:	4601      	mov	r1, r0
 800a89e:	2300      	movs	r3, #0
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f00d f834 	bl	8017910 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a8a8:	4603      	mov	r3, r0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	370c      	adds	r7, #12
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd90      	pop	{r4, r7, pc}

0800a8b2 <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800a8b2:	b590      	push	{r4, r7, lr}
 800a8b4:	b089      	sub	sp, #36	; 0x24
 800a8b6:	af02      	add	r7, sp, #8
 800a8b8:	60f8      	str	r0, [r7, #12]
 800a8ba:	60b9      	str	r1, [r7, #8]
 800a8bc:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 800a8be:	f000 fb77 	bl	800afb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	f005 ff58 	bl	8010778 <_Z22getCurrentNewAllocatorv>
 800a8c8:	4601      	mov	r1, r0
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	9301      	str	r3, [sp, #4]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	9300      	str	r3, [sp, #0]
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f00d f8ac 	bl	8017a34 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800a8dc:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a8de:	697b      	ldr	r3, [r7, #20]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	371c      	adds	r7, #28
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd90      	pop	{r4, r7, pc}

0800a8e8 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800a8e8:	b590      	push	{r4, r7, lr}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800a8f0:	f000 fb5e 	bl	800afb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	f005 ff97 	bl	8010828 <_Z27getCurrentNewArrayAllocatorv>
 800a8fa:	4601      	mov	r1, r0
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	4620      	mov	r0, r4
 800a902:	f00d f805 	bl	8017910 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a906:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a908:	68fb      	ldr	r3, [r7, #12]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3714      	adds	r7, #20
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd90      	pop	{r4, r7, pc}

0800a912 <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800a912:	b590      	push	{r4, r7, lr}
 800a914:	b083      	sub	sp, #12
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800a91a:	f000 fb49 	bl	800afb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a91e:	4604      	mov	r4, r0
 800a920:	f005 ff82 	bl	8010828 <_Z27getCurrentNewArrayAllocatorv>
 800a924:	4601      	mov	r1, r0
 800a926:	2300      	movs	r3, #0
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	4620      	mov	r0, r4
 800a92c:	f00c fff0 	bl	8017910 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a930:	4603      	mov	r3, r0
}
 800a932:	4618      	mov	r0, r3
 800a934:	370c      	adds	r7, #12
 800a936:	46bd      	mov	sp, r7
 800a938:	bd90      	pop	{r4, r7, pc}

0800a93a <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800a93a:	b590      	push	{r4, r7, lr}
 800a93c:	b089      	sub	sp, #36	; 0x24
 800a93e:	af02      	add	r7, sp, #8
 800a940:	60f8      	str	r0, [r7, #12]
 800a942:	60b9      	str	r1, [r7, #8]
 800a944:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 800a946:	f000 fb33 	bl	800afb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a94a:	4604      	mov	r4, r0
 800a94c:	f005 ff6c 	bl	8010828 <_Z27getCurrentNewArrayAllocatorv>
 800a950:	4601      	mov	r1, r0
 800a952:	2300      	movs	r3, #0
 800a954:	9301      	str	r3, [sp, #4]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	9300      	str	r3, [sp, #0]
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	4620      	mov	r0, r4
 800a960:	f00d f868 	bl	8017a34 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800a964:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a966:	697b      	ldr	r3, [r7, #20]
}
 800a968:	4618      	mov	r0, r3
 800a96a:	371c      	adds	r7, #28
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd90      	pop	{r4, r7, pc}

0800a970 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 800a970:	b590      	push	{r4, r7, lr}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800a978:	f000 fb1a 	bl	800afb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a97c:	4603      	mov	r3, r0
 800a97e:	6879      	ldr	r1, [r7, #4]
 800a980:	4618      	mov	r0, r3
 800a982:	f00c fec3 	bl	801770c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 800a986:	f000 fb13 	bl	800afb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a98a:	4604      	mov	r4, r0
 800a98c:	f005 fef4 	bl	8010778 <_Z22getCurrentNewAllocatorv>
 800a990:	4601      	mov	r1, r0
 800a992:	2300      	movs	r3, #0
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	4620      	mov	r0, r4
 800a998:	f00d f8ca 	bl	8017b30 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd90      	pop	{r4, r7, pc}

0800a9a4 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 800a9a4:	b590      	push	{r4, r7, lr}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800a9ac:	f000 fb00 	bl	800afb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	6879      	ldr	r1, [r7, #4]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f00c fea9 	bl	801770c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 800a9ba:	f000 faf9 	bl	800afb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a9be:	4604      	mov	r4, r0
 800a9c0:	f005 ff32 	bl	8010828 <_Z27getCurrentNewArrayAllocatorv>
 800a9c4:	4601      	mov	r1, r0
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f00d f8b0 	bl	8017b30 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800a9d0:	bf00      	nop
 800a9d2:	370c      	adds	r7, #12
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd90      	pop	{r4, r7, pc}

0800a9d8 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800a9e0:	4b04      	ldr	r3, [pc, #16]	; (800a9f4 <_ZL19normal_operator_newj+0x1c>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	4798      	blx	r3
 800a9e8:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	200000c8 	.word	0x200000c8

0800a9f8 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800aa00:	4b04      	ldr	r3, [pc, #16]	; (800aa14 <_ZL27normal_operator_new_nothrowj+0x1c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	4798      	blx	r3
 800aa08:	4603      	mov	r3, r0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	200000c8 	.word	0x200000c8

0800aa18 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b086      	sub	sp, #24
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800aa24:	4b04      	ldr	r3, [pc, #16]	; (800aa38 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	4798      	blx	r3
 800aa2c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800aa2e:	697b      	ldr	r3, [r7, #20]
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3718      	adds	r7, #24
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	200000c8 	.word	0x200000c8

0800aa3c <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800aa44:	4b04      	ldr	r3, [pc, #16]	; (800aa58 <_ZL25normal_operator_new_arrayj+0x1c>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	4798      	blx	r3
 800aa4c:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3710      	adds	r7, #16
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	200000c8 	.word	0x200000c8

0800aa5c <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800aa64:	4b04      	ldr	r3, [pc, #16]	; (800aa78 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	4798      	blx	r3
 800aa6c:	4603      	mov	r3, r0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	200000c8 	.word	0x200000c8

0800aa7c <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800aa88:	4b04      	ldr	r3, [pc, #16]	; (800aa9c <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	4798      	blx	r3
 800aa90:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800aa92:	697b      	ldr	r3, [r7, #20]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3718      	adds	r7, #24
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	200000c8 	.word	0x200000c8

0800aaa0 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800aaa8:	4b03      	ldr	r3, [pc, #12]	; (800aab8 <_ZL22normal_operator_deletePv+0x18>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	4798      	blx	r3
}
 800aab0:	bf00      	nop
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	200000d0 	.word	0x200000d0

0800aabc <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800aac4:	4b03      	ldr	r3, [pc, #12]	; (800aad4 <_ZL28normal_operator_delete_arrayPv+0x18>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	4798      	blx	r3
}
 800aacc:	bf00      	nop
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	200000d0 	.word	0x200000d0

0800aad8 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 800aae0:	4b04      	ldr	r3, [pc, #16]	; (800aaf4 <_Znwj+0x1c>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	4798      	blx	r3
 800aae8:	4603      	mov	r3, r0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	2000002c 	.word	0x2000002c

0800aaf8 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 800ab04:	4b05      	ldr	r3, [pc, #20]	; (800ab1c <_ZnwjPKci+0x24>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	68b9      	ldr	r1, [r7, #8]
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	4798      	blx	r3
 800ab10:	4603      	mov	r3, r0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	20000034 	.word	0x20000034

0800ab20 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 800ab2a:	4b04      	ldr	r3, [pc, #16]	; (800ab3c <_ZdlPvj+0x1c>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	4798      	blx	r3
}
 800ab32:	bf00      	nop
 800ab34:	3708      	adds	r7, #8
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	20000044 	.word	0x20000044

0800ab40 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 800ab4c:	4b05      	ldr	r3, [pc, #20]	; (800ab64 <_ZnajPKci+0x24>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	68b9      	ldr	r1, [r7, #8]
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	4798      	blx	r3
 800ab58:	4603      	mov	r3, r0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	20000040 	.word	0x20000040

0800ab68 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 800ab70:	4b03      	ldr	r3, [pc, #12]	; (800ab80 <_ZdaPv+0x18>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	4798      	blx	r3
}
 800ab78:	bf00      	nop
 800ab7a:	3708      	adds	r7, #8
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	20000048 	.word	0x20000048

0800ab84 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 800ab8e:	4b04      	ldr	r3, [pc, #16]	; (800aba0 <_ZdaPvj+0x1c>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	4798      	blx	r3
}
 800ab96:	bf00      	nop
 800ab98:	3708      	adds	r7, #8
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	20000048 	.word	0x20000048

0800aba4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 800aba4:	b480      	push	{r7}
 800aba6:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 800aba8:	4b12      	ldr	r3, [pc, #72]	; (800abf4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 800abaa:	4a13      	ldr	r2, [pc, #76]	; (800abf8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 800abac:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 800abae:	4b13      	ldr	r3, [pc, #76]	; (800abfc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 800abb0:	4a13      	ldr	r2, [pc, #76]	; (800ac00 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 800abb2:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 800abb4:	4b13      	ldr	r3, [pc, #76]	; (800ac04 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 800abb6:	4a14      	ldr	r2, [pc, #80]	; (800ac08 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 800abb8:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 800abba:	4b14      	ldr	r3, [pc, #80]	; (800ac0c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 800abbc:	4a14      	ldr	r2, [pc, #80]	; (800ac10 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 800abbe:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 800abc0:	4b14      	ldr	r3, [pc, #80]	; (800ac14 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 800abc2:	4a15      	ldr	r2, [pc, #84]	; (800ac18 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 800abc4:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 800abc6:	4b15      	ldr	r3, [pc, #84]	; (800ac1c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 800abc8:	4a15      	ldr	r2, [pc, #84]	; (800ac20 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 800abca:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 800abcc:	4b15      	ldr	r3, [pc, #84]	; (800ac24 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 800abce:	4a16      	ldr	r2, [pc, #88]	; (800ac28 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 800abd0:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 800abd2:	4b16      	ldr	r3, [pc, #88]	; (800ac2c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 800abd4:	4a16      	ldr	r2, [pc, #88]	; (800ac30 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 800abd6:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 800abd8:	4b16      	ldr	r3, [pc, #88]	; (800ac34 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 800abda:	4a17      	ldr	r2, [pc, #92]	; (800ac38 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 800abdc:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 800abde:	4b17      	ldr	r3, [pc, #92]	; (800ac3c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 800abe0:	4a17      	ldr	r2, [pc, #92]	; (800ac40 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 800abe2:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 800abe4:	4b17      	ldr	r3, [pc, #92]	; (800ac44 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 800abe6:	4a18      	ldr	r2, [pc, #96]	; (800ac48 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 800abe8:	601a      	str	r2, [r3, #0]

#endif
}
 800abea:	bf00      	nop
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr
 800abf4:	2000002c 	.word	0x2000002c
 800abf8:	0800a9d9 	.word	0x0800a9d9
 800abfc:	20000030 	.word	0x20000030
 800ac00:	0800a9f9 	.word	0x0800a9f9
 800ac04:	20000034 	.word	0x20000034
 800ac08:	0800aa19 	.word	0x0800aa19
 800ac0c:	20000038 	.word	0x20000038
 800ac10:	0800aa3d 	.word	0x0800aa3d
 800ac14:	2000003c 	.word	0x2000003c
 800ac18:	0800aa5d 	.word	0x0800aa5d
 800ac1c:	20000040 	.word	0x20000040
 800ac20:	0800aa7d 	.word	0x0800aa7d
 800ac24:	20000044 	.word	0x20000044
 800ac28:	0800aaa1 	.word	0x0800aaa1
 800ac2c:	20000048 	.word	0x20000048
 800ac30:	0800aabd 	.word	0x0800aabd
 800ac34:	20000014 	.word	0x20000014
 800ac38:	0800a7b5 	.word	0x0800a7b5
 800ac3c:	2000001c 	.word	0x2000001c
 800ac40:	0800a7d9 	.word	0x0800a7d9
 800ac44:	20000018 	.word	0x20000018
 800ac48:	0800a801 	.word	0x0800a801

0800ac4c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 800ac50:	4b08      	ldr	r3, [pc, #32]	; (800ac74 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a08      	ldr	r2, [pc, #32]	; (800ac78 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d004      	beq.n	800ac64 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 800ac5a:	4b06      	ldr	r3, [pc, #24]	; (800ac74 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a07      	ldr	r2, [pc, #28]	; (800ac7c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d101      	bne.n	800ac68 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 800ac64:	2301      	movs	r3, #1
 800ac66:	e000      	b.n	800ac6a <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 800ac68:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr
 800ac74:	2000002c 	.word	0x2000002c
 800ac78:	0800a861 	.word	0x0800a861
 800ac7c:	0800a821 	.word	0x0800a821

0800ac80 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 800ac84:	4b1f      	ldr	r3, [pc, #124]	; (800ad04 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	4a1e      	ldr	r2, [pc, #120]	; (800ad04 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800ac8c:	6013      	str	r3, [r2, #0]
 800ac8e:	4b1d      	ldr	r3, [pc, #116]	; (800ad04 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	bfcc      	ite	gt
 800ac96:	2301      	movgt	r3, #1
 800ac98:	2300      	movle	r3, #0
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d12e      	bne.n	800acfe <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 800aca0:	4b19      	ldr	r3, [pc, #100]	; (800ad08 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a19      	ldr	r2, [pc, #100]	; (800ad0c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 800aca6:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 800aca8:	4b19      	ldr	r3, [pc, #100]	; (800ad10 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a19      	ldr	r2, [pc, #100]	; (800ad14 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 800acae:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 800acb0:	4b19      	ldr	r3, [pc, #100]	; (800ad18 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a19      	ldr	r2, [pc, #100]	; (800ad1c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 800acb6:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 800acb8:	4b19      	ldr	r3, [pc, #100]	; (800ad20 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a19      	ldr	r2, [pc, #100]	; (800ad24 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 800acbe:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 800acc0:	4b19      	ldr	r3, [pc, #100]	; (800ad28 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a19      	ldr	r2, [pc, #100]	; (800ad2c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 800acc6:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 800acc8:	4b19      	ldr	r3, [pc, #100]	; (800ad30 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a19      	ldr	r2, [pc, #100]	; (800ad34 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 800acce:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 800acd0:	4b19      	ldr	r3, [pc, #100]	; (800ad38 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a19      	ldr	r2, [pc, #100]	; (800ad3c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 800acd6:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 800acd8:	4b19      	ldr	r3, [pc, #100]	; (800ad40 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a19      	ldr	r2, [pc, #100]	; (800ad44 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 800acde:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 800ace0:	4b19      	ldr	r3, [pc, #100]	; (800ad48 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a19      	ldr	r2, [pc, #100]	; (800ad4c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 800ace6:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 800ace8:	4b19      	ldr	r3, [pc, #100]	; (800ad50 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a19      	ldr	r2, [pc, #100]	; (800ad54 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 800acee:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 800acf0:	4b19      	ldr	r3, [pc, #100]	; (800ad58 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a19      	ldr	r2, [pc, #100]	; (800ad5c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 800acf6:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 800acf8:	f7ff ff54 	bl	800aba4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 800acfc:	e000      	b.n	800ad00 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 800acfe:	bf00      	nop
#endif
}
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	200008c8 	.word	0x200008c8
 800ad08:	2000002c 	.word	0x2000002c
 800ad0c:	2000004c 	.word	0x2000004c
 800ad10:	20000030 	.word	0x20000030
 800ad14:	20000050 	.word	0x20000050
 800ad18:	20000034 	.word	0x20000034
 800ad1c:	20000054 	.word	0x20000054
 800ad20:	20000038 	.word	0x20000038
 800ad24:	20000058 	.word	0x20000058
 800ad28:	2000003c 	.word	0x2000003c
 800ad2c:	2000005c 	.word	0x2000005c
 800ad30:	20000040 	.word	0x20000040
 800ad34:	20000060 	.word	0x20000060
 800ad38:	20000044 	.word	0x20000044
 800ad3c:	20000064 	.word	0x20000064
 800ad40:	20000048 	.word	0x20000048
 800ad44:	20000068 	.word	0x20000068
 800ad48:	20000014 	.word	0x20000014
 800ad4c:	20000020 	.word	0x20000020
 800ad50:	2000001c 	.word	0x2000001c
 800ad54:	20000028 	.word	0x20000028
 800ad58:	20000018 	.word	0x20000018
 800ad5c:	20000024 	.word	0x20000024

0800ad60 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 800ad60:	b480      	push	{r7}
 800ad62:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 800ad64:	4b1f      	ldr	r3, [pc, #124]	; (800ade4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	4a1e      	ldr	r2, [pc, #120]	; (800ade4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800ad6c:	6013      	str	r3, [r2, #0]
 800ad6e:	4b1d      	ldr	r3, [pc, #116]	; (800ade4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	bfcc      	ite	gt
 800ad76:	2301      	movgt	r3, #1
 800ad78:	2300      	movle	r3, #0
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d12c      	bne.n	800adda <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 800ad80:	4b19      	ldr	r3, [pc, #100]	; (800ade8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a19      	ldr	r2, [pc, #100]	; (800adec <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 800ad86:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 800ad88:	4b19      	ldr	r3, [pc, #100]	; (800adf0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a19      	ldr	r2, [pc, #100]	; (800adf4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 800ad8e:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 800ad90:	4b19      	ldr	r3, [pc, #100]	; (800adf8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a19      	ldr	r2, [pc, #100]	; (800adfc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 800ad96:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 800ad98:	4b19      	ldr	r3, [pc, #100]	; (800ae00 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a19      	ldr	r2, [pc, #100]	; (800ae04 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 800ad9e:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 800ada0:	4b19      	ldr	r3, [pc, #100]	; (800ae08 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a19      	ldr	r2, [pc, #100]	; (800ae0c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 800ada6:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 800ada8:	4b19      	ldr	r3, [pc, #100]	; (800ae10 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a19      	ldr	r2, [pc, #100]	; (800ae14 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 800adae:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 800adb0:	4b19      	ldr	r3, [pc, #100]	; (800ae18 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a19      	ldr	r2, [pc, #100]	; (800ae1c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 800adb6:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 800adb8:	4b19      	ldr	r3, [pc, #100]	; (800ae20 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a19      	ldr	r2, [pc, #100]	; (800ae24 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 800adbe:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 800adc0:	4b19      	ldr	r3, [pc, #100]	; (800ae28 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a19      	ldr	r2, [pc, #100]	; (800ae2c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 800adc6:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 800adc8:	4b19      	ldr	r3, [pc, #100]	; (800ae30 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a19      	ldr	r2, [pc, #100]	; (800ae34 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 800adce:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 800add0:	4b19      	ldr	r3, [pc, #100]	; (800ae38 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a19      	ldr	r2, [pc, #100]	; (800ae3c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 800add6:	6013      	str	r3, [r2, #0]
 800add8:	e000      	b.n	800addc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 800adda:	bf00      	nop
#endif
}
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr
 800ade4:	200008c8 	.word	0x200008c8
 800ade8:	2000004c 	.word	0x2000004c
 800adec:	2000002c 	.word	0x2000002c
 800adf0:	20000050 	.word	0x20000050
 800adf4:	20000030 	.word	0x20000030
 800adf8:	20000054 	.word	0x20000054
 800adfc:	20000034 	.word	0x20000034
 800ae00:	20000058 	.word	0x20000058
 800ae04:	20000038 	.word	0x20000038
 800ae08:	2000005c 	.word	0x2000005c
 800ae0c:	2000003c 	.word	0x2000003c
 800ae10:	20000060 	.word	0x20000060
 800ae14:	20000040 	.word	0x20000040
 800ae18:	20000064 	.word	0x20000064
 800ae1c:	20000044 	.word	0x20000044
 800ae20:	20000068 	.word	0x20000068
 800ae24:	20000048 	.word	0x20000048
 800ae28:	20000020 	.word	0x20000020
 800ae2c:	20000014 	.word	0x20000014
 800ae30:	20000028 	.word	0x20000028
 800ae34:	2000001c 	.word	0x2000001c
 800ae38:	20000024 	.word	0x20000024
 800ae3c:	20000018 	.word	0x20000018

0800ae40 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
    {
 800ae48:	4a05      	ldr	r2, [pc, #20]	; (800ae60 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	601a      	str	r2, [r3, #0]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7ff fc15 	bl	800a680 <_ZN17MemoryLeakFailureD1Ev>
    }
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3708      	adds	r7, #8
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	08028960 	.word	0x08028960

0800ae64 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
    }
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f7ff ffe7 	bl	800ae40 <_ZN25MemoryLeakWarningReporterD1Ev>
 800ae72:	2104      	movs	r1, #4
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f7ff fe53 	bl	800ab20 <_ZdlPvj>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3708      	adds	r7, #8
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	4a04      	ldr	r2, [pc, #16]	; (800aea0 <_ZN14TestTerminatorC1Ev+0x1c>)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	601a      	str	r2, [r3, #0]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4618      	mov	r0, r3
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr
 800aea0:	0802930c 	.word	0x0802930c

0800aea4 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7ff ffe8 	bl	800ae84 <_ZN14TestTerminatorC1Ev>
 800aeb4:	4a03      	ldr	r2, [pc, #12]	; (800aec4 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	601a      	str	r2, [r3, #0]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4618      	mov	r0, r3
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	080292e4 	.word	0x080292e4

0800aec8 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 800aec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeca:	b099      	sub	sp, #100	; 0x64
 800aecc:	af02      	add	r7, sp, #8
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 800aed2:	f009 fdb7 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 800aed6:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 800aed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	339c      	adds	r3, #156	; 0x9c
 800aede:	681c      	ldr	r4, [r3, #0]
 800aee0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aee4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aee6:	4618      	mov	r0, r3
 800aee8:	f008 fbc4 	bl	8013674 <_ZNK10UtestShell7getNameEv>
 800aeec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aef0:	4618      	mov	r0, r3
 800aef2:	f002 fd4f 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800aef6:	4605      	mov	r5, r0
 800aef8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800aefa:	f008 fc9b 	bl	8013834 <_ZNK10UtestShell13getLineNumberEv>
 800aefe:	4606      	mov	r6, r0
 800af00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800af04:	6839      	ldr	r1, [r7, #0]
 800af06:	4618      	mov	r0, r3
 800af08:	f002 f9b9 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800af0c:	f107 000c 	add.w	r0, r7, #12
 800af10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800af14:	9300      	str	r3, [sp, #0]
 800af16:	4633      	mov	r3, r6
 800af18:	462a      	mov	r2, r5
 800af1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800af1c:	f004 fd14 	bl	800f948 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800af20:	2300      	movs	r3, #0
 800af22:	653b      	str	r3, [r7, #80]	; 0x50
 800af24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800af28:	4618      	mov	r0, r3
 800af2a:	f7ff ffbb 	bl	800aea4 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800af2e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800af32:	f107 030c 	add.w	r3, r7, #12
 800af36:	4619      	mov	r1, r3
 800af38:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800af3a:	47a0      	blx	r4
 800af3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800af40:	4618      	mov	r0, r3
 800af42:	f009 fe79 	bl	8014c38 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800af46:	f107 030c 	add.w	r3, r7, #12
 800af4a:	4618      	mov	r0, r3
 800af4c:	f000 f9ac 	bl	800b2a8 <_ZN11FailFailureD1Ev>
 800af50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800af54:	4618      	mov	r0, r3
 800af56:	f002 fd4a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800af5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800af5e:	4618      	mov	r0, r3
 800af60:	f002 fd45 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 800af64:	bf00      	nop
 800af66:	375c      	adds	r7, #92	; 0x5c
 800af68:	46bd      	mov	sp, r7
 800af6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af6c <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	4a04      	ldr	r2, [pc, #16]	; (800af88 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	601a      	str	r2, [r3, #0]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4618      	mov	r0, r3
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr
 800af88:	08028974 	.word	0x08028974

0800af8c <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4618      	mov	r0, r3
 800af98:	f7ff ffe8 	bl	800af6c <_ZN17MemoryLeakFailureC1Ev>
 800af9c:	4a03      	ldr	r2, [pc, #12]	; (800afac <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	601a      	str	r2, [r3, #0]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	4618      	mov	r0, r3
 800afa6:	3708      	adds	r7, #8
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	08028960 	.word	0x08028960

0800afb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 800afb0:	b598      	push	{r3, r4, r7, lr}
 800afb2:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 800afb4:	4b11      	ldr	r3, [pc, #68]	; (800affc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d11b      	bne.n	800aff4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 800afbc:	f7ff fe60 	bl	800ac80 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 800afc0:	2004      	movs	r0, #4
 800afc2:	f7ff fd89 	bl	800aad8 <_Znwj>
 800afc6:	4603      	mov	r3, r0
 800afc8:	461c      	mov	r4, r3
 800afca:	4620      	mov	r0, r4
 800afcc:	f7ff ffde 	bl	800af8c <_ZN25MemoryLeakWarningReporterC1Ev>
 800afd0:	4b0b      	ldr	r3, [pc, #44]	; (800b000 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800afd2:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 800afd4:	f241 1050 	movw	r0, #4432	; 0x1150
 800afd8:	f7ff fd7e 	bl	800aad8 <_Znwj>
 800afdc:	4603      	mov	r3, r0
 800afde:	461c      	mov	r4, r3
 800afe0:	4b07      	ldr	r3, [pc, #28]	; (800b000 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4619      	mov	r1, r3
 800afe6:	4620      	mov	r0, r4
 800afe8:	f00c fa3e 	bl	8017468 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 800afec:	4b03      	ldr	r3, [pc, #12]	; (800affc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800afee:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 800aff0:	f7ff feb6 	bl	800ad60 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 800aff4:	4b01      	ldr	r3, [pc, #4]	; (800affc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800aff6:	681b      	ldr	r3, [r3, #0]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	bd98      	pop	{r3, r4, r7, pc}
 800affc:	200008d0 	.word	0x200008d0
 800b000:	200008cc 	.word	0x200008cc

0800b004 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	460b      	mov	r3, r1
 800b00e:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	78fa      	ldrb	r2, [r7, #3]
 800b014:	765a      	strb	r2, [r3, #25]
}
 800b016:	bf00      	nop
 800b018:	370c      	adds	r7, #12
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
	...

0800b024 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 800b024:	b580      	push	{r7, lr}
 800b026:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 800b028:	f7ff fdbc 	bl	800aba4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 800b02c:	4b0b      	ldr	r3, [pc, #44]	; (800b05c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d004      	beq.n	800b03e <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	3204      	adds	r2, #4
 800b038:	6812      	ldr	r2, [r2, #0]
 800b03a:	4618      	mov	r0, r3
 800b03c:	4790      	blx	r2
    delete globalReporter;
 800b03e:	4b08      	ldr	r3, [pc, #32]	; (800b060 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d004      	beq.n	800b050 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	3204      	adds	r2, #4
 800b04a:	6812      	ldr	r2, [r2, #0]
 800b04c:	4618      	mov	r0, r3
 800b04e:	4790      	blx	r2
    globalDetector = NULLPTR;
 800b050:	4b02      	ldr	r3, [pc, #8]	; (800b05c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800b052:	2200      	movs	r2, #0
 800b054:	601a      	str	r2, [r3, #0]
}
 800b056:	bf00      	nop
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	200008d0 	.word	0x200008d0
 800b060:	200008cc 	.word	0x200008cc

0800b064 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	68b9      	ldr	r1, [r7, #8]
 800b074:	4618      	mov	r0, r3
 800b076:	f006 fdfd 	bl	8011c74 <_ZN10TestPluginC1ERK12SimpleString>
 800b07a:	4a14      	ldr	r2, [pc, #80]	; (800b0cc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	601a      	str	r2, [r3, #0]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	761a      	strb	r2, [r3, #24]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2200      	movs	r2, #0
 800b08a:	765a      	strb	r2, [r3, #25]
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2200      	movs	r2, #0
 800b090:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 800b092:	4b0f      	ldr	r3, [pc, #60]	; (800b0d0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d102      	bne.n	800b0a0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 800b09a:	4a0d      	ldr	r2, [pc, #52]	; (800b0d0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d003      	beq.n	800b0ae <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	615a      	str	r2, [r3, #20]
 800b0ac:	e004      	b.n	800b0b8 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 800b0ae:	f7ff ff7f 	bl	800afb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	695b      	ldr	r3, [r3, #20]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f00c fa69 	bl	8017594 <_ZN18MemoryLeakDetector6enableEv>
}
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3710      	adds	r7, #16
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	08028988 	.word	0x08028988
 800b0d0:	200008d4 	.word	0x200008d4

0800b0d4 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	4a09      	ldr	r2, [pc, #36]	; (800b104 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	7e5b      	ldrb	r3, [r3, #25]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d003      	beq.n	800b0f2 <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 800b0ea:	f7ff fd5b 	bl	800aba4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800b0ee:	f7ff ff99 	bl	800b024 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f006 fdf9 	bl	8011cec <_ZN10TestPluginD1Ev>
    }
}
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3708      	adds	r7, #8
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	08028988 	.word	0x08028988

0800b108 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
}
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f7ff ffdf 	bl	800b0d4 <_ZN23MemoryLeakWarningPluginD1Ev>
 800b116:	2124      	movs	r1, #36	; 0x24
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f7ff fd01 	bl	800ab20 <_ZdlPvj>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4618      	mov	r0, r3
 800b122:	3708      	adds	r7, #8
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	695b      	ldr	r3, [r3, #20]
 800b138:	4618      	mov	r0, r3
 800b13a:	f00c fa0e 	bl	801755a <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f7fd ffb0 	bl	80090a4 <_ZNK10TestResult15getFailureCountEv>
 800b144:	4602      	mov	r2, r0
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	621a      	str	r2, [r3, #32]
}
 800b14a:	bf00      	nop
 800b14c:	3710      	adds	r7, #16
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
	...

0800b154 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 800b154:	b590      	push	{r4, r7, lr}
 800b156:	b097      	sub	sp, #92	; 0x5c
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	695b      	ldr	r3, [r3, #20]
 800b164:	4618      	mov	r0, r3
 800b166:	f00c fa08 	bl	801757a <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	695b      	ldr	r3, [r3, #20]
 800b16e:	2103      	movs	r1, #3
 800b170:	4618      	mov	r0, r3
 800b172:	f00c fda5 	bl	8017cc0 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800b176:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	7e1b      	ldrb	r3, [r3, #24]
 800b17c:	f083 0301 	eor.w	r3, r3, #1
 800b180:	b2db      	uxtb	r3, r3
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00e      	beq.n	800b1a4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	69db      	ldr	r3, [r3, #28]
 800b18a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d009      	beq.n	800b1a4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6a1c      	ldr	r4, [r3, #32]
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7fd ff85 	bl	80090a4 <_ZNK10TestResult15getFailureCountEv>
 800b19a:	4603      	mov	r3, r0
 800b19c:	429c      	cmp	r4, r3
 800b19e:	d101      	bne.n	800b1a4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e000      	b.n	800b1a6 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d04c      	beq.n	800b244 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 800b1aa:	f7ff fd4f 	bl	800ac4c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d028      	beq.n	800b206 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	695b      	ldr	r3, [r3, #20]
 800b1b8:	2103      	movs	r1, #3
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f00c fd45 	bl	8017c4a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b1c6:	4611      	mov	r1, r2
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f002 f858 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800b1ce:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800b1d2:	f107 0310 	add.w	r3, r7, #16
 800b1d6:	68b9      	ldr	r1, [r7, #8]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f003 feaf 	bl	800ef3c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800b1de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f002 fc03 	bl	800d9ee <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	3334      	adds	r3, #52	; 0x34
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f107 0210 	add.w	r2, r7, #16
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800b1fa:	f107 0310 	add.w	r3, r7, #16
 800b1fe:	4618      	mov	r0, r3
 800b200:	f003 ff5c 	bl	800f0bc <_ZN11TestFailureD1Ev>
 800b204:	e01e      	b.n	800b244 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	69db      	ldr	r3, [r3, #28]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d01a      	beq.n	800b244 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	3338      	adds	r3, #56	; 0x38
 800b214:	681c      	ldr	r4, [r3, #0]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	69db      	ldr	r3, [r3, #28]
 800b21a:	461a      	mov	r2, r3
 800b21c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b220:	4910      	ldr	r1, [pc, #64]	; (800b264 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 800b222:	4618      	mov	r0, r3
 800b224:	f003 f8ea 	bl	800e3fc <_Z16StringFromFormatPKcz>
 800b228:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b22c:	4618      	mov	r0, r3
 800b22e:	f002 fbb1 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800b232:	4603      	mov	r3, r0
 800b234:	4619      	mov	r1, r3
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	47a0      	blx	r4
 800b23a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b23e:	4618      	mov	r0, r3
 800b240:	f002 fbd5 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	695b      	ldr	r3, [r3, #20]
 800b248:	4618      	mov	r0, r3
 800b24a:	f00c fd13 	bl	8017c74 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2200      	movs	r2, #0
 800b252:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2200      	movs	r2, #0
 800b258:	61da      	str	r2, [r3, #28]
}
 800b25a:	bf00      	nop
 800b25c:	375c      	adds	r7, #92	; 0x5c
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd90      	pop	{r4, r7, pc}
 800b262:	bf00      	nop
 800b264:	08024a48 	.word	0x08024a48

0800b268 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	695b      	ldr	r3, [r3, #20]
 800b276:	2102      	movs	r1, #2
 800b278:	4618      	mov	r0, r3
 800b27a:	f00c fd21 	bl	8017cc0 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800b27e:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	429a      	cmp	r2, r3
 800b286:	d007      	beq.n	800b298 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	695b      	ldr	r3, [r3, #20]
 800b28c:	2102      	movs	r1, #2
 800b28e:	4618      	mov	r0, r3
 800b290:	f00c fcdb 	bl	8017c4a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800b294:	4603      	mov	r3, r0
 800b296:	e000      	b.n	800b29a <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 800b298:	4b02      	ldr	r3, [pc, #8]	; (800b2a4 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	08024a88 	.word	0x08024a88

0800b2a8 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	4a05      	ldr	r2, [pc, #20]	; (800b2c8 <_ZN11FailFailureD1Ev+0x20>)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	601a      	str	r2, [r3, #0]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f003 feff 	bl	800f0bc <_ZN11TestFailureD1Ev>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	080289d0 	.word	0x080289d0

0800b2cc <_ZN11FailFailureD0Ev>:
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f7ff ffe7 	bl	800b2a8 <_ZN11FailFailureD1Ev>
 800b2da:	2134      	movs	r1, #52	; 0x34
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f7ff fc1f 	bl	800ab20 <_ZdlPvj>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4618      	mov	r0, r3
 800b312:	370c      	adds	r7, #12
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	4a06      	ldr	r2, [pc, #24]	; (800b340 <_ZN19MockFailureReporterC1Ev+0x24>)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	601a      	str	r2, [r3, #0]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	711a      	strb	r2, [r3, #4]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	4618      	mov	r0, r3
 800b334:	370c      	adds	r7, #12
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	08029bac 	.word	0x08029bac

0800b344 <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	4a04      	ldr	r2, [pc, #16]	; (800b360 <_ZN19MockFailureReporterD1Ev+0x1c>)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	601a      	str	r2, [r3, #0]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4618      	mov	r0, r3
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr
 800b360:	08029bac 	.word	0x08029bac

0800b364 <_ZN19MockFailureReporterD0Ev>:
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f7ff ffe9 	bl	800b344 <_ZN19MockFailureReporterD1Ev>
 800b372:	2108      	movs	r1, #8
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7ff fbd3 	bl	800ab20 <_ZdlPvj>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4618      	mov	r0, r3
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	4a05      	ldr	r2, [pc, #20]	; (800b3a4 <_ZN11MockFailureD1Ev+0x20>)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	601a      	str	r2, [r3, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4618      	mov	r0, r3
 800b396:	f003 fe91 	bl	800f0bc <_ZN11TestFailureD1Ev>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4618      	mov	r0, r3
 800b39e:	3708      	adds	r7, #8
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	08028b24 	.word	0x08028b24

0800b3a8 <_ZN11MockFailureD0Ev>:
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f7ff ffe7 	bl	800b384 <_ZN11MockFailureD1Ev>
 800b3b6:	2134      	movs	r1, #52	; 0x34
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f7ff fbb1 	bl	800ab20 <_ZdlPvj>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 800b3c8:	b590      	push	{r4, r7, lr}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
 800b3d2:	4a16      	ldr	r2, [pc, #88]	; (800b42c <_ZN14MockNamedValueC1ERKS_+0x64>)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	601a      	str	r2, [r3, #0]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	1d1a      	adds	r2, r3, #4
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	3304      	adds	r3, #4
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	4610      	mov	r0, r2
 800b3e4:	f001 ff9f 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f103 020c 	add.w	r2, r3, #12
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	330c      	adds	r3, #12
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	4610      	mov	r0, r2
 800b3f6:	f001 ff96 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	f102 0418 	add.w	r4, r2, #24
 800b402:	3318      	adds	r3, #24
 800b404:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b406:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	629a      	str	r2, [r3, #40]	; 0x28
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	62da      	str	r2, [r3, #44]	; 0x2c
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	631a      	str	r2, [r3, #48]	; 0x30
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4618      	mov	r0, r3
 800b426:	370c      	adds	r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd90      	pop	{r4, r7, pc}
 800b42c:	08029bec 	.word	0x08029bec

0800b430 <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b086      	sub	sp, #24
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 800b43a:	f107 030c 	add.w	r3, r7, #12
 800b43e:	4916      	ldr	r1, [pc, #88]	; (800b498 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 800b440:	4618      	mov	r0, r3
 800b442:	f001 ff1c 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800b446:	f107 030c 	add.w	r3, r7, #12
 800b44a:	4619      	mov	r1, r3
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f002 fb1f 	bl	800da90 <_ZneRK12SimpleStringS1_>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d005      	beq.n	800b464 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 800b458:	6879      	ldr	r1, [r7, #4]
 800b45a:	4810      	ldr	r0, [pc, #64]	; (800b49c <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800b45c:	f000 ff70 	bl	800c340 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 800b460:	4603      	mov	r3, r0
 800b462:	e000      	b.n	800b466 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 800b464:	4b0d      	ldr	r3, [pc, #52]	; (800b49c <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800b466:	617b      	str	r3, [r7, #20]
 800b468:	f107 030c 	add.w	r3, r7, #12
 800b46c:	4618      	mov	r0, r3
 800b46e:	f002 fabe 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	33a8      	adds	r3, #168	; 0xa8
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	6839      	ldr	r1, [r7, #0]
 800b47c:	6978      	ldr	r0, [r7, #20]
 800b47e:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	33ac      	adds	r3, #172	; 0xac
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	6978      	ldr	r0, [r7, #20]
 800b48a:	4798      	blx	r3
    return mock_support;
 800b48c:	697b      	ldr	r3, [r7, #20]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3718      	adds	r7, #24
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	08024a8c 	.word	0x08024a8c
 800b49c:	200008d8 	.word	0x200008d8

0800b4a0 <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 800b4aa:	4a21      	ldr	r2, [pc, #132]	; (800b530 <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	601a      	str	r2, [r3, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	605a      	str	r2, [r3, #4]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	609a      	str	r2, [r3, #8]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	731a      	strb	r2, [r3, #12]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f103 0218 	add.w	r2, r3, #24
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	615a      	str	r2, [r3, #20]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	3318      	adds	r3, #24
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7ff ff23 	bl	800b31c <_ZN19MockFailureReporterC1Ev>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	3320      	adds	r3, #32
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f010 fefc 	bl	801c2d8 <_ZN21MockExpectedCallsListC1Ev>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	62da      	str	r2, [r3, #44]	; 0x2c
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	3330      	adds	r3, #48	; 0x30
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f014 fbea 	bl	801fcd4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	3338      	adds	r3, #56	; 0x38
 800b504:	4618      	mov	r0, r3
 800b506:	f014 faf4 	bl	801faf2 <_ZN18MockNamedValueListC1Ev>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	333c      	adds	r3, #60	; 0x3c
 800b50e:	6839      	ldr	r1, [r7, #0]
 800b510:	4618      	mov	r0, r3
 800b512:	f001 ff08 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 800b51e:	2100      	movs	r1, #0
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 f894 	bl	800b64e <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4618      	mov	r0, r3
 800b52a:	3708      	adds	r7, #8
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	080289fc 	.word	0x080289fc

0800b534 <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	4a0d      	ldr	r2, [pc, #52]	; (800b574 <_ZN11MockSupportD1Ev+0x40>)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	601a      	str	r2, [r3, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	333c      	adds	r3, #60	; 0x3c
 800b546:	4618      	mov	r0, r3
 800b548:	f002 fa51 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	3330      	adds	r3, #48	; 0x30
 800b550:	4618      	mov	r0, r3
 800b552:	f014 fbd3 	bl	801fcfc <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	3320      	adds	r3, #32
 800b55a:	4618      	mov	r0, r3
 800b55c:	f010 fed0 	bl	801c300 <_ZN21MockExpectedCallsListD1Ev>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	3318      	adds	r3, #24
 800b564:	4618      	mov	r0, r3
 800b566:	f7ff feed 	bl	800b344 <_ZN19MockFailureReporterD1Ev>
{
}
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	4618      	mov	r0, r3
 800b56e:	3708      	adds	r7, #8
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	080289fc 	.word	0x080289fc

0800b578 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
}
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f7ff ffd7 	bl	800b534 <_ZN11MockSupportD1Ev>
 800b586:	2148      	movs	r1, #72	; 0x48
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f7ff fac9 	bl	800ab20 <_ZdlPvj>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4618      	mov	r0, r3
 800b592:	3708      	adds	r7, #8
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	691a      	ldr	r2, [r3, #16]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	691b      	ldr	r3, [r3, #16]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	3310      	adds	r3, #16
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	78f9      	ldrb	r1, [r7, #3]
 800b5b4:	4610      	mov	r0, r2
 800b5b6:	4798      	blx	r3
}
 800b5b8:	bf00      	nop
 800b5ba:	3708      	adds	r7, #8
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d102      	bne.n	800b5d6 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	3318      	adds	r3, #24
 800b5d4:	e000      	b.n	800b5d8 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00a      	beq.n	800b5fa <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	33c8      	adds	r3, #200	; 0xc8
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	6952      	ldr	r2, [r2, #20]
 800b5f6:	4611      	mov	r1, r2
 800b5f8:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	3338      	adds	r3, #56	; 0x38
 800b5fe:	4618      	mov	r0, r3
 800b600:	f014 fb0d 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 800b604:	60f8      	str	r0, [r7, #12]
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d01c      	beq.n	800b646 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 800b60c:	68f9      	ldr	r1, [r7, #12]
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 ff26 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	bf14      	ite	ne
 800b61a:	2301      	movne	r3, #1
 800b61c:	2300      	moveq	r3, #0
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00b      	beq.n	800b63c <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 800b624:	68f9      	ldr	r1, [r7, #12]
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 ff1a 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b62c:	4603      	mov	r3, r0
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	32a4      	adds	r2, #164	; 0xa4
 800b632:	6812      	ldr	r2, [r2, #0]
 800b634:	6879      	ldr	r1, [r7, #4]
 800b636:	6949      	ldr	r1, [r1, #20]
 800b638:	4618      	mov	r0, r3
 800b63a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f014 f9f7 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	e7df      	b.n	800b606 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 800b646:	bf00      	nop
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800b64e:	b480      	push	{r7}
 800b650:	b083      	sub	sp, #12
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
 800b656:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d102      	bne.n	800b664 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	695b      	ldr	r3, [r3, #20]
 800b662:	e000      	b.n	800b666 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	6113      	str	r3, [r2, #16]
}
 800b66a:	bf00      	nop
 800b66c:	370c      	adds	r7, #12
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b082      	sub	sp, #8
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	3330      	adds	r3, #48	; 0x30
 800b682:	4618      	mov	r0, r3
 800b684:	f012 fb10 	bl	801dca8 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 800b688:	bf00      	nop
 800b68a:	3708      	adds	r7, #8
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 800b690:	b590      	push	{r4, r7, lr}
 800b692:	b087      	sub	sp, #28
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	3330      	adds	r3, #48	; 0x30
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	68b9      	ldr	r1, [r7, #8]
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f014 fb77 	bl	801fd98 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	3338      	adds	r3, #56	; 0x38
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f014 fab5 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 800b6b4:	6178      	str	r0, [r7, #20]
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d01c      	beq.n	800b6f6 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 800b6bc:	6979      	ldr	r1, [r7, #20]
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f000 fece 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	bf14      	ite	ne
 800b6ca:	2301      	movne	r3, #1
 800b6cc:	2300      	moveq	r3, #0
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d00b      	beq.n	800b6ec <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 800b6d4:	6979      	ldr	r1, [r7, #20]
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f000 fec2 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	32b0      	adds	r2, #176	; 0xb0
 800b6e2:	6814      	ldr	r4, [r2, #0]
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	68b9      	ldr	r1, [r7, #8]
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b6ec:	6978      	ldr	r0, [r7, #20]
 800b6ee:	f014 f99f 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 800b6f2:	6178      	str	r0, [r7, #20]
 800b6f4:	e7df      	b.n	800b6b6 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 800b6f6:	bf00      	nop
 800b6f8:	371c      	adds	r7, #28
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd90      	pop	{r4, r7, pc}

0800b6fe <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 800b6fe:	b590      	push	{r4, r7, lr}
 800b700:	b087      	sub	sp, #28
 800b702:	af00      	add	r7, sp, #0
 800b704:	60f8      	str	r0, [r7, #12]
 800b706:	60b9      	str	r1, [r7, #8]
 800b708:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	3330      	adds	r3, #48	; 0x30
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	68b9      	ldr	r1, [r7, #8]
 800b712:	4618      	mov	r0, r3
 800b714:	f014 fb5c 	bl	801fdd0 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	3338      	adds	r3, #56	; 0x38
 800b71c:	4618      	mov	r0, r3
 800b71e:	f014 fa7e 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 800b722:	6178      	str	r0, [r7, #20]
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d01c      	beq.n	800b764 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 800b72a:	6979      	ldr	r1, [r7, #20]
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f000 fe97 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	bf14      	ite	ne
 800b738:	2301      	movne	r3, #1
 800b73a:	2300      	moveq	r3, #0
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d00b      	beq.n	800b75a <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 800b742:	6979      	ldr	r1, [r7, #20]
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f000 fe8b 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b74a:	4603      	mov	r3, r0
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	32b4      	adds	r2, #180	; 0xb4
 800b750:	6814      	ldr	r4, [r2, #0]
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	68b9      	ldr	r1, [r7, #8]
 800b756:	4618      	mov	r0, r3
 800b758:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b75a:	6978      	ldr	r0, [r7, #20]
 800b75c:	f014 f968 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 800b760:	6178      	str	r0, [r7, #20]
 800b762:	e7df      	b.n	800b724 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 800b764:	bf00      	nop
 800b766:	371c      	adds	r7, #28
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd90      	pop	{r4, r7, pc}

0800b76c <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	3330      	adds	r3, #48	; 0x30
 800b77a:	6839      	ldr	r1, [r7, #0]
 800b77c:	4618      	mov	r0, r3
 800b77e:	f014 fb93 	bl	801fea8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	3338      	adds	r3, #56	; 0x38
 800b786:	4618      	mov	r0, r3
 800b788:	f014 fa49 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 800b78c:	60f8      	str	r0, [r7, #12]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d01b      	beq.n	800b7cc <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 800b794:	68f9      	ldr	r1, [r7, #12]
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 fe62 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	bf14      	ite	ne
 800b7a2:	2301      	movne	r3, #1
 800b7a4:	2300      	moveq	r3, #0
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d00a      	beq.n	800b7c2 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 800b7ac:	68f9      	ldr	r1, [r7, #12]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fe56 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	32b8      	adds	r2, #184	; 0xb8
 800b7ba:	6812      	ldr	r2, [r2, #0]
 800b7bc:	6839      	ldr	r1, [r7, #0]
 800b7be:	4618      	mov	r0, r3
 800b7c0:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f014 f934 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 800b7c8:	60f8      	str	r0, [r7, #12]
 800b7ca:	e7e0      	b.n	800b78e <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 800b7cc:	bf00      	nop
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	3330      	adds	r3, #48	; 0x30
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f014 faba 	bl	801fd5a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	3338      	adds	r3, #56	; 0x38
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f014 fa17 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 800b7f0:	60f8      	str	r0, [r7, #12]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d01a      	beq.n	800b82e <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 800b7f8:	68f9      	ldr	r1, [r7, #12]
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 fe30 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	bf14      	ite	ne
 800b806:	2301      	movne	r3, #1
 800b808:	2300      	moveq	r3, #0
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d009      	beq.n	800b824 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 800b810:	68f9      	ldr	r1, [r7, #12]
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 fe24 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b818:	4603      	mov	r3, r0
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	32bc      	adds	r2, #188	; 0xbc
 800b81e:	6812      	ldr	r2, [r2, #0]
 800b820:	4618      	mov	r0, r3
 800b822:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b824:	68f8      	ldr	r0, [r7, #12]
 800b826:	f014 f903 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 800b82a:	60f8      	str	r0, [r7, #12]
 800b82c:	e7e1      	b.n	800b7f2 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 800b82e:	bf00      	nop
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b084      	sub	sp, #16
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b842:	2b00      	cmp	r3, #0
 800b844:	d004      	beq.n	800b850 <_ZN11MockSupport5clearEv+0x1a>
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	3204      	adds	r2, #4
 800b84a:	6812      	ldr	r2, [r2, #0]
 800b84c:	4618      	mov	r0, r3
 800b84e:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 800b85e:	f00e fe0d 	bl	801a47c <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	3320      	adds	r3, #32
 800b866:	4618      	mov	r0, r3
 800b868:	f011 f937 	bl	801cada <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2201      	movs	r2, #1
 800b878:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	3338      	adds	r3, #56	; 0x38
 800b892:	4618      	mov	r0, r3
 800b894:	f014 f9c3 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 800b898:	60f8      	str	r0, [r7, #12]
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d01a      	beq.n	800b8d6 <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 800b8a0:	68f9      	ldr	r1, [r7, #12]
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 fddc 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b8a8:	60b8      	str	r0, [r7, #8]
        if (support) {
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d00d      	beq.n	800b8cc <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	339c      	adds	r3, #156	; 0x9c
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68b8      	ldr	r0, [r7, #8]
 800b8ba:	4798      	blx	r3
            delete support;
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d004      	beq.n	800b8cc <_ZN11MockSupport5clearEv+0x96>
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	3204      	adds	r2, #4
 800b8c6:	6812      	ldr	r2, [r2, #0]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800b8cc:	68f8      	ldr	r0, [r7, #12]
 800b8ce:	f014 f8af 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	e7e1      	b.n	800b89a <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	3338      	adds	r3, #56	; 0x38
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f014 f917 	bl	801fb0e <_ZN18MockNamedValueList5clearEv>
}
 800b8e0:	bf00      	nop
 800b8e2:	3710      	adds	r7, #16
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	731a      	strb	r2, [r3, #12]
}
 800b8f6:	bf00      	nop
 800b8f8:	370c      	adds	r7, #12
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr
	...

0800b904 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 800b904:	b590      	push	{r4, r7, lr}
 800b906:	b089      	sub	sp, #36	; 0x24
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	333c      	adds	r3, #60	; 0x3c
 800b914:	4618      	mov	r0, r3
 800b916:	f002 f859 	bl	800d9cc <_ZNK12SimpleString7isEmptyEv>
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d004      	beq.n	800b92a <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 800b920:	6879      	ldr	r1, [r7, #4]
 800b922:	68f8      	ldr	r0, [r7, #12]
 800b924:	f001 fcff 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
 800b928:	e021      	b.n	800b96e <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800b930:	f107 0318 	add.w	r3, r7, #24
 800b934:	4910      	ldr	r1, [pc, #64]	; (800b978 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 800b936:	4618      	mov	r0, r3
 800b938:	f001 fca1 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800b93c:	f107 0310 	add.w	r3, r7, #16
 800b940:	f107 0218 	add.w	r2, r7, #24
 800b944:	4621      	mov	r1, r4
 800b946:	4618      	mov	r0, r3
 800b948:	f002 f8b3 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f107 0110 	add.w	r1, r7, #16
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	4618      	mov	r0, r3
 800b956:	f002 f8ac 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800b95a:	f107 0310 	add.w	r3, r7, #16
 800b95e:	4618      	mov	r0, r3
 800b960:	f002 f845 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800b964:	f107 0318 	add.w	r3, r7, #24
 800b968:	4618      	mov	r0, r3
 800b96a:	f002 f840 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 800b96e:	68f8      	ldr	r0, [r7, #12]
 800b970:	3724      	adds	r7, #36	; 0x24
 800b972:	46bd      	mov	sp, r7
 800b974:	bd90      	pop	{r4, r7, pc}
 800b976:	bf00      	nop
 800b978:	08024a90 	.word	0x08024a90

0800b97c <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	3314      	adds	r3, #20
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	683a      	ldr	r2, [r7, #0]
 800b990:	2101      	movs	r1, #1
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	4798      	blx	r3
 800b996:	4603      	mov	r3, r0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3708      	adds	r7, #8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	3314      	adds	r3, #20
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	683a      	ldr	r2, [r7, #0]
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	4798      	blx	r3
}
 800b9ba:	bf00      	nop
 800b9bc:	3708      	adds	r7, #8
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
	...

0800b9c4 <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 800b9c4:	b590      	push	{r4, r7, lr}
 800b9c6:	b089      	sub	sp, #36	; 0x24
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b9d6:	f083 0301 	eor.w	r3, r3, #1
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d003      	beq.n	800b9e8 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 800b9e0:	f010 fbf6 	bl	801c1d0 <_ZN23MockIgnoredExpectedCall8instanceEv>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	e041      	b.n	800ba6c <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 800b9e8:	68f8      	ldr	r0, [r7, #12]
 800b9ea:	f000 fb1b 	bl	800c024 <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 800b9ee:	22a5      	movs	r2, #165	; 0xa5
 800b9f0:	4920      	ldr	r1, [pc, #128]	; (800ba74 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 800b9f2:	2070      	movs	r0, #112	; 0x70
 800b9f4:	f7ff f880 	bl	800aaf8 <_ZnwjPKci>
 800b9f8:	4604      	mov	r4, r0
 800b9fa:	68b9      	ldr	r1, [r7, #8]
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f00f f8f3 	bl	801abe8 <_ZN23MockCheckedExpectedCallC1Ej>
 800ba02:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	3308      	adds	r3, #8
 800ba0a:	681c      	ldr	r4, [r3, #0]
 800ba0c:	f107 0314 	add.w	r3, r7, #20
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	68f9      	ldr	r1, [r7, #12]
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7ff ff75 	bl	800b904 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 800ba1a:	f107 0314 	add.w	r3, r7, #20
 800ba1e:	4619      	mov	r1, r3
 800ba20:	69f8      	ldr	r0, [r7, #28]
 800ba22:	47a0      	blx	r4
 800ba24:	f107 0314 	add.w	r3, r7, #20
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f001 ffe0 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	7b1b      	ldrb	r3, [r3, #12]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d013      	beq.n	800ba5e <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	3310      	adds	r3, #16
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	6892      	ldr	r2, [r2, #8]
 800ba42:	1c50      	adds	r0, r2, #1
 800ba44:	68fa      	ldr	r2, [r7, #12]
 800ba46:	6891      	ldr	r1, [r2, #8]
 800ba48:	68ba      	ldr	r2, [r7, #8]
 800ba4a:	440a      	add	r2, r1
 800ba4c:	4601      	mov	r1, r0
 800ba4e:	69f8      	ldr	r0, [r7, #28]
 800ba50:	4798      	blx	r3
        expectedCallOrder_ += amount;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	689a      	ldr	r2, [r3, #8]
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	441a      	add	r2, r3
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	3320      	adds	r3, #32
 800ba62:	69f9      	ldr	r1, [r7, #28]
 800ba64:	4618      	mov	r0, r3
 800ba66:	f010 fd89 	bl	801c57c <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 800ba6a:	69fb      	ldr	r3, [r7, #28]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3724      	adds	r7, #36	; 0x24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd90      	pop	{r4, r7, pc}
 800ba74:	08024a94 	.word	0x08024a94

0800ba78 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 800ba78:	b5b0      	push	{r4, r5, r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	1c5a      	adds	r2, r3, #1
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	605a      	str	r2, [r3, #4]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	685d      	ldr	r5, [r3, #4]
 800ba8e:	22b1      	movs	r2, #177	; 0xb1
 800ba90:	490a      	ldr	r1, [pc, #40]	; (800babc <_ZN11MockSupport16createActualCallEv+0x44>)
 800ba92:	202c      	movs	r0, #44	; 0x2c
 800ba94:	f7ff f830 	bl	800aaf8 <_ZnwjPKci>
 800ba98:	4604      	mov	r4, r0
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	691a      	ldr	r2, [r3, #16]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	3320      	adds	r3, #32
 800baa2:	4629      	mov	r1, r5
 800baa4:	4620      	mov	r0, r4
 800baa6:	f00c fbdb 	bl	8018260 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3708      	adds	r7, #8
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bdb0      	pop	{r4, r5, r7, pc}
 800baba:	bf00      	nop
 800babc:	08024a94 	.word	0x08024a94

0800bac0 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d00d      	beq.n	800baf0 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	3320      	adds	r3, #32
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	4618      	mov	r0, r3
 800badc:	f010 fd2a 	bl	801c534 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 800bae0:	4603      	mov	r3, r0
 800bae2:	f083 0301 	eor.w	r3, r3, #1
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d001      	beq.n	800baf0 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800baec:	2301      	movs	r3, #1
 800baee:	e000      	b.n	800baf2 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3708      	adds	r7, #8
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 800bafa:	b590      	push	{r4, r7, lr}
 800bafc:	b087      	sub	sp, #28
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
 800bb02:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800bb04:	f107 030c 	add.w	r3, r7, #12
 800bb08:	683a      	ldr	r2, [r7, #0]
 800bb0a:	6879      	ldr	r1, [r7, #4]
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7ff fef9 	bl	800b904 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d014      	beq.n	800bb44 <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	33c4      	adds	r3, #196	; 0xc4
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4610      	mov	r0, r2
 800bb2a:	4798      	blx	r3
        delete lastActualFunctionCall_;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d004      	beq.n	800bb3e <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	3204      	adds	r2, #4
 800bb38:	6812      	ldr	r2, [r2, #0]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800bb4a:	f083 0301 	eor.w	r3, r3, #1
 800bb4e:	b2db      	uxtb	r3, r3
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d004      	beq.n	800bb5e <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 800bb54:	f00e fcbe 	bl	801a4d4 <_ZN21MockIgnoredActualCall8instanceEv>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	461c      	mov	r4, r3
 800bb5c:	e02f      	b.n	800bbbe <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00b      	beq.n	800bb80 <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 800bb68:	f00e fc6e 	bl	801a448 <_ZN19MockActualCallTrace8instanceEv>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	3208      	adds	r2, #8
 800bb72:	6812      	ldr	r2, [r2, #0]
 800bb74:	f107 010c 	add.w	r1, r7, #12
 800bb78:	4618      	mov	r0, r3
 800bb7a:	4790      	blx	r2
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	e01e      	b.n	800bbbe <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 800bb80:	f107 030c 	add.w	r3, r7, #12
 800bb84:	4619      	mov	r1, r3
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f7ff ff9a 	bl	800bac0 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d004      	beq.n	800bb9c <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 800bb92:	f00e fc9f 	bl	801a4d4 <_ZN21MockIgnoredActualCall8instanceEv>
 800bb96:	4603      	mov	r3, r0
 800bb98:	461c      	mov	r4, r3
 800bb9a:	e010      	b.n	800bbbe <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	33c0      	adds	r3, #192	; 0xc0
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	4798      	blx	r3
 800bba8:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	3308      	adds	r3, #8
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f107 020c 	add.w	r2, r7, #12
 800bbb6:	4611      	mov	r1, r2
 800bbb8:	6978      	ldr	r0, [r7, #20]
 800bbba:	4798      	blx	r3
    return *call;
 800bbbc:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800bbbe:	f107 030c 	add.w	r3, r7, #12
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f001 ff13 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800bbc8:	4623      	mov	r3, r4
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	371c      	adds	r7, #28
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd90      	pop	{r4, r7, pc}

0800bbd2 <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b084      	sub	sp, #16
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2201      	movs	r2, #1
 800bbde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	3338      	adds	r3, #56	; 0x38
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f014 f819 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 800bbec:	60f8      	str	r0, [r7, #12]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d01a      	beq.n	800bc2a <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 800bbf4:	68f9      	ldr	r1, [r7, #12]
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 fc32 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	bf14      	ite	ne
 800bc02:	2301      	movne	r3, #1
 800bc04:	2300      	moveq	r3, #0
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d009      	beq.n	800bc20 <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 800bc0c:	68f9      	ldr	r1, [r7, #12]
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 fc26 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bc14:	4603      	mov	r3, r0
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	3290      	adds	r2, #144	; 0x90
 800bc1a:	6812      	ldr	r2, [r2, #0]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bc20:	68f8      	ldr	r0, [r7, #12]
 800bc22:	f013 ff05 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	e7e1      	b.n	800bbee <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 800bc2a:	bf00      	nop
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}

0800bc32 <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b084      	sub	sp, #16
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	3338      	adds	r3, #56	; 0x38
 800bc46:	4618      	mov	r0, r3
 800bc48:	f013 ffe9 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 800bc4c:	60f8      	str	r0, [r7, #12]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d01a      	beq.n	800bc8a <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 800bc54:	68f9      	ldr	r1, [r7, #12]
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 fc02 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	bf14      	ite	ne
 800bc62:	2301      	movne	r3, #1
 800bc64:	2300      	moveq	r3, #0
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d009      	beq.n	800bc80 <_ZN11MockSupport7disableEv+0x4e>
 800bc6c:	68f9      	ldr	r1, [r7, #12]
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 fbf6 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bc74:	4603      	mov	r3, r0
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	3284      	adds	r2, #132	; 0x84
 800bc7a:	6812      	ldr	r2, [r2, #0]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bc80:	68f8      	ldr	r0, [r7, #12]
 800bc82:	f013 fed5 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	e7e1      	b.n	800bc4e <_ZN11MockSupport7disableEv+0x1c>
}
 800bc8a:	bf00      	nop
 800bc8c:	3710      	adds	r7, #16
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}

0800bc92 <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 800bc92:	b580      	push	{r7, lr}
 800bc94:	b084      	sub	sp, #16
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	3338      	adds	r3, #56	; 0x38
 800bca6:	4618      	mov	r0, r3
 800bca8:	f013 ffb9 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 800bcac:	60f8      	str	r0, [r7, #12]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d01a      	beq.n	800bcea <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 800bcb4:	68f9      	ldr	r1, [r7, #12]
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 fbd2 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	bf14      	ite	ne
 800bcc2:	2301      	movne	r3, #1
 800bcc4:	2300      	moveq	r3, #0
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d009      	beq.n	800bce0 <_ZN11MockSupport6enableEv+0x4e>
 800bccc:	68f9      	ldr	r1, [r7, #12]
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 fbc6 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	3288      	adds	r2, #136	; 0x88
 800bcda:	6812      	ldr	r2, [r2, #0]
 800bcdc:	4618      	mov	r0, r3
 800bcde:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f013 fea5 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	e7e1      	b.n	800bcae <_ZN11MockSupport6enableEv+0x1c>
}
 800bcea:	bf00      	nop
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b084      	sub	sp, #16
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	78fa      	ldrb	r2, [r7, #3]
 800bd02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	3338      	adds	r3, #56	; 0x38
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f013 ff87 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 800bd10:	60f8      	str	r0, [r7, #12]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d01b      	beq.n	800bd50 <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 800bd18:	68f9      	ldr	r1, [r7, #12]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 fba0 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	bf14      	ite	ne
 800bd26:	2301      	movne	r3, #1
 800bd28:	2300      	moveq	r3, #0
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d00a      	beq.n	800bd46 <_ZN11MockSupport7tracingEb+0x54>
 800bd30:	68f9      	ldr	r1, [r7, #12]
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 fb94 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	328c      	adds	r2, #140	; 0x8c
 800bd3e:	6812      	ldr	r2, [r2, #0]
 800bd40:	78f9      	ldrb	r1, [r7, #3]
 800bd42:	4618      	mov	r0, r3
 800bd44:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bd46:	68f8      	ldr	r0, [r7, #12]
 800bd48:	f013 fe72 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 800bd4c:	60f8      	str	r0, [r7, #12]
 800bd4e:	e7e0      	b.n	800bd12 <_ZN11MockSupport7tracingEb+0x20>
}
 800bd50:	bf00      	nop
 800bd52:	3710      	adds	r7, #16
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	3320      	adds	r3, #32
 800bd64:	4618      	mov	r0, r3
 800bd66:	f010 fbc1 	bl	801c4ec <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	3338      	adds	r3, #56	; 0x38
 800bd72:	4618      	mov	r0, r3
 800bd74:	f013 ff53 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 800bd78:	60b8      	str	r0, [r7, #8]
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d01f      	beq.n	800bdc0 <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 800bd80:	68b9      	ldr	r1, [r7, #8]
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 fb6c 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	bf14      	ite	ne
 800bd8e:	2301      	movne	r3, #1
 800bd90:	2300      	moveq	r3, #0
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00e      	beq.n	800bdb6 <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 800bd98:	68b9      	ldr	r1, [r7, #8]
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 fb60 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bda0:	4603      	mov	r3, r0
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	3298      	adds	r2, #152	; 0x98
 800bda6:	6812      	ldr	r2, [r2, #0]
 800bda8:	4618      	mov	r0, r3
 800bdaa:	4790      	blx	r2
 800bdac:	4603      	mov	r3, r0
 800bdae:	461a      	mov	r2, r3
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	4413      	add	r3, r2
 800bdb4:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bdb6:	68b8      	ldr	r0, [r7, #8]
 800bdb8:	f013 fe3a 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 800bdbc:	60b8      	str	r0, [r7, #8]
 800bdbe:	e7dc      	b.n	800bd7a <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	bf14      	ite	ne
 800bdc6:	2301      	movne	r3, #1
 800bdc8:	2300      	moveq	r3, #0
 800bdca:	b2db      	uxtb	r3, r3
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3710      	adds	r7, #16
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d010      	beq.n	800be06 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	33bc      	adds	r3, #188	; 0xbc
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4610      	mov	r0, r2
 800bdf4:	4798      	blx	r3
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	f083 0301 	eor.w	r3, r3, #1
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d001      	beq.n	800be06 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800be02:	2301      	movs	r3, #1
 800be04:	e000      	b.n	800be08 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 800be06:	2300      	movs	r3, #0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d001      	beq.n	800be10 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 800be0c:	2300      	movs	r3, #0
 800be0e:	e02a      	b.n	800be66 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	3338      	adds	r3, #56	; 0x38
 800be14:	4618      	mov	r0, r3
 800be16:	f013 ff02 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d020      	beq.n	800be64 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 800be22:	68f9      	ldr	r1, [r7, #12]
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 fb1b 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d00f      	beq.n	800be50 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800be30:	68f9      	ldr	r1, [r7, #12]
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 fb14 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800be38:	4603      	mov	r3, r0
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7ff ffca 	bl	800bdd4 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800be40:	4603      	mov	r3, r0
 800be42:	f083 0301 	eor.w	r3, r3, #1
 800be46:	b2db      	uxtb	r3, r3
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d001      	beq.n	800be50 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800be4c:	2301      	movs	r3, #1
 800be4e:	e000      	b.n	800be52 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 800be50:	2300      	movs	r3, #0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d001      	beq.n	800be5a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 800be56:	2300      	movs	r3, #0
 800be58:	e005      	b.n	800be66 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800be5a:	68f8      	ldr	r0, [r7, #12]
 800be5c:	f013 fde8 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 800be60:	60f8      	str	r0, [r7, #12]
 800be62:	e7db      	b.n	800be1c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 800be64:	2301      	movs	r3, #1
}
 800be66:	4618      	mov	r0, r3
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 800be6e:	b580      	push	{r7, lr}
 800be70:	b092      	sub	sp, #72	; 0x48
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800be76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800be7a:	4618      	mov	r0, r3
 800be7c:	f010 fa2c 	bl	801c2d8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f103 0220 	add.w	r2, r3, #32
 800be86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800be8a:	4611      	mov	r1, r2
 800be8c:	4618      	mov	r0, r3
 800be8e:	f010 fbf3 	bl	801c678 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	3338      	adds	r3, #56	; 0x38
 800be96:	4618      	mov	r0, r3
 800be98:	f013 fec1 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 800be9c:	6478      	str	r0, [r7, #68]	; 0x44
 800be9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d01d      	beq.n	800bee0 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 800bea4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 fada 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	bf14      	ite	ne
 800beb2:	2301      	movne	r3, #1
 800beb4:	2300      	moveq	r3, #0
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00c      	beq.n	800bed6 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800bebc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 face 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bec4:	4603      	mov	r3, r0
 800bec6:	f103 0220 	add.w	r2, r3, #32
 800beca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bece:	4611      	mov	r1, r2
 800bed0:	4618      	mov	r0, r3
 800bed2:	f010 fbd1 	bl	801c678 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800bed6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bed8:	f013 fdaa 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 800bedc:	6478      	str	r0, [r7, #68]	; 0x44
 800bede:	e7de      	b.n	800be9e <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	691a      	ldr	r2, [r3, #16]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	691b      	ldr	r3, [r3, #16]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	330c      	adds	r3, #12
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	4610      	mov	r0, r2
 800bef0:	4798      	blx	r3
 800bef2:	4601      	mov	r1, r0
 800bef4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800bef8:	f107 0308 	add.w	r3, r7, #8
 800befc:	4618      	mov	r0, r3
 800befe:	f011 f9f5 	bl	801d2ec <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	33c4      	adds	r3, #196	; 0xc4
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f107 0208 	add.w	r2, r7, #8
 800bf0e:	4611      	mov	r1, r2
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800bf14:	f107 0308 	add.w	r3, r7, #8
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f000 fe6d 	bl	800cbf8 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800bf1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bf22:	4618      	mov	r0, r3
 800bf24:	f010 f9ec 	bl	801c300 <_ZN21MockExpectedCallsListD1Ev>
}
 800bf28:	bf00      	nop
 800bf2a:	3748      	adds	r7, #72	; 0x48
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b092      	sub	sp, #72	; 0x48
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800bf38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f010 f9cb 	bl	801c2d8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f103 0220 	add.w	r2, r3, #32
 800bf48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bf4c:	4611      	mov	r1, r2
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f010 fb92 	bl	801c678 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	3338      	adds	r3, #56	; 0x38
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f013 fe60 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 800bf5e:	6478      	str	r0, [r7, #68]	; 0x44
 800bf60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d01d      	beq.n	800bfa2 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 800bf66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 fa79 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	bf14      	ite	ne
 800bf74:	2301      	movne	r3, #1
 800bf76:	2300      	moveq	r3, #0
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00c      	beq.n	800bf98 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800bf7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 fa6d 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bf86:	4603      	mov	r3, r0
 800bf88:	f103 0220 	add.w	r2, r3, #32
 800bf8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bf90:	4611      	mov	r1, r2
 800bf92:	4618      	mov	r0, r3
 800bf94:	f010 fb70 	bl	801c678 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800bf98:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bf9a:	f013 fd49 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 800bf9e:	6478      	str	r0, [r7, #68]	; 0x44
 800bfa0:	e7de      	b.n	800bf60 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	691a      	ldr	r2, [r3, #16]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	330c      	adds	r3, #12
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4610      	mov	r0, r2
 800bfb2:	4798      	blx	r3
 800bfb4:	4601      	mov	r1, r0
 800bfb6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800bfba:	f107 0308 	add.w	r3, r7, #8
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f011 fa38 	bl	801d434 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	33c4      	adds	r3, #196	; 0xc4
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f107 0208 	add.w	r2, r7, #8
 800bfd0:	4611      	mov	r1, r2
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800bfd6:	f107 0308 	add.w	r3, r7, #8
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 fe2e 	bl	800cc3c <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800bfe0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f010 f98b 	bl	801c300 <_ZN21MockExpectedCallsListD1Ev>
}
 800bfea:	bf00      	nop
 800bfec:	3748      	adds	r7, #72	; 0x48
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 800bff2:	b580      	push	{r7, lr}
 800bff4:	b082      	sub	sp, #8
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
 800bffa:	6039      	str	r1, [r7, #0]
    clear();
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	339c      	adds	r3, #156	; 0x9c
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	4798      	blx	r3
    activeReporter_->failTest(failure);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	691a      	ldr	r2, [r3, #16]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	691b      	ldr	r3, [r3, #16]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	3308      	adds	r3, #8
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	6839      	ldr	r1, [r7, #0]
 800c018:	4610      	mov	r0, r2
 800c01a:	4798      	blx	r3
}
 800c01c:	bf00      	nop
 800c01e:	3708      	adds	r7, #8
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 800c02c:	f008 fd0a 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 800c030:	4603      	mov	r3, r0
 800c032:	4618      	mov	r0, r3
 800c034:	f007 fb78 	bl	8013728 <_ZN10UtestShell10countCheckEv>
}
 800c038:	bf00      	nop
 800c03a:	3708      	adds	r7, #8
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d008      	beq.n	800c062 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	33c4      	adds	r3, #196	; 0xc4
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4610      	mov	r0, r2
 800c060:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	3338      	adds	r3, #56	; 0x38
 800c066:	4618      	mov	r0, r3
 800c068:	f013 fdd9 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 800c06c:	60f8      	str	r0, [r7, #12]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d023      	beq.n	800c0bc <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 800c074:	68f9      	ldr	r1, [r7, #12]
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 f9f2 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d009      	beq.n	800c096 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800c082:	68f9      	ldr	r1, [r7, #12]
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 f9eb 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c08a:	4603      	mov	r3, r0
 800c08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d001      	beq.n	800c096 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800c092:	2301      	movs	r3, #1
 800c094:	e000      	b.n	800c098 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 800c096:	2300      	movs	r3, #0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00a      	beq.n	800c0b2 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 800c09c:	68f9      	ldr	r1, [r7, #12]
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 f9de 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	32c4      	adds	r2, #196	; 0xc4
 800c0ac:	6812      	ldr	r2, [r2, #0]
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f013 fcbc 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 800c0b8:	60f8      	str	r0, [r7, #12]
 800c0ba:	e7d8      	b.n	800c06e <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 800c0bc:	bf00      	nop
 800c0be:	3710      	adds	r7, #16
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	3320      	adds	r3, #32
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f010 f947 	bl	801c364 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d001      	beq.n	800c0e0 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	e027      	b.n	800c130 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	3338      	adds	r3, #56	; 0x38
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f013 fd9a 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d01d      	beq.n	800c12e <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 800c0f2:	68f9      	ldr	r1, [r7, #12]
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 f9b3 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00c      	beq.n	800c11a <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800c100:	68f9      	ldr	r1, [r7, #12]
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 f9ac 	bl	800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c108:	4603      	mov	r3, r0
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7ff ffda 	bl	800c0c4 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d001      	beq.n	800c11a <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800c116:	2301      	movs	r3, #1
 800c118:	e000      	b.n	800c11c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 800c11a:	2300      	movs	r3, #0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d001      	beq.n	800c124 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 800c120:	2301      	movs	r3, #1
 800c122:	e005      	b.n	800c130 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	f013 fc83 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	e7de      	b.n	800c0ec <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800c12e:	2300      	movs	r3, #0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3710      	adds	r7, #16
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f7ff ff7d 	bl	800c040 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f7ff fe44 	bl	800bdd4 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d00a      	beq.n	800c168 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	3398      	adds	r3, #152	; 0x98
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	4798      	blx	r3
 800c15e:	4603      	mov	r3, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d001      	beq.n	800c168 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800c164:	2301      	movs	r3, #1
 800c166:	e000      	b.n	800c16a <_ZN11MockSupport17checkExpectationsEv+0x32>
 800c168:	2300      	movs	r3, #0
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d002      	beq.n	800c174 <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f7ff fe7d 	bl	800be6e <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f7ff ffa5 	bl	800c0c4 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d002      	beq.n	800c186 <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f7ff fed5 	bl	800bf30 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 800c186:	bf00      	nop
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b082      	sub	sp, #8
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
 800c196:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	3338      	adds	r3, #56	; 0x38
 800c19c:	6839      	ldr	r1, [r7, #0]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f013 fd0e 	bl	801fbc0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	bf14      	ite	ne
 800c1aa:	2301      	movne	r3, #1
 800c1ac:	2300      	moveq	r3, #0
 800c1ae:	b2db      	uxtb	r3, r3
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3708      	adds	r7, #8
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 800c1b8:	b590      	push	{r4, r7, lr}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	3338      	adds	r3, #56	; 0x38
 800c1c6:	6839      	ldr	r1, [r7, #0]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f013 fcf9 	bl	801fbc0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800c1ce:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d111      	bne.n	800c1fa <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 800c1d6:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c1da:	490a      	ldr	r1, [pc, #40]	; (800c204 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 800c1dc:	2038      	movs	r0, #56	; 0x38
 800c1de:	f7fe fc8b 	bl	800aaf8 <_ZnwjPKci>
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	6839      	ldr	r1, [r7, #0]
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f011 fd6e 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
 800c1ec:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	3338      	adds	r3, #56	; 0x38
 800c1f2:	68f9      	ldr	r1, [r7, #12]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f013 fcad 	bl	801fb54 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3714      	adds	r7, #20
 800c200:	46bd      	mov	sp, r7
 800c202:	bd90      	pop	{r4, r7, pc}
 800c204:	08024a94 	.word	0x08024a94

0800c208 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b086      	sub	sp, #24
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	607a      	str	r2, [r7, #4]
 800c214:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 800c216:	68b9      	ldr	r1, [r7, #8]
 800c218:	68f8      	ldr	r0, [r7, #12]
 800c21a:	f7ff ffcd 	bl	800c1b8 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800c21e:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	3344      	adds	r3, #68	; 0x44
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	683a      	ldr	r2, [r7, #0]
 800c22a:	6879      	ldr	r1, [r7, #4]
 800c22c:	6978      	ldr	r0, [r7, #20]
 800c22e:	4798      	blx	r3
}
 800c230:	bf00      	nop
 800c232:	3718      	adds	r7, #24
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b088      	sub	sp, #32
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	3338      	adds	r3, #56	; 0x38
 800c248:	6879      	ldr	r1, [r7, #4]
 800c24a:	4618      	mov	r0, r3
 800c24c:	f013 fcb8 	bl	801fbc0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800c250:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d111      	bne.n	800c27c <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 800c258:	f107 0314 	add.w	r3, r7, #20
 800c25c:	490b      	ldr	r1, [pc, #44]	; (800c28c <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 800c25e:	4618      	mov	r0, r3
 800c260:	f001 f80d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800c264:	f107 0314 	add.w	r3, r7, #20
 800c268:	4619      	mov	r1, r3
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	f011 fd2c 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
 800c270:	f107 0314 	add.w	r3, r7, #20
 800c274:	4618      	mov	r0, r3
 800c276:	f001 fbba 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800c27a:	e003      	b.n	800c284 <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 800c27c:	69f9      	ldr	r1, [r7, #28]
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	f7ff f8a2 	bl	800b3c8 <_ZN14MockNamedValueC1ERKS_>
}
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	3720      	adds	r7, #32
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	08024a8c 	.word	0x08024a8c

0800c290 <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 800c290:	b590      	push	{r4, r7, lr}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 800c29a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c29e:	4927      	ldr	r1, [pc, #156]	; (800c33c <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 800c2a0:	2048      	movs	r0, #72	; 0x48
 800c2a2:	f7fe fc29 	bl	800aaf8 <_ZnwjPKci>
 800c2a6:	4604      	mov	r4, r0
 800c2a8:	6839      	ldr	r1, [r7, #0]
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f7ff f8f8 	bl	800b4a0 <_ZN11MockSupportC1ERK12SimpleString>
 800c2b0:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	33a4      	adds	r3, #164	; 0xa4
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	6952      	ldr	r2, [r2, #20]
 800c2be:	4611      	mov	r1, r2
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d005      	beq.n	800c2da <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	3390      	adds	r3, #144	; 0x90
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	68f8      	ldr	r0, [r7, #12]
 800c2d8:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c2e0:	f083 0301 	eor.w	r3, r3, #1
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d005      	beq.n	800c2f6 <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	3384      	adds	r3, #132	; 0x84
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	7b1b      	ldrb	r3, [r3, #12]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d005      	beq.n	800c30a <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	3308      	adds	r3, #8
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	68f8      	ldr	r0, [r7, #12]
 800c308:	4798      	blx	r3

    newMock->tracing(tracing_);
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	338c      	adds	r3, #140	; 0x8c
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 800c318:	4611      	mov	r1, r2
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	33b8      	adds	r3, #184	; 0xb8
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	3230      	adds	r2, #48	; 0x30
 800c32a:	4611      	mov	r1, r2
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	4798      	blx	r3
    return newMock;
 800c330:	68fb      	ldr	r3, [r7, #12]
}
 800c332:	4618      	mov	r0, r3
 800c334:	3714      	adds	r7, #20
 800c336:	46bd      	mov	sp, r7
 800c338:	bd90      	pop	{r4, r7, pc}
 800c33a:	bf00      	nop
 800c33c:	08024a94 	.word	0x08024a94

0800c340 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 800c340:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c342:	b0ab      	sub	sp, #172	; 0xac
 800c344:	af04      	add	r7, sp, #16
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800c34a:	f107 0308 	add.w	r3, r7, #8
 800c34e:	4941      	ldr	r1, [pc, #260]	; (800c454 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 800c350:	4618      	mov	r0, r3
 800c352:	f000 ff94 	bl	800d27e <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 800c356:	f107 0308 	add.w	r3, r7, #8
 800c35a:	6839      	ldr	r1, [r7, #0]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f001 fbc3 	bl	800dae8 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 800c362:	f107 0308 	add.w	r3, r7, #8
 800c366:	4619      	mov	r1, r3
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f7ff ff10 	bl	800c18e <_ZN11MockSupport7hasDataERK12SimpleString>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d048      	beq.n	800c406 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 800c374:	f008 fb66 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 800c378:	4604      	mov	r4, r0
 800c37a:	6823      	ldr	r3, [r4, #0]
 800c37c:	3324      	adds	r3, #36	; 0x24
 800c37e:	681d      	ldr	r5, [r3, #0]
 800c380:	f107 0318 	add.w	r3, r7, #24
 800c384:	f107 0208 	add.w	r2, r7, #8
 800c388:	6879      	ldr	r1, [r7, #4]
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7ff ff54 	bl	800c238 <_ZN11MockSupport7getDataERK12SimpleString>
 800c390:	f107 0310 	add.w	r3, r7, #16
 800c394:	f107 0218 	add.w	r2, r7, #24
 800c398:	4611      	mov	r1, r2
 800c39a:	4618      	mov	r0, r3
 800c39c:	f011 ff63 	bl	801e266 <_ZNK14MockNamedValue7getTypeEv>
 800c3a0:	f107 0310 	add.w	r3, r7, #16
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f001 faf5 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800c3aa:	4606      	mov	r6, r0
 800c3ac:	f008 fb5a 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	9302      	str	r3, [sp, #8]
 800c3b4:	f240 13bd 	movw	r3, #445	; 0x1bd
 800c3b8:	9301      	str	r3, [sp, #4]
 800c3ba:	4b27      	ldr	r3, [pc, #156]	; (800c458 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 800c3bc:	9300      	str	r3, [sp, #0]
 800c3be:	2300      	movs	r3, #0
 800c3c0:	4632      	mov	r2, r6
 800c3c2:	4926      	ldr	r1, [pc, #152]	; (800c45c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	47a8      	blx	r5
 800c3c8:	f107 0310 	add.w	r3, r7, #16
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f001 fb0e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800c3d2:	f107 0318 	add.w	r3, r7, #24
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f011 fca0 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 800c3dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c3e0:	f107 0208 	add.w	r2, r7, #8
 800c3e4:	6879      	ldr	r1, [r7, #4]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7ff ff26 	bl	800c238 <_ZN11MockSupport7getDataERK12SimpleString>
 800c3ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f012 fa51 	bl	801e898 <_ZNK14MockNamedValue16getObjectPointerEv>
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	bf00      	nop
 800c3fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c3fe:	4618      	mov	r0, r3
 800c400:	f011 fc8c 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 800c404:	e01b      	b.n	800c43e <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 800c406:	6839      	ldr	r1, [r7, #0]
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f7ff ff41 	bl	800c290 <_ZN11MockSupport5cloneERK12SimpleString>
 800c40e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 800c412:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c416:	4911      	ldr	r1, [pc, #68]	; (800c45c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800c418:	4618      	mov	r0, r3
 800c41a:	f000 ff30 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800c41e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800c422:	f107 0108 	add.w	r1, r7, #8
 800c426:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f7ff feec 	bl	800c208 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 800c430:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c434:	4618      	mov	r0, r3
 800c436:	f001 fada 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return newMock;
 800c43a:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800c43e:	f107 0308 	add.w	r3, r7, #8
 800c442:	4618      	mov	r0, r3
 800c444:	f001 fad3 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800c448:	4623      	mov	r3, r4
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	379c      	adds	r7, #156	; 0x9c
 800c44e:	46bd      	mov	sp, r7
 800c450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c452:	bf00      	nop
 800c454:	08024aac 	.word	0x08024aac
 800c458:	08024a94 	.word	0x08024a94
 800c45c:	08024acc 	.word	0x08024acc

0800c460 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 800c460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c464:	b08b      	sub	sp, #44	; 0x2c
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
 800c46a:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 800c46c:	2500      	movs	r5, #0
 800c46e:	2600      	movs	r6, #0
 800c470:	f107 0308 	add.w	r3, r7, #8
 800c474:	6839      	ldr	r1, [r7, #0]
 800c476:	4618      	mov	r0, r3
 800c478:	f013 fb28 	bl	801facc <_ZNK22MockNamedValueListNode7getTypeEv>
 800c47c:	f04f 0801 	mov.w	r8, #1
 800c480:	f107 0310 	add.w	r3, r7, #16
 800c484:	492e      	ldr	r1, [pc, #184]	; (800c540 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 800c486:	4618      	mov	r0, r3
 800c488:	f000 fef9 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800c48c:	f04f 0901 	mov.w	r9, #1
 800c490:	f107 0210 	add.w	r2, r7, #16
 800c494:	f107 0308 	add.w	r3, r7, #8
 800c498:	4611      	mov	r1, r2
 800c49a:	4618      	mov	r0, r3
 800c49c:	f001 fab3 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d01a      	beq.n	800c4dc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800c4a6:	f107 0318 	add.w	r3, r7, #24
 800c4aa:	6839      	ldr	r1, [r7, #0]
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f013 fafa 	bl	801faa6 <_ZNK22MockNamedValueListNode7getNameEv>
 800c4b2:	2501      	movs	r5, #1
 800c4b4:	f107 0320 	add.w	r3, r7, #32
 800c4b8:	4922      	ldr	r1, [pc, #136]	; (800c544 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f000 fedf 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800c4c0:	2601      	movs	r6, #1
 800c4c2:	f107 0220 	add.w	r2, r7, #32
 800c4c6:	f107 0318 	add.w	r3, r7, #24
 800c4ca:	4611      	mov	r1, r2
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f000 ff54 	bl	800d37a <_ZNK12SimpleString8containsERKS_>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d001      	beq.n	800c4dc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800c4d8:	2401      	movs	r4, #1
 800c4da:	e000      	b.n	800c4de <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 800c4dc:	2400      	movs	r4, #0
 800c4de:	2e00      	cmp	r6, #0
 800c4e0:	d004      	beq.n	800c4ec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800c4e2:	f107 0320 	add.w	r3, r7, #32
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f001 fa81 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800c4ec:	2d00      	cmp	r5, #0
 800c4ee:	d004      	beq.n	800c4fa <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800c4f0:	f107 0318 	add.w	r3, r7, #24
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f001 fa7a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800c4fa:	f1b9 0f00 	cmp.w	r9, #0
 800c4fe:	d004      	beq.n	800c50a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800c500:	f107 0310 	add.w	r3, r7, #16
 800c504:	4618      	mov	r0, r3
 800c506:	f001 fa72 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800c50a:	f1b8 0f00 	cmp.w	r8, #0
 800c50e:	d004      	beq.n	800c51a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800c510:	f107 0308 	add.w	r3, r7, #8
 800c514:	4618      	mov	r0, r3
 800c516:	f001 fa6a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800c51a:	2c00      	cmp	r4, #0
 800c51c:	d00a      	beq.n	800c534 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800c51e:	6838      	ldr	r0, [r7, #0]
 800c520:	f013 fa92 	bl	801fa48 <_ZN22MockNamedValueListNode4itemEv>
 800c524:	4603      	mov	r3, r0
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	32a0      	adds	r2, #160	; 0xa0
 800c52a:	6812      	ldr	r2, [r2, #0]
 800c52c:	4618      	mov	r0, r3
 800c52e:	4790      	blx	r2
 800c530:	4603      	mov	r3, r0
 800c532:	e000      	b.n	800c536 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	372c      	adds	r7, #44	; 0x2c
 800c53a:	46bd      	mov	sp, r7
 800c53c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c540:	08024acc 	.word	0x08024acc
 800c544:	08024aac 	.word	0x08024aac

0800c548 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c556:	2b00      	cmp	r3, #0
 800c558:	d00a      	beq.n	800c570 <_ZN11MockSupport11returnValueEv+0x28>
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	3354      	adds	r3, #84	; 0x54
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	4610      	mov	r0, r2
 800c56c:	4798      	blx	r3
 800c56e:	e010      	b.n	800c592 <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800c570:	f107 0308 	add.w	r3, r7, #8
 800c574:	4909      	ldr	r1, [pc, #36]	; (800c59c <_ZN11MockSupport11returnValueEv+0x54>)
 800c576:	4618      	mov	r0, r3
 800c578:	f000 fe81 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800c57c:	f107 0308 	add.w	r3, r7, #8
 800c580:	4619      	mov	r1, r3
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f011 fba0 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
 800c588:	f107 0308 	add.w	r3, r7, #8
 800c58c:	4618      	mov	r0, r3
 800c58e:	f001 fa2e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	08024a8c 	.word	0x08024a8c

0800c5a0 <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 800c5a0:	b590      	push	{r4, r7, lr}
 800c5a2:	b091      	sub	sp, #68	; 0x44
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	3320      	adds	r3, #32
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f107 0208 	add.w	r2, r7, #8
 800c5b4:	6879      	ldr	r1, [r7, #4]
 800c5b6:	4610      	mov	r0, r2
 800c5b8:	4798      	blx	r3
 800c5ba:	f107 0308 	add.w	r3, r7, #8
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f011 fe60 	bl	801e284 <_ZNK14MockNamedValue12getBoolValueEv>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	461c      	mov	r4, r3
 800c5c8:	bf00      	nop
 800c5ca:	f107 0308 	add.w	r3, r7, #8
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f011 fba4 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 800c5d4:	4623      	mov	r3, r4
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3744      	adds	r7, #68	; 0x44
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd90      	pop	{r4, r7, pc}

0800c5de <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800c5de:	b590      	push	{r4, r7, lr}
 800c5e0:	b091      	sub	sp, #68	; 0x44
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3320      	adds	r3, #32
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f107 0208 	add.w	r2, r7, #8
 800c5f2:	6879      	ldr	r1, [r7, #4]
 800c5f4:	4610      	mov	r0, r2
 800c5f6:	4798      	blx	r3
 800c5f8:	f107 0308 	add.w	r3, r7, #8
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f011 fe69 	bl	801e2d4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800c602:	4604      	mov	r4, r0
 800c604:	bf00      	nop
 800c606:	f107 0308 	add.w	r3, r7, #8
 800c60a:	4618      	mov	r0, r3
 800c60c:	f011 fb86 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 800c610:	4623      	mov	r3, r4
}
 800c612:	4618      	mov	r0, r3
 800c614:	3744      	adds	r7, #68	; 0x44
 800c616:	46bd      	mov	sp, r7
 800c618:	bd90      	pop	{r4, r7, pc}

0800c61a <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800c61a:	b590      	push	{r4, r7, lr}
 800c61c:	b091      	sub	sp, #68	; 0x44
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	3320      	adds	r3, #32
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f107 0208 	add.w	r2, r7, #8
 800c62e:	6879      	ldr	r1, [r7, #4]
 800c630:	4610      	mov	r0, r2
 800c632:	4798      	blx	r3
 800c634:	f107 0308 	add.w	r3, r7, #8
 800c638:	4618      	mov	r0, r3
 800c63a:	f011 fe9b 	bl	801e374 <_ZNK14MockNamedValue11getIntValueEv>
 800c63e:	4604      	mov	r4, r0
 800c640:	bf00      	nop
 800c642:	f107 0308 	add.w	r3, r7, #8
 800c646:	4618      	mov	r0, r3
 800c648:	f011 fb68 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 800c64c:	4623      	mov	r3, r4
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3744      	adds	r7, #68	; 0x44
 800c652:	46bd      	mov	sp, r7
 800c654:	bd90      	pop	{r4, r7, pc}

0800c656 <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 800c656:	b580      	push	{r7, lr}
 800c658:	b082      	sub	sp, #8
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
 800c65e:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	331c      	adds	r3, #28
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	4798      	blx	r3
 800c66c:	4603      	mov	r3, r0
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d007      	beq.n	800c682 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	335c      	adds	r3, #92	; 0x5c
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	4798      	blx	r3
 800c67e:	4603      	mov	r3, r0
 800c680:	e000      	b.n	800c684 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800c682:	683b      	ldr	r3, [r7, #0]
}
 800c684:	4618      	mov	r0, r3
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	331c      	adds	r3, #28
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	4798      	blx	r3
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00a      	beq.n	800c6c0 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	3368      	adds	r3, #104	; 0x68
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	4798      	blx	r3
 800c6b6:	eeb0 7a40 	vmov.f32	s14, s0
 800c6ba:	eef0 7a60 	vmov.f32	s15, s1
 800c6be:	e001      	b.n	800c6c4 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800c6c0:	ed97 7b00 	vldr	d7, [r7]
}
 800c6c4:	eeb0 0a47 	vmov.f32	s0, s14
 800c6c8:	eef0 0a67 	vmov.f32	s1, s15
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b082      	sub	sp, #8
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
 800c6da:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	331c      	adds	r3, #28
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	4798      	blx	r3
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d007      	beq.n	800c6fe <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	3338      	adds	r3, #56	; 0x38
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	4798      	blx	r3
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	e000      	b.n	800c700 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800c6fe:	683b      	ldr	r3, [r7, #0]
}
 800c700:	4618      	mov	r0, r3
 800c702:	3708      	adds	r7, #8
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	460b      	mov	r3, r1
 800c712:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	331c      	adds	r3, #28
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	4798      	blx	r3
 800c720:	4603      	mov	r3, r0
 800c722:	2b00      	cmp	r3, #0
 800c724:	d007      	beq.n	800c736 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	3324      	adds	r3, #36	; 0x24
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	4798      	blx	r3
 800c732:	4603      	mov	r3, r0
 800c734:	e000      	b.n	800c738 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 800c736:	78fb      	ldrb	r3, [r7, #3]
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3708      	adds	r7, #8
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	331c      	adds	r3, #28
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	4798      	blx	r3
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d007      	beq.n	800c76c <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	332c      	adds	r3, #44	; 0x2c
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	4798      	blx	r3
 800c768:	4603      	mov	r3, r0
 800c76a:	e000      	b.n	800c76e <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 800c76c:	683b      	ldr	r3, [r7, #0]
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3708      	adds	r7, #8
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b082      	sub	sp, #8
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
 800c77e:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	331c      	adds	r3, #28
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	4798      	blx	r3
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d007      	beq.n	800c7a2 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	3334      	adds	r3, #52	; 0x34
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	4798      	blx	r3
 800c79e:	4603      	mov	r3, r0
 800c7a0:	e000      	b.n	800c7a4 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800c7a2:	683b      	ldr	r3, [r7, #0]
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3708      	adds	r7, #8
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	331c      	adds	r3, #28
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	4798      	blx	r3
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d007      	beq.n	800c7d8 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	3340      	adds	r3, #64	; 0x40
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	4798      	blx	r3
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	e000      	b.n	800c7da <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 800c7d8:	683b      	ldr	r3, [r7, #0]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800c7e2:	b590      	push	{r4, r7, lr}
 800c7e4:	b091      	sub	sp, #68	; 0x44
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	3320      	adds	r3, #32
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f107 0208 	add.w	r2, r7, #8
 800c7f6:	6879      	ldr	r1, [r7, #4]
 800c7f8:	4610      	mov	r0, r2
 800c7fa:	4798      	blx	r3
 800c7fc:	f107 0308 	add.w	r3, r7, #8
 800c800:	4618      	mov	r0, r3
 800c802:	f011 fddf 	bl	801e3c4 <_ZNK14MockNamedValue15getLongIntValueEv>
 800c806:	4604      	mov	r4, r0
 800c808:	bf00      	nop
 800c80a:	f107 0308 	add.w	r3, r7, #8
 800c80e:	4618      	mov	r0, r3
 800c810:	f011 fa84 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 800c814:	4623      	mov	r3, r4
}
 800c816:	4618      	mov	r0, r3
 800c818:	3744      	adds	r7, #68	; 0x44
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd90      	pop	{r4, r7, pc}

0800c81e <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800c81e:	b590      	push	{r4, r7, lr}
 800c820:	b091      	sub	sp, #68	; 0x44
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	3320      	adds	r3, #32
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f107 0208 	add.w	r2, r7, #8
 800c832:	6879      	ldr	r1, [r7, #4]
 800c834:	4610      	mov	r0, r2
 800c836:	4798      	blx	r3
 800c838:	f107 0308 	add.w	r3, r7, #8
 800c83c:	4618      	mov	r0, r3
 800c83e:	f011 fe23 	bl	801e488 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800c842:	4604      	mov	r4, r0
 800c844:	bf00      	nop
 800c846:	f107 0308 	add.w	r3, r7, #8
 800c84a:	4618      	mov	r0, r3
 800c84c:	f011 fa66 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 800c850:	4623      	mov	r3, r4
}
 800c852:	4618      	mov	r0, r3
 800c854:	3744      	adds	r7, #68	; 0x44
 800c856:	46bd      	mov	sp, r7
 800c858:	bd90      	pop	{r4, r7, pc}
	...

0800c85c <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 800c85c:	b5b0      	push	{r4, r5, r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af02      	add	r7, sp, #8
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 800c866:	f008 f8ed 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 800c86a:	4604      	mov	r4, r0
 800c86c:	6823      	ldr	r3, [r4, #0]
 800c86e:	3368      	adds	r3, #104	; 0x68
 800c870:	681d      	ldr	r5, [r3, #0]
 800c872:	f008 f8f7 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c876:	4603      	mov	r3, r0
 800c878:	9300      	str	r3, [sp, #0]
 800c87a:	f240 2345 	movw	r3, #581	; 0x245
 800c87e:	4a06      	ldr	r2, [pc, #24]	; (800c898 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800c880:	4906      	ldr	r1, [pc, #24]	; (800c89c <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800c882:	4620      	mov	r0, r4
 800c884:	47a8      	blx	r5
    return cpputest_longlong(0);
 800c886:	2100      	movs	r1, #0
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f7fe fd2f 	bl	800b2ec <_ZN17cpputest_longlongC1Ei>
}
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bdb0      	pop	{r4, r5, r7, pc}
 800c896:	bf00      	nop
 800c898:	08024a94 	.word	0x08024a94
 800c89c:	08024ad8 	.word	0x08024ad8

0800c8a0 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800c8a0:	b5b0      	push	{r4, r5, r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af02      	add	r7, sp, #8
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 800c8aa:	f008 f8cb 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 800c8ae:	4604      	mov	r4, r0
 800c8b0:	6823      	ldr	r3, [r4, #0]
 800c8b2:	3368      	adds	r3, #104	; 0x68
 800c8b4:	681d      	ldr	r5, [r3, #0]
 800c8b6:	f008 f8d5 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	9300      	str	r3, [sp, #0]
 800c8be:	f240 234b 	movw	r3, #587	; 0x24b
 800c8c2:	4a06      	ldr	r2, [pc, #24]	; (800c8dc <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800c8c4:	4906      	ldr	r1, [pc, #24]	; (800c8e0 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800c8ca:	2100      	movs	r1, #0
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f7fe fd19 	bl	800b304 <_ZN18cpputest_ulonglongC1Ei>
}
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	3708      	adds	r7, #8
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bdb0      	pop	{r4, r5, r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	08024a94 	.word	0x08024a94
 800c8e0:	08024af8 	.word	0x08024af8

0800c8e4 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800c8e4:	b5b0      	push	{r4, r5, r7, lr}
 800c8e6:	b086      	sub	sp, #24
 800c8e8:	af02      	add	r7, sp, #8
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	4639      	mov	r1, r7
 800c8f0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800c8f4:	f008 f8a6 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 800c8f8:	4604      	mov	r4, r0
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	3368      	adds	r3, #104	; 0x68
 800c8fe:	681d      	ldr	r5, [r3, #0]
 800c900:	f008 f8b0 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c904:	4603      	mov	r3, r0
 800c906:	9300      	str	r3, [sp, #0]
 800c908:	f240 2351 	movw	r3, #593	; 0x251
 800c90c:	4a06      	ldr	r2, [pc, #24]	; (800c928 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800c90e:	4907      	ldr	r1, [pc, #28]	; (800c92c <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800c910:	4620      	mov	r0, r4
 800c912:	47a8      	blx	r5
    return defaultValue;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	461a      	mov	r2, r3
 800c918:	463b      	mov	r3, r7
 800c91a:	cb03      	ldmia	r3!, {r0, r1}
 800c91c:	6010      	str	r0, [r2, #0]
 800c91e:	6051      	str	r1, [r2, #4]
}
 800c920:	68f8      	ldr	r0, [r7, #12]
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bdb0      	pop	{r4, r5, r7, pc}
 800c928:	08024a94 	.word	0x08024a94
 800c92c:	08024ad8 	.word	0x08024ad8

0800c930 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800c930:	b5b0      	push	{r4, r5, r7, lr}
 800c932:	b086      	sub	sp, #24
 800c934:	af02      	add	r7, sp, #8
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	4639      	mov	r1, r7
 800c93c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800c940:	f008 f880 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 800c944:	4604      	mov	r4, r0
 800c946:	6823      	ldr	r3, [r4, #0]
 800c948:	3368      	adds	r3, #104	; 0x68
 800c94a:	681d      	ldr	r5, [r3, #0]
 800c94c:	f008 f88a 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c950:	4603      	mov	r3, r0
 800c952:	9300      	str	r3, [sp, #0]
 800c954:	f240 2357 	movw	r3, #599	; 0x257
 800c958:	4a06      	ldr	r2, [pc, #24]	; (800c974 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800c95a:	4907      	ldr	r1, [pc, #28]	; (800c978 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800c95c:	4620      	mov	r0, r4
 800c95e:	47a8      	blx	r5
    return defaultValue;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	461a      	mov	r2, r3
 800c964:	463b      	mov	r3, r7
 800c966:	cb03      	ldmia	r3!, {r0, r1}
 800c968:	6010      	str	r0, [r2, #0]
 800c96a:	6051      	str	r1, [r2, #4]
}
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	3710      	adds	r7, #16
 800c970:	46bd      	mov	sp, r7
 800c972:	bdb0      	pop	{r4, r5, r7, pc}
 800c974:	08024a94 	.word	0x08024a94
 800c978:	08024af8 	.word	0x08024af8

0800c97c <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800c97c:	b590      	push	{r4, r7, lr}
 800c97e:	b091      	sub	sp, #68	; 0x44
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	3320      	adds	r3, #32
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f107 0208 	add.w	r2, r7, #8
 800c990:	6879      	ldr	r1, [r7, #4]
 800c992:	4610      	mov	r0, r2
 800c994:	4798      	blx	r3
 800c996:	f107 0308 	add.w	r3, r7, #8
 800c99a:	4618      	mov	r0, r3
 800c99c:	f011 fea8 	bl	801e6f0 <_ZNK14MockNamedValue14getStringValueEv>
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	bf00      	nop
 800c9a4:	f107 0308 	add.w	r3, r7, #8
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f011 f9b7 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 800c9ae:	4623      	mov	r3, r4
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3744      	adds	r7, #68	; 0x44
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd90      	pop	{r4, r7, pc}

0800c9b8 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	ed2d 8b02 	vpush	{d8}
 800c9be:	b090      	sub	sp, #64	; 0x40
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	3320      	adds	r3, #32
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f107 0208 	add.w	r2, r7, #8
 800c9d0:	6879      	ldr	r1, [r7, #4]
 800c9d2:	4610      	mov	r0, r2
 800c9d4:	4798      	blx	r3
 800c9d6:	f107 0308 	add.w	r3, r7, #8
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f011 fe2c 	bl	801e638 <_ZNK14MockNamedValue14getDoubleValueEv>
 800c9e0:	eeb0 8a40 	vmov.f32	s16, s0
 800c9e4:	eef0 8a60 	vmov.f32	s17, s1
 800c9e8:	bf00      	nop
 800c9ea:	f107 0308 	add.w	r3, r7, #8
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f011 f994 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 800c9f4:	eeb0 7a48 	vmov.f32	s14, s16
 800c9f8:	eef0 7a68 	vmov.f32	s15, s17
}
 800c9fc:	eeb0 0a47 	vmov.f32	s0, s14
 800ca00:	eef0 0a67 	vmov.f32	s1, s15
 800ca04:	3740      	adds	r7, #64	; 0x40
 800ca06:	46bd      	mov	sp, r7
 800ca08:	ecbd 8b02 	vpop	{d8}
 800ca0c:	bd80      	pop	{r7, pc}

0800ca0e <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b082      	sub	sp, #8
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
 800ca16:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	331c      	adds	r3, #28
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	4798      	blx	r3
 800ca24:	4603      	mov	r3, r0
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d007      	beq.n	800ca3a <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	336c      	adds	r3, #108	; 0x6c
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	4798      	blx	r3
 800ca36:	4603      	mov	r3, r0
 800ca38:	e000      	b.n	800ca3c <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800ca3a:	683b      	ldr	r3, [r7, #0]
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3708      	adds	r7, #8
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	331c      	adds	r3, #28
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	4798      	blx	r3
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d007      	beq.n	800ca70 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	3378      	adds	r3, #120	; 0x78
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	4798      	blx	r3
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	e000      	b.n	800ca72 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800ca70:	683b      	ldr	r3, [r7, #0]
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3708      	adds	r7, #8
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b082      	sub	sp, #8
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
 800ca82:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	331c      	adds	r3, #28
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	4798      	blx	r3
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d007      	beq.n	800caa6 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	3380      	adds	r3, #128	; 0x80
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	4798      	blx	r3
 800caa2:	4603      	mov	r3, r0
 800caa4:	e000      	b.n	800caa8 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800caa6:	683b      	ldr	r3, [r7, #0]
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3708      	adds	r7, #8
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800cab0:	b590      	push	{r4, r7, lr}
 800cab2:	b091      	sub	sp, #68	; 0x44
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	3320      	adds	r3, #32
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f107 0208 	add.w	r2, r7, #8
 800cac4:	6879      	ldr	r1, [r7, #4]
 800cac6:	4610      	mov	r0, r2
 800cac8:	4798      	blx	r3
 800caca:	f107 0308 	add.w	r3, r7, #8
 800cace:	4618      	mov	r0, r3
 800cad0:	f011 fe36 	bl	801e740 <_ZNK14MockNamedValue15getPointerValueEv>
 800cad4:	4604      	mov	r4, r0
 800cad6:	bf00      	nop
 800cad8:	f107 0308 	add.w	r3, r7, #8
 800cadc:	4618      	mov	r0, r3
 800cade:	f011 f91d 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 800cae2:	4623      	mov	r3, r4
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3744      	adds	r7, #68	; 0x44
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd90      	pop	{r4, r7, pc}

0800caec <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800caec:	b590      	push	{r4, r7, lr}
 800caee:	b091      	sub	sp, #68	; 0x44
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	3320      	adds	r3, #32
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f107 0208 	add.w	r2, r7, #8
 800cb00:	6879      	ldr	r1, [r7, #4]
 800cb02:	4610      	mov	r0, r2
 800cb04:	4798      	blx	r3
 800cb06:	f107 0308 	add.w	r3, r7, #8
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f011 fe40 	bl	801e790 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800cb10:	4604      	mov	r4, r0
 800cb12:	bf00      	nop
 800cb14:	f107 0308 	add.w	r3, r7, #8
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f011 f8ff 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 800cb1e:	4623      	mov	r3, r4
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3744      	adds	r7, #68	; 0x44
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd90      	pop	{r4, r7, pc}

0800cb28 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800cb28:	b590      	push	{r4, r7, lr}
 800cb2a:	b091      	sub	sp, #68	; 0x44
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	3320      	adds	r3, #32
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f107 0208 	add.w	r2, r7, #8
 800cb3c:	6879      	ldr	r1, [r7, #4]
 800cb3e:	4610      	mov	r0, r2
 800cb40:	4798      	blx	r3
 800cb42:	f107 0308 	add.w	r3, r7, #8
 800cb46:	4618      	mov	r0, r3
 800cb48:	f011 fe4a 	bl	801e7e0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800cb4c:	4604      	mov	r4, r0
 800cb4e:	bf00      	nop
 800cb50:	f107 0308 	add.w	r3, r7, #8
 800cb54:	4618      	mov	r0, r3
 800cb56:	f011 f8e1 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 800cb5a:	4623      	mov	r3, r4
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3744      	adds	r7, #68	; 0x44
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd90      	pop	{r4, r7, pc}

0800cb64 <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b082      	sub	sp, #8
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d00a      	beq.n	800cb8a <_ZN11MockSupport14hasReturnValueEv+0x26>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	3350      	adds	r3, #80	; 0x50
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4610      	mov	r0, r2
 800cb84:	4798      	blx	r3
 800cb86:	4603      	mov	r3, r0
 800cb88:	e000      	b.n	800cb8c <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800cb8a:	2300      	movs	r3, #0
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3708      	adds	r7, #8
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <_Z41__static_initialization_and_destruction_0ii>:
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d115      	bne.n	800cbd0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d110      	bne.n	800cbd0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800cbae:	f107 0308 	add.w	r3, r7, #8
 800cbb2:	490f      	ldr	r1, [pc, #60]	; (800cbf0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f000 fb62 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800cbba:	f107 0308 	add.w	r3, r7, #8
 800cbbe:	4619      	mov	r1, r3
 800cbc0:	480c      	ldr	r0, [pc, #48]	; (800cbf4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800cbc2:	f7fe fc6d 	bl	800b4a0 <_ZN11MockSupportC1ERK12SimpleString>
 800cbc6:	f107 0308 	add.w	r3, r7, #8
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f000 ff0f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d107      	bne.n	800cbe6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d102      	bne.n	800cbe6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800cbe0:	4804      	ldr	r0, [pc, #16]	; (800cbf4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800cbe2:	f7fe fca7 	bl	800b534 <_ZN11MockSupportD1Ev>
}
 800cbe6:	bf00      	nop
 800cbe8:	3710      	adds	r7, #16
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	08024a8c 	.word	0x08024a8c
 800cbf4:	200008d8 	.word	0x200008d8

0800cbf8 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	4a05      	ldr	r2, [pc, #20]	; (800cc18 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	601a      	str	r2, [r3, #0]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7fe fbbb 	bl	800b384 <_ZN11MockFailureD1Ev>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	4618      	mov	r0, r3
 800cc12:	3708      	adds	r7, #8
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	08028af8 	.word	0x08028af8

0800cc1c <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f7ff ffe7 	bl	800cbf8 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800cc2a:	2134      	movs	r1, #52	; 0x34
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f7fd ff77 	bl	800ab20 <_ZdlPvj>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	4618      	mov	r0, r3
 800cc36:	3708      	adds	r7, #8
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b082      	sub	sp, #8
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	4a05      	ldr	r2, [pc, #20]	; (800cc5c <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	601a      	str	r2, [r3, #0]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7fe fb99 	bl	800b384 <_ZN11MockFailureD1Ev>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	4618      	mov	r0, r3
 800cc56:	3708      	adds	r7, #8
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	08028acc 	.word	0x08028acc

0800cc60 <_ZN20MockCallOrderFailureD0Ev>:
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f7ff ffe7 	bl	800cc3c <_ZN20MockCallOrderFailureD1Ev>
 800cc6e:	2134      	movs	r1, #52	; 0x34
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f7fd ff55 	bl	800ab20 <_ZdlPvj>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3708      	adds	r7, #8
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800cc80:	b580      	push	{r7, lr}
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cc88:	2001      	movs	r0, #1
 800cc8a:	f7ff ff83 	bl	800cb94 <_Z41__static_initialization_and_destruction_0ii>
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800cc90:	b580      	push	{r7, lr}
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cc98:	2000      	movs	r0, #0
 800cc9a:	f7ff ff7b 	bl	800cb94 <_Z41__static_initialization_and_destruction_0ii>
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b082      	sub	sp, #8
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800cca8:	4b05      	ldr	r3, [pc, #20]	; (800ccc0 <_ZN11SimpleMutexC1Ev+0x20>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4798      	blx	r3
 800ccae:	4602      	mov	r2, r0
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	601a      	str	r2, [r3, #0]
}
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3708      	adds	r7, #8
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	200000f0 	.word	0x200000f0

0800ccc4 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800cccc:	4b05      	ldr	r3, [pc, #20]	; (800cce4 <_ZN11SimpleMutexD1Ev+0x20>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	6812      	ldr	r2, [r2, #0]
 800ccd4:	4610      	mov	r0, r2
 800ccd6:	4798      	blx	r3
}
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3708      	adds	r7, #8
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	200000fc 	.word	0x200000fc

0800cce8 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800ccf0:	4b04      	ldr	r3, [pc, #16]	; (800cd04 <_ZN11SimpleMutex4LockEv+0x1c>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	6812      	ldr	r2, [r2, #0]
 800ccf8:	4610      	mov	r0, r2
 800ccfa:	4798      	blx	r3
}
 800ccfc:	bf00      	nop
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	200000f4 	.word	0x200000f4

0800cd08 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800cd10:	4b04      	ldr	r3, [pc, #16]	; (800cd24 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	6812      	ldr	r2, [r2, #0]
 800cd18:	4610      	mov	r0, r2
 800cd1a:	4798      	blx	r3
}
 800cd1c:	bf00      	nop
 800cd1e:	3708      	adds	r7, #8
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	200000f8 	.word	0x200000f8

0800cd28 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b082      	sub	sp, #8
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	683a      	ldr	r2, [r7, #0]
 800cd36:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7ff ffd3 	bl	800cce8 <_ZN11SimpleMutex4LockEv>
}
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	4618      	mov	r0, r3
 800cd46:	3708      	adds	r7, #8
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f7ff ffd5 	bl	800cd08 <_ZN11SimpleMutex6UnlockEv>
}
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4618      	mov	r0, r3
 800cd62:	3708      	adds	r7, #8
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800cd6c:	4b05      	ldr	r3, [pc, #20]	; (800cd84 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d103      	bne.n	800cd7c <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800cd74:	f003 fd7a 	bl	801086c <_Z24defaultNewArrayAllocatorv>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	e001      	b.n	800cd80 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800cd7c:	4b01      	ldr	r3, [pc, #4]	; (800cd84 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	20000920 	.word	0x20000920

0800cd88 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800cd88:	b590      	push	{r4, r7, lr}
 800cd8a:	b085      	sub	sp, #20
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800cd94:	f7ff ffe8 	bl	800cd68 <_ZN12SimpleString18getStringAllocatorEv>
 800cd98:	6803      	ldr	r3, [r0, #0]
 800cd9a:	3308      	adds	r3, #8
 800cd9c:	681c      	ldr	r4, [r3, #0]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	68ba      	ldr	r2, [r7, #8]
 800cda2:	68f9      	ldr	r1, [r7, #12]
 800cda4:	47a0      	blx	r4
 800cda6:	4603      	mov	r3, r0
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3714      	adds	r7, #20
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd90      	pop	{r4, r7, pc}

0800cdb0 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800cdb0:	b590      	push	{r4, r7, lr}
 800cdb2:	b087      	sub	sp, #28
 800cdb4:	af02      	add	r7, sp, #8
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	60b9      	str	r1, [r7, #8]
 800cdba:	607a      	str	r2, [r7, #4]
 800cdbc:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800cdbe:	f7ff ffd3 	bl	800cd68 <_ZN12SimpleString18getStringAllocatorEv>
 800cdc2:	6803      	ldr	r3, [r0, #0]
 800cdc4:	330c      	adds	r3, #12
 800cdc6:	681c      	ldr	r4, [r3, #0]
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	9300      	str	r3, [sp, #0]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	68ba      	ldr	r2, [r7, #8]
 800cdd0:	68f9      	ldr	r1, [r7, #12]
 800cdd2:	47a0      	blx	r4
}
 800cdd4:	bf00      	nop
 800cdd6:	3714      	adds	r7, #20
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd90      	pop	{r4, r7, pc}

0800cddc <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800cde4:	2284      	movs	r2, #132	; 0x84
 800cde6:	4906      	ldr	r1, [pc, #24]	; (800ce00 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800cde8:	2001      	movs	r0, #1
 800cdea:	f7ff ffcd 	bl	800cd88 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800cdee:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	701a      	strb	r2, [r3, #0]
    return empty;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3710      	adds	r7, #16
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	08024b24 	.word	0x08024b24

0800ce04 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	4618      	mov	r0, r3
 800ce12:	f001 f809 	bl	800de28 <_ZN12SimpleString7isSpaceEc>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d003      	beq.n	800ce24 <_ZN12SimpleString4AtoUEPKc+0x20>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	3301      	adds	r3, #1
 800ce20:	607b      	str	r3, [r7, #4]
 800ce22:	e7f3      	b.n	800ce0c <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800ce24:	2300      	movs	r3, #0
 800ce26:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f000 ffe7 	bl	800de00 <_ZN12SimpleString7isDigitEc>
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d005      	beq.n	800ce44 <_ZN12SimpleString4AtoUEPKc+0x40>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	2b2f      	cmp	r3, #47	; 0x2f
 800ce3e:	d901      	bls.n	800ce44 <_ZN12SimpleString4AtoUEPKc+0x40>
 800ce40:	2301      	movs	r3, #1
 800ce42:	e000      	b.n	800ce46 <_ZN12SimpleString4AtoUEPKc+0x42>
 800ce44:	2300      	movs	r3, #0
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d010      	beq.n	800ce6c <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800ce4a:	68fa      	ldr	r2, [r7, #12]
 800ce4c:	4613      	mov	r3, r2
 800ce4e:	009b      	lsls	r3, r3, #2
 800ce50:	4413      	add	r3, r2
 800ce52:	005b      	lsls	r3, r3, #1
 800ce54:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	4413      	add	r3, r2
 800ce60:	3b30      	subs	r3, #48	; 0x30
 800ce62:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	3301      	adds	r3, #1
 800ce68:	607b      	str	r3, [r7, #4]
 800ce6a:	e7dd      	b.n	800ce28 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3710      	adds	r7, #16
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b084      	sub	sp, #16
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	4618      	mov	r0, r3
 800ce84:	f000 ffd0 	bl	800de28 <_ZN12SimpleString7isSpaceEc>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d003      	beq.n	800ce96 <_ZN12SimpleString4AtoIEPKc+0x20>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	3301      	adds	r3, #1
 800ce92:	607b      	str	r3, [r7, #4]
 800ce94:	e7f3      	b.n	800ce7e <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800ce9c:	7afb      	ldrb	r3, [r7, #11]
 800ce9e:	2b2d      	cmp	r3, #45	; 0x2d
 800cea0:	d002      	beq.n	800cea8 <_ZN12SimpleString4AtoIEPKc+0x32>
 800cea2:	7afb      	ldrb	r3, [r7, #11]
 800cea4:	2b2b      	cmp	r3, #43	; 0x2b
 800cea6:	d102      	bne.n	800ceae <_ZN12SimpleString4AtoIEPKc+0x38>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	3301      	adds	r3, #1
 800ceac:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f000 ffa2 	bl	800de00 <_ZN12SimpleString7isDigitEc>
 800cebc:	4603      	mov	r3, r0
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d00f      	beq.n	800cee2 <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800cec2:	68fa      	ldr	r2, [r7, #12]
 800cec4:	4613      	mov	r3, r2
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	4413      	add	r3, r2
 800ceca:	005b      	lsls	r3, r3, #1
 800cecc:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	3b30      	subs	r3, #48	; 0x30
 800ced4:	68fa      	ldr	r2, [r7, #12]
 800ced6:	4413      	add	r3, r2
 800ced8:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	3301      	adds	r3, #1
 800cede:	607b      	str	r3, [r7, #4]
 800cee0:	e7e7      	b.n	800ceb2 <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800cee2:	7afb      	ldrb	r3, [r7, #11]
 800cee4:	2b2d      	cmp	r3, #45	; 0x2d
 800cee6:	d102      	bne.n	800ceee <_ZN12SimpleString4AtoIEPKc+0x78>
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	425b      	negs	r3, r3
 800ceec:	e000      	b.n	800cef0 <_ZN12SimpleString4AtoIEPKc+0x7a>
 800ceee:	68fb      	ldr	r3, [r7, #12]
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00c      	beq.n	800cf24 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	781a      	ldrb	r2, [r3, #0]
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d106      	bne.n	800cf24 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	3301      	adds	r3, #1
 800cf1a:	607b      	str	r3, [r7, #4]
       ++s2;
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	3301      	adds	r3, #1
 800cf20:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800cf22:	e7ee      	b.n	800cf02 <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	461a      	mov	r2, r3
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	1ad3      	subs	r3, r2, r3
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	370c      	adds	r7, #12
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800cf44:	f04f 33ff 	mov.w	r3, #4294967295
 800cf48:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	60fb      	str	r3, [r7, #12]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	1c5a      	adds	r2, r3, #1
 800cf54:	607a      	str	r2, [r7, #4]
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	bf14      	ite	ne
 800cf5c:	2301      	movne	r3, #1
 800cf5e:	2300      	moveq	r3, #0
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d000      	beq.n	800cf68 <_ZN12SimpleString6StrLenEPKc+0x2c>
 800cf66:	e7f0      	b.n	800cf4a <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800cf68:	68fb      	ldr	r3, [r7, #12]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3714      	adds	r7, #20
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr

0800cf76 <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800cf76:	b480      	push	{r7}
 800cf78:	b085      	sub	sp, #20
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	60f8      	str	r0, [r7, #12]
 800cf7e:	60b9      	str	r1, [r7, #8]
 800cf80:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d013      	beq.n	800cfb0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00f      	beq.n	800cfb0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	781a      	ldrb	r2, [r3, #0]
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d109      	bne.n	800cfb0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	3b01      	subs	r3, #1
 800cfa0:	607b      	str	r3, [r7, #4]
        ++s1;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	60fb      	str	r3, [r7, #12]
        ++s2;
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800cfae:	e7e8      	b.n	800cf82 <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d006      	beq.n	800cfc4 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	461a      	mov	r2, r3
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	1ad3      	subs	r3, r2, r3
 800cfc2:	e000      	b.n	800cfc6 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800cfc4:	2300      	movs	r3, #0
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3714      	adds	r7, #20
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr

0800cfd2 <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800cfd2:	b480      	push	{r7}
 800cfd4:	b087      	sub	sp, #28
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	60f8      	str	r0, [r7, #12]
 800cfda:	60b9      	str	r1, [r7, #8]
 800cfdc:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d002      	beq.n	800cfee <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d101      	bne.n	800cff2 <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	e01e      	b.n	800d030 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	781a      	ldrb	r2, [r3, #0]
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	3b01      	subs	r3, #1
 800cffe:	607b      	str	r3, [r7, #4]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d005      	beq.n	800d012 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d001      	beq.n	800d012 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800d00e:	2301      	movs	r3, #1
 800d010:	e000      	b.n	800d014 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800d012:	2300      	movs	r3, #0
 800d014:	2b00      	cmp	r3, #0
 800d016:	d00a      	beq.n	800d02e <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	3301      	adds	r3, #1
 800d01c:	60bb      	str	r3, [r7, #8]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	3301      	adds	r3, #1
 800d022:	60fb      	str	r3, [r7, #12]
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	781a      	ldrb	r2, [r3, #0]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800d02c:	e7e5      	b.n	800cffa <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800d02e:	697b      	ldr	r3, [r7, #20]
}
 800d030:	4618      	mov	r0, r3
 800d032:	371c      	adds	r7, #28
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d101      	bne.n	800d052 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	e01b      	b.n	800d08a <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d016      	beq.n	800d088 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800d05a:	6838      	ldr	r0, [r7, #0]
 800d05c:	f7ff ff6e 	bl	800cf3c <_ZN12SimpleString6StrLenEPKc>
 800d060:	4603      	mov	r3, r0
 800d062:	461a      	mov	r2, r3
 800d064:	6839      	ldr	r1, [r7, #0]
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f7ff ff85 	bl	800cf76 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800d06c:	4603      	mov	r3, r0
 800d06e:	2b00      	cmp	r3, #0
 800d070:	bf0c      	ite	eq
 800d072:	2301      	moveq	r3, #1
 800d074:	2300      	movne	r3, #0
 800d076:	b2db      	uxtb	r3, r3
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d001      	beq.n	800d080 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	e004      	b.n	800d08a <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	3301      	adds	r3, #1
 800d084:	607b      	str	r3, [r7, #4]
 800d086:	e7e4      	b.n	800d052 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800d088:	2300      	movs	r3, #0
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3708      	adds	r7, #8
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800d092:	b580      	push	{r7, lr}
 800d094:	b082      	sub	sp, #8
 800d096:	af00      	add	r7, sp, #0
 800d098:	4603      	mov	r3, r0
 800d09a:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800d09c:	79fb      	ldrb	r3, [r7, #7]
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f000 fed9 	bl	800de56 <_ZN12SimpleString7isUpperEc>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d003      	beq.n	800d0b2 <_ZN12SimpleString7ToLowerEc+0x20>
 800d0aa:	79fb      	ldrb	r3, [r7, #7]
 800d0ac:	3320      	adds	r3, #32
 800d0ae:	b2db      	uxtb	r3, r3
 800d0b0:	e000      	b.n	800d0b4 <_ZN12SimpleString7ToLowerEc+0x22>
 800d0b2:	79fb      	ldrb	r3, [r7, #7]
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3708      	adds	r7, #8
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b087      	sub	sp, #28
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	60f8      	str	r0, [r7, #12]
 800d0c4:	60b9      	str	r1, [r7, #8]
 800d0c6:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	613b      	str	r3, [r7, #16]

    while (n--)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	1e5a      	subs	r2, r3, #1
 800d0d4:	607a      	str	r2, [r7, #4]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	bf14      	ite	ne
 800d0da:	2301      	movne	r3, #1
 800d0dc:	2300      	moveq	r3, #0
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d013      	beq.n	800d10c <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	781a      	ldrb	r2, [r3, #0]
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d006      	beq.n	800d0fe <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	1ad3      	subs	r3, r2, r3
 800d0fc:	e007      	b.n	800d10e <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	3301      	adds	r3, #1
 800d102:	617b      	str	r3, [r7, #20]
            ++p2;
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	3301      	adds	r3, #1
 800d108:	613b      	str	r3, [r7, #16]
    while (n--)
 800d10a:	e7e1      	b.n	800d0d0 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800d10c:	2300      	movs	r3, #0
}
 800d10e:	4618      	mov	r0, r3
 800d110:	371c      	adds	r7, #28
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr
	...

0800d11c <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d00d      	beq.n	800d148 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6818      	ldr	r0, [r3, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6859      	ldr	r1, [r3, #4]
 800d134:	23ee      	movs	r3, #238	; 0xee
 800d136:	4a06      	ldr	r2, [pc, #24]	; (800d150 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800d138:	f7ff fe3a 	bl	800cdb0 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2200      	movs	r2, #0
 800d140:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	605a      	str	r2, [r3, #4]
    }
}
 800d148:	bf00      	nop
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	08024b24 	.word	0x08024b24

0800d154 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b082      	sub	sp, #8
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f7ff ffdd 	bl	800d11c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2201      	movs	r2, #1
 800d166:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f7ff fe37 	bl	800cddc <_ZNK12SimpleString14getEmptyStringEv>
 800d16e:	4602      	mov	r2, r0
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	601a      	str	r2, [r3, #0]
}
 800d174:	bf00      	nop
 800d176:	3708      	adds	r7, #8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f7ff ffc7 	bl	800d11c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	4619      	mov	r1, r3
 800d19a:	68b8      	ldr	r0, [r7, #8]
 800d19c:	f000 fe12 	bl	800ddc4 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	601a      	str	r2, [r3, #0]
}
 800d1a6:	bf00      	nop
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
	...

0800d1b0 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f7ff ffae 	bl	800d11c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	683a      	ldr	r2, [r7, #0]
 800d1c4:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	f240 1209 	movw	r2, #265	; 0x109
 800d1ce:	4907      	ldr	r1, [pc, #28]	; (800d1ec <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7ff fdd9 	bl	800cd88 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	701a      	strb	r2, [r3, #0]
}
 800d1e4:	bf00      	nop
 800d1e6:	3708      	adds	r7, #8
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}
 800d1ec:	08024b24 	.word	0x08024b24

0800d1f0 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800d1fc:	68f8      	ldr	r0, [r7, #12]
 800d1fe:	f7ff ff8d 	bl	800d11c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	68ba      	ldr	r2, [r7, #8]
 800d20c:	601a      	str	r2, [r3, #0]
}
 800d20e:	bf00      	nop
 800d210:	3710      	adds	r7, #16
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}

0800d216 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800d216:	b590      	push	{r4, r7, lr}
 800d218:	b083      	sub	sp, #12
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]
 800d21e:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	681c      	ldr	r4, [r3, #0]
 800d224:	6838      	ldr	r0, [r7, #0]
 800d226:	f000 fbc1 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800d22a:	4603      	mov	r3, r0
 800d22c:	3301      	adds	r3, #1
 800d22e:	461a      	mov	r2, r3
 800d230:	4621      	mov	r1, r4
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f7ff ffa2 	bl	800d17c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800d238:	bf00      	nop
 800d23a:	370c      	adds	r7, #12
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd90      	pop	{r4, r7, pc}

0800d240 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800d24a:	6838      	ldr	r0, [r7, #0]
 800d24c:	f7ff fe76 	bl	800cf3c <_ZN12SimpleString6StrLenEPKc>
 800d250:	4603      	mov	r3, r0
 800d252:	3301      	adds	r3, #1
 800d254:	461a      	mov	r2, r3
 800d256:	6839      	ldr	r1, [r7, #0]
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f7ff ff8f 	bl	800d17c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800d25e:	bf00      	nop
 800d260:	3708      	adds	r7, #8
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}

0800d266 <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800d266:	b480      	push	{r7}
 800d268:	b083      	sub	sp, #12
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
    return buffer_;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
}
 800d272:	4618      	mov	r0, r3
 800d274:	370c      	adds	r7, #12
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr

0800d27e <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800d27e:	b580      	push	{r7, lr}
 800d280:	b082      	sub	sp, #8
 800d282:	af00      	add	r7, sp, #0
 800d284:	6078      	str	r0, [r7, #4]
 800d286:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2200      	movs	r2, #0
 800d28c:	601a      	str	r2, [r3, #0]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2200      	movs	r2, #0
 800d292:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d103      	bne.n	800d2a2 <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f7ff ff5a 	bl	800d154 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800d2a0:	e003      	b.n	800d2aa <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800d2a2:	6839      	ldr	r1, [r7, #0]
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f7ff ffcb 	bl	800d240 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3708      	adds	r7, #8
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b088      	sub	sp, #32
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	60f8      	str	r0, [r7, #12]
 800d2bc:	60b9      	str	r1, [r7, #8]
 800d2be:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	601a      	str	r2, [r3, #0]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800d2cc:	68b8      	ldr	r0, [r7, #8]
 800d2ce:	f7ff fe35 	bl	800cf3c <_ZN12SimpleString6StrLenEPKc>
 800d2d2:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	687a      	ldr	r2, [r7, #4]
 800d2d8:	fb02 f303 	mul.w	r3, r2, r3
 800d2dc:	3301      	adds	r3, #1
 800d2de:	4619      	mov	r1, r3
 800d2e0:	68f8      	ldr	r0, [r7, #12]
 800d2e2:	f7ff ff65 	bl	800d1b0 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	61bb      	str	r3, [r7, #24]
 800d2f0:	69ba      	ldr	r2, [r7, #24]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d20e      	bcs.n	800d316 <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	68b9      	ldr	r1, [r7, #8]
 800d300:	69f8      	ldr	r0, [r7, #28]
 800d302:	f7ff fe66 	bl	800cfd2 <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800d306:	69fa      	ldr	r2, [r7, #28]
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	4413      	add	r3, r2
 800d30c:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800d30e:	69bb      	ldr	r3, [r7, #24]
 800d310:	3301      	adds	r3, #1
 800d312:	61bb      	str	r3, [r7, #24]
 800d314:	e7ec      	b.n	800d2f0 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800d316:	69fb      	ldr	r3, [r7, #28]
 800d318:	2200      	movs	r2, #0
 800d31a:	701a      	strb	r2, [r3, #0]
}
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	4618      	mov	r0, r3
 800d320:	3720      	adds	r7, #32
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}

0800d326 <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800d326:	b580      	push	{r7, lr}
 800d328:	b082      	sub	sp, #8
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
 800d32e:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2200      	movs	r2, #0
 800d334:	601a      	str	r2, [r3, #0]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2200      	movs	r2, #0
 800d33a:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800d33c:	6838      	ldr	r0, [r7, #0]
 800d33e:	f7ff ff92 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800d342:	4603      	mov	r3, r0
 800d344:	4619      	mov	r1, r3
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f7ff ff7a 	bl	800d240 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	4618      	mov	r0, r3
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800d356:	b580      	push	{r7, lr}
 800d358:	b082      	sub	sp, #8
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
 800d35e:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	429a      	cmp	r2, r3
 800d366:	d003      	beq.n	800d370 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800d368:	6839      	ldr	r1, [r7, #0]
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f7ff ff53 	bl	800d216 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800d370:	687b      	ldr	r3, [r7, #4]
}
 800d372:	4618      	mov	r0, r3
 800d374:	3708      	adds	r7, #8
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800d37a:	b590      	push	{r4, r7, lr}
 800d37c:	b083      	sub	sp, #12
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
 800d382:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f7ff ff6e 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800d38a:	4604      	mov	r4, r0
 800d38c:	6838      	ldr	r0, [r7, #0]
 800d38e:	f7ff ff6a 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800d392:	4603      	mov	r3, r0
 800d394:	4619      	mov	r1, r3
 800d396:	4620      	mov	r0, r4
 800d398:	f7ff fe50 	bl	800d03c <_ZN12SimpleString6StrStrEPKcS1_>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	bf14      	ite	ne
 800d3a2:	2301      	movne	r3, #1
 800d3a4:	2300      	moveq	r3, #0
 800d3a6:	b2db      	uxtb	r3, r3
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	370c      	adds	r7, #12
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd90      	pop	{r4, r7, pc}

0800d3b0 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800d3b0:	b590      	push	{r4, r7, lr}
 800d3b2:	b087      	sub	sp, #28
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800d3ba:	f107 0308 	add.w	r3, r7, #8
 800d3be:	6879      	ldr	r1, [r7, #4]
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f000 fabb 	bl	800d93c <_ZNK12SimpleString9lowerCaseEv>
 800d3c6:	f107 0310 	add.w	r3, r7, #16
 800d3ca:	6839      	ldr	r1, [r7, #0]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f000 fab5 	bl	800d93c <_ZNK12SimpleString9lowerCaseEv>
 800d3d2:	f107 0210 	add.w	r2, r7, #16
 800d3d6:	f107 0308 	add.w	r3, r7, #8
 800d3da:	4611      	mov	r1, r2
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7ff ffcc 	bl	800d37a <_ZNK12SimpleString8containsERKS_>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	461c      	mov	r4, r3
 800d3e6:	bf00      	nop
 800d3e8:	f107 0310 	add.w	r3, r7, #16
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f000 fafe 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800d3f2:	f107 0308 	add.w	r3, r7, #8
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f000 faf9 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800d3fc:	4623      	mov	r3, r4
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	371c      	adds	r7, #28
 800d402:	46bd      	mov	sp, r7
 800d404:	bd90      	pop	{r4, r7, pc}

0800d406 <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800d406:	b590      	push	{r4, r7, lr}
 800d408:	b083      	sub	sp, #12
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	6078      	str	r0, [r7, #4]
 800d40e:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800d410:	6838      	ldr	r0, [r7, #0]
 800d412:	f000 facb 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	bf0c      	ite	eq
 800d41c:	2301      	moveq	r3, #1
 800d41e:	2300      	movne	r3, #0
 800d420:	b2db      	uxtb	r3, r3
 800d422:	2b00      	cmp	r3, #0
 800d424:	d001      	beq.n	800d42a <_ZNK12SimpleString10startsWithERKS_+0x24>
 800d426:	2301      	movs	r3, #1
 800d428:	e022      	b.n	800d470 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 fabe 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800d430:	4603      	mov	r3, r0
 800d432:	2b00      	cmp	r3, #0
 800d434:	bf0c      	ite	eq
 800d436:	2301      	moveq	r3, #1
 800d438:	2300      	movne	r3, #0
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d001      	beq.n	800d444 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800d440:	2300      	movs	r3, #0
 800d442:	e015      	b.n	800d470 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f7ff ff0e 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800d44a:	4604      	mov	r4, r0
 800d44c:	6838      	ldr	r0, [r7, #0]
 800d44e:	f7ff ff0a 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800d452:	4603      	mov	r3, r0
 800d454:	4619      	mov	r1, r3
 800d456:	4620      	mov	r0, r4
 800d458:	f7ff fdf0 	bl	800d03c <_ZN12SimpleString6StrStrEPKcS1_>
 800d45c:	4604      	mov	r4, r0
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f7ff ff01 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800d464:	4603      	mov	r3, r0
 800d466:	429c      	cmp	r4, r3
 800d468:	bf0c      	ite	eq
 800d46a:	2301      	moveq	r3, #1
 800d46c:	2300      	movne	r3, #0
 800d46e:	b2db      	uxtb	r3, r3
}
 800d470:	4618      	mov	r0, r3
 800d472:	370c      	adds	r7, #12
 800d474:	46bd      	mov	sp, r7
 800d476:	bd90      	pop	{r4, r7, pc}

0800d478 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800d478:	b590      	push	{r4, r7, lr}
 800d47a:	b085      	sub	sp, #20
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f000 fa92 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800d488:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800d48a:	6838      	ldr	r0, [r7, #0]
 800d48c:	f000 fa8e 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800d490:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d101      	bne.n	800d49c <_ZNK12SimpleString8endsWithERKS_+0x24>
 800d498:	2301      	movs	r3, #1
 800d49a:	e020      	b.n	800d4de <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d101      	bne.n	800d4a6 <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	e01b      	b.n	800d4de <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800d4a6:	68fa      	ldr	r2, [r7, #12]
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d201      	bcs.n	800d4b2 <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	e015      	b.n	800d4de <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f7ff fed7 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800d4b8:	4601      	mov	r1, r0
 800d4ba:	68fa      	ldr	r2, [r7, #12]
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	1ad3      	subs	r3, r2, r3
 800d4c0:	18cc      	adds	r4, r1, r3
 800d4c2:	6838      	ldr	r0, [r7, #0]
 800d4c4:	f7ff fecf 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	4620      	mov	r0, r4
 800d4ce:	f7ff fd13 	bl	800cef8 <_ZN12SimpleString6StrCmpEPKcS1_>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	bf0c      	ite	eq
 800d4d8:	2301      	moveq	r3, #1
 800d4da:	2300      	movne	r3, #0
 800d4dc:	b2db      	uxtb	r3, r3
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3714      	adds	r7, #20
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd90      	pop	{r4, r7, pc}

0800d4e6 <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800d4e6:	b580      	push	{r7, lr}
 800d4e8:	b086      	sub	sp, #24
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]
 800d4ee:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f7ff feb6 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800d4fa:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	60fb      	str	r3, [r7, #12]
    if (*str){
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d008      	beq.n	800d51a <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800d508:	6838      	ldr	r0, [r7, #0]
 800d50a:	f7ff feac 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800d50e:	4603      	mov	r3, r0
 800d510:	4619      	mov	r1, r3
 800d512:	6938      	ldr	r0, [r7, #16]
 800d514:	f7ff fd92 	bl	800d03c <_ZN12SimpleString6StrStrEPKcS1_>
 800d518:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d014      	beq.n	800d54c <_ZNK12SimpleString5countERKS_+0x66>
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d011      	beq.n	800d54c <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	613b      	str	r3, [r7, #16]
        str++;
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	3301      	adds	r3, #1
 800d530:	613b      	str	r3, [r7, #16]
        num++;
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	3301      	adds	r3, #1
 800d536:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800d538:	6838      	ldr	r0, [r7, #0]
 800d53a:	f7ff fe94 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800d53e:	4603      	mov	r3, r0
 800d540:	4619      	mov	r1, r3
 800d542:	6938      	ldr	r0, [r7, #16]
 800d544:	f7ff fd7a 	bl	800d03c <_ZN12SimpleString6StrStrEPKcS1_>
 800d548:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800d54a:	e7e6      	b.n	800d51a <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800d54c:	697b      	ldr	r3, [r7, #20]
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3718      	adds	r7, #24
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}

0800d556 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800d556:	b590      	push	{r4, r7, lr}
 800d558:	b091      	sub	sp, #68	; 0x44
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	60f8      	str	r0, [r7, #12]
 800d55e:	60b9      	str	r1, [r7, #8]
 800d560:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800d562:	68b9      	ldr	r1, [r7, #8]
 800d564:	68f8      	ldr	r0, [r7, #12]
 800d566:	f7ff ffbe 	bl	800d4e6 <_ZNK12SimpleString5countERKS_>
 800d56a:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800d56c:	68b9      	ldr	r1, [r7, #8]
 800d56e:	68f8      	ldr	r0, [r7, #12]
 800d570:	f7ff ff82 	bl	800d478 <_ZNK12SimpleString8endsWithERKS_>
 800d574:	4603      	mov	r3, r0
 800d576:	2b00      	cmp	r3, #0
 800d578:	d001      	beq.n	800d57e <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800d57a:	2300      	movs	r3, #0
 800d57c:	e000      	b.n	800d580 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800d57e:	2301      	movs	r3, #1
 800d580:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800d582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d586:	4413      	add	r3, r2
 800d588:	4619      	mov	r1, r3
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f001 f95c 	bl	800e848 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800d590:	68f8      	ldr	r0, [r7, #12]
 800d592:	f7ff fe68 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800d596:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800d598:	2300      	movs	r3, #0
 800d59a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d59c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d235      	bcs.n	800d610 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800d5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800d5a8:	68b8      	ldr	r0, [r7, #8]
 800d5aa:	f7ff fe5c 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d5b4:	f7ff fd42 	bl	800d03c <_ZN12SimpleString6StrStrEPKcS1_>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800d5be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f001 f9db 	bl	800e97c <_ZN22SimpleStringCollectionixEj>
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	f107 031c 	add.w	r3, r7, #28
 800d5cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7ff fe55 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800d5d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d8:	1ad3      	subs	r3, r2, r3
 800d5da:	f107 0014 	add.w	r0, r7, #20
 800d5de:	f107 011c 	add.w	r1, r7, #28
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	f000 fb0c 	bl	800dc00 <_ZNK12SimpleString9subStringEjj>
 800d5e8:	f107 0314 	add.w	r3, r7, #20
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	4620      	mov	r0, r4
 800d5f0:	f7ff feb1 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800d5f4:	f107 0314 	add.w	r3, r7, #20
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f000 f9f8 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800d5fe:	f107 031c 	add.w	r3, r7, #28
 800d602:	4618      	mov	r0, r3
 800d604:	f000 f9f3 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800d608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60a:	3301      	adds	r3, #1
 800d60c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d60e:	e7c5      	b.n	800d59c <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800d610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d612:	2b00      	cmp	r3, #0
 800d614:	d015      	beq.n	800d642 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800d616:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f001 f9af 	bl	800e97c <_ZN22SimpleStringCollectionixEj>
 800d61e:	4604      	mov	r4, r0
 800d620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d624:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d626:	4618      	mov	r0, r3
 800d628:	f7ff fe29 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800d62c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d630:	4619      	mov	r1, r3
 800d632:	4620      	mov	r0, r4
 800d634:	f7ff fe8f 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800d638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d63c:	4618      	mov	r0, r3
 800d63e:	f000 f9d6 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    }
}
 800d642:	bf00      	nop
 800d644:	3744      	adds	r7, #68	; 0x44
 800d646:	46bd      	mov	sp, r7
 800d648:	bd90      	pop	{r4, r7, pc}

0800d64a <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b084      	sub	sp, #16
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
 800d652:	460b      	mov	r3, r1
 800d654:	70fb      	strb	r3, [r7, #3]
 800d656:	4613      	mov	r3, r2
 800d658:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 f9a6 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800d660:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800d662:	2300      	movs	r3, #0
 800d664:	60fb      	str	r3, [r7, #12]
 800d666:	68fa      	ldr	r2, [r7, #12]
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d218      	bcs.n	800d6a0 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f7ff fdf9 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800d674:	4602      	mov	r2, r0
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	4413      	add	r3, r2
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	78fa      	ldrb	r2, [r7, #3]
 800d67e:	429a      	cmp	r2, r3
 800d680:	bf0c      	ite	eq
 800d682:	2301      	moveq	r3, #1
 800d684:	2300      	movne	r3, #0
 800d686:	b2db      	uxtb	r3, r3
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d005      	beq.n	800d698 <_ZN12SimpleString7replaceEcc+0x4e>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	4413      	add	r3, r2
 800d694:	78ba      	ldrb	r2, [r7, #2]
 800d696:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	3301      	adds	r3, #1
 800d69c:	60fb      	str	r3, [r7, #12]
 800d69e:	e7e2      	b.n	800d666 <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800d6a0:	bf00      	nop
 800d6a2:	3710      	adds	r7, #16
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b08e      	sub	sp, #56	; 0x38
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800d6b4:	f107 0310 	add.w	r3, r7, #16
 800d6b8:	68b9      	ldr	r1, [r7, #8]
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7ff fddf 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800d6c0:	f107 0310 	add.w	r3, r7, #16
 800d6c4:	4619      	mov	r1, r3
 800d6c6:	68f8      	ldr	r0, [r7, #12]
 800d6c8:	f7ff ff0d 	bl	800d4e6 <_ZNK12SimpleString5countERKS_>
 800d6cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d6ce:	f107 0310 	add.w	r3, r7, #16
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f000 f98b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800d6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d071      	beq.n	800d7c2 <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	f000 f964 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800d6e4:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800d6e6:	68b8      	ldr	r0, [r7, #8]
 800d6e8:	f7ff fc28 	bl	800cf3c <_ZN12SimpleString6StrLenEPKc>
 800d6ec:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f7ff fc24 	bl	800cf3c <_ZN12SimpleString6StrLenEPKc>
 800d6f4:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800d6f6:	6a3b      	ldr	r3, [r7, #32]
 800d6f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6fa:	fb02 f203 	mul.w	r2, r2, r3
 800d6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d700:	441a      	add	r2, r3
 800d702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d704:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d706:	fb01 f303 	mul.w	r3, r1, r3
 800d70a:	1ad3      	subs	r3, r2, r3
 800d70c:	3301      	adds	r3, #1
 800d70e:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800d710:	69fb      	ldr	r3, [r7, #28]
 800d712:	2b01      	cmp	r3, #1
 800d714:	d951      	bls.n	800d7ba <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800d716:	f240 129d 	movw	r2, #413	; 0x19d
 800d71a:	492c      	ldr	r1, [pc, #176]	; (800d7cc <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800d71c:	69f8      	ldr	r0, [r7, #28]
 800d71e:	f7ff fb33 	bl	800cd88 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800d722:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800d724:	2300      	movs	r3, #0
 800d726:	637b      	str	r3, [r7, #52]	; 0x34
 800d728:	2300      	movs	r3, #0
 800d72a:	633b      	str	r3, [r7, #48]	; 0x30
 800d72c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d730:	429a      	cmp	r2, r3
 800d732:	d236      	bcs.n	800d7a2 <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800d734:	68f8      	ldr	r0, [r7, #12]
 800d736:	f7ff fd96 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800d73a:	4602      	mov	r2, r0
 800d73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d73e:	4413      	add	r3, r2
 800d740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d742:	68b9      	ldr	r1, [r7, #8]
 800d744:	4618      	mov	r0, r3
 800d746:	f7ff fc16 	bl	800cf76 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	bf0c      	ite	eq
 800d750:	2301      	moveq	r3, #1
 800d752:	2300      	movne	r3, #0
 800d754:	b2db      	uxtb	r3, r3
 800d756:	2b00      	cmp	r3, #0
 800d758:	d011      	beq.n	800d77e <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800d75a:	69ba      	ldr	r2, [r7, #24]
 800d75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75e:	18d0      	adds	r0, r2, r3
 800d760:	6a3b      	ldr	r3, [r7, #32]
 800d762:	3301      	adds	r3, #1
 800d764:	461a      	mov	r2, r3
 800d766:	6879      	ldr	r1, [r7, #4]
 800d768:	f7ff fc33 	bl	800cfd2 <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800d76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d76e:	6a3b      	ldr	r3, [r7, #32]
 800d770:	4413      	add	r3, r2
 800d772:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800d774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d778:	4413      	add	r3, r2
 800d77a:	637b      	str	r3, [r7, #52]	; 0x34
 800d77c:	e7d6      	b.n	800d72c <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800d77e:	68f8      	ldr	r0, [r7, #12]
 800d780:	f7ff fd71 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800d784:	4602      	mov	r2, r0
 800d786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d788:	441a      	add	r2, r3
 800d78a:	69b9      	ldr	r1, [r7, #24]
 800d78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78e:	440b      	add	r3, r1
 800d790:	7812      	ldrb	r2, [r2, #0]
 800d792:	701a      	strb	r2, [r3, #0]
                j++;
 800d794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d796:	3301      	adds	r3, #1
 800d798:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800d79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d79c:	3301      	adds	r3, #1
 800d79e:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800d7a0:	e7c4      	b.n	800d72c <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	3b01      	subs	r3, #1
 800d7a6:	69ba      	ldr	r2, [r7, #24]
 800d7a8:	4413      	add	r3, r2
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800d7ae:	69fa      	ldr	r2, [r7, #28]
 800d7b0:	69b9      	ldr	r1, [r7, #24]
 800d7b2:	68f8      	ldr	r0, [r7, #12]
 800d7b4:	f7ff fd1c 	bl	800d1f0 <_ZN12SimpleString19setInternalBufferToEPcj>
 800d7b8:	e004      	b.n	800d7c4 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800d7ba:	68f8      	ldr	r0, [r7, #12]
 800d7bc:	f7ff fcca 	bl	800d154 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800d7c0:	e000      	b.n	800d7c4 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800d7c2:	bf00      	nop
}
 800d7c4:	3738      	adds	r7, #56	; 0x38
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	08024b24 	.word	0x08024b24

0800d7d0 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800d7d0:	b590      	push	{r4, r7, lr}
 800d7d2:	b089      	sub	sp, #36	; 0x24
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800d7da:	493b      	ldr	r1, [pc, #236]	; (800d8c8 <_ZNK12SimpleString9printableEv+0xf8>)
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f7ff fd4e 	bl	800d27e <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800d7e2:	6838      	ldr	r0, [r7, #0]
 800d7e4:	f000 f876 	bl	800d8d4 <_ZNK12SimpleString16getPrintableSizeEv>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f7ff fcde 	bl	800d1b0 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800d7f4:	6838      	ldr	r0, [r7, #0]
 800d7f6:	f000 f8d9 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800d7fa:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800d800:	2300      	movs	r3, #0
 800d802:	61bb      	str	r3, [r7, #24]
 800d804:	69ba      	ldr	r2, [r7, #24]
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d252      	bcs.n	800d8b2 <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	681a      	ldr	r2, [r3, #0]
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	4413      	add	r3, r2
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800d818:	7cfb      	ldrb	r3, [r7, #19]
 800d81a:	4618      	mov	r0, r3
 800d81c:	f000 fb43 	bl	800dea6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800d820:	4603      	mov	r3, r0
 800d822:	2b00      	cmp	r3, #0
 800d824:	d012      	beq.n	800d84c <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	69fb      	ldr	r3, [r7, #28]
 800d82c:	18d0      	adds	r0, r2, r3
 800d82e:	7cfb      	ldrb	r3, [r7, #19]
 800d830:	3b07      	subs	r3, #7
 800d832:	b2db      	uxtb	r3, r3
 800d834:	461a      	mov	r2, r3
 800d836:	4b25      	ldr	r3, [pc, #148]	; (800d8cc <_ZNK12SimpleString9printableEv+0xfc>)
 800d838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d83c:	2202      	movs	r2, #2
 800d83e:	4619      	mov	r1, r3
 800d840:	f7ff fbc7 	bl	800cfd2 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	3302      	adds	r3, #2
 800d848:	61fb      	str	r3, [r7, #28]
 800d84a:	e02e      	b.n	800d8aa <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800d84c:	7cfb      	ldrb	r3, [r7, #19]
 800d84e:	4618      	mov	r0, r3
 800d850:	f000 fb15 	bl	800de7e <_ZN12SimpleString9isControlEc>
 800d854:	4603      	mov	r3, r0
 800d856:	2b00      	cmp	r3, #0
 800d858:	d01e      	beq.n	800d898 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800d85a:	7cfa      	ldrb	r2, [r7, #19]
 800d85c:	f107 0308 	add.w	r3, r7, #8
 800d860:	491b      	ldr	r1, [pc, #108]	; (800d8d0 <_ZNK12SimpleString9printableEv+0x100>)
 800d862:	4618      	mov	r0, r3
 800d864:	f000 fdca 	bl	800e3fc <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	18d4      	adds	r4, r2, r3
 800d870:	f107 0308 	add.w	r3, r7, #8
 800d874:	4618      	mov	r0, r3
 800d876:	f000 f88d 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800d87a:	4603      	mov	r3, r0
 800d87c:	2204      	movs	r2, #4
 800d87e:	4619      	mov	r1, r3
 800d880:	4620      	mov	r0, r4
 800d882:	f7ff fba6 	bl	800cfd2 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800d886:	69fb      	ldr	r3, [r7, #28]
 800d888:	3304      	adds	r3, #4
 800d88a:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800d88c:	f107 0308 	add.w	r3, r7, #8
 800d890:	4618      	mov	r0, r3
 800d892:	f000 f8ac 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800d896:	e008      	b.n	800d8aa <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	4413      	add	r3, r2
 800d8a0:	7cfa      	ldrb	r2, [r7, #19]
 800d8a2:	701a      	strb	r2, [r3, #0]
            j++;
 800d8a4:	69fb      	ldr	r3, [r7, #28]
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	61bb      	str	r3, [r7, #24]
 800d8b0:	e7a8      	b.n	800d804 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681a      	ldr	r2, [r3, #0]
 800d8b6:	69fb      	ldr	r3, [r7, #28]
 800d8b8:	4413      	add	r3, r2
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	701a      	strb	r2, [r3, #0]

    return result;
 800d8be:	bf00      	nop
}
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	3724      	adds	r7, #36	; 0x24
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd90      	pop	{r4, r7, pc}
 800d8c8:	08024be4 	.word	0x08024be4
 800d8cc:	2000006c 	.word	0x2000006c
 800d8d0:	08024be8 	.word	0x08024be8

0800d8d4 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b086      	sub	sp, #24
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 f865 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800d8e2:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	613b      	str	r3, [r7, #16]
 800d8ec:	693a      	ldr	r2, [r7, #16]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d21e      	bcs.n	800d932 <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681a      	ldr	r2, [r3, #0]
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	4413      	add	r3, r2
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800d900:	7afb      	ldrb	r3, [r7, #11]
 800d902:	4618      	mov	r0, r3
 800d904:	f000 facf 	bl	800dea6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800d908:	4603      	mov	r3, r0
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d003      	beq.n	800d916 <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	3301      	adds	r3, #1
 800d912:	617b      	str	r3, [r7, #20]
 800d914:	e009      	b.n	800d92a <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800d916:	7afb      	ldrb	r3, [r7, #11]
 800d918:	4618      	mov	r0, r3
 800d91a:	f000 fab0 	bl	800de7e <_ZN12SimpleString9isControlEc>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d002      	beq.n	800d92a <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	3303      	adds	r3, #3
 800d928:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	3301      	adds	r3, #1
 800d92e:	613b      	str	r3, [r7, #16]
 800d930:	e7dc      	b.n	800d8ec <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800d932:	697b      	ldr	r3, [r7, #20]
}
 800d934:	4618      	mov	r0, r3
 800d936:	3718      	adds	r7, #24
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800d93c:	b590      	push	{r4, r7, lr}
 800d93e:	b085      	sub	sp, #20
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800d946:	6839      	ldr	r1, [r7, #0]
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f7ff fcec 	bl	800d326 <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 f82c 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800d954:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800d956:	2300      	movs	r3, #0
 800d958:	60fb      	str	r3, [r7, #12]
 800d95a:	68fa      	ldr	r2, [r7, #12]
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d213      	bcs.n	800d98a <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f7ff fc7f 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800d968:	4602      	mov	r2, r0
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	4413      	add	r3, r2
 800d96e:	7819      	ldrb	r1, [r3, #0]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	18d4      	adds	r4, r2, r3
 800d978:	4608      	mov	r0, r1
 800d97a:	f7ff fb8a 	bl	800d092 <_ZN12SimpleString7ToLowerEc>
 800d97e:	4603      	mov	r3, r0
 800d980:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	3301      	adds	r3, #1
 800d986:	60fb      	str	r3, [r7, #12]
 800d988:	e7e7      	b.n	800d95a <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800d98a:	bf00      	nop
}
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	3714      	adds	r7, #20
 800d990:	46bd      	mov	sp, r7
 800d992:	bd90      	pop	{r4, r7, pc}

0800d994 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f7ff fc62 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800d9a2:	4603      	mov	r3, r0
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3708      	adds	r7, #8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f7ff fc56 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7ff fabd 	bl	800cf3c <_ZN12SimpleString6StrLenEPKc>
 800d9c2:	4603      	mov	r3, r0
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3708      	adds	r7, #8
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}

0800d9cc <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b082      	sub	sp, #8
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f7ff ffe9 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	bf0c      	ite	eq
 800d9e0:	2301      	moveq	r3, #1
 800d9e2:	2300      	movne	r3, #0
 800d9e4:	b2db      	uxtb	r3, r3
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3708      	adds	r7, #8
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}

0800d9ee <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800d9ee:	b580      	push	{r7, lr}
 800d9f0:	b082      	sub	sp, #8
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f7ff fb90 	bl	800d11c <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	4618      	mov	r0, r3
 800da00:	3708      	adds	r7, #8
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}

0800da06 <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800da06:	b590      	push	{r4, r7, lr}
 800da08:	b083      	sub	sp, #12
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	6078      	str	r0, [r7, #4]
 800da0e:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f7ff ffbf 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800da16:	4604      	mov	r4, r0
 800da18:	6838      	ldr	r0, [r7, #0]
 800da1a:	f7ff ffbb 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800da1e:	4603      	mov	r3, r0
 800da20:	4619      	mov	r1, r3
 800da22:	4620      	mov	r0, r4
 800da24:	f7ff fa68 	bl	800cef8 <_ZN12SimpleString6StrCmpEPKcS1_>
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	bf0c      	ite	eq
 800da2e:	2301      	moveq	r3, #1
 800da30:	2300      	movne	r3, #0
 800da32:	b2db      	uxtb	r3, r3
}
 800da34:	4618      	mov	r0, r3
 800da36:	370c      	adds	r7, #12
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd90      	pop	{r4, r7, pc}

0800da3c <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800da3c:	b590      	push	{r4, r7, lr}
 800da3e:	b087      	sub	sp, #28
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800da46:	f107 0308 	add.w	r3, r7, #8
 800da4a:	6879      	ldr	r1, [r7, #4]
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7ff ff75 	bl	800d93c <_ZNK12SimpleString9lowerCaseEv>
 800da52:	f107 0310 	add.w	r3, r7, #16
 800da56:	6839      	ldr	r1, [r7, #0]
 800da58:	4618      	mov	r0, r3
 800da5a:	f7ff ff6f 	bl	800d93c <_ZNK12SimpleString9lowerCaseEv>
 800da5e:	f107 0210 	add.w	r2, r7, #16
 800da62:	f107 0308 	add.w	r3, r7, #8
 800da66:	4611      	mov	r1, r2
 800da68:	4618      	mov	r0, r3
 800da6a:	f7ff ffcc 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 800da6e:	4603      	mov	r3, r0
 800da70:	461c      	mov	r4, r3
 800da72:	f107 0310 	add.w	r3, r7, #16
 800da76:	4618      	mov	r0, r3
 800da78:	f7ff ffb9 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800da7c:	f107 0308 	add.w	r3, r7, #8
 800da80:	4618      	mov	r0, r3
 800da82:	f7ff ffb4 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800da86:	4623      	mov	r3, r4
}
 800da88:	4618      	mov	r0, r3
 800da8a:	371c      	adds	r7, #28
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd90      	pop	{r4, r7, pc}

0800da90 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800da9a:	6839      	ldr	r1, [r7, #0]
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f7ff ffb2 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 800daa2:	4603      	mov	r3, r0
 800daa4:	f083 0301 	eor.w	r3, r3, #1
 800daa8:	b2db      	uxtb	r3, r3
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3708      	adds	r7, #8
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b084      	sub	sp, #16
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	60f8      	str	r0, [r7, #12]
 800daba:	60b9      	str	r1, [r7, #8]
 800dabc:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800dabe:	68b8      	ldr	r0, [r7, #8]
 800dac0:	f7ff fbd1 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800dac4:	4603      	mov	r3, r0
 800dac6:	4619      	mov	r1, r3
 800dac8:	68f8      	ldr	r0, [r7, #12]
 800daca:	f7ff fbd8 	bl	800d27e <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f7ff fbc9 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800dad4:	4603      	mov	r3, r0
 800dad6:	4619      	mov	r1, r3
 800dad8:	68f8      	ldr	r0, [r7, #12]
 800dada:	f000 f817 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    return t;
 800dade:	bf00      	nop
}
 800dae0:	68f8      	ldr	r0, [r7, #12]
 800dae2:	3710      	adds	r7, #16
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800daf2:	6838      	ldr	r0, [r7, #0]
 800daf4:	f7ff fbb7 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800daf8:	4603      	mov	r3, r0
 800dafa:	4619      	mov	r1, r3
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f000 f805 	bl	800db0c <_ZN12SimpleStringpLEPKc>
 800db02:	4603      	mov	r3, r0
}
 800db04:	4618      	mov	r0, r3
 800db06:	3708      	adds	r7, #8
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b086      	sub	sp, #24
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f7ff ff48 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800db1c:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800db1e:	6838      	ldr	r0, [r7, #0]
 800db20:	f7ff fa0c 	bl	800cf3c <_ZN12SimpleString6StrLenEPKc>
 800db24:	4603      	mov	r3, r0
 800db26:	3301      	adds	r3, #1
 800db28:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800db2a:	697a      	ldr	r2, [r7, #20]
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	4413      	add	r3, r2
 800db30:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7ff fb97 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800db38:	4603      	mov	r3, r0
 800db3a:	68f9      	ldr	r1, [r7, #12]
 800db3c:	4618      	mov	r0, r3
 800db3e:	f000 f941 	bl	800ddc4 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800db42:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800db44:	68ba      	ldr	r2, [r7, #8]
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	4413      	add	r3, r2
 800db4a:	693a      	ldr	r2, [r7, #16]
 800db4c:	6839      	ldr	r1, [r7, #0]
 800db4e:	4618      	mov	r0, r3
 800db50:	f7ff fa3f 	bl	800cfd2 <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800db54:	68fa      	ldr	r2, [r7, #12]
 800db56:	68b9      	ldr	r1, [r7, #8]
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f7ff fb49 	bl	800d1f0 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800db5e:	687b      	ldr	r3, [r7, #4]
}
 800db60:	4618      	mov	r0, r3
 800db62:	3718      	adds	r7, #24
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800db68:	b590      	push	{r4, r7, lr}
 800db6a:	b08b      	sub	sp, #44	; 0x2c
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	4613      	mov	r3, r2
 800db74:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800db76:	68f8      	ldr	r0, [r7, #12]
 800db78:	f7ff ff18 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800db7c:	4604      	mov	r4, r0
 800db7e:	68b8      	ldr	r0, [r7, #8]
 800db80:	f7ff ff14 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800db84:	4603      	mov	r3, r0
 800db86:	429c      	cmp	r4, r3
 800db88:	bf8c      	ite	hi
 800db8a:	2301      	movhi	r3, #1
 800db8c:	2300      	movls	r3, #0
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	2b00      	cmp	r3, #0
 800db92:	d006      	beq.n	800dba2 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800db94:	79fb      	ldrb	r3, [r7, #7]
 800db96:	461a      	mov	r2, r3
 800db98:	68f9      	ldr	r1, [r7, #12]
 800db9a:	68b8      	ldr	r0, [r7, #8]
 800db9c:	f7ff ffe4 	bl	800db68 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800dba0:	e02b      	b.n	800dbfa <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800dba2:	79fb      	ldrb	r3, [r7, #7]
 800dba4:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800dba6:	2300      	movs	r3, #0
 800dba8:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800dbaa:	68b8      	ldr	r0, [r7, #8]
 800dbac:	f7ff fefe 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800dbb0:	4604      	mov	r4, r0
 800dbb2:	68f8      	ldr	r0, [r7, #12]
 800dbb4:	f7ff fefa 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	1ae2      	subs	r2, r4, r3
 800dbbc:	f107 0114 	add.w	r1, r7, #20
 800dbc0:	f107 0320 	add.w	r3, r7, #32
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7ff fb75 	bl	800d2b4 <_ZN12SimpleStringC1EPKcj>
 800dbca:	f107 0318 	add.w	r3, r7, #24
 800dbce:	f107 0120 	add.w	r1, r7, #32
 800dbd2:	68fa      	ldr	r2, [r7, #12]
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7ff ff6c 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800dbda:	f107 0318 	add.w	r3, r7, #24
 800dbde:	4619      	mov	r1, r3
 800dbe0:	68f8      	ldr	r0, [r7, #12]
 800dbe2:	f7ff fbb8 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800dbe6:	f107 0318 	add.w	r3, r7, #24
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7ff feff 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800dbf0:	f107 0320 	add.w	r3, r7, #32
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7ff fefa 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 800dbfa:	372c      	adds	r7, #44	; 0x2c
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd90      	pop	{r4, r7, pc}

0800dc00 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b086      	sub	sp, #24
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	60f8      	str	r0, [r7, #12]
 800dc08:	60b9      	str	r1, [r7, #8]
 800dc0a:	607a      	str	r2, [r7, #4]
 800dc0c:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800dc0e:	68b8      	ldr	r0, [r7, #8]
 800dc10:	f7ff fecc 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800dc14:	4603      	mov	r3, r0
 800dc16:	3b01      	subs	r3, #1
 800dc18:	687a      	ldr	r2, [r7, #4]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	bf8c      	ite	hi
 800dc1e:	2301      	movhi	r3, #1
 800dc20:	2300      	movls	r3, #0
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d004      	beq.n	800dc32 <_ZNK12SimpleString9subStringEjj+0x32>
 800dc28:	4919      	ldr	r1, [pc, #100]	; (800dc90 <_ZNK12SimpleString9subStringEjj+0x90>)
 800dc2a:	68f8      	ldr	r0, [r7, #12]
 800dc2c:	f7ff fb27 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800dc30:	e029      	b.n	800dc86 <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800dc32:	68b8      	ldr	r0, [r7, #8]
 800dc34:	f7ff fb17 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800dc38:	4602      	mov	r2, r0
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	441a      	add	r2, r3
 800dc3e:	f107 0310 	add.w	r3, r7, #16
 800dc42:	4611      	mov	r1, r2
 800dc44:	4618      	mov	r0, r3
 800dc46:	f7ff fb1a 	bl	800d27e <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800dc4a:	f107 0310 	add.w	r3, r7, #16
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7ff feac 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800dc54:	4602      	mov	r2, r0
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	bf34      	ite	cc
 800dc5c:	2301      	movcc	r3, #1
 800dc5e:	2300      	movcs	r3, #0
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d004      	beq.n	800dc70 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800dc66:	693a      	ldr	r2, [r7, #16]
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	4413      	add	r3, r2
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	701a      	strb	r2, [r3, #0]

    return newString;
 800dc70:	f107 0310 	add.w	r3, r7, #16
 800dc74:	4619      	mov	r1, r3
 800dc76:	68f8      	ldr	r0, [r7, #12]
 800dc78:	f7ff fb55 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800dc7c:	f107 0310 	add.w	r3, r7, #16
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7ff feb4 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 800dc86:	68f8      	ldr	r0, [r7, #12]
 800dc88:	3718      	adds	r7, #24
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	08024be4 	.word	0x08024be4

0800dc94 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800dca0:	68f8      	ldr	r0, [r7, #12]
 800dca2:	f04f 33ff 	mov.w	r3, #4294967295
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	68b9      	ldr	r1, [r7, #8]
 800dcaa:	f7ff ffa9 	bl	800dc00 <_ZNK12SimpleString9subStringEjj>
}
 800dcae:	68f8      	ldr	r0, [r7, #12]
 800dcb0:	3710      	adds	r7, #16
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}

0800dcb6 <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800dcb6:	b580      	push	{r7, lr}
 800dcb8:	b082      	sub	sp, #8
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
 800dcbe:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f7ff fad0 	bl	800d266 <_ZNK12SimpleString9getBufferEv>
 800dcc6:	4602      	mov	r2, r0
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	4413      	add	r3, r2
 800dccc:	781b      	ldrb	r3, [r3, #0]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3708      	adds	r7, #8
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b082      	sub	sp, #8
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
 800dcde:	460b      	mov	r3, r1
 800dce0:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800dce2:	78fb      	ldrb	r3, [r7, #3]
 800dce4:	461a      	mov	r2, r3
 800dce6:	2100      	movs	r1, #0
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f000 f805 	bl	800dcf8 <_ZNK12SimpleString8findFromEjc>
 800dcee:	4603      	mov	r3, r0
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3708      	adds	r7, #8
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b086      	sub	sp, #24
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	4613      	mov	r3, r2
 800dd04:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800dd06:	68f8      	ldr	r0, [r7, #12]
 800dd08:	f7ff fe50 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800dd0c:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	617b      	str	r3, [r7, #20]
 800dd12:	697a      	ldr	r2, [r7, #20]
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d213      	bcs.n	800dd42 <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800dd1a:	6979      	ldr	r1, [r7, #20]
 800dd1c:	68f8      	ldr	r0, [r7, #12]
 800dd1e:	f7ff ffca 	bl	800dcb6 <_ZNK12SimpleString2atEj>
 800dd22:	4603      	mov	r3, r0
 800dd24:	461a      	mov	r2, r3
 800dd26:	79fb      	ldrb	r3, [r7, #7]
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	bf0c      	ite	eq
 800dd2c:	2301      	moveq	r3, #1
 800dd2e:	2300      	movne	r3, #0
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d001      	beq.n	800dd3a <_ZNK12SimpleString8findFromEjc+0x42>
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	e005      	b.n	800dd46 <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	617b      	str	r3, [r7, #20]
 800dd40:	e7e7      	b.n	800dd12 <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800dd42:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3718      	adds	r7, #24
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
	...

0800dd50 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b086      	sub	sp, #24
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	60b9      	str	r1, [r7, #8]
 800dd5a:	4611      	mov	r1, r2
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	460b      	mov	r3, r1
 800dd60:	71fb      	strb	r3, [r7, #7]
 800dd62:	4613      	mov	r3, r2
 800dd64:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800dd66:	79fb      	ldrb	r3, [r7, #7]
 800dd68:	4619      	mov	r1, r3
 800dd6a:	68b8      	ldr	r0, [r7, #8]
 800dd6c:	f7ff ffb3 	bl	800dcd6 <_ZNK12SimpleString4findEc>
 800dd70:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd78:	d104      	bne.n	800dd84 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800dd7a:	4911      	ldr	r1, [pc, #68]	; (800ddc0 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800dd7c:	68f8      	ldr	r0, [r7, #12]
 800dd7e:	f7ff fa7e 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800dd82:	e019      	b.n	800ddb8 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800dd84:	79bb      	ldrb	r3, [r7, #6]
 800dd86:	461a      	mov	r2, r3
 800dd88:	6979      	ldr	r1, [r7, #20]
 800dd8a:	68b8      	ldr	r0, [r7, #8]
 800dd8c:	f7ff ffb4 	bl	800dcf8 <_ZNK12SimpleString8findFromEjc>
 800dd90:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd98:	d106      	bne.n	800dda8 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	697a      	ldr	r2, [r7, #20]
 800dd9e:	68b9      	ldr	r1, [r7, #8]
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7ff ff77 	bl	800dc94 <_ZNK12SimpleString9subStringEj>
 800dda6:	e007      	b.n	800ddb8 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800dda8:	693a      	ldr	r2, [r7, #16]
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	1ad3      	subs	r3, r2, r3
 800ddae:	68f8      	ldr	r0, [r7, #12]
 800ddb0:	697a      	ldr	r2, [r7, #20]
 800ddb2:	68b9      	ldr	r1, [r7, #8]
 800ddb4:	f7ff ff24 	bl	800dc00 <_ZNK12SimpleString9subStringEjj>
}
 800ddb8:	68f8      	ldr	r0, [r7, #12]
 800ddba:	3718      	adds	r7, #24
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	08024be4 	.word	0x08024be4

0800ddc4 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800ddce:	f240 2275 	movw	r2, #629	; 0x275
 800ddd2:	490a      	ldr	r1, [pc, #40]	; (800ddfc <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800ddd4:	6838      	ldr	r0, [r7, #0]
 800ddd6:	f7fe ffd7 	bl	800cd88 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800ddda:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800dddc:	683a      	ldr	r2, [r7, #0]
 800ddde:	6879      	ldr	r1, [r7, #4]
 800dde0:	68f8      	ldr	r0, [r7, #12]
 800dde2:	f7ff f8f6 	bl	800cfd2 <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	3b01      	subs	r3, #1
 800ddea:	68fa      	ldr	r2, [r7, #12]
 800ddec:	4413      	add	r3, r2
 800ddee:	2200      	movs	r2, #0
 800ddf0:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3710      	adds	r7, #16
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	08024b24 	.word	0x08024b24

0800de00 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800de00:	b480      	push	{r7}
 800de02:	b083      	sub	sp, #12
 800de04:	af00      	add	r7, sp, #0
 800de06:	4603      	mov	r3, r0
 800de08:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800de0a:	79fb      	ldrb	r3, [r7, #7]
 800de0c:	2b2f      	cmp	r3, #47	; 0x2f
 800de0e:	d904      	bls.n	800de1a <_ZN12SimpleString7isDigitEc+0x1a>
 800de10:	79fb      	ldrb	r3, [r7, #7]
 800de12:	2b39      	cmp	r3, #57	; 0x39
 800de14:	d801      	bhi.n	800de1a <_ZN12SimpleString7isDigitEc+0x1a>
 800de16:	2301      	movs	r3, #1
 800de18:	e000      	b.n	800de1c <_ZN12SimpleString7isDigitEc+0x1c>
 800de1a:	2300      	movs	r3, #0
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	370c      	adds	r7, #12
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr

0800de28 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800de28:	b480      	push	{r7}
 800de2a:	b083      	sub	sp, #12
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	4603      	mov	r3, r0
 800de30:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800de32:	79fb      	ldrb	r3, [r7, #7]
 800de34:	2b20      	cmp	r3, #32
 800de36:	d005      	beq.n	800de44 <_ZN12SimpleString7isSpaceEc+0x1c>
 800de38:	79fb      	ldrb	r3, [r7, #7]
 800de3a:	2b08      	cmp	r3, #8
 800de3c:	d904      	bls.n	800de48 <_ZN12SimpleString7isSpaceEc+0x20>
 800de3e:	79fb      	ldrb	r3, [r7, #7]
 800de40:	2b0d      	cmp	r3, #13
 800de42:	d801      	bhi.n	800de48 <_ZN12SimpleString7isSpaceEc+0x20>
 800de44:	2301      	movs	r3, #1
 800de46:	e000      	b.n	800de4a <_ZN12SimpleString7isSpaceEc+0x22>
 800de48:	2300      	movs	r3, #0
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	370c      	adds	r7, #12
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr

0800de56 <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800de56:	b480      	push	{r7}
 800de58:	b083      	sub	sp, #12
 800de5a:	af00      	add	r7, sp, #0
 800de5c:	4603      	mov	r3, r0
 800de5e:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800de60:	79fb      	ldrb	r3, [r7, #7]
 800de62:	2b40      	cmp	r3, #64	; 0x40
 800de64:	d904      	bls.n	800de70 <_ZN12SimpleString7isUpperEc+0x1a>
 800de66:	79fb      	ldrb	r3, [r7, #7]
 800de68:	2b5a      	cmp	r3, #90	; 0x5a
 800de6a:	d801      	bhi.n	800de70 <_ZN12SimpleString7isUpperEc+0x1a>
 800de6c:	2301      	movs	r3, #1
 800de6e:	e000      	b.n	800de72 <_ZN12SimpleString7isUpperEc+0x1c>
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	370c      	adds	r7, #12
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr

0800de7e <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800de7e:	b480      	push	{r7}
 800de80:	b083      	sub	sp, #12
 800de82:	af00      	add	r7, sp, #0
 800de84:	4603      	mov	r3, r0
 800de86:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800de88:	79fb      	ldrb	r3, [r7, #7]
 800de8a:	2b1f      	cmp	r3, #31
 800de8c:	d902      	bls.n	800de94 <_ZN12SimpleString9isControlEc+0x16>
 800de8e:	79fb      	ldrb	r3, [r7, #7]
 800de90:	2b7f      	cmp	r3, #127	; 0x7f
 800de92:	d101      	bne.n	800de98 <_ZN12SimpleString9isControlEc+0x1a>
 800de94:	2301      	movs	r3, #1
 800de96:	e000      	b.n	800de9a <_ZN12SimpleString9isControlEc+0x1c>
 800de98:	2300      	movs	r3, #0
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	370c      	adds	r7, #12
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr

0800dea6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800dea6:	b480      	push	{r7}
 800dea8:	b083      	sub	sp, #12
 800deaa:	af00      	add	r7, sp, #0
 800deac:	4603      	mov	r3, r0
 800deae:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800deb0:	79fb      	ldrb	r3, [r7, #7]
 800deb2:	2b06      	cmp	r3, #6
 800deb4:	d904      	bls.n	800dec0 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800deb6:	79fb      	ldrb	r3, [r7, #7]
 800deb8:	2b0d      	cmp	r3, #13
 800deba:	d801      	bhi.n	800dec0 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800debc:	2301      	movs	r3, #1
 800debe:	e000      	b.n	800dec2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800dec0:	2300      	movs	r3, #0
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	370c      	adds	r7, #12
 800dec6:	46bd      	mov	sp, r7
 800dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800decc:	4770      	bx	lr
	...

0800ded0 <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b082      	sub	sp, #8
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	460b      	mov	r3, r1
 800deda:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800dedc:	78fb      	ldrb	r3, [r7, #3]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d001      	beq.n	800dee6 <_Z10StringFromb+0x16>
 800dee2:	4a06      	ldr	r2, [pc, #24]	; (800defc <_Z10StringFromb+0x2c>)
 800dee4:	e000      	b.n	800dee8 <_Z10StringFromb+0x18>
 800dee6:	4a06      	ldr	r2, [pc, #24]	; (800df00 <_Z10StringFromb+0x30>)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	4906      	ldr	r1, [pc, #24]	; (800df04 <_Z10StringFromb+0x34>)
 800deec:	4618      	mov	r0, r3
 800deee:	f000 fa85 	bl	800e3fc <_Z16StringFromFormatPKcz>
}
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	3708      	adds	r7, #8
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	08024bf0 	.word	0x08024bf0
 800df00:	08024bf8 	.word	0x08024bf8
 800df04:	08024c00 	.word	0x08024c00

0800df08 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800df12:	6839      	ldr	r1, [r7, #0]
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f7ff f9b2 	bl	800d27e <_ZN12SimpleStringC1EPKc>
}
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	3708      	adds	r7, #8
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
	...

0800df24 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800df24:	b590      	push	{r4, r7, lr}
 800df26:	b085      	sub	sp, #20
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800df2e:	2400      	movs	r4, #0
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d00e      	beq.n	800df54 <_Z25PrintableStringFromOrNullPKc+0x30>
 800df36:	f107 0308 	add.w	r3, r7, #8
 800df3a:	6839      	ldr	r1, [r7, #0]
 800df3c:	4618      	mov	r0, r3
 800df3e:	f7ff ffe3 	bl	800df08 <_Z10StringFromPKc>
 800df42:	2401      	movs	r4, #1
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f107 0208 	add.w	r2, r7, #8
 800df4a:	4611      	mov	r1, r2
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7ff fc3f 	bl	800d7d0 <_ZNK12SimpleString9printableEv>
 800df52:	e004      	b.n	800df5e <_Z25PrintableStringFromOrNullPKc+0x3a>
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	4908      	ldr	r1, [pc, #32]	; (800df78 <_Z25PrintableStringFromOrNullPKc+0x54>)
 800df58:	4618      	mov	r0, r3
 800df5a:	f7ff ffd5 	bl	800df08 <_Z10StringFromPKc>
 800df5e:	2c00      	cmp	r4, #0
 800df60:	d004      	beq.n	800df6c <_Z25PrintableStringFromOrNullPKc+0x48>
 800df62:	f107 0308 	add.w	r3, r7, #8
 800df66:	4618      	mov	r0, r3
 800df68:	f7ff fd41 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800df6c:	bf00      	nop
}
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	3714      	adds	r7, #20
 800df72:	46bd      	mov	sp, r7
 800df74:	bd90      	pop	{r4, r7, pc}
 800df76:	bf00      	nop
 800df78:	08024c04 	.word	0x08024c04

0800df7c <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	683a      	ldr	r2, [r7, #0]
 800df8a:	4904      	ldr	r1, [pc, #16]	; (800df9c <_Z10StringFromi+0x20>)
 800df8c:	4618      	mov	r0, r3
 800df8e:	f000 fa35 	bl	800e3fc <_Z16StringFromFormatPKcz>
}
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	3708      	adds	r7, #8
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	08024c0c 	.word	0x08024c0c

0800dfa0 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	683a      	ldr	r2, [r7, #0]
 800dfae:	4904      	ldr	r1, [pc, #16]	; (800dfc0 <_Z10StringFroml+0x20>)
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f000 fa23 	bl	800e3fc <_Z16StringFromFormatPKcz>
}
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	3708      	adds	r7, #8
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}
 800dfbe:	bf00      	nop
 800dfc0:	08024c10 	.word	0x08024c10

0800dfc4 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b086      	sub	sp, #24
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800dfce:	f107 0308 	add.w	r3, r7, #8
 800dfd2:	4910      	ldr	r1, [pc, #64]	; (800e014 <_Z10StringFromPKv+0x50>)
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7ff f952 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800dfda:	f107 0310 	add.w	r3, r7, #16
 800dfde:	6839      	ldr	r1, [r7, #0]
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f000 f9a1 	bl	800e328 <_Z13HexStringFromPKv>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f107 0210 	add.w	r2, r7, #16
 800dfec:	f107 0108 	add.w	r1, r7, #8
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7ff fd5e 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800dff6:	f107 0310 	add.w	r3, r7, #16
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7ff fcf7 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800e000:	f107 0308 	add.w	r3, r7, #8
 800e004:	4618      	mov	r0, r3
 800e006:	f7ff fcf2 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800e00a:	bf00      	nop
}
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	3718      	adds	r7, #24
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	08024c14 	.word	0x08024c14

0800e018 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b086      	sub	sp, #24
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800e022:	f107 0308 	add.w	r3, r7, #8
 800e026:	4910      	ldr	r1, [pc, #64]	; (800e068 <_Z10StringFromPFvvE+0x50>)
 800e028:	4618      	mov	r0, r3
 800e02a:	f7ff f928 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800e02e:	f107 0310 	add.w	r3, r7, #16
 800e032:	6839      	ldr	r1, [r7, #0]
 800e034:	4618      	mov	r0, r3
 800e036:	f000 f98b 	bl	800e350 <_Z13HexStringFromPFvvE>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f107 0210 	add.w	r2, r7, #16
 800e040:	f107 0108 	add.w	r1, r7, #8
 800e044:	4618      	mov	r0, r3
 800e046:	f7ff fd34 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800e04a:	f107 0310 	add.w	r3, r7, #16
 800e04e:	4618      	mov	r0, r3
 800e050:	f7ff fccd 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800e054:	f107 0308 	add.w	r3, r7, #8
 800e058:	4618      	mov	r0, r3
 800e05a:	f7ff fcc8 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800e05e:	bf00      	nop
}
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	3718      	adds	r7, #24
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}
 800e068:	08024c14 	.word	0x08024c14

0800e06c <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	683a      	ldr	r2, [r7, #0]
 800e07a:	4904      	ldr	r1, [pc, #16]	; (800e08c <_Z13HexStringFroml+0x20>)
 800e07c:	4618      	mov	r0, r3
 800e07e:	f000 f9bd 	bl	800e3fc <_Z16StringFromFormatPKcz>
}
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	3708      	adds	r7, #8
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	08024c18 	.word	0x08024c18

0800e090 <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	683a      	ldr	r2, [r7, #0]
 800e09e:	4904      	ldr	r1, [pc, #16]	; (800e0b0 <_Z13HexStringFromi+0x20>)
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f000 f9ab 	bl	800e3fc <_Z16StringFromFormatPKcz>
}
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	3708      	adds	r7, #8
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	08024c1c 	.word	0x08024c1c

0800e0b4 <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b086      	sub	sp, #24
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	460b      	mov	r3, r1
 800e0be:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800e0c0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	4912      	ldr	r1, [pc, #72]	; (800e110 <_Z13HexStringFroma+0x5c>)
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f000 f997 	bl	800e3fc <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800e0ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	da16      	bge.n	800e104 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f7ff fc68 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800e0dc:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	1e9a      	subs	r2, r3, #2
 800e0e2:	f107 030c 	add.w	r3, r7, #12
 800e0e6:	6879      	ldr	r1, [r7, #4]
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7ff fdd3 	bl	800dc94 <_ZNK12SimpleString9subStringEj>
 800e0ee:	f107 030c 	add.w	r3, r7, #12
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f7ff f92e 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800e0fa:	f107 030c 	add.w	r3, r7, #12
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7ff fc75 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    }
    return result;
 800e104:	bf00      	nop
}
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	3718      	adds	r7, #24
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}
 800e10e:	bf00      	nop
 800e110:	08024c1c 	.word	0x08024c1c

0800e114 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b082      	sub	sp, #8
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	683a      	ldr	r2, [r7, #0]
 800e122:	4904      	ldr	r1, [pc, #16]	; (800e134 <_Z13HexStringFromm+0x20>)
 800e124:	4618      	mov	r0, r3
 800e126:	f000 f969 	bl	800e3fc <_Z16StringFromFormatPKcz>
}
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	3708      	adds	r7, #8
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	08024c18 	.word	0x08024c18

0800e138 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	683a      	ldr	r2, [r7, #0]
 800e146:	4904      	ldr	r1, [pc, #16]	; (800e158 <_Z13HexStringFromj+0x20>)
 800e148:	4618      	mov	r0, r3
 800e14a:	f000 f957 	bl	800e3fc <_Z16StringFromFormatPKcz>
}
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	08024c1c 	.word	0x08024c1c

0800e15c <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800e166:	f107 0308 	add.w	r3, r7, #8
 800e16a:	6839      	ldr	r1, [r7, #0]
 800e16c:	4618      	mov	r0, r3
 800e16e:	f7ff ff8f 	bl	800e090 <_Z13HexStringFromi>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f107 0208 	add.w	r2, r7, #8
 800e178:	4611      	mov	r1, r2
 800e17a:	4618      	mov	r0, r3
 800e17c:	f000 f87e 	bl	800e27c <_Z26BracketsFormattedHexString12SimpleString>
 800e180:	f107 0308 	add.w	r3, r7, #8
 800e184:	4618      	mov	r0, r3
 800e186:	f7ff fc32 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800e18a:	bf00      	nop
}
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	3710      	adds	r7, #16
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}

0800e194 <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b084      	sub	sp, #16
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800e19e:	f107 0308 	add.w	r3, r7, #8
 800e1a2:	6839      	ldr	r1, [r7, #0]
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f7ff ffc7 	bl	800e138 <_Z13HexStringFromj>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f107 0208 	add.w	r2, r7, #8
 800e1b0:	4611      	mov	r1, r2
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f000 f862 	bl	800e27c <_Z26BracketsFormattedHexString12SimpleString>
 800e1b8:	f107 0308 	add.w	r3, r7, #8
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7ff fc16 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800e1c2:	bf00      	nop
}
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	3710      	adds	r7, #16
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b084      	sub	sp, #16
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800e1d6:	f107 0308 	add.w	r3, r7, #8
 800e1da:	6839      	ldr	r1, [r7, #0]
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7ff ff45 	bl	800e06c <_Z13HexStringFroml>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f107 0208 	add.w	r2, r7, #8
 800e1e8:	4611      	mov	r1, r2
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f000 f846 	bl	800e27c <_Z26BracketsFormattedHexString12SimpleString>
 800e1f0:	f107 0308 	add.w	r3, r7, #8
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f7ff fbfa 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800e1fa:	bf00      	nop
}
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	3710      	adds	r7, #16
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b084      	sub	sp, #16
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800e20e:	f107 0308 	add.w	r3, r7, #8
 800e212:	6839      	ldr	r1, [r7, #0]
 800e214:	4618      	mov	r0, r3
 800e216:	f7ff ff7d 	bl	800e114 <_Z13HexStringFromm>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f107 0208 	add.w	r2, r7, #8
 800e220:	4611      	mov	r1, r2
 800e222:	4618      	mov	r0, r3
 800e224:	f000 f82a 	bl	800e27c <_Z26BracketsFormattedHexString12SimpleString>
 800e228:	f107 0308 	add.w	r3, r7, #8
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7ff fbde 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800e232:	bf00      	nop
}
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	3710      	adds	r7, #16
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	460b      	mov	r3, r1
 800e246:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800e248:	f107 0308 	add.w	r3, r7, #8
 800e24c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e250:	4611      	mov	r1, r2
 800e252:	4618      	mov	r0, r3
 800e254:	f7ff ff2e 	bl	800e0b4 <_Z13HexStringFroma>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f107 0208 	add.w	r2, r7, #8
 800e25e:	4611      	mov	r1, r2
 800e260:	4618      	mov	r0, r3
 800e262:	f000 f80b 	bl	800e27c <_Z26BracketsFormattedHexString12SimpleString>
 800e266:	f107 0308 	add.w	r3, r7, #8
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7ff fbbf 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800e270:	bf00      	nop
}
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	3710      	adds	r7, #16
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
	...

0800e27c <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b088      	sub	sp, #32
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800e286:	f107 0310 	add.w	r3, r7, #16
 800e28a:	4917      	ldr	r1, [pc, #92]	; (800e2e8 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7fe fff6 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800e292:	f107 0308 	add.w	r3, r7, #8
 800e296:	f107 0110 	add.w	r1, r7, #16
 800e29a:	683a      	ldr	r2, [r7, #0]
 800e29c:	4618      	mov	r0, r3
 800e29e:	f7ff fc08 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800e2a2:	f107 0318 	add.w	r3, r7, #24
 800e2a6:	4911      	ldr	r1, [pc, #68]	; (800e2ec <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7fe ffe8 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f107 0218 	add.w	r2, r7, #24
 800e2b4:	f107 0108 	add.w	r1, r7, #8
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7ff fbfa 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800e2be:	f107 0318 	add.w	r3, r7, #24
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7ff fb93 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800e2c8:	f107 0308 	add.w	r3, r7, #8
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7ff fb8e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800e2d2:	f107 0310 	add.w	r3, r7, #16
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7ff fb89 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800e2dc:	bf00      	nop
}
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	3720      	adds	r7, #32
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	08024c20 	.word	0x08024c20
 800e2ec:	08024c24 	.word	0x08024c24

0800e2f0 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b085      	sub	sp, #20
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800e2f8:	1d3b      	adds	r3, r7, #4
 800e2fa:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
}
 800e300:	4618      	mov	r0, r3
 800e302:	3714      	adds	r7, #20
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr

0800e30c <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800e30c:	b480      	push	{r7}
 800e30e:	b085      	sub	sp, #20
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800e314:	1d3b      	adds	r3, r7, #4
 800e316:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3714      	adds	r7, #20
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800e332:	6838      	ldr	r0, [r7, #0]
 800e334:	f7ff ffdc 	bl	800e2f0 <_ZL25convertPointerToLongValuePKv>
 800e338:	4602      	mov	r2, r0
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	4903      	ldr	r1, [pc, #12]	; (800e34c <_Z13HexStringFromPKv+0x24>)
 800e33e:	4618      	mov	r0, r3
 800e340:	f000 f85c 	bl	800e3fc <_Z16StringFromFormatPKcz>
}
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	3708      	adds	r7, #8
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	08024c18 	.word	0x08024c18

0800e350 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b082      	sub	sp, #8
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800e35a:	6838      	ldr	r0, [r7, #0]
 800e35c:	f7ff ffd6 	bl	800e30c <_ZL33convertFunctionPointerToLongValuePFvvE>
 800e360:	4602      	mov	r2, r0
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	4903      	ldr	r1, [pc, #12]	; (800e374 <_Z13HexStringFromPFvvE+0x24>)
 800e366:	4618      	mov	r0, r3
 800e368:	f000 f848 	bl	800e3fc <_Z16StringFromFormatPKcz>
}
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	3708      	adds	r7, #8
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	08024c18 	.word	0x08024c18

0800e378 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b086      	sub	sp, #24
 800e37c:	af02      	add	r7, sp, #8
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	ed87 0b00 	vstr	d0, [r7]
 800e384:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800e386:	4b18      	ldr	r3, [pc, #96]	; (800e3e8 <_Z10StringFromdi+0x70>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	ed97 0b00 	vldr	d0, [r7]
 800e38e:	4798      	blx	r3
 800e390:	4603      	mov	r3, r0
 800e392:	2b00      	cmp	r3, #0
 800e394:	bf14      	ite	ne
 800e396:	2301      	movne	r3, #1
 800e398:	2300      	moveq	r3, #0
 800e39a:	b2db      	uxtb	r3, r3
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d004      	beq.n	800e3aa <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800e3a0:	4912      	ldr	r1, [pc, #72]	; (800e3ec <_Z10StringFromdi+0x74>)
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	f7fe ff6b 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800e3a8:	e01a      	b.n	800e3e0 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800e3aa:	4b11      	ldr	r3, [pc, #68]	; (800e3f0 <_Z10StringFromdi+0x78>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	ed97 0b00 	vldr	d0, [r7]
 800e3b2:	4798      	blx	r3
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	bf14      	ite	ne
 800e3ba:	2301      	movne	r3, #1
 800e3bc:	2300      	moveq	r3, #0
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d004      	beq.n	800e3ce <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800e3c4:	490b      	ldr	r1, [pc, #44]	; (800e3f4 <_Z10StringFromdi+0x7c>)
 800e3c6:	68f8      	ldr	r0, [r7, #12]
 800e3c8:	f7fe ff59 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800e3cc:	e008      	b.n	800e3e0 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800e3ce:	68f8      	ldr	r0, [r7, #12]
 800e3d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3d4:	e9cd 2300 	strd	r2, r3, [sp]
 800e3d8:	68ba      	ldr	r2, [r7, #8]
 800e3da:	4907      	ldr	r1, [pc, #28]	; (800e3f8 <_Z10StringFromdi+0x80>)
 800e3dc:	f000 f80e 	bl	800e3fc <_Z16StringFromFormatPKcz>
}
 800e3e0:	68f8      	ldr	r0, [r7, #12]
 800e3e2:	3710      	adds	r7, #16
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	200000e8 	.word	0x200000e8
 800e3ec:	08024c58 	.word	0x08024c58
 800e3f0:	200000ec 	.word	0x200000ec
 800e3f4:	08024c6c 	.word	0x08024c6c
 800e3f8:	08024c7c 	.word	0x08024c7c

0800e3fc <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800e3fc:	b40e      	push	{r1, r2, r3}
 800e3fe:	b580      	push	{r7, lr}
 800e400:	b087      	sub	sp, #28
 800e402:	af00      	add	r7, sp, #0
 800e404:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800e406:	4910      	ldr	r1, [pc, #64]	; (800e448 <_Z16StringFromFormatPKcz+0x4c>)
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f7fe ff38 	bl	800d27e <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800e40e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e412:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800e414:	f107 0310 	add.w	r3, r7, #16
 800e418:	68fa      	ldr	r2, [r7, #12]
 800e41a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e41c:	4618      	mov	r0, r3
 800e41e:	f000 f839 	bl	800e494 <_Z17VStringFromFormatPKcSt9__va_list>
 800e422:	f107 0310 	add.w	r3, r7, #16
 800e426:	4619      	mov	r1, r3
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f7fe ff94 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800e42e:	f107 0310 	add.w	r3, r7, #16
 800e432:	4618      	mov	r0, r3
 800e434:	f7ff fadb 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800e438:	bf00      	nop
}
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	371c      	adds	r7, #28
 800e43e:	46bd      	mov	sp, r7
 800e440:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e444:	b003      	add	sp, #12
 800e446:	4770      	bx	lr
 800e448:	08024be4 	.word	0x08024be4

0800e44c <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	683a      	ldr	r2, [r7, #0]
 800e45a:	4904      	ldr	r1, [pc, #16]	; (800e46c <_Z10StringFromj+0x20>)
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7ff ffcd 	bl	800e3fc <_Z16StringFromFormatPKcz>
}
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	3708      	adds	r7, #8
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	08024c88 	.word	0x08024c88

0800e470 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b082      	sub	sp, #8
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	683a      	ldr	r2, [r7, #0]
 800e47e:	4904      	ldr	r1, [pc, #16]	; (800e490 <_Z10StringFromm+0x20>)
 800e480:	4618      	mov	r0, r3
 800e482:	f7ff ffbb 	bl	800e3fc <_Z16StringFromFormatPKcz>
}
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	3708      	adds	r7, #8
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	08024c8c 	.word	0x08024c8c

0800e494 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800e494:	b590      	push	{r4, r7, lr}
 800e496:	b0a7      	sub	sp, #156	; 0x9c
 800e498:	af00      	add	r7, sp, #0
 800e49a:	60f8      	str	r0, [r7, #12]
 800e49c:	60b9      	str	r1, [r7, #8]
 800e49e:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800e4a4:	492e      	ldr	r1, [pc, #184]	; (800e560 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	f7fe fee9 	bl	800d27e <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800e4ac:	4b2d      	ldr	r3, [pc, #180]	; (800e564 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800e4ae:	681c      	ldr	r4, [r3, #0]
 800e4b0:	f107 0014 	add.w	r0, r7, #20
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	68ba      	ldr	r2, [r7, #8]
 800e4b8:	2164      	movs	r1, #100	; 0x64
 800e4ba:	47a0      	blx	r4
 800e4bc:	4603      	mov	r3, r0
 800e4be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800e4c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e4c6:	2b63      	cmp	r3, #99	; 0x63
 800e4c8:	d813      	bhi.n	800e4f2 <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800e4ca:	f107 0214 	add.w	r2, r7, #20
 800e4ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e4d2:	4611      	mov	r1, r2
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7fe fed2 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800e4da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e4de:	4619      	mov	r1, r3
 800e4e0:	68f8      	ldr	r0, [r7, #12]
 800e4e2:	f7fe ff38 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800e4e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7ff fa7f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800e4f0:	e031      	b.n	800e556 <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800e4f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800e4fc:	f240 32c3 	movw	r2, #963	; 0x3c3
 800e500:	4919      	ldr	r1, [pc, #100]	; (800e568 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800e502:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800e506:	f7fe fc3f 	bl	800cd88 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800e50a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800e50e:	4b15      	ldr	r3, [pc, #84]	; (800e564 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800e510:	681c      	ldr	r4, [r3, #0]
 800e512:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e514:	68ba      	ldr	r2, [r7, #8]
 800e516:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e51a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800e51e:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800e520:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800e524:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e528:	4618      	mov	r0, r3
 800e52a:	f7fe fea8 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800e52e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800e532:	4619      	mov	r1, r3
 800e534:	68f8      	ldr	r0, [r7, #12]
 800e536:	f7fe ff0e 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800e53a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800e53e:	4618      	mov	r0, r3
 800e540:	f7ff fa55 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800e544:	f240 33c7 	movw	r3, #967	; 0x3c7
 800e548:	4a07      	ldr	r2, [pc, #28]	; (800e568 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800e54a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e54e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800e552:	f7fe fc2d 	bl	800cdb0 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800e556:	bf00      	nop
}
 800e558:	68f8      	ldr	r0, [r7, #12]
 800e55a:	379c      	adds	r7, #156	; 0x9c
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd90      	pop	{r4, r7, pc}
 800e560:	08024be4 	.word	0x08024be4
 800e564:	200000b0 	.word	0x200000b0
 800e568:	08024b24 	.word	0x08024b24

0800e56c <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b08a      	sub	sp, #40	; 0x28
 800e570:	af00      	add	r7, sp, #0
 800e572:	60f8      	str	r0, [r7, #12]
 800e574:	60b9      	str	r1, [r7, #8]
 800e576:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800e578:	491f      	ldr	r1, [pc, #124]	; (800e5f8 <_Z16StringFromBinaryPKhj+0x8c>)
 800e57a:	68f8      	ldr	r0, [r7, #12]
 800e57c:	f7fe fe7f 	bl	800d27e <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800e580:	2300      	movs	r3, #0
 800e582:	627b      	str	r3, [r7, #36]	; 0x24
 800e584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d219      	bcs.n	800e5c0 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800e58c:	68ba      	ldr	r2, [r7, #8]
 800e58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e590:	4413      	add	r3, r2
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	461a      	mov	r2, r3
 800e596:	f107 0314 	add.w	r3, r7, #20
 800e59a:	4918      	ldr	r1, [pc, #96]	; (800e5fc <_Z16StringFromBinaryPKhj+0x90>)
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7ff ff2d 	bl	800e3fc <_Z16StringFromFormatPKcz>
 800e5a2:	f107 0314 	add.w	r3, r7, #20
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	68f8      	ldr	r0, [r7, #12]
 800e5aa:	f7ff fa9d 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 800e5ae:	f107 0314 	add.w	r3, r7, #20
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7ff fa1b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800e5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	627b      	str	r3, [r7, #36]	; 0x24
 800e5be:	e7e1      	b.n	800e584 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800e5c0:	68f8      	ldr	r0, [r7, #12]
 800e5c2:	f7ff f9f3 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	3b01      	subs	r3, #1
 800e5ca:	f107 001c 	add.w	r0, r7, #28
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	68f9      	ldr	r1, [r7, #12]
 800e5d2:	f7ff fb15 	bl	800dc00 <_ZNK12SimpleString9subStringEjj>
 800e5d6:	f107 031c 	add.w	r3, r7, #28
 800e5da:	4619      	mov	r1, r3
 800e5dc:	68f8      	ldr	r0, [r7, #12]
 800e5de:	f7fe feba 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800e5e2:	f107 031c 	add.w	r3, r7, #28
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7ff fa01 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    return result;
 800e5ec:	bf00      	nop
}
 800e5ee:	68f8      	ldr	r0, [r7, #12]
 800e5f0:	3728      	adds	r7, #40	; 0x28
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
 800e5f6:	bf00      	nop
 800e5f8:	08024be4 	.word	0x08024be4
 800e5fc:	08024c90 	.word	0x08024c90

0800e600 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af00      	add	r7, sp, #0
 800e606:	60f8      	str	r0, [r7, #12]
 800e608:	60b9      	str	r1, [r7, #8]
 800e60a:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d006      	beq.n	800e620 <_Z22StringFromBinaryOrNullPKhj+0x20>
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	687a      	ldr	r2, [r7, #4]
 800e616:	68b9      	ldr	r1, [r7, #8]
 800e618:	4618      	mov	r0, r3
 800e61a:	f7ff ffa7 	bl	800e56c <_Z16StringFromBinaryPKhj>
 800e61e:	e004      	b.n	800e62a <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	4904      	ldr	r1, [pc, #16]	; (800e634 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800e624:	4618      	mov	r0, r3
 800e626:	f7ff fc6f 	bl	800df08 <_Z10StringFromPKc>
}
 800e62a:	68f8      	ldr	r0, [r7, #12]
 800e62c:	3710      	adds	r7, #16
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop
 800e634:	08024c04 	.word	0x08024c04

0800e638 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b088      	sub	sp, #32
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	687a      	ldr	r2, [r7, #4]
 800e648:	4913      	ldr	r1, [pc, #76]	; (800e698 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7ff fed6 	bl	800e3fc <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2b80      	cmp	r3, #128	; 0x80
 800e654:	bf28      	it	cs
 800e656:	2380      	movcs	r3, #128	; 0x80
 800e658:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800e65a:	f107 0314 	add.w	r3, r7, #20
 800e65e:	69fa      	ldr	r2, [r7, #28]
 800e660:	68b9      	ldr	r1, [r7, #8]
 800e662:	4618      	mov	r0, r3
 800e664:	f7ff ffcc 	bl	800e600 <_Z22StringFromBinaryOrNullPKhj>
 800e668:	f107 0314 	add.w	r3, r7, #20
 800e66c:	4619      	mov	r1, r3
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f7ff fa3a 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 800e674:	f107 0314 	add.w	r3, r7, #20
 800e678:	4618      	mov	r0, r3
 800e67a:	f7ff f9b8 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	429a      	cmp	r2, r3
 800e684:	d903      	bls.n	800e68e <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800e686:	4905      	ldr	r1, [pc, #20]	; (800e69c <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	f7ff fa3f 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800e68e:	bf00      	nop
}
 800e690:	68f8      	ldr	r0, [r7, #12]
 800e692:	3720      	adds	r7, #32
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}
 800e698:	08024c98 	.word	0x08024c98
 800e69c:	08024cb4 	.word	0x08024cb4

0800e6a0 <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b084      	sub	sp, #16
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	60f8      	str	r0, [r7, #12]
 800e6a8:	60b9      	str	r1, [r7, #8]
 800e6aa:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d006      	beq.n	800e6c0 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	68b9      	ldr	r1, [r7, #8]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7ff ffbd 	bl	800e638 <_Z24StringFromBinaryWithSizePKhj>
 800e6be:	e004      	b.n	800e6ca <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	4904      	ldr	r1, [pc, #16]	; (800e6d4 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f7ff fc1f 	bl	800df08 <_Z10StringFromPKc>
}
 800e6ca:	68f8      	ldr	r0, [r7, #12]
 800e6cc:	3710      	adds	r7, #16
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	08024c04 	.word	0x08024c04

0800e6d8 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b088      	sub	sp, #32
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	607a      	str	r2, [r7, #4]
 800e6e4:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800e6e6:	4925      	ldr	r1, [pc, #148]	; (800e77c <_Z20StringFromMaskedBitsmmj+0xa4>)
 800e6e8:	68f8      	ldr	r0, [r7, #12]
 800e6ea:	f7fe fdc8 	bl	800d27e <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	2b04      	cmp	r3, #4
 800e6f2:	d802      	bhi.n	800e6fa <_Z20StringFromMaskedBitsmmj+0x22>
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	00db      	lsls	r3, r3, #3
 800e6f8:	e000      	b.n	800e6fc <_Z20StringFromMaskedBitsmmj+0x24>
 800e6fa:	2320      	movs	r3, #32
 800e6fc:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800e6fe:	69bb      	ldr	r3, [r7, #24]
 800e700:	3b01      	subs	r3, #1
 800e702:	2201      	movs	r2, #1
 800e704:	fa02 f303 	lsl.w	r3, r2, r3
 800e708:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800e70a:	2300      	movs	r3, #0
 800e70c:	61fb      	str	r3, [r7, #28]
 800e70e:	69fa      	ldr	r2, [r7, #28]
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	429a      	cmp	r2, r3
 800e714:	d22d      	bcs.n	800e772 <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800e716:	687a      	ldr	r2, [r7, #4]
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	4013      	ands	r3, r2
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d00c      	beq.n	800e73a <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800e720:	68ba      	ldr	r2, [r7, #8]
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	4013      	ands	r3, r2
 800e726:	2b00      	cmp	r3, #0
 800e728:	d001      	beq.n	800e72e <_Z20StringFromMaskedBitsmmj+0x56>
 800e72a:	4b15      	ldr	r3, [pc, #84]	; (800e780 <_Z20StringFromMaskedBitsmmj+0xa8>)
 800e72c:	e000      	b.n	800e730 <_Z20StringFromMaskedBitsmmj+0x58>
 800e72e:	4b15      	ldr	r3, [pc, #84]	; (800e784 <_Z20StringFromMaskedBitsmmj+0xac>)
 800e730:	4619      	mov	r1, r3
 800e732:	68f8      	ldr	r0, [r7, #12]
 800e734:	f7ff f9ea 	bl	800db0c <_ZN12SimpleStringpLEPKc>
 800e738:	e003      	b.n	800e742 <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800e73a:	4913      	ldr	r1, [pc, #76]	; (800e788 <_Z20StringFromMaskedBitsmmj+0xb0>)
 800e73c:	68f8      	ldr	r0, [r7, #12]
 800e73e:	f7ff f9e5 	bl	800db0c <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	f003 0307 	and.w	r3, r3, #7
 800e748:	2b07      	cmp	r3, #7
 800e74a:	d108      	bne.n	800e75e <_Z20StringFromMaskedBitsmmj+0x86>
 800e74c:	69bb      	ldr	r3, [r7, #24]
 800e74e:	3b01      	subs	r3, #1
 800e750:	69fa      	ldr	r2, [r7, #28]
 800e752:	429a      	cmp	r2, r3
 800e754:	d003      	beq.n	800e75e <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800e756:	490d      	ldr	r1, [pc, #52]	; (800e78c <_Z20StringFromMaskedBitsmmj+0xb4>)
 800e758:	68f8      	ldr	r0, [r7, #12]
 800e75a:	f7ff f9d7 	bl	800db0c <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	005b      	lsls	r3, r3, #1
 800e762:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	005b      	lsls	r3, r3, #1
 800e768:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	3301      	adds	r3, #1
 800e76e:	61fb      	str	r3, [r7, #28]
 800e770:	e7cd      	b.n	800e70e <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800e772:	bf00      	nop
}
 800e774:	68f8      	ldr	r0, [r7, #12]
 800e776:	3720      	adds	r7, #32
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}
 800e77c:	08024be4 	.word	0x08024be4
 800e780:	08024cbc 	.word	0x08024cbc
 800e784:	08024cc0 	.word	0x08024cc0
 800e788:	08024cc4 	.word	0x08024cc4
 800e78c:	08024cc8 	.word	0x08024cc8

0800e790 <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800e79a:	683a      	ldr	r2, [r7, #0]
 800e79c:	4b18      	ldr	r3, [pc, #96]	; (800e800 <_Z23StringFromOrdinalNumberj+0x70>)
 800e79e:	fba3 1302 	umull	r1, r3, r3, r2
 800e7a2:	08d9      	lsrs	r1, r3, #3
 800e7a4:	460b      	mov	r3, r1
 800e7a6:	009b      	lsls	r3, r3, #2
 800e7a8:	440b      	add	r3, r1
 800e7aa:	005b      	lsls	r3, r3, #1
 800e7ac:	1ad3      	subs	r3, r2, r3
 800e7ae:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	2b0a      	cmp	r3, #10
 800e7b4:	d905      	bls.n	800e7c2 <_Z23StringFromOrdinalNumberj+0x32>
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	2b0d      	cmp	r3, #13
 800e7ba:	d802      	bhi.n	800e7c2 <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800e7bc:	4b11      	ldr	r3, [pc, #68]	; (800e804 <_Z23StringFromOrdinalNumberj+0x74>)
 800e7be:	60fb      	str	r3, [r7, #12]
 800e7c0:	e013      	b.n	800e7ea <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	2b03      	cmp	r3, #3
 800e7c6:	d102      	bne.n	800e7ce <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800e7c8:	4b0f      	ldr	r3, [pc, #60]	; (800e808 <_Z23StringFromOrdinalNumberj+0x78>)
 800e7ca:	60fb      	str	r3, [r7, #12]
 800e7cc:	e00d      	b.n	800e7ea <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	2b02      	cmp	r3, #2
 800e7d2:	d102      	bne.n	800e7da <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800e7d4:	4b0d      	ldr	r3, [pc, #52]	; (800e80c <_Z23StringFromOrdinalNumberj+0x7c>)
 800e7d6:	60fb      	str	r3, [r7, #12]
 800e7d8:	e007      	b.n	800e7ea <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d102      	bne.n	800e7e6 <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800e7e0:	4b0b      	ldr	r3, [pc, #44]	; (800e810 <_Z23StringFromOrdinalNumberj+0x80>)
 800e7e2:	60fb      	str	r3, [r7, #12]
 800e7e4:	e001      	b.n	800e7ea <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800e7e6:	4b07      	ldr	r3, [pc, #28]	; (800e804 <_Z23StringFromOrdinalNumberj+0x74>)
 800e7e8:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	683a      	ldr	r2, [r7, #0]
 800e7f0:	4908      	ldr	r1, [pc, #32]	; (800e814 <_Z23StringFromOrdinalNumberj+0x84>)
 800e7f2:	f7ff fe03 	bl	800e3fc <_Z16StringFromFormatPKcz>
}
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	3710      	adds	r7, #16
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	cccccccd 	.word	0xcccccccd
 800e804:	08024ccc 	.word	0x08024ccc
 800e808:	08024cd0 	.word	0x08024cd0
 800e80c:	08024cd4 	.word	0x08024cd4
 800e810:	08024cd8 	.word	0x08024cd8
 800e814:	08024cdc 	.word	0x08024cdc

0800e818 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	3304      	adds	r3, #4
 800e824:	4907      	ldr	r1, [pc, #28]	; (800e844 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800e826:	4618      	mov	r0, r3
 800e828:	f7fe fd29 	bl	800d27e <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2200      	movs	r2, #0
 800e830:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2200      	movs	r2, #0
 800e836:	60da      	str	r2, [r3, #12]
}
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	4618      	mov	r0, r3
 800e83c:	3708      	adds	r7, #8
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
 800e842:	bf00      	nop
 800e844:	08024be4 	.word	0x08024be4

0800e848 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800e848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e84a:	b083      	sub	sp, #12
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d01e      	beq.n	800e898 <_ZN22SimpleStringCollection8allocateEj+0x50>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681a      	ldr	r2, [r3, #0]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	3b04      	subs	r3, #4
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	00db      	lsls	r3, r3, #3
 800e868:	18d4      	adds	r4, r2, r3
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	429c      	cmp	r4, r3
 800e870:	d004      	beq.n	800e87c <_ZN22SimpleStringCollection8allocateEj+0x34>
 800e872:	3c08      	subs	r4, #8
 800e874:	4620      	mov	r0, r4
 800e876:	f7ff f8ba 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800e87a:	e7f6      	b.n	800e86a <_ZN22SimpleStringCollection8allocateEj+0x22>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f1a3 0208 	sub.w	r2, r3, #8
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	3b04      	subs	r3, #4
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	3301      	adds	r3, #1
 800e88e:	00db      	lsls	r3, r3, #3
 800e890:	4619      	mov	r1, r3
 800e892:	4610      	mov	r0, r2
 800e894:	f7fc f976 	bl	800ab84 <_ZdaPvj>

    size_ = _size;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	683a      	ldr	r2, [r7, #0]
 800e89c:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	68dc      	ldr	r4, [r3, #12]
 800e8a2:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800e8a6:	d202      	bcs.n	800e8ae <_ZN22SimpleStringCollection8allocateEj+0x66>
 800e8a8:	1c63      	adds	r3, r4, #1
 800e8aa:	00db      	lsls	r3, r3, #3
 800e8ac:	e001      	b.n	800e8b2 <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800e8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e8b2:	f240 4227 	movw	r2, #1063	; 0x427
 800e8b6:	4910      	ldr	r1, [pc, #64]	; (800e8f8 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7fc f941 	bl	800ab40 <_ZnajPKci>
 800e8be:	4605      	mov	r5, r0
 800e8c0:	1d2b      	adds	r3, r5, #4
 800e8c2:	3b04      	subs	r3, #4
 800e8c4:	2208      	movs	r2, #8
 800e8c6:	601a      	str	r2, [r3, #0]
 800e8c8:	1d2b      	adds	r3, r5, #4
 800e8ca:	601c      	str	r4, [r3, #0]
 800e8cc:	f105 0308 	add.w	r3, r5, #8
 800e8d0:	1e62      	subs	r2, r4, #1
 800e8d2:	4614      	mov	r4, r2
 800e8d4:	461e      	mov	r6, r3
 800e8d6:	2c00      	cmp	r4, #0
 800e8d8:	db06      	blt.n	800e8e8 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800e8da:	4908      	ldr	r1, [pc, #32]	; (800e8fc <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800e8dc:	4630      	mov	r0, r6
 800e8de:	f7fe fcce 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800e8e2:	3608      	adds	r6, #8
 800e8e4:	3c01      	subs	r4, #1
 800e8e6:	e7f6      	b.n	800e8d6 <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800e8e8:	f105 0208 	add.w	r2, r5, #8
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	601a      	str	r2, [r3, #0]
}
 800e8f0:	bf00      	nop
 800e8f2:	370c      	adds	r7, #12
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8f8:	08024b24 	.word	0x08024b24
 800e8fc:	08024be4 	.word	0x08024be4

0800e900 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800e900:	b590      	push	{r4, r7, lr}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d01e      	beq.n	800e94e <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681a      	ldr	r2, [r3, #0]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	3b04      	subs	r3, #4
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	00db      	lsls	r3, r3, #3
 800e91e:	18d4      	adds	r4, r2, r3
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	429c      	cmp	r4, r3
 800e926:	d004      	beq.n	800e932 <_ZN22SimpleStringCollectionD1Ev+0x32>
 800e928:	3c08      	subs	r4, #8
 800e92a:	4620      	mov	r0, r4
 800e92c:	f7ff f85f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800e930:	e7f6      	b.n	800e920 <_ZN22SimpleStringCollectionD1Ev+0x20>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f1a3 0208 	sub.w	r2, r3, #8
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	3b04      	subs	r3, #4
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	3301      	adds	r3, #1
 800e944:	00db      	lsls	r3, r3, #3
 800e946:	4619      	mov	r1, r3
 800e948:	4610      	mov	r0, r2
 800e94a:	f7fc f91b 	bl	800ab84 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	3304      	adds	r3, #4
 800e952:	4618      	mov	r0, r3
 800e954:	f7ff f84b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	4618      	mov	r0, r3
 800e95c:	370c      	adds	r7, #12
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd90      	pop	{r4, r7, pc}

0800e962 <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800e962:	b480      	push	{r7}
 800e964:	b083      	sub	sp, #12
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
    return size_;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	68db      	ldr	r3, [r3, #12]
}
 800e96e:	4618      	mov	r0, r3
 800e970:	370c      	adds	r7, #12
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr
	...

0800e97c <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800e97c:	b590      	push	{r4, r7, lr}
 800e97e:	b085      	sub	sp, #20
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	68db      	ldr	r3, [r3, #12]
 800e98a:	683a      	ldr	r2, [r7, #0]
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d315      	bcc.n	800e9bc <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	1d1c      	adds	r4, r3, #4
 800e994:	f107 0308 	add.w	r3, r7, #8
 800e998:	490d      	ldr	r1, [pc, #52]	; (800e9d0 <_ZN22SimpleStringCollectionixEj+0x54>)
 800e99a:	4618      	mov	r0, r3
 800e99c:	f7fe fc6f 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800e9a0:	f107 0308 	add.w	r3, r7, #8
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	4620      	mov	r0, r4
 800e9a8:	f7fe fcd5 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800e9ac:	f107 0308 	add.w	r3, r7, #8
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7ff f81c 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        return empty_;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	3304      	adds	r3, #4
 800e9ba:	e004      	b.n	800e9c6 <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	00db      	lsls	r3, r3, #3
 800e9c4:	4413      	add	r3, r2
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3714      	adds	r7, #20
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd90      	pop	{r4, r7, pc}
 800e9ce:	bf00      	nop
 800e9d0:	08024be4 	.word	0x08024be4

0800e9d4 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b082      	sub	sp, #8
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7fa fb88 	bl	80090f4 <_ZN17ConsoleTestOutputC1Ev>
 800e9e4:	4a08      	ldr	r2, [pc, #32]	; (800ea08 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	601a      	str	r2, [r3, #0]
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	611a      	str	r2, [r3, #16]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	3314      	adds	r3, #20
 800e9f4:	4905      	ldr	r1, [pc, #20]	; (800ea0c <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7fe fc41 	bl	800d27e <_ZN12SimpleStringC1EPKc>
{
}
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3708      	adds	r7, #8
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	08028b50 	.word	0x08028b50
 800ea0c:	08024ce4 	.word	0x08024ce4

0800ea10 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b082      	sub	sp, #8
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	4a08      	ldr	r2, [pc, #32]	; (800ea3c <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	601a      	str	r2, [r3, #0]
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	3314      	adds	r3, #20
 800ea22:	4618      	mov	r0, r3
 800ea24:	f7fe ffe3 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fa fb74 	bl	8009118 <_ZN17ConsoleTestOutputD1Ev>
{
}
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	4618      	mov	r0, r3
 800ea34:	3708      	adds	r7, #8
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}
 800ea3a:	bf00      	nop
 800ea3c:	08028b50 	.word	0x08028b50

0800ea40 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
}
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f7ff ffe1 	bl	800ea10 <_ZN18TeamCityTestOutputD1Ev>
 800ea4e:	211c      	movs	r1, #28
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f7fc f865 	bl	800ab20 <_ZdlPvj>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3708      	adds	r7, #8
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b086      	sub	sp, #24
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800ea6a:	687a      	ldr	r2, [r7, #4]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	332c      	adds	r3, #44	; 0x2c
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	492b      	ldr	r1, [pc, #172]	; (800eb24 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800ea76:	4610      	mov	r0, r2
 800ea78:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800ea7a:	f107 0308 	add.w	r3, r7, #8
 800ea7e:	6839      	ldr	r1, [r7, #0]
 800ea80:	4618      	mov	r0, r3
 800ea82:	f004 fdf7 	bl	8013674 <_ZNK10UtestShell7getNameEv>
 800ea86:	f107 0308 	add.w	r3, r7, #8
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7fe ff82 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800ea90:	4603      	mov	r3, r0
 800ea92:	4619      	mov	r1, r3
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f000 f919 	bl	800eccc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800ea9a:	f107 0308 	add.w	r3, r7, #8
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7fe ffa5 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    print("']\n");
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	332c      	adds	r3, #44	; 0x2c
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	491e      	ldr	r1, [pc, #120]	; (800eb28 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800eab0:	4610      	mov	r0, r2
 800eab2:	4798      	blx	r3
    if (!test.willRun()) {
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	3318      	adds	r3, #24
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	6838      	ldr	r0, [r7, #0]
 800eabe:	4798      	blx	r3
 800eac0:	4603      	mov	r3, r0
 800eac2:	f083 0301 	eor.w	r3, r3, #1
 800eac6:	b2db      	uxtb	r3, r3
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d024      	beq.n	800eb16 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800eacc:	687a      	ldr	r2, [r7, #4]
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	332c      	adds	r3, #44	; 0x2c
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	4915      	ldr	r1, [pc, #84]	; (800eb2c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800ead8:	4610      	mov	r0, r2
 800eada:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800eadc:	f107 0310 	add.w	r3, r7, #16
 800eae0:	6839      	ldr	r1, [r7, #0]
 800eae2:	4618      	mov	r0, r3
 800eae4:	f004 fdc6 	bl	8013674 <_ZNK10UtestShell7getNameEv>
 800eae8:	f107 0310 	add.w	r3, r7, #16
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7fe ff51 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f000 f8e8 	bl	800eccc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800eafc:	f107 0310 	add.w	r3, r7, #16
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7fe ff74 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        print("']\n");
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	332c      	adds	r3, #44	; 0x2c
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	4905      	ldr	r1, [pc, #20]	; (800eb28 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800eb12:	4610      	mov	r0, r2
 800eb14:	4798      	blx	r3
    }
    currtest_ = &test;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	683a      	ldr	r2, [r7, #0]
 800eb1a:	611a      	str	r2, [r3, #16]
}
 800eb1c:	bf00      	nop
 800eb1e:	3718      	adds	r7, #24
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}
 800eb24:	08024ce8 	.word	0x08024ce8
 800eb28:	08024d08 	.word	0x08024d08
 800eb2c:	08024d0c 	.word	0x08024d0c

0800eb30 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800eb30:	b5b0      	push	{r4, r5, r7, lr}
 800eb32:	b084      	sub	sp, #16
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	691b      	ldr	r3, [r3, #16]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d03b      	beq.n	800ebba <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800eb42:	687a      	ldr	r2, [r7, #4]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	332c      	adds	r3, #44	; 0x2c
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	491d      	ldr	r1, [pc, #116]	; (800ebc4 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800eb4e:	4610      	mov	r0, r2
 800eb50:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	691a      	ldr	r2, [r3, #16]
 800eb56:	f107 0308 	add.w	r3, r7, #8
 800eb5a:	4611      	mov	r1, r2
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f004 fd89 	bl	8013674 <_ZNK10UtestShell7getNameEv>
 800eb62:	f107 0308 	add.w	r3, r7, #8
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7fe ff14 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	4619      	mov	r1, r3
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f000 f8ab 	bl	800eccc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800eb76:	f107 0308 	add.w	r3, r7, #8
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7fe ff37 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800eb80:	687a      	ldr	r2, [r7, #4]
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	332c      	adds	r3, #44	; 0x2c
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	490f      	ldr	r1, [pc, #60]	; (800ebc8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800eb8c:	4610      	mov	r0, r2
 800eb8e:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800eb90:	687d      	ldr	r5, [r7, #4]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	3334      	adds	r3, #52	; 0x34
 800eb98:	681c      	ldr	r4, [r3, #0]
 800eb9a:	6838      	ldr	r0, [r7, #0]
 800eb9c:	f004 fa0a 	bl	8012fb4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800eba0:	4603      	mov	r3, r0
 800eba2:	4619      	mov	r1, r3
 800eba4:	4628      	mov	r0, r5
 800eba6:	47a0      	blx	r4
    print("']\n");
 800eba8:	687a      	ldr	r2, [r7, #4]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	332c      	adds	r3, #44	; 0x2c
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	4906      	ldr	r1, [pc, #24]	; (800ebcc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800ebb4:	4610      	mov	r0, r2
 800ebb6:	4798      	blx	r3
 800ebb8:	e000      	b.n	800ebbc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800ebba:	bf00      	nop
}
 800ebbc:	3710      	adds	r7, #16
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bdb0      	pop	{r4, r5, r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	08024d2c 	.word	0x08024d2c
 800ebc8:	08024d4c 	.word	0x08024d4c
 800ebcc:	08024d08 	.word	0x08024d08

0800ebd0 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800ebd0:	b590      	push	{r4, r7, lr}
 800ebd2:	b085      	sub	sp, #20
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f103 0414 	add.w	r4, r3, #20
 800ebe0:	f107 0308 	add.w	r3, r7, #8
 800ebe4:	6839      	ldr	r1, [r7, #0]
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f004 fd53 	bl	8013692 <_ZNK10UtestShell8getGroupEv>
 800ebec:	f107 0308 	add.w	r3, r7, #8
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	f7fe fbaf 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800ebf8:	f107 0308 	add.w	r3, r7, #8
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7fe fef6 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800ec02:	687a      	ldr	r2, [r7, #4]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	332c      	adds	r3, #44	; 0x2c
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	490c      	ldr	r1, [pc, #48]	; (800ec40 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800ec0e:	4610      	mov	r0, r2
 800ec10:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	3314      	adds	r3, #20
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7fe febc 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	4619      	mov	r1, r3
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f000 f853 	bl	800eccc <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800ec26:	687a      	ldr	r2, [r7, #4]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	332c      	adds	r3, #44	; 0x2c
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4904      	ldr	r1, [pc, #16]	; (800ec44 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800ec32:	4610      	mov	r0, r2
 800ec34:	4798      	blx	r3
}
 800ec36:	bf00      	nop
 800ec38:	3714      	adds	r7, #20
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd90      	pop	{r4, r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	08024d5c 	.word	0x08024d5c
 800ec44:	08024d08 	.word	0x08024d08

0800ec48 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800ec48:	b590      	push	{r4, r7, lr}
 800ec4a:	b085      	sub	sp, #20
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f103 0414 	add.w	r4, r3, #20
 800ec58:	f107 0308 	add.w	r3, r7, #8
 800ec5c:	4918      	ldr	r1, [pc, #96]	; (800ecc0 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7fe fb0d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800ec64:	f107 0308 	add.w	r3, r7, #8
 800ec68:	4619      	mov	r1, r3
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f7fe fecb 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 800ec70:	4603      	mov	r3, r0
 800ec72:	461c      	mov	r4, r3
 800ec74:	f107 0308 	add.w	r3, r7, #8
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7fe feb8 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800ec7e:	2c00      	cmp	r4, #0
 800ec80:	d11a      	bne.n	800ecb8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	332c      	adds	r3, #44	; 0x2c
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	490d      	ldr	r1, [pc, #52]	; (800ecc4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800ec8e:	4610      	mov	r0, r2
 800ec90:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	3314      	adds	r3, #20
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7fe fe7c 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	4619      	mov	r1, r3
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f000 f813 	bl	800eccc <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800eca6:	687a      	ldr	r2, [r7, #4]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	332c      	adds	r3, #44	; 0x2c
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	4905      	ldr	r1, [pc, #20]	; (800ecc8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800ecb2:	4610      	mov	r0, r2
 800ecb4:	4798      	blx	r3
 800ecb6:	e000      	b.n	800ecba <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800ecb8:	bf00      	nop
}
 800ecba:	3714      	adds	r7, #20
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd90      	pop	{r4, r7, pc}
 800ecc0:	08024ce4 	.word	0x08024ce4
 800ecc4:	08024d80 	.word	0x08024d80
 800ecc8:	08024d08 	.word	0x08024d08

0800eccc <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b084      	sub	sp, #16
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	6039      	str	r1, [r7, #0]
    while (*s) {
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d03f      	beq.n	800ed5e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	2b27      	cmp	r3, #39	; 0x27
 800ece4:	d00b      	beq.n	800ecfe <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	2b7c      	cmp	r3, #124	; 0x7c
 800ecec:	d007      	beq.n	800ecfe <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	781b      	ldrb	r3, [r3, #0]
 800ecf2:	2b5b      	cmp	r3, #91	; 0x5b
 800ecf4:	d003      	beq.n	800ecfe <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	2b5d      	cmp	r3, #93	; 0x5d
 800ecfc:	d107      	bne.n	800ed0e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800ecfe:	237c      	movs	r3, #124	; 0x7c
 800ed00:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	73bb      	strb	r3, [r7, #14]
 800ed0c:	e01a      	b.n	800ed44 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	2b0d      	cmp	r3, #13
 800ed14:	d106      	bne.n	800ed24 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800ed16:	237c      	movs	r3, #124	; 0x7c
 800ed18:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800ed1a:	2372      	movs	r3, #114	; 0x72
 800ed1c:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	73bb      	strb	r3, [r7, #14]
 800ed22:	e00f      	b.n	800ed44 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	2b0a      	cmp	r3, #10
 800ed2a:	d106      	bne.n	800ed3a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800ed2c:	237c      	movs	r3, #124	; 0x7c
 800ed2e:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800ed30:	236e      	movs	r3, #110	; 0x6e
 800ed32:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800ed34:	2300      	movs	r3, #0
 800ed36:	73bb      	strb	r3, [r7, #14]
 800ed38:	e004      	b.n	800ed44 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800ed40:	2300      	movs	r3, #0
 800ed42:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800ed44:	687a      	ldr	r2, [r7, #4]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	3328      	adds	r3, #40	; 0x28
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	f107 010c 	add.w	r1, r7, #12
 800ed52:	4610      	mov	r0, r2
 800ed54:	4798      	blx	r3
        s++;
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	3301      	adds	r3, #1
 800ed5a:	603b      	str	r3, [r7, #0]
    while (*s) {
 800ed5c:	e7bb      	b.n	800ecd6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800ed5e:	bf00      	nop
 800ed60:	3710      	adds	r7, #16
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
	...

0800ed68 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800ed68:	b5b0      	push	{r4, r5, r7, lr}
 800ed6a:	b08a      	sub	sp, #40	; 0x28
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	332c      	adds	r3, #44	; 0x2c
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4968      	ldr	r1, [pc, #416]	; (800ef20 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800ed7e:	4610      	mov	r0, r2
 800ed80:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	3310      	adds	r3, #16
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	f107 0208 	add.w	r2, r7, #8
 800ed8e:	6839      	ldr	r1, [r7, #0]
 800ed90:	4610      	mov	r0, r2
 800ed92:	4798      	blx	r3
 800ed94:	f107 0308 	add.w	r3, r7, #8
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7fe fdfb 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	4619      	mov	r1, r3
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f7ff ff92 	bl	800eccc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800eda8:	f107 0308 	add.w	r3, r7, #8
 800edac:	4618      	mov	r0, r3
 800edae:	f7fe fe1e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    print("' message='");
 800edb2:	687a      	ldr	r2, [r7, #4]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	332c      	adds	r3, #44	; 0x2c
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	4959      	ldr	r1, [pc, #356]	; (800ef24 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800edbe:	4610      	mov	r0, r2
 800edc0:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800edc2:	6838      	ldr	r0, [r7, #0]
 800edc4:	f000 fa15 	bl	800f1f2 <_ZNK11TestFailure17isOutsideTestFileEv>
 800edc8:	4603      	mov	r3, r0
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d105      	bne.n	800edda <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800edce:	6838      	ldr	r0, [r7, #0]
 800edd0:	f000 fa21 	bl	800f216 <_ZNK11TestFailure18isInHelperFunctionEv>
 800edd4:	4603      	mov	r3, r0
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d001      	beq.n	800edde <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800edda:	2301      	movs	r3, #1
 800eddc:	e000      	b.n	800ede0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800edde:	2300      	movs	r3, #0
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d042      	beq.n	800ee6a <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800ede4:	687a      	ldr	r2, [r7, #4]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	332c      	adds	r3, #44	; 0x2c
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	494e      	ldr	r1, [pc, #312]	; (800ef28 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800edf0:	4610      	mov	r0, r2
 800edf2:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800edf4:	687d      	ldr	r5, [r7, #4]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	332c      	adds	r3, #44	; 0x2c
 800edfc:	681c      	ldr	r4, [r3, #0]
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	331c      	adds	r3, #28
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f107 0210 	add.w	r2, r7, #16
 800ee0a:	6839      	ldr	r1, [r7, #0]
 800ee0c:	4610      	mov	r0, r2
 800ee0e:	4798      	blx	r3
 800ee10:	f107 0310 	add.w	r3, r7, #16
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7fe fdbd 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	4619      	mov	r1, r3
 800ee1e:	4628      	mov	r0, r5
 800ee20:	47a0      	blx	r4
 800ee22:	f107 0310 	add.w	r3, r7, #16
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7fe fde1 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        print(":");
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	332c      	adds	r3, #44	; 0x2c
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	493d      	ldr	r1, [pc, #244]	; (800ef2c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800ee38:	4610      	mov	r0, r2
 800ee3a:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800ee3c:	687d      	ldr	r5, [r7, #4]
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	3334      	adds	r3, #52	; 0x34
 800ee44:	681c      	ldr	r4, [r3, #0]
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	3320      	adds	r3, #32
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	6838      	ldr	r0, [r7, #0]
 800ee50:	4798      	blx	r3
 800ee52:	4603      	mov	r3, r0
 800ee54:	4619      	mov	r1, r3
 800ee56:	4628      	mov	r0, r5
 800ee58:	47a0      	blx	r4
        print("): ");
 800ee5a:	687a      	ldr	r2, [r7, #4]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	332c      	adds	r3, #44	; 0x2c
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	4932      	ldr	r1, [pc, #200]	; (800ef30 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800ee66:	4610      	mov	r0, r2
 800ee68:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	3308      	adds	r3, #8
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f107 0218 	add.w	r2, r7, #24
 800ee76:	6839      	ldr	r1, [r7, #0]
 800ee78:	4610      	mov	r0, r2
 800ee7a:	4798      	blx	r3
 800ee7c:	f107 0318 	add.w	r3, r7, #24
 800ee80:	4618      	mov	r0, r3
 800ee82:	f7fe fd87 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800ee86:	4603      	mov	r3, r0
 800ee88:	4619      	mov	r1, r3
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f7ff ff1e 	bl	800eccc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800ee90:	f107 0318 	add.w	r3, r7, #24
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7fe fdaa 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    print(":");
 800ee9a:	687a      	ldr	r2, [r7, #4]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	332c      	adds	r3, #44	; 0x2c
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	4921      	ldr	r1, [pc, #132]	; (800ef2c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800eea6:	4610      	mov	r0, r2
 800eea8:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800eeaa:	687d      	ldr	r5, [r7, #4]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	3334      	adds	r3, #52	; 0x34
 800eeb2:	681c      	ldr	r4, [r3, #0]
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	3314      	adds	r3, #20
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	6838      	ldr	r0, [r7, #0]
 800eebe:	4798      	blx	r3
 800eec0:	4603      	mov	r3, r0
 800eec2:	4619      	mov	r1, r3
 800eec4:	4628      	mov	r0, r5
 800eec6:	47a0      	blx	r4

    print("' details='");
 800eec8:	687a      	ldr	r2, [r7, #4]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	332c      	adds	r3, #44	; 0x2c
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	4918      	ldr	r1, [pc, #96]	; (800ef34 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800eed4:	4610      	mov	r0, r2
 800eed6:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	3318      	adds	r3, #24
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	f107 0220 	add.w	r2, r7, #32
 800eee4:	6839      	ldr	r1, [r7, #0]
 800eee6:	4610      	mov	r0, r2
 800eee8:	4798      	blx	r3
 800eeea:	f107 0320 	add.w	r3, r7, #32
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7fe fd50 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800eef4:	4603      	mov	r3, r0
 800eef6:	4619      	mov	r1, r3
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f7ff fee7 	bl	800eccc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800eefe:	f107 0320 	add.w	r3, r7, #32
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7fe fd73 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    print("']\n");
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	332c      	adds	r3, #44	; 0x2c
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	4909      	ldr	r1, [pc, #36]	; (800ef38 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800ef14:	4610      	mov	r0, r2
 800ef16:	4798      	blx	r3
}
 800ef18:	bf00      	nop
 800ef1a:	3728      	adds	r7, #40	; 0x28
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bdb0      	pop	{r4, r5, r7, pc}
 800ef20:	08024da4 	.word	0x08024da4
 800ef24:	08024dc4 	.word	0x08024dc4
 800ef28:	08024dd0 	.word	0x08024dd0
 800ef2c:	08024de0 	.word	0x08024de0
 800ef30:	08024de4 	.word	0x08024de4
 800ef34:	08024de8 	.word	0x08024de8
 800ef38:	08024d08 	.word	0x08024d08

0800ef3c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b084      	sub	sp, #16
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	60f8      	str	r0, [r7, #12]
 800ef44:	60b9      	str	r1, [r7, #8]
 800ef46:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800ef48:	4a1a      	ldr	r2, [pc, #104]	; (800efb4 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	601a      	str	r2, [r3, #0]
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	3314      	adds	r3, #20
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	68fa      	ldr	r2, [r7, #12]
 800ef58:	3204      	adds	r2, #4
 800ef5a:	68b9      	ldr	r1, [r7, #8]
 800ef5c:	4610      	mov	r0, r2
 800ef5e:	4798      	blx	r3
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	330c      	adds	r3, #12
 800ef64:	68b9      	ldr	r1, [r7, #8]
 800ef66:	4618      	mov	r0, r3
 800ef68:	f004 fb84 	bl	8013674 <_ZNK10UtestShell7getNameEv>
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	3314      	adds	r3, #20
 800ef70:	68b9      	ldr	r1, [r7, #8]
 800ef72:	4618      	mov	r0, r3
 800ef74:	f004 fc4f 	bl	8013816 <_ZNK10UtestShell7getFileEv>
 800ef78:	68b8      	ldr	r0, [r7, #8]
 800ef7a:	f004 fc5b 	bl	8013834 <_ZNK10UtestShell13getLineNumberEv>
 800ef7e:	4602      	mov	r2, r0
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	61da      	str	r2, [r3, #28]
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	3320      	adds	r3, #32
 800ef88:	68b9      	ldr	r1, [r7, #8]
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f004 fc43 	bl	8013816 <_ZNK10UtestShell7getFileEv>
 800ef90:	68b8      	ldr	r0, [r7, #8]
 800ef92:	f004 fc4f 	bl	8013834 <_ZNK10UtestShell13getLineNumberEv>
 800ef96:	4602      	mov	r2, r0
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	629a      	str	r2, [r3, #40]	; 0x28
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	332c      	adds	r3, #44	; 0x2c
 800efa0:	6879      	ldr	r1, [r7, #4]
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fe f9bf 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
{
}
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	4618      	mov	r0, r3
 800efac:	3710      	adds	r7, #16
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	08028e1c 	.word	0x08028e1c

0800efb8 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800efb8:	b580      	push	{r7, lr}
 800efba:	b084      	sub	sp, #16
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	60f8      	str	r0, [r7, #12]
 800efc0:	60b9      	str	r1, [r7, #8]
 800efc2:	607a      	str	r2, [r7, #4]
 800efc4:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800efc6:	4a19      	ldr	r2, [pc, #100]	; (800f02c <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	601a      	str	r2, [r3, #0]
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	3314      	adds	r3, #20
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	68fa      	ldr	r2, [r7, #12]
 800efd6:	3204      	adds	r2, #4
 800efd8:	68b9      	ldr	r1, [r7, #8]
 800efda:	4610      	mov	r0, r2
 800efdc:	4798      	blx	r3
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	330c      	adds	r3, #12
 800efe2:	68b9      	ldr	r1, [r7, #8]
 800efe4:	4618      	mov	r0, r3
 800efe6:	f004 fb45 	bl	8013674 <_ZNK10UtestShell7getNameEv>
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	3314      	adds	r3, #20
 800efee:	6879      	ldr	r1, [r7, #4]
 800eff0:	4618      	mov	r0, r3
 800eff2:	f7fe f944 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	683a      	ldr	r2, [r7, #0]
 800effa:	61da      	str	r2, [r3, #28]
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	3320      	adds	r3, #32
 800f000:	68b9      	ldr	r1, [r7, #8]
 800f002:	4618      	mov	r0, r3
 800f004:	f004 fc07 	bl	8013816 <_ZNK10UtestShell7getFileEv>
 800f008:	68b8      	ldr	r0, [r7, #8]
 800f00a:	f004 fc13 	bl	8013834 <_ZNK10UtestShell13getLineNumberEv>
 800f00e:	4602      	mov	r2, r0
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	629a      	str	r2, [r3, #40]	; 0x28
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	332c      	adds	r3, #44	; 0x2c
 800f018:	4905      	ldr	r1, [pc, #20]	; (800f030 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7fe f92f 	bl	800d27e <_ZN12SimpleStringC1EPKc>
{
}
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	4618      	mov	r0, r3
 800f024:	3710      	adds	r7, #16
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	08028e1c 	.word	0x08028e1c
 800f030:	08024df4 	.word	0x08024df4

0800f034 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800f034:	b580      	push	{r7, lr}
 800f036:	b082      	sub	sp, #8
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800f03e:	4a1e      	ldr	r2, [pc, #120]	; (800f0b8 <_ZN11TestFailureC1ERKS_+0x84>)
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	601a      	str	r2, [r3, #0]
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	1d1a      	adds	r2, r3, #4
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	3304      	adds	r3, #4
 800f04c:	4619      	mov	r1, r3
 800f04e:	4610      	mov	r0, r2
 800f050:	f7fe f969 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f103 020c 	add.w	r2, r3, #12
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	330c      	adds	r3, #12
 800f05e:	4619      	mov	r1, r3
 800f060:	4610      	mov	r0, r2
 800f062:	f7fe f960 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f103 0214 	add.w	r2, r3, #20
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	3314      	adds	r3, #20
 800f070:	4619      	mov	r1, r3
 800f072:	4610      	mov	r0, r2
 800f074:	f7fe f957 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	69da      	ldr	r2, [r3, #28]
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	61da      	str	r2, [r3, #28]
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	f103 0220 	add.w	r2, r3, #32
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	3320      	adds	r3, #32
 800f08a:	4619      	mov	r1, r3
 800f08c:	4610      	mov	r0, r2
 800f08e:	f7fe f94a 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	629a      	str	r2, [r3, #40]	; 0x28
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	332c      	adds	r3, #44	; 0x2c
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	4610      	mov	r0, r2
 800f0a8:	f7fe f93d 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
{
}
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3708      	adds	r7, #8
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	08028e1c 	.word	0x08028e1c

0800f0bc <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b082      	sub	sp, #8
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	4a10      	ldr	r2, [pc, #64]	; (800f108 <_ZN11TestFailureD1Ev+0x4c>)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	601a      	str	r2, [r3, #0]
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	332c      	adds	r3, #44	; 0x2c
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f7fe fc8d 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	3320      	adds	r3, #32
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7fe fc88 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	3314      	adds	r3, #20
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f7fe fc83 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	330c      	adds	r3, #12
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f7fe fc7e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	3304      	adds	r3, #4
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7fe fc79 	bl	800d9ee <_ZN12SimpleStringD1Ev>
{
}
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	4618      	mov	r0, r3
 800f100:	3708      	adds	r7, #8
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
 800f106:	bf00      	nop
 800f108:	08028e1c 	.word	0x08028e1c

0800f10c <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b082      	sub	sp, #8
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
}
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f7ff ffd1 	bl	800f0bc <_ZN11TestFailureD1Ev>
 800f11a:	2134      	movs	r1, #52	; 0x34
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f7fb fcff 	bl	800ab20 <_ZdlPvj>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	4618      	mov	r0, r3
 800f126:	3708      	adds	r7, #8
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b082      	sub	sp, #8
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	6039      	str	r1, [r7, #0]
    return fileName_;
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	3314      	adds	r3, #20
 800f13a:	4619      	mov	r1, r3
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f7fe f8f2 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
}
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	3708      	adds	r7, #8
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}

0800f14a <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800f14a:	b580      	push	{r7, lr}
 800f14c:	b082      	sub	sp, #8
 800f14e:	af00      	add	r7, sp, #0
 800f150:	6078      	str	r0, [r7, #4]
 800f152:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	3320      	adds	r3, #32
 800f158:	4619      	mov	r1, r3
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f7fe f8e3 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
}
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	3708      	adds	r7, #8
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b082      	sub	sp, #8
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	6039      	str	r1, [r7, #0]
    return testName_;
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	3304      	adds	r3, #4
 800f176:	4619      	mov	r1, r3
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f7fe f8d4 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
}
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	3708      	adds	r7, #8
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}

0800f186 <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800f186:	b580      	push	{r7, lr}
 800f188:	b082      	sub	sp, #8
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	6078      	str	r0, [r7, #4]
 800f18e:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	330c      	adds	r3, #12
 800f194:	4619      	mov	r1, r3
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f7fe f8c5 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
}
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	3708      	adds	r7, #8
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b083      	sub	sp, #12
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	69db      	ldr	r3, [r3, #28]
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	370c      	adds	r7, #12
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ba:	4770      	bx	lr

0800f1bc <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800f1bc:	b480      	push	{r7}
 800f1be:	b083      	sub	sp, #12
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	370c      	adds	r7, #12
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d2:	4770      	bx	lr

0800f1d4 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b082      	sub	sp, #8
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	6039      	str	r1, [r7, #0]
    return message_;
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	332c      	adds	r3, #44	; 0x2c
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f7fe f89e 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
}
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	3708      	adds	r7, #8
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}

0800f1f2 <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800f1f2:	b580      	push	{r7, lr}
 800f1f4:	b082      	sub	sp, #8
 800f1f6:	af00      	add	r7, sp, #0
 800f1f8:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f103 0220 	add.w	r2, r3, #32
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	3314      	adds	r3, #20
 800f204:	4619      	mov	r1, r3
 800f206:	4610      	mov	r0, r2
 800f208:	f7fe fc42 	bl	800da90 <_ZneRK12SimpleStringS1_>
 800f20c:	4603      	mov	r3, r0
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3708      	adds	r7, #8
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}

0800f216 <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800f216:	b480      	push	{r7}
 800f218:	b083      	sub	sp, #12
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	69da      	ldr	r2, [r3, #28]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f226:	429a      	cmp	r2, r3
 800f228:	bf34      	ite	cc
 800f22a:	2301      	movcc	r3, #1
 800f22c:	2300      	movcs	r3, #0
 800f22e:	b2db      	uxtb	r3, r3
}
 800f230:	4618      	mov	r0, r3
 800f232:	370c      	adds	r7, #12
 800f234:	46bd      	mov	sp, r7
 800f236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23a:	4770      	bx	lr

0800f23c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800f23c:	b590      	push	{r4, r7, lr}
 800f23e:	b085      	sub	sp, #20
 800f240:	af00      	add	r7, sp, #0
 800f242:	60f8      	str	r0, [r7, #12]
 800f244:	60b9      	str	r1, [r7, #8]
 800f246:	607a      	str	r2, [r7, #4]
 800f248:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f7fe fba2 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800f250:	4604      	mov	r4, r0
 800f252:	6838      	ldr	r0, [r7, #0]
 800f254:	f7fe fb9e 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800f258:	4603      	mov	r3, r0
 800f25a:	68f8      	ldr	r0, [r7, #12]
 800f25c:	4622      	mov	r2, r4
 800f25e:	4903      	ldr	r1, [pc, #12]	; (800f26c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800f260:	f7ff f8cc 	bl	800e3fc <_Z16StringFromFormatPKcz>
}
 800f264:	68f8      	ldr	r0, [r7, #12]
 800f266:	3714      	adds	r7, #20
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd90      	pop	{r4, r7, pc}
 800f26c:	08024e00 	.word	0x08024e00

0800f270 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800f270:	b590      	push	{r4, r7, lr}
 800f272:	b097      	sub	sp, #92	; 0x5c
 800f274:	af00      	add	r7, sp, #0
 800f276:	60f8      	str	r0, [r7, #12]
 800f278:	60b9      	str	r1, [r7, #8]
 800f27a:	607a      	str	r2, [r7, #4]
 800f27c:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800f27e:	494c      	ldr	r1, [pc, #304]	; (800f3b0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800f280:	68f8      	ldr	r0, [r7, #12]
 800f282:	f7fd fffc 	bl	800d27e <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800f286:	2314      	movs	r3, #20
 800f288:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800f28a:	230a      	movs	r3, #10
 800f28c:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800f28e:	f107 0320 	add.w	r3, r7, #32
 800f292:	220a      	movs	r2, #10
 800f294:	4947      	ldr	r1, [pc, #284]	; (800f3b4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800f296:	4618      	mov	r0, r3
 800f298:	f7fe f80c 	bl	800d2b4 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800f29c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2a0:	f107 0120 	add.w	r1, r7, #32
 800f2a4:	687a      	ldr	r2, [r7, #4]
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7fe fc03 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800f2ac:	f107 0318 	add.w	r3, r7, #24
 800f2b0:	f107 0220 	add.w	r2, r7, #32
 800f2b4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7fe fbfa 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800f2be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f7fe fb93 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800f2c8:	f107 0310 	add.w	r3, r7, #16
 800f2cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f2ce:	493a      	ldr	r1, [pc, #232]	; (800f3b8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f7ff f893 	bl	800e3fc <_Z16StringFromFormatPKcz>

    result += "\n";
 800f2d6:	4939      	ldr	r1, [pc, #228]	; (800f3bc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800f2d8:	68f8      	ldr	r0, [r7, #12]
 800f2da:	f7fe fc17 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800f2de:	f107 0310 	add.w	r3, r7, #16
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7fe fb56 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800f2e8:	4604      	mov	r4, r0
 800f2ea:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800f2ee:	f107 0118 	add.w	r1, r7, #24
 800f2f2:	2314      	movs	r3, #20
 800f2f4:	683a      	ldr	r2, [r7, #0]
 800f2f6:	f7fe fc83 	bl	800dc00 <_ZNK12SimpleString9subStringEjj>
 800f2fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fe fb48 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800f304:	4603      	mov	r3, r0
 800f306:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f30a:	4622      	mov	r2, r4
 800f30c:	492c      	ldr	r1, [pc, #176]	; (800f3c0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800f30e:	f7ff f875 	bl	800e3fc <_Z16StringFromFormatPKcz>
 800f312:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f316:	4619      	mov	r1, r3
 800f318:	68f8      	ldr	r0, [r7, #12]
 800f31a:	f7fe fbe5 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 800f31e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f322:	4618      	mov	r0, r3
 800f324:	f7fe fb63 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800f328:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7fe fb5e 	bl	800d9ee <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800f332:	f107 0310 	add.w	r3, r7, #16
 800f336:	4618      	mov	r0, r3
 800f338:	f7fe fb38 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 800f33c:	4603      	mov	r3, r0
 800f33e:	f103 020a 	add.w	r2, r3, #10
 800f342:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f346:	491b      	ldr	r1, [pc, #108]	; (800f3b4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800f348:	4618      	mov	r0, r3
 800f34a:	f7fd ffb3 	bl	800d2b4 <_ZN12SimpleStringC1EPKcj>
 800f34e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f352:	4618      	mov	r0, r3
 800f354:	f7fe fb1e 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800f358:	4602      	mov	r2, r0
 800f35a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f35e:	4919      	ldr	r1, [pc, #100]	; (800f3c4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800f360:	4618      	mov	r0, r3
 800f362:	f7ff f84b 	bl	800e3fc <_Z16StringFromFormatPKcz>
 800f366:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f36a:	4619      	mov	r1, r3
 800f36c:	68f8      	ldr	r0, [r7, #12]
 800f36e:	f7fe fbbb 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 800f372:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f376:	4618      	mov	r0, r3
 800f378:	f7fe fb39 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800f37c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f380:	4618      	mov	r0, r3
 800f382:	f7fe fb34 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return result;
 800f386:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800f388:	f107 0310 	add.w	r3, r7, #16
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7fe fb2e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800f392:	f107 0318 	add.w	r3, r7, #24
 800f396:	4618      	mov	r0, r3
 800f398:	f7fe fb29 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800f39c:	f107 0320 	add.w	r3, r7, #32
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7fe fb24 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return result;
 800f3a6:	bf00      	nop
}
 800f3a8:	68f8      	ldr	r0, [r7, #12]
 800f3aa:	375c      	adds	r7, #92	; 0x5c
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd90      	pop	{r4, r7, pc}
 800f3b0:	08024e20 	.word	0x08024e20
 800f3b4:	08024e24 	.word	0x08024e24
 800f3b8:	08024e28 	.word	0x08024e28
 800f3bc:	08024e50 	.word	0x08024e50
 800f3c0:	08024e54 	.word	0x08024e54
 800f3c4:	08024e5c 	.word	0x08024e5c

0800f3c8 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800f3c8:	b590      	push	{r4, r7, lr}
 800f3ca:	b087      	sub	sp, #28
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800f3d4:	491a      	ldr	r1, [pc, #104]	; (800f440 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800f3d6:	68f8      	ldr	r0, [r7, #12]
 800f3d8:	f7fd ff51 	bl	800d27e <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f7fe faf5 	bl	800d9cc <_ZNK12SimpleString7isEmptyEv>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	f083 0301 	eor.w	r3, r3, #1
 800f3e8:	b2db      	uxtb	r3, r3
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d022      	beq.n	800f434 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800f3ee:	f107 0310 	add.w	r3, r7, #16
 800f3f2:	4914      	ldr	r1, [pc, #80]	; (800f444 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7fd ff42 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800f3fa:	f107 0310 	add.w	r3, r7, #16
 800f3fe:	4619      	mov	r1, r3
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f7fe f800 	bl	800d406 <_ZNK12SimpleString10startsWithERKS_>
 800f406:	4603      	mov	r3, r0
 800f408:	f083 0301 	eor.w	r3, r3, #1
 800f40c:	b2dc      	uxtb	r4, r3
 800f40e:	f107 0310 	add.w	r3, r7, #16
 800f412:	4618      	mov	r0, r3
 800f414:	f7fe faeb 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800f418:	2c00      	cmp	r4, #0
 800f41a:	d003      	beq.n	800f424 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800f41c:	490a      	ldr	r1, [pc, #40]	; (800f448 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800f41e:	68f8      	ldr	r0, [r7, #12]
 800f420:	f7fe fb74 	bl	800db0c <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800f424:	6879      	ldr	r1, [r7, #4]
 800f426:	68f8      	ldr	r0, [r7, #12]
 800f428:	f7fe fb5e 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800f42c:	4907      	ldr	r1, [pc, #28]	; (800f44c <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800f42e:	68f8      	ldr	r0, [r7, #12]
 800f430:	f7fe fb6c 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800f434:	bf00      	nop
}
 800f436:	68f8      	ldr	r0, [r7, #12]
 800f438:	371c      	adds	r7, #28
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd90      	pop	{r4, r7, pc}
 800f43e:	bf00      	nop
 800f440:	08024e20 	.word	0x08024e20
 800f444:	08024e64 	.word	0x08024e64
 800f448:	08024e70 	.word	0x08024e70
 800f44c:	08024e7c 	.word	0x08024e7c

0800f450 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800f450:	b590      	push	{r4, r7, lr}
 800f452:	b089      	sub	sp, #36	; 0x24
 800f454:	af00      	add	r7, sp, #0
 800f456:	60f8      	str	r0, [r7, #12]
 800f458:	60b9      	str	r1, [r7, #8]
 800f45a:	607a      	str	r2, [r7, #4]
 800f45c:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800f45e:	68f8      	ldr	r0, [r7, #12]
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	68b9      	ldr	r1, [r7, #8]
 800f466:	f7ff fda7 	bl	800efb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f46a:	4a19      	ldr	r2, [pc, #100]	; (800f4d0 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f476:	68f9      	ldr	r1, [r7, #12]
 800f478:	f107 0310 	add.w	r3, r7, #16
 800f47c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f47e:	4618      	mov	r0, r3
 800f480:	f7ff ffa2 	bl	800f3c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f484:	f107 0310 	add.w	r3, r7, #16
 800f488:	4619      	mov	r1, r3
 800f48a:	4620      	mov	r0, r4
 800f48c:	f7fd ff63 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800f490:	f107 0310 	add.w	r3, r7, #16
 800f494:	4618      	mov	r0, r3
 800f496:	f7fe faaa 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f4a0:	68f9      	ldr	r1, [r7, #12]
 800f4a2:	f107 0018 	add.w	r0, r7, #24
 800f4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4aa:	f7ff fec7 	bl	800f23c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f4ae:	f107 0318 	add.w	r3, r7, #24
 800f4b2:	4619      	mov	r1, r3
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	f7fe fb17 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 800f4ba:	f107 0318 	add.w	r3, r7, #24
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7fe fa95 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3724      	adds	r7, #36	; 0x24
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd90      	pop	{r4, r7, pc}
 800f4ce:	bf00      	nop
 800f4d0:	08028df0 	.word	0x08028df0

0800f4d4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800f4d4:	b5b0      	push	{r4, r5, r7, lr}
 800f4d6:	b094      	sub	sp, #80	; 0x50
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6278      	str	r0, [r7, #36]	; 0x24
 800f4dc:	6239      	str	r1, [r7, #32]
 800f4de:	61fa      	str	r2, [r7, #28]
 800f4e0:	61bb      	str	r3, [r7, #24]
 800f4e2:	ed87 0b04 	vstr	d0, [r7, #16]
 800f4e6:	ed87 1b02 	vstr	d1, [r7, #8]
 800f4ea:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800f4ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4f0:	69bb      	ldr	r3, [r7, #24]
 800f4f2:	69fa      	ldr	r2, [r7, #28]
 800f4f4:	6a39      	ldr	r1, [r7, #32]
 800f4f6:	f7ff fd5f 	bl	800efb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f4fa:	4a4a      	ldr	r2, [pc, #296]	; (800f624 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800f4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4fe:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f502:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f506:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f508:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f50c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f50e:	4618      	mov	r0, r3
 800f510:	f7ff ff5a 	bl	800f3c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f514:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f518:	4619      	mov	r1, r3
 800f51a:	4620      	mov	r0, r4
 800f51c:	f7fd ff1b 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800f520:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f524:	4618      	mov	r0, r3
 800f526:	f7fe fa62 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800f52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f530:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800f532:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f536:	2107      	movs	r1, #7
 800f538:	ed97 0b04 	vldr	d0, [r7, #16]
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7fe ff1b 	bl	800e378 <_Z10StringFromdi>
 800f542:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f546:	2107      	movs	r1, #7
 800f548:	ed97 0b02 	vldr	d0, [r7, #8]
 800f54c:	4618      	mov	r0, r3
 800f54e:	f7fe ff13 	bl	800e378 <_Z10StringFromdi>
 800f552:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f556:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f55a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800f55e:	4629      	mov	r1, r5
 800f560:	f7ff fe6c 	bl	800f23c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f564:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f568:	4619      	mov	r1, r3
 800f56a:	4620      	mov	r0, r4
 800f56c:	f7fe fabc 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 800f570:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f574:	4618      	mov	r0, r3
 800f576:	f7fe fa3a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800f57a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f57e:	4618      	mov	r0, r3
 800f580:	f7fe fa35 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800f584:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f588:	4618      	mov	r0, r3
 800f58a:	f7fe fa30 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800f58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f590:	332c      	adds	r3, #44	; 0x2c
 800f592:	4925      	ldr	r1, [pc, #148]	; (800f628 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800f594:	4618      	mov	r0, r3
 800f596:	f7fe fab9 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800f59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f59c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f5a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f5a4:	2107      	movs	r1, #7
 800f5a6:	ed97 0b00 	vldr	d0, [r7]
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7fe fee4 	bl	800e378 <_Z10StringFromdi>
 800f5b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	f7fe fa96 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 800f5bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7fe fa14 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800f5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c8:	332c      	adds	r3, #44	; 0x2c
 800f5ca:	4918      	ldr	r1, [pc, #96]	; (800f62c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7fe fa9d 	bl	800db0c <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800f5d2:	4b17      	ldr	r3, [pc, #92]	; (800f630 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	ed97 0b04 	vldr	d0, [r7, #16]
 800f5da:	4798      	blx	r3
 800f5dc:	4603      	mov	r3, r0
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d10f      	bne.n	800f602 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800f5e2:	4b13      	ldr	r3, [pc, #76]	; (800f630 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	ed97 0b02 	vldr	d0, [r7, #8]
 800f5ea:	4798      	blx	r3
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d107      	bne.n	800f602 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800f5f2:	4b0f      	ldr	r3, [pc, #60]	; (800f630 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	ed97 0b00 	vldr	d0, [r7]
 800f5fa:	4798      	blx	r3
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d001      	beq.n	800f606 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800f602:	2301      	movs	r3, #1
 800f604:	e000      	b.n	800f608 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800f606:	2300      	movs	r3, #0
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d005      	beq.n	800f618 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800f60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60e:	332c      	adds	r3, #44	; 0x2c
 800f610:	4908      	ldr	r1, [pc, #32]	; (800f634 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800f612:	4618      	mov	r0, r3
 800f614:	f7fe fa7a 	bl	800db0c <_ZN12SimpleStringpLEPKc>
}
 800f618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61a:	4618      	mov	r0, r3
 800f61c:	3750      	adds	r7, #80	; 0x50
 800f61e:	46bd      	mov	sp, r7
 800f620:	bdb0      	pop	{r4, r5, r7, pc}
 800f622:	bf00      	nop
 800f624:	08028dc4 	.word	0x08028dc4
 800f628:	08024e80 	.word	0x08024e80
 800f62c:	08024e98 	.word	0x08024e98
 800f630:	200000e8 	.word	0x200000e8
 800f634:	08024e9c 	.word	0x08024e9c

0800f638 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800f638:	b590      	push	{r4, r7, lr}
 800f63a:	b093      	sub	sp, #76	; 0x4c
 800f63c:	af02      	add	r7, sp, #8
 800f63e:	60f8      	str	r0, [r7, #12]
 800f640:	60b9      	str	r1, [r7, #8]
 800f642:	607a      	str	r2, [r7, #4]
 800f644:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f646:	68f8      	ldr	r0, [r7, #12]
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	687a      	ldr	r2, [r7, #4]
 800f64c:	68b9      	ldr	r1, [r7, #8]
 800f64e:	f7ff fcb3 	bl	800efb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f652:	4a4f      	ldr	r2, [pc, #316]	; (800f790 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f65e:	68f9      	ldr	r1, [r7, #12]
 800f660:	f107 0320 	add.w	r3, r7, #32
 800f664:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f666:	4618      	mov	r0, r3
 800f668:	f7ff feae 	bl	800f3c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f66c:	f107 0320 	add.w	r3, r7, #32
 800f670:	4619      	mov	r1, r3
 800f672:	4620      	mov	r0, r4
 800f674:	f7fd fe6f 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800f678:	f107 0320 	add.w	r3, r7, #32
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7fe f9b6 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800f682:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f684:	f7fe f986 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800f688:	4602      	mov	r2, r0
 800f68a:	f107 0318 	add.w	r3, r7, #24
 800f68e:	4611      	mov	r1, r2
 800f690:	4618      	mov	r0, r3
 800f692:	f7fe fc47 	bl	800df24 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800f696:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f698:	f7fe f97c 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800f69c:	4602      	mov	r2, r0
 800f69e:	f107 0310 	add.w	r3, r7, #16
 800f6a2:	4611      	mov	r1, r2
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f7fe fc3d 	bl	800df24 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f6b0:	68f9      	ldr	r1, [r7, #12]
 800f6b2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f6b6:	f107 0310 	add.w	r3, r7, #16
 800f6ba:	f107 0218 	add.w	r2, r7, #24
 800f6be:	f7ff fdbd 	bl	800f23c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f6c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f6c6:	4619      	mov	r1, r3
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	f7fe fa0d 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 800f6ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7fe f98b 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800f6d8:	2300      	movs	r3, #0
 800f6da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f6de:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f6e0:	f7fe fae9 	bl	800dcb6 <_ZNK12SimpleString2atEj>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	461c      	mov	r4, r3
 800f6e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f6ea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f6ec:	f7fe fae3 	bl	800dcb6 <_ZNK12SimpleString2atEj>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	429c      	cmp	r4, r3
 800f6f4:	bf0c      	ite	eq
 800f6f6:	2301      	moveq	r3, #1
 800f6f8:	2300      	movne	r3, #0
 800f6fa:	b2db      	uxtb	r3, r3
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d003      	beq.n	800f708 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800f700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f702:	3301      	adds	r3, #1
 800f704:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f706:	e7e9      	b.n	800f6dc <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800f708:	2300      	movs	r3, #0
 800f70a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f70c:	f107 0310 	add.w	r3, r7, #16
 800f710:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f712:	4618      	mov	r0, r3
 800f714:	f7fe facf 	bl	800dcb6 <_ZNK12SimpleString2atEj>
 800f718:	4603      	mov	r3, r0
 800f71a:	461c      	mov	r4, r3
 800f71c:	f107 0318 	add.w	r3, r7, #24
 800f720:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f722:	4618      	mov	r0, r3
 800f724:	f7fe fac7 	bl	800dcb6 <_ZNK12SimpleString2atEj>
 800f728:	4603      	mov	r3, r0
 800f72a:	429c      	cmp	r4, r3
 800f72c:	bf0c      	ite	eq
 800f72e:	2301      	moveq	r3, #1
 800f730:	2300      	movne	r3, #0
 800f732:	b2db      	uxtb	r3, r3
 800f734:	2b00      	cmp	r3, #0
 800f736:	d003      	beq.n	800f740 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800f738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f73a:	3301      	adds	r3, #1
 800f73c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f73e:	e7e5      	b.n	800f70c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f746:	68f9      	ldr	r1, [r7, #12]
 800f748:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f74c:	f107 0210 	add.w	r2, r7, #16
 800f750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f752:	9300      	str	r3, [sp, #0]
 800f754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f756:	f7ff fd8b 	bl	800f270 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800f75a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f75e:	4619      	mov	r1, r3
 800f760:	4620      	mov	r0, r4
 800f762:	f7fe f9c1 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 800f766:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7fe f93f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800f770:	f107 0310 	add.w	r3, r7, #16
 800f774:	4618      	mov	r0, r3
 800f776:	f7fe f93a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800f77a:	f107 0318 	add.w	r3, r7, #24
 800f77e:	4618      	mov	r0, r3
 800f780:	f7fe f935 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	4618      	mov	r0, r3
 800f788:	3744      	adds	r7, #68	; 0x44
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd90      	pop	{r4, r7, pc}
 800f78e:	bf00      	nop
 800f790:	08028d98 	.word	0x08028d98

0800f794 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800f794:	b590      	push	{r4, r7, lr}
 800f796:	b087      	sub	sp, #28
 800f798:	af00      	add	r7, sp, #0
 800f79a:	60f8      	str	r0, [r7, #12]
 800f79c:	60b9      	str	r1, [r7, #8]
 800f79e:	607a      	str	r2, [r7, #4]
 800f7a0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f7a2:	68f8      	ldr	r0, [r7, #12]
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	687a      	ldr	r2, [r7, #4]
 800f7a8:	68b9      	ldr	r1, [r7, #8]
 800f7aa:	f7ff fc05 	bl	800efb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f7ae:	4a1a      	ldr	r2, [pc, #104]	; (800f818 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f7ba:	68f9      	ldr	r1, [r7, #12]
 800f7bc:	f107 0310 	add.w	r3, r7, #16
 800f7c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7ff fe00 	bl	800f3c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f7c8:	f107 0310 	add.w	r3, r7, #16
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	4620      	mov	r0, r4
 800f7d0:	f7fd fdc1 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800f7d4:	f107 0310 	add.w	r3, r7, #16
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7fe f908 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	332c      	adds	r3, #44	; 0x2c
 800f7e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7fe f97f 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	332c      	adds	r3, #44	; 0x2c
 800f7ee:	490b      	ldr	r1, [pc, #44]	; (800f81c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7fe f98b 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	332c      	adds	r3, #44	; 0x2c
 800f7fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7fe f973 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	332c      	adds	r3, #44	; 0x2c
 800f806:	4906      	ldr	r1, [pc, #24]	; (800f820 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800f808:	4618      	mov	r0, r3
 800f80a:	f7fe f97f 	bl	800db0c <_ZN12SimpleStringpLEPKc>
}
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	4618      	mov	r0, r3
 800f812:	371c      	adds	r7, #28
 800f814:	46bd      	mov	sp, r7
 800f816:	bd90      	pop	{r4, r7, pc}
 800f818:	08028d6c 	.word	0x08028d6c
 800f81c:	08024ec0 	.word	0x08024ec0
 800f820:	08024ec4 	.word	0x08024ec4

0800f824 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800f824:	b5b0      	push	{r4, r5, r7, lr}
 800f826:	b088      	sub	sp, #32
 800f828:	af00      	add	r7, sp, #0
 800f82a:	60f8      	str	r0, [r7, #12]
 800f82c:	60b9      	str	r1, [r7, #8]
 800f82e:	607a      	str	r2, [r7, #4]
 800f830:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f832:	68f8      	ldr	r0, [r7, #12]
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	687a      	ldr	r2, [r7, #4]
 800f838:	68b9      	ldr	r1, [r7, #8]
 800f83a:	f7ff fbbd 	bl	800efb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f83e:	4a1c      	ldr	r2, [pc, #112]	; (800f8b0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f84a:	68f9      	ldr	r1, [r7, #12]
 800f84c:	f107 0310 	add.w	r3, r7, #16
 800f850:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f852:	4618      	mov	r0, r3
 800f854:	f7ff fdb8 	bl	800f3c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f858:	f107 0310 	add.w	r3, r7, #16
 800f85c:	4619      	mov	r1, r3
 800f85e:	4620      	mov	r0, r4
 800f860:	f7fd fd79 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800f864:	f107 0310 	add.w	r3, r7, #16
 800f868:	4618      	mov	r0, r3
 800f86a:	f7fe f8c0 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f874:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f876:	f7fe f88d 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800f87a:	4605      	mov	r5, r0
 800f87c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f87e:	f7fe f889 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 800f882:	4603      	mov	r3, r0
 800f884:	f107 0018 	add.w	r0, r7, #24
 800f888:	462a      	mov	r2, r5
 800f88a:	490a      	ldr	r1, [pc, #40]	; (800f8b4 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800f88c:	f7fe fdb6 	bl	800e3fc <_Z16StringFromFormatPKcz>
 800f890:	f107 0318 	add.w	r3, r7, #24
 800f894:	4619      	mov	r1, r3
 800f896:	4620      	mov	r0, r4
 800f898:	f7fe f926 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 800f89c:	f107 0318 	add.w	r3, r7, #24
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7fe f8a4 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	3720      	adds	r7, #32
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bdb0      	pop	{r4, r5, r7, pc}
 800f8b0:	08028d40 	.word	0x08028d40
 800f8b4:	08024ed0 	.word	0x08024ed0

0800f8b8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800f8b8:	b590      	push	{r4, r7, lr}
 800f8ba:	b087      	sub	sp, #28
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	60f8      	str	r0, [r7, #12]
 800f8c0:	60b9      	str	r1, [r7, #8]
 800f8c2:	607a      	str	r2, [r7, #4]
 800f8c4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f8c6:	68f8      	ldr	r0, [r7, #12]
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	687a      	ldr	r2, [r7, #4]
 800f8cc:	68b9      	ldr	r1, [r7, #8]
 800f8ce:	f7ff fb73 	bl	800efb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f8d2:	4a1a      	ldr	r2, [pc, #104]	; (800f93c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f8de:	68f9      	ldr	r1, [r7, #12]
 800f8e0:	f107 0310 	add.w	r3, r7, #16
 800f8e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7ff fd6e 	bl	800f3c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f8ec:	f107 0310 	add.w	r3, r7, #16
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	f7fd fd2f 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800f8f8:	f107 0310 	add.w	r3, r7, #16
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f7fe f876 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	332c      	adds	r3, #44	; 0x2c
 800f906:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f908:	4618      	mov	r0, r3
 800f90a:	f7fe f8ed 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	332c      	adds	r3, #44	; 0x2c
 800f912:	490b      	ldr	r1, [pc, #44]	; (800f940 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800f914:	4618      	mov	r0, r3
 800f916:	f7fe f8f9 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	332c      	adds	r3, #44	; 0x2c
 800f91e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f920:	4618      	mov	r0, r3
 800f922:	f7fe f8e1 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	332c      	adds	r3, #44	; 0x2c
 800f92a:	4906      	ldr	r1, [pc, #24]	; (800f944 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800f92c:	4618      	mov	r0, r3
 800f92e:	f7fe f8ed 	bl	800db0c <_ZN12SimpleStringpLEPKc>
}
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	4618      	mov	r0, r3
 800f936:	371c      	adds	r7, #28
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd90      	pop	{r4, r7, pc}
 800f93c:	08028d14 	.word	0x08028d14
 800f940:	08024ec0 	.word	0x08024ec0
 800f944:	08024ec4 	.word	0x08024ec4

0800f948 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800f948:	b580      	push	{r7, lr}
 800f94a:	b084      	sub	sp, #16
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	60f8      	str	r0, [r7, #12]
 800f950:	60b9      	str	r1, [r7, #8]
 800f952:	607a      	str	r2, [r7, #4]
 800f954:	603b      	str	r3, [r7, #0]
 800f956:	68f8      	ldr	r0, [r7, #12]
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	687a      	ldr	r2, [r7, #4]
 800f95c:	68b9      	ldr	r1, [r7, #8]
 800f95e:	f7ff fb2b 	bl	800efb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f962:	4a07      	ldr	r2, [pc, #28]	; (800f980 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	332c      	adds	r3, #44	; 0x2c
 800f96c:	69b9      	ldr	r1, [r7, #24]
 800f96e:	4618      	mov	r0, r3
 800f970:	f7fd fcf1 	bl	800d356 <_ZN12SimpleStringaSERKS_>
}
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	4618      	mov	r0, r3
 800f978:	3710      	adds	r7, #16
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	080289d0 	.word	0x080289d0

0800f984 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800f984:	b590      	push	{r4, r7, lr}
 800f986:	b09d      	sub	sp, #116	; 0x74
 800f988:	af00      	add	r7, sp, #0
 800f98a:	60f8      	str	r0, [r7, #12]
 800f98c:	60b9      	str	r1, [r7, #8]
 800f98e:	607a      	str	r2, [r7, #4]
 800f990:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f992:	68f8      	ldr	r0, [r7, #12]
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	687a      	ldr	r2, [r7, #4]
 800f998:	68b9      	ldr	r1, [r7, #8]
 800f99a:	f7ff fb0d 	bl	800efb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f99e:	4a5d      	ldr	r2, [pc, #372]	; (800fb14 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f9aa:	68f9      	ldr	r1, [r7, #12]
 800f9ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f9b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7ff fd07 	bl	800f3c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f9ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f9be:	4619      	mov	r1, r3
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	f7fd fcc8 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800f9c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7fe f80f 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800f9d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f9d4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f7fe fae1 	bl	800dfa0 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800f9de:	f107 0320 	add.w	r3, r7, #32
 800f9e2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7fe fada 	bl	800dfa0 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800f9ec:	f107 0120 	add.w	r1, r7, #32
 800f9f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f9f4:	2220      	movs	r2, #32
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7fe f8b6 	bl	800db68 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f9fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fa00:	4945      	ldr	r1, [pc, #276]	; (800fb18 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7fd fc3b 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800fa08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fa0c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800fa10:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7fe f84c 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800fa1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fa1e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7fe fbd2 	bl	800e1cc <_Z30BracketsFormattedHexStringFroml>
 800fa28:	f107 0318 	add.w	r3, r7, #24
 800fa2c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800fa30:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7fe f83c 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800fa3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f7fd ffd5 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800fa44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7fd ffd0 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800fa4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7fd ffcb 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800fa58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fa5c:	492e      	ldr	r1, [pc, #184]	; (800fb18 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f7fd fc0d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800fa64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fa68:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fa6c:	f107 0120 	add.w	r1, r7, #32
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7fe f81e 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800fa76:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fa7a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7fe fba4 	bl	800e1cc <_Z30BracketsFormattedHexStringFroml>
 800fa84:	f107 0310 	add.w	r3, r7, #16
 800fa88:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800fa8c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fa90:	4618      	mov	r0, r3
 800fa92:	f7fe f80e 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800fa96:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f7fd ffa7 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800faa0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7fd ffa2 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800faaa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800faae:	4618      	mov	r0, r3
 800fab0:	f7fd ff9d 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800faba:	68f9      	ldr	r1, [r7, #12]
 800fabc:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800fac0:	f107 0318 	add.w	r3, r7, #24
 800fac4:	f107 0210 	add.w	r2, r7, #16
 800fac8:	f7ff fbb8 	bl	800f23c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800facc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fad0:	4619      	mov	r1, r3
 800fad2:	4620      	mov	r0, r4
 800fad4:	f7fe f808 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 800fad8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fadc:	4618      	mov	r0, r3
 800fade:	f7fd ff86 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800fae2:	f107 0310 	add.w	r3, r7, #16
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7fd ff81 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800faec:	f107 0318 	add.w	r3, r7, #24
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7fd ff7c 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800faf6:	f107 0320 	add.w	r3, r7, #32
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7fd ff77 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800fb00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb04:	4618      	mov	r0, r3
 800fb06:	f7fd ff72 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3774      	adds	r7, #116	; 0x74
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd90      	pop	{r4, r7, pc}
 800fb14:	08028ce8 	.word	0x08028ce8
 800fb18:	08024e24 	.word	0x08024e24

0800fb1c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800fb1c:	b590      	push	{r4, r7, lr}
 800fb1e:	b09d      	sub	sp, #116	; 0x74
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	60f8      	str	r0, [r7, #12]
 800fb24:	60b9      	str	r1, [r7, #8]
 800fb26:	607a      	str	r2, [r7, #4]
 800fb28:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800fb2a:	68f8      	ldr	r0, [r7, #12]
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	687a      	ldr	r2, [r7, #4]
 800fb30:	68b9      	ldr	r1, [r7, #8]
 800fb32:	f7ff fa41 	bl	800efb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fb36:	4a5d      	ldr	r2, [pc, #372]	; (800fcac <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fb42:	68f9      	ldr	r1, [r7, #12]
 800fb44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fb48:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7ff fc3b 	bl	800f3c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fb52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fb56:	4619      	mov	r1, r3
 800fb58:	4620      	mov	r0, r4
 800fb5a:	f7fd fbfc 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800fb5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7fd ff43 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800fb68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb6c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800fb70:	4618      	mov	r0, r3
 800fb72:	f7fe fc7d 	bl	800e470 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800fb76:	f107 0320 	add.w	r3, r7, #32
 800fb7a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7fe fc76 	bl	800e470 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800fb84:	f107 0120 	add.w	r1, r7, #32
 800fb88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb8c:	2220      	movs	r2, #32
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7fd ffea 	bl	800db68 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800fb94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fb98:	4945      	ldr	r1, [pc, #276]	; (800fcb0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7fd fb6f 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800fba0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fba4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800fba8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fbac:	4618      	mov	r0, r3
 800fbae:	f7fd ff80 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800fbb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fbb6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7fe fb22 	bl	800e204 <_Z30BracketsFormattedHexStringFromm>
 800fbc0:	f107 0318 	add.w	r3, r7, #24
 800fbc4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800fbc8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7fd ff70 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800fbd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7fd ff09 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800fbdc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7fd ff04 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800fbe6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7fd feff 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800fbf0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fbf4:	492e      	ldr	r1, [pc, #184]	; (800fcb0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f7fd fb41 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800fbfc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fc00:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fc04:	f107 0120 	add.w	r1, r7, #32
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f7fd ff52 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800fc0e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fc12:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7fe faf4 	bl	800e204 <_Z30BracketsFormattedHexStringFromm>
 800fc1c:	f107 0310 	add.w	r3, r7, #16
 800fc20:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800fc24:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7fd ff42 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800fc2e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7fd fedb 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800fc38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f7fd fed6 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800fc42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7fd fed1 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fc52:	68f9      	ldr	r1, [r7, #12]
 800fc54:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800fc58:	f107 0318 	add.w	r3, r7, #24
 800fc5c:	f107 0210 	add.w	r2, r7, #16
 800fc60:	f7ff faec 	bl	800f23c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800fc64:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fc68:	4619      	mov	r1, r3
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	f7fd ff3c 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 800fc70:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7fd feba 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800fc7a:	f107 0310 	add.w	r3, r7, #16
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7fd feb5 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800fc84:	f107 0318 	add.w	r3, r7, #24
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7fd feb0 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800fc8e:	f107 0320 	add.w	r3, r7, #32
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7fd feab 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800fc98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7fd fea6 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	4618      	mov	r0, r3
 800fca6:	3774      	adds	r7, #116	; 0x74
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd90      	pop	{r4, r7, pc}
 800fcac:	08028cbc 	.word	0x08028cbc
 800fcb0:	08024e24 	.word	0x08024e24

0800fcb4 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800fcb4:	b590      	push	{r4, r7, lr}
 800fcb6:	b09d      	sub	sp, #116	; 0x74
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	60f8      	str	r0, [r7, #12]
 800fcbc:	60b9      	str	r1, [r7, #8]
 800fcbe:	607a      	str	r2, [r7, #4]
 800fcc0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800fcc2:	68f8      	ldr	r0, [r7, #12]
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	687a      	ldr	r2, [r7, #4]
 800fcc8:	68b9      	ldr	r1, [r7, #8]
 800fcca:	f7ff f975 	bl	800efb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fcce:	4a5f      	ldr	r2, [pc, #380]	; (800fe4c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fcda:	68f9      	ldr	r1, [r7, #12]
 800fcdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fce0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7ff fb6f 	bl	800f3c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fcea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fcee:	4619      	mov	r1, r3
 800fcf0:	4620      	mov	r0, r4
 800fcf2:	f7fd fb30 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800fcf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7fd fe77 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800fd00:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800fd04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd08:	4611      	mov	r1, r2
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7fe f936 	bl	800df7c <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800fd10:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800fd14:	f107 0320 	add.w	r3, r7, #32
 800fd18:	4611      	mov	r1, r2
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7fe f92e 	bl	800df7c <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800fd20:	f107 0120 	add.w	r1, r7, #32
 800fd24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd28:	2220      	movs	r2, #32
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7fd ff1c 	bl	800db68 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800fd30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fd34:	4946      	ldr	r1, [pc, #280]	; (800fe50 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7fd faa1 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800fd3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fd40:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800fd44:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7fd feb2 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800fd4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fd52:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800fd56:	4611      	mov	r1, r2
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f7fe fa6f 	bl	800e23c <_Z30BracketsFormattedHexStringFroma>
 800fd5e:	f107 0318 	add.w	r3, r7, #24
 800fd62:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800fd66:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7fd fea1 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800fd70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fd74:	4618      	mov	r0, r3
 800fd76:	f7fd fe3a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800fd7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7fd fe35 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800fd84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f7fd fe30 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800fd8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fd92:	492f      	ldr	r1, [pc, #188]	; (800fe50 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800fd94:	4618      	mov	r0, r3
 800fd96:	f7fd fa72 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 800fd9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fd9e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fda2:	f107 0120 	add.w	r1, r7, #32
 800fda6:	4618      	mov	r0, r3
 800fda8:	f7fd fe83 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800fdac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fdb0:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800fdb4:	4611      	mov	r1, r2
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7fe fa40 	bl	800e23c <_Z30BracketsFormattedHexStringFroma>
 800fdbc:	f107 0310 	add.w	r3, r7, #16
 800fdc0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800fdc4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f7fd fe72 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 800fdce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fd fe0b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800fdd8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7fd fe06 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 800fde2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7fd fe01 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fdf2:	68f9      	ldr	r1, [r7, #12]
 800fdf4:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800fdf8:	f107 0318 	add.w	r3, r7, #24
 800fdfc:	f107 0210 	add.w	r2, r7, #16
 800fe00:	f7ff fa1c 	bl	800f23c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800fe04:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fe08:	4619      	mov	r1, r3
 800fe0a:	4620      	mov	r0, r4
 800fe0c:	f7fd fe6c 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 800fe10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fe14:	4618      	mov	r0, r3
 800fe16:	f7fd fdea 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800fe1a:	f107 0310 	add.w	r3, r7, #16
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7fd fde5 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800fe24:	f107 0318 	add.w	r3, r7, #24
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7fd fde0 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800fe2e:	f107 0320 	add.w	r3, r7, #32
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7fd fddb 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800fe38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7fd fdd6 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	4618      	mov	r0, r3
 800fe46:	3774      	adds	r7, #116	; 0x74
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd90      	pop	{r4, r7, pc}
 800fe4c:	08028c90 	.word	0x08028c90
 800fe50:	08024e24 	.word	0x08024e24

0800fe54 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800fe54:	b590      	push	{r4, r7, lr}
 800fe56:	b093      	sub	sp, #76	; 0x4c
 800fe58:	af02      	add	r7, sp, #8
 800fe5a:	60f8      	str	r0, [r7, #12]
 800fe5c:	60b9      	str	r1, [r7, #8]
 800fe5e:	607a      	str	r2, [r7, #4]
 800fe60:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800fe62:	68f8      	ldr	r0, [r7, #12]
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	687a      	ldr	r2, [r7, #4]
 800fe68:	68b9      	ldr	r1, [r7, #8]
 800fe6a:	f7ff f8a5 	bl	800efb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fe6e:	4a4a      	ldr	r2, [pc, #296]	; (800ff98 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fe7a:	68f9      	ldr	r1, [r7, #12]
 800fe7c:	f107 0320 	add.w	r3, r7, #32
 800fe80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7ff faa0 	bl	800f3c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fe88:	f107 0320 	add.w	r3, r7, #32
 800fe8c:	4619      	mov	r1, r3
 800fe8e:	4620      	mov	r0, r4
 800fe90:	f7fd fa61 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800fe94:	f107 0320 	add.w	r3, r7, #32
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f7fd fda8 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800fe9e:	f107 0318 	add.w	r3, r7, #24
 800fea2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fea4:	4618      	mov	r0, r3
 800fea6:	f7fe f83d 	bl	800df24 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800feaa:	f107 0310 	add.w	r3, r7, #16
 800feae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800feb0:	4618      	mov	r0, r3
 800feb2:	f7fe f837 	bl	800df24 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800febc:	68f9      	ldr	r1, [r7, #12]
 800febe:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800fec2:	f107 0310 	add.w	r3, r7, #16
 800fec6:	f107 0218 	add.w	r2, r7, #24
 800feca:	f7ff f9b7 	bl	800f23c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800fece:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fed2:	4619      	mov	r1, r3
 800fed4:	4620      	mov	r0, r4
 800fed6:	f7fd fe07 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 800feda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fede:	4618      	mov	r0, r3
 800fee0:	f7fd fd85 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800fee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d046      	beq.n	800ff78 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800feea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800feec:	2b00      	cmp	r3, #0
 800feee:	d043      	beq.n	800ff78 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800fef0:	2300      	movs	r3, #0
 800fef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fef4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fef8:	4413      	add	r3, r2
 800fefa:	781a      	ldrb	r2, [r3, #0]
 800fefc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fefe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff00:	440b      	add	r3, r1
 800ff02:	781b      	ldrb	r3, [r3, #0]
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d103      	bne.n	800ff10 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800ff08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff0a:	3301      	adds	r3, #1
 800ff0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff0e:	e7f1      	b.n	800fef4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800ff10:	2300      	movs	r3, #0
 800ff12:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff14:	f107 0310 	add.w	r3, r7, #16
 800ff18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7fd fecb 	bl	800dcb6 <_ZNK12SimpleString2atEj>
 800ff20:	4603      	mov	r3, r0
 800ff22:	461c      	mov	r4, r3
 800ff24:	f107 0318 	add.w	r3, r7, #24
 800ff28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7fd fec3 	bl	800dcb6 <_ZNK12SimpleString2atEj>
 800ff30:	4603      	mov	r3, r0
 800ff32:	429c      	cmp	r4, r3
 800ff34:	bf0c      	ite	eq
 800ff36:	2301      	moveq	r3, #1
 800ff38:	2300      	movne	r3, #0
 800ff3a:	b2db      	uxtb	r3, r3
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d003      	beq.n	800ff48 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800ff40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff42:	3301      	adds	r3, #1
 800ff44:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff46:	e7e5      	b.n	800ff14 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ff4e:	68f9      	ldr	r1, [r7, #12]
 800ff50:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800ff54:	f107 0210 	add.w	r2, r7, #16
 800ff58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff5a:	9300      	str	r3, [sp, #0]
 800ff5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff5e:	f7ff f987 	bl	800f270 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800ff62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ff66:	4619      	mov	r1, r3
 800ff68:	4620      	mov	r0, r4
 800ff6a:	f7fd fdbd 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 800ff6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7fd fd3b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800ff78:	f107 0310 	add.w	r3, r7, #16
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f7fd fd36 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800ff82:	f107 0318 	add.w	r3, r7, #24
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7fd fd31 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    }
}
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3744      	adds	r7, #68	; 0x44
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd90      	pop	{r4, r7, pc}
 800ff96:	bf00      	nop
 800ff98:	08028c64 	.word	0x08028c64

0800ff9c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800ff9c:	b590      	push	{r4, r7, lr}
 800ff9e:	b093      	sub	sp, #76	; 0x4c
 800ffa0:	af02      	add	r7, sp, #8
 800ffa2:	60f8      	str	r0, [r7, #12]
 800ffa4:	60b9      	str	r1, [r7, #8]
 800ffa6:	607a      	str	r2, [r7, #4]
 800ffa8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ffaa:	68f8      	ldr	r0, [r7, #12]
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	68b9      	ldr	r1, [r7, #8]
 800ffb2:	f7ff f801 	bl	800efb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ffb6:	4a55      	ldr	r2, [pc, #340]	; (801010c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ffc2:	68f9      	ldr	r1, [r7, #12]
 800ffc4:	f107 0320 	add.w	r3, r7, #32
 800ffc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7ff f9fc 	bl	800f3c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ffd0:	f107 0320 	add.w	r3, r7, #32
 800ffd4:	4619      	mov	r1, r3
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	f7fd f9bd 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 800ffdc:	f107 0320 	add.w	r3, r7, #32
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7fd fd04 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800ffe6:	f107 0318 	add.w	r3, r7, #24
 800ffea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7fd ff99 	bl	800df24 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800fff2:	f107 0310 	add.w	r3, r7, #16
 800fff6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fff8:	4618      	mov	r0, r3
 800fffa:	f7fd ff93 	bl	800df24 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010004:	68f9      	ldr	r1, [r7, #12]
 8010006:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801000a:	f107 0310 	add.w	r3, r7, #16
 801000e:	f107 0218 	add.w	r2, r7, #24
 8010012:	f7ff f913 	bl	800f23c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8010016:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801001a:	4619      	mov	r1, r3
 801001c:	4620      	mov	r0, r4
 801001e:	f7fd fd63 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 8010022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010026:	4618      	mov	r0, r3
 8010028:	f7fd fce1 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 801002c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801002e:	2b00      	cmp	r3, #0
 8010030:	d05c      	beq.n	80100ec <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 8010032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010034:	2b00      	cmp	r3, #0
 8010036:	d059      	beq.n	80100ec <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 8010038:	2300      	movs	r3, #0
 801003a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801003c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801003e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010040:	4413      	add	r3, r2
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	4618      	mov	r0, r3
 8010046:	f7fd f824 	bl	800d092 <_ZN12SimpleString7ToLowerEc>
 801004a:	4603      	mov	r3, r0
 801004c:	461c      	mov	r4, r3
 801004e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010052:	4413      	add	r3, r2
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	4618      	mov	r0, r3
 8010058:	f7fd f81b 	bl	800d092 <_ZN12SimpleString7ToLowerEc>
 801005c:	4603      	mov	r3, r0
 801005e:	429c      	cmp	r4, r3
 8010060:	bf0c      	ite	eq
 8010062:	2301      	moveq	r3, #1
 8010064:	2300      	movne	r3, #0
 8010066:	b2db      	uxtb	r3, r3
 8010068:	2b00      	cmp	r3, #0
 801006a:	d003      	beq.n	8010074 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 801006c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801006e:	3301      	adds	r3, #1
 8010070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010072:	e7e3      	b.n	801003c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 8010074:	2300      	movs	r3, #0
 8010076:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 8010078:	f107 0310 	add.w	r3, r7, #16
 801007c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801007e:	4618      	mov	r0, r3
 8010080:	f7fd fe19 	bl	800dcb6 <_ZNK12SimpleString2atEj>
 8010084:	4603      	mov	r3, r0
 8010086:	4618      	mov	r0, r3
 8010088:	f7fd f803 	bl	800d092 <_ZN12SimpleString7ToLowerEc>
 801008c:	4603      	mov	r3, r0
 801008e:	461c      	mov	r4, r3
 8010090:	f107 0318 	add.w	r3, r7, #24
 8010094:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010096:	4618      	mov	r0, r3
 8010098:	f7fd fe0d 	bl	800dcb6 <_ZNK12SimpleString2atEj>
 801009c:	4603      	mov	r3, r0
 801009e:	4618      	mov	r0, r3
 80100a0:	f7fc fff7 	bl	800d092 <_ZN12SimpleString7ToLowerEc>
 80100a4:	4603      	mov	r3, r0
 80100a6:	429c      	cmp	r4, r3
 80100a8:	bf0c      	ite	eq
 80100aa:	2301      	moveq	r3, #1
 80100ac:	2300      	movne	r3, #0
 80100ae:	b2db      	uxtb	r3, r3
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d003      	beq.n	80100bc <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 80100b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b6:	3301      	adds	r3, #1
 80100b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80100ba:	e7dd      	b.n	8010078 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80100c2:	68f9      	ldr	r1, [r7, #12]
 80100c4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80100c8:	f107 0210 	add.w	r2, r7, #16
 80100cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100ce:	9300      	str	r3, [sp, #0]
 80100d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d2:	f7ff f8cd 	bl	800f270 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 80100d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80100da:	4619      	mov	r1, r3
 80100dc:	4620      	mov	r0, r4
 80100de:	f7fd fd03 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 80100e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80100e6:	4618      	mov	r0, r3
 80100e8:	f7fd fc81 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 80100ec:	f107 0310 	add.w	r3, r7, #16
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7fd fc7c 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 80100f6:	f107 0318 	add.w	r3, r7, #24
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7fd fc77 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    }
}
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	4618      	mov	r0, r3
 8010104:	3744      	adds	r7, #68	; 0x44
 8010106:	46bd      	mov	sp, r7
 8010108:	bd90      	pop	{r4, r7, pc}
 801010a:	bf00      	nop
 801010c:	08028c38 	.word	0x08028c38

08010110 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 8010110:	b5b0      	push	{r4, r5, r7, lr}
 8010112:	b092      	sub	sp, #72	; 0x48
 8010114:	af02      	add	r7, sp, #8
 8010116:	60f8      	str	r0, [r7, #12]
 8010118:	60b9      	str	r1, [r7, #8]
 801011a:	607a      	str	r2, [r7, #4]
 801011c:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 801011e:	68f8      	ldr	r0, [r7, #12]
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	687a      	ldr	r2, [r7, #4]
 8010124:	68b9      	ldr	r1, [r7, #8]
 8010126:	f7fe ff47 	bl	800efb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 801012a:	4a40      	ldr	r2, [pc, #256]	; (801022c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010136:	68f9      	ldr	r1, [r7, #12]
 8010138:	f107 031c 	add.w	r3, r7, #28
 801013c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801013e:	4618      	mov	r0, r3
 8010140:	f7ff f942 	bl	800f3c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010144:	f107 031c 	add.w	r3, r7, #28
 8010148:	4619      	mov	r1, r3
 801014a:	4620      	mov	r0, r4
 801014c:	f7fd f903 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 8010150:	f107 031c 	add.w	r3, r7, #28
 8010154:	4618      	mov	r0, r3
 8010156:	f7fd fc4a 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 801015a:	f107 0314 	add.w	r3, r7, #20
 801015e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010160:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010162:	4618      	mov	r0, r3
 8010164:	f7fe fa4c 	bl	800e600 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801016e:	68fd      	ldr	r5, [r7, #12]
 8010170:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010174:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010176:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010178:	4618      	mov	r0, r3
 801017a:	f7fe fa41 	bl	800e600 <_Z22StringFromBinaryOrNullPKhj>
 801017e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010182:	f107 0314 	add.w	r3, r7, #20
 8010186:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801018a:	4629      	mov	r1, r5
 801018c:	f7ff f856 	bl	800f23c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8010190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010194:	4619      	mov	r1, r3
 8010196:	4620      	mov	r0, r4
 8010198:	f7fd fca6 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801019c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7fd fc24 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80101a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7fd fc1f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 80101b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d02f      	beq.n	8010216 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 80101b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d02c      	beq.n	8010216 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 80101bc:	2300      	movs	r3, #0
 80101be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80101c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101c4:	4413      	add	r3, r2
 80101c6:	781a      	ldrb	r2, [r3, #0]
 80101c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80101ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101cc:	440b      	add	r3, r1
 80101ce:	781b      	ldrb	r3, [r3, #0]
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d103      	bne.n	80101dc <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 80101d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101d6:	3301      	adds	r3, #1
 80101d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101da:	e7f1      	b.n	80101c0 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80101e2:	68f9      	ldr	r1, [r7, #12]
 80101e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80101e6:	4613      	mov	r3, r2
 80101e8:	005b      	lsls	r3, r3, #1
 80101ea:	4413      	add	r3, r2
 80101ec:	1c5d      	adds	r5, r3, #1
 80101ee:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80101f2:	f107 0214 	add.w	r2, r7, #20
 80101f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101f8:	9300      	str	r3, [sp, #0]
 80101fa:	462b      	mov	r3, r5
 80101fc:	f7ff f838 	bl	800f270 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8010200:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010204:	4619      	mov	r1, r3
 8010206:	4620      	mov	r0, r4
 8010208:	f7fd fc6e 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801020c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010210:	4618      	mov	r0, r3
 8010212:	f7fd fbec 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 8010216:	f107 0314 	add.w	r3, r7, #20
 801021a:	4618      	mov	r0, r3
 801021c:	f7fd fbe7 	bl	800d9ee <_ZN12SimpleStringD1Ev>
	}
}
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	4618      	mov	r0, r3
 8010224:	3740      	adds	r7, #64	; 0x40
 8010226:	46bd      	mov	sp, r7
 8010228:	bdb0      	pop	{r4, r5, r7, pc}
 801022a:	bf00      	nop
 801022c:	08028c0c 	.word	0x08028c0c

08010230 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 8010230:	b5b0      	push	{r4, r5, r7, lr}
 8010232:	b08c      	sub	sp, #48	; 0x30
 8010234:	af00      	add	r7, sp, #0
 8010236:	60f8      	str	r0, [r7, #12]
 8010238:	60b9      	str	r1, [r7, #8]
 801023a:	607a      	str	r2, [r7, #4]
 801023c:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 801023e:	68f8      	ldr	r0, [r7, #12]
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	687a      	ldr	r2, [r7, #4]
 8010244:	68b9      	ldr	r1, [r7, #8]
 8010246:	f7fe feb7 	bl	800efb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 801024a:	4a26      	ldr	r2, [pc, #152]	; (80102e4 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010256:	68f9      	ldr	r1, [r7, #12]
 8010258:	f107 0310 	add.w	r3, r7, #16
 801025c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801025e:	4618      	mov	r0, r3
 8010260:	f7ff f8b2 	bl	800f3c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010264:	f107 0310 	add.w	r3, r7, #16
 8010268:	4619      	mov	r1, r3
 801026a:	4620      	mov	r0, r4
 801026c:	f7fd f873 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 8010270:	f107 0310 	add.w	r3, r7, #16
 8010274:	4618      	mov	r0, r3
 8010276:	f7fd fbba 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010280:	68fd      	ldr	r5, [r7, #12]
 8010282:	f107 0020 	add.w	r0, r7, #32
 8010286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010288:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801028a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801028c:	f7fe fa24 	bl	800e6d8 <_Z20StringFromMaskedBitsmmj>
 8010290:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8010294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010296:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010298:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801029a:	f7fe fa1d 	bl	800e6d8 <_Z20StringFromMaskedBitsmmj>
 801029e:	f107 0018 	add.w	r0, r7, #24
 80102a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80102a6:	f107 0220 	add.w	r2, r7, #32
 80102aa:	4629      	mov	r1, r5
 80102ac:	f7fe ffc6 	bl	800f23c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80102b0:	f107 0318 	add.w	r3, r7, #24
 80102b4:	4619      	mov	r1, r3
 80102b6:	4620      	mov	r0, r4
 80102b8:	f7fd fc16 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 80102bc:	f107 0318 	add.w	r3, r7, #24
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7fd fb94 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80102c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7fd fb8f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80102d0:	f107 0320 	add.w	r3, r7, #32
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7fd fb8a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	4618      	mov	r0, r3
 80102de:	3730      	adds	r7, #48	; 0x30
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bdb0      	pop	{r4, r5, r7, pc}
 80102e4:	08028be0 	.word	0x08028be0

080102e8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 80102e8:	b590      	push	{r4, r7, lr}
 80102ea:	b089      	sub	sp, #36	; 0x24
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	60f8      	str	r0, [r7, #12]
 80102f0:	60b9      	str	r1, [r7, #8]
 80102f2:	607a      	str	r2, [r7, #4]
 80102f4:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 80102f6:	68f8      	ldr	r0, [r7, #12]
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	687a      	ldr	r2, [r7, #4]
 80102fc:	68b9      	ldr	r1, [r7, #8]
 80102fe:	f7fe fe5b 	bl	800efb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010302:	4a1a      	ldr	r2, [pc, #104]	; (801036c <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801030e:	68f9      	ldr	r1, [r7, #12]
 8010310:	f107 0310 	add.w	r3, r7, #16
 8010314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010316:	4618      	mov	r0, r3
 8010318:	f7ff f856 	bl	800f3c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 801031c:	f107 0310 	add.w	r3, r7, #16
 8010320:	4619      	mov	r1, r3
 8010322:	4620      	mov	r0, r4
 8010324:	f7fd f817 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 8010328:	f107 0310 	add.w	r3, r7, #16
 801032c:	4618      	mov	r0, r3
 801032e:	f7fd fb5e 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801033a:	f7fd fb2b 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801033e:	4602      	mov	r2, r0
 8010340:	f107 0318 	add.w	r3, r7, #24
 8010344:	490a      	ldr	r1, [pc, #40]	; (8010370 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 8010346:	4618      	mov	r0, r3
 8010348:	f7fe f858 	bl	800e3fc <_Z16StringFromFormatPKcz>
 801034c:	f107 0318 	add.w	r3, r7, #24
 8010350:	4619      	mov	r1, r3
 8010352:	4620      	mov	r0, r4
 8010354:	f7fd fbc8 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 8010358:	f107 0318 	add.w	r3, r7, #24
 801035c:	4618      	mov	r0, r3
 801035e:	f7fd fb46 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	4618      	mov	r0, r3
 8010366:	3724      	adds	r7, #36	; 0x24
 8010368:	46bd      	mov	sp, r7
 801036a:	bd90      	pop	{r4, r7, pc}
 801036c:	08028bb4 	.word	0x08028bb4
 8010370:	08024ef4 	.word	0x08024ef4

08010374 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 8010374:	b580      	push	{r7, lr}
 8010376:	b082      	sub	sp, #8
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
 801037c:	4a05      	ldr	r2, [pc, #20]	; (8010394 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	601a      	str	r2, [r3, #0]
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	4618      	mov	r0, r3
 8010386:	f7fe fe99 	bl	800f0bc <_ZN11TestFailureD1Ev>
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	4618      	mov	r0, r3
 801038e:	3708      	adds	r7, #8
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}
 8010394:	08028bb4 	.word	0x08028bb4

08010398 <_ZN25FeatureUnsupportedFailureD0Ev>:
 8010398:	b580      	push	{r7, lr}
 801039a:	b082      	sub	sp, #8
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f7ff ffe7 	bl	8010374 <_ZN25FeatureUnsupportedFailureD1Ev>
 80103a6:	2134      	movs	r1, #52	; 0x34
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f7fa fbb9 	bl	800ab20 <_ZdlPvj>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	4618      	mov	r0, r3
 80103b2:	3708      	adds	r7, #8
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b082      	sub	sp, #8
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	4a05      	ldr	r2, [pc, #20]	; (80103d8 <_ZN16BitsEqualFailureD1Ev+0x20>)
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	601a      	str	r2, [r3, #0]
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7fe fe77 	bl	800f0bc <_ZN11TestFailureD1Ev>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	4618      	mov	r0, r3
 80103d2:	3708      	adds	r7, #8
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}
 80103d8:	08028be0 	.word	0x08028be0

080103dc <_ZN16BitsEqualFailureD0Ev>:
 80103dc:	b580      	push	{r7, lr}
 80103de:	b082      	sub	sp, #8
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f7ff ffe7 	bl	80103b8 <_ZN16BitsEqualFailureD1Ev>
 80103ea:	2134      	movs	r1, #52	; 0x34
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f7fa fb97 	bl	800ab20 <_ZdlPvj>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	4618      	mov	r0, r3
 80103f6:	3708      	adds	r7, #8
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}

080103fc <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	4a05      	ldr	r2, [pc, #20]	; (801041c <_ZN18BinaryEqualFailureD1Ev+0x20>)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	601a      	str	r2, [r3, #0]
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	4618      	mov	r0, r3
 801040e:	f7fe fe55 	bl	800f0bc <_ZN11TestFailureD1Ev>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	4618      	mov	r0, r3
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}
 801041c:	08028c0c 	.word	0x08028c0c

08010420 <_ZN18BinaryEqualFailureD0Ev>:
 8010420:	b580      	push	{r7, lr}
 8010422:	b082      	sub	sp, #8
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f7ff ffe7 	bl	80103fc <_ZN18BinaryEqualFailureD1Ev>
 801042e:	2134      	movs	r1, #52	; 0x34
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f7fa fb75 	bl	800ab20 <_ZdlPvj>
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	4618      	mov	r0, r3
 801043a:	3708      	adds	r7, #8
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}

08010440 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	4a05      	ldr	r2, [pc, #20]	; (8010460 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	601a      	str	r2, [r3, #0]
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	4618      	mov	r0, r3
 8010452:	f7fe fe33 	bl	800f0bc <_ZN11TestFailureD1Ev>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	4618      	mov	r0, r3
 801045a:	3708      	adds	r7, #8
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}
 8010460:	08028c38 	.word	0x08028c38

08010464 <_ZN24StringEqualNoCaseFailureD0Ev>:
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f7ff ffe7 	bl	8010440 <_ZN24StringEqualNoCaseFailureD1Ev>
 8010472:	2134      	movs	r1, #52	; 0x34
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f7fa fb53 	bl	800ab20 <_ZdlPvj>
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	4618      	mov	r0, r3
 801047e:	3708      	adds	r7, #8
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}

08010484 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	4a05      	ldr	r2, [pc, #20]	; (80104a4 <_ZN18StringEqualFailureD1Ev+0x20>)
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	601a      	str	r2, [r3, #0]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	4618      	mov	r0, r3
 8010496:	f7fe fe11 	bl	800f0bc <_ZN11TestFailureD1Ev>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	4618      	mov	r0, r3
 801049e:	3708      	adds	r7, #8
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}
 80104a4:	08028c64 	.word	0x08028c64

080104a8 <_ZN18StringEqualFailureD0Ev>:
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b082      	sub	sp, #8
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f7ff ffe7 	bl	8010484 <_ZN18StringEqualFailureD1Ev>
 80104b6:	2134      	movs	r1, #52	; 0x34
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f7fa fb31 	bl	800ab20 <_ZdlPvj>
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	4618      	mov	r0, r3
 80104c2:	3708      	adds	r7, #8
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}

080104c8 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b082      	sub	sp, #8
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
 80104d0:	4a05      	ldr	r2, [pc, #20]	; (80104e8 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	601a      	str	r2, [r3, #0]
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	4618      	mov	r0, r3
 80104da:	f7fe fdef 	bl	800f0bc <_ZN11TestFailureD1Ev>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	4618      	mov	r0, r3
 80104e2:	3708      	adds	r7, #8
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}
 80104e8:	08028c90 	.word	0x08028c90

080104ec <_ZN23SignedBytesEqualFailureD0Ev>:
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f7ff ffe7 	bl	80104c8 <_ZN23SignedBytesEqualFailureD1Ev>
 80104fa:	2134      	movs	r1, #52	; 0x34
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f7fa fb0f 	bl	800ab20 <_ZdlPvj>
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	4618      	mov	r0, r3
 8010506:	3708      	adds	r7, #8
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}

0801050c <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 801050c:	b580      	push	{r7, lr}
 801050e:	b082      	sub	sp, #8
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	4a05      	ldr	r2, [pc, #20]	; (801052c <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	601a      	str	r2, [r3, #0]
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	4618      	mov	r0, r3
 801051e:	f7fe fdcd 	bl	800f0bc <_ZN11TestFailureD1Ev>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	4618      	mov	r0, r3
 8010526:	3708      	adds	r7, #8
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}
 801052c:	08028cbc 	.word	0x08028cbc

08010530 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 8010530:	b580      	push	{r7, lr}
 8010532:	b082      	sub	sp, #8
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f7ff ffe7 	bl	801050c <_ZN25UnsignedLongsEqualFailureD1Ev>
 801053e:	2134      	movs	r1, #52	; 0x34
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f7fa faed 	bl	800ab20 <_ZdlPvj>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	4618      	mov	r0, r3
 801054a:	3708      	adds	r7, #8
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}

08010550 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 8010550:	b580      	push	{r7, lr}
 8010552:	b082      	sub	sp, #8
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
 8010558:	4a05      	ldr	r2, [pc, #20]	; (8010570 <_ZN17LongsEqualFailureD1Ev+0x20>)
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	601a      	str	r2, [r3, #0]
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	4618      	mov	r0, r3
 8010562:	f7fe fdab 	bl	800f0bc <_ZN11TestFailureD1Ev>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	4618      	mov	r0, r3
 801056a:	3708      	adds	r7, #8
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}
 8010570:	08028ce8 	.word	0x08028ce8

08010574 <_ZN17LongsEqualFailureD0Ev>:
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f7ff ffe7 	bl	8010550 <_ZN17LongsEqualFailureD1Ev>
 8010582:	2134      	movs	r1, #52	; 0x34
 8010584:	6878      	ldr	r0, [r7, #4]
 8010586:	f7fa facb 	bl	800ab20 <_ZdlPvj>
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	4618      	mov	r0, r3
 801058e:	3708      	adds	r7, #8
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}

08010594 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 8010594:	b580      	push	{r7, lr}
 8010596:	b082      	sub	sp, #8
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	4a05      	ldr	r2, [pc, #20]	; (80105b4 <_ZN12CheckFailureD1Ev+0x20>)
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	601a      	str	r2, [r3, #0]
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7fe fd89 	bl	800f0bc <_ZN11TestFailureD1Ev>
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	4618      	mov	r0, r3
 80105ae:	3708      	adds	r7, #8
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}
 80105b4:	08028d14 	.word	0x08028d14

080105b8 <_ZN12CheckFailureD0Ev>:
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b082      	sub	sp, #8
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f7ff ffe7 	bl	8010594 <_ZN12CheckFailureD1Ev>
 80105c6:	2134      	movs	r1, #52	; 0x34
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f7fa faa9 	bl	800ab20 <_ZdlPvj>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	4618      	mov	r0, r3
 80105d2:	3708      	adds	r7, #8
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 80105d8:	b580      	push	{r7, lr}
 80105da:	b082      	sub	sp, #8
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
 80105e0:	4a05      	ldr	r2, [pc, #20]	; (80105f8 <_ZN15ContainsFailureD1Ev+0x20>)
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	601a      	str	r2, [r3, #0]
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7fe fd67 	bl	800f0bc <_ZN11TestFailureD1Ev>
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	4618      	mov	r0, r3
 80105f2:	3708      	adds	r7, #8
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd80      	pop	{r7, pc}
 80105f8:	08028d40 	.word	0x08028d40

080105fc <_ZN15ContainsFailureD0Ev>:
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f7ff ffe7 	bl	80105d8 <_ZN15ContainsFailureD1Ev>
 801060a:	2134      	movs	r1, #52	; 0x34
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f7fa fa87 	bl	800ab20 <_ZdlPvj>
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	4618      	mov	r0, r3
 8010616:	3708      	adds	r7, #8
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 801061c:	b580      	push	{r7, lr}
 801061e:	b082      	sub	sp, #8
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	4a05      	ldr	r2, [pc, #20]	; (801063c <_ZN17ComparisonFailureD1Ev+0x20>)
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	601a      	str	r2, [r3, #0]
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	4618      	mov	r0, r3
 801062e:	f7fe fd45 	bl	800f0bc <_ZN11TestFailureD1Ev>
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	4618      	mov	r0, r3
 8010636:	3708      	adds	r7, #8
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}
 801063c:	08028d6c 	.word	0x08028d6c

08010640 <_ZN17ComparisonFailureD0Ev>:
 8010640:	b580      	push	{r7, lr}
 8010642:	b082      	sub	sp, #8
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f7ff ffe7 	bl	801061c <_ZN17ComparisonFailureD1Ev>
 801064e:	2134      	movs	r1, #52	; 0x34
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f7fa fa65 	bl	800ab20 <_ZdlPvj>
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	4618      	mov	r0, r3
 801065a:	3708      	adds	r7, #8
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}

08010660 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 8010660:	b580      	push	{r7, lr}
 8010662:	b082      	sub	sp, #8
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	4a05      	ldr	r2, [pc, #20]	; (8010680 <_ZN17CheckEqualFailureD1Ev+0x20>)
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	601a      	str	r2, [r3, #0]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	4618      	mov	r0, r3
 8010672:	f7fe fd23 	bl	800f0bc <_ZN11TestFailureD1Ev>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	4618      	mov	r0, r3
 801067a:	3708      	adds	r7, #8
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}
 8010680:	08028d98 	.word	0x08028d98

08010684 <_ZN17CheckEqualFailureD0Ev>:
 8010684:	b580      	push	{r7, lr}
 8010686:	b082      	sub	sp, #8
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f7ff ffe7 	bl	8010660 <_ZN17CheckEqualFailureD1Ev>
 8010692:	2134      	movs	r1, #52	; 0x34
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f7fa fa43 	bl	800ab20 <_ZdlPvj>
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	4618      	mov	r0, r3
 801069e:	3708      	adds	r7, #8
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}

080106a4 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b082      	sub	sp, #8
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	4a05      	ldr	r2, [pc, #20]	; (80106c4 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	601a      	str	r2, [r3, #0]
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7fe fd01 	bl	800f0bc <_ZN11TestFailureD1Ev>
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	4618      	mov	r0, r3
 80106be:	3708      	adds	r7, #8
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}
 80106c4:	08028dc4 	.word	0x08028dc4

080106c8 <_ZN19DoublesEqualFailureD0Ev>:
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b082      	sub	sp, #8
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	6878      	ldr	r0, [r7, #4]
 80106d2:	f7ff ffe7 	bl	80106a4 <_ZN19DoublesEqualFailureD1Ev>
 80106d6:	2134      	movs	r1, #52	; 0x34
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f7fa fa21 	bl	800ab20 <_ZdlPvj>
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	4618      	mov	r0, r3
 80106e2:	3708      	adds	r7, #8
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}

080106e8 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b082      	sub	sp, #8
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	4a05      	ldr	r2, [pc, #20]	; (8010708 <_ZN13EqualsFailureD1Ev+0x20>)
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	601a      	str	r2, [r3, #0]
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	4618      	mov	r0, r3
 80106fa:	f7fe fcdf 	bl	800f0bc <_ZN11TestFailureD1Ev>
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	4618      	mov	r0, r3
 8010702:	3708      	adds	r7, #8
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}
 8010708:	08028df0 	.word	0x08028df0

0801070c <_ZN13EqualsFailureD0Ev>:
 801070c:	b580      	push	{r7, lr}
 801070e:	b082      	sub	sp, #8
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f7ff ffe7 	bl	80106e8 <_ZN13EqualsFailureD1Ev>
 801071a:	2134      	movs	r1, #52	; 0x34
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f7fa f9ff 	bl	800ab20 <_ZdlPvj>
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	4618      	mov	r0, r3
 8010726:	3708      	adds	r7, #8
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}

0801072c <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 801072c:	b5b0      	push	{r4, r5, r7, lr}
 801072e:	b086      	sub	sp, #24
 8010730:	af02      	add	r7, sp, #8
 8010732:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 8010734:	4b0d      	ldr	r3, [pc, #52]	; (801076c <_ZL13checkedMallocj+0x40>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	4798      	blx	r3
 801073c:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d10e      	bne.n	8010762 <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 8010744:	f004 f97e 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8010748:	4604      	mov	r4, r0
 801074a:	6823      	ldr	r3, [r4, #0]
 801074c:	3368      	adds	r3, #104	; 0x68
 801074e:	681d      	ldr	r5, [r3, #0]
 8010750:	f004 f988 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8010754:	4603      	mov	r3, r0
 8010756:	9300      	str	r3, [sp, #0]
 8010758:	2325      	movs	r3, #37	; 0x25
 801075a:	4a05      	ldr	r2, [pc, #20]	; (8010770 <_ZL13checkedMallocj+0x44>)
 801075c:	4905      	ldr	r1, [pc, #20]	; (8010774 <_ZL13checkedMallocj+0x48>)
 801075e:	4620      	mov	r0, r4
 8010760:	47a8      	blx	r5
    return mem;
 8010762:	68fb      	ldr	r3, [r7, #12]
}
 8010764:	4618      	mov	r0, r3
 8010766:	3710      	adds	r7, #16
 8010768:	46bd      	mov	sp, r7
 801076a:	bdb0      	pop	{r4, r5, r7, pc}
 801076c:	200000c8 	.word	0x200000c8
 8010770:	08024f68 	.word	0x08024f68
 8010774:	08024f88 	.word	0x08024f88

08010778 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 8010778:	b580      	push	{r7, lr}
 801077a:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 801077c:	4b04      	ldr	r3, [pc, #16]	; (8010790 <_Z22getCurrentNewAllocatorv+0x18>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d101      	bne.n	8010788 <_Z22getCurrentNewAllocatorv+0x10>
 8010784:	f000 f806 	bl	8010794 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 8010788:	4b01      	ldr	r3, [pc, #4]	; (8010790 <_Z22getCurrentNewAllocatorv+0x18>)
 801078a:	681b      	ldr	r3, [r3, #0]
}
 801078c:	4618      	mov	r0, r3
 801078e:	bd80      	pop	{r7, pc}
 8010790:	20000924 	.word	0x20000924

08010794 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 8010794:	b580      	push	{r7, lr}
 8010796:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 8010798:	f000 f810 	bl	80107bc <_Z19defaultNewAllocatorv>
 801079c:	4603      	mov	r3, r0
 801079e:	4a02      	ldr	r2, [pc, #8]	; (80107a8 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 80107a0:	6013      	str	r3, [r2, #0]
}
 80107a2:	bf00      	nop
 80107a4:	bd80      	pop	{r7, pc}
 80107a6:	bf00      	nop
 80107a8:	20000924 	.word	0x20000924

080107ac <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 80107ac:	b580      	push	{r7, lr}
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	4801      	ldr	r0, [pc, #4]	; (80107b8 <__tcf_0+0xc>)
 80107b2:	f000 f909 	bl	80109c8 <_ZN19TestMemoryAllocatorD1Ev>
 80107b6:	bd80      	pop	{r7, pc}
 80107b8:	20000930 	.word	0x20000930

080107bc <_Z19defaultNewAllocatorv>:
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 80107c0:	4b13      	ldr	r3, [pc, #76]	; (8010810 <_Z19defaultNewAllocatorv+0x54>)
 80107c2:	781b      	ldrb	r3, [r3, #0]
 80107c4:	f3bf 8f5b 	dmb	ish
 80107c8:	b2db      	uxtb	r3, r3
 80107ca:	f003 0301 	and.w	r3, r3, #1
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	bf0c      	ite	eq
 80107d2:	2301      	moveq	r3, #1
 80107d4:	2300      	movne	r3, #0
 80107d6:	b2db      	uxtb	r3, r3
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d016      	beq.n	801080a <_Z19defaultNewAllocatorv+0x4e>
 80107dc:	480c      	ldr	r0, [pc, #48]	; (8010810 <_Z19defaultNewAllocatorv+0x54>)
 80107de:	f00f fc0f 	bl	8020000 <__cxa_guard_acquire>
 80107e2:	4603      	mov	r3, r0
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	bf14      	ite	ne
 80107e8:	2301      	movne	r3, #1
 80107ea:	2300      	moveq	r3, #0
 80107ec:	b2db      	uxtb	r3, r3
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d00b      	beq.n	801080a <_Z19defaultNewAllocatorv+0x4e>
 80107f2:	4b08      	ldr	r3, [pc, #32]	; (8010814 <_Z19defaultNewAllocatorv+0x58>)
 80107f4:	4a08      	ldr	r2, [pc, #32]	; (8010818 <_Z19defaultNewAllocatorv+0x5c>)
 80107f6:	4909      	ldr	r1, [pc, #36]	; (801081c <_Z19defaultNewAllocatorv+0x60>)
 80107f8:	4809      	ldr	r0, [pc, #36]	; (8010820 <_Z19defaultNewAllocatorv+0x64>)
 80107fa:	f000 f8c5 	bl	8010988 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 80107fe:	4804      	ldr	r0, [pc, #16]	; (8010810 <_Z19defaultNewAllocatorv+0x54>)
 8010800:	f00f fc0a 	bl	8020018 <__cxa_guard_release>
 8010804:	4807      	ldr	r0, [pc, #28]	; (8010824 <_Z19defaultNewAllocatorv+0x68>)
 8010806:	f00f fc2e 	bl	8020066 <atexit>
    return &allocator;
 801080a:	4b05      	ldr	r3, [pc, #20]	; (8010820 <_Z19defaultNewAllocatorv+0x64>)
}
 801080c:	4618      	mov	r0, r3
 801080e:	bd80      	pop	{r7, pc}
 8010810:	20000944 	.word	0x20000944
 8010814:	08024fa8 	.word	0x08024fa8
 8010818:	08024fb0 	.word	0x08024fb0
 801081c:	08024fb4 	.word	0x08024fb4
 8010820:	20000930 	.word	0x20000930
 8010824:	080107ad 	.word	0x080107ad

08010828 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 8010828:	b580      	push	{r7, lr}
 801082a:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 801082c:	4b04      	ldr	r3, [pc, #16]	; (8010840 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d101      	bne.n	8010838 <_Z27getCurrentNewArrayAllocatorv+0x10>
 8010834:	f000 f806 	bl	8010844 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 8010838:	4b01      	ldr	r3, [pc, #4]	; (8010840 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 801083a:	681b      	ldr	r3, [r3, #0]
}
 801083c:	4618      	mov	r0, r3
 801083e:	bd80      	pop	{r7, pc}
 8010840:	20000928 	.word	0x20000928

08010844 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 8010844:	b580      	push	{r7, lr}
 8010846:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 8010848:	f000 f810 	bl	801086c <_Z24defaultNewArrayAllocatorv>
 801084c:	4603      	mov	r3, r0
 801084e:	4a02      	ldr	r2, [pc, #8]	; (8010858 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 8010850:	6013      	str	r3, [r2, #0]
}
 8010852:	bf00      	nop
 8010854:	bd80      	pop	{r7, pc}
 8010856:	bf00      	nop
 8010858:	20000928 	.word	0x20000928

0801085c <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 801085c:	b580      	push	{r7, lr}
 801085e:	af00      	add	r7, sp, #0
 8010860:	4801      	ldr	r0, [pc, #4]	; (8010868 <__tcf_1+0xc>)
 8010862:	f000 f8b1 	bl	80109c8 <_ZN19TestMemoryAllocatorD1Ev>
 8010866:	bd80      	pop	{r7, pc}
 8010868:	20000948 	.word	0x20000948

0801086c <_Z24defaultNewArrayAllocatorv>:
{
 801086c:	b580      	push	{r7, lr}
 801086e:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 8010870:	4b13      	ldr	r3, [pc, #76]	; (80108c0 <_Z24defaultNewArrayAllocatorv+0x54>)
 8010872:	781b      	ldrb	r3, [r3, #0]
 8010874:	f3bf 8f5b 	dmb	ish
 8010878:	b2db      	uxtb	r3, r3
 801087a:	f003 0301 	and.w	r3, r3, #1
 801087e:	2b00      	cmp	r3, #0
 8010880:	bf0c      	ite	eq
 8010882:	2301      	moveq	r3, #1
 8010884:	2300      	movne	r3, #0
 8010886:	b2db      	uxtb	r3, r3
 8010888:	2b00      	cmp	r3, #0
 801088a:	d016      	beq.n	80108ba <_Z24defaultNewArrayAllocatorv+0x4e>
 801088c:	480c      	ldr	r0, [pc, #48]	; (80108c0 <_Z24defaultNewArrayAllocatorv+0x54>)
 801088e:	f00f fbb7 	bl	8020000 <__cxa_guard_acquire>
 8010892:	4603      	mov	r3, r0
 8010894:	2b00      	cmp	r3, #0
 8010896:	bf14      	ite	ne
 8010898:	2301      	movne	r3, #1
 801089a:	2300      	moveq	r3, #0
 801089c:	b2db      	uxtb	r3, r3
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d00b      	beq.n	80108ba <_Z24defaultNewArrayAllocatorv+0x4e>
 80108a2:	4b08      	ldr	r3, [pc, #32]	; (80108c4 <_Z24defaultNewArrayAllocatorv+0x58>)
 80108a4:	4a08      	ldr	r2, [pc, #32]	; (80108c8 <_Z24defaultNewArrayAllocatorv+0x5c>)
 80108a6:	4909      	ldr	r1, [pc, #36]	; (80108cc <_Z24defaultNewArrayAllocatorv+0x60>)
 80108a8:	4809      	ldr	r0, [pc, #36]	; (80108d0 <_Z24defaultNewArrayAllocatorv+0x64>)
 80108aa:	f000 f86d 	bl	8010988 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 80108ae:	4804      	ldr	r0, [pc, #16]	; (80108c0 <_Z24defaultNewArrayAllocatorv+0x54>)
 80108b0:	f00f fbb2 	bl	8020018 <__cxa_guard_release>
 80108b4:	4807      	ldr	r0, [pc, #28]	; (80108d4 <_Z24defaultNewArrayAllocatorv+0x68>)
 80108b6:	f00f fbd6 	bl	8020066 <atexit>
    return &allocator;
 80108ba:	4b05      	ldr	r3, [pc, #20]	; (80108d0 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 80108bc:	4618      	mov	r0, r3
 80108be:	bd80      	pop	{r7, pc}
 80108c0:	2000095c 	.word	0x2000095c
 80108c4:	08024fcc 	.word	0x08024fcc
 80108c8:	08024fd8 	.word	0x08024fd8
 80108cc:	08024fe0 	.word	0x08024fe0
 80108d0:	20000948 	.word	0x20000948
 80108d4:	0801085d 	.word	0x0801085d

080108d8 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 80108dc:	4b04      	ldr	r3, [pc, #16]	; (80108f0 <_Z25getCurrentMallocAllocatorv+0x18>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d101      	bne.n	80108e8 <_Z25getCurrentMallocAllocatorv+0x10>
 80108e4:	f000 f806 	bl	80108f4 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 80108e8:	4b01      	ldr	r3, [pc, #4]	; (80108f0 <_Z25getCurrentMallocAllocatorv+0x18>)
 80108ea:	681b      	ldr	r3, [r3, #0]
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	bd80      	pop	{r7, pc}
 80108f0:	2000092c 	.word	0x2000092c

080108f4 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 80108f8:	f000 f810 	bl	801091c <_Z22defaultMallocAllocatorv>
 80108fc:	4603      	mov	r3, r0
 80108fe:	4a02      	ldr	r2, [pc, #8]	; (8010908 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 8010900:	6013      	str	r3, [r2, #0]
}
 8010902:	bf00      	nop
 8010904:	bd80      	pop	{r7, pc}
 8010906:	bf00      	nop
 8010908:	2000092c 	.word	0x2000092c

0801090c <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 801090c:	b580      	push	{r7, lr}
 801090e:	af00      	add	r7, sp, #0
 8010910:	4801      	ldr	r0, [pc, #4]	; (8010918 <__tcf_2+0xc>)
 8010912:	f000 f859 	bl	80109c8 <_ZN19TestMemoryAllocatorD1Ev>
 8010916:	bd80      	pop	{r7, pc}
 8010918:	20000960 	.word	0x20000960

0801091c <_Z22defaultMallocAllocatorv>:
{
 801091c:	b580      	push	{r7, lr}
 801091e:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 8010920:	4b13      	ldr	r3, [pc, #76]	; (8010970 <_Z22defaultMallocAllocatorv+0x54>)
 8010922:	781b      	ldrb	r3, [r3, #0]
 8010924:	f3bf 8f5b 	dmb	ish
 8010928:	b2db      	uxtb	r3, r3
 801092a:	f003 0301 	and.w	r3, r3, #1
 801092e:	2b00      	cmp	r3, #0
 8010930:	bf0c      	ite	eq
 8010932:	2301      	moveq	r3, #1
 8010934:	2300      	movne	r3, #0
 8010936:	b2db      	uxtb	r3, r3
 8010938:	2b00      	cmp	r3, #0
 801093a:	d016      	beq.n	801096a <_Z22defaultMallocAllocatorv+0x4e>
 801093c:	480c      	ldr	r0, [pc, #48]	; (8010970 <_Z22defaultMallocAllocatorv+0x54>)
 801093e:	f00f fb5f 	bl	8020000 <__cxa_guard_acquire>
 8010942:	4603      	mov	r3, r0
 8010944:	2b00      	cmp	r3, #0
 8010946:	bf14      	ite	ne
 8010948:	2301      	movne	r3, #1
 801094a:	2300      	moveq	r3, #0
 801094c:	b2db      	uxtb	r3, r3
 801094e:	2b00      	cmp	r3, #0
 8010950:	d00b      	beq.n	801096a <_Z22defaultMallocAllocatorv+0x4e>
 8010952:	4b08      	ldr	r3, [pc, #32]	; (8010974 <_Z22defaultMallocAllocatorv+0x58>)
 8010954:	4a08      	ldr	r2, [pc, #32]	; (8010978 <_Z22defaultMallocAllocatorv+0x5c>)
 8010956:	4909      	ldr	r1, [pc, #36]	; (801097c <_Z22defaultMallocAllocatorv+0x60>)
 8010958:	4809      	ldr	r0, [pc, #36]	; (8010980 <_Z22defaultMallocAllocatorv+0x64>)
 801095a:	f000 f815 	bl	8010988 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 801095e:	4804      	ldr	r0, [pc, #16]	; (8010970 <_Z22defaultMallocAllocatorv+0x54>)
 8010960:	f00f fb5a 	bl	8020018 <__cxa_guard_release>
 8010964:	4807      	ldr	r0, [pc, #28]	; (8010984 <_Z22defaultMallocAllocatorv+0x68>)
 8010966:	f00f fb7e 	bl	8020066 <atexit>
    return &allocator;
 801096a:	4b05      	ldr	r3, [pc, #20]	; (8010980 <_Z22defaultMallocAllocatorv+0x64>)
}
 801096c:	4618      	mov	r0, r3
 801096e:	bd80      	pop	{r7, pc}
 8010970:	20000974 	.word	0x20000974
 8010974:	08024ffc 	.word	0x08024ffc
 8010978:	08025004 	.word	0x08025004
 801097c:	0802500c 	.word	0x0802500c
 8010980:	20000960 	.word	0x20000960
 8010984:	0801090d 	.word	0x0801090d

08010988 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 8010988:	b480      	push	{r7}
 801098a:	b085      	sub	sp, #20
 801098c:	af00      	add	r7, sp, #0
 801098e:	60f8      	str	r0, [r7, #12]
 8010990:	60b9      	str	r1, [r7, #8]
 8010992:	607a      	str	r2, [r7, #4]
 8010994:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 8010996:	4a0b      	ldr	r2, [pc, #44]	; (80109c4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	601a      	str	r2, [r3, #0]
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	68ba      	ldr	r2, [r7, #8]
 80109a0:	605a      	str	r2, [r3, #4]
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	687a      	ldr	r2, [r7, #4]
 80109a6:	609a      	str	r2, [r3, #8]
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	683a      	ldr	r2, [r7, #0]
 80109ac:	60da      	str	r2, [r3, #12]
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	2200      	movs	r2, #0
 80109b2:	741a      	strb	r2, [r3, #16]
{
}
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	4618      	mov	r0, r3
 80109b8:	3714      	adds	r7, #20
 80109ba:	46bd      	mov	sp, r7
 80109bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c0:	4770      	bx	lr
 80109c2:	bf00      	nop
 80109c4:	08028e7c 	.word	0x08028e7c

080109c8 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 80109c8:	b480      	push	{r7}
 80109ca:	b083      	sub	sp, #12
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	4a06      	ldr	r2, [pc, #24]	; (80109ec <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	2201      	movs	r2, #1
 80109da:	741a      	strb	r2, [r3, #16]
}
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	4618      	mov	r0, r3
 80109e0:	370c      	adds	r7, #12
 80109e2:	46bd      	mov	sp, r7
 80109e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e8:	4770      	bx	lr
 80109ea:	bf00      	nop
 80109ec:	08028e7c 	.word	0x08028e7c

080109f0 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
}
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f7ff ffe5 	bl	80109c8 <_ZN19TestMemoryAllocatorD1Ev>
 80109fe:	2114      	movs	r1, #20
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f7fa f88d 	bl	800ab20 <_ZdlPvj>
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3708      	adds	r7, #8
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}

08010a10 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 8010a10:	b480      	push	{r7}
 8010a12:	b083      	sub	sp, #12
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	7c1b      	ldrb	r3, [r3, #16]
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	370c      	adds	r7, #12
 8010a20:	46bd      	mov	sp, r7
 8010a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a26:	4770      	bx	lr

08010a28 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 8010a28:	b590      	push	{r4, r7, lr}
 8010a2a:	b083      	sub	sp, #12
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
 8010a30:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	3310      	adds	r3, #16
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	4798      	blx	r3
 8010a3e:	4604      	mov	r4, r0
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	3310      	adds	r3, #16
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	6838      	ldr	r0, [r7, #0]
 8010a4a:	4798      	blx	r3
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	4619      	mov	r1, r3
 8010a50:	4620      	mov	r0, r4
 8010a52:	f7fc fa51 	bl	800cef8 <_ZN12SimpleString6StrCmpEPKcS1_>
 8010a56:	4603      	mov	r3, r0
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	bf0c      	ite	eq
 8010a5c:	2301      	moveq	r3, #1
 8010a5e:	2300      	movne	r3, #0
 8010a60:	b2db      	uxtb	r3, r3
}
 8010a62:	4618      	mov	r0, r3
 8010a64:	370c      	adds	r7, #12
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd90      	pop	{r4, r7, pc}
	...

08010a6c <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 8010a6c:	b590      	push	{r4, r7, lr}
 8010a6e:	b083      	sub	sp, #12
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	3308      	adds	r3, #8
 8010a7c:	681c      	ldr	r4, [r3, #0]
 8010a7e:	2301      	movs	r3, #1
 8010a80:	4a04      	ldr	r2, [pc, #16]	; (8010a94 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 8010a82:	6839      	ldr	r1, [r7, #0]
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	47a0      	blx	r4
 8010a88:	4603      	mov	r3, r0
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	370c      	adds	r7, #12
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd90      	pop	{r4, r7, pc}
 8010a92:	bf00      	nop
 8010a94:	08025028 	.word	0x08025028

08010a98 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 8010a98:	b590      	push	{r4, r7, lr}
 8010a9a:	b085      	sub	sp, #20
 8010a9c:	af02      	add	r7, sp, #8
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	330c      	adds	r3, #12
 8010aa8:	681c      	ldr	r4, [r3, #0]
 8010aaa:	2301      	movs	r3, #1
 8010aac:	9300      	str	r3, [sp, #0]
 8010aae:	4b04      	ldr	r3, [pc, #16]	; (8010ac0 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	6839      	ldr	r1, [r7, #0]
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	47a0      	blx	r4
}
 8010ab8:	bf00      	nop
 8010aba:	370c      	adds	r7, #12
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd90      	pop	{r4, r7, pc}
 8010ac0:	08025028 	.word	0x08025028

08010ac4 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	60f8      	str	r0, [r7, #12]
 8010acc:	60b9      	str	r1, [r7, #8]
 8010ace:	607a      	str	r2, [r7, #4]
 8010ad0:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 8010ad2:	68b8      	ldr	r0, [r7, #8]
 8010ad4:	f7ff fe2a 	bl	801072c <_ZL13checkedMallocj>
 8010ad8:	4603      	mov	r3, r0
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3710      	adds	r7, #16
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}
	...

08010ae4 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b084      	sub	sp, #16
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	60f8      	str	r0, [r7, #12]
 8010aec:	60b9      	str	r1, [r7, #8]
 8010aee:	607a      	str	r2, [r7, #4]
 8010af0:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 8010af2:	4b04      	ldr	r3, [pc, #16]	; (8010b04 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	68b8      	ldr	r0, [r7, #8]
 8010af8:	4798      	blx	r3
}
 8010afa:	bf00      	nop
 8010afc:	3710      	adds	r7, #16
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
 8010b02:	bf00      	nop
 8010b04:	200000d0 	.word	0x200000d0

08010b08 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 8010b08:	b480      	push	{r7}
 8010b0a:	b083      	sub	sp, #12
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
    return name_;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	685b      	ldr	r3, [r3, #4]
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	370c      	adds	r7, #12
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1e:	4770      	bx	lr

08010b20 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 8010b20:	b480      	push	{r7}
 8010b22:	b083      	sub	sp, #12
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	689b      	ldr	r3, [r3, #8]
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	370c      	adds	r7, #12
 8010b30:	46bd      	mov	sp, r7
 8010b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b36:	4770      	bx	lr

08010b38 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b083      	sub	sp, #12
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
    return free_name_;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	68db      	ldr	r3, [r3, #12]
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	370c      	adds	r7, #12
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4e:	4770      	bx	lr

08010b50 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 8010b50:	b480      	push	{r7}
 8010b52:	b083      	sub	sp, #12
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
    return this;
 8010b58:	687b      	ldr	r3, [r7, #4]
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	370c      	adds	r7, #12
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b64:	4770      	bx	lr
	...

08010b68 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	4a05      	ldr	r2, [pc, #20]	; (8010b88 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	601a      	str	r2, [r3, #0]
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7ff ff25 	bl	80109c8 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	4618      	mov	r0, r3
 8010b82:	3708      	adds	r7, #8
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}
 8010b88:	08028e48 	.word	0x08028e48

08010b8c <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b082      	sub	sp, #8
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
}
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f7ff ffe7 	bl	8010b68 <_ZN20NullUnknownAllocatorD1Ev>
 8010b9a:	2114      	movs	r1, #20
 8010b9c:	6878      	ldr	r0, [r7, #4]
 8010b9e:	f7f9 ffbf 	bl	800ab20 <_ZdlPvj>
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3708      	adds	r7, #8
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}

08010bac <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 8010bac:	b480      	push	{r7}
 8010bae:	b085      	sub	sp, #20
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	60f8      	str	r0, [r7, #12]
 8010bb4:	60b9      	str	r1, [r7, #8]
 8010bb6:	607a      	str	r2, [r7, #4]
 8010bb8:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 8010bba:	2300      	movs	r3, #0
}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3714      	adds	r7, #20
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc6:	4770      	bx	lr

08010bc8 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b085      	sub	sp, #20
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	60f8      	str	r0, [r7, #12]
 8010bd0:	60b9      	str	r1, [r7, #8]
 8010bd2:	607a      	str	r2, [r7, #4]
 8010bd4:	603b      	str	r3, [r7, #0]
}
 8010bd6:	bf00      	nop
 8010bd8:	3714      	adds	r7, #20
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be0:	4770      	bx	lr
	...

08010be4 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b082      	sub	sp, #8
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	4b06      	ldr	r3, [pc, #24]	; (8010c08 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 8010bf0:	4a05      	ldr	r2, [pc, #20]	; (8010c08 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 8010bf2:	4906      	ldr	r1, [pc, #24]	; (8010c0c <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 8010bf4:	f7ff fec8 	bl	8010988 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8010bf8:	4a05      	ldr	r2, [pc, #20]	; (8010c10 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	601a      	str	r2, [r3, #0]
{
}
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	4618      	mov	r0, r3
 8010c02:	3708      	adds	r7, #8
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	0802505c 	.word	0x0802505c
 8010c0c:	08025064 	.word	0x08025064
 8010c10:	08028e48 	.word	0x08028e48

08010c14 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 8010c14:	b580      	push	{r7, lr}
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	4801      	ldr	r0, [pc, #4]	; (8010c20 <__tcf_3+0xc>)
 8010c1a:	f7ff ffa5 	bl	8010b68 <_ZN20NullUnknownAllocatorD1Ev>
 8010c1e:	bd80      	pop	{r7, pc}
 8010c20:	20000978 	.word	0x20000978

08010c24 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 8010c28:	4b12      	ldr	r3, [pc, #72]	; (8010c74 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 8010c2a:	781b      	ldrb	r3, [r3, #0]
 8010c2c:	f3bf 8f5b 	dmb	ish
 8010c30:	b2db      	uxtb	r3, r3
 8010c32:	f003 0301 	and.w	r3, r3, #1
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	bf0c      	ite	eq
 8010c3a:	2301      	moveq	r3, #1
 8010c3c:	2300      	movne	r3, #0
 8010c3e:	b2db      	uxtb	r3, r3
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d013      	beq.n	8010c6c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 8010c44:	480b      	ldr	r0, [pc, #44]	; (8010c74 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 8010c46:	f00f f9db 	bl	8020000 <__cxa_guard_acquire>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	bf14      	ite	ne
 8010c50:	2301      	movne	r3, #1
 8010c52:	2300      	moveq	r3, #0
 8010c54:	b2db      	uxtb	r3, r3
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d008      	beq.n	8010c6c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 8010c5a:	4807      	ldr	r0, [pc, #28]	; (8010c78 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 8010c5c:	f7ff ffc2 	bl	8010be4 <_ZN20NullUnknownAllocatorC1Ev>
 8010c60:	4804      	ldr	r0, [pc, #16]	; (8010c74 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 8010c62:	f00f f9d9 	bl	8020018 <__cxa_guard_release>
 8010c66:	4805      	ldr	r0, [pc, #20]	; (8010c7c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 8010c68:	f00f f9fd 	bl	8020066 <atexit>
    return &allocator;
 8010c6c:	4b02      	ldr	r3, [pc, #8]	; (8010c78 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	bd80      	pop	{r7, pc}
 8010c72:	bf00      	nop
 8010c74:	2000098c 	.word	0x2000098c
 8010c78:	20000978 	.word	0x20000978
 8010c7c:	08010c15 	.word	0x08010c15

08010c80 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 8010c80:	b480      	push	{r7}
 8010c82:	b083      	sub	sp, #12
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
        return testCount_;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	689b      	ldr	r3, [r3, #8]
    }
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	370c      	adds	r7, #12
 8010c90:	46bd      	mov	sp, r7
 8010c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c96:	4770      	bx	lr

08010c98 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 8010c98:	b480      	push	{r7}
 8010c9a:	b083      	sub	sp, #12
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	699b      	ldr	r3, [r3, #24]
    }
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	370c      	adds	r7, #12
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cae:	4770      	bx	lr

08010cb0 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 8010cb4:	4b05      	ldr	r3, [pc, #20]	; (8010ccc <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	2b02      	cmp	r3, #2
 8010cba:	d103      	bne.n	8010cc4 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 8010cbc:	f004 fa4a 	bl	8015154 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	e001      	b.n	8010cc8 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 8010cc4:	4b01      	ldr	r3, [pc, #4]	; (8010ccc <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 8010cc6:	781b      	ldrb	r3, [r3, #0]
}
 8010cc8:	4618      	mov	r0, r3
 8010cca:	bd80      	pop	{r7, pc}
 8010ccc:	20000088 	.word	0x20000088

08010cd0 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 8010cd0:	b480      	push	{r7}
 8010cd2:	b083      	sub	sp, #12
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 8010cd8:	4a0a      	ldr	r2, [pc, #40]	; (8010d04 <_ZN10TestOutputC1Ev+0x34>)
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	601a      	str	r2, [r3, #0]
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	605a      	str	r2, [r3, #4]
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	721a      	strb	r2, [r3, #8]
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	2200      	movs	r2, #0
 8010cee:	725a      	strb	r2, [r3, #9]
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	4a05      	ldr	r2, [pc, #20]	; (8010d08 <_ZN10TestOutputC1Ev+0x38>)
 8010cf4:	60da      	str	r2, [r3, #12]
{
}
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	370c      	adds	r7, #12
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d02:	4770      	bx	lr
 8010d04:	08028f80 	.word	0x08028f80
 8010d08:	08025464 	.word	0x08025464

08010d0c <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 8010d0c:	b480      	push	{r7}
 8010d0e:	b083      	sub	sp, #12
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	4a04      	ldr	r2, [pc, #16]	; (8010d28 <_ZN10TestOutputD1Ev+0x1c>)
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	601a      	str	r2, [r3, #0]
{
}
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	370c      	adds	r7, #12
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr
 8010d28:	08028f80 	.word	0x08028f80

08010d2c <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	b083      	sub	sp, #12
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
 8010d34:	460b      	mov	r3, r1
 8010d36:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	78fa      	ldrb	r2, [r7, #3]
 8010d3c:	721a      	strb	r2, [r3, #8]
}
 8010d3e:	bf00      	nop
 8010d40:	370c      	adds	r7, #12
 8010d42:	46bd      	mov	sp, r7
 8010d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d48:	4770      	bx	lr

08010d4a <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 8010d4a:	b480      	push	{r7}
 8010d4c:	b083      	sub	sp, #12
 8010d4e:	af00      	add	r7, sp, #0
 8010d50:	6078      	str	r0, [r7, #4]
    color_ = true;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	2201      	movs	r2, #1
 8010d56:	725a      	strb	r2, [r3, #9]
}
 8010d58:	bf00      	nop
 8010d5a:	370c      	adds	r7, #12
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d62:	4770      	bx	lr

08010d64 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	3328      	adds	r3, #40	; 0x28
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	6839      	ldr	r1, [r7, #0]
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	4798      	blx	r3
}
 8010d7c:	bf00      	nop
 8010d7e:	3708      	adds	r7, #8
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}

08010d84 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 8010d84:	b590      	push	{r4, r7, lr}
 8010d86:	b085      	sub	sp, #20
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	332c      	adds	r3, #44	; 0x2c
 8010d94:	681c      	ldr	r4, [r3, #0]
 8010d96:	f107 0308 	add.w	r3, r7, #8
 8010d9a:	6839      	ldr	r1, [r7, #0]
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7fd f8ff 	bl	800dfa0 <_Z10StringFroml>
 8010da2:	f107 0308 	add.w	r3, r7, #8
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7fc fdf4 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 8010dac:	4603      	mov	r3, r0
 8010dae:	4619      	mov	r1, r3
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	47a0      	blx	r4
 8010db4:	f107 0308 	add.w	r3, r7, #8
 8010db8:	4618      	mov	r0, r3
 8010dba:	f7fc fe18 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 8010dbe:	bf00      	nop
 8010dc0:	3714      	adds	r7, #20
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd90      	pop	{r4, r7, pc}

08010dc6 <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 8010dc6:	b590      	push	{r4, r7, lr}
 8010dc8:	b085      	sub	sp, #20
 8010dca:	af00      	add	r7, sp, #0
 8010dcc:	6078      	str	r0, [r7, #4]
 8010dce:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	332c      	adds	r3, #44	; 0x2c
 8010dd6:	681c      	ldr	r4, [r3, #0]
 8010dd8:	f107 0308 	add.w	r3, r7, #8
 8010ddc:	6839      	ldr	r1, [r7, #0]
 8010dde:	4618      	mov	r0, r3
 8010de0:	f7fd fb34 	bl	800e44c <_Z10StringFromj>
 8010de4:	f107 0308 	add.w	r3, r7, #8
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7fc fdd3 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 8010dee:	4603      	mov	r3, r0
 8010df0:	4619      	mov	r1, r3
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	47a0      	blx	r4
 8010df6:	f107 0308 	add.w	r3, r7, #8
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f7fc fdf7 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 8010e00:	bf00      	nop
 8010e02:	3714      	adds	r7, #20
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd90      	pop	{r4, r7, pc}

08010e08 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 8010e08:	b590      	push	{r4, r7, lr}
 8010e0a:	b087      	sub	sp, #28
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	60f8      	str	r0, [r7, #12]
 8010e10:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	332c      	adds	r3, #44	; 0x2c
 8010e1a:	681c      	ldr	r4, [r3, #0]
 8010e1c:	f107 0310 	add.w	r3, r7, #16
 8010e20:	2106      	movs	r1, #6
 8010e22:	ed97 0b00 	vldr	d0, [r7]
 8010e26:	4618      	mov	r0, r3
 8010e28:	f7fd faa6 	bl	800e378 <_Z10StringFromdi>
 8010e2c:	f107 0310 	add.w	r3, r7, #16
 8010e30:	4618      	mov	r0, r3
 8010e32:	f7fc fdaf 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 8010e36:	4603      	mov	r3, r0
 8010e38:	4619      	mov	r1, r3
 8010e3a:	68f8      	ldr	r0, [r7, #12]
 8010e3c:	47a0      	blx	r4
 8010e3e:	f107 0310 	add.w	r3, r7, #16
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7fc fdd3 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 8010e48:	bf00      	nop
 8010e4a:	371c      	adds	r7, #28
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd90      	pop	{r4, r7, pc}

08010e50 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b082      	sub	sp, #8
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
 8010e58:	6039      	str	r1, [r7, #0]
    p.print(s);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	332c      	adds	r3, #44	; 0x2c
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	6839      	ldr	r1, [r7, #0]
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	4798      	blx	r3
    return p;
 8010e68:	687b      	ldr	r3, [r7, #4]
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3708      	adds	r7, #8
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}
	...

08010e74 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8010e74:	b590      	push	{r4, r7, lr}
 8010e76:	b085      	sub	sp, #20
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
 8010e7c:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	7a1b      	ldrb	r3, [r3, #8]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d01a      	beq.n	8010ebc <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	332c      	adds	r3, #44	; 0x2c
 8010e8c:	681c      	ldr	r4, [r3, #0]
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	3314      	adds	r3, #20
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	f107 0208 	add.w	r2, r7, #8
 8010e9a:	6839      	ldr	r1, [r7, #0]
 8010e9c:	4610      	mov	r0, r2
 8010e9e:	4798      	blx	r3
 8010ea0:	f107 0308 	add.w	r3, r7, #8
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7fc fd75 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	4619      	mov	r1, r3
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	47a0      	blx	r4
 8010eb2:	f107 0308 	add.w	r3, r7, #8
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7fc fd99 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	3318      	adds	r3, #24
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	6838      	ldr	r0, [r7, #0]
 8010ec6:	4798      	blx	r3
 8010ec8:	4603      	mov	r3, r0
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d007      	beq.n	8010ede <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	3344      	adds	r3, #68	; 0x44
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	4907      	ldr	r1, [pc, #28]	; (8010ef4 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 8010edc:	e006      	b.n	8010eec <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	3344      	adds	r3, #68	; 0x44
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	4904      	ldr	r1, [pc, #16]	; (8010ef8 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	4798      	blx	r3
}
 8010eec:	bf00      	nop
 8010eee:	3714      	adds	r7, #20
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bd90      	pop	{r4, r7, pc}
 8010ef4:	08025464 	.word	0x08025464
 8010ef8:	08025468 	.word	0x08025468

08010efc <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 8010efc:	b590      	push	{r4, r7, lr}
 8010efe:	b083      	sub	sp, #12
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
 8010f04:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	7a1b      	ldrb	r3, [r3, #8]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d019      	beq.n	8010f42 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	332c      	adds	r3, #44	; 0x2c
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	4910      	ldr	r1, [pc, #64]	; (8010f58 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	3334      	adds	r3, #52	; 0x34
 8010f22:	681c      	ldr	r4, [r3, #0]
 8010f24:	6838      	ldr	r0, [r7, #0]
 8010f26:	f002 f845 	bl	8012fb4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	6878      	ldr	r0, [r7, #4]
 8010f30:	47a0      	blx	r4
        print(" ms\n");
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	332c      	adds	r3, #44	; 0x2c
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	4908      	ldr	r1, [pc, #32]	; (8010f5c <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 8010f40:	e005      	b.n	8010f4e <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	3358      	adds	r3, #88	; 0x58
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	4798      	blx	r3
}
 8010f4e:	bf00      	nop
 8010f50:	370c      	adds	r7, #12
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd90      	pop	{r4, r7, pc}
 8010f56:	bf00      	nop
 8010f58:	0802546c 	.word	0x0802546c
 8010f5c:	08025470 	.word	0x08025470

08010f60 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b082      	sub	sp, #8
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	332c      	adds	r3, #44	; 0x2c
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	687a      	ldr	r2, [r7, #4]
 8010f72:	68d2      	ldr	r2, [r2, #12]
 8010f74:	4611      	mov	r1, r2
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	685b      	ldr	r3, [r3, #4]
 8010f7e:	1c5a      	adds	r2, r3, #1
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	605a      	str	r2, [r3, #4]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	685a      	ldr	r2, [r3, #4]
 8010f88:	4b0d      	ldr	r3, [pc, #52]	; (8010fc0 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 8010f8a:	fb83 1302 	smull	r1, r3, r3, r2
 8010f8e:	1119      	asrs	r1, r3, #4
 8010f90:	17d3      	asrs	r3, r2, #31
 8010f92:	1acb      	subs	r3, r1, r3
 8010f94:	2132      	movs	r1, #50	; 0x32
 8010f96:	fb01 f303 	mul.w	r3, r1, r3
 8010f9a:	1ad3      	subs	r3, r2, r3
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	bf0c      	ite	eq
 8010fa0:	2301      	moveq	r3, #1
 8010fa2:	2300      	movne	r3, #0
 8010fa4:	b2db      	uxtb	r3, r3
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d006      	beq.n	8010fb8 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	332c      	adds	r3, #44	; 0x2c
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	4904      	ldr	r1, [pc, #16]	; (8010fc4 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	4798      	blx	r3
}
 8010fb8:	bf00      	nop
 8010fba:	3708      	adds	r7, #8
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}
 8010fc0:	51eb851f 	.word	0x51eb851f
 8010fc4:	08025478 	.word	0x08025478

08010fc8 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 8010fc8:	b480      	push	{r7}
 8010fca:	b083      	sub	sp, #12
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
 8010fd0:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	683a      	ldr	r2, [r7, #0]
 8010fd6:	60da      	str	r2, [r3, #12]
}
 8010fd8:	bf00      	nop
 8010fda:	370c      	adds	r7, #12
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe2:	4770      	bx	lr

08010fe4 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b083      	sub	sp, #12
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
}
 8010fec:	bf00      	nop
 8010fee:	370c      	adds	r7, #12
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff6:	4770      	bx	lr

08010ff8 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8010ff8:	b480      	push	{r7}
 8010ffa:	b083      	sub	sp, #12
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	6039      	str	r1, [r7, #0]
}
 8011002:	bf00      	nop
 8011004:	370c      	adds	r7, #12
 8011006:	46bd      	mov	sp, r7
 8011008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100c:	4770      	bx	lr

0801100e <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 801100e:	b480      	push	{r7}
 8011010:	b083      	sub	sp, #12
 8011012:	af00      	add	r7, sp, #0
 8011014:	6078      	str	r0, [r7, #4]
 8011016:	6039      	str	r1, [r7, #0]
}
 8011018:	bf00      	nop
 801101a:	370c      	adds	r7, #12
 801101c:	46bd      	mov	sp, r7
 801101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011022:	4770      	bx	lr

08011024 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 8011024:	b590      	push	{r4, r7, lr}
 8011026:	b085      	sub	sp, #20
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
 801102c:	6039      	str	r1, [r7, #0]
    print("\n");
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	332c      	adds	r3, #44	; 0x2c
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	496f      	ldr	r1, [pc, #444]	; (80111f4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 801103c:	6838      	ldr	r0, [r7, #0]
 801103e:	f7f8 f83d 	bl	80090bc <_ZNK10TestResult9isFailureEv>
 8011042:	4603      	mov	r3, r0
 8011044:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 8011046:	6838      	ldr	r0, [r7, #0]
 8011048:	f7f8 f82c 	bl	80090a4 <_ZNK10TestResult15getFailureCountEv>
 801104c:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 801104e:	7bfb      	ldrb	r3, [r7, #15]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d02b      	beq.n	80110ac <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	7a5b      	ldrb	r3, [r3, #9]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d006      	beq.n	801106a <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	332c      	adds	r3, #44	; 0x2c
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	4964      	ldr	r1, [pc, #400]	; (80111f8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 8011066:	6878      	ldr	r0, [r7, #4]
 8011068:	4798      	blx	r3
        }
        print("Errors (");
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	332c      	adds	r3, #44	; 0x2c
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	4962      	ldr	r1, [pc, #392]	; (80111fc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	4798      	blx	r3
        if (failureCount > 0) {
 8011078:	68bb      	ldr	r3, [r7, #8]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d00e      	beq.n	801109c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	3334      	adds	r3, #52	; 0x34
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	68b9      	ldr	r1, [r7, #8]
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	4798      	blx	r3
            print(" failures, ");
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	332c      	adds	r3, #44	; 0x2c
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	495a      	ldr	r1, [pc, #360]	; (8011200 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	4798      	blx	r3
 801109a:	e019      	b.n	80110d0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	332c      	adds	r3, #44	; 0x2c
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	4957      	ldr	r1, [pc, #348]	; (8011204 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	4798      	blx	r3
 80110aa:	e011      	b.n	80110d0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	7a5b      	ldrb	r3, [r3, #9]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d006      	beq.n	80110c2 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	332c      	adds	r3, #44	; 0x2c
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	4952      	ldr	r1, [pc, #328]	; (8011208 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 80110be:	6878      	ldr	r0, [r7, #4]
 80110c0:	4798      	blx	r3
        }
        print("OK (");
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	332c      	adds	r3, #44	; 0x2c
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	4950      	ldr	r1, [pc, #320]	; (801120c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	4798      	blx	r3
    }
    print(result.getTestCount());
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	3334      	adds	r3, #52	; 0x34
 80110d6:	681c      	ldr	r4, [r3, #0]
 80110d8:	6838      	ldr	r0, [r7, #0]
 80110da:	f7ff fdd1 	bl	8010c80 <_ZNK10TestResult12getTestCountEv>
 80110de:	4603      	mov	r3, r0
 80110e0:	4619      	mov	r1, r3
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	47a0      	blx	r4
    print(" tests, ");
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	332c      	adds	r3, #44	; 0x2c
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	4948      	ldr	r1, [pc, #288]	; (8011210 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 80110f0:	6878      	ldr	r0, [r7, #4]
 80110f2:	4798      	blx	r3
    print(result.getRunCount());
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	3334      	adds	r3, #52	; 0x34
 80110fa:	681c      	ldr	r4, [r3, #0]
 80110fc:	6838      	ldr	r0, [r7, #0]
 80110fe:	f7f7 ffb9 	bl	8009074 <_ZNK10TestResult11getRunCountEv>
 8011102:	4603      	mov	r3, r0
 8011104:	4619      	mov	r1, r3
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	47a0      	blx	r4
    print(" ran, ");
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	332c      	adds	r3, #44	; 0x2c
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	4940      	ldr	r1, [pc, #256]	; (8011214 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	4798      	blx	r3
    print(result.getCheckCount());
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	3334      	adds	r3, #52	; 0x34
 801111e:	681c      	ldr	r4, [r3, #0]
 8011120:	6838      	ldr	r0, [r7, #0]
 8011122:	f7f8 fc13 	bl	800994c <_ZNK10TestResult13getCheckCountEv>
 8011126:	4603      	mov	r3, r0
 8011128:	4619      	mov	r1, r3
 801112a:	6878      	ldr	r0, [r7, #4]
 801112c:	47a0      	blx	r4
    print(" checks, ");
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	332c      	adds	r3, #44	; 0x2c
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	4938      	ldr	r1, [pc, #224]	; (8011218 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	4798      	blx	r3
    print(result.getIgnoredCount());
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	3334      	adds	r3, #52	; 0x34
 8011142:	681c      	ldr	r4, [r3, #0]
 8011144:	6838      	ldr	r0, [r7, #0]
 8011146:	f7f7 ffa1 	bl	800908c <_ZNK10TestResult15getIgnoredCountEv>
 801114a:	4603      	mov	r3, r0
 801114c:	4619      	mov	r1, r3
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	47a0      	blx	r4
    print(" ignored, ");
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	332c      	adds	r3, #44	; 0x2c
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	4930      	ldr	r1, [pc, #192]	; (801121c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	4798      	blx	r3
    print(result.getFilteredOutCount());
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	3334      	adds	r3, #52	; 0x34
 8011166:	681c      	ldr	r4, [r3, #0]
 8011168:	6838      	ldr	r0, [r7, #0]
 801116a:	f7ff fd95 	bl	8010c98 <_ZNK10TestResult19getFilteredOutCountEv>
 801116e:	4603      	mov	r3, r0
 8011170:	4619      	mov	r1, r3
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	47a0      	blx	r4
    print(" filtered out, ");
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	332c      	adds	r3, #44	; 0x2c
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	4928      	ldr	r1, [pc, #160]	; (8011220 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	3334      	adds	r3, #52	; 0x34
 801118a:	681c      	ldr	r4, [r3, #0]
 801118c:	6838      	ldr	r0, [r7, #0]
 801118e:	f001 ff05 	bl	8012f9c <_ZNK10TestResult21getTotalExecutionTimeEv>
 8011192:	4603      	mov	r3, r0
 8011194:	4619      	mov	r1, r3
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	47a0      	blx	r4
    print(" ms)");
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	332c      	adds	r3, #44	; 0x2c
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	4920      	ldr	r1, [pc, #128]	; (8011224 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	4798      	blx	r3
    if (color_) {
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	7a5b      	ldrb	r3, [r3, #9]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d006      	beq.n	80111be <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	332c      	adds	r3, #44	; 0x2c
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	491b      	ldr	r1, [pc, #108]	; (8011228 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 80111be:	7bfb      	ldrb	r3, [r7, #15]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d009      	beq.n	80111d8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d106      	bne.n	80111d8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	332c      	adds	r3, #44	; 0x2c
 80111d0:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 80111d2:	4916      	ldr	r1, [pc, #88]	; (801122c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	4798      	blx	r3
    }
    print("\n\n");
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	332c      	adds	r3, #44	; 0x2c
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	4913      	ldr	r1, [pc, #76]	; (8011230 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	4798      	blx	r3

    dotCount_ = 0;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2200      	movs	r2, #0
 80111ea:	605a      	str	r2, [r3, #4]
}
 80111ec:	bf00      	nop
 80111ee:	3714      	adds	r7, #20
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd90      	pop	{r4, r7, pc}
 80111f4:	08025478 	.word	0x08025478
 80111f8:	0802547c 	.word	0x0802547c
 80111fc:	08025484 	.word	0x08025484
 8011200:	08025490 	.word	0x08025490
 8011204:	0802549c 	.word	0x0802549c
 8011208:	080254ac 	.word	0x080254ac
 801120c:	080254b4 	.word	0x080254b4
 8011210:	080254bc 	.word	0x080254bc
 8011214:	080254c8 	.word	0x080254c8
 8011218:	080254d0 	.word	0x080254d0
 801121c:	080254dc 	.word	0x080254dc
 8011220:	080254e8 	.word	0x080254e8
 8011224:	080254f8 	.word	0x080254f8
 8011228:	08025500 	.word	0x08025500
 801122c:	08025504 	.word	0x08025504
 8011230:	080255a8 	.word	0x080255a8

08011234 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b084      	sub	sp, #16
 8011238:	af00      	add	r7, sp, #0
 801123a:	60f8      	str	r0, [r7, #12]
 801123c:	60b9      	str	r1, [r7, #8]
 801123e:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2b01      	cmp	r3, #1
 8011244:	d922      	bls.n	801128c <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	332c      	adds	r3, #44	; 0x2c
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	4911      	ldr	r1, [pc, #68]	; (8011294 <_ZN10TestOutput12printTestRunEjj+0x60>)
 8011250:	68f8      	ldr	r0, [r7, #12]
 8011252:	4798      	blx	r3
        print(number);
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	3334      	adds	r3, #52	; 0x34
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	68b9      	ldr	r1, [r7, #8]
 801125e:	68f8      	ldr	r0, [r7, #12]
 8011260:	4798      	blx	r3
        print(" of ");
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	332c      	adds	r3, #44	; 0x2c
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	490b      	ldr	r1, [pc, #44]	; (8011298 <_ZN10TestOutput12printTestRunEjj+0x64>)
 801126c:	68f8      	ldr	r0, [r7, #12]
 801126e:	4798      	blx	r3
        print(total);
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	3334      	adds	r3, #52	; 0x34
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	6879      	ldr	r1, [r7, #4]
 801127a:	68f8      	ldr	r0, [r7, #12]
 801127c:	4798      	blx	r3
        print("\n");
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	332c      	adds	r3, #44	; 0x2c
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	4905      	ldr	r1, [pc, #20]	; (801129c <_ZN10TestOutput12printTestRunEjj+0x68>)
 8011288:	68f8      	ldr	r0, [r7, #12]
 801128a:	4798      	blx	r3
    }
}
 801128c:	bf00      	nop
 801128e:	3710      	adds	r7, #16
 8011290:	46bd      	mov	sp, r7
 8011292:	bd80      	pop	{r7, pc}
 8011294:	080255ac 	.word	0x080255ac
 8011298:	080255b8 	.word	0x080255b8
 801129c:	08025478 	.word	0x08025478

080112a0 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b084      	sub	sp, #16
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
 80112a8:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 80112aa:	6838      	ldr	r0, [r7, #0]
 80112ac:	f7fd ffa1 	bl	800f1f2 <_ZNK11TestFailure17isOutsideTestFileEv>
 80112b0:	4603      	mov	r3, r0
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d105      	bne.n	80112c2 <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 80112b6:	6838      	ldr	r0, [r7, #0]
 80112b8:	f7fd ffad 	bl	800f216 <_ZNK11TestFailure18isInHelperFunctionEv>
 80112bc:	4603      	mov	r3, r0
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d001      	beq.n	80112c6 <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 80112c2:	2301      	movs	r3, #1
 80112c4:	e000      	b.n	80112c8 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 80112c6:	2300      	movs	r3, #0
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d004      	beq.n	80112d6 <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 80112cc:	6839      	ldr	r1, [r7, #0]
 80112ce:	6878      	ldr	r0, [r7, #4]
 80112d0:	f000 f81d 	bl	801130e <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 80112d4:	e003      	b.n	80112de <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 80112d6:	6839      	ldr	r1, [r7, #0]
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f000 f86b 	bl	80113b4 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	3318      	adds	r3, #24
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	f107 0208 	add.w	r2, r7, #8
 80112ea:	6839      	ldr	r1, [r7, #0]
 80112ec:	4610      	mov	r0, r2
 80112ee:	4798      	blx	r3
 80112f0:	f107 0308 	add.w	r3, r7, #8
 80112f4:	4619      	mov	r1, r3
 80112f6:	6878      	ldr	r0, [r7, #4]
 80112f8:	f000 f8b2 	bl	8011460 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 80112fc:	f107 0308 	add.w	r3, r7, #8
 8011300:	4618      	mov	r0, r3
 8011302:	f7fc fb74 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 8011306:	bf00      	nop
 8011308:	3710      	adds	r7, #16
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}

0801130e <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 801130e:	b580      	push	{r7, lr}
 8011310:	b088      	sub	sp, #32
 8011312:	af00      	add	r7, sp, #0
 8011314:	6078      	str	r0, [r7, #4]
 8011316:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	331c      	adds	r3, #28
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	f107 0208 	add.w	r2, r7, #8
 8011324:	6839      	ldr	r1, [r7, #0]
 8011326:	4610      	mov	r0, r2
 8011328:	4798      	blx	r3
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	3320      	adds	r3, #32
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	6838      	ldr	r0, [r7, #0]
 8011334:	4798      	blx	r3
 8011336:	4602      	mov	r2, r0
 8011338:	f107 0308 	add.w	r3, r7, #8
 801133c:	4619      	mov	r1, r3
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f000 f8be 	bl	80114c0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8011344:	f107 0308 	add.w	r3, r7, #8
 8011348:	4618      	mov	r0, r3
 801134a:	f7fc fb50 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	330c      	adds	r3, #12
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f107 0210 	add.w	r2, r7, #16
 801135a:	6839      	ldr	r1, [r7, #0]
 801135c:	4610      	mov	r0, r2
 801135e:	4798      	blx	r3
 8011360:	f107 0310 	add.w	r3, r7, #16
 8011364:	4619      	mov	r1, r3
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f000 f85c 	bl	8011424 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 801136c:	f107 0310 	add.w	r3, r7, #16
 8011370:	4618      	mov	r0, r3
 8011372:	f7fc fb3c 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	3308      	adds	r3, #8
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	f107 0218 	add.w	r2, r7, #24
 8011382:	6839      	ldr	r1, [r7, #0]
 8011384:	4610      	mov	r0, r2
 8011386:	4798      	blx	r3
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	3314      	adds	r3, #20
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	6838      	ldr	r0, [r7, #0]
 8011392:	4798      	blx	r3
 8011394:	4602      	mov	r2, r0
 8011396:	f107 0318 	add.w	r3, r7, #24
 801139a:	4619      	mov	r1, r3
 801139c:	6878      	ldr	r0, [r7, #4]
 801139e:	f000 f88f 	bl	80114c0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 80113a2:	f107 0318 	add.w	r3, r7, #24
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7fc fb21 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 80113ac:	bf00      	nop
 80113ae:	3720      	adds	r7, #32
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd80      	pop	{r7, pc}

080113b4 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b086      	sub	sp, #24
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
 80113bc:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 80113be:	683b      	ldr	r3, [r7, #0]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	3308      	adds	r3, #8
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	f107 0208 	add.w	r2, r7, #8
 80113ca:	6839      	ldr	r1, [r7, #0]
 80113cc:	4610      	mov	r0, r2
 80113ce:	4798      	blx	r3
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	3314      	adds	r3, #20
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	6838      	ldr	r0, [r7, #0]
 80113da:	4798      	blx	r3
 80113dc:	4602      	mov	r2, r0
 80113de:	f107 0308 	add.w	r3, r7, #8
 80113e2:	4619      	mov	r1, r3
 80113e4:	6878      	ldr	r0, [r7, #4]
 80113e6:	f000 f86b 	bl	80114c0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 80113ea:	f107 0308 	add.w	r3, r7, #8
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7fc fafd 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	330c      	adds	r3, #12
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	f107 0210 	add.w	r2, r7, #16
 8011400:	6839      	ldr	r1, [r7, #0]
 8011402:	4610      	mov	r0, r2
 8011404:	4798      	blx	r3
 8011406:	f107 0310 	add.w	r3, r7, #16
 801140a:	4619      	mov	r1, r3
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f000 f809 	bl	8011424 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 8011412:	f107 0310 	add.w	r3, r7, #16
 8011416:	4618      	mov	r0, r3
 8011418:	f7fc fae9 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 801141c:	bf00      	nop
 801141e:	3718      	adds	r7, #24
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}

08011424 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 8011424:	b590      	push	{r4, r7, lr}
 8011426:	b083      	sub	sp, #12
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
 801142c:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	332c      	adds	r3, #44	; 0x2c
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	4909      	ldr	r1, [pc, #36]	; (801145c <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	4798      	blx	r3
    print(testName.asCharString());
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	332c      	adds	r3, #44	; 0x2c
 8011442:	681c      	ldr	r4, [r3, #0]
 8011444:	6838      	ldr	r0, [r7, #0]
 8011446:	f7fc faa5 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801144a:	4603      	mov	r3, r0
 801144c:	4619      	mov	r1, r3
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	47a0      	blx	r4
}
 8011452:	bf00      	nop
 8011454:	370c      	adds	r7, #12
 8011456:	46bd      	mov	sp, r7
 8011458:	bd90      	pop	{r4, r7, pc}
 801145a:	bf00      	nop
 801145c:	080255c0 	.word	0x080255c0

08011460 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 8011460:	b590      	push	{r4, r7, lr}
 8011462:	b083      	sub	sp, #12
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
 8011468:	6039      	str	r1, [r7, #0]
    print("\n");
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	332c      	adds	r3, #44	; 0x2c
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	4910      	ldr	r1, [pc, #64]	; (80114b4 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	4798      	blx	r3
    print("\t");
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	332c      	adds	r3, #44	; 0x2c
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	490d      	ldr	r1, [pc, #52]	; (80114b8 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	4798      	blx	r3
    print(reason.asCharString());
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	332c      	adds	r3, #44	; 0x2c
 801148c:	681c      	ldr	r4, [r3, #0]
 801148e:	6838      	ldr	r0, [r7, #0]
 8011490:	f7fc fa80 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 8011494:	4603      	mov	r3, r0
 8011496:	4619      	mov	r1, r3
 8011498:	6878      	ldr	r0, [r7, #4]
 801149a:	47a0      	blx	r4
    print("\n\n");
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	332c      	adds	r3, #44	; 0x2c
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	4905      	ldr	r1, [pc, #20]	; (80114bc <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 80114a6:	6878      	ldr	r0, [r7, #4]
 80114a8:	4798      	blx	r3
}
 80114aa:	bf00      	nop
 80114ac:	370c      	adds	r7, #12
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd90      	pop	{r4, r7, pc}
 80114b2:	bf00      	nop
 80114b4:	08025478 	.word	0x08025478
 80114b8:	080255d0 	.word	0x080255d0
 80114bc:	080255a8 	.word	0x080255a8

080114c0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 80114c0:	b590      	push	{r4, r7, lr}
 80114c2:	b089      	sub	sp, #36	; 0x24
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	60f8      	str	r0, [r7, #12]
 80114c8:	60b9      	str	r1, [r7, #8]
 80114ca:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 80114cc:	f7ff fbf0 	bl	8010cb0 <_ZN10TestOutput21getWorkingEnvironmentEv>
 80114d0:	4603      	mov	r3, r0
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	bf0c      	ite	eq
 80114d6:	2301      	moveq	r3, #1
 80114d8:	2300      	movne	r3, #0
 80114da:	b2db      	uxtb	r3, r3
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d015      	beq.n	801150c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	3354      	adds	r3, #84	; 0x54
 80114e6:	681c      	ldr	r4, [r3, #0]
 80114e8:	f107 0310 	add.w	r3, r7, #16
 80114ec:	68b9      	ldr	r1, [r7, #8]
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7fb ff19 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
 80114f4:	f107 0310 	add.w	r3, r7, #16
 80114f8:	687a      	ldr	r2, [r7, #4]
 80114fa:	4619      	mov	r1, r3
 80114fc:	68f8      	ldr	r0, [r7, #12]
 80114fe:	47a0      	blx	r4
 8011500:	f107 0310 	add.w	r3, r7, #16
 8011504:	4618      	mov	r0, r3
 8011506:	f7fc fa72 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 801150a:	e014      	b.n	8011536 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	3350      	adds	r3, #80	; 0x50
 8011512:	681c      	ldr	r4, [r3, #0]
 8011514:	f107 0318 	add.w	r3, r7, #24
 8011518:	68b9      	ldr	r1, [r7, #8]
 801151a:	4618      	mov	r0, r3
 801151c:	f7fb ff03 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
 8011520:	f107 0318 	add.w	r3, r7, #24
 8011524:	687a      	ldr	r2, [r7, #4]
 8011526:	4619      	mov	r1, r3
 8011528:	68f8      	ldr	r0, [r7, #12]
 801152a:	47a0      	blx	r4
 801152c:	f107 0318 	add.w	r3, r7, #24
 8011530:	4618      	mov	r0, r3
 8011532:	f7fc fa5c 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 8011536:	bf00      	nop
 8011538:	3724      	adds	r7, #36	; 0x24
 801153a:	46bd      	mov	sp, r7
 801153c:	bd90      	pop	{r4, r7, pc}
	...

08011540 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 8011540:	b590      	push	{r4, r7, lr}
 8011542:	b085      	sub	sp, #20
 8011544:	af00      	add	r7, sp, #0
 8011546:	60f8      	str	r0, [r7, #12]
 8011548:	60b9      	str	r1, [r7, #8]
 801154a:	607a      	str	r2, [r7, #4]
    print("\n");
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	332c      	adds	r3, #44	; 0x2c
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	4916      	ldr	r1, [pc, #88]	; (80115b0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 8011556:	68f8      	ldr	r0, [r7, #12]
 8011558:	4798      	blx	r3
    print(file.asCharString());
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	332c      	adds	r3, #44	; 0x2c
 8011560:	681c      	ldr	r4, [r3, #0]
 8011562:	68b8      	ldr	r0, [r7, #8]
 8011564:	f7fc fa16 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 8011568:	4603      	mov	r3, r0
 801156a:	4619      	mov	r1, r3
 801156c:	68f8      	ldr	r0, [r7, #12]
 801156e:	47a0      	blx	r4
    print(":");
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	332c      	adds	r3, #44	; 0x2c
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	490e      	ldr	r1, [pc, #56]	; (80115b4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 801157a:	68f8      	ldr	r0, [r7, #12]
 801157c:	4798      	blx	r3
    print(lineNumber);
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	3334      	adds	r3, #52	; 0x34
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	6879      	ldr	r1, [r7, #4]
 8011588:	68f8      	ldr	r0, [r7, #12]
 801158a:	4798      	blx	r3
    print(":");
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	332c      	adds	r3, #44	; 0x2c
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	4907      	ldr	r1, [pc, #28]	; (80115b4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 8011596:	68f8      	ldr	r0, [r7, #12]
 8011598:	4798      	blx	r3
    print(" error:");
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	332c      	adds	r3, #44	; 0x2c
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	4905      	ldr	r1, [pc, #20]	; (80115b8 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 80115a4:	68f8      	ldr	r0, [r7, #12]
 80115a6:	4798      	blx	r3
}
 80115a8:	bf00      	nop
 80115aa:	3714      	adds	r7, #20
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd90      	pop	{r4, r7, pc}
 80115b0:	08025478 	.word	0x08025478
 80115b4:	080255d4 	.word	0x080255d4
 80115b8:	080255d8 	.word	0x080255d8

080115bc <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 80115bc:	b590      	push	{r4, r7, lr}
 80115be:	b085      	sub	sp, #20
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	60f8      	str	r0, [r7, #12]
 80115c4:	60b9      	str	r1, [r7, #8]
 80115c6:	607a      	str	r2, [r7, #4]
    print("\n");
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	332c      	adds	r3, #44	; 0x2c
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	4916      	ldr	r1, [pc, #88]	; (801162c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 80115d2:	68f8      	ldr	r0, [r7, #12]
 80115d4:	4798      	blx	r3
    print(file.asCharString());
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	332c      	adds	r3, #44	; 0x2c
 80115dc:	681c      	ldr	r4, [r3, #0]
 80115de:	68b8      	ldr	r0, [r7, #8]
 80115e0:	f7fc f9d8 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 80115e4:	4603      	mov	r3, r0
 80115e6:	4619      	mov	r1, r3
 80115e8:	68f8      	ldr	r0, [r7, #12]
 80115ea:	47a0      	blx	r4
    print("(");
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	332c      	adds	r3, #44	; 0x2c
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	490e      	ldr	r1, [pc, #56]	; (8011630 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 80115f6:	68f8      	ldr	r0, [r7, #12]
 80115f8:	4798      	blx	r3
    print(lineNumber);
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	3334      	adds	r3, #52	; 0x34
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	6879      	ldr	r1, [r7, #4]
 8011604:	68f8      	ldr	r0, [r7, #12]
 8011606:	4798      	blx	r3
    print("):");
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	332c      	adds	r3, #44	; 0x2c
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	4908      	ldr	r1, [pc, #32]	; (8011634 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 8011612:	68f8      	ldr	r0, [r7, #12]
 8011614:	4798      	blx	r3
    print(" error:");
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	332c      	adds	r3, #44	; 0x2c
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	4906      	ldr	r1, [pc, #24]	; (8011638 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 8011620:	68f8      	ldr	r0, [r7, #12]
 8011622:	4798      	blx	r3
}
 8011624:	bf00      	nop
 8011626:	3714      	adds	r7, #20
 8011628:	46bd      	mov	sp, r7
 801162a:	bd90      	pop	{r4, r7, pc}
 801162c:	08025478 	.word	0x08025478
 8011630:	080255e0 	.word	0x080255e0
 8011634:	080255e4 	.word	0x080255e4
 8011638:	080255d8 	.word	0x080255d8

0801163c <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b082      	sub	sp, #8
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	7a1b      	ldrb	r3, [r3, #8]
 801164a:	2b02      	cmp	r3, #2
 801164c:	d106      	bne.n	801165c <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	3328      	adds	r3, #40	; 0x28
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	6839      	ldr	r1, [r7, #0]
 8011658:	6878      	ldr	r0, [r7, #4]
 801165a:	4798      	blx	r3
}
 801165c:	bf00      	nop
 801165e:	3708      	adds	r7, #8
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}

08011664 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b082      	sub	sp, #8
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	6039      	str	r1, [r7, #0]
    while (*s) {
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	781b      	ldrb	r3, [r3, #0]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d009      	beq.n	801168a <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 8011676:	4b0a      	ldr	r3, [pc, #40]	; (80116a0 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	683a      	ldr	r2, [r7, #0]
 801167c:	7812      	ldrb	r2, [r2, #0]
 801167e:	4610      	mov	r0, r2
 8011680:	4798      	blx	r3
        s++;
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	3301      	adds	r3, #1
 8011686:	603b      	str	r3, [r7, #0]
    while (*s) {
 8011688:	e7f1      	b.n	801166e <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	334c      	adds	r3, #76	; 0x4c
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	6878      	ldr	r0, [r7, #4]
 8011694:	4798      	blx	r3
}
 8011696:	bf00      	nop
 8011698:	3708      	adds	r7, #8
 801169a:	46bd      	mov	sp, r7
 801169c:	bd80      	pop	{r7, pc}
 801169e:	bf00      	nop
 80116a0:	200000c0 	.word	0x200000c0

080116a4 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b082      	sub	sp, #8
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 80116ac:	4b03      	ldr	r3, [pc, #12]	; (80116bc <_ZN17ConsoleTestOutput5flushEv+0x18>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	4798      	blx	r3
}
 80116b2:	bf00      	nop
 80116b4:	3708      	adds	r7, #8
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}
 80116ba:	bf00      	nop
 80116bc:	200000c4 	.word	0x200000c4

080116c0 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b082      	sub	sp, #8
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	4618      	mov	r0, r3
 80116cc:	f7ff fb00 	bl	8010cd0 <_ZN10TestOutputC1Ev>
 80116d0:	4a06      	ldr	r2, [pc, #24]	; (80116ec <_ZN19CompositeTestOutputC1Ev+0x2c>)
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	601a      	str	r2, [r3, #0]
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	2200      	movs	r2, #0
 80116da:	611a      	str	r2, [r3, #16]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	2200      	movs	r2, #0
 80116e0:	615a      	str	r2, [r3, #20]
{
}
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	4618      	mov	r0, r3
 80116e6:	3708      	adds	r7, #8
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}
 80116ec:	08028eb0 	.word	0x08028eb0

080116f0 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b082      	sub	sp, #8
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	4a0e      	ldr	r2, [pc, #56]	; (8011734 <_ZN19CompositeTestOutputD1Ev+0x44>)
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	691b      	ldr	r3, [r3, #16]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d004      	beq.n	8011710 <_ZN19CompositeTestOutputD1Ev+0x20>
 8011706:	681a      	ldr	r2, [r3, #0]
 8011708:	3204      	adds	r2, #4
 801170a:	6812      	ldr	r2, [r2, #0]
 801170c:	4618      	mov	r0, r3
 801170e:	4790      	blx	r2
  delete outputTwo_;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	695b      	ldr	r3, [r3, #20]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d004      	beq.n	8011722 <_ZN19CompositeTestOutputD1Ev+0x32>
 8011718:	681a      	ldr	r2, [r3, #0]
 801171a:	3204      	adds	r2, #4
 801171c:	6812      	ldr	r2, [r2, #0]
 801171e:	4618      	mov	r0, r3
 8011720:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	4618      	mov	r0, r3
 8011726:	f7ff faf1 	bl	8010d0c <_ZN10TestOutputD1Ev>
}
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	4618      	mov	r0, r3
 801172e:	3708      	adds	r7, #8
 8011730:	46bd      	mov	sp, r7
 8011732:	bd80      	pop	{r7, pc}
 8011734:	08028eb0 	.word	0x08028eb0

08011738 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 8011738:	b580      	push	{r7, lr}
 801173a:	b082      	sub	sp, #8
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
}
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f7ff ffd5 	bl	80116f0 <_ZN19CompositeTestOutputD1Ev>
 8011746:	2118      	movs	r1, #24
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f7f9 f9e9 	bl	800ab20 <_ZdlPvj>
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	4618      	mov	r0, r3
 8011752:	3708      	adds	r7, #8
 8011754:	46bd      	mov	sp, r7
 8011756:	bd80      	pop	{r7, pc}

08011758 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b082      	sub	sp, #8
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
 8011760:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	691b      	ldr	r3, [r3, #16]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d004      	beq.n	8011774 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 801176a:	681a      	ldr	r2, [r3, #0]
 801176c:	3204      	adds	r2, #4
 801176e:	6812      	ldr	r2, [r2, #0]
 8011770:	4618      	mov	r0, r3
 8011772:	4790      	blx	r2
  outputOne_ = output;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	683a      	ldr	r2, [r7, #0]
 8011778:	611a      	str	r2, [r3, #16]
}
 801177a:	bf00      	nop
 801177c:	3708      	adds	r7, #8
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}

08011782 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 8011782:	b580      	push	{r7, lr}
 8011784:	b082      	sub	sp, #8
 8011786:	af00      	add	r7, sp, #0
 8011788:	6078      	str	r0, [r7, #4]
 801178a:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	695b      	ldr	r3, [r3, #20]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d004      	beq.n	801179e <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 8011794:	681a      	ldr	r2, [r3, #0]
 8011796:	3204      	adds	r2, #4
 8011798:	6812      	ldr	r2, [r2, #0]
 801179a:	4618      	mov	r0, r3
 801179c:	4790      	blx	r2
  outputTwo_ = output;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	683a      	ldr	r2, [r7, #0]
 80117a2:	615a      	str	r2, [r3, #20]
}
 80117a4:	bf00      	nop
 80117a6:	3708      	adds	r7, #8
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}

080117ac <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b082      	sub	sp, #8
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	691b      	ldr	r3, [r3, #16]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d008      	beq.n	80117ce <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	691a      	ldr	r2, [r3, #16]
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	691b      	ldr	r3, [r3, #16]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	3308      	adds	r3, #8
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	4610      	mov	r0, r2
 80117cc:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	695b      	ldr	r3, [r3, #20]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d008      	beq.n	80117e8 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	695a      	ldr	r2, [r3, #20]
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	695b      	ldr	r3, [r3, #20]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	3308      	adds	r3, #8
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	4610      	mov	r0, r2
 80117e6:	4798      	blx	r3
}
 80117e8:	bf00      	nop
 80117ea:	3708      	adds	r7, #8
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}

080117f0 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b082      	sub	sp, #8
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	691b      	ldr	r3, [r3, #16]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d009      	beq.n	8011816 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	691a      	ldr	r2, [r3, #16]
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	691b      	ldr	r3, [r3, #16]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	330c      	adds	r3, #12
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	6839      	ldr	r1, [r7, #0]
 8011812:	4610      	mov	r0, r2
 8011814:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	695b      	ldr	r3, [r3, #20]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d009      	beq.n	8011832 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	695a      	ldr	r2, [r3, #20]
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	695b      	ldr	r3, [r3, #20]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	330c      	adds	r3, #12
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	6839      	ldr	r1, [r7, #0]
 801182e:	4610      	mov	r0, r2
 8011830:	4798      	blx	r3
}
 8011832:	bf00      	nop
 8011834:	3708      	adds	r7, #8
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}

0801183a <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 801183a:	b580      	push	{r7, lr}
 801183c:	b082      	sub	sp, #8
 801183e:	af00      	add	r7, sp, #0
 8011840:	6078      	str	r0, [r7, #4]
 8011842:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	691b      	ldr	r3, [r3, #16]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d009      	beq.n	8011860 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	691a      	ldr	r2, [r3, #16]
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	691b      	ldr	r3, [r3, #16]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	3310      	adds	r3, #16
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	6839      	ldr	r1, [r7, #0]
 801185c:	4610      	mov	r0, r2
 801185e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	695b      	ldr	r3, [r3, #20]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d009      	beq.n	801187c <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	695a      	ldr	r2, [r3, #20]
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	695b      	ldr	r3, [r3, #20]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	3310      	adds	r3, #16
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	6839      	ldr	r1, [r7, #0]
 8011878:	4610      	mov	r0, r2
 801187a:	4798      	blx	r3
}
 801187c:	bf00      	nop
 801187e:	3708      	adds	r7, #8
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}

08011884 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b082      	sub	sp, #8
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
 801188c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	691b      	ldr	r3, [r3, #16]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d009      	beq.n	80118aa <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	691a      	ldr	r2, [r3, #16]
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	691b      	ldr	r3, [r3, #16]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	3314      	adds	r3, #20
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	6839      	ldr	r1, [r7, #0]
 80118a6:	4610      	mov	r0, r2
 80118a8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	695b      	ldr	r3, [r3, #20]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d009      	beq.n	80118c6 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	695a      	ldr	r2, [r3, #20]
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	695b      	ldr	r3, [r3, #20]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	3314      	adds	r3, #20
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	6839      	ldr	r1, [r7, #0]
 80118c2:	4610      	mov	r0, r2
 80118c4:	4798      	blx	r3
}
 80118c6:	bf00      	nop
 80118c8:	3708      	adds	r7, #8
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}

080118ce <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 80118ce:	b580      	push	{r7, lr}
 80118d0:	b082      	sub	sp, #8
 80118d2:	af00      	add	r7, sp, #0
 80118d4:	6078      	str	r0, [r7, #4]
 80118d6:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	691b      	ldr	r3, [r3, #16]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d009      	beq.n	80118f4 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	691a      	ldr	r2, [r3, #16]
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	691b      	ldr	r3, [r3, #16]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	3318      	adds	r3, #24
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	6839      	ldr	r1, [r7, #0]
 80118f0:	4610      	mov	r0, r2
 80118f2:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	695b      	ldr	r3, [r3, #20]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d009      	beq.n	8011910 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	695a      	ldr	r2, [r3, #20]
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	695b      	ldr	r3, [r3, #20]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	3318      	adds	r3, #24
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	6839      	ldr	r1, [r7, #0]
 801190c:	4610      	mov	r0, r2
 801190e:	4798      	blx	r3
}
 8011910:	bf00      	nop
 8011912:	3708      	adds	r7, #8
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}

08011918 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b082      	sub	sp, #8
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
 8011920:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	691b      	ldr	r3, [r3, #16]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d009      	beq.n	801193e <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	691a      	ldr	r2, [r3, #16]
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	691b      	ldr	r3, [r3, #16]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	331c      	adds	r3, #28
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	6839      	ldr	r1, [r7, #0]
 801193a:	4610      	mov	r0, r2
 801193c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	695b      	ldr	r3, [r3, #20]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d009      	beq.n	801195a <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	695a      	ldr	r2, [r3, #20]
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	695b      	ldr	r3, [r3, #20]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	331c      	adds	r3, #28
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	6839      	ldr	r1, [r7, #0]
 8011956:	4610      	mov	r0, r2
 8011958:	4798      	blx	r3
}
 801195a:	bf00      	nop
 801195c:	3708      	adds	r7, #8
 801195e:	46bd      	mov	sp, r7
 8011960:	bd80      	pop	{r7, pc}

08011962 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 8011962:	b580      	push	{r7, lr}
 8011964:	b082      	sub	sp, #8
 8011966:	af00      	add	r7, sp, #0
 8011968:	6078      	str	r0, [r7, #4]
 801196a:	460b      	mov	r3, r1
 801196c:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	691b      	ldr	r3, [r3, #16]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d009      	beq.n	801198a <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	691a      	ldr	r2, [r3, #16]
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	691b      	ldr	r3, [r3, #16]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	3320      	adds	r3, #32
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	78f9      	ldrb	r1, [r7, #3]
 8011986:	4610      	mov	r0, r2
 8011988:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	695b      	ldr	r3, [r3, #20]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d009      	beq.n	80119a6 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	695a      	ldr	r2, [r3, #20]
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	695b      	ldr	r3, [r3, #20]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	3320      	adds	r3, #32
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	78f9      	ldrb	r1, [r7, #3]
 80119a2:	4610      	mov	r0, r2
 80119a4:	4798      	blx	r3
}
 80119a6:	bf00      	nop
 80119a8:	3708      	adds	r7, #8
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}

080119ae <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 80119ae:	b580      	push	{r7, lr}
 80119b0:	b082      	sub	sp, #8
 80119b2:	af00      	add	r7, sp, #0
 80119b4:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	691b      	ldr	r3, [r3, #16]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d008      	beq.n	80119d0 <_ZN19CompositeTestOutput5colorEv+0x22>
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	691a      	ldr	r2, [r3, #16]
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	691b      	ldr	r3, [r3, #16]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	3324      	adds	r3, #36	; 0x24
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	4610      	mov	r0, r2
 80119ce:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	695b      	ldr	r3, [r3, #20]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d008      	beq.n	80119ea <_ZN19CompositeTestOutput5colorEv+0x3c>
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	695a      	ldr	r2, [r3, #20]
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	695b      	ldr	r3, [r3, #20]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	3324      	adds	r3, #36	; 0x24
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	4610      	mov	r0, r2
 80119e8:	4798      	blx	r3
}
 80119ea:	bf00      	nop
 80119ec:	3708      	adds	r7, #8
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}

080119f2 <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 80119f2:	b580      	push	{r7, lr}
 80119f4:	b082      	sub	sp, #8
 80119f6:	af00      	add	r7, sp, #0
 80119f8:	6078      	str	r0, [r7, #4]
 80119fa:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	691b      	ldr	r3, [r3, #16]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d009      	beq.n	8011a18 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	691a      	ldr	r2, [r3, #16]
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	691b      	ldr	r3, [r3, #16]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	3328      	adds	r3, #40	; 0x28
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	6839      	ldr	r1, [r7, #0]
 8011a14:	4610      	mov	r0, r2
 8011a16:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	695b      	ldr	r3, [r3, #20]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d009      	beq.n	8011a34 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	695a      	ldr	r2, [r3, #20]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	695b      	ldr	r3, [r3, #20]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	3328      	adds	r3, #40	; 0x28
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	6839      	ldr	r1, [r7, #0]
 8011a30:	4610      	mov	r0, r2
 8011a32:	4798      	blx	r3
}
 8011a34:	bf00      	nop
 8011a36:	3708      	adds	r7, #8
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}

08011a3c <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b082      	sub	sp, #8
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
 8011a44:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	691b      	ldr	r3, [r3, #16]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d009      	beq.n	8011a62 <_ZN19CompositeTestOutput5printEPKc+0x26>
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	691a      	ldr	r2, [r3, #16]
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	691b      	ldr	r3, [r3, #16]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	332c      	adds	r3, #44	; 0x2c
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	6839      	ldr	r1, [r7, #0]
 8011a5e:	4610      	mov	r0, r2
 8011a60:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	695b      	ldr	r3, [r3, #20]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d009      	beq.n	8011a7e <_ZN19CompositeTestOutput5printEPKc+0x42>
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	695a      	ldr	r2, [r3, #20]
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	695b      	ldr	r3, [r3, #20]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	332c      	adds	r3, #44	; 0x2c
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	6839      	ldr	r1, [r7, #0]
 8011a7a:	4610      	mov	r0, r2
 8011a7c:	4798      	blx	r3
}
 8011a7e:	bf00      	nop
 8011a80:	3708      	adds	r7, #8
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}

08011a86 <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 8011a86:	b580      	push	{r7, lr}
 8011a88:	b082      	sub	sp, #8
 8011a8a:	af00      	add	r7, sp, #0
 8011a8c:	6078      	str	r0, [r7, #4]
 8011a8e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	691b      	ldr	r3, [r3, #16]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d009      	beq.n	8011aac <_ZN19CompositeTestOutput5printEl+0x26>
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	691a      	ldr	r2, [r3, #16]
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	691b      	ldr	r3, [r3, #16]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	3330      	adds	r3, #48	; 0x30
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	6839      	ldr	r1, [r7, #0]
 8011aa8:	4610      	mov	r0, r2
 8011aaa:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	695b      	ldr	r3, [r3, #20]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d009      	beq.n	8011ac8 <_ZN19CompositeTestOutput5printEl+0x42>
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	695a      	ldr	r2, [r3, #20]
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	695b      	ldr	r3, [r3, #20]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	3330      	adds	r3, #48	; 0x30
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	6839      	ldr	r1, [r7, #0]
 8011ac4:	4610      	mov	r0, r2
 8011ac6:	4798      	blx	r3
}
 8011ac8:	bf00      	nop
 8011aca:	3708      	adds	r7, #8
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}

08011ad0 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b082      	sub	sp, #8
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
 8011ad8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	691b      	ldr	r3, [r3, #16]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d009      	beq.n	8011af6 <_ZN19CompositeTestOutput5printEj+0x26>
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	691a      	ldr	r2, [r3, #16]
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	691b      	ldr	r3, [r3, #16]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	3334      	adds	r3, #52	; 0x34
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	6839      	ldr	r1, [r7, #0]
 8011af2:	4610      	mov	r0, r2
 8011af4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	695b      	ldr	r3, [r3, #20]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d009      	beq.n	8011b12 <_ZN19CompositeTestOutput5printEj+0x42>
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	695a      	ldr	r2, [r3, #20]
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	695b      	ldr	r3, [r3, #20]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	3334      	adds	r3, #52	; 0x34
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	6839      	ldr	r1, [r7, #0]
 8011b0e:	4610      	mov	r0, r2
 8011b10:	4798      	blx	r3
}
 8011b12:	bf00      	nop
 8011b14:	3708      	adds	r7, #8
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}

08011b1a <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 8011b1a:	b580      	push	{r7, lr}
 8011b1c:	b084      	sub	sp, #16
 8011b1e:	af00      	add	r7, sp, #0
 8011b20:	60f8      	str	r0, [r7, #12]
 8011b22:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	691b      	ldr	r3, [r3, #16]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d00a      	beq.n	8011b44 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	691a      	ldr	r2, [r3, #16]
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	691b      	ldr	r3, [r3, #16]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	3338      	adds	r3, #56	; 0x38
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	ed97 0b00 	vldr	d0, [r7]
 8011b40:	4610      	mov	r0, r2
 8011b42:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	695b      	ldr	r3, [r3, #20]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d00a      	beq.n	8011b62 <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	695a      	ldr	r2, [r3, #20]
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	695b      	ldr	r3, [r3, #20]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	3338      	adds	r3, #56	; 0x38
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	ed97 0b00 	vldr	d0, [r7]
 8011b5e:	4610      	mov	r0, r2
 8011b60:	4798      	blx	r3
}
 8011b62:	bf00      	nop
 8011b64:	3710      	adds	r7, #16
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}

08011b6a <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 8011b6a:	b580      	push	{r7, lr}
 8011b6c:	b082      	sub	sp, #8
 8011b6e:	af00      	add	r7, sp, #0
 8011b70:	6078      	str	r0, [r7, #4]
 8011b72:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	691b      	ldr	r3, [r3, #16]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d009      	beq.n	8011b90 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	691a      	ldr	r2, [r3, #16]
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	691b      	ldr	r3, [r3, #16]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	333c      	adds	r3, #60	; 0x3c
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	6839      	ldr	r1, [r7, #0]
 8011b8c:	4610      	mov	r0, r2
 8011b8e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	695b      	ldr	r3, [r3, #20]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d009      	beq.n	8011bac <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	695a      	ldr	r2, [r3, #20]
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	695b      	ldr	r3, [r3, #20]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	333c      	adds	r3, #60	; 0x3c
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	6839      	ldr	r1, [r7, #0]
 8011ba8:	4610      	mov	r0, r2
 8011baa:	4798      	blx	r3
}
 8011bac:	bf00      	nop
 8011bae:	3708      	adds	r7, #8
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}

08011bb4 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b082      	sub	sp, #8
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
 8011bbc:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	691b      	ldr	r3, [r3, #16]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d009      	beq.n	8011bda <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	691a      	ldr	r2, [r3, #16]
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	691b      	ldr	r3, [r3, #16]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	3344      	adds	r3, #68	; 0x44
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	6839      	ldr	r1, [r7, #0]
 8011bd6:	4610      	mov	r0, r2
 8011bd8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	695b      	ldr	r3, [r3, #20]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d009      	beq.n	8011bf6 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	695a      	ldr	r2, [r3, #20]
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	695b      	ldr	r3, [r3, #20]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	3344      	adds	r3, #68	; 0x44
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	6839      	ldr	r1, [r7, #0]
 8011bf2:	4610      	mov	r0, r2
 8011bf4:	4798      	blx	r3
}
 8011bf6:	bf00      	nop
 8011bf8:	3708      	adds	r7, #8
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}

08011bfe <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 8011bfe:	b580      	push	{r7, lr}
 8011c00:	b082      	sub	sp, #8
 8011c02:	af00      	add	r7, sp, #0
 8011c04:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	691b      	ldr	r3, [r3, #16]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d008      	beq.n	8011c20 <_ZN19CompositeTestOutput5flushEv+0x22>
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	691a      	ldr	r2, [r3, #16]
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	691b      	ldr	r3, [r3, #16]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	334c      	adds	r3, #76	; 0x4c
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	4610      	mov	r0, r2
 8011c1e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	695b      	ldr	r3, [r3, #20]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d008      	beq.n	8011c3a <_ZN19CompositeTestOutput5flushEv+0x3c>
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	695a      	ldr	r2, [r3, #20]
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	695b      	ldr	r3, [r3, #20]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	334c      	adds	r3, #76	; 0x4c
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	4610      	mov	r0, r2
 8011c38:	4798      	blx	r3
}
 8011c3a:	bf00      	nop
 8011c3c:	3708      	adds	r7, #8
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bd80      	pop	{r7, pc}

08011c42 <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 8011c42:	b480      	push	{r7}
 8011c44:	b085      	sub	sp, #20
 8011c46:	af00      	add	r7, sp, #0
 8011c48:	60f8      	str	r0, [r7, #12]
 8011c4a:	60b9      	str	r1, [r7, #8]
 8011c4c:	607a      	str	r2, [r7, #4]
    }
 8011c4e:	bf00      	nop
 8011c50:	3714      	adds	r7, #20
 8011c52:	46bd      	mov	sp, r7
 8011c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c58:	4770      	bx	lr

08011c5a <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 8011c5a:	b480      	push	{r7}
 8011c5c:	b085      	sub	sp, #20
 8011c5e:	af00      	add	r7, sp, #0
 8011c60:	60f8      	str	r0, [r7, #12]
 8011c62:	60b9      	str	r1, [r7, #8]
 8011c64:	607a      	str	r2, [r7, #4]
    }
 8011c66:	bf00      	nop
 8011c68:	3714      	adds	r7, #20
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c70:	4770      	bx	lr
	...

08011c74 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b082      	sub	sp, #8
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
 8011c7c:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 8011c7e:	4a0b      	ldr	r2, [pc, #44]	; (8011cac <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	601a      	str	r2, [r3, #0]
 8011c84:	f000 f9ce 	bl	8012024 <_ZN14NullTestPlugin8instanceEv>
 8011c88:	4602      	mov	r2, r0
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	605a      	str	r2, [r3, #4]
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	3308      	adds	r3, #8
 8011c92:	6839      	ldr	r1, [r7, #0]
 8011c94:	4618      	mov	r0, r3
 8011c96:	f7fb fb46 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	2201      	movs	r2, #1
 8011c9e:	741a      	strb	r2, [r3, #16]
{
}
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3708      	adds	r7, #8
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}
 8011caa:	bf00      	nop
 8011cac:	0802906c 	.word	0x0802906c

08011cb0 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b082      	sub	sp, #8
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 8011cba:	4a0a      	ldr	r2, [pc, #40]	; (8011ce4 <_ZN10TestPluginC1EPS_+0x34>)
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	601a      	str	r2, [r3, #0]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	683a      	ldr	r2, [r7, #0]
 8011cc4:	605a      	str	r2, [r3, #4]
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	3308      	adds	r3, #8
 8011cca:	4907      	ldr	r1, [pc, #28]	; (8011ce8 <_ZN10TestPluginC1EPS_+0x38>)
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f7fb fad6 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	2201      	movs	r2, #1
 8011cd6:	741a      	strb	r2, [r3, #16]
{
}
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	4618      	mov	r0, r3
 8011cdc:	3708      	adds	r7, #8
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}
 8011ce2:	bf00      	nop
 8011ce4:	0802906c 	.word	0x0802906c
 8011ce8:	080255e8 	.word	0x080255e8

08011cec <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b082      	sub	sp, #8
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	4a06      	ldr	r2, [pc, #24]	; (8011d10 <_ZN10TestPluginD1Ev+0x24>)
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	601a      	str	r2, [r3, #0]
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	3308      	adds	r3, #8
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f7fb fe75 	bl	800d9ee <_ZN12SimpleStringD1Ev>
{
}
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	4618      	mov	r0, r3
 8011d08:	3708      	adds	r7, #8
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	bd80      	pop	{r7, pc}
 8011d0e:	bf00      	nop
 8011d10:	0802906c 	.word	0x0802906c

08011d14 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b082      	sub	sp, #8
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
}
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f7ff ffe5 	bl	8011cec <_ZN10TestPluginD1Ev>
 8011d22:	2114      	movs	r1, #20
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	f7f8 fefb 	bl	800ab20 <_ZdlPvj>
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	3708      	adds	r7, #8
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd80      	pop	{r7, pc}

08011d34 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 8011d34:	b480      	push	{r7}
 8011d36:	b083      	sub	sp, #12
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
 8011d3c:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	683a      	ldr	r2, [r7, #0]
 8011d42:	605a      	str	r2, [r3, #4]
    return this;
 8011d44:	687b      	ldr	r3, [r7, #4]
}
 8011d46:	4618      	mov	r0, r3
 8011d48:	370c      	adds	r7, #12
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d50:	4770      	bx	lr

08011d52 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 8011d52:	b580      	push	{r7, lr}
 8011d54:	b084      	sub	sp, #16
 8011d56:	af00      	add	r7, sp, #0
 8011d58:	60f8      	str	r0, [r7, #12]
 8011d5a:	60b9      	str	r1, [r7, #8]
 8011d5c:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	7c1b      	ldrb	r3, [r3, #16]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d007      	beq.n	8011d76 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	3308      	adds	r3, #8
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	687a      	ldr	r2, [r7, #4]
 8011d70:	68b9      	ldr	r1, [r7, #8]
 8011d72:	68f8      	ldr	r0, [r7, #12]
 8011d74:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	6858      	ldr	r0, [r3, #4]
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	3314      	adds	r3, #20
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	687a      	ldr	r2, [r7, #4]
 8011d86:	68b9      	ldr	r1, [r7, #8]
 8011d88:	4798      	blx	r3
}
 8011d8a:	bf00      	nop
 8011d8c:	3710      	adds	r7, #16
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}

08011d92 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 8011d92:	b580      	push	{r7, lr}
 8011d94:	b084      	sub	sp, #16
 8011d96:	af00      	add	r7, sp, #0
 8011d98:	60f8      	str	r0, [r7, #12]
 8011d9a:	60b9      	str	r1, [r7, #8]
 8011d9c:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	6858      	ldr	r0, [r3, #4]
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	685b      	ldr	r3, [r3, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	3318      	adds	r3, #24
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	687a      	ldr	r2, [r7, #4]
 8011dae:	68b9      	ldr	r1, [r7, #8]
 8011db0:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	7c1b      	ldrb	r3, [r3, #16]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d007      	beq.n	8011dca <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	330c      	adds	r3, #12
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	687a      	ldr	r2, [r7, #4]
 8011dc4:	68b9      	ldr	r1, [r7, #8]
 8011dc6:	68f8      	ldr	r0, [r7, #12]
 8011dc8:	4798      	blx	r3
}
 8011dca:	bf00      	nop
 8011dcc:	3710      	adds	r7, #16
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}

08011dd2 <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 8011dd2:	b590      	push	{r4, r7, lr}
 8011dd4:	b085      	sub	sp, #20
 8011dd6:	af00      	add	r7, sp, #0
 8011dd8:	60f8      	str	r0, [r7, #12]
 8011dda:	60b9      	str	r1, [r7, #8]
 8011ddc:	607a      	str	r2, [r7, #4]
 8011dde:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	331c      	adds	r3, #28
 8011de6:	681c      	ldr	r4, [r3, #0]
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	687a      	ldr	r2, [r7, #4]
 8011dec:	68b9      	ldr	r1, [r7, #8]
 8011dee:	68f8      	ldr	r0, [r7, #12]
 8011df0:	47a0      	blx	r4
 8011df2:	4603      	mov	r3, r0
}
 8011df4:	4618      	mov	r0, r3
 8011df6:	3714      	adds	r7, #20
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd90      	pop	{r4, r7, pc}

08011dfc <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 8011dfc:	b590      	push	{r4, r7, lr}
 8011dfe:	b085      	sub	sp, #20
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	60f8      	str	r0, [r7, #12]
 8011e04:	60b9      	str	r1, [r7, #8]
 8011e06:	607a      	str	r2, [r7, #4]
 8011e08:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	3310      	adds	r3, #16
 8011e10:	681c      	ldr	r4, [r3, #0]
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	68b9      	ldr	r1, [r7, #8]
 8011e18:	68f8      	ldr	r0, [r7, #12]
 8011e1a:	47a0      	blx	r4
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d001      	beq.n	8011e26 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 8011e22:	2301      	movs	r3, #1
 8011e24:	e011      	b.n	8011e4a <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	685b      	ldr	r3, [r3, #4]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d00c      	beq.n	8011e48 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	6858      	ldr	r0, [r3, #4]
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	331c      	adds	r3, #28
 8011e3a:	681c      	ldr	r4, [r3, #0]
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	687a      	ldr	r2, [r7, #4]
 8011e40:	68b9      	ldr	r1, [r7, #8]
 8011e42:	47a0      	blx	r4
 8011e44:	4603      	mov	r3, r0
 8011e46:	e000      	b.n	8011e4a <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 8011e48:	2300      	movs	r3, #0
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3714      	adds	r7, #20
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd90      	pop	{r4, r7, pc}

08011e52 <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 8011e52:	b480      	push	{r7}
 8011e54:	b083      	sub	sp, #12
 8011e56:	af00      	add	r7, sp, #0
 8011e58:	6078      	str	r0, [r7, #4]
    return name_;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	3308      	adds	r3, #8
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	370c      	adds	r7, #12
 8011e62:	46bd      	mov	sp, r7
 8011e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e68:	4770      	bx	lr

08011e6a <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 8011e6a:	b580      	push	{r7, lr}
 8011e6c:	b082      	sub	sp, #8
 8011e6e:	af00      	add	r7, sp, #0
 8011e70:	6078      	str	r0, [r7, #4]
 8011e72:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	3308      	adds	r3, #8
 8011e78:	4619      	mov	r1, r3
 8011e7a:	6838      	ldr	r0, [r7, #0]
 8011e7c:	f7fb fdc3 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 8011e80:	4603      	mov	r3, r0
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d001      	beq.n	8011e8a <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	e00d      	b.n	8011ea6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d007      	beq.n	8011ea2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	685b      	ldr	r3, [r3, #4]
 8011e96:	6839      	ldr	r1, [r7, #0]
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7ff ffe6 	bl	8011e6a <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	e001      	b.n	8011ea6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	685b      	ldr	r3, [r3, #4]
}
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	3708      	adds	r7, #8
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}

08011eae <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 8011eae:	b480      	push	{r7}
 8011eb0:	b083      	sub	sp, #12
 8011eb2:	af00      	add	r7, sp, #0
 8011eb4:	6078      	str	r0, [r7, #4]
    return next_;
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	685b      	ldr	r3, [r3, #4]
}
 8011eba:	4618      	mov	r0, r3
 8011ebc:	370c      	adds	r7, #12
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec4:	4770      	bx	lr

08011ec6 <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 8011ec6:	b580      	push	{r7, lr}
 8011ec8:	b084      	sub	sp, #16
 8011eca:	af00      	add	r7, sp, #0
 8011ecc:	6078      	str	r0, [r7, #4]
 8011ece:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	685b      	ldr	r3, [r3, #4]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d00e      	beq.n	8011efa <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	685b      	ldr	r3, [r3, #4]
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f7ff ffb6 	bl	8011e52 <_ZN10TestPlugin7getNameEv>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	6839      	ldr	r1, [r7, #0]
 8011eea:	4618      	mov	r0, r3
 8011eec:	f7fb fd8b 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d001      	beq.n	8011efa <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	e000      	b.n	8011efc <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 8011efa:	2300      	movs	r3, #0
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d007      	beq.n	8011f10 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	685b      	ldr	r3, [r3, #4]
 8011f04:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	685b      	ldr	r3, [r3, #4]
 8011f0a:	685a      	ldr	r2, [r3, #4]
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	605a      	str	r2, [r3, #4]
    }
    return removed;
 8011f10:	68fb      	ldr	r3, [r7, #12]
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	3710      	adds	r7, #16
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}

08011f1a <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 8011f1a:	b480      	push	{r7}
 8011f1c:	b083      	sub	sp, #12
 8011f1e:	af00      	add	r7, sp, #0
 8011f20:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	2200      	movs	r2, #0
 8011f26:	741a      	strb	r2, [r3, #16]
}
 8011f28:	bf00      	nop
 8011f2a:	370c      	adds	r7, #12
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f32:	4770      	bx	lr

08011f34 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 8011f34:	b480      	push	{r7}
 8011f36:	b083      	sub	sp, #12
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	2201      	movs	r2, #1
 8011f40:	741a      	strb	r2, [r3, #16]
}
 8011f42:	bf00      	nop
 8011f44:	370c      	adds	r7, #12
 8011f46:	46bd      	mov	sp, r7
 8011f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4c:	4770      	bx	lr

08011f4e <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 8011f4e:	b480      	push	{r7}
 8011f50:	b083      	sub	sp, #12
 8011f52:	af00      	add	r7, sp, #0
 8011f54:	6078      	str	r0, [r7, #4]
    return enabled_;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	7c1b      	ldrb	r3, [r3, #16]
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	370c      	adds	r7, #12
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f64:	4770      	bx	lr
	...

08011f68 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b082      	sub	sp, #8
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	6839      	ldr	r1, [r7, #0]
 8011f76:	4618      	mov	r0, r3
 8011f78:	f7ff fe7c 	bl	8011c74 <_ZN10TestPluginC1ERK12SimpleString>
 8011f7c:	4a05      	ldr	r2, [pc, #20]	; (8011f94 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 8011f82:	4b05      	ldr	r3, [pc, #20]	; (8011f98 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 8011f84:	2200      	movs	r2, #0
 8011f86:	601a      	str	r2, [r3, #0]
}
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3708      	adds	r7, #8
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}
 8011f92:	bf00      	nop
 8011f94:	08029028 	.word	0x08029028
 8011f98:	20000990 	.word	0x20000990

08011f9c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 8011f9c:	b480      	push	{r7}
 8011f9e:	b087      	sub	sp, #28
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	60f8      	str	r0, [r7, #12]
 8011fa4:	60b9      	str	r1, [r7, #8]
 8011fa6:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8011fa8:	4b0e      	ldr	r3, [pc, #56]	; (8011fe4 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	3b01      	subs	r3, #1
 8011fae:	617b      	str	r3, [r7, #20]
 8011fb0:	697b      	ldr	r3, [r7, #20]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	db0d      	blt.n	8011fd2 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 8011fb6:	4a0c      	ldr	r2, [pc, #48]	; (8011fe8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011fbe:	490a      	ldr	r1, [pc, #40]	; (8011fe8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	00db      	lsls	r3, r3, #3
 8011fc4:	440b      	add	r3, r1
 8011fc6:	685b      	ldr	r3, [r3, #4]
 8011fc8:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8011fca:	697b      	ldr	r3, [r7, #20]
 8011fcc:	3b01      	subs	r3, #1
 8011fce:	617b      	str	r3, [r7, #20]
 8011fd0:	e7ee      	b.n	8011fb0 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 8011fd2:	4b04      	ldr	r3, [pc, #16]	; (8011fe4 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	601a      	str	r2, [r3, #0]
}
 8011fd8:	bf00      	nop
 8011fda:	371c      	adds	r7, #28
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe2:	4770      	bx	lr
 8011fe4:	20000990 	.word	0x20000990
 8011fe8:	20000994 	.word	0x20000994

08011fec <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b082      	sub	sp, #8
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2100      	movs	r1, #0
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f7ff fe59 	bl	8011cb0 <_ZN10TestPluginC1EPS_>
 8011ffe:	4a04      	ldr	r2, [pc, #16]	; (8012010 <_ZN14NullTestPluginC1Ev+0x24>)
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	601a      	str	r2, [r3, #0]
{
}
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	4618      	mov	r0, r3
 8012008:	3708      	adds	r7, #8
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}
 801200e:	bf00      	nop
 8012010:	08028fe4 	.word	0x08028fe4

08012014 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 8012014:	b580      	push	{r7, lr}
 8012016:	af00      	add	r7, sp, #0
 8012018:	4801      	ldr	r0, [pc, #4]	; (8012020 <__tcf_0+0xc>)
 801201a:	f000 f849 	bl	80120b0 <_ZN14NullTestPluginD1Ev>
 801201e:	bd80      	pop	{r7, pc}
 8012020:	20000a94 	.word	0x20000a94

08012024 <_ZN14NullTestPlugin8instanceEv>:
{
 8012024:	b580      	push	{r7, lr}
 8012026:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 8012028:	4b12      	ldr	r3, [pc, #72]	; (8012074 <_ZN14NullTestPlugin8instanceEv+0x50>)
 801202a:	781b      	ldrb	r3, [r3, #0]
 801202c:	f3bf 8f5b 	dmb	ish
 8012030:	b2db      	uxtb	r3, r3
 8012032:	f003 0301 	and.w	r3, r3, #1
 8012036:	2b00      	cmp	r3, #0
 8012038:	bf0c      	ite	eq
 801203a:	2301      	moveq	r3, #1
 801203c:	2300      	movne	r3, #0
 801203e:	b2db      	uxtb	r3, r3
 8012040:	2b00      	cmp	r3, #0
 8012042:	d013      	beq.n	801206c <_ZN14NullTestPlugin8instanceEv+0x48>
 8012044:	480b      	ldr	r0, [pc, #44]	; (8012074 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8012046:	f00d ffdb 	bl	8020000 <__cxa_guard_acquire>
 801204a:	4603      	mov	r3, r0
 801204c:	2b00      	cmp	r3, #0
 801204e:	bf14      	ite	ne
 8012050:	2301      	movne	r3, #1
 8012052:	2300      	moveq	r3, #0
 8012054:	b2db      	uxtb	r3, r3
 8012056:	2b00      	cmp	r3, #0
 8012058:	d008      	beq.n	801206c <_ZN14NullTestPlugin8instanceEv+0x48>
 801205a:	4807      	ldr	r0, [pc, #28]	; (8012078 <_ZN14NullTestPlugin8instanceEv+0x54>)
 801205c:	f7ff ffc6 	bl	8011fec <_ZN14NullTestPluginC1Ev>
 8012060:	4804      	ldr	r0, [pc, #16]	; (8012074 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8012062:	f00d ffd9 	bl	8020018 <__cxa_guard_release>
 8012066:	4805      	ldr	r0, [pc, #20]	; (801207c <_ZN14NullTestPlugin8instanceEv+0x58>)
 8012068:	f00d fffd 	bl	8020066 <atexit>
    return &_instance;
 801206c:	4b02      	ldr	r3, [pc, #8]	; (8012078 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 801206e:	4618      	mov	r0, r3
 8012070:	bd80      	pop	{r7, pc}
 8012072:	bf00      	nop
 8012074:	20000aa8 	.word	0x20000aa8
 8012078:	20000a94 	.word	0x20000a94
 801207c:	08012015 	.word	0x08012015

08012080 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 8012080:	b480      	push	{r7}
 8012082:	b085      	sub	sp, #20
 8012084:	af00      	add	r7, sp, #0
 8012086:	60f8      	str	r0, [r7, #12]
 8012088:	60b9      	str	r1, [r7, #8]
 801208a:	607a      	str	r2, [r7, #4]
}
 801208c:	bf00      	nop
 801208e:	3714      	adds	r7, #20
 8012090:	46bd      	mov	sp, r7
 8012092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012096:	4770      	bx	lr

08012098 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 8012098:	b480      	push	{r7}
 801209a:	b085      	sub	sp, #20
 801209c:	af00      	add	r7, sp, #0
 801209e:	60f8      	str	r0, [r7, #12]
 80120a0:	60b9      	str	r1, [r7, #8]
 80120a2:	607a      	str	r2, [r7, #4]
}
 80120a4:	bf00      	nop
 80120a6:	3714      	adds	r7, #20
 80120a8:	46bd      	mov	sp, r7
 80120aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ae:	4770      	bx	lr

080120b0 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
 80120b8:	4a05      	ldr	r2, [pc, #20]	; (80120d0 <_ZN14NullTestPluginD1Ev+0x20>)
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	601a      	str	r2, [r3, #0]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	4618      	mov	r0, r3
 80120c2:	f7ff fe13 	bl	8011cec <_ZN10TestPluginD1Ev>
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	4618      	mov	r0, r3
 80120ca:	3708      	adds	r7, #8
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}
 80120d0:	08028fe4 	.word	0x08028fe4

080120d4 <_ZN14NullTestPluginD0Ev>:
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b082      	sub	sp, #8
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f7ff ffe7 	bl	80120b0 <_ZN14NullTestPluginD1Ev>
 80120e2:	2114      	movs	r1, #20
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f7f8 fd1b 	bl	800ab20 <_ZdlPvj>
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	4618      	mov	r0, r3
 80120ee:	3708      	adds	r7, #8
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}

080120f4 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b082      	sub	sp, #8
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 80120fc:	4a0f      	ldr	r2, [pc, #60]	; (801213c <_ZN12TestRegistryC1Ev+0x48>)
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	601a      	str	r2, [r3, #0]
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	2200      	movs	r2, #0
 8012106:	605a      	str	r2, [r3, #4]
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	2200      	movs	r2, #0
 801210c:	609a      	str	r2, [r3, #8]
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	2200      	movs	r2, #0
 8012112:	60da      	str	r2, [r3, #12]
 8012114:	f7ff ff86 	bl	8012024 <_ZN14NullTestPlugin8instanceEv>
 8012118:	4602      	mov	r2, r0
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	611a      	str	r2, [r3, #16]
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	2200      	movs	r2, #0
 8012122:	751a      	strb	r2, [r3, #20]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2200      	movs	r2, #0
 8012128:	619a      	str	r2, [r3, #24]
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	2200      	movs	r2, #0
 801212e:	771a      	strb	r2, [r3, #28]
{
}
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	4618      	mov	r0, r3
 8012134:	3708      	adds	r7, #8
 8012136:	46bd      	mov	sp, r7
 8012138:	bd80      	pop	{r7, pc}
 801213a:	bf00      	nop
 801213c:	080290b0 	.word	0x080290b0

08012140 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 8012140:	b480      	push	{r7}
 8012142:	b083      	sub	sp, #12
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
 8012148:	4a04      	ldr	r2, [pc, #16]	; (801215c <_ZN12TestRegistryD1Ev+0x1c>)
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	601a      	str	r2, [r3, #0]
{
}
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	4618      	mov	r0, r3
 8012152:	370c      	adds	r7, #12
 8012154:	46bd      	mov	sp, r7
 8012156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215a:	4770      	bx	lr
 801215c:	080290b0 	.word	0x080290b0

08012160 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 8012160:	b580      	push	{r7, lr}
 8012162:	b082      	sub	sp, #8
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
}
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f7ff ffe9 	bl	8012140 <_ZN12TestRegistryD1Ev>
 801216e:	2120      	movs	r1, #32
 8012170:	6878      	ldr	r0, [r7, #4]
 8012172:	f7f8 fcd5 	bl	800ab20 <_ZdlPvj>
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	4618      	mov	r0, r3
 801217a:	3708      	adds	r7, #8
 801217c:	46bd      	mov	sp, r7
 801217e:	bd80      	pop	{r7, pc}

08012180 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b082      	sub	sp, #8
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
 8012188:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	3308      	adds	r3, #8
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	687a      	ldr	r2, [r7, #4]
 8012194:	6852      	ldr	r2, [r2, #4]
 8012196:	4611      	mov	r1, r2
 8012198:	6838      	ldr	r0, [r7, #0]
 801219a:	4798      	blx	r3
 801219c:	4602      	mov	r2, r0
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	605a      	str	r2, [r3, #4]
}
 80121a2:	bf00      	nop
 80121a4:	3708      	adds	r7, #8
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}

080121aa <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 80121aa:	b580      	push	{r7, lr}
 80121ac:	b084      	sub	sp, #16
 80121ae:	af00      	add	r7, sp, #0
 80121b0:	6078      	str	r0, [r7, #4]
 80121b2:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 80121b4:	2301      	movs	r3, #1
 80121b6:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 80121b8:	683b      	ldr	r3, [r7, #0]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	3308      	adds	r3, #8
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	6838      	ldr	r0, [r7, #0]
 80121c2:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	685b      	ldr	r3, [r3, #4]
 80121c8:	60bb      	str	r3, [r7, #8]
 80121ca:	68bb      	ldr	r3, [r7, #8]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d05c      	beq.n	801228a <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	7d1b      	ldrb	r3, [r3, #20]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d005      	beq.n	80121e4 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	3380      	adds	r3, #128	; 0x80
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	68b8      	ldr	r0, [r7, #8]
 80121e2:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	7f1b      	ldrb	r3, [r3, #28]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d005      	beq.n	80121f8 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 80121ec:	68bb      	ldr	r3, [r7, #8]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	3384      	adds	r3, #132	; 0x84
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	68b8      	ldr	r0, [r7, #8]
 80121f6:	4798      	blx	r3

        if (groupStart) {
 80121f8:	7bfb      	ldrb	r3, [r7, #15]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d008      	beq.n	8012210 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	3310      	adds	r3, #16
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	68b9      	ldr	r1, [r7, #8]
 8012208:	6838      	ldr	r0, [r7, #0]
 801220a:	4798      	blx	r3
            groupStart = false;
 801220c:	2300      	movs	r3, #0
 801220e:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	3320      	adds	r3, #32
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	6838      	ldr	r0, [r7, #0]
 801221a:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 801221c:	683a      	ldr	r2, [r7, #0]
 801221e:	68b9      	ldr	r1, [r7, #8]
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f000 fb79 	bl	8012918 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8012226:	4603      	mov	r3, r0
 8012228:	2b00      	cmp	r3, #0
 801222a:	d016      	beq.n	801225a <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	3318      	adds	r3, #24
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	68b9      	ldr	r1, [r7, #8]
 8012236:	6838      	ldr	r0, [r7, #0]
 8012238:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	3390      	adds	r3, #144	; 0x90
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	687a      	ldr	r2, [r7, #4]
 8012244:	6911      	ldr	r1, [r2, #16]
 8012246:	683a      	ldr	r2, [r7, #0]
 8012248:	68b8      	ldr	r0, [r7, #8]
 801224a:	4798      	blx	r3
            result.currentTestEnded(test);
 801224c:	683b      	ldr	r3, [r7, #0]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	331c      	adds	r3, #28
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	68b9      	ldr	r1, [r7, #8]
 8012256:	6838      	ldr	r0, [r7, #0]
 8012258:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 801225a:	68b9      	ldr	r1, [r7, #8]
 801225c:	6878      	ldr	r0, [r7, #4]
 801225e:	f000 fa5b 	bl	8012718 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 8012262:	4603      	mov	r3, r0
 8012264:	2b00      	cmp	r3, #0
 8012266:	d008      	beq.n	801227a <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 8012268:	2301      	movs	r3, #1
 801226a:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	3314      	adds	r3, #20
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	68b9      	ldr	r1, [r7, #8]
 8012276:	6838      	ldr	r0, [r7, #0]
 8012278:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801227a:	68bb      	ldr	r3, [r7, #8]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	330c      	adds	r3, #12
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	68b8      	ldr	r0, [r7, #8]
 8012284:	4798      	blx	r3
 8012286:	60b8      	str	r0, [r7, #8]
 8012288:	e79f      	b.n	80121ca <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	330c      	adds	r3, #12
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	6838      	ldr	r0, [r7, #0]
 8012294:	4798      	blx	r3
    currentRepetition_++;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	699b      	ldr	r3, [r3, #24]
 801229a:	1c5a      	adds	r2, r3, #1
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	619a      	str	r2, [r3, #24]
}
 80122a0:	bf00      	nop
 80122a2:	3710      	adds	r7, #16
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}

080122a8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 80122a8:	b590      	push	{r4, r7, lr}
 80122aa:	b08f      	sub	sp, #60	; 0x3c
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 80122b2:	f107 0314 	add.w	r3, r7, #20
 80122b6:	4953      	ldr	r1, [pc, #332]	; (8012404 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 80122b8:	4618      	mov	r0, r3
 80122ba:	f7fa ffe0 	bl	800d27e <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	685b      	ldr	r3, [r3, #4]
 80122c2:	637b      	str	r3, [r7, #52]	; 0x34
 80122c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d04d      	beq.n	8012366 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 80122ca:	f107 030c 	add.w	r3, r7, #12
 80122ce:	494d      	ldr	r1, [pc, #308]	; (8012404 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 80122d0:	4618      	mov	r0, r3
 80122d2:	f7fa ffd4 	bl	800d27e <_ZN12SimpleStringC1EPKc>
        gname += "#";
 80122d6:	f107 030c 	add.w	r3, r7, #12
 80122da:	494b      	ldr	r1, [pc, #300]	; (8012408 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 80122dc:	4618      	mov	r0, r3
 80122de:	f7fb fc15 	bl	800db0c <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 80122e2:	f107 031c 	add.w	r3, r7, #28
 80122e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80122e8:	4618      	mov	r0, r3
 80122ea:	f001 f9d2 	bl	8013692 <_ZNK10UtestShell8getGroupEv>
 80122ee:	f107 021c 	add.w	r2, r7, #28
 80122f2:	f107 030c 	add.w	r3, r7, #12
 80122f6:	4611      	mov	r1, r2
 80122f8:	4618      	mov	r0, r3
 80122fa:	f7fb fbf5 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 80122fe:	f107 031c 	add.w	r3, r7, #28
 8012302:	4618      	mov	r0, r3
 8012304:	f7fb fb73 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        gname += "#";
 8012308:	f107 030c 	add.w	r3, r7, #12
 801230c:	493e      	ldr	r1, [pc, #248]	; (8012408 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 801230e:	4618      	mov	r0, r3
 8012310:	f7fb fbfc 	bl	800db0c <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 8012314:	f107 020c 	add.w	r2, r7, #12
 8012318:	f107 0314 	add.w	r3, r7, #20
 801231c:	4611      	mov	r1, r2
 801231e:	4618      	mov	r0, r3
 8012320:	f7fb f82b 	bl	800d37a <_ZNK12SimpleString8containsERKS_>
 8012324:	4603      	mov	r3, r0
 8012326:	f083 0301 	eor.w	r3, r3, #1
 801232a:	b2db      	uxtb	r3, r3
 801232c:	2b00      	cmp	r3, #0
 801232e:	d00d      	beq.n	801234c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 8012330:	f107 020c 	add.w	r2, r7, #12
 8012334:	f107 0314 	add.w	r3, r7, #20
 8012338:	4611      	mov	r1, r2
 801233a:	4618      	mov	r0, r3
 801233c:	f7fb fbd4 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 8012340:	f107 0314 	add.w	r3, r7, #20
 8012344:	4931      	ldr	r1, [pc, #196]	; (801240c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 8012346:	4618      	mov	r0, r3
 8012348:	f7fb fbe0 	bl	800db0c <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 801234c:	f107 030c 	add.w	r3, r7, #12
 8012350:	4618      	mov	r0, r3
 8012352:	f7fb fb4c 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8012356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	330c      	adds	r3, #12
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012360:	4798      	blx	r3
 8012362:	6378      	str	r0, [r7, #52]	; 0x34
 8012364:	e7ae      	b.n	80122c4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 8012366:	f107 0314 	add.w	r3, r7, #20
 801236a:	4a26      	ldr	r2, [pc, #152]	; (8012404 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 801236c:	4926      	ldr	r1, [pc, #152]	; (8012408 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 801236e:	4618      	mov	r0, r3
 8012370:	f7fb f99a 	bl	800d6a8 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 8012374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012378:	4924      	ldr	r1, [pc, #144]	; (801240c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 801237a:	4618      	mov	r0, r3
 801237c:	f7fa ff7f 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8012380:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012384:	f107 0314 	add.w	r3, r7, #20
 8012388:	4611      	mov	r1, r2
 801238a:	4618      	mov	r0, r3
 801238c:	f7fb f874 	bl	800d478 <_ZNK12SimpleString8endsWithERKS_>
 8012390:	4603      	mov	r3, r0
 8012392:	461c      	mov	r4, r3
 8012394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012398:	4618      	mov	r0, r3
 801239a:	f7fb fb28 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801239e:	2c00      	cmp	r4, #0
 80123a0:	d01a      	beq.n	80123d8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 80123a2:	f107 0314 	add.w	r3, r7, #20
 80123a6:	4618      	mov	r0, r3
 80123a8:	f7fb fb00 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 80123ac:	4603      	mov	r3, r0
 80123ae:	3b01      	subs	r3, #1
 80123b0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80123b4:	f107 0114 	add.w	r1, r7, #20
 80123b8:	2200      	movs	r2, #0
 80123ba:	f7fb fc21 	bl	800dc00 <_ZNK12SimpleString9subStringEjj>
 80123be:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80123c2:	f107 0314 	add.w	r3, r7, #20
 80123c6:	4611      	mov	r1, r2
 80123c8:	4618      	mov	r0, r3
 80123ca:	f7fa ffc4 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 80123ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80123d2:	4618      	mov	r0, r3
 80123d4:	f7fb fb0b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	3338      	adds	r3, #56	; 0x38
 80123de:	681c      	ldr	r4, [r3, #0]
 80123e0:	f107 0314 	add.w	r3, r7, #20
 80123e4:	4618      	mov	r0, r3
 80123e6:	f7fb fad5 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 80123ea:	4603      	mov	r3, r0
 80123ec:	4619      	mov	r1, r3
 80123ee:	6838      	ldr	r0, [r7, #0]
 80123f0:	47a0      	blx	r4
    SimpleString groupList;
 80123f2:	f107 0314 	add.w	r3, r7, #20
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7fb faf9 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 80123fc:	bf00      	nop
 80123fe:	373c      	adds	r7, #60	; 0x3c
 8012400:	46bd      	mov	sp, r7
 8012402:	bd90      	pop	{r4, r7, pc}
 8012404:	08025638 	.word	0x08025638
 8012408:	0802563c 	.word	0x0802563c
 801240c:	08025640 	.word	0x08025640

08012410 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 8012410:	b590      	push	{r4, r7, lr}
 8012412:	b091      	sub	sp, #68	; 0x44
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
 8012418:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 801241a:	f107 0314 	add.w	r3, r7, #20
 801241e:	4964      	ldr	r1, [pc, #400]	; (80125b0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8012420:	4618      	mov	r0, r3
 8012422:	f7fa ff2c 	bl	800d27e <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	685b      	ldr	r3, [r3, #4]
 801242a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801242c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801242e:	2b00      	cmp	r3, #0
 8012430:	d06e      	beq.n	8012510 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 8012432:	683a      	ldr	r2, [r7, #0]
 8012434:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f000 fa6e 	bl	8012918 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 801243c:	4603      	mov	r3, r0
 801243e:	2b00      	cmp	r3, #0
 8012440:	d05e      	beq.n	8012500 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 8012442:	f107 030c 	add.w	r3, r7, #12
 8012446:	495a      	ldr	r1, [pc, #360]	; (80125b0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8012448:	4618      	mov	r0, r3
 801244a:	f7fa ff18 	bl	800d27e <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 801244e:	f107 030c 	add.w	r3, r7, #12
 8012452:	4958      	ldr	r1, [pc, #352]	; (80125b4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8012454:	4618      	mov	r0, r3
 8012456:	f7fb fb59 	bl	800db0c <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 801245a:	f107 031c 	add.w	r3, r7, #28
 801245e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012460:	4618      	mov	r0, r3
 8012462:	f001 f916 	bl	8013692 <_ZNK10UtestShell8getGroupEv>
 8012466:	f107 021c 	add.w	r2, r7, #28
 801246a:	f107 030c 	add.w	r3, r7, #12
 801246e:	4611      	mov	r1, r2
 8012470:	4618      	mov	r0, r3
 8012472:	f7fb fb39 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 8012476:	f107 031c 	add.w	r3, r7, #28
 801247a:	4618      	mov	r0, r3
 801247c:	f7fb fab7 	bl	800d9ee <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 8012480:	f107 030c 	add.w	r3, r7, #12
 8012484:	494c      	ldr	r1, [pc, #304]	; (80125b8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 8012486:	4618      	mov	r0, r3
 8012488:	f7fb fb40 	bl	800db0c <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 801248c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012490:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012492:	4618      	mov	r0, r3
 8012494:	f001 f8ee 	bl	8013674 <_ZNK10UtestShell7getNameEv>
 8012498:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801249c:	f107 030c 	add.w	r3, r7, #12
 80124a0:	4611      	mov	r1, r2
 80124a2:	4618      	mov	r0, r3
 80124a4:	f7fb fb20 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 80124a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80124ac:	4618      	mov	r0, r3
 80124ae:	f7fb fa9e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 80124b2:	f107 030c 	add.w	r3, r7, #12
 80124b6:	493f      	ldr	r1, [pc, #252]	; (80125b4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 80124b8:	4618      	mov	r0, r3
 80124ba:	f7fb fb27 	bl	800db0c <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 80124be:	f107 020c 	add.w	r2, r7, #12
 80124c2:	f107 0314 	add.w	r3, r7, #20
 80124c6:	4611      	mov	r1, r2
 80124c8:	4618      	mov	r0, r3
 80124ca:	f7fa ff56 	bl	800d37a <_ZNK12SimpleString8containsERKS_>
 80124ce:	4603      	mov	r3, r0
 80124d0:	f083 0301 	eor.w	r3, r3, #1
 80124d4:	b2db      	uxtb	r3, r3
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d00d      	beq.n	80124f6 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 80124da:	f107 020c 	add.w	r2, r7, #12
 80124de:	f107 0314 	add.w	r3, r7, #20
 80124e2:	4611      	mov	r1, r2
 80124e4:	4618      	mov	r0, r3
 80124e6:	f7fb faff 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 80124ea:	f107 0314 	add.w	r3, r7, #20
 80124ee:	4933      	ldr	r1, [pc, #204]	; (80125bc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7fb fb0b 	bl	800db0c <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 80124f6:	f107 030c 	add.w	r3, r7, #12
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7fb fa77 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8012500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	330c      	adds	r3, #12
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801250a:	4798      	blx	r3
 801250c:	63f8      	str	r0, [r7, #60]	; 0x3c
 801250e:	e78d      	b.n	801242c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 8012510:	f107 0314 	add.w	r3, r7, #20
 8012514:	4a26      	ldr	r2, [pc, #152]	; (80125b0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8012516:	4927      	ldr	r1, [pc, #156]	; (80125b4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8012518:	4618      	mov	r0, r3
 801251a:	f7fb f8c5 	bl	800d6a8 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 801251e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012522:	4926      	ldr	r1, [pc, #152]	; (80125bc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8012524:	4618      	mov	r0, r3
 8012526:	f7fa feaa 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801252a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801252e:	f107 0314 	add.w	r3, r7, #20
 8012532:	4611      	mov	r1, r2
 8012534:	4618      	mov	r0, r3
 8012536:	f7fa ff9f 	bl	800d478 <_ZNK12SimpleString8endsWithERKS_>
 801253a:	4603      	mov	r3, r0
 801253c:	461c      	mov	r4, r3
 801253e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012542:	4618      	mov	r0, r3
 8012544:	f7fb fa53 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8012548:	2c00      	cmp	r4, #0
 801254a:	d01a      	beq.n	8012582 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 801254c:	f107 0314 	add.w	r3, r7, #20
 8012550:	4618      	mov	r0, r3
 8012552:	f7fb fa2b 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 8012556:	4603      	mov	r3, r0
 8012558:	3b01      	subs	r3, #1
 801255a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801255e:	f107 0114 	add.w	r1, r7, #20
 8012562:	2200      	movs	r2, #0
 8012564:	f7fb fb4c 	bl	800dc00 <_ZNK12SimpleString9subStringEjj>
 8012568:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801256c:	f107 0314 	add.w	r3, r7, #20
 8012570:	4611      	mov	r1, r2
 8012572:	4618      	mov	r0, r3
 8012574:	f7fa feef 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 8012578:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801257c:	4618      	mov	r0, r3
 801257e:	f7fb fa36 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	3338      	adds	r3, #56	; 0x38
 8012588:	681c      	ldr	r4, [r3, #0]
 801258a:	f107 0314 	add.w	r3, r7, #20
 801258e:	4618      	mov	r0, r3
 8012590:	f7fb fa00 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 8012594:	4603      	mov	r3, r0
 8012596:	4619      	mov	r1, r3
 8012598:	6838      	ldr	r0, [r7, #0]
 801259a:	47a0      	blx	r4
    SimpleString groupAndNameList;
 801259c:	f107 0314 	add.w	r3, r7, #20
 80125a0:	4618      	mov	r0, r3
 80125a2:	f7fb fa24 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 80125a6:	bf00      	nop
 80125a8:	3744      	adds	r7, #68	; 0x44
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd90      	pop	{r4, r7, pc}
 80125ae:	bf00      	nop
 80125b0:	08025638 	.word	0x08025638
 80125b4:	0802563c 	.word	0x0802563c
 80125b8:	08025644 	.word	0x08025644
 80125bc:	08025640 	.word	0x08025640

080125c0 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 80125c0:	b590      	push	{r4, r7, lr}
 80125c2:	b091      	sub	sp, #68	; 0x44
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 80125ca:	f107 0314 	add.w	r3, r7, #20
 80125ce:	494f      	ldr	r1, [pc, #316]	; (801270c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 80125d0:	4618      	mov	r0, r3
 80125d2:	f7fa fe54 	bl	800d27e <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	685b      	ldr	r3, [r3, #4]
 80125da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80125dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d07d      	beq.n	80126de <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 80125e2:	f107 030c 	add.w	r3, r7, #12
 80125e6:	4949      	ldr	r1, [pc, #292]	; (801270c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 80125e8:	4618      	mov	r0, r3
 80125ea:	f7fa fe48 	bl	800d27e <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 80125ee:	f107 031c 	add.w	r3, r7, #28
 80125f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80125f4:	4618      	mov	r0, r3
 80125f6:	f001 f84c 	bl	8013692 <_ZNK10UtestShell8getGroupEv>
 80125fa:	f107 021c 	add.w	r2, r7, #28
 80125fe:	f107 030c 	add.w	r3, r7, #12
 8012602:	4611      	mov	r1, r2
 8012604:	4618      	mov	r0, r3
 8012606:	f7fb fa6f 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801260a:	f107 031c 	add.w	r3, r7, #28
 801260e:	4618      	mov	r0, r3
 8012610:	f7fb f9ed 	bl	800d9ee <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8012614:	f107 030c 	add.w	r3, r7, #12
 8012618:	493d      	ldr	r1, [pc, #244]	; (8012710 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 801261a:	4618      	mov	r0, r3
 801261c:	f7fb fa76 	bl	800db0c <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 8012620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012624:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012626:	4618      	mov	r0, r3
 8012628:	f001 f824 	bl	8013674 <_ZNK10UtestShell7getNameEv>
 801262c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012630:	f107 030c 	add.w	r3, r7, #12
 8012634:	4611      	mov	r1, r2
 8012636:	4618      	mov	r0, r3
 8012638:	f7fb fa56 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801263c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012640:	4618      	mov	r0, r3
 8012642:	f7fb f9d4 	bl	800d9ee <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8012646:	f107 030c 	add.w	r3, r7, #12
 801264a:	4931      	ldr	r1, [pc, #196]	; (8012710 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 801264c:	4618      	mov	r0, r3
 801264e:	f7fb fa5d 	bl	800db0c <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 8012652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012656:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012658:	4618      	mov	r0, r3
 801265a:	f001 f8dc 	bl	8013816 <_ZNK10UtestShell7getFileEv>
 801265e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012662:	f107 030c 	add.w	r3, r7, #12
 8012666:	4611      	mov	r1, r2
 8012668:	4618      	mov	r0, r3
 801266a:	f7fb fa3d 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801266e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012672:	4618      	mov	r0, r3
 8012674:	f7fb f9bb 	bl	800d9ee <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8012678:	f107 030c 	add.w	r3, r7, #12
 801267c:	4924      	ldr	r1, [pc, #144]	; (8012710 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 801267e:	4618      	mov	r0, r3
 8012680:	f7fb fa44 	bl	800db0c <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 8012684:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012686:	f001 f8d5 	bl	8013834 <_ZNK10UtestShell13getLineNumberEv>
 801268a:	4603      	mov	r3, r0
 801268c:	461a      	mov	r2, r3
 801268e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012692:	4920      	ldr	r1, [pc, #128]	; (8012714 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 8012694:	4618      	mov	r0, r3
 8012696:	f7fb feb1 	bl	800e3fc <_Z16StringFromFormatPKcz>
 801269a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801269e:	f107 030c 	add.w	r3, r7, #12
 80126a2:	4611      	mov	r1, r2
 80126a4:	4618      	mov	r0, r3
 80126a6:	f7fb fa1f 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 80126aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80126ae:	4618      	mov	r0, r3
 80126b0:	f7fb f99d 	bl	800d9ee <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 80126b4:	f107 020c 	add.w	r2, r7, #12
 80126b8:	f107 0314 	add.w	r3, r7, #20
 80126bc:	4611      	mov	r1, r2
 80126be:	4618      	mov	r0, r3
 80126c0:	f7fb fa12 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 80126c4:	f107 030c 	add.w	r3, r7, #12
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7fb f990 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80126ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	330c      	adds	r3, #12
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80126d8:	4798      	blx	r3
 80126da:	63f8      	str	r0, [r7, #60]	; 0x3c
 80126dc:	e77e      	b.n	80125dc <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	3338      	adds	r3, #56	; 0x38
 80126e4:	681c      	ldr	r4, [r3, #0]
 80126e6:	f107 0314 	add.w	r3, r7, #20
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7fb f952 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 80126f0:	4603      	mov	r3, r0
 80126f2:	4619      	mov	r1, r3
 80126f4:	6838      	ldr	r0, [r7, #0]
 80126f6:	47a0      	blx	r4
    SimpleString testLocations;
 80126f8:	f107 0314 	add.w	r3, r7, #20
 80126fc:	4618      	mov	r0, r3
 80126fe:	f7fb f976 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 8012702:	bf00      	nop
 8012704:	3744      	adds	r7, #68	; 0x44
 8012706:	46bd      	mov	sp, r7
 8012708:	bd90      	pop	{r4, r7, pc}
 801270a:	bf00      	nop
 801270c:	08025638 	.word	0x08025638
 8012710:	08025644 	.word	0x08025644
 8012714:	08025648 	.word	0x08025648

08012718 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 8012718:	b5f0      	push	{r4, r5, r6, r7, lr}
 801271a:	b087      	sub	sp, #28
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
 8012720:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 8012722:	2400      	movs	r4, #0
 8012724:	2500      	movs	r5, #0
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d028      	beq.n	801277e <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	330c      	adds	r3, #12
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	6838      	ldr	r0, [r7, #0]
 8012736:	4798      	blx	r3
 8012738:	4603      	mov	r3, r0
 801273a:	2b00      	cmp	r3, #0
 801273c:	d01f      	beq.n	801277e <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 801273e:	f107 0308 	add.w	r3, r7, #8
 8012742:	6839      	ldr	r1, [r7, #0]
 8012744:	4618      	mov	r0, r3
 8012746:	f000 ffa4 	bl	8013692 <_ZNK10UtestShell8getGroupEv>
 801274a:	2401      	movs	r4, #1
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	330c      	adds	r3, #12
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	6838      	ldr	r0, [r7, #0]
 8012756:	4798      	blx	r3
 8012758:	4602      	mov	r2, r0
 801275a:	f107 0310 	add.w	r3, r7, #16
 801275e:	4611      	mov	r1, r2
 8012760:	4618      	mov	r0, r3
 8012762:	f000 ff96 	bl	8013692 <_ZNK10UtestShell8getGroupEv>
 8012766:	2501      	movs	r5, #1
 8012768:	f107 0210 	add.w	r2, r7, #16
 801276c:	f107 0308 	add.w	r3, r7, #8
 8012770:	4611      	mov	r1, r2
 8012772:	4618      	mov	r0, r3
 8012774:	f7fb f98c 	bl	800da90 <_ZneRK12SimpleStringS1_>
 8012778:	4603      	mov	r3, r0
 801277a:	2b00      	cmp	r3, #0
 801277c:	d001      	beq.n	8012782 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 801277e:	2601      	movs	r6, #1
 8012780:	e000      	b.n	8012784 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 8012782:	2600      	movs	r6, #0
 8012784:	2d00      	cmp	r5, #0
 8012786:	d004      	beq.n	8012792 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 8012788:	f107 0310 	add.w	r3, r7, #16
 801278c:	4618      	mov	r0, r3
 801278e:	f7fb f92e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8012792:	2c00      	cmp	r4, #0
 8012794:	d004      	beq.n	80127a0 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 8012796:	f107 0308 	add.w	r3, r7, #8
 801279a:	4618      	mov	r0, r3
 801279c:	f7fb f927 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80127a0:	4633      	mov	r3, r6
}
 80127a2:	4618      	mov	r0, r3
 80127a4:	371c      	adds	r7, #28
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080127aa <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 80127aa:	b580      	push	{r7, lr}
 80127ac:	b082      	sub	sp, #8
 80127ae:	af00      	add	r7, sp, #0
 80127b0:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	685b      	ldr	r3, [r3, #4]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d00a      	beq.n	80127d0 <_ZN12TestRegistry10countTestsEv+0x26>
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	685a      	ldr	r2, [r3, #4]
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	685b      	ldr	r3, [r3, #4]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	3310      	adds	r3, #16
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	4610      	mov	r0, r2
 80127ca:	4798      	blx	r3
 80127cc:	4603      	mov	r3, r0
 80127ce:	e000      	b.n	80127d2 <_ZN12TestRegistry10countTestsEv+0x28>
 80127d0:	2300      	movs	r3, #0
}
 80127d2:	4618      	mov	r0, r3
 80127d4:	3708      	adds	r7, #8
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}
	...

080127dc <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 80127dc:	b580      	push	{r7, lr}
 80127de:	af00      	add	r7, sp, #0
 80127e0:	4801      	ldr	r0, [pc, #4]	; (80127e8 <__tcf_0+0xc>)
 80127e2:	f7ff fcad 	bl	8012140 <_ZN12TestRegistryD1Ev>
 80127e6:	bd80      	pop	{r7, pc}
 80127e8:	20000ab0 	.word	0x20000ab0

080127ec <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 80127f0:	4b15      	ldr	r3, [pc, #84]	; (8012848 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 80127f2:	781b      	ldrb	r3, [r3, #0]
 80127f4:	f3bf 8f5b 	dmb	ish
 80127f8:	b2db      	uxtb	r3, r3
 80127fa:	f003 0301 	and.w	r3, r3, #1
 80127fe:	2b00      	cmp	r3, #0
 8012800:	bf0c      	ite	eq
 8012802:	2301      	moveq	r3, #1
 8012804:	2300      	movne	r3, #0
 8012806:	b2db      	uxtb	r3, r3
 8012808:	2b00      	cmp	r3, #0
 801280a:	d013      	beq.n	8012834 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 801280c:	480e      	ldr	r0, [pc, #56]	; (8012848 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 801280e:	f00d fbf7 	bl	8020000 <__cxa_guard_acquire>
 8012812:	4603      	mov	r3, r0
 8012814:	2b00      	cmp	r3, #0
 8012816:	bf14      	ite	ne
 8012818:	2301      	movne	r3, #1
 801281a:	2300      	moveq	r3, #0
 801281c:	b2db      	uxtb	r3, r3
 801281e:	2b00      	cmp	r3, #0
 8012820:	d008      	beq.n	8012834 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8012822:	480a      	ldr	r0, [pc, #40]	; (801284c <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 8012824:	f7ff fc66 	bl	80120f4 <_ZN12TestRegistryC1Ev>
 8012828:	4807      	ldr	r0, [pc, #28]	; (8012848 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 801282a:	f00d fbf5 	bl	8020018 <__cxa_guard_release>
 801282e:	4808      	ldr	r0, [pc, #32]	; (8012850 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 8012830:	f00d fc19 	bl	8020066 <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 8012834:	4b07      	ldr	r3, [pc, #28]	; (8012854 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d002      	beq.n	8012842 <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 801283c:	4b05      	ldr	r3, [pc, #20]	; (8012854 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	e000      	b.n	8012844 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 8012842:	4b02      	ldr	r3, [pc, #8]	; (801284c <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 8012844:	4618      	mov	r0, r3
 8012846:	bd80      	pop	{r7, pc}
 8012848:	20000ad0 	.word	0x20000ad0
 801284c:	20000ab0 	.word	0x20000ab0
 8012850:	080127dd 	.word	0x080127dd
 8012854:	20000aac 	.word	0x20000aac

08012858 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 8012858:	b480      	push	{r7}
 801285a:	b083      	sub	sp, #12
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
 8012860:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 8012862:	4a04      	ldr	r2, [pc, #16]	; (8012874 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	6013      	str	r3, [r2, #0]
}
 8012868:	bf00      	nop
 801286a:	370c      	adds	r7, #12
 801286c:	46bd      	mov	sp, r7
 801286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012872:	4770      	bx	lr
 8012874:	20000aac 	.word	0x20000aac

08012878 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b082      	sub	sp, #8
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	685b      	ldr	r3, [r3, #4]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d00a      	beq.n	801289e <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	685a      	ldr	r2, [r3, #4]
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	685b      	ldr	r3, [r3, #4]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	330c      	adds	r3, #12
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	4610      	mov	r0, r2
 8012898:	4798      	blx	r3
 801289a:	4603      	mov	r3, r0
 801289c:	e000      	b.n	80128a0 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 801289e:	2300      	movs	r3, #0
 80128a0:	687a      	ldr	r2, [r7, #4]
 80128a2:	6053      	str	r3, [r2, #4]

}
 80128a4:	bf00      	nop
 80128a6:	3708      	adds	r7, #8
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}

080128ac <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 80128ac:	b480      	push	{r7}
 80128ae:	b083      	sub	sp, #12
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
 80128b4:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	683a      	ldr	r2, [r7, #0]
 80128ba:	609a      	str	r2, [r3, #8]
}
 80128bc:	bf00      	nop
 80128be:	370c      	adds	r7, #12
 80128c0:	46bd      	mov	sp, r7
 80128c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c6:	4770      	bx	lr

080128c8 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 80128c8:	b480      	push	{r7}
 80128ca:	b083      	sub	sp, #12
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
 80128d0:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	683a      	ldr	r2, [r7, #0]
 80128d6:	60da      	str	r2, [r3, #12]
}
 80128d8:	bf00      	nop
 80128da:	370c      	adds	r7, #12
 80128dc:	46bd      	mov	sp, r7
 80128de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e2:	4770      	bx	lr

080128e4 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 80128e4:	b480      	push	{r7}
 80128e6:	b083      	sub	sp, #12
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2201      	movs	r2, #1
 80128f0:	771a      	strb	r2, [r3, #28]
}
 80128f2:	bf00      	nop
 80128f4:	370c      	adds	r7, #12
 80128f6:	46bd      	mov	sp, r7
 80128f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fc:	4770      	bx	lr

080128fe <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 80128fe:	b480      	push	{r7}
 8012900:	b083      	sub	sp, #12
 8012902:	af00      	add	r7, sp, #0
 8012904:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2201      	movs	r2, #1
 801290a:	751a      	strb	r2, [r3, #20]
}
 801290c:	bf00      	nop
 801290e:	370c      	adds	r7, #12
 8012910:	46bd      	mov	sp, r7
 8012912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012916:	4770      	bx	lr

08012918 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b084      	sub	sp, #16
 801291c:	af00      	add	r7, sp, #0
 801291e:	60f8      	str	r0, [r7, #12]
 8012920:	60b9      	str	r1, [r7, #8]
 8012922:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	68d9      	ldr	r1, [r3, #12]
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	689b      	ldr	r3, [r3, #8]
 801292c:	461a      	mov	r2, r3
 801292e:	68b8      	ldr	r0, [r7, #8]
 8012930:	f000 ffbb 	bl	80138aa <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 8012934:	4603      	mov	r3, r0
 8012936:	2b00      	cmp	r3, #0
 8012938:	d001      	beq.n	801293e <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 801293a:	2301      	movs	r3, #1
 801293c:	e006      	b.n	801294c <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	332c      	adds	r3, #44	; 0x2c
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	4798      	blx	r3
        return false;
 801294a:	2300      	movs	r3, #0
    }
}
 801294c:	4618      	mov	r0, r3
 801294e:	3710      	adds	r7, #16
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}

08012954 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b082      	sub	sp, #8
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 801295c:	f7ff fb62 	bl	8012024 <_ZN14NullTestPlugin8instanceEv>
 8012960:	4602      	mov	r2, r0
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	611a      	str	r2, [r3, #16]
}
 8012966:	bf00      	nop
 8012968:	3708      	adds	r7, #8
 801296a:	46bd      	mov	sp, r7
 801296c:	bd80      	pop	{r7, pc}

0801296e <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 801296e:	b580      	push	{r7, lr}
 8012970:	b082      	sub	sp, #8
 8012972:	af00      	add	r7, sp, #0
 8012974:	6078      	str	r0, [r7, #4]
 8012976:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 8012978:	683b      	ldr	r3, [r7, #0]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	3324      	adds	r3, #36	; 0x24
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	687a      	ldr	r2, [r7, #4]
 8012982:	6912      	ldr	r2, [r2, #16]
 8012984:	4611      	mov	r1, r2
 8012986:	6838      	ldr	r0, [r7, #0]
 8012988:	4798      	blx	r3
 801298a:	4602      	mov	r2, r0
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	611a      	str	r2, [r3, #16]
}
 8012990:	bf00      	nop
 8012992:	3708      	adds	r7, #8
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}

08012998 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 8012998:	b480      	push	{r7}
 801299a:	b083      	sub	sp, #12
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	691b      	ldr	r3, [r3, #16]
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	370c      	adds	r7, #12
 80129a8:	46bd      	mov	sp, r7
 80129aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ae:	4770      	bx	lr

080129b0 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b082      	sub	sp, #8
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
 80129b8:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	691b      	ldr	r3, [r3, #16]
 80129be:	6839      	ldr	r1, [r7, #0]
 80129c0:	4618      	mov	r0, r3
 80129c2:	f7ff fa52 	bl	8011e6a <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 80129c6:	4603      	mov	r3, r0
}
 80129c8:	4618      	mov	r0, r3
 80129ca:	3708      	adds	r7, #8
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}

080129d0 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b082      	sub	sp, #8
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
 80129d8:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	691a      	ldr	r2, [r3, #16]
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	691b      	ldr	r3, [r3, #16]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	3328      	adds	r3, #40	; 0x28
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	6839      	ldr	r1, [r7, #0]
 80129ea:	4610      	mov	r0, r2
 80129ec:	4798      	blx	r3
 80129ee:	4602      	mov	r2, r0
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	691b      	ldr	r3, [r3, #16]
 80129f4:	429a      	cmp	r2, r3
 80129f6:	bf0c      	ite	eq
 80129f8:	2301      	moveq	r3, #1
 80129fa:	2300      	movne	r3, #0
 80129fc:	b2db      	uxtb	r3, r3
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d00b      	beq.n	8012a1a <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	691a      	ldr	r2, [r3, #16]
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	691b      	ldr	r3, [r3, #16]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	332c      	adds	r3, #44	; 0x2c
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	4610      	mov	r0, r2
 8012a12:	4798      	blx	r3
 8012a14:	4602      	mov	r2, r0
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	691b      	ldr	r3, [r3, #16]
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f7ff fa17 	bl	8011e52 <_ZN10TestPlugin7getNameEv>
 8012a24:	4603      	mov	r3, r0
 8012a26:	6839      	ldr	r1, [r7, #0]
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f7fa ffec 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d00b      	beq.n	8012a4c <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	691a      	ldr	r2, [r3, #16]
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	691b      	ldr	r3, [r3, #16]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	332c      	adds	r3, #44	; 0x2c
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	4610      	mov	r0, r2
 8012a44:	4798      	blx	r3
 8012a46:	4602      	mov	r2, r0
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	691a      	ldr	r2, [r3, #16]
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	691b      	ldr	r3, [r3, #16]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	3328      	adds	r3, #40	; 0x28
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	6839      	ldr	r1, [r7, #0]
 8012a5c:	4610      	mov	r0, r2
 8012a5e:	4798      	blx	r3
}
 8012a60:	bf00      	nop
 8012a62:	3708      	adds	r7, #8
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bd80      	pop	{r7, pc}

08012a68 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b084      	sub	sp, #16
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
    int count = 0;
 8012a70:	2300      	movs	r3, #0
 8012a72:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	691b      	ldr	r3, [r3, #16]
 8012a78:	60bb      	str	r3, [r7, #8]
 8012a7a:	f7ff fad3 	bl	8012024 <_ZN14NullTestPlugin8instanceEv>
 8012a7e:	4602      	mov	r2, r0
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	4293      	cmp	r3, r2
 8012a84:	bf14      	ite	ne
 8012a86:	2301      	movne	r3, #1
 8012a88:	2300      	moveq	r3, #0
 8012a8a:	b2db      	uxtb	r3, r3
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d00a      	beq.n	8012aa6 <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	3301      	adds	r3, #1
 8012a94:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	332c      	adds	r3, #44	; 0x2c
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	68b8      	ldr	r0, [r7, #8]
 8012aa0:	4798      	blx	r3
 8012aa2:	60b8      	str	r0, [r7, #8]
 8012aa4:	e7e9      	b.n	8012a7a <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3710      	adds	r7, #16
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}

08012ab0 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 8012ab0:	b480      	push	{r7}
 8012ab2:	b083      	sub	sp, #12
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
    return tests_;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	685b      	ldr	r3, [r3, #4]
}
 8012abc:	4618      	mov	r0, r3
 8012abe:	370c      	adds	r7, #12
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac6:	4770      	bx	lr

08012ac8 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b084      	sub	sp, #16
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
 8012ad0:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	334c      	adds	r3, #76	; 0x4c
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	6878      	ldr	r0, [r7, #4]
 8012adc:	4798      	blx	r3
 8012ade:	4602      	mov	r2, r0
 8012ae0:	f107 0308 	add.w	r3, r7, #8
 8012ae4:	4611      	mov	r1, r2
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	f002 f8f8 	bl	8014cdc <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 8012aec:	f107 0308 	add.w	r3, r7, #8
 8012af0:	6839      	ldr	r1, [r7, #0]
 8012af2:	4618      	mov	r0, r3
 8012af4:	f002 f980 	bl	8014df8 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 8012af8:	f107 0308 	add.w	r3, r7, #8
 8012afc:	4618      	mov	r0, r3
 8012afe:	f002 fa13 	bl	8014f28 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8012b02:	4602      	mov	r2, r0
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8012b08:	f107 0308 	add.w	r3, r7, #8
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f002 f939 	bl	8014d84 <_ZN22UtestShellPointerArrayD1Ev>
}
 8012b12:	bf00      	nop
 8012b14:	3710      	adds	r7, #16
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}

08012b1a <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 8012b1a:	b580      	push	{r7, lr}
 8012b1c:	b084      	sub	sp, #16
 8012b1e:	af00      	add	r7, sp, #0
 8012b20:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	334c      	adds	r3, #76	; 0x4c
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	6878      	ldr	r0, [r7, #4]
 8012b2c:	4798      	blx	r3
 8012b2e:	4602      	mov	r2, r0
 8012b30:	f107 0308 	add.w	r3, r7, #8
 8012b34:	4611      	mov	r1, r2
 8012b36:	4618      	mov	r0, r3
 8012b38:	f002 f8d0 	bl	8014cdc <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 8012b3c:	f107 0308 	add.w	r3, r7, #8
 8012b40:	4618      	mov	r0, r3
 8012b42:	f002 f995 	bl	8014e70 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 8012b46:	f107 0308 	add.w	r3, r7, #8
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f002 f9ec 	bl	8014f28 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8012b50:	4602      	mov	r2, r0
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8012b56:	f107 0308 	add.w	r3, r7, #8
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	f002 f912 	bl	8014d84 <_ZN22UtestShellPointerArrayD1Ev>
}
 8012b60:	bf00      	nop
 8012b62:	3710      	adds	r7, #16
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}

08012b68 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b084      	sub	sp, #16
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
 8012b70:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	685b      	ldr	r3, [r3, #4]
 8012b76:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d00b      	beq.n	8012b96 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	330c      	adds	r3, #12
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	68f8      	ldr	r0, [r7, #12]
 8012b88:	4798      	blx	r3
 8012b8a:	4602      	mov	r2, r0
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	4293      	cmp	r3, r2
 8012b90:	d001      	beq.n	8012b96 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8012b92:	2301      	movs	r3, #1
 8012b94:	e000      	b.n	8012b98 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 8012b96:	2300      	movs	r3, #0
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d007      	beq.n	8012bac <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	330c      	adds	r3, #12
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	68f8      	ldr	r0, [r7, #12]
 8012ba6:	4798      	blx	r3
 8012ba8:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 8012baa:	e7e5      	b.n	8012b78 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 8012bac:	68fb      	ldr	r3, [r7, #12]
}
 8012bae:	4618      	mov	r0, r3
 8012bb0:	3710      	adds	r7, #16
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	bd80      	pop	{r7, pc}

08012bb6 <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 8012bb6:	b590      	push	{r4, r7, lr}
 8012bb8:	b087      	sub	sp, #28
 8012bba:	af00      	add	r7, sp, #0
 8012bbc:	6078      	str	r0, [r7, #4]
 8012bbe:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	685b      	ldr	r3, [r3, #4]
 8012bc4:	617b      	str	r3, [r7, #20]
    while (current) {
 8012bc6:	697b      	ldr	r3, [r7, #20]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d01e      	beq.n	8012c0a <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 8012bcc:	f107 030c 	add.w	r3, r7, #12
 8012bd0:	6979      	ldr	r1, [r7, #20]
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f000 fd4e 	bl	8013674 <_ZNK10UtestShell7getNameEv>
 8012bd8:	f107 030c 	add.w	r3, r7, #12
 8012bdc:	6839      	ldr	r1, [r7, #0]
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7fa ff11 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 8012be4:	4603      	mov	r3, r0
 8012be6:	461c      	mov	r4, r3
 8012be8:	f107 030c 	add.w	r3, r7, #12
 8012bec:	4618      	mov	r0, r3
 8012bee:	f7fa fefe 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8012bf2:	2c00      	cmp	r4, #0
 8012bf4:	d001      	beq.n	8012bfa <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 8012bf6:	697b      	ldr	r3, [r7, #20]
 8012bf8:	e008      	b.n	8012c0c <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 8012bfa:	697b      	ldr	r3, [r7, #20]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	330c      	adds	r3, #12
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	6978      	ldr	r0, [r7, #20]
 8012c04:	4798      	blx	r3
 8012c06:	6178      	str	r0, [r7, #20]
    while (current) {
 8012c08:	e7dd      	b.n	8012bc6 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 8012c0a:	2300      	movs	r3, #0
}
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	371c      	adds	r7, #28
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd90      	pop	{r4, r7, pc}

08012c14 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 8012c14:	b590      	push	{r4, r7, lr}
 8012c16:	b087      	sub	sp, #28
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
 8012c1c:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	685b      	ldr	r3, [r3, #4]
 8012c22:	617b      	str	r3, [r7, #20]
    while (current) {
 8012c24:	697b      	ldr	r3, [r7, #20]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d01e      	beq.n	8012c68 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 8012c2a:	f107 030c 	add.w	r3, r7, #12
 8012c2e:	6979      	ldr	r1, [r7, #20]
 8012c30:	4618      	mov	r0, r3
 8012c32:	f000 fd2e 	bl	8013692 <_ZNK10UtestShell8getGroupEv>
 8012c36:	f107 030c 	add.w	r3, r7, #12
 8012c3a:	6839      	ldr	r1, [r7, #0]
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f7fa fee2 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 8012c42:	4603      	mov	r3, r0
 8012c44:	461c      	mov	r4, r3
 8012c46:	f107 030c 	add.w	r3, r7, #12
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f7fa fecf 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8012c50:	2c00      	cmp	r4, #0
 8012c52:	d001      	beq.n	8012c58 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	e008      	b.n	8012c6a <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 8012c58:	697b      	ldr	r3, [r7, #20]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	330c      	adds	r3, #12
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	6978      	ldr	r0, [r7, #20]
 8012c62:	4798      	blx	r3
 8012c64:	6178      	str	r0, [r7, #20]
    while (current) {
 8012c66:	e7dd      	b.n	8012c24 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 8012c68:	2300      	movs	r3, #0
}
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	371c      	adds	r7, #28
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd90      	pop	{r4, r7, pc}
	...

08012c74 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 8012c74:	b480      	push	{r7}
 8012c76:	b083      	sub	sp, #12
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
 8012c7c:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 8012c7e:	4a18      	ldr	r2, [pc, #96]	; (8012ce0 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	601a      	str	r2, [r3, #0]
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	683a      	ldr	r2, [r7, #0]
 8012c88:	605a      	str	r2, [r3, #4]
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	609a      	str	r2, [r3, #8]
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	2200      	movs	r2, #0
 8012c94:	60da      	str	r2, [r3, #12]
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	2200      	movs	r2, #0
 8012c9a:	611a      	str	r2, [r3, #16]
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	615a      	str	r2, [r3, #20]
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	619a      	str	r2, [r3, #24]
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2200      	movs	r2, #0
 8012cac:	61da      	str	r2, [r3, #28]
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	621a      	str	r2, [r3, #32]
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	625a      	str	r2, [r3, #36]	; 0x24
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	629a      	str	r2, [r3, #40]	; 0x28
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	2200      	movs	r2, #0
 8012cca:	631a      	str	r2, [r3, #48]	; 0x30
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	2200      	movs	r2, #0
 8012cd0:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	370c      	adds	r7, #12
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cde:	4770      	bx	lr
 8012ce0:	0802911c 	.word	0x0802911c

08012ce4 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 8012ce4:	b480      	push	{r7}
 8012ce6:	b083      	sub	sp, #12
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	4a04      	ldr	r2, [pc, #16]	; (8012d00 <_ZN10TestResultD1Ev+0x1c>)
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	601a      	str	r2, [r3, #0]
{
}
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	370c      	adds	r7, #12
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfe:	4770      	bx	lr
 8012d00:	0802911c 	.word	0x0802911c

08012d04 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b082      	sub	sp, #8
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
}
 8012d0c:	6878      	ldr	r0, [r7, #4]
 8012d0e:	f7ff ffe9 	bl	8012ce4 <_ZN10TestResultD1Ev>
 8012d12:	2138      	movs	r1, #56	; 0x38
 8012d14:	6878      	ldr	r0, [r7, #4]
 8012d16:	f7f7 ff03 	bl	800ab20 <_ZdlPvj>
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	3708      	adds	r7, #8
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd80      	pop	{r7, pc}

08012d24 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b082      	sub	sp, #8
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
 8012d2c:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	685a      	ldr	r2, [r3, #4]
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	685b      	ldr	r3, [r3, #4]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	3318      	adds	r3, #24
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	6839      	ldr	r1, [r7, #0]
 8012d3e:	4610      	mov	r0, r2
 8012d40:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8012d42:	4b05      	ldr	r3, [pc, #20]	; (8012d58 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	4798      	blx	r3
 8012d48:	4603      	mov	r3, r0
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8012d50:	bf00      	nop
 8012d52:	3708      	adds	r7, #8
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}
 8012d58:	200000a8 	.word	0x200000a8

08012d5c <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b082      	sub	sp, #8
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
 8012d64:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 8012d66:	4b0c      	ldr	r3, [pc, #48]	; (8012d98 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	4798      	blx	r3
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	461a      	mov	r2, r3
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d74:	1ad2      	subs	r2, r2, r3
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	685a      	ldr	r2, [r3, #4]
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	685b      	ldr	r3, [r3, #4]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	331c      	adds	r3, #28
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	6879      	ldr	r1, [r7, #4]
 8012d8a:	4610      	mov	r0, r2
 8012d8c:	4798      	blx	r3
}
 8012d8e:	bf00      	nop
 8012d90:	3708      	adds	r7, #8
 8012d92:	46bd      	mov	sp, r7
 8012d94:	bd80      	pop	{r7, pc}
 8012d96:	bf00      	nop
 8012d98:	200000a8 	.word	0x200000a8

08012d9c <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b082      	sub	sp, #8
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
 8012da4:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	685a      	ldr	r2, [r3, #4]
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	685b      	ldr	r3, [r3, #4]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	3310      	adds	r3, #16
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	6839      	ldr	r1, [r7, #0]
 8012db6:	4610      	mov	r0, r2
 8012db8:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8012dba:	4b05      	ldr	r3, [pc, #20]	; (8012dd0 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	4798      	blx	r3
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	461a      	mov	r2, r3
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012dc8:	bf00      	nop
 8012dca:	3708      	adds	r7, #8
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}
 8012dd0:	200000a8 	.word	0x200000a8

08012dd4 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b082      	sub	sp, #8
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
 8012ddc:	6039      	str	r1, [r7, #0]
    output_.print(text);
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	685a      	ldr	r2, [r3, #4]
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	685b      	ldr	r3, [r3, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	332c      	adds	r3, #44	; 0x2c
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	6839      	ldr	r1, [r7, #0]
 8012dee:	4610      	mov	r0, r2
 8012df0:	4798      	blx	r3
}
 8012df2:	bf00      	nop
 8012df4:	3708      	adds	r7, #8
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd80      	pop	{r7, pc}

08012dfa <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 8012dfa:	b580      	push	{r7, lr}
 8012dfc:	b082      	sub	sp, #8
 8012dfe:	af00      	add	r7, sp, #0
 8012e00:	6078      	str	r0, [r7, #4]
 8012e02:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	685a      	ldr	r2, [r3, #4]
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	3348      	adds	r3, #72	; 0x48
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	6839      	ldr	r1, [r7, #0]
 8012e14:	4610      	mov	r0, r2
 8012e16:	4798      	blx	r3
}
 8012e18:	bf00      	nop
 8012e1a:	3708      	adds	r7, #8
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bd80      	pop	{r7, pc}

08012e20 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b082      	sub	sp, #8
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
 8012e28:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 8012e2a:	4b0c      	ldr	r3, [pc, #48]	; (8012e5c <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	4798      	blx	r3
 8012e30:	4603      	mov	r3, r0
 8012e32:	461a      	mov	r2, r3
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e38:	1ad2      	subs	r2, r2, r3
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	685a      	ldr	r2, [r3, #4]
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	685b      	ldr	r3, [r3, #4]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	3314      	adds	r3, #20
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	6879      	ldr	r1, [r7, #4]
 8012e4e:	4610      	mov	r0, r2
 8012e50:	4798      	blx	r3

}
 8012e52:	bf00      	nop
 8012e54:	3708      	adds	r7, #8
 8012e56:	46bd      	mov	sp, r7
 8012e58:	bd80      	pop	{r7, pc}
 8012e5a:	bf00      	nop
 8012e5c:	200000a8 	.word	0x200000a8

08012e60 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b082      	sub	sp, #8
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
 8012e68:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	685a      	ldr	r2, [r3, #4]
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	685b      	ldr	r3, [r3, #4]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	333c      	adds	r3, #60	; 0x3c
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	6839      	ldr	r1, [r7, #0]
 8012e7a:	4610      	mov	r0, r2
 8012e7c:	4798      	blx	r3
    failureCount_++;
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	695b      	ldr	r3, [r3, #20]
 8012e82:	1c5a      	adds	r2, r3, #1
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	615a      	str	r2, [r3, #20]
}
 8012e88:	bf00      	nop
 8012e8a:	3708      	adds	r7, #8
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bd80      	pop	{r7, pc}

08012e90 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 8012e90:	b480      	push	{r7}
 8012e92:	b083      	sub	sp, #12
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
    testCount_++;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	689b      	ldr	r3, [r3, #8]
 8012e9c:	1c5a      	adds	r2, r3, #1
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	609a      	str	r2, [r3, #8]
}
 8012ea2:	bf00      	nop
 8012ea4:	370c      	adds	r7, #12
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eac:	4770      	bx	lr

08012eae <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 8012eae:	b480      	push	{r7}
 8012eb0:	b083      	sub	sp, #12
 8012eb2:	af00      	add	r7, sp, #0
 8012eb4:	6078      	str	r0, [r7, #4]
    runCount_++;
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	68db      	ldr	r3, [r3, #12]
 8012eba:	1c5a      	adds	r2, r3, #1
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	60da      	str	r2, [r3, #12]
}
 8012ec0:	bf00      	nop
 8012ec2:	370c      	adds	r7, #12
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eca:	4770      	bx	lr

08012ecc <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 8012ecc:	b480      	push	{r7}
 8012ece:	b083      	sub	sp, #12
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
    checkCount_++;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	691b      	ldr	r3, [r3, #16]
 8012ed8:	1c5a      	adds	r2, r3, #1
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	611a      	str	r2, [r3, #16]
}
 8012ede:	bf00      	nop
 8012ee0:	370c      	adds	r7, #12
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee8:	4770      	bx	lr

08012eea <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 8012eea:	b480      	push	{r7}
 8012eec:	b083      	sub	sp, #12
 8012eee:	af00      	add	r7, sp, #0
 8012ef0:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	699b      	ldr	r3, [r3, #24]
 8012ef6:	1c5a      	adds	r2, r3, #1
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	619a      	str	r2, [r3, #24]
}
 8012efc:	bf00      	nop
 8012efe:	370c      	adds	r7, #12
 8012f00:	46bd      	mov	sp, r7
 8012f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f06:	4770      	bx	lr

08012f08 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 8012f08:	b480      	push	{r7}
 8012f0a:	b083      	sub	sp, #12
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	69db      	ldr	r3, [r3, #28]
 8012f14:	1c5a      	adds	r2, r3, #1
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	61da      	str	r2, [r3, #28]
}
 8012f1a:	bf00      	nop
 8012f1c:	370c      	adds	r7, #12
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f24:	4770      	bx	lr
	...

08012f28 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b082      	sub	sp, #8
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8012f30:	4b09      	ldr	r3, [pc, #36]	; (8012f58 <_ZN10TestResult12testsStartedEv+0x30>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	4798      	blx	r3
 8012f36:	4603      	mov	r3, r0
 8012f38:	461a      	mov	r2, r3
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	685a      	ldr	r2, [r3, #4]
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	685b      	ldr	r3, [r3, #4]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	3308      	adds	r3, #8
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	4610      	mov	r0, r2
 8012f4e:	4798      	blx	r3
}
 8012f50:	bf00      	nop
 8012f52:	3708      	adds	r7, #8
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}
 8012f58:	200000a8 	.word	0x200000a8

08012f5c <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b084      	sub	sp, #16
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 8012f64:	4b0c      	ldr	r3, [pc, #48]	; (8012f98 <_ZN10TestResult10testsEndedEv+0x3c>)
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	4798      	blx	r3
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f72:	68fa      	ldr	r2, [r7, #12]
 8012f74:	1ad2      	subs	r2, r2, r3
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	685a      	ldr	r2, [r3, #4]
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	685b      	ldr	r3, [r3, #4]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	330c      	adds	r3, #12
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	6879      	ldr	r1, [r7, #4]
 8012f8a:	4610      	mov	r0, r2
 8012f8c:	4798      	blx	r3
}
 8012f8e:	bf00      	nop
 8012f90:	3710      	adds	r7, #16
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}
 8012f96:	bf00      	nop
 8012f98:	200000a8 	.word	0x200000a8

08012f9c <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 8012f9c:	b480      	push	{r7}
 8012f9e:	b083      	sub	sp, #12
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	6a1b      	ldr	r3, [r3, #32]
}
 8012fa8:	4618      	mov	r0, r3
 8012faa:	370c      	adds	r7, #12
 8012fac:	46bd      	mov	sp, r7
 8012fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb2:	4770      	bx	lr

08012fb4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 8012fb4:	b480      	push	{r7}
 8012fb6:	b083      	sub	sp, #12
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	370c      	adds	r7, #12
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fca:	4770      	bx	lr

08012fcc <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 8012fcc:	b480      	push	{r7}
 8012fce:	b083      	sub	sp, #12
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8012fd8:	4618      	mov	r0, r3
 8012fda:	370c      	adds	r7, #12
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe2:	4770      	bx	lr

08012fe4 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 8012fe4:	b590      	push	{r4, r7, lr}
 8012fe6:	b087      	sub	sp, #28
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	ed87 0b04 	vstr	d0, [r7, #16]
 8012fee:	ed87 1b02 	vstr	d1, [r7, #8]
 8012ff2:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 8012ff6:	4b2c      	ldr	r3, [pc, #176]	; (80130a8 <_Z13doubles_equalddd+0xc4>)
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	ed97 0b04 	vldr	d0, [r7, #16]
 8012ffe:	4798      	blx	r3
 8013000:	4603      	mov	r3, r0
 8013002:	2b00      	cmp	r3, #0
 8013004:	d10f      	bne.n	8013026 <_Z13doubles_equalddd+0x42>
 8013006:	4b28      	ldr	r3, [pc, #160]	; (80130a8 <_Z13doubles_equalddd+0xc4>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	ed97 0b02 	vldr	d0, [r7, #8]
 801300e:	4798      	blx	r3
 8013010:	4603      	mov	r3, r0
 8013012:	2b00      	cmp	r3, #0
 8013014:	d107      	bne.n	8013026 <_Z13doubles_equalddd+0x42>
 8013016:	4b24      	ldr	r3, [pc, #144]	; (80130a8 <_Z13doubles_equalddd+0xc4>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	ed97 0b00 	vldr	d0, [r7]
 801301e:	4798      	blx	r3
 8013020:	4603      	mov	r3, r0
 8013022:	2b00      	cmp	r3, #0
 8013024:	d001      	beq.n	801302a <_Z13doubles_equalddd+0x46>
 8013026:	2301      	movs	r3, #1
 8013028:	e000      	b.n	801302c <_Z13doubles_equalddd+0x48>
 801302a:	2300      	movs	r3, #0
 801302c:	2b00      	cmp	r3, #0
 801302e:	d001      	beq.n	8013034 <_Z13doubles_equalddd+0x50>
        return false;
 8013030:	2300      	movs	r3, #0
 8013032:	e035      	b.n	80130a0 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 8013034:	4b1d      	ldr	r3, [pc, #116]	; (80130ac <_Z13doubles_equalddd+0xc8>)
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	ed97 0b04 	vldr	d0, [r7, #16]
 801303c:	4798      	blx	r3
 801303e:	4603      	mov	r3, r0
 8013040:	2b00      	cmp	r3, #0
 8013042:	d009      	beq.n	8013058 <_Z13doubles_equalddd+0x74>
 8013044:	4b19      	ldr	r3, [pc, #100]	; (80130ac <_Z13doubles_equalddd+0xc8>)
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	ed97 0b02 	vldr	d0, [r7, #8]
 801304c:	4798      	blx	r3
 801304e:	4603      	mov	r3, r0
 8013050:	2b00      	cmp	r3, #0
 8013052:	d001      	beq.n	8013058 <_Z13doubles_equalddd+0x74>
 8013054:	2301      	movs	r3, #1
 8013056:	e000      	b.n	801305a <_Z13doubles_equalddd+0x76>
 8013058:	2300      	movs	r3, #0
 801305a:	2b00      	cmp	r3, #0
 801305c:	d001      	beq.n	8013062 <_Z13doubles_equalddd+0x7e>
    {
        return true;
 801305e:	2301      	movs	r3, #1
 8013060:	e01e      	b.n	80130a0 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 8013062:	4b13      	ldr	r3, [pc, #76]	; (80130b0 <_Z13doubles_equalddd+0xcc>)
 8013064:	681c      	ldr	r4, [r3, #0]
 8013066:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801306a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801306e:	f7ed f94b 	bl	8000308 <__aeabi_dsub>
 8013072:	4602      	mov	r2, r0
 8013074:	460b      	mov	r3, r1
 8013076:	ec43 2b17 	vmov	d7, r2, r3
 801307a:	eeb0 0a47 	vmov.f32	s0, s14
 801307e:	eef0 0a67 	vmov.f32	s1, s15
 8013082:	47a0      	blx	r4
 8013084:	ec53 2b10 	vmov	r2, r3, d0
 8013088:	2101      	movs	r1, #1
 801308a:	460c      	mov	r4, r1
 801308c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013090:	f7ed fb66 	bl	8000760 <__aeabi_dcmpge>
 8013094:	4603      	mov	r3, r0
 8013096:	2b00      	cmp	r3, #0
 8013098:	d101      	bne.n	801309e <_Z13doubles_equalddd+0xba>
 801309a:	2300      	movs	r3, #0
 801309c:	461c      	mov	r4, r3
 801309e:	b2e3      	uxtb	r3, r4
}
 80130a0:	4618      	mov	r0, r3
 80130a2:	371c      	adds	r7, #28
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd90      	pop	{r4, r7, pc}
 80130a8:	200000e8 	.word	0x200000e8
 80130ac:	200000ec 	.word	0x200000ec
 80130b0:	200000dc 	.word	0x200000dc

080130b4 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 80130b4:	b480      	push	{r7}
 80130b6:	b083      	sub	sp, #12
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	332c      	adds	r3, #44	; 0x2c
    }
 80130c0:	4618      	mov	r0, r3
 80130c2:	370c      	adds	r7, #12
 80130c4:	46bd      	mov	sp, r7
 80130c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ca:	4770      	bx	lr

080130cc <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b082      	sub	sp, #8
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
    {
 80130d4:	4a0a      	ldr	r2, [pc, #40]	; (8013100 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	601a      	str	r2, [r3, #0]
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	332c      	adds	r3, #44	; 0x2c
 80130de:	4618      	mov	r0, r3
 80130e0:	f7ff fe00 	bl	8012ce4 <_ZN10TestResultD1Ev>
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	331c      	adds	r3, #28
 80130e8:	4618      	mov	r0, r3
 80130ea:	f7f6 f815 	bl	8009118 <_ZN17ConsoleTestOutputD1Ev>
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	4618      	mov	r0, r3
 80130f2:	f000 f943 	bl	801337c <_ZN10UtestShellD1Ev>
    }
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	4618      	mov	r0, r3
 80130fa:	3708      	adds	r7, #8
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd80      	pop	{r7, pc}
 8013100:	08029164 	.word	0x08029164

08013104 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8013104:	b580      	push	{r7, lr}
 8013106:	b082      	sub	sp, #8
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
    }
 801310c:	6878      	ldr	r0, [r7, #4]
 801310e:	f7ff ffdd 	bl	80130cc <_ZN22OutsideTestRunnerUTestD1Ev>
 8013112:	2164      	movs	r1, #100	; 0x64
 8013114:	6878      	ldr	r0, [r7, #4]
 8013116:	f7f7 fd03 	bl	800ab20 <_ZdlPvj>
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	4618      	mov	r0, r3
 801311e:	3708      	adds	r7, #8
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}

08013124 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 8013124:	b580      	push	{r7, lr}
 8013126:	b084      	sub	sp, #16
 8013128:	af02      	add	r7, sp, #8
 801312a:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 801312c:	6878      	ldr	r0, [r7, #4]
 801312e:	2300      	movs	r3, #0
 8013130:	9300      	str	r3, [sp, #0]
 8013132:	4b0d      	ldr	r3, [pc, #52]	; (8013168 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 8013134:	4a0d      	ldr	r2, [pc, #52]	; (801316c <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 8013136:	490e      	ldr	r1, [pc, #56]	; (8013170 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 8013138:	f000 f8f8 	bl	801332c <_ZN10UtestShellC1EPKcS1_S1_j>
 801313c:	4a0d      	ldr	r2, [pc, #52]	; (8013174 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	601a      	str	r2, [r3, #0]
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	331c      	adds	r3, #28
 8013146:	4618      	mov	r0, r3
 8013148:	f7f5 ffd4 	bl	80090f4 <_ZN17ConsoleTestOutputC1Ev>
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	331c      	adds	r3, #28
 8013156:	4619      	mov	r1, r3
 8013158:	4610      	mov	r0, r2
 801315a:	f7ff fd8b 	bl	8012c74 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	4618      	mov	r0, r3
 8013162:	3708      	adds	r7, #8
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}
 8013168:	0802564c 	.word	0x0802564c
 801316c:	0802565c 	.word	0x0802565c
 8013170:	0802569c 	.word	0x0802569c
 8013174:	08029164 	.word	0x08029164

08013178 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 8013178:	b580      	push	{r7, lr}
 801317a:	af00      	add	r7, sp, #0
 801317c:	4801      	ldr	r0, [pc, #4]	; (8013184 <__tcf_0+0xc>)
 801317e:	f7ff ffa5 	bl	80130cc <_ZN22OutsideTestRunnerUTestD1Ev>
 8013182:	bd80      	pop	{r7, pc}
 8013184:	20000ad4 	.word	0x20000ad4

08013188 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 8013188:	b580      	push	{r7, lr}
 801318a:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 801318c:	4b12      	ldr	r3, [pc, #72]	; (80131d8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	f3bf 8f5b 	dmb	ish
 8013194:	b2db      	uxtb	r3, r3
 8013196:	f003 0301 	and.w	r3, r3, #1
 801319a:	2b00      	cmp	r3, #0
 801319c:	bf0c      	ite	eq
 801319e:	2301      	moveq	r3, #1
 80131a0:	2300      	movne	r3, #0
 80131a2:	b2db      	uxtb	r3, r3
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d013      	beq.n	80131d0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 80131a8:	480b      	ldr	r0, [pc, #44]	; (80131d8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80131aa:	f00c ff29 	bl	8020000 <__cxa_guard_acquire>
 80131ae:	4603      	mov	r3, r0
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	bf14      	ite	ne
 80131b4:	2301      	movne	r3, #1
 80131b6:	2300      	moveq	r3, #0
 80131b8:	b2db      	uxtb	r3, r3
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d008      	beq.n	80131d0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 80131be:	4807      	ldr	r0, [pc, #28]	; (80131dc <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 80131c0:	f7ff ffb0 	bl	8013124 <_ZN22OutsideTestRunnerUTestC1Ev>
 80131c4:	4804      	ldr	r0, [pc, #16]	; (80131d8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80131c6:	f00c ff27 	bl	8020018 <__cxa_guard_release>
 80131ca:	4805      	ldr	r0, [pc, #20]	; (80131e0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 80131cc:	f00c ff4b 	bl	8020066 <atexit>
    return instance_;
 80131d0:	4b02      	ldr	r3, [pc, #8]	; (80131dc <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 80131d2:	4618      	mov	r0, r3
 80131d4:	bd80      	pop	{r7, pc}
 80131d6:	bf00      	nop
 80131d8:	20000b38 	.word	0x20000b38
 80131dc:	20000ad4 	.word	0x20000ad4
 80131e0:	08013179 	.word	0x08013179

080131e4 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b082      	sub	sp, #8
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	330c      	adds	r3, #12
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	6878      	ldr	r0, [r7, #4]
 80131f6:	4798      	blx	r3
    }
 80131f8:	bf00      	nop
 80131fa:	3708      	adds	r7, #8
 80131fc:	46bd      	mov	sp, r7
 80131fe:	bd80      	pop	{r7, pc}

08013200 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 8013200:	b580      	push	{r7, lr}
 8013202:	b082      	sub	sp, #8
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	3314      	adds	r3, #20
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	6878      	ldr	r0, [r7, #4]
 8013212:	4798      	blx	r3
    }
 8013214:	bf00      	nop
 8013216:	3708      	adds	r7, #8
 8013218:	46bd      	mov	sp, r7
 801321a:	bd80      	pop	{r7, pc}

0801321c <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 801321c:	b580      	push	{r7, lr}
 801321e:	b082      	sub	sp, #8
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	3310      	adds	r3, #16
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	6878      	ldr	r0, [r7, #4]
 801322e:	4798      	blx	r3
    }
 8013230:	bf00      	nop
 8013232:	3708      	adds	r7, #8
 8013234:	46bd      	mov	sp, r7
 8013236:	bd80      	pop	{r7, pc}

08013238 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 8013238:	b480      	push	{r7}
 801323a:	b085      	sub	sp, #20
 801323c:	af00      	add	r7, sp, #0
 801323e:	60f8      	str	r0, [r7, #12]
 8013240:	60b9      	str	r1, [r7, #8]
 8013242:	607a      	str	r2, [r7, #4]
 8013244:	603b      	str	r3, [r7, #0]
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	68ba      	ldr	r2, [r7, #8]
 801324a:	601a      	str	r2, [r3, #0]
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	687a      	ldr	r2, [r7, #4]
 8013250:	605a      	str	r2, [r3, #4]
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	683a      	ldr	r2, [r7, #0]
 8013256:	609a      	str	r2, [r3, #8]
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	4618      	mov	r0, r3
 801325c:	3714      	adds	r7, #20
 801325e:	46bd      	mov	sp, r7
 8013260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013264:	4770      	bx	lr

08013266 <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 8013266:	b580      	push	{r7, lr}
 8013268:	b086      	sub	sp, #24
 801326a:	af00      	add	r7, sp, #0
 801326c:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8013272:	697b      	ldr	r3, [r7, #20]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8013278:	697b      	ldr	r3, [r7, #20]
 801327a:	685b      	ldr	r3, [r3, #4]
 801327c:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 801327e:	697b      	ldr	r3, [r7, #20]
 8013280:	689b      	ldr	r3, [r3, #8]
 8013282:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 8013284:	693b      	ldr	r3, [r7, #16]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	3394      	adds	r3, #148	; 0x94
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	68ba      	ldr	r2, [r7, #8]
 801328e:	68f9      	ldr	r1, [r7, #12]
 8013290:	6938      	ldr	r0, [r7, #16]
 8013292:	4798      	blx	r3
    }
 8013294:	bf00      	nop
 8013296:	3718      	adds	r7, #24
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}

0801329c <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 801329c:	b580      	push	{r7, lr}
 801329e:	b086      	sub	sp, #24
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 80132a8:	697b      	ldr	r3, [r7, #20]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	685b      	ldr	r3, [r3, #4]
 80132b2:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 80132b4:	697b      	ldr	r3, [r7, #20]
 80132b6:	689b      	ldr	r3, [r3, #8]
 80132b8:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 80132ba:	4b05      	ldr	r3, [pc, #20]	; (80132d0 <helperDoRunOneTestSeperateProcess+0x34>)
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	68ba      	ldr	r2, [r7, #8]
 80132c0:	68f9      	ldr	r1, [r7, #12]
 80132c2:	6938      	ldr	r0, [r7, #16]
 80132c4:	4798      	blx	r3
    }
 80132c6:	bf00      	nop
 80132c8:	3718      	adds	r7, #24
 80132ca:	46bd      	mov	sp, r7
 80132cc:	bd80      	pop	{r7, pc}
 80132ce:	bf00      	nop
 80132d0:	2000009c 	.word	0x2000009c

080132d4 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 80132d4:	b480      	push	{r7}
 80132d6:	b083      	sub	sp, #12
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 80132dc:	4a0f      	ldr	r2, [pc, #60]	; (801331c <_ZN10UtestShellC1Ev+0x48>)
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	601a      	str	r2, [r3, #0]
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	4a0e      	ldr	r2, [pc, #56]	; (8013320 <_ZN10UtestShellC1Ev+0x4c>)
 80132e6:	605a      	str	r2, [r3, #4]
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	4a0e      	ldr	r2, [pc, #56]	; (8013324 <_ZN10UtestShellC1Ev+0x50>)
 80132ec:	609a      	str	r2, [r3, #8]
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	4a0d      	ldr	r2, [pc, #52]	; (8013328 <_ZN10UtestShellC1Ev+0x54>)
 80132f2:	60da      	str	r2, [r3, #12]
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2200      	movs	r2, #0
 80132f8:	611a      	str	r2, [r3, #16]
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	2200      	movs	r2, #0
 80132fe:	615a      	str	r2, [r3, #20]
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	2200      	movs	r2, #0
 8013304:	761a      	strb	r2, [r3, #24]
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	2200      	movs	r2, #0
 801330a:	765a      	strb	r2, [r3, #25]
{
}
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	4618      	mov	r0, r3
 8013310:	370c      	adds	r7, #12
 8013312:	46bd      	mov	sp, r7
 8013314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013318:	4770      	bx	lr
 801331a:	bf00      	nop
 801331c:	08029224 	.word	0x08029224
 8013320:	080256e8 	.word	0x080256e8
 8013324:	080256fc 	.word	0x080256fc
 8013328:	0802570c 	.word	0x0802570c

0801332c <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 801332c:	b480      	push	{r7}
 801332e:	b085      	sub	sp, #20
 8013330:	af00      	add	r7, sp, #0
 8013332:	60f8      	str	r0, [r7, #12]
 8013334:	60b9      	str	r1, [r7, #8]
 8013336:	607a      	str	r2, [r7, #4]
 8013338:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 801333a:	4a0f      	ldr	r2, [pc, #60]	; (8013378 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	601a      	str	r2, [r3, #0]
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	68ba      	ldr	r2, [r7, #8]
 8013344:	605a      	str	r2, [r3, #4]
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	687a      	ldr	r2, [r7, #4]
 801334a:	609a      	str	r2, [r3, #8]
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	683a      	ldr	r2, [r7, #0]
 8013350:	60da      	str	r2, [r3, #12]
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	69ba      	ldr	r2, [r7, #24]
 8013356:	611a      	str	r2, [r3, #16]
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	2200      	movs	r2, #0
 801335c:	615a      	str	r2, [r3, #20]
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	2200      	movs	r2, #0
 8013362:	761a      	strb	r2, [r3, #24]
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	2200      	movs	r2, #0
 8013368:	765a      	strb	r2, [r3, #25]
{
}
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	4618      	mov	r0, r3
 801336e:	3714      	adds	r7, #20
 8013370:	46bd      	mov	sp, r7
 8013372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013376:	4770      	bx	lr
 8013378:	08029224 	.word	0x08029224

0801337c <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 801337c:	b480      	push	{r7}
 801337e:	b083      	sub	sp, #12
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
 8013384:	4a04      	ldr	r2, [pc, #16]	; (8013398 <_ZN10UtestShellD1Ev+0x1c>)
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	601a      	str	r2, [r3, #0]
{
}
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	4618      	mov	r0, r3
 801338e:	370c      	adds	r7, #12
 8013390:	46bd      	mov	sp, r7
 8013392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013396:	4770      	bx	lr
 8013398:	08029224 	.word	0x08029224

0801339c <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 801339c:	b580      	push	{r7, lr}
 801339e:	b082      	sub	sp, #8
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
}
 80133a4:	6878      	ldr	r0, [r7, #4]
 80133a6:	f7ff ffe9 	bl	801337c <_ZN10UtestShellD1Ev>
 80133aa:	211c      	movs	r1, #28
 80133ac:	6878      	ldr	r0, [r7, #4]
 80133ae:	f7f7 fbb7 	bl	800ab20 <_ZdlPvj>
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	4618      	mov	r0, r3
 80133b6:	3708      	adds	r7, #8
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}

080133bc <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b082      	sub	sp, #8
 80133c0:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 80133c2:	2300      	movs	r3, #0
 80133c4:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	3310      	adds	r3, #16
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	6878      	ldr	r0, [r7, #4]
 80133d0:	4798      	blx	r3
}
 80133d2:	bf00      	nop
 80133d4:	3708      	adds	r7, #8
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}
	...

080133dc <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 80133e0:	4b02      	ldr	r3, [pc, #8]	; (80133ec <_ZN10UtestShell5crashEv+0x10>)
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	4798      	blx	r3
}
 80133e6:	bf00      	nop
 80133e8:	bd80      	pop	{r7, pc}
 80133ea:	bf00      	nop
 80133ec:	20000098 	.word	0x20000098

080133f0 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b088      	sub	sp, #32
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	60f8      	str	r0, [r7, #12]
 80133f8:	60b9      	str	r1, [r7, #8]
 80133fa:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	2200      	movs	r2, #0
 8013400:	765a      	strb	r2, [r3, #25]
    result.countRun();
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	3324      	adds	r3, #36	; 0x24
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 801340e:	f107 0014 	add.w	r0, r7, #20
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	68ba      	ldr	r2, [r7, #8]
 8013416:	68f9      	ldr	r1, [r7, #12]
 8013418:	f7ff ff0e 	bl	8013238 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	337c      	adds	r3, #124	; 0x7c
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	68f8      	ldr	r0, [r7, #12]
 8013426:	4798      	blx	r3
 8013428:	4603      	mov	r3, r0
 801342a:	2b00      	cmp	r3, #0
 801342c:	d007      	beq.n	801343e <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 801342e:	4b09      	ldr	r3, [pc, #36]	; (8013454 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	f107 0214 	add.w	r2, r7, #20
 8013436:	4611      	mov	r1, r2
 8013438:	4807      	ldr	r0, [pc, #28]	; (8013458 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 801343a:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 801343c:	e006      	b.n	801344c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 801343e:	4b05      	ldr	r3, [pc, #20]	; (8013454 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	f107 0214 	add.w	r2, r7, #20
 8013446:	4611      	mov	r1, r2
 8013448:	4804      	ldr	r0, [pc, #16]	; (801345c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 801344a:	4798      	blx	r3
}
 801344c:	bf00      	nop
 801344e:	3720      	adds	r7, #32
 8013450:	46bd      	mov	sp, r7
 8013452:	bd80      	pop	{r7, pc}
 8013454:	200000a4 	.word	0x200000a4
 8013458:	0801329d 	.word	0x0801329d
 801345c:	08013267 	.word	0x08013267

08013460 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 8013460:	b590      	push	{r4, r7, lr}
 8013462:	b083      	sub	sp, #12
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
    return new Utest();
 8013468:	22d3      	movs	r2, #211	; 0xd3
 801346a:	4906      	ldr	r1, [pc, #24]	; (8013484 <_ZN10UtestShell10createTestEv+0x24>)
 801346c:	2004      	movs	r0, #4
 801346e:	f7f7 fb43 	bl	800aaf8 <_ZnwjPKci>
 8013472:	4604      	mov	r4, r0
 8013474:	4620      	mov	r0, r4
 8013476:	f001 fb0f 	bl	8014a98 <_ZN5UtestC1Ev>
 801347a:	4623      	mov	r3, r4
}
 801347c:	4618      	mov	r0, r3
 801347e:	370c      	adds	r7, #12
 8013480:	46bd      	mov	sp, r7
 8013482:	bd90      	pop	{r4, r7, pc}
 8013484:	0802571c 	.word	0x0802571c

08013488 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 8013488:	b580      	push	{r7, lr}
 801348a:	b082      	sub	sp, #8
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
 8013490:	6039      	str	r1, [r7, #0]
    delete test;
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d004      	beq.n	80134a2 <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 8013498:	681a      	ldr	r2, [r3, #0]
 801349a:	3204      	adds	r2, #4
 801349c:	6812      	ldr	r2, [r2, #0]
 801349e:	4618      	mov	r0, r3
 80134a0:	4790      	blx	r2
}
 80134a2:	bf00      	nop
 80134a4:	3708      	adds	r7, #8
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}
	...

080134ac <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b088      	sub	sp, #32
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	60f8      	str	r0, [r7, #12]
 80134b4:	60b9      	str	r1, [r7, #8]
 80134b6:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	333c      	adds	r3, #60	; 0x3c
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	4940      	ldr	r1, [pc, #256]	; (80135c4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 80134c2:	6878      	ldr	r0, [r7, #4]
 80134c4:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	3314      	adds	r3, #20
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	687a      	ldr	r2, [r7, #4]
 80134d0:	68f9      	ldr	r1, [r7, #12]
 80134d2:	68b8      	ldr	r0, [r7, #8]
 80134d4:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	333c      	adds	r3, #60	; 0x3c
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	493a      	ldr	r1, [pc, #232]	; (80135c8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 80134e0:	6878      	ldr	r0, [r7, #4]
 80134e2:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 80134e4:	f001 faae 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 80134e8:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 80134ea:	68f8      	ldr	r0, [r7, #12]
 80134ec:	f001 fa90 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 80134f0:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 80134f2:	6879      	ldr	r1, [r7, #4]
 80134f4:	68f8      	ldr	r0, [r7, #12]
 80134f6:	f001 fa6b 	bl	80149d0 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 80134fa:	68f9      	ldr	r1, [r7, #12]
 80134fc:	68f8      	ldr	r0, [r7, #12]
 80134fe:	f001 fa77 	bl	80149f0 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	333c      	adds	r3, #60	; 0x3c
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	4930      	ldr	r1, [pc, #192]	; (80135cc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 801350c:	6878      	ldr	r0, [r7, #4]
 801350e:	4798      	blx	r3
    Utest* testToRun = createTest();
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	3388      	adds	r3, #136	; 0x88
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	68f8      	ldr	r0, [r7, #12]
 801351a:	4798      	blx	r3
 801351c:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	333c      	adds	r3, #60	; 0x3c
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	492a      	ldr	r1, [pc, #168]	; (80135d0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 8013528:	6878      	ldr	r0, [r7, #4]
 801352a:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	333c      	adds	r3, #60	; 0x3c
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	4927      	ldr	r1, [pc, #156]	; (80135d4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 8013536:	6878      	ldr	r0, [r7, #4]
 8013538:	4798      	blx	r3
    testToRun->run();
 801353a:	697b      	ldr	r3, [r7, #20]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	3308      	adds	r3, #8
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	6978      	ldr	r0, [r7, #20]
 8013544:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	333c      	adds	r3, #60	; 0x3c
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	4922      	ldr	r1, [pc, #136]	; (80135d8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 8013554:	69f9      	ldr	r1, [r7, #28]
 8013556:	68f8      	ldr	r0, [r7, #12]
 8013558:	f001 fa4a 	bl	80149f0 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 801355c:	69b9      	ldr	r1, [r7, #24]
 801355e:	68f8      	ldr	r0, [r7, #12]
 8013560:	f001 fa36 	bl	80149d0 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	333c      	adds	r3, #60	; 0x3c
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	491b      	ldr	r1, [pc, #108]	; (80135dc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 801356e:	6878      	ldr	r0, [r7, #4]
 8013570:	4798      	blx	r3
    destroyTest(testToRun);
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	338c      	adds	r3, #140	; 0x8c
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	6979      	ldr	r1, [r7, #20]
 801357c:	68f8      	ldr	r0, [r7, #12]
 801357e:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	333c      	adds	r3, #60	; 0x3c
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	4915      	ldr	r1, [pc, #84]	; (80135e0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 801358a:	6878      	ldr	r0, [r7, #4]
 801358c:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	333c      	adds	r3, #60	; 0x3c
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	4913      	ldr	r1, [pc, #76]	; (80135e4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 8013598:	6878      	ldr	r0, [r7, #4]
 801359a:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	3318      	adds	r3, #24
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	687a      	ldr	r2, [r7, #4]
 80135a6:	68f9      	ldr	r1, [r7, #12]
 80135a8:	68b8      	ldr	r0, [r7, #8]
 80135aa:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	333c      	adds	r3, #60	; 0x3c
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	490c      	ldr	r1, [pc, #48]	; (80135e8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 80135b6:	6878      	ldr	r0, [r7, #4]
 80135b8:	4798      	blx	r3
}
 80135ba:	bf00      	nop
 80135bc:	3720      	adds	r7, #32
 80135be:	46bd      	mov	sp, r7
 80135c0:	bd80      	pop	{r7, pc}
 80135c2:	bf00      	nop
 80135c4:	08025730 	.word	0x08025730
 80135c8:	08025754 	.word	0x08025754
 80135cc:	08025774 	.word	0x08025774
 80135d0:	08025790 	.word	0x08025790
 80135d4:	080257ac 	.word	0x080257ac
 80135d8:	080257c8 	.word	0x080257c8
 80135dc:	080257e0 	.word	0x080257e0
 80135e0:	080257fc 	.word	0x080257fc
 80135e4:	08025818 	.word	0x08025818
 80135e8:	0802583c 	.word	0x0802583c

080135ec <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 80135ec:	b480      	push	{r7}
 80135ee:	b083      	sub	sp, #12
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
    return next_;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	695b      	ldr	r3, [r3, #20]
}
 80135f8:	4618      	mov	r0, r3
 80135fa:	370c      	adds	r7, #12
 80135fc:	46bd      	mov	sp, r7
 80135fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013602:	4770      	bx	lr

08013604 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 8013604:	b480      	push	{r7}
 8013606:	b083      	sub	sp, #12
 8013608:	af00      	add	r7, sp, #0
 801360a:	6078      	str	r0, [r7, #4]
 801360c:	6039      	str	r1, [r7, #0]
    next_ = test;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	683a      	ldr	r2, [r7, #0]
 8013612:	615a      	str	r2, [r3, #20]
    return this;
 8013614:	687b      	ldr	r3, [r7, #4]
}
 8013616:	4618      	mov	r0, r3
 8013618:	370c      	adds	r7, #12
 801361a:	46bd      	mov	sp, r7
 801361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013620:	4770      	bx	lr

08013622 <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 8013622:	b580      	push	{r7, lr}
 8013624:	b082      	sub	sp, #8
 8013626:	af00      	add	r7, sp, #0
 8013628:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	695b      	ldr	r3, [r3, #20]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d00b      	beq.n	801364a <_ZN10UtestShell10countTestsEv+0x28>
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	695a      	ldr	r2, [r3, #20]
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	695b      	ldr	r3, [r3, #20]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	3310      	adds	r3, #16
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	4610      	mov	r0, r2
 8013642:	4798      	blx	r3
 8013644:	4603      	mov	r3, r0
 8013646:	3301      	adds	r3, #1
 8013648:	e000      	b.n	801364c <_ZN10UtestShell10countTestsEv+0x2a>
 801364a:	2301      	movs	r3, #1
}
 801364c:	4618      	mov	r0, r3
 801364e:	3708      	adds	r7, #8
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}

08013654 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b082      	sub	sp, #8
 8013658:	af00      	add	r7, sp, #0
 801365a:	6078      	str	r0, [r7, #4]
 801365c:	6039      	str	r1, [r7, #0]
    return "TEST";
 801365e:	4904      	ldr	r1, [pc, #16]	; (8013670 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 8013660:	6878      	ldr	r0, [r7, #4]
 8013662:	f7f9 fe0c 	bl	800d27e <_ZN12SimpleStringC1EPKc>
}
 8013666:	6878      	ldr	r0, [r7, #4]
 8013668:	3708      	adds	r7, #8
 801366a:	46bd      	mov	sp, r7
 801366c:	bd80      	pop	{r7, pc}
 801366e:	bf00      	nop
 8013670:	08025860 	.word	0x08025860

08013674 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b082      	sub	sp, #8
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
 801367c:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	689b      	ldr	r3, [r3, #8]
 8013682:	4619      	mov	r1, r3
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f7f9 fdfa 	bl	800d27e <_ZN12SimpleStringC1EPKc>
}
 801368a:	6878      	ldr	r0, [r7, #4]
 801368c:	3708      	adds	r7, #8
 801368e:	46bd      	mov	sp, r7
 8013690:	bd80      	pop	{r7, pc}

08013692 <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 8013692:	b580      	push	{r7, lr}
 8013694:	b082      	sub	sp, #8
 8013696:	af00      	add	r7, sp, #0
 8013698:	6078      	str	r0, [r7, #4]
 801369a:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	685b      	ldr	r3, [r3, #4]
 80136a0:	4619      	mov	r1, r3
 80136a2:	6878      	ldr	r0, [r7, #4]
 80136a4:	f7f9 fdeb 	bl	800d27e <_ZN12SimpleStringC1EPKc>
}
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	3708      	adds	r7, #8
 80136ac:	46bd      	mov	sp, r7
 80136ae:	bd80      	pop	{r7, pc}

080136b0 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b082      	sub	sp, #8
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
 80136b8:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 80136ba:	683b      	ldr	r3, [r7, #0]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	33a0      	adds	r3, #160	; 0xa0
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	687a      	ldr	r2, [r7, #4]
 80136c4:	6839      	ldr	r1, [r7, #0]
 80136c6:	4610      	mov	r0, r2
 80136c8:	4798      	blx	r3
    formattedName += "(";
 80136ca:	490e      	ldr	r1, [pc, #56]	; (8013704 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 80136cc:	6878      	ldr	r0, [r7, #4]
 80136ce:	f7fa fa1d 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	685b      	ldr	r3, [r3, #4]
 80136d6:	4619      	mov	r1, r3
 80136d8:	6878      	ldr	r0, [r7, #4]
 80136da:	f7fa fa17 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 80136de:	490a      	ldr	r1, [pc, #40]	; (8013708 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 80136e0:	6878      	ldr	r0, [r7, #4]
 80136e2:	f7fa fa13 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 80136e6:	683b      	ldr	r3, [r7, #0]
 80136e8:	689b      	ldr	r3, [r3, #8]
 80136ea:	4619      	mov	r1, r3
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f7fa fa0d 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 80136f2:	4906      	ldr	r1, [pc, #24]	; (801370c <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 80136f4:	6878      	ldr	r0, [r7, #4]
 80136f6:	f7fa fa09 	bl	800db0c <_ZN12SimpleStringpLEPKc>

    return formattedName;
 80136fa:	bf00      	nop
}
 80136fc:	6878      	ldr	r0, [r7, #4]
 80136fe:	3708      	adds	r7, #8
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}
 8013704:	08025868 	.word	0x08025868
 8013708:	0802586c 	.word	0x0802586c
 801370c:	08025870 	.word	0x08025870

08013710 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 8013710:	b480      	push	{r7}
 8013712:	b083      	sub	sp, #12
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	7e5b      	ldrb	r3, [r3, #25]
}
 801371c:	4618      	mov	r0, r3
 801371e:	370c      	adds	r7, #12
 8013720:	46bd      	mov	sp, r7
 8013722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013726:	4770      	bx	lr

08013728 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b082      	sub	sp, #8
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 8013730:	6878      	ldr	r0, [r7, #4]
 8013732:	f001 f96d 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 8013736:	4603      	mov	r3, r0
 8013738:	681a      	ldr	r2, [r3, #0]
 801373a:	3228      	adds	r2, #40	; 0x28
 801373c:	6812      	ldr	r2, [r2, #0]
 801373e:	4618      	mov	r0, r3
 8013740:	4790      	blx	r2
}
 8013742:	bf00      	nop
 8013744:	3708      	adds	r7, #8
 8013746:	46bd      	mov	sp, r7
 8013748:	bd80      	pop	{r7, pc}

0801374a <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 801374a:	b480      	push	{r7}
 801374c:	b083      	sub	sp, #12
 801374e:	af00      	add	r7, sp, #0
 8013750:	6078      	str	r0, [r7, #4]
    return true;
 8013752:	2301      	movs	r3, #1
}
 8013754:	4618      	mov	r0, r3
 8013756:	370c      	adds	r7, #12
 8013758:	46bd      	mov	sp, r7
 801375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375e:	4770      	bx	lr

08013760 <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 8013760:	b480      	push	{r7}
 8013762:	b083      	sub	sp, #12
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	7e1b      	ldrb	r3, [r3, #24]
}
 801376c:	4618      	mov	r0, r3
 801376e:	370c      	adds	r7, #12
 8013770:	46bd      	mov	sp, r7
 8013772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013776:	4770      	bx	lr

08013778 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 8013778:	b480      	push	{r7}
 801377a:	b083      	sub	sp, #12
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	2201      	movs	r2, #1
 8013784:	761a      	strb	r2, [r3, #24]
}
 8013786:	bf00      	nop
 8013788:	370c      	adds	r7, #12
 801378a:	46bd      	mov	sp, r7
 801378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013790:	4770      	bx	lr

08013792 <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 8013792:	b480      	push	{r7}
 8013794:	b083      	sub	sp, #12
 8013796:	af00      	add	r7, sp, #0
 8013798:	6078      	str	r0, [r7, #4]

}
 801379a:	bf00      	nop
 801379c:	370c      	adds	r7, #12
 801379e:	46bd      	mov	sp, r7
 80137a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a4:	4770      	bx	lr

080137a6 <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 80137a6:	b480      	push	{r7}
 80137a8:	b083      	sub	sp, #12
 80137aa:	af00      	add	r7, sp, #0
 80137ac:	6078      	str	r0, [r7, #4]
 80137ae:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	683a      	ldr	r2, [r7, #0]
 80137b4:	60da      	str	r2, [r3, #12]
}
 80137b6:	bf00      	nop
 80137b8:	370c      	adds	r7, #12
 80137ba:	46bd      	mov	sp, r7
 80137bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c0:	4770      	bx	lr

080137c2 <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 80137c2:	b480      	push	{r7}
 80137c4:	b083      	sub	sp, #12
 80137c6:	af00      	add	r7, sp, #0
 80137c8:	6078      	str	r0, [r7, #4]
 80137ca:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	683a      	ldr	r2, [r7, #0]
 80137d0:	611a      	str	r2, [r3, #16]
}
 80137d2:	bf00      	nop
 80137d4:	370c      	adds	r7, #12
 80137d6:	46bd      	mov	sp, r7
 80137d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137dc:	4770      	bx	lr

080137de <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 80137de:	b480      	push	{r7}
 80137e0:	b083      	sub	sp, #12
 80137e2:	af00      	add	r7, sp, #0
 80137e4:	6078      	str	r0, [r7, #4]
 80137e6:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	683a      	ldr	r2, [r7, #0]
 80137ec:	605a      	str	r2, [r3, #4]
}
 80137ee:	bf00      	nop
 80137f0:	370c      	adds	r7, #12
 80137f2:	46bd      	mov	sp, r7
 80137f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f8:	4770      	bx	lr

080137fa <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 80137fa:	b480      	push	{r7}
 80137fc:	b083      	sub	sp, #12
 80137fe:	af00      	add	r7, sp, #0
 8013800:	6078      	str	r0, [r7, #4]
 8013802:	6039      	str	r1, [r7, #0]
    name_ = testName;
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	683a      	ldr	r2, [r7, #0]
 8013808:	609a      	str	r2, [r3, #8]
}
 801380a:	bf00      	nop
 801380c:	370c      	adds	r7, #12
 801380e:	46bd      	mov	sp, r7
 8013810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013814:	4770      	bx	lr

08013816 <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 8013816:	b580      	push	{r7, lr}
 8013818:	b082      	sub	sp, #8
 801381a:	af00      	add	r7, sp, #0
 801381c:	6078      	str	r0, [r7, #4]
 801381e:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 8013820:	683b      	ldr	r3, [r7, #0]
 8013822:	68db      	ldr	r3, [r3, #12]
 8013824:	4619      	mov	r1, r3
 8013826:	6878      	ldr	r0, [r7, #4]
 8013828:	f7f9 fd29 	bl	800d27e <_ZN12SimpleStringC1EPKc>
}
 801382c:	6878      	ldr	r0, [r7, #4]
 801382e:	3708      	adds	r7, #8
 8013830:	46bd      	mov	sp, r7
 8013832:	bd80      	pop	{r7, pc}

08013834 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 8013834:	b480      	push	{r7}
 8013836:	b083      	sub	sp, #12
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	691b      	ldr	r3, [r3, #16]
}
 8013840:	4618      	mov	r0, r3
 8013842:	370c      	adds	r7, #12
 8013844:	46bd      	mov	sp, r7
 8013846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384a:	4770      	bx	lr

0801384c <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 801384c:	b590      	push	{r4, r7, lr}
 801384e:	b087      	sub	sp, #28
 8013850:	af00      	add	r7, sp, #0
 8013852:	60f8      	str	r0, [r7, #12]
 8013854:	60b9      	str	r1, [r7, #8]
 8013856:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d101      	bne.n	8013862 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 801385e:	2301      	movs	r3, #1
 8013860:	e01f      	b.n	80138a2 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d01b      	beq.n	80138a0 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 8013868:	f107 0310 	add.w	r3, r7, #16
 801386c:	68b9      	ldr	r1, [r7, #8]
 801386e:	4618      	mov	r0, r3
 8013870:	f7f9 fd05 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013874:	f107 0310 	add.w	r3, r7, #16
 8013878:	4619      	mov	r1, r3
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f00c fb93 	bl	801ffa6 <_ZNK10TestFilter5matchERK12SimpleString>
 8013880:	4603      	mov	r3, r0
 8013882:	461c      	mov	r4, r3
 8013884:	f107 0310 	add.w	r3, r7, #16
 8013888:	4618      	mov	r0, r3
 801388a:	f7fa f8b0 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801388e:	2c00      	cmp	r4, #0
 8013890:	d001      	beq.n	8013896 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 8013892:	2301      	movs	r3, #1
 8013894:	e005      	b.n	80138a2 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 8013896:	6878      	ldr	r0, [r7, #4]
 8013898:	f00c fb5f 	bl	801ff5a <_ZNK10TestFilter7getNextEv>
 801389c:	6078      	str	r0, [r7, #4]
 801389e:	e7e0      	b.n	8013862 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 80138a0:	2300      	movs	r3, #0
}
 80138a2:	4618      	mov	r0, r3
 80138a4:	371c      	adds	r7, #28
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd90      	pop	{r4, r7, pc}

080138aa <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 80138aa:	b580      	push	{r7, lr}
 80138ac:	b084      	sub	sp, #16
 80138ae:	af00      	add	r7, sp, #0
 80138b0:	60f8      	str	r0, [r7, #12]
 80138b2:	60b9      	str	r1, [r7, #8]
 80138b4:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	685b      	ldr	r3, [r3, #4]
 80138ba:	68ba      	ldr	r2, [r7, #8]
 80138bc:	4619      	mov	r1, r3
 80138be:	68f8      	ldr	r0, [r7, #12]
 80138c0:	f7ff ffc4 	bl	801384c <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 80138c4:	4603      	mov	r3, r0
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d00b      	beq.n	80138e2 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	689b      	ldr	r3, [r3, #8]
 80138ce:	687a      	ldr	r2, [r7, #4]
 80138d0:	4619      	mov	r1, r3
 80138d2:	68f8      	ldr	r0, [r7, #12]
 80138d4:	f7ff ffba 	bl	801384c <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 80138d8:	4603      	mov	r3, r0
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d001      	beq.n	80138e2 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 80138de:	2301      	movs	r3, #1
 80138e0:	e000      	b.n	80138e4 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 80138e2:	2300      	movs	r3, #0
}
 80138e4:	4618      	mov	r0, r3
 80138e6:	3710      	adds	r7, #16
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}

080138ec <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 80138ec:	b590      	push	{r4, r7, lr}
 80138ee:	b083      	sub	sp, #12
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
 80138f4:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	339c      	adds	r3, #156	; 0x9c
 80138fc:	681c      	ldr	r4, [r3, #0]
 80138fe:	f001 f8b1 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8013902:	4603      	mov	r3, r0
 8013904:	461a      	mov	r2, r3
 8013906:	6839      	ldr	r1, [r7, #0]
 8013908:	6878      	ldr	r0, [r7, #4]
 801390a:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 801390c:	bf00      	nop
 801390e:	370c      	adds	r7, #12
 8013910:	46bd      	mov	sp, r7
 8013912:	bd90      	pop	{r4, r7, pc}

08013914 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8013914:	b580      	push	{r7, lr}
 8013916:	b084      	sub	sp, #16
 8013918:	af00      	add	r7, sp, #0
 801391a:	60f8      	str	r0, [r7, #12]
 801391c:	60b9      	str	r1, [r7, #8]
 801391e:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	2201      	movs	r2, #1
 8013924:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 8013926:	68f8      	ldr	r0, [r7, #12]
 8013928:	f001 f872 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 801392c:	4603      	mov	r3, r0
 801392e:	681a      	ldr	r2, [r3, #0]
 8013930:	3234      	adds	r2, #52	; 0x34
 8013932:	6812      	ldr	r2, [r2, #0]
 8013934:	68b9      	ldr	r1, [r7, #8]
 8013936:	4618      	mov	r0, r3
 8013938:	4790      	blx	r2
    terminator.exitCurrentTest();
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	6878      	ldr	r0, [r7, #4]
 8013942:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8013944:	bf00      	nop
 8013946:	3710      	adds	r7, #16
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}

0801394c <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b082      	sub	sp, #8
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
 8013954:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 8013956:	683b      	ldr	r3, [r7, #0]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	6838      	ldr	r0, [r7, #0]
 801395e:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8013960:	bf00      	nop
 8013962:	3708      	adds	r7, #8
 8013964:	46bd      	mov	sp, r7
 8013966:	bd80      	pop	{r7, pc}

08013968 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013968:	b590      	push	{r4, r7, lr}
 801396a:	b09d      	sub	sp, #116	; 0x74
 801396c:	af04      	add	r7, sp, #16
 801396e:	60f8      	str	r0, [r7, #12]
 8013970:	607a      	str	r2, [r7, #4]
 8013972:	603b      	str	r3, [r7, #0]
 8013974:	460b      	mov	r3, r1
 8013976:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8013978:	68f8      	ldr	r0, [r7, #12]
 801397a:	f001 f849 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 801397e:	4603      	mov	r3, r0
 8013980:	681a      	ldr	r2, [r3, #0]
 8013982:	3228      	adds	r2, #40	; 0x28
 8013984:	6812      	ldr	r2, [r2, #0]
 8013986:	4618      	mov	r0, r3
 8013988:	4790      	blx	r2
    if (!condition)
 801398a:	7afb      	ldrb	r3, [r7, #11]
 801398c:	f083 0301 	eor.w	r3, r3, #1
 8013990:	b2db      	uxtb	r3, r3
 8013992:	2b00      	cmp	r3, #0
 8013994:	d03f      	beq.n	8013a16 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	339c      	adds	r3, #156	; 0x9c
 801399c:	681c      	ldr	r4, [r3, #0]
 801399e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80139a2:	6879      	ldr	r1, [r7, #4]
 80139a4:	4618      	mov	r0, r3
 80139a6:	f7f9 fc6a 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80139aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80139ae:	6839      	ldr	r1, [r7, #0]
 80139b0:	4618      	mov	r0, r3
 80139b2:	f7f9 fc64 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80139b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80139ba:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80139bc:	4618      	mov	r0, r3
 80139be:	f7f9 fc5e 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80139c2:	f107 0014 	add.w	r0, r7, #20
 80139c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80139ca:	9302      	str	r3, [sp, #8]
 80139cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80139d0:	9301      	str	r3, [sp, #4]
 80139d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80139d6:	9300      	str	r3, [sp, #0]
 80139d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80139da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80139dc:	68f9      	ldr	r1, [r7, #12]
 80139de:	f7fb ff6b 	bl	800f8b8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80139e2:	f107 0314 	add.w	r3, r7, #20
 80139e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80139e8:	4619      	mov	r1, r3
 80139ea:	68f8      	ldr	r0, [r7, #12]
 80139ec:	47a0      	blx	r4
 80139ee:	f107 0314 	add.w	r3, r7, #20
 80139f2:	4618      	mov	r0, r3
 80139f4:	f7fc fdce 	bl	8010594 <_ZN12CheckFailureD1Ev>
 80139f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7f9 fff6 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8013a02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7f9 fff1 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8013a0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013a10:	4618      	mov	r0, r3
 8013a12:	f7f9 ffec 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 8013a16:	bf00      	nop
 8013a18:	3764      	adds	r7, #100	; 0x64
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd90      	pop	{r4, r7, pc}

08013a1e <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013a1e:	b590      	push	{r4, r7, lr}
 8013a20:	b097      	sub	sp, #92	; 0x5c
 8013a22:	af02      	add	r7, sp, #8
 8013a24:	60f8      	str	r0, [r7, #12]
 8013a26:	60b9      	str	r1, [r7, #8]
 8013a28:	607a      	str	r2, [r7, #4]
 8013a2a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013a2c:	68f8      	ldr	r0, [r7, #12]
 8013a2e:	f000 ffef 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 8013a32:	4603      	mov	r3, r0
 8013a34:	681a      	ldr	r2, [r3, #0]
 8013a36:	3228      	adds	r2, #40	; 0x28
 8013a38:	6812      	ldr	r2, [r2, #0]
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	339c      	adds	r3, #156	; 0x9c
 8013a44:	681c      	ldr	r4, [r3, #0]
 8013a46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013a4a:	68b9      	ldr	r1, [r7, #8]
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7f9 fc16 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013a52:	f107 0014 	add.w	r0, r7, #20
 8013a56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013a5a:	9300      	str	r3, [sp, #0]
 8013a5c:	683b      	ldr	r3, [r7, #0]
 8013a5e:	687a      	ldr	r2, [r7, #4]
 8013a60:	68f9      	ldr	r1, [r7, #12]
 8013a62:	f7fb ff71 	bl	800f948 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8013a66:	f107 0314 	add.w	r3, r7, #20
 8013a6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013a6c:	4619      	mov	r1, r3
 8013a6e:	68f8      	ldr	r0, [r7, #12]
 8013a70:	47a0      	blx	r4
 8013a72:	f107 0314 	add.w	r3, r7, #20
 8013a76:	4618      	mov	r0, r3
 8013a78:	f7f7 fc16 	bl	800b2a8 <_ZN11FailFailureD1Ev>
 8013a7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013a80:	4618      	mov	r0, r3
 8013a82:	f7f9 ffb4 	bl	800d9ee <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 8013a86:	bf00      	nop
 8013a88:	3754      	adds	r7, #84	; 0x54
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	bd90      	pop	{r4, r7, pc}

08013a8e <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013a8e:	b590      	push	{r4, r7, lr}
 8013a90:	b0a7      	sub	sp, #156	; 0x9c
 8013a92:	af04      	add	r7, sp, #16
 8013a94:	60f8      	str	r0, [r7, #12]
 8013a96:	60b9      	str	r1, [r7, #8]
 8013a98:	607a      	str	r2, [r7, #4]
 8013a9a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013a9c:	68f8      	ldr	r0, [r7, #12]
 8013a9e:	f000 ffb7 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	681a      	ldr	r2, [r3, #0]
 8013aa6:	3228      	adds	r2, #40	; 0x28
 8013aa8:	6812      	ldr	r2, [r2, #0]
 8013aaa:	4618      	mov	r0, r3
 8013aac:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d102      	bne.n	8013aba <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 8013ab4:	68bb      	ldr	r3, [r7, #8]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d068      	beq.n	8013b8c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d002      	beq.n	8013ac6 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d12a      	bne.n	8013b1c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	339c      	adds	r3, #156	; 0x9c
 8013acc:	681c      	ldr	r4, [r3, #0]
 8013ace:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013ad2:	6839      	ldr	r1, [r7, #0]
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f7f9 fbd2 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013ada:	f107 0010 	add.w	r0, r7, #16
 8013ade:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013ae2:	9302      	str	r3, [sp, #8]
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	9301      	str	r3, [sp, #4]
 8013ae8:	68bb      	ldr	r3, [r7, #8]
 8013aea:	9300      	str	r3, [sp, #0]
 8013aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013af0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013af4:	68f9      	ldr	r1, [r7, #12]
 8013af6:	f7fc f9ad 	bl	800fe54 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013afa:	f107 0310 	add.w	r3, r7, #16
 8013afe:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8013b02:	4619      	mov	r1, r3
 8013b04:	68f8      	ldr	r0, [r7, #12]
 8013b06:	47a0      	blx	r4
 8013b08:	f107 0310 	add.w	r3, r7, #16
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7fc fcb9 	bl	8010484 <_ZN18StringEqualFailureD1Ev>
 8013b12:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013b16:	4618      	mov	r0, r3
 8013b18:	f7f9 ff69 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 8013b1c:	6879      	ldr	r1, [r7, #4]
 8013b1e:	68b8      	ldr	r0, [r7, #8]
 8013b20:	f7f9 f9ea 	bl	800cef8 <_ZN12SimpleString6StrCmpEPKcS1_>
 8013b24:	4603      	mov	r3, r0
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	bf14      	ite	ne
 8013b2a:	2301      	movne	r3, #1
 8013b2c:	2300      	moveq	r3, #0
 8013b2e:	b2db      	uxtb	r3, r3
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d02c      	beq.n	8013b8e <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	339c      	adds	r3, #156	; 0x9c
 8013b3a:	681c      	ldr	r4, [r3, #0]
 8013b3c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013b40:	6839      	ldr	r1, [r7, #0]
 8013b42:	4618      	mov	r0, r3
 8013b44:	f7f9 fb9b 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013b48:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8013b4c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013b50:	9302      	str	r3, [sp, #8]
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	9301      	str	r3, [sp, #4]
 8013b56:	68bb      	ldr	r3, [r7, #8]
 8013b58:	9300      	str	r3, [sp, #0]
 8013b5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013b5e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013b62:	68f9      	ldr	r1, [r7, #12]
 8013b64:	f7fc f976 	bl	800fe54 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013b68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013b6c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8013b70:	4619      	mov	r1, r3
 8013b72:	68f8      	ldr	r0, [r7, #12]
 8013b74:	47a0      	blx	r4
 8013b76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f7fc fc82 	bl	8010484 <_ZN18StringEqualFailureD1Ev>
 8013b80:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013b84:	4618      	mov	r0, r3
 8013b86:	f7f9 ff32 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8013b8a:	e000      	b.n	8013b8e <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013b8c:	bf00      	nop
}
 8013b8e:	378c      	adds	r7, #140	; 0x8c
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd90      	pop	{r4, r7, pc}

08013b94 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013b94:	b590      	push	{r4, r7, lr}
 8013b96:	b0a7      	sub	sp, #156	; 0x9c
 8013b98:	af04      	add	r7, sp, #16
 8013b9a:	60f8      	str	r0, [r7, #12]
 8013b9c:	60b9      	str	r1, [r7, #8]
 8013b9e:	607a      	str	r2, [r7, #4]
 8013ba0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013ba2:	68f8      	ldr	r0, [r7, #12]
 8013ba4:	f000 ff34 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	681a      	ldr	r2, [r3, #0]
 8013bac:	3228      	adds	r2, #40	; 0x28
 8013bae:	6812      	ldr	r2, [r2, #0]
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d102      	bne.n	8013bc0 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 8013bba:	68bb      	ldr	r3, [r7, #8]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d06b      	beq.n	8013c98 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d002      	beq.n	8013bcc <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d12b      	bne.n	8013c24 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	339c      	adds	r3, #156	; 0x9c
 8013bd2:	681c      	ldr	r4, [r3, #0]
 8013bd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013bd8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f7f9 fb4e 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013be2:	f107 0010 	add.w	r0, r7, #16
 8013be6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013bea:	9302      	str	r3, [sp, #8]
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	9301      	str	r3, [sp, #4]
 8013bf0:	68bb      	ldr	r3, [r7, #8]
 8013bf2:	9300      	str	r3, [sp, #0]
 8013bf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013bf8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8013bfc:	68f9      	ldr	r1, [r7, #12]
 8013bfe:	f7fc f929 	bl	800fe54 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013c02:	f107 0310 	add.w	r3, r7, #16
 8013c06:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013c0a:	4619      	mov	r1, r3
 8013c0c:	68f8      	ldr	r0, [r7, #12]
 8013c0e:	47a0      	blx	r4
 8013c10:	f107 0310 	add.w	r3, r7, #16
 8013c14:	4618      	mov	r0, r3
 8013c16:	f7fc fc35 	bl	8010484 <_ZN18StringEqualFailureD1Ev>
 8013c1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f7f9 fee5 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 8013c24:	683a      	ldr	r2, [r7, #0]
 8013c26:	6879      	ldr	r1, [r7, #4]
 8013c28:	68b8      	ldr	r0, [r7, #8]
 8013c2a:	f7f9 f9a4 	bl	800cf76 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	bf14      	ite	ne
 8013c34:	2301      	movne	r3, #1
 8013c36:	2300      	moveq	r3, #0
 8013c38:	b2db      	uxtb	r3, r3
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d02d      	beq.n	8013c9a <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	339c      	adds	r3, #156	; 0x9c
 8013c44:	681c      	ldr	r4, [r3, #0]
 8013c46:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013c4a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f7f9 fb15 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013c54:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8013c58:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013c5c:	9302      	str	r3, [sp, #8]
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	9301      	str	r3, [sp, #4]
 8013c62:	68bb      	ldr	r3, [r7, #8]
 8013c64:	9300      	str	r3, [sp, #0]
 8013c66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013c6a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8013c6e:	68f9      	ldr	r1, [r7, #12]
 8013c70:	f7fc f8f0 	bl	800fe54 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013c74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013c78:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013c7c:	4619      	mov	r1, r3
 8013c7e:	68f8      	ldr	r0, [r7, #12]
 8013c80:	47a0      	blx	r4
 8013c82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013c86:	4618      	mov	r0, r3
 8013c88:	f7fc fbfc 	bl	8010484 <_ZN18StringEqualFailureD1Ev>
 8013c8c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013c90:	4618      	mov	r0, r3
 8013c92:	f7f9 feac 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8013c96:	e000      	b.n	8013c9a <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013c98:	bf00      	nop
}
 8013c9a:	378c      	adds	r7, #140	; 0x8c
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bd90      	pop	{r4, r7, pc}

08013ca0 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8013ca0:	b590      	push	{r4, r7, lr}
 8013ca2:	b0ab      	sub	sp, #172	; 0xac
 8013ca4:	af04      	add	r7, sp, #16
 8013ca6:	60f8      	str	r0, [r7, #12]
 8013ca8:	60b9      	str	r1, [r7, #8]
 8013caa:	607a      	str	r2, [r7, #4]
 8013cac:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013cae:	68f8      	ldr	r0, [r7, #12]
 8013cb0:	f000 feae 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	681a      	ldr	r2, [r3, #0]
 8013cb8:	3228      	adds	r2, #40	; 0x28
 8013cba:	6812      	ldr	r2, [r2, #0]
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d102      	bne.n	8013ccc <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 8013cc6:	68bb      	ldr	r3, [r7, #8]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d07c      	beq.n	8013dc6 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d002      	beq.n	8013cd8 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 8013cd2:	68bb      	ldr	r3, [r7, #8]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d128      	bne.n	8013d2a <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	3398      	adds	r3, #152	; 0x98
 8013cde:	681c      	ldr	r4, [r3, #0]
 8013ce0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013ce4:	6839      	ldr	r1, [r7, #0]
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	f7f9 fac9 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013cec:	f107 0010 	add.w	r0, r7, #16
 8013cf0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013cf4:	9302      	str	r3, [sp, #8]
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	9301      	str	r3, [sp, #4]
 8013cfa:	68bb      	ldr	r3, [r7, #8]
 8013cfc:	9300      	str	r3, [sp, #0]
 8013cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013d02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013d06:	68f9      	ldr	r1, [r7, #12]
 8013d08:	f7fc f948 	bl	800ff9c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013d0c:	f107 0310 	add.w	r3, r7, #16
 8013d10:	4619      	mov	r1, r3
 8013d12:	68f8      	ldr	r0, [r7, #12]
 8013d14:	47a0      	blx	r4
 8013d16:	f107 0310 	add.w	r3, r7, #16
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f7fc fb90 	bl	8010440 <_ZN24StringEqualNoCaseFailureD1Ev>
 8013d20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013d24:	4618      	mov	r0, r3
 8013d26:	f7f9 fe62 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 8013d2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013d2e:	68b9      	ldr	r1, [r7, #8]
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7f9 faa4 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013d36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013d3a:	6879      	ldr	r1, [r7, #4]
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f7f9 fa9e 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013d42:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8013d46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013d4a:	4611      	mov	r1, r2
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f7f9 fe75 	bl	800da3c <_ZNK12SimpleString12equalsNoCaseERKS_>
 8013d52:	4603      	mov	r3, r0
 8013d54:	f083 0301 	eor.w	r3, r3, #1
 8013d58:	b2dc      	uxtb	r4, r3
 8013d5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f7f9 fe45 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8013d64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013d68:	4618      	mov	r0, r3
 8013d6a:	f7f9 fe40 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8013d6e:	2c00      	cmp	r4, #0
 8013d70:	d02a      	beq.n	8013dc8 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	3398      	adds	r3, #152	; 0x98
 8013d78:	681c      	ldr	r4, [r3, #0]
 8013d7a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013d7e:	6839      	ldr	r1, [r7, #0]
 8013d80:	4618      	mov	r0, r3
 8013d82:	f7f9 fa7c 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013d86:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8013d8a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013d8e:	9302      	str	r3, [sp, #8]
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	9301      	str	r3, [sp, #4]
 8013d94:	68bb      	ldr	r3, [r7, #8]
 8013d96:	9300      	str	r3, [sp, #0]
 8013d98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013d9c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013da0:	68f9      	ldr	r1, [r7, #12]
 8013da2:	f7fc f8fb 	bl	800ff9c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013da6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013daa:	4619      	mov	r1, r3
 8013dac:	68f8      	ldr	r0, [r7, #12]
 8013dae:	47a0      	blx	r4
 8013db0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013db4:	4618      	mov	r0, r3
 8013db6:	f7fc fb43 	bl	8010440 <_ZN24StringEqualNoCaseFailureD1Ev>
 8013dba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f7f9 fe15 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8013dc4:	e000      	b.n	8013dc8 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013dc6:	bf00      	nop
}
 8013dc8:	379c      	adds	r7, #156	; 0x9c
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bd90      	pop	{r4, r7, pc}

08013dce <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8013dce:	b590      	push	{r4, r7, lr}
 8013dd0:	b0b3      	sub	sp, #204	; 0xcc
 8013dd2:	af04      	add	r7, sp, #16
 8013dd4:	60f8      	str	r0, [r7, #12]
 8013dd6:	60b9      	str	r1, [r7, #8]
 8013dd8:	607a      	str	r2, [r7, #4]
 8013dda:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013ddc:	68f8      	ldr	r0, [r7, #12]
 8013dde:	f000 fe17 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 8013de2:	4603      	mov	r3, r0
 8013de4:	681a      	ldr	r2, [r3, #0]
 8013de6:	3228      	adds	r2, #40	; 0x28
 8013de8:	6812      	ldr	r2, [r2, #0]
 8013dea:	4618      	mov	r0, r3
 8013dec:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d103      	bne.n	8013dfc <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 8013df4:	68bb      	ldr	r3, [r7, #8]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	f000 80ad 	beq.w	8013f56 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d002      	beq.n	8013e08 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d140      	bne.n	8013e8a <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	3398      	adds	r3, #152	; 0x98
 8013e0e:	681c      	ldr	r4, [r3, #0]
 8013e10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013e14:	68b9      	ldr	r1, [r7, #8]
 8013e16:	4618      	mov	r0, r3
 8013e18:	f7f9 fa31 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013e1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013e20:	6879      	ldr	r1, [r7, #4]
 8013e22:	4618      	mov	r0, r3
 8013e24:	f7f9 fa2b 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013e28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013e2c:	6839      	ldr	r1, [r7, #0]
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f7f9 fa25 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013e34:	f107 0010 	add.w	r0, r7, #16
 8013e38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013e3c:	9302      	str	r3, [sp, #8]
 8013e3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013e42:	9301      	str	r3, [sp, #4]
 8013e44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013e48:	9300      	str	r3, [sp, #0]
 8013e4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013e4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013e52:	68f9      	ldr	r1, [r7, #12]
 8013e54:	f7fb fce6 	bl	800f824 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013e58:	f107 0310 	add.w	r3, r7, #16
 8013e5c:	4619      	mov	r1, r3
 8013e5e:	68f8      	ldr	r0, [r7, #12]
 8013e60:	47a0      	blx	r4
 8013e62:	f107 0310 	add.w	r3, r7, #16
 8013e66:	4618      	mov	r0, r3
 8013e68:	f7fc fbb6 	bl	80105d8 <_ZN15ContainsFailureD1Ev>
 8013e6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013e70:	4618      	mov	r0, r3
 8013e72:	f7f9 fdbc 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8013e76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7f9 fdb7 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8013e80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013e84:	4618      	mov	r0, r3
 8013e86:	f7f9 fdb2 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 8013e8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013e8e:	6879      	ldr	r1, [r7, #4]
 8013e90:	4618      	mov	r0, r3
 8013e92:	f7f9 f9f4 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013e96:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013e9a:	68b9      	ldr	r1, [r7, #8]
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	f7f9 f9ee 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013ea2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8013ea6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013eaa:	4611      	mov	r1, r2
 8013eac:	4618      	mov	r0, r3
 8013eae:	f7f9 fa64 	bl	800d37a <_ZNK12SimpleString8containsERKS_>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	f083 0301 	eor.w	r3, r3, #1
 8013eb8:	b2dc      	uxtb	r4, r3
 8013eba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7f9 fd95 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8013ec4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f7f9 fd90 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8013ece:	2c00      	cmp	r4, #0
 8013ed0:	d042      	beq.n	8013f58 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	3398      	adds	r3, #152	; 0x98
 8013ed8:	681c      	ldr	r4, [r3, #0]
 8013eda:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013ede:	68b9      	ldr	r1, [r7, #8]
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	f7f9 f9cc 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013ee6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013eea:	6879      	ldr	r1, [r7, #4]
 8013eec:	4618      	mov	r0, r3
 8013eee:	f7f9 f9c6 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013ef2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013ef6:	6839      	ldr	r1, [r7, #0]
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f7f9 f9c0 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013efe:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8013f02:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013f06:	9302      	str	r3, [sp, #8]
 8013f08:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013f0c:	9301      	str	r3, [sp, #4]
 8013f0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013f12:	9300      	str	r3, [sp, #0]
 8013f14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013f18:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013f1c:	68f9      	ldr	r1, [r7, #12]
 8013f1e:	f7fb fc81 	bl	800f824 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013f22:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013f26:	4619      	mov	r1, r3
 8013f28:	68f8      	ldr	r0, [r7, #12]
 8013f2a:	47a0      	blx	r4
 8013f2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013f30:	4618      	mov	r0, r3
 8013f32:	f7fc fb51 	bl	80105d8 <_ZN15ContainsFailureD1Ev>
 8013f36:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f7f9 fd57 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8013f40:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013f44:	4618      	mov	r0, r3
 8013f46:	f7f9 fd52 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8013f4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013f4e:	4618      	mov	r0, r3
 8013f50:	f7f9 fd4d 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8013f54:	e000      	b.n	8013f58 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013f56:	bf00      	nop
}
 8013f58:	37bc      	adds	r7, #188	; 0xbc
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	bd90      	pop	{r4, r7, pc}

08013f5e <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8013f5e:	b590      	push	{r4, r7, lr}
 8013f60:	b0b3      	sub	sp, #204	; 0xcc
 8013f62:	af04      	add	r7, sp, #16
 8013f64:	60f8      	str	r0, [r7, #12]
 8013f66:	60b9      	str	r1, [r7, #8]
 8013f68:	607a      	str	r2, [r7, #4]
 8013f6a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013f6c:	68f8      	ldr	r0, [r7, #12]
 8013f6e:	f000 fd4f 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 8013f72:	4603      	mov	r3, r0
 8013f74:	681a      	ldr	r2, [r3, #0]
 8013f76:	3228      	adds	r2, #40	; 0x28
 8013f78:	6812      	ldr	r2, [r2, #0]
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d103      	bne.n	8013f8c <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	f000 80ad 	beq.w	80140e6 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d002      	beq.n	8013f98 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 8013f92:	68bb      	ldr	r3, [r7, #8]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d140      	bne.n	801401a <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	3398      	adds	r3, #152	; 0x98
 8013f9e:	681c      	ldr	r4, [r3, #0]
 8013fa0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013fa4:	68b9      	ldr	r1, [r7, #8]
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	f7f9 f969 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013fac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013fb0:	6879      	ldr	r1, [r7, #4]
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	f7f9 f963 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013fb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013fbc:	6839      	ldr	r1, [r7, #0]
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f7f9 f95d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8013fc4:	f107 0010 	add.w	r0, r7, #16
 8013fc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013fcc:	9302      	str	r3, [sp, #8]
 8013fce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013fd2:	9301      	str	r3, [sp, #4]
 8013fd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013fd8:	9300      	str	r3, [sp, #0]
 8013fda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013fde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013fe2:	68f9      	ldr	r1, [r7, #12]
 8013fe4:	f7fb fc1e 	bl	800f824 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013fe8:	f107 0310 	add.w	r3, r7, #16
 8013fec:	4619      	mov	r1, r3
 8013fee:	68f8      	ldr	r0, [r7, #12]
 8013ff0:	47a0      	blx	r4
 8013ff2:	f107 0310 	add.w	r3, r7, #16
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	f7fc faee 	bl	80105d8 <_ZN15ContainsFailureD1Ev>
 8013ffc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014000:	4618      	mov	r0, r3
 8014002:	f7f9 fcf4 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8014006:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801400a:	4618      	mov	r0, r3
 801400c:	f7f9 fcef 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8014010:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014014:	4618      	mov	r0, r3
 8014016:	f7f9 fcea 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 801401a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801401e:	6879      	ldr	r1, [r7, #4]
 8014020:	4618      	mov	r0, r3
 8014022:	f7f9 f92c 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8014026:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801402a:	68b9      	ldr	r1, [r7, #8]
 801402c:	4618      	mov	r0, r3
 801402e:	f7f9 f926 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8014032:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8014036:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801403a:	4611      	mov	r1, r2
 801403c:	4618      	mov	r0, r3
 801403e:	f7f9 f9b7 	bl	800d3b0 <_ZNK12SimpleString14containsNoCaseERKS_>
 8014042:	4603      	mov	r3, r0
 8014044:	f083 0301 	eor.w	r3, r3, #1
 8014048:	b2dc      	uxtb	r4, r3
 801404a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801404e:	4618      	mov	r0, r3
 8014050:	f7f9 fccd 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8014054:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014058:	4618      	mov	r0, r3
 801405a:	f7f9 fcc8 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801405e:	2c00      	cmp	r4, #0
 8014060:	d042      	beq.n	80140e8 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	3398      	adds	r3, #152	; 0x98
 8014068:	681c      	ldr	r4, [r3, #0]
 801406a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801406e:	68b9      	ldr	r1, [r7, #8]
 8014070:	4618      	mov	r0, r3
 8014072:	f7f9 f904 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8014076:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801407a:	6879      	ldr	r1, [r7, #4]
 801407c:	4618      	mov	r0, r3
 801407e:	f7f9 f8fe 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8014082:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014086:	6839      	ldr	r1, [r7, #0]
 8014088:	4618      	mov	r0, r3
 801408a:	f7f9 f8f8 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801408e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8014092:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014096:	9302      	str	r3, [sp, #8]
 8014098:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801409c:	9301      	str	r3, [sp, #4]
 801409e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80140a2:	9300      	str	r3, [sp, #0]
 80140a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80140a8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80140ac:	68f9      	ldr	r1, [r7, #12]
 80140ae:	f7fb fbb9 	bl	800f824 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80140b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80140b6:	4619      	mov	r1, r3
 80140b8:	68f8      	ldr	r0, [r7, #12]
 80140ba:	47a0      	blx	r4
 80140bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80140c0:	4618      	mov	r0, r3
 80140c2:	f7fc fa89 	bl	80105d8 <_ZN15ContainsFailureD1Ev>
 80140c6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80140ca:	4618      	mov	r0, r3
 80140cc:	f7f9 fc8f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80140d0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80140d4:	4618      	mov	r0, r3
 80140d6:	f7f9 fc8a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80140da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80140de:	4618      	mov	r0, r3
 80140e0:	f7f9 fc85 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80140e4:	e000      	b.n	80140e8 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80140e6:	bf00      	nop
}
 80140e8:	37bc      	adds	r7, #188	; 0xbc
 80140ea:	46bd      	mov	sp, r7
 80140ec:	bd90      	pop	{r4, r7, pc}

080140ee <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80140ee:	b590      	push	{r4, r7, lr}
 80140f0:	b099      	sub	sp, #100	; 0x64
 80140f2:	af04      	add	r7, sp, #16
 80140f4:	60f8      	str	r0, [r7, #12]
 80140f6:	60b9      	str	r1, [r7, #8]
 80140f8:	607a      	str	r2, [r7, #4]
 80140fa:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80140fc:	68f8      	ldr	r0, [r7, #12]
 80140fe:	f000 fc87 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 8014102:	4603      	mov	r3, r0
 8014104:	681a      	ldr	r2, [r3, #0]
 8014106:	3228      	adds	r2, #40	; 0x28
 8014108:	6812      	ldr	r2, [r2, #0]
 801410a:	4618      	mov	r0, r3
 801410c:	4790      	blx	r2
    if (expected != actual)
 801410e:	68ba      	ldr	r2, [r7, #8]
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	429a      	cmp	r2, r3
 8014114:	d027      	beq.n	8014166 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	339c      	adds	r3, #156	; 0x9c
 801411c:	681c      	ldr	r4, [r3, #0]
 801411e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014122:	6839      	ldr	r1, [r7, #0]
 8014124:	4618      	mov	r0, r3
 8014126:	f7f9 f8aa 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801412a:	f107 0014 	add.w	r0, r7, #20
 801412e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014132:	9302      	str	r3, [sp, #8]
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	9301      	str	r3, [sp, #4]
 8014138:	68bb      	ldr	r3, [r7, #8]
 801413a:	9300      	str	r3, [sp, #0]
 801413c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801413e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014140:	68f9      	ldr	r1, [r7, #12]
 8014142:	f7fb fc1f 	bl	800f984 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 8014146:	f107 0314 	add.w	r3, r7, #20
 801414a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801414c:	4619      	mov	r1, r3
 801414e:	68f8      	ldr	r0, [r7, #12]
 8014150:	47a0      	blx	r4
 8014152:	f107 0314 	add.w	r3, r7, #20
 8014156:	4618      	mov	r0, r3
 8014158:	f7fc f9fa 	bl	8010550 <_ZN17LongsEqualFailureD1Ev>
 801415c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014160:	4618      	mov	r0, r3
 8014162:	f7f9 fc44 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 8014166:	bf00      	nop
 8014168:	3754      	adds	r7, #84	; 0x54
 801416a:	46bd      	mov	sp, r7
 801416c:	bd90      	pop	{r4, r7, pc}

0801416e <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801416e:	b590      	push	{r4, r7, lr}
 8014170:	b099      	sub	sp, #100	; 0x64
 8014172:	af04      	add	r7, sp, #16
 8014174:	60f8      	str	r0, [r7, #12]
 8014176:	60b9      	str	r1, [r7, #8]
 8014178:	607a      	str	r2, [r7, #4]
 801417a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801417c:	68f8      	ldr	r0, [r7, #12]
 801417e:	f000 fc47 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 8014182:	4603      	mov	r3, r0
 8014184:	681a      	ldr	r2, [r3, #0]
 8014186:	3228      	adds	r2, #40	; 0x28
 8014188:	6812      	ldr	r2, [r2, #0]
 801418a:	4618      	mov	r0, r3
 801418c:	4790      	blx	r2
    if (expected != actual)
 801418e:	68ba      	ldr	r2, [r7, #8]
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	429a      	cmp	r2, r3
 8014194:	d027      	beq.n	80141e6 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	339c      	adds	r3, #156	; 0x9c
 801419c:	681c      	ldr	r4, [r3, #0]
 801419e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80141a2:	6839      	ldr	r1, [r7, #0]
 80141a4:	4618      	mov	r0, r3
 80141a6:	f7f9 f86a 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80141aa:	f107 0014 	add.w	r0, r7, #20
 80141ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80141b2:	9302      	str	r3, [sp, #8]
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	9301      	str	r3, [sp, #4]
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	9300      	str	r3, [sp, #0]
 80141bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80141be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80141c0:	68f9      	ldr	r1, [r7, #12]
 80141c2:	f7fb fcab 	bl	800fb1c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 80141c6:	f107 0314 	add.w	r3, r7, #20
 80141ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80141cc:	4619      	mov	r1, r3
 80141ce:	68f8      	ldr	r0, [r7, #12]
 80141d0:	47a0      	blx	r4
 80141d2:	f107 0314 	add.w	r3, r7, #20
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7fc f998 	bl	801050c <_ZN25UnsignedLongsEqualFailureD1Ev>
 80141dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80141e0:	4618      	mov	r0, r3
 80141e2:	f7f9 fc04 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 80141e6:	bf00      	nop
 80141e8:	3754      	adds	r7, #84	; 0x54
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd90      	pop	{r4, r7, pc}
	...

080141f0 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80141f0:	b082      	sub	sp, #8
 80141f2:	b590      	push	{r4, r7, lr}
 80141f4:	b099      	sub	sp, #100	; 0x64
 80141f6:	af02      	add	r7, sp, #8
 80141f8:	60f8      	str	r0, [r7, #12]
 80141fa:	1d38      	adds	r0, r7, #4
 80141fc:	e880 0006 	stmia.w	r0, {r1, r2}
 8014200:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8014202:	68f8      	ldr	r0, [r7, #12]
 8014204:	f000 fc04 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 8014208:	4603      	mov	r3, r0
 801420a:	681a      	ldr	r2, [r3, #0]
 801420c:	3228      	adds	r2, #40	; 0x28
 801420e:	6812      	ldr	r2, [r2, #0]
 8014210:	4618      	mov	r0, r3
 8014212:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	339c      	adds	r3, #156	; 0x9c
 801421a:	681c      	ldr	r4, [r3, #0]
 801421c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014220:	4919      	ldr	r1, [pc, #100]	; (8014288 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 8014222:	4618      	mov	r0, r3
 8014224:	f7f9 f82b 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8014228:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801422c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801422e:	4618      	mov	r0, r3
 8014230:	f7f9 f825 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8014234:	f107 0014 	add.w	r0, r7, #20
 8014238:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801423c:	9301      	str	r3, [sp, #4]
 801423e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014242:	9300      	str	r3, [sp, #0]
 8014244:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014246:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014248:	68f9      	ldr	r1, [r7, #12]
 801424a:	f7fc f84d 	bl	80102e8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 801424e:	f107 0314 	add.w	r3, r7, #20
 8014252:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014256:	4619      	mov	r1, r3
 8014258:	68f8      	ldr	r0, [r7, #12]
 801425a:	47a0      	blx	r4
 801425c:	f107 0314 	add.w	r3, r7, #20
 8014260:	4618      	mov	r0, r3
 8014262:	f7fc f887 	bl	8010374 <_ZN25FeatureUnsupportedFailureD1Ev>
 8014266:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801426a:	4618      	mov	r0, r3
 801426c:	f7f9 fbbf 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8014270:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014274:	4618      	mov	r0, r3
 8014276:	f7f9 fbba 	bl	800d9ee <_ZN12SimpleStringD1Ev>
#endif
}
 801427a:	bf00      	nop
 801427c:	375c      	adds	r7, #92	; 0x5c
 801427e:	46bd      	mov	sp, r7
 8014280:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8014284:	b002      	add	sp, #8
 8014286:	4770      	bx	lr
 8014288:	08025874 	.word	0x08025874

0801428c <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801428c:	b082      	sub	sp, #8
 801428e:	b590      	push	{r4, r7, lr}
 8014290:	b099      	sub	sp, #100	; 0x64
 8014292:	af02      	add	r7, sp, #8
 8014294:	60f8      	str	r0, [r7, #12]
 8014296:	1d38      	adds	r0, r7, #4
 8014298:	e880 0006 	stmia.w	r0, {r1, r2}
 801429c:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 801429e:	68f8      	ldr	r0, [r7, #12]
 80142a0:	f000 fbb6 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 80142a4:	4603      	mov	r3, r0
 80142a6:	681a      	ldr	r2, [r3, #0]
 80142a8:	3228      	adds	r2, #40	; 0x28
 80142aa:	6812      	ldr	r2, [r2, #0]
 80142ac:	4618      	mov	r0, r3
 80142ae:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	339c      	adds	r3, #156	; 0x9c
 80142b6:	681c      	ldr	r4, [r3, #0]
 80142b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80142bc:	4919      	ldr	r1, [pc, #100]	; (8014324 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 80142be:	4618      	mov	r0, r3
 80142c0:	f7f8 ffdd 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80142c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80142c8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80142ca:	4618      	mov	r0, r3
 80142cc:	f7f8 ffd7 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80142d0:	f107 0014 	add.w	r0, r7, #20
 80142d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80142d8:	9301      	str	r3, [sp, #4]
 80142da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80142de:	9300      	str	r3, [sp, #0]
 80142e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80142e2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80142e4:	68f9      	ldr	r1, [r7, #12]
 80142e6:	f7fb ffff 	bl	80102e8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 80142ea:	f107 0314 	add.w	r3, r7, #20
 80142ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80142f2:	4619      	mov	r1, r3
 80142f4:	68f8      	ldr	r0, [r7, #12]
 80142f6:	47a0      	blx	r4
 80142f8:	f107 0314 	add.w	r3, r7, #20
 80142fc:	4618      	mov	r0, r3
 80142fe:	f7fc f839 	bl	8010374 <_ZN25FeatureUnsupportedFailureD1Ev>
 8014302:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014306:	4618      	mov	r0, r3
 8014308:	f7f9 fb71 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801430c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014310:	4618      	mov	r0, r3
 8014312:	f7f9 fb6c 	bl	800d9ee <_ZN12SimpleStringD1Ev>
#endif
}
 8014316:	bf00      	nop
 8014318:	375c      	adds	r7, #92	; 0x5c
 801431a:	46bd      	mov	sp, r7
 801431c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8014320:	b002      	add	sp, #8
 8014322:	4770      	bx	lr
 8014324:	08025874 	.word	0x08025874

08014328 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014328:	b590      	push	{r4, r7, lr}
 801432a:	b099      	sub	sp, #100	; 0x64
 801432c:	af04      	add	r7, sp, #16
 801432e:	60f8      	str	r0, [r7, #12]
 8014330:	607b      	str	r3, [r7, #4]
 8014332:	460b      	mov	r3, r1
 8014334:	72fb      	strb	r3, [r7, #11]
 8014336:	4613      	mov	r3, r2
 8014338:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 801433a:	68f8      	ldr	r0, [r7, #12]
 801433c:	f000 fb68 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 8014340:	4603      	mov	r3, r0
 8014342:	681a      	ldr	r2, [r3, #0]
 8014344:	3228      	adds	r2, #40	; 0x28
 8014346:	6812      	ldr	r2, [r2, #0]
 8014348:	4618      	mov	r0, r3
 801434a:	4790      	blx	r2
    if (expected != actual)
 801434c:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8014350:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8014354:	429a      	cmp	r2, r3
 8014356:	d029      	beq.n	80143ac <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	339c      	adds	r3, #156	; 0x9c
 801435e:	681c      	ldr	r4, [r3, #0]
 8014360:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014364:	6879      	ldr	r1, [r7, #4]
 8014366:	4618      	mov	r0, r3
 8014368:	f7f8 ff89 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801436c:	f107 0014 	add.w	r0, r7, #20
 8014370:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014374:	9302      	str	r3, [sp, #8]
 8014376:	f997 300a 	ldrsb.w	r3, [r7, #10]
 801437a:	9301      	str	r3, [sp, #4]
 801437c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014380:	9300      	str	r3, [sp, #0]
 8014382:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014384:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014386:	68f9      	ldr	r1, [r7, #12]
 8014388:	f7fb fc94 	bl	800fcb4 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 801438c:	f107 0314 	add.w	r3, r7, #20
 8014390:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014392:	4619      	mov	r1, r3
 8014394:	68f8      	ldr	r0, [r7, #12]
 8014396:	47a0      	blx	r4
 8014398:	f107 0314 	add.w	r3, r7, #20
 801439c:	4618      	mov	r0, r3
 801439e:	f7fc f893 	bl	80104c8 <_ZN23SignedBytesEqualFailureD1Ev>
 80143a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80143a6:	4618      	mov	r0, r3
 80143a8:	f7f9 fb21 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 80143ac:	bf00      	nop
 80143ae:	3754      	adds	r7, #84	; 0x54
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd90      	pop	{r4, r7, pc}

080143b4 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80143b4:	b590      	push	{r4, r7, lr}
 80143b6:	b09d      	sub	sp, #116	; 0x74
 80143b8:	af04      	add	r7, sp, #16
 80143ba:	60f8      	str	r0, [r7, #12]
 80143bc:	60b9      	str	r1, [r7, #8]
 80143be:	607a      	str	r2, [r7, #4]
 80143c0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80143c2:	68f8      	ldr	r0, [r7, #12]
 80143c4:	f000 fb24 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 80143c8:	4603      	mov	r3, r0
 80143ca:	681a      	ldr	r2, [r3, #0]
 80143cc:	3228      	adds	r2, #40	; 0x28
 80143ce:	6812      	ldr	r2, [r2, #0]
 80143d0:	4618      	mov	r0, r3
 80143d2:	4790      	blx	r2
    if (expected != actual)
 80143d4:	68ba      	ldr	r2, [r7, #8]
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	429a      	cmp	r2, r3
 80143da:	d03f      	beq.n	801445c <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	339c      	adds	r3, #156	; 0x9c
 80143e2:	681c      	ldr	r4, [r3, #0]
 80143e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80143e8:	68b9      	ldr	r1, [r7, #8]
 80143ea:	4618      	mov	r0, r3
 80143ec:	f7f9 fdea 	bl	800dfc4 <_Z10StringFromPKv>
 80143f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80143f4:	6879      	ldr	r1, [r7, #4]
 80143f6:	4618      	mov	r0, r3
 80143f8:	f7f9 fde4 	bl	800dfc4 <_Z10StringFromPKv>
 80143fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014400:	6839      	ldr	r1, [r7, #0]
 8014402:	4618      	mov	r0, r3
 8014404:	f7f8 ff3b 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8014408:	f107 0014 	add.w	r0, r7, #20
 801440c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014410:	9302      	str	r3, [sp, #8]
 8014412:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014416:	9301      	str	r3, [sp, #4]
 8014418:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801441c:	9300      	str	r3, [sp, #0]
 801441e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014420:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014422:	68f9      	ldr	r1, [r7, #12]
 8014424:	f7fb f814 	bl	800f450 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8014428:	f107 0314 	add.w	r3, r7, #20
 801442c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801442e:	4619      	mov	r1, r3
 8014430:	68f8      	ldr	r0, [r7, #12]
 8014432:	47a0      	blx	r4
 8014434:	f107 0314 	add.w	r3, r7, #20
 8014438:	4618      	mov	r0, r3
 801443a:	f7fc f955 	bl	80106e8 <_ZN13EqualsFailureD1Ev>
 801443e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014442:	4618      	mov	r0, r3
 8014444:	f7f9 fad3 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8014448:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801444c:	4618      	mov	r0, r3
 801444e:	f7f9 face 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8014452:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014456:	4618      	mov	r0, r3
 8014458:	f7f9 fac9 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 801445c:	bf00      	nop
 801445e:	3764      	adds	r7, #100	; 0x64
 8014460:	46bd      	mov	sp, r7
 8014462:	bd90      	pop	{r4, r7, pc}

08014464 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014464:	b590      	push	{r4, r7, lr}
 8014466:	b09d      	sub	sp, #116	; 0x74
 8014468:	af04      	add	r7, sp, #16
 801446a:	60f8      	str	r0, [r7, #12]
 801446c:	60b9      	str	r1, [r7, #8]
 801446e:	607a      	str	r2, [r7, #4]
 8014470:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014472:	68f8      	ldr	r0, [r7, #12]
 8014474:	f000 facc 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 8014478:	4603      	mov	r3, r0
 801447a:	681a      	ldr	r2, [r3, #0]
 801447c:	3228      	adds	r2, #40	; 0x28
 801447e:	6812      	ldr	r2, [r2, #0]
 8014480:	4618      	mov	r0, r3
 8014482:	4790      	blx	r2
    if (expected != actual)
 8014484:	68ba      	ldr	r2, [r7, #8]
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	429a      	cmp	r2, r3
 801448a:	d03f      	beq.n	801450c <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	339c      	adds	r3, #156	; 0x9c
 8014492:	681c      	ldr	r4, [r3, #0]
 8014494:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014498:	68b9      	ldr	r1, [r7, #8]
 801449a:	4618      	mov	r0, r3
 801449c:	f7f9 fdbc 	bl	800e018 <_Z10StringFromPFvvE>
 80144a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80144a4:	6879      	ldr	r1, [r7, #4]
 80144a6:	4618      	mov	r0, r3
 80144a8:	f7f9 fdb6 	bl	800e018 <_Z10StringFromPFvvE>
 80144ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80144b0:	6839      	ldr	r1, [r7, #0]
 80144b2:	4618      	mov	r0, r3
 80144b4:	f7f8 fee3 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80144b8:	f107 0014 	add.w	r0, r7, #20
 80144bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80144c0:	9302      	str	r3, [sp, #8]
 80144c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80144c6:	9301      	str	r3, [sp, #4]
 80144c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80144cc:	9300      	str	r3, [sp, #0]
 80144ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80144d0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80144d2:	68f9      	ldr	r1, [r7, #12]
 80144d4:	f7fa ffbc 	bl	800f450 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80144d8:	f107 0314 	add.w	r3, r7, #20
 80144dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80144de:	4619      	mov	r1, r3
 80144e0:	68f8      	ldr	r0, [r7, #12]
 80144e2:	47a0      	blx	r4
 80144e4:	f107 0314 	add.w	r3, r7, #20
 80144e8:	4618      	mov	r0, r3
 80144ea:	f7fc f8fd 	bl	80106e8 <_ZN13EqualsFailureD1Ev>
 80144ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80144f2:	4618      	mov	r0, r3
 80144f4:	f7f9 fa7b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80144f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80144fc:	4618      	mov	r0, r3
 80144fe:	f7f9 fa76 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8014502:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014506:	4618      	mov	r0, r3
 8014508:	f7f9 fa71 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 801450c:	bf00      	nop
 801450e:	3764      	adds	r7, #100	; 0x64
 8014510:	46bd      	mov	sp, r7
 8014512:	bd90      	pop	{r4, r7, pc}

08014514 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014514:	b590      	push	{r4, r7, lr}
 8014516:	b09d      	sub	sp, #116	; 0x74
 8014518:	af02      	add	r7, sp, #8
 801451a:	6278      	str	r0, [r7, #36]	; 0x24
 801451c:	ed87 0b06 	vstr	d0, [r7, #24]
 8014520:	ed87 1b04 	vstr	d1, [r7, #16]
 8014524:	ed87 2b02 	vstr	d2, [r7, #8]
 8014528:	6239      	str	r1, [r7, #32]
 801452a:	607a      	str	r2, [r7, #4]
 801452c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801452e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014530:	f000 fa6e 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 8014534:	4603      	mov	r3, r0
 8014536:	681a      	ldr	r2, [r3, #0]
 8014538:	3228      	adds	r2, #40	; 0x28
 801453a:	6812      	ldr	r2, [r2, #0]
 801453c:	4618      	mov	r0, r3
 801453e:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 8014540:	ed97 2b02 	vldr	d2, [r7, #8]
 8014544:	ed97 1b04 	vldr	d1, [r7, #16]
 8014548:	ed97 0b06 	vldr	d0, [r7, #24]
 801454c:	f7fe fd4a 	bl	8012fe4 <_Z13doubles_equalddd>
 8014550:	4603      	mov	r3, r0
 8014552:	f083 0301 	eor.w	r3, r3, #1
 8014556:	b2db      	uxtb	r3, r3
 8014558:	2b00      	cmp	r3, #0
 801455a:	d029      	beq.n	80145b0 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 801455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	339c      	adds	r3, #156	; 0x9c
 8014562:	681c      	ldr	r4, [r3, #0]
 8014564:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014568:	6a39      	ldr	r1, [r7, #32]
 801456a:	4618      	mov	r0, r3
 801456c:	f7f8 fe87 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8014570:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8014574:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014578:	9300      	str	r3, [sp, #0]
 801457a:	ed97 2b02 	vldr	d2, [r7, #8]
 801457e:	ed97 1b04 	vldr	d1, [r7, #16]
 8014582:	ed97 0b06 	vldr	d0, [r7, #24]
 8014586:	683b      	ldr	r3, [r7, #0]
 8014588:	687a      	ldr	r2, [r7, #4]
 801458a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801458c:	f7fa ffa2 	bl	800f4d4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 8014590:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014594:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014596:	4619      	mov	r1, r3
 8014598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801459a:	47a0      	blx	r4
 801459c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80145a0:	4618      	mov	r0, r3
 80145a2:	f7fc f87f 	bl	80106a4 <_ZN19DoublesEqualFailureD1Ev>
 80145a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80145aa:	4618      	mov	r0, r3
 80145ac:	f7f9 fa1f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 80145b0:	bf00      	nop
 80145b2:	376c      	adds	r7, #108	; 0x6c
 80145b4:	46bd      	mov	sp, r7
 80145b6:	bd90      	pop	{r4, r7, pc}

080145b8 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80145b8:	b590      	push	{r4, r7, lr}
 80145ba:	b0a7      	sub	sp, #156	; 0x9c
 80145bc:	af04      	add	r7, sp, #16
 80145be:	60f8      	str	r0, [r7, #12]
 80145c0:	60b9      	str	r1, [r7, #8]
 80145c2:	607a      	str	r2, [r7, #4]
 80145c4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80145c6:	68f8      	ldr	r0, [r7, #12]
 80145c8:	f000 fa22 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 80145cc:	4603      	mov	r3, r0
 80145ce:	681a      	ldr	r2, [r3, #0]
 80145d0:	3228      	adds	r2, #40	; 0x28
 80145d2:	6812      	ldr	r2, [r2, #0]
 80145d4:	4618      	mov	r0, r3
 80145d6:	4790      	blx	r2
	if (length == 0) return;
 80145d8:	683b      	ldr	r3, [r7, #0]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d075      	beq.n	80146ca <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d102      	bne.n	80145ea <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 80145e4:	68bb      	ldr	r3, [r7, #8]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d071      	beq.n	80146ce <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d002      	beq.n	80145f6 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 80145f0:	68bb      	ldr	r3, [r7, #8]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d12d      	bne.n	8014652 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	339c      	adds	r3, #156	; 0x9c
 80145fc:	681c      	ldr	r4, [r3, #0]
 80145fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014602:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8014606:	4618      	mov	r0, r3
 8014608:	f7f8 fe39 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801460c:	f107 0010 	add.w	r0, r7, #16
 8014610:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014614:	9303      	str	r3, [sp, #12]
 8014616:	683b      	ldr	r3, [r7, #0]
 8014618:	9302      	str	r3, [sp, #8]
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	9301      	str	r3, [sp, #4]
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	9300      	str	r3, [sp, #0]
 8014622:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014626:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801462a:	68f9      	ldr	r1, [r7, #12]
 801462c:	f7fb fd70 	bl	8010110 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8014630:	f107 0310 	add.w	r3, r7, #16
 8014634:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014638:	4619      	mov	r1, r3
 801463a:	68f8      	ldr	r0, [r7, #12]
 801463c:	47a0      	blx	r4
 801463e:	f107 0310 	add.w	r3, r7, #16
 8014642:	4618      	mov	r0, r3
 8014644:	f7fb feda 	bl	80103fc <_ZN18BinaryEqualFailureD1Ev>
 8014648:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801464c:	4618      	mov	r0, r3
 801464e:	f7f9 f9ce 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 8014652:	683a      	ldr	r2, [r7, #0]
 8014654:	6879      	ldr	r1, [r7, #4]
 8014656:	68b8      	ldr	r0, [r7, #8]
 8014658:	f7f8 fd30 	bl	800d0bc <_ZN12SimpleString6MemCmpEPKvS1_j>
 801465c:	4603      	mov	r3, r0
 801465e:	2b00      	cmp	r3, #0
 8014660:	bf14      	ite	ne
 8014662:	2301      	movne	r3, #1
 8014664:	2300      	moveq	r3, #0
 8014666:	b2db      	uxtb	r3, r3
 8014668:	2b00      	cmp	r3, #0
 801466a:	d031      	beq.n	80146d0 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	339c      	adds	r3, #156	; 0x9c
 8014672:	681c      	ldr	r4, [r3, #0]
 8014674:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014678:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801467c:	4618      	mov	r0, r3
 801467e:	f7f8 fdfe 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8014682:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8014686:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801468a:	9303      	str	r3, [sp, #12]
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	9302      	str	r3, [sp, #8]
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	9301      	str	r3, [sp, #4]
 8014694:	68bb      	ldr	r3, [r7, #8]
 8014696:	9300      	str	r3, [sp, #0]
 8014698:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801469c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80146a0:	68f9      	ldr	r1, [r7, #12]
 80146a2:	f7fb fd35 	bl	8010110 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 80146a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80146aa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80146ae:	4619      	mov	r1, r3
 80146b0:	68f8      	ldr	r0, [r7, #12]
 80146b2:	47a0      	blx	r4
 80146b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80146b8:	4618      	mov	r0, r3
 80146ba:	f7fb fe9f 	bl	80103fc <_ZN18BinaryEqualFailureD1Ev>
 80146be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80146c2:	4618      	mov	r0, r3
 80146c4:	f7f9 f993 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80146c8:	e002      	b.n	80146d0 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 80146ca:	bf00      	nop
 80146cc:	e000      	b.n	80146d0 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80146ce:	bf00      	nop
}
 80146d0:	378c      	adds	r7, #140	; 0x8c
 80146d2:	46bd      	mov	sp, r7
 80146d4:	bd90      	pop	{r4, r7, pc}

080146d6 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80146d6:	b590      	push	{r4, r7, lr}
 80146d8:	b09b      	sub	sp, #108	; 0x6c
 80146da:	af06      	add	r7, sp, #24
 80146dc:	60f8      	str	r0, [r7, #12]
 80146de:	60b9      	str	r1, [r7, #8]
 80146e0:	607a      	str	r2, [r7, #4]
 80146e2:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80146e4:	68f8      	ldr	r0, [r7, #12]
 80146e6:	f000 f993 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 80146ea:	4603      	mov	r3, r0
 80146ec:	681a      	ldr	r2, [r3, #0]
 80146ee:	3228      	adds	r2, #40	; 0x28
 80146f0:	6812      	ldr	r2, [r2, #0]
 80146f2:	4618      	mov	r0, r3
 80146f4:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 80146f6:	68ba      	ldr	r2, [r7, #8]
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	405a      	eors	r2, r3
 80146fc:	683b      	ldr	r3, [r7, #0]
 80146fe:	4013      	ands	r3, r2
 8014700:	2b00      	cmp	r3, #0
 8014702:	d02b      	beq.n	801475c <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	339c      	adds	r3, #156	; 0x9c
 801470a:	681c      	ldr	r4, [r3, #0]
 801470c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014710:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014712:	4618      	mov	r0, r3
 8014714:	f7f8 fdb3 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8014718:	f107 0014 	add.w	r0, r7, #20
 801471c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014720:	9304      	str	r3, [sp, #16]
 8014722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014724:	9303      	str	r3, [sp, #12]
 8014726:	683b      	ldr	r3, [r7, #0]
 8014728:	9302      	str	r3, [sp, #8]
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	9301      	str	r3, [sp, #4]
 801472e:	68bb      	ldr	r3, [r7, #8]
 8014730:	9300      	str	r3, [sp, #0]
 8014732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014734:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014736:	68f9      	ldr	r1, [r7, #12]
 8014738:	f7fb fd7a 	bl	8010230 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 801473c:	f107 0314 	add.w	r3, r7, #20
 8014740:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014742:	4619      	mov	r1, r3
 8014744:	68f8      	ldr	r0, [r7, #12]
 8014746:	47a0      	blx	r4
 8014748:	f107 0314 	add.w	r3, r7, #20
 801474c:	4618      	mov	r0, r3
 801474e:	f7fb fe33 	bl	80103b8 <_ZN16BitsEqualFailureD1Ev>
 8014752:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014756:	4618      	mov	r0, r3
 8014758:	f7f9 f949 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 801475c:	bf00      	nop
 801475e:	3754      	adds	r7, #84	; 0x54
 8014760:	46bd      	mov	sp, r7
 8014762:	bd90      	pop	{r4, r7, pc}

08014764 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 8014764:	b590      	push	{r4, r7, lr}
 8014766:	b09d      	sub	sp, #116	; 0x74
 8014768:	af04      	add	r7, sp, #16
 801476a:	60f8      	str	r0, [r7, #12]
 801476c:	607a      	str	r2, [r7, #4]
 801476e:	603b      	str	r3, [r7, #0]
 8014770:	460b      	mov	r3, r1
 8014772:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8014774:	68f8      	ldr	r0, [r7, #12]
 8014776:	f000 f94b 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 801477a:	4603      	mov	r3, r0
 801477c:	681a      	ldr	r2, [r3, #0]
 801477e:	3228      	adds	r2, #40	; 0x28
 8014780:	6812      	ldr	r2, [r2, #0]
 8014782:	4618      	mov	r0, r3
 8014784:	4790      	blx	r2
    if (failed)
 8014786:	7afb      	ldrb	r3, [r7, #11]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d03f      	beq.n	801480c <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	339c      	adds	r3, #156	; 0x9c
 8014792:	681c      	ldr	r4, [r3, #0]
 8014794:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014798:	6879      	ldr	r1, [r7, #4]
 801479a:	4618      	mov	r0, r3
 801479c:	f7f8 fd6f 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80147a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80147a4:	6839      	ldr	r1, [r7, #0]
 80147a6:	4618      	mov	r0, r3
 80147a8:	f7f8 fd69 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80147ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80147b0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80147b2:	4618      	mov	r0, r3
 80147b4:	f7f8 fd63 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80147b8:	f107 0014 	add.w	r0, r7, #20
 80147bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80147c0:	9302      	str	r3, [sp, #8]
 80147c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80147c6:	9301      	str	r3, [sp, #4]
 80147c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80147cc:	9300      	str	r3, [sp, #0]
 80147ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80147d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80147d2:	68f9      	ldr	r1, [r7, #12]
 80147d4:	f7fa ff30 	bl	800f638 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80147d8:	f107 0314 	add.w	r3, r7, #20
 80147dc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80147de:	4619      	mov	r1, r3
 80147e0:	68f8      	ldr	r0, [r7, #12]
 80147e2:	47a0      	blx	r4
 80147e4:	f107 0314 	add.w	r3, r7, #20
 80147e8:	4618      	mov	r0, r3
 80147ea:	f7fb ff39 	bl	8010660 <_ZN17CheckEqualFailureD1Ev>
 80147ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80147f2:	4618      	mov	r0, r3
 80147f4:	f7f9 f8fb 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80147f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80147fc:	4618      	mov	r0, r3
 80147fe:	f7f9 f8f6 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8014802:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014806:	4618      	mov	r0, r3
 8014808:	f7f9 f8f1 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 801480c:	bf00      	nop
 801480e:	3764      	adds	r7, #100	; 0x64
 8014810:	46bd      	mov	sp, r7
 8014812:	bd90      	pop	{r4, r7, pc}

08014814 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8014814:	b590      	push	{r4, r7, lr}
 8014816:	b09d      	sub	sp, #116	; 0x74
 8014818:	af04      	add	r7, sp, #16
 801481a:	60f8      	str	r0, [r7, #12]
 801481c:	607a      	str	r2, [r7, #4]
 801481e:	603b      	str	r3, [r7, #0]
 8014820:	460b      	mov	r3, r1
 8014822:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8014824:	68f8      	ldr	r0, [r7, #12]
 8014826:	f000 f8f3 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 801482a:	4603      	mov	r3, r0
 801482c:	681a      	ldr	r2, [r3, #0]
 801482e:	3228      	adds	r2, #40	; 0x28
 8014830:	6812      	ldr	r2, [r2, #0]
 8014832:	4618      	mov	r0, r3
 8014834:	4790      	blx	r2
    if (!comparison)
 8014836:	7afb      	ldrb	r3, [r7, #11]
 8014838:	f083 0301 	eor.w	r3, r3, #1
 801483c:	b2db      	uxtb	r3, r3
 801483e:	2b00      	cmp	r3, #0
 8014840:	d03f      	beq.n	80148c2 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	339c      	adds	r3, #156	; 0x9c
 8014848:	681c      	ldr	r4, [r3, #0]
 801484a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801484e:	6879      	ldr	r1, [r7, #4]
 8014850:	4618      	mov	r0, r3
 8014852:	f7f8 fd14 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8014856:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801485a:	6839      	ldr	r1, [r7, #0]
 801485c:	4618      	mov	r0, r3
 801485e:	f7f8 fd0e 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8014862:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014866:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014868:	4618      	mov	r0, r3
 801486a:	f7f8 fd08 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801486e:	f107 0014 	add.w	r0, r7, #20
 8014872:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014876:	9302      	str	r3, [sp, #8]
 8014878:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801487c:	9301      	str	r3, [sp, #4]
 801487e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014882:	9300      	str	r3, [sp, #0]
 8014884:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014886:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014888:	68f9      	ldr	r1, [r7, #12]
 801488a:	f7fa ff83 	bl	800f794 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801488e:	f107 0314 	add.w	r3, r7, #20
 8014892:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014894:	4619      	mov	r1, r3
 8014896:	68f8      	ldr	r0, [r7, #12]
 8014898:	47a0      	blx	r4
 801489a:	f107 0314 	add.w	r3, r7, #20
 801489e:	4618      	mov	r0, r3
 80148a0:	f7fb febc 	bl	801061c <_ZN17ComparisonFailureD1Ev>
 80148a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80148a8:	4618      	mov	r0, r3
 80148aa:	f7f9 f8a0 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80148ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7f9 f89b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80148b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80148bc:	4618      	mov	r0, r3
 80148be:	f7f9 f896 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 80148c2:	bf00      	nop
 80148c4:	3764      	adds	r7, #100	; 0x64
 80148c6:	46bd      	mov	sp, r7
 80148c8:	bd90      	pop	{r4, r7, pc}
	...

080148cc <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 80148cc:	b5b0      	push	{r4, r5, r7, lr}
 80148ce:	b088      	sub	sp, #32
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	60f8      	str	r0, [r7, #12]
 80148d4:	60b9      	str	r1, [r7, #8]
 80148d6:	607a      	str	r2, [r7, #4]
 80148d8:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 80148da:	f107 0310 	add.w	r3, r7, #16
 80148de:	4924      	ldr	r1, [pc, #144]	; (8014970 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 80148e0:	4618      	mov	r0, r3
 80148e2:	f7f8 fccc 	bl	800d27e <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 80148e6:	f107 0310 	add.w	r3, r7, #16
 80148ea:	6879      	ldr	r1, [r7, #4]
 80148ec:	4618      	mov	r0, r3
 80148ee:	f7f9 f90d 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 80148f2:	f107 0310 	add.w	r3, r7, #16
 80148f6:	491f      	ldr	r1, [pc, #124]	; (8014974 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 80148f8:	4618      	mov	r0, r3
 80148fa:	f7f9 f907 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 80148fe:	f107 0318 	add.w	r3, r7, #24
 8014902:	6839      	ldr	r1, [r7, #0]
 8014904:	4618      	mov	r0, r3
 8014906:	f7f9 fda1 	bl	800e44c <_Z10StringFromj>
 801490a:	f107 0218 	add.w	r2, r7, #24
 801490e:	f107 0310 	add.w	r3, r7, #16
 8014912:	4611      	mov	r1, r2
 8014914:	4618      	mov	r0, r3
 8014916:	f7f9 f8e7 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801491a:	f107 0318 	add.w	r3, r7, #24
 801491e:	4618      	mov	r0, r3
 8014920:	f7f9 f865 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8014924:	f107 0310 	add.w	r3, r7, #16
 8014928:	4913      	ldr	r1, [pc, #76]	; (8014978 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 801492a:	4618      	mov	r0, r3
 801492c:	f7f9 f8ee 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 8014930:	f107 0310 	add.w	r3, r7, #16
 8014934:	68b9      	ldr	r1, [r7, #8]
 8014936:	4618      	mov	r0, r3
 8014938:	f7f9 f8e8 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 801493c:	68f8      	ldr	r0, [r7, #12]
 801493e:	f000 f867 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 8014942:	4604      	mov	r4, r0
 8014944:	6823      	ldr	r3, [r4, #0]
 8014946:	3338      	adds	r3, #56	; 0x38
 8014948:	681d      	ldr	r5, [r3, #0]
 801494a:	f107 0310 	add.w	r3, r7, #16
 801494e:	4618      	mov	r0, r3
 8014950:	f7f9 f820 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 8014954:	4603      	mov	r3, r0
 8014956:	4619      	mov	r1, r3
 8014958:	4620      	mov	r0, r4
 801495a:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 801495c:	f107 0310 	add.w	r3, r7, #16
 8014960:	4618      	mov	r0, r3
 8014962:	f7f9 f844 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 8014966:	bf00      	nop
 8014968:	3720      	adds	r7, #32
 801496a:	46bd      	mov	sp, r7
 801496c:	bdb0      	pop	{r4, r5, r7, pc}
 801496e:	bf00      	nop
 8014970:	0802588c 	.word	0x0802588c
 8014974:	08025890 	.word	0x08025890
 8014978:	08025894 	.word	0x08025894

0801497c <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 801497c:	b590      	push	{r4, r7, lr}
 801497e:	b085      	sub	sp, #20
 8014980:	af00      	add	r7, sp, #0
 8014982:	60f8      	str	r0, [r7, #12]
 8014984:	60b9      	str	r1, [r7, #8]
 8014986:	607a      	str	r2, [r7, #4]
 8014988:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	3370      	adds	r3, #112	; 0x70
 8014990:	681c      	ldr	r4, [r3, #0]
 8014992:	68b8      	ldr	r0, [r7, #8]
 8014994:	f7f8 fffe 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 8014998:	4601      	mov	r1, r0
 801499a:	683b      	ldr	r3, [r7, #0]
 801499c:	687a      	ldr	r2, [r7, #4]
 801499e:	68f8      	ldr	r0, [r7, #12]
 80149a0:	47a0      	blx	r4
}
 80149a2:	bf00      	nop
 80149a4:	3714      	adds	r7, #20
 80149a6:	46bd      	mov	sp, r7
 80149a8:	bd90      	pop	{r4, r7, pc}

080149aa <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 80149aa:	b580      	push	{r7, lr}
 80149ac:	b082      	sub	sp, #8
 80149ae:	af00      	add	r7, sp, #0
 80149b0:	6078      	str	r0, [r7, #4]
 80149b2:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	f000 f82b 	bl	8014a10 <_ZN10UtestShell13getTestResultEv>
 80149ba:	4603      	mov	r3, r0
 80149bc:	681a      	ldr	r2, [r3, #0]
 80149be:	323c      	adds	r2, #60	; 0x3c
 80149c0:	6812      	ldr	r2, [r2, #0]
 80149c2:	6839      	ldr	r1, [r7, #0]
 80149c4:	4618      	mov	r0, r3
 80149c6:	4790      	blx	r2
}
 80149c8:	bf00      	nop
 80149ca:	3708      	adds	r7, #8
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}

080149d0 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 80149d0:	b480      	push	{r7}
 80149d2:	b083      	sub	sp, #12
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
 80149d8:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 80149da:	4a04      	ldr	r2, [pc, #16]	; (80149ec <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 80149dc:	683b      	ldr	r3, [r7, #0]
 80149de:	6013      	str	r3, [r2, #0]
}
 80149e0:	bf00      	nop
 80149e2:	370c      	adds	r7, #12
 80149e4:	46bd      	mov	sp, r7
 80149e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ea:	4770      	bx	lr
 80149ec:	20000b3c 	.word	0x20000b3c

080149f0 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 80149f0:	b480      	push	{r7}
 80149f2:	b083      	sub	sp, #12
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
 80149f8:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 80149fa:	4a04      	ldr	r2, [pc, #16]	; (8014a0c <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 80149fc:	683b      	ldr	r3, [r7, #0]
 80149fe:	6013      	str	r3, [r2, #0]
}
 8014a00:	bf00      	nop
 8014a02:	370c      	adds	r7, #12
 8014a04:	46bd      	mov	sp, r7
 8014a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0a:	4770      	bx	lr
 8014a0c:	20000b40 	.word	0x20000b40

08014a10 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b082      	sub	sp, #8
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8014a18:	4b09      	ldr	r3, [pc, #36]	; (8014a40 <_ZN10UtestShell13getTestResultEv+0x30>)
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d109      	bne.n	8014a34 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 8014a20:	f7fe fbb2 	bl	8013188 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8014a24:	4603      	mov	r3, r0
 8014a26:	681a      	ldr	r2, [r3, #0]
 8014a28:	32a4      	adds	r2, #164	; 0xa4
 8014a2a:	6812      	ldr	r2, [r2, #0]
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	4790      	blx	r2
 8014a30:	4603      	mov	r3, r0
 8014a32:	e001      	b.n	8014a38 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 8014a34:	4b02      	ldr	r3, [pc, #8]	; (8014a40 <_ZN10UtestShell13getTestResultEv+0x30>)
 8014a36:	681b      	ldr	r3, [r3, #0]
}
 8014a38:	4618      	mov	r0, r3
 8014a3a:	3708      	adds	r7, #8
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	bd80      	pop	{r7, pc}
 8014a40:	20000b3c 	.word	0x20000b3c

08014a44 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8014a48:	4b05      	ldr	r3, [pc, #20]	; (8014a60 <_ZN10UtestShell10getCurrentEv+0x1c>)
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d103      	bne.n	8014a58 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 8014a50:	f7fe fb9a 	bl	8013188 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8014a54:	4603      	mov	r3, r0
 8014a56:	e001      	b.n	8014a5c <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 8014a58:	4b01      	ldr	r3, [pc, #4]	; (8014a60 <_ZN10UtestShell10getCurrentEv+0x1c>)
 8014a5a:	681b      	ldr	r3, [r3, #0]
}
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	bd80      	pop	{r7, pc}
 8014a60:	20000b40 	.word	0x20000b40

08014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 8014a64:	b480      	push	{r7}
 8014a66:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 8014a68:	4b03      	ldr	r3, [pc, #12]	; (8014a78 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 8014a6a:	681b      	ldr	r3, [r3, #0]
}
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	46bd      	mov	sp, r7
 8014a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a74:	4770      	bx	lr
 8014a76:	bf00      	nop
 8014a78:	20000094 	.word	0x20000094

08014a7c <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 8014a7c:	b480      	push	{r7}
 8014a7e:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 8014a80:	4b03      	ldr	r3, [pc, #12]	; (8014a90 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 8014a82:	4a04      	ldr	r2, [pc, #16]	; (8014a94 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 8014a84:	601a      	str	r2, [r3, #0]
}
 8014a86:	bf00      	nop
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8e:	4770      	bx	lr
 8014a90:	20000094 	.word	0x20000094
 8014a94:	20000090 	.word	0x20000090

08014a98 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 8014a98:	b480      	push	{r7}
 8014a9a:	b083      	sub	sp, #12
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	6078      	str	r0, [r7, #4]
 8014aa0:	4a04      	ldr	r2, [pc, #16]	; (8014ab4 <_ZN5UtestC1Ev+0x1c>)
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	601a      	str	r2, [r3, #0]
{
}
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	370c      	adds	r7, #12
 8014aac:	46bd      	mov	sp, r7
 8014aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab2:	4770      	bx	lr
 8014ab4:	08029320 	.word	0x08029320

08014ab8 <_ZN5UtestD1Ev>:

Utest::~Utest()
 8014ab8:	b480      	push	{r7}
 8014aba:	b083      	sub	sp, #12
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
 8014ac0:	4a04      	ldr	r2, [pc, #16]	; (8014ad4 <_ZN5UtestD1Ev+0x1c>)
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	601a      	str	r2, [r3, #0]
{
}
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	4618      	mov	r0, r3
 8014aca:	370c      	adds	r7, #12
 8014acc:	46bd      	mov	sp, r7
 8014ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad2:	4770      	bx	lr
 8014ad4:	08029320 	.word	0x08029320

08014ad8 <_ZN5UtestD0Ev>:
Utest::~Utest()
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b082      	sub	sp, #8
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
}
 8014ae0:	6878      	ldr	r0, [r7, #4]
 8014ae2:	f7ff ffe9 	bl	8014ab8 <_ZN5UtestD1Ev>
 8014ae6:	2104      	movs	r1, #4
 8014ae8:	6878      	ldr	r0, [r7, #4]
 8014aea:	f7f6 f819 	bl	800ab20 <_ZdlPvj>
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	4618      	mov	r0, r3
 8014af2:	3708      	adds	r7, #8
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd80      	pop	{r7, pc}

08014af8 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b082      	sub	sp, #8
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 8014b00:	4b0d      	ldr	r3, [pc, #52]	; (8014b38 <_ZN5Utest3runEv+0x40>)
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	6879      	ldr	r1, [r7, #4]
 8014b06:	480d      	ldr	r0, [pc, #52]	; (8014b3c <_ZN5Utest3runEv+0x44>)
 8014b08:	4798      	blx	r3
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	bf14      	ite	ne
 8014b10:	2301      	movne	r3, #1
 8014b12:	2300      	moveq	r3, #0
 8014b14:	b2db      	uxtb	r3, r3
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d004      	beq.n	8014b24 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 8014b1a:	4b07      	ldr	r3, [pc, #28]	; (8014b38 <_ZN5Utest3runEv+0x40>)
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	6879      	ldr	r1, [r7, #4]
 8014b20:	4807      	ldr	r0, [pc, #28]	; (8014b40 <_ZN5Utest3runEv+0x48>)
 8014b22:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 8014b24:	4b04      	ldr	r3, [pc, #16]	; (8014b38 <_ZN5Utest3runEv+0x40>)
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	6879      	ldr	r1, [r7, #4]
 8014b2a:	4806      	ldr	r0, [pc, #24]	; (8014b44 <_ZN5Utest3runEv+0x4c>)
 8014b2c:	4798      	blx	r3
}
 8014b2e:	bf00      	nop
 8014b30:	3708      	adds	r7, #8
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bd80      	pop	{r7, pc}
 8014b36:	bf00      	nop
 8014b38:	200000a4 	.word	0x200000a4
 8014b3c:	080131e5 	.word	0x080131e5
 8014b40:	08013201 	.word	0x08013201
 8014b44:	0801321d 	.word	0x0801321d

08014b48 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 8014b48:	b480      	push	{r7}
 8014b4a:	b083      	sub	sp, #12
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
}
 8014b50:	bf00      	nop
 8014b52:	370c      	adds	r7, #12
 8014b54:	46bd      	mov	sp, r7
 8014b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b5a:	4770      	bx	lr

08014b5c <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 8014b5c:	b480      	push	{r7}
 8014b5e:	b083      	sub	sp, #12
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	6078      	str	r0, [r7, #4]
}
 8014b64:	bf00      	nop
 8014b66:	370c      	adds	r7, #12
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6e:	4770      	bx	lr

08014b70 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 8014b70:	b480      	push	{r7}
 8014b72:	b083      	sub	sp, #12
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	6078      	str	r0, [r7, #4]
}
 8014b78:	bf00      	nop
 8014b7a:	370c      	adds	r7, #12
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b82:	4770      	bx	lr

08014b84 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 8014b84:	b480      	push	{r7}
 8014b86:	b083      	sub	sp, #12
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
 8014b8c:	4a04      	ldr	r2, [pc, #16]	; (8014ba0 <_ZN14TestTerminatorD1Ev+0x1c>)
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	601a      	str	r2, [r3, #0]
{
}
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	4618      	mov	r0, r3
 8014b96:	370c      	adds	r7, #12
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9e:	4770      	bx	lr
 8014ba0:	0802930c 	.word	0x0802930c

08014ba4 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b084      	sub	sp, #16
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 8014bac:	2300      	movs	r3, #0
 8014bae:	60fb      	str	r3, [r7, #12]
 8014bb0:	f107 030c 	add.w	r3, r7, #12
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f7f6 f975 	bl	800aea4 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8014bba:	f107 030c 	add.w	r3, r7, #12
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f000 f82c 	bl	8014c1c <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 8014bc4:	f107 030c 	add.w	r3, r7, #12
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f000 f835 	bl	8014c38 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 8014bce:	bf00      	nop
 8014bd0:	3710      	adds	r7, #16
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bd80      	pop	{r7, pc}
	...

08014bd8 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	b082      	sub	sp, #8
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	6078      	str	r0, [r7, #4]
 8014be0:	4a05      	ldr	r2, [pc, #20]	; (8014bf8 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	601a      	str	r2, [r3, #0]
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	4618      	mov	r0, r3
 8014bea:	f7ff ffcb 	bl	8014b84 <_ZN14TestTerminatorD1Ev>
{
}
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	3708      	adds	r7, #8
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bd80      	pop	{r7, pc}
 8014bf8:	080292f8 	.word	0x080292f8

08014bfc <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b082      	sub	sp, #8
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	6078      	str	r0, [r7, #4]
}
 8014c04:	6878      	ldr	r0, [r7, #4]
 8014c06:	f7ff ffe7 	bl	8014bd8 <_ZN20NormalTestTerminatorD1Ev>
 8014c0a:	2104      	movs	r1, #4
 8014c0c:	6878      	ldr	r0, [r7, #4]
 8014c0e:	f7f5 ff87 	bl	800ab20 <_ZdlPvj>
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	4618      	mov	r0, r3
 8014c16:	3708      	adds	r7, #8
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	bd80      	pop	{r7, pc}

08014c1c <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b082      	sub	sp, #8
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 8014c24:	4b03      	ldr	r3, [pc, #12]	; (8014c34 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8014c2a:	bf00      	nop
 8014c2c:	3708      	adds	r7, #8
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	bd80      	pop	{r7, pc}
 8014c32:	bf00      	nop
 8014c34:	200000a0 	.word	0x200000a0

08014c38 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b082      	sub	sp, #8
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
 8014c40:	4a05      	ldr	r2, [pc, #20]	; (8014c58 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	601a      	str	r2, [r3, #0]
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	4618      	mov	r0, r3
 8014c4a:	f7ff ff9b 	bl	8014b84 <_ZN14TestTerminatorD1Ev>
{
}
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	4618      	mov	r0, r3
 8014c52:	3708      	adds	r7, #8
 8014c54:	46bd      	mov	sp, r7
 8014c56:	bd80      	pop	{r7, pc}
 8014c58:	080292e4 	.word	0x080292e4

08014c5c <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b082      	sub	sp, #8
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	6078      	str	r0, [r7, #4]
}
 8014c64:	6878      	ldr	r0, [r7, #4]
 8014c66:	f7ff ffe7 	bl	8014c38 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8014c6a:	2104      	movs	r1, #4
 8014c6c:	6878      	ldr	r0, [r7, #4]
 8014c6e:	f7f5 ff57 	bl	800ab20 <_ZdlPvj>
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	4618      	mov	r0, r3
 8014c76:	3708      	adds	r7, #8
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	bd80      	pop	{r7, pc}

08014c7c <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b082      	sub	sp, #8
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 8014c84:	f7fe fbaa 	bl	80133dc <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	f7ff ff8a 	bl	8014ba4 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 8014c90:	bf00      	nop
 8014c92:	3708      	adds	r7, #8
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bd80      	pop	{r7, pc}

08014c98 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b082      	sub	sp, #8
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
 8014ca0:	4a05      	ldr	r2, [pc, #20]	; (8014cb8 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	601a      	str	r2, [r3, #0]
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	4618      	mov	r0, r3
 8014caa:	f7ff ff95 	bl	8014bd8 <_ZN20NormalTestTerminatorD1Ev>
{
}
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	3708      	adds	r7, #8
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bd80      	pop	{r7, pc}
 8014cb8:	080292d0 	.word	0x080292d0

08014cbc <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b082      	sub	sp, #8
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
}
 8014cc4:	6878      	ldr	r0, [r7, #4]
 8014cc6:	f7ff ffe7 	bl	8014c98 <_ZN22CrashingTestTerminatorD1Ev>
 8014cca:	2104      	movs	r1, #4
 8014ccc:	6878      	ldr	r0, [r7, #4]
 8014cce:	f7f5 ff27 	bl	800ab20 <_ZdlPvj>
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	3708      	adds	r7, #8
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	bd80      	pop	{r7, pc}

08014cdc <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 8014cdc:	b580      	push	{r7, lr}
 8014cde:	b084      	sub	sp, #16
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	6078      	str	r0, [r7, #4]
 8014ce4:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	2200      	movs	r2, #0
 8014cea:	601a      	str	r2, [r3, #0]
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	2200      	movs	r2, #0
 8014cf0:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 8014cf2:	683b      	ldr	r3, [r7, #0]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d007      	beq.n	8014d08 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 8014cf8:	683b      	ldr	r3, [r7, #0]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	3310      	adds	r3, #16
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	6838      	ldr	r0, [r7, #0]
 8014d02:	4798      	blx	r3
 8014d04:	4603      	mov	r3, r0
 8014d06:	e000      	b.n	8014d0a <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 8014d08:	2300      	movs	r3, #0
 8014d0a:	687a      	ldr	r2, [r7, #4]
 8014d0c:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	685b      	ldr	r3, [r3, #4]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d02d      	beq.n	8014d72 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	685b      	ldr	r3, [r3, #4]
 8014d1a:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8014d1e:	4293      	cmp	r3, r2
 8014d20:	d201      	bcs.n	8014d26 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 8014d22:	009b      	lsls	r3, r3, #2
 8014d24:	e001      	b.n	8014d2a <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 8014d26:	f04f 33ff 	mov.w	r3, #4294967295
 8014d2a:	f240 3237 	movw	r2, #823	; 0x337
 8014d2e:	4914      	ldr	r1, [pc, #80]	; (8014d80 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 8014d30:	4618      	mov	r0, r3
 8014d32:	f7f5 ff05 	bl	800ab40 <_ZnajPKci>
 8014d36:	4602      	mov	r2, r0
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 8014d3c:	683b      	ldr	r3, [r7, #0]
 8014d3e:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8014d40:	2300      	movs	r3, #0
 8014d42:	60bb      	str	r3, [r7, #8]
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	685b      	ldr	r3, [r3, #4]
 8014d48:	68ba      	ldr	r2, [r7, #8]
 8014d4a:	429a      	cmp	r2, r3
 8014d4c:	d212      	bcs.n	8014d74 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	681a      	ldr	r2, [r3, #0]
 8014d52:	68bb      	ldr	r3, [r7, #8]
 8014d54:	009b      	lsls	r3, r3, #2
 8014d56:	4413      	add	r3, r2
 8014d58:	68fa      	ldr	r2, [r7, #12]
 8014d5a:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	330c      	adds	r3, #12
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	68f8      	ldr	r0, [r7, #12]
 8014d66:	4798      	blx	r3
 8014d68:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8014d6a:	68bb      	ldr	r3, [r7, #8]
 8014d6c:	3301      	adds	r3, #1
 8014d6e:	60bb      	str	r3, [r7, #8]
 8014d70:	e7e8      	b.n	8014d44 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 8014d72:	bf00      	nop
    }
}
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	4618      	mov	r0, r3
 8014d78:	3710      	adds	r7, #16
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	bd80      	pop	{r7, pc}
 8014d7e:	bf00      	nop
 8014d80:	0802571c 	.word	0x0802571c

08014d84 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b082      	sub	sp, #8
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d004      	beq.n	8014d9e <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f7f5 fee5 	bl	800ab68 <_ZdaPv>
}
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	4618      	mov	r0, r3
 8014da2:	3708      	adds	r7, #8
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bd80      	pop	{r7, pc}

08014da8 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 8014da8:	b480      	push	{r7}
 8014daa:	b087      	sub	sp, #28
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	60f8      	str	r0, [r7, #12]
 8014db0:	60b9      	str	r1, [r7, #8]
 8014db2:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	681a      	ldr	r2, [r3, #0]
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	009b      	lsls	r3, r3, #2
 8014dbc:	4413      	add	r3, r2
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	681a      	ldr	r2, [r3, #0]
 8014dc6:	68bb      	ldr	r3, [r7, #8]
 8014dc8:	009b      	lsls	r3, r3, #2
 8014dca:	4413      	add	r3, r2
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	681a      	ldr	r2, [r3, #0]
 8014dd4:	68bb      	ldr	r3, [r7, #8]
 8014dd6:	009b      	lsls	r3, r3, #2
 8014dd8:	4413      	add	r3, r2
 8014dda:	697a      	ldr	r2, [r7, #20]
 8014ddc:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	681a      	ldr	r2, [r3, #0]
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	009b      	lsls	r3, r3, #2
 8014de6:	4413      	add	r3, r2
 8014de8:	693a      	ldr	r2, [r7, #16]
 8014dea:	601a      	str	r2, [r3, #0]
}
 8014dec:	bf00      	nop
 8014dee:	371c      	adds	r7, #28
 8014df0:	46bd      	mov	sp, r7
 8014df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df6:	4770      	bx	lr

08014df8 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	b084      	sub	sp, #16
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	6078      	str	r0, [r7, #4]
 8014e00:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	685b      	ldr	r3, [r3, #4]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d028      	beq.n	8014e5c <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 8014e0a:	4b17      	ldr	r3, [pc, #92]	; (8014e68 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	6838      	ldr	r0, [r7, #0]
 8014e10:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	685b      	ldr	r3, [r3, #4]
 8014e16:	3b01      	subs	r3, #1
 8014e18:	60fb      	str	r3, [r7, #12]
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d019      	beq.n	8014e54 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	685b      	ldr	r3, [r3, #4]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d01b      	beq.n	8014e60 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 8014e28:	4b10      	ldr	r3, [pc, #64]	; (8014e6c <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	4798      	blx	r3
 8014e2e:	4603      	mov	r3, r0
 8014e30:	461a      	mov	r2, r3
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	3301      	adds	r3, #1
 8014e36:	fbb2 f1f3 	udiv	r1, r2, r3
 8014e3a:	fb03 f301 	mul.w	r3, r3, r1
 8014e3e:	1ad3      	subs	r3, r2, r3
 8014e40:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 8014e42:	68ba      	ldr	r2, [r7, #8]
 8014e44:	68f9      	ldr	r1, [r7, #12]
 8014e46:	6878      	ldr	r0, [r7, #4]
 8014e48:	f7ff ffae 	bl	8014da8 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	3b01      	subs	r3, #1
 8014e50:	60fb      	str	r3, [r7, #12]
 8014e52:	e7e2      	b.n	8014e1a <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 8014e54:	6878      	ldr	r0, [r7, #4]
 8014e56:	f000 f834 	bl	8014ec2 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8014e5a:	e002      	b.n	8014e62 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 8014e5c:	bf00      	nop
 8014e5e:	e000      	b.n	8014e62 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 8014e60:	bf00      	nop
}
 8014e62:	3710      	adds	r7, #16
 8014e64:	46bd      	mov	sp, r7
 8014e66:	bd80      	pop	{r7, pc}
 8014e68:	200000e0 	.word	0x200000e0
 8014e6c:	200000e4 	.word	0x200000e4

08014e70 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b086      	sub	sp, #24
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	685b      	ldr	r3, [r3, #4]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d01c      	beq.n	8014eba <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	685b      	ldr	r3, [r3, #4]
 8014e84:	085b      	lsrs	r3, r3, #1
 8014e86:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 8014e88:	2300      	movs	r3, #0
 8014e8a:	617b      	str	r3, [r7, #20]
 8014e8c:	697a      	ldr	r2, [r7, #20]
 8014e8e:	693b      	ldr	r3, [r7, #16]
 8014e90:	429a      	cmp	r2, r3
 8014e92:	d20e      	bcs.n	8014eb2 <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	685a      	ldr	r2, [r3, #4]
 8014e98:	697b      	ldr	r3, [r7, #20]
 8014e9a:	1ad3      	subs	r3, r2, r3
 8014e9c:	3b01      	subs	r3, #1
 8014e9e:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 8014ea0:	68fa      	ldr	r2, [r7, #12]
 8014ea2:	6979      	ldr	r1, [r7, #20]
 8014ea4:	6878      	ldr	r0, [r7, #4]
 8014ea6:	f7ff ff7f 	bl	8014da8 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 8014eaa:	697b      	ldr	r3, [r7, #20]
 8014eac:	3301      	adds	r3, #1
 8014eae:	617b      	str	r3, [r7, #20]
 8014eb0:	e7ec      	b.n	8014e8c <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 8014eb2:	6878      	ldr	r0, [r7, #4]
 8014eb4:	f000 f805 	bl	8014ec2 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8014eb8:	e000      	b.n	8014ebc <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 8014eba:	bf00      	nop
}
 8014ebc:	3718      	adds	r7, #24
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	bd80      	pop	{r7, pc}

08014ec2 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 8014ec2:	b580      	push	{r7, lr}
 8014ec4:	b084      	sub	sp, #16
 8014ec6:	af00      	add	r7, sp, #0
 8014ec8:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 8014eca:	2300      	movs	r3, #0
 8014ecc:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8014ece:	2300      	movs	r3, #0
 8014ed0:	60bb      	str	r3, [r7, #8]
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	685b      	ldr	r3, [r3, #4]
 8014ed6:	68ba      	ldr	r2, [r7, #8]
 8014ed8:	429a      	cmp	r2, r3
 8014eda:	d221      	bcs.n	8014f20 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	681a      	ldr	r2, [r3, #0]
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	6859      	ldr	r1, [r3, #4]
 8014ee4:	68bb      	ldr	r3, [r7, #8]
 8014ee6:	1acb      	subs	r3, r1, r3
 8014ee8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014eec:	3b01      	subs	r3, #1
 8014eee:	009b      	lsls	r3, r3, #2
 8014ef0:	4413      	add	r3, r2
 8014ef2:	6818      	ldr	r0, [r3, #0]
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	681a      	ldr	r2, [r3, #0]
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	6859      	ldr	r1, [r3, #4]
 8014efc:	68bb      	ldr	r3, [r7, #8]
 8014efe:	1acb      	subs	r3, r1, r3
 8014f00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014f04:	3b01      	subs	r3, #1
 8014f06:	009b      	lsls	r3, r3, #2
 8014f08:	4413      	add	r3, r2
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	3308      	adds	r3, #8
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	68f9      	ldr	r1, [r7, #12]
 8014f14:	4798      	blx	r3
 8014f16:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8014f18:	68bb      	ldr	r3, [r7, #8]
 8014f1a:	3301      	adds	r3, #1
 8014f1c:	60bb      	str	r3, [r7, #8]
 8014f1e:	e7d8      	b.n	8014ed2 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 8014f20:	bf00      	nop
 8014f22:	3710      	adds	r7, #16
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bd80      	pop	{r7, pc}

08014f28 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b082      	sub	sp, #8
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	6078      	str	r0, [r7, #4]
    return get(0);
 8014f30:	2100      	movs	r1, #0
 8014f32:	6878      	ldr	r0, [r7, #4]
 8014f34:	f000 f805 	bl	8014f42 <_ZNK22UtestShellPointerArray3getEj>
 8014f38:	4603      	mov	r3, r0
}
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	3708      	adds	r7, #8
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}

08014f42 <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 8014f42:	b480      	push	{r7}
 8014f44:	b083      	sub	sp, #12
 8014f46:	af00      	add	r7, sp, #0
 8014f48:	6078      	str	r0, [r7, #4]
 8014f4a:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	685b      	ldr	r3, [r3, #4]
 8014f50:	683a      	ldr	r2, [r7, #0]
 8014f52:	429a      	cmp	r2, r3
 8014f54:	d301      	bcc.n	8014f5a <_ZNK22UtestShellPointerArray3getEj+0x18>
 8014f56:	2300      	movs	r3, #0
 8014f58:	e005      	b.n	8014f66 <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	681a      	ldr	r2, [r3, #0]
 8014f5e:	683b      	ldr	r3, [r7, #0]
 8014f60:	009b      	lsls	r3, r3, #2
 8014f62:	4413      	add	r3, r2
 8014f64:	681b      	ldr	r3, [r3, #0]
}
 8014f66:	4618      	mov	r0, r3
 8014f68:	370c      	adds	r7, #12
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f70:	4770      	bx	lr
	...

08014f74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 8014f74:	b580      	push	{r7, lr}
 8014f76:	b084      	sub	sp, #16
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	60f8      	str	r0, [r7, #12]
 8014f7c:	60b9      	str	r1, [r7, #8]
 8014f7e:	607a      	str	r2, [r7, #4]
 8014f80:	603b      	str	r3, [r7, #0]
 8014f82:	4a10      	ldr	r2, [pc, #64]	; (8014fc4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 8014f88:	6879      	ldr	r1, [r7, #4]
 8014f8a:	68b8      	ldr	r0, [r7, #8]
 8014f8c:	f7fe fc27 	bl	80137de <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 8014f90:	6839      	ldr	r1, [r7, #0]
 8014f92:	68b8      	ldr	r0, [r7, #8]
 8014f94:	f7fe fc31 	bl	80137fa <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 8014f98:	69b9      	ldr	r1, [r7, #24]
 8014f9a:	68b8      	ldr	r0, [r7, #8]
 8014f9c:	f7fe fc03 	bl	80137a6 <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 8014fa0:	69f9      	ldr	r1, [r7, #28]
 8014fa2:	68b8      	ldr	r0, [r7, #8]
 8014fa4:	f7fe fc0d 	bl	80137c2 <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 8014fa8:	f7fd fc20 	bl	80127ec <_ZN12TestRegistry18getCurrentRegistryEv>
 8014fac:	4603      	mov	r3, r0
 8014fae:	681a      	ldr	r2, [r3, #0]
 8014fb0:	3208      	adds	r2, #8
 8014fb2:	6812      	ldr	r2, [r2, #0]
 8014fb4:	68b9      	ldr	r1, [r7, #8]
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	4790      	blx	r2
}
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	3710      	adds	r7, #16
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	bd80      	pop	{r7, pc}
 8014fc4:	08029214 	.word	0x08029214

08014fc8 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 8014fc8:	b480      	push	{r7}
 8014fca:	b083      	sub	sp, #12
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
 8014fd0:	4a04      	ldr	r2, [pc, #16]	; (8014fe4 <_ZN13TestInstallerD1Ev+0x1c>)
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	601a      	str	r2, [r3, #0]
{
}
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	4618      	mov	r0, r3
 8014fda:	370c      	adds	r7, #12
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe2:	4770      	bx	lr
 8014fe4:	08029214 	.word	0x08029214

08014fe8 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b082      	sub	sp, #8
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]
}
 8014ff0:	6878      	ldr	r0, [r7, #4]
 8014ff2:	f7ff ffe9 	bl	8014fc8 <_ZN13TestInstallerD1Ev>
 8014ff6:	2104      	movs	r1, #4
 8014ff8:	6878      	ldr	r0, [r7, #4]
 8014ffa:	f7f5 fd91 	bl	800ab20 <_ZdlPvj>
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	4618      	mov	r0, r3
 8015002:	3708      	adds	r7, #8
 8015004:	46bd      	mov	sp, r7
 8015006:	bd80      	pop	{r7, pc}

08015008 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 8015008:	b580      	push	{r7, lr}
 801500a:	b082      	sub	sp, #8
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
 8015010:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d10a      	bne.n	801502e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8015018:	683b      	ldr	r3, [r7, #0]
 801501a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801501e:	4293      	cmp	r3, r2
 8015020:	d105      	bne.n	801502e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8015022:	4805      	ldr	r0, [pc, #20]	; (8015038 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8015024:	f7ff fe38 	bl	8014c98 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 8015028:	4804      	ldr	r0, [pc, #16]	; (801503c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 801502a:	f7ff fdd5 	bl	8014bd8 <_ZN20NormalTestTerminatorD1Ev>
}
 801502e:	bf00      	nop
 8015030:	3708      	adds	r7, #8
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}
 8015036:	bf00      	nop
 8015038:	20000090 	.word	0x20000090
 801503c:	2000008c 	.word	0x2000008c

08015040 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 8015040:	b580      	push	{r7, lr}
 8015042:	af00      	add	r7, sp, #0
 8015044:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015048:	2001      	movs	r0, #1
 801504a:	f7ff ffdd 	bl	8015008 <_Z41__static_initialization_and_destruction_0ii>
 801504e:	bd80      	pop	{r7, pc}

08015050 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 8015050:	b580      	push	{r7, lr}
 8015052:	af00      	add	r7, sp, #0
 8015054:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015058:	2000      	movs	r0, #0
 801505a:	f7ff ffd5 	bl	8015008 <_Z41__static_initialization_and_destruction_0ii>
 801505e:	bd80      	pop	{r7, pc}

08015060 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8015060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015062:	b083      	sub	sp, #12
 8015064:	af00      	add	r7, sp, #0
 8015066:	ed87 0b00 	vstr	d0, [r7]
 801506a:	683c      	ldr	r4, [r7, #0]
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8015072:	2301      	movs	r3, #1
 8015074:	461e      	mov	r6, r3
 8015076:	f04f 32ff 	mov.w	r2, #4294967295
 801507a:	4b10      	ldr	r3, [pc, #64]	; (80150bc <_ZSt5isinfd+0x5c>)
 801507c:	4620      	mov	r0, r4
 801507e:	4629      	mov	r1, r5
 8015080:	f7eb fb82 	bl	8000788 <__aeabi_dcmpun>
 8015084:	4603      	mov	r3, r0
 8015086:	2b00      	cmp	r3, #0
 8015088:	d10b      	bne.n	80150a2 <_ZSt5isinfd+0x42>
 801508a:	f04f 32ff 	mov.w	r2, #4294967295
 801508e:	4b0b      	ldr	r3, [pc, #44]	; (80150bc <_ZSt5isinfd+0x5c>)
 8015090:	4620      	mov	r0, r4
 8015092:	4629      	mov	r1, r5
 8015094:	f7eb fb5a 	bl	800074c <__aeabi_dcmple>
 8015098:	4603      	mov	r3, r0
 801509a:	2b00      	cmp	r3, #0
 801509c:	d101      	bne.n	80150a2 <_ZSt5isinfd+0x42>
 801509e:	2300      	movs	r3, #0
 80150a0:	461e      	mov	r6, r3
 80150a2:	b2f3      	uxtb	r3, r6
 80150a4:	f083 0301 	eor.w	r3, r3, #1
 80150a8:	b2db      	uxtb	r3, r3
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	bf14      	ite	ne
 80150ae:	2301      	movne	r3, #1
 80150b0:	2300      	moveq	r3, #0
 80150b2:	b2db      	uxtb	r3, r3
 80150b4:	4618      	mov	r0, r3
 80150b6:	370c      	adds	r7, #12
 80150b8:	46bd      	mov	sp, r7
 80150ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150bc:	7fefffff 	.word	0x7fefffff

080150c0 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 80150c0:	b590      	push	{r4, r7, lr}
 80150c2:	b083      	sub	sp, #12
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	ed87 0b00 	vstr	d0, [r7]
 80150ca:	2301      	movs	r3, #1
 80150cc:	461c      	mov	r4, r3
 80150ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80150d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80150d6:	f7eb fb57 	bl	8000788 <__aeabi_dcmpun>
 80150da:	4603      	mov	r3, r0
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d101      	bne.n	80150e4 <_ZSt5isnand+0x24>
 80150e0:	2300      	movs	r3, #0
 80150e2:	461c      	mov	r4, r3
 80150e4:	b2e3      	uxtb	r3, r4
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	bf14      	ite	ne
 80150ea:	2301      	movne	r3, #1
 80150ec:	2300      	moveq	r3, #0
 80150ee:	b2db      	uxtb	r3, r3
 80150f0:	4618      	mov	r0, r3
 80150f2:	370c      	adds	r7, #12
 80150f4:	46bd      	mov	sp, r7
 80150f6:	bd90      	pop	{r4, r7, pc}

080150f8 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 80150f8:	b590      	push	{r4, r7, lr}
 80150fa:	b095      	sub	sp, #84	; 0x54
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	60f8      	str	r0, [r7, #12]
 8015100:	60b9      	str	r1, [r7, #8]
 8015102:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	3334      	adds	r3, #52	; 0x34
 801510a:	681c      	ldr	r4, [r3, #0]
 801510c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015110:	490f      	ldr	r1, [pc, #60]	; (8015150 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 8015112:	4618      	mov	r0, r3
 8015114:	f7f8 f8b3 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8015118:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801511c:	f107 0314 	add.w	r3, r7, #20
 8015120:	68f9      	ldr	r1, [r7, #12]
 8015122:	4618      	mov	r0, r3
 8015124:	f7f9 ff0a 	bl	800ef3c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8015128:	f107 0314 	add.w	r3, r7, #20
 801512c:	4619      	mov	r1, r3
 801512e:	6878      	ldr	r0, [r7, #4]
 8015130:	47a0      	blx	r4
 8015132:	f107 0314 	add.w	r3, r7, #20
 8015136:	4618      	mov	r0, r3
 8015138:	f7f9 ffc0 	bl	800f0bc <_ZN11TestFailureD1Ev>
 801513c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015140:	4618      	mov	r0, r3
 8015142:	f7f8 fc54 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 8015146:	bf00      	nop
 8015148:	3754      	adds	r7, #84	; 0x54
 801514a:	46bd      	mov	sp, r7
 801514c:	bd90      	pop	{r4, r7, pc}
 801514e:	bf00      	nop
 8015150:	080258a4 	.word	0x080258a4

08015154 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 8015154:	b480      	push	{r7}
 8015156:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 8015158:	2301      	movs	r3, #1
}
 801515a:	4618      	mov	r0, r3
 801515c:	46bd      	mov	sp, r7
 801515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015162:	4770      	bx	lr

08015164 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b082      	sub	sp, #8
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
 801516c:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 801516e:	4b13      	ldr	r3, [pc, #76]	; (80151bc <PlatformSpecificSetJmpImplementation+0x58>)
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	225c      	movs	r2, #92	; 0x5c
 8015174:	fb02 f303 	mul.w	r3, r2, r3
 8015178:	4a11      	ldr	r2, [pc, #68]	; (80151c0 <PlatformSpecificSetJmpImplementation+0x5c>)
 801517a:	4413      	add	r3, r2
 801517c:	4618      	mov	r0, r3
 801517e:	f7eb f84f 	bl	8000220 <setjmp>
 8015182:	4603      	mov	r3, r0
 8015184:	2b00      	cmp	r3, #0
 8015186:	bf0c      	ite	eq
 8015188:	2301      	moveq	r3, #1
 801518a:	2300      	movne	r3, #0
 801518c:	b2db      	uxtb	r3, r3
 801518e:	2b00      	cmp	r3, #0
 8015190:	d00e      	beq.n	80151b0 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 8015192:	4b0a      	ldr	r3, [pc, #40]	; (80151bc <PlatformSpecificSetJmpImplementation+0x58>)
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	3301      	adds	r3, #1
 8015198:	4a08      	ldr	r2, [pc, #32]	; (80151bc <PlatformSpecificSetJmpImplementation+0x58>)
 801519a:	6013      	str	r3, [r2, #0]
        function(data);
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	6838      	ldr	r0, [r7, #0]
 80151a0:	4798      	blx	r3
        jmp_buf_index--;
 80151a2:	4b06      	ldr	r3, [pc, #24]	; (80151bc <PlatformSpecificSetJmpImplementation+0x58>)
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	3b01      	subs	r3, #1
 80151a8:	4a04      	ldr	r2, [pc, #16]	; (80151bc <PlatformSpecificSetJmpImplementation+0x58>)
 80151aa:	6013      	str	r3, [r2, #0]
        return 1;
 80151ac:	2301      	movs	r3, #1
 80151ae:	e000      	b.n	80151b2 <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 80151b0:	2300      	movs	r3, #0
}
 80151b2:	4618      	mov	r0, r3
 80151b4:	3708      	adds	r7, #8
 80151b6:	46bd      	mov	sp, r7
 80151b8:	bd80      	pop	{r7, pc}
 80151ba:	bf00      	nop
 80151bc:	20000edc 	.word	0x20000edc
 80151c0:	20000b44 	.word	0x20000b44

080151c4 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 80151c8:	4b07      	ldr	r3, [pc, #28]	; (80151e8 <PlatformSpecificLongJmpImplementation+0x24>)
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	3b01      	subs	r3, #1
 80151ce:	4a06      	ldr	r2, [pc, #24]	; (80151e8 <PlatformSpecificLongJmpImplementation+0x24>)
 80151d0:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 80151d2:	4b05      	ldr	r3, [pc, #20]	; (80151e8 <PlatformSpecificLongJmpImplementation+0x24>)
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	225c      	movs	r2, #92	; 0x5c
 80151d8:	fb02 f303 	mul.w	r3, r2, r3
 80151dc:	4a03      	ldr	r2, [pc, #12]	; (80151ec <PlatformSpecificLongJmpImplementation+0x28>)
 80151de:	4413      	add	r3, r2
 80151e0:	2101      	movs	r1, #1
 80151e2:	4618      	mov	r0, r3
 80151e4:	f7eb f822 	bl	800022c <longjmp>
 80151e8:	20000edc 	.word	0x20000edc
 80151ec:	20000b44 	.word	0x20000b44

080151f0 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 80151f0:	b480      	push	{r7}
 80151f2:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 80151f4:	2300      	movs	r3, #0
#endif
}
 80151f6:	4618      	mov	r0, r3
 80151f8:	46bd      	mov	sp, r7
 80151fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151fe:	4770      	bx	lr

08015200 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b084      	sub	sp, #16
 8015204:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 8015206:	2000      	movs	r0, #0
 8015208:	f00e ec4e 	blx	8023aa8 <__time_veneer>
 801520c:	4602      	mov	r2, r0
 801520e:	460b      	mov	r3, r1
 8015210:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 8015214:	463b      	mov	r3, r7
 8015216:	4618      	mov	r0, r3
 8015218:	f00b fb7a 	bl	8020910 <localtime>
 801521c:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	4a04      	ldr	r2, [pc, #16]	; (8015234 <TimeStringImplementation+0x34>)
 8015222:	2150      	movs	r1, #80	; 0x50
 8015224:	4804      	ldr	r0, [pc, #16]	; (8015238 <TimeStringImplementation+0x38>)
 8015226:	f00c fc83 	bl	8021b30 <strftime>
    return dateTime;
 801522a:	4b03      	ldr	r3, [pc, #12]	; (8015238 <TimeStringImplementation+0x38>)
}
 801522c:	4618      	mov	r0, r3
 801522e:	3710      	adds	r7, #16
 8015230:	46bd      	mov	sp, r7
 8015232:	bd80      	pop	{r7, pc}
 8015234:	080258e0 	.word	0x080258e0
 8015238:	20000ee0 	.word	0x20000ee0

0801523c <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	b082      	sub	sp, #8
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
 8015244:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 8015246:	6839      	ldr	r1, [r7, #0]
 8015248:	6878      	ldr	r0, [r7, #4]
 801524a:	f00b f997 	bl	802057c <fopen>
 801524e:	4603      	mov	r3, r0
#endif
}
 8015250:	4618      	mov	r0, r3
 8015252:	3708      	adds	r7, #8
 8015254:	46bd      	mov	sp, r7
 8015256:	bd80      	pop	{r7, pc}

08015258 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b082      	sub	sp, #8
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
 8015260:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 8015262:	6839      	ldr	r1, [r7, #0]
 8015264:	6878      	ldr	r0, [r7, #4]
 8015266:	f00b f9f7 	bl	8020658 <fputs>
}
 801526a:	bf00      	nop
 801526c:	3708      	adds	r7, #8
 801526e:	46bd      	mov	sp, r7
 8015270:	bd80      	pop	{r7, pc}

08015272 <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 8015272:	b580      	push	{r7, lr}
 8015274:	b082      	sub	sp, #8
 8015276:	af00      	add	r7, sp, #0
 8015278:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 801527a:	6878      	ldr	r0, [r7, #4]
 801527c:	f00a ff78 	bl	8020170 <fclose>
}
 8015280:	bf00      	nop
 8015282:	3708      	adds	r7, #8
 8015284:	46bd      	mov	sp, r7
 8015286:	bd80      	pop	{r7, pc}

08015288 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 8015288:	b580      	push	{r7, lr}
 801528a:	af00      	add	r7, sp, #0
  fflush(stdout);
 801528c:	4b03      	ldr	r3, [pc, #12]	; (801529c <PlatformSpecificFlushImplementation+0x14>)
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	689b      	ldr	r3, [r3, #8]
 8015292:	4618      	mov	r0, r3
 8015294:	f00b f836 	bl	8020304 <fflush>
}
 8015298:	bf00      	nop
 801529a:	bd80      	pop	{r7, pc}
 801529c:	20000108 	.word	0x20000108

080152a0 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b082      	sub	sp, #8
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 80152aa:	ed97 0b00 	vldr	d0, [r7]
 80152ae:	f7ff ff07 	bl	80150c0 <_ZSt5isnand>
 80152b2:	4603      	mov	r3, r0
}
 80152b4:	4618      	mov	r0, r3
 80152b6:	3708      	adds	r7, #8
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}

080152bc <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b082      	sub	sp, #8
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 80152c6:	ed97 0b00 	vldr	d0, [r7]
 80152ca:	f7ff fec9 	bl	8015060 <_ZSt5isinfd>
 80152ce:	4603      	mov	r3, r0
}
 80152d0:	4618      	mov	r0, r3
 80152d2:	3708      	adds	r7, #8
 80152d4:	46bd      	mov	sp, r7
 80152d6:	bd80      	pop	{r7, pc}

080152d8 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 80152d8:	b480      	push	{r7}
 80152da:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 80152dc:	2300      	movs	r3, #0
#endif

}
 80152de:	4618      	mov	r0, r3
 80152e0:	46bd      	mov	sp, r7
 80152e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e6:	4770      	bx	lr

080152e8 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 80152e8:	b480      	push	{r7}
 80152ea:	b083      	sub	sp, #12
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
}
 80152f0:	bf00      	nop
 80152f2:	370c      	adds	r7, #12
 80152f4:	46bd      	mov	sp, r7
 80152f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152fa:	4770      	bx	lr

080152fc <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 80152fc:	b480      	push	{r7}
 80152fe:	b083      	sub	sp, #12
 8015300:	af00      	add	r7, sp, #0
 8015302:	6078      	str	r0, [r7, #4]
}
 8015304:	bf00      	nop
 8015306:	370c      	adds	r7, #12
 8015308:	46bd      	mov	sp, r7
 801530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530e:	4770      	bx	lr

08015310 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8015310:	b480      	push	{r7}
 8015312:	b083      	sub	sp, #12
 8015314:	af00      	add	r7, sp, #0
 8015316:	6078      	str	r0, [r7, #4]
}
 8015318:	bf00      	nop
 801531a:	370c      	adds	r7, #12
 801531c:	46bd      	mov	sp, r7
 801531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015322:	4770      	bx	lr

08015324 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 8015324:	b580      	push	{r7, lr}
 8015326:	b084      	sub	sp, #16
 8015328:	af00      	add	r7, sp, #0
 801532a:	60f8      	str	r0, [r7, #12]
 801532c:	60b9      	str	r1, [r7, #8]
 801532e:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8015330:	4a25      	ldr	r2, [pc, #148]	; (80153c8 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	601a      	str	r2, [r3, #0]
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	68ba      	ldr	r2, [r7, #8]
 801533a:	605a      	str	r2, [r3, #4]
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	687a      	ldr	r2, [r7, #4]
 8015340:	609a      	str	r2, [r3, #8]
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	2200      	movs	r2, #0
 8015346:	731a      	strb	r2, [r3, #12]
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	2200      	movs	r2, #0
 801534c:	735a      	strb	r2, [r3, #13]
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	2200      	movs	r2, #0
 8015352:	739a      	strb	r2, [r3, #14]
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	2200      	movs	r2, #0
 8015358:	73da      	strb	r2, [r3, #15]
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	2200      	movs	r2, #0
 801535e:	741a      	strb	r2, [r3, #16]
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	2200      	movs	r2, #0
 8015364:	745a      	strb	r2, [r3, #17]
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	2200      	movs	r2, #0
 801536a:	749a      	strb	r2, [r3, #18]
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	2200      	movs	r2, #0
 8015370:	74da      	strb	r2, [r3, #19]
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	2200      	movs	r2, #0
 8015376:	751a      	strb	r2, [r3, #20]
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	2200      	movs	r2, #0
 801537c:	755a      	strb	r2, [r3, #21]
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	2200      	movs	r2, #0
 8015382:	759a      	strb	r2, [r3, #22]
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	2200      	movs	r2, #0
 8015388:	75da      	strb	r2, [r3, #23]
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	2200      	movs	r2, #0
 801538e:	761a      	strb	r2, [r3, #24]
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	2201      	movs	r2, #1
 8015394:	61da      	str	r2, [r3, #28]
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	2200      	movs	r2, #0
 801539a:	621a      	str	r2, [r3, #32]
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	2200      	movs	r2, #0
 80153a0:	625a      	str	r2, [r3, #36]	; 0x24
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	2200      	movs	r2, #0
 80153a6:	629a      	str	r2, [r3, #40]	; 0x28
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	2200      	movs	r2, #0
 80153ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	3330      	adds	r3, #48	; 0x30
 80153b4:	4905      	ldr	r1, [pc, #20]	; (80153cc <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 80153b6:	4618      	mov	r0, r3
 80153b8:	f7f7 ff61 	bl	800d27e <_ZN12SimpleStringC1EPKc>
{
}
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	4618      	mov	r0, r3
 80153c0:	3710      	adds	r7, #16
 80153c2:	46bd      	mov	sp, r7
 80153c4:	bd80      	pop	{r7, pc}
 80153c6:	bf00      	nop
 80153c8:	08029340 	.word	0x08029340
 80153cc:	080258f4 	.word	0x080258f4

080153d0 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b082      	sub	sp, #8
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	6078      	str	r0, [r7, #4]
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	4618      	mov	r0, r3
 80153dc:	f7f8 fb07 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	4618      	mov	r0, r3
 80153e4:	3708      	adds	r7, #8
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}
	...

080153ec <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 80153ec:	b590      	push	{r4, r7, lr}
 80153ee:	b085      	sub	sp, #20
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
 80153f4:	4a20      	ldr	r2, [pc, #128]	; (8015478 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d015      	beq.n	801542e <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015406:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801540c:	4618      	mov	r0, r3
 801540e:	f00a fda4 	bl	801ff5a <_ZNK10TestFilter7getNextEv>
 8015412:	4602      	mov	r2, r0
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 8015418:	68fc      	ldr	r4, [r7, #12]
 801541a:	2c00      	cmp	r4, #0
 801541c:	d0ed      	beq.n	80153fa <_ZN20CommandLineArgumentsD1Ev+0xe>
 801541e:	4620      	mov	r0, r4
 8015420:	f7ff ffd6 	bl	80153d0 <_ZN10TestFilterD1Ev>
 8015424:	2110      	movs	r1, #16
 8015426:	4620      	mov	r0, r4
 8015428:	f7f5 fb7a 	bl	800ab20 <_ZdlPvj>
    while(groupFilters_) {
 801542c:	e7e5      	b.n	80153fa <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015432:	2b00      	cmp	r3, #0
 8015434:	d015      	beq.n	8015462 <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801543a:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015440:	4618      	mov	r0, r3
 8015442:	f00a fd8a 	bl	801ff5a <_ZNK10TestFilter7getNextEv>
 8015446:	4602      	mov	r2, r0
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 801544c:	68bc      	ldr	r4, [r7, #8]
 801544e:	2c00      	cmp	r4, #0
 8015450:	d0ed      	beq.n	801542e <_ZN20CommandLineArgumentsD1Ev+0x42>
 8015452:	4620      	mov	r0, r4
 8015454:	f7ff ffbc 	bl	80153d0 <_ZN10TestFilterD1Ev>
 8015458:	2110      	movs	r1, #16
 801545a:	4620      	mov	r0, r4
 801545c:	f7f5 fb60 	bl	800ab20 <_ZdlPvj>
    while(nameFilters_) {
 8015460:	e7e5      	b.n	801542e <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	3330      	adds	r3, #48	; 0x30
 8015466:	4618      	mov	r0, r3
 8015468:	f7f8 fac1 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    }
}
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	4618      	mov	r0, r3
 8015470:	3714      	adds	r7, #20
 8015472:	46bd      	mov	sp, r7
 8015474:	bd90      	pop	{r4, r7, pc}
 8015476:	bf00      	nop
 8015478:	08029340 	.word	0x08029340

0801547c <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 801547c:	b580      	push	{r7, lr}
 801547e:	b082      	sub	sp, #8
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
}
 8015484:	6878      	ldr	r0, [r7, #4]
 8015486:	f7ff ffb1 	bl	80153ec <_ZN20CommandLineArgumentsD1Ev>
 801548a:	2138      	movs	r1, #56	; 0x38
 801548c:	6878      	ldr	r0, [r7, #4]
 801548e:	f7f5 fb47 	bl	800ab20 <_ZdlPvj>
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	4618      	mov	r0, r3
 8015496:	3708      	adds	r7, #8
 8015498:	46bd      	mov	sp, r7
 801549a:	bd80      	pop	{r7, pc}

0801549c <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 801549c:	b5b0      	push	{r4, r5, r7, lr}
 801549e:	b0be      	sub	sp, #248	; 0xf8
 80154a0:	af02      	add	r7, sp, #8
 80154a2:	6078      	str	r0, [r7, #4]
 80154a4:	6039      	str	r1, [r7, #0]
 80154a6:	2400      	movs	r4, #0
    bool correctParameters = true;
 80154a8:	2301      	movs	r3, #1
 80154aa:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 80154ae:	2301      	movs	r3, #1
 80154b0:	613b      	str	r3, [r7, #16]
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	685a      	ldr	r2, [r3, #4]
 80154b6:	693b      	ldr	r3, [r7, #16]
 80154b8:	429a      	cmp	r2, r3
 80154ba:	f340 83a4 	ble.w	8015c06 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	689a      	ldr	r2, [r3, #8]
 80154c2:	693b      	ldr	r3, [r7, #16]
 80154c4:	009b      	lsls	r3, r3, #2
 80154c6:	4413      	add	r3, r2
 80154c8:	681a      	ldr	r2, [r3, #0]
 80154ca:	f107 0308 	add.w	r3, r7, #8
 80154ce:	4611      	mov	r1, r2
 80154d0:	4618      	mov	r0, r3
 80154d2:	f7f7 fed4 	bl	800d27e <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 80154d6:	f107 0314 	add.w	r3, r7, #20
 80154da:	49c8      	ldr	r1, [pc, #800]	; (80157fc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 80154dc:	4618      	mov	r0, r3
 80154de:	f7f7 fece 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80154e2:	f107 0214 	add.w	r2, r7, #20
 80154e6:	f107 0308 	add.w	r3, r7, #8
 80154ea:	4611      	mov	r1, r2
 80154ec:	4618      	mov	r0, r3
 80154ee:	f7f8 fa8a 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 80154f2:	4603      	mov	r3, r0
 80154f4:	461d      	mov	r5, r3
 80154f6:	f107 0314 	add.w	r3, r7, #20
 80154fa:	4618      	mov	r0, r3
 80154fc:	f7f8 fa77 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8015500:	2d00      	cmp	r5, #0
 8015502:	d006      	beq.n	8015512 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	2201      	movs	r2, #1
 8015508:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 801550a:	2300      	movs	r3, #0
 801550c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8015510:	e366      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 8015512:	f107 031c 	add.w	r3, r7, #28
 8015516:	49ba      	ldr	r1, [pc, #744]	; (8015800 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8015518:	4618      	mov	r0, r3
 801551a:	f7f7 feb0 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801551e:	f107 021c 	add.w	r2, r7, #28
 8015522:	f107 0308 	add.w	r3, r7, #8
 8015526:	4611      	mov	r1, r2
 8015528:	4618      	mov	r0, r3
 801552a:	f7f8 fa6c 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801552e:	4603      	mov	r3, r0
 8015530:	461d      	mov	r5, r3
 8015532:	f107 031c 	add.w	r3, r7, #28
 8015536:	4618      	mov	r0, r3
 8015538:	f7f8 fa59 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801553c:	2d00      	cmp	r5, #0
 801553e:	d003      	beq.n	8015548 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	2201      	movs	r2, #1
 8015544:	735a      	strb	r2, [r3, #13]
 8015546:	e34b      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8015548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801554c:	49ad      	ldr	r1, [pc, #692]	; (8015804 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 801554e:	4618      	mov	r0, r3
 8015550:	f7f7 fe95 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8015554:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015558:	f107 0308 	add.w	r3, r7, #8
 801555c:	4611      	mov	r1, r2
 801555e:	4618      	mov	r0, r3
 8015560:	f7f8 fa51 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 8015564:	4603      	mov	r3, r0
 8015566:	461d      	mov	r5, r3
 8015568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801556c:	4618      	mov	r0, r3
 801556e:	f7f8 fa3e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8015572:	2d00      	cmp	r5, #0
 8015574:	d003      	beq.n	801557e <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	2201      	movs	r2, #1
 801557a:	739a      	strb	r2, [r3, #14]
 801557c:	e330      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 801557e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015582:	49a1      	ldr	r1, [pc, #644]	; (8015808 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 8015584:	4618      	mov	r0, r3
 8015586:	f7f7 fe7a 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801558a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801558e:	f107 0308 	add.w	r3, r7, #8
 8015592:	4611      	mov	r1, r2
 8015594:	4618      	mov	r0, r3
 8015596:	f7f8 fa36 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801559a:	4603      	mov	r3, r0
 801559c:	461d      	mov	r5, r3
 801559e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80155a2:	4618      	mov	r0, r3
 80155a4:	f7f8 fa23 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80155a8:	2d00      	cmp	r5, #0
 80155aa:	d003      	beq.n	80155b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	2201      	movs	r2, #1
 80155b0:	73da      	strb	r2, [r3, #15]
 80155b2:	e315      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 80155b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80155b8:	4994      	ldr	r1, [pc, #592]	; (801580c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 80155ba:	4618      	mov	r0, r3
 80155bc:	f7f7 fe5f 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80155c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80155c4:	f107 0308 	add.w	r3, r7, #8
 80155c8:	4611      	mov	r1, r2
 80155ca:	4618      	mov	r0, r3
 80155cc:	f7f8 fa1b 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 80155d0:	4603      	mov	r3, r0
 80155d2:	461d      	mov	r5, r3
 80155d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80155d8:	4618      	mov	r0, r3
 80155da:	f7f8 fa08 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80155de:	2d00      	cmp	r5, #0
 80155e0:	d003      	beq.n	80155ea <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	2201      	movs	r2, #1
 80155e6:	741a      	strb	r2, [r3, #16]
 80155e8:	e2fa      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 80155ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80155ee:	4988      	ldr	r1, [pc, #544]	; (8015810 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 80155f0:	4618      	mov	r0, r3
 80155f2:	f7f7 fe44 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80155f6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80155fa:	f107 0308 	add.w	r3, r7, #8
 80155fe:	4611      	mov	r1, r2
 8015600:	4618      	mov	r0, r3
 8015602:	f7f8 fa00 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 8015606:	4603      	mov	r3, r0
 8015608:	461d      	mov	r5, r3
 801560a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801560e:	4618      	mov	r0, r3
 8015610:	f7f8 f9ed 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8015614:	2d00      	cmp	r5, #0
 8015616:	d003      	beq.n	8015620 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	2201      	movs	r2, #1
 801561c:	755a      	strb	r2, [r3, #21]
 801561e:	e2df      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 8015620:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015624:	497b      	ldr	r1, [pc, #492]	; (8015814 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 8015626:	4618      	mov	r0, r3
 8015628:	f7f7 fe29 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801562c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8015630:	f107 0308 	add.w	r3, r7, #8
 8015634:	4611      	mov	r1, r2
 8015636:	4618      	mov	r0, r3
 8015638:	f7f8 f9e5 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801563c:	4603      	mov	r3, r0
 801563e:	461d      	mov	r5, r3
 8015640:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015644:	4618      	mov	r0, r3
 8015646:	f7f8 f9d2 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801564a:	2d00      	cmp	r5, #0
 801564c:	d003      	beq.n	8015656 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	2201      	movs	r2, #1
 8015652:	745a      	strb	r2, [r3, #17]
 8015654:	e2c4      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 8015656:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801565a:	496f      	ldr	r1, [pc, #444]	; (8015818 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 801565c:	4618      	mov	r0, r3
 801565e:	f7f7 fe0e 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8015662:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8015666:	f107 0308 	add.w	r3, r7, #8
 801566a:	4611      	mov	r1, r2
 801566c:	4618      	mov	r0, r3
 801566e:	f7f8 f9ca 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 8015672:	4603      	mov	r3, r0
 8015674:	461d      	mov	r5, r3
 8015676:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801567a:	4618      	mov	r0, r3
 801567c:	f7f8 f9b7 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8015680:	2d00      	cmp	r5, #0
 8015682:	d003      	beq.n	801568c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	2201      	movs	r2, #1
 8015688:	749a      	strb	r2, [r3, #18]
 801568a:	e2a9      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 801568c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015690:	4962      	ldr	r1, [pc, #392]	; (801581c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 8015692:	4618      	mov	r0, r3
 8015694:	f7f7 fdf3 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8015698:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801569c:	f107 0308 	add.w	r3, r7, #8
 80156a0:	4611      	mov	r1, r2
 80156a2:	4618      	mov	r0, r3
 80156a4:	f7f8 f9af 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 80156a8:	4603      	mov	r3, r0
 80156aa:	461d      	mov	r5, r3
 80156ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80156b0:	4618      	mov	r0, r3
 80156b2:	f7f8 f99c 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80156b6:	2d00      	cmp	r5, #0
 80156b8:	d003      	beq.n	80156c2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	2201      	movs	r2, #1
 80156be:	74da      	strb	r2, [r3, #19]
 80156c0:	e28e      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 80156c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80156c6:	4956      	ldr	r1, [pc, #344]	; (8015820 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 80156c8:	4618      	mov	r0, r3
 80156ca:	f7f7 fdd8 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80156ce:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80156d2:	f107 0308 	add.w	r3, r7, #8
 80156d6:	4611      	mov	r1, r2
 80156d8:	4618      	mov	r0, r3
 80156da:	f7f8 f994 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 80156de:	4603      	mov	r3, r0
 80156e0:	461d      	mov	r5, r3
 80156e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80156e6:	4618      	mov	r0, r3
 80156e8:	f7f8 f981 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80156ec:	2d00      	cmp	r5, #0
 80156ee:	d003      	beq.n	80156f8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	2201      	movs	r2, #1
 80156f4:	751a      	strb	r2, [r3, #20]
 80156f6:	e273      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 80156f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80156fc:	4949      	ldr	r1, [pc, #292]	; (8015824 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 80156fe:	4618      	mov	r0, r3
 8015700:	f7f7 fdbd 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8015704:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8015708:	f107 0308 	add.w	r3, r7, #8
 801570c:	4611      	mov	r1, r2
 801570e:	4618      	mov	r0, r3
 8015710:	f7f8 f979 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 8015714:	4603      	mov	r3, r0
 8015716:	461d      	mov	r5, r3
 8015718:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801571c:	4618      	mov	r0, r3
 801571e:	f7f8 f966 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8015722:	2d00      	cmp	r5, #0
 8015724:	d003      	beq.n	801572e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	2201      	movs	r2, #1
 801572a:	759a      	strb	r2, [r3, #22]
 801572c:	e258      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 801572e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015732:	493d      	ldr	r1, [pc, #244]	; (8015828 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 8015734:	4618      	mov	r0, r3
 8015736:	f7f7 fda2 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801573a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801573e:	f107 0308 	add.w	r3, r7, #8
 8015742:	4611      	mov	r1, r2
 8015744:	4618      	mov	r0, r3
 8015746:	f7f7 fe5e 	bl	800d406 <_ZNK12SimpleString10startsWithERKS_>
 801574a:	4603      	mov	r3, r0
 801574c:	461d      	mov	r5, r3
 801574e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015752:	4618      	mov	r0, r3
 8015754:	f7f8 f94b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8015758:	2d00      	cmp	r5, #0
 801575a:	d009      	beq.n	8015770 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	6859      	ldr	r1, [r3, #4]
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	689a      	ldr	r2, [r3, #8]
 8015764:	f107 0310 	add.w	r3, r7, #16
 8015768:	6878      	ldr	r0, [r7, #4]
 801576a:	f000 fb33 	bl	8015dd4 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 801576e:	e237      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 8015770:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8015774:	492d      	ldr	r1, [pc, #180]	; (801582c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 8015776:	4618      	mov	r0, r3
 8015778:	f7f7 fd81 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801577c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8015780:	f107 0308 	add.w	r3, r7, #8
 8015784:	4611      	mov	r1, r2
 8015786:	4618      	mov	r0, r3
 8015788:	f7f7 fe3d 	bl	800d406 <_ZNK12SimpleString10startsWithERKS_>
 801578c:	4603      	mov	r3, r0
 801578e:	461d      	mov	r5, r3
 8015790:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8015794:	4618      	mov	r0, r3
 8015796:	f7f8 f92a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801579a:	2d00      	cmp	r5, #0
 801579c:	d009      	beq.n	80157b2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	6859      	ldr	r1, [r3, #4]
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	689a      	ldr	r2, [r3, #8]
 80157a6:	f107 0310 	add.w	r3, r7, #16
 80157aa:	6878      	ldr	r0, [r7, #4]
 80157ac:	f000 fc40 	bl	8016030 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 80157b0:	e216      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 80157b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80157b6:	491e      	ldr	r1, [pc, #120]	; (8015830 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 80157b8:	4618      	mov	r0, r3
 80157ba:	f7f7 fd60 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80157be:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80157c2:	f107 0308 	add.w	r3, r7, #8
 80157c6:	4611      	mov	r1, r2
 80157c8:	4618      	mov	r0, r3
 80157ca:	f7f7 fe1c 	bl	800d406 <_ZNK12SimpleString10startsWithERKS_>
 80157ce:	4603      	mov	r3, r0
 80157d0:	461d      	mov	r5, r3
 80157d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80157d6:	4618      	mov	r0, r3
 80157d8:	f7f8 f909 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80157dc:	2d00      	cmp	r5, #0
 80157de:	d029      	beq.n	8015834 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	6859      	ldr	r1, [r3, #4]
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	689a      	ldr	r2, [r3, #8]
 80157e8:	f107 0310 	add.w	r3, r7, #16
 80157ec:	6878      	ldr	r0, [r7, #4]
 80157ee:	f000 fc61 	bl	80160b4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 80157f2:	4603      	mov	r3, r0
 80157f4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80157f8:	e1f2      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 80157fa:	bf00      	nop
 80157fc:	080258f8 	.word	0x080258f8
 8015800:	080258fc 	.word	0x080258fc
 8015804:	08025900 	.word	0x08025900
 8015808:	08025904 	.word	0x08025904
 801580c:	08025908 	.word	0x08025908
 8015810:	0802590c 	.word	0x0802590c
 8015814:	08025910 	.word	0x08025910
 8015818:	08025914 	.word	0x08025914
 801581c:	08025918 	.word	0x08025918
 8015820:	0802591c 	.word	0x0802591c
 8015824:	08025920 	.word	0x08025920
 8015828:	08025924 	.word	0x08025924
 801582c:	08025928 	.word	0x08025928
 8015830:	0802592c 	.word	0x0802592c
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8015834:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8015838:	49b9      	ldr	r1, [pc, #740]	; (8015b20 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 801583a:	4618      	mov	r0, r3
 801583c:	f7f7 fd1f 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8015840:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8015844:	f107 0308 	add.w	r3, r7, #8
 8015848:	4611      	mov	r1, r2
 801584a:	4618      	mov	r0, r3
 801584c:	f7f7 fddb 	bl	800d406 <_ZNK12SimpleString10startsWithERKS_>
 8015850:	4603      	mov	r3, r0
 8015852:	461d      	mov	r5, r3
 8015854:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8015858:	4618      	mov	r0, r3
 801585a:	f7f8 f8c8 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801585e:	2d00      	cmp	r5, #0
 8015860:	d009      	beq.n	8015876 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	6859      	ldr	r1, [r3, #4]
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	689a      	ldr	r2, [r3, #8]
 801586a:	f107 0310 	add.w	r3, r7, #16
 801586e:	6878      	ldr	r0, [r7, #4]
 8015870:	f000 fccc 	bl	801620c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 8015874:	e1b4      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 8015876:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801587a:	49aa      	ldr	r1, [pc, #680]	; (8015b24 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 801587c:	4618      	mov	r0, r3
 801587e:	f7f7 fcfe 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8015882:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8015886:	f107 0308 	add.w	r3, r7, #8
 801588a:	4611      	mov	r1, r2
 801588c:	4618      	mov	r0, r3
 801588e:	f7f7 fdba 	bl	800d406 <_ZNK12SimpleString10startsWithERKS_>
 8015892:	4603      	mov	r3, r0
 8015894:	461d      	mov	r5, r3
 8015896:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801589a:	4618      	mov	r0, r3
 801589c:	f7f8 f8a7 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80158a0:	2d00      	cmp	r5, #0
 80158a2:	d009      	beq.n	80158b8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	6859      	ldr	r1, [r3, #4]
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	689a      	ldr	r2, [r3, #8]
 80158ac:	f107 0310 	add.w	r3, r7, #16
 80158b0:	6878      	ldr	r0, [r7, #4]
 80158b2:	f000 fcf1 	bl	8016298 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 80158b6:	e193      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 80158b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80158bc:	499a      	ldr	r1, [pc, #616]	; (8015b28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 80158be:	4618      	mov	r0, r3
 80158c0:	f7f7 fcdd 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80158c4:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80158c8:	f107 0308 	add.w	r3, r7, #8
 80158cc:	4611      	mov	r1, r2
 80158ce:	4618      	mov	r0, r3
 80158d0:	f7f7 fd99 	bl	800d406 <_ZNK12SimpleString10startsWithERKS_>
 80158d4:	4603      	mov	r3, r0
 80158d6:	461d      	mov	r5, r3
 80158d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80158dc:	4618      	mov	r0, r3
 80158de:	f7f8 f886 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80158e2:	2d00      	cmp	r5, #0
 80158e4:	d009      	beq.n	80158fa <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	6859      	ldr	r1, [r3, #4]
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	689a      	ldr	r2, [r3, #8]
 80158ee:	f107 0310 	add.w	r3, r7, #16
 80158f2:	6878      	ldr	r0, [r7, #4]
 80158f4:	f000 fd16 	bl	8016324 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 80158f8:	e172      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 80158fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80158fe:	498b      	ldr	r1, [pc, #556]	; (8015b2c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 8015900:	4618      	mov	r0, r3
 8015902:	f7f7 fcbc 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8015906:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801590a:	f107 0308 	add.w	r3, r7, #8
 801590e:	4611      	mov	r1, r2
 8015910:	4618      	mov	r0, r3
 8015912:	f7f7 fd78 	bl	800d406 <_ZNK12SimpleString10startsWithERKS_>
 8015916:	4603      	mov	r3, r0
 8015918:	461d      	mov	r5, r3
 801591a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801591e:	4618      	mov	r0, r3
 8015920:	f7f8 f865 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8015924:	2d00      	cmp	r5, #0
 8015926:	d009      	beq.n	801593c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	6859      	ldr	r1, [r3, #4]
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	689a      	ldr	r2, [r3, #8]
 8015930:	f107 0310 	add.w	r3, r7, #16
 8015934:	6878      	ldr	r0, [r7, #4]
 8015936:	f000 fd3d 	bl	80163b4 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 801593a:	e151      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 801593c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8015940:	497b      	ldr	r1, [pc, #492]	; (8015b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 8015942:	4618      	mov	r0, r3
 8015944:	f7f7 fc9b 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8015948:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 801594c:	f107 0308 	add.w	r3, r7, #8
 8015950:	4611      	mov	r1, r2
 8015952:	4618      	mov	r0, r3
 8015954:	f7f7 fd57 	bl	800d406 <_ZNK12SimpleString10startsWithERKS_>
 8015958:	4603      	mov	r3, r0
 801595a:	461d      	mov	r5, r3
 801595c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8015960:	4618      	mov	r0, r3
 8015962:	f7f8 f844 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8015966:	2d00      	cmp	r5, #0
 8015968:	d009      	beq.n	801597e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	6859      	ldr	r1, [r3, #4]
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	689a      	ldr	r2, [r3, #8]
 8015972:	f107 0310 	add.w	r3, r7, #16
 8015976:	6878      	ldr	r0, [r7, #4]
 8015978:	f000 fd5e 	bl	8016438 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 801597c:	e130      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 801597e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015982:	496c      	ldr	r1, [pc, #432]	; (8015b34 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 8015984:	4618      	mov	r0, r3
 8015986:	f7f7 fc7a 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801598a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801598e:	f107 0308 	add.w	r3, r7, #8
 8015992:	4611      	mov	r1, r2
 8015994:	4618      	mov	r0, r3
 8015996:	f7f7 fd36 	bl	800d406 <_ZNK12SimpleString10startsWithERKS_>
 801599a:	4603      	mov	r3, r0
 801599c:	461d      	mov	r5, r3
 801599e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80159a2:	4618      	mov	r0, r3
 80159a4:	f7f8 f823 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80159a8:	2d00      	cmp	r5, #0
 80159aa:	d009      	beq.n	80159c0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	6859      	ldr	r1, [r3, #4]
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	689a      	ldr	r2, [r3, #8]
 80159b4:	f107 0310 	add.w	r3, r7, #16
 80159b8:	6878      	ldr	r0, [r7, #4]
 80159ba:	f000 fd83 	bl	80164c4 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 80159be:	e10f      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 80159c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80159c4:	495c      	ldr	r1, [pc, #368]	; (8015b38 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 80159c6:	4618      	mov	r0, r3
 80159c8:	f7f7 fc59 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80159cc:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80159d0:	f107 0308 	add.w	r3, r7, #8
 80159d4:	4611      	mov	r1, r2
 80159d6:	4618      	mov	r0, r3
 80159d8:	f7f7 fd15 	bl	800d406 <_ZNK12SimpleString10startsWithERKS_>
 80159dc:	4603      	mov	r3, r0
 80159de:	461d      	mov	r5, r3
 80159e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80159e4:	4618      	mov	r0, r3
 80159e6:	f7f8 f802 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80159ea:	2d00      	cmp	r5, #0
 80159ec:	d009      	beq.n	8015a02 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	6859      	ldr	r1, [r3, #4]
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	689a      	ldr	r2, [r3, #8]
 80159f6:	f107 0310 	add.w	r3, r7, #16
 80159fa:	6878      	ldr	r0, [r7, #4]
 80159fc:	f000 fda8 	bl	8016550 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 8015a00:	e0ee      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 8015a02:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8015a06:	494d      	ldr	r1, [pc, #308]	; (8015b3c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f7f7 fc38 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8015a0e:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8015a12:	f107 0308 	add.w	r3, r7, #8
 8015a16:	4611      	mov	r1, r2
 8015a18:	4618      	mov	r0, r3
 8015a1a:	f7f7 fcf4 	bl	800d406 <_ZNK12SimpleString10startsWithERKS_>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	461d      	mov	r5, r3
 8015a22:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8015a26:	4618      	mov	r0, r3
 8015a28:	f7f7 ffe1 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8015a2c:	2d00      	cmp	r5, #0
 8015a2e:	d00c      	beq.n	8015a4a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	6859      	ldr	r1, [r3, #4]
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	689a      	ldr	r2, [r3, #8]
 8015a38:	f107 0310 	add.w	r3, r7, #16
 8015a3c:	6878      	ldr	r0, [r7, #4]
 8015a3e:	f000 fa29 	bl	8015e94 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 8015a42:	4603      	mov	r3, r0
 8015a44:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8015a48:	e0ca      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 8015a4a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8015a4e:	493c      	ldr	r1, [pc, #240]	; (8015b40 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8015a50:	4618      	mov	r0, r3
 8015a52:	f7f7 fc14 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8015a56:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8015a5a:	f107 0308 	add.w	r3, r7, #8
 8015a5e:	4611      	mov	r1, r2
 8015a60:	4618      	mov	r0, r3
 8015a62:	f7f7 fcd0 	bl	800d406 <_ZNK12SimpleString10startsWithERKS_>
 8015a66:	4603      	mov	r3, r0
 8015a68:	461d      	mov	r5, r3
 8015a6a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8015a6e:	4618      	mov	r0, r3
 8015a70:	f7f7 ffbd 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8015a74:	2d00      	cmp	r5, #0
 8015a76:	d00b      	beq.n	8015a90 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	6859      	ldr	r1, [r3, #4]
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	689a      	ldr	r2, [r3, #8]
 8015a80:	f107 0310 	add.w	r3, r7, #16
 8015a84:	482e      	ldr	r0, [pc, #184]	; (8015b40 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8015a86:	9000      	str	r0, [sp, #0]
 8015a88:	6878      	ldr	r0, [r7, #4]
 8015a8a:	f000 fda9 	bl	80165e0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8015a8e:	e0a7      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 8015a90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8015a94:	492b      	ldr	r1, [pc, #172]	; (8015b44 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8015a96:	4618      	mov	r0, r3
 8015a98:	f7f7 fbf1 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8015a9c:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8015aa0:	f107 0308 	add.w	r3, r7, #8
 8015aa4:	4611      	mov	r1, r2
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	f7f7 fcad 	bl	800d406 <_ZNK12SimpleString10startsWithERKS_>
 8015aac:	4603      	mov	r3, r0
 8015aae:	461d      	mov	r5, r3
 8015ab0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f7f7 ff9a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8015aba:	2d00      	cmp	r5, #0
 8015abc:	d00b      	beq.n	8015ad6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	6859      	ldr	r1, [r3, #4]
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	689a      	ldr	r2, [r3, #8]
 8015ac6:	f107 0310 	add.w	r3, r7, #16
 8015aca:	481e      	ldr	r0, [pc, #120]	; (8015b44 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8015acc:	9000      	str	r0, [sp, #0]
 8015ace:	6878      	ldr	r0, [r7, #4]
 8015ad0:	f000 fd86 	bl	80165e0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8015ad4:	e084      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 8015ad6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8015ada:	491b      	ldr	r1, [pc, #108]	; (8015b48 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 8015adc:	4618      	mov	r0, r3
 8015ade:	f7f7 fbce 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8015ae2:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8015ae6:	f107 0308 	add.w	r3, r7, #8
 8015aea:	4611      	mov	r1, r2
 8015aec:	4618      	mov	r0, r3
 8015aee:	f7f7 fc8a 	bl	800d406 <_ZNK12SimpleString10startsWithERKS_>
 8015af2:	4603      	mov	r3, r0
 8015af4:	461d      	mov	r5, r3
 8015af6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8015afa:	4618      	mov	r0, r3
 8015afc:	f7f7 ff77 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8015b00:	2d00      	cmp	r5, #0
 8015b02:	d023      	beq.n	8015b4c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	6859      	ldr	r1, [r3, #4]
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	689a      	ldr	r2, [r3, #8]
 8015b0c:	f107 0310 	add.w	r3, r7, #16
 8015b10:	6878      	ldr	r0, [r7, #4]
 8015b12:	f000 fe3b 	bl	801678c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 8015b16:	4603      	mov	r3, r0
 8015b18:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8015b1c:	e060      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8015b1e:	bf00      	nop
 8015b20:	08025930 	.word	0x08025930
 8015b24:	08025934 	.word	0x08025934
 8015b28:	08025938 	.word	0x08025938
 8015b2c:	08025940 	.word	0x08025940
 8015b30:	08025944 	.word	0x08025944
 8015b34:	08025948 	.word	0x08025948
 8015b38:	0802594c 	.word	0x0802594c
 8015b3c:	08025954 	.word	0x08025954
 8015b40:	08025958 	.word	0x08025958
 8015b44:	08025960 	.word	0x08025960
 8015b48:	08025970 	.word	0x08025970
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 8015b4c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8015b50:	4930      	ldr	r1, [pc, #192]	; (8015c14 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 8015b52:	4618      	mov	r0, r3
 8015b54:	f7f7 fb93 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8015b58:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8015b5c:	f107 0308 	add.w	r3, r7, #8
 8015b60:	4611      	mov	r1, r2
 8015b62:	4618      	mov	r0, r3
 8015b64:	f7f7 fc4f 	bl	800d406 <_ZNK12SimpleString10startsWithERKS_>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	461d      	mov	r5, r3
 8015b6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8015b70:	4618      	mov	r0, r3
 8015b72:	f7f7 ff3c 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8015b76:	2d00      	cmp	r5, #0
 8015b78:	d00e      	beq.n	8015b98 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 8015b7a:	683b      	ldr	r3, [r7, #0]
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	331c      	adds	r3, #28
 8015b80:	681d      	ldr	r5, [r3, #0]
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	6859      	ldr	r1, [r3, #4]
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	689a      	ldr	r2, [r3, #8]
 8015b8a:	693b      	ldr	r3, [r7, #16]
 8015b8c:	6838      	ldr	r0, [r7, #0]
 8015b8e:	47a8      	blx	r5
 8015b90:	4603      	mov	r3, r0
 8015b92:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8015b96:	e023      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 8015b98:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8015b9c:	491e      	ldr	r1, [pc, #120]	; (8015c18 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	f7f7 fb6d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8015ba4:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8015ba8:	f107 0308 	add.w	r3, r7, #8
 8015bac:	4611      	mov	r1, r2
 8015bae:	4618      	mov	r0, r3
 8015bb0:	f7f7 fc29 	bl	800d406 <_ZNK12SimpleString10startsWithERKS_>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	461d      	mov	r5, r3
 8015bb8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	f7f7 ff16 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8015bc2:	2d00      	cmp	r5, #0
 8015bc4:	d009      	beq.n	8015bda <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	6859      	ldr	r1, [r3, #4]
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	689a      	ldr	r2, [r3, #8]
 8015bce:	f107 0310 	add.w	r3, r7, #16
 8015bd2:	6878      	ldr	r0, [r7, #4]
 8015bd4:	f000 fd98 	bl	8016708 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 8015bd8:	e002      	b.n	8015be0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 8015bda:	2300      	movs	r3, #0
 8015bdc:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 8015be0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d102      	bne.n	8015bee <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 8015be8:	2400      	movs	r4, #0
 8015bea:	2500      	movs	r5, #0
 8015bec:	e000      	b.n	8015bf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 8015bee:	2501      	movs	r5, #1
 8015bf0:	f107 0308 	add.w	r3, r7, #8
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	f7f7 fefa 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8015bfa:	2d01      	cmp	r5, #1
 8015bfc:	d104      	bne.n	8015c08 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 8015bfe:	693b      	ldr	r3, [r7, #16]
 8015c00:	3301      	adds	r3, #1
 8015c02:	613b      	str	r3, [r7, #16]
 8015c04:	e455      	b.n	80154b2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 8015c06:	2401      	movs	r4, #1
 8015c08:	4623      	mov	r3, r4
}
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	37f0      	adds	r7, #240	; 0xf0
 8015c0e:	46bd      	mov	sp, r7
 8015c10:	bdb0      	pop	{r4, r5, r7, pc}
 8015c12:	bf00      	nop
 8015c14:	08025908 	.word	0x08025908
 8015c18:	08025974 	.word	0x08025974

08015c1c <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 8015c1c:	b480      	push	{r7}
 8015c1e:	b083      	sub	sp, #12
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 8015c24:	4b03      	ldr	r3, [pc, #12]	; (8015c34 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 8015c26:	4618      	mov	r0, r3
 8015c28:	370c      	adds	r7, #12
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c30:	4770      	bx	lr
 8015c32:	bf00      	nop
 8015c34:	08025978 	.word	0x08025978

08015c38 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 8015c38:	b480      	push	{r7}
 8015c3a:	b083      	sub	sp, #12
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 8015c40:	4b03      	ldr	r3, [pc, #12]	; (8015c50 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 8015c42:	4618      	mov	r0, r3
 8015c44:	370c      	adds	r7, #12
 8015c46:	46bd      	mov	sp, r7
 8015c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c4c:	4770      	bx	lr
 8015c4e:	bf00      	nop
 8015c50:	08025aa8 	.word	0x08025aa8

08015c54 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8015c54:	b480      	push	{r7}
 8015c56:	b083      	sub	sp, #12
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
    return needHelp_;
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	7b1b      	ldrb	r3, [r3, #12]
}
 8015c60:	4618      	mov	r0, r3
 8015c62:	370c      	adds	r7, #12
 8015c64:	46bd      	mov	sp, r7
 8015c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6a:	4770      	bx	lr

08015c6c <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 8015c6c:	b480      	push	{r7}
 8015c6e:	b083      	sub	sp, #12
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]
    return verbose_;
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	7b5b      	ldrb	r3, [r3, #13]
}
 8015c78:	4618      	mov	r0, r3
 8015c7a:	370c      	adds	r7, #12
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c82:	4770      	bx	lr

08015c84 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 8015c84:	b480      	push	{r7}
 8015c86:	b083      	sub	sp, #12
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	7b9b      	ldrb	r3, [r3, #14]
}
 8015c90:	4618      	mov	r0, r3
 8015c92:	370c      	adds	r7, #12
 8015c94:	46bd      	mov	sp, r7
 8015c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9a:	4770      	bx	lr

08015c9c <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 8015c9c:	b480      	push	{r7}
 8015c9e:	b083      	sub	sp, #12
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
    return color_;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	7bdb      	ldrb	r3, [r3, #15]
}
 8015ca8:	4618      	mov	r0, r3
 8015caa:	370c      	adds	r7, #12
 8015cac:	46bd      	mov	sp, r7
 8015cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb2:	4770      	bx	lr

08015cb4 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 8015cb4:	b480      	push	{r7}
 8015cb6:	b083      	sub	sp, #12
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	7c5b      	ldrb	r3, [r3, #17]
}
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	370c      	adds	r7, #12
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cca:	4770      	bx	lr

08015ccc <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 8015ccc:	b480      	push	{r7}
 8015cce:	b083      	sub	sp, #12
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	7c9b      	ldrb	r3, [r3, #18]
}
 8015cd8:	4618      	mov	r0, r3
 8015cda:	370c      	adds	r7, #12
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce2:	4770      	bx	lr

08015ce4 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 8015ce4:	b480      	push	{r7}
 8015ce6:	b083      	sub	sp, #12
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	7cdb      	ldrb	r3, [r3, #19]
}
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	370c      	adds	r7, #12
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cfa:	4770      	bx	lr

08015cfc <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 8015cfc:	b480      	push	{r7}
 8015cfe:	b083      	sub	sp, #12
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	7d1b      	ldrb	r3, [r3, #20]
}
 8015d08:	4618      	mov	r0, r3
 8015d0a:	370c      	adds	r7, #12
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d12:	4770      	bx	lr

08015d14 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8015d14:	b480      	push	{r7}
 8015d16:	b083      	sub	sp, #12
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	7c1b      	ldrb	r3, [r3, #16]
}
 8015d20:	4618      	mov	r0, r3
 8015d22:	370c      	adds	r7, #12
 8015d24:	46bd      	mov	sp, r7
 8015d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2a:	4770      	bx	lr

08015d2c <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8015d2c:	b480      	push	{r7}
 8015d2e:	b083      	sub	sp, #12
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	6078      	str	r0, [r7, #4]
    return repeat_;
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	69db      	ldr	r3, [r3, #28]
}
 8015d38:	4618      	mov	r0, r3
 8015d3a:	370c      	adds	r7, #12
 8015d3c:	46bd      	mov	sp, r7
 8015d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d42:	4770      	bx	lr

08015d44 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8015d44:	b480      	push	{r7}
 8015d46:	b083      	sub	sp, #12
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
    return reversing_;
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	7d5b      	ldrb	r3, [r3, #21]
}
 8015d50:	4618      	mov	r0, r3
 8015d52:	370c      	adds	r7, #12
 8015d54:	46bd      	mov	sp, r7
 8015d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d5a:	4770      	bx	lr

08015d5c <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8015d5c:	b480      	push	{r7}
 8015d5e:	b083      	sub	sp, #12
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	7d9b      	ldrb	r3, [r3, #22]
}
 8015d68:	4618      	mov	r0, r3
 8015d6a:	370c      	adds	r7, #12
 8015d6c:	46bd      	mov	sp, r7
 8015d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d72:	4770      	bx	lr

08015d74 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 8015d74:	b480      	push	{r7}
 8015d76:	b083      	sub	sp, #12
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
    return shuffling_;
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	7ddb      	ldrb	r3, [r3, #23]
}
 8015d80:	4618      	mov	r0, r3
 8015d82:	370c      	adds	r7, #12
 8015d84:	46bd      	mov	sp, r7
 8015d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8a:	4770      	bx	lr

08015d8c <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 8015d8c:	b480      	push	{r7}
 8015d8e:	b083      	sub	sp, #12
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	6a1b      	ldr	r3, [r3, #32]
}
 8015d98:	4618      	mov	r0, r3
 8015d9a:	370c      	adds	r7, #12
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015da2:	4770      	bx	lr

08015da4 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 8015da4:	b480      	push	{r7}
 8015da6:	b083      	sub	sp, #12
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8015db0:	4618      	mov	r0, r3
 8015db2:	370c      	adds	r7, #12
 8015db4:	46bd      	mov	sp, r7
 8015db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dba:	4770      	bx	lr

08015dbc <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 8015dbc:	b480      	push	{r7}
 8015dbe:	b083      	sub	sp, #12
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8015dc8:	4618      	mov	r0, r3
 8015dca:	370c      	adds	r7, #12
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dd2:	4770      	bx	lr

08015dd4 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b086      	sub	sp, #24
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	60f8      	str	r0, [r7, #12]
 8015ddc:	60b9      	str	r1, [r7, #8]
 8015dde:	607a      	str	r2, [r7, #4]
 8015de0:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	2200      	movs	r2, #0
 8015de6:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 8015de8:	683b      	ldr	r3, [r7, #0]
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	009b      	lsls	r3, r3, #2
 8015dee:	687a      	ldr	r2, [r7, #4]
 8015df0:	4413      	add	r3, r2
 8015df2:	681a      	ldr	r2, [r3, #0]
 8015df4:	f107 0310 	add.w	r3, r7, #16
 8015df8:	4611      	mov	r1, r2
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	f7f7 fa3f 	bl	800d27e <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 8015e00:	f107 0310 	add.w	r3, r7, #16
 8015e04:	4618      	mov	r0, r3
 8015e06:	f7f7 fdd1 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	2b02      	cmp	r3, #2
 8015e0e:	bf8c      	ite	hi
 8015e10:	2301      	movhi	r3, #1
 8015e12:	2300      	movls	r3, #0
 8015e14:	b2db      	uxtb	r3, r3
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d00e      	beq.n	8015e38 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	009b      	lsls	r3, r3, #2
 8015e20:	687a      	ldr	r2, [r7, #4]
 8015e22:	4413      	add	r3, r2
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	3302      	adds	r3, #2
 8015e28:	4618      	mov	r0, r3
 8015e2a:	f7f7 f824 	bl	800ce76 <_ZN12SimpleString4AtoIEPKc>
 8015e2e:	4603      	mov	r3, r0
 8015e30:	461a      	mov	r2, r3
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	61da      	str	r2, [r3, #28]
 8015e36:	e01c      	b.n	8015e72 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 8015e38:	683b      	ldr	r3, [r7, #0]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	3301      	adds	r3, #1
 8015e3e:	68ba      	ldr	r2, [r7, #8]
 8015e40:	429a      	cmp	r2, r3
 8015e42:	dd16      	ble.n	8015e72 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 8015e44:	683b      	ldr	r3, [r7, #0]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	3301      	adds	r3, #1
 8015e4a:	009b      	lsls	r3, r3, #2
 8015e4c:	687a      	ldr	r2, [r7, #4]
 8015e4e:	4413      	add	r3, r2
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	4618      	mov	r0, r3
 8015e54:	f7f7 f80f 	bl	800ce76 <_ZN12SimpleString4AtoIEPKc>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	461a      	mov	r2, r3
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	69db      	ldr	r3, [r3, #28]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d004      	beq.n	8015e72 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 8015e68:	683b      	ldr	r3, [r7, #0]
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	1c5a      	adds	r2, r3, #1
 8015e6e:	683b      	ldr	r3, [r7, #0]
 8015e70:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	69db      	ldr	r3, [r3, #28]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d102      	bne.n	8015e80 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	2202      	movs	r2, #2
 8015e7e:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 8015e80:	f107 0310 	add.w	r3, r7, #16
 8015e84:	4618      	mov	r0, r3
 8015e86:	f7f7 fdb2 	bl	800d9ee <_ZN12SimpleStringD1Ev>

}
 8015e8a:	bf00      	nop
 8015e8c:	3718      	adds	r7, #24
 8015e8e:	46bd      	mov	sp, r7
 8015e90:	bd80      	pop	{r7, pc}
	...

08015e94 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 8015e94:	b590      	push	{r4, r7, lr}
 8015e96:	b089      	sub	sp, #36	; 0x24
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	60f8      	str	r0, [r7, #12]
 8015e9c:	60b9      	str	r1, [r7, #8]
 8015e9e:	607a      	str	r2, [r7, #4]
 8015ea0:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	2201      	movs	r2, #1
 8015ea6:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 8015ea8:	4b34      	ldr	r3, [pc, #208]	; (8015f7c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	4798      	blx	r3
 8015eae:	4603      	mov	r3, r0
 8015eb0:	461a      	mov	r2, r3
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	6a1b      	ldr	r3, [r3, #32]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d104      	bne.n	8015ec8 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	6a1b      	ldr	r3, [r3, #32]
 8015ec2:	1c5a      	adds	r2, r3, #1
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 8015ec8:	683b      	ldr	r3, [r7, #0]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	009b      	lsls	r3, r3, #2
 8015ece:	687a      	ldr	r2, [r7, #4]
 8015ed0:	4413      	add	r3, r2
 8015ed2:	681a      	ldr	r2, [r3, #0]
 8015ed4:	f107 0314 	add.w	r3, r7, #20
 8015ed8:	4611      	mov	r1, r2
 8015eda:	4618      	mov	r0, r3
 8015edc:	f7f7 f9cf 	bl	800d27e <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 8015ee0:	f107 0314 	add.w	r3, r7, #20
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	f7f7 fd61 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 8015eea:	4603      	mov	r3, r0
 8015eec:	2b02      	cmp	r3, #2
 8015eee:	bf8c      	ite	hi
 8015ef0:	2301      	movhi	r3, #1
 8015ef2:	2300      	movls	r3, #0
 8015ef4:	b2db      	uxtb	r3, r3
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d010      	beq.n	8015f1c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	2201      	movs	r2, #1
 8015efe:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 8015f00:	683b      	ldr	r3, [r7, #0]
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	009b      	lsls	r3, r3, #2
 8015f06:	687a      	ldr	r2, [r7, #4]
 8015f08:	4413      	add	r3, r2
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	3302      	adds	r3, #2
 8015f0e:	4618      	mov	r0, r3
 8015f10:	f7f6 ff78 	bl	800ce04 <_ZN12SimpleString4AtoUEPKc>
 8015f14:	4602      	mov	r2, r0
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	621a      	str	r2, [r3, #32]
 8015f1a:	e01e      	b.n	8015f5a <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 8015f1c:	683b      	ldr	r3, [r7, #0]
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	3301      	adds	r3, #1
 8015f22:	68ba      	ldr	r2, [r7, #8]
 8015f24:	429a      	cmp	r2, r3
 8015f26:	dd18      	ble.n	8015f5a <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	3301      	adds	r3, #1
 8015f2e:	009b      	lsls	r3, r3, #2
 8015f30:	687a      	ldr	r2, [r7, #4]
 8015f32:	4413      	add	r3, r2
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	4618      	mov	r0, r3
 8015f38:	f7f6 ff64 	bl	800ce04 <_ZN12SimpleString4AtoUEPKc>
 8015f3c:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 8015f3e:	69fb      	ldr	r3, [r7, #28]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d00a      	beq.n	8015f5a <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	2201      	movs	r2, #1
 8015f48:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	69fa      	ldr	r2, [r7, #28]
 8015f4e:	621a      	str	r2, [r3, #32]
            i++;
 8015f50:	683b      	ldr	r3, [r7, #0]
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	1c5a      	adds	r2, r3, #1
 8015f56:	683b      	ldr	r3, [r7, #0]
 8015f58:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	6a1b      	ldr	r3, [r3, #32]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	bf14      	ite	ne
 8015f62:	2301      	movne	r3, #1
 8015f64:	2300      	moveq	r3, #0
 8015f66:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 8015f68:	f107 0314 	add.w	r3, r7, #20
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	f7f7 fd3e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 8015f72:	4623      	mov	r3, r4
}
 8015f74:	4618      	mov	r0, r3
 8015f76:	3724      	adds	r7, #36	; 0x24
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd90      	pop	{r4, r7, pc}
 8015f7c:	200000a8 	.word	0x200000a8

08015f80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 8015f80:	b580      	push	{r7, lr}
 8015f82:	b088      	sub	sp, #32
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	60f8      	str	r0, [r7, #12]
 8015f88:	60b9      	str	r1, [r7, #8]
 8015f8a:	607a      	str	r2, [r7, #4]
 8015f8c:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 8015f8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015f90:	f7f7 fd0c 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 8015f94:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 8015f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	009b      	lsls	r3, r3, #2
 8015f9c:	683a      	ldr	r2, [r7, #0]
 8015f9e:	4413      	add	r3, r2
 8015fa0:	681a      	ldr	r2, [r3, #0]
 8015fa2:	f107 0314 	add.w	r3, r7, #20
 8015fa6:	4611      	mov	r1, r2
 8015fa8:	4618      	mov	r0, r3
 8015faa:	f7f7 f968 	bl	800d27e <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 8015fae:	f107 0314 	add.w	r3, r7, #20
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	f7f7 fcfa 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 8015fb8:	4602      	mov	r2, r0
 8015fba:	69fb      	ldr	r3, [r7, #28]
 8015fbc:	4293      	cmp	r3, r2
 8015fbe:	bf34      	ite	cc
 8015fc0:	2301      	movcc	r3, #1
 8015fc2:	2300      	movcs	r3, #0
 8015fc4:	b2db      	uxtb	r3, r3
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d00c      	beq.n	8015fe4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 8015fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	009b      	lsls	r3, r3, #2
 8015fd0:	683a      	ldr	r2, [r7, #0]
 8015fd2:	4413      	add	r3, r2
 8015fd4:	681a      	ldr	r2, [r3, #0]
 8015fd6:	69fb      	ldr	r3, [r7, #28]
 8015fd8:	4413      	add	r3, r2
 8015fda:	4619      	mov	r1, r3
 8015fdc:	68f8      	ldr	r0, [r7, #12]
 8015fde:	f7f7 f94e 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8015fe2:	e019      	b.n	8016018 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 8015fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	3301      	adds	r3, #1
 8015fea:	687a      	ldr	r2, [r7, #4]
 8015fec:	429a      	cmp	r2, r3
 8015fee:	dd0f      	ble.n	8016010 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 8015ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	1c5a      	adds	r2, r3, #1
 8015ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ff8:	601a      	str	r2, [r3, #0]
 8015ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	009b      	lsls	r3, r3, #2
 8016000:	683a      	ldr	r2, [r7, #0]
 8016002:	4413      	add	r3, r2
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	4619      	mov	r1, r3
 8016008:	68f8      	ldr	r0, [r7, #12]
 801600a:	f7f7 f938 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801600e:	e003      	b.n	8016018 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 8016010:	4906      	ldr	r1, [pc, #24]	; (801602c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 8016012:	68f8      	ldr	r0, [r7, #12]
 8016014:	f7f7 f933 	bl	800d27e <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8016018:	f107 0314 	add.w	r3, r7, #20
 801601c:	4618      	mov	r0, r3
 801601e:	f7f7 fce6 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 8016022:	68f8      	ldr	r0, [r7, #12]
 8016024:	3720      	adds	r7, #32
 8016026:	46bd      	mov	sp, r7
 8016028:	bd80      	pop	{r7, pc}
 801602a:	bf00      	nop
 801602c:	080258f4 	.word	0x080258f4

08016030 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8016030:	b5b0      	push	{r4, r5, r7, lr}
 8016032:	b08c      	sub	sp, #48	; 0x30
 8016034:	af02      	add	r7, sp, #8
 8016036:	60f8      	str	r0, [r7, #12]
 8016038:	60b9      	str	r1, [r7, #8]
 801603a:	607a      	str	r2, [r7, #4]
 801603c:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 801603e:	f107 031c 	add.w	r3, r7, #28
 8016042:	491a      	ldr	r1, [pc, #104]	; (80160ac <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8016044:	4618      	mov	r0, r3
 8016046:	f7f7 f91a 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801604a:	f107 0014 	add.w	r0, r7, #20
 801604e:	f107 031c 	add.w	r3, r7, #28
 8016052:	9301      	str	r3, [sp, #4]
 8016054:	683b      	ldr	r3, [r7, #0]
 8016056:	9300      	str	r3, [sp, #0]
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	68ba      	ldr	r2, [r7, #8]
 801605c:	68f9      	ldr	r1, [r7, #12]
 801605e:	f7ff ff8f 	bl	8015f80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016062:	f107 0514 	add.w	r5, r7, #20
 8016066:	f44f 7289 	mov.w	r2, #274	; 0x112
 801606a:	4911      	ldr	r1, [pc, #68]	; (80160b0 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 801606c:	2010      	movs	r0, #16
 801606e:	f7f4 fd43 	bl	800aaf8 <_ZnwjPKci>
 8016072:	4604      	mov	r4, r0
 8016074:	4629      	mov	r1, r5
 8016076:	4620      	mov	r0, r4
 8016078:	f009 ff40 	bl	801fefc <_ZN10TestFilterC1ERK12SimpleString>
 801607c:	627c      	str	r4, [r7, #36]	; 0x24
 801607e:	f107 0314 	add.w	r3, r7, #20
 8016082:	4618      	mov	r0, r3
 8016084:	f7f7 fcb3 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8016088:	f107 031c 	add.w	r3, r7, #28
 801608c:	4618      	mov	r0, r3
 801608e:	f7f7 fcae 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016096:	4619      	mov	r1, r3
 8016098:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801609a:	f009 ff4f 	bl	801ff3c <_ZN10TestFilter3addEPS_>
 801609e:	4602      	mov	r2, r0
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80160a4:	bf00      	nop
 80160a6:	3728      	adds	r7, #40	; 0x28
 80160a8:	46bd      	mov	sp, r7
 80160aa:	bdb0      	pop	{r4, r5, r7, pc}
 80160ac:	08025928 	.word	0x08025928
 80160b0:	080262bc 	.word	0x080262bc

080160b4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 80160b4:	b5b0      	push	{r4, r5, r7, lr}
 80160b6:	b092      	sub	sp, #72	; 0x48
 80160b8:	af02      	add	r7, sp, #8
 80160ba:	60f8      	str	r0, [r7, #12]
 80160bc:	60b9      	str	r1, [r7, #8]
 80160be:	607a      	str	r2, [r7, #4]
 80160c0:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 80160c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80160c6:	494e      	ldr	r1, [pc, #312]	; (8016200 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 80160c8:	4618      	mov	r0, r3
 80160ca:	f7f7 f8d8 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80160ce:	f107 0020 	add.w	r0, r7, #32
 80160d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80160d6:	9301      	str	r3, [sp, #4]
 80160d8:	683b      	ldr	r3, [r7, #0]
 80160da:	9300      	str	r3, [sp, #0]
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	68ba      	ldr	r2, [r7, #8]
 80160e0:	68f9      	ldr	r1, [r7, #12]
 80160e2:	f7ff ff4d 	bl	8015f80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80160e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80160ea:	4618      	mov	r0, r3
 80160ec:	f7f7 fc7f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 80160f0:	f107 0310 	add.w	r3, r7, #16
 80160f4:	4618      	mov	r0, r3
 80160f6:	f7f8 fb8f 	bl	800e818 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 80160fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80160fe:	4941      	ldr	r1, [pc, #260]	; (8016204 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 8016100:	4618      	mov	r0, r3
 8016102:	f7f7 f8bc 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8016106:	f107 0210 	add.w	r2, r7, #16
 801610a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801610e:	f107 0320 	add.w	r3, r7, #32
 8016112:	4618      	mov	r0, r3
 8016114:	f7f7 fa1f 	bl	800d556 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8016118:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801611c:	4618      	mov	r0, r3
 801611e:	f7f7 fc66 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 8016122:	f107 0310 	add.w	r3, r7, #16
 8016126:	4618      	mov	r0, r3
 8016128:	f7f8 fc1b 	bl	800e962 <_ZNK22SimpleStringCollection4sizeEv>
 801612c:	4603      	mov	r3, r0
 801612e:	2b02      	cmp	r3, #2
 8016130:	bf14      	ite	ne
 8016132:	2301      	movne	r3, #1
 8016134:	2300      	moveq	r3, #0
 8016136:	b2db      	uxtb	r3, r3
 8016138:	2b00      	cmp	r3, #0
 801613a:	d001      	beq.n	8016140 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 801613c:	2400      	movs	r4, #0
 801613e:	e04f      	b.n	80161e0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8016140:	f107 0310 	add.w	r3, r7, #16
 8016144:	2100      	movs	r1, #0
 8016146:	4618      	mov	r0, r3
 8016148:	f7f8 fc18 	bl	800e97c <_ZN22SimpleStringCollectionixEj>
 801614c:	4604      	mov	r4, r0
 801614e:	f107 0310 	add.w	r3, r7, #16
 8016152:	2100      	movs	r1, #0
 8016154:	4618      	mov	r0, r3
 8016156:	f7f8 fc11 	bl	800e97c <_ZN22SimpleStringCollectionixEj>
 801615a:	4603      	mov	r3, r0
 801615c:	4618      	mov	r0, r3
 801615e:	f7f7 fc25 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 8016162:	4603      	mov	r3, r0
 8016164:	3b01      	subs	r3, #1
 8016166:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801616a:	2200      	movs	r2, #0
 801616c:	4621      	mov	r1, r4
 801616e:	f7f7 fd47 	bl	800dc00 <_ZNK12SimpleString9subStringEjj>
 8016172:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8016176:	f44f 728f 	mov.w	r2, #286	; 0x11e
 801617a:	4923      	ldr	r1, [pc, #140]	; (8016208 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 801617c:	2010      	movs	r0, #16
 801617e:	f7f4 fcbb 	bl	800aaf8 <_ZnwjPKci>
 8016182:	4604      	mov	r4, r0
 8016184:	4629      	mov	r1, r5
 8016186:	4620      	mov	r0, r4
 8016188:	f009 feb8 	bl	801fefc <_ZN10TestFilterC1ERK12SimpleString>
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016190:	4619      	mov	r1, r3
 8016192:	4620      	mov	r0, r4
 8016194:	f009 fed2 	bl	801ff3c <_ZN10TestFilter3addEPS_>
 8016198:	4602      	mov	r2, r0
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	625a      	str	r2, [r3, #36]	; 0x24
 801619e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80161a2:	4618      	mov	r0, r3
 80161a4:	f7f7 fc23 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 80161a8:	f107 0310 	add.w	r3, r7, #16
 80161ac:	2101      	movs	r1, #1
 80161ae:	4618      	mov	r0, r3
 80161b0:	f7f8 fbe4 	bl	800e97c <_ZN22SimpleStringCollectionixEj>
 80161b4:	4605      	mov	r5, r0
 80161b6:	f240 121f 	movw	r2, #287	; 0x11f
 80161ba:	4913      	ldr	r1, [pc, #76]	; (8016208 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 80161bc:	2010      	movs	r0, #16
 80161be:	f7f4 fc9b 	bl	800aaf8 <_ZnwjPKci>
 80161c2:	4604      	mov	r4, r0
 80161c4:	4629      	mov	r1, r5
 80161c6:	4620      	mov	r0, r4
 80161c8:	f009 fe98 	bl	801fefc <_ZN10TestFilterC1ERK12SimpleString>
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161d0:	4619      	mov	r1, r3
 80161d2:	4620      	mov	r0, r4
 80161d4:	f009 feb2 	bl	801ff3c <_ZN10TestFilter3addEPS_>
 80161d8:	4602      	mov	r2, r0
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 80161de:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 80161e0:	f107 0310 	add.w	r3, r7, #16
 80161e4:	4618      	mov	r0, r3
 80161e6:	f7f8 fb8b 	bl	800e900 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 80161ea:	f107 0320 	add.w	r3, r7, #32
 80161ee:	4618      	mov	r0, r3
 80161f0:	f7f7 fbfd 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80161f4:	4623      	mov	r3, r4
}
 80161f6:	4618      	mov	r0, r3
 80161f8:	3740      	adds	r7, #64	; 0x40
 80161fa:	46bd      	mov	sp, r7
 80161fc:	bdb0      	pop	{r4, r5, r7, pc}
 80161fe:	bf00      	nop
 8016200:	0802592c 	.word	0x0802592c
 8016204:	080262dc 	.word	0x080262dc
 8016208:	080262bc 	.word	0x080262bc

0801620c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 801620c:	b5b0      	push	{r4, r5, r7, lr}
 801620e:	b08c      	sub	sp, #48	; 0x30
 8016210:	af02      	add	r7, sp, #8
 8016212:	60f8      	str	r0, [r7, #12]
 8016214:	60b9      	str	r1, [r7, #8]
 8016216:	607a      	str	r2, [r7, #4]
 8016218:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 801621a:	f107 031c 	add.w	r3, r7, #28
 801621e:	491c      	ldr	r1, [pc, #112]	; (8016290 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8016220:	4618      	mov	r0, r3
 8016222:	f7f7 f82c 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8016226:	f107 0014 	add.w	r0, r7, #20
 801622a:	f107 031c 	add.w	r3, r7, #28
 801622e:	9301      	str	r3, [sp, #4]
 8016230:	683b      	ldr	r3, [r7, #0]
 8016232:	9300      	str	r3, [sp, #0]
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	68ba      	ldr	r2, [r7, #8]
 8016238:	68f9      	ldr	r1, [r7, #12]
 801623a:	f7ff fea1 	bl	8015f80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801623e:	f107 0514 	add.w	r5, r7, #20
 8016242:	f240 1225 	movw	r2, #293	; 0x125
 8016246:	4913      	ldr	r1, [pc, #76]	; (8016294 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8016248:	2010      	movs	r0, #16
 801624a:	f7f4 fc55 	bl	800aaf8 <_ZnwjPKci>
 801624e:	4604      	mov	r4, r0
 8016250:	4629      	mov	r1, r5
 8016252:	4620      	mov	r0, r4
 8016254:	f009 fe52 	bl	801fefc <_ZN10TestFilterC1ERK12SimpleString>
 8016258:	627c      	str	r4, [r7, #36]	; 0x24
 801625a:	f107 0314 	add.w	r3, r7, #20
 801625e:	4618      	mov	r0, r3
 8016260:	f7f7 fbc5 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8016264:	f107 031c 	add.w	r3, r7, #28
 8016268:	4618      	mov	r0, r3
 801626a:	f7f7 fbc0 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 801626e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016270:	f009 fe7f 	bl	801ff72 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016278:	4619      	mov	r1, r3
 801627a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801627c:	f009 fe5e 	bl	801ff3c <_ZN10TestFilter3addEPS_>
 8016280:	4602      	mov	r2, r0
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016286:	bf00      	nop
 8016288:	3728      	adds	r7, #40	; 0x28
 801628a:	46bd      	mov	sp, r7
 801628c:	bdb0      	pop	{r4, r5, r7, pc}
 801628e:	bf00      	nop
 8016290:	08025930 	.word	0x08025930
 8016294:	080262bc 	.word	0x080262bc

08016298 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 8016298:	b5b0      	push	{r4, r5, r7, lr}
 801629a:	b08c      	sub	sp, #48	; 0x30
 801629c:	af02      	add	r7, sp, #8
 801629e:	60f8      	str	r0, [r7, #12]
 80162a0:	60b9      	str	r1, [r7, #8]
 80162a2:	607a      	str	r2, [r7, #4]
 80162a4:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 80162a6:	f107 031c 	add.w	r3, r7, #28
 80162aa:	491c      	ldr	r1, [pc, #112]	; (801631c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 80162ac:	4618      	mov	r0, r3
 80162ae:	f7f6 ffe6 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80162b2:	f107 0014 	add.w	r0, r7, #20
 80162b6:	f107 031c 	add.w	r3, r7, #28
 80162ba:	9301      	str	r3, [sp, #4]
 80162bc:	683b      	ldr	r3, [r7, #0]
 80162be:	9300      	str	r3, [sp, #0]
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	68ba      	ldr	r2, [r7, #8]
 80162c4:	68f9      	ldr	r1, [r7, #12]
 80162c6:	f7ff fe5b 	bl	8015f80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80162ca:	f107 0514 	add.w	r5, r7, #20
 80162ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80162d2:	4913      	ldr	r1, [pc, #76]	; (8016320 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 80162d4:	2010      	movs	r0, #16
 80162d6:	f7f4 fc0f 	bl	800aaf8 <_ZnwjPKci>
 80162da:	4604      	mov	r4, r0
 80162dc:	4629      	mov	r1, r5
 80162de:	4620      	mov	r0, r4
 80162e0:	f009 fe0c 	bl	801fefc <_ZN10TestFilterC1ERK12SimpleString>
 80162e4:	627c      	str	r4, [r7, #36]	; 0x24
 80162e6:	f107 0314 	add.w	r3, r7, #20
 80162ea:	4618      	mov	r0, r3
 80162ec:	f7f7 fb7f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80162f0:	f107 031c 	add.w	r3, r7, #28
 80162f4:	4618      	mov	r0, r3
 80162f6:	f7f7 fb7a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 80162fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162fc:	f009 fe46 	bl	801ff8c <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016304:	4619      	mov	r1, r3
 8016306:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016308:	f009 fe18 	bl	801ff3c <_ZN10TestFilter3addEPS_>
 801630c:	4602      	mov	r2, r0
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016312:	bf00      	nop
 8016314:	3728      	adds	r7, #40	; 0x28
 8016316:	46bd      	mov	sp, r7
 8016318:	bdb0      	pop	{r4, r5, r7, pc}
 801631a:	bf00      	nop
 801631c:	08025934 	.word	0x08025934
 8016320:	080262bc 	.word	0x080262bc

08016324 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8016324:	b5b0      	push	{r4, r5, r7, lr}
 8016326:	b08c      	sub	sp, #48	; 0x30
 8016328:	af02      	add	r7, sp, #8
 801632a:	60f8      	str	r0, [r7, #12]
 801632c:	60b9      	str	r1, [r7, #8]
 801632e:	607a      	str	r2, [r7, #4]
 8016330:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 8016332:	f107 031c 	add.w	r3, r7, #28
 8016336:	491d      	ldr	r1, [pc, #116]	; (80163ac <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8016338:	4618      	mov	r0, r3
 801633a:	f7f6 ffa0 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801633e:	f107 0014 	add.w	r0, r7, #20
 8016342:	f107 031c 	add.w	r3, r7, #28
 8016346:	9301      	str	r3, [sp, #4]
 8016348:	683b      	ldr	r3, [r7, #0]
 801634a:	9300      	str	r3, [sp, #0]
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	68ba      	ldr	r2, [r7, #8]
 8016350:	68f9      	ldr	r1, [r7, #12]
 8016352:	f7ff fe15 	bl	8015f80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016356:	f107 0514 	add.w	r5, r7, #20
 801635a:	f240 1233 	movw	r2, #307	; 0x133
 801635e:	4914      	ldr	r1, [pc, #80]	; (80163b0 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8016360:	2010      	movs	r0, #16
 8016362:	f7f4 fbc9 	bl	800aaf8 <_ZnwjPKci>
 8016366:	4604      	mov	r4, r0
 8016368:	4629      	mov	r1, r5
 801636a:	4620      	mov	r0, r4
 801636c:	f009 fdc6 	bl	801fefc <_ZN10TestFilterC1ERK12SimpleString>
 8016370:	627c      	str	r4, [r7, #36]	; 0x24
 8016372:	f107 0314 	add.w	r3, r7, #20
 8016376:	4618      	mov	r0, r3
 8016378:	f7f7 fb39 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801637c:	f107 031c 	add.w	r3, r7, #28
 8016380:	4618      	mov	r0, r3
 8016382:	f7f7 fb34 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8016386:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016388:	f009 fdf3 	bl	801ff72 <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 801638c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801638e:	f009 fdfd 	bl	801ff8c <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016396:	4619      	mov	r1, r3
 8016398:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801639a:	f009 fdcf 	bl	801ff3c <_ZN10TestFilter3addEPS_>
 801639e:	4602      	mov	r2, r0
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80163a4:	bf00      	nop
 80163a6:	3728      	adds	r7, #40	; 0x28
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bdb0      	pop	{r4, r5, r7, pc}
 80163ac:	08025938 	.word	0x08025938
 80163b0:	080262bc 	.word	0x080262bc

080163b4 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 80163b4:	b5b0      	push	{r4, r5, r7, lr}
 80163b6:	b08c      	sub	sp, #48	; 0x30
 80163b8:	af02      	add	r7, sp, #8
 80163ba:	60f8      	str	r0, [r7, #12]
 80163bc:	60b9      	str	r1, [r7, #8]
 80163be:	607a      	str	r2, [r7, #4]
 80163c0:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 80163c2:	f107 031c 	add.w	r3, r7, #28
 80163c6:	491a      	ldr	r1, [pc, #104]	; (8016430 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 80163c8:	4618      	mov	r0, r3
 80163ca:	f7f6 ff58 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80163ce:	f107 0014 	add.w	r0, r7, #20
 80163d2:	f107 031c 	add.w	r3, r7, #28
 80163d6:	9301      	str	r3, [sp, #4]
 80163d8:	683b      	ldr	r3, [r7, #0]
 80163da:	9300      	str	r3, [sp, #0]
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	68ba      	ldr	r2, [r7, #8]
 80163e0:	68f9      	ldr	r1, [r7, #12]
 80163e2:	f7ff fdcd 	bl	8015f80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80163e6:	f107 0514 	add.w	r5, r7, #20
 80163ea:	f240 123b 	movw	r2, #315	; 0x13b
 80163ee:	4911      	ldr	r1, [pc, #68]	; (8016434 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 80163f0:	2010      	movs	r0, #16
 80163f2:	f7f4 fb81 	bl	800aaf8 <_ZnwjPKci>
 80163f6:	4604      	mov	r4, r0
 80163f8:	4629      	mov	r1, r5
 80163fa:	4620      	mov	r0, r4
 80163fc:	f009 fd7e 	bl	801fefc <_ZN10TestFilterC1ERK12SimpleString>
 8016400:	627c      	str	r4, [r7, #36]	; 0x24
 8016402:	f107 0314 	add.w	r3, r7, #20
 8016406:	4618      	mov	r0, r3
 8016408:	f7f7 faf1 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801640c:	f107 031c 	add.w	r3, r7, #28
 8016410:	4618      	mov	r0, r3
 8016412:	f7f7 faec 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801641a:	4619      	mov	r1, r3
 801641c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801641e:	f009 fd8d 	bl	801ff3c <_ZN10TestFilter3addEPS_>
 8016422:	4602      	mov	r2, r0
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	629a      	str	r2, [r3, #40]	; 0x28
}
 8016428:	bf00      	nop
 801642a:	3728      	adds	r7, #40	; 0x28
 801642c:	46bd      	mov	sp, r7
 801642e:	bdb0      	pop	{r4, r5, r7, pc}
 8016430:	08025940 	.word	0x08025940
 8016434:	080262bc 	.word	0x080262bc

08016438 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8016438:	b5b0      	push	{r4, r5, r7, lr}
 801643a:	b08c      	sub	sp, #48	; 0x30
 801643c:	af02      	add	r7, sp, #8
 801643e:	60f8      	str	r0, [r7, #12]
 8016440:	60b9      	str	r1, [r7, #8]
 8016442:	607a      	str	r2, [r7, #4]
 8016444:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8016446:	f107 031c 	add.w	r3, r7, #28
 801644a:	491c      	ldr	r1, [pc, #112]	; (80164bc <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 801644c:	4618      	mov	r0, r3
 801644e:	f7f6 ff16 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8016452:	f107 0014 	add.w	r0, r7, #20
 8016456:	f107 031c 	add.w	r3, r7, #28
 801645a:	9301      	str	r3, [sp, #4]
 801645c:	683b      	ldr	r3, [r7, #0]
 801645e:	9300      	str	r3, [sp, #0]
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	68ba      	ldr	r2, [r7, #8]
 8016464:	68f9      	ldr	r1, [r7, #12]
 8016466:	f7ff fd8b 	bl	8015f80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801646a:	f107 0514 	add.w	r5, r7, #20
 801646e:	f240 1241 	movw	r2, #321	; 0x141
 8016472:	4913      	ldr	r1, [pc, #76]	; (80164c0 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 8016474:	2010      	movs	r0, #16
 8016476:	f7f4 fb3f 	bl	800aaf8 <_ZnwjPKci>
 801647a:	4604      	mov	r4, r0
 801647c:	4629      	mov	r1, r5
 801647e:	4620      	mov	r0, r4
 8016480:	f009 fd3c 	bl	801fefc <_ZN10TestFilterC1ERK12SimpleString>
 8016484:	627c      	str	r4, [r7, #36]	; 0x24
 8016486:	f107 0314 	add.w	r3, r7, #20
 801648a:	4618      	mov	r0, r3
 801648c:	f7f7 faaf 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8016490:	f107 031c 	add.w	r3, r7, #28
 8016494:	4618      	mov	r0, r3
 8016496:	f7f7 faaa 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 801649a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801649c:	f009 fd69 	bl	801ff72 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164a4:	4619      	mov	r1, r3
 80164a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164a8:	f009 fd48 	bl	801ff3c <_ZN10TestFilter3addEPS_>
 80164ac:	4602      	mov	r2, r0
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80164b2:	bf00      	nop
 80164b4:	3728      	adds	r7, #40	; 0x28
 80164b6:	46bd      	mov	sp, r7
 80164b8:	bdb0      	pop	{r4, r5, r7, pc}
 80164ba:	bf00      	nop
 80164bc:	08025944 	.word	0x08025944
 80164c0:	080262bc 	.word	0x080262bc

080164c4 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 80164c4:	b5b0      	push	{r4, r5, r7, lr}
 80164c6:	b08c      	sub	sp, #48	; 0x30
 80164c8:	af02      	add	r7, sp, #8
 80164ca:	60f8      	str	r0, [r7, #12]
 80164cc:	60b9      	str	r1, [r7, #8]
 80164ce:	607a      	str	r2, [r7, #4]
 80164d0:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 80164d2:	f107 031c 	add.w	r3, r7, #28
 80164d6:	491c      	ldr	r1, [pc, #112]	; (8016548 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 80164d8:	4618      	mov	r0, r3
 80164da:	f7f6 fed0 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80164de:	f107 0014 	add.w	r0, r7, #20
 80164e2:	f107 031c 	add.w	r3, r7, #28
 80164e6:	9301      	str	r3, [sp, #4]
 80164e8:	683b      	ldr	r3, [r7, #0]
 80164ea:	9300      	str	r3, [sp, #0]
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	68ba      	ldr	r2, [r7, #8]
 80164f0:	68f9      	ldr	r1, [r7, #12]
 80164f2:	f7ff fd45 	bl	8015f80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80164f6:	f107 0514 	add.w	r5, r7, #20
 80164fa:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80164fe:	4913      	ldr	r1, [pc, #76]	; (801654c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 8016500:	2010      	movs	r0, #16
 8016502:	f7f4 faf9 	bl	800aaf8 <_ZnwjPKci>
 8016506:	4604      	mov	r4, r0
 8016508:	4629      	mov	r1, r5
 801650a:	4620      	mov	r0, r4
 801650c:	f009 fcf6 	bl	801fefc <_ZN10TestFilterC1ERK12SimpleString>
 8016510:	627c      	str	r4, [r7, #36]	; 0x24
 8016512:	f107 0314 	add.w	r3, r7, #20
 8016516:	4618      	mov	r0, r3
 8016518:	f7f7 fa69 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801651c:	f107 031c 	add.w	r3, r7, #28
 8016520:	4618      	mov	r0, r3
 8016522:	f7f7 fa64 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8016526:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016528:	f009 fd30 	bl	801ff8c <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016530:	4619      	mov	r1, r3
 8016532:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016534:	f009 fd02 	bl	801ff3c <_ZN10TestFilter3addEPS_>
 8016538:	4602      	mov	r2, r0
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	629a      	str	r2, [r3, #40]	; 0x28
}
 801653e:	bf00      	nop
 8016540:	3728      	adds	r7, #40	; 0x28
 8016542:	46bd      	mov	sp, r7
 8016544:	bdb0      	pop	{r4, r5, r7, pc}
 8016546:	bf00      	nop
 8016548:	08025948 	.word	0x08025948
 801654c:	080262bc 	.word	0x080262bc

08016550 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 8016550:	b5b0      	push	{r4, r5, r7, lr}
 8016552:	b08c      	sub	sp, #48	; 0x30
 8016554:	af02      	add	r7, sp, #8
 8016556:	60f8      	str	r0, [r7, #12]
 8016558:	60b9      	str	r1, [r7, #8]
 801655a:	607a      	str	r2, [r7, #4]
 801655c:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 801655e:	f107 031c 	add.w	r3, r7, #28
 8016562:	491d      	ldr	r1, [pc, #116]	; (80165d8 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8016564:	4618      	mov	r0, r3
 8016566:	f7f6 fe8a 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801656a:	f107 0014 	add.w	r0, r7, #20
 801656e:	f107 031c 	add.w	r3, r7, #28
 8016572:	9301      	str	r3, [sp, #4]
 8016574:	683b      	ldr	r3, [r7, #0]
 8016576:	9300      	str	r3, [sp, #0]
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	68ba      	ldr	r2, [r7, #8]
 801657c:	68f9      	ldr	r1, [r7, #12]
 801657e:	f7ff fcff 	bl	8015f80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016582:	f107 0514 	add.w	r5, r7, #20
 8016586:	f240 124f 	movw	r2, #335	; 0x14f
 801658a:	4914      	ldr	r1, [pc, #80]	; (80165dc <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 801658c:	2010      	movs	r0, #16
 801658e:	f7f4 fab3 	bl	800aaf8 <_ZnwjPKci>
 8016592:	4604      	mov	r4, r0
 8016594:	4629      	mov	r1, r5
 8016596:	4620      	mov	r0, r4
 8016598:	f009 fcb0 	bl	801fefc <_ZN10TestFilterC1ERK12SimpleString>
 801659c:	627c      	str	r4, [r7, #36]	; 0x24
 801659e:	f107 0314 	add.w	r3, r7, #20
 80165a2:	4618      	mov	r0, r3
 80165a4:	f7f7 fa23 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80165a8:	f107 031c 	add.w	r3, r7, #28
 80165ac:	4618      	mov	r0, r3
 80165ae:	f7f7 fa1e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 80165b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80165b4:	f009 fcea 	bl	801ff8c <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 80165b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80165ba:	f009 fcda 	bl	801ff72 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80165c2:	4619      	mov	r1, r3
 80165c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80165c6:	f009 fcb9 	bl	801ff3c <_ZN10TestFilter3addEPS_>
 80165ca:	4602      	mov	r2, r0
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80165d0:	bf00      	nop
 80165d2:	3728      	adds	r7, #40	; 0x28
 80165d4:	46bd      	mov	sp, r7
 80165d6:	bdb0      	pop	{r4, r5, r7, pc}
 80165d8:	0802594c 	.word	0x0802594c
 80165dc:	080262bc 	.word	0x080262bc

080165e0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 80165e0:	b5b0      	push	{r4, r5, r7, lr}
 80165e2:	b092      	sub	sp, #72	; 0x48
 80165e4:	af02      	add	r7, sp, #8
 80165e6:	60f8      	str	r0, [r7, #12]
 80165e8:	60b9      	str	r1, [r7, #8]
 80165ea:	607a      	str	r2, [r7, #4]
 80165ec:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 80165ee:	f107 0320 	add.w	r3, r7, #32
 80165f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80165f4:	4618      	mov	r0, r3
 80165f6:	f7f6 fe42 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80165fa:	f107 0018 	add.w	r0, r7, #24
 80165fe:	f107 0320 	add.w	r3, r7, #32
 8016602:	9301      	str	r3, [sp, #4]
 8016604:	683b      	ldr	r3, [r7, #0]
 8016606:	9300      	str	r3, [sp, #0]
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	68ba      	ldr	r2, [r7, #8]
 801660c:	68f9      	ldr	r1, [r7, #12]
 801660e:	f7ff fcb7 	bl	8015f80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016612:	f107 0320 	add.w	r3, r7, #32
 8016616:	4618      	mov	r0, r3
 8016618:	f7f7 f9e9 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 801661c:	f107 0010 	add.w	r0, r7, #16
 8016620:	f107 0118 	add.w	r1, r7, #24
 8016624:	2329      	movs	r3, #41	; 0x29
 8016626:	222c      	movs	r2, #44	; 0x2c
 8016628:	f7f7 fb92 	bl	800dd50 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 801662c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016630:	f107 0110 	add.w	r1, r7, #16
 8016634:	2202      	movs	r2, #2
 8016636:	4618      	mov	r0, r3
 8016638:	f7f7 fb2c 	bl	800dc94 <_ZNK12SimpleString9subStringEj>
 801663c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016640:	f107 0310 	add.w	r3, r7, #16
 8016644:	4611      	mov	r1, r2
 8016646:	4618      	mov	r0, r3
 8016648:	f7f6 fe85 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801664c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016650:	4618      	mov	r0, r3
 8016652:	f7f7 f9cc 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8016656:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 801665a:	492a      	ldr	r1, [pc, #168]	; (8016704 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 801665c:	2010      	movs	r0, #16
 801665e:	f7f4 fa4b 	bl	800aaf8 <_ZnwjPKci>
 8016662:	4604      	mov	r4, r0
 8016664:	f107 0310 	add.w	r3, r7, #16
 8016668:	4619      	mov	r1, r3
 801666a:	4620      	mov	r0, r4
 801666c:	f009 fc46 	bl	801fefc <_ZN10TestFilterC1ERK12SimpleString>
 8016670:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 8016672:	f107 0318 	add.w	r3, r7, #24
 8016676:	2100      	movs	r1, #0
 8016678:	4618      	mov	r0, r3
 801667a:	f7f7 fb1c 	bl	800dcb6 <_ZNK12SimpleString2atEj>
 801667e:	4603      	mov	r3, r0
 8016680:	461a      	mov	r2, r3
 8016682:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8016686:	f107 0118 	add.w	r1, r7, #24
 801668a:	232c      	movs	r3, #44	; 0x2c
 801668c:	f7f7 fb60 	bl	800dd50 <_ZNK12SimpleString17subStringFromTillEcc>
 8016690:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8016694:	f240 125b 	movw	r2, #347	; 0x15b
 8016698:	491a      	ldr	r1, [pc, #104]	; (8016704 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 801669a:	2010      	movs	r0, #16
 801669c:	f7f4 fa2c 	bl	800aaf8 <_ZnwjPKci>
 80166a0:	4604      	mov	r4, r0
 80166a2:	4629      	mov	r1, r5
 80166a4:	4620      	mov	r0, r4
 80166a6:	f009 fc29 	bl	801fefc <_ZN10TestFilterC1ERK12SimpleString>
 80166aa:	63bc      	str	r4, [r7, #56]	; 0x38
 80166ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80166b0:	4618      	mov	r0, r3
 80166b2:	f7f7 f99c 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 80166b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80166b8:	f009 fc5b 	bl	801ff72 <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 80166bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80166be:	f009 fc58 	bl	801ff72 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166c6:	4619      	mov	r1, r3
 80166c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80166ca:	f009 fc37 	bl	801ff3c <_ZN10TestFilter3addEPS_>
 80166ce:	4602      	mov	r2, r0
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166d8:	4619      	mov	r1, r3
 80166da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80166dc:	f009 fc2e 	bl	801ff3c <_ZN10TestFilter3addEPS_>
 80166e0:	4602      	mov	r2, r0
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 80166e6:	f107 0310 	add.w	r3, r7, #16
 80166ea:	4618      	mov	r0, r3
 80166ec:	f7f7 f97f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 80166f0:	f107 0318 	add.w	r3, r7, #24
 80166f4:	4618      	mov	r0, r3
 80166f6:	f7f7 f97a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 80166fa:	bf00      	nop
 80166fc:	3740      	adds	r7, #64	; 0x40
 80166fe:	46bd      	mov	sp, r7
 8016700:	bdb0      	pop	{r4, r5, r7, pc}
 8016702:	bf00      	nop
 8016704:	080262bc 	.word	0x080262bc

08016708 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8016708:	b590      	push	{r4, r7, lr}
 801670a:	b08b      	sub	sp, #44	; 0x2c
 801670c:	af02      	add	r7, sp, #8
 801670e:	60f8      	str	r0, [r7, #12]
 8016710:	60b9      	str	r1, [r7, #8]
 8016712:	607a      	str	r2, [r7, #4]
 8016714:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8016716:	f107 0318 	add.w	r3, r7, #24
 801671a:	491b      	ldr	r1, [pc, #108]	; (8016788 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 801671c:	4618      	mov	r0, r3
 801671e:	f7f6 fdae 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8016722:	f107 0010 	add.w	r0, r7, #16
 8016726:	f107 0318 	add.w	r3, r7, #24
 801672a:	9301      	str	r3, [sp, #4]
 801672c:	683b      	ldr	r3, [r7, #0]
 801672e:	9300      	str	r3, [sp, #0]
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	68ba      	ldr	r2, [r7, #8]
 8016734:	68f9      	ldr	r1, [r7, #12]
 8016736:	f7ff fc23 	bl	8015f80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801673a:	f107 0318 	add.w	r3, r7, #24
 801673e:	4618      	mov	r0, r3
 8016740:	f7f7 f955 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8016744:	f107 0310 	add.w	r3, r7, #16
 8016748:	4618      	mov	r0, r3
 801674a:	f7f7 f92f 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 801674e:	4603      	mov	r3, r0
 8016750:	2b00      	cmp	r3, #0
 8016752:	bf0c      	ite	eq
 8016754:	2301      	moveq	r3, #1
 8016756:	2300      	movne	r3, #0
 8016758:	b2db      	uxtb	r3, r3
 801675a:	2b00      	cmp	r3, #0
 801675c:	d001      	beq.n	8016762 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 801675e:	2400      	movs	r4, #0
 8016760:	e008      	b.n	8016774 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	3330      	adds	r3, #48	; 0x30
 8016766:	f107 0210 	add.w	r2, r7, #16
 801676a:	4611      	mov	r1, r2
 801676c:	4618      	mov	r0, r3
 801676e:	f7f6 fdf2 	bl	800d356 <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8016772:	2401      	movs	r4, #1
 8016774:	f107 0310 	add.w	r3, r7, #16
 8016778:	4618      	mov	r0, r3
 801677a:	f7f7 f938 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801677e:	2c01      	cmp	r4, #1
}
 8016780:	3724      	adds	r7, #36	; 0x24
 8016782:	46bd      	mov	sp, r7
 8016784:	bd90      	pop	{r4, r7, pc}
 8016786:	bf00      	nop
 8016788:	08025974 	.word	0x08025974

0801678c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 801678c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801678e:	b093      	sub	sp, #76	; 0x4c
 8016790:	af02      	add	r7, sp, #8
 8016792:	60f8      	str	r0, [r7, #12]
 8016794:	60b9      	str	r1, [r7, #8]
 8016796:	607a      	str	r2, [r7, #4]
 8016798:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 801679a:	f107 0318 	add.w	r3, r7, #24
 801679e:	4953      	ldr	r1, [pc, #332]	; (80168ec <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 80167a0:	4618      	mov	r0, r3
 80167a2:	f7f6 fd6c 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80167a6:	f107 0010 	add.w	r0, r7, #16
 80167aa:	f107 0318 	add.w	r3, r7, #24
 80167ae:	9301      	str	r3, [sp, #4]
 80167b0:	683b      	ldr	r3, [r7, #0]
 80167b2:	9300      	str	r3, [sp, #0]
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	68ba      	ldr	r2, [r7, #8]
 80167b8:	68f9      	ldr	r1, [r7, #12]
 80167ba:	f7ff fbe1 	bl	8015f80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80167be:	f107 0318 	add.w	r3, r7, #24
 80167c2:	4618      	mov	r0, r3
 80167c4:	f7f7 f913 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 80167c8:	f107 0310 	add.w	r3, r7, #16
 80167cc:	4618      	mov	r0, r3
 80167ce:	f7f7 f8ed 	bl	800d9ac <_ZNK12SimpleString4sizeEv>
 80167d2:	4603      	mov	r3, r0
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	bf0c      	ite	eq
 80167d8:	2301      	moveq	r3, #1
 80167da:	2300      	movne	r3, #0
 80167dc:	b2db      	uxtb	r3, r3
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d001      	beq.n	80167e6 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 80167e2:	2400      	movs	r4, #0
 80167e4:	e078      	b.n	80168d8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 80167e6:	2500      	movs	r5, #0
 80167e8:	f107 0320 	add.w	r3, r7, #32
 80167ec:	4940      	ldr	r1, [pc, #256]	; (80168f0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 80167ee:	4618      	mov	r0, r3
 80167f0:	f7f6 fd45 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80167f4:	2601      	movs	r6, #1
 80167f6:	f107 0220 	add.w	r2, r7, #32
 80167fa:	f107 0310 	add.w	r3, r7, #16
 80167fe:	4611      	mov	r1, r2
 8016800:	4618      	mov	r0, r3
 8016802:	f7f7 f900 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 8016806:	4603      	mov	r3, r0
 8016808:	2b00      	cmp	r3, #0
 801680a:	d111      	bne.n	8016830 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 801680c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016810:	4938      	ldr	r1, [pc, #224]	; (80168f4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8016812:	4618      	mov	r0, r3
 8016814:	f7f6 fd33 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8016818:	2501      	movs	r5, #1
 801681a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801681e:	f107 0310 	add.w	r3, r7, #16
 8016822:	4611      	mov	r1, r2
 8016824:	4618      	mov	r0, r3
 8016826:	f7f7 f8ee 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801682a:	4603      	mov	r3, r0
 801682c:	2b00      	cmp	r3, #0
 801682e:	d001      	beq.n	8016834 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 8016830:	2401      	movs	r4, #1
 8016832:	e000      	b.n	8016836 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8016834:	2400      	movs	r4, #0
 8016836:	2d00      	cmp	r5, #0
 8016838:	d004      	beq.n	8016844 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 801683a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801683e:	4618      	mov	r0, r3
 8016840:	f7f7 f8d5 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8016844:	2e00      	cmp	r6, #0
 8016846:	d004      	beq.n	8016852 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8016848:	f107 0320 	add.w	r3, r7, #32
 801684c:	4618      	mov	r0, r3
 801684e:	f7f7 f8ce 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8016852:	2c00      	cmp	r4, #0
 8016854:	d005      	beq.n	8016862 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	2200      	movs	r2, #0
 801685a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 801685e:	2401      	movs	r4, #1
 8016860:	e03a      	b.n	80168d8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 8016862:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016866:	4924      	ldr	r1, [pc, #144]	; (80168f8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8016868:	4618      	mov	r0, r3
 801686a:	f7f6 fd08 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801686e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016872:	f107 0310 	add.w	r3, r7, #16
 8016876:	4611      	mov	r1, r2
 8016878:	4618      	mov	r0, r3
 801687a:	f7f7 f8c4 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801687e:	4603      	mov	r3, r0
 8016880:	461c      	mov	r4, r3
 8016882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016886:	4618      	mov	r0, r3
 8016888:	f7f7 f8b1 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801688c:	2c00      	cmp	r4, #0
 801688e:	d005      	beq.n	801689c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	2201      	movs	r2, #1
 8016894:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8016898:	2401      	movs	r4, #1
 801689a:	e01d      	b.n	80168d8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 801689c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80168a0:	4916      	ldr	r1, [pc, #88]	; (80168fc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 80168a2:	4618      	mov	r0, r3
 80168a4:	f7f6 fceb 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80168a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80168ac:	f107 0310 	add.w	r3, r7, #16
 80168b0:	4611      	mov	r1, r2
 80168b2:	4618      	mov	r0, r3
 80168b4:	f7f7 f8a7 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 80168b8:	4603      	mov	r3, r0
 80168ba:	461c      	mov	r4, r3
 80168bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80168c0:	4618      	mov	r0, r3
 80168c2:	f7f7 f894 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80168c6:	2c00      	cmp	r4, #0
 80168c8:	d005      	beq.n	80168d6 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	2202      	movs	r2, #2
 80168ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 80168d2:	2401      	movs	r4, #1
 80168d4:	e000      	b.n	80168d8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 80168d6:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 80168d8:	f107 0310 	add.w	r3, r7, #16
 80168dc:	4618      	mov	r0, r3
 80168de:	f7f7 f886 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80168e2:	4623      	mov	r3, r4
}
 80168e4:	4618      	mov	r0, r3
 80168e6:	3744      	adds	r7, #68	; 0x44
 80168e8:	46bd      	mov	sp, r7
 80168ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168ec:	08025970 	.word	0x08025970
 80168f0:	080262e0 	.word	0x080262e0
 80168f4:	080262e8 	.word	0x080262e8
 80168f8:	080262f0 	.word	0x080262f0
 80168fc:	080262f8 	.word	0x080262f8

08016900 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8016900:	b480      	push	{r7}
 8016902:	b083      	sub	sp, #12
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801690e:	2b01      	cmp	r3, #1
 8016910:	bf0c      	ite	eq
 8016912:	2301      	moveq	r3, #1
 8016914:	2300      	movne	r3, #0
 8016916:	b2db      	uxtb	r3, r3
}
 8016918:	4618      	mov	r0, r3
 801691a:	370c      	adds	r7, #12
 801691c:	46bd      	mov	sp, r7
 801691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016922:	4770      	bx	lr

08016924 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8016924:	b480      	push	{r7}
 8016926:	b083      	sub	sp, #12
 8016928:	af00      	add	r7, sp, #0
 801692a:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016932:	2b02      	cmp	r3, #2
 8016934:	bf0c      	ite	eq
 8016936:	2301      	moveq	r3, #1
 8016938:	2300      	movne	r3, #0
 801693a:	b2db      	uxtb	r3, r3
}
 801693c:	4618      	mov	r0, r3
 801693e:	370c      	adds	r7, #12
 8016940:	46bd      	mov	sp, r7
 8016942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016946:	4770      	bx	lr

08016948 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8016948:	b480      	push	{r7}
 801694a:	b083      	sub	sp, #12
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
    return packageName_;
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	3330      	adds	r3, #48	; 0x30
}
 8016954:	4618      	mov	r0, r3
 8016956:	370c      	adds	r7, #12
 8016958:	46bd      	mov	sp, r7
 801695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801695e:	4770      	bx	lr

08016960 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8016960:	b480      	push	{r7}
 8016962:	b083      	sub	sp, #12
 8016964:	af00      	add	r7, sp, #0
 8016966:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	2200      	movs	r2, #0
 801696c:	601a      	str	r2, [r3, #0]
    {}
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	4618      	mov	r0, r3
 8016972:	370c      	adds	r7, #12
 8016974:	46bd      	mov	sp, r7
 8016976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801697a:	4770      	bx	lr

0801697c <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 801697c:	b480      	push	{r7}
 801697e:	b083      	sub	sp, #12
 8016980:	af00      	add	r7, sp, #0
 8016982:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801698a:	2200      	movs	r2, #0
 801698c:	601a      	str	r2, [r3, #0]
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016994:	3304      	adds	r3, #4
 8016996:	f640 72ff 	movw	r2, #4095	; 0xfff
 801699a:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	2200      	movs	r2, #0
 80169a0:	701a      	strb	r2, [r3, #0]
}
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	4618      	mov	r0, r3
 80169a6:	370c      	adds	r7, #12
 80169a8:	46bd      	mov	sp, r7
 80169aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ae:	4770      	bx	lr

080169b0 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 80169b0:	b480      	push	{r7}
 80169b2:	b083      	sub	sp, #12
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80169be:	2200      	movs	r2, #0
 80169c0:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	2200      	movs	r2, #0
 80169c6:	701a      	strb	r2, [r3, #0]
}
 80169c8:	bf00      	nop
 80169ca:	370c      	adds	r7, #12
 80169cc:	46bd      	mov	sp, r7
 80169ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d2:	4770      	bx	lr

080169d4 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 80169d4:	b40e      	push	{r1, r2, r3}
 80169d6:	b590      	push	{r4, r7, lr}
 80169d8:	b086      	sub	sp, #24
 80169da:	af00      	add	r7, sp, #0
 80169dc:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80169e4:	3304      	adds	r3, #4
 80169e6:	681a      	ldr	r2, [r3, #0]
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	1ad3      	subs	r3, r2, r3
 80169f2:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 80169f4:	697b      	ldr	r3, [r7, #20]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d032      	beq.n	8016a60 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 80169fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80169fe:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8016a00:	4b1b      	ldr	r3, [pc, #108]	; (8016a70 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 8016a02:	681c      	ldr	r4, [r3, #0]
 8016a04:	687a      	ldr	r2, [r7, #4]
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	18d0      	adds	r0, r2, r3
 8016a10:	697b      	ldr	r3, [r7, #20]
 8016a12:	1c59      	adds	r1, r3, #1
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a18:	47a0      	blx	r4
 8016a1a:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8016a1c:	693b      	ldr	r3, [r7, #16]
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	dd09      	ble.n	8016a36 <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016a28:	681a      	ldr	r2, [r3, #0]
 8016a2a:	693b      	ldr	r3, [r7, #16]
 8016a2c:	441a      	add	r2, r3
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016a34:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016a3c:	681a      	ldr	r2, [r3, #0]
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016a44:	3304      	adds	r3, #4
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	429a      	cmp	r2, r3
 8016a4a:	d90a      	bls.n	8016a62 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016a52:	3304      	adds	r3, #4
 8016a54:	681a      	ldr	r2, [r3, #0]
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016a5c:	601a      	str	r2, [r3, #0]
 8016a5e:	e000      	b.n	8016a62 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8016a60:	bf00      	nop
    va_end(arguments);
}
 8016a62:	3718      	adds	r7, #24
 8016a64:	46bd      	mov	sp, r7
 8016a66:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8016a6a:	b003      	add	sp, #12
 8016a6c:	4770      	bx	lr
 8016a6e:	bf00      	nop
 8016a70:	200000b0 	.word	0x200000b0

08016a74 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	b08c      	sub	sp, #48	; 0x30
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	60f8      	str	r0, [r7, #12]
 8016a7c:	60b9      	str	r1, [r7, #8]
 8016a7e:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 8016a80:	68bb      	ldr	r3, [r7, #8]
 8016a82:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8016a84:	2310      	movs	r3, #16
 8016a86:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 8016a88:	2300      	movs	r3, #0
 8016a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 8016a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	429a      	cmp	r2, r3
 8016a92:	d273      	bcs.n	8016b7c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8016a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a96:	493b      	ldr	r1, [pc, #236]	; (8016b84 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 8016a98:	68f8      	ldr	r0, [r7, #12]
 8016a9a:	f7ff ff9b 	bl	80169d4 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 8016a9e:	687a      	ldr	r2, [r7, #4]
 8016aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aa2:	1ad3      	subs	r3, r2, r3
 8016aa4:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 8016aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aa8:	2b10      	cmp	r3, #16
 8016aaa:	d901      	bls.n	8016ab0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 8016aac:	2310      	movs	r3, #16
 8016aae:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 8016ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ab2:	f1c3 0310 	rsb	r3, r3, #16
 8016ab6:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 8016ab8:	2300      	movs	r3, #0
 8016aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8016abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ac0:	429a      	cmp	r2, r3
 8016ac2:	d215      	bcs.n	8016af0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8016ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ac8:	4413      	add	r3, r2
 8016aca:	69fa      	ldr	r2, [r7, #28]
 8016acc:	4413      	add	r3, r2
 8016ace:	781b      	ldrb	r3, [r3, #0]
 8016ad0:	461a      	mov	r2, r3
 8016ad2:	492d      	ldr	r1, [pc, #180]	; (8016b88 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8016ad4:	68f8      	ldr	r0, [r7, #12]
 8016ad6:	f7ff ff7d 	bl	80169d4 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 8016ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016adc:	2b07      	cmp	r3, #7
 8016ade:	d103      	bne.n	8016ae8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 8016ae0:	492a      	ldr	r1, [pc, #168]	; (8016b8c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8016ae2:	68f8      	ldr	r0, [r7, #12]
 8016ae4:	f7ff ff76 	bl	80169d4 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8016ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016aea:	3301      	adds	r3, #1
 8016aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8016aee:	e7e5      	b.n	8016abc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 8016af0:	2300      	movs	r3, #0
 8016af2:	62bb      	str	r3, [r7, #40]	; 0x28
 8016af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016af6:	697b      	ldr	r3, [r7, #20]
 8016af8:	429a      	cmp	r2, r3
 8016afa:	d207      	bcs.n	8016b0c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8016afc:	4924      	ldr	r1, [pc, #144]	; (8016b90 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 8016afe:	68f8      	ldr	r0, [r7, #12]
 8016b00:	f7ff ff68 	bl	80169d4 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8016b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b06:	3301      	adds	r3, #1
 8016b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8016b0a:	e7f3      	b.n	8016af4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8016b0c:	697b      	ldr	r3, [r7, #20]
 8016b0e:	2b08      	cmp	r3, #8
 8016b10:	d903      	bls.n	8016b1a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 8016b12:	491e      	ldr	r1, [pc, #120]	; (8016b8c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8016b14:	68f8      	ldr	r0, [r7, #12]
 8016b16:	f7ff ff5d 	bl	80169d4 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 8016b1a:	491e      	ldr	r1, [pc, #120]	; (8016b94 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8016b1c:	68f8      	ldr	r0, [r7, #12]
 8016b1e:	f7ff ff59 	bl	80169d4 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8016b22:	2300      	movs	r3, #0
 8016b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8016b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b2a:	429a      	cmp	r2, r3
 8016b2c:	d21d      	bcs.n	8016b6a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 8016b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b32:	4413      	add	r3, r2
 8016b34:	69fa      	ldr	r2, [r7, #28]
 8016b36:	4413      	add	r3, r2
 8016b38:	781b      	ldrb	r3, [r3, #0]
 8016b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 8016b3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016b42:	2b1f      	cmp	r3, #31
 8016b44:	d903      	bls.n	8016b4e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 8016b46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016b4a:	2b7e      	cmp	r3, #126	; 0x7e
 8016b4c:	d902      	bls.n	8016b54 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 8016b4e:	232e      	movs	r3, #46	; 0x2e
 8016b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8016b54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016b58:	461a      	mov	r2, r3
 8016b5a:	490f      	ldr	r1, [pc, #60]	; (8016b98 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8016b5c:	68f8      	ldr	r0, [r7, #12]
 8016b5e:	f7ff ff39 	bl	80169d4 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8016b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b64:	3301      	adds	r3, #1
 8016b66:	62bb      	str	r3, [r7, #40]	; 0x28
 8016b68:	e7dd      	b.n	8016b26 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 8016b6a:	490c      	ldr	r1, [pc, #48]	; (8016b9c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 8016b6c:	68f8      	ldr	r0, [r7, #12]
 8016b6e:	f7ff ff31 	bl	80169d4 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 8016b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b76:	4413      	add	r3, r2
 8016b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 8016b7a:	e787      	b.n	8016a8c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 8016b7c:	bf00      	nop
 8016b7e:	3730      	adds	r7, #48	; 0x30
 8016b80:	46bd      	mov	sp, r7
 8016b82:	bd80      	pop	{r7, pc}
 8016b84:	08026310 	.word	0x08026310
 8016b88:	0802631c 	.word	0x0802631c
 8016b8c:	08026324 	.word	0x08026324
 8016b90:	08026328 	.word	0x08026328
 8016b94:	0802632c 	.word	0x0802632c
 8016b98:	08026330 	.word	0x08026330
 8016b9c:	08026334 	.word	0x08026334

08016ba0 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 8016ba0:	b480      	push	{r7}
 8016ba2:	b083      	sub	sp, #12
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	6078      	str	r0, [r7, #4]
    return buffer_;
 8016ba8:	687b      	ldr	r3, [r7, #4]
}
 8016baa:	4618      	mov	r0, r3
 8016bac:	370c      	adds	r7, #12
 8016bae:	46bd      	mov	sp, r7
 8016bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb4:	4770      	bx	lr

08016bb6 <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 8016bb6:	b480      	push	{r7}
 8016bb8:	b083      	sub	sp, #12
 8016bba:	af00      	add	r7, sp, #0
 8016bbc:	6078      	str	r0, [r7, #4]
 8016bbe:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016bc6:	3304      	adds	r3, #4
 8016bc8:	683a      	ldr	r2, [r7, #0]
 8016bca:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016bd2:	3304      	adds	r3, #4
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016bda:	d306      	bcc.n	8016bea <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016be2:	3304      	adds	r3, #4
 8016be4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8016be8:	601a      	str	r2, [r3, #0]
}
 8016bea:	bf00      	nop
 8016bec:	370c      	adds	r7, #12
 8016bee:	46bd      	mov	sp, r7
 8016bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf4:	4770      	bx	lr

08016bf6 <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 8016bf6:	b480      	push	{r7}
 8016bf8:	b083      	sub	sp, #12
 8016bfa:	af00      	add	r7, sp, #0
 8016bfc:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016c04:	3304      	adds	r3, #4
 8016c06:	f640 72ff 	movw	r2, #4095	; 0xfff
 8016c0a:	601a      	str	r2, [r3, #0]
}
 8016c0c:	bf00      	nop
 8016c0e:	370c      	adds	r7, #12
 8016c10:	46bd      	mov	sp, r7
 8016c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c16:	4770      	bx	lr

08016c18 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8016c18:	b480      	push	{r7}
 8016c1a:	b083      	sub	sp, #12
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016c26:	681a      	ldr	r2, [r3, #0]
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016c2e:	3304      	adds	r3, #4
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	429a      	cmp	r2, r3
 8016c34:	bf2c      	ite	cs
 8016c36:	2301      	movcs	r3, #1
 8016c38:	2300      	movcc	r3, #0
 8016c3a:	b2db      	uxtb	r3, r3
}
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	370c      	adds	r7, #12
 8016c40:	46bd      	mov	sp, r7
 8016c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c46:	4770      	bx	lr

08016c48 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8016c48:	b580      	push	{r7, lr}
 8016c4a:	b082      	sub	sp, #8
 8016c4c:	af00      	add	r7, sp, #0
 8016c4e:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	2200      	movs	r2, #0
 8016c54:	601a      	str	r2, [r3, #0]
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	2200      	movs	r2, #0
 8016c5a:	711a      	strb	r2, [r3, #4]
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	3308      	adds	r3, #8
 8016c60:	4618      	mov	r0, r3
 8016c62:	f7ff fe8b 	bl	801697c <_ZN18SimpleStringBufferC1Ev>
{
}
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	4618      	mov	r0, r3
 8016c6a:	3708      	adds	r7, #8
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	bd80      	pop	{r7, pc}

08016c70 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 8016c70:	b5b0      	push	{r4, r5, r7, lr}
 8016c72:	b086      	sub	sp, #24
 8016c74:	af02      	add	r7, sp, #8
 8016c76:	60f8      	str	r0, [r7, #12]
 8016c78:	60b9      	str	r1, [r7, #8]
 8016c7a:	607a      	str	r2, [r7, #4]
 8016c7c:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	f103 0408 	add.w	r4, r3, #8
 8016c84:	687d      	ldr	r5, [r7, #4]
 8016c86:	6a3b      	ldr	r3, [r7, #32]
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	3314      	adds	r3, #20
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	6a38      	ldr	r0, [r7, #32]
 8016c90:	4798      	blx	r3
 8016c92:	4603      	mov	r3, r0
 8016c94:	9301      	str	r3, [sp, #4]
 8016c96:	683b      	ldr	r3, [r7, #0]
 8016c98:	9300      	str	r3, [sp, #0]
 8016c9a:	462b      	mov	r3, r5
 8016c9c:	68ba      	ldr	r2, [r7, #8]
 8016c9e:	4904      	ldr	r1, [pc, #16]	; (8016cb0 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 8016ca0:	4620      	mov	r0, r4
 8016ca2:	f7ff fe97 	bl	80169d4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016ca6:	bf00      	nop
 8016ca8:	3710      	adds	r7, #16
 8016caa:	46bd      	mov	sp, r7
 8016cac:	bdb0      	pop	{r4, r5, r7, pc}
 8016cae:	bf00      	nop
 8016cb0:	08026338 	.word	0x08026338

08016cb4 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 8016cb4:	b5b0      	push	{r4, r5, r7, lr}
 8016cb6:	b086      	sub	sp, #24
 8016cb8:	af02      	add	r7, sp, #8
 8016cba:	60f8      	str	r0, [r7, #12]
 8016cbc:	60b9      	str	r1, [r7, #8]
 8016cbe:	607a      	str	r2, [r7, #4]
 8016cc0:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	f103 0408 	add.w	r4, r3, #8
 8016cc8:	687d      	ldr	r5, [r7, #4]
 8016cca:	683b      	ldr	r3, [r7, #0]
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	3318      	adds	r3, #24
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	6838      	ldr	r0, [r7, #0]
 8016cd4:	4798      	blx	r3
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	9300      	str	r3, [sp, #0]
 8016cda:	462b      	mov	r3, r5
 8016cdc:	68ba      	ldr	r2, [r7, #8]
 8016cde:	4904      	ldr	r1, [pc, #16]	; (8016cf0 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 8016ce0:	4620      	mov	r0, r4
 8016ce2:	f7ff fe77 	bl	80169d4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016ce6:	bf00      	nop
 8016ce8:	3710      	adds	r7, #16
 8016cea:	46bd      	mov	sp, r7
 8016cec:	bdb0      	pop	{r4, r5, r7, pc}
 8016cee:	bf00      	nop
 8016cf0:	08026370 	.word	0x08026370

08016cf4 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	b082      	sub	sp, #8
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	3308      	adds	r3, #8
 8016d00:	4903      	ldr	r1, [pc, #12]	; (8016d10 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 8016d02:	4618      	mov	r0, r3
 8016d04:	f7ff fe66 	bl	80169d4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016d08:	bf00      	nop
 8016d0a:	3708      	adds	r7, #8
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	bd80      	pop	{r7, pc}
 8016d10:	080263a0 	.word	0x080263a0

08016d14 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8016d14:	b580      	push	{r7, lr}
 8016d16:	b084      	sub	sp, #16
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	2200      	movs	r2, #0
 8016d20:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	2200      	movs	r2, #0
 8016d26:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8016d28:	2367      	movs	r3, #103	; 0x67
 8016d2a:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	f203 1311 	addw	r3, r3, #273	; 0x111
 8016d32:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	f103 0208 	add.w	r2, r3, #8
 8016d3a:	68bb      	ldr	r3, [r7, #8]
 8016d3c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8016d40:	4619      	mov	r1, r3
 8016d42:	4610      	mov	r0, r2
 8016d44:	f7ff ff37 	bl	8016bb6 <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8016d48:	bf00      	nop
 8016d4a:	3710      	adds	r7, #16
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	bd80      	pop	{r7, pc}

08016d50 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8016d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d52:	b089      	sub	sp, #36	; 0x24
 8016d54:	af04      	add	r7, sp, #16
 8016d56:	60f8      	str	r0, [r7, #12]
 8016d58:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d102      	bne.n	8016d68 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 8016d62:	68f8      	ldr	r0, [r7, #12]
 8016d64:	f000 f882 	bl	8016e6c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	1c5a      	adds	r2, r3, #1
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	f103 0508 	add.w	r5, r3, #8
 8016d78:	68bb      	ldr	r3, [r7, #8]
 8016d7a:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8016d7c:	68bb      	ldr	r3, [r7, #8]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8016d82:	68bb      	ldr	r3, [r7, #8]
 8016d84:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8016d86:	68bb      	ldr	r3, [r7, #8]
 8016d88:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8016d8a:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8016d8c:	68bb      	ldr	r3, [r7, #8]
 8016d8e:	695a      	ldr	r2, [r3, #20]
 8016d90:	68bb      	ldr	r3, [r7, #8]
 8016d92:	695b      	ldr	r3, [r3, #20]
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	3314      	adds	r3, #20
 8016d98:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8016d9a:	4610      	mov	r0, r2
 8016d9c:	4798      	blx	r3
 8016d9e:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8016da0:	68bb      	ldr	r3, [r7, #8]
 8016da2:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8016da4:	9303      	str	r3, [sp, #12]
 8016da6:	9202      	str	r2, [sp, #8]
 8016da8:	683a      	ldr	r2, [r7, #0]
 8016daa:	9201      	str	r2, [sp, #4]
 8016dac:	9400      	str	r4, [sp, #0]
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	4632      	mov	r2, r6
 8016db2:	4915      	ldr	r1, [pc, #84]	; (8016e08 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 8016db4:	4628      	mov	r0, r5
 8016db6:	f7ff fe0d 	bl	80169d4 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	f103 0008 	add.w	r0, r3, #8
 8016dc0:	68bb      	ldr	r3, [r7, #8]
 8016dc2:	6899      	ldr	r1, [r3, #8]
 8016dc4:	68bb      	ldr	r3, [r7, #8]
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	461a      	mov	r2, r3
 8016dca:	f7ff fe53 	bl	8016a74 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 8016dce:	68bb      	ldr	r3, [r7, #8]
 8016dd0:	695a      	ldr	r2, [r3, #20]
 8016dd2:	68bb      	ldr	r3, [r7, #8]
 8016dd4:	695b      	ldr	r3, [r3, #20]
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	3314      	adds	r3, #20
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	4610      	mov	r0, r2
 8016dde:	4798      	blx	r3
 8016de0:	4603      	mov	r3, r0
 8016de2:	490a      	ldr	r1, [pc, #40]	; (8016e0c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 8016de4:	4618      	mov	r0, r3
 8016de6:	f7f6 f887 	bl	800cef8 <_ZN12SimpleString6StrCmpEPKcS1_>
 8016dea:	4603      	mov	r3, r0
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	bf0c      	ite	eq
 8016df0:	2301      	moveq	r3, #1
 8016df2:	2300      	movne	r3, #0
 8016df4:	b2db      	uxtb	r3, r3
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d002      	beq.n	8016e00 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	2201      	movs	r2, #1
 8016dfe:	711a      	strb	r2, [r3, #4]
}
 8016e00:	bf00      	nop
 8016e02:	3714      	adds	r7, #20
 8016e04:	46bd      	mov	sp, r7
 8016e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e08:	080263c0 	.word	0x080263c0
 8016e0c:	08026420 	.word	0x08026420

08016e10 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b084      	sub	sp, #16
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d103      	bne.n	8016e28 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8016e20:	6878      	ldr	r0, [r7, #4]
 8016e22:	f7ff ff67 	bl	8016cf4 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 8016e26:	e01e      	b.n	8016e66 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	3308      	adds	r3, #8
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	f7ff fef3 	bl	8016c18 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 8016e32:	4603      	mov	r3, r0
 8016e34:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	3308      	adds	r3, #8
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	f7ff fedb 	bl	8016bf6 <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8016e40:	7bfb      	ldrb	r3, [r7, #15]
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d002      	beq.n	8016e4c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 8016e46:	6878      	ldr	r0, [r7, #4]
 8016e48:	f000 f820 	bl	8016e8c <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	4619      	mov	r1, r3
 8016e52:	6878      	ldr	r0, [r7, #4]
 8016e54:	f000 f82a 	bl	8016eac <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	791b      	ldrb	r3, [r3, #4]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d002      	beq.n	8016e66 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 8016e60:	6878      	ldr	r0, [r7, #4]
 8016e62:	f000 f839 	bl	8016ed8 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 8016e66:	3710      	adds	r7, #16
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	bd80      	pop	{r7, pc}

08016e6c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b082      	sub	sp, #8
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	3308      	adds	r3, #8
 8016e78:	4903      	ldr	r1, [pc, #12]	; (8016e88 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 8016e7a:	4618      	mov	r0, r3
 8016e7c:	f7ff fdaa 	bl	80169d4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016e80:	bf00      	nop
 8016e82:	3708      	adds	r7, #8
 8016e84:	46bd      	mov	sp, r7
 8016e86:	bd80      	pop	{r7, pc}
 8016e88:	08026428 	.word	0x08026428

08016e8c <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b082      	sub	sp, #8
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	3308      	adds	r3, #8
 8016e98:	4903      	ldr	r1, [pc, #12]	; (8016ea8 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	f7ff fd9a 	bl	80169d4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016ea0:	bf00      	nop
 8016ea2:	3708      	adds	r7, #8
 8016ea4:	46bd      	mov	sp, r7
 8016ea6:	bd80      	pop	{r7, pc}
 8016ea8:	08026440 	.word	0x08026440

08016eac <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b082      	sub	sp, #8
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]
 8016eb4:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	f103 0008 	add.w	r0, r3, #8
 8016ebc:	683b      	ldr	r3, [r7, #0]
 8016ebe:	4a04      	ldr	r2, [pc, #16]	; (8016ed0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 8016ec0:	4904      	ldr	r1, [pc, #16]	; (8016ed4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 8016ec2:	f7ff fd87 	bl	80169d4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016ec6:	bf00      	nop
 8016ec8:	3708      	adds	r7, #8
 8016eca:	46bd      	mov	sp, r7
 8016ecc:	bd80      	pop	{r7, pc}
 8016ece:	bf00      	nop
 8016ed0:	08026488 	.word	0x08026488
 8016ed4:	080264a0 	.word	0x080264a0

08016ed8 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8016ed8:	b580      	push	{r7, lr}
 8016eda:	b082      	sub	sp, #8
 8016edc:	af00      	add	r7, sp, #0
 8016ede:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	3308      	adds	r3, #8
 8016ee4:	4903      	ldr	r1, [pc, #12]	; (8016ef4 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	f7ff fd74 	bl	80169d4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016eec:	bf00      	nop
 8016eee:	3708      	adds	r7, #8
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	bd80      	pop	{r7, pc}
 8016ef4:	080264a8 	.word	0x080264a8

08016ef8 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	b08a      	sub	sp, #40	; 0x28
 8016efc:	af06      	add	r7, sp, #24
 8016efe:	60f8      	str	r0, [r7, #12]
 8016f00:	60b9      	str	r1, [r7, #8]
 8016f02:	607a      	str	r2, [r7, #4]
 8016f04:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 8016f06:	f7f9 fe8d 	bl	8010c24 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 8016f0a:	4602      	mov	r2, r0
 8016f0c:	69bb      	ldr	r3, [r7, #24]
 8016f0e:	9305      	str	r3, [sp, #20]
 8016f10:	683b      	ldr	r3, [r7, #0]
 8016f12:	9304      	str	r3, [sp, #16]
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	9303      	str	r3, [sp, #12]
 8016f18:	68bb      	ldr	r3, [r7, #8]
 8016f1a:	9302      	str	r3, [sp, #8]
 8016f1c:	9201      	str	r2, [sp, #4]
 8016f1e:	2300      	movs	r3, #0
 8016f20:	9300      	str	r3, [sp, #0]
 8016f22:	2300      	movs	r3, #0
 8016f24:	4a04      	ldr	r2, [pc, #16]	; (8016f38 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 8016f26:	4905      	ldr	r1, [pc, #20]	; (8016f3c <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8016f28:	68f8      	ldr	r0, [r7, #12]
 8016f2a:	f000 f855 	bl	8016fd8 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8016f2e:	bf00      	nop
 8016f30:	3710      	adds	r7, #16
 8016f32:	46bd      	mov	sp, r7
 8016f34:	bd80      	pop	{r7, pc}
 8016f36:	bf00      	nop
 8016f38:	08026304 	.word	0x08026304
 8016f3c:	080265bc 	.word	0x080265bc

08016f40 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016f40:	b590      	push	{r4, r7, lr}
 8016f42:	b08b      	sub	sp, #44	; 0x2c
 8016f44:	af06      	add	r7, sp, #24
 8016f46:	60f8      	str	r0, [r7, #12]
 8016f48:	60b9      	str	r1, [r7, #8]
 8016f4a:	607a      	str	r2, [r7, #4]
 8016f4c:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8016f4e:	68bb      	ldr	r3, [r7, #8]
 8016f50:	68d8      	ldr	r0, [r3, #12]
 8016f52:	68bb      	ldr	r3, [r7, #8]
 8016f54:	691c      	ldr	r4, [r3, #16]
 8016f56:	68bb      	ldr	r3, [r7, #8]
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	68ba      	ldr	r2, [r7, #8]
 8016f5c:	6952      	ldr	r2, [r2, #20]
 8016f5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016f60:	9105      	str	r1, [sp, #20]
 8016f62:	6a39      	ldr	r1, [r7, #32]
 8016f64:	9104      	str	r1, [sp, #16]
 8016f66:	6839      	ldr	r1, [r7, #0]
 8016f68:	9103      	str	r1, [sp, #12]
 8016f6a:	6879      	ldr	r1, [r7, #4]
 8016f6c:	9102      	str	r1, [sp, #8]
 8016f6e:	9201      	str	r2, [sp, #4]
 8016f70:	9300      	str	r3, [sp, #0]
 8016f72:	4623      	mov	r3, r4
 8016f74:	4602      	mov	r2, r0
 8016f76:	4904      	ldr	r1, [pc, #16]	; (8016f88 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8016f78:	68f8      	ldr	r0, [r7, #12]
 8016f7a:	f000 f82d 	bl	8016fd8 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8016f7e:	bf00      	nop
 8016f80:	3714      	adds	r7, #20
 8016f82:	46bd      	mov	sp, r7
 8016f84:	bd90      	pop	{r4, r7, pc}
 8016f86:	bf00      	nop
 8016f88:	080265e0 	.word	0x080265e0

08016f8c <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016f8c:	b590      	push	{r4, r7, lr}
 8016f8e:	b08b      	sub	sp, #44	; 0x2c
 8016f90:	af06      	add	r7, sp, #24
 8016f92:	60f8      	str	r0, [r7, #12]
 8016f94:	60b9      	str	r1, [r7, #8]
 8016f96:	607a      	str	r2, [r7, #4]
 8016f98:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8016f9a:	68bb      	ldr	r3, [r7, #8]
 8016f9c:	68d8      	ldr	r0, [r3, #12]
 8016f9e:	68bb      	ldr	r3, [r7, #8]
 8016fa0:	691c      	ldr	r4, [r3, #16]
 8016fa2:	68bb      	ldr	r3, [r7, #8]
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	68ba      	ldr	r2, [r7, #8]
 8016fa8:	6952      	ldr	r2, [r2, #20]
 8016faa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016fac:	9105      	str	r1, [sp, #20]
 8016fae:	6a39      	ldr	r1, [r7, #32]
 8016fb0:	9104      	str	r1, [sp, #16]
 8016fb2:	6839      	ldr	r1, [r7, #0]
 8016fb4:	9103      	str	r1, [sp, #12]
 8016fb6:	6879      	ldr	r1, [r7, #4]
 8016fb8:	9102      	str	r1, [sp, #8]
 8016fba:	9201      	str	r2, [sp, #4]
 8016fbc:	9300      	str	r3, [sp, #0]
 8016fbe:	4623      	mov	r3, r4
 8016fc0:	4602      	mov	r2, r0
 8016fc2:	4904      	ldr	r1, [pc, #16]	; (8016fd4 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8016fc4:	68f8      	ldr	r0, [r7, #12]
 8016fc6:	f000 f807 	bl	8016fd8 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8016fca:	bf00      	nop
 8016fcc:	3714      	adds	r7, #20
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	bd90      	pop	{r4, r7, pc}
 8016fd2:	bf00      	nop
 8016fd4:	08026608 	.word	0x08026608

08016fd8 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016fd8:	b590      	push	{r4, r7, lr}
 8016fda:	b087      	sub	sp, #28
 8016fdc:	af02      	add	r7, sp, #8
 8016fde:	60f8      	str	r0, [r7, #12]
 8016fe0:	60b9      	str	r1, [r7, #8]
 8016fe2:	607a      	str	r2, [r7, #4]
 8016fe4:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	3308      	adds	r3, #8
 8016fea:	68ba      	ldr	r2, [r7, #8]
 8016fec:	4910      	ldr	r1, [pc, #64]	; (8017030 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 8016fee:	4618      	mov	r0, r3
 8016ff0:	f7ff fcf0 	bl	80169d4 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 8016ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ff6:	9300      	str	r3, [sp, #0]
 8016ff8:	6a3b      	ldr	r3, [r7, #32]
 8016ffa:	683a      	ldr	r2, [r7, #0]
 8016ffc:	6879      	ldr	r1, [r7, #4]
 8016ffe:	68f8      	ldr	r0, [r7, #12]
 8017000:	f7ff fe36 	bl	8016c70 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 8017004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801700a:	68f8      	ldr	r0, [r7, #12]
 801700c:	f7ff fe52 	bl	8016cb4 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8017010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	3308      	adds	r3, #8
 8017016:	681c      	ldr	r4, [r3, #0]
 8017018:	68f8      	ldr	r0, [r7, #12]
 801701a:	f000 f80b 	bl	8017034 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 801701e:	4603      	mov	r3, r0
 8017020:	4619      	mov	r1, r3
 8017022:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017024:	47a0      	blx	r4
}
 8017026:	bf00      	nop
 8017028:	3714      	adds	r7, #20
 801702a:	46bd      	mov	sp, r7
 801702c:	bd90      	pop	{r4, r7, pc}
 801702e:	bf00      	nop
 8017030:	08026634 	.word	0x08026634

08017034 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8017034:	b580      	push	{r7, lr}
 8017036:	b082      	sub	sp, #8
 8017038:	af00      	add	r7, sp, #0
 801703a:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	3308      	adds	r3, #8
 8017040:	4618      	mov	r0, r3
 8017042:	f7ff fdad 	bl	8016ba0 <_ZN18SimpleStringBuffer8toStringEv>
 8017046:	4603      	mov	r3, r0
}
 8017048:	4618      	mov	r0, r3
 801704a:	3708      	adds	r7, #8
 801704c:	46bd      	mov	sp, r7
 801704e:	bd80      	pop	{r7, pc}

08017050 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8017050:	b580      	push	{r7, lr}
 8017052:	b082      	sub	sp, #8
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	3308      	adds	r3, #8
 801705c:	4618      	mov	r0, r3
 801705e:	f7ff fca7 	bl	80169b0 <_ZN18SimpleStringBuffer5clearEv>
}
 8017062:	bf00      	nop
 8017064:	3708      	adds	r7, #8
 8017066:	46bd      	mov	sp, r7
 8017068:	bd80      	pop	{r7, pc}

0801706a <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 801706a:	b480      	push	{r7}
 801706c:	b085      	sub	sp, #20
 801706e:	af00      	add	r7, sp, #0
 8017070:	60f8      	str	r0, [r7, #12]
 8017072:	60b9      	str	r1, [r7, #8]
 8017074:	607a      	str	r2, [r7, #4]
 8017076:	603b      	str	r3, [r7, #0]
    number_ = number;
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	687a      	ldr	r2, [r7, #4]
 801707c:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	68ba      	ldr	r2, [r7, #8]
 8017082:	609a      	str	r2, [r3, #8]
    size_ = size;
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	683a      	ldr	r2, [r7, #0]
 8017088:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	69ba      	ldr	r2, [r7, #24]
 801708e:	615a      	str	r2, [r3, #20]
    period_ = period;
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	7f3a      	ldrb	r2, [r7, #28]
 8017094:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	f897 2020 	ldrb.w	r2, [r7, #32]
 801709c:	765a      	strb	r2, [r3, #25]
    file_ = file;
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80170a2:	60da      	str	r2, [r3, #12]
    line_ = line;
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80170a8:	611a      	str	r2, [r3, #16]
}
 80170aa:	bf00      	nop
 80170ac:	3714      	adds	r7, #20
 80170ae:	46bd      	mov	sp, r7
 80170b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b4:	4770      	bx	lr

080170b6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80170b6:	b480      	push	{r7}
 80170b8:	b085      	sub	sp, #20
 80170ba:	af00      	add	r7, sp, #0
 80170bc:	60f8      	str	r0, [r7, #12]
 80170be:	60b9      	str	r1, [r7, #8]
 80170c0:	4613      	mov	r3, r2
 80170c2:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 80170c4:	79fb      	ldrb	r3, [r7, #7]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d00b      	beq.n	80170e2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80170ca:	68bb      	ldr	r3, [r7, #8]
 80170cc:	7e1b      	ldrb	r3, [r3, #24]
 80170ce:	79fa      	ldrb	r2, [r7, #7]
 80170d0:	429a      	cmp	r2, r3
 80170d2:	d006      	beq.n	80170e2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80170d4:	68bb      	ldr	r3, [r7, #8]
 80170d6:	7e1b      	ldrb	r3, [r3, #24]
 80170d8:	2b01      	cmp	r3, #1
 80170da:	d004      	beq.n	80170e6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 80170dc:	79fb      	ldrb	r3, [r7, #7]
 80170de:	2b02      	cmp	r3, #2
 80170e0:	d101      	bne.n	80170e6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 80170e2:	2301      	movs	r3, #1
 80170e4:	e000      	b.n	80170e8 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 80170e6:	2300      	movs	r3, #0
}
 80170e8:	4618      	mov	r0, r3
 80170ea:	3714      	adds	r7, #20
 80170ec:	46bd      	mov	sp, r7
 80170ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f2:	4770      	bx	lr

080170f4 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 80170f4:	b480      	push	{r7}
 80170f6:	b083      	sub	sp, #12
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	6078      	str	r0, [r7, #4]
 80170fc:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	681a      	ldr	r2, [r3, #0]
 8017102:	683b      	ldr	r3, [r7, #0]
 8017104:	61da      	str	r2, [r3, #28]
    head_ = node;
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	683a      	ldr	r2, [r7, #0]
 801710a:	601a      	str	r2, [r3, #0]
}
 801710c:	bf00      	nop
 801710e:	370c      	adds	r7, #12
 8017110:	46bd      	mov	sp, r7
 8017112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017116:	4770      	bx	lr

08017118 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8017118:	b480      	push	{r7}
 801711a:	b085      	sub	sp, #20
 801711c:	af00      	add	r7, sp, #0
 801711e:	6078      	str	r0, [r7, #4]
 8017120:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8017128:	2300      	movs	r3, #0
 801712a:	60bb      	str	r3, [r7, #8]
    while (cur) {
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d019      	beq.n	8017166 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	689b      	ldr	r3, [r3, #8]
 8017136:	683a      	ldr	r2, [r7, #0]
 8017138:	429a      	cmp	r2, r3
 801713a:	d10e      	bne.n	801715a <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 801713c:	68bb      	ldr	r3, [r7, #8]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d005      	beq.n	801714e <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	69da      	ldr	r2, [r3, #28]
 8017146:	68bb      	ldr	r3, [r7, #8]
 8017148:	61da      	str	r2, [r3, #28]
                return cur;
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	e00c      	b.n	8017168 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	69da      	ldr	r2, [r3, #28]
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	601a      	str	r2, [r3, #0]
                return cur;
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	e006      	b.n	8017168 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	69db      	ldr	r3, [r3, #28]
 8017162:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8017164:	e7e2      	b.n	801712c <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 8017166:	2300      	movs	r3, #0
}
 8017168:	4618      	mov	r0, r3
 801716a:	3714      	adds	r7, #20
 801716c:	46bd      	mov	sp, r7
 801716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017172:	4770      	bx	lr

08017174 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8017174:	b480      	push	{r7}
 8017176:	b085      	sub	sp, #20
 8017178:	af00      	add	r7, sp, #0
 801717a:	6078      	str	r0, [r7, #4]
 801717c:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d00a      	beq.n	80171a0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	689b      	ldr	r3, [r3, #8]
 801718e:	683a      	ldr	r2, [r7, #0]
 8017190:	429a      	cmp	r2, r3
 8017192:	d101      	bne.n	8017198 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	e004      	b.n	80171a2 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	69db      	ldr	r3, [r3, #28]
 801719c:	60fb      	str	r3, [r7, #12]
  while (cur) {
 801719e:	e7f1      	b.n	8017184 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 80171a0:	2300      	movs	r3, #0
}
 80171a2:	4618      	mov	r0, r3
 80171a4:	3714      	adds	r7, #20
 80171a6:	46bd      	mov	sp, r7
 80171a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ac:	4770      	bx	lr

080171ae <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80171ae:	b580      	push	{r7, lr}
 80171b0:	b086      	sub	sp, #24
 80171b2:	af00      	add	r7, sp, #0
 80171b4:	60f8      	str	r0, [r7, #12]
 80171b6:	60b9      	str	r1, [r7, #8]
 80171b8:	4613      	mov	r3, r2
 80171ba:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80171bc:	68bb      	ldr	r3, [r7, #8]
 80171be:	617b      	str	r3, [r7, #20]
 80171c0:	697b      	ldr	r3, [r7, #20]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d00e      	beq.n	80171e4 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 80171c6:	79fb      	ldrb	r3, [r7, #7]
 80171c8:	461a      	mov	r2, r3
 80171ca:	6979      	ldr	r1, [r7, #20]
 80171cc:	68f8      	ldr	r0, [r7, #12]
 80171ce:	f7ff ff72 	bl	80170b6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80171d2:	4603      	mov	r3, r0
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d001      	beq.n	80171dc <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 80171d8:	697b      	ldr	r3, [r7, #20]
 80171da:	e004      	b.n	80171e6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80171dc:	697b      	ldr	r3, [r7, #20]
 80171de:	69db      	ldr	r3, [r3, #28]
 80171e0:	617b      	str	r3, [r7, #20]
 80171e2:	e7ed      	b.n	80171c0 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 80171e4:	2300      	movs	r3, #0
}
 80171e6:	4618      	mov	r0, r3
 80171e8:	3718      	adds	r7, #24
 80171ea:	46bd      	mov	sp, r7
 80171ec:	bd80      	pop	{r7, pc}

080171ee <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 80171ee:	b580      	push	{r7, lr}
 80171f0:	b082      	sub	sp, #8
 80171f2:	af00      	add	r7, sp, #0
 80171f4:	6078      	str	r0, [r7, #4]
 80171f6:	460b      	mov	r3, r1
 80171f8:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	78fa      	ldrb	r2, [r7, #3]
 8017200:	4619      	mov	r1, r3
 8017202:	6878      	ldr	r0, [r7, #4]
 8017204:	f7ff ffd3 	bl	80171ae <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8017208:	4603      	mov	r3, r0
}
 801720a:	4618      	mov	r0, r3
 801720c:	3708      	adds	r7, #8
 801720e:	46bd      	mov	sp, r7
 8017210:	bd80      	pop	{r7, pc}

08017212 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8017212:	b580      	push	{r7, lr}
 8017214:	b084      	sub	sp, #16
 8017216:	af00      	add	r7, sp, #0
 8017218:	60f8      	str	r0, [r7, #12]
 801721a:	60b9      	str	r1, [r7, #8]
 801721c:	4613      	mov	r3, r2
 801721e:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8017220:	68bb      	ldr	r3, [r7, #8]
 8017222:	69db      	ldr	r3, [r3, #28]
 8017224:	79fa      	ldrb	r2, [r7, #7]
 8017226:	4619      	mov	r1, r3
 8017228:	68f8      	ldr	r0, [r7, #12]
 801722a:	f7ff ffc0 	bl	80171ae <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801722e:	4603      	mov	r3, r0
}
 8017230:	4618      	mov	r0, r3
 8017232:	3710      	adds	r7, #16
 8017234:	46bd      	mov	sp, r7
 8017236:	bd80      	pop	{r7, pc}

08017238 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8017238:	b580      	push	{r7, lr}
 801723a:	b084      	sub	sp, #16
 801723c:	af00      	add	r7, sp, #0
 801723e:	6078      	str	r0, [r7, #4]
 8017240:	460b      	mov	r3, r1
 8017242:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8017244:	2300      	movs	r3, #0
 8017246:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	60bb      	str	r3, [r7, #8]
 801724e:	68bb      	ldr	r3, [r7, #8]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d00f      	beq.n	8017274 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8017254:	78fb      	ldrb	r3, [r7, #3]
 8017256:	461a      	mov	r2, r3
 8017258:	68b9      	ldr	r1, [r7, #8]
 801725a:	6878      	ldr	r0, [r7, #4]
 801725c:	f7ff ff2b 	bl	80170b6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8017260:	4603      	mov	r3, r0
 8017262:	2b00      	cmp	r3, #0
 8017264:	d002      	beq.n	801726c <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	3301      	adds	r3, #1
 801726a:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 801726c:	68bb      	ldr	r3, [r7, #8]
 801726e:	69db      	ldr	r3, [r3, #28]
 8017270:	60bb      	str	r3, [r7, #8]
 8017272:	e7ec      	b.n	801724e <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8017274:	68fb      	ldr	r3, [r7, #12]
}
 8017276:	4618      	mov	r0, r3
 8017278:	3710      	adds	r7, #16
 801727a:	46bd      	mov	sp, r7
 801727c:	bd80      	pop	{r7, pc}
	...

08017280 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 8017280:	b480      	push	{r7}
 8017282:	b083      	sub	sp, #12
 8017284:	af00      	add	r7, sp, #0
 8017286:	6078      	str	r0, [r7, #4]
 8017288:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 801728a:	6839      	ldr	r1, [r7, #0]
 801728c:	4b09      	ldr	r3, [pc, #36]	; (80172b4 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 801728e:	fba3 2301 	umull	r2, r3, r3, r1
 8017292:	1aca      	subs	r2, r1, r3
 8017294:	0852      	lsrs	r2, r2, #1
 8017296:	4413      	add	r3, r2
 8017298:	099a      	lsrs	r2, r3, #6
 801729a:	4613      	mov	r3, r2
 801729c:	00db      	lsls	r3, r3, #3
 801729e:	4413      	add	r3, r2
 80172a0:	00db      	lsls	r3, r3, #3
 80172a2:	4413      	add	r3, r2
 80172a4:	1aca      	subs	r2, r1, r3
 80172a6:	4613      	mov	r3, r2
}
 80172a8:	4618      	mov	r0, r3
 80172aa:	370c      	adds	r7, #12
 80172ac:	46bd      	mov	sp, r7
 80172ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b2:	4770      	bx	lr
 80172b4:	c0e07039 	.word	0xc0e07039

080172b8 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 80172b8:	b580      	push	{r7, lr}
 80172ba:	b082      	sub	sp, #8
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]
 80172c0:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 80172c2:	683b      	ldr	r3, [r7, #0]
 80172c4:	689b      	ldr	r3, [r3, #8]
 80172c6:	4619      	mov	r1, r3
 80172c8:	6878      	ldr	r0, [r7, #4]
 80172ca:	f7ff ffd9 	bl	8017280 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80172ce:	4603      	mov	r3, r0
 80172d0:	009b      	lsls	r3, r3, #2
 80172d2:	687a      	ldr	r2, [r7, #4]
 80172d4:	4413      	add	r3, r2
 80172d6:	6839      	ldr	r1, [r7, #0]
 80172d8:	4618      	mov	r0, r3
 80172da:	f7ff ff0b 	bl	80170f4 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 80172de:	bf00      	nop
 80172e0:	3708      	adds	r7, #8
 80172e2:	46bd      	mov	sp, r7
 80172e4:	bd80      	pop	{r7, pc}

080172e6 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 80172e6:	b580      	push	{r7, lr}
 80172e8:	b082      	sub	sp, #8
 80172ea:	af00      	add	r7, sp, #0
 80172ec:	6078      	str	r0, [r7, #4]
 80172ee:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 80172f0:	6839      	ldr	r1, [r7, #0]
 80172f2:	6878      	ldr	r0, [r7, #4]
 80172f4:	f7ff ffc4 	bl	8017280 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80172f8:	4603      	mov	r3, r0
 80172fa:	009b      	lsls	r3, r3, #2
 80172fc:	687a      	ldr	r2, [r7, #4]
 80172fe:	4413      	add	r3, r2
 8017300:	6839      	ldr	r1, [r7, #0]
 8017302:	4618      	mov	r0, r3
 8017304:	f7ff ff08 	bl	8017118 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8017308:	4603      	mov	r3, r0
}
 801730a:	4618      	mov	r0, r3
 801730c:	3708      	adds	r7, #8
 801730e:	46bd      	mov	sp, r7
 8017310:	bd80      	pop	{r7, pc}

08017312 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 8017312:	b580      	push	{r7, lr}
 8017314:	b082      	sub	sp, #8
 8017316:	af00      	add	r7, sp, #0
 8017318:	6078      	str	r0, [r7, #4]
 801731a:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 801731c:	6839      	ldr	r1, [r7, #0]
 801731e:	6878      	ldr	r0, [r7, #4]
 8017320:	f7ff ffae 	bl	8017280 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8017324:	4603      	mov	r3, r0
 8017326:	009b      	lsls	r3, r3, #2
 8017328:	687a      	ldr	r2, [r7, #4]
 801732a:	4413      	add	r3, r2
 801732c:	6839      	ldr	r1, [r7, #0]
 801732e:	4618      	mov	r0, r3
 8017330:	f7ff ff20 	bl	8017174 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8017334:	4603      	mov	r3, r0
}
 8017336:	4618      	mov	r0, r3
 8017338:	3708      	adds	r7, #8
 801733a:	46bd      	mov	sp, r7
 801733c:	bd80      	pop	{r7, pc}

0801733e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 801733e:	b580      	push	{r7, lr}
 8017340:	b084      	sub	sp, #16
 8017342:	af00      	add	r7, sp, #0
 8017344:	6078      	str	r0, [r7, #4]
 8017346:	460b      	mov	r3, r1
 8017348:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 801734a:	2300      	movs	r3, #0
 801734c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 801734e:	2300      	movs	r3, #0
 8017350:	60bb      	str	r3, [r7, #8]
 8017352:	68bb      	ldr	r3, [r7, #8]
 8017354:	2b48      	cmp	r3, #72	; 0x48
 8017356:	dc10      	bgt.n	801737a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8017358:	68bb      	ldr	r3, [r7, #8]
 801735a:	009b      	lsls	r3, r3, #2
 801735c:	687a      	ldr	r2, [r7, #4]
 801735e:	4413      	add	r3, r2
 8017360:	78fa      	ldrb	r2, [r7, #3]
 8017362:	4611      	mov	r1, r2
 8017364:	4618      	mov	r0, r3
 8017366:	f7ff ff67 	bl	8017238 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 801736a:	4602      	mov	r2, r0
 801736c:	68fb      	ldr	r3, [r7, #12]
 801736e:	4413      	add	r3, r2
 8017370:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8017372:	68bb      	ldr	r3, [r7, #8]
 8017374:	3301      	adds	r3, #1
 8017376:	60bb      	str	r3, [r7, #8]
 8017378:	e7eb      	b.n	8017352 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 801737a:	68fb      	ldr	r3, [r7, #12]
}
 801737c:	4618      	mov	r0, r3
 801737e:	3710      	adds	r7, #16
 8017380:	46bd      	mov	sp, r7
 8017382:	bd80      	pop	{r7, pc}

08017384 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8017384:	b580      	push	{r7, lr}
 8017386:	b084      	sub	sp, #16
 8017388:	af00      	add	r7, sp, #0
 801738a:	6078      	str	r0, [r7, #4]
 801738c:	460b      	mov	r3, r1
 801738e:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 8017390:	2300      	movs	r3, #0
 8017392:	60fb      	str	r3, [r7, #12]
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	2b48      	cmp	r3, #72	; 0x48
 8017398:	dc12      	bgt.n	80173c0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	009b      	lsls	r3, r3, #2
 801739e:	687a      	ldr	r2, [r7, #4]
 80173a0:	4413      	add	r3, r2
 80173a2:	78fa      	ldrb	r2, [r7, #3]
 80173a4:	4611      	mov	r1, r2
 80173a6:	4618      	mov	r0, r3
 80173a8:	f7ff ff21 	bl	80171ee <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 80173ac:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 80173ae:	68bb      	ldr	r3, [r7, #8]
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d001      	beq.n	80173b8 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 80173b4:	68bb      	ldr	r3, [r7, #8]
 80173b6:	e004      	b.n	80173c2 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	3301      	adds	r3, #1
 80173bc:	60fb      	str	r3, [r7, #12]
 80173be:	e7e9      	b.n	8017394 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 80173c0:	2300      	movs	r3, #0
}
 80173c2:	4618      	mov	r0, r3
 80173c4:	3710      	adds	r7, #16
 80173c6:	46bd      	mov	sp, r7
 80173c8:	bd80      	pop	{r7, pc}

080173ca <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 80173ca:	b580      	push	{r7, lr}
 80173cc:	b086      	sub	sp, #24
 80173ce:	af00      	add	r7, sp, #0
 80173d0:	60f8      	str	r0, [r7, #12]
 80173d2:	60b9      	str	r1, [r7, #8]
 80173d4:	4613      	mov	r3, r2
 80173d6:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 80173d8:	68bb      	ldr	r3, [r7, #8]
 80173da:	689b      	ldr	r3, [r3, #8]
 80173dc:	4619      	mov	r1, r3
 80173de:	68f8      	ldr	r0, [r7, #12]
 80173e0:	f7ff ff4e 	bl	8017280 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80173e4:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 80173e6:	697b      	ldr	r3, [r7, #20]
 80173e8:	009b      	lsls	r3, r3, #2
 80173ea:	68fa      	ldr	r2, [r7, #12]
 80173ec:	4413      	add	r3, r2
 80173ee:	79fa      	ldrb	r2, [r7, #7]
 80173f0:	68b9      	ldr	r1, [r7, #8]
 80173f2:	4618      	mov	r0, r3
 80173f4:	f7ff ff0d 	bl	8017212 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80173f8:	6138      	str	r0, [r7, #16]
    if (node) return node;
 80173fa:	693b      	ldr	r3, [r7, #16]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d001      	beq.n	8017404 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8017400:	693b      	ldr	r3, [r7, #16]
 8017402:	e019      	b.n	8017438 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8017404:	697b      	ldr	r3, [r7, #20]
 8017406:	3301      	adds	r3, #1
 8017408:	617b      	str	r3, [r7, #20]
 801740a:	697b      	ldr	r3, [r7, #20]
 801740c:	2b48      	cmp	r3, #72	; 0x48
 801740e:	d812      	bhi.n	8017436 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8017410:	697b      	ldr	r3, [r7, #20]
 8017412:	009b      	lsls	r3, r3, #2
 8017414:	68fa      	ldr	r2, [r7, #12]
 8017416:	4413      	add	r3, r2
 8017418:	79fa      	ldrb	r2, [r7, #7]
 801741a:	4611      	mov	r1, r2
 801741c:	4618      	mov	r0, r3
 801741e:	f7ff fee6 	bl	80171ee <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8017422:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8017424:	693b      	ldr	r3, [r7, #16]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d001      	beq.n	801742e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 801742a:	693b      	ldr	r3, [r7, #16]
 801742c:	e004      	b.n	8017438 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 801742e:	697b      	ldr	r3, [r7, #20]
 8017430:	3301      	adds	r3, #1
 8017432:	617b      	str	r3, [r7, #20]
 8017434:	e7e9      	b.n	801740a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8017436:	2300      	movs	r3, #0
}
 8017438:	4618      	mov	r0, r3
 801743a:	3718      	adds	r7, #24
 801743c:	46bd      	mov	sp, r7
 801743e:	bd80      	pop	{r7, pc}

08017440 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8017440:	b5b0      	push	{r4, r5, r7, lr}
 8017442:	b082      	sub	sp, #8
 8017444:	af00      	add	r7, sp, #0
 8017446:	6078      	str	r0, [r7, #4]
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	2448      	movs	r4, #72	; 0x48
 801744c:	461d      	mov	r5, r3
 801744e:	2c00      	cmp	r4, #0
 8017450:	db05      	blt.n	801745e <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 8017452:	4628      	mov	r0, r5
 8017454:	f7ff fa84 	bl	8016960 <_ZN22MemoryLeakDetectorListC1Ev>
 8017458:	3504      	adds	r5, #4
 801745a:	3c01      	subs	r4, #1
 801745c:	e7f7      	b.n	801744e <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	4618      	mov	r0, r3
 8017462:	3708      	adds	r7, #8
 8017464:	46bd      	mov	sp, r7
 8017466:	bdb0      	pop	{r4, r5, r7, pc}

08017468 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8017468:	b590      	push	{r4, r7, lr}
 801746a:	b083      	sub	sp, #12
 801746c:	af00      	add	r7, sp, #0
 801746e:	6078      	str	r0, [r7, #4]
 8017470:	6039      	str	r1, [r7, #0]
 8017472:	4a1d      	ldr	r2, [pc, #116]	; (80174e8 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	601a      	str	r2, [r3, #0]
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	330c      	adds	r3, #12
 801747c:	4618      	mov	r0, r3
 801747e:	f7ff fbe3 	bl	8016c48 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017488:	331c      	adds	r3, #28
 801748a:	4618      	mov	r0, r3
 801748c:	f7ff ffd8 	bl	8017440 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8017496:	2201      	movs	r2, #1
 8017498:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80174a0:	3304      	adds	r3, #4
 80174a2:	2201      	movs	r2, #1
 80174a4:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	2201      	movs	r2, #1
 80174aa:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80174b2:	3308      	adds	r3, #8
 80174b4:	2200      	movs	r2, #0
 80174b6:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	683a      	ldr	r2, [r7, #0]
 80174bc:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 80174be:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 80174c2:	490a      	ldr	r1, [pc, #40]	; (80174ec <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 80174c4:	2004      	movs	r0, #4
 80174c6:	f7f3 fb17 	bl	800aaf8 <_ZnwjPKci>
 80174ca:	4604      	mov	r4, r0
 80174cc:	4620      	mov	r0, r4
 80174ce:	f7f5 fbe7 	bl	800cca0 <_ZN11SimpleMutexC1Ev>
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80174d8:	330c      	adds	r3, #12
 80174da:	601c      	str	r4, [r3, #0]
}
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	4618      	mov	r0, r3
 80174e0:	370c      	adds	r7, #12
 80174e2:	46bd      	mov	sp, r7
 80174e4:	bd90      	pop	{r4, r7, pc}
 80174e6:	bf00      	nop
 80174e8:	08029354 	.word	0x08029354
 80174ec:	08026638 	.word	0x08026638

080174f0 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 80174f0:	b590      	push	{r4, r7, lr}
 80174f2:	b083      	sub	sp, #12
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	6078      	str	r0, [r7, #4]
 80174f8:	4a0e      	ldr	r2, [pc, #56]	; (8017534 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8017504:	330c      	adds	r3, #12
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	2b00      	cmp	r3, #0
 801750a:	d00d      	beq.n	8017528 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8017512:	330c      	adds	r3, #12
 8017514:	681c      	ldr	r4, [r3, #0]
 8017516:	2c00      	cmp	r4, #0
 8017518:	d006      	beq.n	8017528 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 801751a:	4620      	mov	r0, r4
 801751c:	f7f5 fbd2 	bl	800ccc4 <_ZN11SimpleMutexD1Ev>
 8017520:	2104      	movs	r1, #4
 8017522:	4620      	mov	r0, r4
 8017524:	f7f3 fafc 	bl	800ab20 <_ZdlPvj>
    }
}
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	4618      	mov	r0, r3
 801752c:	370c      	adds	r7, #12
 801752e:	46bd      	mov	sp, r7
 8017530:	bd90      	pop	{r4, r7, pc}
 8017532:	bf00      	nop
 8017534:	08029354 	.word	0x08029354

08017538 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8017538:	b580      	push	{r7, lr}
 801753a:	b082      	sub	sp, #8
 801753c:	af00      	add	r7, sp, #0
 801753e:	6078      	str	r0, [r7, #4]
}
 8017540:	6878      	ldr	r0, [r7, #4]
 8017542:	f7ff ffd5 	bl	80174f0 <_ZN18MemoryLeakDetectorD1Ev>
 8017546:	f241 1150 	movw	r1, #4432	; 0x1150
 801754a:	6878      	ldr	r0, [r7, #4]
 801754c:	f7f3 fae8 	bl	800ab20 <_ZdlPvj>
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	4618      	mov	r0, r3
 8017554:	3708      	adds	r7, #8
 8017556:	46bd      	mov	sp, r7
 8017558:	bd80      	pop	{r7, pc}

0801755a <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 801755a:	b580      	push	{r7, lr}
 801755c:	b082      	sub	sp, #8
 801755e:	af00      	add	r7, sp, #0
 8017560:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	330c      	adds	r3, #12
 8017566:	4618      	mov	r0, r3
 8017568:	f7ff fd72 	bl	8017050 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	2203      	movs	r2, #3
 8017570:	721a      	strb	r2, [r3, #8]
}
 8017572:	bf00      	nop
 8017574:	3708      	adds	r7, #8
 8017576:	46bd      	mov	sp, r7
 8017578:	bd80      	pop	{r7, pc}

0801757a <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 801757a:	b480      	push	{r7}
 801757c:	b083      	sub	sp, #12
 801757e:	af00      	add	r7, sp, #0
 8017580:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	2202      	movs	r2, #2
 8017586:	721a      	strb	r2, [r3, #8]
}
 8017588:	bf00      	nop
 801758a:	370c      	adds	r7, #12
 801758c:	46bd      	mov	sp, r7
 801758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017592:	4770      	bx	lr

08017594 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 8017594:	b480      	push	{r7}
 8017596:	b083      	sub	sp, #12
 8017598:	af00      	add	r7, sp, #0
 801759a:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	2202      	movs	r2, #2
 80175a0:	721a      	strb	r2, [r3, #8]
}
 80175a2:	bf00      	nop
 80175a4:	370c      	adds	r7, #12
 80175a6:	46bd      	mov	sp, r7
 80175a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ac:	4770      	bx	lr

080175ae <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 80175ae:	b480      	push	{r7}
 80175b0:	b083      	sub	sp, #12
 80175b2:	af00      	add	r7, sp, #0
 80175b4:	6078      	str	r0, [r7, #4]
    return mutex_;
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80175bc:	330c      	adds	r3, #12
 80175be:	681b      	ldr	r3, [r3, #0]
}
 80175c0:	4618      	mov	r0, r3
 80175c2:	370c      	adds	r7, #12
 80175c4:	46bd      	mov	sp, r7
 80175c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ca:	4770      	bx	lr

080175cc <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 80175cc:	b480      	push	{r7}
 80175ce:	b083      	sub	sp, #12
 80175d0:	af00      	add	r7, sp, #0
 80175d2:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	f023 0303 	bic.w	r3, r3, #3
 80175da:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 80175dc:	4618      	mov	r0, r3
 80175de:	370c      	adds	r7, #12
 80175e0:	46bd      	mov	sp, r7
 80175e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e6:	4770      	bx	lr

080175e8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b082      	sub	sp, #8
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	6078      	str	r0, [r7, #4]
 80175f0:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 80175f2:	683b      	ldr	r3, [r7, #0]
 80175f4:	3303      	adds	r3, #3
 80175f6:	4618      	mov	r0, r3
 80175f8:	f7ff ffe8 	bl	80175cc <_ZL31calculateVoidPointerAlignedSizej>
 80175fc:	4603      	mov	r3, r0
}
 80175fe:	4618      	mov	r0, r3
 8017600:	3708      	adds	r7, #8
 8017602:	46bd      	mov	sp, r7
 8017604:	bd80      	pop	{r7, pc}

08017606 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 8017606:	b580      	push	{r7, lr}
 8017608:	b084      	sub	sp, #16
 801760a:	af00      	add	r7, sp, #0
 801760c:	60f8      	str	r0, [r7, #12]
 801760e:	60b9      	str	r1, [r7, #8]
 8017610:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 8017612:	6879      	ldr	r1, [r7, #4]
 8017614:	68f8      	ldr	r0, [r7, #12]
 8017616:	f7ff ffe7 	bl	80175e8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801761a:	4602      	mov	r2, r0
 801761c:	68bb      	ldr	r3, [r7, #8]
 801761e:	4413      	add	r3, r2
}
 8017620:	4618      	mov	r0, r3
 8017622:	3710      	adds	r7, #16
 8017624:	46bd      	mov	sp, r7
 8017626:	bd80      	pop	{r7, pc}

08017628 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b08a      	sub	sp, #40	; 0x28
 801762c:	af06      	add	r7, sp, #24
 801762e:	60f8      	str	r0, [r7, #12]
 8017630:	60b9      	str	r1, [r7, #8]
 8017632:	607a      	str	r2, [r7, #4]
 8017634:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801763c:	3304      	adds	r3, #4
 801763e:	681a      	ldr	r2, [r3, #0]
 8017640:	1c51      	adds	r1, r2, #1
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8017648:	3304      	adds	r3, #4
 801764a:	6019      	str	r1, [r3, #0]
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	7a19      	ldrb	r1, [r3, #8]
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8017656:	3308      	adds	r3, #8
 8017658:	781b      	ldrb	r3, [r3, #0]
 801765a:	6a38      	ldr	r0, [r7, #32]
 801765c:	9004      	str	r0, [sp, #16]
 801765e:	69f8      	ldr	r0, [r7, #28]
 8017660:	9003      	str	r0, [sp, #12]
 8017662:	9302      	str	r3, [sp, #8]
 8017664:	9101      	str	r1, [sp, #4]
 8017666:	69bb      	ldr	r3, [r7, #24]
 8017668:	9300      	str	r3, [sp, #0]
 801766a:	683b      	ldr	r3, [r7, #0]
 801766c:	6879      	ldr	r1, [r7, #4]
 801766e:	68b8      	ldr	r0, [r7, #8]
 8017670:	f7ff fcfb 	bl	801706a <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8017674:	68bb      	ldr	r3, [r7, #8]
 8017676:	689a      	ldr	r2, [r3, #8]
 8017678:	68bb      	ldr	r3, [r7, #8]
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	4413      	add	r3, r2
 801767e:	4619      	mov	r1, r3
 8017680:	68f8      	ldr	r0, [r7, #12]
 8017682:	f000 f861 	bl	8017748 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801768c:	331c      	adds	r3, #28
 801768e:	68b9      	ldr	r1, [r7, #8]
 8017690:	4618      	mov	r0, r3
 8017692:	f7ff fe11 	bl	80172b8 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 8017696:	bf00      	nop
 8017698:	3710      	adds	r7, #16
 801769a:	46bd      	mov	sp, r7
 801769c:	bd80      	pop	{r7, pc}

0801769e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 801769e:	b580      	push	{r7, lr}
 80176a0:	b08a      	sub	sp, #40	; 0x28
 80176a2:	af04      	add	r7, sp, #16
 80176a4:	60f8      	str	r0, [r7, #12]
 80176a6:	60b9      	str	r1, [r7, #8]
 80176a8:	607a      	str	r2, [r7, #4]
 80176aa:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80176ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80176b0:	9302      	str	r3, [sp, #8]
 80176b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176b4:	9301      	str	r3, [sp, #4]
 80176b6:	6a3b      	ldr	r3, [r7, #32]
 80176b8:	9300      	str	r3, [sp, #0]
 80176ba:	683b      	ldr	r3, [r7, #0]
 80176bc:	687a      	ldr	r2, [r7, #4]
 80176be:	68b9      	ldr	r1, [r7, #8]
 80176c0:	68f8      	ldr	r0, [r7, #12]
 80176c2:	f000 f96f 	bl	80179a4 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 80176c6:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 80176c8:	697b      	ldr	r3, [r7, #20]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d101      	bne.n	80176d2 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 80176ce:	2300      	movs	r3, #0
 80176d0:	e017      	b.n	8017702 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 80176d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80176d6:	9300      	str	r3, [sp, #0]
 80176d8:	697b      	ldr	r3, [r7, #20]
 80176da:	683a      	ldr	r2, [r7, #0]
 80176dc:	68b9      	ldr	r1, [r7, #8]
 80176de:	68f8      	ldr	r0, [r7, #12]
 80176e0:	f000 f98a 	bl	80179f8 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80176e4:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 80176e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176e8:	9302      	str	r3, [sp, #8]
 80176ea:	6a3b      	ldr	r3, [r7, #32]
 80176ec:	9301      	str	r3, [sp, #4]
 80176ee:	68bb      	ldr	r3, [r7, #8]
 80176f0:	9300      	str	r3, [sp, #0]
 80176f2:	683b      	ldr	r3, [r7, #0]
 80176f4:	697a      	ldr	r2, [r7, #20]
 80176f6:	6939      	ldr	r1, [r7, #16]
 80176f8:	68f8      	ldr	r0, [r7, #12]
 80176fa:	f7ff ff95 	bl	8017628 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 80176fe:	693b      	ldr	r3, [r7, #16]
 8017700:	689b      	ldr	r3, [r3, #8]
}
 8017702:	4618      	mov	r0, r3
 8017704:	3718      	adds	r7, #24
 8017706:	46bd      	mov	sp, r7
 8017708:	bd80      	pop	{r7, pc}
	...

0801770c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b084      	sub	sp, #16
 8017710:	af00      	add	r7, sp, #0
 8017712:	6078      	str	r0, [r7, #4]
 8017714:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801771c:	331c      	adds	r3, #28
 801771e:	6839      	ldr	r1, [r7, #0]
 8017720:	4618      	mov	r0, r3
 8017722:	f7ff fdf6 	bl	8017312 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8017726:	60f8      	str	r0, [r7, #12]
  if (node)
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d006      	beq.n	801773c <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 801772e:	4b05      	ldr	r3, [pc, #20]	; (8017744 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	68fa      	ldr	r2, [r7, #12]
 8017734:	6812      	ldr	r2, [r2, #0]
 8017736:	21cd      	movs	r1, #205	; 0xcd
 8017738:	6838      	ldr	r0, [r7, #0]
 801773a:	4798      	blx	r3
#endif
}
 801773c:	bf00      	nop
 801773e:	3710      	adds	r7, #16
 8017740:	46bd      	mov	sp, r7
 8017742:	bd80      	pop	{r7, pc}
 8017744:	200000d8 	.word	0x200000d8

08017748 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8017748:	b480      	push	{r7}
 801774a:	b085      	sub	sp, #20
 801774c:	af00      	add	r7, sp, #0
 801774e:	6078      	str	r0, [r7, #4]
 8017750:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8017752:	2300      	movs	r3, #0
 8017754:	60fb      	str	r3, [r7, #12]
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	2b02      	cmp	r3, #2
 801775a:	d812      	bhi.n	8017782 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 801775c:	68f9      	ldr	r1, [r7, #12]
 801775e:	4b0c      	ldr	r3, [pc, #48]	; (8017790 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 8017760:	fba3 2301 	umull	r2, r3, r3, r1
 8017764:	085a      	lsrs	r2, r3, #1
 8017766:	4613      	mov	r3, r2
 8017768:	005b      	lsls	r3, r3, #1
 801776a:	4413      	add	r3, r2
 801776c:	1aca      	subs	r2, r1, r3
 801776e:	6839      	ldr	r1, [r7, #0]
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	440b      	add	r3, r1
 8017774:	4907      	ldr	r1, [pc, #28]	; (8017794 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8017776:	5c8a      	ldrb	r2, [r1, r2]
 8017778:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	3301      	adds	r3, #1
 801777e:	60fb      	str	r3, [r7, #12]
 8017780:	e7e9      	b.n	8017756 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 8017782:	bf00      	nop
 8017784:	3714      	adds	r7, #20
 8017786:	46bd      	mov	sp, r7
 8017788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801778c:	4770      	bx	lr
 801778e:	bf00      	nop
 8017790:	aaaaaaab 	.word	0xaaaaaaab
 8017794:	08029348 	.word	0x08029348

08017798 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8017798:	b480      	push	{r7}
 801779a:	b085      	sub	sp, #20
 801779c:	af00      	add	r7, sp, #0
 801779e:	6078      	str	r0, [r7, #4]
 80177a0:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80177a2:	2300      	movs	r3, #0
 80177a4:	60fb      	str	r3, [r7, #12]
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	2b02      	cmp	r3, #2
 80177aa:	d816      	bhi.n	80177da <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 80177ac:	683a      	ldr	r2, [r7, #0]
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	4413      	add	r3, r2
 80177b2:	7818      	ldrb	r0, [r3, #0]
 80177b4:	68f9      	ldr	r1, [r7, #12]
 80177b6:	4b0c      	ldr	r3, [pc, #48]	; (80177e8 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 80177b8:	fba3 2301 	umull	r2, r3, r3, r1
 80177bc:	085a      	lsrs	r2, r3, #1
 80177be:	4613      	mov	r3, r2
 80177c0:	005b      	lsls	r3, r3, #1
 80177c2:	4413      	add	r3, r2
 80177c4:	1aca      	subs	r2, r1, r3
 80177c6:	4b09      	ldr	r3, [pc, #36]	; (80177ec <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 80177c8:	5c9b      	ldrb	r3, [r3, r2]
 80177ca:	4298      	cmp	r0, r3
 80177cc:	d001      	beq.n	80177d2 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 80177ce:	2300      	movs	r3, #0
 80177d0:	e004      	b.n	80177dc <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	3301      	adds	r3, #1
 80177d6:	60fb      	str	r3, [r7, #12]
 80177d8:	e7e5      	b.n	80177a6 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 80177da:	2301      	movs	r3, #1
}
 80177dc:	4618      	mov	r0, r3
 80177de:	3714      	adds	r7, #20
 80177e0:	46bd      	mov	sp, r7
 80177e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e6:	4770      	bx	lr
 80177e8:	aaaaaaab 	.word	0xaaaaaaab
 80177ec:	08029348 	.word	0x08029348

080177f0 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 80177f0:	b580      	push	{r7, lr}
 80177f2:	b084      	sub	sp, #16
 80177f4:	af00      	add	r7, sp, #0
 80177f6:	60f8      	str	r0, [r7, #12]
 80177f8:	60b9      	str	r1, [r7, #8]
 80177fa:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 80177fc:	68ba      	ldr	r2, [r7, #8]
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	429a      	cmp	r2, r3
 8017802:	d101      	bne.n	8017808 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8017804:	2301      	movs	r3, #1
 8017806:	e013      	b.n	8017830 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801780e:	781b      	ldrb	r3, [r3, #0]
 8017810:	f083 0301 	eor.w	r3, r3, #1
 8017814:	b2db      	uxtb	r3, r3
 8017816:	2b00      	cmp	r3, #0
 8017818:	d001      	beq.n	801781e <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 801781a:	2301      	movs	r3, #1
 801781c:	e008      	b.n	8017830 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	331c      	adds	r3, #28
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	68b9      	ldr	r1, [r7, #8]
 8017828:	6878      	ldr	r0, [r7, #4]
 801782a:	4798      	blx	r3
 801782c:	4603      	mov	r3, r0
 801782e:	bf00      	nop
}
 8017830:	4618      	mov	r0, r3
 8017832:	3710      	adds	r7, #16
 8017834:	46bd      	mov	sp, r7
 8017836:	bd80      	pop	{r7, pc}

08017838 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8017838:	b590      	push	{r4, r7, lr}
 801783a:	b087      	sub	sp, #28
 801783c:	af02      	add	r7, sp, #8
 801783e:	60f8      	str	r0, [r7, #12]
 8017840:	60b9      	str	r1, [r7, #8]
 8017842:	607a      	str	r2, [r7, #4]
 8017844:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8017846:	68bb      	ldr	r3, [r7, #8]
 8017848:	695a      	ldr	r2, [r3, #20]
 801784a:	68bb      	ldr	r3, [r7, #8]
 801784c:	695b      	ldr	r3, [r3, #20]
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	3328      	adds	r3, #40	; 0x28
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	4610      	mov	r0, r2
 8017856:	4798      	blx	r3
 8017858:	4604      	mov	r4, r0
 801785a:	6a3b      	ldr	r3, [r7, #32]
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	3328      	adds	r3, #40	; 0x28
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	6a38      	ldr	r0, [r7, #32]
 8017864:	4798      	blx	r3
 8017866:	4603      	mov	r3, r0
 8017868:	461a      	mov	r2, r3
 801786a:	4621      	mov	r1, r4
 801786c:	68f8      	ldr	r0, [r7, #12]
 801786e:	f7ff ffbf 	bl	80177f0 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8017872:	4603      	mov	r3, r0
 8017874:	f083 0301 	eor.w	r3, r3, #1
 8017878:	b2db      	uxtb	r3, r3
 801787a:	2b00      	cmp	r3, #0
 801787c:	d014      	beq.n	80178a8 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	f103 040c 	add.w	r4, r3, #12
 8017884:	6a3b      	ldr	r3, [r7, #32]
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	3328      	adds	r3, #40	; 0x28
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	6a38      	ldr	r0, [r7, #32]
 801788e:	4798      	blx	r3
 8017890:	4602      	mov	r2, r0
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	685b      	ldr	r3, [r3, #4]
 8017896:	9301      	str	r3, [sp, #4]
 8017898:	9200      	str	r2, [sp, #0]
 801789a:	683b      	ldr	r3, [r7, #0]
 801789c:	687a      	ldr	r2, [r7, #4]
 801789e:	68b9      	ldr	r1, [r7, #8]
 80178a0:	4620      	mov	r0, r4
 80178a2:	f7ff fb4d 	bl	8016f40 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 80178a6:	e02e      	b.n	8017906 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 80178a8:	68bb      	ldr	r3, [r7, #8]
 80178aa:	689a      	ldr	r2, [r3, #8]
 80178ac:	68bb      	ldr	r3, [r7, #8]
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	4413      	add	r3, r2
 80178b2:	4619      	mov	r1, r3
 80178b4:	68f8      	ldr	r0, [r7, #12]
 80178b6:	f7ff ff6f 	bl	8017798 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 80178ba:	4603      	mov	r3, r0
 80178bc:	f083 0301 	eor.w	r3, r3, #1
 80178c0:	b2db      	uxtb	r3, r3
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d014      	beq.n	80178f0 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	f103 040c 	add.w	r4, r3, #12
 80178cc:	6a3b      	ldr	r3, [r7, #32]
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	3328      	adds	r3, #40	; 0x28
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	6a38      	ldr	r0, [r7, #32]
 80178d6:	4798      	blx	r3
 80178d8:	4602      	mov	r2, r0
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	685b      	ldr	r3, [r3, #4]
 80178de:	9301      	str	r3, [sp, #4]
 80178e0:	9200      	str	r2, [sp, #0]
 80178e2:	683b      	ldr	r3, [r7, #0]
 80178e4:	687a      	ldr	r2, [r7, #4]
 80178e6:	68b9      	ldr	r1, [r7, #8]
 80178e8:	4620      	mov	r0, r4
 80178ea:	f7ff fb4f 	bl	8016f8c <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 80178ee:	e00a      	b.n	8017906 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 80178f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d006      	beq.n	8017906 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 80178f8:	6a3b      	ldr	r3, [r7, #32]
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	3324      	adds	r3, #36	; 0x24
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	68b9      	ldr	r1, [r7, #8]
 8017902:	6a38      	ldr	r0, [r7, #32]
 8017904:	4798      	blx	r3
}
 8017906:	bf00      	nop
 8017908:	3714      	adds	r7, #20
 801790a:	46bd      	mov	sp, r7
 801790c:	bd90      	pop	{r4, r7, pc}
	...

08017910 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8017910:	b580      	push	{r7, lr}
 8017912:	b086      	sub	sp, #24
 8017914:	af02      	add	r7, sp, #8
 8017916:	60f8      	str	r0, [r7, #12]
 8017918:	60b9      	str	r1, [r7, #8]
 801791a:	607a      	str	r2, [r7, #4]
 801791c:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 801791e:	4b08      	ldr	r3, [pc, #32]	; (8017940 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8017920:	681a      	ldr	r2, [r3, #0]
 8017922:	78fb      	ldrb	r3, [r7, #3]
 8017924:	9301      	str	r3, [sp, #4]
 8017926:	2300      	movs	r3, #0
 8017928:	9300      	str	r3, [sp, #0]
 801792a:	4613      	mov	r3, r2
 801792c:	687a      	ldr	r2, [r7, #4]
 801792e:	68b9      	ldr	r1, [r7, #8]
 8017930:	68f8      	ldr	r0, [r7, #12]
 8017932:	f000 f87f 	bl	8017a34 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8017936:	4603      	mov	r3, r0
}
 8017938:	4618      	mov	r0, r3
 801793a:	3710      	adds	r7, #16
 801793c:	46bd      	mov	sp, r7
 801793e:	bd80      	pop	{r7, pc}
 8017940:	20000100 	.word	0x20000100

08017944 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8017944:	b590      	push	{r4, r7, lr}
 8017946:	b085      	sub	sp, #20
 8017948:	af00      	add	r7, sp, #0
 801794a:	60f8      	str	r0, [r7, #12]
 801794c:	60b9      	str	r1, [r7, #8]
 801794e:	607a      	str	r2, [r7, #4]
 8017950:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8017952:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017956:	2b00      	cmp	r3, #0
 8017958:	d00e      	beq.n	8017978 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 801795a:	68bb      	ldr	r3, [r7, #8]
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	3308      	adds	r3, #8
 8017960:	681c      	ldr	r4, [r3, #0]
 8017962:	6879      	ldr	r1, [r7, #4]
 8017964:	68f8      	ldr	r0, [r7, #12]
 8017966:	f7ff fe3f 	bl	80175e8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801796a:	4601      	mov	r1, r0
 801796c:	6a3b      	ldr	r3, [r7, #32]
 801796e:	683a      	ldr	r2, [r7, #0]
 8017970:	68b8      	ldr	r0, [r7, #8]
 8017972:	47a0      	blx	r4
 8017974:	4603      	mov	r3, r0
 8017976:	e010      	b.n	801799a <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8017978:	68bb      	ldr	r3, [r7, #8]
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	3308      	adds	r3, #8
 801797e:	681c      	ldr	r4, [r3, #0]
 8017980:	6879      	ldr	r1, [r7, #4]
 8017982:	68f8      	ldr	r0, [r7, #12]
 8017984:	f7ff fe30 	bl	80175e8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8017988:	4603      	mov	r3, r0
 801798a:	f103 0120 	add.w	r1, r3, #32
 801798e:	6a3b      	ldr	r3, [r7, #32]
 8017990:	683a      	ldr	r2, [r7, #0]
 8017992:	68b8      	ldr	r0, [r7, #8]
 8017994:	47a0      	blx	r4
 8017996:	4603      	mov	r3, r0
 8017998:	bf00      	nop
}
 801799a:	4618      	mov	r0, r3
 801799c:	3714      	adds	r7, #20
 801799e:	46bd      	mov	sp, r7
 80179a0:	bd90      	pop	{r4, r7, pc}
	...

080179a4 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 80179a4:	b590      	push	{r4, r7, lr}
 80179a6:	b085      	sub	sp, #20
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	60f8      	str	r0, [r7, #12]
 80179ac:	60b9      	str	r1, [r7, #8]
 80179ae:	607a      	str	r2, [r7, #4]
 80179b0:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 80179b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d00b      	beq.n	80179d2 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 80179ba:	4b0e      	ldr	r3, [pc, #56]	; (80179f4 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 80179bc:	681c      	ldr	r4, [r3, #0]
 80179be:	6839      	ldr	r1, [r7, #0]
 80179c0:	68f8      	ldr	r0, [r7, #12]
 80179c2:	f7ff fe11 	bl	80175e8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80179c6:	4603      	mov	r3, r0
 80179c8:	4619      	mov	r1, r3
 80179ca:	6878      	ldr	r0, [r7, #4]
 80179cc:	47a0      	blx	r4
 80179ce:	4603      	mov	r3, r0
 80179d0:	e00c      	b.n	80179ec <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 80179d2:	4b08      	ldr	r3, [pc, #32]	; (80179f4 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 80179d4:	681c      	ldr	r4, [r3, #0]
 80179d6:	6839      	ldr	r1, [r7, #0]
 80179d8:	68f8      	ldr	r0, [r7, #12]
 80179da:	f7ff fe05 	bl	80175e8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80179de:	4603      	mov	r3, r0
 80179e0:	3320      	adds	r3, #32
 80179e2:	4619      	mov	r1, r3
 80179e4:	6878      	ldr	r0, [r7, #4]
 80179e6:	47a0      	blx	r4
 80179e8:	4603      	mov	r3, r0
 80179ea:	bf00      	nop
}
 80179ec:	4618      	mov	r0, r3
 80179ee:	3714      	adds	r7, #20
 80179f0:	46bd      	mov	sp, r7
 80179f2:	bd90      	pop	{r4, r7, pc}
 80179f4:	200000cc 	.word	0x200000cc

080179f8 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b084      	sub	sp, #16
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	60f8      	str	r0, [r7, #12]
 8017a00:	60b9      	str	r1, [r7, #8]
 8017a02:	607a      	str	r2, [r7, #4]
 8017a04:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8017a06:	7e3b      	ldrb	r3, [r7, #24]
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d008      	beq.n	8017a1e <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8017a0c:	68bb      	ldr	r3, [r7, #8]
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	3320      	adds	r3, #32
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	2120      	movs	r1, #32
 8017a16:	68b8      	ldr	r0, [r7, #8]
 8017a18:	4798      	blx	r3
 8017a1a:	4603      	mov	r3, r0
 8017a1c:	e006      	b.n	8017a2c <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 8017a1e:	687a      	ldr	r2, [r7, #4]
 8017a20:	6839      	ldr	r1, [r7, #0]
 8017a22:	68f8      	ldr	r0, [r7, #12]
 8017a24:	f7ff fdef 	bl	8017606 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8017a28:	4603      	mov	r3, r0
 8017a2a:	bf00      	nop
}
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	3710      	adds	r7, #16
 8017a30:	46bd      	mov	sp, r7
 8017a32:	bd80      	pop	{r7, pc}

08017a34 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8017a34:	b580      	push	{r7, lr}
 8017a36:	b08a      	sub	sp, #40	; 0x28
 8017a38:	af04      	add	r7, sp, #16
 8017a3a:	60f8      	str	r0, [r7, #12]
 8017a3c:	60b9      	str	r1, [r7, #8]
 8017a3e:	607a      	str	r2, [r7, #4]
 8017a40:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8017a42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017a46:	9301      	str	r3, [sp, #4]
 8017a48:	6a3b      	ldr	r3, [r7, #32]
 8017a4a:	9300      	str	r3, [sp, #0]
 8017a4c:	683b      	ldr	r3, [r7, #0]
 8017a4e:	687a      	ldr	r2, [r7, #4]
 8017a50:	68b9      	ldr	r1, [r7, #8]
 8017a52:	68f8      	ldr	r0, [r7, #12]
 8017a54:	f7ff ff76 	bl	8017944 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8017a58:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8017a5a:	697b      	ldr	r3, [r7, #20]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d101      	bne.n	8017a64 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8017a60:	2300      	movs	r3, #0
 8017a62:	e017      	b.n	8017a94 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8017a64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017a68:	9300      	str	r3, [sp, #0]
 8017a6a:	697b      	ldr	r3, [r7, #20]
 8017a6c:	687a      	ldr	r2, [r7, #4]
 8017a6e:	68b9      	ldr	r1, [r7, #8]
 8017a70:	68f8      	ldr	r0, [r7, #12]
 8017a72:	f7ff ffc1 	bl	80179f8 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8017a76:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 8017a78:	6a3b      	ldr	r3, [r7, #32]
 8017a7a:	9302      	str	r3, [sp, #8]
 8017a7c:	683b      	ldr	r3, [r7, #0]
 8017a7e:	9301      	str	r3, [sp, #4]
 8017a80:	68bb      	ldr	r3, [r7, #8]
 8017a82:	9300      	str	r3, [sp, #0]
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	697a      	ldr	r2, [r7, #20]
 8017a88:	6939      	ldr	r1, [r7, #16]
 8017a8a:	68f8      	ldr	r0, [r7, #12]
 8017a8c:	f7ff fdcc 	bl	8017628 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8017a90:	693b      	ldr	r3, [r7, #16]
 8017a92:	689b      	ldr	r3, [r3, #8]
}
 8017a94:	4618      	mov	r0, r3
 8017a96:	3718      	adds	r7, #24
 8017a98:	46bd      	mov	sp, r7
 8017a9a:	bd80      	pop	{r7, pc}

08017a9c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 8017a9c:	b590      	push	{r4, r7, lr}
 8017a9e:	b089      	sub	sp, #36	; 0x24
 8017aa0:	af02      	add	r7, sp, #8
 8017aa2:	60f8      	str	r0, [r7, #12]
 8017aa4:	60b9      	str	r1, [r7, #8]
 8017aa6:	607a      	str	r2, [r7, #4]
 8017aa8:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d03a      	beq.n	8017b26 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017ab6:	331c      	adds	r3, #28
 8017ab8:	6879      	ldr	r1, [r7, #4]
 8017aba:	4618      	mov	r0, r3
 8017abc:	f7ff fc13 	bl	80172e6 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8017ac0:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 8017ac2:	697b      	ldr	r3, [r7, #20]
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d10b      	bne.n	8017ae0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	f103 000c 	add.w	r0, r3, #12
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	685b      	ldr	r3, [r3, #4]
 8017ad2:	9300      	str	r3, [sp, #0]
 8017ad4:	68bb      	ldr	r3, [r7, #8]
 8017ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017ad8:	6839      	ldr	r1, [r7, #0]
 8017ada:	f7ff fa0d 	bl	8016ef8 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 8017ade:	e023      	b.n	8017b28 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8017ae0:	68b8      	ldr	r0, [r7, #8]
 8017ae2:	f7f8 ff95 	bl	8010a10 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 8017ae6:	4603      	mov	r3, r0
 8017ae8:	f083 0301 	eor.w	r3, r3, #1
 8017aec:	b2db      	uxtb	r3, r3
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d01a      	beq.n	8017b28 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 8017af2:	697b      	ldr	r3, [r7, #20]
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8017af8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017afc:	9301      	str	r3, [sp, #4]
 8017afe:	68bb      	ldr	r3, [r7, #8]
 8017b00:	9300      	str	r3, [sp, #0]
 8017b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b04:	683a      	ldr	r2, [r7, #0]
 8017b06:	6979      	ldr	r1, [r7, #20]
 8017b08:	68f8      	ldr	r0, [r7, #12]
 8017b0a:	f7ff fe95 	bl	8017838 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8017b0e:	68bb      	ldr	r3, [r7, #8]
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	330c      	adds	r3, #12
 8017b14:	681c      	ldr	r4, [r3, #0]
 8017b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b18:	9300      	str	r3, [sp, #0]
 8017b1a:	683b      	ldr	r3, [r7, #0]
 8017b1c:	693a      	ldr	r2, [r7, #16]
 8017b1e:	6879      	ldr	r1, [r7, #4]
 8017b20:	68b8      	ldr	r0, [r7, #8]
 8017b22:	47a0      	blx	r4
 8017b24:	e000      	b.n	8017b28 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 8017b26:	bf00      	nop
    }
}
 8017b28:	371c      	adds	r7, #28
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	bd90      	pop	{r4, r7, pc}
	...

08017b30 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b086      	sub	sp, #24
 8017b34:	af02      	add	r7, sp, #8
 8017b36:	60f8      	str	r0, [r7, #12]
 8017b38:	60b9      	str	r1, [r7, #8]
 8017b3a:	607a      	str	r2, [r7, #4]
 8017b3c:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 8017b3e:	4b08      	ldr	r3, [pc, #32]	; (8017b60 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8017b40:	681a      	ldr	r2, [r3, #0]
 8017b42:	78fb      	ldrb	r3, [r7, #3]
 8017b44:	9301      	str	r3, [sp, #4]
 8017b46:	2300      	movs	r3, #0
 8017b48:	9300      	str	r3, [sp, #0]
 8017b4a:	4613      	mov	r3, r2
 8017b4c:	687a      	ldr	r2, [r7, #4]
 8017b4e:	68b9      	ldr	r1, [r7, #8]
 8017b50:	68f8      	ldr	r0, [r7, #12]
 8017b52:	f7ff ffa3 	bl	8017a9c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8017b56:	bf00      	nop
 8017b58:	3710      	adds	r7, #16
 8017b5a:	46bd      	mov	sp, r7
 8017b5c:	bd80      	pop	{r7, pc}
 8017b5e:	bf00      	nop
 8017b60:	20000100 	.word	0x20000100

08017b64 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8017b64:	b580      	push	{r7, lr}
 8017b66:	b08a      	sub	sp, #40	; 0x28
 8017b68:	af04      	add	r7, sp, #16
 8017b6a:	60f8      	str	r0, [r7, #12]
 8017b6c:	60b9      	str	r1, [r7, #8]
 8017b6e:	607a      	str	r2, [r7, #4]
 8017b70:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d023      	beq.n	8017bc0 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017b7e:	331c      	adds	r3, #28
 8017b80:	6879      	ldr	r1, [r7, #4]
 8017b82:	4618      	mov	r0, r3
 8017b84:	f7ff fbaf 	bl	80172e6 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8017b88:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 8017b8a:	697b      	ldr	r3, [r7, #20]
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d10c      	bne.n	8017baa <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	f103 000c 	add.w	r0, r3, #12
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	685b      	ldr	r3, [r3, #4]
 8017b9a:	9300      	str	r3, [sp, #0]
 8017b9c:	68bb      	ldr	r3, [r7, #8]
 8017b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ba0:	6a39      	ldr	r1, [r7, #32]
 8017ba2:	f7ff f9a9 	bl	8016ef8 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 8017ba6:	2300      	movs	r3, #0
 8017ba8:	e019      	b.n	8017bde <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8017baa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017bae:	9301      	str	r3, [sp, #4]
 8017bb0:	68bb      	ldr	r3, [r7, #8]
 8017bb2:	9300      	str	r3, [sp, #0]
 8017bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bb6:	6a3a      	ldr	r2, [r7, #32]
 8017bb8:	6979      	ldr	r1, [r7, #20]
 8017bba:	68f8      	ldr	r0, [r7, #12]
 8017bbc:	f7ff fe3c 	bl	8017838 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8017bc0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017bc4:	9302      	str	r3, [sp, #8]
 8017bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bc8:	9301      	str	r3, [sp, #4]
 8017bca:	6a3b      	ldr	r3, [r7, #32]
 8017bcc:	9300      	str	r3, [sp, #0]
 8017bce:	683b      	ldr	r3, [r7, #0]
 8017bd0:	687a      	ldr	r2, [r7, #4]
 8017bd2:	68b9      	ldr	r1, [r7, #8]
 8017bd4:	68f8      	ldr	r0, [r7, #12]
 8017bd6:	f7ff fd62 	bl	801769e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8017bda:	4603      	mov	r3, r0
 8017bdc:	bf00      	nop
}
 8017bde:	4618      	mov	r0, r3
 8017be0:	3718      	adds	r7, #24
 8017be2:	46bd      	mov	sp, r7
 8017be4:	bd80      	pop	{r7, pc}

08017be6 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 8017be6:	b580      	push	{r7, lr}
 8017be8:	b084      	sub	sp, #16
 8017bea:	af00      	add	r7, sp, #0
 8017bec:	6078      	str	r0, [r7, #4]
 8017bee:	460b      	mov	r3, r1
 8017bf0:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017bf8:	331c      	adds	r3, #28
 8017bfa:	78fa      	ldrb	r2, [r7, #3]
 8017bfc:	4611      	mov	r1, r2
 8017bfe:	4618      	mov	r0, r3
 8017c00:	f7ff fbc0 	bl	8017384 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8017c04:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	330c      	adds	r3, #12
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	f7ff f882 	bl	8016d14 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d010      	beq.n	8017c38 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	330c      	adds	r3, #12
 8017c1a:	68f9      	ldr	r1, [r7, #12]
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	f7ff f897 	bl	8016d50 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017c28:	331c      	adds	r3, #28
 8017c2a:	78fa      	ldrb	r2, [r7, #3]
 8017c2c:	68f9      	ldr	r1, [r7, #12]
 8017c2e:	4618      	mov	r0, r3
 8017c30:	f7ff fbcb 	bl	80173ca <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8017c34:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8017c36:	e7eb      	b.n	8017c10 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	330c      	adds	r3, #12
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	f7ff f8e7 	bl	8016e10 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 8017c42:	bf00      	nop
 8017c44:	3710      	adds	r7, #16
 8017c46:	46bd      	mov	sp, r7
 8017c48:	bd80      	pop	{r7, pc}

08017c4a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8017c4a:	b580      	push	{r7, lr}
 8017c4c:	b082      	sub	sp, #8
 8017c4e:	af00      	add	r7, sp, #0
 8017c50:	6078      	str	r0, [r7, #4]
 8017c52:	460b      	mov	r3, r1
 8017c54:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 8017c56:	78fb      	ldrb	r3, [r7, #3]
 8017c58:	4619      	mov	r1, r3
 8017c5a:	6878      	ldr	r0, [r7, #4]
 8017c5c:	f7ff ffc3 	bl	8017be6 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	330c      	adds	r3, #12
 8017c64:	4618      	mov	r0, r3
 8017c66:	f7ff f9e5 	bl	8017034 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8017c6a:	4603      	mov	r3, r0
}
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	3708      	adds	r7, #8
 8017c70:	46bd      	mov	sp, r7
 8017c72:	bd80      	pop	{r7, pc}

08017c74 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 8017c74:	b580      	push	{r7, lr}
 8017c76:	b084      	sub	sp, #16
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017c82:	331c      	adds	r3, #28
 8017c84:	2103      	movs	r1, #3
 8017c86:	4618      	mov	r0, r3
 8017c88:	f7ff fb7c 	bl	8017384 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8017c8c:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d011      	beq.n	8017cb8 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	7e1b      	ldrb	r3, [r3, #24]
 8017c98:	2b03      	cmp	r3, #3
 8017c9a:	d102      	bne.n	8017ca2 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	2202      	movs	r2, #2
 8017ca0:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017ca8:	331c      	adds	r3, #28
 8017caa:	2203      	movs	r2, #3
 8017cac:	68f9      	ldr	r1, [r7, #12]
 8017cae:	4618      	mov	r0, r3
 8017cb0:	f7ff fb8b 	bl	80173ca <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8017cb4:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8017cb6:	e7ea      	b.n	8017c8e <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 8017cb8:	bf00      	nop
 8017cba:	3710      	adds	r7, #16
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	bd80      	pop	{r7, pc}

08017cc0 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 8017cc0:	b580      	push	{r7, lr}
 8017cc2:	b082      	sub	sp, #8
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	6078      	str	r0, [r7, #4]
 8017cc8:	460b      	mov	r3, r1
 8017cca:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017cd2:	331c      	adds	r3, #28
 8017cd4:	78fa      	ldrb	r2, [r7, #3]
 8017cd6:	4611      	mov	r1, r2
 8017cd8:	4618      	mov	r0, r3
 8017cda:	f7ff fb30 	bl	801733e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 8017cde:	4603      	mov	r3, r0
}
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	3708      	adds	r7, #8
 8017ce4:	46bd      	mov	sp, r7
 8017ce6:	bd80      	pop	{r7, pc}

08017ce8 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b084      	sub	sp, #16
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	60f8      	str	r0, [r7, #12]
 8017cf0:	60b9      	str	r1, [r7, #8]
 8017cf2:	607a      	str	r2, [r7, #4]
 8017cf4:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 8017cf6:	68fb      	ldr	r3, [r7, #12]
 8017cf8:	68b9      	ldr	r1, [r7, #8]
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f7f5 fb13 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	3308      	adds	r3, #8
 8017d04:	6879      	ldr	r1, [r7, #4]
 8017d06:	4618      	mov	r0, r3
 8017d08:	f7f5 fb0d 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	683a      	ldr	r2, [r7, #0]
 8017d10:	611a      	str	r2, [r3, #16]
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	2200      	movs	r2, #0
 8017d16:	615a      	str	r2, [r3, #20]
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	4618      	mov	r0, r3
 8017d1c:	3710      	adds	r7, #16
 8017d1e:	46bd      	mov	sp, r7
 8017d20:	bd80      	pop	{r7, pc}

08017d22 <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 8017d22:	b480      	push	{r7}
 8017d24:	b083      	sub	sp, #12
 8017d26:	af00      	add	r7, sp, #0
 8017d28:	6078      	str	r0, [r7, #4]
 8017d2a:	6039      	str	r1, [r7, #0]
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	4618      	mov	r0, r3
 8017d30:	370c      	adds	r7, #12
 8017d32:	46bd      	mov	sp, r7
 8017d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d38:	4770      	bx	lr

08017d3a <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 8017d3a:	b480      	push	{r7}
 8017d3c:	b083      	sub	sp, #12
 8017d3e:	af00      	add	r7, sp, #0
 8017d40:	6078      	str	r0, [r7, #4]
 8017d42:	6039      	str	r1, [r7, #0]
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	4618      	mov	r0, r3
 8017d48:	370c      	adds	r7, #12
 8017d4a:	46bd      	mov	sp, r7
 8017d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d50:	4770      	bx	lr

08017d52 <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8017d52:	b480      	push	{r7}
 8017d54:	b085      	sub	sp, #20
 8017d56:	af00      	add	r7, sp, #0
 8017d58:	60f8      	str	r0, [r7, #12]
 8017d5a:	60b9      	str	r1, [r7, #8]
 8017d5c:	4613      	mov	r3, r2
 8017d5e:	71fb      	strb	r3, [r7, #7]
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	4618      	mov	r0, r3
 8017d64:	3714      	adds	r7, #20
 8017d66:	46bd      	mov	sp, r7
 8017d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d6c:	4770      	bx	lr

08017d6e <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 8017d6e:	b480      	push	{r7}
 8017d70:	b085      	sub	sp, #20
 8017d72:	af00      	add	r7, sp, #0
 8017d74:	60f8      	str	r0, [r7, #12]
 8017d76:	60b9      	str	r1, [r7, #8]
 8017d78:	607a      	str	r2, [r7, #4]
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	3714      	adds	r7, #20
 8017d80:	46bd      	mov	sp, r7
 8017d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d86:	4770      	bx	lr

08017d88 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 8017d88:	b480      	push	{r7}
 8017d8a:	b085      	sub	sp, #20
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	60f8      	str	r0, [r7, #12]
 8017d90:	60b9      	str	r1, [r7, #8]
 8017d92:	607a      	str	r2, [r7, #4]
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	4618      	mov	r0, r3
 8017d98:	3714      	adds	r7, #20
 8017d9a:	46bd      	mov	sp, r7
 8017d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da0:	4770      	bx	lr

08017da2 <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8017da2:	b480      	push	{r7}
 8017da4:	b085      	sub	sp, #20
 8017da6:	af00      	add	r7, sp, #0
 8017da8:	60f8      	str	r0, [r7, #12]
 8017daa:	60b9      	str	r1, [r7, #8]
 8017dac:	607a      	str	r2, [r7, #4]
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	4618      	mov	r0, r3
 8017db2:	3714      	adds	r7, #20
 8017db4:	46bd      	mov	sp, r7
 8017db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dba:	4770      	bx	lr

08017dbc <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8017dbc:	b480      	push	{r7}
 8017dbe:	b085      	sub	sp, #20
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	60f8      	str	r0, [r7, #12]
 8017dc4:	60b9      	str	r1, [r7, #8]
 8017dc6:	607a      	str	r2, [r7, #4]
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	4618      	mov	r0, r3
 8017dcc:	3714      	adds	r7, #20
 8017dce:	46bd      	mov	sp, r7
 8017dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dd4:	4770      	bx	lr

08017dd6 <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8017dd6:	b480      	push	{r7}
 8017dd8:	b085      	sub	sp, #20
 8017dda:	af00      	add	r7, sp, #0
 8017ddc:	60f8      	str	r0, [r7, #12]
 8017dde:	60b9      	str	r1, [r7, #8]
 8017de0:	4639      	mov	r1, r7
 8017de2:	e881 000c 	stmia.w	r1, {r2, r3}
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	4618      	mov	r0, r3
 8017dea:	3714      	adds	r7, #20
 8017dec:	46bd      	mov	sp, r7
 8017dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017df2:	4770      	bx	lr

08017df4 <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8017df4:	b480      	push	{r7}
 8017df6:	b085      	sub	sp, #20
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	60f8      	str	r0, [r7, #12]
 8017dfc:	60b9      	str	r1, [r7, #8]
 8017dfe:	4639      	mov	r1, r7
 8017e00:	e881 000c 	stmia.w	r1, {r2, r3}
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	4618      	mov	r0, r3
 8017e08:	3714      	adds	r7, #20
 8017e0a:	46bd      	mov	sp, r7
 8017e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e10:	4770      	bx	lr

08017e12 <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8017e12:	b480      	push	{r7}
 8017e14:	b085      	sub	sp, #20
 8017e16:	af00      	add	r7, sp, #0
 8017e18:	60f8      	str	r0, [r7, #12]
 8017e1a:	60b9      	str	r1, [r7, #8]
 8017e1c:	ed87 0b00 	vstr	d0, [r7]
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	4618      	mov	r0, r3
 8017e24:	3714      	adds	r7, #20
 8017e26:	46bd      	mov	sp, r7
 8017e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e2c:	4770      	bx	lr

08017e2e <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8017e2e:	b480      	push	{r7}
 8017e30:	b085      	sub	sp, #20
 8017e32:	af00      	add	r7, sp, #0
 8017e34:	60f8      	str	r0, [r7, #12]
 8017e36:	60b9      	str	r1, [r7, #8]
 8017e38:	607a      	str	r2, [r7, #4]
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	3714      	adds	r7, #20
 8017e40:	46bd      	mov	sp, r7
 8017e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e46:	4770      	bx	lr

08017e48 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8017e48:	b480      	push	{r7}
 8017e4a:	b085      	sub	sp, #20
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	60f8      	str	r0, [r7, #12]
 8017e50:	60b9      	str	r1, [r7, #8]
 8017e52:	607a      	str	r2, [r7, #4]
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	4618      	mov	r0, r3
 8017e58:	3714      	adds	r7, #20
 8017e5a:	46bd      	mov	sp, r7
 8017e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e60:	4770      	bx	lr

08017e62 <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8017e62:	b480      	push	{r7}
 8017e64:	b085      	sub	sp, #20
 8017e66:	af00      	add	r7, sp, #0
 8017e68:	60f8      	str	r0, [r7, #12]
 8017e6a:	60b9      	str	r1, [r7, #8]
 8017e6c:	607a      	str	r2, [r7, #4]
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	4618      	mov	r0, r3
 8017e72:	3714      	adds	r7, #20
 8017e74:	46bd      	mov	sp, r7
 8017e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7a:	4770      	bx	lr

08017e7c <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 8017e7c:	b480      	push	{r7}
 8017e7e:	b085      	sub	sp, #20
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	60f8      	str	r0, [r7, #12]
 8017e84:	60b9      	str	r1, [r7, #8]
 8017e86:	607a      	str	r2, [r7, #4]
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	3714      	adds	r7, #20
 8017e8e:	46bd      	mov	sp, r7
 8017e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e94:	4770      	bx	lr

08017e96 <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 8017e96:	b480      	push	{r7}
 8017e98:	b085      	sub	sp, #20
 8017e9a:	af00      	add	r7, sp, #0
 8017e9c:	60f8      	str	r0, [r7, #12]
 8017e9e:	60b9      	str	r1, [r7, #8]
 8017ea0:	607a      	str	r2, [r7, #4]
 8017ea2:	603b      	str	r3, [r7, #0]
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	3714      	adds	r7, #20
 8017eaa:	46bd      	mov	sp, r7
 8017eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb0:	4770      	bx	lr

08017eb2 <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8017eb2:	b480      	push	{r7}
 8017eb4:	b085      	sub	sp, #20
 8017eb6:	af00      	add	r7, sp, #0
 8017eb8:	60f8      	str	r0, [r7, #12]
 8017eba:	60b9      	str	r1, [r7, #8]
 8017ebc:	607a      	str	r2, [r7, #4]
 8017ebe:	603b      	str	r3, [r7, #0]
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	3714      	adds	r7, #20
 8017ec6:	46bd      	mov	sp, r7
 8017ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ecc:	4770      	bx	lr

08017ece <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 8017ece:	b480      	push	{r7}
 8017ed0:	b085      	sub	sp, #20
 8017ed2:	af00      	add	r7, sp, #0
 8017ed4:	60f8      	str	r0, [r7, #12]
 8017ed6:	60b9      	str	r1, [r7, #8]
 8017ed8:	607a      	str	r2, [r7, #4]
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	4618      	mov	r0, r3
 8017ede:	3714      	adds	r7, #20
 8017ee0:	46bd      	mov	sp, r7
 8017ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee6:	4770      	bx	lr

08017ee8 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 8017ee8:	b480      	push	{r7}
 8017eea:	b085      	sub	sp, #20
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	60f8      	str	r0, [r7, #12]
 8017ef0:	60b9      	str	r1, [r7, #8]
 8017ef2:	607a      	str	r2, [r7, #4]
 8017ef4:	603b      	str	r3, [r7, #0]
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	4618      	mov	r0, r3
 8017efa:	3714      	adds	r7, #20
 8017efc:	46bd      	mov	sp, r7
 8017efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f02:	4770      	bx	lr

08017f04 <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 8017f04:	b480      	push	{r7}
 8017f06:	b083      	sub	sp, #12
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	6078      	str	r0, [r7, #4]
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	4618      	mov	r0, r3
 8017f10:	370c      	adds	r7, #12
 8017f12:	46bd      	mov	sp, r7
 8017f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f18:	4770      	bx	lr
	...

08017f1c <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	b084      	sub	sp, #16
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	6078      	str	r0, [r7, #4]
 8017f24:	6039      	str	r1, [r7, #0]
 8017f26:	f107 0308 	add.w	r3, r7, #8
 8017f2a:	4909      	ldr	r1, [pc, #36]	; (8017f50 <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	f7f5 f9a6 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8017f32:	f107 0308 	add.w	r3, r7, #8
 8017f36:	4619      	mov	r1, r3
 8017f38:	6878      	ldr	r0, [r7, #4]
 8017f3a:	f005 fec5 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
 8017f3e:	f107 0308 	add.w	r3, r7, #8
 8017f42:	4618      	mov	r0, r3
 8017f44:	f7f5 fd53 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8017f48:	6878      	ldr	r0, [r7, #4]
 8017f4a:	3710      	adds	r7, #16
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	bd80      	pop	{r7, pc}
 8017f50:	08026658 	.word	0x08026658

08017f54 <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 8017f54:	b480      	push	{r7}
 8017f56:	b083      	sub	sp, #12
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	6078      	str	r0, [r7, #4]
 8017f5c:	460b      	mov	r3, r1
 8017f5e:	70fb      	strb	r3, [r7, #3]
 8017f60:	78fb      	ldrb	r3, [r7, #3]
 8017f62:	4618      	mov	r0, r3
 8017f64:	370c      	adds	r7, #12
 8017f66:	46bd      	mov	sp, r7
 8017f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f6c:	4770      	bx	lr

08017f6e <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 8017f6e:	b480      	push	{r7}
 8017f70:	b083      	sub	sp, #12
 8017f72:	af00      	add	r7, sp, #0
 8017f74:	6078      	str	r0, [r7, #4]
 8017f76:	2300      	movs	r3, #0
 8017f78:	4618      	mov	r0, r3
 8017f7a:	370c      	adds	r7, #12
 8017f7c:	46bd      	mov	sp, r7
 8017f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f82:	4770      	bx	lr

08017f84 <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 8017f84:	b480      	push	{r7}
 8017f86:	b083      	sub	sp, #12
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	4618      	mov	r0, r3
 8017f90:	370c      	adds	r7, #12
 8017f92:	46bd      	mov	sp, r7
 8017f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f98:	4770      	bx	lr

08017f9a <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 8017f9a:	b480      	push	{r7}
 8017f9c:	b083      	sub	sp, #12
 8017f9e:	af00      	add	r7, sp, #0
 8017fa0:	6078      	str	r0, [r7, #4]
 8017fa2:	6039      	str	r1, [r7, #0]
 8017fa4:	683b      	ldr	r3, [r7, #0]
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	370c      	adds	r7, #12
 8017faa:	46bd      	mov	sp, r7
 8017fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb0:	4770      	bx	lr

08017fb2 <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 8017fb2:	b480      	push	{r7}
 8017fb4:	b083      	sub	sp, #12
 8017fb6:	af00      	add	r7, sp, #0
 8017fb8:	6078      	str	r0, [r7, #4]
 8017fba:	2300      	movs	r3, #0
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	370c      	adds	r7, #12
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fc6:	4770      	bx	lr

08017fc8 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 8017fc8:	b480      	push	{r7}
 8017fca:	b083      	sub	sp, #12
 8017fcc:	af00      	add	r7, sp, #0
 8017fce:	6078      	str	r0, [r7, #4]
 8017fd0:	6039      	str	r1, [r7, #0]
 8017fd2:	683b      	ldr	r3, [r7, #0]
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	370c      	adds	r7, #12
 8017fd8:	46bd      	mov	sp, r7
 8017fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fde:	4770      	bx	lr

08017fe0 <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 8017fe0:	b480      	push	{r7}
 8017fe2:	b083      	sub	sp, #12
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	6078      	str	r0, [r7, #4]
 8017fe8:	2300      	movs	r3, #0
 8017fea:	4618      	mov	r0, r3
 8017fec:	370c      	adds	r7, #12
 8017fee:	46bd      	mov	sp, r7
 8017ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ff4:	4770      	bx	lr

08017ff6 <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 8017ff6:	b480      	push	{r7}
 8017ff8:	b083      	sub	sp, #12
 8017ffa:	af00      	add	r7, sp, #0
 8017ffc:	6078      	str	r0, [r7, #4]
 8017ffe:	6039      	str	r1, [r7, #0]
 8018000:	683b      	ldr	r3, [r7, #0]
 8018002:	4618      	mov	r0, r3
 8018004:	370c      	adds	r7, #12
 8018006:	46bd      	mov	sp, r7
 8018008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801800c:	4770      	bx	lr

0801800e <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 801800e:	b580      	push	{r7, lr}
 8018010:	b082      	sub	sp, #8
 8018012:	af00      	add	r7, sp, #0
 8018014:	6078      	str	r0, [r7, #4]
 8018016:	6039      	str	r1, [r7, #0]
 8018018:	2100      	movs	r1, #0
 801801a:	6878      	ldr	r0, [r7, #4]
 801801c:	f7f3 f972 	bl	800b304 <_ZN18cpputest_ulonglongC1Ei>
 8018020:	6878      	ldr	r0, [r7, #4]
 8018022:	3708      	adds	r7, #8
 8018024:	46bd      	mov	sp, r7
 8018026:	bd80      	pop	{r7, pc}

08018028 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 8018028:	b480      	push	{r7}
 801802a:	b085      	sub	sp, #20
 801802c:	af00      	add	r7, sp, #0
 801802e:	60f8      	str	r0, [r7, #12]
 8018030:	60b9      	str	r1, [r7, #8]
 8018032:	4639      	mov	r1, r7
 8018034:	e881 000c 	stmia.w	r1, {r2, r3}
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	461a      	mov	r2, r3
 801803c:	463b      	mov	r3, r7
 801803e:	cb03      	ldmia	r3!, {r0, r1}
 8018040:	6010      	str	r0, [r2, #0]
 8018042:	6051      	str	r1, [r2, #4]
 8018044:	68f8      	ldr	r0, [r7, #12]
 8018046:	3714      	adds	r7, #20
 8018048:	46bd      	mov	sp, r7
 801804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801804e:	4770      	bx	lr

08018050 <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 8018050:	b580      	push	{r7, lr}
 8018052:	b082      	sub	sp, #8
 8018054:	af00      	add	r7, sp, #0
 8018056:	6078      	str	r0, [r7, #4]
 8018058:	6039      	str	r1, [r7, #0]
 801805a:	2100      	movs	r1, #0
 801805c:	6878      	ldr	r0, [r7, #4]
 801805e:	f7f3 f945 	bl	800b2ec <_ZN17cpputest_longlongC1Ei>
 8018062:	6878      	ldr	r0, [r7, #4]
 8018064:	3708      	adds	r7, #8
 8018066:	46bd      	mov	sp, r7
 8018068:	bd80      	pop	{r7, pc}

0801806a <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 801806a:	b480      	push	{r7}
 801806c:	b085      	sub	sp, #20
 801806e:	af00      	add	r7, sp, #0
 8018070:	60f8      	str	r0, [r7, #12]
 8018072:	60b9      	str	r1, [r7, #8]
 8018074:	4639      	mov	r1, r7
 8018076:	e881 000c 	stmia.w	r1, {r2, r3}
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	461a      	mov	r2, r3
 801807e:	463b      	mov	r3, r7
 8018080:	cb03      	ldmia	r3!, {r0, r1}
 8018082:	6010      	str	r0, [r2, #0]
 8018084:	6051      	str	r1, [r2, #4]
 8018086:	68f8      	ldr	r0, [r7, #12]
 8018088:	3714      	adds	r7, #20
 801808a:	46bd      	mov	sp, r7
 801808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018090:	4770      	bx	lr

08018092 <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 8018092:	b480      	push	{r7}
 8018094:	b083      	sub	sp, #12
 8018096:	af00      	add	r7, sp, #0
 8018098:	6078      	str	r0, [r7, #4]
 801809a:	2300      	movs	r3, #0
 801809c:	4618      	mov	r0, r3
 801809e:	370c      	adds	r7, #12
 80180a0:	46bd      	mov	sp, r7
 80180a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180a6:	4770      	bx	lr

080180a8 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 80180a8:	b480      	push	{r7}
 80180aa:	b083      	sub	sp, #12
 80180ac:	af00      	add	r7, sp, #0
 80180ae:	6078      	str	r0, [r7, #4]
 80180b0:	6039      	str	r1, [r7, #0]
 80180b2:	683b      	ldr	r3, [r7, #0]
 80180b4:	4618      	mov	r0, r3
 80180b6:	370c      	adds	r7, #12
 80180b8:	46bd      	mov	sp, r7
 80180ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180be:	4770      	bx	lr

080180c0 <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 80180c0:	b480      	push	{r7}
 80180c2:	b083      	sub	sp, #12
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	6078      	str	r0, [r7, #4]
 80180c8:	f04f 0200 	mov.w	r2, #0
 80180cc:	f04f 0300 	mov.w	r3, #0
 80180d0:	ec43 2b17 	vmov	d7, r2, r3
 80180d4:	eeb0 0a47 	vmov.f32	s0, s14
 80180d8:	eef0 0a67 	vmov.f32	s1, s15
 80180dc:	370c      	adds	r7, #12
 80180de:	46bd      	mov	sp, r7
 80180e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180e4:	4770      	bx	lr

080180e6 <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 80180e6:	b480      	push	{r7}
 80180e8:	b085      	sub	sp, #20
 80180ea:	af00      	add	r7, sp, #0
 80180ec:	60f8      	str	r0, [r7, #12]
 80180ee:	ed87 0b00 	vstr	d0, [r7]
 80180f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80180f6:	ec43 2b17 	vmov	d7, r2, r3
 80180fa:	eeb0 0a47 	vmov.f32	s0, s14
 80180fe:	eef0 0a67 	vmov.f32	s1, s15
 8018102:	3714      	adds	r7, #20
 8018104:	46bd      	mov	sp, r7
 8018106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801810a:	4770      	bx	lr

0801810c <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 801810c:	b480      	push	{r7}
 801810e:	b083      	sub	sp, #12
 8018110:	af00      	add	r7, sp, #0
 8018112:	6078      	str	r0, [r7, #4]
 8018114:	4b03      	ldr	r3, [pc, #12]	; (8018124 <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 8018116:	4618      	mov	r0, r3
 8018118:	370c      	adds	r7, #12
 801811a:	46bd      	mov	sp, r7
 801811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018120:	4770      	bx	lr
 8018122:	bf00      	nop
 8018124:	08026658 	.word	0x08026658

08018128 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 8018128:	b480      	push	{r7}
 801812a:	b083      	sub	sp, #12
 801812c:	af00      	add	r7, sp, #0
 801812e:	6078      	str	r0, [r7, #4]
 8018130:	6039      	str	r1, [r7, #0]
 8018132:	683b      	ldr	r3, [r7, #0]
 8018134:	4618      	mov	r0, r3
 8018136:	370c      	adds	r7, #12
 8018138:	46bd      	mov	sp, r7
 801813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801813e:	4770      	bx	lr

08018140 <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 8018140:	b480      	push	{r7}
 8018142:	b083      	sub	sp, #12
 8018144:	af00      	add	r7, sp, #0
 8018146:	6078      	str	r0, [r7, #4]
 8018148:	2300      	movs	r3, #0
 801814a:	4618      	mov	r0, r3
 801814c:	370c      	adds	r7, #12
 801814e:	46bd      	mov	sp, r7
 8018150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018154:	4770      	bx	lr

08018156 <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 8018156:	b480      	push	{r7}
 8018158:	b083      	sub	sp, #12
 801815a:	af00      	add	r7, sp, #0
 801815c:	6078      	str	r0, [r7, #4]
 801815e:	6039      	str	r1, [r7, #0]
 8018160:	683b      	ldr	r3, [r7, #0]
 8018162:	4618      	mov	r0, r3
 8018164:	370c      	adds	r7, #12
 8018166:	46bd      	mov	sp, r7
 8018168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801816c:	4770      	bx	lr

0801816e <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 801816e:	b480      	push	{r7}
 8018170:	b083      	sub	sp, #12
 8018172:	af00      	add	r7, sp, #0
 8018174:	6078      	str	r0, [r7, #4]
 8018176:	2300      	movs	r3, #0
 8018178:	4618      	mov	r0, r3
 801817a:	370c      	adds	r7, #12
 801817c:	46bd      	mov	sp, r7
 801817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018182:	4770      	bx	lr

08018184 <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 8018184:	b480      	push	{r7}
 8018186:	b083      	sub	sp, #12
 8018188:	af00      	add	r7, sp, #0
 801818a:	6078      	str	r0, [r7, #4]
 801818c:	6039      	str	r1, [r7, #0]
 801818e:	683b      	ldr	r3, [r7, #0]
 8018190:	4618      	mov	r0, r3
 8018192:	370c      	adds	r7, #12
 8018194:	46bd      	mov	sp, r7
 8018196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801819a:	4770      	bx	lr

0801819c <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 801819c:	b480      	push	{r7}
 801819e:	b083      	sub	sp, #12
 80181a0:	af00      	add	r7, sp, #0
 80181a2:	6078      	str	r0, [r7, #4]
 80181a4:	2300      	movs	r3, #0
 80181a6:	4618      	mov	r0, r3
 80181a8:	370c      	adds	r7, #12
 80181aa:	46bd      	mov	sp, r7
 80181ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181b0:	4770      	bx	lr

080181b2 <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 80181b2:	b480      	push	{r7}
 80181b4:	b083      	sub	sp, #12
 80181b6:	af00      	add	r7, sp, #0
 80181b8:	6078      	str	r0, [r7, #4]
 80181ba:	6039      	str	r1, [r7, #0]
 80181bc:	683b      	ldr	r3, [r7, #0]
 80181be:	4618      	mov	r0, r3
 80181c0:	370c      	adds	r7, #12
 80181c2:	46bd      	mov	sp, r7
 80181c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181c8:	4770      	bx	lr

080181ca <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 80181ca:	b480      	push	{r7}
 80181cc:	b083      	sub	sp, #12
 80181ce:	af00      	add	r7, sp, #0
 80181d0:	6078      	str	r0, [r7, #4]
 80181d2:	6039      	str	r1, [r7, #0]
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	4618      	mov	r0, r3
 80181d8:	370c      	adds	r7, #12
 80181da:	46bd      	mov	sp, r7
 80181dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e0:	4770      	bx	lr
	...

080181e4 <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 80181e4:	b480      	push	{r7}
 80181e6:	b083      	sub	sp, #12
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	6078      	str	r0, [r7, #4]
 80181ec:	4a04      	ldr	r2, [pc, #16]	; (8018200 <_ZN14MockActualCallC1Ev+0x1c>)
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	601a      	str	r2, [r3, #0]
{
}
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	4618      	mov	r0, r3
 80181f6:	370c      	adds	r7, #12
 80181f8:	46bd      	mov	sp, r7
 80181fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181fe:	4770      	bx	lr
 8018200:	0802974c 	.word	0x0802974c

08018204 <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 8018204:	b480      	push	{r7}
 8018206:	b083      	sub	sp, #12
 8018208:	af00      	add	r7, sp, #0
 801820a:	6078      	str	r0, [r7, #4]
 801820c:	4a04      	ldr	r2, [pc, #16]	; (8018220 <_ZN14MockActualCallD1Ev+0x1c>)
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	601a      	str	r2, [r3, #0]
{
}
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	4618      	mov	r0, r3
 8018216:	370c      	adds	r7, #12
 8018218:	46bd      	mov	sp, r7
 801821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801821e:	4770      	bx	lr
 8018220:	0802974c 	.word	0x0802974c

08018224 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 8018224:	b580      	push	{r7, lr}
 8018226:	b082      	sub	sp, #8
 8018228:	af00      	add	r7, sp, #0
 801822a:	6078      	str	r0, [r7, #4]
 801822c:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	3304      	adds	r3, #4
 8018232:	6839      	ldr	r1, [r7, #0]
 8018234:	4618      	mov	r0, r3
 8018236:	f7f5 f88e 	bl	800d356 <_ZN12SimpleStringaSERKS_>
}
 801823a:	bf00      	nop
 801823c:	3708      	adds	r7, #8
 801823e:	46bd      	mov	sp, r7
 8018240:	bd80      	pop	{r7, pc}

08018242 <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 8018242:	b580      	push	{r7, lr}
 8018244:	b082      	sub	sp, #8
 8018246:	af00      	add	r7, sp, #0
 8018248:	6078      	str	r0, [r7, #4]
 801824a:	6039      	str	r1, [r7, #0]
    return functionName_;
 801824c:	683b      	ldr	r3, [r7, #0]
 801824e:	3304      	adds	r3, #4
 8018250:	4619      	mov	r1, r3
 8018252:	6878      	ldr	r0, [r7, #4]
 8018254:	f7f5 f867 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
}
 8018258:	6878      	ldr	r0, [r7, #4]
 801825a:	3708      	adds	r7, #8
 801825c:	46bd      	mov	sp, r7
 801825e:	bd80      	pop	{r7, pc}

08018260 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 8018260:	b580      	push	{r7, lr}
 8018262:	b084      	sub	sp, #16
 8018264:	af00      	add	r7, sp, #0
 8018266:	60f8      	str	r0, [r7, #12]
 8018268:	60b9      	str	r1, [r7, #8]
 801826a:	607a      	str	r2, [r7, #4]
 801826c:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 801826e:	68fb      	ldr	r3, [r7, #12]
 8018270:	4618      	mov	r0, r3
 8018272:	f7ff ffb7 	bl	80181e4 <_ZN14MockActualCallC1Ev>
 8018276:	4a17      	ldr	r2, [pc, #92]	; (80182d4 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	601a      	str	r2, [r3, #0]
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	3304      	adds	r3, #4
 8018280:	4915      	ldr	r1, [pc, #84]	; (80182d8 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 8018282:	4618      	mov	r0, r3
 8018284:	f7f4 fffb 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	68ba      	ldr	r2, [r7, #8]
 801828c:	60da      	str	r2, [r3, #12]
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	687a      	ldr	r2, [r7, #4]
 8018292:	611a      	str	r2, [r3, #16]
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	2202      	movs	r2, #2
 8018298:	751a      	strb	r2, [r3, #20]
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	2200      	movs	r2, #0
 801829e:	755a      	strb	r2, [r3, #21]
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	2200      	movs	r2, #0
 80182a4:	619a      	str	r2, [r3, #24]
 80182a6:	68fb      	ldr	r3, [r7, #12]
 80182a8:	331c      	adds	r3, #28
 80182aa:	4618      	mov	r0, r3
 80182ac:	f004 f814 	bl	801c2d8 <_ZN21MockExpectedCallsListC1Ev>
 80182b0:	68fb      	ldr	r3, [r7, #12]
 80182b2:	683a      	ldr	r2, [r7, #0]
 80182b4:	625a      	str	r2, [r3, #36]	; 0x24
 80182b6:	68fb      	ldr	r3, [r7, #12]
 80182b8:	2200      	movs	r2, #0
 80182ba:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 80182bc:	68fb      	ldr	r3, [r7, #12]
 80182be:	331c      	adds	r3, #28
 80182c0:	6839      	ldr	r1, [r7, #0]
 80182c2:	4618      	mov	r0, r3
 80182c4:	f004 f986 	bl	801c5d4 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	4618      	mov	r0, r3
 80182cc:	3710      	adds	r7, #16
 80182ce:	46bd      	mov	sp, r7
 80182d0:	bd80      	pop	{r7, pc}
 80182d2:	bf00      	nop
 80182d4:	0802964c 	.word	0x0802964c
 80182d8:	08026658 	.word	0x08026658

080182dc <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 80182dc:	b580      	push	{r7, lr}
 80182de:	b082      	sub	sp, #8
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	6078      	str	r0, [r7, #4]
 80182e4:	4a0c      	ldr	r2, [pc, #48]	; (8018318 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 80182ea:	6878      	ldr	r0, [r7, #4]
 80182ec:	f001 fae4 	bl	80198b8 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	331c      	adds	r3, #28
 80182f4:	4618      	mov	r0, r3
 80182f6:	f004 f803 	bl	801c300 <_ZN21MockExpectedCallsListD1Ev>
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	3304      	adds	r3, #4
 80182fe:	4618      	mov	r0, r3
 8018300:	f7f5 fb75 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	4618      	mov	r0, r3
 8018308:	f7ff ff7c 	bl	8018204 <_ZN14MockActualCallD1Ev>
}
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	4618      	mov	r0, r3
 8018310:	3708      	adds	r7, #8
 8018312:	46bd      	mov	sp, r7
 8018314:	bd80      	pop	{r7, pc}
 8018316:	bf00      	nop
 8018318:	0802964c 	.word	0x0802964c

0801831c <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 801831c:	b580      	push	{r7, lr}
 801831e:	b082      	sub	sp, #8
 8018320:	af00      	add	r7, sp, #0
 8018322:	6078      	str	r0, [r7, #4]
}
 8018324:	6878      	ldr	r0, [r7, #4]
 8018326:	f7ff ffd9 	bl	80182dc <_ZN21MockCheckedActualCallD1Ev>
 801832a:	212c      	movs	r1, #44	; 0x2c
 801832c:	6878      	ldr	r0, [r7, #4]
 801832e:	f7f2 fbf7 	bl	800ab20 <_ZdlPvj>
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	4618      	mov	r0, r3
 8018336:	3708      	adds	r7, #8
 8018338:	46bd      	mov	sp, r7
 801833a:	bd80      	pop	{r7, pc}

0801833c <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 801833c:	b480      	push	{r7}
 801833e:	b083      	sub	sp, #12
 8018340:	af00      	add	r7, sp, #0
 8018342:	6078      	str	r0, [r7, #4]
 8018344:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	683a      	ldr	r2, [r7, #0]
 801834a:	611a      	str	r2, [r3, #16]
}
 801834c:	bf00      	nop
 801834e:	370c      	adds	r7, #12
 8018350:	46bd      	mov	sp, r7
 8018352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018356:	4770      	bx	lr

08018358 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 8018358:	b580      	push	{r7, lr}
 801835a:	b082      	sub	sp, #8
 801835c:	af00      	add	r7, sp, #0
 801835e:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	691a      	ldr	r2, [r3, #16]
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	691b      	ldr	r3, [r3, #16]
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	330c      	adds	r3, #12
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	4610      	mov	r0, r2
 8018370:	4798      	blx	r3
 8018372:	4603      	mov	r3, r0
}
 8018374:	4618      	mov	r0, r3
 8018376:	3708      	adds	r7, #8
 8018378:	46bd      	mov	sp, r7
 801837a:	bd80      	pop	{r7, pc}

0801837c <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 801837c:	b580      	push	{r7, lr}
 801837e:	b082      	sub	sp, #8
 8018380:	af00      	add	r7, sp, #0
 8018382:	6078      	str	r0, [r7, #4]
 8018384:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	33c0      	adds	r3, #192	; 0xc0
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	6878      	ldr	r0, [r7, #4]
 8018390:	4798      	blx	r3
 8018392:	4603      	mov	r3, r0
 8018394:	f083 0301 	eor.w	r3, r3, #1
 8018398:	b2db      	uxtb	r3, r3
 801839a:	2b00      	cmp	r3, #0
 801839c:	d010      	beq.n	80183c0 <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	33ec      	adds	r3, #236	; 0xec
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	2101      	movs	r1, #1
 80183a8:	6878      	ldr	r0, [r7, #4]
 80183aa:	4798      	blx	r3
        reporter_->failTest(failure);
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	691a      	ldr	r2, [r3, #16]
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	691b      	ldr	r3, [r3, #16]
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	3308      	adds	r3, #8
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	6839      	ldr	r1, [r7, #0]
 80183bc:	4610      	mov	r0, r2
 80183be:	4798      	blx	r3
    }
}
 80183c0:	bf00      	nop
 80183c2:	3708      	adds	r7, #8
 80183c4:	46bd      	mov	sp, r7
 80183c6:	bd80      	pop	{r7, pc}

080183c8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 80183c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183cc:	b0bc      	sub	sp, #240	; 0xf0
 80183ce:	af00      	add	r7, sp, #0
 80183d0:	6078      	str	r0, [r7, #4]
 80183d2:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80183d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80183dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	f000 80f5 	beq.w	80185d0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 80183e6:	683b      	ldr	r3, [r7, #0]
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	339c      	adds	r3, #156	; 0x9c
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80183f2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80183f6:	6839      	ldr	r1, [r7, #0]
 80183f8:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 80183fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80183fe:	4618      	mov	r0, r3
 8018400:	f006 fa6e 	bl	801e8e0 <_ZNK14MockNamedValue9getCopierEv>
 8018404:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 8018408:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801840c:	2b00      	cmp	r3, #0
 801840e:	d013      	beq.n	8018438 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 8018410:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	3308      	adds	r3, #8
 8018418:	681c      	ldr	r4, [r3, #0]
 801841a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801841e:	691d      	ldr	r5, [r3, #16]
 8018420:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018424:	4618      	mov	r0, r3
 8018426:	f006 fa2b 	bl	801e880 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 801842a:	4603      	mov	r3, r0
 801842c:	461a      	mov	r2, r3
 801842e:	4629      	mov	r1, r5
 8018430:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8018434:	47a0      	blx	r4
 8018436:	e0c0      	b.n	80185ba <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 8018438:	2500      	movs	r5, #0
 801843a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801843e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018442:	4611      	mov	r1, r2
 8018444:	4618      	mov	r0, r3
 8018446:	f005 ff0e 	bl	801e266 <_ZNK14MockNamedValue7getTypeEv>
 801844a:	2601      	movs	r6, #1
 801844c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8018450:	4962      	ldr	r1, [pc, #392]	; (80185dc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 8018452:	4618      	mov	r0, r3
 8018454:	f7f4 ff13 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8018458:	f04f 0801 	mov.w	r8, #1
 801845c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8018460:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8018464:	4611      	mov	r1, r2
 8018466:	4618      	mov	r0, r3
 8018468:	f7f5 facd 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801846c:	4603      	mov	r3, r0
 801846e:	2b00      	cmp	r3, #0
 8018470:	d015      	beq.n	801849e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8018472:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8018476:	f103 0408 	add.w	r4, r3, #8
 801847a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801847e:	4958      	ldr	r1, [pc, #352]	; (80185e0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 8018480:	4618      	mov	r0, r3
 8018482:	f7f4 fefc 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8018486:	2501      	movs	r5, #1
 8018488:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801848c:	4619      	mov	r1, r3
 801848e:	4620      	mov	r0, r4
 8018490:	f7f5 fab9 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 8018494:	4603      	mov	r3, r0
 8018496:	2b00      	cmp	r3, #0
 8018498:	d001      	beq.n	801849e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 801849a:	2401      	movs	r4, #1
 801849c:	e000      	b.n	80184a0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 801849e:	2400      	movs	r4, #0
 80184a0:	2d00      	cmp	r5, #0
 80184a2:	d004      	beq.n	80184ae <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 80184a4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80184a8:	4618      	mov	r0, r3
 80184aa:	f7f5 faa0 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80184ae:	f1b8 0f00 	cmp.w	r8, #0
 80184b2:	d004      	beq.n	80184be <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 80184b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80184b8:	4618      	mov	r0, r3
 80184ba:	f7f5 fa98 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80184be:	2e00      	cmp	r6, #0
 80184c0:	d004      	beq.n	80184cc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 80184c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80184c6:	4618      	mov	r0, r3
 80184c8:	f7f5 fa91 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80184cc:	2c00      	cmp	r4, #0
 80184ce:	d018      	beq.n	8018502 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 80184d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80184d4:	4618      	mov	r0, r3
 80184d6:	f006 f95b 	bl	801e790 <_ZNK14MockNamedValue20getConstPointerValueEv>
 80184da:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 80184de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80184e2:	4618      	mov	r0, r3
 80184e4:	f006 f9e4 	bl	801e8b0 <_ZNK14MockNamedValue7getSizeEv>
 80184e8:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 80184ec:	4b3d      	ldr	r3, [pc, #244]	; (80185e4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80184f4:	6910      	ldr	r0, [r2, #16]
 80184f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80184fa:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80184fe:	4798      	blx	r3
 8018500:	e05b      	b.n	80185ba <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 8018502:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8018506:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801850a:	4611      	mov	r1, r2
 801850c:	4618      	mov	r0, r3
 801850e:	f005 fe9b 	bl	801e248 <_ZNK14MockNamedValue7getNameEv>
 8018512:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8018516:	4934      	ldr	r1, [pc, #208]	; (80185e8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 8018518:	4618      	mov	r0, r3
 801851a:	f7f4 feb0 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801851e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8018522:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8018526:	4611      	mov	r1, r2
 8018528:	4618      	mov	r0, r3
 801852a:	f7f5 fab1 	bl	800da90 <_ZneRK12SimpleStringS1_>
 801852e:	4603      	mov	r3, r0
 8018530:	461c      	mov	r4, r3
 8018532:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8018536:	4618      	mov	r0, r3
 8018538:	f7f5 fa59 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801853c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8018540:	4618      	mov	r0, r3
 8018542:	f7f5 fa54 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8018546:	2c00      	cmp	r4, #0
 8018548:	d037      	beq.n	80185ba <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 801854a:	683b      	ldr	r3, [r7, #0]
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	339c      	adds	r3, #156	; 0x9c
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8018556:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 801855a:	6839      	ldr	r1, [r7, #0]
 801855c:	4798      	blx	r3
 801855e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8018562:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8018566:	4611      	mov	r1, r2
 8018568:	4618      	mov	r0, r3
 801856a:	f005 fe7c 	bl	801e266 <_ZNK14MockNamedValue7getTypeEv>
 801856e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8018572:	4618      	mov	r0, r3
 8018574:	f005 fbd2 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	33cc      	adds	r3, #204	; 0xcc
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	6878      	ldr	r0, [r7, #4]
 8018582:	4798      	blx	r3
 8018584:	4601      	mov	r1, r0
 8018586:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801858a:	f107 030c 	add.w	r3, r7, #12
 801858e:	4618      	mov	r0, r3
 8018590:	f005 faee 	bl	801db70 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	33dc      	adds	r3, #220	; 0xdc
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	f107 020c 	add.w	r2, r7, #12
 80185a0:	4611      	mov	r1, r2
 80185a2:	6878      	ldr	r0, [r7, #4]
 80185a4:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 80185a6:	f107 030c 	add.w	r3, r7, #12
 80185aa:	4618      	mov	r0, r3
 80185ac:	f001 ffe2 	bl	801a574 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 80185b0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80185b4:	4618      	mov	r0, r3
 80185b6:	f7f5 fa1a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 80185ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80185be:	4618      	mov	r0, r3
 80185c0:	f005 fbac 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 80185c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80185c8:	695b      	ldr	r3, [r3, #20]
 80185ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80185ce:	e705      	b.n	80183dc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 80185d0:	bf00      	nop
 80185d2:	37f0      	adds	r7, #240	; 0xf0
 80185d4:	46bd      	mov	sp, r7
 80185d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185da:	bf00      	nop
 80185dc:	0802665c 	.word	0x0802665c
 80185e0:	08026668 	.word	0x08026668
 80185e4:	200000d4 	.word	0x200000d4
 80185e8:	08026658 	.word	0x08026658

080185ec <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 80185ec:	b580      	push	{r7, lr}
 80185ee:	b084      	sub	sp, #16
 80185f0:	af00      	add	r7, sp, #0
 80185f2:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	331c      	adds	r3, #28
 80185f8:	4618      	mov	r0, r3
 80185fa:	f004 f9bb 	bl	801c974 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 80185fe:	4602      	mov	r2, r0
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	699b      	ldr	r3, [r3, #24]
 8018608:	2b00      	cmp	r3, #0
 801860a:	d00f      	beq.n	801862c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	33d4      	adds	r3, #212	; 0xd4
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	687a      	ldr	r2, [r7, #4]
 8018616:	6992      	ldr	r2, [r2, #24]
 8018618:	4611      	mov	r1, r2
 801861a:	6878      	ldr	r0, [r7, #4]
 801861c:	4798      	blx	r3
        callHasSucceeded();
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	33d0      	adds	r3, #208	; 0xd0
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	6878      	ldr	r0, [r7, #4]
 8018628:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 801862a:	e00f      	b.n	801864c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	331c      	adds	r3, #28
 8018630:	4618      	mov	r0, r3
 8018632:	f004 f9cc 	bl	801c9ce <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 8018636:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	2b00      	cmp	r3, #0
 801863c:	d006      	beq.n	801864c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	33d4      	adds	r3, #212	; 0xd4
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	68f9      	ldr	r1, [r7, #12]
 8018648:	6878      	ldr	r0, [r7, #4]
 801864a:	4798      	blx	r3
}
 801864c:	bf00      	nop
 801864e:	3710      	adds	r7, #16
 8018650:	46bd      	mov	sp, r7
 8018652:	bd80      	pop	{r7, pc}

08018654 <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 8018654:	b580      	push	{r7, lr}
 8018656:	b082      	sub	sp, #8
 8018658:	af00      	add	r7, sp, #0
 801865a:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	33ec      	adds	r3, #236	; 0xec
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	2102      	movs	r1, #2
 8018666:	6878      	ldr	r0, [r7, #4]
 8018668:	4798      	blx	r3
}
 801866a:	bf00      	nop
 801866c:	3708      	adds	r7, #8
 801866e:	46bd      	mov	sp, r7
 8018670:	bd80      	pop	{r7, pc}

08018672 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 8018672:	b580      	push	{r7, lr}
 8018674:	b082      	sub	sp, #8
 8018676:	af00      	add	r7, sp, #0
 8018678:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	699b      	ldr	r3, [r3, #24]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d00b      	beq.n	801869a <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	699a      	ldr	r2, [r3, #24]
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	699b      	ldr	r3, [r3, #24]
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	33ec      	adds	r3, #236	; 0xec
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	4610      	mov	r0, r2
 8018692:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	2200      	movs	r2, #0
 8018698:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	331c      	adds	r3, #28
 801869e:	4618      	mov	r0, r3
 80186a0:	f004 f85c 	bl	801c75c <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 80186a4:	bf00      	nop
 80186a6:	3708      	adds	r7, #8
 80186a8:	46bd      	mov	sp, r7
 80186aa:	bd80      	pop	{r7, pc}

080186ac <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 80186ac:	b590      	push	{r4, r7, lr}
 80186ae:	b091      	sub	sp, #68	; 0x44
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	6078      	str	r0, [r7, #4]
 80186b4:	6039      	str	r1, [r7, #0]
    setName(name);
 80186b6:	6839      	ldr	r1, [r7, #0]
 80186b8:	6878      	ldr	r0, [r7, #4]
 80186ba:	f7ff fdb3 	bl	8018224 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	33ec      	adds	r3, #236	; 0xec
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	2100      	movs	r1, #0
 80186c8:	6878      	ldr	r0, [r7, #4]
 80186ca:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	331c      	adds	r3, #28
 80186d0:	6839      	ldr	r1, [r7, #0]
 80186d2:	4618      	mov	r0, r3
 80186d4:	f003 ffec 	bl	801c6b0 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	331c      	adds	r3, #28
 80186dc:	4618      	mov	r0, r3
 80186de:	f003 fe7c 	bl	801c3da <_ZNK21MockExpectedCallsList7isEmptyEv>
 80186e2:	4603      	mov	r3, r0
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d01d      	beq.n	8018724 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	33cc      	adds	r3, #204	; 0xcc
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	6878      	ldr	r0, [r7, #4]
 80186f2:	4798      	blx	r3
 80186f4:	4601      	mov	r1, r0
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186fa:	f107 000c 	add.w	r0, r7, #12
 80186fe:	683a      	ldr	r2, [r7, #0]
 8018700:	f004 fe24 	bl	801d34c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	33dc      	adds	r3, #220	; 0xdc
 801870a:	681b      	ldr	r3, [r3, #0]
 801870c:	f107 020c 	add.w	r2, r7, #12
 8018710:	4611      	mov	r1, r2
 8018712:	6878      	ldr	r0, [r7, #4]
 8018714:	4798      	blx	r3
        return *this;
 8018716:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8018718:	f107 030c 	add.w	r3, r7, #12
 801871c:	4618      	mov	r0, r3
 801871e:	f001 ff4b 	bl	801a5b8 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8018722:	e006      	b.n	8018732 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	33d8      	adds	r3, #216	; 0xd8
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	6878      	ldr	r0, [r7, #4]
 801872e:	4798      	blx	r3

    return *this;
 8018730:	687c      	ldr	r4, [r7, #4]
 8018732:	4623      	mov	r3, r4
}
 8018734:	4618      	mov	r0, r3
 8018736:	3744      	adds	r7, #68	; 0x44
 8018738:	46bd      	mov	sp, r7
 801873a:	bd90      	pop	{r4, r7, pc}

0801873c <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 801873c:	b480      	push	{r7}
 801873e:	b083      	sub	sp, #12
 8018740:	af00      	add	r7, sp, #0
 8018742:	6078      	str	r0, [r7, #4]
 8018744:	6039      	str	r1, [r7, #0]
    return *this;
 8018746:	687b      	ldr	r3, [r7, #4]
}
 8018748:	4618      	mov	r0, r3
 801874a:	370c      	adds	r7, #12
 801874c:	46bd      	mov	sp, r7
 801874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018752:	4770      	bx	lr

08018754 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 8018754:	b590      	push	{r4, r7, lr}
 8018756:	b097      	sub	sp, #92	; 0x5c
 8018758:	af02      	add	r7, sp, #8
 801875a:	6078      	str	r0, [r7, #4]
 801875c:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	33c0      	adds	r3, #192	; 0xc0
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	6878      	ldr	r0, [r7, #4]
 8018768:	4798      	blx	r3
 801876a:	4603      	mov	r3, r0
 801876c:	2b00      	cmp	r3, #0
 801876e:	d164      	bne.n	801883a <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	33ec      	adds	r3, #236	; 0xec
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	2100      	movs	r1, #0
 801877a:	6878      	ldr	r0, [r7, #4]
 801877c:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	33e8      	adds	r3, #232	; 0xe8
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	6878      	ldr	r0, [r7, #4]
 8018788:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	331c      	adds	r3, #28
 801878e:	6839      	ldr	r1, [r7, #0]
 8018790:	4618      	mov	r0, r3
 8018792:	f004 f86b 	bl	801c86c <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	331c      	adds	r3, #28
 801879a:	4618      	mov	r0, r3
 801879c:	f003 fe1d 	bl	801c3da <_ZNK21MockExpectedCallsList7isEmptyEv>
 80187a0:	4603      	mov	r3, r0
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	d02b      	beq.n	80187fe <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	33cc      	adds	r3, #204	; 0xcc
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	6878      	ldr	r0, [r7, #4]
 80187b0:	4798      	blx	r3
 80187b2:	4604      	mov	r4, r0
 80187b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80187b8:	6879      	ldr	r1, [r7, #4]
 80187ba:	4618      	mov	r0, r3
 80187bc:	f7ff fd41 	bl	8018242 <_ZNK21MockCheckedActualCall7getNameEv>
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187c4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80187c8:	f107 000c 	add.w	r0, r7, #12
 80187cc:	9300      	str	r3, [sp, #0]
 80187ce:	683b      	ldr	r3, [r7, #0]
 80187d0:	4621      	mov	r1, r4
 80187d2:	f004 fe7f 	bl	801d4d4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 80187d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80187da:	4618      	mov	r0, r3
 80187dc:	f7f5 f907 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	33dc      	adds	r3, #220	; 0xdc
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	f107 020c 	add.w	r2, r7, #12
 80187ec:	4611      	mov	r1, r2
 80187ee:	6878      	ldr	r0, [r7, #4]
 80187f0:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 80187f2:	f107 030c 	add.w	r3, r7, #12
 80187f6:	4618      	mov	r0, r3
 80187f8:	f001 ff00 	bl	801a5fc <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 80187fc:	e01e      	b.n	801883c <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	f103 041c 	add.w	r4, r3, #28
 8018804:	683b      	ldr	r3, [r7, #0]
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	335c      	adds	r3, #92	; 0x5c
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018810:	6839      	ldr	r1, [r7, #0]
 8018812:	4610      	mov	r0, r2
 8018814:	4798      	blx	r3
 8018816:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801881a:	4619      	mov	r1, r3
 801881c:	4620      	mov	r0, r4
 801881e:	f004 f9b8 	bl	801cb92 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 8018822:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018826:	4618      	mov	r0, r3
 8018828:	f7f5 f8e1 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	33d8      	adds	r3, #216	; 0xd8
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	6878      	ldr	r0, [r7, #4]
 8018836:	4798      	blx	r3
 8018838:	e000      	b.n	801883c <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 801883a:	bf00      	nop
}
 801883c:	3754      	adds	r7, #84	; 0x54
 801883e:	46bd      	mov	sp, r7
 8018840:	bd90      	pop	{r4, r7, pc}

08018842 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 8018842:	b590      	push	{r4, r7, lr}
 8018844:	b097      	sub	sp, #92	; 0x5c
 8018846:	af02      	add	r7, sp, #8
 8018848:	6078      	str	r0, [r7, #4]
 801884a:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	33c0      	adds	r3, #192	; 0xc0
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	6878      	ldr	r0, [r7, #4]
 8018856:	4798      	blx	r3
 8018858:	4603      	mov	r3, r0
 801885a:	2b00      	cmp	r3, #0
 801885c:	d164      	bne.n	8018928 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	33ec      	adds	r3, #236	; 0xec
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	2100      	movs	r1, #0
 8018868:	6878      	ldr	r0, [r7, #4]
 801886a:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	33e8      	adds	r3, #232	; 0xe8
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	6878      	ldr	r0, [r7, #4]
 8018876:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	331c      	adds	r3, #28
 801887c:	6839      	ldr	r1, [r7, #0]
 801887e:	4618      	mov	r0, r3
 8018880:	f004 f820 	bl	801c8c4 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	331c      	adds	r3, #28
 8018888:	4618      	mov	r0, r3
 801888a:	f003 fda6 	bl	801c3da <_ZNK21MockExpectedCallsList7isEmptyEv>
 801888e:	4603      	mov	r3, r0
 8018890:	2b00      	cmp	r3, #0
 8018892:	d02b      	beq.n	80188ec <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	33cc      	adds	r3, #204	; 0xcc
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	6878      	ldr	r0, [r7, #4]
 801889e:	4798      	blx	r3
 80188a0:	4604      	mov	r4, r0
 80188a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80188a6:	6879      	ldr	r1, [r7, #4]
 80188a8:	4618      	mov	r0, r3
 80188aa:	f7ff fcca 	bl	8018242 <_ZNK21MockCheckedActualCall7getNameEv>
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188b2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80188b6:	f107 000c 	add.w	r0, r7, #12
 80188ba:	9300      	str	r3, [sp, #0]
 80188bc:	683b      	ldr	r3, [r7, #0]
 80188be:	4621      	mov	r1, r4
 80188c0:	f004 ff6a 	bl	801d798 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 80188c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80188c8:	4618      	mov	r0, r3
 80188ca:	f7f5 f890 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	33dc      	adds	r3, #220	; 0xdc
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	f107 020c 	add.w	r2, r7, #12
 80188da:	4611      	mov	r1, r2
 80188dc:	6878      	ldr	r0, [r7, #4]
 80188de:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 80188e0:	f107 030c 	add.w	r3, r7, #12
 80188e4:	4618      	mov	r0, r3
 80188e6:	f001 feab 	bl	801a640 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 80188ea:	e01e      	b.n	801892a <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	f103 041c 	add.w	r4, r3, #28
 80188f2:	683b      	ldr	r3, [r7, #0]
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	335c      	adds	r3, #92	; 0x5c
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80188fe:	6839      	ldr	r1, [r7, #0]
 8018900:	4610      	mov	r0, r2
 8018902:	4798      	blx	r3
 8018904:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018908:	4619      	mov	r1, r3
 801890a:	4620      	mov	r0, r4
 801890c:	f004 f95e 	bl	801cbcc <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 8018910:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018914:	4618      	mov	r0, r3
 8018916:	f7f5 f86a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	33d8      	adds	r3, #216	; 0xd8
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	6878      	ldr	r0, [r7, #4]
 8018924:	4798      	blx	r3
 8018926:	e000      	b.n	801892a <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 8018928:	bf00      	nop
}
 801892a:	3754      	adds	r7, #84	; 0x54
 801892c:	46bd      	mov	sp, r7
 801892e:	bd90      	pop	{r4, r7, pc}

08018930 <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 8018930:	b590      	push	{r4, r7, lr}
 8018932:	b093      	sub	sp, #76	; 0x4c
 8018934:	af00      	add	r7, sp, #0
 8018936:	60f8      	str	r0, [r7, #12]
 8018938:	60b9      	str	r1, [r7, #8]
 801893a:	4613      	mov	r3, r2
 801893c:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 801893e:	f107 0310 	add.w	r3, r7, #16
 8018942:	68b9      	ldr	r1, [r7, #8]
 8018944:	4618      	mov	r0, r3
 8018946:	f005 f9bf 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801894a:	79fa      	ldrb	r2, [r7, #7]
 801894c:	f107 0310 	add.w	r3, r7, #16
 8018950:	4611      	mov	r1, r2
 8018952:	4618      	mov	r0, r3
 8018954:	f005 fa0a 	bl	801dd6c <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 8018958:	68fb      	ldr	r3, [r7, #12]
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	33e0      	adds	r3, #224	; 0xe0
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	f107 0210 	add.w	r2, r7, #16
 8018964:	4611      	mov	r1, r2
 8018966:	68f8      	ldr	r0, [r7, #12]
 8018968:	4798      	blx	r3
    return *this;
 801896a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801896c:	f107 0310 	add.w	r3, r7, #16
 8018970:	4618      	mov	r0, r3
 8018972:	f005 f9d3 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018976:	4623      	mov	r3, r4
}
 8018978:	4618      	mov	r0, r3
 801897a:	374c      	adds	r7, #76	; 0x4c
 801897c:	46bd      	mov	sp, r7
 801897e:	bd90      	pop	{r4, r7, pc}

08018980 <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8018980:	b590      	push	{r4, r7, lr}
 8018982:	b093      	sub	sp, #76	; 0x4c
 8018984:	af00      	add	r7, sp, #0
 8018986:	60f8      	str	r0, [r7, #12]
 8018988:	60b9      	str	r1, [r7, #8]
 801898a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801898c:	f107 0310 	add.w	r3, r7, #16
 8018990:	68b9      	ldr	r1, [r7, #8]
 8018992:	4618      	mov	r0, r3
 8018994:	f005 f998 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018998:	f107 0310 	add.w	r3, r7, #16
 801899c:	6879      	ldr	r1, [r7, #4]
 801899e:	4618      	mov	r0, r3
 80189a0:	f005 fa08 	bl	801ddb4 <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	33e0      	adds	r3, #224	; 0xe0
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	f107 0210 	add.w	r2, r7, #16
 80189b0:	4611      	mov	r1, r2
 80189b2:	68f8      	ldr	r0, [r7, #12]
 80189b4:	4798      	blx	r3
    return *this;
 80189b6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80189b8:	f107 0310 	add.w	r3, r7, #16
 80189bc:	4618      	mov	r0, r3
 80189be:	f005 f9ad 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
    return *this;
 80189c2:	4623      	mov	r3, r4
}
 80189c4:	4618      	mov	r0, r3
 80189c6:	374c      	adds	r7, #76	; 0x4c
 80189c8:	46bd      	mov	sp, r7
 80189ca:	bd90      	pop	{r4, r7, pc}

080189cc <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 80189cc:	b590      	push	{r4, r7, lr}
 80189ce:	b093      	sub	sp, #76	; 0x4c
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	60f8      	str	r0, [r7, #12]
 80189d4:	60b9      	str	r1, [r7, #8]
 80189d6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80189d8:	f107 0310 	add.w	r3, r7, #16
 80189dc:	68b9      	ldr	r1, [r7, #8]
 80189de:	4618      	mov	r0, r3
 80189e0:	f005 f972 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80189e4:	f107 0310 	add.w	r3, r7, #16
 80189e8:	6879      	ldr	r1, [r7, #4]
 80189ea:	4618      	mov	r0, r3
 80189ec:	f005 fa04 	bl	801ddf8 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	33e0      	adds	r3, #224	; 0xe0
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	f107 0210 	add.w	r2, r7, #16
 80189fc:	4611      	mov	r1, r2
 80189fe:	68f8      	ldr	r0, [r7, #12]
 8018a00:	4798      	blx	r3
    return *this;
 8018a02:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018a04:	f107 0310 	add.w	r3, r7, #16
 8018a08:	4618      	mov	r0, r3
 8018a0a:	f005 f987 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018a0e:	4623      	mov	r3, r4
}
 8018a10:	4618      	mov	r0, r3
 8018a12:	374c      	adds	r7, #76	; 0x4c
 8018a14:	46bd      	mov	sp, r7
 8018a16:	bd90      	pop	{r4, r7, pc}

08018a18 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8018a18:	b590      	push	{r4, r7, lr}
 8018a1a:	b093      	sub	sp, #76	; 0x4c
 8018a1c:	af00      	add	r7, sp, #0
 8018a1e:	60f8      	str	r0, [r7, #12]
 8018a20:	60b9      	str	r1, [r7, #8]
 8018a22:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018a24:	f107 0310 	add.w	r3, r7, #16
 8018a28:	68b9      	ldr	r1, [r7, #8]
 8018a2a:	4618      	mov	r0, r3
 8018a2c:	f005 f94c 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018a30:	f107 0310 	add.w	r3, r7, #16
 8018a34:	6879      	ldr	r1, [r7, #4]
 8018a36:	4618      	mov	r0, r3
 8018a38:	f005 fa22 	bl	801de80 <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 8018a3c:	68fb      	ldr	r3, [r7, #12]
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	33e0      	adds	r3, #224	; 0xe0
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	f107 0210 	add.w	r2, r7, #16
 8018a48:	4611      	mov	r1, r2
 8018a4a:	68f8      	ldr	r0, [r7, #12]
 8018a4c:	4798      	blx	r3
    return *this;
 8018a4e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018a50:	f107 0310 	add.w	r3, r7, #16
 8018a54:	4618      	mov	r0, r3
 8018a56:	f005 f961 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018a5a:	4623      	mov	r3, r4
}
 8018a5c:	4618      	mov	r0, r3
 8018a5e:	374c      	adds	r7, #76	; 0x4c
 8018a60:	46bd      	mov	sp, r7
 8018a62:	bd90      	pop	{r4, r7, pc}

08018a64 <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8018a64:	b590      	push	{r4, r7, lr}
 8018a66:	b093      	sub	sp, #76	; 0x4c
 8018a68:	af00      	add	r7, sp, #0
 8018a6a:	60f8      	str	r0, [r7, #12]
 8018a6c:	60b9      	str	r1, [r7, #8]
 8018a6e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018a70:	f107 0310 	add.w	r3, r7, #16
 8018a74:	68b9      	ldr	r1, [r7, #8]
 8018a76:	4618      	mov	r0, r3
 8018a78:	f005 f926 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018a7c:	f107 0310 	add.w	r3, r7, #16
 8018a80:	6879      	ldr	r1, [r7, #4]
 8018a82:	4618      	mov	r0, r3
 8018a84:	f005 f9da 	bl	801de3c <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 8018a88:	68fb      	ldr	r3, [r7, #12]
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	33e0      	adds	r3, #224	; 0xe0
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	f107 0210 	add.w	r2, r7, #16
 8018a94:	4611      	mov	r1, r2
 8018a96:	68f8      	ldr	r0, [r7, #12]
 8018a98:	4798      	blx	r3
    return *this;
 8018a9a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018a9c:	f107 0310 	add.w	r3, r7, #16
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	f005 f93b 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018aa6:	4623      	mov	r3, r4
}
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	374c      	adds	r7, #76	; 0x4c
 8018aac:	46bd      	mov	sp, r7
 8018aae:	bd90      	pop	{r4, r7, pc}

08018ab0 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8018ab0:	b5b0      	push	{r4, r5, r7, lr}
 8018ab2:	b086      	sub	sp, #24
 8018ab4:	af02      	add	r7, sp, #8
 8018ab6:	60f8      	str	r0, [r7, #12]
 8018ab8:	60b9      	str	r1, [r7, #8]
 8018aba:	4639      	mov	r1, r7
 8018abc:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8018ac0:	f7fb ffc0 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8018ac4:	4604      	mov	r4, r0
 8018ac6:	6823      	ldr	r3, [r4, #0]
 8018ac8:	3368      	adds	r3, #104	; 0x68
 8018aca:	681d      	ldr	r5, [r3, #0]
 8018acc:	f7fb ffca 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018ad0:	4603      	mov	r3, r0
 8018ad2:	9300      	str	r3, [sp, #0]
 8018ad4:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8018ad8:	4a04      	ldr	r2, [pc, #16]	; (8018aec <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8018ada:	4905      	ldr	r1, [pc, #20]	; (8018af0 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8018adc:	4620      	mov	r0, r4
 8018ade:	47a8      	blx	r5
    return *this;
 8018ae0:	68fb      	ldr	r3, [r7, #12]
}
 8018ae2:	4618      	mov	r0, r3
 8018ae4:	3710      	adds	r7, #16
 8018ae6:	46bd      	mov	sp, r7
 8018ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8018aea:	bf00      	nop
 8018aec:	08026670 	.word	0x08026670
 8018af0:	0802668c 	.word	0x0802668c

08018af4 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8018af4:	b5b0      	push	{r4, r5, r7, lr}
 8018af6:	b086      	sub	sp, #24
 8018af8:	af02      	add	r7, sp, #8
 8018afa:	60f8      	str	r0, [r7, #12]
 8018afc:	60b9      	str	r1, [r7, #8]
 8018afe:	4639      	mov	r1, r7
 8018b00:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8018b04:	f7fb ff9e 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8018b08:	4604      	mov	r4, r0
 8018b0a:	6823      	ldr	r3, [r4, #0]
 8018b0c:	3368      	adds	r3, #104	; 0x68
 8018b0e:	681d      	ldr	r5, [r3, #0]
 8018b10:	f7fb ffa8 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018b14:	4603      	mov	r3, r0
 8018b16:	9300      	str	r3, [sp, #0]
 8018b18:	f44f 7388 	mov.w	r3, #272	; 0x110
 8018b1c:	4a04      	ldr	r2, [pc, #16]	; (8018b30 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8018b1e:	4905      	ldr	r1, [pc, #20]	; (8018b34 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8018b20:	4620      	mov	r0, r4
 8018b22:	47a8      	blx	r5
    return *this;
 8018b24:	68fb      	ldr	r3, [r7, #12]
}
 8018b26:	4618      	mov	r0, r3
 8018b28:	3710      	adds	r7, #16
 8018b2a:	46bd      	mov	sp, r7
 8018b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8018b2e:	bf00      	nop
 8018b30:	08026670 	.word	0x08026670
 8018b34:	080266b8 	.word	0x080266b8

08018b38 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 8018b38:	b590      	push	{r4, r7, lr}
 8018b3a:	b093      	sub	sp, #76	; 0x4c
 8018b3c:	af00      	add	r7, sp, #0
 8018b3e:	60f8      	str	r0, [r7, #12]
 8018b40:	60b9      	str	r1, [r7, #8]
 8018b42:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 8018b46:	f107 0310 	add.w	r3, r7, #16
 8018b4a:	68b9      	ldr	r1, [r7, #8]
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	f005 f8bb 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018b52:	f107 0310 	add.w	r3, r7, #16
 8018b56:	ed97 0b00 	vldr	d0, [r7]
 8018b5a:	4618      	mov	r0, r3
 8018b5c:	f005 f9f0 	bl	801df40 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	33e0      	adds	r3, #224	; 0xe0
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	f107 0210 	add.w	r2, r7, #16
 8018b6c:	4611      	mov	r1, r2
 8018b6e:	68f8      	ldr	r0, [r7, #12]
 8018b70:	4798      	blx	r3
    return *this;
 8018b72:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018b74:	f107 0310 	add.w	r3, r7, #16
 8018b78:	4618      	mov	r0, r3
 8018b7a:	f005 f8cf 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018b7e:	4623      	mov	r3, r4
}
 8018b80:	4618      	mov	r0, r3
 8018b82:	374c      	adds	r7, #76	; 0x4c
 8018b84:	46bd      	mov	sp, r7
 8018b86:	bd90      	pop	{r4, r7, pc}

08018b88 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 8018b88:	b590      	push	{r4, r7, lr}
 8018b8a:	b093      	sub	sp, #76	; 0x4c
 8018b8c:	af00      	add	r7, sp, #0
 8018b8e:	60f8      	str	r0, [r7, #12]
 8018b90:	60b9      	str	r1, [r7, #8]
 8018b92:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018b94:	f107 0310 	add.w	r3, r7, #16
 8018b98:	68b9      	ldr	r1, [r7, #8]
 8018b9a:	4618      	mov	r0, r3
 8018b9c:	f005 f894 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018ba0:	f107 0310 	add.w	r3, r7, #16
 8018ba4:	6879      	ldr	r1, [r7, #4]
 8018ba6:	4618      	mov	r0, r3
 8018ba8:	f005 fa74 	bl	801e094 <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	33e0      	adds	r3, #224	; 0xe0
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	f107 0210 	add.w	r2, r7, #16
 8018bb8:	4611      	mov	r1, r2
 8018bba:	68f8      	ldr	r0, [r7, #12]
 8018bbc:	4798      	blx	r3
    return *this;
 8018bbe:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018bc0:	f107 0310 	add.w	r3, r7, #16
 8018bc4:	4618      	mov	r0, r3
 8018bc6:	f005 f8a9 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018bca:	4623      	mov	r3, r4
}
 8018bcc:	4618      	mov	r0, r3
 8018bce:	374c      	adds	r7, #76	; 0x4c
 8018bd0:	46bd      	mov	sp, r7
 8018bd2:	bd90      	pop	{r4, r7, pc}

08018bd4 <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 8018bd4:	b590      	push	{r4, r7, lr}
 8018bd6:	b093      	sub	sp, #76	; 0x4c
 8018bd8:	af00      	add	r7, sp, #0
 8018bda:	60f8      	str	r0, [r7, #12]
 8018bdc:	60b9      	str	r1, [r7, #8]
 8018bde:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018be0:	f107 0310 	add.w	r3, r7, #16
 8018be4:	68b9      	ldr	r1, [r7, #8]
 8018be6:	4618      	mov	r0, r3
 8018be8:	f005 f86e 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018bec:	f107 0310 	add.w	r3, r7, #16
 8018bf0:	6879      	ldr	r1, [r7, #4]
 8018bf2:	4618      	mov	r0, r3
 8018bf4:	f005 f9e8 	bl	801dfc8 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	33e0      	adds	r3, #224	; 0xe0
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	f107 0210 	add.w	r2, r7, #16
 8018c04:	4611      	mov	r1, r2
 8018c06:	68f8      	ldr	r0, [r7, #12]
 8018c08:	4798      	blx	r3
    return *this;
 8018c0a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018c0c:	f107 0310 	add.w	r3, r7, #16
 8018c10:	4618      	mov	r0, r3
 8018c12:	f005 f883 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018c16:	4623      	mov	r3, r4
}
 8018c18:	4618      	mov	r0, r3
 8018c1a:	374c      	adds	r7, #76	; 0x4c
 8018c1c:	46bd      	mov	sp, r7
 8018c1e:	bd90      	pop	{r4, r7, pc}

08018c20 <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8018c20:	b590      	push	{r4, r7, lr}
 8018c22:	b093      	sub	sp, #76	; 0x4c
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	60f8      	str	r0, [r7, #12]
 8018c28:	60b9      	str	r1, [r7, #8]
 8018c2a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018c2c:	f107 0310 	add.w	r3, r7, #16
 8018c30:	68b9      	ldr	r1, [r7, #8]
 8018c32:	4618      	mov	r0, r3
 8018c34:	f005 f848 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018c38:	f107 0310 	add.w	r3, r7, #16
 8018c3c:	6879      	ldr	r1, [r7, #4]
 8018c3e:	4618      	mov	r0, r3
 8018c40:	f005 f9e4 	bl	801e00c <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 8018c44:	68fb      	ldr	r3, [r7, #12]
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	33e0      	adds	r3, #224	; 0xe0
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	f107 0210 	add.w	r2, r7, #16
 8018c50:	4611      	mov	r1, r2
 8018c52:	68f8      	ldr	r0, [r7, #12]
 8018c54:	4798      	blx	r3
    return *this;
 8018c56:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018c58:	f107 0310 	add.w	r3, r7, #16
 8018c5c:	4618      	mov	r0, r3
 8018c5e:	f005 f85d 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018c62:	4623      	mov	r3, r4
}
 8018c64:	4618      	mov	r0, r3
 8018c66:	374c      	adds	r7, #76	; 0x4c
 8018c68:	46bd      	mov	sp, r7
 8018c6a:	bd90      	pop	{r4, r7, pc}

08018c6c <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8018c6c:	b590      	push	{r4, r7, lr}
 8018c6e:	b093      	sub	sp, #76	; 0x4c
 8018c70:	af00      	add	r7, sp, #0
 8018c72:	60f8      	str	r0, [r7, #12]
 8018c74:	60b9      	str	r1, [r7, #8]
 8018c76:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018c78:	f107 0310 	add.w	r3, r7, #16
 8018c7c:	68b9      	ldr	r1, [r7, #8]
 8018c7e:	4618      	mov	r0, r3
 8018c80:	f005 f822 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018c84:	f107 0310 	add.w	r3, r7, #16
 8018c88:	6879      	ldr	r1, [r7, #4]
 8018c8a:	4618      	mov	r0, r3
 8018c8c:	f005 f9e0 	bl	801e050 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 8018c90:	68fb      	ldr	r3, [r7, #12]
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	33e0      	adds	r3, #224	; 0xe0
 8018c96:	681b      	ldr	r3, [r3, #0]
 8018c98:	f107 0210 	add.w	r2, r7, #16
 8018c9c:	4611      	mov	r1, r2
 8018c9e:	68f8      	ldr	r0, [r7, #12]
 8018ca0:	4798      	blx	r3
    return *this;
 8018ca2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018ca4:	f107 0310 	add.w	r3, r7, #16
 8018ca8:	4618      	mov	r0, r3
 8018caa:	f005 f837 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018cae:	4623      	mov	r3, r4
}
 8018cb0:	4618      	mov	r0, r3
 8018cb2:	374c      	adds	r7, #76	; 0x4c
 8018cb4:	46bd      	mov	sp, r7
 8018cb6:	bd90      	pop	{r4, r7, pc}

08018cb8 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8018cb8:	b590      	push	{r4, r7, lr}
 8018cba:	b093      	sub	sp, #76	; 0x4c
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	60f8      	str	r0, [r7, #12]
 8018cc0:	60b9      	str	r1, [r7, #8]
 8018cc2:	607a      	str	r2, [r7, #4]
 8018cc4:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8018cc6:	f107 0310 	add.w	r3, r7, #16
 8018cca:	68b9      	ldr	r1, [r7, #8]
 8018ccc:	4618      	mov	r0, r3
 8018cce:	f004 fffb 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 8018cd2:	f107 0310 	add.w	r3, r7, #16
 8018cd6:	683a      	ldr	r2, [r7, #0]
 8018cd8:	6879      	ldr	r1, [r7, #4]
 8018cda:	4618      	mov	r0, r3
 8018cdc:	f005 f9fc 	bl	801e0d8 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 8018ce0:	68fb      	ldr	r3, [r7, #12]
 8018ce2:	681b      	ldr	r3, [r3, #0]
 8018ce4:	33e0      	adds	r3, #224	; 0xe0
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	f107 0210 	add.w	r2, r7, #16
 8018cec:	4611      	mov	r1, r2
 8018cee:	68f8      	ldr	r0, [r7, #12]
 8018cf0:	4798      	blx	r3
    return *this;
 8018cf2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018cf4:	f107 0310 	add.w	r3, r7, #16
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	f005 f80f 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018cfe:	4623      	mov	r3, r4
}
 8018d00:	4618      	mov	r0, r3
 8018d02:	374c      	adds	r7, #76	; 0x4c
 8018d04:	46bd      	mov	sp, r7
 8018d06:	bd90      	pop	{r4, r7, pc}

08018d08 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8018d08:	b590      	push	{r4, r7, lr}
 8018d0a:	b0a1      	sub	sp, #132	; 0x84
 8018d0c:	af00      	add	r7, sp, #0
 8018d0e:	60f8      	str	r0, [r7, #12]
 8018d10:	60b9      	str	r1, [r7, #8]
 8018d12:	607a      	str	r2, [r7, #4]
 8018d14:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8018d16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018d1a:	6879      	ldr	r1, [r7, #4]
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	f004 ffd3 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 8018d22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018d26:	683a      	ldr	r2, [r7, #0]
 8018d28:	68b9      	ldr	r1, [r7, #8]
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	f005 f9fa 	bl	801e124 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 8018d30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018d34:	4618      	mov	r0, r3
 8018d36:	f005 fdc7 	bl	801e8c8 <_ZNK14MockNamedValue13getComparatorEv>
 8018d3a:	4603      	mov	r3, r0
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	bf0c      	ite	eq
 8018d40:	2301      	moveq	r3, #1
 8018d42:	2300      	movne	r3, #0
 8018d44:	b2db      	uxtb	r3, r3
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d01c      	beq.n	8018d84 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	33cc      	adds	r3, #204	; 0xcc
 8018d50:	681b      	ldr	r3, [r3, #0]
 8018d52:	68f8      	ldr	r0, [r7, #12]
 8018d54:	4798      	blx	r3
 8018d56:	4601      	mov	r1, r0
 8018d58:	f107 0314 	add.w	r3, r7, #20
 8018d5c:	68ba      	ldr	r2, [r7, #8]
 8018d5e:	4618      	mov	r0, r3
 8018d60:	f004 fed6 	bl	801db10 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	33dc      	adds	r3, #220	; 0xdc
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	f107 0214 	add.w	r2, r7, #20
 8018d70:	4611      	mov	r1, r2
 8018d72:	68f8      	ldr	r0, [r7, #12]
 8018d74:	4798      	blx	r3
        return *this;
 8018d76:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8018d78:	f107 0314 	add.w	r3, r7, #20
 8018d7c:	4618      	mov	r0, r3
 8018d7e:	f001 fc81 	bl	801a684 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 8018d82:	e009      	b.n	8018d98 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	33e0      	adds	r3, #224	; 0xe0
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018d90:	4611      	mov	r1, r2
 8018d92:	68f8      	ldr	r0, [r7, #12]
 8018d94:	4798      	blx	r3
    return *this;
 8018d96:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018d98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	f004 ffbd 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 8018da2:	4623      	mov	r3, r4
}
 8018da4:	4618      	mov	r0, r3
 8018da6:	3784      	adds	r7, #132	; 0x84
 8018da8:	46bd      	mov	sp, r7
 8018daa:	bd90      	pop	{r4, r7, pc}

08018dac <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 8018dac:	b590      	push	{r4, r7, lr}
 8018dae:	b095      	sub	sp, #84	; 0x54
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	60f8      	str	r0, [r7, #12]
 8018db4:	60b9      	str	r1, [r7, #8]
 8018db6:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	33f0      	adds	r3, #240	; 0xf0
 8018dbe:	681c      	ldr	r4, [r3, #0]
 8018dc0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018dc4:	4917      	ldr	r1, [pc, #92]	; (8018e24 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f7f4 fa59 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8018dcc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	68b9      	ldr	r1, [r7, #8]
 8018dd4:	68f8      	ldr	r0, [r7, #12]
 8018dd6:	47a0      	blx	r4
 8018dd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018ddc:	4618      	mov	r0, r3
 8018dde:	f7f4 fe06 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 8018de2:	f107 0310 	add.w	r3, r7, #16
 8018de6:	68b9      	ldr	r1, [r7, #8]
 8018de8:	4618      	mov	r0, r3
 8018dea:	f004 ff6d 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 8018dee:	f107 0310 	add.w	r3, r7, #16
 8018df2:	6879      	ldr	r1, [r7, #4]
 8018df4:	4618      	mov	r0, r3
 8018df6:	f005 f8e7 	bl	801dfc8 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 8018dfa:	68fb      	ldr	r3, [r7, #12]
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	33e4      	adds	r3, #228	; 0xe4
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	f107 0210 	add.w	r2, r7, #16
 8018e06:	4611      	mov	r1, r2
 8018e08:	68f8      	ldr	r0, [r7, #12]
 8018e0a:	4798      	blx	r3

    return *this;
 8018e0c:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8018e0e:	f107 0310 	add.w	r3, r7, #16
 8018e12:	4618      	mov	r0, r3
 8018e14:	f004 ff82 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018e18:	4623      	mov	r3, r4
}
 8018e1a:	4618      	mov	r0, r3
 8018e1c:	3754      	adds	r7, #84	; 0x54
 8018e1e:	46bd      	mov	sp, r7
 8018e20:	bd90      	pop	{r4, r7, pc}
 8018e22:	bf00      	nop
 8018e24:	08026668 	.word	0x08026668

08018e28 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 8018e28:	b590      	push	{r4, r7, lr}
 8018e2a:	b093      	sub	sp, #76	; 0x4c
 8018e2c:	af00      	add	r7, sp, #0
 8018e2e:	60f8      	str	r0, [r7, #12]
 8018e30:	60b9      	str	r1, [r7, #8]
 8018e32:	607a      	str	r2, [r7, #4]
 8018e34:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	33f0      	adds	r3, #240	; 0xf0
 8018e3c:	681c      	ldr	r4, [r3, #0]
 8018e3e:	683b      	ldr	r3, [r7, #0]
 8018e40:	68ba      	ldr	r2, [r7, #8]
 8018e42:	6879      	ldr	r1, [r7, #4]
 8018e44:	68f8      	ldr	r0, [r7, #12]
 8018e46:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 8018e48:	f107 0310 	add.w	r3, r7, #16
 8018e4c:	6879      	ldr	r1, [r7, #4]
 8018e4e:	4618      	mov	r0, r3
 8018e50:	f004 ff3a 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 8018e54:	f107 0310 	add.w	r3, r7, #16
 8018e58:	683a      	ldr	r2, [r7, #0]
 8018e5a:	68b9      	ldr	r1, [r7, #8]
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	f005 f961 	bl	801e124 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 8018e62:	68fb      	ldr	r3, [r7, #12]
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	33e4      	adds	r3, #228	; 0xe4
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	f107 0210 	add.w	r2, r7, #16
 8018e6e:	4611      	mov	r1, r2
 8018e70:	68f8      	ldr	r0, [r7, #12]
 8018e72:	4798      	blx	r3

    return *this;
 8018e74:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8018e76:	f107 0310 	add.w	r3, r7, #16
 8018e7a:	4618      	mov	r0, r3
 8018e7c:	f004 ff4e 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018e80:	4623      	mov	r3, r4
}
 8018e82:	4618      	mov	r0, r3
 8018e84:	374c      	adds	r7, #76	; 0x4c
 8018e86:	46bd      	mov	sp, r7
 8018e88:	bd90      	pop	{r4, r7, pc}

08018e8a <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 8018e8a:	b480      	push	{r7}
 8018e8c:	b083      	sub	sp, #12
 8018e8e:	af00      	add	r7, sp, #0
 8018e90:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	7d1b      	ldrb	r3, [r3, #20]
 8018e96:	2b02      	cmp	r3, #2
 8018e98:	bf0c      	ite	eq
 8018e9a:	2301      	moveq	r3, #1
 8018e9c:	2300      	movne	r3, #0
 8018e9e:	b2db      	uxtb	r3, r3
}
 8018ea0:	4618      	mov	r0, r3
 8018ea2:	370c      	adds	r7, #12
 8018ea4:	46bd      	mov	sp, r7
 8018ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eaa:	4770      	bx	lr

08018eac <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 8018eac:	b480      	push	{r7}
 8018eae:	b083      	sub	sp, #12
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	7d1b      	ldrb	r3, [r3, #20]
 8018eb8:	2b01      	cmp	r3, #1
 8018eba:	bf0c      	ite	eq
 8018ebc:	2301      	moveq	r3, #1
 8018ebe:	2300      	movne	r3, #0
 8018ec0:	b2db      	uxtb	r3, r3
}
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	370c      	adds	r7, #12
 8018ec6:	46bd      	mov	sp, r7
 8018ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ecc:	4770      	bx	lr
	...

08018ed0 <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 8018ed0:	b5b0      	push	{r4, r5, r7, lr}
 8018ed2:	b096      	sub	sp, #88	; 0x58
 8018ed4:	af02      	add	r7, sp, #8
 8018ed6:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	7d5b      	ldrb	r3, [r3, #21]
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	f040 80bc 	bne.w	801905a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	2201      	movs	r2, #1
 8018ee6:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	7d1b      	ldrb	r3, [r3, #20]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d014      	beq.n	8018f1a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	7d1b      	ldrb	r3, [r3, #20]
 8018ef4:	2b02      	cmp	r3, #2
 8018ef6:	d10a      	bne.n	8018f0e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	6998      	ldr	r0, [r3, #24]
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	699b      	ldr	r3, [r3, #24]
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	33d8      	adds	r3, #216	; 0xd8
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	687a      	ldr	r2, [r7, #4]
 8018f08:	68d2      	ldr	r2, [r2, #12]
 8018f0a:	4611      	mov	r1, r2
 8018f0c:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	331c      	adds	r3, #28
 8018f12:	4618      	mov	r0, r3
 8018f14:	f003 fe07 	bl	801cb26 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8018f18:	e0a0      	b.n	801905c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	331c      	adds	r3, #28
 8018f1e:	4618      	mov	r0, r3
 8018f20:	f003 fac3 	bl	801c4aa <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 8018f24:	4603      	mov	r3, r0
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d00f      	beq.n	8018f4a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 8018f2a:	f7fb fd8b 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8018f2e:	4604      	mov	r4, r0
 8018f30:	6823      	ldr	r3, [r4, #0]
 8018f32:	3368      	adds	r3, #104	; 0x68
 8018f34:	681d      	ldr	r5, [r3, #0]
 8018f36:	f7fb fd95 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018f3a:	4603      	mov	r3, r0
 8018f3c:	9300      	str	r3, [sp, #0]
 8018f3e:	f240 1385 	movw	r3, #389	; 0x185
 8018f42:	4a48      	ldr	r2, [pc, #288]	; (8019064 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 8018f44:	4948      	ldr	r1, [pc, #288]	; (8019068 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 8018f46:	4620      	mov	r0, r4
 8018f48:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	331c      	adds	r3, #28
 8018f4e:	4618      	mov	r0, r3
 8018f50:	f003 fd5f 	bl	801ca12 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 8018f54:	4602      	mov	r2, r0
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	699b      	ldr	r3, [r3, #24]
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d01f      	beq.n	8018fa2 <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	699a      	ldr	r2, [r3, #24]
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	699b      	ldr	r3, [r3, #24]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	33e4      	adds	r3, #228	; 0xe4
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	4610      	mov	r0, r2
 8018f72:	4798      	blx	r3
        callHasSucceeded();
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	681b      	ldr	r3, [r3, #0]
 8018f78:	33d0      	adds	r3, #208	; 0xd0
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	6878      	ldr	r0, [r7, #4]
 8018f7e:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	6998      	ldr	r0, [r3, #24]
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	699b      	ldr	r3, [r3, #24]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	33d8      	adds	r3, #216	; 0xd8
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	687a      	ldr	r2, [r7, #4]
 8018f90:	68d2      	ldr	r2, [r2, #12]
 8018f92:	4611      	mov	r1, r2
 8018f94:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	331c      	adds	r3, #28
 8018f9a:	4618      	mov	r0, r3
 8018f9c:	f003 fdc3 	bl	801cb26 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8018fa0:	e05c      	b.n	801905c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	331c      	adds	r3, #28
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	f003 ffc4 	bl	801cf34 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 8018fac:	4603      	mov	r3, r0
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d029      	beq.n	8019006 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	33cc      	adds	r3, #204	; 0xcc
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	6878      	ldr	r0, [r7, #4]
 8018fbc:	4798      	blx	r3
 8018fbe:	4604      	mov	r4, r0
 8018fc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018fc4:	6879      	ldr	r1, [r7, #4]
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	f7ff f93b 	bl	8018242 <_ZNK21MockCheckedActualCall7getNameEv>
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fd0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018fd4:	f107 000c 	add.w	r0, r7, #12
 8018fd8:	4621      	mov	r1, r4
 8018fda:	f004 fd21 	bl	801da20 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8018fde:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018fe2:	4618      	mov	r0, r3
 8018fe4:	f7f4 fd03 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	33dc      	adds	r3, #220	; 0xdc
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	f107 020c 	add.w	r2, r7, #12
 8018ff4:	4611      	mov	r1, r2
 8018ff6:	6878      	ldr	r0, [r7, #4]
 8018ff8:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018ffa:	f107 030c 	add.w	r3, r7, #12
 8018ffe:	4618      	mov	r0, r3
 8019000:	f001 fb62 	bl	801a6c8 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8019004:	e02a      	b.n	801905c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	33cc      	adds	r3, #204	; 0xcc
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	6878      	ldr	r0, [r7, #4]
 8019010:	4798      	blx	r3
 8019012:	4604      	mov	r4, r0
 8019014:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019018:	6879      	ldr	r1, [r7, #4]
 801901a:	4618      	mov	r0, r3
 801901c:	f7ff f911 	bl	8018242 <_ZNK21MockCheckedActualCall7getNameEv>
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019024:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019028:	f107 000c 	add.w	r0, r7, #12
 801902c:	4621      	mov	r1, r4
 801902e:	f004 fe05 	bl	801dc3c <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8019032:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019036:	4618      	mov	r0, r3
 8019038:	f7f4 fcd9 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	681b      	ldr	r3, [r3, #0]
 8019040:	33dc      	adds	r3, #220	; 0xdc
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	f107 020c 	add.w	r2, r7, #12
 8019048:	4611      	mov	r1, r2
 801904a:	6878      	ldr	r0, [r7, #4]
 801904c:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801904e:	f107 030c 	add.w	r3, r7, #12
 8019052:	4618      	mov	r0, r3
 8019054:	f001 fb5a 	bl	801a70c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8019058:	e000      	b.n	801905c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 801905a:	bf00      	nop
    }
}
 801905c:	3750      	adds	r7, #80	; 0x50
 801905e:	46bd      	mov	sp, r7
 8019060:	bdb0      	pop	{r4, r5, r7, pc}
 8019062:	bf00      	nop
 8019064:	08026670 	.word	0x08026670
 8019068:	080266d8 	.word	0x080266d8

0801906c <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 801906c:	b480      	push	{r7}
 801906e:	b083      	sub	sp, #12
 8019070:	af00      	add	r7, sp, #0
 8019072:	6078      	str	r0, [r7, #4]
 8019074:	460b      	mov	r3, r1
 8019076:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	78fa      	ldrb	r2, [r7, #3]
 801907c:	751a      	strb	r2, [r3, #20]
}
 801907e:	bf00      	nop
 8019080:	370c      	adds	r7, #12
 8019082:	46bd      	mov	sp, r7
 8019084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019088:	4770      	bx	lr
	...

0801908c <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 801908c:	b580      	push	{r7, lr}
 801908e:	b084      	sub	sp, #16
 8019090:	af00      	add	r7, sp, #0
 8019092:	6078      	str	r0, [r7, #4]
 8019094:	6039      	str	r1, [r7, #0]
    checkExpectations();
 8019096:	683b      	ldr	r3, [r7, #0]
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	33c4      	adds	r3, #196	; 0xc4
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	6838      	ldr	r0, [r7, #0]
 80190a0:	4798      	blx	r3
    if (matchingExpectation_)
 80190a2:	683b      	ldr	r3, [r7, #0]
 80190a4:	699b      	ldr	r3, [r3, #24]
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d00a      	beq.n	80190c0 <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 80190aa:	683b      	ldr	r3, [r7, #0]
 80190ac:	6999      	ldr	r1, [r3, #24]
 80190ae:	683b      	ldr	r3, [r7, #0]
 80190b0:	699b      	ldr	r3, [r3, #24]
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	3394      	adds	r3, #148	; 0x94
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	687a      	ldr	r2, [r7, #4]
 80190ba:	4610      	mov	r0, r2
 80190bc:	4798      	blx	r3
 80190be:	e010      	b.n	80190e2 <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 80190c0:	f107 0308 	add.w	r3, r7, #8
 80190c4:	4909      	ldr	r1, [pc, #36]	; (80190ec <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 80190c6:	4618      	mov	r0, r3
 80190c8:	f7f4 f8d9 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 80190cc:	f107 0308 	add.w	r3, r7, #8
 80190d0:	4619      	mov	r1, r3
 80190d2:	6878      	ldr	r0, [r7, #4]
 80190d4:	f004 fdf8 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
 80190d8:	f107 0308 	add.w	r3, r7, #8
 80190dc:	4618      	mov	r0, r3
 80190de:	f7f4 fc86 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 80190e2:	6878      	ldr	r0, [r7, #4]
 80190e4:	3710      	adds	r7, #16
 80190e6:	46bd      	mov	sp, r7
 80190e8:	bd80      	pop	{r7, pc}
 80190ea:	bf00      	nop
 80190ec:	08026754 	.word	0x08026754

080190f0 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 80190f0:	b580      	push	{r7, lr}
 80190f2:	b082      	sub	sp, #8
 80190f4:	af00      	add	r7, sp, #0
 80190f6:	6078      	str	r0, [r7, #4]
 80190f8:	460b      	mov	r3, r1
 80190fa:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	3350      	adds	r3, #80	; 0x50
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	6878      	ldr	r0, [r7, #4]
 8019106:	4798      	blx	r3
 8019108:	4603      	mov	r3, r0
 801910a:	f083 0301 	eor.w	r3, r3, #1
 801910e:	b2db      	uxtb	r3, r3
 8019110:	2b00      	cmp	r3, #0
 8019112:	d001      	beq.n	8019118 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 8019114:	78fb      	ldrb	r3, [r7, #3]
 8019116:	e007      	b.n	8019128 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	681b      	ldr	r3, [r3, #0]
 801911c:	335c      	adds	r3, #92	; 0x5c
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	6878      	ldr	r0, [r7, #4]
 8019122:	4798      	blx	r3
 8019124:	4603      	mov	r3, r0
 8019126:	bf00      	nop
}
 8019128:	4618      	mov	r0, r3
 801912a:	3708      	adds	r7, #8
 801912c:	46bd      	mov	sp, r7
 801912e:	bd80      	pop	{r7, pc}

08019130 <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 8019130:	b590      	push	{r4, r7, lr}
 8019132:	b091      	sub	sp, #68	; 0x44
 8019134:	af00      	add	r7, sp, #0
 8019136:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	3354      	adds	r3, #84	; 0x54
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	f107 0208 	add.w	r2, r7, #8
 8019144:	6879      	ldr	r1, [r7, #4]
 8019146:	4610      	mov	r0, r2
 8019148:	4798      	blx	r3
 801914a:	f107 0308 	add.w	r3, r7, #8
 801914e:	4618      	mov	r0, r3
 8019150:	f005 f898 	bl	801e284 <_ZNK14MockNamedValue12getBoolValueEv>
 8019154:	4603      	mov	r3, r0
 8019156:	461c      	mov	r4, r3
 8019158:	bf00      	nop
 801915a:	f107 0308 	add.w	r3, r7, #8
 801915e:	4618      	mov	r0, r3
 8019160:	f004 fddc 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 8019164:	4623      	mov	r3, r4
}
 8019166:	4618      	mov	r0, r3
 8019168:	3744      	adds	r7, #68	; 0x44
 801916a:	46bd      	mov	sp, r7
 801916c:	bd90      	pop	{r4, r7, pc}

0801916e <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 801916e:	b580      	push	{r7, lr}
 8019170:	b082      	sub	sp, #8
 8019172:	af00      	add	r7, sp, #0
 8019174:	6078      	str	r0, [r7, #4]
 8019176:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	3350      	adds	r3, #80	; 0x50
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	6878      	ldr	r0, [r7, #4]
 8019182:	4798      	blx	r3
 8019184:	4603      	mov	r3, r0
 8019186:	f083 0301 	eor.w	r3, r3, #1
 801918a:	b2db      	uxtb	r3, r3
 801918c:	2b00      	cmp	r3, #0
 801918e:	d001      	beq.n	8019194 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 8019190:	683b      	ldr	r3, [r7, #0]
 8019192:	e007      	b.n	80191a4 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	681b      	ldr	r3, [r3, #0]
 8019198:	3364      	adds	r3, #100	; 0x64
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	6878      	ldr	r0, [r7, #4]
 801919e:	4798      	blx	r3
 80191a0:	4603      	mov	r3, r0
 80191a2:	bf00      	nop
}
 80191a4:	4618      	mov	r0, r3
 80191a6:	3708      	adds	r7, #8
 80191a8:	46bd      	mov	sp, r7
 80191aa:	bd80      	pop	{r7, pc}

080191ac <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 80191ac:	b590      	push	{r4, r7, lr}
 80191ae:	b091      	sub	sp, #68	; 0x44
 80191b0:	af00      	add	r7, sp, #0
 80191b2:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	681b      	ldr	r3, [r3, #0]
 80191b8:	3354      	adds	r3, #84	; 0x54
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	f107 0208 	add.w	r2, r7, #8
 80191c0:	6879      	ldr	r1, [r7, #4]
 80191c2:	4610      	mov	r0, r2
 80191c4:	4798      	blx	r3
 80191c6:	f107 0308 	add.w	r3, r7, #8
 80191ca:	4618      	mov	r0, r3
 80191cc:	f005 f8d2 	bl	801e374 <_ZNK14MockNamedValue11getIntValueEv>
 80191d0:	4604      	mov	r4, r0
 80191d2:	bf00      	nop
 80191d4:	f107 0308 	add.w	r3, r7, #8
 80191d8:	4618      	mov	r0, r3
 80191da:	f004 fd9f 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 80191de:	4623      	mov	r3, r4
}
 80191e0:	4618      	mov	r0, r3
 80191e2:	3744      	adds	r7, #68	; 0x44
 80191e4:	46bd      	mov	sp, r7
 80191e6:	bd90      	pop	{r4, r7, pc}

080191e8 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 80191e8:	b590      	push	{r4, r7, lr}
 80191ea:	b091      	sub	sp, #68	; 0x44
 80191ec:	af00      	add	r7, sp, #0
 80191ee:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	3354      	adds	r3, #84	; 0x54
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	f107 0208 	add.w	r2, r7, #8
 80191fc:	6879      	ldr	r1, [r7, #4]
 80191fe:	4610      	mov	r0, r2
 8019200:	4798      	blx	r3
 8019202:	f107 0308 	add.w	r3, r7, #8
 8019206:	4618      	mov	r0, r3
 8019208:	f005 f93e 	bl	801e488 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 801920c:	4604      	mov	r4, r0
 801920e:	bf00      	nop
 8019210:	f107 0308 	add.w	r3, r7, #8
 8019214:	4618      	mov	r0, r3
 8019216:	f004 fd81 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 801921a:	4623      	mov	r3, r4
}
 801921c:	4618      	mov	r0, r3
 801921e:	3744      	adds	r7, #68	; 0x44
 8019220:	46bd      	mov	sp, r7
 8019222:	bd90      	pop	{r4, r7, pc}

08019224 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 8019224:	b580      	push	{r7, lr}
 8019226:	b082      	sub	sp, #8
 8019228:	af00      	add	r7, sp, #0
 801922a:	6078      	str	r0, [r7, #4]
 801922c:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	3350      	adds	r3, #80	; 0x50
 8019234:	681b      	ldr	r3, [r3, #0]
 8019236:	6878      	ldr	r0, [r7, #4]
 8019238:	4798      	blx	r3
 801923a:	4603      	mov	r3, r0
 801923c:	f083 0301 	eor.w	r3, r3, #1
 8019240:	b2db      	uxtb	r3, r3
 8019242:	2b00      	cmp	r3, #0
 8019244:	d001      	beq.n	801924a <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 8019246:	683b      	ldr	r3, [r7, #0]
 8019248:	e007      	b.n	801925a <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	3368      	adds	r3, #104	; 0x68
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	6878      	ldr	r0, [r7, #4]
 8019254:	4798      	blx	r3
 8019256:	4603      	mov	r3, r0
 8019258:	bf00      	nop
}
 801925a:	4618      	mov	r0, r3
 801925c:	3708      	adds	r7, #8
 801925e:	46bd      	mov	sp, r7
 8019260:	bd80      	pop	{r7, pc}

08019262 <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 8019262:	b590      	push	{r4, r7, lr}
 8019264:	b091      	sub	sp, #68	; 0x44
 8019266:	af00      	add	r7, sp, #0
 8019268:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	3354      	adds	r3, #84	; 0x54
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	f107 0208 	add.w	r2, r7, #8
 8019276:	6879      	ldr	r1, [r7, #4]
 8019278:	4610      	mov	r0, r2
 801927a:	4798      	blx	r3
 801927c:	f107 0308 	add.w	r3, r7, #8
 8019280:	4618      	mov	r0, r3
 8019282:	f005 f89f 	bl	801e3c4 <_ZNK14MockNamedValue15getLongIntValueEv>
 8019286:	4604      	mov	r4, r0
 8019288:	bf00      	nop
 801928a:	f107 0308 	add.w	r3, r7, #8
 801928e:	4618      	mov	r0, r3
 8019290:	f004 fd44 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 8019294:	4623      	mov	r3, r4
}
 8019296:	4618      	mov	r0, r3
 8019298:	3744      	adds	r7, #68	; 0x44
 801929a:	46bd      	mov	sp, r7
 801929c:	bd90      	pop	{r4, r7, pc}

0801929e <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 801929e:	b580      	push	{r7, lr}
 80192a0:	b082      	sub	sp, #8
 80192a2:	af00      	add	r7, sp, #0
 80192a4:	6078      	str	r0, [r7, #4]
 80192a6:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	3350      	adds	r3, #80	; 0x50
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	6878      	ldr	r0, [r7, #4]
 80192b2:	4798      	blx	r3
 80192b4:	4603      	mov	r3, r0
 80192b6:	f083 0301 	eor.w	r3, r3, #1
 80192ba:	b2db      	uxtb	r3, r3
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d001      	beq.n	80192c4 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 80192c0:	683b      	ldr	r3, [r7, #0]
 80192c2:	e007      	b.n	80192d4 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	3370      	adds	r3, #112	; 0x70
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	6878      	ldr	r0, [r7, #4]
 80192ce:	4798      	blx	r3
 80192d0:	4603      	mov	r3, r0
 80192d2:	bf00      	nop
}
 80192d4:	4618      	mov	r0, r3
 80192d6:	3708      	adds	r7, #8
 80192d8:	46bd      	mov	sp, r7
 80192da:	bd80      	pop	{r7, pc}

080192dc <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 80192dc:	b5b0      	push	{r4, r5, r7, lr}
 80192de:	b084      	sub	sp, #16
 80192e0:	af02      	add	r7, sp, #8
 80192e2:	6078      	str	r0, [r7, #4]
 80192e4:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 80192e6:	f7fb fbad 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 80192ea:	4604      	mov	r4, r0
 80192ec:	6823      	ldr	r3, [r4, #0]
 80192ee:	3368      	adds	r3, #104	; 0x68
 80192f0:	681d      	ldr	r5, [r3, #0]
 80192f2:	f7fb fbb7 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80192f6:	4603      	mov	r3, r0
 80192f8:	9300      	str	r3, [sp, #0]
 80192fa:	f240 13fb 	movw	r3, #507	; 0x1fb
 80192fe:	4a06      	ldr	r2, [pc, #24]	; (8019318 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 8019300:	4906      	ldr	r1, [pc, #24]	; (801931c <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 8019302:	4620      	mov	r0, r4
 8019304:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8019306:	2100      	movs	r1, #0
 8019308:	6878      	ldr	r0, [r7, #4]
 801930a:	f7f1 fffb 	bl	800b304 <_ZN18cpputest_ulonglongC1Ei>
}
 801930e:	6878      	ldr	r0, [r7, #4]
 8019310:	3708      	adds	r7, #8
 8019312:	46bd      	mov	sp, r7
 8019314:	bdb0      	pop	{r4, r5, r7, pc}
 8019316:	bf00      	nop
 8019318:	08026670 	.word	0x08026670
 801931c:	0802668c 	.word	0x0802668c

08019320 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 8019320:	b5b0      	push	{r4, r5, r7, lr}
 8019322:	b086      	sub	sp, #24
 8019324:	af02      	add	r7, sp, #8
 8019326:	60f8      	str	r0, [r7, #12]
 8019328:	60b9      	str	r1, [r7, #8]
 801932a:	4639      	mov	r1, r7
 801932c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8019330:	f7fb fb88 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8019334:	4604      	mov	r4, r0
 8019336:	6823      	ldr	r3, [r4, #0]
 8019338:	3368      	adds	r3, #104	; 0x68
 801933a:	681d      	ldr	r5, [r3, #0]
 801933c:	f7fb fb92 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019340:	4603      	mov	r3, r0
 8019342:	9300      	str	r3, [sp, #0]
 8019344:	f240 2301 	movw	r3, #513	; 0x201
 8019348:	4a06      	ldr	r2, [pc, #24]	; (8019364 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 801934a:	4907      	ldr	r1, [pc, #28]	; (8019368 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 801934c:	4620      	mov	r0, r4
 801934e:	47a8      	blx	r5
    return default_value;
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	461a      	mov	r2, r3
 8019354:	463b      	mov	r3, r7
 8019356:	cb03      	ldmia	r3!, {r0, r1}
 8019358:	6010      	str	r0, [r2, #0]
 801935a:	6051      	str	r1, [r2, #4]
}
 801935c:	68f8      	ldr	r0, [r7, #12]
 801935e:	3710      	adds	r7, #16
 8019360:	46bd      	mov	sp, r7
 8019362:	bdb0      	pop	{r4, r5, r7, pc}
 8019364:	08026670 	.word	0x08026670
 8019368:	0802668c 	.word	0x0802668c

0801936c <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 801936c:	b5b0      	push	{r4, r5, r7, lr}
 801936e:	b084      	sub	sp, #16
 8019370:	af02      	add	r7, sp, #8
 8019372:	6078      	str	r0, [r7, #4]
 8019374:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8019376:	f7fb fb65 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801937a:	4604      	mov	r4, r0
 801937c:	6823      	ldr	r3, [r4, #0]
 801937e:	3368      	adds	r3, #104	; 0x68
 8019380:	681d      	ldr	r5, [r3, #0]
 8019382:	f7fb fb6f 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019386:	4603      	mov	r3, r0
 8019388:	9300      	str	r3, [sp, #0]
 801938a:	f240 2307 	movw	r3, #519	; 0x207
 801938e:	4a06      	ldr	r2, [pc, #24]	; (80193a8 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 8019390:	4906      	ldr	r1, [pc, #24]	; (80193ac <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 8019392:	4620      	mov	r0, r4
 8019394:	47a8      	blx	r5
    return cpputest_longlong(0);
 8019396:	2100      	movs	r1, #0
 8019398:	6878      	ldr	r0, [r7, #4]
 801939a:	f7f1 ffa7 	bl	800b2ec <_ZN17cpputest_longlongC1Ei>
}
 801939e:	6878      	ldr	r0, [r7, #4]
 80193a0:	3708      	adds	r7, #8
 80193a2:	46bd      	mov	sp, r7
 80193a4:	bdb0      	pop	{r4, r5, r7, pc}
 80193a6:	bf00      	nop
 80193a8:	08026670 	.word	0x08026670
 80193ac:	080266b8 	.word	0x080266b8

080193b0 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 80193b0:	b5b0      	push	{r4, r5, r7, lr}
 80193b2:	b086      	sub	sp, #24
 80193b4:	af02      	add	r7, sp, #8
 80193b6:	60f8      	str	r0, [r7, #12]
 80193b8:	60b9      	str	r1, [r7, #8]
 80193ba:	4639      	mov	r1, r7
 80193bc:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80193c0:	f7fb fb40 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 80193c4:	4604      	mov	r4, r0
 80193c6:	6823      	ldr	r3, [r4, #0]
 80193c8:	3368      	adds	r3, #104	; 0x68
 80193ca:	681d      	ldr	r5, [r3, #0]
 80193cc:	f7fb fb4a 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80193d0:	4603      	mov	r3, r0
 80193d2:	9300      	str	r3, [sp, #0]
 80193d4:	f240 230d 	movw	r3, #525	; 0x20d
 80193d8:	4a06      	ldr	r2, [pc, #24]	; (80193f4 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 80193da:	4907      	ldr	r1, [pc, #28]	; (80193f8 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 80193dc:	4620      	mov	r0, r4
 80193de:	47a8      	blx	r5
    return default_value;
 80193e0:	68fb      	ldr	r3, [r7, #12]
 80193e2:	461a      	mov	r2, r3
 80193e4:	463b      	mov	r3, r7
 80193e6:	cb03      	ldmia	r3!, {r0, r1}
 80193e8:	6010      	str	r0, [r2, #0]
 80193ea:	6051      	str	r1, [r2, #4]
}
 80193ec:	68f8      	ldr	r0, [r7, #12]
 80193ee:	3710      	adds	r7, #16
 80193f0:	46bd      	mov	sp, r7
 80193f2:	bdb0      	pop	{r4, r5, r7, pc}
 80193f4:	08026670 	.word	0x08026670
 80193f8:	080266b8 	.word	0x080266b8

080193fc <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 80193fc:	b580      	push	{r7, lr}
 80193fe:	ed2d 8b02 	vpush	{d8}
 8019402:	b090      	sub	sp, #64	; 0x40
 8019404:	af00      	add	r7, sp, #0
 8019406:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	3354      	adds	r3, #84	; 0x54
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	f107 0208 	add.w	r2, r7, #8
 8019414:	6879      	ldr	r1, [r7, #4]
 8019416:	4610      	mov	r0, r2
 8019418:	4798      	blx	r3
 801941a:	f107 0308 	add.w	r3, r7, #8
 801941e:	4618      	mov	r0, r3
 8019420:	f005 f90a 	bl	801e638 <_ZNK14MockNamedValue14getDoubleValueEv>
 8019424:	eeb0 8a40 	vmov.f32	s16, s0
 8019428:	eef0 8a60 	vmov.f32	s17, s1
 801942c:	bf00      	nop
 801942e:	f107 0308 	add.w	r3, r7, #8
 8019432:	4618      	mov	r0, r3
 8019434:	f004 fc72 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 8019438:	eeb0 7a48 	vmov.f32	s14, s16
 801943c:	eef0 7a68 	vmov.f32	s15, s17
}
 8019440:	eeb0 0a47 	vmov.f32	s0, s14
 8019444:	eef0 0a67 	vmov.f32	s1, s15
 8019448:	3740      	adds	r7, #64	; 0x40
 801944a:	46bd      	mov	sp, r7
 801944c:	ecbd 8b02 	vpop	{d8}
 8019450:	bd80      	pop	{r7, pc}

08019452 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 8019452:	b580      	push	{r7, lr}
 8019454:	b084      	sub	sp, #16
 8019456:	af00      	add	r7, sp, #0
 8019458:	60f8      	str	r0, [r7, #12]
 801945a:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 801945e:	68fb      	ldr	r3, [r7, #12]
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	3350      	adds	r3, #80	; 0x50
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	68f8      	ldr	r0, [r7, #12]
 8019468:	4798      	blx	r3
 801946a:	4603      	mov	r3, r0
 801946c:	f083 0301 	eor.w	r3, r3, #1
 8019470:	b2db      	uxtb	r3, r3
 8019472:	2b00      	cmp	r3, #0
 8019474:	d002      	beq.n	801947c <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 8019476:	ed97 7b00 	vldr	d7, [r7]
 801947a:	e00a      	b.n	8019492 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 801947c:	68fb      	ldr	r3, [r7, #12]
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	3398      	adds	r3, #152	; 0x98
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	68f8      	ldr	r0, [r7, #12]
 8019486:	4798      	blx	r3
 8019488:	eeb0 7a40 	vmov.f32	s14, s0
 801948c:	eef0 7a60 	vmov.f32	s15, s1
 8019490:	bf00      	nop
}
 8019492:	eeb0 0a47 	vmov.f32	s0, s14
 8019496:	eef0 0a67 	vmov.f32	s1, s15
 801949a:	3710      	adds	r7, #16
 801949c:	46bd      	mov	sp, r7
 801949e:	bd80      	pop	{r7, pc}

080194a0 <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 80194a0:	b590      	push	{r4, r7, lr}
 80194a2:	b091      	sub	sp, #68	; 0x44
 80194a4:	af00      	add	r7, sp, #0
 80194a6:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	3354      	adds	r3, #84	; 0x54
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	f107 0208 	add.w	r2, r7, #8
 80194b4:	6879      	ldr	r1, [r7, #4]
 80194b6:	4610      	mov	r0, r2
 80194b8:	4798      	blx	r3
 80194ba:	f107 0308 	add.w	r3, r7, #8
 80194be:	4618      	mov	r0, r3
 80194c0:	f004 ff08 	bl	801e2d4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 80194c4:	4604      	mov	r4, r0
 80194c6:	bf00      	nop
 80194c8:	f107 0308 	add.w	r3, r7, #8
 80194cc:	4618      	mov	r0, r3
 80194ce:	f004 fc25 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 80194d2:	4623      	mov	r3, r4
}
 80194d4:	4618      	mov	r0, r3
 80194d6:	3744      	adds	r7, #68	; 0x44
 80194d8:	46bd      	mov	sp, r7
 80194da:	bd90      	pop	{r4, r7, pc}

080194dc <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 80194dc:	b580      	push	{r7, lr}
 80194de:	b082      	sub	sp, #8
 80194e0:	af00      	add	r7, sp, #0
 80194e2:	6078      	str	r0, [r7, #4]
 80194e4:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	3350      	adds	r3, #80	; 0x50
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	6878      	ldr	r0, [r7, #4]
 80194f0:	4798      	blx	r3
 80194f2:	4603      	mov	r3, r0
 80194f4:	f083 0301 	eor.w	r3, r3, #1
 80194f8:	b2db      	uxtb	r3, r3
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d001      	beq.n	8019502 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 80194fe:	683b      	ldr	r3, [r7, #0]
 8019500:	e007      	b.n	8019512 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	3388      	adds	r3, #136	; 0x88
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	6878      	ldr	r0, [r7, #4]
 801950c:	4798      	blx	r3
 801950e:	4603      	mov	r3, r0
 8019510:	bf00      	nop
}
 8019512:	4618      	mov	r0, r3
 8019514:	3708      	adds	r7, #8
 8019516:	46bd      	mov	sp, r7
 8019518:	bd80      	pop	{r7, pc}

0801951a <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 801951a:	b580      	push	{r7, lr}
 801951c:	b082      	sub	sp, #8
 801951e:	af00      	add	r7, sp, #0
 8019520:	6078      	str	r0, [r7, #4]
 8019522:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	3350      	adds	r3, #80	; 0x50
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	6878      	ldr	r0, [r7, #4]
 801952e:	4798      	blx	r3
 8019530:	4603      	mov	r3, r0
 8019532:	f083 0301 	eor.w	r3, r3, #1
 8019536:	b2db      	uxtb	r3, r3
 8019538:	2b00      	cmp	r3, #0
 801953a:	d001      	beq.n	8019540 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 801953c:	683b      	ldr	r3, [r7, #0]
 801953e:	e007      	b.n	8019550 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	33a0      	adds	r3, #160	; 0xa0
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	6878      	ldr	r0, [r7, #4]
 801954a:	4798      	blx	r3
 801954c:	4603      	mov	r3, r0
 801954e:	bf00      	nop
}
 8019550:	4618      	mov	r0, r3
 8019552:	3708      	adds	r7, #8
 8019554:	46bd      	mov	sp, r7
 8019556:	bd80      	pop	{r7, pc}

08019558 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 8019558:	b590      	push	{r4, r7, lr}
 801955a:	b091      	sub	sp, #68	; 0x44
 801955c:	af00      	add	r7, sp, #0
 801955e:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	3354      	adds	r3, #84	; 0x54
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	f107 0208 	add.w	r2, r7, #8
 801956c:	6879      	ldr	r1, [r7, #4]
 801956e:	4610      	mov	r0, r2
 8019570:	4798      	blx	r3
 8019572:	f107 0308 	add.w	r3, r7, #8
 8019576:	4618      	mov	r0, r3
 8019578:	f005 f8e2 	bl	801e740 <_ZNK14MockNamedValue15getPointerValueEv>
 801957c:	4604      	mov	r4, r0
 801957e:	bf00      	nop
 8019580:	f107 0308 	add.w	r3, r7, #8
 8019584:	4618      	mov	r0, r3
 8019586:	f004 fbc9 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 801958a:	4623      	mov	r3, r4
}
 801958c:	4618      	mov	r0, r3
 801958e:	3744      	adds	r7, #68	; 0x44
 8019590:	46bd      	mov	sp, r7
 8019592:	bd90      	pop	{r4, r7, pc}

08019594 <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 8019594:	b590      	push	{r4, r7, lr}
 8019596:	b091      	sub	sp, #68	; 0x44
 8019598:	af00      	add	r7, sp, #0
 801959a:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	3354      	adds	r3, #84	; 0x54
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	f107 0208 	add.w	r2, r7, #8
 80195a8:	6879      	ldr	r1, [r7, #4]
 80195aa:	4610      	mov	r0, r2
 80195ac:	4798      	blx	r3
 80195ae:	f107 0308 	add.w	r3, r7, #8
 80195b2:	4618      	mov	r0, r3
 80195b4:	f005 f8ec 	bl	801e790 <_ZNK14MockNamedValue20getConstPointerValueEv>
 80195b8:	4604      	mov	r4, r0
 80195ba:	bf00      	nop
 80195bc:	f107 0308 	add.w	r3, r7, #8
 80195c0:	4618      	mov	r0, r3
 80195c2:	f004 fbab 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 80195c6:	4623      	mov	r3, r4
}
 80195c8:	4618      	mov	r0, r3
 80195ca:	3744      	adds	r7, #68	; 0x44
 80195cc:	46bd      	mov	sp, r7
 80195ce:	bd90      	pop	{r4, r7, pc}

080195d0 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b082      	sub	sp, #8
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	6078      	str	r0, [r7, #4]
 80195d8:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	3350      	adds	r3, #80	; 0x50
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	6878      	ldr	r0, [r7, #4]
 80195e4:	4798      	blx	r3
 80195e6:	4603      	mov	r3, r0
 80195e8:	f083 0301 	eor.w	r3, r3, #1
 80195ec:	b2db      	uxtb	r3, r3
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d001      	beq.n	80195f6 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 80195f2:	683b      	ldr	r3, [r7, #0]
 80195f4:	e007      	b.n	8019606 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	33a8      	adds	r3, #168	; 0xa8
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	6878      	ldr	r0, [r7, #4]
 8019600:	4798      	blx	r3
 8019602:	4603      	mov	r3, r0
 8019604:	bf00      	nop
}
 8019606:	4618      	mov	r0, r3
 8019608:	3708      	adds	r7, #8
 801960a:	46bd      	mov	sp, r7
 801960c:	bd80      	pop	{r7, pc}

0801960e <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 801960e:	b590      	push	{r4, r7, lr}
 8019610:	b091      	sub	sp, #68	; 0x44
 8019612:	af00      	add	r7, sp, #0
 8019614:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	3354      	adds	r3, #84	; 0x54
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	f107 0208 	add.w	r2, r7, #8
 8019622:	6879      	ldr	r1, [r7, #4]
 8019624:	4610      	mov	r0, r2
 8019626:	4798      	blx	r3
 8019628:	f107 0308 	add.w	r3, r7, #8
 801962c:	4618      	mov	r0, r3
 801962e:	f005 f8d7 	bl	801e7e0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 8019632:	4604      	mov	r4, r0
 8019634:	bf00      	nop
 8019636:	f107 0308 	add.w	r3, r7, #8
 801963a:	4618      	mov	r0, r3
 801963c:	f004 fb6e 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 8019640:	4623      	mov	r3, r4
}
 8019642:	4618      	mov	r0, r3
 8019644:	3744      	adds	r7, #68	; 0x44
 8019646:	46bd      	mov	sp, r7
 8019648:	bd90      	pop	{r4, r7, pc}

0801964a <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 801964a:	b580      	push	{r7, lr}
 801964c:	b082      	sub	sp, #8
 801964e:	af00      	add	r7, sp, #0
 8019650:	6078      	str	r0, [r7, #4]
 8019652:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	681b      	ldr	r3, [r3, #0]
 8019658:	3350      	adds	r3, #80	; 0x50
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	6878      	ldr	r0, [r7, #4]
 801965e:	4798      	blx	r3
 8019660:	4603      	mov	r3, r0
 8019662:	f083 0301 	eor.w	r3, r3, #1
 8019666:	b2db      	uxtb	r3, r3
 8019668:	2b00      	cmp	r3, #0
 801966a:	d001      	beq.n	8019670 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 801966c:	683b      	ldr	r3, [r7, #0]
 801966e:	e007      	b.n	8019680 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	33b0      	adds	r3, #176	; 0xb0
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	6878      	ldr	r0, [r7, #4]
 801967a:	4798      	blx	r3
 801967c:	4603      	mov	r3, r0
 801967e:	bf00      	nop
}
 8019680:	4618      	mov	r0, r3
 8019682:	3708      	adds	r7, #8
 8019684:	46bd      	mov	sp, r7
 8019686:	bd80      	pop	{r7, pc}

08019688 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 8019688:	b580      	push	{r7, lr}
 801968a:	b082      	sub	sp, #8
 801968c:	af00      	add	r7, sp, #0
 801968e:	6078      	str	r0, [r7, #4]
 8019690:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	3350      	adds	r3, #80	; 0x50
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	6878      	ldr	r0, [r7, #4]
 801969c:	4798      	blx	r3
 801969e:	4603      	mov	r3, r0
 80196a0:	f083 0301 	eor.w	r3, r3, #1
 80196a4:	b2db      	uxtb	r3, r3
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d001      	beq.n	80196ae <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 80196aa:	683b      	ldr	r3, [r7, #0]
 80196ac:	e007      	b.n	80196be <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	3394      	adds	r3, #148	; 0x94
 80196b4:	681b      	ldr	r3, [r3, #0]
 80196b6:	6878      	ldr	r0, [r7, #4]
 80196b8:	4798      	blx	r3
 80196ba:	4603      	mov	r3, r0
 80196bc:	bf00      	nop
}
 80196be:	4618      	mov	r0, r3
 80196c0:	3708      	adds	r7, #8
 80196c2:	46bd      	mov	sp, r7
 80196c4:	bd80      	pop	{r7, pc}

080196c6 <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 80196c6:	b590      	push	{r4, r7, lr}
 80196c8:	b091      	sub	sp, #68	; 0x44
 80196ca:	af00      	add	r7, sp, #0
 80196cc:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	681b      	ldr	r3, [r3, #0]
 80196d2:	3354      	adds	r3, #84	; 0x54
 80196d4:	681b      	ldr	r3, [r3, #0]
 80196d6:	f107 0208 	add.w	r2, r7, #8
 80196da:	6879      	ldr	r1, [r7, #4]
 80196dc:	4610      	mov	r0, r2
 80196de:	4798      	blx	r3
 80196e0:	f107 0308 	add.w	r3, r7, #8
 80196e4:	4618      	mov	r0, r3
 80196e6:	f005 f803 	bl	801e6f0 <_ZNK14MockNamedValue14getStringValueEv>
 80196ea:	4604      	mov	r4, r0
 80196ec:	bf00      	nop
 80196ee:	f107 0308 	add.w	r3, r7, #8
 80196f2:	4618      	mov	r0, r3
 80196f4:	f004 fb12 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 80196f8:	4623      	mov	r3, r4
}
 80196fa:	4618      	mov	r0, r3
 80196fc:	3744      	adds	r7, #68	; 0x44
 80196fe:	46bd      	mov	sp, r7
 8019700:	bd90      	pop	{r4, r7, pc}

08019702 <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 8019702:	b590      	push	{r4, r7, lr}
 8019704:	b093      	sub	sp, #76	; 0x4c
 8019706:	af00      	add	r7, sp, #0
 8019708:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	3354      	adds	r3, #84	; 0x54
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	f107 0210 	add.w	r2, r7, #16
 8019716:	6879      	ldr	r1, [r7, #4]
 8019718:	4610      	mov	r0, r2
 801971a:	4798      	blx	r3
 801971c:	f107 0308 	add.w	r3, r7, #8
 8019720:	f107 0210 	add.w	r2, r7, #16
 8019724:	4611      	mov	r1, r2
 8019726:	4618      	mov	r0, r3
 8019728:	f004 fd8e 	bl	801e248 <_ZNK14MockNamedValue7getNameEv>
 801972c:	f107 0308 	add.w	r3, r7, #8
 8019730:	4618      	mov	r0, r3
 8019732:	f7f4 f94b 	bl	800d9cc <_ZNK12SimpleString7isEmptyEv>
 8019736:	4603      	mov	r3, r0
 8019738:	f083 0301 	eor.w	r3, r3, #1
 801973c:	b2dc      	uxtb	r4, r3
 801973e:	f107 0308 	add.w	r3, r7, #8
 8019742:	4618      	mov	r0, r3
 8019744:	f7f4 f953 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8019748:	f107 0310 	add.w	r3, r7, #16
 801974c:	4618      	mov	r0, r3
 801974e:	f004 fae5 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 8019752:	4623      	mov	r3, r4
}
 8019754:	4618      	mov	r0, r3
 8019756:	374c      	adds	r7, #76	; 0x4c
 8019758:	46bd      	mov	sp, r7
 801975a:	bd90      	pop	{r4, r7, pc}

0801975c <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 801975c:	b590      	push	{r4, r7, lr}
 801975e:	b095      	sub	sp, #84	; 0x54
 8019760:	af02      	add	r7, sp, #8
 8019762:	6078      	str	r0, [r7, #4]
 8019764:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	681b      	ldr	r3, [r3, #0]
 801976a:	33c0      	adds	r3, #192	; 0xc0
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	6878      	ldr	r0, [r7, #4]
 8019770:	4798      	blx	r3
 8019772:	4603      	mov	r3, r0
 8019774:	2b00      	cmp	r3, #0
 8019776:	d001      	beq.n	801977c <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 8019778:	687c      	ldr	r4, [r7, #4]
 801977a:	e053      	b.n	8019824 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	331c      	adds	r3, #28
 8019780:	6839      	ldr	r1, [r7, #0]
 8019782:	4618      	mov	r0, r3
 8019784:	f003 f8ca 	bl	801c91c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	699b      	ldr	r3, [r3, #24]
 801978c:	2b00      	cmp	r3, #0
 801978e:	d109      	bne.n	80197a4 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	331c      	adds	r3, #28
 8019794:	4618      	mov	r0, r3
 8019796:	f002 fe20 	bl	801c3da <_ZNK21MockExpectedCallsList7isEmptyEv>
 801979a:	4603      	mov	r3, r0
 801979c:	2b00      	cmp	r3, #0
 801979e:	d001      	beq.n	80197a4 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 80197a0:	2301      	movs	r3, #1
 80197a2:	e000      	b.n	80197a6 <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 80197a4:	2300      	movs	r3, #0
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d02c      	beq.n	8019804 <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	33cc      	adds	r3, #204	; 0xcc
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	6878      	ldr	r0, [r7, #4]
 80197b4:	4798      	blx	r3
 80197b6:	4604      	mov	r4, r0
 80197b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80197bc:	6879      	ldr	r1, [r7, #4]
 80197be:	4618      	mov	r0, r3
 80197c0:	f7fe fd3f 	bl	8018242 <_ZNK21MockCheckedActualCall7getNameEv>
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197c8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80197cc:	f107 000c 	add.w	r0, r7, #12
 80197d0:	9300      	str	r3, [sp, #0]
 80197d2:	683b      	ldr	r3, [r7, #0]
 80197d4:	4621      	mov	r1, r4
 80197d6:	f004 f9fb 	bl	801dbd0 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 80197da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80197de:	4618      	mov	r0, r3
 80197e0:	f7f4 f905 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	33dc      	adds	r3, #220	; 0xdc
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	f107 020c 	add.w	r2, r7, #12
 80197f0:	4611      	mov	r1, r2
 80197f2:	6878      	ldr	r0, [r7, #4]
 80197f4:	4798      	blx	r3
        return *this;
 80197f6:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 80197f8:	f107 030c 	add.w	r3, r7, #12
 80197fc:	4618      	mov	r0, r3
 80197fe:	f000 ffa7 	bl	801a750 <_ZN27MockUnexpectedObjectFailureD1Ev>
 8019802:	e00f      	b.n	8019824 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	331c      	adds	r3, #28
 8019808:	4618      	mov	r0, r3
 801980a:	f003 f9a7 	bl	801cb5c <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	699b      	ldr	r3, [r3, #24]
 8019812:	2b00      	cmp	r3, #0
 8019814:	d105      	bne.n	8019822 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	33d8      	adds	r3, #216	; 0xd8
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	6878      	ldr	r0, [r7, #4]
 8019820:	4798      	blx	r3
    }

    return *this;
 8019822:	687c      	ldr	r4, [r7, #4]
 8019824:	4623      	mov	r3, r4
}
 8019826:	4618      	mov	r0, r3
 8019828:	374c      	adds	r7, #76	; 0x4c
 801982a:	46bd      	mov	sp, r7
 801982c:	bd90      	pop	{r4, r7, pc}
	...

08019830 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 8019830:	b590      	push	{r4, r7, lr}
 8019832:	b087      	sub	sp, #28
 8019834:	af00      	add	r7, sp, #0
 8019836:	60f8      	str	r0, [r7, #12]
 8019838:	60b9      	str	r1, [r7, #8]
 801983a:	607a      	str	r2, [r7, #4]
 801983c:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 801983e:	f240 2282 	movw	r2, #642	; 0x282
 8019842:	4913      	ldr	r1, [pc, #76]	; (8019890 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 8019844:	2018      	movs	r0, #24
 8019846:	f7f1 f957 	bl	800aaf8 <_ZnwjPKci>
 801984a:	4604      	mov	r4, r0
 801984c:	683b      	ldr	r3, [r7, #0]
 801984e:	687a      	ldr	r2, [r7, #4]
 8019850:	68b9      	ldr	r1, [r7, #8]
 8019852:	4620      	mov	r0, r4
 8019854:	f7fe fa48 	bl	8017ce8 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 8019858:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801985e:	2b00      	cmp	r3, #0
 8019860:	d103      	bne.n	801986a <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 8019862:	68fb      	ldr	r3, [r7, #12]
 8019864:	693a      	ldr	r2, [r7, #16]
 8019866:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 8019868:	e00d      	b.n	8019886 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 801986a:	68fb      	ldr	r3, [r7, #12]
 801986c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801986e:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 8019870:	697b      	ldr	r3, [r7, #20]
 8019872:	695b      	ldr	r3, [r3, #20]
 8019874:	2b00      	cmp	r3, #0
 8019876:	d003      	beq.n	8019880 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 8019878:	697b      	ldr	r3, [r7, #20]
 801987a:	695b      	ldr	r3, [r3, #20]
 801987c:	617b      	str	r3, [r7, #20]
 801987e:	e7f7      	b.n	8019870 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 8019880:	697b      	ldr	r3, [r7, #20]
 8019882:	693a      	ldr	r2, [r7, #16]
 8019884:	615a      	str	r2, [r3, #20]
}
 8019886:	bf00      	nop
 8019888:	371c      	adds	r7, #28
 801988a:	46bd      	mov	sp, r7
 801988c:	bd90      	pop	{r4, r7, pc}
 801988e:	bf00      	nop
 8019890:	08026670 	.word	0x08026670

08019894 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 8019894:	b580      	push	{r7, lr}
 8019896:	b082      	sub	sp, #8
 8019898:	af00      	add	r7, sp, #0
 801989a:	6078      	str	r0, [r7, #4]
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	3308      	adds	r3, #8
 80198a0:	4618      	mov	r0, r3
 80198a2:	f7f4 f8a4 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	4618      	mov	r0, r3
 80198aa:	f7f4 f8a0 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	4618      	mov	r0, r3
 80198b2:	3708      	adds	r7, #8
 80198b4:	46bd      	mov	sp, r7
 80198b6:	bd80      	pop	{r7, pc}

080198b8 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 80198b8:	b590      	push	{r4, r7, lr}
 80198ba:	b085      	sub	sp, #20
 80198bc:	af00      	add	r7, sp, #0
 80198be:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80198c4:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 80198c6:	2300      	movs	r3, #0
 80198c8:	60bb      	str	r3, [r7, #8]

    while (current) {
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d012      	beq.n	80198f6 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	695b      	ldr	r3, [r3, #20]
 80198d8:	60fb      	str	r3, [r7, #12]
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	68fa      	ldr	r2, [r7, #12]
 80198de:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 80198e0:	68bc      	ldr	r4, [r7, #8]
 80198e2:	2c00      	cmp	r4, #0
 80198e4:	d0f1      	beq.n	80198ca <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 80198e6:	4620      	mov	r0, r4
 80198e8:	f7ff ffd4 	bl	8019894 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 80198ec:	2118      	movs	r1, #24
 80198ee:	4620      	mov	r0, r4
 80198f0:	f7f1 f916 	bl	800ab20 <_ZdlPvj>
    while (current) {
 80198f4:	e7e9      	b.n	80198ca <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 80198f6:	bf00      	nop
 80198f8:	3714      	adds	r7, #20
 80198fa:	46bd      	mov	sp, r7
 80198fc:	bd90      	pop	{r4, r7, pc}
	...

08019900 <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 8019900:	b580      	push	{r7, lr}
 8019902:	b082      	sub	sp, #8
 8019904:	af00      	add	r7, sp, #0
 8019906:	6078      	str	r0, [r7, #4]
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	4618      	mov	r0, r3
 801990c:	f7fe fc6a 	bl	80181e4 <_ZN14MockActualCallC1Ev>
 8019910:	4a06      	ldr	r2, [pc, #24]	; (801992c <_ZN19MockActualCallTraceC1Ev+0x2c>)
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	601a      	str	r2, [r3, #0]
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	3304      	adds	r3, #4
 801991a:	4905      	ldr	r1, [pc, #20]	; (8019930 <_ZN19MockActualCallTraceC1Ev+0x30>)
 801991c:	4618      	mov	r0, r3
 801991e:	f7f3 fcae 	bl	800d27e <_ZN12SimpleStringC1EPKc>
{
}
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	4618      	mov	r0, r3
 8019926:	3708      	adds	r7, #8
 8019928:	46bd      	mov	sp, r7
 801992a:	bd80      	pop	{r7, pc}
 801992c:	08029588 	.word	0x08029588
 8019930:	08026658 	.word	0x08026658

08019934 <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 8019934:	b580      	push	{r7, lr}
 8019936:	b082      	sub	sp, #8
 8019938:	af00      	add	r7, sp, #0
 801993a:	6078      	str	r0, [r7, #4]
 801993c:	4a08      	ldr	r2, [pc, #32]	; (8019960 <_ZN19MockActualCallTraceD1Ev+0x2c>)
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	601a      	str	r2, [r3, #0]
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	3304      	adds	r3, #4
 8019946:	4618      	mov	r0, r3
 8019948:	f7f4 f851 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	4618      	mov	r0, r3
 8019950:	f7fe fc58 	bl	8018204 <_ZN14MockActualCallD1Ev>
{
}
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	4618      	mov	r0, r3
 8019958:	3708      	adds	r7, #8
 801995a:	46bd      	mov	sp, r7
 801995c:	bd80      	pop	{r7, pc}
 801995e:	bf00      	nop
 8019960:	08029588 	.word	0x08029588

08019964 <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 8019964:	b580      	push	{r7, lr}
 8019966:	b082      	sub	sp, #8
 8019968:	af00      	add	r7, sp, #0
 801996a:	6078      	str	r0, [r7, #4]
}
 801996c:	6878      	ldr	r0, [r7, #4]
 801996e:	f7ff ffe1 	bl	8019934 <_ZN19MockActualCallTraceD1Ev>
 8019972:	210c      	movs	r1, #12
 8019974:	6878      	ldr	r0, [r7, #4]
 8019976:	f7f1 f8d3 	bl	800ab20 <_ZdlPvj>
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	4618      	mov	r0, r3
 801997e:	3708      	adds	r7, #8
 8019980:	46bd      	mov	sp, r7
 8019982:	bd80      	pop	{r7, pc}

08019984 <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 8019984:	b580      	push	{r7, lr}
 8019986:	b082      	sub	sp, #8
 8019988:	af00      	add	r7, sp, #0
 801998a:	6078      	str	r0, [r7, #4]
 801998c:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	3304      	adds	r3, #4
 8019992:	4907      	ldr	r1, [pc, #28]	; (80199b0 <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 8019994:	4618      	mov	r0, r3
 8019996:	f7f4 f8b9 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	3304      	adds	r3, #4
 801999e:	6839      	ldr	r1, [r7, #0]
 80199a0:	4618      	mov	r0, r3
 80199a2:	f7f4 f8a1 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
    return *this;
 80199a6:	687b      	ldr	r3, [r7, #4]
}
 80199a8:	4618      	mov	r0, r3
 80199aa:	3708      	adds	r7, #8
 80199ac:	46bd      	mov	sp, r7
 80199ae:	bd80      	pop	{r7, pc}
 80199b0:	08026764 	.word	0x08026764

080199b4 <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 80199b4:	b590      	push	{r4, r7, lr}
 80199b6:	b085      	sub	sp, #20
 80199b8:	af00      	add	r7, sp, #0
 80199ba:	6078      	str	r0, [r7, #4]
 80199bc:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	3304      	adds	r3, #4
 80199c2:	490e      	ldr	r1, [pc, #56]	; (80199fc <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 80199c4:	4618      	mov	r0, r3
 80199c6:	f7f4 f8a1 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	1d1c      	adds	r4, r3, #4
 80199ce:	f107 0308 	add.w	r3, r7, #8
 80199d2:	6839      	ldr	r1, [r7, #0]
 80199d4:	4618      	mov	r0, r3
 80199d6:	f7f4 fd39 	bl	800e44c <_Z10StringFromj>
 80199da:	f107 0308 	add.w	r3, r7, #8
 80199de:	4619      	mov	r1, r3
 80199e0:	4620      	mov	r0, r4
 80199e2:	f7f4 f881 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 80199e6:	f107 0308 	add.w	r3, r7, #8
 80199ea:	4618      	mov	r0, r3
 80199ec:	f7f3 ffff 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return *this;
 80199f0:	687b      	ldr	r3, [r7, #4]
}
 80199f2:	4618      	mov	r0, r3
 80199f4:	3714      	adds	r7, #20
 80199f6:	46bd      	mov	sp, r7
 80199f8:	bd90      	pop	{r4, r7, pc}
 80199fa:	bf00      	nop
 80199fc:	08026774 	.word	0x08026774

08019a00 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 8019a00:	b580      	push	{r7, lr}
 8019a02:	b082      	sub	sp, #8
 8019a04:	af00      	add	r7, sp, #0
 8019a06:	6078      	str	r0, [r7, #4]
 8019a08:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	3304      	adds	r3, #4
 8019a0e:	490a      	ldr	r1, [pc, #40]	; (8019a38 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 8019a10:	4618      	mov	r0, r3
 8019a12:	f7f4 f87b 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	3304      	adds	r3, #4
 8019a1a:	6839      	ldr	r1, [r7, #0]
 8019a1c:	4618      	mov	r0, r3
 8019a1e:	f7f4 f863 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	3304      	adds	r3, #4
 8019a26:	4905      	ldr	r1, [pc, #20]	; (8019a3c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 8019a28:	4618      	mov	r0, r3
 8019a2a:	f7f4 f86f 	bl	800db0c <_ZN12SimpleStringpLEPKc>
}
 8019a2e:	bf00      	nop
 8019a30:	3708      	adds	r7, #8
 8019a32:	46bd      	mov	sp, r7
 8019a34:	bd80      	pop	{r7, pc}
 8019a36:	bf00      	nop
 8019a38:	08026784 	.word	0x08026784
 8019a3c:	08026788 	.word	0x08026788

08019a40 <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 8019a40:	b590      	push	{r4, r7, lr}
 8019a42:	b087      	sub	sp, #28
 8019a44:	af00      	add	r7, sp, #0
 8019a46:	60f8      	str	r0, [r7, #12]
 8019a48:	60b9      	str	r1, [r7, #8]
 8019a4a:	4613      	mov	r3, r2
 8019a4c:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 8019a4e:	68b9      	ldr	r1, [r7, #8]
 8019a50:	68f8      	ldr	r0, [r7, #12]
 8019a52:	f7ff ffd5 	bl	8019a00 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	1d1c      	adds	r4, r3, #4
 8019a5a:	f107 0310 	add.w	r3, r7, #16
 8019a5e:	79fa      	ldrb	r2, [r7, #7]
 8019a60:	4611      	mov	r1, r2
 8019a62:	4618      	mov	r0, r3
 8019a64:	f7f4 fa34 	bl	800ded0 <_Z10StringFromb>
 8019a68:	f107 0310 	add.w	r3, r7, #16
 8019a6c:	4619      	mov	r1, r3
 8019a6e:	4620      	mov	r0, r4
 8019a70:	f7f4 f83a 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 8019a74:	f107 0310 	add.w	r3, r7, #16
 8019a78:	4618      	mov	r0, r3
 8019a7a:	f7f3 ffb8 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019a7e:	68fb      	ldr	r3, [r7, #12]
}
 8019a80:	4618      	mov	r0, r3
 8019a82:	371c      	adds	r7, #28
 8019a84:	46bd      	mov	sp, r7
 8019a86:	bd90      	pop	{r4, r7, pc}

08019a88 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8019a88:	b590      	push	{r4, r7, lr}
 8019a8a:	b08f      	sub	sp, #60	; 0x3c
 8019a8c:	af00      	add	r7, sp, #0
 8019a8e:	60f8      	str	r0, [r7, #12]
 8019a90:	60b9      	str	r1, [r7, #8]
 8019a92:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019a94:	68b9      	ldr	r1, [r7, #8]
 8019a96:	68f8      	ldr	r0, [r7, #12]
 8019a98:	f7ff ffb2 	bl	8019a00 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	1d1c      	adds	r4, r3, #4
 8019aa0:	f107 0320 	add.w	r3, r7, #32
 8019aa4:	6879      	ldr	r1, [r7, #4]
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	f7f4 fcd0 	bl	800e44c <_Z10StringFromj>
 8019aac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019ab0:	491f      	ldr	r1, [pc, #124]	; (8019b30 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	f7f3 fbe3 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8019ab8:	f107 0318 	add.w	r3, r7, #24
 8019abc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019ac0:	f107 0120 	add.w	r1, r7, #32
 8019ac4:	4618      	mov	r0, r3
 8019ac6:	f7f3 fff4 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 8019aca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019ace:	6879      	ldr	r1, [r7, #4]
 8019ad0:	4618      	mov	r0, r3
 8019ad2:	f7f4 fb5f 	bl	800e194 <_Z30BracketsFormattedHexStringFromj>
 8019ad6:	f107 0310 	add.w	r3, r7, #16
 8019ada:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8019ade:	f107 0118 	add.w	r1, r7, #24
 8019ae2:	4618      	mov	r0, r3
 8019ae4:	f7f3 ffe5 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 8019ae8:	f107 0310 	add.w	r3, r7, #16
 8019aec:	4619      	mov	r1, r3
 8019aee:	4620      	mov	r0, r4
 8019af0:	f7f3 fffa 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 8019af4:	f107 0310 	add.w	r3, r7, #16
 8019af8:	4618      	mov	r0, r3
 8019afa:	f7f3 ff78 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8019afe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019b02:	4618      	mov	r0, r3
 8019b04:	f7f3 ff73 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8019b08:	f107 0318 	add.w	r3, r7, #24
 8019b0c:	4618      	mov	r0, r3
 8019b0e:	f7f3 ff6e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8019b12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019b16:	4618      	mov	r0, r3
 8019b18:	f7f3 ff69 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8019b1c:	f107 0320 	add.w	r3, r7, #32
 8019b20:	4618      	mov	r0, r3
 8019b22:	f7f3 ff64 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019b26:	68fb      	ldr	r3, [r7, #12]
}
 8019b28:	4618      	mov	r0, r3
 8019b2a:	373c      	adds	r7, #60	; 0x3c
 8019b2c:	46bd      	mov	sp, r7
 8019b2e:	bd90      	pop	{r4, r7, pc}
 8019b30:	08026784 	.word	0x08026784

08019b34 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 8019b34:	b590      	push	{r4, r7, lr}
 8019b36:	b08f      	sub	sp, #60	; 0x3c
 8019b38:	af00      	add	r7, sp, #0
 8019b3a:	60f8      	str	r0, [r7, #12]
 8019b3c:	60b9      	str	r1, [r7, #8]
 8019b3e:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019b40:	68b9      	ldr	r1, [r7, #8]
 8019b42:	68f8      	ldr	r0, [r7, #12]
 8019b44:	f7ff ff5c 	bl	8019a00 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8019b48:	68fb      	ldr	r3, [r7, #12]
 8019b4a:	1d1c      	adds	r4, r3, #4
 8019b4c:	f107 0320 	add.w	r3, r7, #32
 8019b50:	6879      	ldr	r1, [r7, #4]
 8019b52:	4618      	mov	r0, r3
 8019b54:	f7f4 fa12 	bl	800df7c <_Z10StringFromi>
 8019b58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019b5c:	491f      	ldr	r1, [pc, #124]	; (8019bdc <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 8019b5e:	4618      	mov	r0, r3
 8019b60:	f7f3 fb8d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8019b64:	f107 0318 	add.w	r3, r7, #24
 8019b68:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019b6c:	f107 0120 	add.w	r1, r7, #32
 8019b70:	4618      	mov	r0, r3
 8019b72:	f7f3 ff9e 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 8019b76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019b7a:	6879      	ldr	r1, [r7, #4]
 8019b7c:	4618      	mov	r0, r3
 8019b7e:	f7f4 faed 	bl	800e15c <_Z30BracketsFormattedHexStringFromi>
 8019b82:	f107 0310 	add.w	r3, r7, #16
 8019b86:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8019b8a:	f107 0118 	add.w	r1, r7, #24
 8019b8e:	4618      	mov	r0, r3
 8019b90:	f7f3 ff8f 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 8019b94:	f107 0310 	add.w	r3, r7, #16
 8019b98:	4619      	mov	r1, r3
 8019b9a:	4620      	mov	r0, r4
 8019b9c:	f7f3 ffa4 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 8019ba0:	f107 0310 	add.w	r3, r7, #16
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	f7f3 ff22 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8019baa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019bae:	4618      	mov	r0, r3
 8019bb0:	f7f3 ff1d 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8019bb4:	f107 0318 	add.w	r3, r7, #24
 8019bb8:	4618      	mov	r0, r3
 8019bba:	f7f3 ff18 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8019bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019bc2:	4618      	mov	r0, r3
 8019bc4:	f7f3 ff13 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8019bc8:	f107 0320 	add.w	r3, r7, #32
 8019bcc:	4618      	mov	r0, r3
 8019bce:	f7f3 ff0e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019bd2:	68fb      	ldr	r3, [r7, #12]
}
 8019bd4:	4618      	mov	r0, r3
 8019bd6:	373c      	adds	r7, #60	; 0x3c
 8019bd8:	46bd      	mov	sp, r7
 8019bda:	bd90      	pop	{r4, r7, pc}
 8019bdc:	08026784 	.word	0x08026784

08019be0 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8019be0:	b590      	push	{r4, r7, lr}
 8019be2:	b08f      	sub	sp, #60	; 0x3c
 8019be4:	af00      	add	r7, sp, #0
 8019be6:	60f8      	str	r0, [r7, #12]
 8019be8:	60b9      	str	r1, [r7, #8]
 8019bea:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019bec:	68b9      	ldr	r1, [r7, #8]
 8019bee:	68f8      	ldr	r0, [r7, #12]
 8019bf0:	f7ff ff06 	bl	8019a00 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8019bf4:	68fb      	ldr	r3, [r7, #12]
 8019bf6:	1d1c      	adds	r4, r3, #4
 8019bf8:	f107 0320 	add.w	r3, r7, #32
 8019bfc:	6879      	ldr	r1, [r7, #4]
 8019bfe:	4618      	mov	r0, r3
 8019c00:	f7f4 fc36 	bl	800e470 <_Z10StringFromm>
 8019c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019c08:	491f      	ldr	r1, [pc, #124]	; (8019c88 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 8019c0a:	4618      	mov	r0, r3
 8019c0c:	f7f3 fb37 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8019c10:	f107 0318 	add.w	r3, r7, #24
 8019c14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019c18:	f107 0120 	add.w	r1, r7, #32
 8019c1c:	4618      	mov	r0, r3
 8019c1e:	f7f3 ff48 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 8019c22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019c26:	6879      	ldr	r1, [r7, #4]
 8019c28:	4618      	mov	r0, r3
 8019c2a:	f7f4 faeb 	bl	800e204 <_Z30BracketsFormattedHexStringFromm>
 8019c2e:	f107 0310 	add.w	r3, r7, #16
 8019c32:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8019c36:	f107 0118 	add.w	r1, r7, #24
 8019c3a:	4618      	mov	r0, r3
 8019c3c:	f7f3 ff39 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 8019c40:	f107 0310 	add.w	r3, r7, #16
 8019c44:	4619      	mov	r1, r3
 8019c46:	4620      	mov	r0, r4
 8019c48:	f7f3 ff4e 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 8019c4c:	f107 0310 	add.w	r3, r7, #16
 8019c50:	4618      	mov	r0, r3
 8019c52:	f7f3 fecc 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8019c56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019c5a:	4618      	mov	r0, r3
 8019c5c:	f7f3 fec7 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8019c60:	f107 0318 	add.w	r3, r7, #24
 8019c64:	4618      	mov	r0, r3
 8019c66:	f7f3 fec2 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8019c6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019c6e:	4618      	mov	r0, r3
 8019c70:	f7f3 febd 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8019c74:	f107 0320 	add.w	r3, r7, #32
 8019c78:	4618      	mov	r0, r3
 8019c7a:	f7f3 feb8 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019c7e:	68fb      	ldr	r3, [r7, #12]
}
 8019c80:	4618      	mov	r0, r3
 8019c82:	373c      	adds	r7, #60	; 0x3c
 8019c84:	46bd      	mov	sp, r7
 8019c86:	bd90      	pop	{r4, r7, pc}
 8019c88:	08026784 	.word	0x08026784

08019c8c <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 8019c8c:	b590      	push	{r4, r7, lr}
 8019c8e:	b08f      	sub	sp, #60	; 0x3c
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	60f8      	str	r0, [r7, #12]
 8019c94:	60b9      	str	r1, [r7, #8]
 8019c96:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019c98:	68b9      	ldr	r1, [r7, #8]
 8019c9a:	68f8      	ldr	r0, [r7, #12]
 8019c9c:	f7ff feb0 	bl	8019a00 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8019ca0:	68fb      	ldr	r3, [r7, #12]
 8019ca2:	1d1c      	adds	r4, r3, #4
 8019ca4:	f107 0320 	add.w	r3, r7, #32
 8019ca8:	6879      	ldr	r1, [r7, #4]
 8019caa:	4618      	mov	r0, r3
 8019cac:	f7f4 f978 	bl	800dfa0 <_Z10StringFroml>
 8019cb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019cb4:	491f      	ldr	r1, [pc, #124]	; (8019d34 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 8019cb6:	4618      	mov	r0, r3
 8019cb8:	f7f3 fae1 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 8019cbc:	f107 0318 	add.w	r3, r7, #24
 8019cc0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019cc4:	f107 0120 	add.w	r1, r7, #32
 8019cc8:	4618      	mov	r0, r3
 8019cca:	f7f3 fef2 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 8019cce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019cd2:	6879      	ldr	r1, [r7, #4]
 8019cd4:	4618      	mov	r0, r3
 8019cd6:	f7f4 fa79 	bl	800e1cc <_Z30BracketsFormattedHexStringFroml>
 8019cda:	f107 0310 	add.w	r3, r7, #16
 8019cde:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8019ce2:	f107 0118 	add.w	r1, r7, #24
 8019ce6:	4618      	mov	r0, r3
 8019ce8:	f7f3 fee3 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 8019cec:	f107 0310 	add.w	r3, r7, #16
 8019cf0:	4619      	mov	r1, r3
 8019cf2:	4620      	mov	r0, r4
 8019cf4:	f7f3 fef8 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 8019cf8:	f107 0310 	add.w	r3, r7, #16
 8019cfc:	4618      	mov	r0, r3
 8019cfe:	f7f3 fe76 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8019d02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019d06:	4618      	mov	r0, r3
 8019d08:	f7f3 fe71 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8019d0c:	f107 0318 	add.w	r3, r7, #24
 8019d10:	4618      	mov	r0, r3
 8019d12:	f7f3 fe6c 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8019d16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019d1a:	4618      	mov	r0, r3
 8019d1c:	f7f3 fe67 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 8019d20:	f107 0320 	add.w	r3, r7, #32
 8019d24:	4618      	mov	r0, r3
 8019d26:	f7f3 fe62 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019d2a:	68fb      	ldr	r3, [r7, #12]
}
 8019d2c:	4618      	mov	r0, r3
 8019d2e:	373c      	adds	r7, #60	; 0x3c
 8019d30:	46bd      	mov	sp, r7
 8019d32:	bd90      	pop	{r4, r7, pc}
 8019d34:	08026784 	.word	0x08026784

08019d38 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8019d38:	b5b0      	push	{r4, r5, r7, lr}
 8019d3a:	b086      	sub	sp, #24
 8019d3c:	af02      	add	r7, sp, #8
 8019d3e:	60f8      	str	r0, [r7, #12]
 8019d40:	60b9      	str	r1, [r7, #8]
 8019d42:	4639      	mov	r1, r7
 8019d44:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8019d48:	f7fa fe7c 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8019d4c:	4604      	mov	r4, r0
 8019d4e:	6823      	ldr	r3, [r4, #0]
 8019d50:	3368      	adds	r3, #104	; 0x68
 8019d52:	681d      	ldr	r5, [r3, #0]
 8019d54:	f7fa fe86 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019d58:	4603      	mov	r3, r0
 8019d5a:	9300      	str	r3, [sp, #0]
 8019d5c:	f240 23ee 	movw	r3, #750	; 0x2ee
 8019d60:	4a04      	ldr	r2, [pc, #16]	; (8019d74 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8019d62:	4905      	ldr	r1, [pc, #20]	; (8019d78 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8019d64:	4620      	mov	r0, r4
 8019d66:	47a8      	blx	r5
    return *this;
 8019d68:	68fb      	ldr	r3, [r7, #12]
}
 8019d6a:	4618      	mov	r0, r3
 8019d6c:	3710      	adds	r7, #16
 8019d6e:	46bd      	mov	sp, r7
 8019d70:	bdb0      	pop	{r4, r5, r7, pc}
 8019d72:	bf00      	nop
 8019d74:	08026670 	.word	0x08026670
 8019d78:	0802668c 	.word	0x0802668c

08019d7c <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8019d7c:	b5b0      	push	{r4, r5, r7, lr}
 8019d7e:	b086      	sub	sp, #24
 8019d80:	af02      	add	r7, sp, #8
 8019d82:	60f8      	str	r0, [r7, #12]
 8019d84:	60b9      	str	r1, [r7, #8]
 8019d86:	4639      	mov	r1, r7
 8019d88:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8019d8c:	f7fa fe5a 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 8019d90:	4604      	mov	r4, r0
 8019d92:	6823      	ldr	r3, [r4, #0]
 8019d94:	3368      	adds	r3, #104	; 0x68
 8019d96:	681d      	ldr	r5, [r3, #0]
 8019d98:	f7fa fe64 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019d9c:	4603      	mov	r3, r0
 8019d9e:	9300      	str	r3, [sp, #0]
 8019da0:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8019da4:	4a04      	ldr	r2, [pc, #16]	; (8019db8 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8019da6:	4905      	ldr	r1, [pc, #20]	; (8019dbc <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8019da8:	4620      	mov	r0, r4
 8019daa:	47a8      	blx	r5
    return *this;
 8019dac:	68fb      	ldr	r3, [r7, #12]
}
 8019dae:	4618      	mov	r0, r3
 8019db0:	3710      	adds	r7, #16
 8019db2:	46bd      	mov	sp, r7
 8019db4:	bdb0      	pop	{r4, r5, r7, pc}
 8019db6:	bf00      	nop
 8019db8:	08026670 	.word	0x08026670
 8019dbc:	080266b8 	.word	0x080266b8

08019dc0 <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 8019dc0:	b590      	push	{r4, r7, lr}
 8019dc2:	b087      	sub	sp, #28
 8019dc4:	af00      	add	r7, sp, #0
 8019dc6:	60f8      	str	r0, [r7, #12]
 8019dc8:	60b9      	str	r1, [r7, #8]
 8019dca:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 8019dce:	68b9      	ldr	r1, [r7, #8]
 8019dd0:	68f8      	ldr	r0, [r7, #12]
 8019dd2:	f7ff fe15 	bl	8019a00 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	1d1c      	adds	r4, r3, #4
 8019dda:	f107 0310 	add.w	r3, r7, #16
 8019dde:	2106      	movs	r1, #6
 8019de0:	ed97 0b00 	vldr	d0, [r7]
 8019de4:	4618      	mov	r0, r3
 8019de6:	f7f4 fac7 	bl	800e378 <_Z10StringFromdi>
 8019dea:	f107 0310 	add.w	r3, r7, #16
 8019dee:	4619      	mov	r1, r3
 8019df0:	4620      	mov	r0, r4
 8019df2:	f7f3 fe79 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 8019df6:	f107 0310 	add.w	r3, r7, #16
 8019dfa:	4618      	mov	r0, r3
 8019dfc:	f7f3 fdf7 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019e00:	68fb      	ldr	r3, [r7, #12]
}
 8019e02:	4618      	mov	r0, r3
 8019e04:	371c      	adds	r7, #28
 8019e06:	46bd      	mov	sp, r7
 8019e08:	bd90      	pop	{r4, r7, pc}

08019e0a <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 8019e0a:	b590      	push	{r4, r7, lr}
 8019e0c:	b087      	sub	sp, #28
 8019e0e:	af00      	add	r7, sp, #0
 8019e10:	60f8      	str	r0, [r7, #12]
 8019e12:	60b9      	str	r1, [r7, #8]
 8019e14:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019e16:	68b9      	ldr	r1, [r7, #8]
 8019e18:	68f8      	ldr	r0, [r7, #12]
 8019e1a:	f7ff fdf1 	bl	8019a00 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	1d1c      	adds	r4, r3, #4
 8019e22:	f107 0310 	add.w	r3, r7, #16
 8019e26:	6879      	ldr	r1, [r7, #4]
 8019e28:	4618      	mov	r0, r3
 8019e2a:	f7f4 f86d 	bl	800df08 <_Z10StringFromPKc>
 8019e2e:	f107 0310 	add.w	r3, r7, #16
 8019e32:	4619      	mov	r1, r3
 8019e34:	4620      	mov	r0, r4
 8019e36:	f7f3 fe57 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 8019e3a:	f107 0310 	add.w	r3, r7, #16
 8019e3e:	4618      	mov	r0, r3
 8019e40:	f7f3 fdd5 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019e44:	68fb      	ldr	r3, [r7, #12]
}
 8019e46:	4618      	mov	r0, r3
 8019e48:	371c      	adds	r7, #28
 8019e4a:	46bd      	mov	sp, r7
 8019e4c:	bd90      	pop	{r4, r7, pc}

08019e4e <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 8019e4e:	b590      	push	{r4, r7, lr}
 8019e50:	b087      	sub	sp, #28
 8019e52:	af00      	add	r7, sp, #0
 8019e54:	60f8      	str	r0, [r7, #12]
 8019e56:	60b9      	str	r1, [r7, #8]
 8019e58:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019e5a:	68b9      	ldr	r1, [r7, #8]
 8019e5c:	68f8      	ldr	r0, [r7, #12]
 8019e5e:	f7ff fdcf 	bl	8019a00 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019e62:	68fb      	ldr	r3, [r7, #12]
 8019e64:	1d1c      	adds	r4, r3, #4
 8019e66:	f107 0310 	add.w	r3, r7, #16
 8019e6a:	6879      	ldr	r1, [r7, #4]
 8019e6c:	4618      	mov	r0, r3
 8019e6e:	f7f4 f8a9 	bl	800dfc4 <_Z10StringFromPKv>
 8019e72:	f107 0310 	add.w	r3, r7, #16
 8019e76:	4619      	mov	r1, r3
 8019e78:	4620      	mov	r0, r4
 8019e7a:	f7f3 fe35 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 8019e7e:	f107 0310 	add.w	r3, r7, #16
 8019e82:	4618      	mov	r0, r3
 8019e84:	f7f3 fdb3 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019e88:	68fb      	ldr	r3, [r7, #12]
}
 8019e8a:	4618      	mov	r0, r3
 8019e8c:	371c      	adds	r7, #28
 8019e8e:	46bd      	mov	sp, r7
 8019e90:	bd90      	pop	{r4, r7, pc}

08019e92 <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8019e92:	b590      	push	{r4, r7, lr}
 8019e94:	b087      	sub	sp, #28
 8019e96:	af00      	add	r7, sp, #0
 8019e98:	60f8      	str	r0, [r7, #12]
 8019e9a:	60b9      	str	r1, [r7, #8]
 8019e9c:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019e9e:	68b9      	ldr	r1, [r7, #8]
 8019ea0:	68f8      	ldr	r0, [r7, #12]
 8019ea2:	f7ff fdad 	bl	8019a00 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	1d1c      	adds	r4, r3, #4
 8019eaa:	f107 0310 	add.w	r3, r7, #16
 8019eae:	6879      	ldr	r1, [r7, #4]
 8019eb0:	4618      	mov	r0, r3
 8019eb2:	f7f4 f887 	bl	800dfc4 <_Z10StringFromPKv>
 8019eb6:	f107 0310 	add.w	r3, r7, #16
 8019eba:	4619      	mov	r1, r3
 8019ebc:	4620      	mov	r0, r4
 8019ebe:	f7f3 fe13 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 8019ec2:	f107 0310 	add.w	r3, r7, #16
 8019ec6:	4618      	mov	r0, r3
 8019ec8:	f7f3 fd91 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019ecc:	68fb      	ldr	r3, [r7, #12]
}
 8019ece:	4618      	mov	r0, r3
 8019ed0:	371c      	adds	r7, #28
 8019ed2:	46bd      	mov	sp, r7
 8019ed4:	bd90      	pop	{r4, r7, pc}

08019ed6 <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8019ed6:	b590      	push	{r4, r7, lr}
 8019ed8:	b087      	sub	sp, #28
 8019eda:	af00      	add	r7, sp, #0
 8019edc:	60f8      	str	r0, [r7, #12]
 8019ede:	60b9      	str	r1, [r7, #8]
 8019ee0:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019ee2:	68b9      	ldr	r1, [r7, #8]
 8019ee4:	68f8      	ldr	r0, [r7, #12]
 8019ee6:	f7ff fd8b 	bl	8019a00 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	1d1c      	adds	r4, r3, #4
 8019eee:	f107 0310 	add.w	r3, r7, #16
 8019ef2:	6879      	ldr	r1, [r7, #4]
 8019ef4:	4618      	mov	r0, r3
 8019ef6:	f7f4 f88f 	bl	800e018 <_Z10StringFromPFvvE>
 8019efa:	f107 0310 	add.w	r3, r7, #16
 8019efe:	4619      	mov	r1, r3
 8019f00:	4620      	mov	r0, r4
 8019f02:	f7f3 fdf1 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 8019f06:	f107 0310 	add.w	r3, r7, #16
 8019f0a:	4618      	mov	r0, r3
 8019f0c:	f7f3 fd6f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019f10:	68fb      	ldr	r3, [r7, #12]
}
 8019f12:	4618      	mov	r0, r3
 8019f14:	371c      	adds	r7, #28
 8019f16:	46bd      	mov	sp, r7
 8019f18:	bd90      	pop	{r4, r7, pc}

08019f1a <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8019f1a:	b590      	push	{r4, r7, lr}
 8019f1c:	b087      	sub	sp, #28
 8019f1e:	af00      	add	r7, sp, #0
 8019f20:	60f8      	str	r0, [r7, #12]
 8019f22:	60b9      	str	r1, [r7, #8]
 8019f24:	607a      	str	r2, [r7, #4]
 8019f26:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 8019f28:	68b9      	ldr	r1, [r7, #8]
 8019f2a:	68f8      	ldr	r0, [r7, #12]
 8019f2c:	f7ff fd68 	bl	8019a00 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	1d1c      	adds	r4, r3, #4
 8019f34:	f107 0310 	add.w	r3, r7, #16
 8019f38:	683a      	ldr	r2, [r7, #0]
 8019f3a:	6879      	ldr	r1, [r7, #4]
 8019f3c:	4618      	mov	r0, r3
 8019f3e:	f7f4 fbaf 	bl	800e6a0 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 8019f42:	f107 0310 	add.w	r3, r7, #16
 8019f46:	4619      	mov	r1, r3
 8019f48:	4620      	mov	r0, r4
 8019f4a:	f7f3 fdcd 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 8019f4e:	f107 0310 	add.w	r3, r7, #16
 8019f52:	4618      	mov	r0, r3
 8019f54:	f7f3 fd4b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019f58:	68fb      	ldr	r3, [r7, #12]
}
 8019f5a:	4618      	mov	r0, r3
 8019f5c:	371c      	adds	r7, #28
 8019f5e:	46bd      	mov	sp, r7
 8019f60:	bd90      	pop	{r4, r7, pc}
	...

08019f64 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 8019f64:	b590      	push	{r4, r7, lr}
 8019f66:	b087      	sub	sp, #28
 8019f68:	af00      	add	r7, sp, #0
 8019f6a:	60f8      	str	r0, [r7, #12]
 8019f6c:	60b9      	str	r1, [r7, #8]
 8019f6e:	607a      	str	r2, [r7, #4]
 8019f70:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	3304      	adds	r3, #4
 8019f76:	4913      	ldr	r1, [pc, #76]	; (8019fc4 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 8019f78:	4618      	mov	r0, r3
 8019f7a:	f7f3 fdc7 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8019f7e:	68fb      	ldr	r3, [r7, #12]
 8019f80:	3304      	adds	r3, #4
 8019f82:	68b9      	ldr	r1, [r7, #8]
 8019f84:	4618      	mov	r0, r3
 8019f86:	f7f3 fdaf 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8019f8a:	6879      	ldr	r1, [r7, #4]
 8019f8c:	68f8      	ldr	r0, [r7, #12]
 8019f8e:	f7ff fd37 	bl	8019a00 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019f92:	68fb      	ldr	r3, [r7, #12]
 8019f94:	1d1c      	adds	r4, r3, #4
 8019f96:	f107 0310 	add.w	r3, r7, #16
 8019f9a:	6839      	ldr	r1, [r7, #0]
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	f7f4 f811 	bl	800dfc4 <_Z10StringFromPKv>
 8019fa2:	f107 0310 	add.w	r3, r7, #16
 8019fa6:	4619      	mov	r1, r3
 8019fa8:	4620      	mov	r0, r4
 8019faa:	f7f3 fd9d 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 8019fae:	f107 0310 	add.w	r3, r7, #16
 8019fb2:	4618      	mov	r0, r3
 8019fb4:	f7f3 fd1b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019fb8:	68fb      	ldr	r3, [r7, #12]
}
 8019fba:	4618      	mov	r0, r3
 8019fbc:	371c      	adds	r7, #28
 8019fbe:	46bd      	mov	sp, r7
 8019fc0:	bd90      	pop	{r4, r7, pc}
 8019fc2:	bf00      	nop
 8019fc4:	08026784 	.word	0x08026784

08019fc8 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 8019fc8:	b590      	push	{r4, r7, lr}
 8019fca:	b087      	sub	sp, #28
 8019fcc:	af00      	add	r7, sp, #0
 8019fce:	60f8      	str	r0, [r7, #12]
 8019fd0:	60b9      	str	r1, [r7, #8]
 8019fd2:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019fd4:	68b9      	ldr	r1, [r7, #8]
 8019fd6:	68f8      	ldr	r0, [r7, #12]
 8019fd8:	f7ff fd12 	bl	8019a00 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8019fdc:	68fb      	ldr	r3, [r7, #12]
 8019fde:	1d1c      	adds	r4, r3, #4
 8019fe0:	f107 0310 	add.w	r3, r7, #16
 8019fe4:	6879      	ldr	r1, [r7, #4]
 8019fe6:	4618      	mov	r0, r3
 8019fe8:	f7f3 ffec 	bl	800dfc4 <_Z10StringFromPKv>
 8019fec:	f107 0310 	add.w	r3, r7, #16
 8019ff0:	4619      	mov	r1, r3
 8019ff2:	4620      	mov	r0, r4
 8019ff4:	f7f3 fd78 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 8019ff8:	f107 0310 	add.w	r3, r7, #16
 8019ffc:	4618      	mov	r0, r3
 8019ffe:	f7f3 fcf6 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return *this;
 801a002:	68fb      	ldr	r3, [r7, #12]
}
 801a004:	4618      	mov	r0, r3
 801a006:	371c      	adds	r7, #28
 801a008:	46bd      	mov	sp, r7
 801a00a:	bd90      	pop	{r4, r7, pc}

0801a00c <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 801a00c:	b590      	push	{r4, r7, lr}
 801a00e:	b087      	sub	sp, #28
 801a010:	af00      	add	r7, sp, #0
 801a012:	60f8      	str	r0, [r7, #12]
 801a014:	60b9      	str	r1, [r7, #8]
 801a016:	607a      	str	r2, [r7, #4]
 801a018:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801a01a:	68fb      	ldr	r3, [r7, #12]
 801a01c:	3304      	adds	r3, #4
 801a01e:	4913      	ldr	r1, [pc, #76]	; (801a06c <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 801a020:	4618      	mov	r0, r3
 801a022:	f7f3 fd73 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 801a026:	68fb      	ldr	r3, [r7, #12]
 801a028:	3304      	adds	r3, #4
 801a02a:	68b9      	ldr	r1, [r7, #8]
 801a02c:	4618      	mov	r0, r3
 801a02e:	f7f3 fd5b 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 801a032:	6879      	ldr	r1, [r7, #4]
 801a034:	68f8      	ldr	r0, [r7, #12]
 801a036:	f7ff fce3 	bl	8019a00 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	1d1c      	adds	r4, r3, #4
 801a03e:	f107 0310 	add.w	r3, r7, #16
 801a042:	6839      	ldr	r1, [r7, #0]
 801a044:	4618      	mov	r0, r3
 801a046:	f7f3 ffbd 	bl	800dfc4 <_Z10StringFromPKv>
 801a04a:	f107 0310 	add.w	r3, r7, #16
 801a04e:	4619      	mov	r1, r3
 801a050:	4620      	mov	r0, r4
 801a052:	f7f3 fd49 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801a056:	f107 0310 	add.w	r3, r7, #16
 801a05a:	4618      	mov	r0, r3
 801a05c:	f7f3 fcc7 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return *this;
 801a060:	68fb      	ldr	r3, [r7, #12]
}
 801a062:	4618      	mov	r0, r3
 801a064:	371c      	adds	r7, #28
 801a066:	46bd      	mov	sp, r7
 801a068:	bd90      	pop	{r4, r7, pc}
 801a06a:	bf00      	nop
 801a06c:	08026784 	.word	0x08026784

0801a070 <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 801a070:	b480      	push	{r7}
 801a072:	b083      	sub	sp, #12
 801a074:	af00      	add	r7, sp, #0
 801a076:	6078      	str	r0, [r7, #4]
    return false;
 801a078:	2300      	movs	r3, #0
}
 801a07a:	4618      	mov	r0, r3
 801a07c:	370c      	adds	r7, #12
 801a07e:	46bd      	mov	sp, r7
 801a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a084:	4770      	bx	lr
	...

0801a088 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 801a088:	b580      	push	{r7, lr}
 801a08a:	b084      	sub	sp, #16
 801a08c:	af00      	add	r7, sp, #0
 801a08e:	6078      	str	r0, [r7, #4]
 801a090:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 801a092:	f107 0308 	add.w	r3, r7, #8
 801a096:	4909      	ldr	r1, [pc, #36]	; (801a0bc <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 801a098:	4618      	mov	r0, r3
 801a09a:	f7f3 f8f0 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801a09e:	f107 0308 	add.w	r3, r7, #8
 801a0a2:	4619      	mov	r1, r3
 801a0a4:	6878      	ldr	r0, [r7, #4]
 801a0a6:	f003 fe0f 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
 801a0aa:	f107 0308 	add.w	r3, r7, #8
 801a0ae:	4618      	mov	r0, r3
 801a0b0:	f7f3 fc9d 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 801a0b4:	6878      	ldr	r0, [r7, #4]
 801a0b6:	3710      	adds	r7, #16
 801a0b8:	46bd      	mov	sp, r7
 801a0ba:	bd80      	pop	{r7, pc}
 801a0bc:	08026658 	.word	0x08026658

0801a0c0 <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 801a0c0:	b480      	push	{r7}
 801a0c2:	b083      	sub	sp, #12
 801a0c4:	af00      	add	r7, sp, #0
 801a0c6:	6078      	str	r0, [r7, #4]
    return 0;
 801a0c8:	2300      	movs	r3, #0
}
 801a0ca:	4618      	mov	r0, r3
 801a0cc:	370c      	adds	r7, #12
 801a0ce:	46bd      	mov	sp, r7
 801a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0d4:	4770      	bx	lr

0801a0d6 <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 801a0d6:	b480      	push	{r7}
 801a0d8:	b083      	sub	sp, #12
 801a0da:	af00      	add	r7, sp, #0
 801a0dc:	6078      	str	r0, [r7, #4]
    return 0;
 801a0de:	2300      	movs	r3, #0
}
 801a0e0:	4618      	mov	r0, r3
 801a0e2:	370c      	adds	r7, #12
 801a0e4:	46bd      	mov	sp, r7
 801a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ea:	4770      	bx	lr

0801a0ec <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 801a0ec:	b480      	push	{r7}
 801a0ee:	b083      	sub	sp, #12
 801a0f0:	af00      	add	r7, sp, #0
 801a0f2:	6078      	str	r0, [r7, #4]
 801a0f4:	6039      	str	r1, [r7, #0]
    return 0;
 801a0f6:	2300      	movs	r3, #0
}
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	370c      	adds	r7, #12
 801a0fc:	46bd      	mov	sp, r7
 801a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a102:	4770      	bx	lr

0801a104 <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 801a104:	b480      	push	{r7}
 801a106:	b083      	sub	sp, #12
 801a108:	af00      	add	r7, sp, #0
 801a10a:	6078      	str	r0, [r7, #4]
 801a10c:	6039      	str	r1, [r7, #0]
    return 0;
 801a10e:	2300      	movs	r3, #0
}
 801a110:	4618      	mov	r0, r3
 801a112:	370c      	adds	r7, #12
 801a114:	46bd      	mov	sp, r7
 801a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a11a:	4770      	bx	lr

0801a11c <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 801a11c:	b5b0      	push	{r4, r5, r7, lr}
 801a11e:	b084      	sub	sp, #16
 801a120:	af02      	add	r7, sp, #8
 801a122:	6078      	str	r0, [r7, #4]
 801a124:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801a126:	f7fa fc8d 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801a12a:	4604      	mov	r4, r0
 801a12c:	6823      	ldr	r3, [r4, #0]
 801a12e:	3368      	adds	r3, #104	; 0x68
 801a130:	681d      	ldr	r5, [r3, #0]
 801a132:	f7fa fc97 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a136:	4603      	mov	r3, r0
 801a138:	9300      	str	r3, [sp, #0]
 801a13a:	f240 3375 	movw	r3, #885	; 0x375
 801a13e:	4a06      	ldr	r2, [pc, #24]	; (801a158 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 801a140:	4906      	ldr	r1, [pc, #24]	; (801a15c <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 801a142:	4620      	mov	r0, r4
 801a144:	47a8      	blx	r5
    return cpputest_longlong(0);
 801a146:	2100      	movs	r1, #0
 801a148:	6878      	ldr	r0, [r7, #4]
 801a14a:	f7f1 f8cf 	bl	800b2ec <_ZN17cpputest_longlongC1Ei>
}
 801a14e:	6878      	ldr	r0, [r7, #4]
 801a150:	3708      	adds	r7, #8
 801a152:	46bd      	mov	sp, r7
 801a154:	bdb0      	pop	{r4, r5, r7, pc}
 801a156:	bf00      	nop
 801a158:	08026670 	.word	0x08026670
 801a15c:	080266b8 	.word	0x080266b8

0801a160 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 801a160:	b5b0      	push	{r4, r5, r7, lr}
 801a162:	b084      	sub	sp, #16
 801a164:	af02      	add	r7, sp, #8
 801a166:	6078      	str	r0, [r7, #4]
 801a168:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801a16a:	f7fa fc6b 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801a16e:	4604      	mov	r4, r0
 801a170:	6823      	ldr	r3, [r4, #0]
 801a172:	3368      	adds	r3, #104	; 0x68
 801a174:	681d      	ldr	r5, [r3, #0]
 801a176:	f7fa fc75 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a17a:	4603      	mov	r3, r0
 801a17c:	9300      	str	r3, [sp, #0]
 801a17e:	f240 337b 	movw	r3, #891	; 0x37b
 801a182:	4a06      	ldr	r2, [pc, #24]	; (801a19c <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 801a184:	4906      	ldr	r1, [pc, #24]	; (801a1a0 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 801a186:	4620      	mov	r0, r4
 801a188:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801a18a:	2100      	movs	r1, #0
 801a18c:	6878      	ldr	r0, [r7, #4]
 801a18e:	f7f1 f8b9 	bl	800b304 <_ZN18cpputest_ulonglongC1Ei>
}
 801a192:	6878      	ldr	r0, [r7, #4]
 801a194:	3708      	adds	r7, #8
 801a196:	46bd      	mov	sp, r7
 801a198:	bdb0      	pop	{r4, r5, r7, pc}
 801a19a:	bf00      	nop
 801a19c:	08026670 	.word	0x08026670
 801a1a0:	0802668c 	.word	0x0802668c

0801a1a4 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 801a1a4:	b5b0      	push	{r4, r5, r7, lr}
 801a1a6:	b086      	sub	sp, #24
 801a1a8:	af02      	add	r7, sp, #8
 801a1aa:	60f8      	str	r0, [r7, #12]
 801a1ac:	60b9      	str	r1, [r7, #8]
 801a1ae:	4639      	mov	r1, r7
 801a1b0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801a1b4:	f7fa fc46 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801a1b8:	4604      	mov	r4, r0
 801a1ba:	6823      	ldr	r3, [r4, #0]
 801a1bc:	3368      	adds	r3, #104	; 0x68
 801a1be:	681d      	ldr	r5, [r3, #0]
 801a1c0:	f7fa fc50 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a1c4:	4603      	mov	r3, r0
 801a1c6:	9300      	str	r3, [sp, #0]
 801a1c8:	f240 3381 	movw	r3, #897	; 0x381
 801a1cc:	4a05      	ldr	r2, [pc, #20]	; (801a1e4 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 801a1ce:	4906      	ldr	r1, [pc, #24]	; (801a1e8 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 801a1d0:	4620      	mov	r0, r4
 801a1d2:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801a1d4:	2100      	movs	r1, #0
 801a1d6:	68f8      	ldr	r0, [r7, #12]
 801a1d8:	f7f1 f894 	bl	800b304 <_ZN18cpputest_ulonglongC1Ei>
}
 801a1dc:	68f8      	ldr	r0, [r7, #12]
 801a1de:	3710      	adds	r7, #16
 801a1e0:	46bd      	mov	sp, r7
 801a1e2:	bdb0      	pop	{r4, r5, r7, pc}
 801a1e4:	08026670 	.word	0x08026670
 801a1e8:	0802668c 	.word	0x0802668c

0801a1ec <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 801a1ec:	b5b0      	push	{r4, r5, r7, lr}
 801a1ee:	b086      	sub	sp, #24
 801a1f0:	af02      	add	r7, sp, #8
 801a1f2:	60f8      	str	r0, [r7, #12]
 801a1f4:	60b9      	str	r1, [r7, #8]
 801a1f6:	4639      	mov	r1, r7
 801a1f8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801a1fc:	f7fa fc22 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801a200:	4604      	mov	r4, r0
 801a202:	6823      	ldr	r3, [r4, #0]
 801a204:	3368      	adds	r3, #104	; 0x68
 801a206:	681d      	ldr	r5, [r3, #0]
 801a208:	f7fa fc2c 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a20c:	4603      	mov	r3, r0
 801a20e:	9300      	str	r3, [sp, #0]
 801a210:	f240 3387 	movw	r3, #903	; 0x387
 801a214:	4a05      	ldr	r2, [pc, #20]	; (801a22c <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 801a216:	4906      	ldr	r1, [pc, #24]	; (801a230 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 801a218:	4620      	mov	r0, r4
 801a21a:	47a8      	blx	r5
    return cpputest_longlong(0);
 801a21c:	2100      	movs	r1, #0
 801a21e:	68f8      	ldr	r0, [r7, #12]
 801a220:	f7f1 f864 	bl	800b2ec <_ZN17cpputest_longlongC1Ei>
}
 801a224:	68f8      	ldr	r0, [r7, #12]
 801a226:	3710      	adds	r7, #16
 801a228:	46bd      	mov	sp, r7
 801a22a:	bdb0      	pop	{r4, r5, r7, pc}
 801a22c:	08026670 	.word	0x08026670
 801a230:	080266b8 	.word	0x080266b8

0801a234 <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 801a234:	b480      	push	{r7}
 801a236:	b083      	sub	sp, #12
 801a238:	af00      	add	r7, sp, #0
 801a23a:	6078      	str	r0, [r7, #4]
    return false;
 801a23c:	2300      	movs	r3, #0
}
 801a23e:	4618      	mov	r0, r3
 801a240:	370c      	adds	r7, #12
 801a242:	46bd      	mov	sp, r7
 801a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a248:	4770      	bx	lr

0801a24a <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 801a24a:	b480      	push	{r7}
 801a24c:	b083      	sub	sp, #12
 801a24e:	af00      	add	r7, sp, #0
 801a250:	6078      	str	r0, [r7, #4]
 801a252:	460b      	mov	r3, r1
 801a254:	70fb      	strb	r3, [r7, #3]
    return false;
 801a256:	2300      	movs	r3, #0
}
 801a258:	4618      	mov	r0, r3
 801a25a:	370c      	adds	r7, #12
 801a25c:	46bd      	mov	sp, r7
 801a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a262:	4770      	bx	lr

0801a264 <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 801a264:	b480      	push	{r7}
 801a266:	b083      	sub	sp, #12
 801a268:	af00      	add	r7, sp, #0
 801a26a:	6078      	str	r0, [r7, #4]
    return 0;
 801a26c:	2300      	movs	r3, #0
}
 801a26e:	4618      	mov	r0, r3
 801a270:	370c      	adds	r7, #12
 801a272:	46bd      	mov	sp, r7
 801a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a278:	4770      	bx	lr

0801a27a <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 801a27a:	b480      	push	{r7}
 801a27c:	b083      	sub	sp, #12
 801a27e:	af00      	add	r7, sp, #0
 801a280:	6078      	str	r0, [r7, #4]
    return 0.0;
 801a282:	f04f 0200 	mov.w	r2, #0
 801a286:	f04f 0300 	mov.w	r3, #0
 801a28a:	ec43 2b17 	vmov	d7, r2, r3
}
 801a28e:	eeb0 0a47 	vmov.f32	s0, s14
 801a292:	eef0 0a67 	vmov.f32	s1, s15
 801a296:	370c      	adds	r7, #12
 801a298:	46bd      	mov	sp, r7
 801a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a29e:	4770      	bx	lr

0801a2a0 <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 801a2a0:	b580      	push	{r7, lr}
 801a2a2:	b084      	sub	sp, #16
 801a2a4:	af00      	add	r7, sp, #0
 801a2a6:	60f8      	str	r0, [r7, #12]
 801a2a8:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 801a2ac:	68fb      	ldr	r3, [r7, #12]
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	3398      	adds	r3, #152	; 0x98
 801a2b2:	681b      	ldr	r3, [r3, #0]
 801a2b4:	68f8      	ldr	r0, [r7, #12]
 801a2b6:	4798      	blx	r3
 801a2b8:	eeb0 7a40 	vmov.f32	s14, s0
 801a2bc:	eef0 7a60 	vmov.f32	s15, s1
}
 801a2c0:	eeb0 0a47 	vmov.f32	s0, s14
 801a2c4:	eef0 0a67 	vmov.f32	s1, s15
 801a2c8:	3710      	adds	r7, #16
 801a2ca:	46bd      	mov	sp, r7
 801a2cc:	bd80      	pop	{r7, pc}

0801a2ce <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 801a2ce:	b480      	push	{r7}
 801a2d0:	b083      	sub	sp, #12
 801a2d2:	af00      	add	r7, sp, #0
 801a2d4:	6078      	str	r0, [r7, #4]
    return 0;
 801a2d6:	2300      	movs	r3, #0
}
 801a2d8:	4618      	mov	r0, r3
 801a2da:	370c      	adds	r7, #12
 801a2dc:	46bd      	mov	sp, r7
 801a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2e2:	4770      	bx	lr

0801a2e4 <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 801a2e4:	b480      	push	{r7}
 801a2e6:	b083      	sub	sp, #12
 801a2e8:	af00      	add	r7, sp, #0
 801a2ea:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801a2ec:	2300      	movs	r3, #0
}
 801a2ee:	4618      	mov	r0, r3
 801a2f0:	370c      	adds	r7, #12
 801a2f2:	46bd      	mov	sp, r7
 801a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2f8:	4770      	bx	lr

0801a2fa <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 801a2fa:	b480      	push	{r7}
 801a2fc:	b083      	sub	sp, #12
 801a2fe:	af00      	add	r7, sp, #0
 801a300:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801a302:	2300      	movs	r3, #0
}
 801a304:	4618      	mov	r0, r3
 801a306:	370c      	adds	r7, #12
 801a308:	46bd      	mov	sp, r7
 801a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a30e:	4770      	bx	lr

0801a310 <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 801a310:	b480      	push	{r7}
 801a312:	b083      	sub	sp, #12
 801a314:	af00      	add	r7, sp, #0
 801a316:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801a318:	2300      	movs	r3, #0
}
 801a31a:	4618      	mov	r0, r3
 801a31c:	370c      	adds	r7, #12
 801a31e:	46bd      	mov	sp, r7
 801a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a324:	4770      	bx	lr

0801a326 <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 801a326:	b580      	push	{r7, lr}
 801a328:	b082      	sub	sp, #8
 801a32a:	af00      	add	r7, sp, #0
 801a32c:	6078      	str	r0, [r7, #4]
 801a32e:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	33a8      	adds	r3, #168	; 0xa8
 801a336:	681b      	ldr	r3, [r3, #0]
 801a338:	6878      	ldr	r0, [r7, #4]
 801a33a:	4798      	blx	r3
 801a33c:	4603      	mov	r3, r0
}
 801a33e:	4618      	mov	r0, r3
 801a340:	3708      	adds	r7, #8
 801a342:	46bd      	mov	sp, r7
 801a344:	bd80      	pop	{r7, pc}

0801a346 <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 801a346:	b580      	push	{r7, lr}
 801a348:	b082      	sub	sp, #8
 801a34a:	af00      	add	r7, sp, #0
 801a34c:	6078      	str	r0, [r7, #4]
 801a34e:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	681b      	ldr	r3, [r3, #0]
 801a354:	33a0      	adds	r3, #160	; 0xa0
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	6878      	ldr	r0, [r7, #4]
 801a35a:	4798      	blx	r3
 801a35c:	4603      	mov	r3, r0
}
 801a35e:	4618      	mov	r0, r3
 801a360:	3708      	adds	r7, #8
 801a362:	46bd      	mov	sp, r7
 801a364:	bd80      	pop	{r7, pc}

0801a366 <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 801a366:	b580      	push	{r7, lr}
 801a368:	b082      	sub	sp, #8
 801a36a:	af00      	add	r7, sp, #0
 801a36c:	6078      	str	r0, [r7, #4]
 801a36e:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	33b0      	adds	r3, #176	; 0xb0
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	6878      	ldr	r0, [r7, #4]
 801a37a:	4798      	blx	r3
 801a37c:	4603      	mov	r3, r0
}
 801a37e:	4618      	mov	r0, r3
 801a380:	3708      	adds	r7, #8
 801a382:	46bd      	mov	sp, r7
 801a384:	bd80      	pop	{r7, pc}
	...

0801a388 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 801a388:	b480      	push	{r7}
 801a38a:	b083      	sub	sp, #12
 801a38c:	af00      	add	r7, sp, #0
 801a38e:	6078      	str	r0, [r7, #4]
    return "";
 801a390:	4b03      	ldr	r3, [pc, #12]	; (801a3a0 <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 801a392:	4618      	mov	r0, r3
 801a394:	370c      	adds	r7, #12
 801a396:	46bd      	mov	sp, r7
 801a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a39c:	4770      	bx	lr
 801a39e:	bf00      	nop
 801a3a0:	08026658 	.word	0x08026658

0801a3a4 <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 801a3a4:	b580      	push	{r7, lr}
 801a3a6:	b082      	sub	sp, #8
 801a3a8:	af00      	add	r7, sp, #0
 801a3aa:	6078      	str	r0, [r7, #4]
 801a3ac:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	3394      	adds	r3, #148	; 0x94
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	6878      	ldr	r0, [r7, #4]
 801a3b8:	4798      	blx	r3
 801a3ba:	4603      	mov	r3, r0
}
 801a3bc:	4618      	mov	r0, r3
 801a3be:	3708      	adds	r7, #8
 801a3c0:	46bd      	mov	sp, r7
 801a3c2:	bd80      	pop	{r7, pc}

0801a3c4 <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 801a3c4:	b480      	push	{r7}
 801a3c6:	b083      	sub	sp, #12
 801a3c8:	af00      	add	r7, sp, #0
 801a3ca:	6078      	str	r0, [r7, #4]
 801a3cc:	6039      	str	r1, [r7, #0]
    return 0;
 801a3ce:	2300      	movs	r3, #0
}
 801a3d0:	4618      	mov	r0, r3
 801a3d2:	370c      	adds	r7, #12
 801a3d4:	46bd      	mov	sp, r7
 801a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3da:	4770      	bx	lr

0801a3dc <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 801a3dc:	b580      	push	{r7, lr}
 801a3de:	b082      	sub	sp, #8
 801a3e0:	af00      	add	r7, sp, #0
 801a3e2:	6078      	str	r0, [r7, #4]
 801a3e4:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	3388      	adds	r3, #136	; 0x88
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	6878      	ldr	r0, [r7, #4]
 801a3f0:	4798      	blx	r3
 801a3f2:	4603      	mov	r3, r0
}
 801a3f4:	4618      	mov	r0, r3
 801a3f6:	3708      	adds	r7, #8
 801a3f8:	46bd      	mov	sp, r7
 801a3fa:	bd80      	pop	{r7, pc}

0801a3fc <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 801a3fc:	b590      	push	{r4, r7, lr}
 801a3fe:	b085      	sub	sp, #20
 801a400:	af00      	add	r7, sp, #0
 801a402:	6078      	str	r0, [r7, #4]
 801a404:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	3304      	adds	r3, #4
 801a40a:	490e      	ldr	r1, [pc, #56]	; (801a444 <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 801a40c:	4618      	mov	r0, r3
 801a40e:	f7f3 fb7d 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	1d1c      	adds	r4, r3, #4
 801a416:	f107 0308 	add.w	r3, r7, #8
 801a41a:	6839      	ldr	r1, [r7, #0]
 801a41c:	4618      	mov	r0, r3
 801a41e:	f7f3 fdd1 	bl	800dfc4 <_Z10StringFromPKv>
 801a422:	f107 0308 	add.w	r3, r7, #8
 801a426:	4619      	mov	r1, r3
 801a428:	4620      	mov	r0, r4
 801a42a:	f7f3 fb5d 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801a42e:	f107 0308 	add.w	r3, r7, #8
 801a432:	4618      	mov	r0, r3
 801a434:	f7f3 fadb 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return *this;
 801a438:	687b      	ldr	r3, [r7, #4]
}
 801a43a:	4618      	mov	r0, r3
 801a43c:	3714      	adds	r7, #20
 801a43e:	46bd      	mov	sp, r7
 801a440:	bd90      	pop	{r4, r7, pc}
 801a442:	bf00      	nop
 801a444:	0802678c 	.word	0x0802678c

0801a448 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 801a448:	b598      	push	{r3, r4, r7, lr}
 801a44a:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 801a44c:	4b09      	ldr	r3, [pc, #36]	; (801a474 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	2b00      	cmp	r3, #0
 801a452:	d10b      	bne.n	801a46c <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 801a454:	f240 32f3 	movw	r2, #1011	; 0x3f3
 801a458:	4907      	ldr	r1, [pc, #28]	; (801a478 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 801a45a:	200c      	movs	r0, #12
 801a45c:	f7f0 fb4c 	bl	800aaf8 <_ZnwjPKci>
 801a460:	4604      	mov	r4, r0
 801a462:	4620      	mov	r0, r4
 801a464:	f7ff fa4c 	bl	8019900 <_ZN19MockActualCallTraceC1Ev>
 801a468:	4b02      	ldr	r3, [pc, #8]	; (801a474 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801a46a:	601c      	str	r4, [r3, #0]
    return *instance_;
 801a46c:	4b01      	ldr	r3, [pc, #4]	; (801a474 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801a46e:	681b      	ldr	r3, [r3, #0]
}
 801a470:	4618      	mov	r0, r3
 801a472:	bd98      	pop	{r3, r4, r7, pc}
 801a474:	20000f30 	.word	0x20000f30
 801a478:	08026670 	.word	0x08026670

0801a47c <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 801a47c:	b580      	push	{r7, lr}
 801a47e:	af00      	add	r7, sp, #0
    delete instance_;
 801a480:	4b06      	ldr	r3, [pc, #24]	; (801a49c <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d004      	beq.n	801a492 <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 801a488:	681a      	ldr	r2, [r3, #0]
 801a48a:	3204      	adds	r2, #4
 801a48c:	6812      	ldr	r2, [r2, #0]
 801a48e:	4618      	mov	r0, r3
 801a490:	4790      	blx	r2
    instance_ = NULLPTR;
 801a492:	4b02      	ldr	r3, [pc, #8]	; (801a49c <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801a494:	2200      	movs	r2, #0
 801a496:	601a      	str	r2, [r3, #0]
}
 801a498:	bf00      	nop
 801a49a:	bd80      	pop	{r7, pc}
 801a49c:	20000f30 	.word	0x20000f30

0801a4a0 <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 801a4a0:	b580      	push	{r7, lr}
 801a4a2:	b082      	sub	sp, #8
 801a4a4:	af00      	add	r7, sp, #0
 801a4a6:	6078      	str	r0, [r7, #4]
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	4618      	mov	r0, r3
 801a4ac:	f7fd fe9a 	bl	80181e4 <_ZN14MockActualCallC1Ev>
 801a4b0:	4a03      	ldr	r2, [pc, #12]	; (801a4c0 <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	601a      	str	r2, [r3, #0]
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	4618      	mov	r0, r3
 801a4ba:	3708      	adds	r7, #8
 801a4bc:	46bd      	mov	sp, r7
 801a4be:	bd80      	pop	{r7, pc}
 801a4c0:	080294c4 	.word	0x080294c4

0801a4c4 <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 801a4c4:	b580      	push	{r7, lr}
 801a4c6:	af00      	add	r7, sp, #0
 801a4c8:	4801      	ldr	r0, [pc, #4]	; (801a4d0 <__tcf_0+0xc>)
 801a4ca:	f000 f831 	bl	801a530 <_ZN21MockIgnoredActualCallD1Ev>
 801a4ce:	bd80      	pop	{r7, pc}
 801a4d0:	20000f34 	.word	0x20000f34

0801a4d4 <_ZN21MockIgnoredActualCall8instanceEv>:
{
 801a4d4:	b580      	push	{r7, lr}
 801a4d6:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 801a4d8:	4b12      	ldr	r3, [pc, #72]	; (801a524 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801a4da:	781b      	ldrb	r3, [r3, #0]
 801a4dc:	f3bf 8f5b 	dmb	ish
 801a4e0:	b2db      	uxtb	r3, r3
 801a4e2:	f003 0301 	and.w	r3, r3, #1
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	bf0c      	ite	eq
 801a4ea:	2301      	moveq	r3, #1
 801a4ec:	2300      	movne	r3, #0
 801a4ee:	b2db      	uxtb	r3, r3
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	d013      	beq.n	801a51c <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 801a4f4:	480b      	ldr	r0, [pc, #44]	; (801a524 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801a4f6:	f005 fd83 	bl	8020000 <__cxa_guard_acquire>
 801a4fa:	4603      	mov	r3, r0
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	bf14      	ite	ne
 801a500:	2301      	movne	r3, #1
 801a502:	2300      	moveq	r3, #0
 801a504:	b2db      	uxtb	r3, r3
 801a506:	2b00      	cmp	r3, #0
 801a508:	d008      	beq.n	801a51c <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 801a50a:	4807      	ldr	r0, [pc, #28]	; (801a528 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 801a50c:	f7ff ffc8 	bl	801a4a0 <_ZN21MockIgnoredActualCallC1Ev>
 801a510:	4804      	ldr	r0, [pc, #16]	; (801a524 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801a512:	f005 fd81 	bl	8020018 <__cxa_guard_release>
 801a516:	4805      	ldr	r0, [pc, #20]	; (801a52c <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 801a518:	f005 fda5 	bl	8020066 <atexit>
    return call;
 801a51c:	4b02      	ldr	r3, [pc, #8]	; (801a528 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 801a51e:	4618      	mov	r0, r3
 801a520:	bd80      	pop	{r7, pc}
 801a522:	bf00      	nop
 801a524:	20000f38 	.word	0x20000f38
 801a528:	20000f34 	.word	0x20000f34
 801a52c:	0801a4c5 	.word	0x0801a4c5

0801a530 <_ZN21MockIgnoredActualCallD1Ev>:
 801a530:	b580      	push	{r7, lr}
 801a532:	b082      	sub	sp, #8
 801a534:	af00      	add	r7, sp, #0
 801a536:	6078      	str	r0, [r7, #4]
 801a538:	4a05      	ldr	r2, [pc, #20]	; (801a550 <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	601a      	str	r2, [r3, #0]
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	4618      	mov	r0, r3
 801a542:	f7fd fe5f 	bl	8018204 <_ZN14MockActualCallD1Ev>
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	4618      	mov	r0, r3
 801a54a:	3708      	adds	r7, #8
 801a54c:	46bd      	mov	sp, r7
 801a54e:	bd80      	pop	{r7, pc}
 801a550:	080294c4 	.word	0x080294c4

0801a554 <_ZN21MockIgnoredActualCallD0Ev>:
 801a554:	b580      	push	{r7, lr}
 801a556:	b082      	sub	sp, #8
 801a558:	af00      	add	r7, sp, #0
 801a55a:	6078      	str	r0, [r7, #4]
 801a55c:	6878      	ldr	r0, [r7, #4]
 801a55e:	f7ff ffe7 	bl	801a530 <_ZN21MockIgnoredActualCallD1Ev>
 801a562:	2104      	movs	r1, #4
 801a564:	6878      	ldr	r0, [r7, #4]
 801a566:	f7f0 fadb 	bl	800ab20 <_ZdlPvj>
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	4618      	mov	r0, r3
 801a56e:	3708      	adds	r7, #8
 801a570:	46bd      	mov	sp, r7
 801a572:	bd80      	pop	{r7, pc}

0801a574 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 801a574:	b580      	push	{r7, lr}
 801a576:	b082      	sub	sp, #8
 801a578:	af00      	add	r7, sp, #0
 801a57a:	6078      	str	r0, [r7, #4]
 801a57c:	4a05      	ldr	r2, [pc, #20]	; (801a594 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	601a      	str	r2, [r3, #0]
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	4618      	mov	r0, r3
 801a586:	f7f0 fefd 	bl	800b384 <_ZN11MockFailureD1Ev>
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	4618      	mov	r0, r3
 801a58e:	3708      	adds	r7, #8
 801a590:	46bd      	mov	sp, r7
 801a592:	bd80      	pop	{r7, pc}
 801a594:	080293bc 	.word	0x080293bc

0801a598 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 801a598:	b580      	push	{r7, lr}
 801a59a:	b082      	sub	sp, #8
 801a59c:	af00      	add	r7, sp, #0
 801a59e:	6078      	str	r0, [r7, #4]
 801a5a0:	6878      	ldr	r0, [r7, #4]
 801a5a2:	f7ff ffe7 	bl	801a574 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 801a5a6:	2134      	movs	r1, #52	; 0x34
 801a5a8:	6878      	ldr	r0, [r7, #4]
 801a5aa:	f7f0 fab9 	bl	800ab20 <_ZdlPvj>
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	4618      	mov	r0, r3
 801a5b2:	3708      	adds	r7, #8
 801a5b4:	46bd      	mov	sp, r7
 801a5b6:	bd80      	pop	{r7, pc}

0801a5b8 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 801a5b8:	b580      	push	{r7, lr}
 801a5ba:	b082      	sub	sp, #8
 801a5bc:	af00      	add	r7, sp, #0
 801a5be:	6078      	str	r0, [r7, #4]
 801a5c0:	4a05      	ldr	r2, [pc, #20]	; (801a5d8 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	601a      	str	r2, [r3, #0]
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	4618      	mov	r0, r3
 801a5ca:	f7f0 fedb 	bl	800b384 <_ZN11MockFailureD1Ev>
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	4618      	mov	r0, r3
 801a5d2:	3708      	adds	r7, #8
 801a5d4:	46bd      	mov	sp, r7
 801a5d6:	bd80      	pop	{r7, pc}
 801a5d8:	08029498 	.word	0x08029498

0801a5dc <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 801a5dc:	b580      	push	{r7, lr}
 801a5de:	b082      	sub	sp, #8
 801a5e0:	af00      	add	r7, sp, #0
 801a5e2:	6078      	str	r0, [r7, #4]
 801a5e4:	6878      	ldr	r0, [r7, #4]
 801a5e6:	f7ff ffe7 	bl	801a5b8 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 801a5ea:	2134      	movs	r1, #52	; 0x34
 801a5ec:	6878      	ldr	r0, [r7, #4]
 801a5ee:	f7f0 fa97 	bl	800ab20 <_ZdlPvj>
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	4618      	mov	r0, r3
 801a5f6:	3708      	adds	r7, #8
 801a5f8:	46bd      	mov	sp, r7
 801a5fa:	bd80      	pop	{r7, pc}

0801a5fc <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 801a5fc:	b580      	push	{r7, lr}
 801a5fe:	b082      	sub	sp, #8
 801a600:	af00      	add	r7, sp, #0
 801a602:	6078      	str	r0, [r7, #4]
 801a604:	4a05      	ldr	r2, [pc, #20]	; (801a61c <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	601a      	str	r2, [r3, #0]
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	4618      	mov	r0, r3
 801a60e:	f7f0 feb9 	bl	800b384 <_ZN11MockFailureD1Ev>
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	4618      	mov	r0, r3
 801a616:	3708      	adds	r7, #8
 801a618:	46bd      	mov	sp, r7
 801a61a:	bd80      	pop	{r7, pc}
 801a61c:	0802946c 	.word	0x0802946c

0801a620 <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 801a620:	b580      	push	{r7, lr}
 801a622:	b082      	sub	sp, #8
 801a624:	af00      	add	r7, sp, #0
 801a626:	6078      	str	r0, [r7, #4]
 801a628:	6878      	ldr	r0, [r7, #4]
 801a62a:	f7ff ffe7 	bl	801a5fc <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 801a62e:	2134      	movs	r1, #52	; 0x34
 801a630:	6878      	ldr	r0, [r7, #4]
 801a632:	f7f0 fa75 	bl	800ab20 <_ZdlPvj>
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	4618      	mov	r0, r3
 801a63a:	3708      	adds	r7, #8
 801a63c:	46bd      	mov	sp, r7
 801a63e:	bd80      	pop	{r7, pc}

0801a640 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 801a640:	b580      	push	{r7, lr}
 801a642:	b082      	sub	sp, #8
 801a644:	af00      	add	r7, sp, #0
 801a646:	6078      	str	r0, [r7, #4]
 801a648:	4a05      	ldr	r2, [pc, #20]	; (801a660 <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	601a      	str	r2, [r3, #0]
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	4618      	mov	r0, r3
 801a652:	f7f0 fe97 	bl	800b384 <_ZN11MockFailureD1Ev>
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	4618      	mov	r0, r3
 801a65a:	3708      	adds	r7, #8
 801a65c:	46bd      	mov	sp, r7
 801a65e:	bd80      	pop	{r7, pc}
 801a660:	08029440 	.word	0x08029440

0801a664 <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 801a664:	b580      	push	{r7, lr}
 801a666:	b082      	sub	sp, #8
 801a668:	af00      	add	r7, sp, #0
 801a66a:	6078      	str	r0, [r7, #4]
 801a66c:	6878      	ldr	r0, [r7, #4]
 801a66e:	f7ff ffe7 	bl	801a640 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801a672:	2134      	movs	r1, #52	; 0x34
 801a674:	6878      	ldr	r0, [r7, #4]
 801a676:	f7f0 fa53 	bl	800ab20 <_ZdlPvj>
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	4618      	mov	r0, r3
 801a67e:	3708      	adds	r7, #8
 801a680:	46bd      	mov	sp, r7
 801a682:	bd80      	pop	{r7, pc}

0801a684 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 801a684:	b580      	push	{r7, lr}
 801a686:	b082      	sub	sp, #8
 801a688:	af00      	add	r7, sp, #0
 801a68a:	6078      	str	r0, [r7, #4]
 801a68c:	4a05      	ldr	r2, [pc, #20]	; (801a6a4 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	601a      	str	r2, [r3, #0]
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	4618      	mov	r0, r3
 801a696:	f7f0 fe75 	bl	800b384 <_ZN11MockFailureD1Ev>
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	4618      	mov	r0, r3
 801a69e:	3708      	adds	r7, #8
 801a6a0:	46bd      	mov	sp, r7
 801a6a2:	bd80      	pop	{r7, pc}
 801a6a4:	080293e8 	.word	0x080293e8

0801a6a8 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 801a6a8:	b580      	push	{r7, lr}
 801a6aa:	b082      	sub	sp, #8
 801a6ac:	af00      	add	r7, sp, #0
 801a6ae:	6078      	str	r0, [r7, #4]
 801a6b0:	6878      	ldr	r0, [r7, #4]
 801a6b2:	f7ff ffe7 	bl	801a684 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 801a6b6:	2134      	movs	r1, #52	; 0x34
 801a6b8:	6878      	ldr	r0, [r7, #4]
 801a6ba:	f7f0 fa31 	bl	800ab20 <_ZdlPvj>
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	4618      	mov	r0, r3
 801a6c2:	3708      	adds	r7, #8
 801a6c4:	46bd      	mov	sp, r7
 801a6c6:	bd80      	pop	{r7, pc}

0801a6c8 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 801a6c8:	b580      	push	{r7, lr}
 801a6ca:	b082      	sub	sp, #8
 801a6cc:	af00      	add	r7, sp, #0
 801a6ce:	6078      	str	r0, [r7, #4]
 801a6d0:	4a05      	ldr	r2, [pc, #20]	; (801a6e8 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	601a      	str	r2, [r3, #0]
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	4618      	mov	r0, r3
 801a6da:	f7f0 fe53 	bl	800b384 <_ZN11MockFailureD1Ev>
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	4618      	mov	r0, r3
 801a6e2:	3708      	adds	r7, #8
 801a6e4:	46bd      	mov	sp, r7
 801a6e6:	bd80      	pop	{r7, pc}
 801a6e8:	08029414 	.word	0x08029414

0801a6ec <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 801a6ec:	b580      	push	{r7, lr}
 801a6ee:	b082      	sub	sp, #8
 801a6f0:	af00      	add	r7, sp, #0
 801a6f2:	6078      	str	r0, [r7, #4]
 801a6f4:	6878      	ldr	r0, [r7, #4]
 801a6f6:	f7ff ffe7 	bl	801a6c8 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 801a6fa:	2134      	movs	r1, #52	; 0x34
 801a6fc:	6878      	ldr	r0, [r7, #4]
 801a6fe:	f7f0 fa0f 	bl	800ab20 <_ZdlPvj>
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	4618      	mov	r0, r3
 801a706:	3708      	adds	r7, #8
 801a708:	46bd      	mov	sp, r7
 801a70a:	bd80      	pop	{r7, pc}

0801a70c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 801a70c:	b580      	push	{r7, lr}
 801a70e:	b082      	sub	sp, #8
 801a710:	af00      	add	r7, sp, #0
 801a712:	6078      	str	r0, [r7, #4]
 801a714:	4a05      	ldr	r2, [pc, #20]	; (801a72c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	601a      	str	r2, [r3, #0]
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	4618      	mov	r0, r3
 801a71e:	f7f0 fe31 	bl	800b384 <_ZN11MockFailureD1Ev>
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	4618      	mov	r0, r3
 801a726:	3708      	adds	r7, #8
 801a728:	46bd      	mov	sp, r7
 801a72a:	bd80      	pop	{r7, pc}
 801a72c:	08029364 	.word	0x08029364

0801a730 <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 801a730:	b580      	push	{r7, lr}
 801a732:	b082      	sub	sp, #8
 801a734:	af00      	add	r7, sp, #0
 801a736:	6078      	str	r0, [r7, #4]
 801a738:	6878      	ldr	r0, [r7, #4]
 801a73a:	f7ff ffe7 	bl	801a70c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801a73e:	2134      	movs	r1, #52	; 0x34
 801a740:	6878      	ldr	r0, [r7, #4]
 801a742:	f7f0 f9ed 	bl	800ab20 <_ZdlPvj>
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	4618      	mov	r0, r3
 801a74a:	3708      	adds	r7, #8
 801a74c:	46bd      	mov	sp, r7
 801a74e:	bd80      	pop	{r7, pc}

0801a750 <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 801a750:	b580      	push	{r7, lr}
 801a752:	b082      	sub	sp, #8
 801a754:	af00      	add	r7, sp, #0
 801a756:	6078      	str	r0, [r7, #4]
 801a758:	4a05      	ldr	r2, [pc, #20]	; (801a770 <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	601a      	str	r2, [r3, #0]
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	4618      	mov	r0, r3
 801a762:	f7f0 fe0f 	bl	800b384 <_ZN11MockFailureD1Ev>
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	4618      	mov	r0, r3
 801a76a:	3708      	adds	r7, #8
 801a76c:	46bd      	mov	sp, r7
 801a76e:	bd80      	pop	{r7, pc}
 801a770:	08029390 	.word	0x08029390

0801a774 <_ZN27MockUnexpectedObjectFailureD0Ev>:
 801a774:	b580      	push	{r7, lr}
 801a776:	b082      	sub	sp, #8
 801a778:	af00      	add	r7, sp, #0
 801a77a:	6078      	str	r0, [r7, #4]
 801a77c:	6878      	ldr	r0, [r7, #4]
 801a77e:	f7ff ffe7 	bl	801a750 <_ZN27MockUnexpectedObjectFailureD1Ev>
 801a782:	2134      	movs	r1, #52	; 0x34
 801a784:	6878      	ldr	r0, [r7, #4]
 801a786:	f7f0 f9cb 	bl	800ab20 <_ZdlPvj>
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	4618      	mov	r0, r3
 801a78e:	3708      	adds	r7, #8
 801a790:	46bd      	mov	sp, r7
 801a792:	bd80      	pop	{r7, pc}

0801a794 <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 801a794:	b580      	push	{r7, lr}
 801a796:	b082      	sub	sp, #8
 801a798:	af00      	add	r7, sp, #0
 801a79a:	6078      	str	r0, [r7, #4]
 801a79c:	6039      	str	r1, [r7, #0]
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	681b      	ldr	r3, [r3, #0]
 801a7a2:	3310      	adds	r3, #16
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	683a      	ldr	r2, [r7, #0]
 801a7a8:	6839      	ldr	r1, [r7, #0]
 801a7aa:	6878      	ldr	r0, [r7, #4]
 801a7ac:	4798      	blx	r3
 801a7ae:	4603      	mov	r3, r0
 801a7b0:	4618      	mov	r0, r3
 801a7b2:	3708      	adds	r7, #8
 801a7b4:	46bd      	mov	sp, r7
 801a7b6:	bd80      	pop	{r7, pc}

0801a7b8 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 801a7b8:	b480      	push	{r7}
 801a7ba:	b083      	sub	sp, #12
 801a7bc:	af00      	add	r7, sp, #0
 801a7be:	6078      	str	r0, [r7, #4]
 801a7c0:	6039      	str	r1, [r7, #0]
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	4618      	mov	r0, r3
 801a7c6:	370c      	adds	r7, #12
 801a7c8:	46bd      	mov	sp, r7
 801a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ce:	4770      	bx	lr

0801a7d0 <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 801a7d0:	b480      	push	{r7}
 801a7d2:	b083      	sub	sp, #12
 801a7d4:	af00      	add	r7, sp, #0
 801a7d6:	6078      	str	r0, [r7, #4]
 801a7d8:	6039      	str	r1, [r7, #0]
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	4618      	mov	r0, r3
 801a7de:	370c      	adds	r7, #12
 801a7e0:	46bd      	mov	sp, r7
 801a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7e6:	4770      	bx	lr

0801a7e8 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 801a7e8:	b480      	push	{r7}
 801a7ea:	b085      	sub	sp, #20
 801a7ec:	af00      	add	r7, sp, #0
 801a7ee:	60f8      	str	r0, [r7, #12]
 801a7f0:	60b9      	str	r1, [r7, #8]
 801a7f2:	607a      	str	r2, [r7, #4]
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	4618      	mov	r0, r3
 801a7f8:	3714      	adds	r7, #20
 801a7fa:	46bd      	mov	sp, r7
 801a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a800:	4770      	bx	lr

0801a802 <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 801a802:	b480      	push	{r7}
 801a804:	b085      	sub	sp, #20
 801a806:	af00      	add	r7, sp, #0
 801a808:	60f8      	str	r0, [r7, #12]
 801a80a:	60b9      	str	r1, [r7, #8]
 801a80c:	4613      	mov	r3, r2
 801a80e:	71fb      	strb	r3, [r7, #7]
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	4618      	mov	r0, r3
 801a814:	3714      	adds	r7, #20
 801a816:	46bd      	mov	sp, r7
 801a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a81c:	4770      	bx	lr

0801a81e <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801a81e:	b480      	push	{r7}
 801a820:	b085      	sub	sp, #20
 801a822:	af00      	add	r7, sp, #0
 801a824:	60f8      	str	r0, [r7, #12]
 801a826:	60b9      	str	r1, [r7, #8]
 801a828:	607a      	str	r2, [r7, #4]
 801a82a:	68fb      	ldr	r3, [r7, #12]
 801a82c:	4618      	mov	r0, r3
 801a82e:	3714      	adds	r7, #20
 801a830:	46bd      	mov	sp, r7
 801a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a836:	4770      	bx	lr

0801a838 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 801a838:	b480      	push	{r7}
 801a83a:	b085      	sub	sp, #20
 801a83c:	af00      	add	r7, sp, #0
 801a83e:	60f8      	str	r0, [r7, #12]
 801a840:	60b9      	str	r1, [r7, #8]
 801a842:	607a      	str	r2, [r7, #4]
 801a844:	68fb      	ldr	r3, [r7, #12]
 801a846:	4618      	mov	r0, r3
 801a848:	3714      	adds	r7, #20
 801a84a:	46bd      	mov	sp, r7
 801a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a850:	4770      	bx	lr

0801a852 <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 801a852:	b480      	push	{r7}
 801a854:	b085      	sub	sp, #20
 801a856:	af00      	add	r7, sp, #0
 801a858:	60f8      	str	r0, [r7, #12]
 801a85a:	60b9      	str	r1, [r7, #8]
 801a85c:	607a      	str	r2, [r7, #4]
 801a85e:	68fb      	ldr	r3, [r7, #12]
 801a860:	4618      	mov	r0, r3
 801a862:	3714      	adds	r7, #20
 801a864:	46bd      	mov	sp, r7
 801a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a86a:	4770      	bx	lr

0801a86c <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 801a86c:	b480      	push	{r7}
 801a86e:	b085      	sub	sp, #20
 801a870:	af00      	add	r7, sp, #0
 801a872:	60f8      	str	r0, [r7, #12]
 801a874:	60b9      	str	r1, [r7, #8]
 801a876:	607a      	str	r2, [r7, #4]
 801a878:	68fb      	ldr	r3, [r7, #12]
 801a87a:	4618      	mov	r0, r3
 801a87c:	3714      	adds	r7, #20
 801a87e:	46bd      	mov	sp, r7
 801a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a884:	4770      	bx	lr

0801a886 <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 801a886:	b480      	push	{r7}
 801a888:	b085      	sub	sp, #20
 801a88a:	af00      	add	r7, sp, #0
 801a88c:	60f8      	str	r0, [r7, #12]
 801a88e:	60b9      	str	r1, [r7, #8]
 801a890:	4639      	mov	r1, r7
 801a892:	e881 000c 	stmia.w	r1, {r2, r3}
 801a896:	68fb      	ldr	r3, [r7, #12]
 801a898:	4618      	mov	r0, r3
 801a89a:	3714      	adds	r7, #20
 801a89c:	46bd      	mov	sp, r7
 801a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8a2:	4770      	bx	lr

0801a8a4 <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 801a8a4:	b480      	push	{r7}
 801a8a6:	b085      	sub	sp, #20
 801a8a8:	af00      	add	r7, sp, #0
 801a8aa:	60f8      	str	r0, [r7, #12]
 801a8ac:	60b9      	str	r1, [r7, #8]
 801a8ae:	4639      	mov	r1, r7
 801a8b0:	e881 000c 	stmia.w	r1, {r2, r3}
 801a8b4:	68fb      	ldr	r3, [r7, #12]
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	3714      	adds	r7, #20
 801a8ba:	46bd      	mov	sp, r7
 801a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8c0:	4770      	bx	lr

0801a8c2 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 801a8c2:	b480      	push	{r7}
 801a8c4:	b085      	sub	sp, #20
 801a8c6:	af00      	add	r7, sp, #0
 801a8c8:	60f8      	str	r0, [r7, #12]
 801a8ca:	60b9      	str	r1, [r7, #8]
 801a8cc:	ed87 0b00 	vstr	d0, [r7]
 801a8d0:	68fb      	ldr	r3, [r7, #12]
 801a8d2:	4618      	mov	r0, r3
 801a8d4:	3714      	adds	r7, #20
 801a8d6:	46bd      	mov	sp, r7
 801a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8dc:	4770      	bx	lr

0801a8de <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 801a8de:	b480      	push	{r7}
 801a8e0:	b087      	sub	sp, #28
 801a8e2:	af00      	add	r7, sp, #0
 801a8e4:	6178      	str	r0, [r7, #20]
 801a8e6:	6139      	str	r1, [r7, #16]
 801a8e8:	ed87 0b02 	vstr	d0, [r7, #8]
 801a8ec:	ed87 1b00 	vstr	d1, [r7]
 801a8f0:	697b      	ldr	r3, [r7, #20]
 801a8f2:	4618      	mov	r0, r3
 801a8f4:	371c      	adds	r7, #28
 801a8f6:	46bd      	mov	sp, r7
 801a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8fc:	4770      	bx	lr

0801a8fe <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 801a8fe:	b480      	push	{r7}
 801a900:	b085      	sub	sp, #20
 801a902:	af00      	add	r7, sp, #0
 801a904:	60f8      	str	r0, [r7, #12]
 801a906:	60b9      	str	r1, [r7, #8]
 801a908:	607a      	str	r2, [r7, #4]
 801a90a:	68fb      	ldr	r3, [r7, #12]
 801a90c:	4618      	mov	r0, r3
 801a90e:	3714      	adds	r7, #20
 801a910:	46bd      	mov	sp, r7
 801a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a916:	4770      	bx	lr

0801a918 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 801a918:	b480      	push	{r7}
 801a91a:	b085      	sub	sp, #20
 801a91c:	af00      	add	r7, sp, #0
 801a91e:	60f8      	str	r0, [r7, #12]
 801a920:	60b9      	str	r1, [r7, #8]
 801a922:	607a      	str	r2, [r7, #4]
 801a924:	68fb      	ldr	r3, [r7, #12]
 801a926:	4618      	mov	r0, r3
 801a928:	3714      	adds	r7, #20
 801a92a:	46bd      	mov	sp, r7
 801a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a930:	4770      	bx	lr

0801a932 <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 801a932:	b480      	push	{r7}
 801a934:	b085      	sub	sp, #20
 801a936:	af00      	add	r7, sp, #0
 801a938:	60f8      	str	r0, [r7, #12]
 801a93a:	60b9      	str	r1, [r7, #8]
 801a93c:	607a      	str	r2, [r7, #4]
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	4618      	mov	r0, r3
 801a942:	3714      	adds	r7, #20
 801a944:	46bd      	mov	sp, r7
 801a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a94a:	4770      	bx	lr

0801a94c <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 801a94c:	b480      	push	{r7}
 801a94e:	b085      	sub	sp, #20
 801a950:	af00      	add	r7, sp, #0
 801a952:	60f8      	str	r0, [r7, #12]
 801a954:	60b9      	str	r1, [r7, #8]
 801a956:	607a      	str	r2, [r7, #4]
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	4618      	mov	r0, r3
 801a95c:	3714      	adds	r7, #20
 801a95e:	46bd      	mov	sp, r7
 801a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a964:	4770      	bx	lr

0801a966 <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 801a966:	b480      	push	{r7}
 801a968:	b085      	sub	sp, #20
 801a96a:	af00      	add	r7, sp, #0
 801a96c:	60f8      	str	r0, [r7, #12]
 801a96e:	60b9      	str	r1, [r7, #8]
 801a970:	607a      	str	r2, [r7, #4]
 801a972:	603b      	str	r3, [r7, #0]
 801a974:	68fb      	ldr	r3, [r7, #12]
 801a976:	4618      	mov	r0, r3
 801a978:	3714      	adds	r7, #20
 801a97a:	46bd      	mov	sp, r7
 801a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a980:	4770      	bx	lr

0801a982 <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801a982:	b480      	push	{r7}
 801a984:	b085      	sub	sp, #20
 801a986:	af00      	add	r7, sp, #0
 801a988:	60f8      	str	r0, [r7, #12]
 801a98a:	60b9      	str	r1, [r7, #8]
 801a98c:	607a      	str	r2, [r7, #4]
 801a98e:	603b      	str	r3, [r7, #0]
 801a990:	68fb      	ldr	r3, [r7, #12]
 801a992:	4618      	mov	r0, r3
 801a994:	3714      	adds	r7, #20
 801a996:	46bd      	mov	sp, r7
 801a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a99c:	4770      	bx	lr

0801a99e <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 801a99e:	b480      	push	{r7}
 801a9a0:	b085      	sub	sp, #20
 801a9a2:	af00      	add	r7, sp, #0
 801a9a4:	60f8      	str	r0, [r7, #12]
 801a9a6:	60b9      	str	r1, [r7, #8]
 801a9a8:	607a      	str	r2, [r7, #4]
 801a9aa:	603b      	str	r3, [r7, #0]
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	4618      	mov	r0, r3
 801a9b0:	3714      	adds	r7, #20
 801a9b2:	46bd      	mov	sp, r7
 801a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9b8:	4770      	bx	lr

0801a9ba <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801a9ba:	b480      	push	{r7}
 801a9bc:	b085      	sub	sp, #20
 801a9be:	af00      	add	r7, sp, #0
 801a9c0:	60f8      	str	r0, [r7, #12]
 801a9c2:	60b9      	str	r1, [r7, #8]
 801a9c4:	607a      	str	r2, [r7, #4]
 801a9c6:	603b      	str	r3, [r7, #0]
 801a9c8:	68fb      	ldr	r3, [r7, #12]
 801a9ca:	4618      	mov	r0, r3
 801a9cc:	3714      	adds	r7, #20
 801a9ce:	46bd      	mov	sp, r7
 801a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9d4:	4770      	bx	lr

0801a9d6 <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 801a9d6:	b480      	push	{r7}
 801a9d8:	b083      	sub	sp, #12
 801a9da:	af00      	add	r7, sp, #0
 801a9dc:	6078      	str	r0, [r7, #4]
 801a9de:	6039      	str	r1, [r7, #0]
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	4618      	mov	r0, r3
 801a9e4:	370c      	adds	r7, #12
 801a9e6:	46bd      	mov	sp, r7
 801a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ec:	4770      	bx	lr

0801a9ee <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 801a9ee:	b480      	push	{r7}
 801a9f0:	b083      	sub	sp, #12
 801a9f2:	af00      	add	r7, sp, #0
 801a9f4:	6078      	str	r0, [r7, #4]
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	4618      	mov	r0, r3
 801a9fa:	370c      	adds	r7, #12
 801a9fc:	46bd      	mov	sp, r7
 801a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa02:	4770      	bx	lr

0801aa04 <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 801aa04:	b480      	push	{r7}
 801aa06:	b083      	sub	sp, #12
 801aa08:	af00      	add	r7, sp, #0
 801aa0a:	6078      	str	r0, [r7, #4]
 801aa0c:	460b      	mov	r3, r1
 801aa0e:	70fb      	strb	r3, [r7, #3]
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	4618      	mov	r0, r3
 801aa14:	370c      	adds	r7, #12
 801aa16:	46bd      	mov	sp, r7
 801aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa1c:	4770      	bx	lr

0801aa1e <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 801aa1e:	b480      	push	{r7}
 801aa20:	b083      	sub	sp, #12
 801aa22:	af00      	add	r7, sp, #0
 801aa24:	6078      	str	r0, [r7, #4]
 801aa26:	6039      	str	r1, [r7, #0]
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	4618      	mov	r0, r3
 801aa2c:	370c      	adds	r7, #12
 801aa2e:	46bd      	mov	sp, r7
 801aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa34:	4770      	bx	lr

0801aa36 <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 801aa36:	b480      	push	{r7}
 801aa38:	b083      	sub	sp, #12
 801aa3a:	af00      	add	r7, sp, #0
 801aa3c:	6078      	str	r0, [r7, #4]
 801aa3e:	6039      	str	r1, [r7, #0]
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	4618      	mov	r0, r3
 801aa44:	370c      	adds	r7, #12
 801aa46:	46bd      	mov	sp, r7
 801aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa4c:	4770      	bx	lr

0801aa4e <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 801aa4e:	b480      	push	{r7}
 801aa50:	b083      	sub	sp, #12
 801aa52:	af00      	add	r7, sp, #0
 801aa54:	6078      	str	r0, [r7, #4]
 801aa56:	6039      	str	r1, [r7, #0]
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	4618      	mov	r0, r3
 801aa5c:	370c      	adds	r7, #12
 801aa5e:	46bd      	mov	sp, r7
 801aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa64:	4770      	bx	lr

0801aa66 <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 801aa66:	b480      	push	{r7}
 801aa68:	b083      	sub	sp, #12
 801aa6a:	af00      	add	r7, sp, #0
 801aa6c:	6078      	str	r0, [r7, #4]
 801aa6e:	6039      	str	r1, [r7, #0]
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	4618      	mov	r0, r3
 801aa74:	370c      	adds	r7, #12
 801aa76:	46bd      	mov	sp, r7
 801aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa7c:	4770      	bx	lr

0801aa7e <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 801aa7e:	b480      	push	{r7}
 801aa80:	b085      	sub	sp, #20
 801aa82:	af00      	add	r7, sp, #0
 801aa84:	60f8      	str	r0, [r7, #12]
 801aa86:	1d3b      	adds	r3, r7, #4
 801aa88:	e883 0006 	stmia.w	r3, {r1, r2}
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	4618      	mov	r0, r3
 801aa90:	3714      	adds	r7, #20
 801aa92:	46bd      	mov	sp, r7
 801aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa98:	4770      	bx	lr

0801aa9a <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 801aa9a:	b480      	push	{r7}
 801aa9c:	b085      	sub	sp, #20
 801aa9e:	af00      	add	r7, sp, #0
 801aaa0:	60f8      	str	r0, [r7, #12]
 801aaa2:	1d3b      	adds	r3, r7, #4
 801aaa4:	e883 0006 	stmia.w	r3, {r1, r2}
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	4618      	mov	r0, r3
 801aaac:	3714      	adds	r7, #20
 801aaae:	46bd      	mov	sp, r7
 801aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aab4:	4770      	bx	lr

0801aab6 <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 801aab6:	b480      	push	{r7}
 801aab8:	b085      	sub	sp, #20
 801aaba:	af00      	add	r7, sp, #0
 801aabc:	60f8      	str	r0, [r7, #12]
 801aabe:	ed87 0b00 	vstr	d0, [r7]
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	4618      	mov	r0, r3
 801aac6:	3714      	adds	r7, #20
 801aac8:	46bd      	mov	sp, r7
 801aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aace:	4770      	bx	lr

0801aad0 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 801aad0:	b480      	push	{r7}
 801aad2:	b083      	sub	sp, #12
 801aad4:	af00      	add	r7, sp, #0
 801aad6:	6078      	str	r0, [r7, #4]
 801aad8:	6039      	str	r1, [r7, #0]
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	4618      	mov	r0, r3
 801aade:	370c      	adds	r7, #12
 801aae0:	46bd      	mov	sp, r7
 801aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aae6:	4770      	bx	lr

0801aae8 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 801aae8:	b480      	push	{r7}
 801aaea:	b083      	sub	sp, #12
 801aaec:	af00      	add	r7, sp, #0
 801aaee:	6078      	str	r0, [r7, #4]
 801aaf0:	6039      	str	r1, [r7, #0]
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	4618      	mov	r0, r3
 801aaf6:	370c      	adds	r7, #12
 801aaf8:	46bd      	mov	sp, r7
 801aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aafe:	4770      	bx	lr

0801ab00 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 801ab00:	b480      	push	{r7}
 801ab02:	b083      	sub	sp, #12
 801ab04:	af00      	add	r7, sp, #0
 801ab06:	6078      	str	r0, [r7, #4]
 801ab08:	6039      	str	r1, [r7, #0]
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	4618      	mov	r0, r3
 801ab0e:	370c      	adds	r7, #12
 801ab10:	46bd      	mov	sp, r7
 801ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab16:	4770      	bx	lr

0801ab18 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 801ab18:	b480      	push	{r7}
 801ab1a:	b083      	sub	sp, #12
 801ab1c:	af00      	add	r7, sp, #0
 801ab1e:	6078      	str	r0, [r7, #4]
 801ab20:	6039      	str	r1, [r7, #0]
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	4618      	mov	r0, r3
 801ab26:	370c      	adds	r7, #12
 801ab28:	46bd      	mov	sp, r7
 801ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab2e:	4770      	bx	lr

0801ab30 <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 801ab30:	b480      	push	{r7}
 801ab32:	b083      	sub	sp, #12
 801ab34:	af00      	add	r7, sp, #0
 801ab36:	6078      	str	r0, [r7, #4]
 801ab38:	6039      	str	r1, [r7, #0]
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	4618      	mov	r0, r3
 801ab3e:	370c      	adds	r7, #12
 801ab40:	46bd      	mov	sp, r7
 801ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab46:	4770      	bx	lr

0801ab48 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 801ab48:	b480      	push	{r7}
 801ab4a:	b083      	sub	sp, #12
 801ab4c:	af00      	add	r7, sp, #0
 801ab4e:	6078      	str	r0, [r7, #4]
 801ab50:	4a04      	ldr	r2, [pc, #16]	; (801ab64 <_ZN16MockExpectedCallC1Ev+0x1c>)
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	601a      	str	r2, [r3, #0]
{
}
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	4618      	mov	r0, r3
 801ab5a:	370c      	adds	r7, #12
 801ab5c:	46bd      	mov	sp, r7
 801ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab62:	4770      	bx	lr
 801ab64:	08029a68 	.word	0x08029a68

0801ab68 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 801ab68:	b480      	push	{r7}
 801ab6a:	b083      	sub	sp, #12
 801ab6c:	af00      	add	r7, sp, #0
 801ab6e:	6078      	str	r0, [r7, #4]
 801ab70:	4a04      	ldr	r2, [pc, #16]	; (801ab84 <_ZN16MockExpectedCallD1Ev+0x1c>)
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	601a      	str	r2, [r3, #0]
{
}
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	4618      	mov	r0, r3
 801ab7a:	370c      	adds	r7, #12
 801ab7c:	46bd      	mov	sp, r7
 801ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab82:	4770      	bx	lr
 801ab84:	08029a68 	.word	0x08029a68

0801ab88 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 801ab88:	b580      	push	{r7, lr}
 801ab8a:	b082      	sub	sp, #8
 801ab8c:	af00      	add	r7, sp, #0
 801ab8e:	6078      	str	r0, [r7, #4]
 801ab90:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 801ab92:	683b      	ldr	r3, [r7, #0]
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	3358      	adds	r3, #88	; 0x58
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	687a      	ldr	r2, [r7, #4]
 801ab9c:	6839      	ldr	r1, [r7, #0]
 801ab9e:	4610      	mov	r0, r2
 801aba0:	4798      	blx	r3
}
 801aba2:	6878      	ldr	r0, [r7, #4]
 801aba4:	3708      	adds	r7, #8
 801aba6:	46bd      	mov	sp, r7
 801aba8:	bd80      	pop	{r7, pc}

0801abaa <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 801abaa:	b580      	push	{r7, lr}
 801abac:	b082      	sub	sp, #8
 801abae:	af00      	add	r7, sp, #0
 801abb0:	6078      	str	r0, [r7, #4]
 801abb2:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	3304      	adds	r3, #4
 801abb8:	6839      	ldr	r1, [r7, #0]
 801abba:	4618      	mov	r0, r3
 801abbc:	f7f2 fbcb 	bl	800d356 <_ZN12SimpleStringaSERKS_>
}
 801abc0:	bf00      	nop
 801abc2:	3708      	adds	r7, #8
 801abc4:	46bd      	mov	sp, r7
 801abc6:	bd80      	pop	{r7, pc}

0801abc8 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 801abc8:	b580      	push	{r7, lr}
 801abca:	b082      	sub	sp, #8
 801abcc:	af00      	add	r7, sp, #0
 801abce:	6078      	str	r0, [r7, #4]
 801abd0:	6039      	str	r1, [r7, #0]
    return functionName_;
 801abd2:	683b      	ldr	r3, [r7, #0]
 801abd4:	3304      	adds	r3, #4
 801abd6:	4619      	mov	r1, r3
 801abd8:	6878      	ldr	r0, [r7, #4]
 801abda:	f7f2 fba4 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
}
 801abde:	6878      	ldr	r0, [r7, #4]
 801abe0:	3708      	adds	r7, #8
 801abe2:	46bd      	mov	sp, r7
 801abe4:	bd80      	pop	{r7, pc}
	...

0801abe8 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 801abe8:	b590      	push	{r4, r7, lr}
 801abea:	b085      	sub	sp, #20
 801abec:	af00      	add	r7, sp, #0
 801abee:	6078      	str	r0, [r7, #4]
 801abf0:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	4618      	mov	r0, r3
 801abf6:	f7ff ffa7 	bl	801ab48 <_ZN16MockExpectedCallC1Ev>
 801abfa:	4a2c      	ldr	r2, [pc, #176]	; (801acac <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	601a      	str	r2, [r3, #0]
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	3304      	adds	r3, #4
 801ac04:	492a      	ldr	r1, [pc, #168]	; (801acb0 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801ac06:	4618      	mov	r0, r3
 801ac08:	f7f2 fb39 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	2200      	movs	r2, #0
 801ac10:	731a      	strb	r2, [r3, #12]
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	2200      	movs	r2, #0
 801ac16:	735a      	strb	r2, [r3, #13]
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	2200      	movs	r2, #0
 801ac1c:	611a      	str	r2, [r3, #16]
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	2200      	movs	r2, #0
 801ac22:	615a      	str	r2, [r3, #20]
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	2200      	movs	r2, #0
 801ac28:	761a      	strb	r2, [r3, #24]
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801ac30:	f107 0308 	add.w	r3, r7, #8
 801ac34:	491e      	ldr	r1, [pc, #120]	; (801acb0 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801ac36:	4618      	mov	r0, r3
 801ac38:	f7f2 fb21 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801ac3c:	f107 0308 	add.w	r3, r7, #8
 801ac40:	4619      	mov	r1, r3
 801ac42:	4620      	mov	r0, r4
 801ac44:	f003 f840 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
 801ac48:	f107 0308 	add.w	r3, r7, #8
 801ac4c:	4618      	mov	r0, r3
 801ac4e:	f7f2 fece 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	2200      	movs	r2, #0
 801ac56:	661a      	str	r2, [r3, #96]	; 0x60
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	2200      	movs	r2, #0
 801ac5c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	2201      	movs	r2, #1
 801ac64:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	2200      	movs	r2, #0
 801ac6c:	669a      	str	r2, [r3, #104]	; 0x68
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	683a      	ldr	r2, [r7, #0]
 801ac72:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 801ac74:	2246      	movs	r2, #70	; 0x46
 801ac76:	490f      	ldr	r1, [pc, #60]	; (801acb4 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801ac78:	2004      	movs	r0, #4
 801ac7a:	f7ef ff3d 	bl	800aaf8 <_ZnwjPKci>
 801ac7e:	4604      	mov	r4, r0
 801ac80:	4620      	mov	r0, r4
 801ac82:	f004 ff36 	bl	801faf2 <_ZN18MockNamedValueListC1Ev>
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 801ac8a:	2247      	movs	r2, #71	; 0x47
 801ac8c:	4909      	ldr	r1, [pc, #36]	; (801acb4 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801ac8e:	2004      	movs	r0, #4
 801ac90:	f7ef ff32 	bl	800aaf8 <_ZnwjPKci>
 801ac94:	4604      	mov	r4, r0
 801ac96:	4620      	mov	r0, r4
 801ac98:	f004 ff2b 	bl	801faf2 <_ZN18MockNamedValueListC1Ev>
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	621c      	str	r4, [r3, #32]
}
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	4618      	mov	r0, r3
 801aca4:	3714      	adds	r7, #20
 801aca6:	46bd      	mov	sp, r7
 801aca8:	bd90      	pop	{r4, r7, pc}
 801acaa:	bf00      	nop
 801acac:	080298ac 	.word	0x080298ac
 801acb0:	08026798 	.word	0x08026798
 801acb4:	0802679c 	.word	0x0802679c

0801acb8 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801acb8:	b580      	push	{r7, lr}
 801acba:	b082      	sub	sp, #8
 801acbc:	af00      	add	r7, sp, #0
 801acbe:	6078      	str	r0, [r7, #4]
 801acc0:	4a17      	ldr	r2, [pc, #92]	; (801ad20 <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	69db      	ldr	r3, [r3, #28]
 801acca:	4618      	mov	r0, r3
 801accc:	f004 ff1f 	bl	801fb0e <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	69db      	ldr	r3, [r3, #28]
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	d003      	beq.n	801ace0 <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 801acd8:	2104      	movs	r1, #4
 801acda:	4618      	mov	r0, r3
 801acdc:	f7ef ff20 	bl	800ab20 <_ZdlPvj>
    outputParameters_->clear();
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	6a1b      	ldr	r3, [r3, #32]
 801ace4:	4618      	mov	r0, r3
 801ace6:	f004 ff12 	bl	801fb0e <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	6a1b      	ldr	r3, [r3, #32]
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d003      	beq.n	801acfa <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 801acf2:	2104      	movs	r1, #4
 801acf4:	4618      	mov	r0, r3
 801acf6:	f7ef ff13 	bl	800ab20 <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	3328      	adds	r3, #40	; 0x28
 801acfe:	4618      	mov	r0, r3
 801ad00:	f003 f80c 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	3304      	adds	r3, #4
 801ad08:	4618      	mov	r0, r3
 801ad0a:	f7f2 fe70 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	4618      	mov	r0, r3
 801ad12:	f7ff ff29 	bl	801ab68 <_ZN16MockExpectedCallD1Ev>
}
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	4618      	mov	r0, r3
 801ad1a:	3708      	adds	r7, #8
 801ad1c:	46bd      	mov	sp, r7
 801ad1e:	bd80      	pop	{r7, pc}
 801ad20:	080298ac 	.word	0x080298ac

0801ad24 <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801ad24:	b580      	push	{r7, lr}
 801ad26:	b082      	sub	sp, #8
 801ad28:	af00      	add	r7, sp, #0
 801ad2a:	6078      	str	r0, [r7, #4]
}
 801ad2c:	6878      	ldr	r0, [r7, #4]
 801ad2e:	f7ff ffc3 	bl	801acb8 <_ZN23MockCheckedExpectedCallD1Ev>
 801ad32:	2170      	movs	r1, #112	; 0x70
 801ad34:	6878      	ldr	r0, [r7, #4]
 801ad36:	f7ef fef3 	bl	800ab20 <_ZdlPvj>
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	4618      	mov	r0, r3
 801ad3e:	3708      	adds	r7, #8
 801ad40:	46bd      	mov	sp, r7
 801ad42:	bd80      	pop	{r7, pc}

0801ad44 <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 801ad44:	b580      	push	{r7, lr}
 801ad46:	b082      	sub	sp, #8
 801ad48:	af00      	add	r7, sp, #0
 801ad4a:	6078      	str	r0, [r7, #4]
 801ad4c:	6039      	str	r1, [r7, #0]
    setName(name);
 801ad4e:	6839      	ldr	r1, [r7, #0]
 801ad50:	6878      	ldr	r0, [r7, #4]
 801ad52:	f7ff ff2a 	bl	801abaa <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 801ad56:	687b      	ldr	r3, [r7, #4]
}
 801ad58:	4618      	mov	r0, r3
 801ad5a:	3708      	adds	r7, #8
 801ad5c:	46bd      	mov	sp, r7
 801ad5e:	bd80      	pop	{r7, pc}

0801ad60 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 801ad60:	b590      	push	{r4, r7, lr}
 801ad62:	b087      	sub	sp, #28
 801ad64:	af00      	add	r7, sp, #0
 801ad66:	60f8      	str	r0, [r7, #12]
 801ad68:	60b9      	str	r1, [r7, #8]
 801ad6a:	4613      	mov	r3, r2
 801ad6c:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ad6e:	225a      	movs	r2, #90	; 0x5a
 801ad70:	490e      	ldr	r1, [pc, #56]	; (801adac <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 801ad72:	2038      	movs	r0, #56	; 0x38
 801ad74:	f7ef fec0 	bl	800aaf8 <_ZnwjPKci>
 801ad78:	4604      	mov	r4, r0
 801ad7a:	68b9      	ldr	r1, [r7, #8]
 801ad7c:	4620      	mov	r0, r4
 801ad7e:	f001 f851 	bl	801be24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ad82:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ad84:	68fb      	ldr	r3, [r7, #12]
 801ad86:	69db      	ldr	r3, [r3, #28]
 801ad88:	6979      	ldr	r1, [r7, #20]
 801ad8a:	4618      	mov	r0, r3
 801ad8c:	f004 fee2 	bl	801fb54 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ad90:	697b      	ldr	r3, [r7, #20]
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	3308      	adds	r3, #8
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	79fa      	ldrb	r2, [r7, #7]
 801ad9a:	4611      	mov	r1, r2
 801ad9c:	6978      	ldr	r0, [r7, #20]
 801ad9e:	4798      	blx	r3
    return *this;
 801ada0:	68fb      	ldr	r3, [r7, #12]
}
 801ada2:	4618      	mov	r0, r3
 801ada4:	371c      	adds	r7, #28
 801ada6:	46bd      	mov	sp, r7
 801ada8:	bd90      	pop	{r4, r7, pc}
 801adaa:	bf00      	nop
 801adac:	0802679c 	.word	0x0802679c

0801adb0 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801adb0:	b590      	push	{r4, r7, lr}
 801adb2:	b087      	sub	sp, #28
 801adb4:	af00      	add	r7, sp, #0
 801adb6:	60f8      	str	r0, [r7, #12]
 801adb8:	60b9      	str	r1, [r7, #8]
 801adba:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801adbc:	2262      	movs	r2, #98	; 0x62
 801adbe:	490e      	ldr	r1, [pc, #56]	; (801adf8 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 801adc0:	2038      	movs	r0, #56	; 0x38
 801adc2:	f7ef fe99 	bl	800aaf8 <_ZnwjPKci>
 801adc6:	4604      	mov	r4, r0
 801adc8:	68b9      	ldr	r1, [r7, #8]
 801adca:	4620      	mov	r0, r4
 801adcc:	f001 f82a 	bl	801be24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801add0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801add2:	68fb      	ldr	r3, [r7, #12]
 801add4:	69db      	ldr	r3, [r3, #28]
 801add6:	6979      	ldr	r1, [r7, #20]
 801add8:	4618      	mov	r0, r3
 801adda:	f004 febb 	bl	801fb54 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801adde:	697b      	ldr	r3, [r7, #20]
 801ade0:	681b      	ldr	r3, [r3, #0]
 801ade2:	3310      	adds	r3, #16
 801ade4:	681b      	ldr	r3, [r3, #0]
 801ade6:	6879      	ldr	r1, [r7, #4]
 801ade8:	6978      	ldr	r0, [r7, #20]
 801adea:	4798      	blx	r3
    return *this;
 801adec:	68fb      	ldr	r3, [r7, #12]
}
 801adee:	4618      	mov	r0, r3
 801adf0:	371c      	adds	r7, #28
 801adf2:	46bd      	mov	sp, r7
 801adf4:	bd90      	pop	{r4, r7, pc}
 801adf6:	bf00      	nop
 801adf8:	0802679c 	.word	0x0802679c

0801adfc <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 801adfc:	b590      	push	{r4, r7, lr}
 801adfe:	b087      	sub	sp, #28
 801ae00:	af00      	add	r7, sp, #0
 801ae02:	60f8      	str	r0, [r7, #12]
 801ae04:	60b9      	str	r1, [r7, #8]
 801ae06:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ae08:	226a      	movs	r2, #106	; 0x6a
 801ae0a:	490e      	ldr	r1, [pc, #56]	; (801ae44 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 801ae0c:	2038      	movs	r0, #56	; 0x38
 801ae0e:	f7ef fe73 	bl	800aaf8 <_ZnwjPKci>
 801ae12:	4604      	mov	r4, r0
 801ae14:	68b9      	ldr	r1, [r7, #8]
 801ae16:	4620      	mov	r0, r4
 801ae18:	f001 f804 	bl	801be24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ae1c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ae1e:	68fb      	ldr	r3, [r7, #12]
 801ae20:	69db      	ldr	r3, [r3, #28]
 801ae22:	6979      	ldr	r1, [r7, #20]
 801ae24:	4618      	mov	r0, r3
 801ae26:	f004 fe95 	bl	801fb54 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ae2a:	697b      	ldr	r3, [r7, #20]
 801ae2c:	681b      	ldr	r3, [r3, #0]
 801ae2e:	330c      	adds	r3, #12
 801ae30:	681b      	ldr	r3, [r3, #0]
 801ae32:	6879      	ldr	r1, [r7, #4]
 801ae34:	6978      	ldr	r0, [r7, #20]
 801ae36:	4798      	blx	r3
    return *this;
 801ae38:	68fb      	ldr	r3, [r7, #12]
}
 801ae3a:	4618      	mov	r0, r3
 801ae3c:	371c      	adds	r7, #28
 801ae3e:	46bd      	mov	sp, r7
 801ae40:	bd90      	pop	{r4, r7, pc}
 801ae42:	bf00      	nop
 801ae44:	0802679c 	.word	0x0802679c

0801ae48 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 801ae48:	b590      	push	{r4, r7, lr}
 801ae4a:	b087      	sub	sp, #28
 801ae4c:	af00      	add	r7, sp, #0
 801ae4e:	60f8      	str	r0, [r7, #12]
 801ae50:	60b9      	str	r1, [r7, #8]
 801ae52:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ae54:	2272      	movs	r2, #114	; 0x72
 801ae56:	490e      	ldr	r1, [pc, #56]	; (801ae90 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 801ae58:	2038      	movs	r0, #56	; 0x38
 801ae5a:	f7ef fe4d 	bl	800aaf8 <_ZnwjPKci>
 801ae5e:	4604      	mov	r4, r0
 801ae60:	68b9      	ldr	r1, [r7, #8]
 801ae62:	4620      	mov	r0, r4
 801ae64:	f000 ffde 	bl	801be24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ae68:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ae6a:	68fb      	ldr	r3, [r7, #12]
 801ae6c:	69db      	ldr	r3, [r3, #28]
 801ae6e:	6979      	ldr	r1, [r7, #20]
 801ae70:	4618      	mov	r0, r3
 801ae72:	f004 fe6f 	bl	801fb54 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ae76:	697b      	ldr	r3, [r7, #20]
 801ae78:	681b      	ldr	r3, [r3, #0]
 801ae7a:	3314      	adds	r3, #20
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	6879      	ldr	r1, [r7, #4]
 801ae80:	6978      	ldr	r0, [r7, #20]
 801ae82:	4798      	blx	r3
    return *this;
 801ae84:	68fb      	ldr	r3, [r7, #12]
}
 801ae86:	4618      	mov	r0, r3
 801ae88:	371c      	adds	r7, #28
 801ae8a:	46bd      	mov	sp, r7
 801ae8c:	bd90      	pop	{r4, r7, pc}
 801ae8e:	bf00      	nop
 801ae90:	0802679c 	.word	0x0802679c

0801ae94 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801ae94:	b590      	push	{r4, r7, lr}
 801ae96:	b087      	sub	sp, #28
 801ae98:	af00      	add	r7, sp, #0
 801ae9a:	60f8      	str	r0, [r7, #12]
 801ae9c:	60b9      	str	r1, [r7, #8]
 801ae9e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801aea0:	227a      	movs	r2, #122	; 0x7a
 801aea2:	490e      	ldr	r1, [pc, #56]	; (801aedc <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 801aea4:	2038      	movs	r0, #56	; 0x38
 801aea6:	f7ef fe27 	bl	800aaf8 <_ZnwjPKci>
 801aeaa:	4604      	mov	r4, r0
 801aeac:	68b9      	ldr	r1, [r7, #8]
 801aeae:	4620      	mov	r0, r4
 801aeb0:	f000 ffb8 	bl	801be24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801aeb4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801aeb6:	68fb      	ldr	r3, [r7, #12]
 801aeb8:	69db      	ldr	r3, [r3, #28]
 801aeba:	6979      	ldr	r1, [r7, #20]
 801aebc:	4618      	mov	r0, r3
 801aebe:	f004 fe49 	bl	801fb54 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801aec2:	697b      	ldr	r3, [r7, #20]
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	3318      	adds	r3, #24
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	6879      	ldr	r1, [r7, #4]
 801aecc:	6978      	ldr	r0, [r7, #20]
 801aece:	4798      	blx	r3
    return *this;
 801aed0:	68fb      	ldr	r3, [r7, #12]
}
 801aed2:	4618      	mov	r0, r3
 801aed4:	371c      	adds	r7, #28
 801aed6:	46bd      	mov	sp, r7
 801aed8:	bd90      	pop	{r4, r7, pc}
 801aeda:	bf00      	nop
 801aedc:	0802679c 	.word	0x0802679c

0801aee0 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801aee0:	b5b0      	push	{r4, r5, r7, lr}
 801aee2:	b086      	sub	sp, #24
 801aee4:	af02      	add	r7, sp, #8
 801aee6:	60f8      	str	r0, [r7, #12]
 801aee8:	60b9      	str	r1, [r7, #8]
 801aeea:	4639      	mov	r1, r7
 801aeec:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801aef0:	f7f9 fda8 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801aef4:	4604      	mov	r4, r0
 801aef6:	6823      	ldr	r3, [r4, #0]
 801aef8:	3368      	adds	r3, #104	; 0x68
 801aefa:	681d      	ldr	r5, [r3, #0]
 801aefc:	f7f9 fdb2 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801af00:	4603      	mov	r3, r0
 801af02:	9300      	str	r3, [sp, #0]
 801af04:	2396      	movs	r3, #150	; 0x96
 801af06:	4a04      	ldr	r2, [pc, #16]	; (801af18 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 801af08:	4904      	ldr	r1, [pc, #16]	; (801af1c <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801af0a:	4620      	mov	r0, r4
 801af0c:	47a8      	blx	r5
    return *this;
 801af0e:	68fb      	ldr	r3, [r7, #12]
}
 801af10:	4618      	mov	r0, r3
 801af12:	3710      	adds	r7, #16
 801af14:	46bd      	mov	sp, r7
 801af16:	bdb0      	pop	{r4, r5, r7, pc}
 801af18:	0802679c 	.word	0x0802679c
 801af1c:	080267b8 	.word	0x080267b8

0801af20 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801af20:	b5b0      	push	{r4, r5, r7, lr}
 801af22:	b086      	sub	sp, #24
 801af24:	af02      	add	r7, sp, #8
 801af26:	60f8      	str	r0, [r7, #12]
 801af28:	60b9      	str	r1, [r7, #8]
 801af2a:	4639      	mov	r1, r7
 801af2c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801af30:	f7f9 fd88 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801af34:	4604      	mov	r4, r0
 801af36:	6823      	ldr	r3, [r4, #0]
 801af38:	3368      	adds	r3, #104	; 0x68
 801af3a:	681d      	ldr	r5, [r3, #0]
 801af3c:	f7f9 fd92 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801af40:	4603      	mov	r3, r0
 801af42:	9300      	str	r3, [sp, #0]
 801af44:	239c      	movs	r3, #156	; 0x9c
 801af46:	4a04      	ldr	r2, [pc, #16]	; (801af58 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 801af48:	4904      	ldr	r1, [pc, #16]	; (801af5c <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801af4a:	4620      	mov	r0, r4
 801af4c:	47a8      	blx	r5
    return *this;
 801af4e:	68fb      	ldr	r3, [r7, #12]
}
 801af50:	4618      	mov	r0, r3
 801af52:	3710      	adds	r7, #16
 801af54:	46bd      	mov	sp, r7
 801af56:	bdb0      	pop	{r4, r5, r7, pc}
 801af58:	0802679c 	.word	0x0802679c
 801af5c:	080267d8 	.word	0x080267d8

0801af60 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 801af60:	b590      	push	{r4, r7, lr}
 801af62:	b087      	sub	sp, #28
 801af64:	af00      	add	r7, sp, #0
 801af66:	60f8      	str	r0, [r7, #12]
 801af68:	60b9      	str	r1, [r7, #8]
 801af6a:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801af6e:	22a4      	movs	r2, #164	; 0xa4
 801af70:	490e      	ldr	r1, [pc, #56]	; (801afac <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 801af72:	2038      	movs	r0, #56	; 0x38
 801af74:	f7ef fdc0 	bl	800aaf8 <_ZnwjPKci>
 801af78:	4604      	mov	r4, r0
 801af7a:	68b9      	ldr	r1, [r7, #8]
 801af7c:	4620      	mov	r0, r4
 801af7e:	f000 ff51 	bl	801be24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801af82:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	69db      	ldr	r3, [r3, #28]
 801af88:	6979      	ldr	r1, [r7, #20]
 801af8a:	4618      	mov	r0, r3
 801af8c:	f004 fde2 	bl	801fb54 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801af90:	697b      	ldr	r3, [r7, #20]
 801af92:	681b      	ldr	r3, [r3, #0]
 801af94:	3324      	adds	r3, #36	; 0x24
 801af96:	681b      	ldr	r3, [r3, #0]
 801af98:	ed97 0b00 	vldr	d0, [r7]
 801af9c:	6978      	ldr	r0, [r7, #20]
 801af9e:	4798      	blx	r3
    return *this;
 801afa0:	68fb      	ldr	r3, [r7, #12]
}
 801afa2:	4618      	mov	r0, r3
 801afa4:	371c      	adds	r7, #28
 801afa6:	46bd      	mov	sp, r7
 801afa8:	bd90      	pop	{r4, r7, pc}
 801afaa:	bf00      	nop
 801afac:	0802679c 	.word	0x0802679c

0801afb0 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 801afb0:	b590      	push	{r4, r7, lr}
 801afb2:	b089      	sub	sp, #36	; 0x24
 801afb4:	af00      	add	r7, sp, #0
 801afb6:	6178      	str	r0, [r7, #20]
 801afb8:	6139      	str	r1, [r7, #16]
 801afba:	ed87 0b02 	vstr	d0, [r7, #8]
 801afbe:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801afc2:	22ac      	movs	r2, #172	; 0xac
 801afc4:	490f      	ldr	r1, [pc, #60]	; (801b004 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 801afc6:	2038      	movs	r0, #56	; 0x38
 801afc8:	f7ef fd96 	bl	800aaf8 <_ZnwjPKci>
 801afcc:	4604      	mov	r4, r0
 801afce:	6939      	ldr	r1, [r7, #16]
 801afd0:	4620      	mov	r0, r4
 801afd2:	f000 ff27 	bl	801be24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801afd6:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 801afd8:	697b      	ldr	r3, [r7, #20]
 801afda:	69db      	ldr	r3, [r3, #28]
 801afdc:	69f9      	ldr	r1, [r7, #28]
 801afde:	4618      	mov	r0, r3
 801afe0:	f004 fdb8 	bl	801fb54 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 801afe4:	69fb      	ldr	r3, [r7, #28]
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	3328      	adds	r3, #40	; 0x28
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	ed97 1b00 	vldr	d1, [r7]
 801aff0:	ed97 0b02 	vldr	d0, [r7, #8]
 801aff4:	69f8      	ldr	r0, [r7, #28]
 801aff6:	4798      	blx	r3
    return *this;
 801aff8:	697b      	ldr	r3, [r7, #20]
}
 801affa:	4618      	mov	r0, r3
 801affc:	3724      	adds	r7, #36	; 0x24
 801affe:	46bd      	mov	sp, r7
 801b000:	bd90      	pop	{r4, r7, pc}
 801b002:	bf00      	nop
 801b004:	0802679c 	.word	0x0802679c

0801b008 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 801b008:	b590      	push	{r4, r7, lr}
 801b00a:	b087      	sub	sp, #28
 801b00c:	af00      	add	r7, sp, #0
 801b00e:	60f8      	str	r0, [r7, #12]
 801b010:	60b9      	str	r1, [r7, #8]
 801b012:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b014:	22b4      	movs	r2, #180	; 0xb4
 801b016:	490e      	ldr	r1, [pc, #56]	; (801b050 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 801b018:	2038      	movs	r0, #56	; 0x38
 801b01a:	f7ef fd6d 	bl	800aaf8 <_ZnwjPKci>
 801b01e:	4604      	mov	r4, r0
 801b020:	68b9      	ldr	r1, [r7, #8]
 801b022:	4620      	mov	r0, r4
 801b024:	f000 fefe 	bl	801be24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b028:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801b02a:	68fb      	ldr	r3, [r7, #12]
 801b02c:	69db      	ldr	r3, [r3, #28]
 801b02e:	6979      	ldr	r1, [r7, #20]
 801b030:	4618      	mov	r0, r3
 801b032:	f004 fd8f 	bl	801fb54 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801b036:	697b      	ldr	r3, [r7, #20]
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	3338      	adds	r3, #56	; 0x38
 801b03c:	681b      	ldr	r3, [r3, #0]
 801b03e:	6879      	ldr	r1, [r7, #4]
 801b040:	6978      	ldr	r0, [r7, #20]
 801b042:	4798      	blx	r3
    return *this;
 801b044:	68fb      	ldr	r3, [r7, #12]
}
 801b046:	4618      	mov	r0, r3
 801b048:	371c      	adds	r7, #28
 801b04a:	46bd      	mov	sp, r7
 801b04c:	bd90      	pop	{r4, r7, pc}
 801b04e:	bf00      	nop
 801b050:	0802679c 	.word	0x0802679c

0801b054 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 801b054:	b590      	push	{r4, r7, lr}
 801b056:	b087      	sub	sp, #28
 801b058:	af00      	add	r7, sp, #0
 801b05a:	60f8      	str	r0, [r7, #12]
 801b05c:	60b9      	str	r1, [r7, #8]
 801b05e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b060:	22bc      	movs	r2, #188	; 0xbc
 801b062:	490e      	ldr	r1, [pc, #56]	; (801b09c <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 801b064:	2038      	movs	r0, #56	; 0x38
 801b066:	f7ef fd47 	bl	800aaf8 <_ZnwjPKci>
 801b06a:	4604      	mov	r4, r0
 801b06c:	68b9      	ldr	r1, [r7, #8]
 801b06e:	4620      	mov	r0, r4
 801b070:	f000 fed8 	bl	801be24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b074:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801b076:	68fb      	ldr	r3, [r7, #12]
 801b078:	69db      	ldr	r3, [r3, #28]
 801b07a:	6979      	ldr	r1, [r7, #20]
 801b07c:	4618      	mov	r0, r3
 801b07e:	f004 fd69 	bl	801fb54 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801b082:	697b      	ldr	r3, [r7, #20]
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	332c      	adds	r3, #44	; 0x2c
 801b088:	681b      	ldr	r3, [r3, #0]
 801b08a:	6879      	ldr	r1, [r7, #4]
 801b08c:	6978      	ldr	r0, [r7, #20]
 801b08e:	4798      	blx	r3
    return *this;
 801b090:	68fb      	ldr	r3, [r7, #12]
}
 801b092:	4618      	mov	r0, r3
 801b094:	371c      	adds	r7, #28
 801b096:	46bd      	mov	sp, r7
 801b098:	bd90      	pop	{r4, r7, pc}
 801b09a:	bf00      	nop
 801b09c:	0802679c 	.word	0x0802679c

0801b0a0 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801b0a0:	b590      	push	{r4, r7, lr}
 801b0a2:	b087      	sub	sp, #28
 801b0a4:	af00      	add	r7, sp, #0
 801b0a6:	60f8      	str	r0, [r7, #12]
 801b0a8:	60b9      	str	r1, [r7, #8]
 801b0aa:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b0ac:	22c4      	movs	r2, #196	; 0xc4
 801b0ae:	490e      	ldr	r1, [pc, #56]	; (801b0e8 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 801b0b0:	2038      	movs	r0, #56	; 0x38
 801b0b2:	f7ef fd21 	bl	800aaf8 <_ZnwjPKci>
 801b0b6:	4604      	mov	r4, r0
 801b0b8:	68b9      	ldr	r1, [r7, #8]
 801b0ba:	4620      	mov	r0, r4
 801b0bc:	f000 feb2 	bl	801be24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b0c0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801b0c2:	68fb      	ldr	r3, [r7, #12]
 801b0c4:	69db      	ldr	r3, [r3, #28]
 801b0c6:	6979      	ldr	r1, [r7, #20]
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	f004 fd43 	bl	801fb54 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801b0ce:	697b      	ldr	r3, [r7, #20]
 801b0d0:	681b      	ldr	r3, [r3, #0]
 801b0d2:	3330      	adds	r3, #48	; 0x30
 801b0d4:	681b      	ldr	r3, [r3, #0]
 801b0d6:	6879      	ldr	r1, [r7, #4]
 801b0d8:	6978      	ldr	r0, [r7, #20]
 801b0da:	4798      	blx	r3
    return *this;
 801b0dc:	68fb      	ldr	r3, [r7, #12]
}
 801b0de:	4618      	mov	r0, r3
 801b0e0:	371c      	adds	r7, #28
 801b0e2:	46bd      	mov	sp, r7
 801b0e4:	bd90      	pop	{r4, r7, pc}
 801b0e6:	bf00      	nop
 801b0e8:	0802679c 	.word	0x0802679c

0801b0ec <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801b0ec:	b590      	push	{r4, r7, lr}
 801b0ee:	b087      	sub	sp, #28
 801b0f0:	af00      	add	r7, sp, #0
 801b0f2:	60f8      	str	r0, [r7, #12]
 801b0f4:	60b9      	str	r1, [r7, #8]
 801b0f6:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b0f8:	22cc      	movs	r2, #204	; 0xcc
 801b0fa:	490e      	ldr	r1, [pc, #56]	; (801b134 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 801b0fc:	2038      	movs	r0, #56	; 0x38
 801b0fe:	f7ef fcfb 	bl	800aaf8 <_ZnwjPKci>
 801b102:	4604      	mov	r4, r0
 801b104:	68b9      	ldr	r1, [r7, #8]
 801b106:	4620      	mov	r0, r4
 801b108:	f000 fe8c 	bl	801be24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b10c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801b10e:	68fb      	ldr	r3, [r7, #12]
 801b110:	69db      	ldr	r3, [r3, #28]
 801b112:	6979      	ldr	r1, [r7, #20]
 801b114:	4618      	mov	r0, r3
 801b116:	f004 fd1d 	bl	801fb54 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801b11a:	697b      	ldr	r3, [r7, #20]
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	3334      	adds	r3, #52	; 0x34
 801b120:	681b      	ldr	r3, [r3, #0]
 801b122:	6879      	ldr	r1, [r7, #4]
 801b124:	6978      	ldr	r0, [r7, #20]
 801b126:	4798      	blx	r3
    return *this;
 801b128:	68fb      	ldr	r3, [r7, #12]
}
 801b12a:	4618      	mov	r0, r3
 801b12c:	371c      	adds	r7, #28
 801b12e:	46bd      	mov	sp, r7
 801b130:	bd90      	pop	{r4, r7, pc}
 801b132:	bf00      	nop
 801b134:	0802679c 	.word	0x0802679c

0801b138 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801b138:	b590      	push	{r4, r7, lr}
 801b13a:	b087      	sub	sp, #28
 801b13c:	af00      	add	r7, sp, #0
 801b13e:	60f8      	str	r0, [r7, #12]
 801b140:	60b9      	str	r1, [r7, #8]
 801b142:	607a      	str	r2, [r7, #4]
 801b144:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b146:	22d4      	movs	r2, #212	; 0xd4
 801b148:	490e      	ldr	r1, [pc, #56]	; (801b184 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 801b14a:	2038      	movs	r0, #56	; 0x38
 801b14c:	f7ef fcd4 	bl	800aaf8 <_ZnwjPKci>
 801b150:	4604      	mov	r4, r0
 801b152:	68b9      	ldr	r1, [r7, #8]
 801b154:	4620      	mov	r0, r4
 801b156:	f000 fe65 	bl	801be24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b15a:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801b15c:	68fb      	ldr	r3, [r7, #12]
 801b15e:	69db      	ldr	r3, [r3, #28]
 801b160:	6979      	ldr	r1, [r7, #20]
 801b162:	4618      	mov	r0, r3
 801b164:	f004 fcf6 	bl	801fb54 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 801b168:	697b      	ldr	r3, [r7, #20]
 801b16a:	681b      	ldr	r3, [r3, #0]
 801b16c:	333c      	adds	r3, #60	; 0x3c
 801b16e:	681b      	ldr	r3, [r3, #0]
 801b170:	683a      	ldr	r2, [r7, #0]
 801b172:	6879      	ldr	r1, [r7, #4]
 801b174:	6978      	ldr	r0, [r7, #20]
 801b176:	4798      	blx	r3
    return *this;
 801b178:	68fb      	ldr	r3, [r7, #12]
}
 801b17a:	4618      	mov	r0, r3
 801b17c:	371c      	adds	r7, #28
 801b17e:	46bd      	mov	sp, r7
 801b180:	bd90      	pop	{r4, r7, pc}
 801b182:	bf00      	nop
 801b184:	0802679c 	.word	0x0802679c

0801b188 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 801b188:	b590      	push	{r4, r7, lr}
 801b18a:	b087      	sub	sp, #28
 801b18c:	af00      	add	r7, sp, #0
 801b18e:	60f8      	str	r0, [r7, #12]
 801b190:	60b9      	str	r1, [r7, #8]
 801b192:	607a      	str	r2, [r7, #4]
 801b194:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b196:	22dc      	movs	r2, #220	; 0xdc
 801b198:	490e      	ldr	r1, [pc, #56]	; (801b1d4 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 801b19a:	2038      	movs	r0, #56	; 0x38
 801b19c:	f7ef fcac 	bl	800aaf8 <_ZnwjPKci>
 801b1a0:	4604      	mov	r4, r0
 801b1a2:	6879      	ldr	r1, [r7, #4]
 801b1a4:	4620      	mov	r0, r4
 801b1a6:	f000 fe3d 	bl	801be24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b1aa:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801b1ac:	68fb      	ldr	r3, [r7, #12]
 801b1ae:	69db      	ldr	r3, [r3, #28]
 801b1b0:	6979      	ldr	r1, [r7, #20]
 801b1b2:	4618      	mov	r0, r3
 801b1b4:	f004 fcce 	bl	801fb54 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801b1b8:	697b      	ldr	r3, [r7, #20]
 801b1ba:	681b      	ldr	r3, [r3, #0]
 801b1bc:	3340      	adds	r3, #64	; 0x40
 801b1be:	681b      	ldr	r3, [r3, #0]
 801b1c0:	683a      	ldr	r2, [r7, #0]
 801b1c2:	68b9      	ldr	r1, [r7, #8]
 801b1c4:	6978      	ldr	r0, [r7, #20]
 801b1c6:	4798      	blx	r3
    return *this;
 801b1c8:	68fb      	ldr	r3, [r7, #12]
}
 801b1ca:	4618      	mov	r0, r3
 801b1cc:	371c      	adds	r7, #28
 801b1ce:	46bd      	mov	sp, r7
 801b1d0:	bd90      	pop	{r4, r7, pc}
 801b1d2:	bf00      	nop
 801b1d4:	0802679c 	.word	0x0802679c

0801b1d8 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 801b1d8:	b590      	push	{r4, r7, lr}
 801b1da:	b087      	sub	sp, #28
 801b1dc:	af00      	add	r7, sp, #0
 801b1de:	60f8      	str	r0, [r7, #12]
 801b1e0:	60b9      	str	r1, [r7, #8]
 801b1e2:	607a      	str	r2, [r7, #4]
 801b1e4:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b1e6:	22e4      	movs	r2, #228	; 0xe4
 801b1e8:	4911      	ldr	r1, [pc, #68]	; (801b230 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 801b1ea:	2038      	movs	r0, #56	; 0x38
 801b1ec:	f7ef fc84 	bl	800aaf8 <_ZnwjPKci>
 801b1f0:	4604      	mov	r4, r0
 801b1f2:	68b9      	ldr	r1, [r7, #8]
 801b1f4:	4620      	mov	r0, r4
 801b1f6:	f000 fe15 	bl	801be24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b1fa:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801b1fc:	68fb      	ldr	r3, [r7, #12]
 801b1fe:	6a1b      	ldr	r3, [r3, #32]
 801b200:	6979      	ldr	r1, [r7, #20]
 801b202:	4618      	mov	r0, r3
 801b204:	f004 fca6 	bl	801fb54 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801b208:	697b      	ldr	r3, [r7, #20]
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	3330      	adds	r3, #48	; 0x30
 801b20e:	681b      	ldr	r3, [r3, #0]
 801b210:	6879      	ldr	r1, [r7, #4]
 801b212:	6978      	ldr	r0, [r7, #20]
 801b214:	4798      	blx	r3
    newParameter->setSize(size);
 801b216:	697b      	ldr	r3, [r7, #20]
 801b218:	681b      	ldr	r3, [r3, #0]
 801b21a:	3348      	adds	r3, #72	; 0x48
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	6839      	ldr	r1, [r7, #0]
 801b220:	6978      	ldr	r0, [r7, #20]
 801b222:	4798      	blx	r3
    return *this;
 801b224:	68fb      	ldr	r3, [r7, #12]
}
 801b226:	4618      	mov	r0, r3
 801b228:	371c      	adds	r7, #28
 801b22a:	46bd      	mov	sp, r7
 801b22c:	bd90      	pop	{r4, r7, pc}
 801b22e:	bf00      	nop
 801b230:	0802679c 	.word	0x0802679c

0801b234 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 801b234:	b590      	push	{r4, r7, lr}
 801b236:	b087      	sub	sp, #28
 801b238:	af00      	add	r7, sp, #0
 801b23a:	60f8      	str	r0, [r7, #12]
 801b23c:	60b9      	str	r1, [r7, #8]
 801b23e:	607a      	str	r2, [r7, #4]
 801b240:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b242:	22ed      	movs	r2, #237	; 0xed
 801b244:	490e      	ldr	r1, [pc, #56]	; (801b280 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 801b246:	2038      	movs	r0, #56	; 0x38
 801b248:	f7ef fc56 	bl	800aaf8 <_ZnwjPKci>
 801b24c:	4604      	mov	r4, r0
 801b24e:	6879      	ldr	r1, [r7, #4]
 801b250:	4620      	mov	r0, r4
 801b252:	f000 fde7 	bl	801be24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b256:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801b258:	68fb      	ldr	r3, [r7, #12]
 801b25a:	6a1b      	ldr	r3, [r3, #32]
 801b25c:	6979      	ldr	r1, [r7, #20]
 801b25e:	4618      	mov	r0, r3
 801b260:	f004 fc78 	bl	801fb54 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801b264:	697b      	ldr	r3, [r7, #20]
 801b266:	681b      	ldr	r3, [r3, #0]
 801b268:	3340      	adds	r3, #64	; 0x40
 801b26a:	681b      	ldr	r3, [r3, #0]
 801b26c:	683a      	ldr	r2, [r7, #0]
 801b26e:	68b9      	ldr	r1, [r7, #8]
 801b270:	6978      	ldr	r0, [r7, #20]
 801b272:	4798      	blx	r3
    return *this;
 801b274:	68fb      	ldr	r3, [r7, #12]
}
 801b276:	4618      	mov	r0, r3
 801b278:	371c      	adds	r7, #28
 801b27a:	46bd      	mov	sp, r7
 801b27c:	bd90      	pop	{r4, r7, pc}
 801b27e:	bf00      	nop
 801b280:	0802679c 	.word	0x0802679c

0801b284 <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 801b284:	b590      	push	{r4, r7, lr}
 801b286:	b083      	sub	sp, #12
 801b288:	af00      	add	r7, sp, #0
 801b28a:	6078      	str	r0, [r7, #4]
 801b28c:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	3318      	adds	r3, #24
 801b294:	681c      	ldr	r4, [r3, #0]
 801b296:	2300      	movs	r3, #0
 801b298:	2200      	movs	r2, #0
 801b29a:	6839      	ldr	r1, [r7, #0]
 801b29c:	6878      	ldr	r0, [r7, #4]
 801b29e:	47a0      	blx	r4
 801b2a0:	4603      	mov	r3, r0
}
 801b2a2:	4618      	mov	r0, r3
 801b2a4:	370c      	adds	r7, #12
 801b2a6:	46bd      	mov	sp, r7
 801b2a8:	bd90      	pop	{r4, r7, pc}
	...

0801b2ac <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 801b2ac:	b580      	push	{r7, lr}
 801b2ae:	b086      	sub	sp, #24
 801b2b0:	af00      	add	r7, sp, #0
 801b2b2:	60f8      	str	r0, [r7, #12]
 801b2b4:	60b9      	str	r1, [r7, #8]
 801b2b6:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801b2b8:	68bb      	ldr	r3, [r7, #8]
 801b2ba:	69db      	ldr	r3, [r3, #28]
 801b2bc:	6879      	ldr	r1, [r7, #4]
 801b2be:	4618      	mov	r0, r3
 801b2c0:	f004 fc7e 	bl	801fbc0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b2c4:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 801b2c6:	697b      	ldr	r3, [r7, #20]
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	d008      	beq.n	801b2de <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 801b2cc:	697b      	ldr	r3, [r7, #20]
 801b2ce:	681b      	ldr	r3, [r3, #0]
 801b2d0:	3360      	adds	r3, #96	; 0x60
 801b2d2:	681b      	ldr	r3, [r3, #0]
 801b2d4:	68fa      	ldr	r2, [r7, #12]
 801b2d6:	6979      	ldr	r1, [r7, #20]
 801b2d8:	4610      	mov	r0, r2
 801b2da:	4798      	blx	r3
 801b2dc:	e004      	b.n	801b2e8 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 801b2de:	68fb      	ldr	r3, [r7, #12]
 801b2e0:	4903      	ldr	r1, [pc, #12]	; (801b2f0 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 801b2e2:	4618      	mov	r0, r3
 801b2e4:	f7f2 fe10 	bl	800df08 <_Z10StringFromPKc>
}
 801b2e8:	68f8      	ldr	r0, [r7, #12]
 801b2ea:	3718      	adds	r7, #24
 801b2ec:	46bd      	mov	sp, r7
 801b2ee:	bd80      	pop	{r7, pc}
 801b2f0:	08026798 	.word	0x08026798

0801b2f4 <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 801b2f4:	b580      	push	{r7, lr}
 801b2f6:	b084      	sub	sp, #16
 801b2f8:	af00      	add	r7, sp, #0
 801b2fa:	6078      	str	r0, [r7, #4]
 801b2fc:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	69db      	ldr	r3, [r3, #28]
 801b302:	6839      	ldr	r1, [r7, #0]
 801b304:	4618      	mov	r0, r3
 801b306:	f004 fc5b 	bl	801fbc0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b30a:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801b30c:	68fb      	ldr	r3, [r7, #12]
 801b30e:	2b00      	cmp	r3, #0
 801b310:	bf14      	ite	ne
 801b312:	2301      	movne	r3, #1
 801b314:	2300      	moveq	r3, #0
 801b316:	b2db      	uxtb	r3, r3
}
 801b318:	4618      	mov	r0, r3
 801b31a:	3710      	adds	r7, #16
 801b31c:	46bd      	mov	sp, r7
 801b31e:	bd80      	pop	{r7, pc}

0801b320 <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 801b320:	b580      	push	{r7, lr}
 801b322:	b084      	sub	sp, #16
 801b324:	af00      	add	r7, sp, #0
 801b326:	6078      	str	r0, [r7, #4]
 801b328:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	6a1b      	ldr	r3, [r3, #32]
 801b32e:	6839      	ldr	r1, [r7, #0]
 801b330:	4618      	mov	r0, r3
 801b332:	f004 fc45 	bl	801fbc0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b336:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801b338:	68fb      	ldr	r3, [r7, #12]
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	bf14      	ite	ne
 801b33e:	2301      	movne	r3, #1
 801b340:	2300      	moveq	r3, #0
 801b342:	b2db      	uxtb	r3, r3
}
 801b344:	4618      	mov	r0, r3
 801b346:	3710      	adds	r7, #16
 801b348:	46bd      	mov	sp, r7
 801b34a:	bd80      	pop	{r7, pc}

0801b34c <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 801b34c:	b590      	push	{r4, r7, lr}
 801b34e:	b089      	sub	sp, #36	; 0x24
 801b350:	af00      	add	r7, sp, #0
 801b352:	60f8      	str	r0, [r7, #12]
 801b354:	60b9      	str	r1, [r7, #8]
 801b356:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801b358:	68bb      	ldr	r3, [r7, #8]
 801b35a:	69db      	ldr	r3, [r3, #28]
 801b35c:	6879      	ldr	r1, [r7, #4]
 801b35e:	4618      	mov	r0, r3
 801b360:	f004 fc2e 	bl	801fbc0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b364:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801b366:	2400      	movs	r4, #0
 801b368:	69fb      	ldr	r3, [r7, #28]
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d004      	beq.n	801b378 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 801b36e:	69f9      	ldr	r1, [r7, #28]
 801b370:	68f8      	ldr	r0, [r7, #12]
 801b372:	f7f0 f829 	bl	800b3c8 <_ZN14MockNamedValueC1ERKS_>
 801b376:	e00c      	b.n	801b392 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 801b378:	f107 0314 	add.w	r3, r7, #20
 801b37c:	490a      	ldr	r1, [pc, #40]	; (801b3a8 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 801b37e:	4618      	mov	r0, r3
 801b380:	f7f1 ff7d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801b384:	2401      	movs	r4, #1
 801b386:	f107 0314 	add.w	r3, r7, #20
 801b38a:	4619      	mov	r1, r3
 801b38c:	68f8      	ldr	r0, [r7, #12]
 801b38e:	f002 fc9b 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
 801b392:	2c00      	cmp	r4, #0
 801b394:	d004      	beq.n	801b3a0 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 801b396:	f107 0314 	add.w	r3, r7, #20
 801b39a:	4618      	mov	r0, r3
 801b39c:	f7f2 fb27 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 801b3a0:	68f8      	ldr	r0, [r7, #12]
 801b3a2:	3724      	adds	r7, #36	; 0x24
 801b3a4:	46bd      	mov	sp, r7
 801b3a6:	bd90      	pop	{r4, r7, pc}
 801b3a8:	08026798 	.word	0x08026798

0801b3ac <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 801b3ac:	b590      	push	{r4, r7, lr}
 801b3ae:	b089      	sub	sp, #36	; 0x24
 801b3b0:	af00      	add	r7, sp, #0
 801b3b2:	60f8      	str	r0, [r7, #12]
 801b3b4:	60b9      	str	r1, [r7, #8]
 801b3b6:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801b3b8:	68bb      	ldr	r3, [r7, #8]
 801b3ba:	6a1b      	ldr	r3, [r3, #32]
 801b3bc:	6879      	ldr	r1, [r7, #4]
 801b3be:	4618      	mov	r0, r3
 801b3c0:	f004 fbfe 	bl	801fbc0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b3c4:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801b3c6:	2400      	movs	r4, #0
 801b3c8:	69fb      	ldr	r3, [r7, #28]
 801b3ca:	2b00      	cmp	r3, #0
 801b3cc:	d004      	beq.n	801b3d8 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 801b3ce:	69f9      	ldr	r1, [r7, #28]
 801b3d0:	68f8      	ldr	r0, [r7, #12]
 801b3d2:	f7ef fff9 	bl	800b3c8 <_ZN14MockNamedValueC1ERKS_>
 801b3d6:	e00c      	b.n	801b3f2 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 801b3d8:	f107 0314 	add.w	r3, r7, #20
 801b3dc:	490a      	ldr	r1, [pc, #40]	; (801b408 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 801b3de:	4618      	mov	r0, r3
 801b3e0:	f7f1 ff4d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801b3e4:	2401      	movs	r4, #1
 801b3e6:	f107 0314 	add.w	r3, r7, #20
 801b3ea:	4619      	mov	r1, r3
 801b3ec:	68f8      	ldr	r0, [r7, #12]
 801b3ee:	f002 fc6b 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
 801b3f2:	2c00      	cmp	r4, #0
 801b3f4:	d004      	beq.n	801b400 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 801b3f6:	f107 0314 	add.w	r3, r7, #20
 801b3fa:	4618      	mov	r0, r3
 801b3fc:	f7f2 faf7 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 801b400:	68f8      	ldr	r0, [r7, #12]
 801b402:	3724      	adds	r7, #36	; 0x24
 801b404:	46bd      	mov	sp, r7
 801b406:	bd90      	pop	{r4, r7, pc}
 801b408:	08026798 	.word	0x08026798

0801b40c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 801b40c:	b580      	push	{r7, lr}
 801b40e:	b084      	sub	sp, #16
 801b410:	af00      	add	r7, sp, #0
 801b412:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	69db      	ldr	r3, [r3, #28]
 801b418:	4618      	mov	r0, r3
 801b41a:	f004 fc00 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 801b41e:	60f8      	str	r0, [r7, #12]
 801b420:	68fb      	ldr	r3, [r7, #12]
 801b422:	2b00      	cmp	r3, #0
 801b424:	d014      	beq.n	801b450 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 801b426:	68f9      	ldr	r1, [r7, #12]
 801b428:	6878      	ldr	r0, [r7, #4]
 801b42a:	f000 fced 	bl	801be08 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b42e:	4603      	mov	r3, r0
 801b430:	4618      	mov	r0, r3
 801b432:	f000 fd1f 	bl	801be74 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801b436:	4603      	mov	r3, r0
 801b438:	f083 0301 	eor.w	r3, r3, #1
 801b43c:	b2db      	uxtb	r3, r3
 801b43e:	2b00      	cmp	r3, #0
 801b440:	d001      	beq.n	801b446 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 801b442:	2300      	movs	r3, #0
 801b444:	e023      	b.n	801b48e <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 801b446:	68f8      	ldr	r0, [r7, #12]
 801b448:	f004 faf2 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 801b44c:	60f8      	str	r0, [r7, #12]
 801b44e:	e7e7      	b.n	801b420 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	6a1b      	ldr	r3, [r3, #32]
 801b454:	4618      	mov	r0, r3
 801b456:	f004 fbe2 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 801b45a:	60f8      	str	r0, [r7, #12]
 801b45c:	68fb      	ldr	r3, [r7, #12]
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d014      	beq.n	801b48c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 801b462:	68f9      	ldr	r1, [r7, #12]
 801b464:	6878      	ldr	r0, [r7, #4]
 801b466:	f000 fccf 	bl	801be08 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b46a:	4603      	mov	r3, r0
 801b46c:	4618      	mov	r0, r3
 801b46e:	f000 fd01 	bl	801be74 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801b472:	4603      	mov	r3, r0
 801b474:	f083 0301 	eor.w	r3, r3, #1
 801b478:	b2db      	uxtb	r3, r3
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d001      	beq.n	801b482 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 801b47e:	2300      	movs	r3, #0
 801b480:	e005      	b.n	801b48e <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 801b482:	68f8      	ldr	r0, [r7, #12]
 801b484:	f004 fad4 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 801b488:	60f8      	str	r0, [r7, #12]
 801b48a:	e7e7      	b.n	801b45c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 801b48c:	2301      	movs	r3, #1
}
 801b48e:	4618      	mov	r0, r3
 801b490:	3710      	adds	r7, #16
 801b492:	46bd      	mov	sp, r7
 801b494:	bd80      	pop	{r7, pc}

0801b496 <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 801b496:	b480      	push	{r7}
 801b498:	b083      	sub	sp, #12
 801b49a:	af00      	add	r7, sp, #0
 801b49c:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	2201      	movs	r2, #1
 801b4a2:	731a      	strb	r2, [r3, #12]
    return *this;
 801b4a4:	687b      	ldr	r3, [r7, #4]
}
 801b4a6:	4618      	mov	r0, r3
 801b4a8:	370c      	adds	r7, #12
 801b4aa:	46bd      	mov	sp, r7
 801b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4b0:	4770      	bx	lr

0801b4b2 <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 801b4b2:	b480      	push	{r7}
 801b4b4:	b083      	sub	sp, #12
 801b4b6:	af00      	add	r7, sp, #0
 801b4b8:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b4c2:	429a      	cmp	r2, r3
 801b4c4:	bf0c      	ite	eq
 801b4c6:	2301      	moveq	r3, #1
 801b4c8:	2300      	movne	r3, #0
 801b4ca:	b2db      	uxtb	r3, r3
}
 801b4cc:	4618      	mov	r0, r3
 801b4ce:	370c      	adds	r7, #12
 801b4d0:	46bd      	mov	sp, r7
 801b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4d6:	4770      	bx	lr

0801b4d8 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 801b4d8:	b480      	push	{r7}
 801b4da:	b083      	sub	sp, #12
 801b4dc:	af00      	add	r7, sp, #0
 801b4de:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b4e8:	429a      	cmp	r2, r3
 801b4ea:	bf34      	ite	cc
 801b4ec:	2301      	movcc	r3, #1
 801b4ee:	2300      	movcs	r3, #0
 801b4f0:	b2db      	uxtb	r3, r3
}
 801b4f2:	4618      	mov	r0, r3
 801b4f4:	370c      	adds	r7, #12
 801b4f6:	46bd      	mov	sp, r7
 801b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4fc:	4770      	bx	lr

0801b4fe <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 801b4fe:	b580      	push	{r7, lr}
 801b500:	b082      	sub	sp, #8
 801b502:	af00      	add	r7, sp, #0
 801b504:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 801b506:	687b      	ldr	r3, [r7, #4]
 801b508:	681b      	ldr	r3, [r3, #0]
 801b50a:	33cc      	adds	r3, #204	; 0xcc
 801b50c:	681b      	ldr	r3, [r3, #0]
 801b50e:	6878      	ldr	r0, [r7, #4]
 801b510:	4798      	blx	r3
 801b512:	4603      	mov	r3, r0
 801b514:	2b00      	cmp	r3, #0
 801b516:	d00c      	beq.n	801b532 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	7b1b      	ldrb	r3, [r3, #12]
 801b51c:	f083 0301 	eor.w	r3, r3, #1
 801b520:	b2db      	uxtb	r3, r3
 801b522:	2b00      	cmp	r3, #0
 801b524:	d103      	bne.n	801b52e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	7b5b      	ldrb	r3, [r3, #13]
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	d001      	beq.n	801b532 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801b52e:	2301      	movs	r3, #1
 801b530:	e000      	b.n	801b534 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 801b532:	2300      	movs	r3, #0
}
 801b534:	4618      	mov	r0, r3
 801b536:	3708      	adds	r7, #8
 801b538:	46bd      	mov	sp, r7
 801b53a:	bd80      	pop	{r7, pc}

0801b53c <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 801b53c:	b580      	push	{r7, lr}
 801b53e:	b082      	sub	sp, #8
 801b540:	af00      	add	r7, sp, #0
 801b542:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	681b      	ldr	r3, [r3, #0]
 801b548:	33d0      	adds	r3, #208	; 0xd0
 801b54a:	681b      	ldr	r3, [r3, #0]
 801b54c:	6878      	ldr	r0, [r7, #4]
 801b54e:	4798      	blx	r3
 801b550:	4603      	mov	r3, r0
 801b552:	2b00      	cmp	r3, #0
 801b554:	d006      	beq.n	801b564 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d001      	beq.n	801b564 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801b560:	2301      	movs	r3, #1
 801b562:	e000      	b.n	801b566 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 801b564:	2300      	movs	r3, #0
}
 801b566:	4618      	mov	r0, r3
 801b568:	3708      	adds	r7, #8
 801b56a:	46bd      	mov	sp, r7
 801b56c:	bd80      	pop	{r7, pc}

0801b56e <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 801b56e:	b580      	push	{r7, lr}
 801b570:	b082      	sub	sp, #8
 801b572:	af00      	add	r7, sp, #0
 801b574:	6078      	str	r0, [r7, #4]
 801b576:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b57c:	1c5a      	adds	r2, r3, #1
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	691b      	ldr	r3, [r3, #16]
 801b586:	2b00      	cmp	r3, #0
 801b588:	d00c      	beq.n	801b5a4 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801b58e:	683a      	ldr	r2, [r7, #0]
 801b590:	429a      	cmp	r2, r3
 801b592:	d304      	bcc.n	801b59e <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	695b      	ldr	r3, [r3, #20]
 801b598:	683a      	ldr	r2, [r7, #0]
 801b59a:	429a      	cmp	r2, r3
 801b59c:	d902      	bls.n	801b5a4 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	2201      	movs	r2, #1
 801b5a2:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	681b      	ldr	r3, [r3, #0]
 801b5a8:	33ec      	adds	r3, #236	; 0xec
 801b5aa:	681b      	ldr	r3, [r3, #0]
 801b5ac:	6878      	ldr	r0, [r7, #4]
 801b5ae:	4798      	blx	r3
}
 801b5b0:	bf00      	nop
 801b5b2:	3708      	adds	r7, #8
 801b5b4:	46bd      	mov	sp, r7
 801b5b6:	bd80      	pop	{r7, pc}

0801b5b8 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 801b5b8:	b480      	push	{r7}
 801b5ba:	b083      	sub	sp, #12
 801b5bc:	af00      	add	r7, sp, #0
 801b5be:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	2201      	movs	r2, #1
 801b5c4:	735a      	strb	r2, [r3, #13]
}
 801b5c6:	bf00      	nop
 801b5c8:	370c      	adds	r7, #12
 801b5ca:	46bd      	mov	sp, r7
 801b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5d0:	4770      	bx	lr

0801b5d2 <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 801b5d2:	b480      	push	{r7}
 801b5d4:	b083      	sub	sp, #12
 801b5d6:	af00      	add	r7, sp, #0
 801b5d8:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	2201      	movs	r2, #1
 801b5de:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 801b5e2:	bf00      	nop
 801b5e4:	370c      	adds	r7, #12
 801b5e6:	46bd      	mov	sp, r7
 801b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ec:	4770      	bx	lr

0801b5ee <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 801b5ee:	b580      	push	{r7, lr}
 801b5f0:	b084      	sub	sp, #16
 801b5f2:	af00      	add	r7, sp, #0
 801b5f4:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801b5fc:	f083 0301 	eor.w	r3, r3, #1
 801b600:	b2da      	uxtb	r2, r3
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	2200      	movs	r2, #0
 801b60c:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	69db      	ldr	r3, [r3, #28]
 801b612:	4618      	mov	r0, r3
 801b614:	f004 fb03 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 801b618:	60f8      	str	r0, [r7, #12]
 801b61a:	68fb      	ldr	r3, [r7, #12]
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d00d      	beq.n	801b63c <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 801b620:	68f9      	ldr	r1, [r7, #12]
 801b622:	6878      	ldr	r0, [r7, #4]
 801b624:	f000 fbf0 	bl	801be08 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b628:	4603      	mov	r3, r0
 801b62a:	2100      	movs	r1, #0
 801b62c:	4618      	mov	r0, r3
 801b62e:	f000 fc11 	bl	801be54 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 801b632:	68f8      	ldr	r0, [r7, #12]
 801b634:	f004 f9fc 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 801b638:	60f8      	str	r0, [r7, #12]
 801b63a:	e7ee      	b.n	801b61a <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	6a1b      	ldr	r3, [r3, #32]
 801b640:	4618      	mov	r0, r3
 801b642:	f004 faec 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 801b646:	60f8      	str	r0, [r7, #12]
 801b648:	68fb      	ldr	r3, [r7, #12]
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d00d      	beq.n	801b66a <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801b64e:	68f9      	ldr	r1, [r7, #12]
 801b650:	6878      	ldr	r0, [r7, #4]
 801b652:	f000 fbd9 	bl	801be08 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b656:	4603      	mov	r3, r0
 801b658:	2100      	movs	r1, #0
 801b65a:	4618      	mov	r0, r3
 801b65c:	f000 fbfa 	bl	801be54 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 801b660:	68f8      	ldr	r0, [r7, #12]
 801b662:	f004 f9e5 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 801b666:	60f8      	str	r0, [r7, #12]
 801b668:	e7ee      	b.n	801b648 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 801b66a:	bf00      	nop
 801b66c:	3710      	adds	r7, #16
 801b66e:	46bd      	mov	sp, r7
 801b670:	bd80      	pop	{r7, pc}

0801b672 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 801b672:	b590      	push	{r4, r7, lr}
 801b674:	b087      	sub	sp, #28
 801b676:	af00      	add	r7, sp, #0
 801b678:	6078      	str	r0, [r7, #4]
 801b67a:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	69db      	ldr	r3, [r3, #28]
 801b680:	4618      	mov	r0, r3
 801b682:	f004 facc 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 801b686:	6178      	str	r0, [r7, #20]
 801b688:	697b      	ldr	r3, [r7, #20]
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d022      	beq.n	801b6d4 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801b68e:	f107 030c 	add.w	r3, r7, #12
 801b692:	6979      	ldr	r1, [r7, #20]
 801b694:	4618      	mov	r0, r3
 801b696:	f004 fa06 	bl	801faa6 <_ZNK22MockNamedValueListNode7getNameEv>
 801b69a:	f107 030c 	add.w	r3, r7, #12
 801b69e:	6839      	ldr	r1, [r7, #0]
 801b6a0:	4618      	mov	r0, r3
 801b6a2:	f7f2 f9b0 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801b6a6:	4603      	mov	r3, r0
 801b6a8:	461c      	mov	r4, r3
 801b6aa:	f107 030c 	add.w	r3, r7, #12
 801b6ae:	4618      	mov	r0, r3
 801b6b0:	f7f2 f99d 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801b6b4:	2c00      	cmp	r4, #0
 801b6b6:	d008      	beq.n	801b6ca <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801b6b8:	6979      	ldr	r1, [r7, #20]
 801b6ba:	6878      	ldr	r0, [r7, #4]
 801b6bc:	f000 fba4 	bl	801be08 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b6c0:	4603      	mov	r3, r0
 801b6c2:	2101      	movs	r1, #1
 801b6c4:	4618      	mov	r0, r3
 801b6c6:	f000 fbc5 	bl	801be54 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801b6ca:	6978      	ldr	r0, [r7, #20]
 801b6cc:	f004 f9b0 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 801b6d0:	6178      	str	r0, [r7, #20]
 801b6d2:	e7d9      	b.n	801b688 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801b6d4:	bf00      	nop
 801b6d6:	371c      	adds	r7, #28
 801b6d8:	46bd      	mov	sp, r7
 801b6da:	bd90      	pop	{r4, r7, pc}

0801b6dc <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 801b6dc:	b590      	push	{r4, r7, lr}
 801b6de:	b087      	sub	sp, #28
 801b6e0:	af00      	add	r7, sp, #0
 801b6e2:	6078      	str	r0, [r7, #4]
 801b6e4:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	6a1b      	ldr	r3, [r3, #32]
 801b6ea:	4618      	mov	r0, r3
 801b6ec:	f004 fa97 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 801b6f0:	6178      	str	r0, [r7, #20]
 801b6f2:	697b      	ldr	r3, [r7, #20]
 801b6f4:	2b00      	cmp	r3, #0
 801b6f6:	d022      	beq.n	801b73e <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801b6f8:	f107 030c 	add.w	r3, r7, #12
 801b6fc:	6979      	ldr	r1, [r7, #20]
 801b6fe:	4618      	mov	r0, r3
 801b700:	f004 f9d1 	bl	801faa6 <_ZNK22MockNamedValueListNode7getNameEv>
 801b704:	f107 030c 	add.w	r3, r7, #12
 801b708:	6839      	ldr	r1, [r7, #0]
 801b70a:	4618      	mov	r0, r3
 801b70c:	f7f2 f97b 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801b710:	4603      	mov	r3, r0
 801b712:	461c      	mov	r4, r3
 801b714:	f107 030c 	add.w	r3, r7, #12
 801b718:	4618      	mov	r0, r3
 801b71a:	f7f2 f968 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801b71e:	2c00      	cmp	r4, #0
 801b720:	d008      	beq.n	801b734 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801b722:	6979      	ldr	r1, [r7, #20]
 801b724:	6878      	ldr	r0, [r7, #4]
 801b726:	f000 fb6f 	bl	801be08 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b72a:	4603      	mov	r3, r0
 801b72c:	2101      	movs	r1, #1
 801b72e:	4618      	mov	r0, r3
 801b730:	f000 fb90 	bl	801be54 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801b734:	6978      	ldr	r0, [r7, #20]
 801b736:	f004 f97b 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 801b73a:	6178      	str	r0, [r7, #20]
 801b73c:	e7d9      	b.n	801b6f2 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801b73e:	bf00      	nop
 801b740:	371c      	adds	r7, #28
 801b742:	46bd      	mov	sp, r7
 801b744:	bd90      	pop	{r4, r7, pc}
	...

0801b748 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 801b748:	b580      	push	{r7, lr}
 801b74a:	b086      	sub	sp, #24
 801b74c:	af00      	add	r7, sp, #0
 801b74e:	60f8      	str	r0, [r7, #12]
 801b750:	60b9      	str	r1, [r7, #8]
 801b752:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801b754:	68bb      	ldr	r3, [r7, #8]
 801b756:	69db      	ldr	r3, [r3, #28]
 801b758:	6879      	ldr	r1, [r7, #4]
 801b75a:	4618      	mov	r0, r3
 801b75c:	f004 fa30 	bl	801fbc0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b760:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 801b762:	697b      	ldr	r3, [r7, #20]
 801b764:	2b00      	cmp	r3, #0
 801b766:	d005      	beq.n	801b774 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 801b768:	68fb      	ldr	r3, [r7, #12]
 801b76a:	6979      	ldr	r1, [r7, #20]
 801b76c:	4618      	mov	r0, r3
 801b76e:	f7ff fa0b 	bl	801ab88 <_Z10StringFromRK14MockNamedValue>
 801b772:	e003      	b.n	801b77c <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 801b774:	4903      	ldr	r1, [pc, #12]	; (801b784 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 801b776:	68f8      	ldr	r0, [r7, #12]
 801b778:	f7f1 fd81 	bl	800d27e <_ZN12SimpleStringC1EPKc>
}
 801b77c:	68f8      	ldr	r0, [r7, #12]
 801b77e:	3718      	adds	r7, #24
 801b780:	46bd      	mov	sp, r7
 801b782:	bd80      	pop	{r7, pc}
 801b784:	08026804 	.word	0x08026804

0801b788 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 801b788:	b590      	push	{r4, r7, lr}
 801b78a:	b087      	sub	sp, #28
 801b78c:	af00      	add	r7, sp, #0
 801b78e:	6078      	str	r0, [r7, #4]
 801b790:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	69dc      	ldr	r4, [r3, #28]
 801b796:	683b      	ldr	r3, [r7, #0]
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	335c      	adds	r3, #92	; 0x5c
 801b79c:	681b      	ldr	r3, [r3, #0]
 801b79e:	f107 020c 	add.w	r2, r7, #12
 801b7a2:	6839      	ldr	r1, [r7, #0]
 801b7a4:	4610      	mov	r0, r2
 801b7a6:	4798      	blx	r3
 801b7a8:	f107 030c 	add.w	r3, r7, #12
 801b7ac:	4619      	mov	r1, r3
 801b7ae:	4620      	mov	r0, r4
 801b7b0:	f004 fa06 	bl	801fbc0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b7b4:	6178      	str	r0, [r7, #20]
 801b7b6:	f107 030c 	add.w	r3, r7, #12
 801b7ba:	4618      	mov	r0, r3
 801b7bc:	f7f2 f917 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 801b7c0:	697b      	ldr	r3, [r7, #20]
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d00d      	beq.n	801b7e2 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 801b7c6:	697b      	ldr	r3, [r7, #20]
 801b7c8:	681b      	ldr	r3, [r3, #0]
 801b7ca:	3350      	adds	r3, #80	; 0x50
 801b7cc:	681b      	ldr	r3, [r3, #0]
 801b7ce:	6839      	ldr	r1, [r7, #0]
 801b7d0:	6978      	ldr	r0, [r7, #20]
 801b7d2:	4798      	blx	r3
 801b7d4:	4603      	mov	r3, r0
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	bf14      	ite	ne
 801b7da:	2301      	movne	r3, #1
 801b7dc:	2300      	moveq	r3, #0
 801b7de:	b2db      	uxtb	r3, r3
 801b7e0:	e006      	b.n	801b7f0 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	7b1b      	ldrb	r3, [r3, #12]
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	bf14      	ite	ne
 801b7ea:	2301      	movne	r3, #1
 801b7ec:	2300      	moveq	r3, #0
 801b7ee:	b2db      	uxtb	r3, r3
}
 801b7f0:	4618      	mov	r0, r3
 801b7f2:	371c      	adds	r7, #28
 801b7f4:	46bd      	mov	sp, r7
 801b7f6:	bd90      	pop	{r4, r7, pc}

0801b7f8 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 801b7f8:	b590      	push	{r4, r7, lr}
 801b7fa:	b087      	sub	sp, #28
 801b7fc:	af00      	add	r7, sp, #0
 801b7fe:	6078      	str	r0, [r7, #4]
 801b800:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	6a1c      	ldr	r4, [r3, #32]
 801b806:	683b      	ldr	r3, [r7, #0]
 801b808:	681b      	ldr	r3, [r3, #0]
 801b80a:	335c      	adds	r3, #92	; 0x5c
 801b80c:	681b      	ldr	r3, [r3, #0]
 801b80e:	f107 020c 	add.w	r2, r7, #12
 801b812:	6839      	ldr	r1, [r7, #0]
 801b814:	4610      	mov	r0, r2
 801b816:	4798      	blx	r3
 801b818:	f107 030c 	add.w	r3, r7, #12
 801b81c:	4619      	mov	r1, r3
 801b81e:	4620      	mov	r0, r4
 801b820:	f004 f9ce 	bl	801fbc0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b824:	6178      	str	r0, [r7, #20]
 801b826:	f107 030c 	add.w	r3, r7, #12
 801b82a:	4618      	mov	r0, r3
 801b82c:	f7f2 f8df 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 801b830:	697b      	ldr	r3, [r7, #20]
 801b832:	2b00      	cmp	r3, #0
 801b834:	d00d      	beq.n	801b852 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 801b836:	697b      	ldr	r3, [r7, #20]
 801b838:	681b      	ldr	r3, [r3, #0]
 801b83a:	3354      	adds	r3, #84	; 0x54
 801b83c:	681b      	ldr	r3, [r3, #0]
 801b83e:	6839      	ldr	r1, [r7, #0]
 801b840:	6978      	ldr	r0, [r7, #20]
 801b842:	4798      	blx	r3
 801b844:	4603      	mov	r3, r0
 801b846:	2b00      	cmp	r3, #0
 801b848:	bf14      	ite	ne
 801b84a:	2301      	movne	r3, #1
 801b84c:	2300      	moveq	r3, #0
 801b84e:	b2db      	uxtb	r3, r3
 801b850:	e006      	b.n	801b860 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	7b1b      	ldrb	r3, [r3, #12]
 801b856:	2b00      	cmp	r3, #0
 801b858:	bf14      	ite	ne
 801b85a:	2301      	movne	r3, #1
 801b85c:	2300      	moveq	r3, #0
 801b85e:	b2db      	uxtb	r3, r3
}
 801b860:	4618      	mov	r0, r3
 801b862:	371c      	adds	r7, #28
 801b864:	46bd      	mov	sp, r7
 801b866:	bd90      	pop	{r4, r7, pc}

0801b868 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 801b868:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b86a:	b0a1      	sub	sp, #132	; 0x84
 801b86c:	af02      	add	r7, sp, #8
 801b86e:	6078      	str	r0, [r7, #4]
 801b870:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801b872:	49bc      	ldr	r1, [pc, #752]	; (801bb64 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801b874:	6878      	ldr	r0, [r7, #4]
 801b876:	f7f1 fd02 	bl	800d27e <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 801b87a:	683b      	ldr	r3, [r7, #0]
 801b87c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801b880:	2b00      	cmp	r3, #0
 801b882:	d012      	beq.n	801b8aa <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 801b884:	683b      	ldr	r3, [r7, #0]
 801b886:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801b888:	f107 030c 	add.w	r3, r7, #12
 801b88c:	49b6      	ldr	r1, [pc, #728]	; (801bb68 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 801b88e:	4618      	mov	r0, r3
 801b890:	f7f2 fdb4 	bl	800e3fc <_Z16StringFromFormatPKcz>
 801b894:	f107 030c 	add.w	r3, r7, #12
 801b898:	4619      	mov	r1, r3
 801b89a:	6878      	ldr	r0, [r7, #4]
 801b89c:	f7f1 fd5b 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801b8a0:	f107 030c 	add.w	r3, r7, #12
 801b8a4:	4618      	mov	r0, r3
 801b8a6:	f7f2 f8a2 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    str += getName();
 801b8aa:	f107 0314 	add.w	r3, r7, #20
 801b8ae:	6839      	ldr	r1, [r7, #0]
 801b8b0:	4618      	mov	r0, r3
 801b8b2:	f7ff f989 	bl	801abc8 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801b8b6:	f107 0314 	add.w	r3, r7, #20
 801b8ba:	4619      	mov	r1, r3
 801b8bc:	6878      	ldr	r0, [r7, #4]
 801b8be:	f7f2 f913 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801b8c2:	f107 0314 	add.w	r3, r7, #20
 801b8c6:	4618      	mov	r0, r3
 801b8c8:	f7f2 f891 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    str += " -> ";
 801b8cc:	49a7      	ldr	r1, [pc, #668]	; (801bb6c <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 801b8ce:	6878      	ldr	r0, [r7, #4]
 801b8d0:	f7f2 f91c 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 801b8d4:	683b      	ldr	r3, [r7, #0]
 801b8d6:	691b      	ldr	r3, [r3, #16]
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	d02d      	beq.n	801b938 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 801b8dc:	683b      	ldr	r3, [r7, #0]
 801b8de:	691a      	ldr	r2, [r3, #16]
 801b8e0:	683b      	ldr	r3, [r7, #0]
 801b8e2:	695b      	ldr	r3, [r3, #20]
 801b8e4:	429a      	cmp	r2, r3
 801b8e6:	d113      	bne.n	801b910 <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 801b8e8:	683b      	ldr	r3, [r7, #0]
 801b8ea:	691a      	ldr	r2, [r3, #16]
 801b8ec:	f107 031c 	add.w	r3, r7, #28
 801b8f0:	499f      	ldr	r1, [pc, #636]	; (801bb70 <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 801b8f2:	4618      	mov	r0, r3
 801b8f4:	f7f2 fd82 	bl	800e3fc <_Z16StringFromFormatPKcz>
 801b8f8:	f107 031c 	add.w	r3, r7, #28
 801b8fc:	4619      	mov	r1, r3
 801b8fe:	6878      	ldr	r0, [r7, #4]
 801b900:	f7f2 f8f2 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801b904:	f107 031c 	add.w	r3, r7, #28
 801b908:	4618      	mov	r0, r3
 801b90a:	f7f2 f870 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801b90e:	e013      	b.n	801b938 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 801b910:	683b      	ldr	r3, [r7, #0]
 801b912:	691a      	ldr	r2, [r3, #16]
 801b914:	683b      	ldr	r3, [r7, #0]
 801b916:	695b      	ldr	r3, [r3, #20]
 801b918:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801b91c:	4995      	ldr	r1, [pc, #596]	; (801bb74 <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 801b91e:	f7f2 fd6d 	bl	800e3fc <_Z16StringFromFormatPKcz>
 801b922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b926:	4619      	mov	r1, r3
 801b928:	6878      	ldr	r0, [r7, #4]
 801b92a:	f7f2 f8dd 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801b92e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b932:	4618      	mov	r0, r3
 801b934:	f7f2 f85b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 801b938:	683b      	ldr	r3, [r7, #0]
 801b93a:	69db      	ldr	r3, [r3, #28]
 801b93c:	4618      	mov	r0, r3
 801b93e:	f004 f96e 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 801b942:	4603      	mov	r3, r0
 801b944:	2b00      	cmp	r3, #0
 801b946:	d109      	bne.n	801b95c <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801b948:	683b      	ldr	r3, [r7, #0]
 801b94a:	6a1b      	ldr	r3, [r3, #32]
 801b94c:	4618      	mov	r0, r3
 801b94e:	f004 f966 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 801b952:	4603      	mov	r3, r0
 801b954:	2b00      	cmp	r3, #0
 801b956:	d101      	bne.n	801b95c <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801b958:	2301      	movs	r3, #1
 801b95a:	e000      	b.n	801b95e <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 801b95c:	2300      	movs	r3, #0
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d00b      	beq.n	801b97a <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 801b962:	683b      	ldr	r3, [r7, #0]
 801b964:	7b1b      	ldrb	r3, [r3, #12]
 801b966:	2b00      	cmp	r3, #0
 801b968:	d001      	beq.n	801b96e <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 801b96a:	4b83      	ldr	r3, [pc, #524]	; (801bb78 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 801b96c:	e000      	b.n	801b970 <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 801b96e:	4b83      	ldr	r3, [pc, #524]	; (801bb7c <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 801b970:	4619      	mov	r1, r3
 801b972:	6878      	ldr	r0, [r7, #4]
 801b974:	f7f2 f8ca 	bl	800db0c <_ZN12SimpleStringpLEPKc>
 801b978:	e0e3      	b.n	801bb42 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 801b97a:	683b      	ldr	r3, [r7, #0]
 801b97c:	69db      	ldr	r3, [r3, #28]
 801b97e:	4618      	mov	r0, r3
 801b980:	f004 f94d 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 801b984:	6778      	str	r0, [r7, #116]	; 0x74
 801b986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b988:	2b00      	cmp	r3, #0
 801b98a:	d069      	beq.n	801ba60 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 801b98c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b990:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b992:	4618      	mov	r0, r3
 801b994:	f004 f89a 	bl	801facc <_ZNK22MockNamedValueListNode7getTypeEv>
 801b998:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b99c:	4618      	mov	r0, r3
 801b99e:	f7f1 fff9 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801b9a2:	4605      	mov	r5, r0
 801b9a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b9a8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b9aa:	4618      	mov	r0, r3
 801b9ac:	f004 f87b 	bl	801faa6 <_ZNK22MockNamedValueListNode7getNameEv>
 801b9b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b9b4:	4618      	mov	r0, r3
 801b9b6:	f7f1 ffed 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801b9ba:	4606      	mov	r6, r0
 801b9bc:	683b      	ldr	r3, [r7, #0]
 801b9be:	681b      	ldr	r3, [r3, #0]
 801b9c0:	33a4      	adds	r3, #164	; 0xa4
 801b9c2:	681c      	ldr	r4, [r3, #0]
 801b9c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b9c8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b9ca:	4618      	mov	r0, r3
 801b9cc:	f004 f86b 	bl	801faa6 <_ZNK22MockNamedValueListNode7getNameEv>
 801b9d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b9d4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b9d8:	6839      	ldr	r1, [r7, #0]
 801b9da:	4618      	mov	r0, r3
 801b9dc:	47a0      	blx	r4
 801b9de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b9e2:	4618      	mov	r0, r3
 801b9e4:	f7f1 ffd6 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801b9e8:	4603      	mov	r3, r0
 801b9ea:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801b9ee:	9300      	str	r3, [sp, #0]
 801b9f0:	4633      	mov	r3, r6
 801b9f2:	462a      	mov	r2, r5
 801b9f4:	4962      	ldr	r1, [pc, #392]	; (801bb80 <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 801b9f6:	f7f2 fd01 	bl	800e3fc <_Z16StringFromFormatPKcz>
 801b9fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b9fe:	4619      	mov	r1, r3
 801ba00:	6878      	ldr	r0, [r7, #4]
 801ba02:	f7f2 f871 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801ba06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ba0a:	4618      	mov	r0, r3
 801ba0c:	f7f1 ffef 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ba10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801ba14:	4618      	mov	r0, r3
 801ba16:	f7f1 ffea 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ba1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ba1e:	4618      	mov	r0, r3
 801ba20:	f7f1 ffe5 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ba24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801ba28:	4618      	mov	r0, r3
 801ba2a:	f7f1 ffe0 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ba2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801ba32:	4618      	mov	r0, r3
 801ba34:	f7f1 ffdb 	bl	800d9ee <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801ba38:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801ba3a:	f003 fff9 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 801ba3e:	4603      	mov	r3, r0
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	bf14      	ite	ne
 801ba44:	2301      	movne	r3, #1
 801ba46:	2300      	moveq	r3, #0
 801ba48:	b2db      	uxtb	r3, r3
 801ba4a:	2b00      	cmp	r3, #0
 801ba4c:	d003      	beq.n	801ba56 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 801ba4e:	494d      	ldr	r1, [pc, #308]	; (801bb84 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801ba50:	6878      	ldr	r0, [r7, #4]
 801ba52:	f7f2 f85b 	bl	800db0c <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 801ba56:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801ba58:	f003 ffea 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 801ba5c:	6778      	str	r0, [r7, #116]	; 0x74
 801ba5e:	e792      	b.n	801b986 <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 801ba60:	683b      	ldr	r3, [r7, #0]
 801ba62:	69db      	ldr	r3, [r3, #28]
 801ba64:	4618      	mov	r0, r3
 801ba66:	f004 f8da 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 801ba6a:	4603      	mov	r3, r0
 801ba6c:	2b00      	cmp	r3, #0
 801ba6e:	d009      	beq.n	801ba84 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801ba70:	683b      	ldr	r3, [r7, #0]
 801ba72:	6a1b      	ldr	r3, [r3, #32]
 801ba74:	4618      	mov	r0, r3
 801ba76:	f004 f8d2 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 801ba7a:	4603      	mov	r3, r0
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d001      	beq.n	801ba84 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801ba80:	2301      	movs	r3, #1
 801ba82:	e000      	b.n	801ba86 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 801ba84:	2300      	movs	r3, #0
 801ba86:	2b00      	cmp	r3, #0
 801ba88:	d003      	beq.n	801ba92 <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 801ba8a:	493e      	ldr	r1, [pc, #248]	; (801bb84 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801ba8c:	6878      	ldr	r0, [r7, #4]
 801ba8e:	f7f2 f83d 	bl	800db0c <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 801ba92:	683b      	ldr	r3, [r7, #0]
 801ba94:	6a1b      	ldr	r3, [r3, #32]
 801ba96:	4618      	mov	r0, r3
 801ba98:	f004 f8c1 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 801ba9c:	6778      	str	r0, [r7, #116]	; 0x74
 801ba9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	d046      	beq.n	801bb32 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 801baa4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801baa8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801baaa:	4618      	mov	r0, r3
 801baac:	f004 f80e 	bl	801facc <_ZNK22MockNamedValueListNode7getTypeEv>
 801bab0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801bab4:	4618      	mov	r0, r3
 801bab6:	f7f1 ff6d 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801baba:	4604      	mov	r4, r0
 801babc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801bac0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801bac2:	4618      	mov	r0, r3
 801bac4:	f003 ffef 	bl	801faa6 <_ZNK22MockNamedValueListNode7getNameEv>
 801bac8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801bacc:	4618      	mov	r0, r3
 801bace:	f7f1 ff61 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801bad2:	4603      	mov	r3, r0
 801bad4:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801bad8:	4622      	mov	r2, r4
 801bada:	492b      	ldr	r1, [pc, #172]	; (801bb88 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 801badc:	f7f2 fc8e 	bl	800e3fc <_Z16StringFromFormatPKcz>
 801bae0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801bae4:	4619      	mov	r1, r3
 801bae6:	6878      	ldr	r0, [r7, #4]
 801bae8:	f7f1 fffe 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801baec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801baf0:	4618      	mov	r0, r3
 801baf2:	f7f1 ff7c 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801baf6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801bafa:	4618      	mov	r0, r3
 801bafc:	f7f1 ff77 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801bb00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801bb04:	4618      	mov	r0, r3
 801bb06:	f7f1 ff72 	bl	800d9ee <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801bb0a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801bb0c:	f003 ff90 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 801bb10:	4603      	mov	r3, r0
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	bf14      	ite	ne
 801bb16:	2301      	movne	r3, #1
 801bb18:	2300      	moveq	r3, #0
 801bb1a:	b2db      	uxtb	r3, r3
 801bb1c:	2b00      	cmp	r3, #0
 801bb1e:	d003      	beq.n	801bb28 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 801bb20:	4918      	ldr	r1, [pc, #96]	; (801bb84 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801bb22:	6878      	ldr	r0, [r7, #4]
 801bb24:	f7f1 fff2 	bl	800db0c <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 801bb28:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801bb2a:	f003 ff81 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 801bb2e:	6778      	str	r0, [r7, #116]	; 0x74
 801bb30:	e7b5      	b.n	801ba9e <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 801bb32:	683b      	ldr	r3, [r7, #0]
 801bb34:	7b1b      	ldrb	r3, [r3, #12]
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d003      	beq.n	801bb42 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 801bb3a:	4914      	ldr	r1, [pc, #80]	; (801bb8c <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 801bb3c:	6878      	ldr	r0, [r7, #4]
 801bb3e:	f7f1 ffe5 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801bb42:	683b      	ldr	r3, [r7, #0]
 801bb44:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801bb46:	683b      	ldr	r3, [r7, #0]
 801bb48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801bb4a:	2b01      	cmp	r3, #1
 801bb4c:	d101      	bne.n	801bb52 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 801bb4e:	4c05      	ldr	r4, [pc, #20]	; (801bb64 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801bb50:	e000      	b.n	801bb54 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 801bb52:	4c0f      	ldr	r4, [pc, #60]	; (801bb90 <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 801bb54:	683b      	ldr	r3, [r7, #0]
 801bb56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801bb58:	683a      	ldr	r2, [r7, #0]
 801bb5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801bb5c:	2a01      	cmp	r2, #1
 801bb5e:	d119      	bne.n	801bb94 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 801bb60:	4a00      	ldr	r2, [pc, #0]	; (801bb64 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801bb62:	e018      	b.n	801bb96 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 801bb64:	08026798 	.word	0x08026798
 801bb68:	0802680c 	.word	0x0802680c
 801bb6c:	08026824 	.word	0x08026824
 801bb70:	0802682c 	.word	0x0802682c
 801bb74:	0802684c 	.word	0x0802684c
 801bb78:	08026870 	.word	0x08026870
 801bb7c:	08026888 	.word	0x08026888
 801bb80:	08026898 	.word	0x08026898
 801bb84:	080268a4 	.word	0x080268a4
 801bb88:	080268a8 	.word	0x080268a8
 801bb8c:	080268b8 	.word	0x080268b8
 801bb90:	080268d8 	.word	0x080268d8
 801bb94:	4a0c      	ldr	r2, [pc, #48]	; (801bbc8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 801bb96:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801bb9a:	9201      	str	r2, [sp, #4]
 801bb9c:	9300      	str	r3, [sp, #0]
 801bb9e:	4623      	mov	r3, r4
 801bba0:	460a      	mov	r2, r1
 801bba2:	490a      	ldr	r1, [pc, #40]	; (801bbcc <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 801bba4:	f7f2 fc2a 	bl	800e3fc <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801bba8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801bbac:	4619      	mov	r1, r3
 801bbae:	6878      	ldr	r0, [r7, #4]
 801bbb0:	f7f1 ff9a 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801bbb4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801bbb8:	4618      	mov	r0, r3
 801bbba:	f7f1 ff18 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    return str;
 801bbbe:	bf00      	nop
}
 801bbc0:	6878      	ldr	r0, [r7, #4]
 801bbc2:	377c      	adds	r7, #124	; 0x7c
 801bbc4:	46bd      	mov	sp, r7
 801bbc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bbc8:	080268d8 	.word	0x080268d8
 801bbcc:	080268dc 	.word	0x080268dc

0801bbd0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 801bbd0:	b590      	push	{r4, r7, lr}
 801bbd2:	b095      	sub	sp, #84	; 0x54
 801bbd4:	af00      	add	r7, sp, #0
 801bbd6:	6078      	str	r0, [r7, #4]
 801bbd8:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801bbda:	496c      	ldr	r1, [pc, #432]	; (801bd8c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801bbdc:	6878      	ldr	r0, [r7, #4]
 801bbde:	f7f1 fb4e 	bl	800d27e <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 801bbe2:	683b      	ldr	r3, [r7, #0]
 801bbe4:	69db      	ldr	r3, [r3, #28]
 801bbe6:	4618      	mov	r0, r3
 801bbe8:	f004 f819 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 801bbec:	64f8      	str	r0, [r7, #76]	; 0x4c
 801bbee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	d05e      	beq.n	801bcb2 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 801bbf4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801bbf6:	6838      	ldr	r0, [r7, #0]
 801bbf8:	f000 f906 	bl	801be08 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801bbfc:	4603      	mov	r3, r0
 801bbfe:	4618      	mov	r0, r3
 801bc00:	f000 f938 	bl	801be74 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801bc04:	4603      	mov	r3, r0
 801bc06:	f083 0301 	eor.w	r3, r3, #1
 801bc0a:	b2db      	uxtb	r3, r3
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d04b      	beq.n	801bca8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 801bc10:	f107 030c 	add.w	r3, r7, #12
 801bc14:	495d      	ldr	r1, [pc, #372]	; (801bd8c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801bc16:	4618      	mov	r0, r3
 801bc18:	f7f1 fb31 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801bc1c:	f107 030c 	add.w	r3, r7, #12
 801bc20:	4619      	mov	r1, r3
 801bc22:	6878      	ldr	r0, [r7, #4]
 801bc24:	f7f1 ff34 	bl	800da90 <_ZneRK12SimpleStringS1_>
 801bc28:	4603      	mov	r3, r0
 801bc2a:	461c      	mov	r4, r3
 801bc2c:	f107 030c 	add.w	r3, r7, #12
 801bc30:	4618      	mov	r0, r3
 801bc32:	f7f1 fedc 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801bc36:	2c00      	cmp	r4, #0
 801bc38:	d003      	beq.n	801bc42 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 801bc3a:	4955      	ldr	r1, [pc, #340]	; (801bd90 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801bc3c:	6878      	ldr	r0, [r7, #4]
 801bc3e:	f7f1 ff65 	bl	800db0c <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801bc42:	f107 031c 	add.w	r3, r7, #28
 801bc46:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801bc48:	4618      	mov	r0, r3
 801bc4a:	f003 ff3f 	bl	801facc <_ZNK22MockNamedValueListNode7getTypeEv>
 801bc4e:	f107 031c 	add.w	r3, r7, #28
 801bc52:	4618      	mov	r0, r3
 801bc54:	f7f1 fe9e 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801bc58:	4604      	mov	r4, r0
 801bc5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bc5e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801bc60:	4618      	mov	r0, r3
 801bc62:	f003 ff20 	bl	801faa6 <_ZNK22MockNamedValueListNode7getNameEv>
 801bc66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bc6a:	4618      	mov	r0, r3
 801bc6c:	f7f1 fe92 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801bc70:	4603      	mov	r3, r0
 801bc72:	f107 0014 	add.w	r0, r7, #20
 801bc76:	4622      	mov	r2, r4
 801bc78:	4946      	ldr	r1, [pc, #280]	; (801bd94 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801bc7a:	f7f2 fbbf 	bl	800e3fc <_Z16StringFromFormatPKcz>
 801bc7e:	f107 0314 	add.w	r3, r7, #20
 801bc82:	4619      	mov	r1, r3
 801bc84:	6878      	ldr	r0, [r7, #4]
 801bc86:	f7f1 ff2f 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801bc8a:	f107 0314 	add.w	r3, r7, #20
 801bc8e:	4618      	mov	r0, r3
 801bc90:	f7f1 fead 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801bc94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bc98:	4618      	mov	r0, r3
 801bc9a:	f7f1 fea8 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801bc9e:	f107 031c 	add.w	r3, r7, #28
 801bca2:	4618      	mov	r0, r3
 801bca4:	f7f1 fea3 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 801bca8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801bcaa:	f003 fec1 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 801bcae:	64f8      	str	r0, [r7, #76]	; 0x4c
 801bcb0:	e79d      	b.n	801bbee <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801bcb2:	683b      	ldr	r3, [r7, #0]
 801bcb4:	6a1b      	ldr	r3, [r3, #32]
 801bcb6:	4618      	mov	r0, r3
 801bcb8:	f003 ffb1 	bl	801fc1e <_ZN18MockNamedValueList5beginEv>
 801bcbc:	64f8      	str	r0, [r7, #76]	; 0x4c
 801bcbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	d05e      	beq.n	801bd82 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 801bcc4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801bcc6:	6838      	ldr	r0, [r7, #0]
 801bcc8:	f000 f89e 	bl	801be08 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801bccc:	4603      	mov	r3, r0
 801bcce:	4618      	mov	r0, r3
 801bcd0:	f000 f8d0 	bl	801be74 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801bcd4:	4603      	mov	r3, r0
 801bcd6:	f083 0301 	eor.w	r3, r3, #1
 801bcda:	b2db      	uxtb	r3, r3
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d04b      	beq.n	801bd78 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 801bce0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bce4:	4929      	ldr	r1, [pc, #164]	; (801bd8c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801bce6:	4618      	mov	r0, r3
 801bce8:	f7f1 fac9 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801bcec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bcf0:	4619      	mov	r1, r3
 801bcf2:	6878      	ldr	r0, [r7, #4]
 801bcf4:	f7f1 fecc 	bl	800da90 <_ZneRK12SimpleStringS1_>
 801bcf8:	4603      	mov	r3, r0
 801bcfa:	461c      	mov	r4, r3
 801bcfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bd00:	4618      	mov	r0, r3
 801bd02:	f7f1 fe74 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801bd06:	2c00      	cmp	r4, #0
 801bd08:	d003      	beq.n	801bd12 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 801bd0a:	4921      	ldr	r1, [pc, #132]	; (801bd90 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801bd0c:	6878      	ldr	r0, [r7, #4]
 801bd0e:	f7f1 fefd 	bl	800db0c <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801bd12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801bd16:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801bd18:	4618      	mov	r0, r3
 801bd1a:	f003 fed7 	bl	801facc <_ZNK22MockNamedValueListNode7getTypeEv>
 801bd1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801bd22:	4618      	mov	r0, r3
 801bd24:	f7f1 fe36 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801bd28:	4604      	mov	r4, r0
 801bd2a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801bd2e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801bd30:	4618      	mov	r0, r3
 801bd32:	f003 feb8 	bl	801faa6 <_ZNK22MockNamedValueListNode7getNameEv>
 801bd36:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801bd3a:	4618      	mov	r0, r3
 801bd3c:	f7f1 fe2a 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801bd40:	4603      	mov	r3, r0
 801bd42:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801bd46:	4622      	mov	r2, r4
 801bd48:	4912      	ldr	r1, [pc, #72]	; (801bd94 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801bd4a:	f7f2 fb57 	bl	800e3fc <_Z16StringFromFormatPKcz>
 801bd4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801bd52:	4619      	mov	r1, r3
 801bd54:	6878      	ldr	r0, [r7, #4]
 801bd56:	f7f1 fec7 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801bd5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801bd5e:	4618      	mov	r0, r3
 801bd60:	f7f1 fe45 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801bd64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801bd68:	4618      	mov	r0, r3
 801bd6a:	f7f1 fe40 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801bd6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801bd72:	4618      	mov	r0, r3
 801bd74:	f7f1 fe3b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801bd78:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801bd7a:	f003 fe59 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 801bd7e:	64f8      	str	r0, [r7, #76]	; 0x4c
 801bd80:	e79d      	b.n	801bcbe <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 801bd82:	bf00      	nop
}
 801bd84:	6878      	ldr	r0, [r7, #4]
 801bd86:	3754      	adds	r7, #84	; 0x54
 801bd88:	46bd      	mov	sp, r7
 801bd8a:	bd90      	pop	{r4, r7, pc}
 801bd8c:	08026798 	.word	0x08026798
 801bd90:	080268a4 	.word	0x080268a4
 801bd94:	08026904 	.word	0x08026904

0801bd98 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 801bd98:	b590      	push	{r4, r7, lr}
 801bd9a:	b085      	sub	sp, #20
 801bd9c:	af00      	add	r7, sp, #0
 801bd9e:	6078      	str	r0, [r7, #4]
 801bda0:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 801bda2:	f107 0308 	add.w	r3, r7, #8
 801bda6:	6879      	ldr	r1, [r7, #4]
 801bda8:	4618      	mov	r0, r3
 801bdaa:	f7fe ff0d 	bl	801abc8 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801bdae:	f107 0308 	add.w	r3, r7, #8
 801bdb2:	4619      	mov	r1, r3
 801bdb4:	6838      	ldr	r0, [r7, #0]
 801bdb6:	f7f1 fe26 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801bdba:	4603      	mov	r3, r0
 801bdbc:	461c      	mov	r4, r3
 801bdbe:	f107 0308 	add.w	r3, r7, #8
 801bdc2:	4618      	mov	r0, r3
 801bdc4:	f7f1 fe13 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801bdc8:	4623      	mov	r3, r4
}
 801bdca:	4618      	mov	r0, r3
 801bdcc:	3714      	adds	r7, #20
 801bdce:	46bd      	mov	sp, r7
 801bdd0:	bd90      	pop	{r4, r7, pc}

0801bdd2 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 801bdd2:	b480      	push	{r7}
 801bdd4:	b083      	sub	sp, #12
 801bdd6:	af00      	add	r7, sp, #0
 801bdd8:	6078      	str	r0, [r7, #4]
 801bdda:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801bde2:	f083 0301 	eor.w	r3, r3, #1
 801bde6:	b2db      	uxtb	r3, r3
 801bde8:	2b00      	cmp	r3, #0
 801bdea:	d104      	bne.n	801bdf6 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bdf0:	683a      	ldr	r2, [r7, #0]
 801bdf2:	429a      	cmp	r2, r3
 801bdf4:	d101      	bne.n	801bdfa <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 801bdf6:	2301      	movs	r3, #1
 801bdf8:	e000      	b.n	801bdfc <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 801bdfa:	2300      	movs	r3, #0
}
 801bdfc:	4618      	mov	r0, r3
 801bdfe:	370c      	adds	r7, #12
 801be00:	46bd      	mov	sp, r7
 801be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be06:	4770      	bx	lr

0801be08 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 801be08:	b580      	push	{r7, lr}
 801be0a:	b082      	sub	sp, #8
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	6078      	str	r0, [r7, #4]
 801be10:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 801be12:	6838      	ldr	r0, [r7, #0]
 801be14:	f003 fe18 	bl	801fa48 <_ZN22MockNamedValueListNode4itemEv>
 801be18:	4603      	mov	r3, r0
}
 801be1a:	4618      	mov	r0, r3
 801be1c:	3708      	adds	r7, #8
 801be1e:	46bd      	mov	sp, r7
 801be20:	bd80      	pop	{r7, pc}
	...

0801be24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 801be24:	b580      	push	{r7, lr}
 801be26:	b082      	sub	sp, #8
 801be28:	af00      	add	r7, sp, #0
 801be2a:	6078      	str	r0, [r7, #4]
 801be2c:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	6839      	ldr	r1, [r7, #0]
 801be32:	4618      	mov	r0, r3
 801be34:	f001 ff48 	bl	801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>
 801be38:	4a05      	ldr	r2, [pc, #20]	; (801be50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	601a      	str	r2, [r3, #0]
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	2200      	movs	r2, #0
 801be42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	4618      	mov	r0, r3
 801be4a:	3708      	adds	r7, #8
 801be4c:	46bd      	mov	sp, r7
 801be4e:	bd80      	pop	{r7, pc}
 801be50:	080299b0 	.word	0x080299b0

0801be54 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 801be54:	b480      	push	{r7}
 801be56:	b083      	sub	sp, #12
 801be58:	af00      	add	r7, sp, #0
 801be5a:	6078      	str	r0, [r7, #4]
 801be5c:	460b      	mov	r3, r1
 801be5e:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	78fa      	ldrb	r2, [r7, #3]
 801be64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 801be68:	bf00      	nop
 801be6a:	370c      	adds	r7, #12
 801be6c:	46bd      	mov	sp, r7
 801be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be72:	4770      	bx	lr

0801be74 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 801be74:	b480      	push	{r7}
 801be76:	b083      	sub	sp, #12
 801be78:	af00      	add	r7, sp, #0
 801be7a:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801be82:	4618      	mov	r0, r3
 801be84:	370c      	adds	r7, #12
 801be86:	46bd      	mov	sp, r7
 801be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be8c:	4770      	bx	lr
	...

0801be90 <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 801be90:	b580      	push	{r7, lr}
 801be92:	b082      	sub	sp, #8
 801be94:	af00      	add	r7, sp, #0
 801be96:	6078      	str	r0, [r7, #4]
 801be98:	460b      	mov	r3, r1
 801be9a:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	3328      	adds	r3, #40	; 0x28
 801bea0:	4907      	ldr	r1, [pc, #28]	; (801bec0 <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 801bea2:	4618      	mov	r0, r3
 801bea4:	f002 f9b4 	bl	801e210 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	3328      	adds	r3, #40	; 0x28
 801beac:	78fa      	ldrb	r2, [r7, #3]
 801beae:	4611      	mov	r1, r2
 801beb0:	4618      	mov	r0, r3
 801beb2:	f001 ff5b 	bl	801dd6c <_ZN14MockNamedValue8setValueEb>
    return *this;
 801beb6:	687b      	ldr	r3, [r7, #4]
}
 801beb8:	4618      	mov	r0, r3
 801beba:	3708      	adds	r7, #8
 801bebc:	46bd      	mov	sp, r7
 801bebe:	bd80      	pop	{r7, pc}
 801bec0:	0802690c 	.word	0x0802690c

0801bec4 <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 801bec4:	b580      	push	{r7, lr}
 801bec6:	b082      	sub	sp, #8
 801bec8:	af00      	add	r7, sp, #0
 801beca:	6078      	str	r0, [r7, #4]
 801becc:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801bece:	687b      	ldr	r3, [r7, #4]
 801bed0:	3328      	adds	r3, #40	; 0x28
 801bed2:	4907      	ldr	r1, [pc, #28]	; (801bef0 <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 801bed4:	4618      	mov	r0, r3
 801bed6:	f002 f99b 	bl	801e210 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	3328      	adds	r3, #40	; 0x28
 801bede:	6839      	ldr	r1, [r7, #0]
 801bee0:	4618      	mov	r0, r3
 801bee2:	f001 ff67 	bl	801ddb4 <_ZN14MockNamedValue8setValueEj>
    return *this;
 801bee6:	687b      	ldr	r3, [r7, #4]
}
 801bee8:	4618      	mov	r0, r3
 801beea:	3708      	adds	r7, #8
 801beec:	46bd      	mov	sp, r7
 801beee:	bd80      	pop	{r7, pc}
 801bef0:	0802690c 	.word	0x0802690c

0801bef4 <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 801bef4:	b580      	push	{r7, lr}
 801bef6:	b082      	sub	sp, #8
 801bef8:	af00      	add	r7, sp, #0
 801befa:	6078      	str	r0, [r7, #4]
 801befc:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	3328      	adds	r3, #40	; 0x28
 801bf02:	4907      	ldr	r1, [pc, #28]	; (801bf20 <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 801bf04:	4618      	mov	r0, r3
 801bf06:	f002 f983 	bl	801e210 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	3328      	adds	r3, #40	; 0x28
 801bf0e:	6839      	ldr	r1, [r7, #0]
 801bf10:	4618      	mov	r0, r3
 801bf12:	f001 ff71 	bl	801ddf8 <_ZN14MockNamedValue8setValueEi>
    return *this;
 801bf16:	687b      	ldr	r3, [r7, #4]
}
 801bf18:	4618      	mov	r0, r3
 801bf1a:	3708      	adds	r7, #8
 801bf1c:	46bd      	mov	sp, r7
 801bf1e:	bd80      	pop	{r7, pc}
 801bf20:	0802690c 	.word	0x0802690c

0801bf24 <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 801bf24:	b580      	push	{r7, lr}
 801bf26:	b082      	sub	sp, #8
 801bf28:	af00      	add	r7, sp, #0
 801bf2a:	6078      	str	r0, [r7, #4]
 801bf2c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	3328      	adds	r3, #40	; 0x28
 801bf32:	4907      	ldr	r1, [pc, #28]	; (801bf50 <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 801bf34:	4618      	mov	r0, r3
 801bf36:	f002 f96b 	bl	801e210 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	3328      	adds	r3, #40	; 0x28
 801bf3e:	6839      	ldr	r1, [r7, #0]
 801bf40:	4618      	mov	r0, r3
 801bf42:	f001 ff7b 	bl	801de3c <_ZN14MockNamedValue8setValueEl>
    return *this;
 801bf46:	687b      	ldr	r3, [r7, #4]
}
 801bf48:	4618      	mov	r0, r3
 801bf4a:	3708      	adds	r7, #8
 801bf4c:	46bd      	mov	sp, r7
 801bf4e:	bd80      	pop	{r7, pc}
 801bf50:	0802690c 	.word	0x0802690c

0801bf54 <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 801bf54:	b580      	push	{r7, lr}
 801bf56:	b082      	sub	sp, #8
 801bf58:	af00      	add	r7, sp, #0
 801bf5a:	6078      	str	r0, [r7, #4]
 801bf5c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	3328      	adds	r3, #40	; 0x28
 801bf62:	4907      	ldr	r1, [pc, #28]	; (801bf80 <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 801bf64:	4618      	mov	r0, r3
 801bf66:	f002 f953 	bl	801e210 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bf6a:	687b      	ldr	r3, [r7, #4]
 801bf6c:	3328      	adds	r3, #40	; 0x28
 801bf6e:	6839      	ldr	r1, [r7, #0]
 801bf70:	4618      	mov	r0, r3
 801bf72:	f001 ff85 	bl	801de80 <_ZN14MockNamedValue8setValueEm>
    return *this;
 801bf76:	687b      	ldr	r3, [r7, #4]
}
 801bf78:	4618      	mov	r0, r3
 801bf7a:	3708      	adds	r7, #8
 801bf7c:	46bd      	mov	sp, r7
 801bf7e:	bd80      	pop	{r7, pc}
 801bf80:	0802690c 	.word	0x0802690c

0801bf84 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 801bf84:	b5b0      	push	{r4, r5, r7, lr}
 801bf86:	b086      	sub	sp, #24
 801bf88:	af02      	add	r7, sp, #8
 801bf8a:	60f8      	str	r0, [r7, #12]
 801bf8c:	1d3b      	adds	r3, r7, #4
 801bf8e:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801bf92:	f7f8 fd57 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801bf96:	4604      	mov	r4, r0
 801bf98:	6823      	ldr	r3, [r4, #0]
 801bf9a:	3368      	adds	r3, #104	; 0x68
 801bf9c:	681d      	ldr	r5, [r3, #0]
 801bf9e:	f7f8 fd61 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bfa2:	4603      	mov	r3, r0
 801bfa4:	9300      	str	r3, [sp, #0]
 801bfa6:	f240 2319 	movw	r3, #537	; 0x219
 801bfaa:	4a04      	ldr	r2, [pc, #16]	; (801bfbc <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 801bfac:	4904      	ldr	r1, [pc, #16]	; (801bfc0 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 801bfae:	4620      	mov	r0, r4
 801bfb0:	47a8      	blx	r5
    return *this;
 801bfb2:	68fb      	ldr	r3, [r7, #12]
}
 801bfb4:	4618      	mov	r0, r3
 801bfb6:	3710      	adds	r7, #16
 801bfb8:	46bd      	mov	sp, r7
 801bfba:	bdb0      	pop	{r4, r5, r7, pc}
 801bfbc:	0802679c 	.word	0x0802679c
 801bfc0:	080267b8 	.word	0x080267b8

0801bfc4 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 801bfc4:	b5b0      	push	{r4, r5, r7, lr}
 801bfc6:	b086      	sub	sp, #24
 801bfc8:	af02      	add	r7, sp, #8
 801bfca:	60f8      	str	r0, [r7, #12]
 801bfcc:	1d3b      	adds	r3, r7, #4
 801bfce:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801bfd2:	f7f8 fd37 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801bfd6:	4604      	mov	r4, r0
 801bfd8:	6823      	ldr	r3, [r4, #0]
 801bfda:	3368      	adds	r3, #104	; 0x68
 801bfdc:	681d      	ldr	r5, [r3, #0]
 801bfde:	f7f8 fd41 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bfe2:	4603      	mov	r3, r0
 801bfe4:	9300      	str	r3, [sp, #0]
 801bfe6:	f240 231f 	movw	r3, #543	; 0x21f
 801bfea:	4a04      	ldr	r2, [pc, #16]	; (801bffc <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 801bfec:	4904      	ldr	r1, [pc, #16]	; (801c000 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 801bfee:	4620      	mov	r0, r4
 801bff0:	47a8      	blx	r5
    return *this;
 801bff2:	68fb      	ldr	r3, [r7, #12]
}
 801bff4:	4618      	mov	r0, r3
 801bff6:	3710      	adds	r7, #16
 801bff8:	46bd      	mov	sp, r7
 801bffa:	bdb0      	pop	{r4, r5, r7, pc}
 801bffc:	0802679c 	.word	0x0802679c
 801c000:	080267d8 	.word	0x080267d8

0801c004 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 801c004:	b580      	push	{r7, lr}
 801c006:	b082      	sub	sp, #8
 801c008:	af00      	add	r7, sp, #0
 801c00a:	6078      	str	r0, [r7, #4]
 801c00c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	3328      	adds	r3, #40	; 0x28
 801c012:	4907      	ldr	r1, [pc, #28]	; (801c030 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 801c014:	4618      	mov	r0, r3
 801c016:	f002 f8fb 	bl	801e210 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	3328      	adds	r3, #40	; 0x28
 801c01e:	6839      	ldr	r1, [r7, #0]
 801c020:	4618      	mov	r0, r3
 801c022:	f002 f837 	bl	801e094 <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 801c026:	687b      	ldr	r3, [r7, #4]
}
 801c028:	4618      	mov	r0, r3
 801c02a:	3708      	adds	r7, #8
 801c02c:	46bd      	mov	sp, r7
 801c02e:	bd80      	pop	{r7, pc}
 801c030:	0802690c 	.word	0x0802690c

0801c034 <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 801c034:	b580      	push	{r7, lr}
 801c036:	b084      	sub	sp, #16
 801c038:	af00      	add	r7, sp, #0
 801c03a:	60f8      	str	r0, [r7, #12]
 801c03c:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 801c040:	68fb      	ldr	r3, [r7, #12]
 801c042:	3328      	adds	r3, #40	; 0x28
 801c044:	4907      	ldr	r1, [pc, #28]	; (801c064 <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 801c046:	4618      	mov	r0, r3
 801c048:	f002 f8e2 	bl	801e210 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801c04c:	68fb      	ldr	r3, [r7, #12]
 801c04e:	3328      	adds	r3, #40	; 0x28
 801c050:	ed97 0b00 	vldr	d0, [r7]
 801c054:	4618      	mov	r0, r3
 801c056:	f001 ff73 	bl	801df40 <_ZN14MockNamedValue8setValueEd>
    return *this;
 801c05a:	68fb      	ldr	r3, [r7, #12]
}
 801c05c:	4618      	mov	r0, r3
 801c05e:	3710      	adds	r7, #16
 801c060:	46bd      	mov	sp, r7
 801c062:	bd80      	pop	{r7, pc}
 801c064:	0802690c 	.word	0x0802690c

0801c068 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 801c068:	b580      	push	{r7, lr}
 801c06a:	b082      	sub	sp, #8
 801c06c:	af00      	add	r7, sp, #0
 801c06e:	6078      	str	r0, [r7, #4]
 801c070:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	3328      	adds	r3, #40	; 0x28
 801c076:	4907      	ldr	r1, [pc, #28]	; (801c094 <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 801c078:	4618      	mov	r0, r3
 801c07a:	f002 f8c9 	bl	801e210 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	3328      	adds	r3, #40	; 0x28
 801c082:	6839      	ldr	r1, [r7, #0]
 801c084:	4618      	mov	r0, r3
 801c086:	f001 ff9f 	bl	801dfc8 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 801c08a:	687b      	ldr	r3, [r7, #4]
}
 801c08c:	4618      	mov	r0, r3
 801c08e:	3708      	adds	r7, #8
 801c090:	46bd      	mov	sp, r7
 801c092:	bd80      	pop	{r7, pc}
 801c094:	0802690c 	.word	0x0802690c

0801c098 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 801c098:	b580      	push	{r7, lr}
 801c09a:	b082      	sub	sp, #8
 801c09c:	af00      	add	r7, sp, #0
 801c09e:	6078      	str	r0, [r7, #4]
 801c0a0:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	3328      	adds	r3, #40	; 0x28
 801c0a6:	4907      	ldr	r1, [pc, #28]	; (801c0c4 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 801c0a8:	4618      	mov	r0, r3
 801c0aa:	f002 f8b1 	bl	801e210 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	3328      	adds	r3, #40	; 0x28
 801c0b2:	6839      	ldr	r1, [r7, #0]
 801c0b4:	4618      	mov	r0, r3
 801c0b6:	f001 ffa9 	bl	801e00c <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 801c0ba:	687b      	ldr	r3, [r7, #4]
}
 801c0bc:	4618      	mov	r0, r3
 801c0be:	3708      	adds	r7, #8
 801c0c0:	46bd      	mov	sp, r7
 801c0c2:	bd80      	pop	{r7, pc}
 801c0c4:	0802690c 	.word	0x0802690c

0801c0c8 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 801c0c8:	b580      	push	{r7, lr}
 801c0ca:	b082      	sub	sp, #8
 801c0cc:	af00      	add	r7, sp, #0
 801c0ce:	6078      	str	r0, [r7, #4]
 801c0d0:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	3328      	adds	r3, #40	; 0x28
 801c0d6:	4907      	ldr	r1, [pc, #28]	; (801c0f4 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 801c0d8:	4618      	mov	r0, r3
 801c0da:	f002 f899 	bl	801e210 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	3328      	adds	r3, #40	; 0x28
 801c0e2:	6839      	ldr	r1, [r7, #0]
 801c0e4:	4618      	mov	r0, r3
 801c0e6:	f001 ffb3 	bl	801e050 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 801c0ea:	687b      	ldr	r3, [r7, #4]
}
 801c0ec:	4618      	mov	r0, r3
 801c0ee:	3708      	adds	r7, #8
 801c0f0:	46bd      	mov	sp, r7
 801c0f2:	bd80      	pop	{r7, pc}
 801c0f4:	0802690c 	.word	0x0802690c

0801c0f8 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 801c0f8:	b480      	push	{r7}
 801c0fa:	b083      	sub	sp, #12
 801c0fc:	af00      	add	r7, sp, #0
 801c0fe:	6078      	str	r0, [r7, #4]
 801c100:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	2201      	movs	r2, #1
 801c106:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	2200      	movs	r2, #0
 801c10e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	683a      	ldr	r2, [r7, #0]
 801c116:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 801c118:	687b      	ldr	r3, [r7, #4]
}
 801c11a:	4618      	mov	r0, r3
 801c11c:	370c      	adds	r7, #12
 801c11e:	46bd      	mov	sp, r7
 801c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c124:	4770      	bx	lr

0801c126 <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 801c126:	b580      	push	{r7, lr}
 801c128:	b082      	sub	sp, #8
 801c12a:	af00      	add	r7, sp, #0
 801c12c:	6078      	str	r0, [r7, #4]
 801c12e:	6039      	str	r1, [r7, #0]
    return returnValue_;
 801c130:	683b      	ldr	r3, [r7, #0]
 801c132:	3328      	adds	r3, #40	; 0x28
 801c134:	4619      	mov	r1, r3
 801c136:	6878      	ldr	r0, [r7, #4]
 801c138:	f7ef f946 	bl	800b3c8 <_ZN14MockNamedValueC1ERKS_>
}
 801c13c:	6878      	ldr	r0, [r7, #4]
 801c13e:	3708      	adds	r7, #8
 801c140:	46bd      	mov	sp, r7
 801c142:	bd80      	pop	{r7, pc}

0801c144 <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 801c144:	b480      	push	{r7}
 801c146:	b085      	sub	sp, #20
 801c148:	af00      	add	r7, sp, #0
 801c14a:	60f8      	str	r0, [r7, #12]
 801c14c:	60b9      	str	r1, [r7, #8]
 801c14e:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 801c150:	68fb      	ldr	r3, [r7, #12]
 801c152:	68ba      	ldr	r2, [r7, #8]
 801c154:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 801c156:	68fb      	ldr	r3, [r7, #12]
 801c158:	687a      	ldr	r2, [r7, #4]
 801c15a:	615a      	str	r2, [r3, #20]
    return *this;
 801c15c:	68fb      	ldr	r3, [r7, #12]
}
 801c15e:	4618      	mov	r0, r3
 801c160:	3714      	adds	r7, #20
 801c162:	46bd      	mov	sp, r7
 801c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c168:	4770      	bx	lr

0801c16a <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 801c16a:	b480      	push	{r7}
 801c16c:	b083      	sub	sp, #12
 801c16e:	af00      	add	r7, sp, #0
 801c170:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	7e1b      	ldrb	r3, [r3, #24]
}
 801c176:	4618      	mov	r0, r3
 801c178:	370c      	adds	r7, #12
 801c17a:	46bd      	mov	sp, r7
 801c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c180:	4770      	bx	lr

0801c182 <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 801c182:	b480      	push	{r7}
 801c184:	b083      	sub	sp, #12
 801c186:	af00      	add	r7, sp, #0
 801c188:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 801c18e:	4618      	mov	r0, r3
 801c190:	370c      	adds	r7, #12
 801c192:	46bd      	mov	sp, r7
 801c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c198:	4770      	bx	lr
	...

0801c19c <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 801c19c:	b580      	push	{r7, lr}
 801c19e:	b082      	sub	sp, #8
 801c1a0:	af00      	add	r7, sp, #0
 801c1a2:	6078      	str	r0, [r7, #4]
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	4618      	mov	r0, r3
 801c1a8:	f7fe fcce 	bl	801ab48 <_ZN16MockExpectedCallC1Ev>
 801c1ac:	4a03      	ldr	r2, [pc, #12]	; (801c1bc <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	601a      	str	r2, [r3, #0]
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	4618      	mov	r0, r3
 801c1b6:	3708      	adds	r7, #8
 801c1b8:	46bd      	mov	sp, r7
 801c1ba:	bd80      	pop	{r7, pc}
 801c1bc:	08029810 	.word	0x08029810

0801c1c0 <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 801c1c0:	b580      	push	{r7, lr}
 801c1c2:	af00      	add	r7, sp, #0
 801c1c4:	4801      	ldr	r0, [pc, #4]	; (801c1cc <__tcf_0+0xc>)
 801c1c6:	f000 f831 	bl	801c22c <_ZN23MockIgnoredExpectedCallD1Ev>
 801c1ca:	bd80      	pop	{r7, pc}
 801c1cc:	20000f3c 	.word	0x20000f3c

0801c1d0 <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 801c1d0:	b580      	push	{r7, lr}
 801c1d2:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 801c1d4:	4b12      	ldr	r3, [pc, #72]	; (801c220 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801c1d6:	781b      	ldrb	r3, [r3, #0]
 801c1d8:	f3bf 8f5b 	dmb	ish
 801c1dc:	b2db      	uxtb	r3, r3
 801c1de:	f003 0301 	and.w	r3, r3, #1
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	bf0c      	ite	eq
 801c1e6:	2301      	moveq	r3, #1
 801c1e8:	2300      	movne	r3, #0
 801c1ea:	b2db      	uxtb	r3, r3
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	d013      	beq.n	801c218 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801c1f0:	480b      	ldr	r0, [pc, #44]	; (801c220 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801c1f2:	f003 ff05 	bl	8020000 <__cxa_guard_acquire>
 801c1f6:	4603      	mov	r3, r0
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	bf14      	ite	ne
 801c1fc:	2301      	movne	r3, #1
 801c1fe:	2300      	moveq	r3, #0
 801c200:	b2db      	uxtb	r3, r3
 801c202:	2b00      	cmp	r3, #0
 801c204:	d008      	beq.n	801c218 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801c206:	4807      	ldr	r0, [pc, #28]	; (801c224 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 801c208:	f7ff ffc8 	bl	801c19c <_ZN23MockIgnoredExpectedCallC1Ev>
 801c20c:	4804      	ldr	r0, [pc, #16]	; (801c220 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801c20e:	f003 ff03 	bl	8020018 <__cxa_guard_release>
 801c212:	4805      	ldr	r0, [pc, #20]	; (801c228 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 801c214:	f003 ff27 	bl	8020066 <atexit>
    return call;
 801c218:	4b02      	ldr	r3, [pc, #8]	; (801c224 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 801c21a:	4618      	mov	r0, r3
 801c21c:	bd80      	pop	{r7, pc}
 801c21e:	bf00      	nop
 801c220:	20000f40 	.word	0x20000f40
 801c224:	20000f3c 	.word	0x20000f3c
 801c228:	0801c1c1 	.word	0x0801c1c1

0801c22c <_ZN23MockIgnoredExpectedCallD1Ev>:
 801c22c:	b580      	push	{r7, lr}
 801c22e:	b082      	sub	sp, #8
 801c230:	af00      	add	r7, sp, #0
 801c232:	6078      	str	r0, [r7, #4]
 801c234:	4a05      	ldr	r2, [pc, #20]	; (801c24c <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 801c236:	687b      	ldr	r3, [r7, #4]
 801c238:	601a      	str	r2, [r3, #0]
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	4618      	mov	r0, r3
 801c23e:	f7fe fc93 	bl	801ab68 <_ZN16MockExpectedCallD1Ev>
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	4618      	mov	r0, r3
 801c246:	3708      	adds	r7, #8
 801c248:	46bd      	mov	sp, r7
 801c24a:	bd80      	pop	{r7, pc}
 801c24c:	08029810 	.word	0x08029810

0801c250 <_ZN23MockIgnoredExpectedCallD0Ev>:
 801c250:	b580      	push	{r7, lr}
 801c252:	b082      	sub	sp, #8
 801c254:	af00      	add	r7, sp, #0
 801c256:	6078      	str	r0, [r7, #4]
 801c258:	6878      	ldr	r0, [r7, #4]
 801c25a:	f7ff ffe7 	bl	801c22c <_ZN23MockIgnoredExpectedCallD1Ev>
 801c25e:	2104      	movs	r1, #4
 801c260:	6878      	ldr	r0, [r7, #4]
 801c262:	f7ee fc5d 	bl	800ab20 <_ZdlPvj>
 801c266:	687b      	ldr	r3, [r7, #4]
 801c268:	4618      	mov	r0, r3
 801c26a:	3708      	adds	r7, #8
 801c26c:	46bd      	mov	sp, r7
 801c26e:	bd80      	pop	{r7, pc}

0801c270 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 801c270:	b580      	push	{r7, lr}
 801c272:	b082      	sub	sp, #8
 801c274:	af00      	add	r7, sp, #0
 801c276:	6078      	str	r0, [r7, #4]
 801c278:	4a05      	ldr	r2, [pc, #20]	; (801c290 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	601a      	str	r2, [r3, #0]
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	4618      	mov	r0, r3
 801c282:	f001 fd4b 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	4618      	mov	r0, r3
 801c28a:	3708      	adds	r7, #8
 801c28c:	46bd      	mov	sp, r7
 801c28e:	bd80      	pop	{r7, pc}
 801c290:	080299b0 	.word	0x080299b0

0801c294 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 801c294:	b580      	push	{r7, lr}
 801c296:	b082      	sub	sp, #8
 801c298:	af00      	add	r7, sp, #0
 801c29a:	6078      	str	r0, [r7, #4]
 801c29c:	6878      	ldr	r0, [r7, #4]
 801c29e:	f7ff ffe7 	bl	801c270 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 801c2a2:	2138      	movs	r1, #56	; 0x38
 801c2a4:	6878      	ldr	r0, [r7, #4]
 801c2a6:	f7ee fc3b 	bl	800ab20 <_ZdlPvj>
 801c2aa:	687b      	ldr	r3, [r7, #4]
 801c2ac:	4618      	mov	r0, r3
 801c2ae:	3708      	adds	r7, #8
 801c2b0:	46bd      	mov	sp, r7
 801c2b2:	bd80      	pop	{r7, pc}

0801c2b4 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 801c2b4:	b480      	push	{r7}
 801c2b6:	b083      	sub	sp, #12
 801c2b8:	af00      	add	r7, sp, #0
 801c2ba:	6078      	str	r0, [r7, #4]
 801c2bc:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 801c2be:	687b      	ldr	r3, [r7, #4]
 801c2c0:	683a      	ldr	r2, [r7, #0]
 801c2c2:	601a      	str	r2, [r3, #0]
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	2200      	movs	r2, #0
 801c2c8:	605a      	str	r2, [r3, #4]
 801c2ca:	687b      	ldr	r3, [r7, #4]
 801c2cc:	4618      	mov	r0, r3
 801c2ce:	370c      	adds	r7, #12
 801c2d0:	46bd      	mov	sp, r7
 801c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2d6:	4770      	bx	lr

0801c2d8 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 801c2d8:	b480      	push	{r7}
 801c2da:	b083      	sub	sp, #12
 801c2dc:	af00      	add	r7, sp, #0
 801c2de:	6078      	str	r0, [r7, #4]
 801c2e0:	4a06      	ldr	r2, [pc, #24]	; (801c2fc <_ZN21MockExpectedCallsListC1Ev+0x24>)
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	601a      	str	r2, [r3, #0]
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	2200      	movs	r2, #0
 801c2ea:	605a      	str	r2, [r3, #4]
{
}
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	4618      	mov	r0, r3
 801c2f0:	370c      	adds	r7, #12
 801c2f2:	46bd      	mov	sp, r7
 801c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2f8:	4770      	bx	lr
 801c2fa:	bf00      	nop
 801c2fc:	08029b04 	.word	0x08029b04

0801c300 <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 801c300:	b580      	push	{r7, lr}
 801c302:	b084      	sub	sp, #16
 801c304:	af00      	add	r7, sp, #0
 801c306:	6078      	str	r0, [r7, #4]
 801c308:	4a0d      	ldr	r2, [pc, #52]	; (801c340 <_ZN21MockExpectedCallsListD1Ev+0x40>)
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	685b      	ldr	r3, [r3, #4]
 801c312:	2b00      	cmp	r3, #0
 801c314:	d00f      	beq.n	801c336 <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	685b      	ldr	r3, [r3, #4]
 801c31a:	685b      	ldr	r3, [r3, #4]
 801c31c:	60fb      	str	r3, [r7, #12]
        delete head_;
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	685b      	ldr	r3, [r3, #4]
 801c322:	2b00      	cmp	r3, #0
 801c324:	d003      	beq.n	801c32e <_ZN21MockExpectedCallsListD1Ev+0x2e>
 801c326:	2108      	movs	r1, #8
 801c328:	4618      	mov	r0, r3
 801c32a:	f7ee fbf9 	bl	800ab20 <_ZdlPvj>
        head_ = next;
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	68fa      	ldr	r2, [r7, #12]
 801c332:	605a      	str	r2, [r3, #4]
    while (head_) {
 801c334:	e7eb      	b.n	801c30e <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	4618      	mov	r0, r3
 801c33a:	3710      	adds	r7, #16
 801c33c:	46bd      	mov	sp, r7
 801c33e:	bd80      	pop	{r7, pc}
 801c340:	08029b04 	.word	0x08029b04

0801c344 <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 801c344:	b580      	push	{r7, lr}
 801c346:	b082      	sub	sp, #8
 801c348:	af00      	add	r7, sp, #0
 801c34a:	6078      	str	r0, [r7, #4]
}
 801c34c:	6878      	ldr	r0, [r7, #4]
 801c34e:	f7ff ffd7 	bl	801c300 <_ZN21MockExpectedCallsListD1Ev>
 801c352:	2108      	movs	r1, #8
 801c354:	6878      	ldr	r0, [r7, #4]
 801c356:	f7ee fbe3 	bl	800ab20 <_ZdlPvj>
 801c35a:	687b      	ldr	r3, [r7, #4]
 801c35c:	4618      	mov	r0, r3
 801c35e:	3708      	adds	r7, #8
 801c360:	46bd      	mov	sp, r7
 801c362:	bd80      	pop	{r7, pc}

0801c364 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 801c364:	b580      	push	{r7, lr}
 801c366:	b084      	sub	sp, #16
 801c368:	af00      	add	r7, sp, #0
 801c36a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	685b      	ldr	r3, [r3, #4]
 801c370:	60fb      	str	r3, [r7, #12]
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	2b00      	cmp	r3, #0
 801c376:	d011      	beq.n	801c39c <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 801c378:	68fb      	ldr	r3, [r7, #12]
 801c37a:	681a      	ldr	r2, [r3, #0]
 801c37c:	68fb      	ldr	r3, [r7, #12]
 801c37e:	681b      	ldr	r3, [r3, #0]
 801c380:	681b      	ldr	r3, [r3, #0]
 801c382:	33d4      	adds	r3, #212	; 0xd4
 801c384:	681b      	ldr	r3, [r3, #0]
 801c386:	4610      	mov	r0, r2
 801c388:	4798      	blx	r3
 801c38a:	4603      	mov	r3, r0
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	d001      	beq.n	801c394 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 801c390:	2301      	movs	r3, #1
 801c392:	e004      	b.n	801c39e <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c394:	68fb      	ldr	r3, [r7, #12]
 801c396:	685b      	ldr	r3, [r3, #4]
 801c398:	60fb      	str	r3, [r7, #12]
 801c39a:	e7ea      	b.n	801c372 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 801c39c:	2300      	movs	r3, #0
}
 801c39e:	4618      	mov	r0, r3
 801c3a0:	3710      	adds	r7, #16
 801c3a2:	46bd      	mov	sp, r7
 801c3a4:	bd80      	pop	{r7, pc}

0801c3a6 <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 801c3a6:	b480      	push	{r7}
 801c3a8:	b085      	sub	sp, #20
 801c3aa:	af00      	add	r7, sp, #0
 801c3ac:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801c3ae:	2300      	movs	r3, #0
 801c3b0:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	685b      	ldr	r3, [r3, #4]
 801c3b6:	60bb      	str	r3, [r7, #8]
 801c3b8:	68bb      	ldr	r3, [r7, #8]
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	d006      	beq.n	801c3cc <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 801c3be:	68fb      	ldr	r3, [r7, #12]
 801c3c0:	3301      	adds	r3, #1
 801c3c2:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c3c4:	68bb      	ldr	r3, [r7, #8]
 801c3c6:	685b      	ldr	r3, [r3, #4]
 801c3c8:	60bb      	str	r3, [r7, #8]
 801c3ca:	e7f5      	b.n	801c3b8 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 801c3cc:	68fb      	ldr	r3, [r7, #12]
}
 801c3ce:	4618      	mov	r0, r3
 801c3d0:	3714      	adds	r7, #20
 801c3d2:	46bd      	mov	sp, r7
 801c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3d8:	4770      	bx	lr

0801c3da <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 801c3da:	b480      	push	{r7}
 801c3dc:	b083      	sub	sp, #12
 801c3de:	af00      	add	r7, sp, #0
 801c3e0:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 801c3e2:	687b      	ldr	r3, [r7, #4]
 801c3e4:	685b      	ldr	r3, [r3, #4]
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	bf0c      	ite	eq
 801c3ea:	2301      	moveq	r3, #1
 801c3ec:	2300      	movne	r3, #0
 801c3ee:	b2db      	uxtb	r3, r3
}
 801c3f0:	4618      	mov	r0, r3
 801c3f2:	370c      	adds	r7, #12
 801c3f4:	46bd      	mov	sp, r7
 801c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3fa:	4770      	bx	lr

0801c3fc <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 801c3fc:	b580      	push	{r7, lr}
 801c3fe:	b084      	sub	sp, #16
 801c400:	af00      	add	r7, sp, #0
 801c402:	6078      	str	r0, [r7, #4]
 801c404:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 801c406:	2300      	movs	r3, #0
 801c408:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	685b      	ldr	r3, [r3, #4]
 801c40e:	60bb      	str	r3, [r7, #8]
 801c410:	68bb      	ldr	r3, [r7, #8]
 801c412:	2b00      	cmp	r3, #0
 801c414:	d01d      	beq.n	801c452 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 801c416:	68bb      	ldr	r3, [r7, #8]
 801c418:	681a      	ldr	r2, [r3, #0]
 801c41a:	68bb      	ldr	r3, [r7, #8]
 801c41c:	681b      	ldr	r3, [r3, #0]
 801c41e:	681b      	ldr	r3, [r3, #0]
 801c420:	33b8      	adds	r3, #184	; 0xb8
 801c422:	681b      	ldr	r3, [r3, #0]
 801c424:	6839      	ldr	r1, [r7, #0]
 801c426:	4610      	mov	r0, r2
 801c428:	4798      	blx	r3
 801c42a:	4603      	mov	r3, r0
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	d00c      	beq.n	801c44a <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 801c430:	68bb      	ldr	r3, [r7, #8]
 801c432:	681a      	ldr	r2, [r3, #0]
 801c434:	68bb      	ldr	r3, [r7, #8]
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	33f8      	adds	r3, #248	; 0xf8
 801c43c:	681b      	ldr	r3, [r3, #0]
 801c43e:	4610      	mov	r0, r2
 801c440:	4798      	blx	r3
 801c442:	4602      	mov	r2, r0
 801c444:	68fb      	ldr	r3, [r7, #12]
 801c446:	4413      	add	r3, r2
 801c448:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c44a:	68bb      	ldr	r3, [r7, #8]
 801c44c:	685b      	ldr	r3, [r3, #4]
 801c44e:	60bb      	str	r3, [r7, #8]
 801c450:	e7de      	b.n	801c410 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 801c452:	68fb      	ldr	r3, [r7, #12]
}
 801c454:	4618      	mov	r0, r3
 801c456:	3710      	adds	r7, #16
 801c458:	46bd      	mov	sp, r7
 801c45a:	bd80      	pop	{r7, pc}

0801c45c <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 801c45c:	b580      	push	{r7, lr}
 801c45e:	b084      	sub	sp, #16
 801c460:	af00      	add	r7, sp, #0
 801c462:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801c464:	2300      	movs	r3, #0
 801c466:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	685b      	ldr	r3, [r3, #4]
 801c46c:	60bb      	str	r3, [r7, #8]
 801c46e:	68bb      	ldr	r3, [r7, #8]
 801c470:	2b00      	cmp	r3, #0
 801c472:	d015      	beq.n	801c4a0 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 801c474:	68bb      	ldr	r3, [r7, #8]
 801c476:	681a      	ldr	r2, [r3, #0]
 801c478:	68bb      	ldr	r3, [r7, #8]
 801c47a:	681b      	ldr	r3, [r3, #0]
 801c47c:	681b      	ldr	r3, [r3, #0]
 801c47e:	33c0      	adds	r3, #192	; 0xc0
 801c480:	681b      	ldr	r3, [r3, #0]
 801c482:	4610      	mov	r0, r2
 801c484:	4798      	blx	r3
 801c486:	4603      	mov	r3, r0
 801c488:	f083 0301 	eor.w	r3, r3, #1
 801c48c:	b2db      	uxtb	r3, r3
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d002      	beq.n	801c498 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	3301      	adds	r3, #1
 801c496:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c498:	68bb      	ldr	r3, [r7, #8]
 801c49a:	685b      	ldr	r3, [r3, #4]
 801c49c:	60bb      	str	r3, [r7, #8]
 801c49e:	e7e6      	b.n	801c46e <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 801c4a0:	68fb      	ldr	r3, [r7, #12]
}
 801c4a2:	4618      	mov	r0, r3
 801c4a4:	3710      	adds	r7, #16
 801c4a6:	46bd      	mov	sp, r7
 801c4a8:	bd80      	pop	{r7, pc}

0801c4aa <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 801c4aa:	b580      	push	{r7, lr}
 801c4ac:	b084      	sub	sp, #16
 801c4ae:	af00      	add	r7, sp, #0
 801c4b0:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c4b2:	687b      	ldr	r3, [r7, #4]
 801c4b4:	685b      	ldr	r3, [r3, #4]
 801c4b6:	60fb      	str	r3, [r7, #12]
 801c4b8:	68fb      	ldr	r3, [r7, #12]
 801c4ba:	2b00      	cmp	r3, #0
 801c4bc:	d011      	beq.n	801c4e2 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801c4be:	68fb      	ldr	r3, [r7, #12]
 801c4c0:	681a      	ldr	r2, [r3, #0]
 801c4c2:	68fb      	ldr	r3, [r7, #12]
 801c4c4:	681b      	ldr	r3, [r3, #0]
 801c4c6:	681b      	ldr	r3, [r3, #0]
 801c4c8:	33c8      	adds	r3, #200	; 0xc8
 801c4ca:	681b      	ldr	r3, [r3, #0]
 801c4cc:	4610      	mov	r0, r2
 801c4ce:	4798      	blx	r3
 801c4d0:	4603      	mov	r3, r0
 801c4d2:	2b00      	cmp	r3, #0
 801c4d4:	d001      	beq.n	801c4da <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 801c4d6:	2301      	movs	r3, #1
 801c4d8:	e004      	b.n	801c4e4 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c4da:	68fb      	ldr	r3, [r7, #12]
 801c4dc:	685b      	ldr	r3, [r3, #4]
 801c4de:	60fb      	str	r3, [r7, #12]
 801c4e0:	e7ea      	b.n	801c4b8 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801c4e2:	2300      	movs	r3, #0
}
 801c4e4:	4618      	mov	r0, r3
 801c4e6:	3710      	adds	r7, #16
 801c4e8:	46bd      	mov	sp, r7
 801c4ea:	bd80      	pop	{r7, pc}

0801c4ec <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 801c4ec:	b580      	push	{r7, lr}
 801c4ee:	b084      	sub	sp, #16
 801c4f0:	af00      	add	r7, sp, #0
 801c4f2:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	685b      	ldr	r3, [r3, #4]
 801c4f8:	60fb      	str	r3, [r7, #12]
 801c4fa:	68fb      	ldr	r3, [r7, #12]
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d014      	beq.n	801c52a <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801c500:	68fb      	ldr	r3, [r7, #12]
 801c502:	681a      	ldr	r2, [r3, #0]
 801c504:	68fb      	ldr	r3, [r7, #12]
 801c506:	681b      	ldr	r3, [r3, #0]
 801c508:	681b      	ldr	r3, [r3, #0]
 801c50a:	33c0      	adds	r3, #192	; 0xc0
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	4610      	mov	r0, r2
 801c510:	4798      	blx	r3
 801c512:	4603      	mov	r3, r0
 801c514:	f083 0301 	eor.w	r3, r3, #1
 801c518:	b2db      	uxtb	r3, r3
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d001      	beq.n	801c522 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801c51e:	2301      	movs	r3, #1
 801c520:	e004      	b.n	801c52c <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c522:	68fb      	ldr	r3, [r7, #12]
 801c524:	685b      	ldr	r3, [r3, #4]
 801c526:	60fb      	str	r3, [r7, #12]
 801c528:	e7e7      	b.n	801c4fa <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801c52a:	2300      	movs	r3, #0
}
 801c52c:	4618      	mov	r0, r3
 801c52e:	3710      	adds	r7, #16
 801c530:	46bd      	mov	sp, r7
 801c532:	bd80      	pop	{r7, pc}

0801c534 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 801c534:	b580      	push	{r7, lr}
 801c536:	b084      	sub	sp, #16
 801c538:	af00      	add	r7, sp, #0
 801c53a:	6078      	str	r0, [r7, #4]
 801c53c:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	685b      	ldr	r3, [r3, #4]
 801c542:	60fb      	str	r3, [r7, #12]
 801c544:	68fb      	ldr	r3, [r7, #12]
 801c546:	2b00      	cmp	r3, #0
 801c548:	d012      	beq.n	801c570 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801c54a:	68fb      	ldr	r3, [r7, #12]
 801c54c:	681a      	ldr	r2, [r3, #0]
 801c54e:	68fb      	ldr	r3, [r7, #12]
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	681b      	ldr	r3, [r3, #0]
 801c554:	33b8      	adds	r3, #184	; 0xb8
 801c556:	681b      	ldr	r3, [r3, #0]
 801c558:	6839      	ldr	r1, [r7, #0]
 801c55a:	4610      	mov	r0, r2
 801c55c:	4798      	blx	r3
 801c55e:	4603      	mov	r3, r0
 801c560:	2b00      	cmp	r3, #0
 801c562:	d001      	beq.n	801c568 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 801c564:	2301      	movs	r3, #1
 801c566:	e004      	b.n	801c572 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c568:	68fb      	ldr	r3, [r7, #12]
 801c56a:	685b      	ldr	r3, [r3, #4]
 801c56c:	60fb      	str	r3, [r7, #12]
 801c56e:	e7e9      	b.n	801c544 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801c570:	2300      	movs	r3, #0
}
 801c572:	4618      	mov	r0, r3
 801c574:	3710      	adds	r7, #16
 801c576:	46bd      	mov	sp, r7
 801c578:	bd80      	pop	{r7, pc}
	...

0801c57c <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 801c57c:	b590      	push	{r4, r7, lr}
 801c57e:	b085      	sub	sp, #20
 801c580:	af00      	add	r7, sp, #0
 801c582:	6078      	str	r0, [r7, #4]
 801c584:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 801c586:	2273      	movs	r2, #115	; 0x73
 801c588:	4911      	ldr	r1, [pc, #68]	; (801c5d0 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 801c58a:	2008      	movs	r0, #8
 801c58c:	f7ee fab4 	bl	800aaf8 <_ZnwjPKci>
 801c590:	4604      	mov	r4, r0
 801c592:	6839      	ldr	r1, [r7, #0]
 801c594:	4620      	mov	r0, r4
 801c596:	f7ff fe8d 	bl	801c2b4 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 801c59a:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	685b      	ldr	r3, [r3, #4]
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	d103      	bne.n	801c5ac <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	68ba      	ldr	r2, [r7, #8]
 801c5a8:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 801c5aa:	e00d      	b.n	801c5c8 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	685b      	ldr	r3, [r3, #4]
 801c5b0:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 801c5b2:	68fb      	ldr	r3, [r7, #12]
 801c5b4:	685b      	ldr	r3, [r3, #4]
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d003      	beq.n	801c5c2 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801c5ba:	68fb      	ldr	r3, [r7, #12]
 801c5bc:	685b      	ldr	r3, [r3, #4]
 801c5be:	60fb      	str	r3, [r7, #12]
 801c5c0:	e7f7      	b.n	801c5b2 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 801c5c2:	68fb      	ldr	r3, [r7, #12]
 801c5c4:	68ba      	ldr	r2, [r7, #8]
 801c5c6:	605a      	str	r2, [r3, #4]
}
 801c5c8:	bf00      	nop
 801c5ca:	3714      	adds	r7, #20
 801c5cc:	46bd      	mov	sp, r7
 801c5ce:	bd90      	pop	{r4, r7, pc}
 801c5d0:	08026918 	.word	0x08026918

0801c5d4 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 801c5d4:	b580      	push	{r7, lr}
 801c5d6:	b084      	sub	sp, #16
 801c5d8:	af00      	add	r7, sp, #0
 801c5da:	6078      	str	r0, [r7, #4]
 801c5dc:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c5de:	683b      	ldr	r3, [r7, #0]
 801c5e0:	685b      	ldr	r3, [r3, #4]
 801c5e2:	60fb      	str	r3, [r7, #12]
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	d018      	beq.n	801c61c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801c5ea:	68fb      	ldr	r3, [r7, #12]
 801c5ec:	681a      	ldr	r2, [r3, #0]
 801c5ee:	68fb      	ldr	r3, [r7, #12]
 801c5f0:	681b      	ldr	r3, [r3, #0]
 801c5f2:	681b      	ldr	r3, [r3, #0]
 801c5f4:	33c4      	adds	r3, #196	; 0xc4
 801c5f6:	681b      	ldr	r3, [r3, #0]
 801c5f8:	4610      	mov	r0, r2
 801c5fa:	4798      	blx	r3
 801c5fc:	4603      	mov	r3, r0
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d008      	beq.n	801c614 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	681b      	ldr	r3, [r3, #0]
 801c606:	3330      	adds	r3, #48	; 0x30
 801c608:	681b      	ldr	r3, [r3, #0]
 801c60a:	68fa      	ldr	r2, [r7, #12]
 801c60c:	6812      	ldr	r2, [r2, #0]
 801c60e:	4611      	mov	r1, r2
 801c610:	6878      	ldr	r0, [r7, #4]
 801c612:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c614:	68fb      	ldr	r3, [r7, #12]
 801c616:	685b      	ldr	r3, [r3, #4]
 801c618:	60fb      	str	r3, [r7, #12]
 801c61a:	e7e3      	b.n	801c5e4 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801c61c:	bf00      	nop
 801c61e:	3710      	adds	r7, #16
 801c620:	46bd      	mov	sp, r7
 801c622:	bd80      	pop	{r7, pc}

0801c624 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 801c624:	b580      	push	{r7, lr}
 801c626:	b086      	sub	sp, #24
 801c628:	af00      	add	r7, sp, #0
 801c62a:	60f8      	str	r0, [r7, #12]
 801c62c:	60b9      	str	r1, [r7, #8]
 801c62e:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	685b      	ldr	r3, [r3, #4]
 801c634:	617b      	str	r3, [r7, #20]
 801c636:	697b      	ldr	r3, [r7, #20]
 801c638:	2b00      	cmp	r3, #0
 801c63a:	d019      	beq.n	801c670 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801c63c:	697b      	ldr	r3, [r7, #20]
 801c63e:	681a      	ldr	r2, [r3, #0]
 801c640:	697b      	ldr	r3, [r7, #20]
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	681b      	ldr	r3, [r3, #0]
 801c646:	33b8      	adds	r3, #184	; 0xb8
 801c648:	681b      	ldr	r3, [r3, #0]
 801c64a:	68b9      	ldr	r1, [r7, #8]
 801c64c:	4610      	mov	r0, r2
 801c64e:	4798      	blx	r3
 801c650:	4603      	mov	r3, r0
 801c652:	2b00      	cmp	r3, #0
 801c654:	d008      	beq.n	801c668 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 801c656:	68fb      	ldr	r3, [r7, #12]
 801c658:	681b      	ldr	r3, [r3, #0]
 801c65a:	3330      	adds	r3, #48	; 0x30
 801c65c:	681b      	ldr	r3, [r3, #0]
 801c65e:	697a      	ldr	r2, [r7, #20]
 801c660:	6812      	ldr	r2, [r2, #0]
 801c662:	4611      	mov	r1, r2
 801c664:	68f8      	ldr	r0, [r7, #12]
 801c666:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c668:	697b      	ldr	r3, [r7, #20]
 801c66a:	685b      	ldr	r3, [r3, #4]
 801c66c:	617b      	str	r3, [r7, #20]
 801c66e:	e7e2      	b.n	801c636 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801c670:	bf00      	nop
 801c672:	3718      	adds	r7, #24
 801c674:	46bd      	mov	sp, r7
 801c676:	bd80      	pop	{r7, pc}

0801c678 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 801c678:	b580      	push	{r7, lr}
 801c67a:	b084      	sub	sp, #16
 801c67c:	af00      	add	r7, sp, #0
 801c67e:	6078      	str	r0, [r7, #4]
 801c680:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c682:	683b      	ldr	r3, [r7, #0]
 801c684:	685b      	ldr	r3, [r3, #4]
 801c686:	60fb      	str	r3, [r7, #12]
 801c688:	68fb      	ldr	r3, [r7, #12]
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d00c      	beq.n	801c6a8 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	681b      	ldr	r3, [r3, #0]
 801c692:	3330      	adds	r3, #48	; 0x30
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	68fa      	ldr	r2, [r7, #12]
 801c698:	6812      	ldr	r2, [r2, #0]
 801c69a:	4611      	mov	r1, r2
 801c69c:	6878      	ldr	r0, [r7, #4]
 801c69e:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c6a0:	68fb      	ldr	r3, [r7, #12]
 801c6a2:	685b      	ldr	r3, [r3, #4]
 801c6a4:	60fb      	str	r3, [r7, #12]
 801c6a6:	e7ef      	b.n	801c688 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 801c6a8:	bf00      	nop
 801c6aa:	3710      	adds	r7, #16
 801c6ac:	46bd      	mov	sp, r7
 801c6ae:	bd80      	pop	{r7, pc}

0801c6b0 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801c6b0:	b580      	push	{r7, lr}
 801c6b2:	b084      	sub	sp, #16
 801c6b4:	af00      	add	r7, sp, #0
 801c6b6:	6078      	str	r0, [r7, #4]
 801c6b8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c6ba:	687b      	ldr	r3, [r7, #4]
 801c6bc:	685b      	ldr	r3, [r3, #4]
 801c6be:	60fb      	str	r3, [r7, #12]
 801c6c0:	68fb      	ldr	r3, [r7, #12]
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	d016      	beq.n	801c6f4 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 801c6c6:	68fb      	ldr	r3, [r7, #12]
 801c6c8:	681a      	ldr	r2, [r3, #0]
 801c6ca:	68fb      	ldr	r3, [r7, #12]
 801c6cc:	681b      	ldr	r3, [r3, #0]
 801c6ce:	681b      	ldr	r3, [r3, #0]
 801c6d0:	33b8      	adds	r3, #184	; 0xb8
 801c6d2:	681b      	ldr	r3, [r3, #0]
 801c6d4:	6839      	ldr	r1, [r7, #0]
 801c6d6:	4610      	mov	r0, r2
 801c6d8:	4798      	blx	r3
 801c6da:	4603      	mov	r3, r0
 801c6dc:	f083 0301 	eor.w	r3, r3, #1
 801c6e0:	b2db      	uxtb	r3, r3
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d002      	beq.n	801c6ec <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801c6e6:	68fb      	ldr	r3, [r7, #12]
 801c6e8:	2200      	movs	r2, #0
 801c6ea:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	685b      	ldr	r3, [r3, #4]
 801c6f0:	60fb      	str	r3, [r7, #12]
 801c6f2:	e7e5      	b.n	801c6c0 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 801c6f4:	687b      	ldr	r3, [r7, #4]
 801c6f6:	681b      	ldr	r3, [r3, #0]
 801c6f8:	3388      	adds	r3, #136	; 0x88
 801c6fa:	681b      	ldr	r3, [r3, #0]
 801c6fc:	6878      	ldr	r0, [r7, #4]
 801c6fe:	4798      	blx	r3
}
 801c700:	bf00      	nop
 801c702:	3710      	adds	r7, #16
 801c704:	46bd      	mov	sp, r7
 801c706:	bd80      	pop	{r7, pc}

0801c708 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 801c708:	b580      	push	{r7, lr}
 801c70a:	b084      	sub	sp, #16
 801c70c:	af00      	add	r7, sp, #0
 801c70e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	685b      	ldr	r3, [r3, #4]
 801c714:	60fb      	str	r3, [r7, #12]
 801c716:	68fb      	ldr	r3, [r7, #12]
 801c718:	2b00      	cmp	r3, #0
 801c71a:	d015      	beq.n	801c748 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801c71c:	68fb      	ldr	r3, [r7, #12]
 801c71e:	681a      	ldr	r2, [r3, #0]
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	681b      	ldr	r3, [r3, #0]
 801c724:	681b      	ldr	r3, [r3, #0]
 801c726:	33d4      	adds	r3, #212	; 0xd4
 801c728:	681b      	ldr	r3, [r3, #0]
 801c72a:	4610      	mov	r0, r2
 801c72c:	4798      	blx	r3
 801c72e:	4603      	mov	r3, r0
 801c730:	f083 0301 	eor.w	r3, r3, #1
 801c734:	b2db      	uxtb	r3, r3
 801c736:	2b00      	cmp	r3, #0
 801c738:	d002      	beq.n	801c740 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801c73a:	68fb      	ldr	r3, [r7, #12]
 801c73c:	2200      	movs	r2, #0
 801c73e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	685b      	ldr	r3, [r3, #4]
 801c744:	60fb      	str	r3, [r7, #12]
 801c746:	e7e6      	b.n	801c716 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	681b      	ldr	r3, [r3, #0]
 801c74c:	3388      	adds	r3, #136	; 0x88
 801c74e:	681b      	ldr	r3, [r3, #0]
 801c750:	6878      	ldr	r0, [r7, #4]
 801c752:	4798      	blx	r3
}
 801c754:	bf00      	nop
 801c756:	3710      	adds	r7, #16
 801c758:	46bd      	mov	sp, r7
 801c75a:	bd80      	pop	{r7, pc}

0801c75c <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 801c75c:	b580      	push	{r7, lr}
 801c75e:	b084      	sub	sp, #16
 801c760:	af00      	add	r7, sp, #0
 801c762:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	685b      	ldr	r3, [r3, #4]
 801c768:	60fb      	str	r3, [r7, #12]
 801c76a:	68fb      	ldr	r3, [r7, #12]
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	d01b      	beq.n	801c7a8 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	681a      	ldr	r2, [r3, #0]
 801c774:	68fb      	ldr	r3, [r7, #12]
 801c776:	681b      	ldr	r3, [r3, #0]
 801c778:	681b      	ldr	r3, [r3, #0]
 801c77a:	33c8      	adds	r3, #200	; 0xc8
 801c77c:	681b      	ldr	r3, [r3, #0]
 801c77e:	4610      	mov	r0, r2
 801c780:	4798      	blx	r3
 801c782:	4603      	mov	r3, r0
 801c784:	2b00      	cmp	r3, #0
 801c786:	d00b      	beq.n	801c7a0 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	681a      	ldr	r2, [r3, #0]
 801c78c:	68fb      	ldr	r3, [r7, #12]
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	681b      	ldr	r3, [r3, #0]
 801c792:	33ec      	adds	r3, #236	; 0xec
 801c794:	681b      	ldr	r3, [r3, #0]
 801c796:	4610      	mov	r0, r2
 801c798:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 801c79a:	68fb      	ldr	r3, [r7, #12]
 801c79c:	2200      	movs	r2, #0
 801c79e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c7a0:	68fb      	ldr	r3, [r7, #12]
 801c7a2:	685b      	ldr	r3, [r3, #4]
 801c7a4:	60fb      	str	r3, [r7, #12]
 801c7a6:	e7e0      	b.n	801c76a <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	681b      	ldr	r3, [r3, #0]
 801c7ac:	3388      	adds	r3, #136	; 0x88
 801c7ae:	681b      	ldr	r3, [r3, #0]
 801c7b0:	6878      	ldr	r0, [r7, #4]
 801c7b2:	4798      	blx	r3
}
 801c7b4:	bf00      	nop
 801c7b6:	3710      	adds	r7, #16
 801c7b8:	46bd      	mov	sp, r7
 801c7ba:	bd80      	pop	{r7, pc}

0801c7bc <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801c7bc:	b580      	push	{r7, lr}
 801c7be:	b084      	sub	sp, #16
 801c7c0:	af00      	add	r7, sp, #0
 801c7c2:	6078      	str	r0, [r7, #4]
 801c7c4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c7c6:	687b      	ldr	r3, [r7, #4]
 801c7c8:	685b      	ldr	r3, [r3, #4]
 801c7ca:	60fb      	str	r3, [r7, #12]
 801c7cc:	68fb      	ldr	r3, [r7, #12]
 801c7ce:	2b00      	cmp	r3, #0
 801c7d0:	d016      	beq.n	801c800 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801c7d2:	68fb      	ldr	r3, [r7, #12]
 801c7d4:	681a      	ldr	r2, [r3, #0]
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	681b      	ldr	r3, [r3, #0]
 801c7da:	681b      	ldr	r3, [r3, #0]
 801c7dc:	33a8      	adds	r3, #168	; 0xa8
 801c7de:	681b      	ldr	r3, [r3, #0]
 801c7e0:	6839      	ldr	r1, [r7, #0]
 801c7e2:	4610      	mov	r0, r2
 801c7e4:	4798      	blx	r3
 801c7e6:	4603      	mov	r3, r0
 801c7e8:	f083 0301 	eor.w	r3, r3, #1
 801c7ec:	b2db      	uxtb	r3, r3
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	d002      	beq.n	801c7f8 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801c7f2:	68fb      	ldr	r3, [r7, #12]
 801c7f4:	2200      	movs	r2, #0
 801c7f6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c7f8:	68fb      	ldr	r3, [r7, #12]
 801c7fa:	685b      	ldr	r3, [r3, #4]
 801c7fc:	60fb      	str	r3, [r7, #12]
 801c7fe:	e7e5      	b.n	801c7cc <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801c800:	687b      	ldr	r3, [r7, #4]
 801c802:	681b      	ldr	r3, [r3, #0]
 801c804:	3388      	adds	r3, #136	; 0x88
 801c806:	681b      	ldr	r3, [r3, #0]
 801c808:	6878      	ldr	r0, [r7, #4]
 801c80a:	4798      	blx	r3
}
 801c80c:	bf00      	nop
 801c80e:	3710      	adds	r7, #16
 801c810:	46bd      	mov	sp, r7
 801c812:	bd80      	pop	{r7, pc}

0801c814 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 801c814:	b580      	push	{r7, lr}
 801c816:	b084      	sub	sp, #16
 801c818:	af00      	add	r7, sp, #0
 801c81a:	6078      	str	r0, [r7, #4]
 801c81c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c81e:	687b      	ldr	r3, [r7, #4]
 801c820:	685b      	ldr	r3, [r3, #4]
 801c822:	60fb      	str	r3, [r7, #12]
 801c824:	68fb      	ldr	r3, [r7, #12]
 801c826:	2b00      	cmp	r3, #0
 801c828:	d016      	beq.n	801c858 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801c82a:	68fb      	ldr	r3, [r7, #12]
 801c82c:	681a      	ldr	r2, [r3, #0]
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	681b      	ldr	r3, [r3, #0]
 801c834:	33b0      	adds	r3, #176	; 0xb0
 801c836:	681b      	ldr	r3, [r3, #0]
 801c838:	6839      	ldr	r1, [r7, #0]
 801c83a:	4610      	mov	r0, r2
 801c83c:	4798      	blx	r3
 801c83e:	4603      	mov	r3, r0
 801c840:	f083 0301 	eor.w	r3, r3, #1
 801c844:	b2db      	uxtb	r3, r3
 801c846:	2b00      	cmp	r3, #0
 801c848:	d002      	beq.n	801c850 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801c84a:	68fb      	ldr	r3, [r7, #12]
 801c84c:	2200      	movs	r2, #0
 801c84e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c850:	68fb      	ldr	r3, [r7, #12]
 801c852:	685b      	ldr	r3, [r3, #4]
 801c854:	60fb      	str	r3, [r7, #12]
 801c856:	e7e5      	b.n	801c824 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801c858:	687b      	ldr	r3, [r7, #4]
 801c85a:	681b      	ldr	r3, [r3, #0]
 801c85c:	3388      	adds	r3, #136	; 0x88
 801c85e:	681b      	ldr	r3, [r3, #0]
 801c860:	6878      	ldr	r0, [r7, #4]
 801c862:	4798      	blx	r3
}
 801c864:	bf00      	nop
 801c866:	3710      	adds	r7, #16
 801c868:	46bd      	mov	sp, r7
 801c86a:	bd80      	pop	{r7, pc}

0801c86c <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 801c86c:	b580      	push	{r7, lr}
 801c86e:	b084      	sub	sp, #16
 801c870:	af00      	add	r7, sp, #0
 801c872:	6078      	str	r0, [r7, #4]
 801c874:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c876:	687b      	ldr	r3, [r7, #4]
 801c878:	685b      	ldr	r3, [r3, #4]
 801c87a:	60fb      	str	r3, [r7, #12]
 801c87c:	68fb      	ldr	r3, [r7, #12]
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d016      	beq.n	801c8b0 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	681a      	ldr	r2, [r3, #0]
 801c886:	68fb      	ldr	r3, [r7, #12]
 801c888:	681b      	ldr	r3, [r3, #0]
 801c88a:	681b      	ldr	r3, [r3, #0]
 801c88c:	33ac      	adds	r3, #172	; 0xac
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	6839      	ldr	r1, [r7, #0]
 801c892:	4610      	mov	r0, r2
 801c894:	4798      	blx	r3
 801c896:	4603      	mov	r3, r0
 801c898:	f083 0301 	eor.w	r3, r3, #1
 801c89c:	b2db      	uxtb	r3, r3
 801c89e:	2b00      	cmp	r3, #0
 801c8a0:	d002      	beq.n	801c8a8 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801c8a2:	68fb      	ldr	r3, [r7, #12]
 801c8a4:	2200      	movs	r2, #0
 801c8a6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c8a8:	68fb      	ldr	r3, [r7, #12]
 801c8aa:	685b      	ldr	r3, [r3, #4]
 801c8ac:	60fb      	str	r3, [r7, #12]
 801c8ae:	e7e5      	b.n	801c87c <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801c8b0:	687b      	ldr	r3, [r7, #4]
 801c8b2:	681b      	ldr	r3, [r3, #0]
 801c8b4:	3388      	adds	r3, #136	; 0x88
 801c8b6:	681b      	ldr	r3, [r3, #0]
 801c8b8:	6878      	ldr	r0, [r7, #4]
 801c8ba:	4798      	blx	r3
}
 801c8bc:	bf00      	nop
 801c8be:	3710      	adds	r7, #16
 801c8c0:	46bd      	mov	sp, r7
 801c8c2:	bd80      	pop	{r7, pc}

0801c8c4 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801c8c4:	b580      	push	{r7, lr}
 801c8c6:	b084      	sub	sp, #16
 801c8c8:	af00      	add	r7, sp, #0
 801c8ca:	6078      	str	r0, [r7, #4]
 801c8cc:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c8ce:	687b      	ldr	r3, [r7, #4]
 801c8d0:	685b      	ldr	r3, [r3, #4]
 801c8d2:	60fb      	str	r3, [r7, #12]
 801c8d4:	68fb      	ldr	r3, [r7, #12]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d016      	beq.n	801c908 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	681a      	ldr	r2, [r3, #0]
 801c8de:	68fb      	ldr	r3, [r7, #12]
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	681b      	ldr	r3, [r3, #0]
 801c8e4:	33b4      	adds	r3, #180	; 0xb4
 801c8e6:	681b      	ldr	r3, [r3, #0]
 801c8e8:	6839      	ldr	r1, [r7, #0]
 801c8ea:	4610      	mov	r0, r2
 801c8ec:	4798      	blx	r3
 801c8ee:	4603      	mov	r3, r0
 801c8f0:	f083 0301 	eor.w	r3, r3, #1
 801c8f4:	b2db      	uxtb	r3, r3
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	d002      	beq.n	801c900 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	2200      	movs	r2, #0
 801c8fe:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c900:	68fb      	ldr	r3, [r7, #12]
 801c902:	685b      	ldr	r3, [r3, #4]
 801c904:	60fb      	str	r3, [r7, #12]
 801c906:	e7e5      	b.n	801c8d4 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801c908:	687b      	ldr	r3, [r7, #4]
 801c90a:	681b      	ldr	r3, [r3, #0]
 801c90c:	3388      	adds	r3, #136	; 0x88
 801c90e:	681b      	ldr	r3, [r3, #0]
 801c910:	6878      	ldr	r0, [r7, #4]
 801c912:	4798      	blx	r3
}
 801c914:	bf00      	nop
 801c916:	3710      	adds	r7, #16
 801c918:	46bd      	mov	sp, r7
 801c91a:	bd80      	pop	{r7, pc}

0801c91c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801c91c:	b580      	push	{r7, lr}
 801c91e:	b084      	sub	sp, #16
 801c920:	af00      	add	r7, sp, #0
 801c922:	6078      	str	r0, [r7, #4]
 801c924:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c926:	687b      	ldr	r3, [r7, #4]
 801c928:	685b      	ldr	r3, [r3, #4]
 801c92a:	60fb      	str	r3, [r7, #12]
 801c92c:	68fb      	ldr	r3, [r7, #12]
 801c92e:	2b00      	cmp	r3, #0
 801c930:	d016      	beq.n	801c960 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801c932:	68fb      	ldr	r3, [r7, #12]
 801c934:	681a      	ldr	r2, [r3, #0]
 801c936:	68fb      	ldr	r3, [r7, #12]
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	681b      	ldr	r3, [r3, #0]
 801c93c:	33bc      	adds	r3, #188	; 0xbc
 801c93e:	681b      	ldr	r3, [r3, #0]
 801c940:	6839      	ldr	r1, [r7, #0]
 801c942:	4610      	mov	r0, r2
 801c944:	4798      	blx	r3
 801c946:	4603      	mov	r3, r0
 801c948:	f083 0301 	eor.w	r3, r3, #1
 801c94c:	b2db      	uxtb	r3, r3
 801c94e:	2b00      	cmp	r3, #0
 801c950:	d002      	beq.n	801c958 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801c952:	68fb      	ldr	r3, [r7, #12]
 801c954:	2200      	movs	r2, #0
 801c956:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c958:	68fb      	ldr	r3, [r7, #12]
 801c95a:	685b      	ldr	r3, [r3, #4]
 801c95c:	60fb      	str	r3, [r7, #12]
 801c95e:	e7e5      	b.n	801c92c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801c960:	687b      	ldr	r3, [r7, #4]
 801c962:	681b      	ldr	r3, [r3, #0]
 801c964:	3388      	adds	r3, #136	; 0x88
 801c966:	681b      	ldr	r3, [r3, #0]
 801c968:	6878      	ldr	r0, [r7, #4]
 801c96a:	4798      	blx	r3
}
 801c96c:	bf00      	nop
 801c96e:	3710      	adds	r7, #16
 801c970:	46bd      	mov	sp, r7
 801c972:	bd80      	pop	{r7, pc}

0801c974 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801c974:	b580      	push	{r7, lr}
 801c976:	b084      	sub	sp, #16
 801c978:	af00      	add	r7, sp, #0
 801c97a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	685b      	ldr	r3, [r3, #4]
 801c980:	60fb      	str	r3, [r7, #12]
 801c982:	68fb      	ldr	r3, [r7, #12]
 801c984:	2b00      	cmp	r3, #0
 801c986:	d01d      	beq.n	801c9c4 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801c988:	68fb      	ldr	r3, [r7, #12]
 801c98a:	681a      	ldr	r2, [r3, #0]
 801c98c:	68fb      	ldr	r3, [r7, #12]
 801c98e:	681b      	ldr	r3, [r3, #0]
 801c990:	681b      	ldr	r3, [r3, #0]
 801c992:	33c8      	adds	r3, #200	; 0xc8
 801c994:	681b      	ldr	r3, [r3, #0]
 801c996:	4610      	mov	r0, r2
 801c998:	4798      	blx	r3
 801c99a:	4603      	mov	r3, r0
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d00d      	beq.n	801c9bc <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801c9a0:	68fb      	ldr	r3, [r7, #12]
 801c9a2:	681b      	ldr	r3, [r3, #0]
 801c9a4:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801c9a6:	68fb      	ldr	r3, [r7, #12]
 801c9a8:	2200      	movs	r2, #0
 801c9aa:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	681b      	ldr	r3, [r3, #0]
 801c9b0:	3388      	adds	r3, #136	; 0x88
 801c9b2:	681b      	ldr	r3, [r3, #0]
 801c9b4:	6878      	ldr	r0, [r7, #4]
 801c9b6:	4798      	blx	r3
            return matchingCall;
 801c9b8:	68bb      	ldr	r3, [r7, #8]
 801c9ba:	e004      	b.n	801c9c6 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c9bc:	68fb      	ldr	r3, [r7, #12]
 801c9be:	685b      	ldr	r3, [r3, #4]
 801c9c0:	60fb      	str	r3, [r7, #12]
 801c9c2:	e7de      	b.n	801c982 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801c9c4:	2300      	movs	r3, #0
}
 801c9c6:	4618      	mov	r0, r3
 801c9c8:	3710      	adds	r7, #16
 801c9ca:	46bd      	mov	sp, r7
 801c9cc:	bd80      	pop	{r7, pc}

0801c9ce <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801c9ce:	b580      	push	{r7, lr}
 801c9d0:	b084      	sub	sp, #16
 801c9d2:	af00      	add	r7, sp, #0
 801c9d4:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	685b      	ldr	r3, [r3, #4]
 801c9da:	60fb      	str	r3, [r7, #12]
 801c9dc:	68fb      	ldr	r3, [r7, #12]
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	d012      	beq.n	801ca08 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801c9e2:	68fb      	ldr	r3, [r7, #12]
 801c9e4:	681a      	ldr	r2, [r3, #0]
 801c9e6:	68fb      	ldr	r3, [r7, #12]
 801c9e8:	681b      	ldr	r3, [r3, #0]
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	33cc      	adds	r3, #204	; 0xcc
 801c9ee:	681b      	ldr	r3, [r3, #0]
 801c9f0:	4610      	mov	r0, r2
 801c9f2:	4798      	blx	r3
 801c9f4:	4603      	mov	r3, r0
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	d002      	beq.n	801ca00 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801c9fa:	68fb      	ldr	r3, [r7, #12]
 801c9fc:	681b      	ldr	r3, [r3, #0]
 801c9fe:	e004      	b.n	801ca0a <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801ca00:	68fb      	ldr	r3, [r7, #12]
 801ca02:	685b      	ldr	r3, [r3, #4]
 801ca04:	60fb      	str	r3, [r7, #12]
 801ca06:	e7e9      	b.n	801c9dc <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801ca08:	2300      	movs	r3, #0
}
 801ca0a:	4618      	mov	r0, r3
 801ca0c:	3710      	adds	r7, #16
 801ca0e:	46bd      	mov	sp, r7
 801ca10:	bd80      	pop	{r7, pc}

0801ca12 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801ca12:	b580      	push	{r7, lr}
 801ca14:	b084      	sub	sp, #16
 801ca16:	af00      	add	r7, sp, #0
 801ca18:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801ca1a:	687b      	ldr	r3, [r7, #4]
 801ca1c:	685b      	ldr	r3, [r3, #4]
 801ca1e:	60fb      	str	r3, [r7, #12]
 801ca20:	68fb      	ldr	r3, [r7, #12]
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d01d      	beq.n	801ca62 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801ca26:	68fb      	ldr	r3, [r7, #12]
 801ca28:	681a      	ldr	r2, [r3, #0]
 801ca2a:	68fb      	ldr	r3, [r7, #12]
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	681b      	ldr	r3, [r3, #0]
 801ca30:	33cc      	adds	r3, #204	; 0xcc
 801ca32:	681b      	ldr	r3, [r3, #0]
 801ca34:	4610      	mov	r0, r2
 801ca36:	4798      	blx	r3
 801ca38:	4603      	mov	r3, r0
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	d00d      	beq.n	801ca5a <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801ca3e:	68fb      	ldr	r3, [r7, #12]
 801ca40:	681b      	ldr	r3, [r3, #0]
 801ca42:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801ca44:	68fb      	ldr	r3, [r7, #12]
 801ca46:	2200      	movs	r2, #0
 801ca48:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	681b      	ldr	r3, [r3, #0]
 801ca4e:	3388      	adds	r3, #136	; 0x88
 801ca50:	681b      	ldr	r3, [r3, #0]
 801ca52:	6878      	ldr	r0, [r7, #4]
 801ca54:	4798      	blx	r3
            return matchingCall;
 801ca56:	68bb      	ldr	r3, [r7, #8]
 801ca58:	e004      	b.n	801ca64 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801ca5a:	68fb      	ldr	r3, [r7, #12]
 801ca5c:	685b      	ldr	r3, [r3, #4]
 801ca5e:	60fb      	str	r3, [r7, #12]
 801ca60:	e7de      	b.n	801ca20 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801ca62:	2300      	movs	r3, #0
}
 801ca64:	4618      	mov	r0, r3
 801ca66:	3710      	adds	r7, #16
 801ca68:	46bd      	mov	sp, r7
 801ca6a:	bd80      	pop	{r7, pc}

0801ca6c <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801ca6c:	b580      	push	{r7, lr}
 801ca6e:	b086      	sub	sp, #24
 801ca70:	af00      	add	r7, sp, #0
 801ca72:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801ca74:	687b      	ldr	r3, [r7, #4]
 801ca76:	685b      	ldr	r3, [r3, #4]
 801ca78:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801ca7a:	2300      	movs	r3, #0
 801ca7c:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801ca7e:	2300      	movs	r3, #0
 801ca80:	60fb      	str	r3, [r7, #12]

    while (current) {
 801ca82:	697b      	ldr	r3, [r7, #20]
 801ca84:	2b00      	cmp	r3, #0
 801ca86:	d024      	beq.n	801cad2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801ca88:	697b      	ldr	r3, [r7, #20]
 801ca8a:	681b      	ldr	r3, [r3, #0]
 801ca8c:	2b00      	cmp	r3, #0
 801ca8e:	d11a      	bne.n	801cac6 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801ca90:	697b      	ldr	r3, [r7, #20]
 801ca92:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801ca94:	693b      	ldr	r3, [r7, #16]
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	d106      	bne.n	801caa8 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801ca9a:	697b      	ldr	r3, [r7, #20]
 801ca9c:	685b      	ldr	r3, [r3, #4]
 801ca9e:	617b      	str	r3, [r7, #20]
 801caa0:	687b      	ldr	r3, [r7, #4]
 801caa2:	697a      	ldr	r2, [r7, #20]
 801caa4:	605a      	str	r2, [r3, #4]
 801caa6:	e006      	b.n	801cab6 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801caa8:	697b      	ldr	r3, [r7, #20]
 801caaa:	685a      	ldr	r2, [r3, #4]
 801caac:	693b      	ldr	r3, [r7, #16]
 801caae:	605a      	str	r2, [r3, #4]
 801cab0:	693b      	ldr	r3, [r7, #16]
 801cab2:	685b      	ldr	r3, [r3, #4]
 801cab4:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801cab6:	68fb      	ldr	r3, [r7, #12]
 801cab8:	2b00      	cmp	r3, #0
 801caba:	d0e2      	beq.n	801ca82 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801cabc:	2108      	movs	r1, #8
 801cabe:	4618      	mov	r0, r3
 801cac0:	f7ee f82e 	bl	800ab20 <_ZdlPvj>
 801cac4:	e7dd      	b.n	801ca82 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801cac6:	697b      	ldr	r3, [r7, #20]
 801cac8:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801caca:	697b      	ldr	r3, [r7, #20]
 801cacc:	685b      	ldr	r3, [r3, #4]
 801cace:	617b      	str	r3, [r7, #20]
    while (current) {
 801cad0:	e7d7      	b.n	801ca82 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801cad2:	bf00      	nop
 801cad4:	3718      	adds	r7, #24
 801cad6:	46bd      	mov	sp, r7
 801cad8:	bd80      	pop	{r7, pc}

0801cada <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801cada:	b580      	push	{r7, lr}
 801cadc:	b084      	sub	sp, #16
 801cade:	af00      	add	r7, sp, #0
 801cae0:	6078      	str	r0, [r7, #4]
    while (head_) {
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	685b      	ldr	r3, [r3, #4]
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	d019      	beq.n	801cb1e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	685b      	ldr	r3, [r3, #4]
 801caee:	685b      	ldr	r3, [r3, #4]
 801caf0:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801caf2:	687b      	ldr	r3, [r7, #4]
 801caf4:	685b      	ldr	r3, [r3, #4]
 801caf6:	681b      	ldr	r3, [r3, #0]
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d004      	beq.n	801cb06 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801cafc:	681a      	ldr	r2, [r3, #0]
 801cafe:	3204      	adds	r2, #4
 801cb00:	6812      	ldr	r2, [r2, #0]
 801cb02:	4618      	mov	r0, r3
 801cb04:	4790      	blx	r2
        delete head_;
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	685b      	ldr	r3, [r3, #4]
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d003      	beq.n	801cb16 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801cb0e:	2108      	movs	r1, #8
 801cb10:	4618      	mov	r0, r3
 801cb12:	f7ee f805 	bl	800ab20 <_ZdlPvj>
        head_ = next;
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	68fa      	ldr	r2, [r7, #12]
 801cb1a:	605a      	str	r2, [r3, #4]
    while (head_) {
 801cb1c:	e7e1      	b.n	801cae2 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801cb1e:	bf00      	nop
 801cb20:	3710      	adds	r7, #16
 801cb22:	46bd      	mov	sp, r7
 801cb24:	bd80      	pop	{r7, pc}

0801cb26 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801cb26:	b580      	push	{r7, lr}
 801cb28:	b084      	sub	sp, #16
 801cb2a:	af00      	add	r7, sp, #0
 801cb2c:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	685b      	ldr	r3, [r3, #4]
 801cb32:	60fb      	str	r3, [r7, #12]
 801cb34:	68fb      	ldr	r3, [r7, #12]
 801cb36:	2b00      	cmp	r3, #0
 801cb38:	d00c      	beq.n	801cb54 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801cb3a:	68fb      	ldr	r3, [r7, #12]
 801cb3c:	681a      	ldr	r2, [r3, #0]
 801cb3e:	68fb      	ldr	r3, [r7, #12]
 801cb40:	681b      	ldr	r3, [r3, #0]
 801cb42:	681b      	ldr	r3, [r3, #0]
 801cb44:	33ec      	adds	r3, #236	; 0xec
 801cb46:	681b      	ldr	r3, [r3, #0]
 801cb48:	4610      	mov	r0, r2
 801cb4a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cb4c:	68fb      	ldr	r3, [r7, #12]
 801cb4e:	685b      	ldr	r3, [r3, #4]
 801cb50:	60fb      	str	r3, [r7, #12]
 801cb52:	e7ef      	b.n	801cb34 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801cb54:	bf00      	nop
 801cb56:	3710      	adds	r7, #16
 801cb58:	46bd      	mov	sp, r7
 801cb5a:	bd80      	pop	{r7, pc}

0801cb5c <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801cb5c:	b580      	push	{r7, lr}
 801cb5e:	b084      	sub	sp, #16
 801cb60:	af00      	add	r7, sp, #0
 801cb62:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	685b      	ldr	r3, [r3, #4]
 801cb68:	60fb      	str	r3, [r7, #12]
 801cb6a:	68fb      	ldr	r3, [r7, #12]
 801cb6c:	2b00      	cmp	r3, #0
 801cb6e:	d00c      	beq.n	801cb8a <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801cb70:	68fb      	ldr	r3, [r7, #12]
 801cb72:	681a      	ldr	r2, [r3, #0]
 801cb74:	68fb      	ldr	r3, [r7, #12]
 801cb76:	681b      	ldr	r3, [r3, #0]
 801cb78:	681b      	ldr	r3, [r3, #0]
 801cb7a:	33e8      	adds	r3, #232	; 0xe8
 801cb7c:	681b      	ldr	r3, [r3, #0]
 801cb7e:	4610      	mov	r0, r2
 801cb80:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cb82:	68fb      	ldr	r3, [r7, #12]
 801cb84:	685b      	ldr	r3, [r3, #4]
 801cb86:	60fb      	str	r3, [r7, #12]
 801cb88:	e7ef      	b.n	801cb6a <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801cb8a:	bf00      	nop
 801cb8c:	3710      	adds	r7, #16
 801cb8e:	46bd      	mov	sp, r7
 801cb90:	bd80      	pop	{r7, pc}

0801cb92 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801cb92:	b580      	push	{r7, lr}
 801cb94:	b084      	sub	sp, #16
 801cb96:	af00      	add	r7, sp, #0
 801cb98:	6078      	str	r0, [r7, #4]
 801cb9a:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	685b      	ldr	r3, [r3, #4]
 801cba0:	60fb      	str	r3, [r7, #12]
 801cba2:	68fb      	ldr	r3, [r7, #12]
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	d00d      	beq.n	801cbc4 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801cba8:	68fb      	ldr	r3, [r7, #12]
 801cbaa:	681a      	ldr	r2, [r3, #0]
 801cbac:	68fb      	ldr	r3, [r7, #12]
 801cbae:	681b      	ldr	r3, [r3, #0]
 801cbb0:	681b      	ldr	r3, [r3, #0]
 801cbb2:	33dc      	adds	r3, #220	; 0xdc
 801cbb4:	681b      	ldr	r3, [r3, #0]
 801cbb6:	6839      	ldr	r1, [r7, #0]
 801cbb8:	4610      	mov	r0, r2
 801cbba:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cbbc:	68fb      	ldr	r3, [r7, #12]
 801cbbe:	685b      	ldr	r3, [r3, #4]
 801cbc0:	60fb      	str	r3, [r7, #12]
 801cbc2:	e7ee      	b.n	801cba2 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801cbc4:	bf00      	nop
 801cbc6:	3710      	adds	r7, #16
 801cbc8:	46bd      	mov	sp, r7
 801cbca:	bd80      	pop	{r7, pc}

0801cbcc <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801cbcc:	b580      	push	{r7, lr}
 801cbce:	b084      	sub	sp, #16
 801cbd0:	af00      	add	r7, sp, #0
 801cbd2:	6078      	str	r0, [r7, #4]
 801cbd4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	685b      	ldr	r3, [r3, #4]
 801cbda:	60fb      	str	r3, [r7, #12]
 801cbdc:	68fb      	ldr	r3, [r7, #12]
 801cbde:	2b00      	cmp	r3, #0
 801cbe0:	d00d      	beq.n	801cbfe <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801cbe2:	68fb      	ldr	r3, [r7, #12]
 801cbe4:	681a      	ldr	r2, [r3, #0]
 801cbe6:	68fb      	ldr	r3, [r7, #12]
 801cbe8:	681b      	ldr	r3, [r3, #0]
 801cbea:	681b      	ldr	r3, [r3, #0]
 801cbec:	33e0      	adds	r3, #224	; 0xe0
 801cbee:	681b      	ldr	r3, [r3, #0]
 801cbf0:	6839      	ldr	r1, [r7, #0]
 801cbf2:	4610      	mov	r0, r2
 801cbf4:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cbf6:	68fb      	ldr	r3, [r7, #12]
 801cbf8:	685b      	ldr	r3, [r3, #4]
 801cbfa:	60fb      	str	r3, [r7, #12]
 801cbfc:	e7ee      	b.n	801cbdc <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801cbfe:	bf00      	nop
 801cc00:	3710      	adds	r7, #16
 801cc02:	46bd      	mov	sp, r7
 801cc04:	bd80      	pop	{r7, pc}
	...

0801cc08 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801cc08:	b590      	push	{r4, r7, lr}
 801cc0a:	b087      	sub	sp, #28
 801cc0c:	af00      	add	r7, sp, #0
 801cc0e:	60f8      	str	r0, [r7, #12]
 801cc10:	60b9      	str	r1, [r7, #8]
 801cc12:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801cc14:	68b9      	ldr	r1, [r7, #8]
 801cc16:	68f8      	ldr	r0, [r7, #12]
 801cc18:	f7f0 fb85 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801cc1c:	f107 0310 	add.w	r3, r7, #16
 801cc20:	490f      	ldr	r1, [pc, #60]	; (801cc60 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801cc22:	4618      	mov	r0, r3
 801cc24:	f7f0 fb2b 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801cc28:	f107 0310 	add.w	r3, r7, #16
 801cc2c:	4619      	mov	r1, r3
 801cc2e:	68f8      	ldr	r0, [r7, #12]
 801cc30:	f7f0 fee9 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801cc34:	4603      	mov	r3, r0
 801cc36:	461c      	mov	r4, r3
 801cc38:	f107 0310 	add.w	r3, r7, #16
 801cc3c:	4618      	mov	r0, r3
 801cc3e:	f7f0 fed6 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801cc42:	2c00      	cmp	r4, #0
 801cc44:	d007      	beq.n	801cc56 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801cc46:	6879      	ldr	r1, [r7, #4]
 801cc48:	68f8      	ldr	r0, [r7, #12]
 801cc4a:	f7f0 ff4d 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801cc4e:	4905      	ldr	r1, [pc, #20]	; (801cc64 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801cc50:	68f8      	ldr	r0, [r7, #12]
 801cc52:	f7f0 ff5b 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801cc56:	bf00      	nop
}
 801cc58:	68f8      	ldr	r0, [r7, #12]
 801cc5a:	371c      	adds	r7, #28
 801cc5c:	46bd      	mov	sp, r7
 801cc5e:	bd90      	pop	{r4, r7, pc}
 801cc60:	0802693c 	.word	0x0802693c
 801cc64:	08026940 	.word	0x08026940

0801cc68 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801cc68:	b590      	push	{r4, r7, lr}
 801cc6a:	b087      	sub	sp, #28
 801cc6c:	af00      	add	r7, sp, #0
 801cc6e:	60f8      	str	r0, [r7, #12]
 801cc70:	60b9      	str	r1, [r7, #8]
 801cc72:	607a      	str	r2, [r7, #4]
 801cc74:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801cc76:	68b9      	ldr	r1, [r7, #8]
 801cc78:	68f8      	ldr	r0, [r7, #12]
 801cc7a:	f7f0 fb54 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801cc7e:	f107 0310 	add.w	r3, r7, #16
 801cc82:	4912      	ldr	r1, [pc, #72]	; (801cccc <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801cc84:	4618      	mov	r0, r3
 801cc86:	f7f0 fafa 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801cc8a:	f107 0310 	add.w	r3, r7, #16
 801cc8e:	4619      	mov	r1, r3
 801cc90:	68f8      	ldr	r0, [r7, #12]
 801cc92:	f7f0 fefd 	bl	800da90 <_ZneRK12SimpleStringS1_>
 801cc96:	4603      	mov	r3, r0
 801cc98:	461c      	mov	r4, r3
 801cc9a:	f107 0310 	add.w	r3, r7, #16
 801cc9e:	4618      	mov	r0, r3
 801cca0:	f7f0 fea5 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801cca4:	2c00      	cmp	r4, #0
 801cca6:	d003      	beq.n	801ccb0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801cca8:	4909      	ldr	r1, [pc, #36]	; (801ccd0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801ccaa:	68f8      	ldr	r0, [r7, #12]
 801ccac:	f7f0 ff2e 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801ccb0:	6879      	ldr	r1, [r7, #4]
 801ccb2:	68f8      	ldr	r0, [r7, #12]
 801ccb4:	f7f0 ff18 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801ccb8:	6839      	ldr	r1, [r7, #0]
 801ccba:	68f8      	ldr	r0, [r7, #12]
 801ccbc:	f7f0 ff14 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
    return str;
 801ccc0:	bf00      	nop
}
 801ccc2:	68f8      	ldr	r0, [r7, #12]
 801ccc4:	371c      	adds	r7, #28
 801ccc6:	46bd      	mov	sp, r7
 801ccc8:	bd90      	pop	{r4, r7, pc}
 801ccca:	bf00      	nop
 801cccc:	0802693c 	.word	0x0802693c
 801ccd0:	08026948 	.word	0x08026948

0801ccd4 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801ccd4:	b580      	push	{r7, lr}
 801ccd6:	b08c      	sub	sp, #48	; 0x30
 801ccd8:	af00      	add	r7, sp, #0
 801ccda:	60f8      	str	r0, [r7, #12]
 801ccdc:	60b9      	str	r1, [r7, #8]
 801ccde:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801cce0:	f107 0314 	add.w	r3, r7, #20
 801cce4:	4929      	ldr	r1, [pc, #164]	; (801cd8c <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801cce6:	4618      	mov	r0, r3
 801cce8:	f7f0 fac9 	bl	800d27e <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ccec:	68bb      	ldr	r3, [r7, #8]
 801ccee:	685b      	ldr	r3, [r3, #4]
 801ccf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ccf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccf4:	2b00      	cmp	r3, #0
 801ccf6:	d038      	beq.n	801cd6a <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801ccf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccfa:	681a      	ldr	r2, [r3, #0]
 801ccfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccfe:	681b      	ldr	r3, [r3, #0]
 801cd00:	681b      	ldr	r3, [r3, #0]
 801cd02:	33c0      	adds	r3, #192	; 0xc0
 801cd04:	681b      	ldr	r3, [r3, #0]
 801cd06:	4610      	mov	r0, r2
 801cd08:	4798      	blx	r3
 801cd0a:	4603      	mov	r3, r0
 801cd0c:	f083 0301 	eor.w	r3, r3, #1
 801cd10:	b2db      	uxtb	r3, r3
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d025      	beq.n	801cd62 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801cd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd18:	6819      	ldr	r1, [r3, #0]
 801cd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd1c:	681b      	ldr	r3, [r3, #0]
 801cd1e:	681b      	ldr	r3, [r3, #0]
 801cd20:	33f0      	adds	r3, #240	; 0xf0
 801cd22:	681b      	ldr	r3, [r3, #0]
 801cd24:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801cd28:	4610      	mov	r0, r2
 801cd2a:	4798      	blx	r3
 801cd2c:	f107 001c 	add.w	r0, r7, #28
 801cd30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cd34:	f107 0114 	add.w	r1, r7, #20
 801cd38:	687a      	ldr	r2, [r7, #4]
 801cd3a:	f7ff ff95 	bl	801cc68 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801cd3e:	f107 021c 	add.w	r2, r7, #28
 801cd42:	f107 0314 	add.w	r3, r7, #20
 801cd46:	4611      	mov	r1, r2
 801cd48:	4618      	mov	r0, r3
 801cd4a:	f7f0 fb04 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801cd4e:	f107 031c 	add.w	r3, r7, #28
 801cd52:	4618      	mov	r0, r3
 801cd54:	f7f0 fe4b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801cd58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cd5c:	4618      	mov	r0, r3
 801cd5e:	f7f0 fe46 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd64:	685b      	ldr	r3, [r3, #4]
 801cd66:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cd68:	e7c3      	b.n	801ccf2 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801cd6a:	68fb      	ldr	r3, [r7, #12]
 801cd6c:	f107 0114 	add.w	r1, r7, #20
 801cd70:	687a      	ldr	r2, [r7, #4]
 801cd72:	4618      	mov	r0, r3
 801cd74:	f7ff ff48 	bl	801cc08 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801cd78:	f107 0314 	add.w	r3, r7, #20
 801cd7c:	4618      	mov	r0, r3
 801cd7e:	f7f0 fe36 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801cd82:	bf00      	nop
}
 801cd84:	68f8      	ldr	r0, [r7, #12]
 801cd86:	3730      	adds	r7, #48	; 0x30
 801cd88:	46bd      	mov	sp, r7
 801cd8a:	bd80      	pop	{r7, pc}
 801cd8c:	0802693c 	.word	0x0802693c

0801cd90 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801cd90:	b580      	push	{r7, lr}
 801cd92:	b08c      	sub	sp, #48	; 0x30
 801cd94:	af00      	add	r7, sp, #0
 801cd96:	60f8      	str	r0, [r7, #12]
 801cd98:	60b9      	str	r1, [r7, #8]
 801cd9a:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801cd9c:	f107 0314 	add.w	r3, r7, #20
 801cda0:	4928      	ldr	r1, [pc, #160]	; (801ce44 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801cda2:	4618      	mov	r0, r3
 801cda4:	f7f0 fa6b 	bl	800d27e <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cda8:	68bb      	ldr	r3, [r7, #8]
 801cdaa:	685b      	ldr	r3, [r3, #4]
 801cdac:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d035      	beq.n	801ce20 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801cdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdb6:	681a      	ldr	r2, [r3, #0]
 801cdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdba:	681b      	ldr	r3, [r3, #0]
 801cdbc:	681b      	ldr	r3, [r3, #0]
 801cdbe:	33c0      	adds	r3, #192	; 0xc0
 801cdc0:	681b      	ldr	r3, [r3, #0]
 801cdc2:	4610      	mov	r0, r2
 801cdc4:	4798      	blx	r3
 801cdc6:	4603      	mov	r3, r0
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	d025      	beq.n	801ce18 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801cdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdce:	6819      	ldr	r1, [r3, #0]
 801cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdd2:	681b      	ldr	r3, [r3, #0]
 801cdd4:	681b      	ldr	r3, [r3, #0]
 801cdd6:	33f0      	adds	r3, #240	; 0xf0
 801cdd8:	681b      	ldr	r3, [r3, #0]
 801cdda:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801cdde:	4610      	mov	r0, r2
 801cde0:	4798      	blx	r3
 801cde2:	f107 001c 	add.w	r0, r7, #28
 801cde6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cdea:	f107 0114 	add.w	r1, r7, #20
 801cdee:	687a      	ldr	r2, [r7, #4]
 801cdf0:	f7ff ff3a 	bl	801cc68 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801cdf4:	f107 021c 	add.w	r2, r7, #28
 801cdf8:	f107 0314 	add.w	r3, r7, #20
 801cdfc:	4611      	mov	r1, r2
 801cdfe:	4618      	mov	r0, r3
 801ce00:	f7f0 faa9 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801ce04:	f107 031c 	add.w	r3, r7, #28
 801ce08:	4618      	mov	r0, r3
 801ce0a:	f7f0 fdf0 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ce0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ce12:	4618      	mov	r0, r3
 801ce14:	f7f0 fdeb 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ce18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce1a:	685b      	ldr	r3, [r3, #4]
 801ce1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ce1e:	e7c6      	b.n	801cdae <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801ce20:	68fb      	ldr	r3, [r7, #12]
 801ce22:	f107 0114 	add.w	r1, r7, #20
 801ce26:	687a      	ldr	r2, [r7, #4]
 801ce28:	4618      	mov	r0, r3
 801ce2a:	f7ff feed 	bl	801cc08 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801ce2e:	f107 0314 	add.w	r3, r7, #20
 801ce32:	4618      	mov	r0, r3
 801ce34:	f7f0 fddb 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801ce38:	bf00      	nop
}
 801ce3a:	68f8      	ldr	r0, [r7, #12]
 801ce3c:	3730      	adds	r7, #48	; 0x30
 801ce3e:	46bd      	mov	sp, r7
 801ce40:	bd80      	pop	{r7, pc}
 801ce42:	bf00      	nop
 801ce44:	0802693c 	.word	0x0802693c

0801ce48 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801ce48:	b580      	push	{r7, lr}
 801ce4a:	b08e      	sub	sp, #56	; 0x38
 801ce4c:	af00      	add	r7, sp, #0
 801ce4e:	6078      	str	r0, [r7, #4]
 801ce50:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801ce52:	f107 030c 	add.w	r3, r7, #12
 801ce56:	4936      	ldr	r1, [pc, #216]	; (801cf30 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801ce58:	4618      	mov	r0, r3
 801ce5a:	f7f0 fa10 	bl	800d27e <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ce5e:	683b      	ldr	r3, [r7, #0]
 801ce60:	685b      	ldr	r3, [r3, #4]
 801ce62:	637b      	str	r3, [r7, #52]	; 0x34
 801ce64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	d044      	beq.n	801cef4 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801ce6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce6c:	681a      	ldr	r2, [r3, #0]
 801ce6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce70:	681b      	ldr	r3, [r3, #0]
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	33cc      	adds	r3, #204	; 0xcc
 801ce76:	681b      	ldr	r3, [r3, #0]
 801ce78:	4610      	mov	r0, r2
 801ce7a:	4798      	blx	r3
 801ce7c:	4603      	mov	r3, r0
 801ce7e:	f083 0301 	eor.w	r3, r3, #1
 801ce82:	b2db      	uxtb	r3, r3
 801ce84:	2b00      	cmp	r3, #0
 801ce86:	d031      	beq.n	801ceec <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801ce88:	f107 031c 	add.w	r3, r7, #28
 801ce8c:	4928      	ldr	r1, [pc, #160]	; (801cf30 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801ce8e:	4618      	mov	r0, r3
 801ce90:	f7f0 f9f5 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801ce94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce96:	6819      	ldr	r1, [r3, #0]
 801ce98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce9a:	681b      	ldr	r3, [r3, #0]
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	33f4      	adds	r3, #244	; 0xf4
 801cea0:	681b      	ldr	r3, [r3, #0]
 801cea2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801cea6:	4610      	mov	r0, r2
 801cea8:	4798      	blx	r3
 801ceaa:	f107 0014 	add.w	r0, r7, #20
 801ceae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ceb2:	f107 021c 	add.w	r2, r7, #28
 801ceb6:	f107 010c 	add.w	r1, r7, #12
 801ceba:	f7ff fed5 	bl	801cc68 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801cebe:	f107 0214 	add.w	r2, r7, #20
 801cec2:	f107 030c 	add.w	r3, r7, #12
 801cec6:	4611      	mov	r1, r2
 801cec8:	4618      	mov	r0, r3
 801ceca:	f7f0 fa44 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801cece:	f107 0314 	add.w	r3, r7, #20
 801ced2:	4618      	mov	r0, r3
 801ced4:	f7f0 fd8b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ced8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cedc:	4618      	mov	r0, r3
 801cede:	f7f0 fd86 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801cee2:	f107 031c 	add.w	r3, r7, #28
 801cee6:	4618      	mov	r0, r3
 801cee8:	f7f0 fd81 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ceec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ceee:	685b      	ldr	r3, [r3, #4]
 801cef0:	637b      	str	r3, [r7, #52]	; 0x34
 801cef2:	e7b7      	b.n	801ce64 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801cef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801cef8:	490d      	ldr	r1, [pc, #52]	; (801cf30 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801cefa:	4618      	mov	r0, r3
 801cefc:	f7f0 f9bf 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801cf06:	f107 010c 	add.w	r1, r7, #12
 801cf0a:	4618      	mov	r0, r3
 801cf0c:	f7ff fe7c 	bl	801cc08 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801cf10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801cf14:	4618      	mov	r0, r3
 801cf16:	f7f0 fd6a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801cf1a:	f107 030c 	add.w	r3, r7, #12
 801cf1e:	4618      	mov	r0, r3
 801cf20:	f7f0 fd65 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801cf24:	bf00      	nop
}
 801cf26:	6878      	ldr	r0, [r7, #4]
 801cf28:	3738      	adds	r7, #56	; 0x38
 801cf2a:	46bd      	mov	sp, r7
 801cf2c:	bd80      	pop	{r7, pc}
 801cf2e:	bf00      	nop
 801cf30:	0802693c 	.word	0x0802693c

0801cf34 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801cf34:	b580      	push	{r7, lr}
 801cf36:	b084      	sub	sp, #16
 801cf38:	af00      	add	r7, sp, #0
 801cf3a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	685b      	ldr	r3, [r3, #4]
 801cf40:	60fb      	str	r3, [r7, #12]
 801cf42:	68fb      	ldr	r3, [r7, #12]
 801cf44:	2b00      	cmp	r3, #0
 801cf46:	d014      	beq.n	801cf72 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801cf48:	68fb      	ldr	r3, [r7, #12]
 801cf4a:	681a      	ldr	r2, [r3, #0]
 801cf4c:	68fb      	ldr	r3, [r7, #12]
 801cf4e:	681b      	ldr	r3, [r3, #0]
 801cf50:	681b      	ldr	r3, [r3, #0]
 801cf52:	33d0      	adds	r3, #208	; 0xd0
 801cf54:	681b      	ldr	r3, [r3, #0]
 801cf56:	4610      	mov	r0, r2
 801cf58:	4798      	blx	r3
 801cf5a:	4603      	mov	r3, r0
 801cf5c:	f083 0301 	eor.w	r3, r3, #1
 801cf60:	b2db      	uxtb	r3, r3
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	d001      	beq.n	801cf6a <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801cf66:	2301      	movs	r3, #1
 801cf68:	e004      	b.n	801cf74 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cf6a:	68fb      	ldr	r3, [r7, #12]
 801cf6c:	685b      	ldr	r3, [r3, #4]
 801cf6e:	60fb      	str	r3, [r7, #12]
 801cf70:	e7e7      	b.n	801cf42 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801cf72:	2300      	movs	r3, #0
}
 801cf74:	4618      	mov	r0, r3
 801cf76:	3710      	adds	r7, #16
 801cf78:	46bd      	mov	sp, r7
 801cf7a:	bd80      	pop	{r7, pc}

0801cf7c <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801cf7c:	b480      	push	{r7}
 801cf7e:	b083      	sub	sp, #12
 801cf80:	af00      	add	r7, sp, #0
 801cf82:	6078      	str	r0, [r7, #4]
 801cf84:	460b      	mov	r3, r1
 801cf86:	70fb      	strb	r3, [r7, #3]
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	78fa      	ldrb	r2, [r7, #3]
 801cf8c:	711a      	strb	r2, [r3, #4]
 801cf8e:	bf00      	nop
 801cf90:	370c      	adds	r7, #12
 801cf92:	46bd      	mov	sp, r7
 801cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf98:	4770      	bx	lr
	...

0801cf9c <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801cf9c:	b580      	push	{r7, lr}
 801cf9e:	b082      	sub	sp, #8
 801cfa0:	af00      	add	r7, sp, #0
 801cfa2:	6078      	str	r0, [r7, #4]
 801cfa4:	460b      	mov	r3, r1
 801cfa6:	70fb      	strb	r3, [r7, #3]
 801cfa8:	687b      	ldr	r3, [r7, #4]
 801cfaa:	4618      	mov	r0, r3
 801cfac:	f7ed ff6a 	bl	800ae84 <_ZN14TestTerminatorC1Ev>
 801cfb0:	4a05      	ldr	r2, [pc, #20]	; (801cfc8 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	601a      	str	r2, [r3, #0]
 801cfb6:	687b      	ldr	r3, [r7, #4]
 801cfb8:	78fa      	ldrb	r2, [r7, #3]
 801cfba:	711a      	strb	r2, [r3, #4]
    {
    }
 801cfbc:	687b      	ldr	r3, [r7, #4]
 801cfbe:	4618      	mov	r0, r3
 801cfc0:	3708      	adds	r7, #8
 801cfc2:	46bd      	mov	sp, r7
 801cfc4:	bd80      	pop	{r7, pc}
 801cfc6:	bf00      	nop
 801cfc8:	08029b98 	.word	0x08029b98

0801cfcc <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801cfcc:	b580      	push	{r7, lr}
 801cfce:	b082      	sub	sp, #8
 801cfd0:	af00      	add	r7, sp, #0
 801cfd2:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	791b      	ldrb	r3, [r3, #4]
 801cfd8:	2b00      	cmp	r3, #0
 801cfda:	d001      	beq.n	801cfe0 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801cfdc:	f7f6 f9fe 	bl	80133dc <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801cfe0:	f7f7 fd40 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801cfe4:	4603      	mov	r3, r0
 801cfe6:	681a      	ldr	r2, [r3, #0]
 801cfe8:	6812      	ldr	r2, [r2, #0]
 801cfea:	4618      	mov	r0, r3
 801cfec:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801cfee:	bf00      	nop
 801cff0:	3708      	adds	r7, #8
 801cff2:	46bd      	mov	sp, r7
 801cff4:	bd80      	pop	{r7, pc}
	...

0801cff8 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801cff8:	b580      	push	{r7, lr}
 801cffa:	b082      	sub	sp, #8
 801cffc:	af00      	add	r7, sp, #0
 801cffe:	6078      	str	r0, [r7, #4]
    {
 801d000:	4a05      	ldr	r2, [pc, #20]	; (801d018 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801d002:	687b      	ldr	r3, [r7, #4]
 801d004:	601a      	str	r2, [r3, #0]
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	4618      	mov	r0, r3
 801d00a:	f7f7 fdbb 	bl	8014b84 <_ZN14TestTerminatorD1Ev>
    }
 801d00e:	687b      	ldr	r3, [r7, #4]
 801d010:	4618      	mov	r0, r3
 801d012:	3708      	adds	r7, #8
 801d014:	46bd      	mov	sp, r7
 801d016:	bd80      	pop	{r7, pc}
 801d018:	08029b98 	.word	0x08029b98

0801d01c <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801d01c:	b580      	push	{r7, lr}
 801d01e:	b082      	sub	sp, #8
 801d020:	af00      	add	r7, sp, #0
 801d022:	6078      	str	r0, [r7, #4]
    }
 801d024:	6878      	ldr	r0, [r7, #4]
 801d026:	f7ff ffe7 	bl	801cff8 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801d02a:	2108      	movs	r1, #8
 801d02c:	6878      	ldr	r0, [r7, #4]
 801d02e:	f7ed fd77 	bl	800ab20 <_ZdlPvj>
 801d032:	687b      	ldr	r3, [r7, #4]
 801d034:	4618      	mov	r0, r3
 801d036:	3708      	adds	r7, #8
 801d038:	46bd      	mov	sp, r7
 801d03a:	bd80      	pop	{r7, pc}

0801d03c <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801d03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d03e:	b085      	sub	sp, #20
 801d040:	af00      	add	r7, sp, #0
 801d042:	6078      	str	r0, [r7, #4]
 801d044:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	681b      	ldr	r3, [r3, #0]
 801d04a:	330c      	adds	r3, #12
 801d04c:	681b      	ldr	r3, [r3, #0]
 801d04e:	6878      	ldr	r0, [r7, #4]
 801d050:	4798      	blx	r3
 801d052:	4603      	mov	r3, r0
 801d054:	681a      	ldr	r2, [r3, #0]
 801d056:	321c      	adds	r2, #28
 801d058:	6812      	ldr	r2, [r2, #0]
 801d05a:	4618      	mov	r0, r3
 801d05c:	4790      	blx	r2
 801d05e:	4603      	mov	r3, r0
 801d060:	f083 0301 	eor.w	r3, r3, #1
 801d064:	b2db      	uxtb	r3, r3
 801d066:	2b00      	cmp	r3, #0
 801d068:	d01d      	beq.n	801d0a6 <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801d06a:	687b      	ldr	r3, [r7, #4]
 801d06c:	681b      	ldr	r3, [r3, #0]
 801d06e:	330c      	adds	r3, #12
 801d070:	681b      	ldr	r3, [r3, #0]
 801d072:	6878      	ldr	r0, [r7, #4]
 801d074:	4798      	blx	r3
 801d076:	4604      	mov	r4, r0
 801d078:	6823      	ldr	r3, [r4, #0]
 801d07a:	339c      	adds	r3, #156	; 0x9c
 801d07c:	681d      	ldr	r5, [r3, #0]
 801d07e:	683e      	ldr	r6, [r7, #0]
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	791a      	ldrb	r2, [r3, #4]
 801d084:	f107 0308 	add.w	r3, r7, #8
 801d088:	4611      	mov	r1, r2
 801d08a:	4618      	mov	r0, r3
 801d08c:	f7ff ff86 	bl	801cf9c <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801d090:	f107 0308 	add.w	r3, r7, #8
 801d094:	461a      	mov	r2, r3
 801d096:	4631      	mov	r1, r6
 801d098:	4620      	mov	r0, r4
 801d09a:	47a8      	blx	r5
 801d09c:	f107 0308 	add.w	r3, r7, #8
 801d0a0:	4618      	mov	r0, r3
 801d0a2:	f7ff ffa9 	bl	801cff8 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801d0a6:	bf00      	nop
 801d0a8:	3714      	adds	r7, #20
 801d0aa:	46bd      	mov	sp, r7
 801d0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d0ae <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801d0ae:	b580      	push	{r7, lr}
 801d0b0:	b082      	sub	sp, #8
 801d0b2:	af00      	add	r7, sp, #0
 801d0b4:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801d0b6:	f7f7 fcc5 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801d0ba:	4603      	mov	r3, r0
}
 801d0bc:	4618      	mov	r0, r3
 801d0be:	3708      	adds	r7, #8
 801d0c0:	46bd      	mov	sp, r7
 801d0c2:	bd80      	pop	{r7, pc}

0801d0c4 <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801d0c4:	b590      	push	{r4, r7, lr}
 801d0c6:	b085      	sub	sp, #20
 801d0c8:	af00      	add	r7, sp, #0
 801d0ca:	6078      	str	r0, [r7, #4]
 801d0cc:	6039      	str	r1, [r7, #0]
 801d0ce:	687c      	ldr	r4, [r7, #4]
 801d0d0:	f107 0308 	add.w	r3, r7, #8
 801d0d4:	490b      	ldr	r1, [pc, #44]	; (801d104 <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801d0d6:	4618      	mov	r0, r3
 801d0d8:	f7f0 f8d1 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801d0dc:	f107 0308 	add.w	r3, r7, #8
 801d0e0:	461a      	mov	r2, r3
 801d0e2:	6839      	ldr	r1, [r7, #0]
 801d0e4:	4620      	mov	r0, r4
 801d0e6:	f7f1 ff29 	bl	800ef3c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801d0ea:	f107 0308 	add.w	r3, r7, #8
 801d0ee:	4618      	mov	r0, r3
 801d0f0:	f7f0 fc7d 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801d0f4:	4a04      	ldr	r2, [pc, #16]	; (801d108 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801d0f6:	687b      	ldr	r3, [r7, #4]
 801d0f8:	601a      	str	r2, [r3, #0]
{
}
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	4618      	mov	r0, r3
 801d0fe:	3714      	adds	r7, #20
 801d100:	46bd      	mov	sp, r7
 801d102:	bd90      	pop	{r4, r7, pc}
 801d104:	0802694c 	.word	0x0802694c
 801d108:	08028b24 	.word	0x08028b24

0801d10c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801d10c:	b5b0      	push	{r4, r5, r7, lr}
 801d10e:	b08a      	sub	sp, #40	; 0x28
 801d110:	af00      	add	r7, sp, #0
 801d112:	6078      	str	r0, [r7, #4]
 801d114:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	332c      	adds	r3, #44	; 0x2c
 801d11a:	492b      	ldr	r1, [pc, #172]	; (801d1c8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801d11c:	4618      	mov	r0, r3
 801d11e:	f7f0 fcf5 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801d122:	687b      	ldr	r3, [r7, #4]
 801d124:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801d128:	683b      	ldr	r3, [r7, #0]
 801d12a:	681b      	ldr	r3, [r3, #0]
 801d12c:	337c      	adds	r3, #124	; 0x7c
 801d12e:	681c      	ldr	r4, [r3, #0]
 801d130:	f107 0310 	add.w	r3, r7, #16
 801d134:	4925      	ldr	r1, [pc, #148]	; (801d1cc <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801d136:	4618      	mov	r0, r3
 801d138:	f7f0 f8a1 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801d13c:	f107 0308 	add.w	r3, r7, #8
 801d140:	f107 0210 	add.w	r2, r7, #16
 801d144:	6839      	ldr	r1, [r7, #0]
 801d146:	4618      	mov	r0, r3
 801d148:	47a0      	blx	r4
 801d14a:	f107 0308 	add.w	r3, r7, #8
 801d14e:	4619      	mov	r1, r3
 801d150:	4628      	mov	r0, r5
 801d152:	f7f0 fcc9 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801d156:	f107 0308 	add.w	r3, r7, #8
 801d15a:	4618      	mov	r0, r3
 801d15c:	f7f0 fc47 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801d160:	f107 0310 	add.w	r3, r7, #16
 801d164:	4618      	mov	r0, r3
 801d166:	f7f0 fc42 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801d16a:	687b      	ldr	r3, [r7, #4]
 801d16c:	332c      	adds	r3, #44	; 0x2c
 801d16e:	4918      	ldr	r1, [pc, #96]	; (801d1d0 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801d170:	4618      	mov	r0, r3
 801d172:	f7f0 fccb 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801d17c:	683b      	ldr	r3, [r7, #0]
 801d17e:	681b      	ldr	r3, [r3, #0]
 801d180:	3380      	adds	r3, #128	; 0x80
 801d182:	681c      	ldr	r4, [r3, #0]
 801d184:	f107 0320 	add.w	r3, r7, #32
 801d188:	4910      	ldr	r1, [pc, #64]	; (801d1cc <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801d18a:	4618      	mov	r0, r3
 801d18c:	f7f0 f877 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801d190:	f107 0318 	add.w	r3, r7, #24
 801d194:	f107 0220 	add.w	r2, r7, #32
 801d198:	6839      	ldr	r1, [r7, #0]
 801d19a:	4618      	mov	r0, r3
 801d19c:	47a0      	blx	r4
 801d19e:	f107 0318 	add.w	r3, r7, #24
 801d1a2:	4619      	mov	r1, r3
 801d1a4:	4628      	mov	r0, r5
 801d1a6:	f7f0 fc9f 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801d1aa:	f107 0318 	add.w	r3, r7, #24
 801d1ae:	4618      	mov	r0, r3
 801d1b0:	f7f0 fc1d 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801d1b4:	f107 0320 	add.w	r3, r7, #32
 801d1b8:	4618      	mov	r0, r3
 801d1ba:	f7f0 fc18 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 801d1be:	bf00      	nop
 801d1c0:	3728      	adds	r7, #40	; 0x28
 801d1c2:	46bd      	mov	sp, r7
 801d1c4:	bdb0      	pop	{r4, r5, r7, pc}
 801d1c6:	bf00      	nop
 801d1c8:	0802699c 	.word	0x0802699c
 801d1cc:	080269c8 	.word	0x080269c8
 801d1d0:	080269cc 	.word	0x080269cc

0801d1d4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801d1d4:	b590      	push	{r4, r7, lr}
 801d1d6:	b08f      	sub	sp, #60	; 0x3c
 801d1d8:	af00      	add	r7, sp, #0
 801d1da:	60f8      	str	r0, [r7, #12]
 801d1dc:	60b9      	str	r1, [r7, #8]
 801d1de:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801d1e0:	f107 0310 	add.w	r3, r7, #16
 801d1e4:	4618      	mov	r0, r3
 801d1e6:	f7ff f877 	bl	801c2d8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801d1ea:	f107 0310 	add.w	r3, r7, #16
 801d1ee:	687a      	ldr	r2, [r7, #4]
 801d1f0:	68b9      	ldr	r1, [r7, #8]
 801d1f2:	4618      	mov	r0, r3
 801d1f4:	f7ff fa16 	bl	801c624 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801d1f8:	68fb      	ldr	r3, [r7, #12]
 801d1fa:	332c      	adds	r3, #44	; 0x2c
 801d1fc:	4937      	ldr	r1, [pc, #220]	; (801d2dc <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801d1fe:	4618      	mov	r0, r3
 801d200:	f7f0 fc84 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801d204:	68fb      	ldr	r3, [r7, #12]
 801d206:	332c      	adds	r3, #44	; 0x2c
 801d208:	68b9      	ldr	r1, [r7, #8]
 801d20a:	4618      	mov	r0, r3
 801d20c:	f7f0 fc6c 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801d210:	68fb      	ldr	r3, [r7, #12]
 801d212:	332c      	adds	r3, #44	; 0x2c
 801d214:	4932      	ldr	r1, [pc, #200]	; (801d2e0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801d216:	4618      	mov	r0, r3
 801d218:	f7f0 fc78 	bl	800db0c <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801d21c:	68fb      	ldr	r3, [r7, #12]
 801d21e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d222:	f107 0320 	add.w	r3, r7, #32
 801d226:	492f      	ldr	r1, [pc, #188]	; (801d2e4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801d228:	4618      	mov	r0, r3
 801d22a:	f7f0 f828 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801d22e:	f107 0318 	add.w	r3, r7, #24
 801d232:	f107 0220 	add.w	r2, r7, #32
 801d236:	f107 0110 	add.w	r1, r7, #16
 801d23a:	4618      	mov	r0, r3
 801d23c:	f7ff fd4a 	bl	801ccd4 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801d240:	f107 0318 	add.w	r3, r7, #24
 801d244:	4619      	mov	r1, r3
 801d246:	4620      	mov	r0, r4
 801d248:	f7f0 fc4e 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801d24c:	f107 0318 	add.w	r3, r7, #24
 801d250:	4618      	mov	r0, r3
 801d252:	f7f0 fbcc 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801d256:	f107 0320 	add.w	r3, r7, #32
 801d25a:	4618      	mov	r0, r3
 801d25c:	f7f0 fbc7 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801d260:	68fb      	ldr	r3, [r7, #12]
 801d262:	332c      	adds	r3, #44	; 0x2c
 801d264:	4920      	ldr	r1, [pc, #128]	; (801d2e8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801d266:	4618      	mov	r0, r3
 801d268:	f7f0 fc50 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801d26c:	68fb      	ldr	r3, [r7, #12]
 801d26e:	332c      	adds	r3, #44	; 0x2c
 801d270:	68b9      	ldr	r1, [r7, #8]
 801d272:	4618      	mov	r0, r3
 801d274:	f7f0 fc38 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801d278:	68fb      	ldr	r3, [r7, #12]
 801d27a:	332c      	adds	r3, #44	; 0x2c
 801d27c:	4918      	ldr	r1, [pc, #96]	; (801d2e0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801d27e:	4618      	mov	r0, r3
 801d280:	f7f0 fc44 	bl	800db0c <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801d284:	68fb      	ldr	r3, [r7, #12]
 801d286:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d28a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d28e:	4915      	ldr	r1, [pc, #84]	; (801d2e4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801d290:	4618      	mov	r0, r3
 801d292:	f7ef fff4 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801d296:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d29a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801d29e:	f107 0110 	add.w	r1, r7, #16
 801d2a2:	4618      	mov	r0, r3
 801d2a4:	f7ff fd74 	bl	801cd90 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801d2a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d2ac:	4619      	mov	r1, r3
 801d2ae:	4620      	mov	r0, r4
 801d2b0:	f7f0 fc1a 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801d2b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d2b8:	4618      	mov	r0, r3
 801d2ba:	f7f0 fb98 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801d2be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d2c2:	4618      	mov	r0, r3
 801d2c4:	f7f0 fb93 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801d2c8:	f107 0310 	add.w	r3, r7, #16
 801d2cc:	4618      	mov	r0, r3
 801d2ce:	f7ff f817 	bl	801c300 <_ZN21MockExpectedCallsListD1Ev>
}
 801d2d2:	bf00      	nop
 801d2d4:	373c      	adds	r7, #60	; 0x3c
 801d2d6:	46bd      	mov	sp, r7
 801d2d8:	bd90      	pop	{r4, r7, pc}
 801d2da:	bf00      	nop
 801d2dc:	080269f4 	.word	0x080269f4
 801d2e0:	08026a34 	.word	0x08026a34
 801d2e4:	080269c8 	.word	0x080269c8
 801d2e8:	08026a38 	.word	0x08026a38

0801d2ec <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d2ec:	b590      	push	{r4, r7, lr}
 801d2ee:	b087      	sub	sp, #28
 801d2f0:	af00      	add	r7, sp, #0
 801d2f2:	60f8      	str	r0, [r7, #12]
 801d2f4:	60b9      	str	r1, [r7, #8]
 801d2f6:	607a      	str	r2, [r7, #4]
 801d2f8:	68fb      	ldr	r3, [r7, #12]
 801d2fa:	68b9      	ldr	r1, [r7, #8]
 801d2fc:	4618      	mov	r0, r3
 801d2fe:	f7ff fee1 	bl	801d0c4 <_ZN11MockFailureC1EP10UtestShell>
 801d302:	4a10      	ldr	r2, [pc, #64]	; (801d344 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801d304:	68fb      	ldr	r3, [r7, #12]
 801d306:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801d308:	68fb      	ldr	r3, [r7, #12]
 801d30a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d30e:	f107 0310 	add.w	r3, r7, #16
 801d312:	490d      	ldr	r1, [pc, #52]	; (801d348 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801d314:	4618      	mov	r0, r3
 801d316:	f7ef ffb2 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801d31a:	f107 0310 	add.w	r3, r7, #16
 801d31e:	4619      	mov	r1, r3
 801d320:	4620      	mov	r0, r4
 801d322:	f7f0 f818 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801d326:	f107 0310 	add.w	r3, r7, #16
 801d32a:	4618      	mov	r0, r3
 801d32c:	f7f0 fb5f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801d330:	68fb      	ldr	r3, [r7, #12]
 801d332:	6879      	ldr	r1, [r7, #4]
 801d334:	4618      	mov	r0, r3
 801d336:	f7ff fee9 	bl	801d10c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801d33a:	68fb      	ldr	r3, [r7, #12]
 801d33c:	4618      	mov	r0, r3
 801d33e:	371c      	adds	r7, #28
 801d340:	46bd      	mov	sp, r7
 801d342:	bd90      	pop	{r4, r7, pc}
 801d344:	08028af8 	.word	0x08028af8
 801d348:	08026a74 	.word	0x08026a74

0801d34c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d34c:	b590      	push	{r4, r7, lr}
 801d34e:	b08d      	sub	sp, #52	; 0x34
 801d350:	af00      	add	r7, sp, #0
 801d352:	60f8      	str	r0, [r7, #12]
 801d354:	60b9      	str	r1, [r7, #8]
 801d356:	607a      	str	r2, [r7, #4]
 801d358:	603b      	str	r3, [r7, #0]
 801d35a:	68fb      	ldr	r3, [r7, #12]
 801d35c:	68b9      	ldr	r1, [r7, #8]
 801d35e:	4618      	mov	r0, r3
 801d360:	f7ff feb0 	bl	801d0c4 <_ZN11MockFailureC1EP10UtestShell>
 801d364:	4a2f      	ldr	r2, [pc, #188]	; (801d424 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801d366:	68fb      	ldr	r3, [r7, #12]
 801d368:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801d36a:	683b      	ldr	r3, [r7, #0]
 801d36c:	681b      	ldr	r3, [r3, #0]
 801d36e:	3310      	adds	r3, #16
 801d370:	681b      	ldr	r3, [r3, #0]
 801d372:	6879      	ldr	r1, [r7, #4]
 801d374:	6838      	ldr	r0, [r7, #0]
 801d376:	4798      	blx	r3
 801d378:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801d37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d37c:	2b00      	cmp	r3, #0
 801d37e:	d027      	beq.n	801d3d0 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801d380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d382:	1c5a      	adds	r2, r3, #1
 801d384:	f107 0314 	add.w	r3, r7, #20
 801d388:	4611      	mov	r1, r2
 801d38a:	4618      	mov	r0, r3
 801d38c:	f7f1 fa00 	bl	800e790 <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801d390:	68fb      	ldr	r3, [r7, #12]
 801d392:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d396:	f107 0314 	add.w	r3, r7, #20
 801d39a:	4618      	mov	r0, r3
 801d39c:	f7f0 fafa 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801d3a0:	4602      	mov	r2, r0
 801d3a2:	f107 031c 	add.w	r3, r7, #28
 801d3a6:	4920      	ldr	r1, [pc, #128]	; (801d428 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801d3a8:	4618      	mov	r0, r3
 801d3aa:	f7f1 f827 	bl	800e3fc <_Z16StringFromFormatPKcz>
 801d3ae:	f107 031c 	add.w	r3, r7, #28
 801d3b2:	4619      	mov	r1, r3
 801d3b4:	4620      	mov	r0, r4
 801d3b6:	f7ef ffce 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801d3ba:	f107 031c 	add.w	r3, r7, #28
 801d3be:	4618      	mov	r0, r3
 801d3c0:	f7f0 fb15 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801d3c4:	f107 0314 	add.w	r3, r7, #20
 801d3c8:	4618      	mov	r0, r3
 801d3ca:	f7f0 fb10 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801d3ce:	e013      	b.n	801d3f8 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801d3d0:	68fb      	ldr	r3, [r7, #12]
 801d3d2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d3d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d3da:	4914      	ldr	r1, [pc, #80]	; (801d42c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801d3dc:	4618      	mov	r0, r3
 801d3de:	f7ef ff4e 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801d3e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d3e6:	4619      	mov	r1, r3
 801d3e8:	4620      	mov	r0, r4
 801d3ea:	f7ef ffb4 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801d3ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d3f2:	4618      	mov	r0, r3
 801d3f4:	f7f0 fafb 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801d3f8:	68fb      	ldr	r3, [r7, #12]
 801d3fa:	332c      	adds	r3, #44	; 0x2c
 801d3fc:	6879      	ldr	r1, [r7, #4]
 801d3fe:	4618      	mov	r0, r3
 801d400:	f7f0 fb72 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801d404:	68fb      	ldr	r3, [r7, #12]
 801d406:	332c      	adds	r3, #44	; 0x2c
 801d408:	4909      	ldr	r1, [pc, #36]	; (801d430 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801d40a:	4618      	mov	r0, r3
 801d40c:	f7f0 fb7e 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801d410:	68fb      	ldr	r3, [r7, #12]
 801d412:	6839      	ldr	r1, [r7, #0]
 801d414:	4618      	mov	r0, r3
 801d416:	f7ff fe79 	bl	801d10c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801d41a:	68fb      	ldr	r3, [r7, #12]
 801d41c:	4618      	mov	r0, r3
 801d41e:	3734      	adds	r7, #52	; 0x34
 801d420:	46bd      	mov	sp, r7
 801d422:	bd90      	pop	{r4, r7, pc}
 801d424:	08029498 	.word	0x08029498
 801d428:	08026aa4 	.word	0x08026aa4
 801d42c:	08026ae0 	.word	0x08026ae0
 801d430:	08026a34 	.word	0x08026a34

0801d434 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d434:	b590      	push	{r4, r7, lr}
 801d436:	b089      	sub	sp, #36	; 0x24
 801d438:	af00      	add	r7, sp, #0
 801d43a:	60f8      	str	r0, [r7, #12]
 801d43c:	60b9      	str	r1, [r7, #8]
 801d43e:	607a      	str	r2, [r7, #4]
 801d440:	68fb      	ldr	r3, [r7, #12]
 801d442:	68b9      	ldr	r1, [r7, #8]
 801d444:	4618      	mov	r0, r3
 801d446:	f7ff fe3d 	bl	801d0c4 <_ZN11MockFailureC1EP10UtestShell>
 801d44a:	4a1f      	ldr	r2, [pc, #124]	; (801d4c8 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801d44c:	68fb      	ldr	r3, [r7, #12]
 801d44e:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801d450:	f107 0310 	add.w	r3, r7, #16
 801d454:	4618      	mov	r0, r3
 801d456:	f7fe ff3f 	bl	801c2d8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801d45a:	f107 0310 	add.w	r3, r7, #16
 801d45e:	6879      	ldr	r1, [r7, #4]
 801d460:	4618      	mov	r0, r3
 801d462:	f7ff f909 	bl	801c678 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801d466:	f107 0310 	add.w	r3, r7, #16
 801d46a:	4618      	mov	r0, r3
 801d46c:	f7ff f94c 	bl	801c708 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801d470:	68fb      	ldr	r3, [r7, #12]
 801d472:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d476:	f107 0318 	add.w	r3, r7, #24
 801d47a:	4914      	ldr	r1, [pc, #80]	; (801d4cc <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801d47c:	4618      	mov	r0, r3
 801d47e:	f7ef fefe 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801d482:	f107 0318 	add.w	r3, r7, #24
 801d486:	4619      	mov	r1, r3
 801d488:	4620      	mov	r0, r4
 801d48a:	f7ef ff64 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801d48e:	f107 0318 	add.w	r3, r7, #24
 801d492:	4618      	mov	r0, r3
 801d494:	f7f0 faab 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801d498:	68fb      	ldr	r3, [r7, #12]
 801d49a:	332c      	adds	r3, #44	; 0x2c
 801d49c:	490c      	ldr	r1, [pc, #48]	; (801d4d0 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801d49e:	4618      	mov	r0, r3
 801d4a0:	f7f0 fb34 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801d4a4:	68fb      	ldr	r3, [r7, #12]
 801d4a6:	f107 0210 	add.w	r2, r7, #16
 801d4aa:	4611      	mov	r1, r2
 801d4ac:	4618      	mov	r0, r3
 801d4ae:	f7ff fe2d 	bl	801d10c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801d4b2:	f107 0310 	add.w	r3, r7, #16
 801d4b6:	4618      	mov	r0, r3
 801d4b8:	f7fe ff22 	bl	801c300 <_ZN21MockExpectedCallsListD1Ev>
}
 801d4bc:	68fb      	ldr	r3, [r7, #12]
 801d4be:	4618      	mov	r0, r3
 801d4c0:	3724      	adds	r7, #36	; 0x24
 801d4c2:	46bd      	mov	sp, r7
 801d4c4:	bd90      	pop	{r4, r7, pc}
 801d4c6:	bf00      	nop
 801d4c8:	08028acc 	.word	0x08028acc
 801d4cc:	08026b0c 	.word	0x08026b0c
 801d4d0:	08026a34 	.word	0x08026a34

0801d4d4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801d4d4:	b590      	push	{r4, r7, lr}
 801d4d6:	b099      	sub	sp, #100	; 0x64
 801d4d8:	af00      	add	r7, sp, #0
 801d4da:	60f8      	str	r0, [r7, #12]
 801d4dc:	60b9      	str	r1, [r7, #8]
 801d4de:	607a      	str	r2, [r7, #4]
 801d4e0:	603b      	str	r3, [r7, #0]
 801d4e2:	68fb      	ldr	r3, [r7, #12]
 801d4e4:	68b9      	ldr	r1, [r7, #8]
 801d4e6:	4618      	mov	r0, r3
 801d4e8:	f7ff fdec 	bl	801d0c4 <_ZN11MockFailureC1EP10UtestShell>
 801d4ec:	4a9e      	ldr	r2, [pc, #632]	; (801d768 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801d4ee:	68fb      	ldr	r3, [r7, #12]
 801d4f0:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801d4f2:	f107 0310 	add.w	r3, r7, #16
 801d4f6:	4618      	mov	r0, r3
 801d4f8:	f7fe feee 	bl	801c2d8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801d4fc:	f107 0310 	add.w	r3, r7, #16
 801d500:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801d502:	6879      	ldr	r1, [r7, #4]
 801d504:	4618      	mov	r0, r3
 801d506:	f7ff f88d 	bl	801c624 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801d50a:	683b      	ldr	r3, [r7, #0]
 801d50c:	681b      	ldr	r3, [r3, #0]
 801d50e:	335c      	adds	r3, #92	; 0x5c
 801d510:	681b      	ldr	r3, [r3, #0]
 801d512:	f107 0218 	add.w	r2, r7, #24
 801d516:	6839      	ldr	r1, [r7, #0]
 801d518:	4610      	mov	r0, r2
 801d51a:	4798      	blx	r3
 801d51c:	f107 0218 	add.w	r2, r7, #24
 801d520:	f107 0310 	add.w	r3, r7, #16
 801d524:	4611      	mov	r1, r2
 801d526:	4618      	mov	r0, r3
 801d528:	f7ff f948 	bl	801c7bc <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801d52c:	f107 0318 	add.w	r3, r7, #24
 801d530:	4618      	mov	r0, r3
 801d532:	f7f0 fa5c 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801d536:	f107 0310 	add.w	r3, r7, #16
 801d53a:	4618      	mov	r0, r3
 801d53c:	f7fe ff4d 	bl	801c3da <_ZNK21MockExpectedCallsList7isEmptyEv>
 801d540:	4603      	mov	r3, r0
 801d542:	2b00      	cmp	r3, #0
 801d544:	d037      	beq.n	801d5b6 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801d546:	68fb      	ldr	r3, [r7, #12]
 801d548:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d54c:	f107 0320 	add.w	r3, r7, #32
 801d550:	4986      	ldr	r1, [pc, #536]	; (801d76c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801d552:	4618      	mov	r0, r3
 801d554:	f7ef fe93 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801d558:	f107 0320 	add.w	r3, r7, #32
 801d55c:	4619      	mov	r1, r3
 801d55e:	4620      	mov	r0, r4
 801d560:	f7ef fef9 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801d564:	f107 0320 	add.w	r3, r7, #32
 801d568:	4618      	mov	r0, r3
 801d56a:	f7f0 fa40 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801d56e:	68fb      	ldr	r3, [r7, #12]
 801d570:	332c      	adds	r3, #44	; 0x2c
 801d572:	6879      	ldr	r1, [r7, #4]
 801d574:	4618      	mov	r0, r3
 801d576:	f7f0 fab7 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801d57a:	68fb      	ldr	r3, [r7, #12]
 801d57c:	332c      	adds	r3, #44	; 0x2c
 801d57e:	497c      	ldr	r1, [pc, #496]	; (801d770 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801d580:	4618      	mov	r0, r3
 801d582:	f7f0 fac3 	bl	800db0c <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801d586:	68fb      	ldr	r3, [r7, #12]
 801d588:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d58c:	683b      	ldr	r3, [r7, #0]
 801d58e:	681b      	ldr	r3, [r3, #0]
 801d590:	335c      	adds	r3, #92	; 0x5c
 801d592:	681b      	ldr	r3, [r3, #0]
 801d594:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801d598:	6839      	ldr	r1, [r7, #0]
 801d59a:	4610      	mov	r0, r2
 801d59c:	4798      	blx	r3
 801d59e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d5a2:	4619      	mov	r1, r3
 801d5a4:	4620      	mov	r0, r4
 801d5a6:	f7f0 fa9f 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801d5aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d5ae:	4618      	mov	r0, r3
 801d5b0:	f7f0 fa1d 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801d5b4:	e056      	b.n	801d664 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801d5b6:	68fb      	ldr	r3, [r7, #12]
 801d5b8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d5bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d5c0:	496c      	ldr	r1, [pc, #432]	; (801d774 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801d5c2:	4618      	mov	r0, r3
 801d5c4:	f7ef fe5b 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801d5c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d5cc:	4619      	mov	r1, r3
 801d5ce:	4620      	mov	r0, r4
 801d5d0:	f7ef fec1 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801d5d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d5d8:	4618      	mov	r0, r3
 801d5da:	f7f0 fa08 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801d5de:	68fb      	ldr	r3, [r7, #12]
 801d5e0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d5e4:	683b      	ldr	r3, [r7, #0]
 801d5e6:	681b      	ldr	r3, [r3, #0]
 801d5e8:	335c      	adds	r3, #92	; 0x5c
 801d5ea:	681b      	ldr	r3, [r3, #0]
 801d5ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801d5f0:	6839      	ldr	r1, [r7, #0]
 801d5f2:	4610      	mov	r0, r2
 801d5f4:	4798      	blx	r3
 801d5f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d5fa:	4619      	mov	r1, r3
 801d5fc:	4620      	mov	r0, r4
 801d5fe:	f7f0 fa73 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801d602:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d606:	4618      	mov	r0, r3
 801d608:	f7f0 f9f1 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801d60c:	68fb      	ldr	r3, [r7, #12]
 801d60e:	332c      	adds	r3, #44	; 0x2c
 801d610:	4959      	ldr	r1, [pc, #356]	; (801d778 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801d612:	4618      	mov	r0, r3
 801d614:	f7f0 fa7a 	bl	800db0c <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801d618:	68fb      	ldr	r3, [r7, #12]
 801d61a:	332c      	adds	r3, #44	; 0x2c
 801d61c:	6879      	ldr	r1, [r7, #4]
 801d61e:	4618      	mov	r0, r3
 801d620:	f7f0 fa62 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801d624:	68fb      	ldr	r3, [r7, #12]
 801d626:	332c      	adds	r3, #44	; 0x2c
 801d628:	4954      	ldr	r1, [pc, #336]	; (801d77c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801d62a:	4618      	mov	r0, r3
 801d62c:	f7f0 fa6e 	bl	800db0c <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801d630:	68fb      	ldr	r3, [r7, #12]
 801d632:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d636:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d63a:	6839      	ldr	r1, [r7, #0]
 801d63c:	4618      	mov	r0, r3
 801d63e:	f7fd faa3 	bl	801ab88 <_Z10StringFromRK14MockNamedValue>
 801d642:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d646:	4619      	mov	r1, r3
 801d648:	4620      	mov	r0, r4
 801d64a:	f7f0 fa4d 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801d64e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d652:	4618      	mov	r0, r3
 801d654:	f7f0 f9cb 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801d658:	68fb      	ldr	r3, [r7, #12]
 801d65a:	332c      	adds	r3, #44	; 0x2c
 801d65c:	4948      	ldr	r1, [pc, #288]	; (801d780 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801d65e:	4618      	mov	r0, r3
 801d660:	f7f0 fa54 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801d664:	68fb      	ldr	r3, [r7, #12]
 801d666:	332c      	adds	r3, #44	; 0x2c
 801d668:	4946      	ldr	r1, [pc, #280]	; (801d784 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801d66a:	4618      	mov	r0, r3
 801d66c:	f7f0 fa4e 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d670:	68fb      	ldr	r3, [r7, #12]
 801d672:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801d674:	6879      	ldr	r1, [r7, #4]
 801d676:	4618      	mov	r0, r3
 801d678:	f7ff fdac 	bl	801d1d4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801d67c:	68fb      	ldr	r3, [r7, #12]
 801d67e:	332c      	adds	r3, #44	; 0x2c
 801d680:	4941      	ldr	r1, [pc, #260]	; (801d788 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801d682:	4618      	mov	r0, r3
 801d684:	f7f0 fa42 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801d688:	68fb      	ldr	r3, [r7, #12]
 801d68a:	332c      	adds	r3, #44	; 0x2c
 801d68c:	6879      	ldr	r1, [r7, #4]
 801d68e:	4618      	mov	r0, r3
 801d690:	f7f0 fa2a 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801d694:	68fb      	ldr	r3, [r7, #12]
 801d696:	332c      	adds	r3, #44	; 0x2c
 801d698:	493a      	ldr	r1, [pc, #232]	; (801d784 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801d69a:	4618      	mov	r0, r3
 801d69c:	f7f0 fa36 	bl	800db0c <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801d6a0:	68fb      	ldr	r3, [r7, #12]
 801d6a2:	332c      	adds	r3, #44	; 0x2c
 801d6a4:	4939      	ldr	r1, [pc, #228]	; (801d78c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801d6a6:	4618      	mov	r0, r3
 801d6a8:	f7f0 fa30 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801d6ac:	68fb      	ldr	r3, [r7, #12]
 801d6ae:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d6b2:	683b      	ldr	r3, [r7, #0]
 801d6b4:	681b      	ldr	r3, [r3, #0]
 801d6b6:	3360      	adds	r3, #96	; 0x60
 801d6b8:	681b      	ldr	r3, [r3, #0]
 801d6ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801d6be:	6839      	ldr	r1, [r7, #0]
 801d6c0:	4610      	mov	r0, r2
 801d6c2:	4798      	blx	r3
 801d6c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d6c8:	4619      	mov	r1, r3
 801d6ca:	4620      	mov	r0, r4
 801d6cc:	f7f0 fa0c 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801d6d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d6d4:	4618      	mov	r0, r3
 801d6d6:	f7f0 f98a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801d6da:	68fb      	ldr	r3, [r7, #12]
 801d6dc:	332c      	adds	r3, #44	; 0x2c
 801d6de:	492c      	ldr	r1, [pc, #176]	; (801d790 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801d6e0:	4618      	mov	r0, r3
 801d6e2:	f7f0 fa13 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801d6e6:	68fb      	ldr	r3, [r7, #12]
 801d6e8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d6ec:	683b      	ldr	r3, [r7, #0]
 801d6ee:	681b      	ldr	r3, [r3, #0]
 801d6f0:	335c      	adds	r3, #92	; 0x5c
 801d6f2:	681b      	ldr	r3, [r3, #0]
 801d6f4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d6f8:	6839      	ldr	r1, [r7, #0]
 801d6fa:	4610      	mov	r0, r2
 801d6fc:	4798      	blx	r3
 801d6fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d702:	4619      	mov	r1, r3
 801d704:	4620      	mov	r0, r4
 801d706:	f7f0 f9ef 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801d70a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d70e:	4618      	mov	r0, r3
 801d710:	f7f0 f96d 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801d714:	68fb      	ldr	r3, [r7, #12]
 801d716:	332c      	adds	r3, #44	; 0x2c
 801d718:	491e      	ldr	r1, [pc, #120]	; (801d794 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801d71a:	4618      	mov	r0, r3
 801d71c:	f7f0 f9f6 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801d720:	68fb      	ldr	r3, [r7, #12]
 801d722:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d726:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d72a:	6839      	ldr	r1, [r7, #0]
 801d72c:	4618      	mov	r0, r3
 801d72e:	f7fd fa2b 	bl	801ab88 <_Z10StringFromRK14MockNamedValue>
 801d732:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d736:	4619      	mov	r1, r3
 801d738:	4620      	mov	r0, r4
 801d73a:	f7f0 f9d5 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801d73e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d742:	4618      	mov	r0, r3
 801d744:	f7f0 f953 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801d748:	68fb      	ldr	r3, [r7, #12]
 801d74a:	332c      	adds	r3, #44	; 0x2c
 801d74c:	490c      	ldr	r1, [pc, #48]	; (801d780 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801d74e:	4618      	mov	r0, r3
 801d750:	f7f0 f9dc 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801d754:	f107 0310 	add.w	r3, r7, #16
 801d758:	4618      	mov	r0, r3
 801d75a:	f7fe fdd1 	bl	801c300 <_ZN21MockExpectedCallsListD1Ev>
}
 801d75e:	68fb      	ldr	r3, [r7, #12]
 801d760:	4618      	mov	r0, r3
 801d762:	3764      	adds	r7, #100	; 0x64
 801d764:	46bd      	mov	sp, r7
 801d766:	bd90      	pop	{r4, r7, pc}
 801d768:	0802946c 	.word	0x0802946c
 801d76c:	08026b30 	.word	0x08026b30
 801d770:	08026b68 	.word	0x08026b68
 801d774:	08026b6c 	.word	0x08026b6c
 801d778:	08026ba4 	.word	0x08026ba4
 801d77c:	08026bb4 	.word	0x08026bb4
 801d780:	08026bbc 	.word	0x08026bbc
 801d784:	08026a34 	.word	0x08026a34
 801d788:	08026bc0 	.word	0x08026bc0
 801d78c:	080269c8 	.word	0x080269c8
 801d790:	08026bf4 	.word	0x08026bf4
 801d794:	08026bf8 	.word	0x08026bf8

0801d798 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801d798:	b590      	push	{r4, r7, lr}
 801d79a:	b097      	sub	sp, #92	; 0x5c
 801d79c:	af00      	add	r7, sp, #0
 801d79e:	60f8      	str	r0, [r7, #12]
 801d7a0:	60b9      	str	r1, [r7, #8]
 801d7a2:	607a      	str	r2, [r7, #4]
 801d7a4:	603b      	str	r3, [r7, #0]
 801d7a6:	68fb      	ldr	r3, [r7, #12]
 801d7a8:	68b9      	ldr	r1, [r7, #8]
 801d7aa:	4618      	mov	r0, r3
 801d7ac:	f7ff fc8a 	bl	801d0c4 <_ZN11MockFailureC1EP10UtestShell>
 801d7b0:	4a90      	ldr	r2, [pc, #576]	; (801d9f4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801d7b2:	68fb      	ldr	r3, [r7, #12]
 801d7b4:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801d7b6:	f107 0310 	add.w	r3, r7, #16
 801d7ba:	4618      	mov	r0, r3
 801d7bc:	f7fe fd8c 	bl	801c2d8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801d7c0:	f107 0310 	add.w	r3, r7, #16
 801d7c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d7c6:	6879      	ldr	r1, [r7, #4]
 801d7c8:	4618      	mov	r0, r3
 801d7ca:	f7fe ff2b 	bl	801c624 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801d7ce:	683b      	ldr	r3, [r7, #0]
 801d7d0:	681b      	ldr	r3, [r3, #0]
 801d7d2:	335c      	adds	r3, #92	; 0x5c
 801d7d4:	681b      	ldr	r3, [r3, #0]
 801d7d6:	f107 0218 	add.w	r2, r7, #24
 801d7da:	6839      	ldr	r1, [r7, #0]
 801d7dc:	4610      	mov	r0, r2
 801d7de:	4798      	blx	r3
 801d7e0:	f107 0218 	add.w	r2, r7, #24
 801d7e4:	f107 0310 	add.w	r3, r7, #16
 801d7e8:	4611      	mov	r1, r2
 801d7ea:	4618      	mov	r0, r3
 801d7ec:	f7ff f812 	bl	801c814 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801d7f0:	f107 0318 	add.w	r3, r7, #24
 801d7f4:	4618      	mov	r0, r3
 801d7f6:	f7f0 f8fa 	bl	800d9ee <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801d7fa:	f107 0310 	add.w	r3, r7, #16
 801d7fe:	4618      	mov	r0, r3
 801d800:	f7fe fdeb 	bl	801c3da <_ZNK21MockExpectedCallsList7isEmptyEv>
 801d804:	4603      	mov	r3, r0
 801d806:	2b00      	cmp	r3, #0
 801d808:	d037      	beq.n	801d87a <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801d80a:	68fb      	ldr	r3, [r7, #12]
 801d80c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d810:	f107 0320 	add.w	r3, r7, #32
 801d814:	4978      	ldr	r1, [pc, #480]	; (801d9f8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801d816:	4618      	mov	r0, r3
 801d818:	f7ef fd31 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801d81c:	f107 0320 	add.w	r3, r7, #32
 801d820:	4619      	mov	r1, r3
 801d822:	4620      	mov	r0, r4
 801d824:	f7ef fd97 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801d828:	f107 0320 	add.w	r3, r7, #32
 801d82c:	4618      	mov	r0, r3
 801d82e:	f7f0 f8de 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801d832:	68fb      	ldr	r3, [r7, #12]
 801d834:	332c      	adds	r3, #44	; 0x2c
 801d836:	6879      	ldr	r1, [r7, #4]
 801d838:	4618      	mov	r0, r3
 801d83a:	f7f0 f955 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801d83e:	68fb      	ldr	r3, [r7, #12]
 801d840:	332c      	adds	r3, #44	; 0x2c
 801d842:	496e      	ldr	r1, [pc, #440]	; (801d9fc <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801d844:	4618      	mov	r0, r3
 801d846:	f7f0 f961 	bl	800db0c <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801d84a:	68fb      	ldr	r3, [r7, #12]
 801d84c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d850:	683b      	ldr	r3, [r7, #0]
 801d852:	681b      	ldr	r3, [r3, #0]
 801d854:	335c      	adds	r3, #92	; 0x5c
 801d856:	681b      	ldr	r3, [r3, #0]
 801d858:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801d85c:	6839      	ldr	r1, [r7, #0]
 801d85e:	4610      	mov	r0, r2
 801d860:	4798      	blx	r3
 801d862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d866:	4619      	mov	r1, r3
 801d868:	4620      	mov	r0, r4
 801d86a:	f7f0 f93d 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801d86e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d872:	4618      	mov	r0, r3
 801d874:	f7f0 f8bb 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801d878:	e059      	b.n	801d92e <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801d87a:	68fb      	ldr	r3, [r7, #12]
 801d87c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d880:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d884:	495e      	ldr	r1, [pc, #376]	; (801da00 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801d886:	4618      	mov	r0, r3
 801d888:	f7ef fcf9 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801d88c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d890:	4619      	mov	r1, r3
 801d892:	4620      	mov	r0, r4
 801d894:	f7ef fd5f 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801d898:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d89c:	4618      	mov	r0, r3
 801d89e:	f7f0 f8a6 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801d8a2:	68fb      	ldr	r3, [r7, #12]
 801d8a4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d8a8:	683b      	ldr	r3, [r7, #0]
 801d8aa:	681b      	ldr	r3, [r3, #0]
 801d8ac:	3360      	adds	r3, #96	; 0x60
 801d8ae:	681b      	ldr	r3, [r3, #0]
 801d8b0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801d8b4:	6839      	ldr	r1, [r7, #0]
 801d8b6:	4610      	mov	r0, r2
 801d8b8:	4798      	blx	r3
 801d8ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d8be:	4619      	mov	r1, r3
 801d8c0:	4620      	mov	r0, r4
 801d8c2:	f7f0 f911 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801d8c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d8ca:	4618      	mov	r0, r3
 801d8cc:	f7f0 f88f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801d8d0:	68fb      	ldr	r3, [r7, #12]
 801d8d2:	332c      	adds	r3, #44	; 0x2c
 801d8d4:	494b      	ldr	r1, [pc, #300]	; (801da04 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801d8d6:	4618      	mov	r0, r3
 801d8d8:	f7f0 f918 	bl	800db0c <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801d8dc:	68fb      	ldr	r3, [r7, #12]
 801d8de:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d8e2:	683b      	ldr	r3, [r7, #0]
 801d8e4:	681b      	ldr	r3, [r3, #0]
 801d8e6:	335c      	adds	r3, #92	; 0x5c
 801d8e8:	681b      	ldr	r3, [r3, #0]
 801d8ea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801d8ee:	6839      	ldr	r1, [r7, #0]
 801d8f0:	4610      	mov	r0, r2
 801d8f2:	4798      	blx	r3
 801d8f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d8f8:	4619      	mov	r1, r3
 801d8fa:	4620      	mov	r0, r4
 801d8fc:	f7f0 f8f4 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801d900:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d904:	4618      	mov	r0, r3
 801d906:	f7f0 f872 	bl	800d9ee <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801d90a:	68fb      	ldr	r3, [r7, #12]
 801d90c:	332c      	adds	r3, #44	; 0x2c
 801d90e:	493e      	ldr	r1, [pc, #248]	; (801da08 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801d910:	4618      	mov	r0, r3
 801d912:	f7f0 f8fb 	bl	800db0c <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801d916:	68fb      	ldr	r3, [r7, #12]
 801d918:	332c      	adds	r3, #44	; 0x2c
 801d91a:	6879      	ldr	r1, [r7, #4]
 801d91c:	4618      	mov	r0, r3
 801d91e:	f7f0 f8e3 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801d922:	68fb      	ldr	r3, [r7, #12]
 801d924:	332c      	adds	r3, #44	; 0x2c
 801d926:	4939      	ldr	r1, [pc, #228]	; (801da0c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801d928:	4618      	mov	r0, r3
 801d92a:	f7f0 f8ef 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801d92e:	68fb      	ldr	r3, [r7, #12]
 801d930:	332c      	adds	r3, #44	; 0x2c
 801d932:	4937      	ldr	r1, [pc, #220]	; (801da10 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801d934:	4618      	mov	r0, r3
 801d936:	f7f0 f8e9 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d93a:	68fb      	ldr	r3, [r7, #12]
 801d93c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d93e:	6879      	ldr	r1, [r7, #4]
 801d940:	4618      	mov	r0, r3
 801d942:	f7ff fc47 	bl	801d1d4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801d946:	68fb      	ldr	r3, [r7, #12]
 801d948:	332c      	adds	r3, #44	; 0x2c
 801d94a:	4932      	ldr	r1, [pc, #200]	; (801da14 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801d94c:	4618      	mov	r0, r3
 801d94e:	f7f0 f8dd 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801d952:	68fb      	ldr	r3, [r7, #12]
 801d954:	332c      	adds	r3, #44	; 0x2c
 801d956:	6879      	ldr	r1, [r7, #4]
 801d958:	4618      	mov	r0, r3
 801d95a:	f7f0 f8c5 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801d95e:	68fb      	ldr	r3, [r7, #12]
 801d960:	332c      	adds	r3, #44	; 0x2c
 801d962:	492b      	ldr	r1, [pc, #172]	; (801da10 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801d964:	4618      	mov	r0, r3
 801d966:	f7f0 f8d1 	bl	800db0c <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801d96a:	68fb      	ldr	r3, [r7, #12]
 801d96c:	332c      	adds	r3, #44	; 0x2c
 801d96e:	492a      	ldr	r1, [pc, #168]	; (801da18 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801d970:	4618      	mov	r0, r3
 801d972:	f7f0 f8cb 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801d976:	68fb      	ldr	r3, [r7, #12]
 801d978:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d97c:	683b      	ldr	r3, [r7, #0]
 801d97e:	681b      	ldr	r3, [r3, #0]
 801d980:	3360      	adds	r3, #96	; 0x60
 801d982:	681b      	ldr	r3, [r3, #0]
 801d984:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801d988:	6839      	ldr	r1, [r7, #0]
 801d98a:	4610      	mov	r0, r2
 801d98c:	4798      	blx	r3
 801d98e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d992:	4619      	mov	r1, r3
 801d994:	4620      	mov	r0, r4
 801d996:	f7f0 f8a7 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801d99a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d99e:	4618      	mov	r0, r3
 801d9a0:	f7f0 f825 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801d9a4:	68fb      	ldr	r3, [r7, #12]
 801d9a6:	332c      	adds	r3, #44	; 0x2c
 801d9a8:	491c      	ldr	r1, [pc, #112]	; (801da1c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801d9aa:	4618      	mov	r0, r3
 801d9ac:	f7f0 f8ae 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801d9b0:	68fb      	ldr	r3, [r7, #12]
 801d9b2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d9b6:	683b      	ldr	r3, [r7, #0]
 801d9b8:	681b      	ldr	r3, [r3, #0]
 801d9ba:	335c      	adds	r3, #92	; 0x5c
 801d9bc:	681b      	ldr	r3, [r3, #0]
 801d9be:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d9c2:	6839      	ldr	r1, [r7, #0]
 801d9c4:	4610      	mov	r0, r2
 801d9c6:	4798      	blx	r3
 801d9c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d9cc:	4619      	mov	r1, r3
 801d9ce:	4620      	mov	r0, r4
 801d9d0:	f7f0 f88a 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801d9d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d9d8:	4618      	mov	r0, r3
 801d9da:	f7f0 f808 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801d9de:	f107 0310 	add.w	r3, r7, #16
 801d9e2:	4618      	mov	r0, r3
 801d9e4:	f7fe fc8c 	bl	801c300 <_ZN21MockExpectedCallsListD1Ev>
}
 801d9e8:	68fb      	ldr	r3, [r7, #12]
 801d9ea:	4618      	mov	r0, r3
 801d9ec:	375c      	adds	r7, #92	; 0x5c
 801d9ee:	46bd      	mov	sp, r7
 801d9f0:	bd90      	pop	{r4, r7, pc}
 801d9f2:	bf00      	nop
 801d9f4:	08029440 	.word	0x08029440
 801d9f8:	08026bfc 	.word	0x08026bfc
 801d9fc:	08026b68 	.word	0x08026b68
 801da00:	08026c3c 	.word	0x08026c3c
 801da04:	08026c68 	.word	0x08026c68
 801da08:	08026ba4 	.word	0x08026ba4
 801da0c:	08026c80 	.word	0x08026c80
 801da10:	08026a34 	.word	0x08026a34
 801da14:	08026c84 	.word	0x08026c84
 801da18:	080269c8 	.word	0x080269c8
 801da1c:	08026bf4 	.word	0x08026bf4

0801da20 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801da20:	b590      	push	{r4, r7, lr}
 801da22:	b08b      	sub	sp, #44	; 0x2c
 801da24:	af00      	add	r7, sp, #0
 801da26:	60f8      	str	r0, [r7, #12]
 801da28:	60b9      	str	r1, [r7, #8]
 801da2a:	607a      	str	r2, [r7, #4]
 801da2c:	603b      	str	r3, [r7, #0]
 801da2e:	68fb      	ldr	r3, [r7, #12]
 801da30:	68b9      	ldr	r1, [r7, #8]
 801da32:	4618      	mov	r0, r3
 801da34:	f7ff fb46 	bl	801d0c4 <_ZN11MockFailureC1EP10UtestShell>
 801da38:	4a30      	ldr	r2, [pc, #192]	; (801dafc <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801da3a:	68fb      	ldr	r3, [r7, #12]
 801da3c:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801da3e:	f107 0310 	add.w	r3, r7, #16
 801da42:	4618      	mov	r0, r3
 801da44:	f7fe fc48 	bl	801c2d8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801da48:	f107 0310 	add.w	r3, r7, #16
 801da4c:	683a      	ldr	r2, [r7, #0]
 801da4e:	6879      	ldr	r1, [r7, #4]
 801da50:	4618      	mov	r0, r3
 801da52:	f7fe fde7 	bl	801c624 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801da56:	68fb      	ldr	r3, [r7, #12]
 801da58:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801da5c:	f107 0318 	add.w	r3, r7, #24
 801da60:	4927      	ldr	r1, [pc, #156]	; (801db00 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801da62:	4618      	mov	r0, r3
 801da64:	f7ef fc0b 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801da68:	f107 0318 	add.w	r3, r7, #24
 801da6c:	4619      	mov	r1, r3
 801da6e:	4620      	mov	r0, r4
 801da70:	f7ef fc71 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801da74:	f107 0318 	add.w	r3, r7, #24
 801da78:	4618      	mov	r0, r3
 801da7a:	f7ef ffb8 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801da7e:	68fb      	ldr	r3, [r7, #12]
 801da80:	332c      	adds	r3, #44	; 0x2c
 801da82:	6879      	ldr	r1, [r7, #4]
 801da84:	4618      	mov	r0, r3
 801da86:	f7f0 f82f 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801da8a:	68fb      	ldr	r3, [r7, #12]
 801da8c:	332c      	adds	r3, #44	; 0x2c
 801da8e:	491d      	ldr	r1, [pc, #116]	; (801db04 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801da90:	4618      	mov	r0, r3
 801da92:	f7f0 f83b 	bl	800db0c <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801da96:	68fb      	ldr	r3, [r7, #12]
 801da98:	683a      	ldr	r2, [r7, #0]
 801da9a:	6879      	ldr	r1, [r7, #4]
 801da9c:	4618      	mov	r0, r3
 801da9e:	f7ff fb99 	bl	801d1d4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801daa2:	68fb      	ldr	r3, [r7, #12]
 801daa4:	332c      	adds	r3, #44	; 0x2c
 801daa6:	4918      	ldr	r1, [pc, #96]	; (801db08 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801daa8:	4618      	mov	r0, r3
 801daaa:	f7f0 f82f 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801daae:	68fb      	ldr	r3, [r7, #12]
 801dab0:	332c      	adds	r3, #44	; 0x2c
 801dab2:	4916      	ldr	r1, [pc, #88]	; (801db0c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801dab4:	4618      	mov	r0, r3
 801dab6:	f7f0 f829 	bl	800db0c <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801daba:	68fb      	ldr	r3, [r7, #12]
 801dabc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801dac0:	f107 0320 	add.w	r3, r7, #32
 801dac4:	f107 0210 	add.w	r2, r7, #16
 801dac8:	4611      	mov	r1, r2
 801daca:	4618      	mov	r0, r3
 801dacc:	f7ff f9bc 	bl	801ce48 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801dad0:	f107 0320 	add.w	r3, r7, #32
 801dad4:	4619      	mov	r1, r3
 801dad6:	4620      	mov	r0, r4
 801dad8:	f7f0 f806 	bl	800dae8 <_ZN12SimpleStringpLERKS_>
 801dadc:	f107 0320 	add.w	r3, r7, #32
 801dae0:	4618      	mov	r0, r3
 801dae2:	f7ef ff84 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801dae6:	f107 0310 	add.w	r3, r7, #16
 801daea:	4618      	mov	r0, r3
 801daec:	f7fe fc08 	bl	801c300 <_ZN21MockExpectedCallsListD1Ev>
}
 801daf0:	68fb      	ldr	r3, [r7, #12]
 801daf2:	4618      	mov	r0, r3
 801daf4:	372c      	adds	r7, #44	; 0x2c
 801daf6:	46bd      	mov	sp, r7
 801daf8:	bd90      	pop	{r4, r7, pc}
 801dafa:	bf00      	nop
 801dafc:	08029414 	.word	0x08029414
 801db00:	08026cc0 	.word	0x08026cc0
 801db04:	08026cf0 	.word	0x08026cf0
 801db08:	08026d04 	.word	0x08026d04
 801db0c:	080269c8 	.word	0x080269c8

0801db10 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801db10:	b590      	push	{r4, r7, lr}
 801db12:	b087      	sub	sp, #28
 801db14:	af00      	add	r7, sp, #0
 801db16:	60f8      	str	r0, [r7, #12]
 801db18:	60b9      	str	r1, [r7, #8]
 801db1a:	607a      	str	r2, [r7, #4]
 801db1c:	68fb      	ldr	r3, [r7, #12]
 801db1e:	68b9      	ldr	r1, [r7, #8]
 801db20:	4618      	mov	r0, r3
 801db22:	f7ff facf 	bl	801d0c4 <_ZN11MockFailureC1EP10UtestShell>
 801db26:	4a10      	ldr	r2, [pc, #64]	; (801db68 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801db28:	68fb      	ldr	r3, [r7, #12]
 801db2a:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801db2c:	68fb      	ldr	r3, [r7, #12]
 801db2e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801db32:	6878      	ldr	r0, [r7, #4]
 801db34:	f7ef ff2e 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801db38:	4602      	mov	r2, r0
 801db3a:	f107 0310 	add.w	r3, r7, #16
 801db3e:	490b      	ldr	r1, [pc, #44]	; (801db6c <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801db40:	4618      	mov	r0, r3
 801db42:	f7f0 fc5b 	bl	800e3fc <_Z16StringFromFormatPKcz>
 801db46:	f107 0310 	add.w	r3, r7, #16
 801db4a:	4619      	mov	r1, r3
 801db4c:	4620      	mov	r0, r4
 801db4e:	f7ef fc02 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801db52:	f107 0310 	add.w	r3, r7, #16
 801db56:	4618      	mov	r0, r3
 801db58:	f7ef ff49 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 801db5c:	68fb      	ldr	r3, [r7, #12]
 801db5e:	4618      	mov	r0, r3
 801db60:	371c      	adds	r7, #28
 801db62:	46bd      	mov	sp, r7
 801db64:	bd90      	pop	{r4, r7, pc}
 801db66:	bf00      	nop
 801db68:	080293e8 	.word	0x080293e8
 801db6c:	08026d30 	.word	0x08026d30

0801db70 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801db70:	b590      	push	{r4, r7, lr}
 801db72:	b087      	sub	sp, #28
 801db74:	af00      	add	r7, sp, #0
 801db76:	60f8      	str	r0, [r7, #12]
 801db78:	60b9      	str	r1, [r7, #8]
 801db7a:	607a      	str	r2, [r7, #4]
 801db7c:	68fb      	ldr	r3, [r7, #12]
 801db7e:	68b9      	ldr	r1, [r7, #8]
 801db80:	4618      	mov	r0, r3
 801db82:	f7ff fa9f 	bl	801d0c4 <_ZN11MockFailureC1EP10UtestShell>
 801db86:	4a10      	ldr	r2, [pc, #64]	; (801dbc8 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801db88:	68fb      	ldr	r3, [r7, #12]
 801db8a:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801db8c:	68fb      	ldr	r3, [r7, #12]
 801db8e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801db92:	6878      	ldr	r0, [r7, #4]
 801db94:	f7ef fefe 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801db98:	4602      	mov	r2, r0
 801db9a:	f107 0310 	add.w	r3, r7, #16
 801db9e:	490b      	ldr	r1, [pc, #44]	; (801dbcc <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801dba0:	4618      	mov	r0, r3
 801dba2:	f7f0 fc2b 	bl	800e3fc <_Z16StringFromFormatPKcz>
 801dba6:	f107 0310 	add.w	r3, r7, #16
 801dbaa:	4619      	mov	r1, r3
 801dbac:	4620      	mov	r0, r4
 801dbae:	f7ef fbd2 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801dbb2:	f107 0310 	add.w	r3, r7, #16
 801dbb6:	4618      	mov	r0, r3
 801dbb8:	f7ef ff19 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 801dbbc:	68fb      	ldr	r3, [r7, #12]
 801dbbe:	4618      	mov	r0, r3
 801dbc0:	371c      	adds	r7, #28
 801dbc2:	46bd      	mov	sp, r7
 801dbc4:	bd90      	pop	{r4, r7, pc}
 801dbc6:	bf00      	nop
 801dbc8:	080293bc 	.word	0x080293bc
 801dbcc:	08026d88 	.word	0x08026d88

0801dbd0 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801dbd0:	b590      	push	{r4, r7, lr}
 801dbd2:	b087      	sub	sp, #28
 801dbd4:	af00      	add	r7, sp, #0
 801dbd6:	60f8      	str	r0, [r7, #12]
 801dbd8:	60b9      	str	r1, [r7, #8]
 801dbda:	607a      	str	r2, [r7, #4]
 801dbdc:	603b      	str	r3, [r7, #0]
 801dbde:	68fb      	ldr	r3, [r7, #12]
 801dbe0:	68b9      	ldr	r1, [r7, #8]
 801dbe2:	4618      	mov	r0, r3
 801dbe4:	f7ff fa6e 	bl	801d0c4 <_ZN11MockFailureC1EP10UtestShell>
 801dbe8:	4a12      	ldr	r2, [pc, #72]	; (801dc34 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801dbea:	68fb      	ldr	r3, [r7, #12]
 801dbec:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801dbee:	68fb      	ldr	r3, [r7, #12]
 801dbf0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801dbf4:	6878      	ldr	r0, [r7, #4]
 801dbf6:	f7ef fecd 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801dbfa:	4602      	mov	r2, r0
 801dbfc:	f107 0010 	add.w	r0, r7, #16
 801dc00:	683b      	ldr	r3, [r7, #0]
 801dc02:	490d      	ldr	r1, [pc, #52]	; (801dc38 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801dc04:	f7f0 fbfa 	bl	800e3fc <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801dc08:	f107 0310 	add.w	r3, r7, #16
 801dc0c:	4619      	mov	r1, r3
 801dc0e:	4620      	mov	r0, r4
 801dc10:	f7ef fba1 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801dc14:	f107 0310 	add.w	r3, r7, #16
 801dc18:	4618      	mov	r0, r3
 801dc1a:	f7ef fee8 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801dc1e:	68fb      	ldr	r3, [r7, #12]
 801dc20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dc22:	6879      	ldr	r1, [r7, #4]
 801dc24:	4618      	mov	r0, r3
 801dc26:	f7ff fad5 	bl	801d1d4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801dc2a:	68fb      	ldr	r3, [r7, #12]
 801dc2c:	4618      	mov	r0, r3
 801dc2e:	371c      	adds	r7, #28
 801dc30:	46bd      	mov	sp, r7
 801dc32:	bd90      	pop	{r4, r7, pc}
 801dc34:	08029390 	.word	0x08029390
 801dc38:	08026dd8 	.word	0x08026dd8

0801dc3c <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801dc3c:	b590      	push	{r4, r7, lr}
 801dc3e:	b087      	sub	sp, #28
 801dc40:	af00      	add	r7, sp, #0
 801dc42:	60f8      	str	r0, [r7, #12]
 801dc44:	60b9      	str	r1, [r7, #8]
 801dc46:	607a      	str	r2, [r7, #4]
 801dc48:	603b      	str	r3, [r7, #0]
 801dc4a:	68fb      	ldr	r3, [r7, #12]
 801dc4c:	68b9      	ldr	r1, [r7, #8]
 801dc4e:	4618      	mov	r0, r3
 801dc50:	f7ff fa38 	bl	801d0c4 <_ZN11MockFailureC1EP10UtestShell>
 801dc54:	4a12      	ldr	r2, [pc, #72]	; (801dca0 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801dc56:	68fb      	ldr	r3, [r7, #12]
 801dc58:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801dc5a:	68fb      	ldr	r3, [r7, #12]
 801dc5c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801dc60:	6878      	ldr	r0, [r7, #4]
 801dc62:	f7ef fe97 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801dc66:	4602      	mov	r2, r0
 801dc68:	f107 0310 	add.w	r3, r7, #16
 801dc6c:	490d      	ldr	r1, [pc, #52]	; (801dca4 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801dc6e:	4618      	mov	r0, r3
 801dc70:	f7f0 fbc4 	bl	800e3fc <_Z16StringFromFormatPKcz>
 801dc74:	f107 0310 	add.w	r3, r7, #16
 801dc78:	4619      	mov	r1, r3
 801dc7a:	4620      	mov	r0, r4
 801dc7c:	f7ef fb6b 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801dc80:	f107 0310 	add.w	r3, r7, #16
 801dc84:	4618      	mov	r0, r3
 801dc86:	f7ef feb2 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801dc8a:	68fb      	ldr	r3, [r7, #12]
 801dc8c:	683a      	ldr	r2, [r7, #0]
 801dc8e:	6879      	ldr	r1, [r7, #4]
 801dc90:	4618      	mov	r0, r3
 801dc92:	f7ff fa9f 	bl	801d1d4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801dc96:	68fb      	ldr	r3, [r7, #12]
 801dc98:	4618      	mov	r0, r3
 801dc9a:	371c      	adds	r7, #28
 801dc9c:	46bd      	mov	sp, r7
 801dc9e:	bd90      	pop	{r4, r7, pc}
 801dca0:	08029364 	.word	0x08029364
 801dca4:	08026e3c 	.word	0x08026e3c

0801dca8 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801dca8:	b480      	push	{r7}
 801dcaa:	b083      	sub	sp, #12
 801dcac:	af00      	add	r7, sp, #0
 801dcae:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801dcb0:	4a04      	ldr	r2, [pc, #16]	; (801dcc4 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801dcb2:	687b      	ldr	r3, [r7, #4]
 801dcb4:	6013      	str	r3, [r2, #0]
}
 801dcb6:	bf00      	nop
 801dcb8:	370c      	adds	r7, #12
 801dcba:	46bd      	mov	sp, r7
 801dcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcc0:	4770      	bx	lr
 801dcc2:	bf00      	nop
 801dcc4:	20000f44 	.word	0x20000f44

0801dcc8 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801dcc8:	b580      	push	{r7, lr}
 801dcca:	b082      	sub	sp, #8
 801dccc:	af00      	add	r7, sp, #0
 801dcce:	6078      	str	r0, [r7, #4]
 801dcd0:	6039      	str	r1, [r7, #0]
 801dcd2:	4a10      	ldr	r2, [pc, #64]	; (801dd14 <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	601a      	str	r2, [r3, #0]
 801dcd8:	687b      	ldr	r3, [r7, #4]
 801dcda:	3304      	adds	r3, #4
 801dcdc:	6839      	ldr	r1, [r7, #0]
 801dcde:	4618      	mov	r0, r3
 801dce0:	f7ef fb21 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
 801dce4:	687b      	ldr	r3, [r7, #4]
 801dce6:	330c      	adds	r3, #12
 801dce8:	490b      	ldr	r1, [pc, #44]	; (801dd18 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801dcea:	4618      	mov	r0, r3
 801dcec:	f7ef fac7 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	2200      	movs	r2, #0
 801dcf4:	629a      	str	r2, [r3, #40]	; 0x28
 801dcf6:	687b      	ldr	r3, [r7, #4]
 801dcf8:	2200      	movs	r2, #0
 801dcfa:	62da      	str	r2, [r3, #44]	; 0x2c
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	2200      	movs	r2, #0
 801dd00:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801dd02:	687b      	ldr	r3, [r7, #4]
 801dd04:	2200      	movs	r2, #0
 801dd06:	619a      	str	r2, [r3, #24]
}
 801dd08:	687b      	ldr	r3, [r7, #4]
 801dd0a:	4618      	mov	r0, r3
 801dd0c:	3708      	adds	r7, #8
 801dd0e:	46bd      	mov	sp, r7
 801dd10:	bd80      	pop	{r7, pc}
 801dd12:	bf00      	nop
 801dd14:	08029bec 	.word	0x08029bec
 801dd18:	08026e8c 	.word	0x08026e8c

0801dd1c <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801dd1c:	b580      	push	{r7, lr}
 801dd1e:	b082      	sub	sp, #8
 801dd20:	af00      	add	r7, sp, #0
 801dd22:	6078      	str	r0, [r7, #4]
 801dd24:	4a08      	ldr	r2, [pc, #32]	; (801dd48 <_ZN14MockNamedValueD1Ev+0x2c>)
 801dd26:	687b      	ldr	r3, [r7, #4]
 801dd28:	601a      	str	r2, [r3, #0]
 801dd2a:	687b      	ldr	r3, [r7, #4]
 801dd2c:	330c      	adds	r3, #12
 801dd2e:	4618      	mov	r0, r3
 801dd30:	f7ef fe5d 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801dd34:	687b      	ldr	r3, [r7, #4]
 801dd36:	3304      	adds	r3, #4
 801dd38:	4618      	mov	r0, r3
 801dd3a:	f7ef fe58 	bl	800d9ee <_ZN12SimpleStringD1Ev>
{
}
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	4618      	mov	r0, r3
 801dd42:	3708      	adds	r7, #8
 801dd44:	46bd      	mov	sp, r7
 801dd46:	bd80      	pop	{r7, pc}
 801dd48:	08029bec 	.word	0x08029bec

0801dd4c <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801dd4c:	b580      	push	{r7, lr}
 801dd4e:	b082      	sub	sp, #8
 801dd50:	af00      	add	r7, sp, #0
 801dd52:	6078      	str	r0, [r7, #4]
}
 801dd54:	6878      	ldr	r0, [r7, #4]
 801dd56:	f7ff ffe1 	bl	801dd1c <_ZN14MockNamedValueD1Ev>
 801dd5a:	2138      	movs	r1, #56	; 0x38
 801dd5c:	6878      	ldr	r0, [r7, #4]
 801dd5e:	f7ec fedf 	bl	800ab20 <_ZdlPvj>
 801dd62:	687b      	ldr	r3, [r7, #4]
 801dd64:	4618      	mov	r0, r3
 801dd66:	3708      	adds	r7, #8
 801dd68:	46bd      	mov	sp, r7
 801dd6a:	bd80      	pop	{r7, pc}

0801dd6c <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801dd6c:	b590      	push	{r4, r7, lr}
 801dd6e:	b085      	sub	sp, #20
 801dd70:	af00      	add	r7, sp, #0
 801dd72:	6078      	str	r0, [r7, #4]
 801dd74:	460b      	mov	r3, r1
 801dd76:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801dd78:	687b      	ldr	r3, [r7, #4]
 801dd7a:	f103 040c 	add.w	r4, r3, #12
 801dd7e:	f107 0308 	add.w	r3, r7, #8
 801dd82:	490b      	ldr	r1, [pc, #44]	; (801ddb0 <_ZN14MockNamedValue8setValueEb+0x44>)
 801dd84:	4618      	mov	r0, r3
 801dd86:	f7ef fa7a 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801dd8a:	f107 0308 	add.w	r3, r7, #8
 801dd8e:	4619      	mov	r1, r3
 801dd90:	4620      	mov	r0, r4
 801dd92:	f7ef fae0 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801dd96:	f107 0308 	add.w	r3, r7, #8
 801dd9a:	4618      	mov	r0, r3
 801dd9c:	f7ef fe27 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801dda0:	687b      	ldr	r3, [r7, #4]
 801dda2:	78fa      	ldrb	r2, [r7, #3]
 801dda4:	761a      	strb	r2, [r3, #24]
}
 801dda6:	bf00      	nop
 801dda8:	3714      	adds	r7, #20
 801ddaa:	46bd      	mov	sp, r7
 801ddac:	bd90      	pop	{r4, r7, pc}
 801ddae:	bf00      	nop
 801ddb0:	08026e90 	.word	0x08026e90

0801ddb4 <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801ddb4:	b590      	push	{r4, r7, lr}
 801ddb6:	b085      	sub	sp, #20
 801ddb8:	af00      	add	r7, sp, #0
 801ddba:	6078      	str	r0, [r7, #4]
 801ddbc:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801ddbe:	687b      	ldr	r3, [r7, #4]
 801ddc0:	f103 040c 	add.w	r4, r3, #12
 801ddc4:	f107 0308 	add.w	r3, r7, #8
 801ddc8:	490a      	ldr	r1, [pc, #40]	; (801ddf4 <_ZN14MockNamedValue8setValueEj+0x40>)
 801ddca:	4618      	mov	r0, r3
 801ddcc:	f7ef fa57 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801ddd0:	f107 0308 	add.w	r3, r7, #8
 801ddd4:	4619      	mov	r1, r3
 801ddd6:	4620      	mov	r0, r4
 801ddd8:	f7ef fabd 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801dddc:	f107 0308 	add.w	r3, r7, #8
 801dde0:	4618      	mov	r0, r3
 801dde2:	f7ef fe04 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	683a      	ldr	r2, [r7, #0]
 801ddea:	619a      	str	r2, [r3, #24]
}
 801ddec:	bf00      	nop
 801ddee:	3714      	adds	r7, #20
 801ddf0:	46bd      	mov	sp, r7
 801ddf2:	bd90      	pop	{r4, r7, pc}
 801ddf4:	08026e98 	.word	0x08026e98

0801ddf8 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801ddf8:	b590      	push	{r4, r7, lr}
 801ddfa:	b085      	sub	sp, #20
 801ddfc:	af00      	add	r7, sp, #0
 801ddfe:	6078      	str	r0, [r7, #4]
 801de00:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	f103 040c 	add.w	r4, r3, #12
 801de08:	f107 0308 	add.w	r3, r7, #8
 801de0c:	490a      	ldr	r1, [pc, #40]	; (801de38 <_ZN14MockNamedValue8setValueEi+0x40>)
 801de0e:	4618      	mov	r0, r3
 801de10:	f7ef fa35 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801de14:	f107 0308 	add.w	r3, r7, #8
 801de18:	4619      	mov	r1, r3
 801de1a:	4620      	mov	r0, r4
 801de1c:	f7ef fa9b 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801de20:	f107 0308 	add.w	r3, r7, #8
 801de24:	4618      	mov	r0, r3
 801de26:	f7ef fde2 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801de2a:	687b      	ldr	r3, [r7, #4]
 801de2c:	683a      	ldr	r2, [r7, #0]
 801de2e:	619a      	str	r2, [r3, #24]
}
 801de30:	bf00      	nop
 801de32:	3714      	adds	r7, #20
 801de34:	46bd      	mov	sp, r7
 801de36:	bd90      	pop	{r4, r7, pc}
 801de38:	08026e8c 	.word	0x08026e8c

0801de3c <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801de3c:	b590      	push	{r4, r7, lr}
 801de3e:	b085      	sub	sp, #20
 801de40:	af00      	add	r7, sp, #0
 801de42:	6078      	str	r0, [r7, #4]
 801de44:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801de46:	687b      	ldr	r3, [r7, #4]
 801de48:	f103 040c 	add.w	r4, r3, #12
 801de4c:	f107 0308 	add.w	r3, r7, #8
 801de50:	490a      	ldr	r1, [pc, #40]	; (801de7c <_ZN14MockNamedValue8setValueEl+0x40>)
 801de52:	4618      	mov	r0, r3
 801de54:	f7ef fa13 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801de58:	f107 0308 	add.w	r3, r7, #8
 801de5c:	4619      	mov	r1, r3
 801de5e:	4620      	mov	r0, r4
 801de60:	f7ef fa79 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801de64:	f107 0308 	add.w	r3, r7, #8
 801de68:	4618      	mov	r0, r3
 801de6a:	f7ef fdc0 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801de6e:	687b      	ldr	r3, [r7, #4]
 801de70:	683a      	ldr	r2, [r7, #0]
 801de72:	619a      	str	r2, [r3, #24]
}
 801de74:	bf00      	nop
 801de76:	3714      	adds	r7, #20
 801de78:	46bd      	mov	sp, r7
 801de7a:	bd90      	pop	{r4, r7, pc}
 801de7c:	08026ea8 	.word	0x08026ea8

0801de80 <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801de80:	b590      	push	{r4, r7, lr}
 801de82:	b085      	sub	sp, #20
 801de84:	af00      	add	r7, sp, #0
 801de86:	6078      	str	r0, [r7, #4]
 801de88:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801de8a:	687b      	ldr	r3, [r7, #4]
 801de8c:	f103 040c 	add.w	r4, r3, #12
 801de90:	f107 0308 	add.w	r3, r7, #8
 801de94:	490a      	ldr	r1, [pc, #40]	; (801dec0 <_ZN14MockNamedValue8setValueEm+0x40>)
 801de96:	4618      	mov	r0, r3
 801de98:	f7ef f9f1 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801de9c:	f107 0308 	add.w	r3, r7, #8
 801dea0:	4619      	mov	r1, r3
 801dea2:	4620      	mov	r0, r4
 801dea4:	f7ef fa57 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801dea8:	f107 0308 	add.w	r3, r7, #8
 801deac:	4618      	mov	r0, r3
 801deae:	f7ef fd9e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801deb2:	687b      	ldr	r3, [r7, #4]
 801deb4:	683a      	ldr	r2, [r7, #0]
 801deb6:	619a      	str	r2, [r3, #24]
}
 801deb8:	bf00      	nop
 801deba:	3714      	adds	r7, #20
 801debc:	46bd      	mov	sp, r7
 801debe:	bd90      	pop	{r4, r7, pc}
 801dec0:	08026eb4 	.word	0x08026eb4

0801dec4 <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801dec4:	b5b0      	push	{r4, r5, r7, lr}
 801dec6:	b086      	sub	sp, #24
 801dec8:	af02      	add	r7, sp, #8
 801deca:	60f8      	str	r0, [r7, #12]
 801decc:	1d3b      	adds	r3, r7, #4
 801dece:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801ded2:	f7f6 fdb7 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801ded6:	4604      	mov	r4, r0
 801ded8:	6823      	ldr	r3, [r4, #0]
 801deda:	3368      	adds	r3, #104	; 0x68
 801dedc:	681d      	ldr	r5, [r3, #0]
 801dede:	f7f6 fdc1 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dee2:	4603      	mov	r3, r0
 801dee4:	9300      	str	r3, [sp, #0]
 801dee6:	2367      	movs	r3, #103	; 0x67
 801dee8:	4a03      	ldr	r2, [pc, #12]	; (801def8 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801deea:	4904      	ldr	r1, [pc, #16]	; (801defc <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801deec:	4620      	mov	r0, r4
 801deee:	47a8      	blx	r5
}
 801def0:	bf00      	nop
 801def2:	3710      	adds	r7, #16
 801def4:	46bd      	mov	sp, r7
 801def6:	bdb0      	pop	{r4, r5, r7, pc}
 801def8:	08026ec8 	.word	0x08026ec8
 801defc:	08026ee4 	.word	0x08026ee4

0801df00 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801df00:	b5b0      	push	{r4, r5, r7, lr}
 801df02:	b086      	sub	sp, #24
 801df04:	af02      	add	r7, sp, #8
 801df06:	60f8      	str	r0, [r7, #12]
 801df08:	1d3b      	adds	r3, r7, #4
 801df0a:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801df0e:	f7f6 fd99 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801df12:	4604      	mov	r4, r0
 801df14:	6823      	ldr	r3, [r4, #0]
 801df16:	3368      	adds	r3, #104	; 0x68
 801df18:	681d      	ldr	r5, [r3, #0]
 801df1a:	f7f6 fda3 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801df1e:	4603      	mov	r3, r0
 801df20:	9300      	str	r3, [sp, #0]
 801df22:	236c      	movs	r3, #108	; 0x6c
 801df24:	4a03      	ldr	r2, [pc, #12]	; (801df34 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801df26:	4904      	ldr	r1, [pc, #16]	; (801df38 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801df28:	4620      	mov	r0, r4
 801df2a:	47a8      	blx	r5
}
 801df2c:	bf00      	nop
 801df2e:	3710      	adds	r7, #16
 801df30:	46bd      	mov	sp, r7
 801df32:	bdb0      	pop	{r4, r5, r7, pc}
 801df34:	08026ec8 	.word	0x08026ec8
 801df38:	08026f04 	.word	0x08026f04
 801df3c:	00000000 	.word	0x00000000

0801df40 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801df40:	b580      	push	{r7, lr}
 801df42:	b084      	sub	sp, #16
 801df44:	af00      	add	r7, sp, #0
 801df46:	60f8      	str	r0, [r7, #12]
 801df48:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801df4c:	68fb      	ldr	r3, [r7, #12]
 801df4e:	681b      	ldr	r3, [r3, #0]
 801df50:	3328      	adds	r3, #40	; 0x28
 801df52:	681b      	ldr	r3, [r3, #0]
 801df54:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801df68 <_ZN14MockNamedValue8setValueEd+0x28>
 801df58:	ed97 0b00 	vldr	d0, [r7]
 801df5c:	68f8      	ldr	r0, [r7, #12]
 801df5e:	4798      	blx	r3
}
 801df60:	bf00      	nop
 801df62:	3710      	adds	r7, #16
 801df64:	46bd      	mov	sp, r7
 801df66:	bd80      	pop	{r7, pc}
 801df68:	47ae147b 	.word	0x47ae147b
 801df6c:	3f747ae1 	.word	0x3f747ae1

0801df70 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801df70:	b590      	push	{r4, r7, lr}
 801df72:	b089      	sub	sp, #36	; 0x24
 801df74:	af00      	add	r7, sp, #0
 801df76:	6178      	str	r0, [r7, #20]
 801df78:	ed87 0b02 	vstr	d0, [r7, #8]
 801df7c:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801df80:	697b      	ldr	r3, [r7, #20]
 801df82:	f103 040c 	add.w	r4, r3, #12
 801df86:	f107 0318 	add.w	r3, r7, #24
 801df8a:	490e      	ldr	r1, [pc, #56]	; (801dfc4 <_ZN14MockNamedValue8setValueEdd+0x54>)
 801df8c:	4618      	mov	r0, r3
 801df8e:	f7ef f976 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801df92:	f107 0318 	add.w	r3, r7, #24
 801df96:	4619      	mov	r1, r3
 801df98:	4620      	mov	r0, r4
 801df9a:	f7ef f9dc 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801df9e:	f107 0318 	add.w	r3, r7, #24
 801dfa2:	4618      	mov	r0, r3
 801dfa4:	f7ef fd23 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801dfa8:	6979      	ldr	r1, [r7, #20]
 801dfaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801dfae:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801dfb2:	6979      	ldr	r1, [r7, #20]
 801dfb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dfb8:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801dfbc:	bf00      	nop
 801dfbe:	3724      	adds	r7, #36	; 0x24
 801dfc0:	46bd      	mov	sp, r7
 801dfc2:	bd90      	pop	{r4, r7, pc}
 801dfc4:	08026f30 	.word	0x08026f30

0801dfc8 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801dfc8:	b590      	push	{r4, r7, lr}
 801dfca:	b085      	sub	sp, #20
 801dfcc:	af00      	add	r7, sp, #0
 801dfce:	6078      	str	r0, [r7, #4]
 801dfd0:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	f103 040c 	add.w	r4, r3, #12
 801dfd8:	f107 0308 	add.w	r3, r7, #8
 801dfdc:	490a      	ldr	r1, [pc, #40]	; (801e008 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801dfde:	4618      	mov	r0, r3
 801dfe0:	f7ef f94d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801dfe4:	f107 0308 	add.w	r3, r7, #8
 801dfe8:	4619      	mov	r1, r3
 801dfea:	4620      	mov	r0, r4
 801dfec:	f7ef f9b3 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801dff0:	f107 0308 	add.w	r3, r7, #8
 801dff4:	4618      	mov	r0, r3
 801dff6:	f7ef fcfa 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801dffa:	687b      	ldr	r3, [r7, #4]
 801dffc:	683a      	ldr	r2, [r7, #0]
 801dffe:	619a      	str	r2, [r3, #24]
}
 801e000:	bf00      	nop
 801e002:	3714      	adds	r7, #20
 801e004:	46bd      	mov	sp, r7
 801e006:	bd90      	pop	{r4, r7, pc}
 801e008:	08026f38 	.word	0x08026f38

0801e00c <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801e00c:	b590      	push	{r4, r7, lr}
 801e00e:	b085      	sub	sp, #20
 801e010:	af00      	add	r7, sp, #0
 801e012:	6078      	str	r0, [r7, #4]
 801e014:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801e016:	687b      	ldr	r3, [r7, #4]
 801e018:	f103 040c 	add.w	r4, r3, #12
 801e01c:	f107 0308 	add.w	r3, r7, #8
 801e020:	490a      	ldr	r1, [pc, #40]	; (801e04c <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801e022:	4618      	mov	r0, r3
 801e024:	f7ef f92b 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801e028:	f107 0308 	add.w	r3, r7, #8
 801e02c:	4619      	mov	r1, r3
 801e02e:	4620      	mov	r0, r4
 801e030:	f7ef f991 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801e034:	f107 0308 	add.w	r3, r7, #8
 801e038:	4618      	mov	r0, r3
 801e03a:	f7ef fcd8 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801e03e:	687b      	ldr	r3, [r7, #4]
 801e040:	683a      	ldr	r2, [r7, #0]
 801e042:	619a      	str	r2, [r3, #24]
}
 801e044:	bf00      	nop
 801e046:	3714      	adds	r7, #20
 801e048:	46bd      	mov	sp, r7
 801e04a:	bd90      	pop	{r4, r7, pc}
 801e04c:	08026f40 	.word	0x08026f40

0801e050 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801e050:	b590      	push	{r4, r7, lr}
 801e052:	b085      	sub	sp, #20
 801e054:	af00      	add	r7, sp, #0
 801e056:	6078      	str	r0, [r7, #4]
 801e058:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801e05a:	687b      	ldr	r3, [r7, #4]
 801e05c:	f103 040c 	add.w	r4, r3, #12
 801e060:	f107 0308 	add.w	r3, r7, #8
 801e064:	490a      	ldr	r1, [pc, #40]	; (801e090 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801e066:	4618      	mov	r0, r3
 801e068:	f7ef f909 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801e06c:	f107 0308 	add.w	r3, r7, #8
 801e070:	4619      	mov	r1, r3
 801e072:	4620      	mov	r0, r4
 801e074:	f7ef f96f 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801e078:	f107 0308 	add.w	r3, r7, #8
 801e07c:	4618      	mov	r0, r3
 801e07e:	f7ef fcb6 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801e082:	687b      	ldr	r3, [r7, #4]
 801e084:	683a      	ldr	r2, [r7, #0]
 801e086:	619a      	str	r2, [r3, #24]
}
 801e088:	bf00      	nop
 801e08a:	3714      	adds	r7, #20
 801e08c:	46bd      	mov	sp, r7
 801e08e:	bd90      	pop	{r4, r7, pc}
 801e090:	08026f4c 	.word	0x08026f4c

0801e094 <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801e094:	b590      	push	{r4, r7, lr}
 801e096:	b085      	sub	sp, #20
 801e098:	af00      	add	r7, sp, #0
 801e09a:	6078      	str	r0, [r7, #4]
 801e09c:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801e09e:	687b      	ldr	r3, [r7, #4]
 801e0a0:	f103 040c 	add.w	r4, r3, #12
 801e0a4:	f107 0308 	add.w	r3, r7, #8
 801e0a8:	490a      	ldr	r1, [pc, #40]	; (801e0d4 <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801e0aa:	4618      	mov	r0, r3
 801e0ac:	f7ef f8e7 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801e0b0:	f107 0308 	add.w	r3, r7, #8
 801e0b4:	4619      	mov	r1, r3
 801e0b6:	4620      	mov	r0, r4
 801e0b8:	f7ef f94d 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801e0bc:	f107 0308 	add.w	r3, r7, #8
 801e0c0:	4618      	mov	r0, r3
 801e0c2:	f7ef fc94 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801e0c6:	687b      	ldr	r3, [r7, #4]
 801e0c8:	683a      	ldr	r2, [r7, #0]
 801e0ca:	619a      	str	r2, [r3, #24]
}
 801e0cc:	bf00      	nop
 801e0ce:	3714      	adds	r7, #20
 801e0d0:	46bd      	mov	sp, r7
 801e0d2:	bd90      	pop	{r4, r7, pc}
 801e0d4:	08026f58 	.word	0x08026f58

0801e0d8 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801e0d8:	b590      	push	{r4, r7, lr}
 801e0da:	b087      	sub	sp, #28
 801e0dc:	af00      	add	r7, sp, #0
 801e0de:	60f8      	str	r0, [r7, #12]
 801e0e0:	60b9      	str	r1, [r7, #8]
 801e0e2:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801e0e4:	68fb      	ldr	r3, [r7, #12]
 801e0e6:	f103 040c 	add.w	r4, r3, #12
 801e0ea:	f107 0310 	add.w	r3, r7, #16
 801e0ee:	490c      	ldr	r1, [pc, #48]	; (801e120 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801e0f0:	4618      	mov	r0, r3
 801e0f2:	f7ef f8c4 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801e0f6:	f107 0310 	add.w	r3, r7, #16
 801e0fa:	4619      	mov	r1, r3
 801e0fc:	4620      	mov	r0, r4
 801e0fe:	f7ef f92a 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801e102:	f107 0310 	add.w	r3, r7, #16
 801e106:	4618      	mov	r0, r3
 801e108:	f7ef fc71 	bl	800d9ee <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801e10c:	68fb      	ldr	r3, [r7, #12]
 801e10e:	68ba      	ldr	r2, [r7, #8]
 801e110:	619a      	str	r2, [r3, #24]
    size_ = size;
 801e112:	68fb      	ldr	r3, [r7, #12]
 801e114:	687a      	ldr	r2, [r7, #4]
 801e116:	629a      	str	r2, [r3, #40]	; 0x28
}
 801e118:	bf00      	nop
 801e11a:	371c      	adds	r7, #28
 801e11c:	46bd      	mov	sp, r7
 801e11e:	bd90      	pop	{r4, r7, pc}
 801e120:	08026f64 	.word	0x08026f64

0801e124 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801e124:	b580      	push	{r7, lr}
 801e126:	b084      	sub	sp, #16
 801e128:	af00      	add	r7, sp, #0
 801e12a:	60f8      	str	r0, [r7, #12]
 801e12c:	60b9      	str	r1, [r7, #8]
 801e12e:	607a      	str	r2, [r7, #4]
    type_ = type;
 801e130:	68fb      	ldr	r3, [r7, #12]
 801e132:	330c      	adds	r3, #12
 801e134:	68b9      	ldr	r1, [r7, #8]
 801e136:	4618      	mov	r0, r3
 801e138:	f7ef f90d 	bl	800d356 <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801e13c:	68fb      	ldr	r3, [r7, #12]
 801e13e:	687a      	ldr	r2, [r7, #4]
 801e140:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801e142:	4b11      	ldr	r3, [pc, #68]	; (801e188 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801e144:	681b      	ldr	r3, [r3, #0]
 801e146:	2b00      	cmp	r3, #0
 801e148:	d019      	beq.n	801e17e <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801e14a:	4b0f      	ldr	r3, [pc, #60]	; (801e188 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801e14c:	681a      	ldr	r2, [r3, #0]
 801e14e:	4b0e      	ldr	r3, [pc, #56]	; (801e188 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801e150:	681b      	ldr	r3, [r3, #0]
 801e152:	681b      	ldr	r3, [r3, #0]
 801e154:	3314      	adds	r3, #20
 801e156:	681b      	ldr	r3, [r3, #0]
 801e158:	68b9      	ldr	r1, [r7, #8]
 801e15a:	4610      	mov	r0, r2
 801e15c:	4798      	blx	r3
 801e15e:	4602      	mov	r2, r0
 801e160:	68fb      	ldr	r3, [r7, #12]
 801e162:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801e164:	4b08      	ldr	r3, [pc, #32]	; (801e188 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801e166:	681a      	ldr	r2, [r3, #0]
 801e168:	4b07      	ldr	r3, [pc, #28]	; (801e188 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801e16a:	681b      	ldr	r3, [r3, #0]
 801e16c:	681b      	ldr	r3, [r3, #0]
 801e16e:	3318      	adds	r3, #24
 801e170:	681b      	ldr	r3, [r3, #0]
 801e172:	68b9      	ldr	r1, [r7, #8]
 801e174:	4610      	mov	r0, r2
 801e176:	4798      	blx	r3
 801e178:	4602      	mov	r2, r0
 801e17a:	68fb      	ldr	r3, [r7, #12]
 801e17c:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801e17e:	bf00      	nop
 801e180:	3710      	adds	r7, #16
 801e182:	46bd      	mov	sp, r7
 801e184:	bd80      	pop	{r7, pc}
 801e186:	bf00      	nop
 801e188:	20000f44 	.word	0x20000f44

0801e18c <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801e18c:	b580      	push	{r7, lr}
 801e18e:	b084      	sub	sp, #16
 801e190:	af00      	add	r7, sp, #0
 801e192:	60f8      	str	r0, [r7, #12]
 801e194:	60b9      	str	r1, [r7, #8]
 801e196:	607a      	str	r2, [r7, #4]
    type_ = type;
 801e198:	68fb      	ldr	r3, [r7, #12]
 801e19a:	330c      	adds	r3, #12
 801e19c:	68b9      	ldr	r1, [r7, #8]
 801e19e:	4618      	mov	r0, r3
 801e1a0:	f7ef f8d9 	bl	800d356 <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801e1a4:	68fb      	ldr	r3, [r7, #12]
 801e1a6:	687a      	ldr	r2, [r7, #4]
 801e1a8:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801e1aa:	4b11      	ldr	r3, [pc, #68]	; (801e1f0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801e1ac:	681b      	ldr	r3, [r3, #0]
 801e1ae:	2b00      	cmp	r3, #0
 801e1b0:	d019      	beq.n	801e1e6 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801e1b2:	4b0f      	ldr	r3, [pc, #60]	; (801e1f0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801e1b4:	681a      	ldr	r2, [r3, #0]
 801e1b6:	4b0e      	ldr	r3, [pc, #56]	; (801e1f0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801e1b8:	681b      	ldr	r3, [r3, #0]
 801e1ba:	681b      	ldr	r3, [r3, #0]
 801e1bc:	3314      	adds	r3, #20
 801e1be:	681b      	ldr	r3, [r3, #0]
 801e1c0:	68b9      	ldr	r1, [r7, #8]
 801e1c2:	4610      	mov	r0, r2
 801e1c4:	4798      	blx	r3
 801e1c6:	4602      	mov	r2, r0
 801e1c8:	68fb      	ldr	r3, [r7, #12]
 801e1ca:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801e1cc:	4b08      	ldr	r3, [pc, #32]	; (801e1f0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801e1ce:	681a      	ldr	r2, [r3, #0]
 801e1d0:	4b07      	ldr	r3, [pc, #28]	; (801e1f0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801e1d2:	681b      	ldr	r3, [r3, #0]
 801e1d4:	681b      	ldr	r3, [r3, #0]
 801e1d6:	3318      	adds	r3, #24
 801e1d8:	681b      	ldr	r3, [r3, #0]
 801e1da:	68b9      	ldr	r1, [r7, #8]
 801e1dc:	4610      	mov	r0, r2
 801e1de:	4798      	blx	r3
 801e1e0:	4602      	mov	r2, r0
 801e1e2:	68fb      	ldr	r3, [r7, #12]
 801e1e4:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801e1e6:	bf00      	nop
 801e1e8:	3710      	adds	r7, #16
 801e1ea:	46bd      	mov	sp, r7
 801e1ec:	bd80      	pop	{r7, pc}
 801e1ee:	bf00      	nop
 801e1f0:	20000f44 	.word	0x20000f44

0801e1f4 <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801e1f4:	b480      	push	{r7}
 801e1f6:	b083      	sub	sp, #12
 801e1f8:	af00      	add	r7, sp, #0
 801e1fa:	6078      	str	r0, [r7, #4]
 801e1fc:	6039      	str	r1, [r7, #0]
    size_ = size;
 801e1fe:	687b      	ldr	r3, [r7, #4]
 801e200:	683a      	ldr	r2, [r7, #0]
 801e202:	629a      	str	r2, [r3, #40]	; 0x28
}
 801e204:	bf00      	nop
 801e206:	370c      	adds	r7, #12
 801e208:	46bd      	mov	sp, r7
 801e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e20e:	4770      	bx	lr

0801e210 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801e210:	b590      	push	{r4, r7, lr}
 801e212:	b085      	sub	sp, #20
 801e214:	af00      	add	r7, sp, #0
 801e216:	6078      	str	r0, [r7, #4]
 801e218:	6039      	str	r1, [r7, #0]
    name_ = name;
 801e21a:	687b      	ldr	r3, [r7, #4]
 801e21c:	1d1c      	adds	r4, r3, #4
 801e21e:	f107 0308 	add.w	r3, r7, #8
 801e222:	6839      	ldr	r1, [r7, #0]
 801e224:	4618      	mov	r0, r3
 801e226:	f7ef f82a 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801e22a:	f107 0308 	add.w	r3, r7, #8
 801e22e:	4619      	mov	r1, r3
 801e230:	4620      	mov	r0, r4
 801e232:	f7ef f890 	bl	800d356 <_ZN12SimpleStringaSERKS_>
 801e236:	f107 0308 	add.w	r3, r7, #8
 801e23a:	4618      	mov	r0, r3
 801e23c:	f7ef fbd7 	bl	800d9ee <_ZN12SimpleStringD1Ev>
}
 801e240:	bf00      	nop
 801e242:	3714      	adds	r7, #20
 801e244:	46bd      	mov	sp, r7
 801e246:	bd90      	pop	{r4, r7, pc}

0801e248 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801e248:	b580      	push	{r7, lr}
 801e24a:	b082      	sub	sp, #8
 801e24c:	af00      	add	r7, sp, #0
 801e24e:	6078      	str	r0, [r7, #4]
 801e250:	6039      	str	r1, [r7, #0]
    return name_;
 801e252:	683b      	ldr	r3, [r7, #0]
 801e254:	3304      	adds	r3, #4
 801e256:	4619      	mov	r1, r3
 801e258:	6878      	ldr	r0, [r7, #4]
 801e25a:	f7ef f864 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
}
 801e25e:	6878      	ldr	r0, [r7, #4]
 801e260:	3708      	adds	r7, #8
 801e262:	46bd      	mov	sp, r7
 801e264:	bd80      	pop	{r7, pc}

0801e266 <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801e266:	b580      	push	{r7, lr}
 801e268:	b082      	sub	sp, #8
 801e26a:	af00      	add	r7, sp, #0
 801e26c:	6078      	str	r0, [r7, #4]
 801e26e:	6039      	str	r1, [r7, #0]
    return type_;
 801e270:	683b      	ldr	r3, [r7, #0]
 801e272:	330c      	adds	r3, #12
 801e274:	4619      	mov	r1, r3
 801e276:	6878      	ldr	r0, [r7, #4]
 801e278:	f7ef f855 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
}
 801e27c:	6878      	ldr	r0, [r7, #4]
 801e27e:	3708      	adds	r7, #8
 801e280:	46bd      	mov	sp, r7
 801e282:	bd80      	pop	{r7, pc}

0801e284 <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801e284:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e286:	b087      	sub	sp, #28
 801e288:	af04      	add	r7, sp, #16
 801e28a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801e28c:	f7f6 fbda 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801e290:	4604      	mov	r4, r0
 801e292:	6823      	ldr	r3, [r4, #0]
 801e294:	3324      	adds	r3, #36	; 0x24
 801e296:	681d      	ldr	r5, [r3, #0]
 801e298:	687b      	ldr	r3, [r7, #4]
 801e29a:	330c      	adds	r3, #12
 801e29c:	4618      	mov	r0, r3
 801e29e:	f7ef fb79 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801e2a2:	4606      	mov	r6, r0
 801e2a4:	f7f6 fbde 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e2a8:	4603      	mov	r3, r0
 801e2aa:	9302      	str	r3, [sp, #8]
 801e2ac:	23c8      	movs	r3, #200	; 0xc8
 801e2ae:	9301      	str	r3, [sp, #4]
 801e2b0:	4b06      	ldr	r3, [pc, #24]	; (801e2cc <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801e2b2:	9300      	str	r3, [sp, #0]
 801e2b4:	2300      	movs	r3, #0
 801e2b6:	4632      	mov	r2, r6
 801e2b8:	4905      	ldr	r1, [pc, #20]	; (801e2d0 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801e2ba:	4620      	mov	r0, r4
 801e2bc:	47a8      	blx	r5
    return value_.boolValue_;
 801e2be:	687b      	ldr	r3, [r7, #4]
 801e2c0:	7e1b      	ldrb	r3, [r3, #24]
}
 801e2c2:	4618      	mov	r0, r3
 801e2c4:	370c      	adds	r7, #12
 801e2c6:	46bd      	mov	sp, r7
 801e2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e2ca:	bf00      	nop
 801e2cc:	08026ec8 	.word	0x08026ec8
 801e2d0:	08026e90 	.word	0x08026e90

0801e2d4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801e2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e2d6:	b089      	sub	sp, #36	; 0x24
 801e2d8:	af04      	add	r7, sp, #16
 801e2da:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801e2dc:	687b      	ldr	r3, [r7, #4]
 801e2de:	f103 040c 	add.w	r4, r3, #12
 801e2e2:	f107 0308 	add.w	r3, r7, #8
 801e2e6:	4920      	ldr	r1, [pc, #128]	; (801e368 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801e2e8:	4618      	mov	r0, r3
 801e2ea:	f7ee ffc8 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801e2ee:	2501      	movs	r5, #1
 801e2f0:	f107 0308 	add.w	r3, r7, #8
 801e2f4:	4619      	mov	r1, r3
 801e2f6:	4620      	mov	r0, r4
 801e2f8:	f7ef fb85 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801e2fc:	4603      	mov	r3, r0
 801e2fe:	2b00      	cmp	r3, #0
 801e300:	d005      	beq.n	801e30e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801e302:	687b      	ldr	r3, [r7, #4]
 801e304:	699b      	ldr	r3, [r3, #24]
 801e306:	2b00      	cmp	r3, #0
 801e308:	db01      	blt.n	801e30e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801e30a:	2401      	movs	r4, #1
 801e30c:	e000      	b.n	801e310 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801e30e:	2400      	movs	r4, #0
 801e310:	2d00      	cmp	r5, #0
 801e312:	d004      	beq.n	801e31e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801e314:	f107 0308 	add.w	r3, r7, #8
 801e318:	4618      	mov	r0, r3
 801e31a:	f7ef fb68 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801e31e:	2c00      	cmp	r4, #0
 801e320:	d002      	beq.n	801e328 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801e322:	687b      	ldr	r3, [r7, #4]
 801e324:	699b      	ldr	r3, [r3, #24]
 801e326:	e01a      	b.n	801e35e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801e328:	f7f6 fb8c 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801e32c:	4604      	mov	r4, r0
 801e32e:	6823      	ldr	r3, [r4, #0]
 801e330:	3324      	adds	r3, #36	; 0x24
 801e332:	681d      	ldr	r5, [r3, #0]
 801e334:	687b      	ldr	r3, [r7, #4]
 801e336:	330c      	adds	r3, #12
 801e338:	4618      	mov	r0, r3
 801e33a:	f7ef fb2b 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801e33e:	4606      	mov	r6, r0
 801e340:	f7f6 fb90 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e344:	4603      	mov	r3, r0
 801e346:	9302      	str	r3, [sp, #8]
 801e348:	23d2      	movs	r3, #210	; 0xd2
 801e34a:	9301      	str	r3, [sp, #4]
 801e34c:	4b07      	ldr	r3, [pc, #28]	; (801e36c <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801e34e:	9300      	str	r3, [sp, #0]
 801e350:	2300      	movs	r3, #0
 801e352:	4632      	mov	r2, r6
 801e354:	4906      	ldr	r1, [pc, #24]	; (801e370 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801e356:	4620      	mov	r0, r4
 801e358:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801e35a:	687b      	ldr	r3, [r7, #4]
 801e35c:	699b      	ldr	r3, [r3, #24]
    }
}
 801e35e:	4618      	mov	r0, r3
 801e360:	3714      	adds	r7, #20
 801e362:	46bd      	mov	sp, r7
 801e364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e366:	bf00      	nop
 801e368:	08026e8c 	.word	0x08026e8c
 801e36c:	08026ec8 	.word	0x08026ec8
 801e370:	08026e98 	.word	0x08026e98

0801e374 <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801e374:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e376:	b087      	sub	sp, #28
 801e378:	af04      	add	r7, sp, #16
 801e37a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801e37c:	f7f6 fb62 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801e380:	4604      	mov	r4, r0
 801e382:	6823      	ldr	r3, [r4, #0]
 801e384:	3324      	adds	r3, #36	; 0x24
 801e386:	681d      	ldr	r5, [r3, #0]
 801e388:	687b      	ldr	r3, [r7, #4]
 801e38a:	330c      	adds	r3, #12
 801e38c:	4618      	mov	r0, r3
 801e38e:	f7ef fb01 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801e392:	4606      	mov	r6, r0
 801e394:	f7f6 fb66 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e398:	4603      	mov	r3, r0
 801e39a:	9302      	str	r3, [sp, #8]
 801e39c:	23d9      	movs	r3, #217	; 0xd9
 801e39e:	9301      	str	r3, [sp, #4]
 801e3a0:	4b06      	ldr	r3, [pc, #24]	; (801e3bc <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801e3a2:	9300      	str	r3, [sp, #0]
 801e3a4:	2300      	movs	r3, #0
 801e3a6:	4632      	mov	r2, r6
 801e3a8:	4905      	ldr	r1, [pc, #20]	; (801e3c0 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801e3aa:	4620      	mov	r0, r4
 801e3ac:	47a8      	blx	r5
    return value_.intValue_;
 801e3ae:	687b      	ldr	r3, [r7, #4]
 801e3b0:	699b      	ldr	r3, [r3, #24]
}
 801e3b2:	4618      	mov	r0, r3
 801e3b4:	370c      	adds	r7, #12
 801e3b6:	46bd      	mov	sp, r7
 801e3b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e3ba:	bf00      	nop
 801e3bc:	08026ec8 	.word	0x08026ec8
 801e3c0:	08026e8c 	.word	0x08026e8c

0801e3c4 <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801e3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e3c6:	b08b      	sub	sp, #44	; 0x2c
 801e3c8:	af04      	add	r7, sp, #16
 801e3ca:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801e3cc:	687b      	ldr	r3, [r7, #4]
 801e3ce:	f103 040c 	add.w	r4, r3, #12
 801e3d2:	f107 0308 	add.w	r3, r7, #8
 801e3d6:	4928      	ldr	r1, [pc, #160]	; (801e478 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801e3d8:	4618      	mov	r0, r3
 801e3da:	f7ee ff50 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801e3de:	f107 0308 	add.w	r3, r7, #8
 801e3e2:	4619      	mov	r1, r3
 801e3e4:	4620      	mov	r0, r4
 801e3e6:	f7ef fb0e 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801e3ea:	4603      	mov	r3, r0
 801e3ec:	461c      	mov	r4, r3
 801e3ee:	f107 0308 	add.w	r3, r7, #8
 801e3f2:	4618      	mov	r0, r3
 801e3f4:	f7ef fafb 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801e3f8:	2c00      	cmp	r4, #0
 801e3fa:	d002      	beq.n	801e402 <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801e3fc:	687b      	ldr	r3, [r7, #4]
 801e3fe:	699b      	ldr	r3, [r3, #24]
 801e400:	e035      	b.n	801e46e <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801e402:	687b      	ldr	r3, [r7, #4]
 801e404:	f103 040c 	add.w	r4, r3, #12
 801e408:	f107 0310 	add.w	r3, r7, #16
 801e40c:	491b      	ldr	r1, [pc, #108]	; (801e47c <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801e40e:	4618      	mov	r0, r3
 801e410:	f7ee ff35 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801e414:	f107 0310 	add.w	r3, r7, #16
 801e418:	4619      	mov	r1, r3
 801e41a:	4620      	mov	r0, r4
 801e41c:	f7ef faf3 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801e420:	4603      	mov	r3, r0
 801e422:	461c      	mov	r4, r3
 801e424:	f107 0310 	add.w	r3, r7, #16
 801e428:	4618      	mov	r0, r3
 801e42a:	f7ef fae0 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801e42e:	2c00      	cmp	r4, #0
 801e430:	d002      	beq.n	801e438 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801e432:	687b      	ldr	r3, [r7, #4]
 801e434:	699b      	ldr	r3, [r3, #24]
 801e436:	e01a      	b.n	801e46e <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801e438:	f7f6 fb04 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801e43c:	4604      	mov	r4, r0
 801e43e:	6823      	ldr	r3, [r4, #0]
 801e440:	3324      	adds	r3, #36	; 0x24
 801e442:	681d      	ldr	r5, [r3, #0]
 801e444:	687b      	ldr	r3, [r7, #4]
 801e446:	330c      	adds	r3, #12
 801e448:	4618      	mov	r0, r3
 801e44a:	f7ef faa3 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801e44e:	4606      	mov	r6, r0
 801e450:	f7f6 fb08 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e454:	4603      	mov	r3, r0
 801e456:	9302      	str	r3, [sp, #8]
 801e458:	23e5      	movs	r3, #229	; 0xe5
 801e45a:	9301      	str	r3, [sp, #4]
 801e45c:	4b08      	ldr	r3, [pc, #32]	; (801e480 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801e45e:	9300      	str	r3, [sp, #0]
 801e460:	2300      	movs	r3, #0
 801e462:	4632      	mov	r2, r6
 801e464:	4907      	ldr	r1, [pc, #28]	; (801e484 <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801e466:	4620      	mov	r0, r4
 801e468:	47a8      	blx	r5
        return value_.longIntValue_;
 801e46a:	687b      	ldr	r3, [r7, #4]
 801e46c:	699b      	ldr	r3, [r3, #24]
    }
}
 801e46e:	4618      	mov	r0, r3
 801e470:	371c      	adds	r7, #28
 801e472:	46bd      	mov	sp, r7
 801e474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e476:	bf00      	nop
 801e478:	08026e8c 	.word	0x08026e8c
 801e47c:	08026e98 	.word	0x08026e98
 801e480:	08026ec8 	.word	0x08026ec8
 801e484:	08026ea8 	.word	0x08026ea8

0801e488 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801e488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e48a:	b08d      	sub	sp, #52	; 0x34
 801e48c:	af04      	add	r7, sp, #16
 801e48e:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801e490:	687b      	ldr	r3, [r7, #4]
 801e492:	f103 040c 	add.w	r4, r3, #12
 801e496:	f107 0308 	add.w	r3, r7, #8
 801e49a:	4940      	ldr	r1, [pc, #256]	; (801e59c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801e49c:	4618      	mov	r0, r3
 801e49e:	f7ee feee 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801e4a2:	f107 0308 	add.w	r3, r7, #8
 801e4a6:	4619      	mov	r1, r3
 801e4a8:	4620      	mov	r0, r4
 801e4aa:	f7ef faac 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801e4ae:	4603      	mov	r3, r0
 801e4b0:	461c      	mov	r4, r3
 801e4b2:	f107 0308 	add.w	r3, r7, #8
 801e4b6:	4618      	mov	r0, r3
 801e4b8:	f7ef fa99 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801e4bc:	2c00      	cmp	r4, #0
 801e4be:	d002      	beq.n	801e4c6 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	699b      	ldr	r3, [r3, #24]
 801e4c4:	e066      	b.n	801e594 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801e4c6:	687b      	ldr	r3, [r7, #4]
 801e4c8:	f103 040c 	add.w	r4, r3, #12
 801e4cc:	f107 0310 	add.w	r3, r7, #16
 801e4d0:	4933      	ldr	r1, [pc, #204]	; (801e5a0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801e4d2:	4618      	mov	r0, r3
 801e4d4:	f7ee fed3 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801e4d8:	2501      	movs	r5, #1
 801e4da:	f107 0310 	add.w	r3, r7, #16
 801e4de:	4619      	mov	r1, r3
 801e4e0:	4620      	mov	r0, r4
 801e4e2:	f7ef fa90 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801e4e6:	4603      	mov	r3, r0
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	d005      	beq.n	801e4f8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801e4ec:	687b      	ldr	r3, [r7, #4]
 801e4ee:	699b      	ldr	r3, [r3, #24]
 801e4f0:	2b00      	cmp	r3, #0
 801e4f2:	db01      	blt.n	801e4f8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801e4f4:	2401      	movs	r4, #1
 801e4f6:	e000      	b.n	801e4fa <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801e4f8:	2400      	movs	r4, #0
 801e4fa:	2d00      	cmp	r5, #0
 801e4fc:	d004      	beq.n	801e508 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801e4fe:	f107 0310 	add.w	r3, r7, #16
 801e502:	4618      	mov	r0, r3
 801e504:	f7ef fa73 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801e508:	2c00      	cmp	r4, #0
 801e50a:	d002      	beq.n	801e512 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801e50c:	687b      	ldr	r3, [r7, #4]
 801e50e:	699b      	ldr	r3, [r3, #24]
 801e510:	e040      	b.n	801e594 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801e512:	687b      	ldr	r3, [r7, #4]
 801e514:	f103 040c 	add.w	r4, r3, #12
 801e518:	f107 0318 	add.w	r3, r7, #24
 801e51c:	4921      	ldr	r1, [pc, #132]	; (801e5a4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801e51e:	4618      	mov	r0, r3
 801e520:	f7ee fead 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801e524:	2501      	movs	r5, #1
 801e526:	f107 0318 	add.w	r3, r7, #24
 801e52a:	4619      	mov	r1, r3
 801e52c:	4620      	mov	r0, r4
 801e52e:	f7ef fa6a 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801e532:	4603      	mov	r3, r0
 801e534:	2b00      	cmp	r3, #0
 801e536:	d005      	beq.n	801e544 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801e538:	687b      	ldr	r3, [r7, #4]
 801e53a:	699b      	ldr	r3, [r3, #24]
 801e53c:	2b00      	cmp	r3, #0
 801e53e:	db01      	blt.n	801e544 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801e540:	2401      	movs	r4, #1
 801e542:	e000      	b.n	801e546 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801e544:	2400      	movs	r4, #0
 801e546:	2d00      	cmp	r5, #0
 801e548:	d004      	beq.n	801e554 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801e54a:	f107 0318 	add.w	r3, r7, #24
 801e54e:	4618      	mov	r0, r3
 801e550:	f7ef fa4d 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801e554:	2c00      	cmp	r4, #0
 801e556:	d002      	beq.n	801e55e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801e558:	687b      	ldr	r3, [r7, #4]
 801e55a:	699b      	ldr	r3, [r3, #24]
 801e55c:	e01a      	b.n	801e594 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801e55e:	f7f6 fa71 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801e562:	4604      	mov	r4, r0
 801e564:	6823      	ldr	r3, [r4, #0]
 801e566:	3324      	adds	r3, #36	; 0x24
 801e568:	681d      	ldr	r5, [r3, #0]
 801e56a:	687b      	ldr	r3, [r7, #4]
 801e56c:	330c      	adds	r3, #12
 801e56e:	4618      	mov	r0, r3
 801e570:	f7ef fa10 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801e574:	4606      	mov	r6, r0
 801e576:	f7f6 fa75 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e57a:	4603      	mov	r3, r0
 801e57c:	9302      	str	r3, [sp, #8]
 801e57e:	23f4      	movs	r3, #244	; 0xf4
 801e580:	9301      	str	r3, [sp, #4]
 801e582:	4b09      	ldr	r3, [pc, #36]	; (801e5a8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801e584:	9300      	str	r3, [sp, #0]
 801e586:	2300      	movs	r3, #0
 801e588:	4632      	mov	r2, r6
 801e58a:	4908      	ldr	r1, [pc, #32]	; (801e5ac <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801e58c:	4620      	mov	r0, r4
 801e58e:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801e590:	687b      	ldr	r3, [r7, #4]
 801e592:	699b      	ldr	r3, [r3, #24]
    }
}
 801e594:	4618      	mov	r0, r3
 801e596:	3724      	adds	r7, #36	; 0x24
 801e598:	46bd      	mov	sp, r7
 801e59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e59c:	08026e98 	.word	0x08026e98
 801e5a0:	08026e8c 	.word	0x08026e8c
 801e5a4:	08026ea8 	.word	0x08026ea8
 801e5a8:	08026ec8 	.word	0x08026ec8
 801e5ac:	08026eb4 	.word	0x08026eb4

0801e5b0 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801e5b0:	b5b0      	push	{r4, r5, r7, lr}
 801e5b2:	b084      	sub	sp, #16
 801e5b4:	af02      	add	r7, sp, #8
 801e5b6:	6078      	str	r0, [r7, #4]
 801e5b8:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801e5ba:	f7f6 fa43 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801e5be:	4604      	mov	r4, r0
 801e5c0:	6823      	ldr	r3, [r4, #0]
 801e5c2:	3368      	adds	r3, #104	; 0x68
 801e5c4:	681d      	ldr	r5, [r3, #0]
 801e5c6:	f7f6 fa4d 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e5ca:	4603      	mov	r3, r0
 801e5cc:	9300      	str	r3, [sp, #0]
 801e5ce:	f240 1323 	movw	r3, #291	; 0x123
 801e5d2:	4a06      	ldr	r2, [pc, #24]	; (801e5ec <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801e5d4:	4906      	ldr	r1, [pc, #24]	; (801e5f0 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801e5d6:	4620      	mov	r0, r4
 801e5d8:	47a8      	blx	r5
    return cpputest_longlong(0);
 801e5da:	2100      	movs	r1, #0
 801e5dc:	6878      	ldr	r0, [r7, #4]
 801e5de:	f7ec fe85 	bl	800b2ec <_ZN17cpputest_longlongC1Ei>
}
 801e5e2:	6878      	ldr	r0, [r7, #4]
 801e5e4:	3708      	adds	r7, #8
 801e5e6:	46bd      	mov	sp, r7
 801e5e8:	bdb0      	pop	{r4, r5, r7, pc}
 801e5ea:	bf00      	nop
 801e5ec:	08026ec8 	.word	0x08026ec8
 801e5f0:	08026ee4 	.word	0x08026ee4

0801e5f4 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801e5f4:	b5b0      	push	{r4, r5, r7, lr}
 801e5f6:	b084      	sub	sp, #16
 801e5f8:	af02      	add	r7, sp, #8
 801e5fa:	6078      	str	r0, [r7, #4]
 801e5fc:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801e5fe:	f7f6 fa21 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801e602:	4604      	mov	r4, r0
 801e604:	6823      	ldr	r3, [r4, #0]
 801e606:	3368      	adds	r3, #104	; 0x68
 801e608:	681d      	ldr	r5, [r3, #0]
 801e60a:	f7f6 fa2b 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e60e:	4603      	mov	r3, r0
 801e610:	9300      	str	r3, [sp, #0]
 801e612:	f240 1329 	movw	r3, #297	; 0x129
 801e616:	4a06      	ldr	r2, [pc, #24]	; (801e630 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801e618:	4906      	ldr	r1, [pc, #24]	; (801e634 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801e61a:	4620      	mov	r0, r4
 801e61c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801e61e:	2100      	movs	r1, #0
 801e620:	6878      	ldr	r0, [r7, #4]
 801e622:	f7ec fe6f 	bl	800b304 <_ZN18cpputest_ulonglongC1Ei>
}
 801e626:	6878      	ldr	r0, [r7, #4]
 801e628:	3708      	adds	r7, #8
 801e62a:	46bd      	mov	sp, r7
 801e62c:	bdb0      	pop	{r4, r5, r7, pc}
 801e62e:	bf00      	nop
 801e630:	08026ec8 	.word	0x08026ec8
 801e634:	08026f04 	.word	0x08026f04

0801e638 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801e638:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e63a:	b087      	sub	sp, #28
 801e63c:	af04      	add	r7, sp, #16
 801e63e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801e640:	f7f6 fa00 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801e644:	4604      	mov	r4, r0
 801e646:	6823      	ldr	r3, [r4, #0]
 801e648:	3324      	adds	r3, #36	; 0x24
 801e64a:	681d      	ldr	r5, [r3, #0]
 801e64c:	687b      	ldr	r3, [r7, #4]
 801e64e:	330c      	adds	r3, #12
 801e650:	4618      	mov	r0, r3
 801e652:	f7ef f99f 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801e656:	4606      	mov	r6, r0
 801e658:	f7f6 fa04 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e65c:	4603      	mov	r3, r0
 801e65e:	9302      	str	r3, [sp, #8]
 801e660:	f240 1331 	movw	r3, #305	; 0x131
 801e664:	9301      	str	r3, [sp, #4]
 801e666:	4b09      	ldr	r3, [pc, #36]	; (801e68c <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801e668:	9300      	str	r3, [sp, #0]
 801e66a:	2300      	movs	r3, #0
 801e66c:	4632      	mov	r2, r6
 801e66e:	4908      	ldr	r1, [pc, #32]	; (801e690 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801e670:	4620      	mov	r0, r4
 801e672:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801e674:	687b      	ldr	r3, [r7, #4]
 801e676:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801e67a:	ec43 2b17 	vmov	d7, r2, r3
}
 801e67e:	eeb0 0a47 	vmov.f32	s0, s14
 801e682:	eef0 0a67 	vmov.f32	s1, s15
 801e686:	370c      	adds	r7, #12
 801e688:	46bd      	mov	sp, r7
 801e68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e68c:	08026ec8 	.word	0x08026ec8
 801e690:	08026f30 	.word	0x08026f30

0801e694 <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801e694:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e696:	b087      	sub	sp, #28
 801e698:	af04      	add	r7, sp, #16
 801e69a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801e69c:	f7f6 f9d2 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801e6a0:	4604      	mov	r4, r0
 801e6a2:	6823      	ldr	r3, [r4, #0]
 801e6a4:	3324      	adds	r3, #36	; 0x24
 801e6a6:	681d      	ldr	r5, [r3, #0]
 801e6a8:	687b      	ldr	r3, [r7, #4]
 801e6aa:	330c      	adds	r3, #12
 801e6ac:	4618      	mov	r0, r3
 801e6ae:	f7ef f971 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801e6b2:	4606      	mov	r6, r0
 801e6b4:	f7f6 f9d6 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e6b8:	4603      	mov	r3, r0
 801e6ba:	9302      	str	r3, [sp, #8]
 801e6bc:	f240 1337 	movw	r3, #311	; 0x137
 801e6c0:	9301      	str	r3, [sp, #4]
 801e6c2:	4b09      	ldr	r3, [pc, #36]	; (801e6e8 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801e6c4:	9300      	str	r3, [sp, #0]
 801e6c6:	2300      	movs	r3, #0
 801e6c8:	4632      	mov	r2, r6
 801e6ca:	4908      	ldr	r1, [pc, #32]	; (801e6ec <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801e6cc:	4620      	mov	r0, r4
 801e6ce:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801e6d0:	687b      	ldr	r3, [r7, #4]
 801e6d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e6d6:	ec43 2b17 	vmov	d7, r2, r3
}
 801e6da:	eeb0 0a47 	vmov.f32	s0, s14
 801e6de:	eef0 0a67 	vmov.f32	s1, s15
 801e6e2:	370c      	adds	r7, #12
 801e6e4:	46bd      	mov	sp, r7
 801e6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e6e8:	08026ec8 	.word	0x08026ec8
 801e6ec:	08026f30 	.word	0x08026f30

0801e6f0 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801e6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e6f2:	b087      	sub	sp, #28
 801e6f4:	af04      	add	r7, sp, #16
 801e6f6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801e6f8:	f7f6 f9a4 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801e6fc:	4604      	mov	r4, r0
 801e6fe:	6823      	ldr	r3, [r4, #0]
 801e700:	3324      	adds	r3, #36	; 0x24
 801e702:	681d      	ldr	r5, [r3, #0]
 801e704:	687b      	ldr	r3, [r7, #4]
 801e706:	330c      	adds	r3, #12
 801e708:	4618      	mov	r0, r3
 801e70a:	f7ef f943 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801e70e:	4606      	mov	r6, r0
 801e710:	f7f6 f9a8 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e714:	4603      	mov	r3, r0
 801e716:	9302      	str	r3, [sp, #8]
 801e718:	f240 133d 	movw	r3, #317	; 0x13d
 801e71c:	9301      	str	r3, [sp, #4]
 801e71e:	4b06      	ldr	r3, [pc, #24]	; (801e738 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801e720:	9300      	str	r3, [sp, #0]
 801e722:	2300      	movs	r3, #0
 801e724:	4632      	mov	r2, r6
 801e726:	4905      	ldr	r1, [pc, #20]	; (801e73c <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801e728:	4620      	mov	r0, r4
 801e72a:	47a8      	blx	r5
    return value_.stringValue_;
 801e72c:	687b      	ldr	r3, [r7, #4]
 801e72e:	699b      	ldr	r3, [r3, #24]
}
 801e730:	4618      	mov	r0, r3
 801e732:	370c      	adds	r7, #12
 801e734:	46bd      	mov	sp, r7
 801e736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e738:	08026ec8 	.word	0x08026ec8
 801e73c:	08026f58 	.word	0x08026f58

0801e740 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801e740:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e742:	b087      	sub	sp, #28
 801e744:	af04      	add	r7, sp, #16
 801e746:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801e748:	f7f6 f97c 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801e74c:	4604      	mov	r4, r0
 801e74e:	6823      	ldr	r3, [r4, #0]
 801e750:	3324      	adds	r3, #36	; 0x24
 801e752:	681d      	ldr	r5, [r3, #0]
 801e754:	687b      	ldr	r3, [r7, #4]
 801e756:	330c      	adds	r3, #12
 801e758:	4618      	mov	r0, r3
 801e75a:	f7ef f91b 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801e75e:	4606      	mov	r6, r0
 801e760:	f7f6 f980 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e764:	4603      	mov	r3, r0
 801e766:	9302      	str	r3, [sp, #8]
 801e768:	f240 1343 	movw	r3, #323	; 0x143
 801e76c:	9301      	str	r3, [sp, #4]
 801e76e:	4b06      	ldr	r3, [pc, #24]	; (801e788 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801e770:	9300      	str	r3, [sp, #0]
 801e772:	2300      	movs	r3, #0
 801e774:	4632      	mov	r2, r6
 801e776:	4905      	ldr	r1, [pc, #20]	; (801e78c <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801e778:	4620      	mov	r0, r4
 801e77a:	47a8      	blx	r5
    return value_.pointerValue_;
 801e77c:	687b      	ldr	r3, [r7, #4]
 801e77e:	699b      	ldr	r3, [r3, #24]
}
 801e780:	4618      	mov	r0, r3
 801e782:	370c      	adds	r7, #12
 801e784:	46bd      	mov	sp, r7
 801e786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e788:	08026ec8 	.word	0x08026ec8
 801e78c:	08026f38 	.word	0x08026f38

0801e790 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801e790:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e792:	b087      	sub	sp, #28
 801e794:	af04      	add	r7, sp, #16
 801e796:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801e798:	f7f6 f954 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801e79c:	4604      	mov	r4, r0
 801e79e:	6823      	ldr	r3, [r4, #0]
 801e7a0:	3324      	adds	r3, #36	; 0x24
 801e7a2:	681d      	ldr	r5, [r3, #0]
 801e7a4:	687b      	ldr	r3, [r7, #4]
 801e7a6:	330c      	adds	r3, #12
 801e7a8:	4618      	mov	r0, r3
 801e7aa:	f7ef f8f3 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801e7ae:	4606      	mov	r6, r0
 801e7b0:	f7f6 f958 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e7b4:	4603      	mov	r3, r0
 801e7b6:	9302      	str	r3, [sp, #8]
 801e7b8:	f240 1349 	movw	r3, #329	; 0x149
 801e7bc:	9301      	str	r3, [sp, #4]
 801e7be:	4b06      	ldr	r3, [pc, #24]	; (801e7d8 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801e7c0:	9300      	str	r3, [sp, #0]
 801e7c2:	2300      	movs	r3, #0
 801e7c4:	4632      	mov	r2, r6
 801e7c6:	4905      	ldr	r1, [pc, #20]	; (801e7dc <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801e7c8:	4620      	mov	r0, r4
 801e7ca:	47a8      	blx	r5
    return value_.pointerValue_;
 801e7cc:	687b      	ldr	r3, [r7, #4]
 801e7ce:	699b      	ldr	r3, [r3, #24]
}
 801e7d0:	4618      	mov	r0, r3
 801e7d2:	370c      	adds	r7, #12
 801e7d4:	46bd      	mov	sp, r7
 801e7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e7d8:	08026ec8 	.word	0x08026ec8
 801e7dc:	08026f40 	.word	0x08026f40

0801e7e0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801e7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e7e2:	b087      	sub	sp, #28
 801e7e4:	af04      	add	r7, sp, #16
 801e7e6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801e7e8:	f7f6 f92c 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801e7ec:	4604      	mov	r4, r0
 801e7ee:	6823      	ldr	r3, [r4, #0]
 801e7f0:	3324      	adds	r3, #36	; 0x24
 801e7f2:	681d      	ldr	r5, [r3, #0]
 801e7f4:	687b      	ldr	r3, [r7, #4]
 801e7f6:	330c      	adds	r3, #12
 801e7f8:	4618      	mov	r0, r3
 801e7fa:	f7ef f8cb 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801e7fe:	4606      	mov	r6, r0
 801e800:	f7f6 f930 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e804:	4603      	mov	r3, r0
 801e806:	9302      	str	r3, [sp, #8]
 801e808:	f240 134f 	movw	r3, #335	; 0x14f
 801e80c:	9301      	str	r3, [sp, #4]
 801e80e:	4b06      	ldr	r3, [pc, #24]	; (801e828 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801e810:	9300      	str	r3, [sp, #0]
 801e812:	2300      	movs	r3, #0
 801e814:	4632      	mov	r2, r6
 801e816:	4905      	ldr	r1, [pc, #20]	; (801e82c <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801e818:	4620      	mov	r0, r4
 801e81a:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801e81c:	687b      	ldr	r3, [r7, #4]
 801e81e:	699b      	ldr	r3, [r3, #24]
}
 801e820:	4618      	mov	r0, r3
 801e822:	370c      	adds	r7, #12
 801e824:	46bd      	mov	sp, r7
 801e826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e828:	08026ec8 	.word	0x08026ec8
 801e82c:	08026f4c 	.word	0x08026f4c

0801e830 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801e830:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e832:	b087      	sub	sp, #28
 801e834:	af04      	add	r7, sp, #16
 801e836:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801e838:	f7f6 f904 	bl	8014a44 <_ZN10UtestShell10getCurrentEv>
 801e83c:	4604      	mov	r4, r0
 801e83e:	6823      	ldr	r3, [r4, #0]
 801e840:	3324      	adds	r3, #36	; 0x24
 801e842:	681d      	ldr	r5, [r3, #0]
 801e844:	687b      	ldr	r3, [r7, #4]
 801e846:	330c      	adds	r3, #12
 801e848:	4618      	mov	r0, r3
 801e84a:	f7ef f8a3 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801e84e:	4606      	mov	r6, r0
 801e850:	f7f6 f908 	bl	8014a64 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e854:	4603      	mov	r3, r0
 801e856:	9302      	str	r3, [sp, #8]
 801e858:	f240 1355 	movw	r3, #341	; 0x155
 801e85c:	9301      	str	r3, [sp, #4]
 801e85e:	4b06      	ldr	r3, [pc, #24]	; (801e878 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801e860:	9300      	str	r3, [sp, #0]
 801e862:	2300      	movs	r3, #0
 801e864:	4632      	mov	r2, r6
 801e866:	4905      	ldr	r1, [pc, #20]	; (801e87c <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801e868:	4620      	mov	r0, r4
 801e86a:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801e86c:	687b      	ldr	r3, [r7, #4]
 801e86e:	699b      	ldr	r3, [r3, #24]
}
 801e870:	4618      	mov	r0, r3
 801e872:	370c      	adds	r7, #12
 801e874:	46bd      	mov	sp, r7
 801e876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e878:	08026ec8 	.word	0x08026ec8
 801e87c:	08026f64 	.word	0x08026f64

0801e880 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801e880:	b480      	push	{r7}
 801e882:	b083      	sub	sp, #12
 801e884:	af00      	add	r7, sp, #0
 801e886:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801e888:	687b      	ldr	r3, [r7, #4]
 801e88a:	699b      	ldr	r3, [r3, #24]
}
 801e88c:	4618      	mov	r0, r3
 801e88e:	370c      	adds	r7, #12
 801e890:	46bd      	mov	sp, r7
 801e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e896:	4770      	bx	lr

0801e898 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801e898:	b480      	push	{r7}
 801e89a:	b083      	sub	sp, #12
 801e89c:	af00      	add	r7, sp, #0
 801e89e:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801e8a0:	687b      	ldr	r3, [r7, #4]
 801e8a2:	699b      	ldr	r3, [r3, #24]
}
 801e8a4:	4618      	mov	r0, r3
 801e8a6:	370c      	adds	r7, #12
 801e8a8:	46bd      	mov	sp, r7
 801e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8ae:	4770      	bx	lr

0801e8b0 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801e8b0:	b480      	push	{r7}
 801e8b2:	b083      	sub	sp, #12
 801e8b4:	af00      	add	r7, sp, #0
 801e8b6:	6078      	str	r0, [r7, #4]
    return size_;
 801e8b8:	687b      	ldr	r3, [r7, #4]
 801e8ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801e8bc:	4618      	mov	r0, r3
 801e8be:	370c      	adds	r7, #12
 801e8c0:	46bd      	mov	sp, r7
 801e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8c6:	4770      	bx	lr

0801e8c8 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801e8c8:	b480      	push	{r7}
 801e8ca:	b083      	sub	sp, #12
 801e8cc:	af00      	add	r7, sp, #0
 801e8ce:	6078      	str	r0, [r7, #4]
    return comparator_;
 801e8d0:	687b      	ldr	r3, [r7, #4]
 801e8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801e8d4:	4618      	mov	r0, r3
 801e8d6:	370c      	adds	r7, #12
 801e8d8:	46bd      	mov	sp, r7
 801e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8de:	4770      	bx	lr

0801e8e0 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801e8e0:	b480      	push	{r7}
 801e8e2:	b083      	sub	sp, #12
 801e8e4:	af00      	add	r7, sp, #0
 801e8e6:	6078      	str	r0, [r7, #4]
    return copier_;
 801e8e8:	687b      	ldr	r3, [r7, #4]
 801e8ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801e8ec:	4618      	mov	r0, r3
 801e8ee:	370c      	adds	r7, #12
 801e8f0:	46bd      	mov	sp, r7
 801e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8f6:	4770      	bx	lr

0801e8f8 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801e8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8fa:	b0cd      	sub	sp, #308	; 0x134
 801e8fc:	af00      	add	r7, sp, #0
 801e8fe:	1d3b      	adds	r3, r7, #4
 801e900:	6018      	str	r0, [r3, #0]
 801e902:	463b      	mov	r3, r7
 801e904:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801e906:	2500      	movs	r5, #0
 801e908:	1d3b      	adds	r3, r7, #4
 801e90a:	681b      	ldr	r3, [r3, #0]
 801e90c:	f103 040c 	add.w	r4, r3, #12
 801e910:	f107 0308 	add.w	r3, r7, #8
 801e914:	49bb      	ldr	r1, [pc, #748]	; (801ec04 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801e916:	4618      	mov	r0, r3
 801e918:	f7ee fcb1 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801e91c:	2601      	movs	r6, #1
 801e91e:	f107 0308 	add.w	r3, r7, #8
 801e922:	4619      	mov	r1, r3
 801e924:	4620      	mov	r0, r4
 801e926:	f7ef f86e 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801e92a:	4603      	mov	r3, r0
 801e92c:	2b00      	cmp	r3, #0
 801e92e:	d015      	beq.n	801e95c <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801e930:	463b      	mov	r3, r7
 801e932:	681b      	ldr	r3, [r3, #0]
 801e934:	f103 040c 	add.w	r4, r3, #12
 801e938:	f107 0310 	add.w	r3, r7, #16
 801e93c:	49b2      	ldr	r1, [pc, #712]	; (801ec08 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e93e:	4618      	mov	r0, r3
 801e940:	f7ee fc9d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801e944:	2501      	movs	r5, #1
 801e946:	f107 0310 	add.w	r3, r7, #16
 801e94a:	4619      	mov	r1, r3
 801e94c:	4620      	mov	r0, r4
 801e94e:	f7ef f85a 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801e952:	4603      	mov	r3, r0
 801e954:	2b00      	cmp	r3, #0
 801e956:	d001      	beq.n	801e95c <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801e958:	2401      	movs	r4, #1
 801e95a:	e000      	b.n	801e95e <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801e95c:	2400      	movs	r4, #0
 801e95e:	2d00      	cmp	r5, #0
 801e960:	d004      	beq.n	801e96c <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801e962:	f107 0310 	add.w	r3, r7, #16
 801e966:	4618      	mov	r0, r3
 801e968:	f7ef f841 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801e96c:	2e00      	cmp	r6, #0
 801e96e:	d004      	beq.n	801e97a <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801e970:	f107 0308 	add.w	r3, r7, #8
 801e974:	4618      	mov	r0, r3
 801e976:	f7ef f83a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801e97a:	2c00      	cmp	r4, #0
 801e97c:	d00c      	beq.n	801e998 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801e97e:	1d3b      	adds	r3, r7, #4
 801e980:	681b      	ldr	r3, [r3, #0]
 801e982:	699a      	ldr	r2, [r3, #24]
 801e984:	463b      	mov	r3, r7
 801e986:	681b      	ldr	r3, [r3, #0]
 801e988:	699b      	ldr	r3, [r3, #24]
 801e98a:	429a      	cmp	r2, r3
 801e98c:	bf0c      	ite	eq
 801e98e:	2301      	moveq	r3, #1
 801e990:	2300      	movne	r3, #0
 801e992:	b2dc      	uxtb	r4, r3
 801e994:	f000 bd60 	b.w	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801e998:	2500      	movs	r5, #0
 801e99a:	1d3b      	adds	r3, r7, #4
 801e99c:	681b      	ldr	r3, [r3, #0]
 801e99e:	f103 040c 	add.w	r4, r3, #12
 801e9a2:	f107 0318 	add.w	r3, r7, #24
 801e9a6:	4998      	ldr	r1, [pc, #608]	; (801ec08 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e9a8:	4618      	mov	r0, r3
 801e9aa:	f7ee fc68 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801e9ae:	2601      	movs	r6, #1
 801e9b0:	f107 0318 	add.w	r3, r7, #24
 801e9b4:	4619      	mov	r1, r3
 801e9b6:	4620      	mov	r0, r4
 801e9b8:	f7ef f825 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801e9bc:	4603      	mov	r3, r0
 801e9be:	2b00      	cmp	r3, #0
 801e9c0:	d015      	beq.n	801e9ee <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801e9c2:	463b      	mov	r3, r7
 801e9c4:	681b      	ldr	r3, [r3, #0]
 801e9c6:	f103 040c 	add.w	r4, r3, #12
 801e9ca:	f107 0320 	add.w	r3, r7, #32
 801e9ce:	498d      	ldr	r1, [pc, #564]	; (801ec04 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801e9d0:	4618      	mov	r0, r3
 801e9d2:	f7ee fc54 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801e9d6:	2501      	movs	r5, #1
 801e9d8:	f107 0320 	add.w	r3, r7, #32
 801e9dc:	4619      	mov	r1, r3
 801e9de:	4620      	mov	r0, r4
 801e9e0:	f7ef f811 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801e9e4:	4603      	mov	r3, r0
 801e9e6:	2b00      	cmp	r3, #0
 801e9e8:	d001      	beq.n	801e9ee <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801e9ea:	2401      	movs	r4, #1
 801e9ec:	e000      	b.n	801e9f0 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801e9ee:	2400      	movs	r4, #0
 801e9f0:	2d00      	cmp	r5, #0
 801e9f2:	d004      	beq.n	801e9fe <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801e9f4:	f107 0320 	add.w	r3, r7, #32
 801e9f8:	4618      	mov	r0, r3
 801e9fa:	f7ee fff8 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801e9fe:	2e00      	cmp	r6, #0
 801ea00:	d004      	beq.n	801ea0c <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801ea02:	f107 0318 	add.w	r3, r7, #24
 801ea06:	4618      	mov	r0, r3
 801ea08:	f7ee fff1 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ea0c:	2c00      	cmp	r4, #0
 801ea0e:	d00c      	beq.n	801ea2a <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801ea10:	1d3b      	adds	r3, r7, #4
 801ea12:	681b      	ldr	r3, [r3, #0]
 801ea14:	699a      	ldr	r2, [r3, #24]
 801ea16:	463b      	mov	r3, r7
 801ea18:	681b      	ldr	r3, [r3, #0]
 801ea1a:	699b      	ldr	r3, [r3, #24]
 801ea1c:	429a      	cmp	r2, r3
 801ea1e:	bf0c      	ite	eq
 801ea20:	2301      	moveq	r3, #1
 801ea22:	2300      	movne	r3, #0
 801ea24:	b2dc      	uxtb	r4, r3
 801ea26:	f000 bd17 	b.w	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801ea2a:	2500      	movs	r5, #0
 801ea2c:	1d3b      	adds	r3, r7, #4
 801ea2e:	681b      	ldr	r3, [r3, #0]
 801ea30:	f103 040c 	add.w	r4, r3, #12
 801ea34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ea38:	4974      	ldr	r1, [pc, #464]	; (801ec0c <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801ea3a:	4618      	mov	r0, r3
 801ea3c:	f7ee fc1f 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801ea40:	2601      	movs	r6, #1
 801ea42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ea46:	4619      	mov	r1, r3
 801ea48:	4620      	mov	r0, r4
 801ea4a:	f7ee ffdc 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801ea4e:	4603      	mov	r3, r0
 801ea50:	2b00      	cmp	r3, #0
 801ea52:	d015      	beq.n	801ea80 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801ea54:	463b      	mov	r3, r7
 801ea56:	681b      	ldr	r3, [r3, #0]
 801ea58:	f103 040c 	add.w	r4, r3, #12
 801ea5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ea60:	4969      	ldr	r1, [pc, #420]	; (801ec08 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801ea62:	4618      	mov	r0, r3
 801ea64:	f7ee fc0b 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801ea68:	2501      	movs	r5, #1
 801ea6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ea6e:	4619      	mov	r1, r3
 801ea70:	4620      	mov	r0, r4
 801ea72:	f7ee ffc8 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801ea76:	4603      	mov	r3, r0
 801ea78:	2b00      	cmp	r3, #0
 801ea7a:	d001      	beq.n	801ea80 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801ea7c:	2401      	movs	r4, #1
 801ea7e:	e000      	b.n	801ea82 <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801ea80:	2400      	movs	r4, #0
 801ea82:	2d00      	cmp	r5, #0
 801ea84:	d004      	beq.n	801ea90 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801ea86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ea8a:	4618      	mov	r0, r3
 801ea8c:	f7ee ffaf 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ea90:	2e00      	cmp	r6, #0
 801ea92:	d004      	beq.n	801ea9e <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801ea94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ea98:	4618      	mov	r0, r3
 801ea9a:	f7ee ffa8 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ea9e:	2c00      	cmp	r4, #0
 801eaa0:	d012      	beq.n	801eac8 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801eaa2:	463b      	mov	r3, r7
 801eaa4:	681b      	ldr	r3, [r3, #0]
 801eaa6:	699b      	ldr	r3, [r3, #24]
 801eaa8:	2b00      	cmp	r3, #0
 801eaaa:	db0a      	blt.n	801eac2 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801eaac:	1d3b      	adds	r3, r7, #4
 801eaae:	681b      	ldr	r3, [r3, #0]
 801eab0:	699b      	ldr	r3, [r3, #24]
 801eab2:	463a      	mov	r2, r7
 801eab4:	6812      	ldr	r2, [r2, #0]
 801eab6:	6992      	ldr	r2, [r2, #24]
 801eab8:	4293      	cmp	r3, r2
 801eaba:	d102      	bne.n	801eac2 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801eabc:	2401      	movs	r4, #1
 801eabe:	f000 bccb 	b.w	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801eac2:	2400      	movs	r4, #0
 801eac4:	f000 bcc8 	b.w	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801eac8:	2500      	movs	r5, #0
 801eaca:	1d3b      	adds	r3, r7, #4
 801eacc:	681b      	ldr	r3, [r3, #0]
 801eace:	f103 040c 	add.w	r4, r3, #12
 801ead2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ead6:	494c      	ldr	r1, [pc, #304]	; (801ec08 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801ead8:	4618      	mov	r0, r3
 801eada:	f7ee fbd0 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801eade:	2601      	movs	r6, #1
 801eae0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801eae4:	4619      	mov	r1, r3
 801eae6:	4620      	mov	r0, r4
 801eae8:	f7ee ff8d 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801eaec:	4603      	mov	r3, r0
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	d015      	beq.n	801eb1e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801eaf2:	463b      	mov	r3, r7
 801eaf4:	681b      	ldr	r3, [r3, #0]
 801eaf6:	f103 040c 	add.w	r4, r3, #12
 801eafa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801eafe:	4943      	ldr	r1, [pc, #268]	; (801ec0c <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801eb00:	4618      	mov	r0, r3
 801eb02:	f7ee fbbc 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801eb06:	2501      	movs	r5, #1
 801eb08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801eb0c:	4619      	mov	r1, r3
 801eb0e:	4620      	mov	r0, r4
 801eb10:	f7ee ff79 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801eb14:	4603      	mov	r3, r0
 801eb16:	2b00      	cmp	r3, #0
 801eb18:	d001      	beq.n	801eb1e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801eb1a:	2401      	movs	r4, #1
 801eb1c:	e000      	b.n	801eb20 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801eb1e:	2400      	movs	r4, #0
 801eb20:	2d00      	cmp	r5, #0
 801eb22:	d004      	beq.n	801eb2e <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801eb24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801eb28:	4618      	mov	r0, r3
 801eb2a:	f7ee ff60 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801eb2e:	2e00      	cmp	r6, #0
 801eb30:	d004      	beq.n	801eb3c <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801eb32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801eb36:	4618      	mov	r0, r3
 801eb38:	f7ee ff59 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801eb3c:	2c00      	cmp	r4, #0
 801eb3e:	d012      	beq.n	801eb66 <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801eb40:	1d3b      	adds	r3, r7, #4
 801eb42:	681b      	ldr	r3, [r3, #0]
 801eb44:	699b      	ldr	r3, [r3, #24]
 801eb46:	2b00      	cmp	r3, #0
 801eb48:	db0a      	blt.n	801eb60 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801eb4a:	1d3b      	adds	r3, r7, #4
 801eb4c:	681b      	ldr	r3, [r3, #0]
 801eb4e:	699b      	ldr	r3, [r3, #24]
 801eb50:	463a      	mov	r2, r7
 801eb52:	6812      	ldr	r2, [r2, #0]
 801eb54:	6992      	ldr	r2, [r2, #24]
 801eb56:	4293      	cmp	r3, r2
 801eb58:	d102      	bne.n	801eb60 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801eb5a:	2401      	movs	r4, #1
 801eb5c:	f000 bc7c 	b.w	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801eb60:	2400      	movs	r4, #0
 801eb62:	f000 bc79 	b.w	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801eb66:	2500      	movs	r5, #0
 801eb68:	1d3b      	adds	r3, r7, #4
 801eb6a:	681b      	ldr	r3, [r3, #0]
 801eb6c:	f103 040c 	add.w	r4, r3, #12
 801eb70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801eb74:	4926      	ldr	r1, [pc, #152]	; (801ec10 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801eb76:	4618      	mov	r0, r3
 801eb78:	f7ee fb81 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801eb7c:	2601      	movs	r6, #1
 801eb7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801eb82:	4619      	mov	r1, r3
 801eb84:	4620      	mov	r0, r4
 801eb86:	f7ee ff3e 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801eb8a:	4603      	mov	r3, r0
 801eb8c:	2b00      	cmp	r3, #0
 801eb8e:	d015      	beq.n	801ebbc <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801eb90:	463b      	mov	r3, r7
 801eb92:	681b      	ldr	r3, [r3, #0]
 801eb94:	f103 040c 	add.w	r4, r3, #12
 801eb98:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801eb9c:	491a      	ldr	r1, [pc, #104]	; (801ec08 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801eb9e:	4618      	mov	r0, r3
 801eba0:	f7ee fb6d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801eba4:	2501      	movs	r5, #1
 801eba6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ebaa:	4619      	mov	r1, r3
 801ebac:	4620      	mov	r0, r4
 801ebae:	f7ee ff2a 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801ebb2:	4603      	mov	r3, r0
 801ebb4:	2b00      	cmp	r3, #0
 801ebb6:	d001      	beq.n	801ebbc <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801ebb8:	2401      	movs	r4, #1
 801ebba:	e000      	b.n	801ebbe <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801ebbc:	2400      	movs	r4, #0
 801ebbe:	2d00      	cmp	r5, #0
 801ebc0:	d004      	beq.n	801ebcc <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801ebc2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ebc6:	4618      	mov	r0, r3
 801ebc8:	f7ee ff11 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ebcc:	2e00      	cmp	r6, #0
 801ebce:	d004      	beq.n	801ebda <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801ebd0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ebd4:	4618      	mov	r0, r3
 801ebd6:	f7ee ff0a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ebda:	2c00      	cmp	r4, #0
 801ebdc:	d01a      	beq.n	801ec14 <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801ebde:	463b      	mov	r3, r7
 801ebe0:	681b      	ldr	r3, [r3, #0]
 801ebe2:	699b      	ldr	r3, [r3, #24]
 801ebe4:	2b00      	cmp	r3, #0
 801ebe6:	db0a      	blt.n	801ebfe <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801ebe8:	1d3b      	adds	r3, r7, #4
 801ebea:	681b      	ldr	r3, [r3, #0]
 801ebec:	699b      	ldr	r3, [r3, #24]
 801ebee:	463a      	mov	r2, r7
 801ebf0:	6812      	ldr	r2, [r2, #0]
 801ebf2:	6992      	ldr	r2, [r2, #24]
 801ebf4:	4293      	cmp	r3, r2
 801ebf6:	d102      	bne.n	801ebfe <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801ebf8:	2401      	movs	r4, #1
 801ebfa:	f000 bc2d 	b.w	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ebfe:	2400      	movs	r4, #0
 801ec00:	f000 bc2a 	b.w	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ec04:	08026ea8 	.word	0x08026ea8
 801ec08:	08026e8c 	.word	0x08026e8c
 801ec0c:	08026e98 	.word	0x08026e98
 801ec10:	08026eb4 	.word	0x08026eb4
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801ec14:	2500      	movs	r5, #0
 801ec16:	1d3b      	adds	r3, r7, #4
 801ec18:	681b      	ldr	r3, [r3, #0]
 801ec1a:	f103 040c 	add.w	r4, r3, #12
 801ec1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ec22:	49b8      	ldr	r1, [pc, #736]	; (801ef04 <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801ec24:	4618      	mov	r0, r3
 801ec26:	f7ee fb2a 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801ec2a:	2601      	movs	r6, #1
 801ec2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ec30:	4619      	mov	r1, r3
 801ec32:	4620      	mov	r0, r4
 801ec34:	f7ee fee7 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801ec38:	4603      	mov	r3, r0
 801ec3a:	2b00      	cmp	r3, #0
 801ec3c:	d015      	beq.n	801ec6a <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801ec3e:	463b      	mov	r3, r7
 801ec40:	681b      	ldr	r3, [r3, #0]
 801ec42:	f103 040c 	add.w	r4, r3, #12
 801ec46:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ec4a:	49af      	ldr	r1, [pc, #700]	; (801ef08 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801ec4c:	4618      	mov	r0, r3
 801ec4e:	f7ee fb16 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801ec52:	2501      	movs	r5, #1
 801ec54:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ec58:	4619      	mov	r1, r3
 801ec5a:	4620      	mov	r0, r4
 801ec5c:	f7ee fed3 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801ec60:	4603      	mov	r3, r0
 801ec62:	2b00      	cmp	r3, #0
 801ec64:	d001      	beq.n	801ec6a <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801ec66:	2401      	movs	r4, #1
 801ec68:	e000      	b.n	801ec6c <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801ec6a:	2400      	movs	r4, #0
 801ec6c:	2d00      	cmp	r5, #0
 801ec6e:	d004      	beq.n	801ec7a <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801ec70:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ec74:	4618      	mov	r0, r3
 801ec76:	f7ee feba 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ec7a:	2e00      	cmp	r6, #0
 801ec7c:	d004      	beq.n	801ec88 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801ec7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ec82:	4618      	mov	r0, r3
 801ec84:	f7ee feb3 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ec88:	2c00      	cmp	r4, #0
 801ec8a:	d010      	beq.n	801ecae <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801ec8c:	1d3b      	adds	r3, r7, #4
 801ec8e:	681b      	ldr	r3, [r3, #0]
 801ec90:	699b      	ldr	r3, [r3, #24]
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	db09      	blt.n	801ecaa <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801ec96:	1d3b      	adds	r3, r7, #4
 801ec98:	681b      	ldr	r3, [r3, #0]
 801ec9a:	699b      	ldr	r3, [r3, #24]
 801ec9c:	463a      	mov	r2, r7
 801ec9e:	6812      	ldr	r2, [r2, #0]
 801eca0:	6992      	ldr	r2, [r2, #24]
 801eca2:	4293      	cmp	r3, r2
 801eca4:	d101      	bne.n	801ecaa <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801eca6:	2401      	movs	r4, #1
 801eca8:	e3d6      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ecaa:	2400      	movs	r4, #0
 801ecac:	e3d4      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801ecae:	2500      	movs	r5, #0
 801ecb0:	1d3b      	adds	r3, r7, #4
 801ecb2:	681b      	ldr	r3, [r3, #0]
 801ecb4:	f103 040c 	add.w	r4, r3, #12
 801ecb8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801ecbc:	4993      	ldr	r1, [pc, #588]	; (801ef0c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801ecbe:	4618      	mov	r0, r3
 801ecc0:	f7ee fadd 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801ecc4:	2601      	movs	r6, #1
 801ecc6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801ecca:	4619      	mov	r1, r3
 801eccc:	4620      	mov	r0, r4
 801ecce:	f7ee fe9a 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801ecd2:	4603      	mov	r3, r0
 801ecd4:	2b00      	cmp	r3, #0
 801ecd6:	d015      	beq.n	801ed04 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801ecd8:	463b      	mov	r3, r7
 801ecda:	681b      	ldr	r3, [r3, #0]
 801ecdc:	f103 040c 	add.w	r4, r3, #12
 801ece0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801ece4:	498a      	ldr	r1, [pc, #552]	; (801ef10 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801ece6:	4618      	mov	r0, r3
 801ece8:	f7ee fac9 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801ecec:	2501      	movs	r5, #1
 801ecee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801ecf2:	4619      	mov	r1, r3
 801ecf4:	4620      	mov	r0, r4
 801ecf6:	f7ee fe86 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801ecfa:	4603      	mov	r3, r0
 801ecfc:	2b00      	cmp	r3, #0
 801ecfe:	d001      	beq.n	801ed04 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801ed00:	2401      	movs	r4, #1
 801ed02:	e000      	b.n	801ed06 <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801ed04:	2400      	movs	r4, #0
 801ed06:	2d00      	cmp	r5, #0
 801ed08:	d004      	beq.n	801ed14 <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801ed0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801ed0e:	4618      	mov	r0, r3
 801ed10:	f7ee fe6d 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ed14:	2e00      	cmp	r6, #0
 801ed16:	d004      	beq.n	801ed22 <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801ed18:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801ed1c:	4618      	mov	r0, r3
 801ed1e:	f7ee fe66 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ed22:	2c00      	cmp	r4, #0
 801ed24:	d010      	beq.n	801ed48 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801ed26:	463b      	mov	r3, r7
 801ed28:	681b      	ldr	r3, [r3, #0]
 801ed2a:	699b      	ldr	r3, [r3, #24]
 801ed2c:	2b00      	cmp	r3, #0
 801ed2e:	db09      	blt.n	801ed44 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801ed30:	1d3b      	adds	r3, r7, #4
 801ed32:	681b      	ldr	r3, [r3, #0]
 801ed34:	699b      	ldr	r3, [r3, #24]
 801ed36:	463a      	mov	r2, r7
 801ed38:	6812      	ldr	r2, [r2, #0]
 801ed3a:	6992      	ldr	r2, [r2, #24]
 801ed3c:	4293      	cmp	r3, r2
 801ed3e:	d101      	bne.n	801ed44 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801ed40:	2401      	movs	r4, #1
 801ed42:	e389      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ed44:	2400      	movs	r4, #0
 801ed46:	e387      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801ed48:	2500      	movs	r5, #0
 801ed4a:	1d3b      	adds	r3, r7, #4
 801ed4c:	681b      	ldr	r3, [r3, #0]
 801ed4e:	f103 040c 	add.w	r4, r3, #12
 801ed52:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801ed56:	496e      	ldr	r1, [pc, #440]	; (801ef10 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801ed58:	4618      	mov	r0, r3
 801ed5a:	f7ee fa90 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801ed5e:	2601      	movs	r6, #1
 801ed60:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801ed64:	4619      	mov	r1, r3
 801ed66:	4620      	mov	r0, r4
 801ed68:	f7ee fe4d 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801ed6c:	4603      	mov	r3, r0
 801ed6e:	2b00      	cmp	r3, #0
 801ed70:	d015      	beq.n	801ed9e <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801ed72:	463b      	mov	r3, r7
 801ed74:	681b      	ldr	r3, [r3, #0]
 801ed76:	f103 040c 	add.w	r4, r3, #12
 801ed7a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801ed7e:	4963      	ldr	r1, [pc, #396]	; (801ef0c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801ed80:	4618      	mov	r0, r3
 801ed82:	f7ee fa7c 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801ed86:	2501      	movs	r5, #1
 801ed88:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801ed8c:	4619      	mov	r1, r3
 801ed8e:	4620      	mov	r0, r4
 801ed90:	f7ee fe39 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801ed94:	4603      	mov	r3, r0
 801ed96:	2b00      	cmp	r3, #0
 801ed98:	d001      	beq.n	801ed9e <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801ed9a:	2401      	movs	r4, #1
 801ed9c:	e000      	b.n	801eda0 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801ed9e:	2400      	movs	r4, #0
 801eda0:	2d00      	cmp	r5, #0
 801eda2:	d004      	beq.n	801edae <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801eda4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801eda8:	4618      	mov	r0, r3
 801edaa:	f7ee fe20 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801edae:	2e00      	cmp	r6, #0
 801edb0:	d004      	beq.n	801edbc <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801edb2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801edb6:	4618      	mov	r0, r3
 801edb8:	f7ee fe19 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801edbc:	2c00      	cmp	r4, #0
 801edbe:	d010      	beq.n	801ede2 <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801edc0:	1d3b      	adds	r3, r7, #4
 801edc2:	681b      	ldr	r3, [r3, #0]
 801edc4:	699b      	ldr	r3, [r3, #24]
 801edc6:	2b00      	cmp	r3, #0
 801edc8:	db09      	blt.n	801edde <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801edca:	1d3b      	adds	r3, r7, #4
 801edcc:	681b      	ldr	r3, [r3, #0]
 801edce:	699b      	ldr	r3, [r3, #24]
 801edd0:	463a      	mov	r2, r7
 801edd2:	6812      	ldr	r2, [r2, #0]
 801edd4:	6992      	ldr	r2, [r2, #24]
 801edd6:	4293      	cmp	r3, r2
 801edd8:	d101      	bne.n	801edde <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801edda:	2401      	movs	r4, #1
 801eddc:	e33c      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801edde:	2400      	movs	r4, #0
 801ede0:	e33a      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801ede2:	2500      	movs	r5, #0
 801ede4:	1d3b      	adds	r3, r7, #4
 801ede6:	681b      	ldr	r3, [r3, #0]
 801ede8:	f103 040c 	add.w	r4, r3, #12
 801edec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801edf0:	4946      	ldr	r1, [pc, #280]	; (801ef0c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801edf2:	4618      	mov	r0, r3
 801edf4:	f7ee fa43 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801edf8:	2601      	movs	r6, #1
 801edfa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801edfe:	4619      	mov	r1, r3
 801ee00:	4620      	mov	r0, r4
 801ee02:	f7ee fe00 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801ee06:	4603      	mov	r3, r0
 801ee08:	2b00      	cmp	r3, #0
 801ee0a:	d015      	beq.n	801ee38 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801ee0c:	463b      	mov	r3, r7
 801ee0e:	681b      	ldr	r3, [r3, #0]
 801ee10:	f103 040c 	add.w	r4, r3, #12
 801ee14:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801ee18:	493b      	ldr	r1, [pc, #236]	; (801ef08 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801ee1a:	4618      	mov	r0, r3
 801ee1c:	f7ee fa2f 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801ee20:	2501      	movs	r5, #1
 801ee22:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801ee26:	4619      	mov	r1, r3
 801ee28:	4620      	mov	r0, r4
 801ee2a:	f7ee fdec 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801ee2e:	4603      	mov	r3, r0
 801ee30:	2b00      	cmp	r3, #0
 801ee32:	d001      	beq.n	801ee38 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801ee34:	2401      	movs	r4, #1
 801ee36:	e000      	b.n	801ee3a <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801ee38:	2400      	movs	r4, #0
 801ee3a:	2d00      	cmp	r5, #0
 801ee3c:	d004      	beq.n	801ee48 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801ee3e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801ee42:	4618      	mov	r0, r3
 801ee44:	f7ee fdd3 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ee48:	2e00      	cmp	r6, #0
 801ee4a:	d004      	beq.n	801ee56 <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801ee4c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ee50:	4618      	mov	r0, r3
 801ee52:	f7ee fdcc 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ee56:	2c00      	cmp	r4, #0
 801ee58:	d00b      	beq.n	801ee72 <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801ee5a:	1d3b      	adds	r3, r7, #4
 801ee5c:	681b      	ldr	r3, [r3, #0]
 801ee5e:	699a      	ldr	r2, [r3, #24]
 801ee60:	463b      	mov	r3, r7
 801ee62:	681b      	ldr	r3, [r3, #0]
 801ee64:	699b      	ldr	r3, [r3, #24]
 801ee66:	429a      	cmp	r2, r3
 801ee68:	bf0c      	ite	eq
 801ee6a:	2301      	moveq	r3, #1
 801ee6c:	2300      	movne	r3, #0
 801ee6e:	b2dc      	uxtb	r4, r3
 801ee70:	e2f2      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801ee72:	2500      	movs	r5, #0
 801ee74:	1d3b      	adds	r3, r7, #4
 801ee76:	681b      	ldr	r3, [r3, #0]
 801ee78:	f103 040c 	add.w	r4, r3, #12
 801ee7c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801ee80:	4921      	ldr	r1, [pc, #132]	; (801ef08 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801ee82:	4618      	mov	r0, r3
 801ee84:	f7ee f9fb 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801ee88:	2601      	movs	r6, #1
 801ee8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801ee8e:	4619      	mov	r1, r3
 801ee90:	4620      	mov	r0, r4
 801ee92:	f7ee fdb8 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801ee96:	4603      	mov	r3, r0
 801ee98:	2b00      	cmp	r3, #0
 801ee9a:	d015      	beq.n	801eec8 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801ee9c:	463b      	mov	r3, r7
 801ee9e:	681b      	ldr	r3, [r3, #0]
 801eea0:	f103 040c 	add.w	r4, r3, #12
 801eea4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801eea8:	4918      	ldr	r1, [pc, #96]	; (801ef0c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801eeaa:	4618      	mov	r0, r3
 801eeac:	f7ee f9e7 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801eeb0:	2501      	movs	r5, #1
 801eeb2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801eeb6:	4619      	mov	r1, r3
 801eeb8:	4620      	mov	r0, r4
 801eeba:	f7ee fda4 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801eebe:	4603      	mov	r3, r0
 801eec0:	2b00      	cmp	r3, #0
 801eec2:	d001      	beq.n	801eec8 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801eec4:	2401      	movs	r4, #1
 801eec6:	e000      	b.n	801eeca <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801eec8:	2400      	movs	r4, #0
 801eeca:	2d00      	cmp	r5, #0
 801eecc:	d004      	beq.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801eece:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801eed2:	4618      	mov	r0, r3
 801eed4:	f7ee fd8b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801eed8:	2e00      	cmp	r6, #0
 801eeda:	d004      	beq.n	801eee6 <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801eedc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801eee0:	4618      	mov	r0, r3
 801eee2:	f7ee fd84 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801eee6:	2c00      	cmp	r4, #0
 801eee8:	d014      	beq.n	801ef14 <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801eeea:	1d3b      	adds	r3, r7, #4
 801eeec:	681b      	ldr	r3, [r3, #0]
 801eeee:	699a      	ldr	r2, [r3, #24]
 801eef0:	463b      	mov	r3, r7
 801eef2:	681b      	ldr	r3, [r3, #0]
 801eef4:	699b      	ldr	r3, [r3, #24]
 801eef6:	429a      	cmp	r2, r3
 801eef8:	bf0c      	ite	eq
 801eefa:	2301      	moveq	r3, #1
 801eefc:	2300      	movne	r3, #0
 801eefe:	b2dc      	uxtb	r4, r3
 801ef00:	e2aa      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ef02:	bf00      	nop
 801ef04:	08026e8c 	.word	0x08026e8c
 801ef08:	08026eb4 	.word	0x08026eb4
 801ef0c:	08026e98 	.word	0x08026e98
 801ef10:	08026ea8 	.word	0x08026ea8
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801ef14:	2500      	movs	r5, #0
 801ef16:	1d3b      	adds	r3, r7, #4
 801ef18:	681b      	ldr	r3, [r3, #0]
 801ef1a:	f103 040c 	add.w	r4, r3, #12
 801ef1e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ef22:	49ae      	ldr	r1, [pc, #696]	; (801f1dc <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801ef24:	4618      	mov	r0, r3
 801ef26:	f7ee f9aa 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801ef2a:	2601      	movs	r6, #1
 801ef2c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ef30:	4619      	mov	r1, r3
 801ef32:	4620      	mov	r0, r4
 801ef34:	f7ee fd67 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801ef38:	4603      	mov	r3, r0
 801ef3a:	2b00      	cmp	r3, #0
 801ef3c:	d015      	beq.n	801ef6a <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801ef3e:	463b      	mov	r3, r7
 801ef40:	681b      	ldr	r3, [r3, #0]
 801ef42:	f103 040c 	add.w	r4, r3, #12
 801ef46:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ef4a:	49a5      	ldr	r1, [pc, #660]	; (801f1e0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801ef4c:	4618      	mov	r0, r3
 801ef4e:	f7ee f996 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801ef52:	2501      	movs	r5, #1
 801ef54:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ef58:	4619      	mov	r1, r3
 801ef5a:	4620      	mov	r0, r4
 801ef5c:	f7ee fd53 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801ef60:	4603      	mov	r3, r0
 801ef62:	2b00      	cmp	r3, #0
 801ef64:	d001      	beq.n	801ef6a <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801ef66:	2401      	movs	r4, #1
 801ef68:	e000      	b.n	801ef6c <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801ef6a:	2400      	movs	r4, #0
 801ef6c:	2d00      	cmp	r5, #0
 801ef6e:	d004      	beq.n	801ef7a <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801ef70:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ef74:	4618      	mov	r0, r3
 801ef76:	f7ee fd3a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ef7a:	2e00      	cmp	r6, #0
 801ef7c:	d004      	beq.n	801ef88 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801ef7e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ef82:	4618      	mov	r0, r3
 801ef84:	f7ee fd33 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801ef88:	2c00      	cmp	r4, #0
 801ef8a:	d010      	beq.n	801efae <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801ef8c:	1d3b      	adds	r3, r7, #4
 801ef8e:	681b      	ldr	r3, [r3, #0]
 801ef90:	699b      	ldr	r3, [r3, #24]
 801ef92:	2b00      	cmp	r3, #0
 801ef94:	db09      	blt.n	801efaa <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801ef96:	1d3b      	adds	r3, r7, #4
 801ef98:	681b      	ldr	r3, [r3, #0]
 801ef9a:	699b      	ldr	r3, [r3, #24]
 801ef9c:	463a      	mov	r2, r7
 801ef9e:	6812      	ldr	r2, [r2, #0]
 801efa0:	6992      	ldr	r2, [r2, #24]
 801efa2:	4293      	cmp	r3, r2
 801efa4:	d101      	bne.n	801efaa <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801efa6:	2401      	movs	r4, #1
 801efa8:	e256      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801efaa:	2400      	movs	r4, #0
 801efac:	e254      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801efae:	2500      	movs	r5, #0
 801efb0:	1d3b      	adds	r3, r7, #4
 801efb2:	681b      	ldr	r3, [r3, #0]
 801efb4:	f103 040c 	add.w	r4, r3, #12
 801efb8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801efbc:	4988      	ldr	r1, [pc, #544]	; (801f1e0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801efbe:	4618      	mov	r0, r3
 801efc0:	f7ee f95d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801efc4:	2601      	movs	r6, #1
 801efc6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801efca:	4619      	mov	r1, r3
 801efcc:	4620      	mov	r0, r4
 801efce:	f7ee fd1a 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801efd2:	4603      	mov	r3, r0
 801efd4:	2b00      	cmp	r3, #0
 801efd6:	d015      	beq.n	801f004 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801efd8:	463b      	mov	r3, r7
 801efda:	681b      	ldr	r3, [r3, #0]
 801efdc:	f103 040c 	add.w	r4, r3, #12
 801efe0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801efe4:	497d      	ldr	r1, [pc, #500]	; (801f1dc <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801efe6:	4618      	mov	r0, r3
 801efe8:	f7ee f949 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801efec:	2501      	movs	r5, #1
 801efee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801eff2:	4619      	mov	r1, r3
 801eff4:	4620      	mov	r0, r4
 801eff6:	f7ee fd06 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801effa:	4603      	mov	r3, r0
 801effc:	2b00      	cmp	r3, #0
 801effe:	d001      	beq.n	801f004 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801f000:	2401      	movs	r4, #1
 801f002:	e000      	b.n	801f006 <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801f004:	2400      	movs	r4, #0
 801f006:	2d00      	cmp	r5, #0
 801f008:	d004      	beq.n	801f014 <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801f00a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f00e:	4618      	mov	r0, r3
 801f010:	f7ee fced 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f014:	2e00      	cmp	r6, #0
 801f016:	d004      	beq.n	801f022 <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801f018:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801f01c:	4618      	mov	r0, r3
 801f01e:	f7ee fce6 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f022:	2c00      	cmp	r4, #0
 801f024:	d010      	beq.n	801f048 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801f026:	463b      	mov	r3, r7
 801f028:	681b      	ldr	r3, [r3, #0]
 801f02a:	699b      	ldr	r3, [r3, #24]
 801f02c:	2b00      	cmp	r3, #0
 801f02e:	db09      	blt.n	801f044 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801f030:	1d3b      	adds	r3, r7, #4
 801f032:	681b      	ldr	r3, [r3, #0]
 801f034:	699b      	ldr	r3, [r3, #24]
 801f036:	463a      	mov	r2, r7
 801f038:	6812      	ldr	r2, [r2, #0]
 801f03a:	6992      	ldr	r2, [r2, #24]
 801f03c:	4293      	cmp	r3, r2
 801f03e:	d101      	bne.n	801f044 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801f040:	2401      	movs	r4, #1
 801f042:	e209      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801f044:	2400      	movs	r4, #0
 801f046:	e207      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801f048:	1d3b      	adds	r3, r7, #4
 801f04a:	681b      	ldr	r3, [r3, #0]
 801f04c:	f103 020c 	add.w	r2, r3, #12
 801f050:	463b      	mov	r3, r7
 801f052:	681b      	ldr	r3, [r3, #0]
 801f054:	330c      	adds	r3, #12
 801f056:	4619      	mov	r1, r3
 801f058:	4610      	mov	r0, r2
 801f05a:	f7ee fd19 	bl	800da90 <_ZneRK12SimpleStringS1_>
 801f05e:	4603      	mov	r3, r0
 801f060:	2b00      	cmp	r3, #0
 801f062:	d001      	beq.n	801f068 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801f064:	2400      	movs	r4, #0
 801f066:	e1f7      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801f068:	1d3b      	adds	r3, r7, #4
 801f06a:	681b      	ldr	r3, [r3, #0]
 801f06c:	f103 040c 	add.w	r4, r3, #12
 801f070:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f074:	495b      	ldr	r1, [pc, #364]	; (801f1e4 <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801f076:	4618      	mov	r0, r3
 801f078:	f7ee f901 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f07c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f080:	4619      	mov	r1, r3
 801f082:	4620      	mov	r0, r4
 801f084:	f7ee fcbf 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f088:	4603      	mov	r3, r0
 801f08a:	461c      	mov	r4, r3
 801f08c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f090:	4618      	mov	r0, r3
 801f092:	f7ee fcac 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f096:	2c00      	cmp	r4, #0
 801f098:	d00b      	beq.n	801f0b2 <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801f09a:	1d3b      	adds	r3, r7, #4
 801f09c:	681b      	ldr	r3, [r3, #0]
 801f09e:	7e1a      	ldrb	r2, [r3, #24]
 801f0a0:	463b      	mov	r3, r7
 801f0a2:	681b      	ldr	r3, [r3, #0]
 801f0a4:	7e1b      	ldrb	r3, [r3, #24]
 801f0a6:	429a      	cmp	r2, r3
 801f0a8:	bf0c      	ite	eq
 801f0aa:	2301      	moveq	r3, #1
 801f0ac:	2300      	movne	r3, #0
 801f0ae:	b2dc      	uxtb	r4, r3
 801f0b0:	e1d2      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801f0b2:	1d3b      	adds	r3, r7, #4
 801f0b4:	681b      	ldr	r3, [r3, #0]
 801f0b6:	f103 040c 	add.w	r4, r3, #12
 801f0ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f0be:	494a      	ldr	r1, [pc, #296]	; (801f1e8 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801f0c0:	4618      	mov	r0, r3
 801f0c2:	f7ee f8dc 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f0c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f0ca:	4619      	mov	r1, r3
 801f0cc:	4620      	mov	r0, r4
 801f0ce:	f7ee fc9a 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f0d2:	4603      	mov	r3, r0
 801f0d4:	461c      	mov	r4, r3
 801f0d6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f0da:	4618      	mov	r0, r3
 801f0dc:	f7ee fc87 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f0e0:	2c00      	cmp	r4, #0
 801f0e2:	d00b      	beq.n	801f0fc <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801f0e4:	1d3b      	adds	r3, r7, #4
 801f0e6:	681b      	ldr	r3, [r3, #0]
 801f0e8:	699a      	ldr	r2, [r3, #24]
 801f0ea:	463b      	mov	r3, r7
 801f0ec:	681b      	ldr	r3, [r3, #0]
 801f0ee:	699b      	ldr	r3, [r3, #24]
 801f0f0:	429a      	cmp	r2, r3
 801f0f2:	bf0c      	ite	eq
 801f0f4:	2301      	moveq	r3, #1
 801f0f6:	2300      	movne	r3, #0
 801f0f8:	b2dc      	uxtb	r4, r3
 801f0fa:	e1ad      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801f0fc:	1d3b      	adds	r3, r7, #4
 801f0fe:	681b      	ldr	r3, [r3, #0]
 801f100:	f103 040c 	add.w	r4, r3, #12
 801f104:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f108:	4938      	ldr	r1, [pc, #224]	; (801f1ec <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801f10a:	4618      	mov	r0, r3
 801f10c:	f7ee f8b7 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f110:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f114:	4619      	mov	r1, r3
 801f116:	4620      	mov	r0, r4
 801f118:	f7ee fc75 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f11c:	4603      	mov	r3, r0
 801f11e:	461c      	mov	r4, r3
 801f120:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f124:	4618      	mov	r0, r3
 801f126:	f7ee fc62 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f12a:	2c00      	cmp	r4, #0
 801f12c:	d00b      	beq.n	801f146 <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801f12e:	1d3b      	adds	r3, r7, #4
 801f130:	681b      	ldr	r3, [r3, #0]
 801f132:	699a      	ldr	r2, [r3, #24]
 801f134:	463b      	mov	r3, r7
 801f136:	681b      	ldr	r3, [r3, #0]
 801f138:	699b      	ldr	r3, [r3, #24]
 801f13a:	429a      	cmp	r2, r3
 801f13c:	bf0c      	ite	eq
 801f13e:	2301      	moveq	r3, #1
 801f140:	2300      	movne	r3, #0
 801f142:	b2dc      	uxtb	r4, r3
 801f144:	e188      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801f146:	1d3b      	adds	r3, r7, #4
 801f148:	681b      	ldr	r3, [r3, #0]
 801f14a:	f103 040c 	add.w	r4, r3, #12
 801f14e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801f152:	4922      	ldr	r1, [pc, #136]	; (801f1dc <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801f154:	4618      	mov	r0, r3
 801f156:	f7ee f892 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f15a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801f15e:	4619      	mov	r1, r3
 801f160:	4620      	mov	r0, r4
 801f162:	f7ee fc50 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f166:	4603      	mov	r3, r0
 801f168:	461c      	mov	r4, r3
 801f16a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801f16e:	4618      	mov	r0, r3
 801f170:	f7ee fc3d 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f174:	2c00      	cmp	r4, #0
 801f176:	d00b      	beq.n	801f190 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801f178:	1d3b      	adds	r3, r7, #4
 801f17a:	681b      	ldr	r3, [r3, #0]
 801f17c:	699a      	ldr	r2, [r3, #24]
 801f17e:	463b      	mov	r3, r7
 801f180:	681b      	ldr	r3, [r3, #0]
 801f182:	699b      	ldr	r3, [r3, #24]
 801f184:	429a      	cmp	r2, r3
 801f186:	bf0c      	ite	eq
 801f188:	2301      	moveq	r3, #1
 801f18a:	2300      	movne	r3, #0
 801f18c:	b2dc      	uxtb	r4, r3
 801f18e:	e163      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801f190:	1d3b      	adds	r3, r7, #4
 801f192:	681b      	ldr	r3, [r3, #0]
 801f194:	f103 040c 	add.w	r4, r3, #12
 801f198:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801f19c:	4910      	ldr	r1, [pc, #64]	; (801f1e0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801f19e:	4618      	mov	r0, r3
 801f1a0:	f7ee f86d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f1a4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801f1a8:	4619      	mov	r1, r3
 801f1aa:	4620      	mov	r0, r4
 801f1ac:	f7ee fc2b 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f1b0:	4603      	mov	r3, r0
 801f1b2:	461c      	mov	r4, r3
 801f1b4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801f1b8:	4618      	mov	r0, r3
 801f1ba:	f7ee fc18 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f1be:	2c00      	cmp	r4, #0
 801f1c0:	d016      	beq.n	801f1f0 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801f1c2:	1d3b      	adds	r3, r7, #4
 801f1c4:	681b      	ldr	r3, [r3, #0]
 801f1c6:	699a      	ldr	r2, [r3, #24]
 801f1c8:	463b      	mov	r3, r7
 801f1ca:	681b      	ldr	r3, [r3, #0]
 801f1cc:	699b      	ldr	r3, [r3, #24]
 801f1ce:	429a      	cmp	r2, r3
 801f1d0:	bf0c      	ite	eq
 801f1d2:	2301      	moveq	r3, #1
 801f1d4:	2300      	movne	r3, #0
 801f1d6:	b2dc      	uxtb	r4, r3
 801f1d8:	e13e      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801f1da:	bf00      	nop
 801f1dc:	08026ea8 	.word	0x08026ea8
 801f1e0:	08026eb4 	.word	0x08026eb4
 801f1e4:	08026e90 	.word	0x08026e90
 801f1e8:	08026e8c 	.word	0x08026e8c
 801f1ec:	08026e98 	.word	0x08026e98
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801f1f0:	1d3b      	adds	r3, r7, #4
 801f1f2:	681b      	ldr	r3, [r3, #0]
 801f1f4:	f103 040c 	add.w	r4, r3, #12
 801f1f8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801f1fc:	4999      	ldr	r1, [pc, #612]	; (801f464 <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801f1fe:	4618      	mov	r0, r3
 801f200:	f7ee f83d 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f204:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801f208:	4619      	mov	r1, r3
 801f20a:	4620      	mov	r0, r4
 801f20c:	f7ee fbfb 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f210:	4603      	mov	r3, r0
 801f212:	461c      	mov	r4, r3
 801f214:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801f218:	4618      	mov	r0, r3
 801f21a:	f7ee fbe8 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f21e:	2c00      	cmp	r4, #0
 801f220:	d026      	beq.n	801f270 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801f222:	1d3b      	adds	r3, r7, #4
 801f224:	681b      	ldr	r3, [r3, #0]
 801f226:	699a      	ldr	r2, [r3, #24]
 801f228:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f22c:	4611      	mov	r1, r2
 801f22e:	4618      	mov	r0, r3
 801f230:	f7ee f825 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f234:	463b      	mov	r3, r7
 801f236:	681b      	ldr	r3, [r3, #0]
 801f238:	699a      	ldr	r2, [r3, #24]
 801f23a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801f23e:	4611      	mov	r1, r2
 801f240:	4618      	mov	r0, r3
 801f242:	f7ee f81c 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f246:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801f24a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f24e:	4611      	mov	r1, r2
 801f250:	4618      	mov	r0, r3
 801f252:	f7ee fbd8 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f256:	4603      	mov	r3, r0
 801f258:	461c      	mov	r4, r3
 801f25a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801f25e:	4618      	mov	r0, r3
 801f260:	f7ee fbc5 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f264:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f268:	4618      	mov	r0, r3
 801f26a:	f7ee fbc0 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f26e:	e0f3      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801f270:	1d3b      	adds	r3, r7, #4
 801f272:	681b      	ldr	r3, [r3, #0]
 801f274:	f103 040c 	add.w	r4, r3, #12
 801f278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801f27c:	497a      	ldr	r1, [pc, #488]	; (801f468 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801f27e:	4618      	mov	r0, r3
 801f280:	f7ed fffd 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801f288:	4619      	mov	r1, r3
 801f28a:	4620      	mov	r0, r4
 801f28c:	f7ee fbbb 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f290:	4603      	mov	r3, r0
 801f292:	461c      	mov	r4, r3
 801f294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801f298:	4618      	mov	r0, r3
 801f29a:	f7ee fba8 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f29e:	2c00      	cmp	r4, #0
 801f2a0:	d00b      	beq.n	801f2ba <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801f2a2:	1d3b      	adds	r3, r7, #4
 801f2a4:	681b      	ldr	r3, [r3, #0]
 801f2a6:	699a      	ldr	r2, [r3, #24]
 801f2a8:	463b      	mov	r3, r7
 801f2aa:	681b      	ldr	r3, [r3, #0]
 801f2ac:	699b      	ldr	r3, [r3, #24]
 801f2ae:	429a      	cmp	r2, r3
 801f2b0:	bf0c      	ite	eq
 801f2b2:	2301      	moveq	r3, #1
 801f2b4:	2300      	movne	r3, #0
 801f2b6:	b2dc      	uxtb	r4, r3
 801f2b8:	e0ce      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801f2ba:	1d3b      	adds	r3, r7, #4
 801f2bc:	681b      	ldr	r3, [r3, #0]
 801f2be:	f103 040c 	add.w	r4, r3, #12
 801f2c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801f2c6:	4969      	ldr	r1, [pc, #420]	; (801f46c <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801f2c8:	4618      	mov	r0, r3
 801f2ca:	f7ed ffd8 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f2ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801f2d2:	4619      	mov	r1, r3
 801f2d4:	4620      	mov	r0, r4
 801f2d6:	f7ee fb96 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f2da:	4603      	mov	r3, r0
 801f2dc:	461c      	mov	r4, r3
 801f2de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801f2e2:	4618      	mov	r0, r3
 801f2e4:	f7ee fb83 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f2e8:	2c00      	cmp	r4, #0
 801f2ea:	d00b      	beq.n	801f304 <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801f2ec:	1d3b      	adds	r3, r7, #4
 801f2ee:	681b      	ldr	r3, [r3, #0]
 801f2f0:	699a      	ldr	r2, [r3, #24]
 801f2f2:	463b      	mov	r3, r7
 801f2f4:	681b      	ldr	r3, [r3, #0]
 801f2f6:	699b      	ldr	r3, [r3, #24]
 801f2f8:	429a      	cmp	r2, r3
 801f2fa:	bf0c      	ite	eq
 801f2fc:	2301      	moveq	r3, #1
 801f2fe:	2300      	movne	r3, #0
 801f300:	b2dc      	uxtb	r4, r3
 801f302:	e0a9      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801f304:	1d3b      	adds	r3, r7, #4
 801f306:	681b      	ldr	r3, [r3, #0]
 801f308:	f103 040c 	add.w	r4, r3, #12
 801f30c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801f310:	4957      	ldr	r1, [pc, #348]	; (801f470 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801f312:	4618      	mov	r0, r3
 801f314:	f7ed ffb3 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f318:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801f31c:	4619      	mov	r1, r3
 801f31e:	4620      	mov	r0, r4
 801f320:	f7ee fb71 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f324:	4603      	mov	r3, r0
 801f326:	461c      	mov	r4, r3
 801f328:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801f32c:	4618      	mov	r0, r3
 801f32e:	f7ee fb5e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f332:	2c00      	cmp	r4, #0
 801f334:	d00b      	beq.n	801f34e <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801f336:	1d3b      	adds	r3, r7, #4
 801f338:	681b      	ldr	r3, [r3, #0]
 801f33a:	699a      	ldr	r2, [r3, #24]
 801f33c:	463b      	mov	r3, r7
 801f33e:	681b      	ldr	r3, [r3, #0]
 801f340:	699b      	ldr	r3, [r3, #24]
 801f342:	429a      	cmp	r2, r3
 801f344:	bf0c      	ite	eq
 801f346:	2301      	moveq	r3, #1
 801f348:	2300      	movne	r3, #0
 801f34a:	b2dc      	uxtb	r4, r3
 801f34c:	e084      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801f34e:	1d3b      	adds	r3, r7, #4
 801f350:	681b      	ldr	r3, [r3, #0]
 801f352:	f103 040c 	add.w	r4, r3, #12
 801f356:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f35a:	4946      	ldr	r1, [pc, #280]	; (801f474 <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801f35c:	4618      	mov	r0, r3
 801f35e:	f7ed ff8e 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f362:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f366:	4619      	mov	r1, r3
 801f368:	4620      	mov	r0, r4
 801f36a:	f7ee fb4c 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f36e:	4603      	mov	r3, r0
 801f370:	461c      	mov	r4, r3
 801f372:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f376:	4618      	mov	r0, r3
 801f378:	f7ee fb39 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f37c:	2c00      	cmp	r4, #0
 801f37e:	d01c      	beq.n	801f3ba <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801f380:	1d3b      	adds	r3, r7, #4
 801f382:	681b      	ldr	r3, [r3, #0]
 801f384:	ed93 7b06 	vldr	d7, [r3, #24]
 801f388:	463b      	mov	r3, r7
 801f38a:	681b      	ldr	r3, [r3, #0]
 801f38c:	ed93 6b06 	vldr	d6, [r3, #24]
 801f390:	1d3b      	adds	r3, r7, #4
 801f392:	681b      	ldr	r3, [r3, #0]
 801f394:	ed93 5b08 	vldr	d5, [r3, #32]
 801f398:	eeb0 2a45 	vmov.f32	s4, s10
 801f39c:	eef0 2a65 	vmov.f32	s5, s11
 801f3a0:	eeb0 1a46 	vmov.f32	s2, s12
 801f3a4:	eef0 1a66 	vmov.f32	s3, s13
 801f3a8:	eeb0 0a47 	vmov.f32	s0, s14
 801f3ac:	eef0 0a67 	vmov.f32	s1, s15
 801f3b0:	f7f3 fe18 	bl	8012fe4 <_Z13doubles_equalddd>
 801f3b4:	4603      	mov	r3, r0
 801f3b6:	461c      	mov	r4, r3
 801f3b8:	e04e      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801f3ba:	1d3b      	adds	r3, r7, #4
 801f3bc:	681b      	ldr	r3, [r3, #0]
 801f3be:	f103 040c 	add.w	r4, r3, #12
 801f3c2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801f3c6:	492c      	ldr	r1, [pc, #176]	; (801f478 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801f3c8:	4618      	mov	r0, r3
 801f3ca:	f7ed ff58 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f3ce:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801f3d2:	4619      	mov	r1, r3
 801f3d4:	4620      	mov	r0, r4
 801f3d6:	f7ee fb16 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f3da:	4603      	mov	r3, r0
 801f3dc:	461c      	mov	r4, r3
 801f3de:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801f3e2:	4618      	mov	r0, r3
 801f3e4:	f7ee fb03 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f3e8:	2c00      	cmp	r4, #0
 801f3ea:	d01c      	beq.n	801f426 <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801f3ec:	1d3b      	adds	r3, r7, #4
 801f3ee:	681b      	ldr	r3, [r3, #0]
 801f3f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801f3f2:	463b      	mov	r3, r7
 801f3f4:	681b      	ldr	r3, [r3, #0]
 801f3f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f3f8:	429a      	cmp	r2, r3
 801f3fa:	d001      	beq.n	801f400 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801f3fc:	2400      	movs	r4, #0
 801f3fe:	e02b      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801f400:	1d3b      	adds	r3, r7, #4
 801f402:	681b      	ldr	r3, [r3, #0]
 801f404:	6998      	ldr	r0, [r3, #24]
 801f406:	463b      	mov	r3, r7
 801f408:	681b      	ldr	r3, [r3, #0]
 801f40a:	6999      	ldr	r1, [r3, #24]
 801f40c:	1d3b      	adds	r3, r7, #4
 801f40e:	681b      	ldr	r3, [r3, #0]
 801f410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f412:	461a      	mov	r2, r3
 801f414:	f7ed fe52 	bl	800d0bc <_ZN12SimpleString6MemCmpEPKvS1_j>
 801f418:	4603      	mov	r3, r0
 801f41a:	2b00      	cmp	r3, #0
 801f41c:	bf0c      	ite	eq
 801f41e:	2301      	moveq	r3, #1
 801f420:	2300      	movne	r3, #0
 801f422:	b2dc      	uxtb	r4, r3
 801f424:	e018      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801f426:	1d3b      	adds	r3, r7, #4
 801f428:	681b      	ldr	r3, [r3, #0]
 801f42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f42c:	2b00      	cmp	r3, #0
 801f42e:	d012      	beq.n	801f456 <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801f430:	1d3b      	adds	r3, r7, #4
 801f432:	681b      	ldr	r3, [r3, #0]
 801f434:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801f436:	1d3b      	adds	r3, r7, #4
 801f438:	681b      	ldr	r3, [r3, #0]
 801f43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f43c:	681b      	ldr	r3, [r3, #0]
 801f43e:	3308      	adds	r3, #8
 801f440:	681b      	ldr	r3, [r3, #0]
 801f442:	1d3a      	adds	r2, r7, #4
 801f444:	6812      	ldr	r2, [r2, #0]
 801f446:	6991      	ldr	r1, [r2, #24]
 801f448:	463a      	mov	r2, r7
 801f44a:	6812      	ldr	r2, [r2, #0]
 801f44c:	6992      	ldr	r2, [r2, #24]
 801f44e:	4798      	blx	r3
 801f450:	4603      	mov	r3, r0
 801f452:	461c      	mov	r4, r3
 801f454:	e000      	b.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801f456:	2400      	movs	r4, #0
 801f458:	4623      	mov	r3, r4
}
 801f45a:	4618      	mov	r0, r3
 801f45c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801f460:	46bd      	mov	sp, r7
 801f462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f464:	08026f58 	.word	0x08026f58
 801f468:	08026f38 	.word	0x08026f38
 801f46c:	08026f40 	.word	0x08026f40
 801f470:	08026f4c 	.word	0x08026f4c
 801f474:	08026f30 	.word	0x08026f30
 801f478:	08026f64 	.word	0x08026f64

0801f47c <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801f47c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f47e:	b087      	sub	sp, #28
 801f480:	af00      	add	r7, sp, #0
 801f482:	6078      	str	r0, [r7, #4]
 801f484:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801f486:	687b      	ldr	r3, [r7, #4]
 801f488:	f103 020c 	add.w	r2, r3, #12
 801f48c:	683b      	ldr	r3, [r7, #0]
 801f48e:	330c      	adds	r3, #12
 801f490:	4619      	mov	r1, r3
 801f492:	4610      	mov	r0, r2
 801f494:	f7ee fab7 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f498:	4603      	mov	r3, r0
 801f49a:	2b00      	cmp	r3, #0
 801f49c:	d001      	beq.n	801f4a2 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801f49e:	2301      	movs	r3, #1
 801f4a0:	e03c      	b.n	801f51c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801f4a2:	2500      	movs	r5, #0
 801f4a4:	687b      	ldr	r3, [r7, #4]
 801f4a6:	f103 040c 	add.w	r4, r3, #12
 801f4aa:	f107 0308 	add.w	r3, r7, #8
 801f4ae:	491d      	ldr	r1, [pc, #116]	; (801f524 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801f4b0:	4618      	mov	r0, r3
 801f4b2:	f7ed fee4 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f4b6:	2601      	movs	r6, #1
 801f4b8:	f107 0308 	add.w	r3, r7, #8
 801f4bc:	4619      	mov	r1, r3
 801f4be:	4620      	mov	r0, r4
 801f4c0:	f7ee faa1 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f4c4:	4603      	mov	r3, r0
 801f4c6:	2b00      	cmp	r3, #0
 801f4c8:	d014      	beq.n	801f4f4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801f4ca:	683b      	ldr	r3, [r7, #0]
 801f4cc:	f103 040c 	add.w	r4, r3, #12
 801f4d0:	f107 0310 	add.w	r3, r7, #16
 801f4d4:	4914      	ldr	r1, [pc, #80]	; (801f528 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801f4d6:	4618      	mov	r0, r3
 801f4d8:	f7ed fed1 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f4dc:	2501      	movs	r5, #1
 801f4de:	f107 0310 	add.w	r3, r7, #16
 801f4e2:	4619      	mov	r1, r3
 801f4e4:	4620      	mov	r0, r4
 801f4e6:	f7ee fa8e 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f4ea:	4603      	mov	r3, r0
 801f4ec:	2b00      	cmp	r3, #0
 801f4ee:	d001      	beq.n	801f4f4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801f4f0:	2401      	movs	r4, #1
 801f4f2:	e000      	b.n	801f4f6 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801f4f4:	2400      	movs	r4, #0
 801f4f6:	2d00      	cmp	r5, #0
 801f4f8:	d004      	beq.n	801f504 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801f4fa:	f107 0310 	add.w	r3, r7, #16
 801f4fe:	4618      	mov	r0, r3
 801f500:	f7ee fa75 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f504:	2e00      	cmp	r6, #0
 801f506:	d004      	beq.n	801f512 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801f508:	f107 0308 	add.w	r3, r7, #8
 801f50c:	4618      	mov	r0, r3
 801f50e:	f7ee fa6e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f512:	2c00      	cmp	r4, #0
 801f514:	d001      	beq.n	801f51a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801f516:	2301      	movs	r3, #1
 801f518:	e000      	b.n	801f51c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801f51a:	2300      	movs	r3, #0
}
 801f51c:	4618      	mov	r0, r3
 801f51e:	371c      	adds	r7, #28
 801f520:	46bd      	mov	sp, r7
 801f522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f524:	08026f40 	.word	0x08026f40
 801f528:	08026f38 	.word	0x08026f38

0801f52c <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801f52c:	b590      	push	{r4, r7, lr}
 801f52e:	b0b9      	sub	sp, #228	; 0xe4
 801f530:	af00      	add	r7, sp, #0
 801f532:	6078      	str	r0, [r7, #4]
 801f534:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801f536:	683b      	ldr	r3, [r7, #0]
 801f538:	f103 040c 	add.w	r4, r3, #12
 801f53c:	f107 0308 	add.w	r3, r7, #8
 801f540:	49d4      	ldr	r1, [pc, #848]	; (801f894 <_ZNK14MockNamedValue8toStringEv+0x368>)
 801f542:	4618      	mov	r0, r3
 801f544:	f7ed fe9b 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f548:	f107 0308 	add.w	r3, r7, #8
 801f54c:	4619      	mov	r1, r3
 801f54e:	4620      	mov	r0, r4
 801f550:	f7ee fa59 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f554:	4603      	mov	r3, r0
 801f556:	461c      	mov	r4, r3
 801f558:	f107 0308 	add.w	r3, r7, #8
 801f55c:	4618      	mov	r0, r3
 801f55e:	f7ee fa46 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f562:	2c00      	cmp	r4, #0
 801f564:	d007      	beq.n	801f576 <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801f566:	683b      	ldr	r3, [r7, #0]
 801f568:	7e1a      	ldrb	r2, [r3, #24]
 801f56a:	687b      	ldr	r3, [r7, #4]
 801f56c:	4611      	mov	r1, r2
 801f56e:	4618      	mov	r0, r3
 801f570:	f7ee fcae 	bl	800ded0 <_Z10StringFromb>
 801f574:	e23f      	b.n	801f9f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801f576:	683b      	ldr	r3, [r7, #0]
 801f578:	f103 040c 	add.w	r4, r3, #12
 801f57c:	f107 0310 	add.w	r3, r7, #16
 801f580:	49c5      	ldr	r1, [pc, #788]	; (801f898 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801f582:	4618      	mov	r0, r3
 801f584:	f7ed fe7b 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f588:	f107 0310 	add.w	r3, r7, #16
 801f58c:	4619      	mov	r1, r3
 801f58e:	4620      	mov	r0, r4
 801f590:	f7ee fa39 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f594:	4603      	mov	r3, r0
 801f596:	461c      	mov	r4, r3
 801f598:	f107 0310 	add.w	r3, r7, #16
 801f59c:	4618      	mov	r0, r3
 801f59e:	f7ee fa26 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f5a2:	2c00      	cmp	r4, #0
 801f5a4:	d03b      	beq.n	801f61e <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801f5a6:	683b      	ldr	r3, [r7, #0]
 801f5a8:	699a      	ldr	r2, [r3, #24]
 801f5aa:	f107 0320 	add.w	r3, r7, #32
 801f5ae:	4611      	mov	r1, r2
 801f5b0:	4618      	mov	r0, r3
 801f5b2:	f7ee fce3 	bl	800df7c <_Z10StringFromi>
 801f5b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f5ba:	49b8      	ldr	r1, [pc, #736]	; (801f89c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801f5bc:	4618      	mov	r0, r3
 801f5be:	f7ed fe5e 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f5c2:	f107 0318 	add.w	r3, r7, #24
 801f5c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801f5ca:	f107 0120 	add.w	r1, r7, #32
 801f5ce:	4618      	mov	r0, r3
 801f5d0:	f7ee fa6f 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 801f5d4:	683b      	ldr	r3, [r7, #0]
 801f5d6:	699a      	ldr	r2, [r3, #24]
 801f5d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f5dc:	4611      	mov	r1, r2
 801f5de:	4618      	mov	r0, r3
 801f5e0:	f7ee fdbc 	bl	800e15c <_Z30BracketsFormattedHexStringFromi>
 801f5e4:	687b      	ldr	r3, [r7, #4]
 801f5e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801f5ea:	f107 0118 	add.w	r1, r7, #24
 801f5ee:	4618      	mov	r0, r3
 801f5f0:	f7ee fa5f 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 801f5f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f5f8:	4618      	mov	r0, r3
 801f5fa:	f7ee f9f8 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f5fe:	f107 0318 	add.w	r3, r7, #24
 801f602:	4618      	mov	r0, r3
 801f604:	f7ee f9f3 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f608:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f60c:	4618      	mov	r0, r3
 801f60e:	f7ee f9ee 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f612:	f107 0320 	add.w	r3, r7, #32
 801f616:	4618      	mov	r0, r3
 801f618:	f7ee f9e9 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f61c:	e1eb      	b.n	801f9f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801f61e:	683b      	ldr	r3, [r7, #0]
 801f620:	f103 040c 	add.w	r4, r3, #12
 801f624:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f628:	499d      	ldr	r1, [pc, #628]	; (801f8a0 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801f62a:	4618      	mov	r0, r3
 801f62c:	f7ed fe27 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f630:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f634:	4619      	mov	r1, r3
 801f636:	4620      	mov	r0, r4
 801f638:	f7ee f9e5 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f63c:	4603      	mov	r3, r0
 801f63e:	461c      	mov	r4, r3
 801f640:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f644:	4618      	mov	r0, r3
 801f646:	f7ee f9d2 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f64a:	2c00      	cmp	r4, #0
 801f64c:	d03b      	beq.n	801f6c6 <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801f64e:	683b      	ldr	r3, [r7, #0]
 801f650:	699a      	ldr	r2, [r3, #24]
 801f652:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f656:	4611      	mov	r1, r2
 801f658:	4618      	mov	r0, r3
 801f65a:	f7ee fef7 	bl	800e44c <_Z10StringFromj>
 801f65e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f662:	498e      	ldr	r1, [pc, #568]	; (801f89c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801f664:	4618      	mov	r0, r3
 801f666:	f7ed fe0a 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f66a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f66e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801f672:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801f676:	4618      	mov	r0, r3
 801f678:	f7ee fa1b 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 801f67c:	683b      	ldr	r3, [r7, #0]
 801f67e:	699a      	ldr	r2, [r3, #24]
 801f680:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f684:	4611      	mov	r1, r2
 801f686:	4618      	mov	r0, r3
 801f688:	f7ee fd84 	bl	800e194 <_Z30BracketsFormattedHexStringFromj>
 801f68c:	687b      	ldr	r3, [r7, #4]
 801f68e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801f692:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801f696:	4618      	mov	r0, r3
 801f698:	f7ee fa0b 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 801f69c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f6a0:	4618      	mov	r0, r3
 801f6a2:	f7ee f9a4 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f6a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f6aa:	4618      	mov	r0, r3
 801f6ac:	f7ee f99f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f6b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f6b4:	4618      	mov	r0, r3
 801f6b6:	f7ee f99a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f6ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f6be:	4618      	mov	r0, r3
 801f6c0:	f7ee f995 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f6c4:	e197      	b.n	801f9f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801f6c6:	683b      	ldr	r3, [r7, #0]
 801f6c8:	f103 040c 	add.w	r4, r3, #12
 801f6cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f6d0:	4974      	ldr	r1, [pc, #464]	; (801f8a4 <_ZNK14MockNamedValue8toStringEv+0x378>)
 801f6d2:	4618      	mov	r0, r3
 801f6d4:	f7ed fdd3 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f6d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f6dc:	4619      	mov	r1, r3
 801f6de:	4620      	mov	r0, r4
 801f6e0:	f7ee f991 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f6e4:	4603      	mov	r3, r0
 801f6e6:	461c      	mov	r4, r3
 801f6e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f6ec:	4618      	mov	r0, r3
 801f6ee:	f7ee f97e 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f6f2:	2c00      	cmp	r4, #0
 801f6f4:	d03b      	beq.n	801f76e <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801f6f6:	683b      	ldr	r3, [r7, #0]
 801f6f8:	699a      	ldr	r2, [r3, #24]
 801f6fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f6fe:	4611      	mov	r1, r2
 801f700:	4618      	mov	r0, r3
 801f702:	f7ee fc4d 	bl	800dfa0 <_Z10StringFroml>
 801f706:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801f70a:	4964      	ldr	r1, [pc, #400]	; (801f89c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801f70c:	4618      	mov	r0, r3
 801f70e:	f7ed fdb6 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f712:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f716:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801f71a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801f71e:	4618      	mov	r0, r3
 801f720:	f7ee f9c7 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 801f724:	683b      	ldr	r3, [r7, #0]
 801f726:	699a      	ldr	r2, [r3, #24]
 801f728:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801f72c:	4611      	mov	r1, r2
 801f72e:	4618      	mov	r0, r3
 801f730:	f7ee fd4c 	bl	800e1cc <_Z30BracketsFormattedHexStringFroml>
 801f734:	687b      	ldr	r3, [r7, #4]
 801f736:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801f73a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801f73e:	4618      	mov	r0, r3
 801f740:	f7ee f9b7 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 801f744:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801f748:	4618      	mov	r0, r3
 801f74a:	f7ee f950 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f74e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f752:	4618      	mov	r0, r3
 801f754:	f7ee f94b 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f758:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801f75c:	4618      	mov	r0, r3
 801f75e:	f7ee f946 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f762:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f766:	4618      	mov	r0, r3
 801f768:	f7ee f941 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f76c:	e143      	b.n	801f9f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801f76e:	683b      	ldr	r3, [r7, #0]
 801f770:	f103 040c 	add.w	r4, r3, #12
 801f774:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f778:	494b      	ldr	r1, [pc, #300]	; (801f8a8 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801f77a:	4618      	mov	r0, r3
 801f77c:	f7ed fd7f 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f780:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f784:	4619      	mov	r1, r3
 801f786:	4620      	mov	r0, r4
 801f788:	f7ee f93d 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f78c:	4603      	mov	r3, r0
 801f78e:	461c      	mov	r4, r3
 801f790:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f794:	4618      	mov	r0, r3
 801f796:	f7ee f92a 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f79a:	2c00      	cmp	r4, #0
 801f79c:	d03b      	beq.n	801f816 <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801f79e:	683b      	ldr	r3, [r7, #0]
 801f7a0:	699a      	ldr	r2, [r3, #24]
 801f7a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801f7a6:	4611      	mov	r1, r2
 801f7a8:	4618      	mov	r0, r3
 801f7aa:	f7ee fe61 	bl	800e470 <_Z10StringFromm>
 801f7ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801f7b2:	493a      	ldr	r1, [pc, #232]	; (801f89c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801f7b4:	4618      	mov	r0, r3
 801f7b6:	f7ed fd62 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f7ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801f7be:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801f7c2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801f7c6:	4618      	mov	r0, r3
 801f7c8:	f7ee f973 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 801f7cc:	683b      	ldr	r3, [r7, #0]
 801f7ce:	699a      	ldr	r2, [r3, #24]
 801f7d0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801f7d4:	4611      	mov	r1, r2
 801f7d6:	4618      	mov	r0, r3
 801f7d8:	f7ee fd14 	bl	800e204 <_Z30BracketsFormattedHexStringFromm>
 801f7dc:	687b      	ldr	r3, [r7, #4]
 801f7de:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801f7e2:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801f7e6:	4618      	mov	r0, r3
 801f7e8:	f7ee f963 	bl	800dab2 <_ZNK12SimpleStringplERKS_>
 801f7ec:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801f7f0:	4618      	mov	r0, r3
 801f7f2:	f7ee f8fc 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f7f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801f7fa:	4618      	mov	r0, r3
 801f7fc:	f7ee f8f7 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f800:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801f804:	4618      	mov	r0, r3
 801f806:	f7ee f8f2 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f80a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801f80e:	4618      	mov	r0, r3
 801f810:	f7ee f8ed 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f814:	e0ef      	b.n	801f9f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801f816:	683b      	ldr	r3, [r7, #0]
 801f818:	f103 040c 	add.w	r4, r3, #12
 801f81c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801f820:	4922      	ldr	r1, [pc, #136]	; (801f8ac <_ZNK14MockNamedValue8toStringEv+0x380>)
 801f822:	4618      	mov	r0, r3
 801f824:	f7ed fd2b 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f828:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801f82c:	4619      	mov	r1, r3
 801f82e:	4620      	mov	r0, r4
 801f830:	f7ee f8e9 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f834:	4603      	mov	r3, r0
 801f836:	461c      	mov	r4, r3
 801f838:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801f83c:	4618      	mov	r0, r3
 801f83e:	f7ee f8d6 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f842:	2c00      	cmp	r4, #0
 801f844:	d006      	beq.n	801f854 <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801f846:	683b      	ldr	r3, [r7, #0]
 801f848:	699b      	ldr	r3, [r3, #24]
 801f84a:	4619      	mov	r1, r3
 801f84c:	6878      	ldr	r0, [r7, #4]
 801f84e:	f7ed fd16 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f852:	e0d0      	b.n	801f9f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801f854:	683b      	ldr	r3, [r7, #0]
 801f856:	f103 040c 	add.w	r4, r3, #12
 801f85a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801f85e:	4914      	ldr	r1, [pc, #80]	; (801f8b0 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801f860:	4618      	mov	r0, r3
 801f862:	f7ed fd0c 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f866:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801f86a:	4619      	mov	r1, r3
 801f86c:	4620      	mov	r0, r4
 801f86e:	f7ee f8ca 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f872:	4603      	mov	r3, r0
 801f874:	461c      	mov	r4, r3
 801f876:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801f87a:	4618      	mov	r0, r3
 801f87c:	f7ee f8b7 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f880:	2c00      	cmp	r4, #0
 801f882:	d017      	beq.n	801f8b4 <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801f884:	683b      	ldr	r3, [r7, #0]
 801f886:	699a      	ldr	r2, [r3, #24]
 801f888:	687b      	ldr	r3, [r7, #4]
 801f88a:	4611      	mov	r1, r2
 801f88c:	4618      	mov	r0, r3
 801f88e:	f7ee fb99 	bl	800dfc4 <_Z10StringFromPKv>
 801f892:	e0b0      	b.n	801f9f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801f894:	08026e90 	.word	0x08026e90
 801f898:	08026e8c 	.word	0x08026e8c
 801f89c:	08026f7c 	.word	0x08026f7c
 801f8a0:	08026e98 	.word	0x08026e98
 801f8a4:	08026ea8 	.word	0x08026ea8
 801f8a8:	08026eb4 	.word	0x08026eb4
 801f8ac:	08026f58 	.word	0x08026f58
 801f8b0:	08026f38 	.word	0x08026f38
    else if (type_ == "void (*)()")
 801f8b4:	683b      	ldr	r3, [r7, #0]
 801f8b6:	f103 040c 	add.w	r4, r3, #12
 801f8ba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f8be:	4950      	ldr	r1, [pc, #320]	; (801fa00 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801f8c0:	4618      	mov	r0, r3
 801f8c2:	f7ed fcdc 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f8c6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f8ca:	4619      	mov	r1, r3
 801f8cc:	4620      	mov	r0, r4
 801f8ce:	f7ee f89a 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f8d2:	4603      	mov	r3, r0
 801f8d4:	461c      	mov	r4, r3
 801f8d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f8da:	4618      	mov	r0, r3
 801f8dc:	f7ee f887 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f8e0:	2c00      	cmp	r4, #0
 801f8e2:	d007      	beq.n	801f8f4 <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801f8e4:	683b      	ldr	r3, [r7, #0]
 801f8e6:	699a      	ldr	r2, [r3, #24]
 801f8e8:	687b      	ldr	r3, [r7, #4]
 801f8ea:	4611      	mov	r1, r2
 801f8ec:	4618      	mov	r0, r3
 801f8ee:	f7ee fb93 	bl	800e018 <_Z10StringFromPFvvE>
 801f8f2:	e080      	b.n	801f9f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801f8f4:	683b      	ldr	r3, [r7, #0]
 801f8f6:	f103 040c 	add.w	r4, r3, #12
 801f8fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f8fe:	4941      	ldr	r1, [pc, #260]	; (801fa04 <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801f900:	4618      	mov	r0, r3
 801f902:	f7ed fcbc 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f906:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f90a:	4619      	mov	r1, r3
 801f90c:	4620      	mov	r0, r4
 801f90e:	f7ee f87a 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f912:	4603      	mov	r3, r0
 801f914:	461c      	mov	r4, r3
 801f916:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f91a:	4618      	mov	r0, r3
 801f91c:	f7ee f867 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f920:	2c00      	cmp	r4, #0
 801f922:	d007      	beq.n	801f934 <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801f924:	683b      	ldr	r3, [r7, #0]
 801f926:	699a      	ldr	r2, [r3, #24]
 801f928:	687b      	ldr	r3, [r7, #4]
 801f92a:	4611      	mov	r1, r2
 801f92c:	4618      	mov	r0, r3
 801f92e:	f7ee fb49 	bl	800dfc4 <_Z10StringFromPKv>
 801f932:	e060      	b.n	801f9f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801f934:	683b      	ldr	r3, [r7, #0]
 801f936:	f103 040c 	add.w	r4, r3, #12
 801f93a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f93e:	4932      	ldr	r1, [pc, #200]	; (801fa08 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801f940:	4618      	mov	r0, r3
 801f942:	f7ed fc9c 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f946:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f94a:	4619      	mov	r1, r3
 801f94c:	4620      	mov	r0, r4
 801f94e:	f7ee f85a 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f952:	4603      	mov	r3, r0
 801f954:	461c      	mov	r4, r3
 801f956:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f95a:	4618      	mov	r0, r3
 801f95c:	f7ee f847 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f960:	2c00      	cmp	r4, #0
 801f962:	d00c      	beq.n	801f97e <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801f964:	683b      	ldr	r3, [r7, #0]
 801f966:	ed93 7b06 	vldr	d7, [r3, #24]
 801f96a:	687b      	ldr	r3, [r7, #4]
 801f96c:	2106      	movs	r1, #6
 801f96e:	eeb0 0a47 	vmov.f32	s0, s14
 801f972:	eef0 0a67 	vmov.f32	s1, s15
 801f976:	4618      	mov	r0, r3
 801f978:	f7ee fcfe 	bl	800e378 <_Z10StringFromdi>
 801f97c:	e03b      	b.n	801f9f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801f97e:	683b      	ldr	r3, [r7, #0]
 801f980:	f103 040c 	add.w	r4, r3, #12
 801f984:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f988:	4920      	ldr	r1, [pc, #128]	; (801fa0c <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801f98a:	4618      	mov	r0, r3
 801f98c:	f7ed fc77 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801f990:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f994:	4619      	mov	r1, r3
 801f996:	4620      	mov	r0, r4
 801f998:	f7ee f835 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801f99c:	4603      	mov	r3, r0
 801f99e:	461c      	mov	r4, r3
 801f9a0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f9a4:	4618      	mov	r0, r3
 801f9a6:	f7ee f822 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801f9aa:	2c00      	cmp	r4, #0
 801f9ac:	d008      	beq.n	801f9c0 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801f9ae:	683b      	ldr	r3, [r7, #0]
 801f9b0:	6999      	ldr	r1, [r3, #24]
 801f9b2:	683b      	ldr	r3, [r7, #0]
 801f9b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801f9b6:	687b      	ldr	r3, [r7, #4]
 801f9b8:	4618      	mov	r0, r3
 801f9ba:	f7ee fe71 	bl	800e6a0 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801f9be:	e01a      	b.n	801f9f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801f9c0:	683b      	ldr	r3, [r7, #0]
 801f9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f9c4:	2b00      	cmp	r3, #0
 801f9c6:	d00b      	beq.n	801f9e0 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801f9c8:	683b      	ldr	r3, [r7, #0]
 801f9ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801f9cc:	683b      	ldr	r3, [r7, #0]
 801f9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f9d0:	681b      	ldr	r3, [r3, #0]
 801f9d2:	330c      	adds	r3, #12
 801f9d4:	681b      	ldr	r3, [r3, #0]
 801f9d6:	683a      	ldr	r2, [r7, #0]
 801f9d8:	6992      	ldr	r2, [r2, #24]
 801f9da:	6878      	ldr	r0, [r7, #4]
 801f9dc:	4798      	blx	r3
 801f9de:	e00a      	b.n	801f9f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801f9e0:	683b      	ldr	r3, [r7, #0]
 801f9e2:	330c      	adds	r3, #12
 801f9e4:	4618      	mov	r0, r3
 801f9e6:	f7ed ffd5 	bl	800d994 <_ZNK12SimpleString12asCharStringEv>
 801f9ea:	4602      	mov	r2, r0
 801f9ec:	687b      	ldr	r3, [r7, #4]
 801f9ee:	4908      	ldr	r1, [pc, #32]	; (801fa10 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801f9f0:	4618      	mov	r0, r3
 801f9f2:	f7ee fd03 	bl	800e3fc <_Z16StringFromFormatPKcz>

}
 801f9f6:	6878      	ldr	r0, [r7, #4]
 801f9f8:	37e4      	adds	r7, #228	; 0xe4
 801f9fa:	46bd      	mov	sp, r7
 801f9fc:	bd90      	pop	{r4, r7, pc}
 801f9fe:	bf00      	nop
 801fa00:	08026f4c 	.word	0x08026f4c
 801fa04:	08026f40 	.word	0x08026f40
 801fa08:	08026f30 	.word	0x08026f30
 801fa0c:	08026f64 	.word	0x08026f64
 801fa10:	08026f80 	.word	0x08026f80

0801fa14 <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801fa14:	b480      	push	{r7}
 801fa16:	b083      	sub	sp, #12
 801fa18:	af00      	add	r7, sp, #0
 801fa1a:	6078      	str	r0, [r7, #4]
 801fa1c:	6039      	str	r1, [r7, #0]
    next_ = node;
 801fa1e:	687b      	ldr	r3, [r7, #4]
 801fa20:	683a      	ldr	r2, [r7, #0]
 801fa22:	605a      	str	r2, [r3, #4]
}
 801fa24:	bf00      	nop
 801fa26:	370c      	adds	r7, #12
 801fa28:	46bd      	mov	sp, r7
 801fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa2e:	4770      	bx	lr

0801fa30 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801fa30:	b480      	push	{r7}
 801fa32:	b083      	sub	sp, #12
 801fa34:	af00      	add	r7, sp, #0
 801fa36:	6078      	str	r0, [r7, #4]
    return next_;
 801fa38:	687b      	ldr	r3, [r7, #4]
 801fa3a:	685b      	ldr	r3, [r3, #4]
}
 801fa3c:	4618      	mov	r0, r3
 801fa3e:	370c      	adds	r7, #12
 801fa40:	46bd      	mov	sp, r7
 801fa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa46:	4770      	bx	lr

0801fa48 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801fa48:	b480      	push	{r7}
 801fa4a:	b083      	sub	sp, #12
 801fa4c:	af00      	add	r7, sp, #0
 801fa4e:	6078      	str	r0, [r7, #4]
    return data_;
 801fa50:	687b      	ldr	r3, [r7, #4]
 801fa52:	681b      	ldr	r3, [r3, #0]
}
 801fa54:	4618      	mov	r0, r3
 801fa56:	370c      	adds	r7, #12
 801fa58:	46bd      	mov	sp, r7
 801fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa5e:	4770      	bx	lr

0801fa60 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801fa60:	b580      	push	{r7, lr}
 801fa62:	b082      	sub	sp, #8
 801fa64:	af00      	add	r7, sp, #0
 801fa66:	6078      	str	r0, [r7, #4]
    delete data_;
 801fa68:	687b      	ldr	r3, [r7, #4]
 801fa6a:	681b      	ldr	r3, [r3, #0]
 801fa6c:	2b00      	cmp	r3, #0
 801fa6e:	d004      	beq.n	801fa7a <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801fa70:	681a      	ldr	r2, [r3, #0]
 801fa72:	3204      	adds	r2, #4
 801fa74:	6812      	ldr	r2, [r2, #0]
 801fa76:	4618      	mov	r0, r3
 801fa78:	4790      	blx	r2
}
 801fa7a:	bf00      	nop
 801fa7c:	3708      	adds	r7, #8
 801fa7e:	46bd      	mov	sp, r7
 801fa80:	bd80      	pop	{r7, pc}

0801fa82 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801fa82:	b480      	push	{r7}
 801fa84:	b083      	sub	sp, #12
 801fa86:	af00      	add	r7, sp, #0
 801fa88:	6078      	str	r0, [r7, #4]
 801fa8a:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801fa8c:	687b      	ldr	r3, [r7, #4]
 801fa8e:	683a      	ldr	r2, [r7, #0]
 801fa90:	601a      	str	r2, [r3, #0]
 801fa92:	687b      	ldr	r3, [r7, #4]
 801fa94:	2200      	movs	r2, #0
 801fa96:	605a      	str	r2, [r3, #4]
{
}
 801fa98:	687b      	ldr	r3, [r7, #4]
 801fa9a:	4618      	mov	r0, r3
 801fa9c:	370c      	adds	r7, #12
 801fa9e:	46bd      	mov	sp, r7
 801faa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801faa4:	4770      	bx	lr

0801faa6 <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801faa6:	b580      	push	{r7, lr}
 801faa8:	b082      	sub	sp, #8
 801faaa:	af00      	add	r7, sp, #0
 801faac:	6078      	str	r0, [r7, #4]
 801faae:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801fab0:	683b      	ldr	r3, [r7, #0]
 801fab2:	6819      	ldr	r1, [r3, #0]
 801fab4:	683b      	ldr	r3, [r7, #0]
 801fab6:	681b      	ldr	r3, [r3, #0]
 801fab8:	681b      	ldr	r3, [r3, #0]
 801faba:	335c      	adds	r3, #92	; 0x5c
 801fabc:	681b      	ldr	r3, [r3, #0]
 801fabe:	687a      	ldr	r2, [r7, #4]
 801fac0:	4610      	mov	r0, r2
 801fac2:	4798      	blx	r3
}
 801fac4:	6878      	ldr	r0, [r7, #4]
 801fac6:	3708      	adds	r7, #8
 801fac8:	46bd      	mov	sp, r7
 801faca:	bd80      	pop	{r7, pc}

0801facc <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801facc:	b580      	push	{r7, lr}
 801face:	b082      	sub	sp, #8
 801fad0:	af00      	add	r7, sp, #0
 801fad2:	6078      	str	r0, [r7, #4]
 801fad4:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801fad6:	683b      	ldr	r3, [r7, #0]
 801fad8:	6819      	ldr	r1, [r3, #0]
 801fada:	683b      	ldr	r3, [r7, #0]
 801fadc:	681b      	ldr	r3, [r3, #0]
 801fade:	681b      	ldr	r3, [r3, #0]
 801fae0:	3360      	adds	r3, #96	; 0x60
 801fae2:	681b      	ldr	r3, [r3, #0]
 801fae4:	687a      	ldr	r2, [r7, #4]
 801fae6:	4610      	mov	r0, r2
 801fae8:	4798      	blx	r3
}
 801faea:	6878      	ldr	r0, [r7, #4]
 801faec:	3708      	adds	r7, #8
 801faee:	46bd      	mov	sp, r7
 801faf0:	bd80      	pop	{r7, pc}

0801faf2 <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801faf2:	b480      	push	{r7}
 801faf4:	b083      	sub	sp, #12
 801faf6:	af00      	add	r7, sp, #0
 801faf8:	6078      	str	r0, [r7, #4]
 801fafa:	687b      	ldr	r3, [r7, #4]
 801fafc:	2200      	movs	r2, #0
 801fafe:	601a      	str	r2, [r3, #0]
{
}
 801fb00:	687b      	ldr	r3, [r7, #4]
 801fb02:	4618      	mov	r0, r3
 801fb04:	370c      	adds	r7, #12
 801fb06:	46bd      	mov	sp, r7
 801fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb0c:	4770      	bx	lr

0801fb0e <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801fb0e:	b580      	push	{r7, lr}
 801fb10:	b084      	sub	sp, #16
 801fb12:	af00      	add	r7, sp, #0
 801fb14:	6078      	str	r0, [r7, #4]
    while (head_) {
 801fb16:	687b      	ldr	r3, [r7, #4]
 801fb18:	681b      	ldr	r3, [r3, #0]
 801fb1a:	2b00      	cmp	r3, #0
 801fb1c:	d016      	beq.n	801fb4c <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801fb1e:	687b      	ldr	r3, [r7, #4]
 801fb20:	681b      	ldr	r3, [r3, #0]
 801fb22:	4618      	mov	r0, r3
 801fb24:	f7ff ff84 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 801fb28:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801fb2a:	687b      	ldr	r3, [r7, #4]
 801fb2c:	681b      	ldr	r3, [r3, #0]
 801fb2e:	4618      	mov	r0, r3
 801fb30:	f7ff ff96 	bl	801fa60 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801fb34:	687b      	ldr	r3, [r7, #4]
 801fb36:	681b      	ldr	r3, [r3, #0]
 801fb38:	2b00      	cmp	r3, #0
 801fb3a:	d003      	beq.n	801fb44 <_ZN18MockNamedValueList5clearEv+0x36>
 801fb3c:	2108      	movs	r1, #8
 801fb3e:	4618      	mov	r0, r3
 801fb40:	f7ea ffee 	bl	800ab20 <_ZdlPvj>
        head_ = n;
 801fb44:	687b      	ldr	r3, [r7, #4]
 801fb46:	68fa      	ldr	r2, [r7, #12]
 801fb48:	601a      	str	r2, [r3, #0]
    while (head_) {
 801fb4a:	e7e4      	b.n	801fb16 <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801fb4c:	bf00      	nop
 801fb4e:	3710      	adds	r7, #16
 801fb50:	46bd      	mov	sp, r7
 801fb52:	bd80      	pop	{r7, pc}

0801fb54 <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801fb54:	b590      	push	{r4, r7, lr}
 801fb56:	b085      	sub	sp, #20
 801fb58:	af00      	add	r7, sp, #0
 801fb5a:	6078      	str	r0, [r7, #4]
 801fb5c:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801fb5e:	f44f 7210 	mov.w	r2, #576	; 0x240
 801fb62:	4916      	ldr	r1, [pc, #88]	; (801fbbc <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801fb64:	2008      	movs	r0, #8
 801fb66:	f7ea ffc7 	bl	800aaf8 <_ZnwjPKci>
 801fb6a:	4604      	mov	r4, r0
 801fb6c:	6839      	ldr	r1, [r7, #0]
 801fb6e:	4620      	mov	r0, r4
 801fb70:	f7ff ff87 	bl	801fa82 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801fb74:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801fb76:	687b      	ldr	r3, [r7, #4]
 801fb78:	681b      	ldr	r3, [r3, #0]
 801fb7a:	2b00      	cmp	r3, #0
 801fb7c:	d103      	bne.n	801fb86 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801fb7e:	687b      	ldr	r3, [r7, #4]
 801fb80:	68ba      	ldr	r2, [r7, #8]
 801fb82:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801fb84:	e016      	b.n	801fbb4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801fb86:	687b      	ldr	r3, [r7, #4]
 801fb88:	681b      	ldr	r3, [r3, #0]
 801fb8a:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801fb8c:	68f8      	ldr	r0, [r7, #12]
 801fb8e:	f7ff ff4f 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 801fb92:	4603      	mov	r3, r0
 801fb94:	2b00      	cmp	r3, #0
 801fb96:	bf14      	ite	ne
 801fb98:	2301      	movne	r3, #1
 801fb9a:	2300      	moveq	r3, #0
 801fb9c:	b2db      	uxtb	r3, r3
 801fb9e:	2b00      	cmp	r3, #0
 801fba0:	d004      	beq.n	801fbac <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801fba2:	68f8      	ldr	r0, [r7, #12]
 801fba4:	f7ff ff44 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 801fba8:	60f8      	str	r0, [r7, #12]
 801fbaa:	e7ef      	b.n	801fb8c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801fbac:	68b9      	ldr	r1, [r7, #8]
 801fbae:	68f8      	ldr	r0, [r7, #12]
 801fbb0:	f7ff ff30 	bl	801fa14 <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801fbb4:	bf00      	nop
 801fbb6:	3714      	adds	r7, #20
 801fbb8:	46bd      	mov	sp, r7
 801fbba:	bd90      	pop	{r4, r7, pc}
 801fbbc:	08026ec8 	.word	0x08026ec8

0801fbc0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801fbc0:	b590      	push	{r4, r7, lr}
 801fbc2:	b087      	sub	sp, #28
 801fbc4:	af00      	add	r7, sp, #0
 801fbc6:	6078      	str	r0, [r7, #4]
 801fbc8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801fbca:	687b      	ldr	r3, [r7, #4]
 801fbcc:	681b      	ldr	r3, [r3, #0]
 801fbce:	617b      	str	r3, [r7, #20]
 801fbd0:	697b      	ldr	r3, [r7, #20]
 801fbd2:	2b00      	cmp	r3, #0
 801fbd4:	d01e      	beq.n	801fc14 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801fbd6:	f107 030c 	add.w	r3, r7, #12
 801fbda:	6979      	ldr	r1, [r7, #20]
 801fbdc:	4618      	mov	r0, r3
 801fbde:	f7ff ff62 	bl	801faa6 <_ZNK22MockNamedValueListNode7getNameEv>
 801fbe2:	f107 030c 	add.w	r3, r7, #12
 801fbe6:	6839      	ldr	r1, [r7, #0]
 801fbe8:	4618      	mov	r0, r3
 801fbea:	f7ed ff0c 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801fbee:	4603      	mov	r3, r0
 801fbf0:	461c      	mov	r4, r3
 801fbf2:	f107 030c 	add.w	r3, r7, #12
 801fbf6:	4618      	mov	r0, r3
 801fbf8:	f7ed fef9 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801fbfc:	2c00      	cmp	r4, #0
 801fbfe:	d004      	beq.n	801fc0a <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801fc00:	6978      	ldr	r0, [r7, #20]
 801fc02:	f7ff ff21 	bl	801fa48 <_ZN22MockNamedValueListNode4itemEv>
 801fc06:	4603      	mov	r3, r0
 801fc08:	e005      	b.n	801fc16 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801fc0a:	6978      	ldr	r0, [r7, #20]
 801fc0c:	f7ff ff10 	bl	801fa30 <_ZN22MockNamedValueListNode4nextEv>
 801fc10:	6178      	str	r0, [r7, #20]
 801fc12:	e7dd      	b.n	801fbd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 801fc14:	2300      	movs	r3, #0
}
 801fc16:	4618      	mov	r0, r3
 801fc18:	371c      	adds	r7, #28
 801fc1a:	46bd      	mov	sp, r7
 801fc1c:	bd90      	pop	{r4, r7, pc}

0801fc1e <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 801fc1e:	b480      	push	{r7}
 801fc20:	b083      	sub	sp, #12
 801fc22:	af00      	add	r7, sp, #0
 801fc24:	6078      	str	r0, [r7, #4]
    return head_;
 801fc26:	687b      	ldr	r3, [r7, #4]
 801fc28:	681b      	ldr	r3, [r3, #0]
}
 801fc2a:	4618      	mov	r0, r3
 801fc2c:	370c      	adds	r7, #12
 801fc2e:	46bd      	mov	sp, r7
 801fc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc34:	4770      	bx	lr

0801fc36 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801fc36:	b580      	push	{r7, lr}
 801fc38:	b084      	sub	sp, #16
 801fc3a:	af00      	add	r7, sp, #0
 801fc3c:	60f8      	str	r0, [r7, #12]
 801fc3e:	60b9      	str	r1, [r7, #8]
 801fc40:	607a      	str	r2, [r7, #4]
 801fc42:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 801fc44:	68fb      	ldr	r3, [r7, #12]
 801fc46:	68b9      	ldr	r1, [r7, #8]
 801fc48:	4618      	mov	r0, r3
 801fc4a:	f7ed fb6c 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
 801fc4e:	68fb      	ldr	r3, [r7, #12]
 801fc50:	687a      	ldr	r2, [r7, #4]
 801fc52:	609a      	str	r2, [r3, #8]
 801fc54:	68fb      	ldr	r3, [r7, #12]
 801fc56:	2200      	movs	r2, #0
 801fc58:	60da      	str	r2, [r3, #12]
 801fc5a:	68fb      	ldr	r3, [r7, #12]
 801fc5c:	683a      	ldr	r2, [r7, #0]
 801fc5e:	611a      	str	r2, [r3, #16]
 801fc60:	68fb      	ldr	r3, [r7, #12]
 801fc62:	4618      	mov	r0, r3
 801fc64:	3710      	adds	r7, #16
 801fc66:	46bd      	mov	sp, r7
 801fc68:	bd80      	pop	{r7, pc}

0801fc6a <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801fc6a:	b580      	push	{r7, lr}
 801fc6c:	b084      	sub	sp, #16
 801fc6e:	af00      	add	r7, sp, #0
 801fc70:	60f8      	str	r0, [r7, #12]
 801fc72:	60b9      	str	r1, [r7, #8]
 801fc74:	607a      	str	r2, [r7, #4]
 801fc76:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 801fc78:	68fb      	ldr	r3, [r7, #12]
 801fc7a:	68b9      	ldr	r1, [r7, #8]
 801fc7c:	4618      	mov	r0, r3
 801fc7e:	f7ed fb52 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
 801fc82:	68fb      	ldr	r3, [r7, #12]
 801fc84:	2200      	movs	r2, #0
 801fc86:	609a      	str	r2, [r3, #8]
 801fc88:	68fb      	ldr	r3, [r7, #12]
 801fc8a:	687a      	ldr	r2, [r7, #4]
 801fc8c:	60da      	str	r2, [r3, #12]
 801fc8e:	68fb      	ldr	r3, [r7, #12]
 801fc90:	683a      	ldr	r2, [r7, #0]
 801fc92:	611a      	str	r2, [r3, #16]
 801fc94:	68fb      	ldr	r3, [r7, #12]
 801fc96:	4618      	mov	r0, r3
 801fc98:	3710      	adds	r7, #16
 801fc9a:	46bd      	mov	sp, r7
 801fc9c:	bd80      	pop	{r7, pc}

0801fc9e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801fc9e:	b580      	push	{r7, lr}
 801fca0:	b084      	sub	sp, #16
 801fca2:	af00      	add	r7, sp, #0
 801fca4:	60f8      	str	r0, [r7, #12]
 801fca6:	60b9      	str	r1, [r7, #8]
 801fca8:	607a      	str	r2, [r7, #4]
 801fcaa:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 801fcac:	68fb      	ldr	r3, [r7, #12]
 801fcae:	68b9      	ldr	r1, [r7, #8]
 801fcb0:	4618      	mov	r0, r3
 801fcb2:	f7ed fb38 	bl	800d326 <_ZN12SimpleStringC1ERKS_>
 801fcb6:	68fb      	ldr	r3, [r7, #12]
 801fcb8:	687a      	ldr	r2, [r7, #4]
 801fcba:	609a      	str	r2, [r3, #8]
 801fcbc:	68fb      	ldr	r3, [r7, #12]
 801fcbe:	683a      	ldr	r2, [r7, #0]
 801fcc0:	60da      	str	r2, [r3, #12]
 801fcc2:	68fb      	ldr	r3, [r7, #12]
 801fcc4:	69ba      	ldr	r2, [r7, #24]
 801fcc6:	611a      	str	r2, [r3, #16]
 801fcc8:	68fb      	ldr	r3, [r7, #12]
 801fcca:	4618      	mov	r0, r3
 801fccc:	3710      	adds	r7, #16
 801fcce:	46bd      	mov	sp, r7
 801fcd0:	bd80      	pop	{r7, pc}
	...

0801fcd4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 801fcd4:	b480      	push	{r7}
 801fcd6:	b083      	sub	sp, #12
 801fcd8:	af00      	add	r7, sp, #0
 801fcda:	6078      	str	r0, [r7, #4]
 801fcdc:	4a06      	ldr	r2, [pc, #24]	; (801fcf8 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 801fcde:	687b      	ldr	r3, [r7, #4]
 801fce0:	601a      	str	r2, [r3, #0]
 801fce2:	687b      	ldr	r3, [r7, #4]
 801fce4:	2200      	movs	r2, #0
 801fce6:	605a      	str	r2, [r3, #4]
{

}
 801fce8:	687b      	ldr	r3, [r7, #4]
 801fcea:	4618      	mov	r0, r3
 801fcec:	370c      	adds	r7, #12
 801fcee:	46bd      	mov	sp, r7
 801fcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcf4:	4770      	bx	lr
 801fcf6:	bf00      	nop
 801fcf8:	08029bc8 	.word	0x08029bc8

0801fcfc <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801fcfc:	b580      	push	{r7, lr}
 801fcfe:	b082      	sub	sp, #8
 801fd00:	af00      	add	r7, sp, #0
 801fd02:	6078      	str	r0, [r7, #4]
 801fd04:	4a05      	ldr	r2, [pc, #20]	; (801fd1c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 801fd06:	687b      	ldr	r3, [r7, #4]
 801fd08:	601a      	str	r2, [r3, #0]
{
    clear();
 801fd0a:	6878      	ldr	r0, [r7, #4]
 801fd0c:	f000 f825 	bl	801fd5a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 801fd10:	687b      	ldr	r3, [r7, #4]
 801fd12:	4618      	mov	r0, r3
 801fd14:	3708      	adds	r7, #8
 801fd16:	46bd      	mov	sp, r7
 801fd18:	bd80      	pop	{r7, pc}
 801fd1a:	bf00      	nop
 801fd1c:	08029bc8 	.word	0x08029bc8

0801fd20 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801fd20:	b580      	push	{r7, lr}
 801fd22:	b082      	sub	sp, #8
 801fd24:	af00      	add	r7, sp, #0
 801fd26:	6078      	str	r0, [r7, #4]
}
 801fd28:	6878      	ldr	r0, [r7, #4]
 801fd2a:	f7ff ffe7 	bl	801fcfc <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 801fd2e:	2108      	movs	r1, #8
 801fd30:	6878      	ldr	r0, [r7, #4]
 801fd32:	f7ea fef5 	bl	800ab20 <_ZdlPvj>
 801fd36:	687b      	ldr	r3, [r7, #4]
 801fd38:	4618      	mov	r0, r3
 801fd3a:	3708      	adds	r7, #8
 801fd3c:	46bd      	mov	sp, r7
 801fd3e:	bd80      	pop	{r7, pc}

0801fd40 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 801fd40:	b580      	push	{r7, lr}
 801fd42:	b082      	sub	sp, #8
 801fd44:	af00      	add	r7, sp, #0
 801fd46:	6078      	str	r0, [r7, #4]
 801fd48:	687b      	ldr	r3, [r7, #4]
 801fd4a:	4618      	mov	r0, r3
 801fd4c:	f7ed fe4f 	bl	800d9ee <_ZN12SimpleStringD1Ev>
 801fd50:	687b      	ldr	r3, [r7, #4]
 801fd52:	4618      	mov	r0, r3
 801fd54:	3708      	adds	r7, #8
 801fd56:	46bd      	mov	sp, r7
 801fd58:	bd80      	pop	{r7, pc}

0801fd5a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 801fd5a:	b590      	push	{r4, r7, lr}
 801fd5c:	b085      	sub	sp, #20
 801fd5e:	af00      	add	r7, sp, #0
 801fd60:	6078      	str	r0, [r7, #4]
    while (head_) {
 801fd62:	687b      	ldr	r3, [r7, #4]
 801fd64:	685b      	ldr	r3, [r3, #4]
 801fd66:	2b00      	cmp	r3, #0
 801fd68:	d012      	beq.n	801fd90 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 801fd6a:	687b      	ldr	r3, [r7, #4]
 801fd6c:	685b      	ldr	r3, [r3, #4]
 801fd6e:	691b      	ldr	r3, [r3, #16]
 801fd70:	60fb      	str	r3, [r7, #12]
        delete head_;
 801fd72:	687b      	ldr	r3, [r7, #4]
 801fd74:	685c      	ldr	r4, [r3, #4]
 801fd76:	2c00      	cmp	r4, #0
 801fd78:	d006      	beq.n	801fd88 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 801fd7a:	4620      	mov	r0, r4
 801fd7c:	f7ff ffe0 	bl	801fd40 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 801fd80:	2114      	movs	r1, #20
 801fd82:	4620      	mov	r0, r4
 801fd84:	f7ea fecc 	bl	800ab20 <_ZdlPvj>
        head_ = next;
 801fd88:	687b      	ldr	r3, [r7, #4]
 801fd8a:	68fa      	ldr	r2, [r7, #12]
 801fd8c:	605a      	str	r2, [r3, #4]
    while (head_) {
 801fd8e:	e7e8      	b.n	801fd62 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 801fd90:	bf00      	nop
 801fd92:	3714      	adds	r7, #20
 801fd94:	46bd      	mov	sp, r7
 801fd96:	bd90      	pop	{r4, r7, pc}

0801fd98 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 801fd98:	b590      	push	{r4, r7, lr}
 801fd9a:	b085      	sub	sp, #20
 801fd9c:	af00      	add	r7, sp, #0
 801fd9e:	60f8      	str	r0, [r7, #12]
 801fda0:	60b9      	str	r1, [r7, #8]
 801fda2:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 801fda4:	f240 227a 	movw	r2, #634	; 0x27a
 801fda8:	4908      	ldr	r1, [pc, #32]	; (801fdcc <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 801fdaa:	2014      	movs	r0, #20
 801fdac:	f7ea fea4 	bl	800aaf8 <_ZnwjPKci>
 801fdb0:	4604      	mov	r4, r0
 801fdb2:	68fb      	ldr	r3, [r7, #12]
 801fdb4:	685b      	ldr	r3, [r3, #4]
 801fdb6:	687a      	ldr	r2, [r7, #4]
 801fdb8:	68b9      	ldr	r1, [r7, #8]
 801fdba:	4620      	mov	r0, r4
 801fdbc:	f7ff ff3b 	bl	801fc36 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 801fdc0:	68fb      	ldr	r3, [r7, #12]
 801fdc2:	605c      	str	r4, [r3, #4]
}
 801fdc4:	bf00      	nop
 801fdc6:	3714      	adds	r7, #20
 801fdc8:	46bd      	mov	sp, r7
 801fdca:	bd90      	pop	{r4, r7, pc}
 801fdcc:	08026ec8 	.word	0x08026ec8

0801fdd0 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 801fdd0:	b590      	push	{r4, r7, lr}
 801fdd2:	b085      	sub	sp, #20
 801fdd4:	af00      	add	r7, sp, #0
 801fdd6:	60f8      	str	r0, [r7, #12]
 801fdd8:	60b9      	str	r1, [r7, #8]
 801fdda:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 801fddc:	f240 227f 	movw	r2, #639	; 0x27f
 801fde0:	4908      	ldr	r1, [pc, #32]	; (801fe04 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 801fde2:	2014      	movs	r0, #20
 801fde4:	f7ea fe88 	bl	800aaf8 <_ZnwjPKci>
 801fde8:	4604      	mov	r4, r0
 801fdea:	68fb      	ldr	r3, [r7, #12]
 801fdec:	685b      	ldr	r3, [r3, #4]
 801fdee:	687a      	ldr	r2, [r7, #4]
 801fdf0:	68b9      	ldr	r1, [r7, #8]
 801fdf2:	4620      	mov	r0, r4
 801fdf4:	f7ff ff39 	bl	801fc6a <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 801fdf8:	68fb      	ldr	r3, [r7, #12]
 801fdfa:	605c      	str	r4, [r3, #4]
}
 801fdfc:	bf00      	nop
 801fdfe:	3714      	adds	r7, #20
 801fe00:	46bd      	mov	sp, r7
 801fe02:	bd90      	pop	{r4, r7, pc}
 801fe04:	08026ec8 	.word	0x08026ec8

0801fe08 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 801fe08:	b580      	push	{r7, lr}
 801fe0a:	b084      	sub	sp, #16
 801fe0c:	af00      	add	r7, sp, #0
 801fe0e:	6078      	str	r0, [r7, #4]
 801fe10:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801fe12:	687b      	ldr	r3, [r7, #4]
 801fe14:	685b      	ldr	r3, [r3, #4]
 801fe16:	60fb      	str	r3, [r7, #12]
 801fe18:	68fb      	ldr	r3, [r7, #12]
 801fe1a:	2b00      	cmp	r3, #0
 801fe1c:	d017      	beq.n	801fe4e <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 801fe1e:	68fb      	ldr	r3, [r7, #12]
 801fe20:	6839      	ldr	r1, [r7, #0]
 801fe22:	4618      	mov	r0, r3
 801fe24:	f7ed fdef 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801fe28:	4603      	mov	r3, r0
 801fe2a:	2b00      	cmp	r3, #0
 801fe2c:	d005      	beq.n	801fe3a <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801fe2e:	68fb      	ldr	r3, [r7, #12]
 801fe30:	689b      	ldr	r3, [r3, #8]
 801fe32:	2b00      	cmp	r3, #0
 801fe34:	d001      	beq.n	801fe3a <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801fe36:	2301      	movs	r3, #1
 801fe38:	e000      	b.n	801fe3c <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 801fe3a:	2300      	movs	r3, #0
 801fe3c:	2b00      	cmp	r3, #0
 801fe3e:	d002      	beq.n	801fe46 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 801fe40:	68fb      	ldr	r3, [r7, #12]
 801fe42:	689b      	ldr	r3, [r3, #8]
 801fe44:	e004      	b.n	801fe50 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801fe46:	68fb      	ldr	r3, [r7, #12]
 801fe48:	691b      	ldr	r3, [r3, #16]
 801fe4a:	60fb      	str	r3, [r7, #12]
 801fe4c:	e7e4      	b.n	801fe18 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801fe4e:	2300      	movs	r3, #0
}
 801fe50:	4618      	mov	r0, r3
 801fe52:	3710      	adds	r7, #16
 801fe54:	46bd      	mov	sp, r7
 801fe56:	bd80      	pop	{r7, pc}

0801fe58 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 801fe58:	b580      	push	{r7, lr}
 801fe5a:	b084      	sub	sp, #16
 801fe5c:	af00      	add	r7, sp, #0
 801fe5e:	6078      	str	r0, [r7, #4]
 801fe60:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801fe62:	687b      	ldr	r3, [r7, #4]
 801fe64:	685b      	ldr	r3, [r3, #4]
 801fe66:	60fb      	str	r3, [r7, #12]
 801fe68:	68fb      	ldr	r3, [r7, #12]
 801fe6a:	2b00      	cmp	r3, #0
 801fe6c:	d017      	beq.n	801fe9e <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 801fe6e:	68fb      	ldr	r3, [r7, #12]
 801fe70:	6839      	ldr	r1, [r7, #0]
 801fe72:	4618      	mov	r0, r3
 801fe74:	f7ed fdc7 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801fe78:	4603      	mov	r3, r0
 801fe7a:	2b00      	cmp	r3, #0
 801fe7c:	d005      	beq.n	801fe8a <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801fe7e:	68fb      	ldr	r3, [r7, #12]
 801fe80:	68db      	ldr	r3, [r3, #12]
 801fe82:	2b00      	cmp	r3, #0
 801fe84:	d001      	beq.n	801fe8a <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801fe86:	2301      	movs	r3, #1
 801fe88:	e000      	b.n	801fe8c <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 801fe8a:	2300      	movs	r3, #0
 801fe8c:	2b00      	cmp	r3, #0
 801fe8e:	d002      	beq.n	801fe96 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 801fe90:	68fb      	ldr	r3, [r7, #12]
 801fe92:	68db      	ldr	r3, [r3, #12]
 801fe94:	e004      	b.n	801fea0 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801fe96:	68fb      	ldr	r3, [r7, #12]
 801fe98:	691b      	ldr	r3, [r3, #16]
 801fe9a:	60fb      	str	r3, [r7, #12]
 801fe9c:	e7e4      	b.n	801fe68 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801fe9e:	2300      	movs	r3, #0
}
 801fea0:	4618      	mov	r0, r3
 801fea2:	3710      	adds	r7, #16
 801fea4:	46bd      	mov	sp, r7
 801fea6:	bd80      	pop	{r7, pc}

0801fea8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 801fea8:	b590      	push	{r4, r7, lr}
 801feaa:	b087      	sub	sp, #28
 801feac:	af02      	add	r7, sp, #8
 801feae:	6078      	str	r0, [r7, #4]
 801feb0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801feb2:	683b      	ldr	r3, [r7, #0]
 801feb4:	685b      	ldr	r3, [r3, #4]
 801feb6:	60fb      	str	r3, [r7, #12]
 801feb8:	68fb      	ldr	r3, [r7, #12]
 801feba:	2b00      	cmp	r3, #0
 801febc:	d018      	beq.n	801fef0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 801febe:	f240 2293 	movw	r2, #659	; 0x293
 801fec2:	490d      	ldr	r1, [pc, #52]	; (801fef8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 801fec4:	2014      	movs	r0, #20
 801fec6:	f7ea fe17 	bl	800aaf8 <_ZnwjPKci>
 801feca:	4604      	mov	r4, r0
 801fecc:	68f9      	ldr	r1, [r7, #12]
 801fece:	68fb      	ldr	r3, [r7, #12]
 801fed0:	689a      	ldr	r2, [r3, #8]
 801fed2:	68fb      	ldr	r3, [r7, #12]
 801fed4:	68d8      	ldr	r0, [r3, #12]
 801fed6:	687b      	ldr	r3, [r7, #4]
 801fed8:	685b      	ldr	r3, [r3, #4]
 801feda:	9300      	str	r3, [sp, #0]
 801fedc:	4603      	mov	r3, r0
 801fede:	4620      	mov	r0, r4
 801fee0:	f7ff fedd 	bl	801fc9e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 801fee4:	687b      	ldr	r3, [r7, #4]
 801fee6:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801fee8:	68fb      	ldr	r3, [r7, #12]
 801feea:	691b      	ldr	r3, [r3, #16]
 801feec:	60fb      	str	r3, [r7, #12]
 801feee:	e7e3      	b.n	801feb8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 801fef0:	bf00      	nop
 801fef2:	3714      	adds	r7, #20
 801fef4:	46bd      	mov	sp, r7
 801fef6:	bd90      	pop	{r4, r7, pc}
 801fef8:	08026ec8 	.word	0x08026ec8

0801fefc <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 801fefc:	b580      	push	{r7, lr}
 801fefe:	b082      	sub	sp, #8
 801ff00:	af00      	add	r7, sp, #0
 801ff02:	6078      	str	r0, [r7, #4]
 801ff04:	6039      	str	r1, [r7, #0]
 801ff06:	687b      	ldr	r3, [r7, #4]
 801ff08:	490b      	ldr	r1, [pc, #44]	; (801ff38 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801ff0a:	4618      	mov	r0, r3
 801ff0c:	f7ed f9b7 	bl	800d27e <_ZN12SimpleStringC1EPKc>
 801ff10:	687b      	ldr	r3, [r7, #4]
 801ff12:	2200      	movs	r2, #0
 801ff14:	721a      	strb	r2, [r3, #8]
 801ff16:	687b      	ldr	r3, [r7, #4]
 801ff18:	2200      	movs	r2, #0
 801ff1a:	725a      	strb	r2, [r3, #9]
 801ff1c:	687b      	ldr	r3, [r7, #4]
 801ff1e:	2200      	movs	r2, #0
 801ff20:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 801ff22:	687b      	ldr	r3, [r7, #4]
 801ff24:	6839      	ldr	r1, [r7, #0]
 801ff26:	4618      	mov	r0, r3
 801ff28:	f7ed fa15 	bl	800d356 <_ZN12SimpleStringaSERKS_>
}
 801ff2c:	687b      	ldr	r3, [r7, #4]
 801ff2e:	4618      	mov	r0, r3
 801ff30:	3708      	adds	r7, #8
 801ff32:	46bd      	mov	sp, r7
 801ff34:	bd80      	pop	{r7, pc}
 801ff36:	bf00      	nop
 801ff38:	08026fa4 	.word	0x08026fa4

0801ff3c <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 801ff3c:	b480      	push	{r7}
 801ff3e:	b083      	sub	sp, #12
 801ff40:	af00      	add	r7, sp, #0
 801ff42:	6078      	str	r0, [r7, #4]
 801ff44:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801ff46:	687b      	ldr	r3, [r7, #4]
 801ff48:	683a      	ldr	r2, [r7, #0]
 801ff4a:	60da      	str	r2, [r3, #12]
    return this;
 801ff4c:	687b      	ldr	r3, [r7, #4]
}
 801ff4e:	4618      	mov	r0, r3
 801ff50:	370c      	adds	r7, #12
 801ff52:	46bd      	mov	sp, r7
 801ff54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff58:	4770      	bx	lr

0801ff5a <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801ff5a:	b480      	push	{r7}
 801ff5c:	b083      	sub	sp, #12
 801ff5e:	af00      	add	r7, sp, #0
 801ff60:	6078      	str	r0, [r7, #4]
    return next_;
 801ff62:	687b      	ldr	r3, [r7, #4]
 801ff64:	68db      	ldr	r3, [r3, #12]
}
 801ff66:	4618      	mov	r0, r3
 801ff68:	370c      	adds	r7, #12
 801ff6a:	46bd      	mov	sp, r7
 801ff6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff70:	4770      	bx	lr

0801ff72 <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801ff72:	b480      	push	{r7}
 801ff74:	b083      	sub	sp, #12
 801ff76:	af00      	add	r7, sp, #0
 801ff78:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801ff7a:	687b      	ldr	r3, [r7, #4]
 801ff7c:	2201      	movs	r2, #1
 801ff7e:	721a      	strb	r2, [r3, #8]
}
 801ff80:	bf00      	nop
 801ff82:	370c      	adds	r7, #12
 801ff84:	46bd      	mov	sp, r7
 801ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff8a:	4770      	bx	lr

0801ff8c <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801ff8c:	b480      	push	{r7}
 801ff8e:	b083      	sub	sp, #12
 801ff90:	af00      	add	r7, sp, #0
 801ff92:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801ff94:	687b      	ldr	r3, [r7, #4]
 801ff96:	2201      	movs	r2, #1
 801ff98:	725a      	strb	r2, [r3, #9]
}
 801ff9a:	bf00      	nop
 801ff9c:	370c      	adds	r7, #12
 801ff9e:	46bd      	mov	sp, r7
 801ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffa4:	4770      	bx	lr

0801ffa6 <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801ffa6:	b580      	push	{r7, lr}
 801ffa8:	b084      	sub	sp, #16
 801ffaa:	af00      	add	r7, sp, #0
 801ffac:	6078      	str	r0, [r7, #4]
 801ffae:	6039      	str	r1, [r7, #0]
    bool matches = false;
 801ffb0:	2300      	movs	r3, #0
 801ffb2:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801ffb4:	687b      	ldr	r3, [r7, #4]
 801ffb6:	7a1b      	ldrb	r3, [r3, #8]
 801ffb8:	2b00      	cmp	r3, #0
 801ffba:	d007      	beq.n	801ffcc <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801ffbc:	687b      	ldr	r3, [r7, #4]
 801ffbe:	4619      	mov	r1, r3
 801ffc0:	6838      	ldr	r0, [r7, #0]
 801ffc2:	f7ed fd20 	bl	800da06 <_ZeqRK12SimpleStringS1_>
 801ffc6:	4603      	mov	r3, r0
 801ffc8:	73fb      	strb	r3, [r7, #15]
 801ffca:	e006      	b.n	801ffda <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801ffcc:	687b      	ldr	r3, [r7, #4]
 801ffce:	4619      	mov	r1, r3
 801ffd0:	6838      	ldr	r0, [r7, #0]
 801ffd2:	f7ed f9d2 	bl	800d37a <_ZNK12SimpleString8containsERKS_>
 801ffd6:	4603      	mov	r3, r0
 801ffd8:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801ffda:	687b      	ldr	r3, [r7, #4]
 801ffdc:	7a5b      	ldrb	r3, [r3, #9]
 801ffde:	2b00      	cmp	r3, #0
 801ffe0:	d004      	beq.n	801ffec <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 801ffe2:	7bfb      	ldrb	r3, [r7, #15]
 801ffe4:	f083 0301 	eor.w	r3, r3, #1
 801ffe8:	b2db      	uxtb	r3, r3
 801ffea:	e005      	b.n	801fff8 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 801ffec:	7bfb      	ldrb	r3, [r7, #15]
 801ffee:	2b00      	cmp	r3, #0
 801fff0:	bf14      	ite	ne
 801fff2:	2301      	movne	r3, #1
 801fff4:	2300      	moveq	r3, #0
 801fff6:	b2db      	uxtb	r3, r3
}
 801fff8:	4618      	mov	r0, r3
 801fffa:	3710      	adds	r7, #16
 801fffc:	46bd      	mov	sp, r7
 801fffe:	bd80      	pop	{r7, pc}

08020000 <__cxa_guard_acquire>:
 8020000:	6803      	ldr	r3, [r0, #0]
 8020002:	07db      	lsls	r3, r3, #31
 8020004:	d406      	bmi.n	8020014 <__cxa_guard_acquire+0x14>
 8020006:	7843      	ldrb	r3, [r0, #1]
 8020008:	b103      	cbz	r3, 802000c <__cxa_guard_acquire+0xc>
 802000a:	deff      	udf	#255	; 0xff
 802000c:	2301      	movs	r3, #1
 802000e:	7043      	strb	r3, [r0, #1]
 8020010:	4618      	mov	r0, r3
 8020012:	4770      	bx	lr
 8020014:	2000      	movs	r0, #0
 8020016:	4770      	bx	lr

08020018 <__cxa_guard_release>:
 8020018:	2301      	movs	r3, #1
 802001a:	6003      	str	r3, [r0, #0]
 802001c:	4770      	bx	lr

0802001e <__cxa_pure_virtual>:
 802001e:	b508      	push	{r3, lr}
 8020020:	f000 f80c 	bl	802003c <_ZSt9terminatev>

08020024 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8020024:	b508      	push	{r3, lr}
 8020026:	4780      	blx	r0
 8020028:	f000 f816 	bl	8020058 <abort>

0802002c <_ZSt13get_terminatev>:
 802002c:	4b02      	ldr	r3, [pc, #8]	; (8020038 <_ZSt13get_terminatev+0xc>)
 802002e:	6818      	ldr	r0, [r3, #0]
 8020030:	f3bf 8f5b 	dmb	ish
 8020034:	4770      	bx	lr
 8020036:	bf00      	nop
 8020038:	20000104 	.word	0x20000104

0802003c <_ZSt9terminatev>:
 802003c:	b508      	push	{r3, lr}
 802003e:	f7ff fff5 	bl	802002c <_ZSt13get_terminatev>
 8020042:	f7ff ffef 	bl	8020024 <_ZN10__cxxabiv111__terminateEPFvvE>

08020046 <fabs>:
 8020046:	ec51 0b10 	vmov	r0, r1, d0
 802004a:	ee10 2a10 	vmov	r2, s0
 802004e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8020052:	ec43 2b10 	vmov	d0, r2, r3
 8020056:	4770      	bx	lr

08020058 <abort>:
 8020058:	b508      	push	{r3, lr}
 802005a:	2006      	movs	r0, #6
 802005c:	f000 ff8c 	bl	8020f78 <raise>
 8020060:	2001      	movs	r0, #1
 8020062:	f7e0 fec6 	bl	8000df2 <_exit>

08020066 <atexit>:
 8020066:	2300      	movs	r3, #0
 8020068:	4601      	mov	r1, r0
 802006a:	461a      	mov	r2, r3
 802006c:	4618      	mov	r0, r3
 802006e:	f002 b9db 	b.w	8022428 <__register_exitproc>

08020072 <atoi>:
 8020072:	220a      	movs	r2, #10
 8020074:	2100      	movs	r1, #0
 8020076:	f001 be03 	b.w	8021c80 <strtol>
	...

0802007c <calloc>:
 802007c:	4b02      	ldr	r3, [pc, #8]	; (8020088 <calloc+0xc>)
 802007e:	460a      	mov	r2, r1
 8020080:	4601      	mov	r1, r0
 8020082:	6818      	ldr	r0, [r3, #0]
 8020084:	f000 bde8 	b.w	8020c58 <_calloc_r>
 8020088:	20000108 	.word	0x20000108

0802008c <__errno>:
 802008c:	4b01      	ldr	r3, [pc, #4]	; (8020094 <__errno+0x8>)
 802008e:	6818      	ldr	r0, [r3, #0]
 8020090:	4770      	bx	lr
 8020092:	bf00      	nop
 8020094:	20000108 	.word	0x20000108

08020098 <_fclose_r>:
 8020098:	b570      	push	{r4, r5, r6, lr}
 802009a:	4605      	mov	r5, r0
 802009c:	460c      	mov	r4, r1
 802009e:	b911      	cbnz	r1, 80200a6 <_fclose_r+0xe>
 80200a0:	2600      	movs	r6, #0
 80200a2:	4630      	mov	r0, r6
 80200a4:	bd70      	pop	{r4, r5, r6, pc}
 80200a6:	b118      	cbz	r0, 80200b0 <_fclose_r+0x18>
 80200a8:	6983      	ldr	r3, [r0, #24]
 80200aa:	b90b      	cbnz	r3, 80200b0 <_fclose_r+0x18>
 80200ac:	f000 f994 	bl	80203d8 <__sinit>
 80200b0:	4b2c      	ldr	r3, [pc, #176]	; (8020164 <_fclose_r+0xcc>)
 80200b2:	429c      	cmp	r4, r3
 80200b4:	d114      	bne.n	80200e0 <_fclose_r+0x48>
 80200b6:	686c      	ldr	r4, [r5, #4]
 80200b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80200ba:	07d8      	lsls	r0, r3, #31
 80200bc:	d405      	bmi.n	80200ca <_fclose_r+0x32>
 80200be:	89a3      	ldrh	r3, [r4, #12]
 80200c0:	0599      	lsls	r1, r3, #22
 80200c2:	d402      	bmi.n	80200ca <_fclose_r+0x32>
 80200c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80200c6:	f000 fd3a 	bl	8020b3e <__retarget_lock_acquire_recursive>
 80200ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80200ce:	b98b      	cbnz	r3, 80200f4 <_fclose_r+0x5c>
 80200d0:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80200d2:	f016 0601 	ands.w	r6, r6, #1
 80200d6:	d1e3      	bne.n	80200a0 <_fclose_r+0x8>
 80200d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80200da:	f000 fd32 	bl	8020b42 <__retarget_lock_release_recursive>
 80200de:	e7e0      	b.n	80200a2 <_fclose_r+0xa>
 80200e0:	4b21      	ldr	r3, [pc, #132]	; (8020168 <_fclose_r+0xd0>)
 80200e2:	429c      	cmp	r4, r3
 80200e4:	d101      	bne.n	80200ea <_fclose_r+0x52>
 80200e6:	68ac      	ldr	r4, [r5, #8]
 80200e8:	e7e6      	b.n	80200b8 <_fclose_r+0x20>
 80200ea:	4b20      	ldr	r3, [pc, #128]	; (802016c <_fclose_r+0xd4>)
 80200ec:	429c      	cmp	r4, r3
 80200ee:	bf08      	it	eq
 80200f0:	68ec      	ldreq	r4, [r5, #12]
 80200f2:	e7e1      	b.n	80200b8 <_fclose_r+0x20>
 80200f4:	4621      	mov	r1, r4
 80200f6:	4628      	mov	r0, r5
 80200f8:	f000 f842 	bl	8020180 <__sflush_r>
 80200fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80200fe:	4606      	mov	r6, r0
 8020100:	b133      	cbz	r3, 8020110 <_fclose_r+0x78>
 8020102:	6a21      	ldr	r1, [r4, #32]
 8020104:	4628      	mov	r0, r5
 8020106:	4798      	blx	r3
 8020108:	2800      	cmp	r0, #0
 802010a:	bfb8      	it	lt
 802010c:	f04f 36ff 	movlt.w	r6, #4294967295
 8020110:	89a3      	ldrh	r3, [r4, #12]
 8020112:	061a      	lsls	r2, r3, #24
 8020114:	d503      	bpl.n	802011e <_fclose_r+0x86>
 8020116:	6921      	ldr	r1, [r4, #16]
 8020118:	4628      	mov	r0, r5
 802011a:	f000 fdad 	bl	8020c78 <_free_r>
 802011e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020120:	b141      	cbz	r1, 8020134 <_fclose_r+0x9c>
 8020122:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020126:	4299      	cmp	r1, r3
 8020128:	d002      	beq.n	8020130 <_fclose_r+0x98>
 802012a:	4628      	mov	r0, r5
 802012c:	f000 fda4 	bl	8020c78 <_free_r>
 8020130:	2300      	movs	r3, #0
 8020132:	6363      	str	r3, [r4, #52]	; 0x34
 8020134:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8020136:	b121      	cbz	r1, 8020142 <_fclose_r+0xaa>
 8020138:	4628      	mov	r0, r5
 802013a:	f000 fd9d 	bl	8020c78 <_free_r>
 802013e:	2300      	movs	r3, #0
 8020140:	64a3      	str	r3, [r4, #72]	; 0x48
 8020142:	f000 f931 	bl	80203a8 <__sfp_lock_acquire>
 8020146:	2300      	movs	r3, #0
 8020148:	81a3      	strh	r3, [r4, #12]
 802014a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802014c:	07db      	lsls	r3, r3, #31
 802014e:	d402      	bmi.n	8020156 <_fclose_r+0xbe>
 8020150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020152:	f000 fcf6 	bl	8020b42 <__retarget_lock_release_recursive>
 8020156:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020158:	f000 fcef 	bl	8020b3a <__retarget_lock_close_recursive>
 802015c:	f000 f92a 	bl	80203b4 <__sfp_lock_release>
 8020160:	e79f      	b.n	80200a2 <_fclose_r+0xa>
 8020162:	bf00      	nop
 8020164:	08029cbc 	.word	0x08029cbc
 8020168:	08029cdc 	.word	0x08029cdc
 802016c:	08029c9c 	.word	0x08029c9c

08020170 <fclose>:
 8020170:	4b02      	ldr	r3, [pc, #8]	; (802017c <fclose+0xc>)
 8020172:	4601      	mov	r1, r0
 8020174:	6818      	ldr	r0, [r3, #0]
 8020176:	f7ff bf8f 	b.w	8020098 <_fclose_r>
 802017a:	bf00      	nop
 802017c:	20000108 	.word	0x20000108

08020180 <__sflush_r>:
 8020180:	898a      	ldrh	r2, [r1, #12]
 8020182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020186:	4605      	mov	r5, r0
 8020188:	0710      	lsls	r0, r2, #28
 802018a:	460c      	mov	r4, r1
 802018c:	d458      	bmi.n	8020240 <__sflush_r+0xc0>
 802018e:	684b      	ldr	r3, [r1, #4]
 8020190:	2b00      	cmp	r3, #0
 8020192:	dc05      	bgt.n	80201a0 <__sflush_r+0x20>
 8020194:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020196:	2b00      	cmp	r3, #0
 8020198:	dc02      	bgt.n	80201a0 <__sflush_r+0x20>
 802019a:	2000      	movs	r0, #0
 802019c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80201a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80201a2:	2e00      	cmp	r6, #0
 80201a4:	d0f9      	beq.n	802019a <__sflush_r+0x1a>
 80201a6:	2300      	movs	r3, #0
 80201a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80201ac:	682f      	ldr	r7, [r5, #0]
 80201ae:	602b      	str	r3, [r5, #0]
 80201b0:	d032      	beq.n	8020218 <__sflush_r+0x98>
 80201b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80201b4:	89a3      	ldrh	r3, [r4, #12]
 80201b6:	075a      	lsls	r2, r3, #29
 80201b8:	d505      	bpl.n	80201c6 <__sflush_r+0x46>
 80201ba:	6863      	ldr	r3, [r4, #4]
 80201bc:	1ac0      	subs	r0, r0, r3
 80201be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80201c0:	b10b      	cbz	r3, 80201c6 <__sflush_r+0x46>
 80201c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80201c4:	1ac0      	subs	r0, r0, r3
 80201c6:	2300      	movs	r3, #0
 80201c8:	4602      	mov	r2, r0
 80201ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80201cc:	6a21      	ldr	r1, [r4, #32]
 80201ce:	4628      	mov	r0, r5
 80201d0:	47b0      	blx	r6
 80201d2:	1c43      	adds	r3, r0, #1
 80201d4:	89a3      	ldrh	r3, [r4, #12]
 80201d6:	d106      	bne.n	80201e6 <__sflush_r+0x66>
 80201d8:	6829      	ldr	r1, [r5, #0]
 80201da:	291d      	cmp	r1, #29
 80201dc:	d82c      	bhi.n	8020238 <__sflush_r+0xb8>
 80201de:	4a2a      	ldr	r2, [pc, #168]	; (8020288 <__sflush_r+0x108>)
 80201e0:	40ca      	lsrs	r2, r1
 80201e2:	07d6      	lsls	r6, r2, #31
 80201e4:	d528      	bpl.n	8020238 <__sflush_r+0xb8>
 80201e6:	2200      	movs	r2, #0
 80201e8:	6062      	str	r2, [r4, #4]
 80201ea:	04d9      	lsls	r1, r3, #19
 80201ec:	6922      	ldr	r2, [r4, #16]
 80201ee:	6022      	str	r2, [r4, #0]
 80201f0:	d504      	bpl.n	80201fc <__sflush_r+0x7c>
 80201f2:	1c42      	adds	r2, r0, #1
 80201f4:	d101      	bne.n	80201fa <__sflush_r+0x7a>
 80201f6:	682b      	ldr	r3, [r5, #0]
 80201f8:	b903      	cbnz	r3, 80201fc <__sflush_r+0x7c>
 80201fa:	6560      	str	r0, [r4, #84]	; 0x54
 80201fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80201fe:	602f      	str	r7, [r5, #0]
 8020200:	2900      	cmp	r1, #0
 8020202:	d0ca      	beq.n	802019a <__sflush_r+0x1a>
 8020204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020208:	4299      	cmp	r1, r3
 802020a:	d002      	beq.n	8020212 <__sflush_r+0x92>
 802020c:	4628      	mov	r0, r5
 802020e:	f000 fd33 	bl	8020c78 <_free_r>
 8020212:	2000      	movs	r0, #0
 8020214:	6360      	str	r0, [r4, #52]	; 0x34
 8020216:	e7c1      	b.n	802019c <__sflush_r+0x1c>
 8020218:	6a21      	ldr	r1, [r4, #32]
 802021a:	2301      	movs	r3, #1
 802021c:	4628      	mov	r0, r5
 802021e:	47b0      	blx	r6
 8020220:	1c41      	adds	r1, r0, #1
 8020222:	d1c7      	bne.n	80201b4 <__sflush_r+0x34>
 8020224:	682b      	ldr	r3, [r5, #0]
 8020226:	2b00      	cmp	r3, #0
 8020228:	d0c4      	beq.n	80201b4 <__sflush_r+0x34>
 802022a:	2b1d      	cmp	r3, #29
 802022c:	d001      	beq.n	8020232 <__sflush_r+0xb2>
 802022e:	2b16      	cmp	r3, #22
 8020230:	d101      	bne.n	8020236 <__sflush_r+0xb6>
 8020232:	602f      	str	r7, [r5, #0]
 8020234:	e7b1      	b.n	802019a <__sflush_r+0x1a>
 8020236:	89a3      	ldrh	r3, [r4, #12]
 8020238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802023c:	81a3      	strh	r3, [r4, #12]
 802023e:	e7ad      	b.n	802019c <__sflush_r+0x1c>
 8020240:	690f      	ldr	r7, [r1, #16]
 8020242:	2f00      	cmp	r7, #0
 8020244:	d0a9      	beq.n	802019a <__sflush_r+0x1a>
 8020246:	0793      	lsls	r3, r2, #30
 8020248:	680e      	ldr	r6, [r1, #0]
 802024a:	bf08      	it	eq
 802024c:	694b      	ldreq	r3, [r1, #20]
 802024e:	600f      	str	r7, [r1, #0]
 8020250:	bf18      	it	ne
 8020252:	2300      	movne	r3, #0
 8020254:	eba6 0807 	sub.w	r8, r6, r7
 8020258:	608b      	str	r3, [r1, #8]
 802025a:	f1b8 0f00 	cmp.w	r8, #0
 802025e:	dd9c      	ble.n	802019a <__sflush_r+0x1a>
 8020260:	6a21      	ldr	r1, [r4, #32]
 8020262:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020264:	4643      	mov	r3, r8
 8020266:	463a      	mov	r2, r7
 8020268:	4628      	mov	r0, r5
 802026a:	47b0      	blx	r6
 802026c:	2800      	cmp	r0, #0
 802026e:	dc06      	bgt.n	802027e <__sflush_r+0xfe>
 8020270:	89a3      	ldrh	r3, [r4, #12]
 8020272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020276:	81a3      	strh	r3, [r4, #12]
 8020278:	f04f 30ff 	mov.w	r0, #4294967295
 802027c:	e78e      	b.n	802019c <__sflush_r+0x1c>
 802027e:	4407      	add	r7, r0
 8020280:	eba8 0800 	sub.w	r8, r8, r0
 8020284:	e7e9      	b.n	802025a <__sflush_r+0xda>
 8020286:	bf00      	nop
 8020288:	20400001 	.word	0x20400001

0802028c <_fflush_r>:
 802028c:	b538      	push	{r3, r4, r5, lr}
 802028e:	690b      	ldr	r3, [r1, #16]
 8020290:	4605      	mov	r5, r0
 8020292:	460c      	mov	r4, r1
 8020294:	b913      	cbnz	r3, 802029c <_fflush_r+0x10>
 8020296:	2500      	movs	r5, #0
 8020298:	4628      	mov	r0, r5
 802029a:	bd38      	pop	{r3, r4, r5, pc}
 802029c:	b118      	cbz	r0, 80202a6 <_fflush_r+0x1a>
 802029e:	6983      	ldr	r3, [r0, #24]
 80202a0:	b90b      	cbnz	r3, 80202a6 <_fflush_r+0x1a>
 80202a2:	f000 f899 	bl	80203d8 <__sinit>
 80202a6:	4b14      	ldr	r3, [pc, #80]	; (80202f8 <_fflush_r+0x6c>)
 80202a8:	429c      	cmp	r4, r3
 80202aa:	d11b      	bne.n	80202e4 <_fflush_r+0x58>
 80202ac:	686c      	ldr	r4, [r5, #4]
 80202ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80202b2:	2b00      	cmp	r3, #0
 80202b4:	d0ef      	beq.n	8020296 <_fflush_r+0xa>
 80202b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80202b8:	07d0      	lsls	r0, r2, #31
 80202ba:	d404      	bmi.n	80202c6 <_fflush_r+0x3a>
 80202bc:	0599      	lsls	r1, r3, #22
 80202be:	d402      	bmi.n	80202c6 <_fflush_r+0x3a>
 80202c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80202c2:	f000 fc3c 	bl	8020b3e <__retarget_lock_acquire_recursive>
 80202c6:	4628      	mov	r0, r5
 80202c8:	4621      	mov	r1, r4
 80202ca:	f7ff ff59 	bl	8020180 <__sflush_r>
 80202ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80202d0:	07da      	lsls	r2, r3, #31
 80202d2:	4605      	mov	r5, r0
 80202d4:	d4e0      	bmi.n	8020298 <_fflush_r+0xc>
 80202d6:	89a3      	ldrh	r3, [r4, #12]
 80202d8:	059b      	lsls	r3, r3, #22
 80202da:	d4dd      	bmi.n	8020298 <_fflush_r+0xc>
 80202dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80202de:	f000 fc30 	bl	8020b42 <__retarget_lock_release_recursive>
 80202e2:	e7d9      	b.n	8020298 <_fflush_r+0xc>
 80202e4:	4b05      	ldr	r3, [pc, #20]	; (80202fc <_fflush_r+0x70>)
 80202e6:	429c      	cmp	r4, r3
 80202e8:	d101      	bne.n	80202ee <_fflush_r+0x62>
 80202ea:	68ac      	ldr	r4, [r5, #8]
 80202ec:	e7df      	b.n	80202ae <_fflush_r+0x22>
 80202ee:	4b04      	ldr	r3, [pc, #16]	; (8020300 <_fflush_r+0x74>)
 80202f0:	429c      	cmp	r4, r3
 80202f2:	bf08      	it	eq
 80202f4:	68ec      	ldreq	r4, [r5, #12]
 80202f6:	e7da      	b.n	80202ae <_fflush_r+0x22>
 80202f8:	08029cbc 	.word	0x08029cbc
 80202fc:	08029cdc 	.word	0x08029cdc
 8020300:	08029c9c 	.word	0x08029c9c

08020304 <fflush>:
 8020304:	4601      	mov	r1, r0
 8020306:	b920      	cbnz	r0, 8020312 <fflush+0xe>
 8020308:	4b04      	ldr	r3, [pc, #16]	; (802031c <fflush+0x18>)
 802030a:	4905      	ldr	r1, [pc, #20]	; (8020320 <fflush+0x1c>)
 802030c:	6818      	ldr	r0, [r3, #0]
 802030e:	f000 babb 	b.w	8020888 <_fwalk_reent>
 8020312:	4b04      	ldr	r3, [pc, #16]	; (8020324 <fflush+0x20>)
 8020314:	6818      	ldr	r0, [r3, #0]
 8020316:	f7ff bfb9 	b.w	802028c <_fflush_r>
 802031a:	bf00      	nop
 802031c:	08029cfc 	.word	0x08029cfc
 8020320:	0802028d 	.word	0x0802028d
 8020324:	20000108 	.word	0x20000108

08020328 <std>:
 8020328:	2300      	movs	r3, #0
 802032a:	b510      	push	{r4, lr}
 802032c:	4604      	mov	r4, r0
 802032e:	e9c0 3300 	strd	r3, r3, [r0]
 8020332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020336:	6083      	str	r3, [r0, #8]
 8020338:	8181      	strh	r1, [r0, #12]
 802033a:	6643      	str	r3, [r0, #100]	; 0x64
 802033c:	81c2      	strh	r2, [r0, #14]
 802033e:	6183      	str	r3, [r0, #24]
 8020340:	4619      	mov	r1, r3
 8020342:	2208      	movs	r2, #8
 8020344:	305c      	adds	r0, #92	; 0x5c
 8020346:	f000 fc7f 	bl	8020c48 <memset>
 802034a:	4b05      	ldr	r3, [pc, #20]	; (8020360 <std+0x38>)
 802034c:	6263      	str	r3, [r4, #36]	; 0x24
 802034e:	4b05      	ldr	r3, [pc, #20]	; (8020364 <std+0x3c>)
 8020350:	62a3      	str	r3, [r4, #40]	; 0x28
 8020352:	4b05      	ldr	r3, [pc, #20]	; (8020368 <std+0x40>)
 8020354:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020356:	4b05      	ldr	r3, [pc, #20]	; (802036c <std+0x44>)
 8020358:	6224      	str	r4, [r4, #32]
 802035a:	6323      	str	r3, [r4, #48]	; 0x30
 802035c:	bd10      	pop	{r4, pc}
 802035e:	bf00      	nop
 8020360:	08020ff1 	.word	0x08020ff1
 8020364:	08021017 	.word	0x08021017
 8020368:	0802104f 	.word	0x0802104f
 802036c:	08021073 	.word	0x08021073

08020370 <_cleanup_r>:
 8020370:	4901      	ldr	r1, [pc, #4]	; (8020378 <_cleanup_r+0x8>)
 8020372:	f000 ba89 	b.w	8020888 <_fwalk_reent>
 8020376:	bf00      	nop
 8020378:	0802028d 	.word	0x0802028d

0802037c <__sfmoreglue>:
 802037c:	b570      	push	{r4, r5, r6, lr}
 802037e:	1e4a      	subs	r2, r1, #1
 8020380:	2568      	movs	r5, #104	; 0x68
 8020382:	4355      	muls	r5, r2
 8020384:	460e      	mov	r6, r1
 8020386:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802038a:	f000 fcc5 	bl	8020d18 <_malloc_r>
 802038e:	4604      	mov	r4, r0
 8020390:	b140      	cbz	r0, 80203a4 <__sfmoreglue+0x28>
 8020392:	2100      	movs	r1, #0
 8020394:	e9c0 1600 	strd	r1, r6, [r0]
 8020398:	300c      	adds	r0, #12
 802039a:	60a0      	str	r0, [r4, #8]
 802039c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80203a0:	f000 fc52 	bl	8020c48 <memset>
 80203a4:	4620      	mov	r0, r4
 80203a6:	bd70      	pop	{r4, r5, r6, pc}

080203a8 <__sfp_lock_acquire>:
 80203a8:	4801      	ldr	r0, [pc, #4]	; (80203b0 <__sfp_lock_acquire+0x8>)
 80203aa:	f000 bbc8 	b.w	8020b3e <__retarget_lock_acquire_recursive>
 80203ae:	bf00      	nop
 80203b0:	20001010 	.word	0x20001010

080203b4 <__sfp_lock_release>:
 80203b4:	4801      	ldr	r0, [pc, #4]	; (80203bc <__sfp_lock_release+0x8>)
 80203b6:	f000 bbc4 	b.w	8020b42 <__retarget_lock_release_recursive>
 80203ba:	bf00      	nop
 80203bc:	20001010 	.word	0x20001010

080203c0 <__sinit_lock_acquire>:
 80203c0:	4801      	ldr	r0, [pc, #4]	; (80203c8 <__sinit_lock_acquire+0x8>)
 80203c2:	f000 bbbc 	b.w	8020b3e <__retarget_lock_acquire_recursive>
 80203c6:	bf00      	nop
 80203c8:	2000100b 	.word	0x2000100b

080203cc <__sinit_lock_release>:
 80203cc:	4801      	ldr	r0, [pc, #4]	; (80203d4 <__sinit_lock_release+0x8>)
 80203ce:	f000 bbb8 	b.w	8020b42 <__retarget_lock_release_recursive>
 80203d2:	bf00      	nop
 80203d4:	2000100b 	.word	0x2000100b

080203d8 <__sinit>:
 80203d8:	b510      	push	{r4, lr}
 80203da:	4604      	mov	r4, r0
 80203dc:	f7ff fff0 	bl	80203c0 <__sinit_lock_acquire>
 80203e0:	69a3      	ldr	r3, [r4, #24]
 80203e2:	b11b      	cbz	r3, 80203ec <__sinit+0x14>
 80203e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80203e8:	f7ff bff0 	b.w	80203cc <__sinit_lock_release>
 80203ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80203f0:	6523      	str	r3, [r4, #80]	; 0x50
 80203f2:	4b13      	ldr	r3, [pc, #76]	; (8020440 <__sinit+0x68>)
 80203f4:	4a13      	ldr	r2, [pc, #76]	; (8020444 <__sinit+0x6c>)
 80203f6:	681b      	ldr	r3, [r3, #0]
 80203f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80203fa:	42a3      	cmp	r3, r4
 80203fc:	bf04      	itt	eq
 80203fe:	2301      	moveq	r3, #1
 8020400:	61a3      	streq	r3, [r4, #24]
 8020402:	4620      	mov	r0, r4
 8020404:	f000 f820 	bl	8020448 <__sfp>
 8020408:	6060      	str	r0, [r4, #4]
 802040a:	4620      	mov	r0, r4
 802040c:	f000 f81c 	bl	8020448 <__sfp>
 8020410:	60a0      	str	r0, [r4, #8]
 8020412:	4620      	mov	r0, r4
 8020414:	f000 f818 	bl	8020448 <__sfp>
 8020418:	2200      	movs	r2, #0
 802041a:	60e0      	str	r0, [r4, #12]
 802041c:	2104      	movs	r1, #4
 802041e:	6860      	ldr	r0, [r4, #4]
 8020420:	f7ff ff82 	bl	8020328 <std>
 8020424:	68a0      	ldr	r0, [r4, #8]
 8020426:	2201      	movs	r2, #1
 8020428:	2109      	movs	r1, #9
 802042a:	f7ff ff7d 	bl	8020328 <std>
 802042e:	68e0      	ldr	r0, [r4, #12]
 8020430:	2202      	movs	r2, #2
 8020432:	2112      	movs	r1, #18
 8020434:	f7ff ff78 	bl	8020328 <std>
 8020438:	2301      	movs	r3, #1
 802043a:	61a3      	str	r3, [r4, #24]
 802043c:	e7d2      	b.n	80203e4 <__sinit+0xc>
 802043e:	bf00      	nop
 8020440:	08029cfc 	.word	0x08029cfc
 8020444:	08020371 	.word	0x08020371

08020448 <__sfp>:
 8020448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802044a:	4607      	mov	r7, r0
 802044c:	f7ff ffac 	bl	80203a8 <__sfp_lock_acquire>
 8020450:	4b1e      	ldr	r3, [pc, #120]	; (80204cc <__sfp+0x84>)
 8020452:	681e      	ldr	r6, [r3, #0]
 8020454:	69b3      	ldr	r3, [r6, #24]
 8020456:	b913      	cbnz	r3, 802045e <__sfp+0x16>
 8020458:	4630      	mov	r0, r6
 802045a:	f7ff ffbd 	bl	80203d8 <__sinit>
 802045e:	3648      	adds	r6, #72	; 0x48
 8020460:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020464:	3b01      	subs	r3, #1
 8020466:	d503      	bpl.n	8020470 <__sfp+0x28>
 8020468:	6833      	ldr	r3, [r6, #0]
 802046a:	b30b      	cbz	r3, 80204b0 <__sfp+0x68>
 802046c:	6836      	ldr	r6, [r6, #0]
 802046e:	e7f7      	b.n	8020460 <__sfp+0x18>
 8020470:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020474:	b9d5      	cbnz	r5, 80204ac <__sfp+0x64>
 8020476:	4b16      	ldr	r3, [pc, #88]	; (80204d0 <__sfp+0x88>)
 8020478:	60e3      	str	r3, [r4, #12]
 802047a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802047e:	6665      	str	r5, [r4, #100]	; 0x64
 8020480:	f000 fb5a 	bl	8020b38 <__retarget_lock_init_recursive>
 8020484:	f7ff ff96 	bl	80203b4 <__sfp_lock_release>
 8020488:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802048c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8020490:	6025      	str	r5, [r4, #0]
 8020492:	61a5      	str	r5, [r4, #24]
 8020494:	2208      	movs	r2, #8
 8020496:	4629      	mov	r1, r5
 8020498:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802049c:	f000 fbd4 	bl	8020c48 <memset>
 80204a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80204a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80204a8:	4620      	mov	r0, r4
 80204aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80204ac:	3468      	adds	r4, #104	; 0x68
 80204ae:	e7d9      	b.n	8020464 <__sfp+0x1c>
 80204b0:	2104      	movs	r1, #4
 80204b2:	4638      	mov	r0, r7
 80204b4:	f7ff ff62 	bl	802037c <__sfmoreglue>
 80204b8:	4604      	mov	r4, r0
 80204ba:	6030      	str	r0, [r6, #0]
 80204bc:	2800      	cmp	r0, #0
 80204be:	d1d5      	bne.n	802046c <__sfp+0x24>
 80204c0:	f7ff ff78 	bl	80203b4 <__sfp_lock_release>
 80204c4:	230c      	movs	r3, #12
 80204c6:	603b      	str	r3, [r7, #0]
 80204c8:	e7ee      	b.n	80204a8 <__sfp+0x60>
 80204ca:	bf00      	nop
 80204cc:	08029cfc 	.word	0x08029cfc
 80204d0:	ffff0001 	.word	0xffff0001

080204d4 <_fopen_r>:
 80204d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80204d6:	460f      	mov	r7, r1
 80204d8:	4611      	mov	r1, r2
 80204da:	aa01      	add	r2, sp, #4
 80204dc:	4605      	mov	r5, r0
 80204de:	f002 f837 	bl	8022550 <__sflags>
 80204e2:	4606      	mov	r6, r0
 80204e4:	b918      	cbnz	r0, 80204ee <_fopen_r+0x1a>
 80204e6:	2400      	movs	r4, #0
 80204e8:	4620      	mov	r0, r4
 80204ea:	b003      	add	sp, #12
 80204ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80204ee:	4628      	mov	r0, r5
 80204f0:	f7ff ffaa 	bl	8020448 <__sfp>
 80204f4:	4604      	mov	r4, r0
 80204f6:	2800      	cmp	r0, #0
 80204f8:	d0f5      	beq.n	80204e6 <_fopen_r+0x12>
 80204fa:	4639      	mov	r1, r7
 80204fc:	9a01      	ldr	r2, [sp, #4]
 80204fe:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8020502:	4628      	mov	r0, r5
 8020504:	f000 fc62 	bl	8020dcc <_open_r>
 8020508:	1e07      	subs	r7, r0, #0
 802050a:	da09      	bge.n	8020520 <_fopen_r+0x4c>
 802050c:	2500      	movs	r5, #0
 802050e:	f7ff ff4b 	bl	80203a8 <__sfp_lock_acquire>
 8020512:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020514:	81a5      	strh	r5, [r4, #12]
 8020516:	f000 fb10 	bl	8020b3a <__retarget_lock_close_recursive>
 802051a:	f7ff ff4b 	bl	80203b4 <__sfp_lock_release>
 802051e:	e7e2      	b.n	80204e6 <_fopen_r+0x12>
 8020520:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020522:	07db      	lsls	r3, r3, #31
 8020524:	d405      	bmi.n	8020532 <_fopen_r+0x5e>
 8020526:	89a3      	ldrh	r3, [r4, #12]
 8020528:	0598      	lsls	r0, r3, #22
 802052a:	d402      	bmi.n	8020532 <_fopen_r+0x5e>
 802052c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802052e:	f000 fb06 	bl	8020b3e <__retarget_lock_acquire_recursive>
 8020532:	4b0e      	ldr	r3, [pc, #56]	; (802056c <_fopen_r+0x98>)
 8020534:	6263      	str	r3, [r4, #36]	; 0x24
 8020536:	4b0e      	ldr	r3, [pc, #56]	; (8020570 <_fopen_r+0x9c>)
 8020538:	62a3      	str	r3, [r4, #40]	; 0x28
 802053a:	4b0e      	ldr	r3, [pc, #56]	; (8020574 <_fopen_r+0xa0>)
 802053c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802053e:	05f1      	lsls	r1, r6, #23
 8020540:	4b0d      	ldr	r3, [pc, #52]	; (8020578 <_fopen_r+0xa4>)
 8020542:	81e7      	strh	r7, [r4, #14]
 8020544:	81a6      	strh	r6, [r4, #12]
 8020546:	6224      	str	r4, [r4, #32]
 8020548:	6323      	str	r3, [r4, #48]	; 0x30
 802054a:	d505      	bpl.n	8020558 <_fopen_r+0x84>
 802054c:	2302      	movs	r3, #2
 802054e:	2200      	movs	r2, #0
 8020550:	4621      	mov	r1, r4
 8020552:	4628      	mov	r0, r5
 8020554:	f000 f888 	bl	8020668 <_fseek_r>
 8020558:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802055a:	07da      	lsls	r2, r3, #31
 802055c:	d4c4      	bmi.n	80204e8 <_fopen_r+0x14>
 802055e:	89a3      	ldrh	r3, [r4, #12]
 8020560:	059b      	lsls	r3, r3, #22
 8020562:	d4c1      	bmi.n	80204e8 <_fopen_r+0x14>
 8020564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020566:	f000 faec 	bl	8020b42 <__retarget_lock_release_recursive>
 802056a:	e7bd      	b.n	80204e8 <_fopen_r+0x14>
 802056c:	08020ff1 	.word	0x08020ff1
 8020570:	08021017 	.word	0x08021017
 8020574:	0802104f 	.word	0x0802104f
 8020578:	08021073 	.word	0x08021073

0802057c <fopen>:
 802057c:	4b02      	ldr	r3, [pc, #8]	; (8020588 <fopen+0xc>)
 802057e:	460a      	mov	r2, r1
 8020580:	4601      	mov	r1, r0
 8020582:	6818      	ldr	r0, [r3, #0]
 8020584:	f7ff bfa6 	b.w	80204d4 <_fopen_r>
 8020588:	20000108 	.word	0x20000108

0802058c <_fputs_r>:
 802058c:	b570      	push	{r4, r5, r6, lr}
 802058e:	460e      	mov	r6, r1
 8020590:	4614      	mov	r4, r2
 8020592:	4605      	mov	r5, r0
 8020594:	b118      	cbz	r0, 802059e <_fputs_r+0x12>
 8020596:	6983      	ldr	r3, [r0, #24]
 8020598:	b90b      	cbnz	r3, 802059e <_fputs_r+0x12>
 802059a:	f7ff ff1d 	bl	80203d8 <__sinit>
 802059e:	4b2b      	ldr	r3, [pc, #172]	; (802064c <_fputs_r+0xc0>)
 80205a0:	429c      	cmp	r4, r3
 80205a2:	d11e      	bne.n	80205e2 <_fputs_r+0x56>
 80205a4:	686c      	ldr	r4, [r5, #4]
 80205a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80205a8:	07da      	lsls	r2, r3, #31
 80205aa:	d405      	bmi.n	80205b8 <_fputs_r+0x2c>
 80205ac:	89a3      	ldrh	r3, [r4, #12]
 80205ae:	059b      	lsls	r3, r3, #22
 80205b0:	d402      	bmi.n	80205b8 <_fputs_r+0x2c>
 80205b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80205b4:	f000 fac3 	bl	8020b3e <__retarget_lock_acquire_recursive>
 80205b8:	89a3      	ldrh	r3, [r4, #12]
 80205ba:	0718      	lsls	r0, r3, #28
 80205bc:	d51b      	bpl.n	80205f6 <_fputs_r+0x6a>
 80205be:	6923      	ldr	r3, [r4, #16]
 80205c0:	b1cb      	cbz	r3, 80205f6 <_fputs_r+0x6a>
 80205c2:	3e01      	subs	r6, #1
 80205c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80205c8:	bb39      	cbnz	r1, 802061a <_fputs_r+0x8e>
 80205ca:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80205cc:	f015 0501 	ands.w	r5, r5, #1
 80205d0:	d139      	bne.n	8020646 <_fputs_r+0xba>
 80205d2:	89a3      	ldrh	r3, [r4, #12]
 80205d4:	0599      	lsls	r1, r3, #22
 80205d6:	d402      	bmi.n	80205de <_fputs_r+0x52>
 80205d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80205da:	f000 fab2 	bl	8020b42 <__retarget_lock_release_recursive>
 80205de:	4628      	mov	r0, r5
 80205e0:	bd70      	pop	{r4, r5, r6, pc}
 80205e2:	4b1b      	ldr	r3, [pc, #108]	; (8020650 <_fputs_r+0xc4>)
 80205e4:	429c      	cmp	r4, r3
 80205e6:	d101      	bne.n	80205ec <_fputs_r+0x60>
 80205e8:	68ac      	ldr	r4, [r5, #8]
 80205ea:	e7dc      	b.n	80205a6 <_fputs_r+0x1a>
 80205ec:	4b19      	ldr	r3, [pc, #100]	; (8020654 <_fputs_r+0xc8>)
 80205ee:	429c      	cmp	r4, r3
 80205f0:	bf08      	it	eq
 80205f2:	68ec      	ldreq	r4, [r5, #12]
 80205f4:	e7d7      	b.n	80205a6 <_fputs_r+0x1a>
 80205f6:	4621      	mov	r1, r4
 80205f8:	4628      	mov	r0, r5
 80205fa:	f001 fea7 	bl	802234c <__swsetup_r>
 80205fe:	2800      	cmp	r0, #0
 8020600:	d0df      	beq.n	80205c2 <_fputs_r+0x36>
 8020602:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020604:	07da      	lsls	r2, r3, #31
 8020606:	d405      	bmi.n	8020614 <_fputs_r+0x88>
 8020608:	89a3      	ldrh	r3, [r4, #12]
 802060a:	059b      	lsls	r3, r3, #22
 802060c:	d402      	bmi.n	8020614 <_fputs_r+0x88>
 802060e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020610:	f000 fa97 	bl	8020b42 <__retarget_lock_release_recursive>
 8020614:	f04f 35ff 	mov.w	r5, #4294967295
 8020618:	e7e1      	b.n	80205de <_fputs_r+0x52>
 802061a:	68a3      	ldr	r3, [r4, #8]
 802061c:	3b01      	subs	r3, #1
 802061e:	2b00      	cmp	r3, #0
 8020620:	60a3      	str	r3, [r4, #8]
 8020622:	da04      	bge.n	802062e <_fputs_r+0xa2>
 8020624:	69a2      	ldr	r2, [r4, #24]
 8020626:	4293      	cmp	r3, r2
 8020628:	db06      	blt.n	8020638 <_fputs_r+0xac>
 802062a:	290a      	cmp	r1, #10
 802062c:	d004      	beq.n	8020638 <_fputs_r+0xac>
 802062e:	6823      	ldr	r3, [r4, #0]
 8020630:	1c5a      	adds	r2, r3, #1
 8020632:	6022      	str	r2, [r4, #0]
 8020634:	7019      	strb	r1, [r3, #0]
 8020636:	e7c5      	b.n	80205c4 <_fputs_r+0x38>
 8020638:	4622      	mov	r2, r4
 802063a:	4628      	mov	r0, r5
 802063c:	f001 fe22 	bl	8022284 <__swbuf_r>
 8020640:	3001      	adds	r0, #1
 8020642:	d1bf      	bne.n	80205c4 <_fputs_r+0x38>
 8020644:	e7dd      	b.n	8020602 <_fputs_r+0x76>
 8020646:	460d      	mov	r5, r1
 8020648:	e7c9      	b.n	80205de <_fputs_r+0x52>
 802064a:	bf00      	nop
 802064c:	08029cbc 	.word	0x08029cbc
 8020650:	08029cdc 	.word	0x08029cdc
 8020654:	08029c9c 	.word	0x08029c9c

08020658 <fputs>:
 8020658:	4b02      	ldr	r3, [pc, #8]	; (8020664 <fputs+0xc>)
 802065a:	460a      	mov	r2, r1
 802065c:	4601      	mov	r1, r0
 802065e:	6818      	ldr	r0, [r3, #0]
 8020660:	f7ff bf94 	b.w	802058c <_fputs_r>
 8020664:	20000108 	.word	0x20000108

08020668 <_fseek_r>:
 8020668:	f000 b800 	b.w	802066c <_fseeko_r>

0802066c <_fseeko_r>:
 802066c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020670:	460c      	mov	r4, r1
 8020672:	4617      	mov	r7, r2
 8020674:	461e      	mov	r6, r3
 8020676:	4605      	mov	r5, r0
 8020678:	b118      	cbz	r0, 8020682 <_fseeko_r+0x16>
 802067a:	6983      	ldr	r3, [r0, #24]
 802067c:	b90b      	cbnz	r3, 8020682 <_fseeko_r+0x16>
 802067e:	f7ff feab 	bl	80203d8 <__sinit>
 8020682:	4b44      	ldr	r3, [pc, #272]	; (8020794 <_fseeko_r+0x128>)
 8020684:	429c      	cmp	r4, r3
 8020686:	d122      	bne.n	80206ce <_fseeko_r+0x62>
 8020688:	686c      	ldr	r4, [r5, #4]
 802068a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802068c:	07d9      	lsls	r1, r3, #31
 802068e:	d405      	bmi.n	802069c <_fseeko_r+0x30>
 8020690:	89a3      	ldrh	r3, [r4, #12]
 8020692:	059a      	lsls	r2, r3, #22
 8020694:	d402      	bmi.n	802069c <_fseeko_r+0x30>
 8020696:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020698:	f000 fa51 	bl	8020b3e <__retarget_lock_acquire_recursive>
 802069c:	89a3      	ldrh	r3, [r4, #12]
 802069e:	f403 7384 	and.w	r3, r3, #264	; 0x108
 80206a2:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 80206a6:	d103      	bne.n	80206b0 <_fseeko_r+0x44>
 80206a8:	4621      	mov	r1, r4
 80206aa:	4628      	mov	r0, r5
 80206ac:	f7ff fdee 	bl	802028c <_fflush_r>
 80206b0:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80206b4:	f1b8 0f00 	cmp.w	r8, #0
 80206b8:	d113      	bne.n	80206e2 <_fseeko_r+0x76>
 80206ba:	231d      	movs	r3, #29
 80206bc:	602b      	str	r3, [r5, #0]
 80206be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80206c0:	07d9      	lsls	r1, r3, #31
 80206c2:	d55d      	bpl.n	8020780 <_fseeko_r+0x114>
 80206c4:	f04f 36ff 	mov.w	r6, #4294967295
 80206c8:	4630      	mov	r0, r6
 80206ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80206ce:	4b32      	ldr	r3, [pc, #200]	; (8020798 <_fseeko_r+0x12c>)
 80206d0:	429c      	cmp	r4, r3
 80206d2:	d101      	bne.n	80206d8 <_fseeko_r+0x6c>
 80206d4:	68ac      	ldr	r4, [r5, #8]
 80206d6:	e7d8      	b.n	802068a <_fseeko_r+0x1e>
 80206d8:	4b30      	ldr	r3, [pc, #192]	; (802079c <_fseeko_r+0x130>)
 80206da:	429c      	cmp	r4, r3
 80206dc:	bf08      	it	eq
 80206de:	68ec      	ldreq	r4, [r5, #12]
 80206e0:	e7d3      	b.n	802068a <_fseeko_r+0x1e>
 80206e2:	2e01      	cmp	r6, #1
 80206e4:	d036      	beq.n	8020754 <_fseeko_r+0xe8>
 80206e6:	f036 0302 	bics.w	r3, r6, #2
 80206ea:	d147      	bne.n	802077c <_fseeko_r+0x110>
 80206ec:	6923      	ldr	r3, [r4, #16]
 80206ee:	b91b      	cbnz	r3, 80206f8 <_fseeko_r+0x8c>
 80206f0:	4621      	mov	r1, r4
 80206f2:	4628      	mov	r0, r5
 80206f4:	f000 fa4a 	bl	8020b8c <__smakebuf_r>
 80206f8:	4621      	mov	r1, r4
 80206fa:	4628      	mov	r0, r5
 80206fc:	f7ff fdc6 	bl	802028c <_fflush_r>
 8020700:	2800      	cmp	r0, #0
 8020702:	d1dc      	bne.n	80206be <_fseeko_r+0x52>
 8020704:	6a21      	ldr	r1, [r4, #32]
 8020706:	4633      	mov	r3, r6
 8020708:	463a      	mov	r2, r7
 802070a:	4628      	mov	r0, r5
 802070c:	47c0      	blx	r8
 802070e:	3001      	adds	r0, #1
 8020710:	d0d5      	beq.n	80206be <_fseeko_r+0x52>
 8020712:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020714:	b141      	cbz	r1, 8020728 <_fseeko_r+0xbc>
 8020716:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802071a:	4299      	cmp	r1, r3
 802071c:	d002      	beq.n	8020724 <_fseeko_r+0xb8>
 802071e:	4628      	mov	r0, r5
 8020720:	f000 faaa 	bl	8020c78 <_free_r>
 8020724:	2300      	movs	r3, #0
 8020726:	6363      	str	r3, [r4, #52]	; 0x34
 8020728:	6923      	ldr	r3, [r4, #16]
 802072a:	6023      	str	r3, [r4, #0]
 802072c:	89a3      	ldrh	r3, [r4, #12]
 802072e:	2500      	movs	r5, #0
 8020730:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8020734:	6065      	str	r5, [r4, #4]
 8020736:	81a3      	strh	r3, [r4, #12]
 8020738:	2208      	movs	r2, #8
 802073a:	4629      	mov	r1, r5
 802073c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020740:	f000 fa82 	bl	8020c48 <memset>
 8020744:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8020746:	f016 0601 	ands.w	r6, r6, #1
 802074a:	d120      	bne.n	802078e <_fseeko_r+0x122>
 802074c:	89a3      	ldrh	r3, [r4, #12]
 802074e:	059b      	lsls	r3, r3, #22
 8020750:	d4ba      	bmi.n	80206c8 <_fseeko_r+0x5c>
 8020752:	e00c      	b.n	802076e <_fseeko_r+0x102>
 8020754:	4621      	mov	r1, r4
 8020756:	4628      	mov	r0, r5
 8020758:	f000 f822 	bl	80207a0 <_ftello_r>
 802075c:	1c43      	adds	r3, r0, #1
 802075e:	4606      	mov	r6, r0
 8020760:	d109      	bne.n	8020776 <_fseeko_r+0x10a>
 8020762:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020764:	07dd      	lsls	r5, r3, #31
 8020766:	d4ad      	bmi.n	80206c4 <_fseeko_r+0x58>
 8020768:	89a3      	ldrh	r3, [r4, #12]
 802076a:	0598      	lsls	r0, r3, #22
 802076c:	d4aa      	bmi.n	80206c4 <_fseeko_r+0x58>
 802076e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020770:	f000 f9e7 	bl	8020b42 <__retarget_lock_release_recursive>
 8020774:	e7a8      	b.n	80206c8 <_fseeko_r+0x5c>
 8020776:	4407      	add	r7, r0
 8020778:	2600      	movs	r6, #0
 802077a:	e7b7      	b.n	80206ec <_fseeko_r+0x80>
 802077c:	2316      	movs	r3, #22
 802077e:	e79d      	b.n	80206bc <_fseeko_r+0x50>
 8020780:	89a3      	ldrh	r3, [r4, #12]
 8020782:	059a      	lsls	r2, r3, #22
 8020784:	d49e      	bmi.n	80206c4 <_fseeko_r+0x58>
 8020786:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020788:	f000 f9db 	bl	8020b42 <__retarget_lock_release_recursive>
 802078c:	e79a      	b.n	80206c4 <_fseeko_r+0x58>
 802078e:	462e      	mov	r6, r5
 8020790:	e79a      	b.n	80206c8 <_fseeko_r+0x5c>
 8020792:	bf00      	nop
 8020794:	08029cbc 	.word	0x08029cbc
 8020798:	08029cdc 	.word	0x08029cdc
 802079c:	08029c9c 	.word	0x08029c9c

080207a0 <_ftello_r>:
 80207a0:	b570      	push	{r4, r5, r6, lr}
 80207a2:	460c      	mov	r4, r1
 80207a4:	4605      	mov	r5, r0
 80207a6:	b118      	cbz	r0, 80207b0 <_ftello_r+0x10>
 80207a8:	6983      	ldr	r3, [r0, #24]
 80207aa:	b90b      	cbnz	r3, 80207b0 <_ftello_r+0x10>
 80207ac:	f7ff fe14 	bl	80203d8 <__sinit>
 80207b0:	4b32      	ldr	r3, [pc, #200]	; (802087c <_ftello_r+0xdc>)
 80207b2:	429c      	cmp	r4, r3
 80207b4:	d114      	bne.n	80207e0 <_ftello_r+0x40>
 80207b6:	686c      	ldr	r4, [r5, #4]
 80207b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80207ba:	07da      	lsls	r2, r3, #31
 80207bc:	d405      	bmi.n	80207ca <_ftello_r+0x2a>
 80207be:	89a3      	ldrh	r3, [r4, #12]
 80207c0:	059b      	lsls	r3, r3, #22
 80207c2:	d402      	bmi.n	80207ca <_ftello_r+0x2a>
 80207c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80207c6:	f000 f9ba 	bl	8020b3e <__retarget_lock_acquire_recursive>
 80207ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80207cc:	b9ce      	cbnz	r6, 8020802 <_ftello_r+0x62>
 80207ce:	231d      	movs	r3, #29
 80207d0:	602b      	str	r3, [r5, #0]
 80207d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80207d4:	07de      	lsls	r6, r3, #31
 80207d6:	d50d      	bpl.n	80207f4 <_ftello_r+0x54>
 80207d8:	f04f 35ff 	mov.w	r5, #4294967295
 80207dc:	4628      	mov	r0, r5
 80207de:	bd70      	pop	{r4, r5, r6, pc}
 80207e0:	4b27      	ldr	r3, [pc, #156]	; (8020880 <_ftello_r+0xe0>)
 80207e2:	429c      	cmp	r4, r3
 80207e4:	d101      	bne.n	80207ea <_ftello_r+0x4a>
 80207e6:	68ac      	ldr	r4, [r5, #8]
 80207e8:	e7e6      	b.n	80207b8 <_ftello_r+0x18>
 80207ea:	4b26      	ldr	r3, [pc, #152]	; (8020884 <_ftello_r+0xe4>)
 80207ec:	429c      	cmp	r4, r3
 80207ee:	bf08      	it	eq
 80207f0:	68ec      	ldreq	r4, [r5, #12]
 80207f2:	e7e1      	b.n	80207b8 <_ftello_r+0x18>
 80207f4:	89a3      	ldrh	r3, [r4, #12]
 80207f6:	059d      	lsls	r5, r3, #22
 80207f8:	d4ee      	bmi.n	80207d8 <_ftello_r+0x38>
 80207fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80207fc:	f000 f9a1 	bl	8020b42 <__retarget_lock_release_recursive>
 8020800:	e7ea      	b.n	80207d8 <_ftello_r+0x38>
 8020802:	89a2      	ldrh	r2, [r4, #12]
 8020804:	f002 030c 	and.w	r3, r2, #12
 8020808:	2b08      	cmp	r3, #8
 802080a:	d119      	bne.n	8020840 <_ftello_r+0xa0>
 802080c:	6823      	ldr	r3, [r4, #0]
 802080e:	b1bb      	cbz	r3, 8020840 <_ftello_r+0xa0>
 8020810:	6921      	ldr	r1, [r4, #16]
 8020812:	1a5b      	subs	r3, r3, r1
 8020814:	2b00      	cmp	r3, #0
 8020816:	dd13      	ble.n	8020840 <_ftello_r+0xa0>
 8020818:	05d0      	lsls	r0, r2, #23
 802081a:	d511      	bpl.n	8020840 <_ftello_r+0xa0>
 802081c:	2302      	movs	r3, #2
 802081e:	2200      	movs	r2, #0
 8020820:	6a21      	ldr	r1, [r4, #32]
 8020822:	4628      	mov	r0, r5
 8020824:	47b0      	blx	r6
 8020826:	1c41      	adds	r1, r0, #1
 8020828:	4605      	mov	r5, r0
 802082a:	d10d      	bne.n	8020848 <_ftello_r+0xa8>
 802082c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802082e:	07da      	lsls	r2, r3, #31
 8020830:	d4d2      	bmi.n	80207d8 <_ftello_r+0x38>
 8020832:	89a3      	ldrh	r3, [r4, #12]
 8020834:	059b      	lsls	r3, r3, #22
 8020836:	d4cf      	bmi.n	80207d8 <_ftello_r+0x38>
 8020838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802083a:	f000 f982 	bl	8020b42 <__retarget_lock_release_recursive>
 802083e:	e7cd      	b.n	80207dc <_ftello_r+0x3c>
 8020840:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020844:	d00f      	beq.n	8020866 <_ftello_r+0xc6>
 8020846:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8020848:	89a2      	ldrh	r2, [r4, #12]
 802084a:	0756      	lsls	r6, r2, #29
 802084c:	d50d      	bpl.n	802086a <_ftello_r+0xca>
 802084e:	6863      	ldr	r3, [r4, #4]
 8020850:	1aed      	subs	r5, r5, r3
 8020852:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020854:	b10b      	cbz	r3, 802085a <_ftello_r+0xba>
 8020856:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020858:	1aed      	subs	r5, r5, r3
 802085a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802085c:	07d9      	lsls	r1, r3, #31
 802085e:	d4bd      	bmi.n	80207dc <_ftello_r+0x3c>
 8020860:	0593      	lsls	r3, r2, #22
 8020862:	d4bb      	bmi.n	80207dc <_ftello_r+0x3c>
 8020864:	e7e8      	b.n	8020838 <_ftello_r+0x98>
 8020866:	2301      	movs	r3, #1
 8020868:	e7da      	b.n	8020820 <_ftello_r+0x80>
 802086a:	0710      	lsls	r0, r2, #28
 802086c:	d5f5      	bpl.n	802085a <_ftello_r+0xba>
 802086e:	6823      	ldr	r3, [r4, #0]
 8020870:	2b00      	cmp	r3, #0
 8020872:	d0f2      	beq.n	802085a <_ftello_r+0xba>
 8020874:	6921      	ldr	r1, [r4, #16]
 8020876:	1a5b      	subs	r3, r3, r1
 8020878:	441d      	add	r5, r3
 802087a:	e7ee      	b.n	802085a <_ftello_r+0xba>
 802087c:	08029cbc 	.word	0x08029cbc
 8020880:	08029cdc 	.word	0x08029cdc
 8020884:	08029c9c 	.word	0x08029c9c

08020888 <_fwalk_reent>:
 8020888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802088c:	4606      	mov	r6, r0
 802088e:	4688      	mov	r8, r1
 8020890:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020894:	2700      	movs	r7, #0
 8020896:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802089a:	f1b9 0901 	subs.w	r9, r9, #1
 802089e:	d505      	bpl.n	80208ac <_fwalk_reent+0x24>
 80208a0:	6824      	ldr	r4, [r4, #0]
 80208a2:	2c00      	cmp	r4, #0
 80208a4:	d1f7      	bne.n	8020896 <_fwalk_reent+0xe>
 80208a6:	4638      	mov	r0, r7
 80208a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80208ac:	89ab      	ldrh	r3, [r5, #12]
 80208ae:	2b01      	cmp	r3, #1
 80208b0:	d907      	bls.n	80208c2 <_fwalk_reent+0x3a>
 80208b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80208b6:	3301      	adds	r3, #1
 80208b8:	d003      	beq.n	80208c2 <_fwalk_reent+0x3a>
 80208ba:	4629      	mov	r1, r5
 80208bc:	4630      	mov	r0, r6
 80208be:	47c0      	blx	r8
 80208c0:	4307      	orrs	r7, r0
 80208c2:	3568      	adds	r5, #104	; 0x68
 80208c4:	e7e9      	b.n	802089a <_fwalk_reent+0x12>
	...

080208c8 <__libc_init_array>:
 80208c8:	b570      	push	{r4, r5, r6, lr}
 80208ca:	4d0d      	ldr	r5, [pc, #52]	; (8020900 <__libc_init_array+0x38>)
 80208cc:	4c0d      	ldr	r4, [pc, #52]	; (8020904 <__libc_init_array+0x3c>)
 80208ce:	1b64      	subs	r4, r4, r5
 80208d0:	10a4      	asrs	r4, r4, #2
 80208d2:	2600      	movs	r6, #0
 80208d4:	42a6      	cmp	r6, r4
 80208d6:	d109      	bne.n	80208ec <__libc_init_array+0x24>
 80208d8:	4d0b      	ldr	r5, [pc, #44]	; (8020908 <__libc_init_array+0x40>)
 80208da:	4c0c      	ldr	r4, [pc, #48]	; (802090c <__libc_init_array+0x44>)
 80208dc:	f003 f8d6 	bl	8023a8c <_init>
 80208e0:	1b64      	subs	r4, r4, r5
 80208e2:	10a4      	asrs	r4, r4, #2
 80208e4:	2600      	movs	r6, #0
 80208e6:	42a6      	cmp	r6, r4
 80208e8:	d105      	bne.n	80208f6 <__libc_init_array+0x2e>
 80208ea:	bd70      	pop	{r4, r5, r6, pc}
 80208ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80208f0:	4798      	blx	r3
 80208f2:	3601      	adds	r6, #1
 80208f4:	e7ee      	b.n	80208d4 <__libc_init_array+0xc>
 80208f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80208fa:	4798      	blx	r3
 80208fc:	3601      	adds	r6, #1
 80208fe:	e7f2      	b.n	80208e6 <__libc_init_array+0x1e>
 8020900:	0802a294 	.word	0x0802a294
 8020904:	0802a294 	.word	0x0802a294
 8020908:	0802a294 	.word	0x0802a294
 802090c:	0802a2a8 	.word	0x0802a2a8

08020910 <localtime>:
 8020910:	b538      	push	{r3, r4, r5, lr}
 8020912:	4b0b      	ldr	r3, [pc, #44]	; (8020940 <localtime+0x30>)
 8020914:	681d      	ldr	r5, [r3, #0]
 8020916:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8020918:	4604      	mov	r4, r0
 802091a:	b953      	cbnz	r3, 8020932 <localtime+0x22>
 802091c:	2024      	movs	r0, #36	; 0x24
 802091e:	f000 f975 	bl	8020c0c <malloc>
 8020922:	4602      	mov	r2, r0
 8020924:	63e8      	str	r0, [r5, #60]	; 0x3c
 8020926:	b920      	cbnz	r0, 8020932 <localtime+0x22>
 8020928:	4b06      	ldr	r3, [pc, #24]	; (8020944 <localtime+0x34>)
 802092a:	4807      	ldr	r0, [pc, #28]	; (8020948 <localtime+0x38>)
 802092c:	2132      	movs	r1, #50	; 0x32
 802092e:	f001 fde1 	bl	80224f4 <__assert_func>
 8020932:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8020934:	4620      	mov	r0, r4
 8020936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802093a:	f000 b807 	b.w	802094c <localtime_r>
 802093e:	bf00      	nop
 8020940:	20000108 	.word	0x20000108
 8020944:	08029d00 	.word	0x08029d00
 8020948:	08029d17 	.word	0x08029d17

0802094c <localtime_r>:
 802094c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8020950:	4607      	mov	r7, r0
 8020952:	9101      	str	r1, [sp, #4]
 8020954:	f001 fe98 	bl	8022688 <__gettzinfo>
 8020958:	9901      	ldr	r1, [sp, #4]
 802095a:	4680      	mov	r8, r0
 802095c:	4638      	mov	r0, r7
 802095e:	f001 fe97 	bl	8022690 <gmtime_r>
 8020962:	6943      	ldr	r3, [r0, #20]
 8020964:	079a      	lsls	r2, r3, #30
 8020966:	4604      	mov	r4, r0
 8020968:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 802096c:	d105      	bne.n	802097a <localtime_r+0x2e>
 802096e:	2264      	movs	r2, #100	; 0x64
 8020970:	fb96 f3f2 	sdiv	r3, r6, r2
 8020974:	fb02 6313 	mls	r3, r2, r3, r6
 8020978:	bb7b      	cbnz	r3, 80209da <localtime_r+0x8e>
 802097a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802097e:	fb96 f5f3 	sdiv	r5, r6, r3
 8020982:	fb03 6515 	mls	r5, r3, r5, r6
 8020986:	fab5 f585 	clz	r5, r5
 802098a:	096d      	lsrs	r5, r5, #5
 802098c:	4b68      	ldr	r3, [pc, #416]	; (8020b30 <localtime_r+0x1e4>)
 802098e:	2230      	movs	r2, #48	; 0x30
 8020990:	fb02 3505 	mla	r5, r2, r5, r3
 8020994:	f001 faae 	bl	8021ef4 <__tz_lock>
 8020998:	f001 fab8 	bl	8021f0c <_tzset_unlocked>
 802099c:	4b65      	ldr	r3, [pc, #404]	; (8020b34 <localtime_r+0x1e8>)
 802099e:	681b      	ldr	r3, [r3, #0]
 80209a0:	b353      	cbz	r3, 80209f8 <localtime_r+0xac>
 80209a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80209a6:	42b3      	cmp	r3, r6
 80209a8:	d119      	bne.n	80209de <localtime_r+0x92>
 80209aa:	f8d8 1000 	ldr.w	r1, [r8]
 80209ae:	e9d7 6700 	ldrd	r6, r7, [r7]
 80209b2:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80209b6:	b9d1      	cbnz	r1, 80209ee <localtime_r+0xa2>
 80209b8:	4296      	cmp	r6, r2
 80209ba:	eb77 0303 	sbcs.w	r3, r7, r3
 80209be:	da23      	bge.n	8020a08 <localtime_r+0xbc>
 80209c0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80209c4:	4296      	cmp	r6, r2
 80209c6:	eb77 0303 	sbcs.w	r3, r7, r3
 80209ca:	bfb4      	ite	lt
 80209cc:	2301      	movlt	r3, #1
 80209ce:	2300      	movge	r3, #0
 80209d0:	6223      	str	r3, [r4, #32]
 80209d2:	db1b      	blt.n	8020a0c <localtime_r+0xc0>
 80209d4:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80209d8:	e01a      	b.n	8020a10 <localtime_r+0xc4>
 80209da:	2501      	movs	r5, #1
 80209dc:	e7d6      	b.n	802098c <localtime_r+0x40>
 80209de:	4630      	mov	r0, r6
 80209e0:	f001 f9e0 	bl	8021da4 <__tzcalc_limits>
 80209e4:	2800      	cmp	r0, #0
 80209e6:	d1e0      	bne.n	80209aa <localtime_r+0x5e>
 80209e8:	f04f 33ff 	mov.w	r3, #4294967295
 80209ec:	e004      	b.n	80209f8 <localtime_r+0xac>
 80209ee:	4296      	cmp	r6, r2
 80209f0:	eb77 0303 	sbcs.w	r3, r7, r3
 80209f4:	da02      	bge.n	80209fc <localtime_r+0xb0>
 80209f6:	2300      	movs	r3, #0
 80209f8:	6223      	str	r3, [r4, #32]
 80209fa:	e7eb      	b.n	80209d4 <localtime_r+0x88>
 80209fc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8020a00:	4296      	cmp	r6, r2
 8020a02:	eb77 0303 	sbcs.w	r3, r7, r3
 8020a06:	daf6      	bge.n	80209f6 <localtime_r+0xaa>
 8020a08:	2301      	movs	r3, #1
 8020a0a:	6223      	str	r3, [r4, #32]
 8020a0c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8020a10:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8020a14:	203c      	movs	r0, #60	; 0x3c
 8020a16:	fb91 f6f3 	sdiv	r6, r1, r3
 8020a1a:	fb03 1316 	mls	r3, r3, r6, r1
 8020a1e:	6861      	ldr	r1, [r4, #4]
 8020a20:	fb93 f2f0 	sdiv	r2, r3, r0
 8020a24:	fb00 3012 	mls	r0, r0, r2, r3
 8020a28:	6823      	ldr	r3, [r4, #0]
 8020a2a:	1a89      	subs	r1, r1, r2
 8020a2c:	68a2      	ldr	r2, [r4, #8]
 8020a2e:	6061      	str	r1, [r4, #4]
 8020a30:	1a1b      	subs	r3, r3, r0
 8020a32:	1b92      	subs	r2, r2, r6
 8020a34:	2b3b      	cmp	r3, #59	; 0x3b
 8020a36:	6023      	str	r3, [r4, #0]
 8020a38:	60a2      	str	r2, [r4, #8]
 8020a3a:	dd35      	ble.n	8020aa8 <localtime_r+0x15c>
 8020a3c:	3101      	adds	r1, #1
 8020a3e:	6061      	str	r1, [r4, #4]
 8020a40:	3b3c      	subs	r3, #60	; 0x3c
 8020a42:	6023      	str	r3, [r4, #0]
 8020a44:	6863      	ldr	r3, [r4, #4]
 8020a46:	2b3b      	cmp	r3, #59	; 0x3b
 8020a48:	dd34      	ble.n	8020ab4 <localtime_r+0x168>
 8020a4a:	3201      	adds	r2, #1
 8020a4c:	60a2      	str	r2, [r4, #8]
 8020a4e:	3b3c      	subs	r3, #60	; 0x3c
 8020a50:	6063      	str	r3, [r4, #4]
 8020a52:	68a3      	ldr	r3, [r4, #8]
 8020a54:	2b17      	cmp	r3, #23
 8020a56:	dd33      	ble.n	8020ac0 <localtime_r+0x174>
 8020a58:	69e2      	ldr	r2, [r4, #28]
 8020a5a:	3201      	adds	r2, #1
 8020a5c:	61e2      	str	r2, [r4, #28]
 8020a5e:	69a2      	ldr	r2, [r4, #24]
 8020a60:	3201      	adds	r2, #1
 8020a62:	2a06      	cmp	r2, #6
 8020a64:	bfc8      	it	gt
 8020a66:	2200      	movgt	r2, #0
 8020a68:	61a2      	str	r2, [r4, #24]
 8020a6a:	68e2      	ldr	r2, [r4, #12]
 8020a6c:	3b18      	subs	r3, #24
 8020a6e:	3201      	adds	r2, #1
 8020a70:	60a3      	str	r3, [r4, #8]
 8020a72:	6923      	ldr	r3, [r4, #16]
 8020a74:	60e2      	str	r2, [r4, #12]
 8020a76:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8020a7a:	428a      	cmp	r2, r1
 8020a7c:	dd0e      	ble.n	8020a9c <localtime_r+0x150>
 8020a7e:	2b0b      	cmp	r3, #11
 8020a80:	eba2 0201 	sub.w	r2, r2, r1
 8020a84:	60e2      	str	r2, [r4, #12]
 8020a86:	f103 0201 	add.w	r2, r3, #1
 8020a8a:	bf09      	itett	eq
 8020a8c:	6963      	ldreq	r3, [r4, #20]
 8020a8e:	6122      	strne	r2, [r4, #16]
 8020a90:	2200      	moveq	r2, #0
 8020a92:	3301      	addeq	r3, #1
 8020a94:	bf02      	ittt	eq
 8020a96:	6122      	streq	r2, [r4, #16]
 8020a98:	6163      	streq	r3, [r4, #20]
 8020a9a:	61e2      	streq	r2, [r4, #28]
 8020a9c:	f001 fa30 	bl	8021f00 <__tz_unlock>
 8020aa0:	4620      	mov	r0, r4
 8020aa2:	b002      	add	sp, #8
 8020aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020aa8:	2b00      	cmp	r3, #0
 8020aaa:	dacb      	bge.n	8020a44 <localtime_r+0xf8>
 8020aac:	3901      	subs	r1, #1
 8020aae:	6061      	str	r1, [r4, #4]
 8020ab0:	333c      	adds	r3, #60	; 0x3c
 8020ab2:	e7c6      	b.n	8020a42 <localtime_r+0xf6>
 8020ab4:	2b00      	cmp	r3, #0
 8020ab6:	dacc      	bge.n	8020a52 <localtime_r+0x106>
 8020ab8:	3a01      	subs	r2, #1
 8020aba:	60a2      	str	r2, [r4, #8]
 8020abc:	333c      	adds	r3, #60	; 0x3c
 8020abe:	e7c7      	b.n	8020a50 <localtime_r+0x104>
 8020ac0:	2b00      	cmp	r3, #0
 8020ac2:	daeb      	bge.n	8020a9c <localtime_r+0x150>
 8020ac4:	69e2      	ldr	r2, [r4, #28]
 8020ac6:	3a01      	subs	r2, #1
 8020ac8:	61e2      	str	r2, [r4, #28]
 8020aca:	69a2      	ldr	r2, [r4, #24]
 8020acc:	3a01      	subs	r2, #1
 8020ace:	bf48      	it	mi
 8020ad0:	2206      	movmi	r2, #6
 8020ad2:	61a2      	str	r2, [r4, #24]
 8020ad4:	68e2      	ldr	r2, [r4, #12]
 8020ad6:	3318      	adds	r3, #24
 8020ad8:	3a01      	subs	r2, #1
 8020ada:	60e2      	str	r2, [r4, #12]
 8020adc:	60a3      	str	r3, [r4, #8]
 8020ade:	2a00      	cmp	r2, #0
 8020ae0:	d1dc      	bne.n	8020a9c <localtime_r+0x150>
 8020ae2:	6923      	ldr	r3, [r4, #16]
 8020ae4:	3b01      	subs	r3, #1
 8020ae6:	d405      	bmi.n	8020af4 <localtime_r+0x1a8>
 8020ae8:	6123      	str	r3, [r4, #16]
 8020aea:	6923      	ldr	r3, [r4, #16]
 8020aec:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020af0:	60e3      	str	r3, [r4, #12]
 8020af2:	e7d3      	b.n	8020a9c <localtime_r+0x150>
 8020af4:	230b      	movs	r3, #11
 8020af6:	6123      	str	r3, [r4, #16]
 8020af8:	6963      	ldr	r3, [r4, #20]
 8020afa:	1e5a      	subs	r2, r3, #1
 8020afc:	6162      	str	r2, [r4, #20]
 8020afe:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8020b02:	0793      	lsls	r3, r2, #30
 8020b04:	d105      	bne.n	8020b12 <localtime_r+0x1c6>
 8020b06:	2164      	movs	r1, #100	; 0x64
 8020b08:	fb92 f3f1 	sdiv	r3, r2, r1
 8020b0c:	fb01 2313 	mls	r3, r1, r3, r2
 8020b10:	b963      	cbnz	r3, 8020b2c <localtime_r+0x1e0>
 8020b12:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8020b16:	fb92 f3f1 	sdiv	r3, r2, r1
 8020b1a:	fb01 2313 	mls	r3, r1, r3, r2
 8020b1e:	fab3 f383 	clz	r3, r3
 8020b22:	095b      	lsrs	r3, r3, #5
 8020b24:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8020b28:	61e3      	str	r3, [r4, #28]
 8020b2a:	e7de      	b.n	8020aea <localtime_r+0x19e>
 8020b2c:	2301      	movs	r3, #1
 8020b2e:	e7f9      	b.n	8020b24 <localtime_r+0x1d8>
 8020b30:	08029d78 	.word	0x08029d78
 8020b34:	20000f6c 	.word	0x20000f6c

08020b38 <__retarget_lock_init_recursive>:
 8020b38:	4770      	bx	lr

08020b3a <__retarget_lock_close_recursive>:
 8020b3a:	4770      	bx	lr

08020b3c <__retarget_lock_acquire>:
 8020b3c:	4770      	bx	lr

08020b3e <__retarget_lock_acquire_recursive>:
 8020b3e:	4770      	bx	lr

08020b40 <__retarget_lock_release>:
 8020b40:	4770      	bx	lr

08020b42 <__retarget_lock_release_recursive>:
 8020b42:	4770      	bx	lr

08020b44 <__swhatbuf_r>:
 8020b44:	b570      	push	{r4, r5, r6, lr}
 8020b46:	460e      	mov	r6, r1
 8020b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020b4c:	2900      	cmp	r1, #0
 8020b4e:	b096      	sub	sp, #88	; 0x58
 8020b50:	4614      	mov	r4, r2
 8020b52:	461d      	mov	r5, r3
 8020b54:	da07      	bge.n	8020b66 <__swhatbuf_r+0x22>
 8020b56:	2300      	movs	r3, #0
 8020b58:	602b      	str	r3, [r5, #0]
 8020b5a:	89b3      	ldrh	r3, [r6, #12]
 8020b5c:	061a      	lsls	r2, r3, #24
 8020b5e:	d410      	bmi.n	8020b82 <__swhatbuf_r+0x3e>
 8020b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020b64:	e00e      	b.n	8020b84 <__swhatbuf_r+0x40>
 8020b66:	466a      	mov	r2, sp
 8020b68:	f001 fd3a 	bl	80225e0 <_fstat_r>
 8020b6c:	2800      	cmp	r0, #0
 8020b6e:	dbf2      	blt.n	8020b56 <__swhatbuf_r+0x12>
 8020b70:	9a01      	ldr	r2, [sp, #4]
 8020b72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020b76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020b7a:	425a      	negs	r2, r3
 8020b7c:	415a      	adcs	r2, r3
 8020b7e:	602a      	str	r2, [r5, #0]
 8020b80:	e7ee      	b.n	8020b60 <__swhatbuf_r+0x1c>
 8020b82:	2340      	movs	r3, #64	; 0x40
 8020b84:	2000      	movs	r0, #0
 8020b86:	6023      	str	r3, [r4, #0]
 8020b88:	b016      	add	sp, #88	; 0x58
 8020b8a:	bd70      	pop	{r4, r5, r6, pc}

08020b8c <__smakebuf_r>:
 8020b8c:	898b      	ldrh	r3, [r1, #12]
 8020b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020b90:	079d      	lsls	r5, r3, #30
 8020b92:	4606      	mov	r6, r0
 8020b94:	460c      	mov	r4, r1
 8020b96:	d507      	bpl.n	8020ba8 <__smakebuf_r+0x1c>
 8020b98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020b9c:	6023      	str	r3, [r4, #0]
 8020b9e:	6123      	str	r3, [r4, #16]
 8020ba0:	2301      	movs	r3, #1
 8020ba2:	6163      	str	r3, [r4, #20]
 8020ba4:	b002      	add	sp, #8
 8020ba6:	bd70      	pop	{r4, r5, r6, pc}
 8020ba8:	ab01      	add	r3, sp, #4
 8020baa:	466a      	mov	r2, sp
 8020bac:	f7ff ffca 	bl	8020b44 <__swhatbuf_r>
 8020bb0:	9900      	ldr	r1, [sp, #0]
 8020bb2:	4605      	mov	r5, r0
 8020bb4:	4630      	mov	r0, r6
 8020bb6:	f000 f8af 	bl	8020d18 <_malloc_r>
 8020bba:	b948      	cbnz	r0, 8020bd0 <__smakebuf_r+0x44>
 8020bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020bc0:	059a      	lsls	r2, r3, #22
 8020bc2:	d4ef      	bmi.n	8020ba4 <__smakebuf_r+0x18>
 8020bc4:	f023 0303 	bic.w	r3, r3, #3
 8020bc8:	f043 0302 	orr.w	r3, r3, #2
 8020bcc:	81a3      	strh	r3, [r4, #12]
 8020bce:	e7e3      	b.n	8020b98 <__smakebuf_r+0xc>
 8020bd0:	4b0d      	ldr	r3, [pc, #52]	; (8020c08 <__smakebuf_r+0x7c>)
 8020bd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8020bd4:	89a3      	ldrh	r3, [r4, #12]
 8020bd6:	6020      	str	r0, [r4, #0]
 8020bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020bdc:	81a3      	strh	r3, [r4, #12]
 8020bde:	9b00      	ldr	r3, [sp, #0]
 8020be0:	6163      	str	r3, [r4, #20]
 8020be2:	9b01      	ldr	r3, [sp, #4]
 8020be4:	6120      	str	r0, [r4, #16]
 8020be6:	b15b      	cbz	r3, 8020c00 <__smakebuf_r+0x74>
 8020be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020bec:	4630      	mov	r0, r6
 8020bee:	f001 fdff 	bl	80227f0 <_isatty_r>
 8020bf2:	b128      	cbz	r0, 8020c00 <__smakebuf_r+0x74>
 8020bf4:	89a3      	ldrh	r3, [r4, #12]
 8020bf6:	f023 0303 	bic.w	r3, r3, #3
 8020bfa:	f043 0301 	orr.w	r3, r3, #1
 8020bfe:	81a3      	strh	r3, [r4, #12]
 8020c00:	89a0      	ldrh	r0, [r4, #12]
 8020c02:	4305      	orrs	r5, r0
 8020c04:	81a5      	strh	r5, [r4, #12]
 8020c06:	e7cd      	b.n	8020ba4 <__smakebuf_r+0x18>
 8020c08:	08020371 	.word	0x08020371

08020c0c <malloc>:
 8020c0c:	4b02      	ldr	r3, [pc, #8]	; (8020c18 <malloc+0xc>)
 8020c0e:	4601      	mov	r1, r0
 8020c10:	6818      	ldr	r0, [r3, #0]
 8020c12:	f000 b881 	b.w	8020d18 <_malloc_r>
 8020c16:	bf00      	nop
 8020c18:	20000108 	.word	0x20000108

08020c1c <free>:
 8020c1c:	4b02      	ldr	r3, [pc, #8]	; (8020c28 <free+0xc>)
 8020c1e:	4601      	mov	r1, r0
 8020c20:	6818      	ldr	r0, [r3, #0]
 8020c22:	f000 b829 	b.w	8020c78 <_free_r>
 8020c26:	bf00      	nop
 8020c28:	20000108 	.word	0x20000108

08020c2c <memcpy>:
 8020c2c:	440a      	add	r2, r1
 8020c2e:	4291      	cmp	r1, r2
 8020c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8020c34:	d100      	bne.n	8020c38 <memcpy+0xc>
 8020c36:	4770      	bx	lr
 8020c38:	b510      	push	{r4, lr}
 8020c3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020c3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020c42:	4291      	cmp	r1, r2
 8020c44:	d1f9      	bne.n	8020c3a <memcpy+0xe>
 8020c46:	bd10      	pop	{r4, pc}

08020c48 <memset>:
 8020c48:	4402      	add	r2, r0
 8020c4a:	4603      	mov	r3, r0
 8020c4c:	4293      	cmp	r3, r2
 8020c4e:	d100      	bne.n	8020c52 <memset+0xa>
 8020c50:	4770      	bx	lr
 8020c52:	f803 1b01 	strb.w	r1, [r3], #1
 8020c56:	e7f9      	b.n	8020c4c <memset+0x4>

08020c58 <_calloc_r>:
 8020c58:	b513      	push	{r0, r1, r4, lr}
 8020c5a:	434a      	muls	r2, r1
 8020c5c:	4611      	mov	r1, r2
 8020c5e:	9201      	str	r2, [sp, #4]
 8020c60:	f000 f85a 	bl	8020d18 <_malloc_r>
 8020c64:	4604      	mov	r4, r0
 8020c66:	b118      	cbz	r0, 8020c70 <_calloc_r+0x18>
 8020c68:	9a01      	ldr	r2, [sp, #4]
 8020c6a:	2100      	movs	r1, #0
 8020c6c:	f7ff ffec 	bl	8020c48 <memset>
 8020c70:	4620      	mov	r0, r4
 8020c72:	b002      	add	sp, #8
 8020c74:	bd10      	pop	{r4, pc}
	...

08020c78 <_free_r>:
 8020c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020c7a:	2900      	cmp	r1, #0
 8020c7c:	d048      	beq.n	8020d10 <_free_r+0x98>
 8020c7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020c82:	9001      	str	r0, [sp, #4]
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	f1a1 0404 	sub.w	r4, r1, #4
 8020c8a:	bfb8      	it	lt
 8020c8c:	18e4      	addlt	r4, r4, r3
 8020c8e:	f001 fde7 	bl	8022860 <__malloc_lock>
 8020c92:	4a20      	ldr	r2, [pc, #128]	; (8020d14 <_free_r+0x9c>)
 8020c94:	9801      	ldr	r0, [sp, #4]
 8020c96:	6813      	ldr	r3, [r2, #0]
 8020c98:	4615      	mov	r5, r2
 8020c9a:	b933      	cbnz	r3, 8020caa <_free_r+0x32>
 8020c9c:	6063      	str	r3, [r4, #4]
 8020c9e:	6014      	str	r4, [r2, #0]
 8020ca0:	b003      	add	sp, #12
 8020ca2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020ca6:	f001 bde1 	b.w	802286c <__malloc_unlock>
 8020caa:	42a3      	cmp	r3, r4
 8020cac:	d90b      	bls.n	8020cc6 <_free_r+0x4e>
 8020cae:	6821      	ldr	r1, [r4, #0]
 8020cb0:	1862      	adds	r2, r4, r1
 8020cb2:	4293      	cmp	r3, r2
 8020cb4:	bf04      	itt	eq
 8020cb6:	681a      	ldreq	r2, [r3, #0]
 8020cb8:	685b      	ldreq	r3, [r3, #4]
 8020cba:	6063      	str	r3, [r4, #4]
 8020cbc:	bf04      	itt	eq
 8020cbe:	1852      	addeq	r2, r2, r1
 8020cc0:	6022      	streq	r2, [r4, #0]
 8020cc2:	602c      	str	r4, [r5, #0]
 8020cc4:	e7ec      	b.n	8020ca0 <_free_r+0x28>
 8020cc6:	461a      	mov	r2, r3
 8020cc8:	685b      	ldr	r3, [r3, #4]
 8020cca:	b10b      	cbz	r3, 8020cd0 <_free_r+0x58>
 8020ccc:	42a3      	cmp	r3, r4
 8020cce:	d9fa      	bls.n	8020cc6 <_free_r+0x4e>
 8020cd0:	6811      	ldr	r1, [r2, #0]
 8020cd2:	1855      	adds	r5, r2, r1
 8020cd4:	42a5      	cmp	r5, r4
 8020cd6:	d10b      	bne.n	8020cf0 <_free_r+0x78>
 8020cd8:	6824      	ldr	r4, [r4, #0]
 8020cda:	4421      	add	r1, r4
 8020cdc:	1854      	adds	r4, r2, r1
 8020cde:	42a3      	cmp	r3, r4
 8020ce0:	6011      	str	r1, [r2, #0]
 8020ce2:	d1dd      	bne.n	8020ca0 <_free_r+0x28>
 8020ce4:	681c      	ldr	r4, [r3, #0]
 8020ce6:	685b      	ldr	r3, [r3, #4]
 8020ce8:	6053      	str	r3, [r2, #4]
 8020cea:	4421      	add	r1, r4
 8020cec:	6011      	str	r1, [r2, #0]
 8020cee:	e7d7      	b.n	8020ca0 <_free_r+0x28>
 8020cf0:	d902      	bls.n	8020cf8 <_free_r+0x80>
 8020cf2:	230c      	movs	r3, #12
 8020cf4:	6003      	str	r3, [r0, #0]
 8020cf6:	e7d3      	b.n	8020ca0 <_free_r+0x28>
 8020cf8:	6825      	ldr	r5, [r4, #0]
 8020cfa:	1961      	adds	r1, r4, r5
 8020cfc:	428b      	cmp	r3, r1
 8020cfe:	bf04      	itt	eq
 8020d00:	6819      	ldreq	r1, [r3, #0]
 8020d02:	685b      	ldreq	r3, [r3, #4]
 8020d04:	6063      	str	r3, [r4, #4]
 8020d06:	bf04      	itt	eq
 8020d08:	1949      	addeq	r1, r1, r5
 8020d0a:	6021      	streq	r1, [r4, #0]
 8020d0c:	6054      	str	r4, [r2, #4]
 8020d0e:	e7c7      	b.n	8020ca0 <_free_r+0x28>
 8020d10:	b003      	add	sp, #12
 8020d12:	bd30      	pop	{r4, r5, pc}
 8020d14:	20000f48 	.word	0x20000f48

08020d18 <_malloc_r>:
 8020d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d1a:	1ccd      	adds	r5, r1, #3
 8020d1c:	f025 0503 	bic.w	r5, r5, #3
 8020d20:	3508      	adds	r5, #8
 8020d22:	2d0c      	cmp	r5, #12
 8020d24:	bf38      	it	cc
 8020d26:	250c      	movcc	r5, #12
 8020d28:	2d00      	cmp	r5, #0
 8020d2a:	4606      	mov	r6, r0
 8020d2c:	db01      	blt.n	8020d32 <_malloc_r+0x1a>
 8020d2e:	42a9      	cmp	r1, r5
 8020d30:	d903      	bls.n	8020d3a <_malloc_r+0x22>
 8020d32:	230c      	movs	r3, #12
 8020d34:	6033      	str	r3, [r6, #0]
 8020d36:	2000      	movs	r0, #0
 8020d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020d3a:	f001 fd91 	bl	8022860 <__malloc_lock>
 8020d3e:	4921      	ldr	r1, [pc, #132]	; (8020dc4 <_malloc_r+0xac>)
 8020d40:	680a      	ldr	r2, [r1, #0]
 8020d42:	4614      	mov	r4, r2
 8020d44:	b99c      	cbnz	r4, 8020d6e <_malloc_r+0x56>
 8020d46:	4f20      	ldr	r7, [pc, #128]	; (8020dc8 <_malloc_r+0xb0>)
 8020d48:	683b      	ldr	r3, [r7, #0]
 8020d4a:	b923      	cbnz	r3, 8020d56 <_malloc_r+0x3e>
 8020d4c:	4621      	mov	r1, r4
 8020d4e:	4630      	mov	r0, r6
 8020d50:	f000 f8da 	bl	8020f08 <_sbrk_r>
 8020d54:	6038      	str	r0, [r7, #0]
 8020d56:	4629      	mov	r1, r5
 8020d58:	4630      	mov	r0, r6
 8020d5a:	f000 f8d5 	bl	8020f08 <_sbrk_r>
 8020d5e:	1c43      	adds	r3, r0, #1
 8020d60:	d123      	bne.n	8020daa <_malloc_r+0x92>
 8020d62:	230c      	movs	r3, #12
 8020d64:	6033      	str	r3, [r6, #0]
 8020d66:	4630      	mov	r0, r6
 8020d68:	f001 fd80 	bl	802286c <__malloc_unlock>
 8020d6c:	e7e3      	b.n	8020d36 <_malloc_r+0x1e>
 8020d6e:	6823      	ldr	r3, [r4, #0]
 8020d70:	1b5b      	subs	r3, r3, r5
 8020d72:	d417      	bmi.n	8020da4 <_malloc_r+0x8c>
 8020d74:	2b0b      	cmp	r3, #11
 8020d76:	d903      	bls.n	8020d80 <_malloc_r+0x68>
 8020d78:	6023      	str	r3, [r4, #0]
 8020d7a:	441c      	add	r4, r3
 8020d7c:	6025      	str	r5, [r4, #0]
 8020d7e:	e004      	b.n	8020d8a <_malloc_r+0x72>
 8020d80:	6863      	ldr	r3, [r4, #4]
 8020d82:	42a2      	cmp	r2, r4
 8020d84:	bf0c      	ite	eq
 8020d86:	600b      	streq	r3, [r1, #0]
 8020d88:	6053      	strne	r3, [r2, #4]
 8020d8a:	4630      	mov	r0, r6
 8020d8c:	f001 fd6e 	bl	802286c <__malloc_unlock>
 8020d90:	f104 000b 	add.w	r0, r4, #11
 8020d94:	1d23      	adds	r3, r4, #4
 8020d96:	f020 0007 	bic.w	r0, r0, #7
 8020d9a:	1ac2      	subs	r2, r0, r3
 8020d9c:	d0cc      	beq.n	8020d38 <_malloc_r+0x20>
 8020d9e:	1a1b      	subs	r3, r3, r0
 8020da0:	50a3      	str	r3, [r4, r2]
 8020da2:	e7c9      	b.n	8020d38 <_malloc_r+0x20>
 8020da4:	4622      	mov	r2, r4
 8020da6:	6864      	ldr	r4, [r4, #4]
 8020da8:	e7cc      	b.n	8020d44 <_malloc_r+0x2c>
 8020daa:	1cc4      	adds	r4, r0, #3
 8020dac:	f024 0403 	bic.w	r4, r4, #3
 8020db0:	42a0      	cmp	r0, r4
 8020db2:	d0e3      	beq.n	8020d7c <_malloc_r+0x64>
 8020db4:	1a21      	subs	r1, r4, r0
 8020db6:	4630      	mov	r0, r6
 8020db8:	f000 f8a6 	bl	8020f08 <_sbrk_r>
 8020dbc:	3001      	adds	r0, #1
 8020dbe:	d1dd      	bne.n	8020d7c <_malloc_r+0x64>
 8020dc0:	e7cf      	b.n	8020d62 <_malloc_r+0x4a>
 8020dc2:	bf00      	nop
 8020dc4:	20000f48 	.word	0x20000f48
 8020dc8:	20000f4c 	.word	0x20000f4c

08020dcc <_open_r>:
 8020dcc:	b538      	push	{r3, r4, r5, lr}
 8020dce:	4d07      	ldr	r5, [pc, #28]	; (8020dec <_open_r+0x20>)
 8020dd0:	4604      	mov	r4, r0
 8020dd2:	4608      	mov	r0, r1
 8020dd4:	4611      	mov	r1, r2
 8020dd6:	2200      	movs	r2, #0
 8020dd8:	602a      	str	r2, [r5, #0]
 8020dda:	461a      	mov	r2, r3
 8020ddc:	f7e0 f880 	bl	8000ee0 <_open>
 8020de0:	1c43      	adds	r3, r0, #1
 8020de2:	d102      	bne.n	8020dea <_open_r+0x1e>
 8020de4:	682b      	ldr	r3, [r5, #0]
 8020de6:	b103      	cbz	r3, 8020dea <_open_r+0x1e>
 8020de8:	6023      	str	r3, [r4, #0]
 8020dea:	bd38      	pop	{r3, r4, r5, pc}
 8020dec:	20001014 	.word	0x20001014

08020df0 <putchar>:
 8020df0:	4b09      	ldr	r3, [pc, #36]	; (8020e18 <putchar+0x28>)
 8020df2:	b513      	push	{r0, r1, r4, lr}
 8020df4:	681c      	ldr	r4, [r3, #0]
 8020df6:	4601      	mov	r1, r0
 8020df8:	b134      	cbz	r4, 8020e08 <putchar+0x18>
 8020dfa:	69a3      	ldr	r3, [r4, #24]
 8020dfc:	b923      	cbnz	r3, 8020e08 <putchar+0x18>
 8020dfe:	9001      	str	r0, [sp, #4]
 8020e00:	4620      	mov	r0, r4
 8020e02:	f7ff fae9 	bl	80203d8 <__sinit>
 8020e06:	9901      	ldr	r1, [sp, #4]
 8020e08:	68a2      	ldr	r2, [r4, #8]
 8020e0a:	4620      	mov	r0, r4
 8020e0c:	b002      	add	sp, #8
 8020e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020e12:	f002 b9a1 	b.w	8023158 <_putc_r>
 8020e16:	bf00      	nop
 8020e18:	20000108 	.word	0x20000108

08020e1c <srand>:
 8020e1c:	b538      	push	{r3, r4, r5, lr}
 8020e1e:	4b10      	ldr	r3, [pc, #64]	; (8020e60 <srand+0x44>)
 8020e20:	681d      	ldr	r5, [r3, #0]
 8020e22:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8020e24:	4604      	mov	r4, r0
 8020e26:	b9b3      	cbnz	r3, 8020e56 <srand+0x3a>
 8020e28:	2018      	movs	r0, #24
 8020e2a:	f7ff feef 	bl	8020c0c <malloc>
 8020e2e:	4602      	mov	r2, r0
 8020e30:	63a8      	str	r0, [r5, #56]	; 0x38
 8020e32:	b920      	cbnz	r0, 8020e3e <srand+0x22>
 8020e34:	4b0b      	ldr	r3, [pc, #44]	; (8020e64 <srand+0x48>)
 8020e36:	480c      	ldr	r0, [pc, #48]	; (8020e68 <srand+0x4c>)
 8020e38:	2142      	movs	r1, #66	; 0x42
 8020e3a:	f001 fb5b 	bl	80224f4 <__assert_func>
 8020e3e:	490b      	ldr	r1, [pc, #44]	; (8020e6c <srand+0x50>)
 8020e40:	4b0b      	ldr	r3, [pc, #44]	; (8020e70 <srand+0x54>)
 8020e42:	e9c0 1300 	strd	r1, r3, [r0]
 8020e46:	4b0b      	ldr	r3, [pc, #44]	; (8020e74 <srand+0x58>)
 8020e48:	6083      	str	r3, [r0, #8]
 8020e4a:	230b      	movs	r3, #11
 8020e4c:	8183      	strh	r3, [r0, #12]
 8020e4e:	2100      	movs	r1, #0
 8020e50:	2001      	movs	r0, #1
 8020e52:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8020e56:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8020e58:	2200      	movs	r2, #0
 8020e5a:	611c      	str	r4, [r3, #16]
 8020e5c:	615a      	str	r2, [r3, #20]
 8020e5e:	bd38      	pop	{r3, r4, r5, pc}
 8020e60:	20000108 	.word	0x20000108
 8020e64:	08029d00 	.word	0x08029d00
 8020e68:	08029dd8 	.word	0x08029dd8
 8020e6c:	abcd330e 	.word	0xabcd330e
 8020e70:	e66d1234 	.word	0xe66d1234
 8020e74:	0005deec 	.word	0x0005deec

08020e78 <rand>:
 8020e78:	4b17      	ldr	r3, [pc, #92]	; (8020ed8 <rand+0x60>)
 8020e7a:	b510      	push	{r4, lr}
 8020e7c:	681c      	ldr	r4, [r3, #0]
 8020e7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020e80:	b9b3      	cbnz	r3, 8020eb0 <rand+0x38>
 8020e82:	2018      	movs	r0, #24
 8020e84:	f7ff fec2 	bl	8020c0c <malloc>
 8020e88:	63a0      	str	r0, [r4, #56]	; 0x38
 8020e8a:	b928      	cbnz	r0, 8020e98 <rand+0x20>
 8020e8c:	4602      	mov	r2, r0
 8020e8e:	4b13      	ldr	r3, [pc, #76]	; (8020edc <rand+0x64>)
 8020e90:	4813      	ldr	r0, [pc, #76]	; (8020ee0 <rand+0x68>)
 8020e92:	214e      	movs	r1, #78	; 0x4e
 8020e94:	f001 fb2e 	bl	80224f4 <__assert_func>
 8020e98:	4a12      	ldr	r2, [pc, #72]	; (8020ee4 <rand+0x6c>)
 8020e9a:	4b13      	ldr	r3, [pc, #76]	; (8020ee8 <rand+0x70>)
 8020e9c:	e9c0 2300 	strd	r2, r3, [r0]
 8020ea0:	4b12      	ldr	r3, [pc, #72]	; (8020eec <rand+0x74>)
 8020ea2:	6083      	str	r3, [r0, #8]
 8020ea4:	230b      	movs	r3, #11
 8020ea6:	8183      	strh	r3, [r0, #12]
 8020ea8:	2201      	movs	r2, #1
 8020eaa:	2300      	movs	r3, #0
 8020eac:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8020eb0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020eb2:	480f      	ldr	r0, [pc, #60]	; (8020ef0 <rand+0x78>)
 8020eb4:	690a      	ldr	r2, [r1, #16]
 8020eb6:	694b      	ldr	r3, [r1, #20]
 8020eb8:	4c0e      	ldr	r4, [pc, #56]	; (8020ef4 <rand+0x7c>)
 8020eba:	4350      	muls	r0, r2
 8020ebc:	fb04 0003 	mla	r0, r4, r3, r0
 8020ec0:	fba2 3404 	umull	r3, r4, r2, r4
 8020ec4:	1c5a      	adds	r2, r3, #1
 8020ec6:	4404      	add	r4, r0
 8020ec8:	f144 0000 	adc.w	r0, r4, #0
 8020ecc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8020ed0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8020ed4:	bd10      	pop	{r4, pc}
 8020ed6:	bf00      	nop
 8020ed8:	20000108 	.word	0x20000108
 8020edc:	08029d00 	.word	0x08029d00
 8020ee0:	08029dd8 	.word	0x08029dd8
 8020ee4:	abcd330e 	.word	0xabcd330e
 8020ee8:	e66d1234 	.word	0xe66d1234
 8020eec:	0005deec 	.word	0x0005deec
 8020ef0:	5851f42d 	.word	0x5851f42d
 8020ef4:	4c957f2d 	.word	0x4c957f2d

08020ef8 <realloc>:
 8020ef8:	4b02      	ldr	r3, [pc, #8]	; (8020f04 <realloc+0xc>)
 8020efa:	460a      	mov	r2, r1
 8020efc:	4601      	mov	r1, r0
 8020efe:	6818      	ldr	r0, [r3, #0]
 8020f00:	f001 bcba 	b.w	8022878 <_realloc_r>
 8020f04:	20000108 	.word	0x20000108

08020f08 <_sbrk_r>:
 8020f08:	b538      	push	{r3, r4, r5, lr}
 8020f0a:	4d06      	ldr	r5, [pc, #24]	; (8020f24 <_sbrk_r+0x1c>)
 8020f0c:	2300      	movs	r3, #0
 8020f0e:	4604      	mov	r4, r0
 8020f10:	4608      	mov	r0, r1
 8020f12:	602b      	str	r3, [r5, #0]
 8020f14:	f7df fff2 	bl	8000efc <_sbrk>
 8020f18:	1c43      	adds	r3, r0, #1
 8020f1a:	d102      	bne.n	8020f22 <_sbrk_r+0x1a>
 8020f1c:	682b      	ldr	r3, [r5, #0]
 8020f1e:	b103      	cbz	r3, 8020f22 <_sbrk_r+0x1a>
 8020f20:	6023      	str	r3, [r4, #0]
 8020f22:	bd38      	pop	{r3, r4, r5, pc}
 8020f24:	20001014 	.word	0x20001014

08020f28 <_raise_r>:
 8020f28:	291f      	cmp	r1, #31
 8020f2a:	b538      	push	{r3, r4, r5, lr}
 8020f2c:	4604      	mov	r4, r0
 8020f2e:	460d      	mov	r5, r1
 8020f30:	d904      	bls.n	8020f3c <_raise_r+0x14>
 8020f32:	2316      	movs	r3, #22
 8020f34:	6003      	str	r3, [r0, #0]
 8020f36:	f04f 30ff 	mov.w	r0, #4294967295
 8020f3a:	bd38      	pop	{r3, r4, r5, pc}
 8020f3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020f3e:	b112      	cbz	r2, 8020f46 <_raise_r+0x1e>
 8020f40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020f44:	b94b      	cbnz	r3, 8020f5a <_raise_r+0x32>
 8020f46:	4620      	mov	r0, r4
 8020f48:	f000 f830 	bl	8020fac <_getpid_r>
 8020f4c:	462a      	mov	r2, r5
 8020f4e:	4601      	mov	r1, r0
 8020f50:	4620      	mov	r0, r4
 8020f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020f56:	f000 b817 	b.w	8020f88 <_kill_r>
 8020f5a:	2b01      	cmp	r3, #1
 8020f5c:	d00a      	beq.n	8020f74 <_raise_r+0x4c>
 8020f5e:	1c59      	adds	r1, r3, #1
 8020f60:	d103      	bne.n	8020f6a <_raise_r+0x42>
 8020f62:	2316      	movs	r3, #22
 8020f64:	6003      	str	r3, [r0, #0]
 8020f66:	2001      	movs	r0, #1
 8020f68:	e7e7      	b.n	8020f3a <_raise_r+0x12>
 8020f6a:	2400      	movs	r4, #0
 8020f6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020f70:	4628      	mov	r0, r5
 8020f72:	4798      	blx	r3
 8020f74:	2000      	movs	r0, #0
 8020f76:	e7e0      	b.n	8020f3a <_raise_r+0x12>

08020f78 <raise>:
 8020f78:	4b02      	ldr	r3, [pc, #8]	; (8020f84 <raise+0xc>)
 8020f7a:	4601      	mov	r1, r0
 8020f7c:	6818      	ldr	r0, [r3, #0]
 8020f7e:	f7ff bfd3 	b.w	8020f28 <_raise_r>
 8020f82:	bf00      	nop
 8020f84:	20000108 	.word	0x20000108

08020f88 <_kill_r>:
 8020f88:	b538      	push	{r3, r4, r5, lr}
 8020f8a:	4d07      	ldr	r5, [pc, #28]	; (8020fa8 <_kill_r+0x20>)
 8020f8c:	2300      	movs	r3, #0
 8020f8e:	4604      	mov	r4, r0
 8020f90:	4608      	mov	r0, r1
 8020f92:	4611      	mov	r1, r2
 8020f94:	602b      	str	r3, [r5, #0]
 8020f96:	f7df ff1c 	bl	8000dd2 <_kill>
 8020f9a:	1c43      	adds	r3, r0, #1
 8020f9c:	d102      	bne.n	8020fa4 <_kill_r+0x1c>
 8020f9e:	682b      	ldr	r3, [r5, #0]
 8020fa0:	b103      	cbz	r3, 8020fa4 <_kill_r+0x1c>
 8020fa2:	6023      	str	r3, [r4, #0]
 8020fa4:	bd38      	pop	{r3, r4, r5, pc}
 8020fa6:	bf00      	nop
 8020fa8:	20001014 	.word	0x20001014

08020fac <_getpid_r>:
 8020fac:	f7df bf09 	b.w	8000dc2 <_getpid>

08020fb0 <siprintf>:
 8020fb0:	b40e      	push	{r1, r2, r3}
 8020fb2:	b500      	push	{lr}
 8020fb4:	b09c      	sub	sp, #112	; 0x70
 8020fb6:	ab1d      	add	r3, sp, #116	; 0x74
 8020fb8:	9002      	str	r0, [sp, #8]
 8020fba:	9006      	str	r0, [sp, #24]
 8020fbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020fc0:	4809      	ldr	r0, [pc, #36]	; (8020fe8 <siprintf+0x38>)
 8020fc2:	9107      	str	r1, [sp, #28]
 8020fc4:	9104      	str	r1, [sp, #16]
 8020fc6:	4909      	ldr	r1, [pc, #36]	; (8020fec <siprintf+0x3c>)
 8020fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8020fcc:	9105      	str	r1, [sp, #20]
 8020fce:	6800      	ldr	r0, [r0, #0]
 8020fd0:	9301      	str	r3, [sp, #4]
 8020fd2:	a902      	add	r1, sp, #8
 8020fd4:	f001 fcd2 	bl	802297c <_svfiprintf_r>
 8020fd8:	9b02      	ldr	r3, [sp, #8]
 8020fda:	2200      	movs	r2, #0
 8020fdc:	701a      	strb	r2, [r3, #0]
 8020fde:	b01c      	add	sp, #112	; 0x70
 8020fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8020fe4:	b003      	add	sp, #12
 8020fe6:	4770      	bx	lr
 8020fe8:	20000108 	.word	0x20000108
 8020fec:	ffff0208 	.word	0xffff0208

08020ff0 <__sread>:
 8020ff0:	b510      	push	{r4, lr}
 8020ff2:	460c      	mov	r4, r1
 8020ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020ff8:	f002 f8f6 	bl	80231e8 <_read_r>
 8020ffc:	2800      	cmp	r0, #0
 8020ffe:	bfab      	itete	ge
 8021000:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8021002:	89a3      	ldrhlt	r3, [r4, #12]
 8021004:	181b      	addge	r3, r3, r0
 8021006:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802100a:	bfac      	ite	ge
 802100c:	6563      	strge	r3, [r4, #84]	; 0x54
 802100e:	81a3      	strhlt	r3, [r4, #12]
 8021010:	bd10      	pop	{r4, pc}

08021012 <__seofread>:
 8021012:	2000      	movs	r0, #0
 8021014:	4770      	bx	lr

08021016 <__swrite>:
 8021016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802101a:	461f      	mov	r7, r3
 802101c:	898b      	ldrh	r3, [r1, #12]
 802101e:	05db      	lsls	r3, r3, #23
 8021020:	4605      	mov	r5, r0
 8021022:	460c      	mov	r4, r1
 8021024:	4616      	mov	r6, r2
 8021026:	d505      	bpl.n	8021034 <__swrite+0x1e>
 8021028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802102c:	2302      	movs	r3, #2
 802102e:	2200      	movs	r2, #0
 8021030:	f001 fbf2 	bl	8022818 <_lseek_r>
 8021034:	89a3      	ldrh	r3, [r4, #12]
 8021036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802103a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802103e:	81a3      	strh	r3, [r4, #12]
 8021040:	4632      	mov	r2, r6
 8021042:	463b      	mov	r3, r7
 8021044:	4628      	mov	r0, r5
 8021046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802104a:	f001 b96d 	b.w	8022328 <_write_r>

0802104e <__sseek>:
 802104e:	b510      	push	{r4, lr}
 8021050:	460c      	mov	r4, r1
 8021052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021056:	f001 fbdf 	bl	8022818 <_lseek_r>
 802105a:	1c43      	adds	r3, r0, #1
 802105c:	89a3      	ldrh	r3, [r4, #12]
 802105e:	bf15      	itete	ne
 8021060:	6560      	strne	r0, [r4, #84]	; 0x54
 8021062:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021066:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802106a:	81a3      	strheq	r3, [r4, #12]
 802106c:	bf18      	it	ne
 802106e:	81a3      	strhne	r3, [r4, #12]
 8021070:	bd10      	pop	{r4, pc}

08021072 <__sclose>:
 8021072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021076:	f001 ba5b 	b.w	8022530 <_close_r>

0802107a <strcpy>:
 802107a:	4603      	mov	r3, r0
 802107c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021080:	f803 2b01 	strb.w	r2, [r3], #1
 8021084:	2a00      	cmp	r2, #0
 8021086:	d1f9      	bne.n	802107c <strcpy+0x2>
 8021088:	4770      	bx	lr
	...

0802108c <iso_year_adjust>:
 802108c:	6941      	ldr	r1, [r0, #20]
 802108e:	2900      	cmp	r1, #0
 8021090:	f240 736c 	movw	r3, #1900	; 0x76c
 8021094:	bfa8      	it	ge
 8021096:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 802109a:	18ca      	adds	r2, r1, r3
 802109c:	078b      	lsls	r3, r1, #30
 802109e:	d105      	bne.n	80210ac <iso_year_adjust+0x20>
 80210a0:	2164      	movs	r1, #100	; 0x64
 80210a2:	fb92 f3f1 	sdiv	r3, r2, r1
 80210a6:	fb01 2313 	mls	r3, r1, r3, r2
 80210aa:	b9db      	cbnz	r3, 80210e4 <iso_year_adjust+0x58>
 80210ac:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80210b0:	fb92 f3f1 	sdiv	r3, r2, r1
 80210b4:	fb01 2313 	mls	r3, r1, r3, r2
 80210b8:	fab3 f383 	clz	r3, r3
 80210bc:	095b      	lsrs	r3, r3, #5
 80210be:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 80210c2:	0040      	lsls	r0, r0, #1
 80210c4:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80210c8:	4418      	add	r0, r3
 80210ca:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80210ce:	4298      	cmp	r0, r3
 80210d0:	d03a      	beq.n	8021148 <iso_year_adjust+0xbc>
 80210d2:	dc21      	bgt.n	8021118 <iso_year_adjust+0x8c>
 80210d4:	2801      	cmp	r0, #1
 80210d6:	dc1a      	bgt.n	802110e <iso_year_adjust+0x82>
 80210d8:	2800      	cmp	r0, #0
 80210da:	bfb4      	ite	lt
 80210dc:	2000      	movlt	r0, #0
 80210de:	f04f 30ff 	movge.w	r0, #4294967295
 80210e2:	4770      	bx	lr
 80210e4:	2301      	movs	r3, #1
 80210e6:	e7ea      	b.n	80210be <iso_year_adjust+0x32>
 80210e8:	2817      	cmp	r0, #23
 80210ea:	d813      	bhi.n	8021114 <iso_year_adjust+0x88>
 80210ec:	e8df f000 	tbb	[pc, r0]
 80210f0:	0c0c0c0c 	.word	0x0c0c0c0c
 80210f4:	0c0c1212 	.word	0x0c0c1212
 80210f8:	12121212 	.word	0x12121212
 80210fc:	12121212 	.word	0x12121212
 8021100:	0c0c1212 	.word	0x0c0c1212
 8021104:	0c0c1212 	.word	0x0c0c1212
 8021108:	f04f 30ff 	mov.w	r0, #4294967295
 802110c:	4770      	bx	lr
 802110e:	380a      	subs	r0, #10
 8021110:	2817      	cmp	r0, #23
 8021112:	d9e9      	bls.n	80210e8 <iso_year_adjust+0x5c>
 8021114:	2000      	movs	r0, #0
 8021116:	4770      	bx	lr
 8021118:	f241 63b4 	movw	r3, #5812	; 0x16b4
 802111c:	4298      	cmp	r0, r3
 802111e:	dc06      	bgt.n	802112e <iso_year_adjust+0xa2>
 8021120:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8021124:	4298      	cmp	r0, r3
 8021126:	bfd4      	ite	le
 8021128:	2000      	movle	r0, #0
 802112a:	2001      	movgt	r0, #1
 802112c:	4770      	bx	lr
 802112e:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8021132:	3802      	subs	r0, #2
 8021134:	2815      	cmp	r0, #21
 8021136:	d8ed      	bhi.n	8021114 <iso_year_adjust+0x88>
 8021138:	2301      	movs	r3, #1
 802113a:	4083      	lsls	r3, r0
 802113c:	4803      	ldr	r0, [pc, #12]	; (802114c <iso_year_adjust+0xc0>)
 802113e:	4018      	ands	r0, r3
 8021140:	3800      	subs	r0, #0
 8021142:	bf18      	it	ne
 8021144:	2001      	movne	r0, #1
 8021146:	4770      	bx	lr
 8021148:	2001      	movs	r0, #1
 802114a:	4770      	bx	lr
 802114c:	002a001f 	.word	0x002a001f

08021150 <__strftime>:
 8021150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021154:	b091      	sub	sp, #68	; 0x44
 8021156:	461d      	mov	r5, r3
 8021158:	2300      	movs	r3, #0
 802115a:	4681      	mov	r9, r0
 802115c:	4688      	mov	r8, r1
 802115e:	9304      	str	r3, [sp, #16]
 8021160:	461c      	mov	r4, r3
 8021162:	7813      	ldrb	r3, [r2, #0]
 8021164:	2b00      	cmp	r3, #0
 8021166:	f000 84d1 	beq.w	8021b0c <__strftime+0x9bc>
 802116a:	2b25      	cmp	r3, #37	; 0x25
 802116c:	d11b      	bne.n	80211a6 <__strftime+0x56>
 802116e:	7857      	ldrb	r7, [r2, #1]
 8021170:	2f30      	cmp	r7, #48	; 0x30
 8021172:	d024      	beq.n	80211be <__strftime+0x6e>
 8021174:	2f2b      	cmp	r7, #43	; 0x2b
 8021176:	d022      	beq.n	80211be <__strftime+0x6e>
 8021178:	f102 0b01 	add.w	fp, r2, #1
 802117c:	2700      	movs	r7, #0
 802117e:	f89b 3000 	ldrb.w	r3, [fp]
 8021182:	3b31      	subs	r3, #49	; 0x31
 8021184:	2b08      	cmp	r3, #8
 8021186:	d81d      	bhi.n	80211c4 <__strftime+0x74>
 8021188:	4658      	mov	r0, fp
 802118a:	220a      	movs	r2, #10
 802118c:	a908      	add	r1, sp, #32
 802118e:	f000 fdff 	bl	8021d90 <strtoul>
 8021192:	f8dd b020 	ldr.w	fp, [sp, #32]
 8021196:	4606      	mov	r6, r0
 8021198:	f89b 3000 	ldrb.w	r3, [fp]
 802119c:	2b45      	cmp	r3, #69	; 0x45
 802119e:	d113      	bne.n	80211c8 <__strftime+0x78>
 80211a0:	f10b 0b01 	add.w	fp, fp, #1
 80211a4:	e012      	b.n	80211cc <__strftime+0x7c>
 80211a6:	f108 31ff 	add.w	r1, r8, #4294967295
 80211aa:	42a1      	cmp	r1, r4
 80211ac:	d802      	bhi.n	80211b4 <__strftime+0x64>
 80211ae:	2400      	movs	r4, #0
 80211b0:	f000 bcb2 	b.w	8021b18 <__strftime+0x9c8>
 80211b4:	f809 3004 	strb.w	r3, [r9, r4]
 80211b8:	3201      	adds	r2, #1
 80211ba:	3401      	adds	r4, #1
 80211bc:	e7d1      	b.n	8021162 <__strftime+0x12>
 80211be:	f102 0b02 	add.w	fp, r2, #2
 80211c2:	e7dc      	b.n	802117e <__strftime+0x2e>
 80211c4:	2600      	movs	r6, #0
 80211c6:	e7e7      	b.n	8021198 <__strftime+0x48>
 80211c8:	2b4f      	cmp	r3, #79	; 0x4f
 80211ca:	d0e9      	beq.n	80211a0 <__strftime+0x50>
 80211cc:	f89b 0000 	ldrb.w	r0, [fp]
 80211d0:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80211d4:	2b55      	cmp	r3, #85	; 0x55
 80211d6:	d8ea      	bhi.n	80211ae <__strftime+0x5e>
 80211d8:	a201      	add	r2, pc, #4	; (adr r2, 80211e0 <__strftime+0x90>)
 80211da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80211de:	bf00      	nop
 80211e0:	08021aff 	.word	0x08021aff
 80211e4:	080211af 	.word	0x080211af
 80211e8:	080211af 	.word	0x080211af
 80211ec:	080211af 	.word	0x080211af
 80211f0:	080211af 	.word	0x080211af
 80211f4:	080211af 	.word	0x080211af
 80211f8:	080211af 	.word	0x080211af
 80211fc:	080211af 	.word	0x080211af
 8021200:	080211af 	.word	0x080211af
 8021204:	080211af 	.word	0x080211af
 8021208:	080211af 	.word	0x080211af
 802120c:	080211af 	.word	0x080211af
 8021210:	080211af 	.word	0x080211af
 8021214:	080211af 	.word	0x080211af
 8021218:	080211af 	.word	0x080211af
 802121c:	080211af 	.word	0x080211af
 8021220:	080211af 	.word	0x080211af
 8021224:	080211af 	.word	0x080211af
 8021228:	080211af 	.word	0x080211af
 802122c:	080211af 	.word	0x080211af
 8021230:	080211af 	.word	0x080211af
 8021234:	080211af 	.word	0x080211af
 8021238:	080211af 	.word	0x080211af
 802123c:	080211af 	.word	0x080211af
 8021240:	080211af 	.word	0x080211af
 8021244:	080211af 	.word	0x080211af
 8021248:	080211af 	.word	0x080211af
 802124c:	080211af 	.word	0x080211af
 8021250:	08021377 	.word	0x08021377
 8021254:	080213d1 	.word	0x080213d1
 8021258:	08021447 	.word	0x08021447
 802125c:	080214e1 	.word	0x080214e1
 8021260:	080211af 	.word	0x080211af
 8021264:	0802152d 	.word	0x0802152d
 8021268:	0802160d 	.word	0x0802160d
 802126c:	0802170f 	.word	0x0802170f
 8021270:	0802171d 	.word	0x0802171d
 8021274:	080211af 	.word	0x080211af
 8021278:	080211af 	.word	0x080211af
 802127c:	080211af 	.word	0x080211af
 8021280:	0802174d 	.word	0x0802174d
 8021284:	080211af 	.word	0x080211af
 8021288:	080211af 	.word	0x080211af
 802128c:	08021765 	.word	0x08021765
 8021290:	080211af 	.word	0x080211af
 8021294:	080217b3 	.word	0x080217b3
 8021298:	080218c9 	.word	0x080218c9
 802129c:	080218db 	.word	0x080218db
 80212a0:	08021933 	.word	0x08021933
 80212a4:	08021943 	.word	0x08021943
 80212a8:	080219b9 	.word	0x080219b9
 80212ac:	0802143f 	.word	0x0802143f
 80212b0:	080219ed 	.word	0x080219ed
 80212b4:	08021aab 	.word	0x08021aab
 80212b8:	080211af 	.word	0x080211af
 80212bc:	080211af 	.word	0x080211af
 80212c0:	080211af 	.word	0x080211af
 80212c4:	080211af 	.word	0x080211af
 80212c8:	080211af 	.word	0x080211af
 80212cc:	080211af 	.word	0x080211af
 80212d0:	08021339 	.word	0x08021339
 80212d4:	080213a5 	.word	0x080213a5
 80212d8:	080213ff 	.word	0x080213ff
 80212dc:	080214b9 	.word	0x080214b9
 80212e0:	080214b9 	.word	0x080214b9
 80212e4:	080211af 	.word	0x080211af
 80212e8:	08021575 	.word	0x08021575
 80212ec:	080213a5 	.word	0x080213a5
 80212f0:	080211af 	.word	0x080211af
 80212f4:	0802173f 	.word	0x0802173f
 80212f8:	0802170f 	.word	0x0802170f
 80212fc:	0802171d 	.word	0x0802171d
 8021300:	08021747 	.word	0x08021747
 8021304:	08021751 	.word	0x08021751
 8021308:	080211af 	.word	0x080211af
 802130c:	08021765 	.word	0x08021765
 8021310:	080211af 	.word	0x080211af
 8021314:	0802142f 	.word	0x0802142f
 8021318:	080217c9 	.word	0x080217c9
 802131c:	080218cd 	.word	0x080218cd
 8021320:	08021915 	.word	0x08021915
 8021324:	080211af 	.word	0x080211af
 8021328:	080219a9 	.word	0x080219a9
 802132c:	08021437 	.word	0x08021437
 8021330:	080219d1 	.word	0x080219d1
 8021334:	08021a3d 	.word	0x08021a3d
 8021338:	69ab      	ldr	r3, [r5, #24]
 802133a:	4aa7      	ldr	r2, [pc, #668]	; (80215d8 <__strftime+0x488>)
 802133c:	3318      	adds	r3, #24
 802133e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8021342:	4630      	mov	r0, r6
 8021344:	f7de ff7a 	bl	800023c <strlen>
 8021348:	3e01      	subs	r6, #1
 802134a:	4420      	add	r0, r4
 802134c:	f108 33ff 	add.w	r3, r8, #4294967295
 8021350:	42a0      	cmp	r0, r4
 8021352:	d107      	bne.n	8021364 <__strftime+0x214>
 8021354:	f89b 3000 	ldrb.w	r3, [fp]
 8021358:	2b00      	cmp	r3, #0
 802135a:	f000 83d7 	beq.w	8021b0c <__strftime+0x9bc>
 802135e:	f10b 0201 	add.w	r2, fp, #1
 8021362:	e6fe      	b.n	8021162 <__strftime+0x12>
 8021364:	42a3      	cmp	r3, r4
 8021366:	f67f af22 	bls.w	80211ae <__strftime+0x5e>
 802136a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 802136e:	f809 2004 	strb.w	r2, [r9, r4]
 8021372:	3401      	adds	r4, #1
 8021374:	e7ec      	b.n	8021350 <__strftime+0x200>
 8021376:	69aa      	ldr	r2, [r5, #24]
 8021378:	4b97      	ldr	r3, [pc, #604]	; (80215d8 <__strftime+0x488>)
 802137a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802137e:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8021380:	4630      	mov	r0, r6
 8021382:	f7de ff5b 	bl	800023c <strlen>
 8021386:	3e01      	subs	r6, #1
 8021388:	4420      	add	r0, r4
 802138a:	f108 33ff 	add.w	r3, r8, #4294967295
 802138e:	42a0      	cmp	r0, r4
 8021390:	d0e0      	beq.n	8021354 <__strftime+0x204>
 8021392:	42a3      	cmp	r3, r4
 8021394:	f67f af0b 	bls.w	80211ae <__strftime+0x5e>
 8021398:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 802139c:	f809 2004 	strb.w	r2, [r9, r4]
 80213a0:	3401      	adds	r4, #1
 80213a2:	e7f4      	b.n	802138e <__strftime+0x23e>
 80213a4:	4b8c      	ldr	r3, [pc, #560]	; (80215d8 <__strftime+0x488>)
 80213a6:	692a      	ldr	r2, [r5, #16]
 80213a8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80213ac:	4630      	mov	r0, r6
 80213ae:	f7de ff45 	bl	800023c <strlen>
 80213b2:	3e01      	subs	r6, #1
 80213b4:	4420      	add	r0, r4
 80213b6:	f108 33ff 	add.w	r3, r8, #4294967295
 80213ba:	42a0      	cmp	r0, r4
 80213bc:	d0ca      	beq.n	8021354 <__strftime+0x204>
 80213be:	42a3      	cmp	r3, r4
 80213c0:	f67f aef5 	bls.w	80211ae <__strftime+0x5e>
 80213c4:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80213c8:	f809 2004 	strb.w	r2, [r9, r4]
 80213cc:	3401      	adds	r4, #1
 80213ce:	e7f4      	b.n	80213ba <__strftime+0x26a>
 80213d0:	692b      	ldr	r3, [r5, #16]
 80213d2:	4a81      	ldr	r2, [pc, #516]	; (80215d8 <__strftime+0x488>)
 80213d4:	330c      	adds	r3, #12
 80213d6:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80213da:	4630      	mov	r0, r6
 80213dc:	f7de ff2e 	bl	800023c <strlen>
 80213e0:	3e01      	subs	r6, #1
 80213e2:	4420      	add	r0, r4
 80213e4:	f108 33ff 	add.w	r3, r8, #4294967295
 80213e8:	42a0      	cmp	r0, r4
 80213ea:	d0b3      	beq.n	8021354 <__strftime+0x204>
 80213ec:	42a3      	cmp	r3, r4
 80213ee:	f67f aede 	bls.w	80211ae <__strftime+0x5e>
 80213f2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80213f6:	f809 2004 	strb.w	r2, [r9, r4]
 80213fa:	3401      	adds	r4, #1
 80213fc:	e7f4      	b.n	80213e8 <__strftime+0x298>
 80213fe:	4b76      	ldr	r3, [pc, #472]	; (80215d8 <__strftime+0x488>)
 8021400:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8021404:	4630      	mov	r0, r6
 8021406:	f7de ff19 	bl	800023c <strlen>
 802140a:	7833      	ldrb	r3, [r6, #0]
 802140c:	2b00      	cmp	r3, #0
 802140e:	d0a1      	beq.n	8021354 <__strftime+0x204>
 8021410:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021412:	9300      	str	r3, [sp, #0]
 8021414:	4632      	mov	r2, r6
 8021416:	462b      	mov	r3, r5
 8021418:	eba8 0104 	sub.w	r1, r8, r4
 802141c:	eb09 0004 	add.w	r0, r9, r4
 8021420:	f7ff fe96 	bl	8021150 <__strftime>
 8021424:	2800      	cmp	r0, #0
 8021426:	f77f aec2 	ble.w	80211ae <__strftime+0x5e>
 802142a:	4404      	add	r4, r0
 802142c:	e792      	b.n	8021354 <__strftime+0x204>
 802142e:	4b6a      	ldr	r3, [pc, #424]	; (80215d8 <__strftime+0x488>)
 8021430:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 8021434:	e7e6      	b.n	8021404 <__strftime+0x2b4>
 8021436:	4b68      	ldr	r3, [pc, #416]	; (80215d8 <__strftime+0x488>)
 8021438:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 802143c:	e7e2      	b.n	8021404 <__strftime+0x2b4>
 802143e:	4b66      	ldr	r3, [pc, #408]	; (80215d8 <__strftime+0x488>)
 8021440:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8021444:	e7de      	b.n	8021404 <__strftime+0x2b4>
 8021446:	4965      	ldr	r1, [pc, #404]	; (80215dc <__strftime+0x48c>)
 8021448:	f8d5 a014 	ldr.w	sl, [r5, #20]
 802144c:	458a      	cmp	sl, r1
 802144e:	bfac      	ite	ge
 8021450:	2100      	movge	r1, #0
 8021452:	2101      	movlt	r1, #1
 8021454:	f1ba 0f00 	cmp.w	sl, #0
 8021458:	db0e      	blt.n	8021478 <__strftime+0x328>
 802145a:	2064      	movs	r0, #100	; 0x64
 802145c:	fb9a f0f0 	sdiv	r0, sl, r0
 8021460:	3013      	adds	r0, #19
 8021462:	b19f      	cbz	r7, 802148c <__strftime+0x33c>
 8021464:	2863      	cmp	r0, #99	; 0x63
 8021466:	dd25      	ble.n	80214b4 <__strftime+0x364>
 8021468:	4a5d      	ldr	r2, [pc, #372]	; (80215e0 <__strftime+0x490>)
 802146a:	4b5e      	ldr	r3, [pc, #376]	; (80215e4 <__strftime+0x494>)
 802146c:	2f2b      	cmp	r7, #43	; 0x2b
 802146e:	bf14      	ite	ne
 8021470:	4617      	movne	r7, r2
 8021472:	461f      	moveq	r7, r3
 8021474:	4a5c      	ldr	r2, [pc, #368]	; (80215e8 <__strftime+0x498>)
 8021476:	e00b      	b.n	8021490 <__strftime+0x340>
 8021478:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 802147c:	9105      	str	r1, [sp, #20]
 802147e:	f001 f835 	bl	80224ec <abs>
 8021482:	2364      	movs	r3, #100	; 0x64
 8021484:	9905      	ldr	r1, [sp, #20]
 8021486:	fb90 f0f3 	sdiv	r0, r0, r3
 802148a:	e7ea      	b.n	8021462 <__strftime+0x312>
 802148c:	4f54      	ldr	r7, [pc, #336]	; (80215e0 <__strftime+0x490>)
 802148e:	4a57      	ldr	r2, [pc, #348]	; (80215ec <__strftime+0x49c>)
 8021490:	4b57      	ldr	r3, [pc, #348]	; (80215f0 <__strftime+0x4a0>)
 8021492:	9001      	str	r0, [sp, #4]
 8021494:	2e02      	cmp	r6, #2
 8021496:	bf2c      	ite	cs
 8021498:	ebc1 0606 	rsbcs	r6, r1, r6
 802149c:	f1c1 0602 	rsbcc	r6, r1, #2
 80214a0:	494e      	ldr	r1, [pc, #312]	; (80215dc <__strftime+0x48c>)
 80214a2:	9600      	str	r6, [sp, #0]
 80214a4:	458a      	cmp	sl, r1
 80214a6:	bfa8      	it	ge
 80214a8:	463b      	movge	r3, r7
 80214aa:	eba8 0104 	sub.w	r1, r8, r4
 80214ae:	eb09 0004 	add.w	r0, r9, r4
 80214b2:	e02a      	b.n	802150a <__strftime+0x3ba>
 80214b4:	4f4a      	ldr	r7, [pc, #296]	; (80215e0 <__strftime+0x490>)
 80214b6:	e7dd      	b.n	8021474 <__strftime+0x324>
 80214b8:	494e      	ldr	r1, [pc, #312]	; (80215f4 <__strftime+0x4a4>)
 80214ba:	4a4f      	ldr	r2, [pc, #316]	; (80215f8 <__strftime+0x4a8>)
 80214bc:	68eb      	ldr	r3, [r5, #12]
 80214be:	2864      	cmp	r0, #100	; 0x64
 80214c0:	bf08      	it	eq
 80214c2:	460a      	moveq	r2, r1
 80214c4:	eba8 0104 	sub.w	r1, r8, r4
 80214c8:	eb09 0004 	add.w	r0, r9, r4
 80214cc:	f001 fe9e 	bl	802320c <sniprintf>
 80214d0:	2800      	cmp	r0, #0
 80214d2:	f6ff ae6c 	blt.w	80211ae <__strftime+0x5e>
 80214d6:	4404      	add	r4, r0
 80214d8:	45a0      	cmp	r8, r4
 80214da:	f63f af3b 	bhi.w	8021354 <__strftime+0x204>
 80214de:	e666      	b.n	80211ae <__strftime+0x5e>
 80214e0:	6968      	ldr	r0, [r5, #20]
 80214e2:	692b      	ldr	r3, [r5, #16]
 80214e4:	68ef      	ldr	r7, [r5, #12]
 80214e6:	2800      	cmp	r0, #0
 80214e8:	eb09 0604 	add.w	r6, r9, r4
 80214ec:	eba8 0104 	sub.w	r1, r8, r4
 80214f0:	f103 0301 	add.w	r3, r3, #1
 80214f4:	db0c      	blt.n	8021510 <__strftime+0x3c0>
 80214f6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80214fa:	fb90 f2fc 	sdiv	r2, r0, ip
 80214fe:	fb0c 0212 	mls	r2, ip, r2, r0
 8021502:	e9cd 7200 	strd	r7, r2, [sp]
 8021506:	4a3d      	ldr	r2, [pc, #244]	; (80215fc <__strftime+0x4ac>)
 8021508:	4630      	mov	r0, r6
 802150a:	f001 fe7f 	bl	802320c <sniprintf>
 802150e:	e7df      	b.n	80214d0 <__strftime+0x380>
 8021510:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8021514:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8021518:	f000 ffe8 	bl	80224ec <abs>
 802151c:	2264      	movs	r2, #100	; 0x64
 802151e:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8021522:	fb90 fcf2 	sdiv	ip, r0, r2
 8021526:	fb0c 0212 	mls	r2, ip, r2, r0
 802152a:	e7ea      	b.n	8021502 <__strftime+0x3b2>
 802152c:	2325      	movs	r3, #37	; 0x25
 802152e:	f88d 3020 	strb.w	r3, [sp, #32]
 8021532:	b187      	cbz	r7, 8021556 <__strftime+0x406>
 8021534:	2e06      	cmp	r6, #6
 8021536:	bf38      	it	cc
 8021538:	2606      	movcc	r6, #6
 802153a:	1fb3      	subs	r3, r6, #6
 802153c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8021540:	d10c      	bne.n	802155c <__strftime+0x40c>
 8021542:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8021546:	492e      	ldr	r1, [pc, #184]	; (8021600 <__strftime+0x4b0>)
 8021548:	f7ff fd97 	bl	802107a <strcpy>
 802154c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802154e:	9300      	str	r3, [sp, #0]
 8021550:	aa08      	add	r2, sp, #32
 8021552:	462b      	mov	r3, r5
 8021554:	e760      	b.n	8021418 <__strftime+0x2c8>
 8021556:	272b      	movs	r7, #43	; 0x2b
 8021558:	260a      	movs	r6, #10
 802155a:	e7ee      	b.n	802153a <__strftime+0x3ea>
 802155c:	4a29      	ldr	r2, [pc, #164]	; (8021604 <__strftime+0x4b4>)
 802155e:	211e      	movs	r1, #30
 8021560:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8021564:	f001 fe52 	bl	802320c <sniprintf>
 8021568:	2800      	cmp	r0, #0
 802156a:	ddea      	ble.n	8021542 <__strftime+0x3f2>
 802156c:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8021570:	4418      	add	r0, r3
 8021572:	e7e8      	b.n	8021546 <__strftime+0x3f6>
 8021574:	4628      	mov	r0, r5
 8021576:	f7ff fd89 	bl	802108c <iso_year_adjust>
 802157a:	4606      	mov	r6, r0
 802157c:	6968      	ldr	r0, [r5, #20]
 802157e:	2800      	cmp	r0, #0
 8021580:	db11      	blt.n	80215a6 <__strftime+0x456>
 8021582:	2264      	movs	r2, #100	; 0x64
 8021584:	fb90 f3f2 	sdiv	r3, r0, r2
 8021588:	fb02 0313 	mls	r3, r2, r3, r0
 802158c:	441e      	add	r6, r3
 802158e:	2364      	movs	r3, #100	; 0x64
 8021590:	fb96 f0f3 	sdiv	r0, r6, r3
 8021594:	fb03 6610 	mls	r6, r3, r0, r6
 8021598:	441e      	add	r6, r3
 802159a:	fbb6 f2f3 	udiv	r2, r6, r3
 802159e:	fb03 6312 	mls	r3, r3, r2, r6
 80215a2:	4a14      	ldr	r2, [pc, #80]	; (80215f4 <__strftime+0x4a4>)
 80215a4:	e78e      	b.n	80214c4 <__strftime+0x374>
 80215a6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80215aa:	f000 ff9f 	bl	80224ec <abs>
 80215ae:	2364      	movs	r3, #100	; 0x64
 80215b0:	2e00      	cmp	r6, #0
 80215b2:	fb90 f2f3 	sdiv	r2, r0, r3
 80215b6:	fb02 0313 	mls	r3, r2, r3, r0
 80215ba:	da05      	bge.n	80215c8 <__strftime+0x478>
 80215bc:	6969      	ldr	r1, [r5, #20]
 80215be:	4a12      	ldr	r2, [pc, #72]	; (8021608 <__strftime+0x4b8>)
 80215c0:	4291      	cmp	r1, r2
 80215c2:	bfb8      	it	lt
 80215c4:	2601      	movlt	r6, #1
 80215c6:	e7e1      	b.n	802158c <__strftime+0x43c>
 80215c8:	d0e0      	beq.n	802158c <__strftime+0x43c>
 80215ca:	6969      	ldr	r1, [r5, #20]
 80215cc:	4a03      	ldr	r2, [pc, #12]	; (80215dc <__strftime+0x48c>)
 80215ce:	4291      	cmp	r1, r2
 80215d0:	bfb8      	it	lt
 80215d2:	f04f 36ff 	movlt.w	r6, #4294967295
 80215d6:	e7d9      	b.n	802158c <__strftime+0x43c>
 80215d8:	08029fbc 	.word	0x08029fbc
 80215dc:	fffff894 	.word	0xfffff894
 80215e0:	0802a12f 	.word	0x0802a12f
 80215e4:	08029e46 	.word	0x08029e46
 80215e8:	08029e3e 	.word	0x08029e3e
 80215ec:	08029e37 	.word	0x08029e37
 80215f0:	0802a26f 	.word	0x0802a26f
 80215f4:	08029e56 	.word	0x08029e56
 80215f8:	08029e48 	.word	0x08029e48
 80215fc:	08029e4c 	.word	0x08029e4c
 8021600:	08029e5f 	.word	0x08029e5f
 8021604:	08029e5b 	.word	0x08029e5b
 8021608:	fffff895 	.word	0xfffff895
 802160c:	4bb6      	ldr	r3, [pc, #728]	; (80218e8 <__strftime+0x798>)
 802160e:	6969      	ldr	r1, [r5, #20]
 8021610:	4299      	cmp	r1, r3
 8021612:	bfac      	ite	ge
 8021614:	2300      	movge	r3, #0
 8021616:	2301      	movlt	r3, #1
 8021618:	4628      	mov	r0, r5
 802161a:	e9cd 3105 	strd	r3, r1, [sp, #20]
 802161e:	f7ff fd35 	bl	802108c <iso_year_adjust>
 8021622:	9906      	ldr	r1, [sp, #24]
 8021624:	2900      	cmp	r1, #0
 8021626:	4682      	mov	sl, r0
 8021628:	db27      	blt.n	802167a <__strftime+0x52a>
 802162a:	2264      	movs	r2, #100	; 0x64
 802162c:	fb91 f2f2 	sdiv	r2, r1, r2
 8021630:	3213      	adds	r2, #19
 8021632:	6968      	ldr	r0, [r5, #20]
 8021634:	2800      	cmp	r0, #0
 8021636:	db2b      	blt.n	8021690 <__strftime+0x540>
 8021638:	f04f 0c64 	mov.w	ip, #100	; 0x64
 802163c:	fb90 fefc 	sdiv	lr, r0, ip
 8021640:	fb0c 001e 	mls	r0, ip, lr, r0
 8021644:	f1ba 0f00 	cmp.w	sl, #0
 8021648:	da31      	bge.n	80216ae <__strftime+0x55e>
 802164a:	6969      	ldr	r1, [r5, #20]
 802164c:	4ba7      	ldr	r3, [pc, #668]	; (80218ec <__strftime+0x79c>)
 802164e:	4299      	cmp	r1, r3
 8021650:	db38      	blt.n	80216c4 <__strftime+0x574>
 8021652:	eb0a 0300 	add.w	r3, sl, r0
 8021656:	1c59      	adds	r1, r3, #1
 8021658:	d139      	bne.n	80216ce <__strftime+0x57e>
 802165a:	3a01      	subs	r2, #1
 802165c:	2363      	movs	r3, #99	; 0x63
 802165e:	2064      	movs	r0, #100	; 0x64
 8021660:	fb00 3202 	mla	r2, r0, r2, r3
 8021664:	9b05      	ldr	r3, [sp, #20]
 8021666:	2b00      	cmp	r3, #0
 8021668:	d036      	beq.n	80216d8 <__strftime+0x588>
 802166a:	232d      	movs	r3, #45	; 0x2d
 802166c:	f88d 3020 	strb.w	r3, [sp, #32]
 8021670:	b106      	cbz	r6, 8021674 <__strftime+0x524>
 8021672:	3e01      	subs	r6, #1
 8021674:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8021678:	e038      	b.n	80216ec <__strftime+0x59c>
 802167a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 802167e:	9106      	str	r1, [sp, #24]
 8021680:	f000 ff34 	bl	80224ec <abs>
 8021684:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8021688:	9906      	ldr	r1, [sp, #24]
 802168a:	fb90 f2fc 	sdiv	r2, r0, ip
 802168e:	e7d0      	b.n	8021632 <__strftime+0x4e2>
 8021690:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8021694:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8021698:	f000 ff28 	bl	80224ec <abs>
 802169c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80216a0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80216a4:	fb90 fefc 	sdiv	lr, r0, ip
 80216a8:	fb0e 001c 	mls	r0, lr, ip, r0
 80216ac:	e7ca      	b.n	8021644 <__strftime+0x4f4>
 80216ae:	d0d0      	beq.n	8021652 <__strftime+0x502>
 80216b0:	4b8d      	ldr	r3, [pc, #564]	; (80218e8 <__strftime+0x798>)
 80216b2:	4299      	cmp	r1, r3
 80216b4:	bfb4      	ite	lt
 80216b6:	2301      	movlt	r3, #1
 80216b8:	2300      	movge	r3, #0
 80216ba:	9305      	str	r3, [sp, #20]
 80216bc:	bfb8      	it	lt
 80216be:	f04f 3aff 	movlt.w	sl, #4294967295
 80216c2:	e7c6      	b.n	8021652 <__strftime+0x502>
 80216c4:	f04f 0a01 	mov.w	sl, #1
 80216c8:	f8cd a014 	str.w	sl, [sp, #20]
 80216cc:	e7c1      	b.n	8021652 <__strftime+0x502>
 80216ce:	2b64      	cmp	r3, #100	; 0x64
 80216d0:	bf04      	itt	eq
 80216d2:	3201      	addeq	r2, #1
 80216d4:	2300      	moveq	r3, #0
 80216d6:	e7c2      	b.n	802165e <__strftime+0x50e>
 80216d8:	2f2b      	cmp	r7, #43	; 0x2b
 80216da:	d106      	bne.n	80216ea <__strftime+0x59a>
 80216dc:	f242 730f 	movw	r3, #9999	; 0x270f
 80216e0:	429a      	cmp	r2, r3
 80216e2:	d902      	bls.n	80216ea <__strftime+0x59a>
 80216e4:	f88d 7020 	strb.w	r7, [sp, #32]
 80216e8:	e7c2      	b.n	8021670 <__strftime+0x520>
 80216ea:	ab08      	add	r3, sp, #32
 80216ec:	2125      	movs	r1, #37	; 0x25
 80216ee:	7019      	strb	r1, [r3, #0]
 80216f0:	b94f      	cbnz	r7, 8021706 <__strftime+0x5b6>
 80216f2:	1c58      	adds	r0, r3, #1
 80216f4:	497e      	ldr	r1, [pc, #504]	; (80218f0 <__strftime+0x7a0>)
 80216f6:	9205      	str	r2, [sp, #20]
 80216f8:	f7ff fcbf 	bl	802107a <strcpy>
 80216fc:	9a05      	ldr	r2, [sp, #20]
 80216fe:	9200      	str	r2, [sp, #0]
 8021700:	4633      	mov	r3, r6
 8021702:	aa08      	add	r2, sp, #32
 8021704:	e059      	b.n	80217ba <__strftime+0x66a>
 8021706:	2130      	movs	r1, #48	; 0x30
 8021708:	1c98      	adds	r0, r3, #2
 802170a:	7059      	strb	r1, [r3, #1]
 802170c:	e7f2      	b.n	80216f4 <__strftime+0x5a4>
 802170e:	4979      	ldr	r1, [pc, #484]	; (80218f4 <__strftime+0x7a4>)
 8021710:	4a79      	ldr	r2, [pc, #484]	; (80218f8 <__strftime+0x7a8>)
 8021712:	68ab      	ldr	r3, [r5, #8]
 8021714:	286b      	cmp	r0, #107	; 0x6b
 8021716:	bf08      	it	eq
 8021718:	460a      	moveq	r2, r1
 802171a:	e6d3      	b.n	80214c4 <__strftime+0x374>
 802171c:	68ab      	ldr	r3, [r5, #8]
 802171e:	b163      	cbz	r3, 802173a <__strftime+0x5ea>
 8021720:	2b0c      	cmp	r3, #12
 8021722:	d004      	beq.n	802172e <__strftime+0x5de>
 8021724:	210c      	movs	r1, #12
 8021726:	fb93 f2f1 	sdiv	r2, r3, r1
 802172a:	fb01 3312 	mls	r3, r1, r2, r3
 802172e:	4972      	ldr	r1, [pc, #456]	; (80218f8 <__strftime+0x7a8>)
 8021730:	4a70      	ldr	r2, [pc, #448]	; (80218f4 <__strftime+0x7a4>)
 8021732:	2849      	cmp	r0, #73	; 0x49
 8021734:	bf08      	it	eq
 8021736:	460a      	moveq	r2, r1
 8021738:	e6c4      	b.n	80214c4 <__strftime+0x374>
 802173a:	230c      	movs	r3, #12
 802173c:	e7f7      	b.n	802172e <__strftime+0x5de>
 802173e:	69eb      	ldr	r3, [r5, #28]
 8021740:	4a6e      	ldr	r2, [pc, #440]	; (80218fc <__strftime+0x7ac>)
 8021742:	3301      	adds	r3, #1
 8021744:	e6be      	b.n	80214c4 <__strftime+0x374>
 8021746:	692b      	ldr	r3, [r5, #16]
 8021748:	3301      	adds	r3, #1
 802174a:	e72a      	b.n	80215a2 <__strftime+0x452>
 802174c:	686b      	ldr	r3, [r5, #4]
 802174e:	e728      	b.n	80215a2 <__strftime+0x452>
 8021750:	f108 33ff 	add.w	r3, r8, #4294967295
 8021754:	42a3      	cmp	r3, r4
 8021756:	f67f ad2a 	bls.w	80211ae <__strftime+0x5e>
 802175a:	230a      	movs	r3, #10
 802175c:	f809 3004 	strb.w	r3, [r9, r4]
 8021760:	3401      	adds	r4, #1
 8021762:	e5f7      	b.n	8021354 <__strftime+0x204>
 8021764:	68ab      	ldr	r3, [r5, #8]
 8021766:	2b0b      	cmp	r3, #11
 8021768:	bfcc      	ite	gt
 802176a:	22a4      	movgt	r2, #164	; 0xa4
 802176c:	22a0      	movle	r2, #160	; 0xa0
 802176e:	4b64      	ldr	r3, [pc, #400]	; (8021900 <__strftime+0x7b0>)
 8021770:	4413      	add	r3, r2
 8021772:	685e      	ldr	r6, [r3, #4]
 8021774:	4630      	mov	r0, r6
 8021776:	f7de fd61 	bl	800023c <strlen>
 802177a:	1e72      	subs	r2, r6, #1
 802177c:	4420      	add	r0, r4
 802177e:	f108 36ff 	add.w	r6, r8, #4294967295
 8021782:	42a0      	cmp	r0, r4
 8021784:	f43f ade6 	beq.w	8021354 <__strftime+0x204>
 8021788:	42a6      	cmp	r6, r4
 802178a:	f67f ad10 	bls.w	80211ae <__strftime+0x5e>
 802178e:	f89b 1000 	ldrb.w	r1, [fp]
 8021792:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8021796:	2950      	cmp	r1, #80	; 0x50
 8021798:	d107      	bne.n	80217aa <__strftime+0x65a>
 802179a:	495a      	ldr	r1, [pc, #360]	; (8021904 <__strftime+0x7b4>)
 802179c:	5cc9      	ldrb	r1, [r1, r3]
 802179e:	f001 0103 	and.w	r1, r1, #3
 80217a2:	2901      	cmp	r1, #1
 80217a4:	bf08      	it	eq
 80217a6:	3320      	addeq	r3, #32
 80217a8:	b2db      	uxtb	r3, r3
 80217aa:	f809 3004 	strb.w	r3, [r9, r4]
 80217ae:	3401      	adds	r4, #1
 80217b0:	e7e7      	b.n	8021782 <__strftime+0x632>
 80217b2:	686b      	ldr	r3, [r5, #4]
 80217b4:	9300      	str	r3, [sp, #0]
 80217b6:	4a54      	ldr	r2, [pc, #336]	; (8021908 <__strftime+0x7b8>)
 80217b8:	68ab      	ldr	r3, [r5, #8]
 80217ba:	eba8 0104 	sub.w	r1, r8, r4
 80217be:	eb09 0004 	add.w	r0, r9, r4
 80217c2:	f001 fd23 	bl	802320c <sniprintf>
 80217c6:	e683      	b.n	80214d0 <__strftime+0x380>
 80217c8:	6a2b      	ldr	r3, [r5, #32]
 80217ca:	2b00      	cmp	r3, #0
 80217cc:	db79      	blt.n	80218c2 <__strftime+0x772>
 80217ce:	f000 fb91 	bl	8021ef4 <__tz_lock>
 80217d2:	9b04      	ldr	r3, [sp, #16]
 80217d4:	b90b      	cbnz	r3, 80217da <__strftime+0x68a>
 80217d6:	f000 fb99 	bl	8021f0c <_tzset_unlocked>
 80217da:	f000 ff55 	bl	8022688 <__gettzinfo>
 80217de:	6a2b      	ldr	r3, [r5, #32]
 80217e0:	2b00      	cmp	r3, #0
 80217e2:	bfcc      	ite	gt
 80217e4:	2350      	movgt	r3, #80	; 0x50
 80217e6:	2328      	movle	r3, #40	; 0x28
 80217e8:	58c3      	ldr	r3, [r0, r3]
 80217ea:	f1c3 0a00 	rsb	sl, r3, #0
 80217ee:	f000 fb87 	bl	8021f00 <__tz_unlock>
 80217f2:	2301      	movs	r3, #1
 80217f4:	9304      	str	r3, [sp, #16]
 80217f6:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80217fa:	4662      	mov	r2, ip
 80217fc:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8021800:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021804:	9602      	str	r6, [sp, #8]
 8021806:	f143 36ff 	adc.w	r6, r3, #4294967295
 802180a:	9603      	str	r6, [sp, #12]
 802180c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8021810:	2e00      	cmp	r6, #0
 8021812:	f177 0600 	sbcs.w	r6, r7, #0
 8021816:	eba8 0104 	sub.w	r1, r8, r4
 802181a:	eb09 0004 	add.w	r0, r9, r4
 802181e:	da05      	bge.n	802182c <__strftime+0x6dc>
 8021820:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 8021824:	f143 33ff 	adc.w	r3, r3, #4294967295
 8021828:	9602      	str	r6, [sp, #8]
 802182a:	9303      	str	r3, [sp, #12]
 802182c:	9b02      	ldr	r3, [sp, #8]
 802182e:	089e      	lsrs	r6, r3, #2
 8021830:	9b03      	ldr	r3, [sp, #12]
 8021832:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 8021836:	f10c 32ff 	add.w	r2, ip, #4294967295
 802183a:	109f      	asrs	r7, r3, #2
 802183c:	2364      	movs	r3, #100	; 0x64
 802183e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021842:	1af6      	subs	r6, r6, r3
 8021844:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 8021848:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 802184c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8021850:	fb92 f3f3 	sdiv	r3, r2, r3
 8021854:	18f6      	adds	r6, r6, r3
 8021856:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 802185a:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 802185e:	f240 136d 	movw	r3, #365	; 0x16d
 8021862:	fb03 fc0c 	mul.w	ip, r3, ip
 8021866:	69eb      	ldr	r3, [r5, #28]
 8021868:	eb16 060c 	adds.w	r6, r6, ip
 802186c:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8021870:	18f6      	adds	r6, r6, r3
 8021872:	f04f 0c18 	mov.w	ip, #24
 8021876:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 802187a:	fba6 230c 	umull	r2, r3, r6, ip
 802187e:	68ae      	ldr	r6, [r5, #8]
 8021880:	fb0c 3307 	mla	r3, ip, r7, r3
 8021884:	1992      	adds	r2, r2, r6
 8021886:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 802188a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 802188e:	fba2 670c 	umull	r6, r7, r2, ip
 8021892:	fb0c 7703 	mla	r7, ip, r3, r7
 8021896:	686b      	ldr	r3, [r5, #4]
 8021898:	18f6      	adds	r6, r6, r3
 802189a:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 802189e:	fba6 230c 	umull	r2, r3, r6, ip
 80218a2:	682e      	ldr	r6, [r5, #0]
 80218a4:	fb0c 3307 	mla	r3, ip, r7, r3
 80218a8:	1992      	adds	r2, r2, r6
 80218aa:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 80218ae:	ebb2 020a 	subs.w	r2, r2, sl
 80218b2:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 80218b6:	e9cd 2300 	strd	r2, r3, [sp]
 80218ba:	4a14      	ldr	r2, [pc, #80]	; (802190c <__strftime+0x7bc>)
 80218bc:	f001 fca6 	bl	802320c <sniprintf>
 80218c0:	e606      	b.n	80214d0 <__strftime+0x380>
 80218c2:	f04f 0a00 	mov.w	sl, #0
 80218c6:	e796      	b.n	80217f6 <__strftime+0x6a6>
 80218c8:	682b      	ldr	r3, [r5, #0]
 80218ca:	e66a      	b.n	80215a2 <__strftime+0x452>
 80218cc:	f108 33ff 	add.w	r3, r8, #4294967295
 80218d0:	42a3      	cmp	r3, r4
 80218d2:	f67f ac6c 	bls.w	80211ae <__strftime+0x5e>
 80218d6:	2309      	movs	r3, #9
 80218d8:	e740      	b.n	802175c <__strftime+0x60c>
 80218da:	682b      	ldr	r3, [r5, #0]
 80218dc:	9301      	str	r3, [sp, #4]
 80218de:	686b      	ldr	r3, [r5, #4]
 80218e0:	9300      	str	r3, [sp, #0]
 80218e2:	4a0b      	ldr	r2, [pc, #44]	; (8021910 <__strftime+0x7c0>)
 80218e4:	68ab      	ldr	r3, [r5, #8]
 80218e6:	e5e0      	b.n	80214aa <__strftime+0x35a>
 80218e8:	fffff894 	.word	0xfffff894
 80218ec:	fffff895 	.word	0xfffff895
 80218f0:	08029e67 	.word	0x08029e67
 80218f4:	08029e48 	.word	0x08029e48
 80218f8:	08029e56 	.word	0x08029e56
 80218fc:	08029e6b 	.word	0x08029e6b
 8021900:	08029fbc 	.word	0x08029fbc
 8021904:	0802a131 	.word	0x0802a131
 8021908:	08029e7a 	.word	0x08029e7a
 802190c:	08029e70 	.word	0x08029e70
 8021910:	08029e75 	.word	0x08029e75
 8021914:	f108 33ff 	add.w	r3, r8, #4294967295
 8021918:	42a3      	cmp	r3, r4
 802191a:	f67f ac48 	bls.w	80211ae <__strftime+0x5e>
 802191e:	69ab      	ldr	r3, [r5, #24]
 8021920:	eb09 0204 	add.w	r2, r9, r4
 8021924:	3401      	adds	r4, #1
 8021926:	b913      	cbnz	r3, 802192e <__strftime+0x7de>
 8021928:	2337      	movs	r3, #55	; 0x37
 802192a:	7013      	strb	r3, [r2, #0]
 802192c:	e512      	b.n	8021354 <__strftime+0x204>
 802192e:	3330      	adds	r3, #48	; 0x30
 8021930:	e7fb      	b.n	802192a <__strftime+0x7da>
 8021932:	69eb      	ldr	r3, [r5, #28]
 8021934:	69aa      	ldr	r2, [r5, #24]
 8021936:	3307      	adds	r3, #7
 8021938:	1a9b      	subs	r3, r3, r2
 802193a:	2207      	movs	r2, #7
 802193c:	fb93 f3f2 	sdiv	r3, r3, r2
 8021940:	e62f      	b.n	80215a2 <__strftime+0x452>
 8021942:	4628      	mov	r0, r5
 8021944:	f7ff fba2 	bl	802108c <iso_year_adjust>
 8021948:	69aa      	ldr	r2, [r5, #24]
 802194a:	b132      	cbz	r2, 802195a <__strftime+0x80a>
 802194c:	3a01      	subs	r2, #1
 802194e:	2800      	cmp	r0, #0
 8021950:	dc28      	bgt.n	80219a4 <__strftime+0x854>
 8021952:	69eb      	ldr	r3, [r5, #28]
 8021954:	d103      	bne.n	802195e <__strftime+0x80e>
 8021956:	330a      	adds	r3, #10
 8021958:	e7ee      	b.n	8021938 <__strftime+0x7e8>
 802195a:	2206      	movs	r2, #6
 802195c:	e7f7      	b.n	802194e <__strftime+0x7fe>
 802195e:	6968      	ldr	r0, [r5, #20]
 8021960:	2800      	cmp	r0, #0
 8021962:	eba2 0303 	sub.w	r3, r2, r3
 8021966:	f240 726b 	movw	r2, #1899	; 0x76b
 802196a:	bfa8      	it	ge
 802196c:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8021970:	4410      	add	r0, r2
 8021972:	0782      	lsls	r2, r0, #30
 8021974:	d105      	bne.n	8021982 <__strftime+0x832>
 8021976:	2264      	movs	r2, #100	; 0x64
 8021978:	fb90 f1f2 	sdiv	r1, r0, r2
 802197c:	fb02 0111 	mls	r1, r2, r1, r0
 8021980:	b971      	cbnz	r1, 80219a0 <__strftime+0x850>
 8021982:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8021986:	fb90 f2f1 	sdiv	r2, r0, r1
 802198a:	fb01 0212 	mls	r2, r1, r2, r0
 802198e:	fab2 f282 	clz	r2, r2
 8021992:	0952      	lsrs	r2, r2, #5
 8021994:	1a9a      	subs	r2, r3, r2
 8021996:	2a05      	cmp	r2, #5
 8021998:	bfb4      	ite	lt
 802199a:	2335      	movlt	r3, #53	; 0x35
 802199c:	2334      	movge	r3, #52	; 0x34
 802199e:	e600      	b.n	80215a2 <__strftime+0x452>
 80219a0:	2201      	movs	r2, #1
 80219a2:	e7f7      	b.n	8021994 <__strftime+0x844>
 80219a4:	2301      	movs	r3, #1
 80219a6:	e5fc      	b.n	80215a2 <__strftime+0x452>
 80219a8:	f108 33ff 	add.w	r3, r8, #4294967295
 80219ac:	42a3      	cmp	r3, r4
 80219ae:	f67f abfe 	bls.w	80211ae <__strftime+0x5e>
 80219b2:	69ab      	ldr	r3, [r5, #24]
 80219b4:	3330      	adds	r3, #48	; 0x30
 80219b6:	e6d1      	b.n	802175c <__strftime+0x60c>
 80219b8:	69ab      	ldr	r3, [r5, #24]
 80219ba:	b13b      	cbz	r3, 80219cc <__strftime+0x87c>
 80219bc:	3b01      	subs	r3, #1
 80219be:	69ea      	ldr	r2, [r5, #28]
 80219c0:	3207      	adds	r2, #7
 80219c2:	1ad2      	subs	r2, r2, r3
 80219c4:	2307      	movs	r3, #7
 80219c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80219ca:	e5ea      	b.n	80215a2 <__strftime+0x452>
 80219cc:	2306      	movs	r3, #6
 80219ce:	e7f6      	b.n	80219be <__strftime+0x86e>
 80219d0:	6968      	ldr	r0, [r5, #20]
 80219d2:	2800      	cmp	r0, #0
 80219d4:	db05      	blt.n	80219e2 <__strftime+0x892>
 80219d6:	2264      	movs	r2, #100	; 0x64
 80219d8:	fb90 f3f2 	sdiv	r3, r0, r2
 80219dc:	fb03 0312 	mls	r3, r3, r2, r0
 80219e0:	e5df      	b.n	80215a2 <__strftime+0x452>
 80219e2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80219e6:	f000 fd81 	bl	80224ec <abs>
 80219ea:	e7f4      	b.n	80219d6 <__strftime+0x886>
 80219ec:	696b      	ldr	r3, [r5, #20]
 80219ee:	4a4c      	ldr	r2, [pc, #304]	; (8021b20 <__strftime+0x9d0>)
 80219f0:	4293      	cmp	r3, r2
 80219f2:	da09      	bge.n	8021a08 <__strftime+0x8b8>
 80219f4:	212d      	movs	r1, #45	; 0x2d
 80219f6:	f88d 1020 	strb.w	r1, [sp, #32]
 80219fa:	eba2 0a03 	sub.w	sl, r2, r3
 80219fe:	b106      	cbz	r6, 8021a02 <__strftime+0x8b2>
 8021a00:	3e01      	subs	r6, #1
 8021a02:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8021a06:	e00b      	b.n	8021a20 <__strftime+0x8d0>
 8021a08:	2f2b      	cmp	r7, #43	; 0x2b
 8021a0a:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8021a0e:	d106      	bne.n	8021a1e <__strftime+0x8ce>
 8021a10:	f242 730f 	movw	r3, #9999	; 0x270f
 8021a14:	459a      	cmp	sl, r3
 8021a16:	d902      	bls.n	8021a1e <__strftime+0x8ce>
 8021a18:	f88d 7020 	strb.w	r7, [sp, #32]
 8021a1c:	e7ef      	b.n	80219fe <__strftime+0x8ae>
 8021a1e:	ab08      	add	r3, sp, #32
 8021a20:	2225      	movs	r2, #37	; 0x25
 8021a22:	701a      	strb	r2, [r3, #0]
 8021a24:	b937      	cbnz	r7, 8021a34 <__strftime+0x8e4>
 8021a26:	1c58      	adds	r0, r3, #1
 8021a28:	493e      	ldr	r1, [pc, #248]	; (8021b24 <__strftime+0x9d4>)
 8021a2a:	f7ff fb26 	bl	802107a <strcpy>
 8021a2e:	f8cd a000 	str.w	sl, [sp]
 8021a32:	e665      	b.n	8021700 <__strftime+0x5b0>
 8021a34:	2230      	movs	r2, #48	; 0x30
 8021a36:	1c98      	adds	r0, r3, #2
 8021a38:	705a      	strb	r2, [r3, #1]
 8021a3a:	e7f5      	b.n	8021a28 <__strftime+0x8d8>
 8021a3c:	6a2b      	ldr	r3, [r5, #32]
 8021a3e:	2b00      	cmp	r3, #0
 8021a40:	f6ff ac88 	blt.w	8021354 <__strftime+0x204>
 8021a44:	f000 fa56 	bl	8021ef4 <__tz_lock>
 8021a48:	9b04      	ldr	r3, [sp, #16]
 8021a4a:	b90b      	cbnz	r3, 8021a50 <__strftime+0x900>
 8021a4c:	f000 fa5e 	bl	8021f0c <_tzset_unlocked>
 8021a50:	f000 fe1a 	bl	8022688 <__gettzinfo>
 8021a54:	6a2b      	ldr	r3, [r5, #32]
 8021a56:	2b00      	cmp	r3, #0
 8021a58:	bfcc      	ite	gt
 8021a5a:	2350      	movgt	r3, #80	; 0x50
 8021a5c:	2328      	movle	r3, #40	; 0x28
 8021a5e:	eb09 0704 	add.w	r7, r9, r4
 8021a62:	58c6      	ldr	r6, [r0, r3]
 8021a64:	f000 fa4c 	bl	8021f00 <__tz_unlock>
 8021a68:	4276      	negs	r6, r6
 8021a6a:	233c      	movs	r3, #60	; 0x3c
 8021a6c:	fb96 f0f3 	sdiv	r0, r6, r3
 8021a70:	f000 fece 	bl	8022810 <labs>
 8021a74:	233c      	movs	r3, #60	; 0x3c
 8021a76:	eba8 0a04 	sub.w	sl, r8, r4
 8021a7a:	fb90 f2f3 	sdiv	r2, r0, r3
 8021a7e:	fb02 0013 	mls	r0, r2, r3, r0
 8021a82:	9000      	str	r0, [sp, #0]
 8021a84:	4a28      	ldr	r2, [pc, #160]	; (8021b28 <__strftime+0x9d8>)
 8021a86:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8021a8a:	4651      	mov	r1, sl
 8021a8c:	4638      	mov	r0, r7
 8021a8e:	fb96 f3f3 	sdiv	r3, r6, r3
 8021a92:	f001 fbbb 	bl	802320c <sniprintf>
 8021a96:	2800      	cmp	r0, #0
 8021a98:	f6ff ab89 	blt.w	80211ae <__strftime+0x5e>
 8021a9c:	4404      	add	r4, r0
 8021a9e:	45a0      	cmp	r8, r4
 8021aa0:	f67f ab85 	bls.w	80211ae <__strftime+0x5e>
 8021aa4:	2301      	movs	r3, #1
 8021aa6:	9304      	str	r3, [sp, #16]
 8021aa8:	e454      	b.n	8021354 <__strftime+0x204>
 8021aaa:	6a2b      	ldr	r3, [r5, #32]
 8021aac:	2b00      	cmp	r3, #0
 8021aae:	f6ff ac51 	blt.w	8021354 <__strftime+0x204>
 8021ab2:	f000 fa1f 	bl	8021ef4 <__tz_lock>
 8021ab6:	9b04      	ldr	r3, [sp, #16]
 8021ab8:	b90b      	cbnz	r3, 8021abe <__strftime+0x96e>
 8021aba:	f000 fa27 	bl	8021f0c <_tzset_unlocked>
 8021abe:	6a2b      	ldr	r3, [r5, #32]
 8021ac0:	4a1a      	ldr	r2, [pc, #104]	; (8021b2c <__strftime+0x9dc>)
 8021ac2:	2b00      	cmp	r3, #0
 8021ac4:	bfd4      	ite	le
 8021ac6:	2300      	movle	r3, #0
 8021ac8:	2301      	movgt	r3, #1
 8021aca:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8021ace:	4630      	mov	r0, r6
 8021ad0:	f7de fbb4 	bl	800023c <strlen>
 8021ad4:	3e01      	subs	r6, #1
 8021ad6:	4420      	add	r0, r4
 8021ad8:	f108 33ff 	add.w	r3, r8, #4294967295
 8021adc:	42a0      	cmp	r0, r4
 8021ade:	d102      	bne.n	8021ae6 <__strftime+0x996>
 8021ae0:	f000 fa0e 	bl	8021f00 <__tz_unlock>
 8021ae4:	e7de      	b.n	8021aa4 <__strftime+0x954>
 8021ae6:	42a3      	cmp	r3, r4
 8021ae8:	d905      	bls.n	8021af6 <__strftime+0x9a6>
 8021aea:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8021aee:	f809 2004 	strb.w	r2, [r9, r4]
 8021af2:	3401      	adds	r4, #1
 8021af4:	e7f2      	b.n	8021adc <__strftime+0x98c>
 8021af6:	f000 fa03 	bl	8021f00 <__tz_unlock>
 8021afa:	f7ff bb58 	b.w	80211ae <__strftime+0x5e>
 8021afe:	f108 33ff 	add.w	r3, r8, #4294967295
 8021b02:	42a3      	cmp	r3, r4
 8021b04:	f67f ab53 	bls.w	80211ae <__strftime+0x5e>
 8021b08:	2325      	movs	r3, #37	; 0x25
 8021b0a:	e627      	b.n	802175c <__strftime+0x60c>
 8021b0c:	f1b8 0f00 	cmp.w	r8, #0
 8021b10:	d002      	beq.n	8021b18 <__strftime+0x9c8>
 8021b12:	2300      	movs	r3, #0
 8021b14:	f809 3004 	strb.w	r3, [r9, r4]
 8021b18:	4620      	mov	r0, r4
 8021b1a:	b011      	add	sp, #68	; 0x44
 8021b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b20:	fffff894 	.word	0xfffff894
 8021b24:	08029e67 	.word	0x08029e67
 8021b28:	08029e84 	.word	0x08029e84
 8021b2c:	2000016c 	.word	0x2000016c

08021b30 <strftime>:
 8021b30:	b513      	push	{r0, r1, r4, lr}
 8021b32:	4c03      	ldr	r4, [pc, #12]	; (8021b40 <strftime+0x10>)
 8021b34:	9400      	str	r4, [sp, #0]
 8021b36:	f7ff fb0b 	bl	8021150 <__strftime>
 8021b3a:	b002      	add	sp, #8
 8021b3c:	bd10      	pop	{r4, pc}
 8021b3e:	bf00      	nop
 8021b40:	200001d0 	.word	0x200001d0

08021b44 <strstr>:
 8021b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021b46:	780c      	ldrb	r4, [r1, #0]
 8021b48:	b164      	cbz	r4, 8021b64 <strstr+0x20>
 8021b4a:	4603      	mov	r3, r0
 8021b4c:	781a      	ldrb	r2, [r3, #0]
 8021b4e:	4618      	mov	r0, r3
 8021b50:	1c5e      	adds	r6, r3, #1
 8021b52:	b90a      	cbnz	r2, 8021b58 <strstr+0x14>
 8021b54:	4610      	mov	r0, r2
 8021b56:	e005      	b.n	8021b64 <strstr+0x20>
 8021b58:	4294      	cmp	r4, r2
 8021b5a:	d108      	bne.n	8021b6e <strstr+0x2a>
 8021b5c:	460d      	mov	r5, r1
 8021b5e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8021b62:	b902      	cbnz	r2, 8021b66 <strstr+0x22>
 8021b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021b66:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8021b6a:	4297      	cmp	r7, r2
 8021b6c:	d0f7      	beq.n	8021b5e <strstr+0x1a>
 8021b6e:	4633      	mov	r3, r6
 8021b70:	e7ec      	b.n	8021b4c <strstr+0x8>
	...

08021b74 <_strtol_l.isra.0>:
 8021b74:	2b01      	cmp	r3, #1
 8021b76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021b7a:	d001      	beq.n	8021b80 <_strtol_l.isra.0+0xc>
 8021b7c:	2b24      	cmp	r3, #36	; 0x24
 8021b7e:	d906      	bls.n	8021b8e <_strtol_l.isra.0+0x1a>
 8021b80:	f7fe fa84 	bl	802008c <__errno>
 8021b84:	2316      	movs	r3, #22
 8021b86:	6003      	str	r3, [r0, #0]
 8021b88:	2000      	movs	r0, #0
 8021b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021b8e:	4f3a      	ldr	r7, [pc, #232]	; (8021c78 <_strtol_l.isra.0+0x104>)
 8021b90:	468e      	mov	lr, r1
 8021b92:	4676      	mov	r6, lr
 8021b94:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021b98:	5de5      	ldrb	r5, [r4, r7]
 8021b9a:	f015 0508 	ands.w	r5, r5, #8
 8021b9e:	d1f8      	bne.n	8021b92 <_strtol_l.isra.0+0x1e>
 8021ba0:	2c2d      	cmp	r4, #45	; 0x2d
 8021ba2:	d134      	bne.n	8021c0e <_strtol_l.isra.0+0x9a>
 8021ba4:	f89e 4000 	ldrb.w	r4, [lr]
 8021ba8:	f04f 0801 	mov.w	r8, #1
 8021bac:	f106 0e02 	add.w	lr, r6, #2
 8021bb0:	2b00      	cmp	r3, #0
 8021bb2:	d05c      	beq.n	8021c6e <_strtol_l.isra.0+0xfa>
 8021bb4:	2b10      	cmp	r3, #16
 8021bb6:	d10c      	bne.n	8021bd2 <_strtol_l.isra.0+0x5e>
 8021bb8:	2c30      	cmp	r4, #48	; 0x30
 8021bba:	d10a      	bne.n	8021bd2 <_strtol_l.isra.0+0x5e>
 8021bbc:	f89e 4000 	ldrb.w	r4, [lr]
 8021bc0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8021bc4:	2c58      	cmp	r4, #88	; 0x58
 8021bc6:	d14d      	bne.n	8021c64 <_strtol_l.isra.0+0xf0>
 8021bc8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8021bcc:	2310      	movs	r3, #16
 8021bce:	f10e 0e02 	add.w	lr, lr, #2
 8021bd2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8021bd6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021bda:	2600      	movs	r6, #0
 8021bdc:	fbbc f9f3 	udiv	r9, ip, r3
 8021be0:	4635      	mov	r5, r6
 8021be2:	fb03 ca19 	mls	sl, r3, r9, ip
 8021be6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8021bea:	2f09      	cmp	r7, #9
 8021bec:	d818      	bhi.n	8021c20 <_strtol_l.isra.0+0xac>
 8021bee:	463c      	mov	r4, r7
 8021bf0:	42a3      	cmp	r3, r4
 8021bf2:	dd24      	ble.n	8021c3e <_strtol_l.isra.0+0xca>
 8021bf4:	2e00      	cmp	r6, #0
 8021bf6:	db1f      	blt.n	8021c38 <_strtol_l.isra.0+0xc4>
 8021bf8:	45a9      	cmp	r9, r5
 8021bfa:	d31d      	bcc.n	8021c38 <_strtol_l.isra.0+0xc4>
 8021bfc:	d101      	bne.n	8021c02 <_strtol_l.isra.0+0x8e>
 8021bfe:	45a2      	cmp	sl, r4
 8021c00:	db1a      	blt.n	8021c38 <_strtol_l.isra.0+0xc4>
 8021c02:	fb05 4503 	mla	r5, r5, r3, r4
 8021c06:	2601      	movs	r6, #1
 8021c08:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021c0c:	e7eb      	b.n	8021be6 <_strtol_l.isra.0+0x72>
 8021c0e:	2c2b      	cmp	r4, #43	; 0x2b
 8021c10:	bf08      	it	eq
 8021c12:	f89e 4000 	ldrbeq.w	r4, [lr]
 8021c16:	46a8      	mov	r8, r5
 8021c18:	bf08      	it	eq
 8021c1a:	f106 0e02 	addeq.w	lr, r6, #2
 8021c1e:	e7c7      	b.n	8021bb0 <_strtol_l.isra.0+0x3c>
 8021c20:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8021c24:	2f19      	cmp	r7, #25
 8021c26:	d801      	bhi.n	8021c2c <_strtol_l.isra.0+0xb8>
 8021c28:	3c37      	subs	r4, #55	; 0x37
 8021c2a:	e7e1      	b.n	8021bf0 <_strtol_l.isra.0+0x7c>
 8021c2c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8021c30:	2f19      	cmp	r7, #25
 8021c32:	d804      	bhi.n	8021c3e <_strtol_l.isra.0+0xca>
 8021c34:	3c57      	subs	r4, #87	; 0x57
 8021c36:	e7db      	b.n	8021bf0 <_strtol_l.isra.0+0x7c>
 8021c38:	f04f 36ff 	mov.w	r6, #4294967295
 8021c3c:	e7e4      	b.n	8021c08 <_strtol_l.isra.0+0x94>
 8021c3e:	2e00      	cmp	r6, #0
 8021c40:	da05      	bge.n	8021c4e <_strtol_l.isra.0+0xda>
 8021c42:	2322      	movs	r3, #34	; 0x22
 8021c44:	6003      	str	r3, [r0, #0]
 8021c46:	4665      	mov	r5, ip
 8021c48:	b942      	cbnz	r2, 8021c5c <_strtol_l.isra.0+0xe8>
 8021c4a:	4628      	mov	r0, r5
 8021c4c:	e79d      	b.n	8021b8a <_strtol_l.isra.0+0x16>
 8021c4e:	f1b8 0f00 	cmp.w	r8, #0
 8021c52:	d000      	beq.n	8021c56 <_strtol_l.isra.0+0xe2>
 8021c54:	426d      	negs	r5, r5
 8021c56:	2a00      	cmp	r2, #0
 8021c58:	d0f7      	beq.n	8021c4a <_strtol_l.isra.0+0xd6>
 8021c5a:	b10e      	cbz	r6, 8021c60 <_strtol_l.isra.0+0xec>
 8021c5c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8021c60:	6011      	str	r1, [r2, #0]
 8021c62:	e7f2      	b.n	8021c4a <_strtol_l.isra.0+0xd6>
 8021c64:	2430      	movs	r4, #48	; 0x30
 8021c66:	2b00      	cmp	r3, #0
 8021c68:	d1b3      	bne.n	8021bd2 <_strtol_l.isra.0+0x5e>
 8021c6a:	2308      	movs	r3, #8
 8021c6c:	e7b1      	b.n	8021bd2 <_strtol_l.isra.0+0x5e>
 8021c6e:	2c30      	cmp	r4, #48	; 0x30
 8021c70:	d0a4      	beq.n	8021bbc <_strtol_l.isra.0+0x48>
 8021c72:	230a      	movs	r3, #10
 8021c74:	e7ad      	b.n	8021bd2 <_strtol_l.isra.0+0x5e>
 8021c76:	bf00      	nop
 8021c78:	0802a131 	.word	0x0802a131

08021c7c <_strtol_r>:
 8021c7c:	f7ff bf7a 	b.w	8021b74 <_strtol_l.isra.0>

08021c80 <strtol>:
 8021c80:	4613      	mov	r3, r2
 8021c82:	460a      	mov	r2, r1
 8021c84:	4601      	mov	r1, r0
 8021c86:	4802      	ldr	r0, [pc, #8]	; (8021c90 <strtol+0x10>)
 8021c88:	6800      	ldr	r0, [r0, #0]
 8021c8a:	f7ff bf73 	b.w	8021b74 <_strtol_l.isra.0>
 8021c8e:	bf00      	nop
 8021c90:	20000108 	.word	0x20000108

08021c94 <_strtoul_l.isra.0>:
 8021c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021c98:	4e3b      	ldr	r6, [pc, #236]	; (8021d88 <_strtoul_l.isra.0+0xf4>)
 8021c9a:	4686      	mov	lr, r0
 8021c9c:	468c      	mov	ip, r1
 8021c9e:	4660      	mov	r0, ip
 8021ca0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8021ca4:	5da5      	ldrb	r5, [r4, r6]
 8021ca6:	f015 0508 	ands.w	r5, r5, #8
 8021caa:	d1f8      	bne.n	8021c9e <_strtoul_l.isra.0+0xa>
 8021cac:	2c2d      	cmp	r4, #45	; 0x2d
 8021cae:	d134      	bne.n	8021d1a <_strtoul_l.isra.0+0x86>
 8021cb0:	f89c 4000 	ldrb.w	r4, [ip]
 8021cb4:	f04f 0801 	mov.w	r8, #1
 8021cb8:	f100 0c02 	add.w	ip, r0, #2
 8021cbc:	2b00      	cmp	r3, #0
 8021cbe:	d05e      	beq.n	8021d7e <_strtoul_l.isra.0+0xea>
 8021cc0:	2b10      	cmp	r3, #16
 8021cc2:	d10c      	bne.n	8021cde <_strtoul_l.isra.0+0x4a>
 8021cc4:	2c30      	cmp	r4, #48	; 0x30
 8021cc6:	d10a      	bne.n	8021cde <_strtoul_l.isra.0+0x4a>
 8021cc8:	f89c 0000 	ldrb.w	r0, [ip]
 8021ccc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8021cd0:	2858      	cmp	r0, #88	; 0x58
 8021cd2:	d14f      	bne.n	8021d74 <_strtoul_l.isra.0+0xe0>
 8021cd4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8021cd8:	2310      	movs	r3, #16
 8021cda:	f10c 0c02 	add.w	ip, ip, #2
 8021cde:	f04f 37ff 	mov.w	r7, #4294967295
 8021ce2:	2500      	movs	r5, #0
 8021ce4:	fbb7 f7f3 	udiv	r7, r7, r3
 8021ce8:	fb03 f907 	mul.w	r9, r3, r7
 8021cec:	ea6f 0909 	mvn.w	r9, r9
 8021cf0:	4628      	mov	r0, r5
 8021cf2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8021cf6:	2e09      	cmp	r6, #9
 8021cf8:	d818      	bhi.n	8021d2c <_strtoul_l.isra.0+0x98>
 8021cfa:	4634      	mov	r4, r6
 8021cfc:	42a3      	cmp	r3, r4
 8021cfe:	dd24      	ble.n	8021d4a <_strtoul_l.isra.0+0xb6>
 8021d00:	2d00      	cmp	r5, #0
 8021d02:	db1f      	blt.n	8021d44 <_strtoul_l.isra.0+0xb0>
 8021d04:	4287      	cmp	r7, r0
 8021d06:	d31d      	bcc.n	8021d44 <_strtoul_l.isra.0+0xb0>
 8021d08:	d101      	bne.n	8021d0e <_strtoul_l.isra.0+0x7a>
 8021d0a:	45a1      	cmp	r9, r4
 8021d0c:	db1a      	blt.n	8021d44 <_strtoul_l.isra.0+0xb0>
 8021d0e:	fb00 4003 	mla	r0, r0, r3, r4
 8021d12:	2501      	movs	r5, #1
 8021d14:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8021d18:	e7eb      	b.n	8021cf2 <_strtoul_l.isra.0+0x5e>
 8021d1a:	2c2b      	cmp	r4, #43	; 0x2b
 8021d1c:	bf08      	it	eq
 8021d1e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8021d22:	46a8      	mov	r8, r5
 8021d24:	bf08      	it	eq
 8021d26:	f100 0c02 	addeq.w	ip, r0, #2
 8021d2a:	e7c7      	b.n	8021cbc <_strtoul_l.isra.0+0x28>
 8021d2c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8021d30:	2e19      	cmp	r6, #25
 8021d32:	d801      	bhi.n	8021d38 <_strtoul_l.isra.0+0xa4>
 8021d34:	3c37      	subs	r4, #55	; 0x37
 8021d36:	e7e1      	b.n	8021cfc <_strtoul_l.isra.0+0x68>
 8021d38:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8021d3c:	2e19      	cmp	r6, #25
 8021d3e:	d804      	bhi.n	8021d4a <_strtoul_l.isra.0+0xb6>
 8021d40:	3c57      	subs	r4, #87	; 0x57
 8021d42:	e7db      	b.n	8021cfc <_strtoul_l.isra.0+0x68>
 8021d44:	f04f 35ff 	mov.w	r5, #4294967295
 8021d48:	e7e4      	b.n	8021d14 <_strtoul_l.isra.0+0x80>
 8021d4a:	2d00      	cmp	r5, #0
 8021d4c:	da07      	bge.n	8021d5e <_strtoul_l.isra.0+0xca>
 8021d4e:	2322      	movs	r3, #34	; 0x22
 8021d50:	f8ce 3000 	str.w	r3, [lr]
 8021d54:	f04f 30ff 	mov.w	r0, #4294967295
 8021d58:	b942      	cbnz	r2, 8021d6c <_strtoul_l.isra.0+0xd8>
 8021d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021d5e:	f1b8 0f00 	cmp.w	r8, #0
 8021d62:	d000      	beq.n	8021d66 <_strtoul_l.isra.0+0xd2>
 8021d64:	4240      	negs	r0, r0
 8021d66:	2a00      	cmp	r2, #0
 8021d68:	d0f7      	beq.n	8021d5a <_strtoul_l.isra.0+0xc6>
 8021d6a:	b10d      	cbz	r5, 8021d70 <_strtoul_l.isra.0+0xdc>
 8021d6c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8021d70:	6011      	str	r1, [r2, #0]
 8021d72:	e7f2      	b.n	8021d5a <_strtoul_l.isra.0+0xc6>
 8021d74:	2430      	movs	r4, #48	; 0x30
 8021d76:	2b00      	cmp	r3, #0
 8021d78:	d1b1      	bne.n	8021cde <_strtoul_l.isra.0+0x4a>
 8021d7a:	2308      	movs	r3, #8
 8021d7c:	e7af      	b.n	8021cde <_strtoul_l.isra.0+0x4a>
 8021d7e:	2c30      	cmp	r4, #48	; 0x30
 8021d80:	d0a2      	beq.n	8021cc8 <_strtoul_l.isra.0+0x34>
 8021d82:	230a      	movs	r3, #10
 8021d84:	e7ab      	b.n	8021cde <_strtoul_l.isra.0+0x4a>
 8021d86:	bf00      	nop
 8021d88:	0802a131 	.word	0x0802a131

08021d8c <_strtoul_r>:
 8021d8c:	f7ff bf82 	b.w	8021c94 <_strtoul_l.isra.0>

08021d90 <strtoul>:
 8021d90:	4613      	mov	r3, r2
 8021d92:	460a      	mov	r2, r1
 8021d94:	4601      	mov	r1, r0
 8021d96:	4802      	ldr	r0, [pc, #8]	; (8021da0 <strtoul+0x10>)
 8021d98:	6800      	ldr	r0, [r0, #0]
 8021d9a:	f7ff bf7b 	b.w	8021c94 <_strtoul_l.isra.0>
 8021d9e:	bf00      	nop
 8021da0:	20000108 	.word	0x20000108

08021da4 <__tzcalc_limits>:
 8021da4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021da8:	4680      	mov	r8, r0
 8021daa:	f000 fc6d 	bl	8022688 <__gettzinfo>
 8021dae:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8021db2:	4598      	cmp	r8, r3
 8021db4:	f340 8098 	ble.w	8021ee8 <__tzcalc_limits+0x144>
 8021db8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8021dbc:	4443      	add	r3, r8
 8021dbe:	109b      	asrs	r3, r3, #2
 8021dc0:	f240 126d 	movw	r2, #365	; 0x16d
 8021dc4:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8021dc8:	fb02 3505 	mla	r5, r2, r5, r3
 8021dcc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8021dd0:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8021dd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8021dd8:	441d      	add	r5, r3
 8021dda:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8021dde:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8021de2:	fb98 f7f3 	sdiv	r7, r8, r3
 8021de6:	fb03 8717 	mls	r7, r3, r7, r8
 8021dea:	4442      	add	r2, r8
 8021dec:	fab7 fc87 	clz	ip, r7
 8021df0:	fbb2 f2f3 	udiv	r2, r2, r3
 8021df4:	f008 0303 	and.w	r3, r8, #3
 8021df8:	4415      	add	r5, r2
 8021dfa:	2264      	movs	r2, #100	; 0x64
 8021dfc:	f8c0 8004 	str.w	r8, [r0, #4]
 8021e00:	fb98 f6f2 	sdiv	r6, r8, r2
 8021e04:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021e08:	fb02 8616 	mls	r6, r2, r6, r8
 8021e0c:	4604      	mov	r4, r0
 8021e0e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8021e12:	9300      	str	r3, [sp, #0]
 8021e14:	f04f 0e07 	mov.w	lr, #7
 8021e18:	7a22      	ldrb	r2, [r4, #8]
 8021e1a:	6963      	ldr	r3, [r4, #20]
 8021e1c:	2a4a      	cmp	r2, #74	; 0x4a
 8021e1e:	d128      	bne.n	8021e72 <__tzcalc_limits+0xce>
 8021e20:	9900      	ldr	r1, [sp, #0]
 8021e22:	18ea      	adds	r2, r5, r3
 8021e24:	b901      	cbnz	r1, 8021e28 <__tzcalc_limits+0x84>
 8021e26:	b906      	cbnz	r6, 8021e2a <__tzcalc_limits+0x86>
 8021e28:	bb0f      	cbnz	r7, 8021e6e <__tzcalc_limits+0xca>
 8021e2a:	2b3b      	cmp	r3, #59	; 0x3b
 8021e2c:	bfd4      	ite	le
 8021e2e:	2300      	movle	r3, #0
 8021e30:	2301      	movgt	r3, #1
 8021e32:	4413      	add	r3, r2
 8021e34:	1e5a      	subs	r2, r3, #1
 8021e36:	69a3      	ldr	r3, [r4, #24]
 8021e38:	492c      	ldr	r1, [pc, #176]	; (8021eec <__tzcalc_limits+0x148>)
 8021e3a:	fb01 3202 	mla	r2, r1, r2, r3
 8021e3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021e40:	4413      	add	r3, r2
 8021e42:	461a      	mov	r2, r3
 8021e44:	17db      	asrs	r3, r3, #31
 8021e46:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8021e4a:	3428      	adds	r4, #40	; 0x28
 8021e4c:	45a3      	cmp	fp, r4
 8021e4e:	d1e3      	bne.n	8021e18 <__tzcalc_limits+0x74>
 8021e50:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8021e54:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8021e58:	4294      	cmp	r4, r2
 8021e5a:	eb75 0303 	sbcs.w	r3, r5, r3
 8021e5e:	bfb4      	ite	lt
 8021e60:	2301      	movlt	r3, #1
 8021e62:	2300      	movge	r3, #0
 8021e64:	6003      	str	r3, [r0, #0]
 8021e66:	2001      	movs	r0, #1
 8021e68:	b003      	add	sp, #12
 8021e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e6e:	2300      	movs	r3, #0
 8021e70:	e7df      	b.n	8021e32 <__tzcalc_limits+0x8e>
 8021e72:	2a44      	cmp	r2, #68	; 0x44
 8021e74:	d101      	bne.n	8021e7a <__tzcalc_limits+0xd6>
 8021e76:	18ea      	adds	r2, r5, r3
 8021e78:	e7dd      	b.n	8021e36 <__tzcalc_limits+0x92>
 8021e7a:	9a00      	ldr	r2, [sp, #0]
 8021e7c:	bb72      	cbnz	r2, 8021edc <__tzcalc_limits+0x138>
 8021e7e:	2e00      	cmp	r6, #0
 8021e80:	bf0c      	ite	eq
 8021e82:	46e0      	moveq	r8, ip
 8021e84:	f04f 0801 	movne.w	r8, #1
 8021e88:	4919      	ldr	r1, [pc, #100]	; (8021ef0 <__tzcalc_limits+0x14c>)
 8021e8a:	68e2      	ldr	r2, [r4, #12]
 8021e8c:	9201      	str	r2, [sp, #4]
 8021e8e:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8021e92:	fb0a 1808 	mla	r8, sl, r8, r1
 8021e96:	462a      	mov	r2, r5
 8021e98:	f04f 0900 	mov.w	r9, #0
 8021e9c:	f1a8 0804 	sub.w	r8, r8, #4
 8021ea0:	9901      	ldr	r1, [sp, #4]
 8021ea2:	f109 0901 	add.w	r9, r9, #1
 8021ea6:	4549      	cmp	r1, r9
 8021ea8:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8021eac:	dc18      	bgt.n	8021ee0 <__tzcalc_limits+0x13c>
 8021eae:	f102 0804 	add.w	r8, r2, #4
 8021eb2:	fb98 f9fe 	sdiv	r9, r8, lr
 8021eb6:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8021eba:	eba8 0909 	sub.w	r9, r8, r9
 8021ebe:	ebb3 0909 	subs.w	r9, r3, r9
 8021ec2:	6923      	ldr	r3, [r4, #16]
 8021ec4:	f103 33ff 	add.w	r3, r3, #4294967295
 8021ec8:	bf48      	it	mi
 8021eca:	f109 0907 	addmi.w	r9, r9, #7
 8021ece:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8021ed2:	444b      	add	r3, r9
 8021ed4:	4553      	cmp	r3, sl
 8021ed6:	da05      	bge.n	8021ee4 <__tzcalc_limits+0x140>
 8021ed8:	441a      	add	r2, r3
 8021eda:	e7ac      	b.n	8021e36 <__tzcalc_limits+0x92>
 8021edc:	46e0      	mov	r8, ip
 8021ede:	e7d3      	b.n	8021e88 <__tzcalc_limits+0xe4>
 8021ee0:	4452      	add	r2, sl
 8021ee2:	e7dd      	b.n	8021ea0 <__tzcalc_limits+0xfc>
 8021ee4:	3b07      	subs	r3, #7
 8021ee6:	e7f5      	b.n	8021ed4 <__tzcalc_limits+0x130>
 8021ee8:	2000      	movs	r0, #0
 8021eea:	e7bd      	b.n	8021e68 <__tzcalc_limits+0xc4>
 8021eec:	00015180 	.word	0x00015180
 8021ef0:	08029d78 	.word	0x08029d78

08021ef4 <__tz_lock>:
 8021ef4:	4801      	ldr	r0, [pc, #4]	; (8021efc <__tz_lock+0x8>)
 8021ef6:	f7fe be21 	b.w	8020b3c <__retarget_lock_acquire>
 8021efa:	bf00      	nop
 8021efc:	2000100f 	.word	0x2000100f

08021f00 <__tz_unlock>:
 8021f00:	4801      	ldr	r0, [pc, #4]	; (8021f08 <__tz_unlock+0x8>)
 8021f02:	f7fe be1d 	b.w	8020b40 <__retarget_lock_release>
 8021f06:	bf00      	nop
 8021f08:	2000100f 	.word	0x2000100f

08021f0c <_tzset_unlocked>:
 8021f0c:	4b01      	ldr	r3, [pc, #4]	; (8021f14 <_tzset_unlocked+0x8>)
 8021f0e:	6818      	ldr	r0, [r3, #0]
 8021f10:	f000 b802 	b.w	8021f18 <_tzset_unlocked_r>
 8021f14:	20000108 	.word	0x20000108

08021f18 <_tzset_unlocked_r>:
 8021f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f1c:	b08d      	sub	sp, #52	; 0x34
 8021f1e:	4607      	mov	r7, r0
 8021f20:	f000 fbb2 	bl	8022688 <__gettzinfo>
 8021f24:	49ae      	ldr	r1, [pc, #696]	; (80221e0 <_tzset_unlocked_r+0x2c8>)
 8021f26:	4eaf      	ldr	r6, [pc, #700]	; (80221e4 <_tzset_unlocked_r+0x2cc>)
 8021f28:	4605      	mov	r5, r0
 8021f2a:	4638      	mov	r0, r7
 8021f2c:	f000 fba4 	bl	8022678 <_getenv_r>
 8021f30:	4604      	mov	r4, r0
 8021f32:	b970      	cbnz	r0, 8021f52 <_tzset_unlocked_r+0x3a>
 8021f34:	4bac      	ldr	r3, [pc, #688]	; (80221e8 <_tzset_unlocked_r+0x2d0>)
 8021f36:	4aad      	ldr	r2, [pc, #692]	; (80221ec <_tzset_unlocked_r+0x2d4>)
 8021f38:	6018      	str	r0, [r3, #0]
 8021f3a:	4bad      	ldr	r3, [pc, #692]	; (80221f0 <_tzset_unlocked_r+0x2d8>)
 8021f3c:	6018      	str	r0, [r3, #0]
 8021f3e:	4bad      	ldr	r3, [pc, #692]	; (80221f4 <_tzset_unlocked_r+0x2dc>)
 8021f40:	6830      	ldr	r0, [r6, #0]
 8021f42:	e9c3 2200 	strd	r2, r2, [r3]
 8021f46:	f7fe fe69 	bl	8020c1c <free>
 8021f4a:	6034      	str	r4, [r6, #0]
 8021f4c:	b00d      	add	sp, #52	; 0x34
 8021f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f52:	6831      	ldr	r1, [r6, #0]
 8021f54:	2900      	cmp	r1, #0
 8021f56:	d15f      	bne.n	8022018 <_tzset_unlocked_r+0x100>
 8021f58:	6830      	ldr	r0, [r6, #0]
 8021f5a:	f7fe fe5f 	bl	8020c1c <free>
 8021f5e:	4620      	mov	r0, r4
 8021f60:	f7de f96c 	bl	800023c <strlen>
 8021f64:	1c41      	adds	r1, r0, #1
 8021f66:	4638      	mov	r0, r7
 8021f68:	f7fe fed6 	bl	8020d18 <_malloc_r>
 8021f6c:	6030      	str	r0, [r6, #0]
 8021f6e:	2800      	cmp	r0, #0
 8021f70:	d157      	bne.n	8022022 <_tzset_unlocked_r+0x10a>
 8021f72:	7823      	ldrb	r3, [r4, #0]
 8021f74:	4aa0      	ldr	r2, [pc, #640]	; (80221f8 <_tzset_unlocked_r+0x2e0>)
 8021f76:	49a1      	ldr	r1, [pc, #644]	; (80221fc <_tzset_unlocked_r+0x2e4>)
 8021f78:	2b3a      	cmp	r3, #58	; 0x3a
 8021f7a:	bf08      	it	eq
 8021f7c:	3401      	addeq	r4, #1
 8021f7e:	ae0a      	add	r6, sp, #40	; 0x28
 8021f80:	4633      	mov	r3, r6
 8021f82:	4620      	mov	r0, r4
 8021f84:	f001 f976 	bl	8023274 <siscanf>
 8021f88:	2800      	cmp	r0, #0
 8021f8a:	dddf      	ble.n	8021f4c <_tzset_unlocked_r+0x34>
 8021f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021f8e:	18e7      	adds	r7, r4, r3
 8021f90:	5ce3      	ldrb	r3, [r4, r3]
 8021f92:	2b2d      	cmp	r3, #45	; 0x2d
 8021f94:	d149      	bne.n	802202a <_tzset_unlocked_r+0x112>
 8021f96:	3701      	adds	r7, #1
 8021f98:	f04f 34ff 	mov.w	r4, #4294967295
 8021f9c:	f10d 0a20 	add.w	sl, sp, #32
 8021fa0:	f10d 0b1e 	add.w	fp, sp, #30
 8021fa4:	f04f 0800 	mov.w	r8, #0
 8021fa8:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8021fac:	4994      	ldr	r1, [pc, #592]	; (8022200 <_tzset_unlocked_r+0x2e8>)
 8021fae:	9603      	str	r6, [sp, #12]
 8021fb0:	f8cd b000 	str.w	fp, [sp]
 8021fb4:	4633      	mov	r3, r6
 8021fb6:	aa07      	add	r2, sp, #28
 8021fb8:	4638      	mov	r0, r7
 8021fba:	f8ad 801e 	strh.w	r8, [sp, #30]
 8021fbe:	f8ad 8020 	strh.w	r8, [sp, #32]
 8021fc2:	f001 f957 	bl	8023274 <siscanf>
 8021fc6:	4540      	cmp	r0, r8
 8021fc8:	ddc0      	ble.n	8021f4c <_tzset_unlocked_r+0x34>
 8021fca:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021fce:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021fd2:	f8df 9238 	ldr.w	r9, [pc, #568]	; 802220c <_tzset_unlocked_r+0x2f4>
 8021fd6:	213c      	movs	r1, #60	; 0x3c
 8021fd8:	fb01 2203 	mla	r2, r1, r3, r2
 8021fdc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021fe0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021fe4:	fb01 2303 	mla	r3, r1, r3, r2
 8021fe8:	435c      	muls	r4, r3
 8021fea:	62ac      	str	r4, [r5, #40]	; 0x28
 8021fec:	4c81      	ldr	r4, [pc, #516]	; (80221f4 <_tzset_unlocked_r+0x2dc>)
 8021fee:	4b82      	ldr	r3, [pc, #520]	; (80221f8 <_tzset_unlocked_r+0x2e0>)
 8021ff0:	6023      	str	r3, [r4, #0]
 8021ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ff4:	4981      	ldr	r1, [pc, #516]	; (80221fc <_tzset_unlocked_r+0x2e4>)
 8021ff6:	441f      	add	r7, r3
 8021ff8:	464a      	mov	r2, r9
 8021ffa:	4633      	mov	r3, r6
 8021ffc:	4638      	mov	r0, r7
 8021ffe:	f001 f939 	bl	8023274 <siscanf>
 8022002:	4540      	cmp	r0, r8
 8022004:	dc16      	bgt.n	8022034 <_tzset_unlocked_r+0x11c>
 8022006:	6823      	ldr	r3, [r4, #0]
 8022008:	6063      	str	r3, [r4, #4]
 802200a:	4b77      	ldr	r3, [pc, #476]	; (80221e8 <_tzset_unlocked_r+0x2d0>)
 802200c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802200e:	601a      	str	r2, [r3, #0]
 8022010:	4b77      	ldr	r3, [pc, #476]	; (80221f0 <_tzset_unlocked_r+0x2d8>)
 8022012:	f8c3 8000 	str.w	r8, [r3]
 8022016:	e799      	b.n	8021f4c <_tzset_unlocked_r+0x34>
 8022018:	f7de f918 	bl	800024c <strcmp>
 802201c:	2800      	cmp	r0, #0
 802201e:	d19b      	bne.n	8021f58 <_tzset_unlocked_r+0x40>
 8022020:	e794      	b.n	8021f4c <_tzset_unlocked_r+0x34>
 8022022:	4621      	mov	r1, r4
 8022024:	f7ff f829 	bl	802107a <strcpy>
 8022028:	e7a3      	b.n	8021f72 <_tzset_unlocked_r+0x5a>
 802202a:	2b2b      	cmp	r3, #43	; 0x2b
 802202c:	bf08      	it	eq
 802202e:	3701      	addeq	r7, #1
 8022030:	2401      	movs	r4, #1
 8022032:	e7b3      	b.n	8021f9c <_tzset_unlocked_r+0x84>
 8022034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022036:	f8c4 9004 	str.w	r9, [r4, #4]
 802203a:	18fc      	adds	r4, r7, r3
 802203c:	5cfb      	ldrb	r3, [r7, r3]
 802203e:	2b2d      	cmp	r3, #45	; 0x2d
 8022040:	f040 808b 	bne.w	802215a <_tzset_unlocked_r+0x242>
 8022044:	3401      	adds	r4, #1
 8022046:	f04f 37ff 	mov.w	r7, #4294967295
 802204a:	2300      	movs	r3, #0
 802204c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022050:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022054:	f8ad 3020 	strh.w	r3, [sp, #32]
 8022058:	930a      	str	r3, [sp, #40]	; 0x28
 802205a:	e9cd a602 	strd	sl, r6, [sp, #8]
 802205e:	e9cd b600 	strd	fp, r6, [sp]
 8022062:	4967      	ldr	r1, [pc, #412]	; (8022200 <_tzset_unlocked_r+0x2e8>)
 8022064:	4633      	mov	r3, r6
 8022066:	aa07      	add	r2, sp, #28
 8022068:	4620      	mov	r0, r4
 802206a:	f001 f903 	bl	8023274 <siscanf>
 802206e:	2800      	cmp	r0, #0
 8022070:	dc78      	bgt.n	8022164 <_tzset_unlocked_r+0x24c>
 8022072:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8022074:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8022078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802207a:	652f      	str	r7, [r5, #80]	; 0x50
 802207c:	441c      	add	r4, r3
 802207e:	462f      	mov	r7, r5
 8022080:	f04f 0900 	mov.w	r9, #0
 8022084:	7823      	ldrb	r3, [r4, #0]
 8022086:	2b2c      	cmp	r3, #44	; 0x2c
 8022088:	bf08      	it	eq
 802208a:	3401      	addeq	r4, #1
 802208c:	f894 8000 	ldrb.w	r8, [r4]
 8022090:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8022094:	d178      	bne.n	8022188 <_tzset_unlocked_r+0x270>
 8022096:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 802209a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 802209e:	ab09      	add	r3, sp, #36	; 0x24
 80220a0:	9300      	str	r3, [sp, #0]
 80220a2:	4958      	ldr	r1, [pc, #352]	; (8022204 <_tzset_unlocked_r+0x2ec>)
 80220a4:	9603      	str	r6, [sp, #12]
 80220a6:	4633      	mov	r3, r6
 80220a8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80220ac:	4620      	mov	r0, r4
 80220ae:	f001 f8e1 	bl	8023274 <siscanf>
 80220b2:	2803      	cmp	r0, #3
 80220b4:	f47f af4a 	bne.w	8021f4c <_tzset_unlocked_r+0x34>
 80220b8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80220bc:	1e4b      	subs	r3, r1, #1
 80220be:	2b0b      	cmp	r3, #11
 80220c0:	f63f af44 	bhi.w	8021f4c <_tzset_unlocked_r+0x34>
 80220c4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80220c8:	1e53      	subs	r3, r2, #1
 80220ca:	2b04      	cmp	r3, #4
 80220cc:	f63f af3e 	bhi.w	8021f4c <_tzset_unlocked_r+0x34>
 80220d0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80220d4:	2b06      	cmp	r3, #6
 80220d6:	f63f af39 	bhi.w	8021f4c <_tzset_unlocked_r+0x34>
 80220da:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80220de:	f887 8008 	strb.w	r8, [r7, #8]
 80220e2:	617b      	str	r3, [r7, #20]
 80220e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220e6:	eb04 0803 	add.w	r8, r4, r3
 80220ea:	2302      	movs	r3, #2
 80220ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80220f0:	2300      	movs	r3, #0
 80220f2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80220f6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80220fa:	930a      	str	r3, [sp, #40]	; 0x28
 80220fc:	f898 3000 	ldrb.w	r3, [r8]
 8022100:	2b2f      	cmp	r3, #47	; 0x2f
 8022102:	d109      	bne.n	8022118 <_tzset_unlocked_r+0x200>
 8022104:	e9cd a602 	strd	sl, r6, [sp, #8]
 8022108:	e9cd b600 	strd	fp, r6, [sp]
 802210c:	493e      	ldr	r1, [pc, #248]	; (8022208 <_tzset_unlocked_r+0x2f0>)
 802210e:	4633      	mov	r3, r6
 8022110:	aa07      	add	r2, sp, #28
 8022112:	4640      	mov	r0, r8
 8022114:	f001 f8ae 	bl	8023274 <siscanf>
 8022118:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802211c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022120:	213c      	movs	r1, #60	; 0x3c
 8022122:	fb01 2203 	mla	r2, r1, r3, r2
 8022126:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802212a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802212e:	fb01 2303 	mla	r3, r1, r3, r2
 8022132:	61bb      	str	r3, [r7, #24]
 8022134:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022136:	3728      	adds	r7, #40	; 0x28
 8022138:	4444      	add	r4, r8
 802213a:	f1b9 0f00 	cmp.w	r9, #0
 802213e:	d020      	beq.n	8022182 <_tzset_unlocked_r+0x26a>
 8022140:	6868      	ldr	r0, [r5, #4]
 8022142:	f7ff fe2f 	bl	8021da4 <__tzcalc_limits>
 8022146:	4b28      	ldr	r3, [pc, #160]	; (80221e8 <_tzset_unlocked_r+0x2d0>)
 8022148:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802214a:	601a      	str	r2, [r3, #0]
 802214c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 802214e:	1a9b      	subs	r3, r3, r2
 8022150:	4a27      	ldr	r2, [pc, #156]	; (80221f0 <_tzset_unlocked_r+0x2d8>)
 8022152:	bf18      	it	ne
 8022154:	2301      	movne	r3, #1
 8022156:	6013      	str	r3, [r2, #0]
 8022158:	e6f8      	b.n	8021f4c <_tzset_unlocked_r+0x34>
 802215a:	2b2b      	cmp	r3, #43	; 0x2b
 802215c:	bf08      	it	eq
 802215e:	3401      	addeq	r4, #1
 8022160:	2701      	movs	r7, #1
 8022162:	e772      	b.n	802204a <_tzset_unlocked_r+0x132>
 8022164:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8022168:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802216c:	213c      	movs	r1, #60	; 0x3c
 802216e:	fb01 2203 	mla	r2, r1, r3, r2
 8022172:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8022176:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802217a:	fb01 2303 	mla	r3, r1, r3, r2
 802217e:	435f      	muls	r7, r3
 8022180:	e77a      	b.n	8022078 <_tzset_unlocked_r+0x160>
 8022182:	f04f 0901 	mov.w	r9, #1
 8022186:	e77d      	b.n	8022084 <_tzset_unlocked_r+0x16c>
 8022188:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 802218c:	bf06      	itte	eq
 802218e:	3401      	addeq	r4, #1
 8022190:	4643      	moveq	r3, r8
 8022192:	2344      	movne	r3, #68	; 0x44
 8022194:	220a      	movs	r2, #10
 8022196:	a90b      	add	r1, sp, #44	; 0x2c
 8022198:	4620      	mov	r0, r4
 802219a:	9305      	str	r3, [sp, #20]
 802219c:	f7ff fdf8 	bl	8021d90 <strtoul>
 80221a0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80221a4:	9b05      	ldr	r3, [sp, #20]
 80221a6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80221aa:	45a0      	cmp	r8, r4
 80221ac:	d114      	bne.n	80221d8 <_tzset_unlocked_r+0x2c0>
 80221ae:	234d      	movs	r3, #77	; 0x4d
 80221b0:	f1b9 0f00 	cmp.w	r9, #0
 80221b4:	d107      	bne.n	80221c6 <_tzset_unlocked_r+0x2ae>
 80221b6:	722b      	strb	r3, [r5, #8]
 80221b8:	2103      	movs	r1, #3
 80221ba:	2302      	movs	r3, #2
 80221bc:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80221c0:	f8c5 9014 	str.w	r9, [r5, #20]
 80221c4:	e791      	b.n	80220ea <_tzset_unlocked_r+0x1d2>
 80221c6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80221ca:	220b      	movs	r2, #11
 80221cc:	2301      	movs	r3, #1
 80221ce:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80221d2:	2300      	movs	r3, #0
 80221d4:	63eb      	str	r3, [r5, #60]	; 0x3c
 80221d6:	e788      	b.n	80220ea <_tzset_unlocked_r+0x1d2>
 80221d8:	b280      	uxth	r0, r0
 80221da:	723b      	strb	r3, [r7, #8]
 80221dc:	6178      	str	r0, [r7, #20]
 80221de:	e784      	b.n	80220ea <_tzset_unlocked_r+0x1d2>
 80221e0:	0802a0b8 	.word	0x0802a0b8
 80221e4:	20000f68 	.word	0x20000f68
 80221e8:	20000f70 	.word	0x20000f70
 80221ec:	0802a0bb 	.word	0x0802a0bb
 80221f0:	20000f6c 	.word	0x20000f6c
 80221f4:	2000016c 	.word	0x2000016c
 80221f8:	20000f5b 	.word	0x20000f5b
 80221fc:	0802a0bf 	.word	0x0802a0bf
 8022200:	0802a0e2 	.word	0x0802a0e2
 8022204:	0802a0ce 	.word	0x0802a0ce
 8022208:	0802a0e1 	.word	0x0802a0e1
 802220c:	20000f50 	.word	0x20000f50

08022210 <_vsniprintf_r>:
 8022210:	b530      	push	{r4, r5, lr}
 8022212:	1e14      	subs	r4, r2, #0
 8022214:	4605      	mov	r5, r0
 8022216:	b09b      	sub	sp, #108	; 0x6c
 8022218:	4618      	mov	r0, r3
 802221a:	da05      	bge.n	8022228 <_vsniprintf_r+0x18>
 802221c:	238b      	movs	r3, #139	; 0x8b
 802221e:	602b      	str	r3, [r5, #0]
 8022220:	f04f 30ff 	mov.w	r0, #4294967295
 8022224:	b01b      	add	sp, #108	; 0x6c
 8022226:	bd30      	pop	{r4, r5, pc}
 8022228:	f44f 7302 	mov.w	r3, #520	; 0x208
 802222c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8022230:	bf14      	ite	ne
 8022232:	f104 33ff 	addne.w	r3, r4, #4294967295
 8022236:	4623      	moveq	r3, r4
 8022238:	9302      	str	r3, [sp, #8]
 802223a:	9305      	str	r3, [sp, #20]
 802223c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022240:	9100      	str	r1, [sp, #0]
 8022242:	9104      	str	r1, [sp, #16]
 8022244:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022248:	4602      	mov	r2, r0
 802224a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802224c:	4669      	mov	r1, sp
 802224e:	4628      	mov	r0, r5
 8022250:	f000 fb94 	bl	802297c <_svfiprintf_r>
 8022254:	1c43      	adds	r3, r0, #1
 8022256:	bfbc      	itt	lt
 8022258:	238b      	movlt	r3, #139	; 0x8b
 802225a:	602b      	strlt	r3, [r5, #0]
 802225c:	2c00      	cmp	r4, #0
 802225e:	d0e1      	beq.n	8022224 <_vsniprintf_r+0x14>
 8022260:	9b00      	ldr	r3, [sp, #0]
 8022262:	2200      	movs	r2, #0
 8022264:	701a      	strb	r2, [r3, #0]
 8022266:	e7dd      	b.n	8022224 <_vsniprintf_r+0x14>

08022268 <vsniprintf>:
 8022268:	b507      	push	{r0, r1, r2, lr}
 802226a:	9300      	str	r3, [sp, #0]
 802226c:	4613      	mov	r3, r2
 802226e:	460a      	mov	r2, r1
 8022270:	4601      	mov	r1, r0
 8022272:	4803      	ldr	r0, [pc, #12]	; (8022280 <vsniprintf+0x18>)
 8022274:	6800      	ldr	r0, [r0, #0]
 8022276:	f7ff ffcb 	bl	8022210 <_vsniprintf_r>
 802227a:	b003      	add	sp, #12
 802227c:	f85d fb04 	ldr.w	pc, [sp], #4
 8022280:	20000108 	.word	0x20000108

08022284 <__swbuf_r>:
 8022284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022286:	460e      	mov	r6, r1
 8022288:	4614      	mov	r4, r2
 802228a:	4605      	mov	r5, r0
 802228c:	b118      	cbz	r0, 8022296 <__swbuf_r+0x12>
 802228e:	6983      	ldr	r3, [r0, #24]
 8022290:	b90b      	cbnz	r3, 8022296 <__swbuf_r+0x12>
 8022292:	f7fe f8a1 	bl	80203d8 <__sinit>
 8022296:	4b21      	ldr	r3, [pc, #132]	; (802231c <__swbuf_r+0x98>)
 8022298:	429c      	cmp	r4, r3
 802229a:	d12b      	bne.n	80222f4 <__swbuf_r+0x70>
 802229c:	686c      	ldr	r4, [r5, #4]
 802229e:	69a3      	ldr	r3, [r4, #24]
 80222a0:	60a3      	str	r3, [r4, #8]
 80222a2:	89a3      	ldrh	r3, [r4, #12]
 80222a4:	071a      	lsls	r2, r3, #28
 80222a6:	d52f      	bpl.n	8022308 <__swbuf_r+0x84>
 80222a8:	6923      	ldr	r3, [r4, #16]
 80222aa:	b36b      	cbz	r3, 8022308 <__swbuf_r+0x84>
 80222ac:	6923      	ldr	r3, [r4, #16]
 80222ae:	6820      	ldr	r0, [r4, #0]
 80222b0:	1ac0      	subs	r0, r0, r3
 80222b2:	6963      	ldr	r3, [r4, #20]
 80222b4:	b2f6      	uxtb	r6, r6
 80222b6:	4283      	cmp	r3, r0
 80222b8:	4637      	mov	r7, r6
 80222ba:	dc04      	bgt.n	80222c6 <__swbuf_r+0x42>
 80222bc:	4621      	mov	r1, r4
 80222be:	4628      	mov	r0, r5
 80222c0:	f7fd ffe4 	bl	802028c <_fflush_r>
 80222c4:	bb30      	cbnz	r0, 8022314 <__swbuf_r+0x90>
 80222c6:	68a3      	ldr	r3, [r4, #8]
 80222c8:	3b01      	subs	r3, #1
 80222ca:	60a3      	str	r3, [r4, #8]
 80222cc:	6823      	ldr	r3, [r4, #0]
 80222ce:	1c5a      	adds	r2, r3, #1
 80222d0:	6022      	str	r2, [r4, #0]
 80222d2:	701e      	strb	r6, [r3, #0]
 80222d4:	6963      	ldr	r3, [r4, #20]
 80222d6:	3001      	adds	r0, #1
 80222d8:	4283      	cmp	r3, r0
 80222da:	d004      	beq.n	80222e6 <__swbuf_r+0x62>
 80222dc:	89a3      	ldrh	r3, [r4, #12]
 80222de:	07db      	lsls	r3, r3, #31
 80222e0:	d506      	bpl.n	80222f0 <__swbuf_r+0x6c>
 80222e2:	2e0a      	cmp	r6, #10
 80222e4:	d104      	bne.n	80222f0 <__swbuf_r+0x6c>
 80222e6:	4621      	mov	r1, r4
 80222e8:	4628      	mov	r0, r5
 80222ea:	f7fd ffcf 	bl	802028c <_fflush_r>
 80222ee:	b988      	cbnz	r0, 8022314 <__swbuf_r+0x90>
 80222f0:	4638      	mov	r0, r7
 80222f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80222f4:	4b0a      	ldr	r3, [pc, #40]	; (8022320 <__swbuf_r+0x9c>)
 80222f6:	429c      	cmp	r4, r3
 80222f8:	d101      	bne.n	80222fe <__swbuf_r+0x7a>
 80222fa:	68ac      	ldr	r4, [r5, #8]
 80222fc:	e7cf      	b.n	802229e <__swbuf_r+0x1a>
 80222fe:	4b09      	ldr	r3, [pc, #36]	; (8022324 <__swbuf_r+0xa0>)
 8022300:	429c      	cmp	r4, r3
 8022302:	bf08      	it	eq
 8022304:	68ec      	ldreq	r4, [r5, #12]
 8022306:	e7ca      	b.n	802229e <__swbuf_r+0x1a>
 8022308:	4621      	mov	r1, r4
 802230a:	4628      	mov	r0, r5
 802230c:	f000 f81e 	bl	802234c <__swsetup_r>
 8022310:	2800      	cmp	r0, #0
 8022312:	d0cb      	beq.n	80222ac <__swbuf_r+0x28>
 8022314:	f04f 37ff 	mov.w	r7, #4294967295
 8022318:	e7ea      	b.n	80222f0 <__swbuf_r+0x6c>
 802231a:	bf00      	nop
 802231c:	08029cbc 	.word	0x08029cbc
 8022320:	08029cdc 	.word	0x08029cdc
 8022324:	08029c9c 	.word	0x08029c9c

08022328 <_write_r>:
 8022328:	b538      	push	{r3, r4, r5, lr}
 802232a:	4d07      	ldr	r5, [pc, #28]	; (8022348 <_write_r+0x20>)
 802232c:	4604      	mov	r4, r0
 802232e:	4608      	mov	r0, r1
 8022330:	4611      	mov	r1, r2
 8022332:	2200      	movs	r2, #0
 8022334:	602a      	str	r2, [r5, #0]
 8022336:	461a      	mov	r2, r3
 8022338:	f7de fd82 	bl	8000e40 <_write>
 802233c:	1c43      	adds	r3, r0, #1
 802233e:	d102      	bne.n	8022346 <_write_r+0x1e>
 8022340:	682b      	ldr	r3, [r5, #0]
 8022342:	b103      	cbz	r3, 8022346 <_write_r+0x1e>
 8022344:	6023      	str	r3, [r4, #0]
 8022346:	bd38      	pop	{r3, r4, r5, pc}
 8022348:	20001014 	.word	0x20001014

0802234c <__swsetup_r>:
 802234c:	4b32      	ldr	r3, [pc, #200]	; (8022418 <__swsetup_r+0xcc>)
 802234e:	b570      	push	{r4, r5, r6, lr}
 8022350:	681d      	ldr	r5, [r3, #0]
 8022352:	4606      	mov	r6, r0
 8022354:	460c      	mov	r4, r1
 8022356:	b125      	cbz	r5, 8022362 <__swsetup_r+0x16>
 8022358:	69ab      	ldr	r3, [r5, #24]
 802235a:	b913      	cbnz	r3, 8022362 <__swsetup_r+0x16>
 802235c:	4628      	mov	r0, r5
 802235e:	f7fe f83b 	bl	80203d8 <__sinit>
 8022362:	4b2e      	ldr	r3, [pc, #184]	; (802241c <__swsetup_r+0xd0>)
 8022364:	429c      	cmp	r4, r3
 8022366:	d10f      	bne.n	8022388 <__swsetup_r+0x3c>
 8022368:	686c      	ldr	r4, [r5, #4]
 802236a:	89a3      	ldrh	r3, [r4, #12]
 802236c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022370:	0719      	lsls	r1, r3, #28
 8022372:	d42c      	bmi.n	80223ce <__swsetup_r+0x82>
 8022374:	06dd      	lsls	r5, r3, #27
 8022376:	d411      	bmi.n	802239c <__swsetup_r+0x50>
 8022378:	2309      	movs	r3, #9
 802237a:	6033      	str	r3, [r6, #0]
 802237c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022380:	81a3      	strh	r3, [r4, #12]
 8022382:	f04f 30ff 	mov.w	r0, #4294967295
 8022386:	e03e      	b.n	8022406 <__swsetup_r+0xba>
 8022388:	4b25      	ldr	r3, [pc, #148]	; (8022420 <__swsetup_r+0xd4>)
 802238a:	429c      	cmp	r4, r3
 802238c:	d101      	bne.n	8022392 <__swsetup_r+0x46>
 802238e:	68ac      	ldr	r4, [r5, #8]
 8022390:	e7eb      	b.n	802236a <__swsetup_r+0x1e>
 8022392:	4b24      	ldr	r3, [pc, #144]	; (8022424 <__swsetup_r+0xd8>)
 8022394:	429c      	cmp	r4, r3
 8022396:	bf08      	it	eq
 8022398:	68ec      	ldreq	r4, [r5, #12]
 802239a:	e7e6      	b.n	802236a <__swsetup_r+0x1e>
 802239c:	0758      	lsls	r0, r3, #29
 802239e:	d512      	bpl.n	80223c6 <__swsetup_r+0x7a>
 80223a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80223a2:	b141      	cbz	r1, 80223b6 <__swsetup_r+0x6a>
 80223a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80223a8:	4299      	cmp	r1, r3
 80223aa:	d002      	beq.n	80223b2 <__swsetup_r+0x66>
 80223ac:	4630      	mov	r0, r6
 80223ae:	f7fe fc63 	bl	8020c78 <_free_r>
 80223b2:	2300      	movs	r3, #0
 80223b4:	6363      	str	r3, [r4, #52]	; 0x34
 80223b6:	89a3      	ldrh	r3, [r4, #12]
 80223b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80223bc:	81a3      	strh	r3, [r4, #12]
 80223be:	2300      	movs	r3, #0
 80223c0:	6063      	str	r3, [r4, #4]
 80223c2:	6923      	ldr	r3, [r4, #16]
 80223c4:	6023      	str	r3, [r4, #0]
 80223c6:	89a3      	ldrh	r3, [r4, #12]
 80223c8:	f043 0308 	orr.w	r3, r3, #8
 80223cc:	81a3      	strh	r3, [r4, #12]
 80223ce:	6923      	ldr	r3, [r4, #16]
 80223d0:	b94b      	cbnz	r3, 80223e6 <__swsetup_r+0x9a>
 80223d2:	89a3      	ldrh	r3, [r4, #12]
 80223d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80223d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80223dc:	d003      	beq.n	80223e6 <__swsetup_r+0x9a>
 80223de:	4621      	mov	r1, r4
 80223e0:	4630      	mov	r0, r6
 80223e2:	f7fe fbd3 	bl	8020b8c <__smakebuf_r>
 80223e6:	89a0      	ldrh	r0, [r4, #12]
 80223e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80223ec:	f010 0301 	ands.w	r3, r0, #1
 80223f0:	d00a      	beq.n	8022408 <__swsetup_r+0xbc>
 80223f2:	2300      	movs	r3, #0
 80223f4:	60a3      	str	r3, [r4, #8]
 80223f6:	6963      	ldr	r3, [r4, #20]
 80223f8:	425b      	negs	r3, r3
 80223fa:	61a3      	str	r3, [r4, #24]
 80223fc:	6923      	ldr	r3, [r4, #16]
 80223fe:	b943      	cbnz	r3, 8022412 <__swsetup_r+0xc6>
 8022400:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022404:	d1ba      	bne.n	802237c <__swsetup_r+0x30>
 8022406:	bd70      	pop	{r4, r5, r6, pc}
 8022408:	0781      	lsls	r1, r0, #30
 802240a:	bf58      	it	pl
 802240c:	6963      	ldrpl	r3, [r4, #20]
 802240e:	60a3      	str	r3, [r4, #8]
 8022410:	e7f4      	b.n	80223fc <__swsetup_r+0xb0>
 8022412:	2000      	movs	r0, #0
 8022414:	e7f7      	b.n	8022406 <__swsetup_r+0xba>
 8022416:	bf00      	nop
 8022418:	20000108 	.word	0x20000108
 802241c:	08029cbc 	.word	0x08029cbc
 8022420:	08029cdc 	.word	0x08029cdc
 8022424:	08029c9c 	.word	0x08029c9c

08022428 <__register_exitproc>:
 8022428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802242c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80224e8 <__register_exitproc+0xc0>
 8022430:	4606      	mov	r6, r0
 8022432:	f8d8 0000 	ldr.w	r0, [r8]
 8022436:	461f      	mov	r7, r3
 8022438:	460d      	mov	r5, r1
 802243a:	4691      	mov	r9, r2
 802243c:	f7fe fb7f 	bl	8020b3e <__retarget_lock_acquire_recursive>
 8022440:	4b25      	ldr	r3, [pc, #148]	; (80224d8 <__register_exitproc+0xb0>)
 8022442:	681c      	ldr	r4, [r3, #0]
 8022444:	b934      	cbnz	r4, 8022454 <__register_exitproc+0x2c>
 8022446:	4c25      	ldr	r4, [pc, #148]	; (80224dc <__register_exitproc+0xb4>)
 8022448:	601c      	str	r4, [r3, #0]
 802244a:	4b25      	ldr	r3, [pc, #148]	; (80224e0 <__register_exitproc+0xb8>)
 802244c:	b113      	cbz	r3, 8022454 <__register_exitproc+0x2c>
 802244e:	681b      	ldr	r3, [r3, #0]
 8022450:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8022454:	6863      	ldr	r3, [r4, #4]
 8022456:	2b1f      	cmp	r3, #31
 8022458:	dd07      	ble.n	802246a <__register_exitproc+0x42>
 802245a:	f8d8 0000 	ldr.w	r0, [r8]
 802245e:	f7fe fb70 	bl	8020b42 <__retarget_lock_release_recursive>
 8022462:	f04f 30ff 	mov.w	r0, #4294967295
 8022466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802246a:	b34e      	cbz	r6, 80224c0 <__register_exitproc+0x98>
 802246c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8022470:	b988      	cbnz	r0, 8022496 <__register_exitproc+0x6e>
 8022472:	4b1c      	ldr	r3, [pc, #112]	; (80224e4 <__register_exitproc+0xbc>)
 8022474:	b923      	cbnz	r3, 8022480 <__register_exitproc+0x58>
 8022476:	f8d8 0000 	ldr.w	r0, [r8]
 802247a:	f7fe fb61 	bl	8020b40 <__retarget_lock_release>
 802247e:	e7f0      	b.n	8022462 <__register_exitproc+0x3a>
 8022480:	f44f 7084 	mov.w	r0, #264	; 0x108
 8022484:	f7fe fbc2 	bl	8020c0c <malloc>
 8022488:	2800      	cmp	r0, #0
 802248a:	d0f4      	beq.n	8022476 <__register_exitproc+0x4e>
 802248c:	2300      	movs	r3, #0
 802248e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8022492:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8022496:	6863      	ldr	r3, [r4, #4]
 8022498:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802249c:	2201      	movs	r2, #1
 802249e:	409a      	lsls	r2, r3
 80224a0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80224a4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80224a8:	4313      	orrs	r3, r2
 80224aa:	2e02      	cmp	r6, #2
 80224ac:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80224b0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80224b4:	bf02      	ittt	eq
 80224b6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80224ba:	431a      	orreq	r2, r3
 80224bc:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80224c0:	6863      	ldr	r3, [r4, #4]
 80224c2:	f8d8 0000 	ldr.w	r0, [r8]
 80224c6:	1c5a      	adds	r2, r3, #1
 80224c8:	3302      	adds	r3, #2
 80224ca:	6062      	str	r2, [r4, #4]
 80224cc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80224d0:	f7fe fb37 	bl	8020b42 <__retarget_lock_release_recursive>
 80224d4:	2000      	movs	r0, #0
 80224d6:	e7c6      	b.n	8022466 <__register_exitproc+0x3e>
 80224d8:	20001000 	.word	0x20001000
 80224dc:	20000f74 	.word	0x20000f74
 80224e0:	00000000 	.word	0x00000000
 80224e4:	08020c0d 	.word	0x08020c0d
 80224e8:	20000174 	.word	0x20000174

080224ec <abs>:
 80224ec:	2800      	cmp	r0, #0
 80224ee:	bfb8      	it	lt
 80224f0:	4240      	neglt	r0, r0
 80224f2:	4770      	bx	lr

080224f4 <__assert_func>:
 80224f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80224f6:	4614      	mov	r4, r2
 80224f8:	461a      	mov	r2, r3
 80224fa:	4b09      	ldr	r3, [pc, #36]	; (8022520 <__assert_func+0x2c>)
 80224fc:	681b      	ldr	r3, [r3, #0]
 80224fe:	4605      	mov	r5, r0
 8022500:	68d8      	ldr	r0, [r3, #12]
 8022502:	b14c      	cbz	r4, 8022518 <__assert_func+0x24>
 8022504:	4b07      	ldr	r3, [pc, #28]	; (8022524 <__assert_func+0x30>)
 8022506:	9100      	str	r1, [sp, #0]
 8022508:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802250c:	4906      	ldr	r1, [pc, #24]	; (8022528 <__assert_func+0x34>)
 802250e:	462b      	mov	r3, r5
 8022510:	f000 f854 	bl	80225bc <fiprintf>
 8022514:	f7fd fda0 	bl	8020058 <abort>
 8022518:	4b04      	ldr	r3, [pc, #16]	; (802252c <__assert_func+0x38>)
 802251a:	461c      	mov	r4, r3
 802251c:	e7f3      	b.n	8022506 <__assert_func+0x12>
 802251e:	bf00      	nop
 8022520:	20000108 	.word	0x20000108
 8022524:	0802a0f4 	.word	0x0802a0f4
 8022528:	0802a101 	.word	0x0802a101
 802252c:	0802a12f 	.word	0x0802a12f

08022530 <_close_r>:
 8022530:	b538      	push	{r3, r4, r5, lr}
 8022532:	4d06      	ldr	r5, [pc, #24]	; (802254c <_close_r+0x1c>)
 8022534:	2300      	movs	r3, #0
 8022536:	4604      	mov	r4, r0
 8022538:	4608      	mov	r0, r1
 802253a:	602b      	str	r3, [r5, #0]
 802253c:	f7de fc9c 	bl	8000e78 <_close>
 8022540:	1c43      	adds	r3, r0, #1
 8022542:	d102      	bne.n	802254a <_close_r+0x1a>
 8022544:	682b      	ldr	r3, [r5, #0]
 8022546:	b103      	cbz	r3, 802254a <_close_r+0x1a>
 8022548:	6023      	str	r3, [r4, #0]
 802254a:	bd38      	pop	{r3, r4, r5, pc}
 802254c:	20001014 	.word	0x20001014

08022550 <__sflags>:
 8022550:	780b      	ldrb	r3, [r1, #0]
 8022552:	2b72      	cmp	r3, #114	; 0x72
 8022554:	b530      	push	{r4, r5, lr}
 8022556:	d022      	beq.n	802259e <__sflags+0x4e>
 8022558:	2b77      	cmp	r3, #119	; 0x77
 802255a:	d024      	beq.n	80225a6 <__sflags+0x56>
 802255c:	2b61      	cmp	r3, #97	; 0x61
 802255e:	d027      	beq.n	80225b0 <__sflags+0x60>
 8022560:	2316      	movs	r3, #22
 8022562:	6003      	str	r3, [r0, #0]
 8022564:	2000      	movs	r0, #0
 8022566:	bd30      	pop	{r4, r5, pc}
 8022568:	2d62      	cmp	r5, #98	; 0x62
 802256a:	d012      	beq.n	8022592 <__sflags+0x42>
 802256c:	2d78      	cmp	r5, #120	; 0x78
 802256e:	d013      	beq.n	8022598 <__sflags+0x48>
 8022570:	2d2b      	cmp	r5, #43	; 0x2b
 8022572:	d107      	bne.n	8022584 <__sflags+0x34>
 8022574:	f020 001c 	bic.w	r0, r0, #28
 8022578:	f023 0303 	bic.w	r3, r3, #3
 802257c:	f040 0010 	orr.w	r0, r0, #16
 8022580:	f043 0302 	orr.w	r3, r3, #2
 8022584:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8022588:	2d00      	cmp	r5, #0
 802258a:	d1ed      	bne.n	8022568 <__sflags+0x18>
 802258c:	4323      	orrs	r3, r4
 802258e:	6013      	str	r3, [r2, #0]
 8022590:	e7e9      	b.n	8022566 <__sflags+0x16>
 8022592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8022596:	e7f5      	b.n	8022584 <__sflags+0x34>
 8022598:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802259c:	e7f2      	b.n	8022584 <__sflags+0x34>
 802259e:	2400      	movs	r4, #0
 80225a0:	4623      	mov	r3, r4
 80225a2:	2004      	movs	r0, #4
 80225a4:	e7ee      	b.n	8022584 <__sflags+0x34>
 80225a6:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 80225aa:	2301      	movs	r3, #1
 80225ac:	2008      	movs	r0, #8
 80225ae:	e7e9      	b.n	8022584 <__sflags+0x34>
 80225b0:	f44f 7402 	mov.w	r4, #520	; 0x208
 80225b4:	2301      	movs	r3, #1
 80225b6:	f44f 7084 	mov.w	r0, #264	; 0x108
 80225ba:	e7e3      	b.n	8022584 <__sflags+0x34>

080225bc <fiprintf>:
 80225bc:	b40e      	push	{r1, r2, r3}
 80225be:	b503      	push	{r0, r1, lr}
 80225c0:	4601      	mov	r1, r0
 80225c2:	ab03      	add	r3, sp, #12
 80225c4:	4805      	ldr	r0, [pc, #20]	; (80225dc <fiprintf+0x20>)
 80225c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80225ca:	6800      	ldr	r0, [r0, #0]
 80225cc:	9301      	str	r3, [sp, #4]
 80225ce:	f000 faff 	bl	8022bd0 <_vfiprintf_r>
 80225d2:	b002      	add	sp, #8
 80225d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80225d8:	b003      	add	sp, #12
 80225da:	4770      	bx	lr
 80225dc:	20000108 	.word	0x20000108

080225e0 <_fstat_r>:
 80225e0:	b538      	push	{r3, r4, r5, lr}
 80225e2:	4d07      	ldr	r5, [pc, #28]	; (8022600 <_fstat_r+0x20>)
 80225e4:	2300      	movs	r3, #0
 80225e6:	4604      	mov	r4, r0
 80225e8:	4608      	mov	r0, r1
 80225ea:	4611      	mov	r1, r2
 80225ec:	602b      	str	r3, [r5, #0]
 80225ee:	f7de fc4f 	bl	8000e90 <_fstat>
 80225f2:	1c43      	adds	r3, r0, #1
 80225f4:	d102      	bne.n	80225fc <_fstat_r+0x1c>
 80225f6:	682b      	ldr	r3, [r5, #0]
 80225f8:	b103      	cbz	r3, 80225fc <_fstat_r+0x1c>
 80225fa:	6023      	str	r3, [r4, #0]
 80225fc:	bd38      	pop	{r3, r4, r5, pc}
 80225fe:	bf00      	nop
 8022600:	20001014 	.word	0x20001014

08022604 <_findenv_r>:
 8022604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022608:	4607      	mov	r7, r0
 802260a:	4689      	mov	r9, r1
 802260c:	4616      	mov	r6, r2
 802260e:	f000 fe7d 	bl	802330c <__env_lock>
 8022612:	4b18      	ldr	r3, [pc, #96]	; (8022674 <_findenv_r+0x70>)
 8022614:	681c      	ldr	r4, [r3, #0]
 8022616:	469a      	mov	sl, r3
 8022618:	b134      	cbz	r4, 8022628 <_findenv_r+0x24>
 802261a:	464b      	mov	r3, r9
 802261c:	4698      	mov	r8, r3
 802261e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8022622:	b139      	cbz	r1, 8022634 <_findenv_r+0x30>
 8022624:	293d      	cmp	r1, #61	; 0x3d
 8022626:	d1f9      	bne.n	802261c <_findenv_r+0x18>
 8022628:	4638      	mov	r0, r7
 802262a:	f000 fe75 	bl	8023318 <__env_unlock>
 802262e:	2000      	movs	r0, #0
 8022630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022634:	eba8 0809 	sub.w	r8, r8, r9
 8022638:	46a3      	mov	fp, r4
 802263a:	f854 0b04 	ldr.w	r0, [r4], #4
 802263e:	2800      	cmp	r0, #0
 8022640:	d0f2      	beq.n	8022628 <_findenv_r+0x24>
 8022642:	4642      	mov	r2, r8
 8022644:	4649      	mov	r1, r9
 8022646:	f000 fe41 	bl	80232cc <strncmp>
 802264a:	2800      	cmp	r0, #0
 802264c:	d1f4      	bne.n	8022638 <_findenv_r+0x34>
 802264e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8022652:	eb03 0508 	add.w	r5, r3, r8
 8022656:	f813 3008 	ldrb.w	r3, [r3, r8]
 802265a:	2b3d      	cmp	r3, #61	; 0x3d
 802265c:	d1ec      	bne.n	8022638 <_findenv_r+0x34>
 802265e:	f8da 3000 	ldr.w	r3, [sl]
 8022662:	ebab 0303 	sub.w	r3, fp, r3
 8022666:	109b      	asrs	r3, r3, #2
 8022668:	4638      	mov	r0, r7
 802266a:	6033      	str	r3, [r6, #0]
 802266c:	f000 fe54 	bl	8023318 <__env_unlock>
 8022670:	1c68      	adds	r0, r5, #1
 8022672:	e7dd      	b.n	8022630 <_findenv_r+0x2c>
 8022674:	20000000 	.word	0x20000000

08022678 <_getenv_r>:
 8022678:	b507      	push	{r0, r1, r2, lr}
 802267a:	aa01      	add	r2, sp, #4
 802267c:	f7ff ffc2 	bl	8022604 <_findenv_r>
 8022680:	b003      	add	sp, #12
 8022682:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08022688 <__gettzinfo>:
 8022688:	4800      	ldr	r0, [pc, #0]	; (802268c <__gettzinfo+0x4>)
 802268a:	4770      	bx	lr
 802268c:	20000178 	.word	0x20000178

08022690 <gmtime_r>:
 8022690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022694:	e9d0 6700 	ldrd	r6, r7, [r0]
 8022698:	460c      	mov	r4, r1
 802269a:	4a51      	ldr	r2, [pc, #324]	; (80227e0 <gmtime_r+0x150>)
 802269c:	2300      	movs	r3, #0
 802269e:	4630      	mov	r0, r6
 80226a0:	4639      	mov	r1, r7
 80226a2:	f7de f887 	bl	80007b4 <__aeabi_ldivmod>
 80226a6:	4639      	mov	r1, r7
 80226a8:	4605      	mov	r5, r0
 80226aa:	4a4d      	ldr	r2, [pc, #308]	; (80227e0 <gmtime_r+0x150>)
 80226ac:	4630      	mov	r0, r6
 80226ae:	2300      	movs	r3, #0
 80226b0:	f7de f880 	bl	80007b4 <__aeabi_ldivmod>
 80226b4:	2a00      	cmp	r2, #0
 80226b6:	bfbc      	itt	lt
 80226b8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80226bc:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80226c0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80226c4:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80226c8:	fbb2 f3f1 	udiv	r3, r2, r1
 80226cc:	fb01 2213 	mls	r2, r1, r3, r2
 80226d0:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80226d4:	bfac      	ite	ge
 80226d6:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80226da:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80226de:	60a3      	str	r3, [r4, #8]
 80226e0:	fbb2 f3f1 	udiv	r3, r2, r1
 80226e4:	fb01 2213 	mls	r2, r1, r3, r2
 80226e8:	6063      	str	r3, [r4, #4]
 80226ea:	6022      	str	r2, [r4, #0]
 80226ec:	1cc3      	adds	r3, r0, #3
 80226ee:	2207      	movs	r2, #7
 80226f0:	fb93 f2f2 	sdiv	r2, r3, r2
 80226f4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80226f8:	1a9b      	subs	r3, r3, r2
 80226fa:	bf48      	it	mi
 80226fc:	3307      	addmi	r3, #7
 80226fe:	2800      	cmp	r0, #0
 8022700:	61a3      	str	r3, [r4, #24]
 8022702:	bfb8      	it	lt
 8022704:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8022708:	4936      	ldr	r1, [pc, #216]	; (80227e4 <gmtime_r+0x154>)
 802270a:	bfae      	itee	ge
 802270c:	fb90 f1f1 	sdivge	r1, r0, r1
 8022710:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8022714:	fb93 f1f1 	sdivlt	r1, r3, r1
 8022718:	4b33      	ldr	r3, [pc, #204]	; (80227e8 <gmtime_r+0x158>)
 802271a:	fb03 0001 	mla	r0, r3, r1, r0
 802271e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8022722:	fbb0 f2f2 	udiv	r2, r0, r2
 8022726:	4402      	add	r2, r0
 8022728:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 802272c:	fbb0 f3fc 	udiv	r3, r0, ip
 8022730:	1ad2      	subs	r2, r2, r3
 8022732:	f240 176d 	movw	r7, #365	; 0x16d
 8022736:	4b2d      	ldr	r3, [pc, #180]	; (80227ec <gmtime_r+0x15c>)
 8022738:	fbb0 f3f3 	udiv	r3, r0, r3
 802273c:	2664      	movs	r6, #100	; 0x64
 802273e:	1ad3      	subs	r3, r2, r3
 8022740:	fbb3 f5f7 	udiv	r5, r3, r7
 8022744:	fbb3 f3fc 	udiv	r3, r3, ip
 8022748:	fbb5 f2f6 	udiv	r2, r5, r6
 802274c:	1ad3      	subs	r3, r2, r3
 802274e:	4403      	add	r3, r0
 8022750:	fb07 3315 	mls	r3, r7, r5, r3
 8022754:	2099      	movs	r0, #153	; 0x99
 8022756:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 802275a:	f10c 0c02 	add.w	ip, ip, #2
 802275e:	f103 0e01 	add.w	lr, r3, #1
 8022762:	fbbc f7f0 	udiv	r7, ip, r0
 8022766:	4378      	muls	r0, r7
 8022768:	3002      	adds	r0, #2
 802276a:	f04f 0805 	mov.w	r8, #5
 802276e:	fbb0 f0f8 	udiv	r0, r0, r8
 8022772:	ebae 0000 	sub.w	r0, lr, r0
 8022776:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 802277a:	45f4      	cmp	ip, lr
 802277c:	bf94      	ite	ls
 802277e:	f04f 0c02 	movls.w	ip, #2
 8022782:	f06f 0c09 	mvnhi.w	ip, #9
 8022786:	4467      	add	r7, ip
 8022788:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 802278c:	fb0c 5101 	mla	r1, ip, r1, r5
 8022790:	2f01      	cmp	r7, #1
 8022792:	bf98      	it	ls
 8022794:	3101      	addls	r1, #1
 8022796:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 802279a:	d30c      	bcc.n	80227b6 <gmtime_r+0x126>
 802279c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80227a0:	61e3      	str	r3, [r4, #28]
 80227a2:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80227a6:	2300      	movs	r3, #0
 80227a8:	60e0      	str	r0, [r4, #12]
 80227aa:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80227ae:	6223      	str	r3, [r4, #32]
 80227b0:	4620      	mov	r0, r4
 80227b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80227b6:	f015 0f03 	tst.w	r5, #3
 80227ba:	d102      	bne.n	80227c2 <gmtime_r+0x132>
 80227bc:	fb06 5212 	mls	r2, r6, r2, r5
 80227c0:	b95a      	cbnz	r2, 80227da <gmtime_r+0x14a>
 80227c2:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80227c6:	fbb5 f2f6 	udiv	r2, r5, r6
 80227ca:	fb06 5212 	mls	r2, r6, r2, r5
 80227ce:	fab2 f282 	clz	r2, r2
 80227d2:	0952      	lsrs	r2, r2, #5
 80227d4:	333b      	adds	r3, #59	; 0x3b
 80227d6:	4413      	add	r3, r2
 80227d8:	e7e2      	b.n	80227a0 <gmtime_r+0x110>
 80227da:	2201      	movs	r2, #1
 80227dc:	e7fa      	b.n	80227d4 <gmtime_r+0x144>
 80227de:	bf00      	nop
 80227e0:	00015180 	.word	0x00015180
 80227e4:	00023ab1 	.word	0x00023ab1
 80227e8:	fffdc54f 	.word	0xfffdc54f
 80227ec:	00023ab0 	.word	0x00023ab0

080227f0 <_isatty_r>:
 80227f0:	b538      	push	{r3, r4, r5, lr}
 80227f2:	4d06      	ldr	r5, [pc, #24]	; (802280c <_isatty_r+0x1c>)
 80227f4:	2300      	movs	r3, #0
 80227f6:	4604      	mov	r4, r0
 80227f8:	4608      	mov	r0, r1
 80227fa:	602b      	str	r3, [r5, #0]
 80227fc:	f7de fb58 	bl	8000eb0 <_isatty>
 8022800:	1c43      	adds	r3, r0, #1
 8022802:	d102      	bne.n	802280a <_isatty_r+0x1a>
 8022804:	682b      	ldr	r3, [r5, #0]
 8022806:	b103      	cbz	r3, 802280a <_isatty_r+0x1a>
 8022808:	6023      	str	r3, [r4, #0]
 802280a:	bd38      	pop	{r3, r4, r5, pc}
 802280c:	20001014 	.word	0x20001014

08022810 <labs>:
 8022810:	2800      	cmp	r0, #0
 8022812:	bfb8      	it	lt
 8022814:	4240      	neglt	r0, r0
 8022816:	4770      	bx	lr

08022818 <_lseek_r>:
 8022818:	b538      	push	{r3, r4, r5, lr}
 802281a:	4d07      	ldr	r5, [pc, #28]	; (8022838 <_lseek_r+0x20>)
 802281c:	4604      	mov	r4, r0
 802281e:	4608      	mov	r0, r1
 8022820:	4611      	mov	r1, r2
 8022822:	2200      	movs	r2, #0
 8022824:	602a      	str	r2, [r5, #0]
 8022826:	461a      	mov	r2, r3
 8022828:	f7de fb4d 	bl	8000ec6 <_lseek>
 802282c:	1c43      	adds	r3, r0, #1
 802282e:	d102      	bne.n	8022836 <_lseek_r+0x1e>
 8022830:	682b      	ldr	r3, [r5, #0]
 8022832:	b103      	cbz	r3, 8022836 <_lseek_r+0x1e>
 8022834:	6023      	str	r3, [r4, #0]
 8022836:	bd38      	pop	{r3, r4, r5, pc}
 8022838:	20001014 	.word	0x20001014

0802283c <__ascii_mbtowc>:
 802283c:	b082      	sub	sp, #8
 802283e:	b901      	cbnz	r1, 8022842 <__ascii_mbtowc+0x6>
 8022840:	a901      	add	r1, sp, #4
 8022842:	b142      	cbz	r2, 8022856 <__ascii_mbtowc+0x1a>
 8022844:	b14b      	cbz	r3, 802285a <__ascii_mbtowc+0x1e>
 8022846:	7813      	ldrb	r3, [r2, #0]
 8022848:	600b      	str	r3, [r1, #0]
 802284a:	7812      	ldrb	r2, [r2, #0]
 802284c:	1e10      	subs	r0, r2, #0
 802284e:	bf18      	it	ne
 8022850:	2001      	movne	r0, #1
 8022852:	b002      	add	sp, #8
 8022854:	4770      	bx	lr
 8022856:	4610      	mov	r0, r2
 8022858:	e7fb      	b.n	8022852 <__ascii_mbtowc+0x16>
 802285a:	f06f 0001 	mvn.w	r0, #1
 802285e:	e7f8      	b.n	8022852 <__ascii_mbtowc+0x16>

08022860 <__malloc_lock>:
 8022860:	4801      	ldr	r0, [pc, #4]	; (8022868 <__malloc_lock+0x8>)
 8022862:	f7fe b96c 	b.w	8020b3e <__retarget_lock_acquire_recursive>
 8022866:	bf00      	nop
 8022868:	2000100c 	.word	0x2000100c

0802286c <__malloc_unlock>:
 802286c:	4801      	ldr	r0, [pc, #4]	; (8022874 <__malloc_unlock+0x8>)
 802286e:	f7fe b968 	b.w	8020b42 <__retarget_lock_release_recursive>
 8022872:	bf00      	nop
 8022874:	2000100c 	.word	0x2000100c

08022878 <_realloc_r>:
 8022878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802287a:	4607      	mov	r7, r0
 802287c:	4614      	mov	r4, r2
 802287e:	460e      	mov	r6, r1
 8022880:	b921      	cbnz	r1, 802288c <_realloc_r+0x14>
 8022882:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8022886:	4611      	mov	r1, r2
 8022888:	f7fe ba46 	b.w	8020d18 <_malloc_r>
 802288c:	b922      	cbnz	r2, 8022898 <_realloc_r+0x20>
 802288e:	f7fe f9f3 	bl	8020c78 <_free_r>
 8022892:	4625      	mov	r5, r4
 8022894:	4628      	mov	r0, r5
 8022896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022898:	f000 fd5e 	bl	8023358 <_malloc_usable_size_r>
 802289c:	42a0      	cmp	r0, r4
 802289e:	d20f      	bcs.n	80228c0 <_realloc_r+0x48>
 80228a0:	4621      	mov	r1, r4
 80228a2:	4638      	mov	r0, r7
 80228a4:	f7fe fa38 	bl	8020d18 <_malloc_r>
 80228a8:	4605      	mov	r5, r0
 80228aa:	2800      	cmp	r0, #0
 80228ac:	d0f2      	beq.n	8022894 <_realloc_r+0x1c>
 80228ae:	4631      	mov	r1, r6
 80228b0:	4622      	mov	r2, r4
 80228b2:	f7fe f9bb 	bl	8020c2c <memcpy>
 80228b6:	4631      	mov	r1, r6
 80228b8:	4638      	mov	r0, r7
 80228ba:	f7fe f9dd 	bl	8020c78 <_free_r>
 80228be:	e7e9      	b.n	8022894 <_realloc_r+0x1c>
 80228c0:	4635      	mov	r5, r6
 80228c2:	e7e7      	b.n	8022894 <_realloc_r+0x1c>

080228c4 <__ssputs_r>:
 80228c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80228c8:	688e      	ldr	r6, [r1, #8]
 80228ca:	429e      	cmp	r6, r3
 80228cc:	4682      	mov	sl, r0
 80228ce:	460c      	mov	r4, r1
 80228d0:	4690      	mov	r8, r2
 80228d2:	461f      	mov	r7, r3
 80228d4:	d838      	bhi.n	8022948 <__ssputs_r+0x84>
 80228d6:	898a      	ldrh	r2, [r1, #12]
 80228d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80228dc:	d032      	beq.n	8022944 <__ssputs_r+0x80>
 80228de:	6825      	ldr	r5, [r4, #0]
 80228e0:	6909      	ldr	r1, [r1, #16]
 80228e2:	eba5 0901 	sub.w	r9, r5, r1
 80228e6:	6965      	ldr	r5, [r4, #20]
 80228e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80228ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80228f0:	3301      	adds	r3, #1
 80228f2:	444b      	add	r3, r9
 80228f4:	106d      	asrs	r5, r5, #1
 80228f6:	429d      	cmp	r5, r3
 80228f8:	bf38      	it	cc
 80228fa:	461d      	movcc	r5, r3
 80228fc:	0553      	lsls	r3, r2, #21
 80228fe:	d531      	bpl.n	8022964 <__ssputs_r+0xa0>
 8022900:	4629      	mov	r1, r5
 8022902:	f7fe fa09 	bl	8020d18 <_malloc_r>
 8022906:	4606      	mov	r6, r0
 8022908:	b950      	cbnz	r0, 8022920 <__ssputs_r+0x5c>
 802290a:	230c      	movs	r3, #12
 802290c:	f8ca 3000 	str.w	r3, [sl]
 8022910:	89a3      	ldrh	r3, [r4, #12]
 8022912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022916:	81a3      	strh	r3, [r4, #12]
 8022918:	f04f 30ff 	mov.w	r0, #4294967295
 802291c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022920:	6921      	ldr	r1, [r4, #16]
 8022922:	464a      	mov	r2, r9
 8022924:	f7fe f982 	bl	8020c2c <memcpy>
 8022928:	89a3      	ldrh	r3, [r4, #12]
 802292a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802292e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022932:	81a3      	strh	r3, [r4, #12]
 8022934:	6126      	str	r6, [r4, #16]
 8022936:	6165      	str	r5, [r4, #20]
 8022938:	444e      	add	r6, r9
 802293a:	eba5 0509 	sub.w	r5, r5, r9
 802293e:	6026      	str	r6, [r4, #0]
 8022940:	60a5      	str	r5, [r4, #8]
 8022942:	463e      	mov	r6, r7
 8022944:	42be      	cmp	r6, r7
 8022946:	d900      	bls.n	802294a <__ssputs_r+0x86>
 8022948:	463e      	mov	r6, r7
 802294a:	4632      	mov	r2, r6
 802294c:	6820      	ldr	r0, [r4, #0]
 802294e:	4641      	mov	r1, r8
 8022950:	f000 fce8 	bl	8023324 <memmove>
 8022954:	68a3      	ldr	r3, [r4, #8]
 8022956:	6822      	ldr	r2, [r4, #0]
 8022958:	1b9b      	subs	r3, r3, r6
 802295a:	4432      	add	r2, r6
 802295c:	60a3      	str	r3, [r4, #8]
 802295e:	6022      	str	r2, [r4, #0]
 8022960:	2000      	movs	r0, #0
 8022962:	e7db      	b.n	802291c <__ssputs_r+0x58>
 8022964:	462a      	mov	r2, r5
 8022966:	f7ff ff87 	bl	8022878 <_realloc_r>
 802296a:	4606      	mov	r6, r0
 802296c:	2800      	cmp	r0, #0
 802296e:	d1e1      	bne.n	8022934 <__ssputs_r+0x70>
 8022970:	6921      	ldr	r1, [r4, #16]
 8022972:	4650      	mov	r0, sl
 8022974:	f7fe f980 	bl	8020c78 <_free_r>
 8022978:	e7c7      	b.n	802290a <__ssputs_r+0x46>
	...

0802297c <_svfiprintf_r>:
 802297c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022980:	4698      	mov	r8, r3
 8022982:	898b      	ldrh	r3, [r1, #12]
 8022984:	061b      	lsls	r3, r3, #24
 8022986:	b09d      	sub	sp, #116	; 0x74
 8022988:	4607      	mov	r7, r0
 802298a:	460d      	mov	r5, r1
 802298c:	4614      	mov	r4, r2
 802298e:	d50e      	bpl.n	80229ae <_svfiprintf_r+0x32>
 8022990:	690b      	ldr	r3, [r1, #16]
 8022992:	b963      	cbnz	r3, 80229ae <_svfiprintf_r+0x32>
 8022994:	2140      	movs	r1, #64	; 0x40
 8022996:	f7fe f9bf 	bl	8020d18 <_malloc_r>
 802299a:	6028      	str	r0, [r5, #0]
 802299c:	6128      	str	r0, [r5, #16]
 802299e:	b920      	cbnz	r0, 80229aa <_svfiprintf_r+0x2e>
 80229a0:	230c      	movs	r3, #12
 80229a2:	603b      	str	r3, [r7, #0]
 80229a4:	f04f 30ff 	mov.w	r0, #4294967295
 80229a8:	e0d1      	b.n	8022b4e <_svfiprintf_r+0x1d2>
 80229aa:	2340      	movs	r3, #64	; 0x40
 80229ac:	616b      	str	r3, [r5, #20]
 80229ae:	2300      	movs	r3, #0
 80229b0:	9309      	str	r3, [sp, #36]	; 0x24
 80229b2:	2320      	movs	r3, #32
 80229b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80229b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80229bc:	2330      	movs	r3, #48	; 0x30
 80229be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8022b68 <_svfiprintf_r+0x1ec>
 80229c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80229c6:	f04f 0901 	mov.w	r9, #1
 80229ca:	4623      	mov	r3, r4
 80229cc:	469a      	mov	sl, r3
 80229ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80229d2:	b10a      	cbz	r2, 80229d8 <_svfiprintf_r+0x5c>
 80229d4:	2a25      	cmp	r2, #37	; 0x25
 80229d6:	d1f9      	bne.n	80229cc <_svfiprintf_r+0x50>
 80229d8:	ebba 0b04 	subs.w	fp, sl, r4
 80229dc:	d00b      	beq.n	80229f6 <_svfiprintf_r+0x7a>
 80229de:	465b      	mov	r3, fp
 80229e0:	4622      	mov	r2, r4
 80229e2:	4629      	mov	r1, r5
 80229e4:	4638      	mov	r0, r7
 80229e6:	f7ff ff6d 	bl	80228c4 <__ssputs_r>
 80229ea:	3001      	adds	r0, #1
 80229ec:	f000 80aa 	beq.w	8022b44 <_svfiprintf_r+0x1c8>
 80229f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80229f2:	445a      	add	r2, fp
 80229f4:	9209      	str	r2, [sp, #36]	; 0x24
 80229f6:	f89a 3000 	ldrb.w	r3, [sl]
 80229fa:	2b00      	cmp	r3, #0
 80229fc:	f000 80a2 	beq.w	8022b44 <_svfiprintf_r+0x1c8>
 8022a00:	2300      	movs	r3, #0
 8022a02:	f04f 32ff 	mov.w	r2, #4294967295
 8022a06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022a0a:	f10a 0a01 	add.w	sl, sl, #1
 8022a0e:	9304      	str	r3, [sp, #16]
 8022a10:	9307      	str	r3, [sp, #28]
 8022a12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022a16:	931a      	str	r3, [sp, #104]	; 0x68
 8022a18:	4654      	mov	r4, sl
 8022a1a:	2205      	movs	r2, #5
 8022a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022a20:	4851      	ldr	r0, [pc, #324]	; (8022b68 <_svfiprintf_r+0x1ec>)
 8022a22:	f7dd fc1d 	bl	8000260 <memchr>
 8022a26:	9a04      	ldr	r2, [sp, #16]
 8022a28:	b9d8      	cbnz	r0, 8022a62 <_svfiprintf_r+0xe6>
 8022a2a:	06d0      	lsls	r0, r2, #27
 8022a2c:	bf44      	itt	mi
 8022a2e:	2320      	movmi	r3, #32
 8022a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022a34:	0711      	lsls	r1, r2, #28
 8022a36:	bf44      	itt	mi
 8022a38:	232b      	movmi	r3, #43	; 0x2b
 8022a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8022a42:	2b2a      	cmp	r3, #42	; 0x2a
 8022a44:	d015      	beq.n	8022a72 <_svfiprintf_r+0xf6>
 8022a46:	9a07      	ldr	r2, [sp, #28]
 8022a48:	4654      	mov	r4, sl
 8022a4a:	2000      	movs	r0, #0
 8022a4c:	f04f 0c0a 	mov.w	ip, #10
 8022a50:	4621      	mov	r1, r4
 8022a52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022a56:	3b30      	subs	r3, #48	; 0x30
 8022a58:	2b09      	cmp	r3, #9
 8022a5a:	d94e      	bls.n	8022afa <_svfiprintf_r+0x17e>
 8022a5c:	b1b0      	cbz	r0, 8022a8c <_svfiprintf_r+0x110>
 8022a5e:	9207      	str	r2, [sp, #28]
 8022a60:	e014      	b.n	8022a8c <_svfiprintf_r+0x110>
 8022a62:	eba0 0308 	sub.w	r3, r0, r8
 8022a66:	fa09 f303 	lsl.w	r3, r9, r3
 8022a6a:	4313      	orrs	r3, r2
 8022a6c:	9304      	str	r3, [sp, #16]
 8022a6e:	46a2      	mov	sl, r4
 8022a70:	e7d2      	b.n	8022a18 <_svfiprintf_r+0x9c>
 8022a72:	9b03      	ldr	r3, [sp, #12]
 8022a74:	1d19      	adds	r1, r3, #4
 8022a76:	681b      	ldr	r3, [r3, #0]
 8022a78:	9103      	str	r1, [sp, #12]
 8022a7a:	2b00      	cmp	r3, #0
 8022a7c:	bfbb      	ittet	lt
 8022a7e:	425b      	neglt	r3, r3
 8022a80:	f042 0202 	orrlt.w	r2, r2, #2
 8022a84:	9307      	strge	r3, [sp, #28]
 8022a86:	9307      	strlt	r3, [sp, #28]
 8022a88:	bfb8      	it	lt
 8022a8a:	9204      	strlt	r2, [sp, #16]
 8022a8c:	7823      	ldrb	r3, [r4, #0]
 8022a8e:	2b2e      	cmp	r3, #46	; 0x2e
 8022a90:	d10c      	bne.n	8022aac <_svfiprintf_r+0x130>
 8022a92:	7863      	ldrb	r3, [r4, #1]
 8022a94:	2b2a      	cmp	r3, #42	; 0x2a
 8022a96:	d135      	bne.n	8022b04 <_svfiprintf_r+0x188>
 8022a98:	9b03      	ldr	r3, [sp, #12]
 8022a9a:	1d1a      	adds	r2, r3, #4
 8022a9c:	681b      	ldr	r3, [r3, #0]
 8022a9e:	9203      	str	r2, [sp, #12]
 8022aa0:	2b00      	cmp	r3, #0
 8022aa2:	bfb8      	it	lt
 8022aa4:	f04f 33ff 	movlt.w	r3, #4294967295
 8022aa8:	3402      	adds	r4, #2
 8022aaa:	9305      	str	r3, [sp, #20]
 8022aac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8022b78 <_svfiprintf_r+0x1fc>
 8022ab0:	7821      	ldrb	r1, [r4, #0]
 8022ab2:	2203      	movs	r2, #3
 8022ab4:	4650      	mov	r0, sl
 8022ab6:	f7dd fbd3 	bl	8000260 <memchr>
 8022aba:	b140      	cbz	r0, 8022ace <_svfiprintf_r+0x152>
 8022abc:	2340      	movs	r3, #64	; 0x40
 8022abe:	eba0 000a 	sub.w	r0, r0, sl
 8022ac2:	fa03 f000 	lsl.w	r0, r3, r0
 8022ac6:	9b04      	ldr	r3, [sp, #16]
 8022ac8:	4303      	orrs	r3, r0
 8022aca:	3401      	adds	r4, #1
 8022acc:	9304      	str	r3, [sp, #16]
 8022ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022ad2:	4826      	ldr	r0, [pc, #152]	; (8022b6c <_svfiprintf_r+0x1f0>)
 8022ad4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022ad8:	2206      	movs	r2, #6
 8022ada:	f7dd fbc1 	bl	8000260 <memchr>
 8022ade:	2800      	cmp	r0, #0
 8022ae0:	d038      	beq.n	8022b54 <_svfiprintf_r+0x1d8>
 8022ae2:	4b23      	ldr	r3, [pc, #140]	; (8022b70 <_svfiprintf_r+0x1f4>)
 8022ae4:	bb1b      	cbnz	r3, 8022b2e <_svfiprintf_r+0x1b2>
 8022ae6:	9b03      	ldr	r3, [sp, #12]
 8022ae8:	3307      	adds	r3, #7
 8022aea:	f023 0307 	bic.w	r3, r3, #7
 8022aee:	3308      	adds	r3, #8
 8022af0:	9303      	str	r3, [sp, #12]
 8022af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022af4:	4433      	add	r3, r6
 8022af6:	9309      	str	r3, [sp, #36]	; 0x24
 8022af8:	e767      	b.n	80229ca <_svfiprintf_r+0x4e>
 8022afa:	fb0c 3202 	mla	r2, ip, r2, r3
 8022afe:	460c      	mov	r4, r1
 8022b00:	2001      	movs	r0, #1
 8022b02:	e7a5      	b.n	8022a50 <_svfiprintf_r+0xd4>
 8022b04:	2300      	movs	r3, #0
 8022b06:	3401      	adds	r4, #1
 8022b08:	9305      	str	r3, [sp, #20]
 8022b0a:	4619      	mov	r1, r3
 8022b0c:	f04f 0c0a 	mov.w	ip, #10
 8022b10:	4620      	mov	r0, r4
 8022b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022b16:	3a30      	subs	r2, #48	; 0x30
 8022b18:	2a09      	cmp	r2, #9
 8022b1a:	d903      	bls.n	8022b24 <_svfiprintf_r+0x1a8>
 8022b1c:	2b00      	cmp	r3, #0
 8022b1e:	d0c5      	beq.n	8022aac <_svfiprintf_r+0x130>
 8022b20:	9105      	str	r1, [sp, #20]
 8022b22:	e7c3      	b.n	8022aac <_svfiprintf_r+0x130>
 8022b24:	fb0c 2101 	mla	r1, ip, r1, r2
 8022b28:	4604      	mov	r4, r0
 8022b2a:	2301      	movs	r3, #1
 8022b2c:	e7f0      	b.n	8022b10 <_svfiprintf_r+0x194>
 8022b2e:	ab03      	add	r3, sp, #12
 8022b30:	9300      	str	r3, [sp, #0]
 8022b32:	462a      	mov	r2, r5
 8022b34:	4b0f      	ldr	r3, [pc, #60]	; (8022b74 <_svfiprintf_r+0x1f8>)
 8022b36:	a904      	add	r1, sp, #16
 8022b38:	4638      	mov	r0, r7
 8022b3a:	f3af 8000 	nop.w
 8022b3e:	1c42      	adds	r2, r0, #1
 8022b40:	4606      	mov	r6, r0
 8022b42:	d1d6      	bne.n	8022af2 <_svfiprintf_r+0x176>
 8022b44:	89ab      	ldrh	r3, [r5, #12]
 8022b46:	065b      	lsls	r3, r3, #25
 8022b48:	f53f af2c 	bmi.w	80229a4 <_svfiprintf_r+0x28>
 8022b4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022b4e:	b01d      	add	sp, #116	; 0x74
 8022b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b54:	ab03      	add	r3, sp, #12
 8022b56:	9300      	str	r3, [sp, #0]
 8022b58:	462a      	mov	r2, r5
 8022b5a:	4b06      	ldr	r3, [pc, #24]	; (8022b74 <_svfiprintf_r+0x1f8>)
 8022b5c:	a904      	add	r1, sp, #16
 8022b5e:	4638      	mov	r0, r7
 8022b60:	f000 f9d4 	bl	8022f0c <_printf_i>
 8022b64:	e7eb      	b.n	8022b3e <_svfiprintf_r+0x1c2>
 8022b66:	bf00      	nop
 8022b68:	0802a23b 	.word	0x0802a23b
 8022b6c:	0802a245 	.word	0x0802a245
 8022b70:	00000000 	.word	0x00000000
 8022b74:	080228c5 	.word	0x080228c5
 8022b78:	0802a241 	.word	0x0802a241

08022b7c <__sfputc_r>:
 8022b7c:	6893      	ldr	r3, [r2, #8]
 8022b7e:	3b01      	subs	r3, #1
 8022b80:	2b00      	cmp	r3, #0
 8022b82:	b410      	push	{r4}
 8022b84:	6093      	str	r3, [r2, #8]
 8022b86:	da08      	bge.n	8022b9a <__sfputc_r+0x1e>
 8022b88:	6994      	ldr	r4, [r2, #24]
 8022b8a:	42a3      	cmp	r3, r4
 8022b8c:	db01      	blt.n	8022b92 <__sfputc_r+0x16>
 8022b8e:	290a      	cmp	r1, #10
 8022b90:	d103      	bne.n	8022b9a <__sfputc_r+0x1e>
 8022b92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022b96:	f7ff bb75 	b.w	8022284 <__swbuf_r>
 8022b9a:	6813      	ldr	r3, [r2, #0]
 8022b9c:	1c58      	adds	r0, r3, #1
 8022b9e:	6010      	str	r0, [r2, #0]
 8022ba0:	7019      	strb	r1, [r3, #0]
 8022ba2:	4608      	mov	r0, r1
 8022ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022ba8:	4770      	bx	lr

08022baa <__sfputs_r>:
 8022baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022bac:	4606      	mov	r6, r0
 8022bae:	460f      	mov	r7, r1
 8022bb0:	4614      	mov	r4, r2
 8022bb2:	18d5      	adds	r5, r2, r3
 8022bb4:	42ac      	cmp	r4, r5
 8022bb6:	d101      	bne.n	8022bbc <__sfputs_r+0x12>
 8022bb8:	2000      	movs	r0, #0
 8022bba:	e007      	b.n	8022bcc <__sfputs_r+0x22>
 8022bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022bc0:	463a      	mov	r2, r7
 8022bc2:	4630      	mov	r0, r6
 8022bc4:	f7ff ffda 	bl	8022b7c <__sfputc_r>
 8022bc8:	1c43      	adds	r3, r0, #1
 8022bca:	d1f3      	bne.n	8022bb4 <__sfputs_r+0xa>
 8022bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022bd0 <_vfiprintf_r>:
 8022bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bd4:	460d      	mov	r5, r1
 8022bd6:	b09d      	sub	sp, #116	; 0x74
 8022bd8:	4614      	mov	r4, r2
 8022bda:	4698      	mov	r8, r3
 8022bdc:	4606      	mov	r6, r0
 8022bde:	b118      	cbz	r0, 8022be8 <_vfiprintf_r+0x18>
 8022be0:	6983      	ldr	r3, [r0, #24]
 8022be2:	b90b      	cbnz	r3, 8022be8 <_vfiprintf_r+0x18>
 8022be4:	f7fd fbf8 	bl	80203d8 <__sinit>
 8022be8:	4b89      	ldr	r3, [pc, #548]	; (8022e10 <_vfiprintf_r+0x240>)
 8022bea:	429d      	cmp	r5, r3
 8022bec:	d11b      	bne.n	8022c26 <_vfiprintf_r+0x56>
 8022bee:	6875      	ldr	r5, [r6, #4]
 8022bf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022bf2:	07d9      	lsls	r1, r3, #31
 8022bf4:	d405      	bmi.n	8022c02 <_vfiprintf_r+0x32>
 8022bf6:	89ab      	ldrh	r3, [r5, #12]
 8022bf8:	059a      	lsls	r2, r3, #22
 8022bfa:	d402      	bmi.n	8022c02 <_vfiprintf_r+0x32>
 8022bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022bfe:	f7fd ff9e 	bl	8020b3e <__retarget_lock_acquire_recursive>
 8022c02:	89ab      	ldrh	r3, [r5, #12]
 8022c04:	071b      	lsls	r3, r3, #28
 8022c06:	d501      	bpl.n	8022c0c <_vfiprintf_r+0x3c>
 8022c08:	692b      	ldr	r3, [r5, #16]
 8022c0a:	b9eb      	cbnz	r3, 8022c48 <_vfiprintf_r+0x78>
 8022c0c:	4629      	mov	r1, r5
 8022c0e:	4630      	mov	r0, r6
 8022c10:	f7ff fb9c 	bl	802234c <__swsetup_r>
 8022c14:	b1c0      	cbz	r0, 8022c48 <_vfiprintf_r+0x78>
 8022c16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022c18:	07dc      	lsls	r4, r3, #31
 8022c1a:	d50e      	bpl.n	8022c3a <_vfiprintf_r+0x6a>
 8022c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8022c20:	b01d      	add	sp, #116	; 0x74
 8022c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c26:	4b7b      	ldr	r3, [pc, #492]	; (8022e14 <_vfiprintf_r+0x244>)
 8022c28:	429d      	cmp	r5, r3
 8022c2a:	d101      	bne.n	8022c30 <_vfiprintf_r+0x60>
 8022c2c:	68b5      	ldr	r5, [r6, #8]
 8022c2e:	e7df      	b.n	8022bf0 <_vfiprintf_r+0x20>
 8022c30:	4b79      	ldr	r3, [pc, #484]	; (8022e18 <_vfiprintf_r+0x248>)
 8022c32:	429d      	cmp	r5, r3
 8022c34:	bf08      	it	eq
 8022c36:	68f5      	ldreq	r5, [r6, #12]
 8022c38:	e7da      	b.n	8022bf0 <_vfiprintf_r+0x20>
 8022c3a:	89ab      	ldrh	r3, [r5, #12]
 8022c3c:	0598      	lsls	r0, r3, #22
 8022c3e:	d4ed      	bmi.n	8022c1c <_vfiprintf_r+0x4c>
 8022c40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022c42:	f7fd ff7e 	bl	8020b42 <__retarget_lock_release_recursive>
 8022c46:	e7e9      	b.n	8022c1c <_vfiprintf_r+0x4c>
 8022c48:	2300      	movs	r3, #0
 8022c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8022c4c:	2320      	movs	r3, #32
 8022c4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022c52:	f8cd 800c 	str.w	r8, [sp, #12]
 8022c56:	2330      	movs	r3, #48	; 0x30
 8022c58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022e1c <_vfiprintf_r+0x24c>
 8022c5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022c60:	f04f 0901 	mov.w	r9, #1
 8022c64:	4623      	mov	r3, r4
 8022c66:	469a      	mov	sl, r3
 8022c68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022c6c:	b10a      	cbz	r2, 8022c72 <_vfiprintf_r+0xa2>
 8022c6e:	2a25      	cmp	r2, #37	; 0x25
 8022c70:	d1f9      	bne.n	8022c66 <_vfiprintf_r+0x96>
 8022c72:	ebba 0b04 	subs.w	fp, sl, r4
 8022c76:	d00b      	beq.n	8022c90 <_vfiprintf_r+0xc0>
 8022c78:	465b      	mov	r3, fp
 8022c7a:	4622      	mov	r2, r4
 8022c7c:	4629      	mov	r1, r5
 8022c7e:	4630      	mov	r0, r6
 8022c80:	f7ff ff93 	bl	8022baa <__sfputs_r>
 8022c84:	3001      	adds	r0, #1
 8022c86:	f000 80aa 	beq.w	8022dde <_vfiprintf_r+0x20e>
 8022c8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022c8c:	445a      	add	r2, fp
 8022c8e:	9209      	str	r2, [sp, #36]	; 0x24
 8022c90:	f89a 3000 	ldrb.w	r3, [sl]
 8022c94:	2b00      	cmp	r3, #0
 8022c96:	f000 80a2 	beq.w	8022dde <_vfiprintf_r+0x20e>
 8022c9a:	2300      	movs	r3, #0
 8022c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8022ca0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022ca4:	f10a 0a01 	add.w	sl, sl, #1
 8022ca8:	9304      	str	r3, [sp, #16]
 8022caa:	9307      	str	r3, [sp, #28]
 8022cac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022cb0:	931a      	str	r3, [sp, #104]	; 0x68
 8022cb2:	4654      	mov	r4, sl
 8022cb4:	2205      	movs	r2, #5
 8022cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022cba:	4858      	ldr	r0, [pc, #352]	; (8022e1c <_vfiprintf_r+0x24c>)
 8022cbc:	f7dd fad0 	bl	8000260 <memchr>
 8022cc0:	9a04      	ldr	r2, [sp, #16]
 8022cc2:	b9d8      	cbnz	r0, 8022cfc <_vfiprintf_r+0x12c>
 8022cc4:	06d1      	lsls	r1, r2, #27
 8022cc6:	bf44      	itt	mi
 8022cc8:	2320      	movmi	r3, #32
 8022cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022cce:	0713      	lsls	r3, r2, #28
 8022cd0:	bf44      	itt	mi
 8022cd2:	232b      	movmi	r3, #43	; 0x2b
 8022cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8022cdc:	2b2a      	cmp	r3, #42	; 0x2a
 8022cde:	d015      	beq.n	8022d0c <_vfiprintf_r+0x13c>
 8022ce0:	9a07      	ldr	r2, [sp, #28]
 8022ce2:	4654      	mov	r4, sl
 8022ce4:	2000      	movs	r0, #0
 8022ce6:	f04f 0c0a 	mov.w	ip, #10
 8022cea:	4621      	mov	r1, r4
 8022cec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022cf0:	3b30      	subs	r3, #48	; 0x30
 8022cf2:	2b09      	cmp	r3, #9
 8022cf4:	d94e      	bls.n	8022d94 <_vfiprintf_r+0x1c4>
 8022cf6:	b1b0      	cbz	r0, 8022d26 <_vfiprintf_r+0x156>
 8022cf8:	9207      	str	r2, [sp, #28]
 8022cfa:	e014      	b.n	8022d26 <_vfiprintf_r+0x156>
 8022cfc:	eba0 0308 	sub.w	r3, r0, r8
 8022d00:	fa09 f303 	lsl.w	r3, r9, r3
 8022d04:	4313      	orrs	r3, r2
 8022d06:	9304      	str	r3, [sp, #16]
 8022d08:	46a2      	mov	sl, r4
 8022d0a:	e7d2      	b.n	8022cb2 <_vfiprintf_r+0xe2>
 8022d0c:	9b03      	ldr	r3, [sp, #12]
 8022d0e:	1d19      	adds	r1, r3, #4
 8022d10:	681b      	ldr	r3, [r3, #0]
 8022d12:	9103      	str	r1, [sp, #12]
 8022d14:	2b00      	cmp	r3, #0
 8022d16:	bfbb      	ittet	lt
 8022d18:	425b      	neglt	r3, r3
 8022d1a:	f042 0202 	orrlt.w	r2, r2, #2
 8022d1e:	9307      	strge	r3, [sp, #28]
 8022d20:	9307      	strlt	r3, [sp, #28]
 8022d22:	bfb8      	it	lt
 8022d24:	9204      	strlt	r2, [sp, #16]
 8022d26:	7823      	ldrb	r3, [r4, #0]
 8022d28:	2b2e      	cmp	r3, #46	; 0x2e
 8022d2a:	d10c      	bne.n	8022d46 <_vfiprintf_r+0x176>
 8022d2c:	7863      	ldrb	r3, [r4, #1]
 8022d2e:	2b2a      	cmp	r3, #42	; 0x2a
 8022d30:	d135      	bne.n	8022d9e <_vfiprintf_r+0x1ce>
 8022d32:	9b03      	ldr	r3, [sp, #12]
 8022d34:	1d1a      	adds	r2, r3, #4
 8022d36:	681b      	ldr	r3, [r3, #0]
 8022d38:	9203      	str	r2, [sp, #12]
 8022d3a:	2b00      	cmp	r3, #0
 8022d3c:	bfb8      	it	lt
 8022d3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8022d42:	3402      	adds	r4, #2
 8022d44:	9305      	str	r3, [sp, #20]
 8022d46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022e2c <_vfiprintf_r+0x25c>
 8022d4a:	7821      	ldrb	r1, [r4, #0]
 8022d4c:	2203      	movs	r2, #3
 8022d4e:	4650      	mov	r0, sl
 8022d50:	f7dd fa86 	bl	8000260 <memchr>
 8022d54:	b140      	cbz	r0, 8022d68 <_vfiprintf_r+0x198>
 8022d56:	2340      	movs	r3, #64	; 0x40
 8022d58:	eba0 000a 	sub.w	r0, r0, sl
 8022d5c:	fa03 f000 	lsl.w	r0, r3, r0
 8022d60:	9b04      	ldr	r3, [sp, #16]
 8022d62:	4303      	orrs	r3, r0
 8022d64:	3401      	adds	r4, #1
 8022d66:	9304      	str	r3, [sp, #16]
 8022d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022d6c:	482c      	ldr	r0, [pc, #176]	; (8022e20 <_vfiprintf_r+0x250>)
 8022d6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022d72:	2206      	movs	r2, #6
 8022d74:	f7dd fa74 	bl	8000260 <memchr>
 8022d78:	2800      	cmp	r0, #0
 8022d7a:	d03f      	beq.n	8022dfc <_vfiprintf_r+0x22c>
 8022d7c:	4b29      	ldr	r3, [pc, #164]	; (8022e24 <_vfiprintf_r+0x254>)
 8022d7e:	bb1b      	cbnz	r3, 8022dc8 <_vfiprintf_r+0x1f8>
 8022d80:	9b03      	ldr	r3, [sp, #12]
 8022d82:	3307      	adds	r3, #7
 8022d84:	f023 0307 	bic.w	r3, r3, #7
 8022d88:	3308      	adds	r3, #8
 8022d8a:	9303      	str	r3, [sp, #12]
 8022d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d8e:	443b      	add	r3, r7
 8022d90:	9309      	str	r3, [sp, #36]	; 0x24
 8022d92:	e767      	b.n	8022c64 <_vfiprintf_r+0x94>
 8022d94:	fb0c 3202 	mla	r2, ip, r2, r3
 8022d98:	460c      	mov	r4, r1
 8022d9a:	2001      	movs	r0, #1
 8022d9c:	e7a5      	b.n	8022cea <_vfiprintf_r+0x11a>
 8022d9e:	2300      	movs	r3, #0
 8022da0:	3401      	adds	r4, #1
 8022da2:	9305      	str	r3, [sp, #20]
 8022da4:	4619      	mov	r1, r3
 8022da6:	f04f 0c0a 	mov.w	ip, #10
 8022daa:	4620      	mov	r0, r4
 8022dac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022db0:	3a30      	subs	r2, #48	; 0x30
 8022db2:	2a09      	cmp	r2, #9
 8022db4:	d903      	bls.n	8022dbe <_vfiprintf_r+0x1ee>
 8022db6:	2b00      	cmp	r3, #0
 8022db8:	d0c5      	beq.n	8022d46 <_vfiprintf_r+0x176>
 8022dba:	9105      	str	r1, [sp, #20]
 8022dbc:	e7c3      	b.n	8022d46 <_vfiprintf_r+0x176>
 8022dbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8022dc2:	4604      	mov	r4, r0
 8022dc4:	2301      	movs	r3, #1
 8022dc6:	e7f0      	b.n	8022daa <_vfiprintf_r+0x1da>
 8022dc8:	ab03      	add	r3, sp, #12
 8022dca:	9300      	str	r3, [sp, #0]
 8022dcc:	462a      	mov	r2, r5
 8022dce:	4b16      	ldr	r3, [pc, #88]	; (8022e28 <_vfiprintf_r+0x258>)
 8022dd0:	a904      	add	r1, sp, #16
 8022dd2:	4630      	mov	r0, r6
 8022dd4:	f3af 8000 	nop.w
 8022dd8:	4607      	mov	r7, r0
 8022dda:	1c78      	adds	r0, r7, #1
 8022ddc:	d1d6      	bne.n	8022d8c <_vfiprintf_r+0x1bc>
 8022dde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022de0:	07d9      	lsls	r1, r3, #31
 8022de2:	d405      	bmi.n	8022df0 <_vfiprintf_r+0x220>
 8022de4:	89ab      	ldrh	r3, [r5, #12]
 8022de6:	059a      	lsls	r2, r3, #22
 8022de8:	d402      	bmi.n	8022df0 <_vfiprintf_r+0x220>
 8022dea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022dec:	f7fd fea9 	bl	8020b42 <__retarget_lock_release_recursive>
 8022df0:	89ab      	ldrh	r3, [r5, #12]
 8022df2:	065b      	lsls	r3, r3, #25
 8022df4:	f53f af12 	bmi.w	8022c1c <_vfiprintf_r+0x4c>
 8022df8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022dfa:	e711      	b.n	8022c20 <_vfiprintf_r+0x50>
 8022dfc:	ab03      	add	r3, sp, #12
 8022dfe:	9300      	str	r3, [sp, #0]
 8022e00:	462a      	mov	r2, r5
 8022e02:	4b09      	ldr	r3, [pc, #36]	; (8022e28 <_vfiprintf_r+0x258>)
 8022e04:	a904      	add	r1, sp, #16
 8022e06:	4630      	mov	r0, r6
 8022e08:	f000 f880 	bl	8022f0c <_printf_i>
 8022e0c:	e7e4      	b.n	8022dd8 <_vfiprintf_r+0x208>
 8022e0e:	bf00      	nop
 8022e10:	08029cbc 	.word	0x08029cbc
 8022e14:	08029cdc 	.word	0x08029cdc
 8022e18:	08029c9c 	.word	0x08029c9c
 8022e1c:	0802a23b 	.word	0x0802a23b
 8022e20:	0802a245 	.word	0x0802a245
 8022e24:	00000000 	.word	0x00000000
 8022e28:	08022bab 	.word	0x08022bab
 8022e2c:	0802a241 	.word	0x0802a241

08022e30 <_printf_common>:
 8022e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022e34:	4616      	mov	r6, r2
 8022e36:	4699      	mov	r9, r3
 8022e38:	688a      	ldr	r2, [r1, #8]
 8022e3a:	690b      	ldr	r3, [r1, #16]
 8022e3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022e40:	4293      	cmp	r3, r2
 8022e42:	bfb8      	it	lt
 8022e44:	4613      	movlt	r3, r2
 8022e46:	6033      	str	r3, [r6, #0]
 8022e48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022e4c:	4607      	mov	r7, r0
 8022e4e:	460c      	mov	r4, r1
 8022e50:	b10a      	cbz	r2, 8022e56 <_printf_common+0x26>
 8022e52:	3301      	adds	r3, #1
 8022e54:	6033      	str	r3, [r6, #0]
 8022e56:	6823      	ldr	r3, [r4, #0]
 8022e58:	0699      	lsls	r1, r3, #26
 8022e5a:	bf42      	ittt	mi
 8022e5c:	6833      	ldrmi	r3, [r6, #0]
 8022e5e:	3302      	addmi	r3, #2
 8022e60:	6033      	strmi	r3, [r6, #0]
 8022e62:	6825      	ldr	r5, [r4, #0]
 8022e64:	f015 0506 	ands.w	r5, r5, #6
 8022e68:	d106      	bne.n	8022e78 <_printf_common+0x48>
 8022e6a:	f104 0a19 	add.w	sl, r4, #25
 8022e6e:	68e3      	ldr	r3, [r4, #12]
 8022e70:	6832      	ldr	r2, [r6, #0]
 8022e72:	1a9b      	subs	r3, r3, r2
 8022e74:	42ab      	cmp	r3, r5
 8022e76:	dc26      	bgt.n	8022ec6 <_printf_common+0x96>
 8022e78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022e7c:	1e13      	subs	r3, r2, #0
 8022e7e:	6822      	ldr	r2, [r4, #0]
 8022e80:	bf18      	it	ne
 8022e82:	2301      	movne	r3, #1
 8022e84:	0692      	lsls	r2, r2, #26
 8022e86:	d42b      	bmi.n	8022ee0 <_printf_common+0xb0>
 8022e88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022e8c:	4649      	mov	r1, r9
 8022e8e:	4638      	mov	r0, r7
 8022e90:	47c0      	blx	r8
 8022e92:	3001      	adds	r0, #1
 8022e94:	d01e      	beq.n	8022ed4 <_printf_common+0xa4>
 8022e96:	6823      	ldr	r3, [r4, #0]
 8022e98:	68e5      	ldr	r5, [r4, #12]
 8022e9a:	6832      	ldr	r2, [r6, #0]
 8022e9c:	f003 0306 	and.w	r3, r3, #6
 8022ea0:	2b04      	cmp	r3, #4
 8022ea2:	bf08      	it	eq
 8022ea4:	1aad      	subeq	r5, r5, r2
 8022ea6:	68a3      	ldr	r3, [r4, #8]
 8022ea8:	6922      	ldr	r2, [r4, #16]
 8022eaa:	bf0c      	ite	eq
 8022eac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022eb0:	2500      	movne	r5, #0
 8022eb2:	4293      	cmp	r3, r2
 8022eb4:	bfc4      	itt	gt
 8022eb6:	1a9b      	subgt	r3, r3, r2
 8022eb8:	18ed      	addgt	r5, r5, r3
 8022eba:	2600      	movs	r6, #0
 8022ebc:	341a      	adds	r4, #26
 8022ebe:	42b5      	cmp	r5, r6
 8022ec0:	d11a      	bne.n	8022ef8 <_printf_common+0xc8>
 8022ec2:	2000      	movs	r0, #0
 8022ec4:	e008      	b.n	8022ed8 <_printf_common+0xa8>
 8022ec6:	2301      	movs	r3, #1
 8022ec8:	4652      	mov	r2, sl
 8022eca:	4649      	mov	r1, r9
 8022ecc:	4638      	mov	r0, r7
 8022ece:	47c0      	blx	r8
 8022ed0:	3001      	adds	r0, #1
 8022ed2:	d103      	bne.n	8022edc <_printf_common+0xac>
 8022ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8022ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022edc:	3501      	adds	r5, #1
 8022ede:	e7c6      	b.n	8022e6e <_printf_common+0x3e>
 8022ee0:	18e1      	adds	r1, r4, r3
 8022ee2:	1c5a      	adds	r2, r3, #1
 8022ee4:	2030      	movs	r0, #48	; 0x30
 8022ee6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022eea:	4422      	add	r2, r4
 8022eec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022ef0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022ef4:	3302      	adds	r3, #2
 8022ef6:	e7c7      	b.n	8022e88 <_printf_common+0x58>
 8022ef8:	2301      	movs	r3, #1
 8022efa:	4622      	mov	r2, r4
 8022efc:	4649      	mov	r1, r9
 8022efe:	4638      	mov	r0, r7
 8022f00:	47c0      	blx	r8
 8022f02:	3001      	adds	r0, #1
 8022f04:	d0e6      	beq.n	8022ed4 <_printf_common+0xa4>
 8022f06:	3601      	adds	r6, #1
 8022f08:	e7d9      	b.n	8022ebe <_printf_common+0x8e>
	...

08022f0c <_printf_i>:
 8022f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022f10:	460c      	mov	r4, r1
 8022f12:	4691      	mov	r9, r2
 8022f14:	7e27      	ldrb	r7, [r4, #24]
 8022f16:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022f18:	2f78      	cmp	r7, #120	; 0x78
 8022f1a:	4680      	mov	r8, r0
 8022f1c:	469a      	mov	sl, r3
 8022f1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022f22:	d807      	bhi.n	8022f34 <_printf_i+0x28>
 8022f24:	2f62      	cmp	r7, #98	; 0x62
 8022f26:	d80a      	bhi.n	8022f3e <_printf_i+0x32>
 8022f28:	2f00      	cmp	r7, #0
 8022f2a:	f000 80d8 	beq.w	80230de <_printf_i+0x1d2>
 8022f2e:	2f58      	cmp	r7, #88	; 0x58
 8022f30:	f000 80a3 	beq.w	802307a <_printf_i+0x16e>
 8022f34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022f38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022f3c:	e03a      	b.n	8022fb4 <_printf_i+0xa8>
 8022f3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022f42:	2b15      	cmp	r3, #21
 8022f44:	d8f6      	bhi.n	8022f34 <_printf_i+0x28>
 8022f46:	a001      	add	r0, pc, #4	; (adr r0, 8022f4c <_printf_i+0x40>)
 8022f48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8022f4c:	08022fa5 	.word	0x08022fa5
 8022f50:	08022fb9 	.word	0x08022fb9
 8022f54:	08022f35 	.word	0x08022f35
 8022f58:	08022f35 	.word	0x08022f35
 8022f5c:	08022f35 	.word	0x08022f35
 8022f60:	08022f35 	.word	0x08022f35
 8022f64:	08022fb9 	.word	0x08022fb9
 8022f68:	08022f35 	.word	0x08022f35
 8022f6c:	08022f35 	.word	0x08022f35
 8022f70:	08022f35 	.word	0x08022f35
 8022f74:	08022f35 	.word	0x08022f35
 8022f78:	080230c5 	.word	0x080230c5
 8022f7c:	08022fe9 	.word	0x08022fe9
 8022f80:	080230a7 	.word	0x080230a7
 8022f84:	08022f35 	.word	0x08022f35
 8022f88:	08022f35 	.word	0x08022f35
 8022f8c:	080230e7 	.word	0x080230e7
 8022f90:	08022f35 	.word	0x08022f35
 8022f94:	08022fe9 	.word	0x08022fe9
 8022f98:	08022f35 	.word	0x08022f35
 8022f9c:	08022f35 	.word	0x08022f35
 8022fa0:	080230af 	.word	0x080230af
 8022fa4:	680b      	ldr	r3, [r1, #0]
 8022fa6:	1d1a      	adds	r2, r3, #4
 8022fa8:	681b      	ldr	r3, [r3, #0]
 8022faa:	600a      	str	r2, [r1, #0]
 8022fac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022fb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022fb4:	2301      	movs	r3, #1
 8022fb6:	e0a3      	b.n	8023100 <_printf_i+0x1f4>
 8022fb8:	6825      	ldr	r5, [r4, #0]
 8022fba:	6808      	ldr	r0, [r1, #0]
 8022fbc:	062e      	lsls	r6, r5, #24
 8022fbe:	f100 0304 	add.w	r3, r0, #4
 8022fc2:	d50a      	bpl.n	8022fda <_printf_i+0xce>
 8022fc4:	6805      	ldr	r5, [r0, #0]
 8022fc6:	600b      	str	r3, [r1, #0]
 8022fc8:	2d00      	cmp	r5, #0
 8022fca:	da03      	bge.n	8022fd4 <_printf_i+0xc8>
 8022fcc:	232d      	movs	r3, #45	; 0x2d
 8022fce:	426d      	negs	r5, r5
 8022fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022fd4:	485e      	ldr	r0, [pc, #376]	; (8023150 <_printf_i+0x244>)
 8022fd6:	230a      	movs	r3, #10
 8022fd8:	e019      	b.n	802300e <_printf_i+0x102>
 8022fda:	f015 0f40 	tst.w	r5, #64	; 0x40
 8022fde:	6805      	ldr	r5, [r0, #0]
 8022fe0:	600b      	str	r3, [r1, #0]
 8022fe2:	bf18      	it	ne
 8022fe4:	b22d      	sxthne	r5, r5
 8022fe6:	e7ef      	b.n	8022fc8 <_printf_i+0xbc>
 8022fe8:	680b      	ldr	r3, [r1, #0]
 8022fea:	6825      	ldr	r5, [r4, #0]
 8022fec:	1d18      	adds	r0, r3, #4
 8022fee:	6008      	str	r0, [r1, #0]
 8022ff0:	0628      	lsls	r0, r5, #24
 8022ff2:	d501      	bpl.n	8022ff8 <_printf_i+0xec>
 8022ff4:	681d      	ldr	r5, [r3, #0]
 8022ff6:	e002      	b.n	8022ffe <_printf_i+0xf2>
 8022ff8:	0669      	lsls	r1, r5, #25
 8022ffa:	d5fb      	bpl.n	8022ff4 <_printf_i+0xe8>
 8022ffc:	881d      	ldrh	r5, [r3, #0]
 8022ffe:	4854      	ldr	r0, [pc, #336]	; (8023150 <_printf_i+0x244>)
 8023000:	2f6f      	cmp	r7, #111	; 0x6f
 8023002:	bf0c      	ite	eq
 8023004:	2308      	moveq	r3, #8
 8023006:	230a      	movne	r3, #10
 8023008:	2100      	movs	r1, #0
 802300a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802300e:	6866      	ldr	r6, [r4, #4]
 8023010:	60a6      	str	r6, [r4, #8]
 8023012:	2e00      	cmp	r6, #0
 8023014:	bfa2      	ittt	ge
 8023016:	6821      	ldrge	r1, [r4, #0]
 8023018:	f021 0104 	bicge.w	r1, r1, #4
 802301c:	6021      	strge	r1, [r4, #0]
 802301e:	b90d      	cbnz	r5, 8023024 <_printf_i+0x118>
 8023020:	2e00      	cmp	r6, #0
 8023022:	d04d      	beq.n	80230c0 <_printf_i+0x1b4>
 8023024:	4616      	mov	r6, r2
 8023026:	fbb5 f1f3 	udiv	r1, r5, r3
 802302a:	fb03 5711 	mls	r7, r3, r1, r5
 802302e:	5dc7      	ldrb	r7, [r0, r7]
 8023030:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023034:	462f      	mov	r7, r5
 8023036:	42bb      	cmp	r3, r7
 8023038:	460d      	mov	r5, r1
 802303a:	d9f4      	bls.n	8023026 <_printf_i+0x11a>
 802303c:	2b08      	cmp	r3, #8
 802303e:	d10b      	bne.n	8023058 <_printf_i+0x14c>
 8023040:	6823      	ldr	r3, [r4, #0]
 8023042:	07df      	lsls	r7, r3, #31
 8023044:	d508      	bpl.n	8023058 <_printf_i+0x14c>
 8023046:	6923      	ldr	r3, [r4, #16]
 8023048:	6861      	ldr	r1, [r4, #4]
 802304a:	4299      	cmp	r1, r3
 802304c:	bfde      	ittt	le
 802304e:	2330      	movle	r3, #48	; 0x30
 8023050:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023054:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023058:	1b92      	subs	r2, r2, r6
 802305a:	6122      	str	r2, [r4, #16]
 802305c:	f8cd a000 	str.w	sl, [sp]
 8023060:	464b      	mov	r3, r9
 8023062:	aa03      	add	r2, sp, #12
 8023064:	4621      	mov	r1, r4
 8023066:	4640      	mov	r0, r8
 8023068:	f7ff fee2 	bl	8022e30 <_printf_common>
 802306c:	3001      	adds	r0, #1
 802306e:	d14c      	bne.n	802310a <_printf_i+0x1fe>
 8023070:	f04f 30ff 	mov.w	r0, #4294967295
 8023074:	b004      	add	sp, #16
 8023076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802307a:	4835      	ldr	r0, [pc, #212]	; (8023150 <_printf_i+0x244>)
 802307c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8023080:	6823      	ldr	r3, [r4, #0]
 8023082:	680e      	ldr	r6, [r1, #0]
 8023084:	061f      	lsls	r7, r3, #24
 8023086:	f856 5b04 	ldr.w	r5, [r6], #4
 802308a:	600e      	str	r6, [r1, #0]
 802308c:	d514      	bpl.n	80230b8 <_printf_i+0x1ac>
 802308e:	07d9      	lsls	r1, r3, #31
 8023090:	bf44      	itt	mi
 8023092:	f043 0320 	orrmi.w	r3, r3, #32
 8023096:	6023      	strmi	r3, [r4, #0]
 8023098:	b91d      	cbnz	r5, 80230a2 <_printf_i+0x196>
 802309a:	6823      	ldr	r3, [r4, #0]
 802309c:	f023 0320 	bic.w	r3, r3, #32
 80230a0:	6023      	str	r3, [r4, #0]
 80230a2:	2310      	movs	r3, #16
 80230a4:	e7b0      	b.n	8023008 <_printf_i+0xfc>
 80230a6:	6823      	ldr	r3, [r4, #0]
 80230a8:	f043 0320 	orr.w	r3, r3, #32
 80230ac:	6023      	str	r3, [r4, #0]
 80230ae:	2378      	movs	r3, #120	; 0x78
 80230b0:	4828      	ldr	r0, [pc, #160]	; (8023154 <_printf_i+0x248>)
 80230b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80230b6:	e7e3      	b.n	8023080 <_printf_i+0x174>
 80230b8:	065e      	lsls	r6, r3, #25
 80230ba:	bf48      	it	mi
 80230bc:	b2ad      	uxthmi	r5, r5
 80230be:	e7e6      	b.n	802308e <_printf_i+0x182>
 80230c0:	4616      	mov	r6, r2
 80230c2:	e7bb      	b.n	802303c <_printf_i+0x130>
 80230c4:	680b      	ldr	r3, [r1, #0]
 80230c6:	6826      	ldr	r6, [r4, #0]
 80230c8:	6960      	ldr	r0, [r4, #20]
 80230ca:	1d1d      	adds	r5, r3, #4
 80230cc:	600d      	str	r5, [r1, #0]
 80230ce:	0635      	lsls	r5, r6, #24
 80230d0:	681b      	ldr	r3, [r3, #0]
 80230d2:	d501      	bpl.n	80230d8 <_printf_i+0x1cc>
 80230d4:	6018      	str	r0, [r3, #0]
 80230d6:	e002      	b.n	80230de <_printf_i+0x1d2>
 80230d8:	0671      	lsls	r1, r6, #25
 80230da:	d5fb      	bpl.n	80230d4 <_printf_i+0x1c8>
 80230dc:	8018      	strh	r0, [r3, #0]
 80230de:	2300      	movs	r3, #0
 80230e0:	6123      	str	r3, [r4, #16]
 80230e2:	4616      	mov	r6, r2
 80230e4:	e7ba      	b.n	802305c <_printf_i+0x150>
 80230e6:	680b      	ldr	r3, [r1, #0]
 80230e8:	1d1a      	adds	r2, r3, #4
 80230ea:	600a      	str	r2, [r1, #0]
 80230ec:	681e      	ldr	r6, [r3, #0]
 80230ee:	6862      	ldr	r2, [r4, #4]
 80230f0:	2100      	movs	r1, #0
 80230f2:	4630      	mov	r0, r6
 80230f4:	f7dd f8b4 	bl	8000260 <memchr>
 80230f8:	b108      	cbz	r0, 80230fe <_printf_i+0x1f2>
 80230fa:	1b80      	subs	r0, r0, r6
 80230fc:	6060      	str	r0, [r4, #4]
 80230fe:	6863      	ldr	r3, [r4, #4]
 8023100:	6123      	str	r3, [r4, #16]
 8023102:	2300      	movs	r3, #0
 8023104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023108:	e7a8      	b.n	802305c <_printf_i+0x150>
 802310a:	6923      	ldr	r3, [r4, #16]
 802310c:	4632      	mov	r2, r6
 802310e:	4649      	mov	r1, r9
 8023110:	4640      	mov	r0, r8
 8023112:	47d0      	blx	sl
 8023114:	3001      	adds	r0, #1
 8023116:	d0ab      	beq.n	8023070 <_printf_i+0x164>
 8023118:	6823      	ldr	r3, [r4, #0]
 802311a:	079b      	lsls	r3, r3, #30
 802311c:	d413      	bmi.n	8023146 <_printf_i+0x23a>
 802311e:	68e0      	ldr	r0, [r4, #12]
 8023120:	9b03      	ldr	r3, [sp, #12]
 8023122:	4298      	cmp	r0, r3
 8023124:	bfb8      	it	lt
 8023126:	4618      	movlt	r0, r3
 8023128:	e7a4      	b.n	8023074 <_printf_i+0x168>
 802312a:	2301      	movs	r3, #1
 802312c:	4632      	mov	r2, r6
 802312e:	4649      	mov	r1, r9
 8023130:	4640      	mov	r0, r8
 8023132:	47d0      	blx	sl
 8023134:	3001      	adds	r0, #1
 8023136:	d09b      	beq.n	8023070 <_printf_i+0x164>
 8023138:	3501      	adds	r5, #1
 802313a:	68e3      	ldr	r3, [r4, #12]
 802313c:	9903      	ldr	r1, [sp, #12]
 802313e:	1a5b      	subs	r3, r3, r1
 8023140:	42ab      	cmp	r3, r5
 8023142:	dcf2      	bgt.n	802312a <_printf_i+0x21e>
 8023144:	e7eb      	b.n	802311e <_printf_i+0x212>
 8023146:	2500      	movs	r5, #0
 8023148:	f104 0619 	add.w	r6, r4, #25
 802314c:	e7f5      	b.n	802313a <_printf_i+0x22e>
 802314e:	bf00      	nop
 8023150:	0802a24c 	.word	0x0802a24c
 8023154:	0802a25d 	.word	0x0802a25d

08023158 <_putc_r>:
 8023158:	b570      	push	{r4, r5, r6, lr}
 802315a:	460d      	mov	r5, r1
 802315c:	4614      	mov	r4, r2
 802315e:	4606      	mov	r6, r0
 8023160:	b118      	cbz	r0, 802316a <_putc_r+0x12>
 8023162:	6983      	ldr	r3, [r0, #24]
 8023164:	b90b      	cbnz	r3, 802316a <_putc_r+0x12>
 8023166:	f7fd f937 	bl	80203d8 <__sinit>
 802316a:	4b1c      	ldr	r3, [pc, #112]	; (80231dc <_putc_r+0x84>)
 802316c:	429c      	cmp	r4, r3
 802316e:	d124      	bne.n	80231ba <_putc_r+0x62>
 8023170:	6874      	ldr	r4, [r6, #4]
 8023172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023174:	07d8      	lsls	r0, r3, #31
 8023176:	d405      	bmi.n	8023184 <_putc_r+0x2c>
 8023178:	89a3      	ldrh	r3, [r4, #12]
 802317a:	0599      	lsls	r1, r3, #22
 802317c:	d402      	bmi.n	8023184 <_putc_r+0x2c>
 802317e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023180:	f7fd fcdd 	bl	8020b3e <__retarget_lock_acquire_recursive>
 8023184:	68a3      	ldr	r3, [r4, #8]
 8023186:	3b01      	subs	r3, #1
 8023188:	2b00      	cmp	r3, #0
 802318a:	60a3      	str	r3, [r4, #8]
 802318c:	da05      	bge.n	802319a <_putc_r+0x42>
 802318e:	69a2      	ldr	r2, [r4, #24]
 8023190:	4293      	cmp	r3, r2
 8023192:	db1c      	blt.n	80231ce <_putc_r+0x76>
 8023194:	b2eb      	uxtb	r3, r5
 8023196:	2b0a      	cmp	r3, #10
 8023198:	d019      	beq.n	80231ce <_putc_r+0x76>
 802319a:	6823      	ldr	r3, [r4, #0]
 802319c:	1c5a      	adds	r2, r3, #1
 802319e:	6022      	str	r2, [r4, #0]
 80231a0:	701d      	strb	r5, [r3, #0]
 80231a2:	b2ed      	uxtb	r5, r5
 80231a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80231a6:	07da      	lsls	r2, r3, #31
 80231a8:	d405      	bmi.n	80231b6 <_putc_r+0x5e>
 80231aa:	89a3      	ldrh	r3, [r4, #12]
 80231ac:	059b      	lsls	r3, r3, #22
 80231ae:	d402      	bmi.n	80231b6 <_putc_r+0x5e>
 80231b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80231b2:	f7fd fcc6 	bl	8020b42 <__retarget_lock_release_recursive>
 80231b6:	4628      	mov	r0, r5
 80231b8:	bd70      	pop	{r4, r5, r6, pc}
 80231ba:	4b09      	ldr	r3, [pc, #36]	; (80231e0 <_putc_r+0x88>)
 80231bc:	429c      	cmp	r4, r3
 80231be:	d101      	bne.n	80231c4 <_putc_r+0x6c>
 80231c0:	68b4      	ldr	r4, [r6, #8]
 80231c2:	e7d6      	b.n	8023172 <_putc_r+0x1a>
 80231c4:	4b07      	ldr	r3, [pc, #28]	; (80231e4 <_putc_r+0x8c>)
 80231c6:	429c      	cmp	r4, r3
 80231c8:	bf08      	it	eq
 80231ca:	68f4      	ldreq	r4, [r6, #12]
 80231cc:	e7d1      	b.n	8023172 <_putc_r+0x1a>
 80231ce:	4629      	mov	r1, r5
 80231d0:	4622      	mov	r2, r4
 80231d2:	4630      	mov	r0, r6
 80231d4:	f7ff f856 	bl	8022284 <__swbuf_r>
 80231d8:	4605      	mov	r5, r0
 80231da:	e7e3      	b.n	80231a4 <_putc_r+0x4c>
 80231dc:	08029cbc 	.word	0x08029cbc
 80231e0:	08029cdc 	.word	0x08029cdc
 80231e4:	08029c9c 	.word	0x08029c9c

080231e8 <_read_r>:
 80231e8:	b538      	push	{r3, r4, r5, lr}
 80231ea:	4d07      	ldr	r5, [pc, #28]	; (8023208 <_read_r+0x20>)
 80231ec:	4604      	mov	r4, r0
 80231ee:	4608      	mov	r0, r1
 80231f0:	4611      	mov	r1, r2
 80231f2:	2200      	movs	r2, #0
 80231f4:	602a      	str	r2, [r5, #0]
 80231f6:	461a      	mov	r2, r3
 80231f8:	f7dd fe05 	bl	8000e06 <_read>
 80231fc:	1c43      	adds	r3, r0, #1
 80231fe:	d102      	bne.n	8023206 <_read_r+0x1e>
 8023200:	682b      	ldr	r3, [r5, #0]
 8023202:	b103      	cbz	r3, 8023206 <_read_r+0x1e>
 8023204:	6023      	str	r3, [r4, #0]
 8023206:	bd38      	pop	{r3, r4, r5, pc}
 8023208:	20001014 	.word	0x20001014

0802320c <sniprintf>:
 802320c:	b40c      	push	{r2, r3}
 802320e:	b530      	push	{r4, r5, lr}
 8023210:	4b17      	ldr	r3, [pc, #92]	; (8023270 <sniprintf+0x64>)
 8023212:	1e0c      	subs	r4, r1, #0
 8023214:	681d      	ldr	r5, [r3, #0]
 8023216:	b09d      	sub	sp, #116	; 0x74
 8023218:	da08      	bge.n	802322c <sniprintf+0x20>
 802321a:	238b      	movs	r3, #139	; 0x8b
 802321c:	602b      	str	r3, [r5, #0]
 802321e:	f04f 30ff 	mov.w	r0, #4294967295
 8023222:	b01d      	add	sp, #116	; 0x74
 8023224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023228:	b002      	add	sp, #8
 802322a:	4770      	bx	lr
 802322c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8023230:	f8ad 3014 	strh.w	r3, [sp, #20]
 8023234:	bf14      	ite	ne
 8023236:	f104 33ff 	addne.w	r3, r4, #4294967295
 802323a:	4623      	moveq	r3, r4
 802323c:	9304      	str	r3, [sp, #16]
 802323e:	9307      	str	r3, [sp, #28]
 8023240:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8023244:	9002      	str	r0, [sp, #8]
 8023246:	9006      	str	r0, [sp, #24]
 8023248:	f8ad 3016 	strh.w	r3, [sp, #22]
 802324c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802324e:	ab21      	add	r3, sp, #132	; 0x84
 8023250:	a902      	add	r1, sp, #8
 8023252:	4628      	mov	r0, r5
 8023254:	9301      	str	r3, [sp, #4]
 8023256:	f7ff fb91 	bl	802297c <_svfiprintf_r>
 802325a:	1c43      	adds	r3, r0, #1
 802325c:	bfbc      	itt	lt
 802325e:	238b      	movlt	r3, #139	; 0x8b
 8023260:	602b      	strlt	r3, [r5, #0]
 8023262:	2c00      	cmp	r4, #0
 8023264:	d0dd      	beq.n	8023222 <sniprintf+0x16>
 8023266:	9b02      	ldr	r3, [sp, #8]
 8023268:	2200      	movs	r2, #0
 802326a:	701a      	strb	r2, [r3, #0]
 802326c:	e7d9      	b.n	8023222 <sniprintf+0x16>
 802326e:	bf00      	nop
 8023270:	20000108 	.word	0x20000108

08023274 <siscanf>:
 8023274:	b40e      	push	{r1, r2, r3}
 8023276:	b510      	push	{r4, lr}
 8023278:	b09f      	sub	sp, #124	; 0x7c
 802327a:	ac21      	add	r4, sp, #132	; 0x84
 802327c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8023280:	f854 2b04 	ldr.w	r2, [r4], #4
 8023284:	9201      	str	r2, [sp, #4]
 8023286:	f8ad 101c 	strh.w	r1, [sp, #28]
 802328a:	9004      	str	r0, [sp, #16]
 802328c:	9008      	str	r0, [sp, #32]
 802328e:	f7dc ffd5 	bl	800023c <strlen>
 8023292:	4b0c      	ldr	r3, [pc, #48]	; (80232c4 <siscanf+0x50>)
 8023294:	9005      	str	r0, [sp, #20]
 8023296:	9009      	str	r0, [sp, #36]	; 0x24
 8023298:	930d      	str	r3, [sp, #52]	; 0x34
 802329a:	480b      	ldr	r0, [pc, #44]	; (80232c8 <siscanf+0x54>)
 802329c:	9a01      	ldr	r2, [sp, #4]
 802329e:	6800      	ldr	r0, [r0, #0]
 80232a0:	9403      	str	r4, [sp, #12]
 80232a2:	2300      	movs	r3, #0
 80232a4:	9311      	str	r3, [sp, #68]	; 0x44
 80232a6:	9316      	str	r3, [sp, #88]	; 0x58
 80232a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80232ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 80232b0:	a904      	add	r1, sp, #16
 80232b2:	4623      	mov	r3, r4
 80232b4:	f000 f8b2 	bl	802341c <__ssvfiscanf_r>
 80232b8:	b01f      	add	sp, #124	; 0x7c
 80232ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80232be:	b003      	add	sp, #12
 80232c0:	4770      	bx	lr
 80232c2:	bf00      	nop
 80232c4:	08021013 	.word	0x08021013
 80232c8:	20000108 	.word	0x20000108

080232cc <strncmp>:
 80232cc:	b510      	push	{r4, lr}
 80232ce:	b16a      	cbz	r2, 80232ec <strncmp+0x20>
 80232d0:	3901      	subs	r1, #1
 80232d2:	1884      	adds	r4, r0, r2
 80232d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80232d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80232dc:	4293      	cmp	r3, r2
 80232de:	d103      	bne.n	80232e8 <strncmp+0x1c>
 80232e0:	42a0      	cmp	r0, r4
 80232e2:	d001      	beq.n	80232e8 <strncmp+0x1c>
 80232e4:	2b00      	cmp	r3, #0
 80232e6:	d1f5      	bne.n	80232d4 <strncmp+0x8>
 80232e8:	1a98      	subs	r0, r3, r2
 80232ea:	bd10      	pop	{r4, pc}
 80232ec:	4610      	mov	r0, r2
 80232ee:	e7fc      	b.n	80232ea <strncmp+0x1e>

080232f0 <__ascii_wctomb>:
 80232f0:	b149      	cbz	r1, 8023306 <__ascii_wctomb+0x16>
 80232f2:	2aff      	cmp	r2, #255	; 0xff
 80232f4:	bf85      	ittet	hi
 80232f6:	238a      	movhi	r3, #138	; 0x8a
 80232f8:	6003      	strhi	r3, [r0, #0]
 80232fa:	700a      	strbls	r2, [r1, #0]
 80232fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8023300:	bf98      	it	ls
 8023302:	2001      	movls	r0, #1
 8023304:	4770      	bx	lr
 8023306:	4608      	mov	r0, r1
 8023308:	4770      	bx	lr
	...

0802330c <__env_lock>:
 802330c:	4801      	ldr	r0, [pc, #4]	; (8023314 <__env_lock+0x8>)
 802330e:	f7fd bc16 	b.w	8020b3e <__retarget_lock_acquire_recursive>
 8023312:	bf00      	nop
 8023314:	2000100a 	.word	0x2000100a

08023318 <__env_unlock>:
 8023318:	4801      	ldr	r0, [pc, #4]	; (8023320 <__env_unlock+0x8>)
 802331a:	f7fd bc12 	b.w	8020b42 <__retarget_lock_release_recursive>
 802331e:	bf00      	nop
 8023320:	2000100a 	.word	0x2000100a

08023324 <memmove>:
 8023324:	4288      	cmp	r0, r1
 8023326:	b510      	push	{r4, lr}
 8023328:	eb01 0402 	add.w	r4, r1, r2
 802332c:	d902      	bls.n	8023334 <memmove+0x10>
 802332e:	4284      	cmp	r4, r0
 8023330:	4623      	mov	r3, r4
 8023332:	d807      	bhi.n	8023344 <memmove+0x20>
 8023334:	1e43      	subs	r3, r0, #1
 8023336:	42a1      	cmp	r1, r4
 8023338:	d008      	beq.n	802334c <memmove+0x28>
 802333a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802333e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023342:	e7f8      	b.n	8023336 <memmove+0x12>
 8023344:	4402      	add	r2, r0
 8023346:	4601      	mov	r1, r0
 8023348:	428a      	cmp	r2, r1
 802334a:	d100      	bne.n	802334e <memmove+0x2a>
 802334c:	bd10      	pop	{r4, pc}
 802334e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023352:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023356:	e7f7      	b.n	8023348 <memmove+0x24>

08023358 <_malloc_usable_size_r>:
 8023358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802335c:	1f18      	subs	r0, r3, #4
 802335e:	2b00      	cmp	r3, #0
 8023360:	bfbc      	itt	lt
 8023362:	580b      	ldrlt	r3, [r1, r0]
 8023364:	18c0      	addlt	r0, r0, r3
 8023366:	4770      	bx	lr

08023368 <_sungetc_r>:
 8023368:	b538      	push	{r3, r4, r5, lr}
 802336a:	1c4b      	adds	r3, r1, #1
 802336c:	4614      	mov	r4, r2
 802336e:	d103      	bne.n	8023378 <_sungetc_r+0x10>
 8023370:	f04f 35ff 	mov.w	r5, #4294967295
 8023374:	4628      	mov	r0, r5
 8023376:	bd38      	pop	{r3, r4, r5, pc}
 8023378:	8993      	ldrh	r3, [r2, #12]
 802337a:	f023 0320 	bic.w	r3, r3, #32
 802337e:	8193      	strh	r3, [r2, #12]
 8023380:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023382:	6852      	ldr	r2, [r2, #4]
 8023384:	b2cd      	uxtb	r5, r1
 8023386:	b18b      	cbz	r3, 80233ac <_sungetc_r+0x44>
 8023388:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802338a:	4293      	cmp	r3, r2
 802338c:	dd08      	ble.n	80233a0 <_sungetc_r+0x38>
 802338e:	6823      	ldr	r3, [r4, #0]
 8023390:	1e5a      	subs	r2, r3, #1
 8023392:	6022      	str	r2, [r4, #0]
 8023394:	f803 5c01 	strb.w	r5, [r3, #-1]
 8023398:	6863      	ldr	r3, [r4, #4]
 802339a:	3301      	adds	r3, #1
 802339c:	6063      	str	r3, [r4, #4]
 802339e:	e7e9      	b.n	8023374 <_sungetc_r+0xc>
 80233a0:	4621      	mov	r1, r4
 80233a2:	f000 fb39 	bl	8023a18 <__submore>
 80233a6:	2800      	cmp	r0, #0
 80233a8:	d0f1      	beq.n	802338e <_sungetc_r+0x26>
 80233aa:	e7e1      	b.n	8023370 <_sungetc_r+0x8>
 80233ac:	6921      	ldr	r1, [r4, #16]
 80233ae:	6823      	ldr	r3, [r4, #0]
 80233b0:	b151      	cbz	r1, 80233c8 <_sungetc_r+0x60>
 80233b2:	4299      	cmp	r1, r3
 80233b4:	d208      	bcs.n	80233c8 <_sungetc_r+0x60>
 80233b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80233ba:	42a9      	cmp	r1, r5
 80233bc:	d104      	bne.n	80233c8 <_sungetc_r+0x60>
 80233be:	3b01      	subs	r3, #1
 80233c0:	3201      	adds	r2, #1
 80233c2:	6023      	str	r3, [r4, #0]
 80233c4:	6062      	str	r2, [r4, #4]
 80233c6:	e7d5      	b.n	8023374 <_sungetc_r+0xc>
 80233c8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80233cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80233d0:	6363      	str	r3, [r4, #52]	; 0x34
 80233d2:	2303      	movs	r3, #3
 80233d4:	63a3      	str	r3, [r4, #56]	; 0x38
 80233d6:	4623      	mov	r3, r4
 80233d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80233dc:	6023      	str	r3, [r4, #0]
 80233de:	2301      	movs	r3, #1
 80233e0:	e7dc      	b.n	802339c <_sungetc_r+0x34>

080233e2 <__ssrefill_r>:
 80233e2:	b510      	push	{r4, lr}
 80233e4:	460c      	mov	r4, r1
 80233e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80233e8:	b169      	cbz	r1, 8023406 <__ssrefill_r+0x24>
 80233ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80233ee:	4299      	cmp	r1, r3
 80233f0:	d001      	beq.n	80233f6 <__ssrefill_r+0x14>
 80233f2:	f7fd fc41 	bl	8020c78 <_free_r>
 80233f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80233f8:	6063      	str	r3, [r4, #4]
 80233fa:	2000      	movs	r0, #0
 80233fc:	6360      	str	r0, [r4, #52]	; 0x34
 80233fe:	b113      	cbz	r3, 8023406 <__ssrefill_r+0x24>
 8023400:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023402:	6023      	str	r3, [r4, #0]
 8023404:	bd10      	pop	{r4, pc}
 8023406:	6923      	ldr	r3, [r4, #16]
 8023408:	6023      	str	r3, [r4, #0]
 802340a:	2300      	movs	r3, #0
 802340c:	6063      	str	r3, [r4, #4]
 802340e:	89a3      	ldrh	r3, [r4, #12]
 8023410:	f043 0320 	orr.w	r3, r3, #32
 8023414:	81a3      	strh	r3, [r4, #12]
 8023416:	f04f 30ff 	mov.w	r0, #4294967295
 802341a:	e7f3      	b.n	8023404 <__ssrefill_r+0x22>

0802341c <__ssvfiscanf_r>:
 802341c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023420:	460c      	mov	r4, r1
 8023422:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8023426:	2100      	movs	r1, #0
 8023428:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 802342c:	49b2      	ldr	r1, [pc, #712]	; (80236f8 <__ssvfiscanf_r+0x2dc>)
 802342e:	91a0      	str	r1, [sp, #640]	; 0x280
 8023430:	f10d 0804 	add.w	r8, sp, #4
 8023434:	49b1      	ldr	r1, [pc, #708]	; (80236fc <__ssvfiscanf_r+0x2e0>)
 8023436:	4fb2      	ldr	r7, [pc, #712]	; (8023700 <__ssvfiscanf_r+0x2e4>)
 8023438:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8023704 <__ssvfiscanf_r+0x2e8>
 802343c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8023440:	4606      	mov	r6, r0
 8023442:	91a1      	str	r1, [sp, #644]	; 0x284
 8023444:	9300      	str	r3, [sp, #0]
 8023446:	f892 a000 	ldrb.w	sl, [r2]
 802344a:	f1ba 0f00 	cmp.w	sl, #0
 802344e:	f000 8151 	beq.w	80236f4 <__ssvfiscanf_r+0x2d8>
 8023452:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8023456:	f013 0308 	ands.w	r3, r3, #8
 802345a:	f102 0501 	add.w	r5, r2, #1
 802345e:	d019      	beq.n	8023494 <__ssvfiscanf_r+0x78>
 8023460:	6863      	ldr	r3, [r4, #4]
 8023462:	2b00      	cmp	r3, #0
 8023464:	dd0f      	ble.n	8023486 <__ssvfiscanf_r+0x6a>
 8023466:	6823      	ldr	r3, [r4, #0]
 8023468:	781a      	ldrb	r2, [r3, #0]
 802346a:	5cba      	ldrb	r2, [r7, r2]
 802346c:	0712      	lsls	r2, r2, #28
 802346e:	d401      	bmi.n	8023474 <__ssvfiscanf_r+0x58>
 8023470:	462a      	mov	r2, r5
 8023472:	e7e8      	b.n	8023446 <__ssvfiscanf_r+0x2a>
 8023474:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023476:	3201      	adds	r2, #1
 8023478:	9245      	str	r2, [sp, #276]	; 0x114
 802347a:	6862      	ldr	r2, [r4, #4]
 802347c:	3301      	adds	r3, #1
 802347e:	3a01      	subs	r2, #1
 8023480:	6062      	str	r2, [r4, #4]
 8023482:	6023      	str	r3, [r4, #0]
 8023484:	e7ec      	b.n	8023460 <__ssvfiscanf_r+0x44>
 8023486:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023488:	4621      	mov	r1, r4
 802348a:	4630      	mov	r0, r6
 802348c:	4798      	blx	r3
 802348e:	2800      	cmp	r0, #0
 8023490:	d0e9      	beq.n	8023466 <__ssvfiscanf_r+0x4a>
 8023492:	e7ed      	b.n	8023470 <__ssvfiscanf_r+0x54>
 8023494:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8023498:	f040 8083 	bne.w	80235a2 <__ssvfiscanf_r+0x186>
 802349c:	9341      	str	r3, [sp, #260]	; 0x104
 802349e:	9343      	str	r3, [sp, #268]	; 0x10c
 80234a0:	7853      	ldrb	r3, [r2, #1]
 80234a2:	2b2a      	cmp	r3, #42	; 0x2a
 80234a4:	bf02      	ittt	eq
 80234a6:	2310      	moveq	r3, #16
 80234a8:	1c95      	addeq	r5, r2, #2
 80234aa:	9341      	streq	r3, [sp, #260]	; 0x104
 80234ac:	220a      	movs	r2, #10
 80234ae:	46ab      	mov	fp, r5
 80234b0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80234b4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80234b8:	2b09      	cmp	r3, #9
 80234ba:	d91d      	bls.n	80234f8 <__ssvfiscanf_r+0xdc>
 80234bc:	4891      	ldr	r0, [pc, #580]	; (8023704 <__ssvfiscanf_r+0x2e8>)
 80234be:	2203      	movs	r2, #3
 80234c0:	f7dc fece 	bl	8000260 <memchr>
 80234c4:	b140      	cbz	r0, 80234d8 <__ssvfiscanf_r+0xbc>
 80234c6:	2301      	movs	r3, #1
 80234c8:	eba0 0009 	sub.w	r0, r0, r9
 80234cc:	fa03 f000 	lsl.w	r0, r3, r0
 80234d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80234d2:	4318      	orrs	r0, r3
 80234d4:	9041      	str	r0, [sp, #260]	; 0x104
 80234d6:	465d      	mov	r5, fp
 80234d8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80234dc:	2b78      	cmp	r3, #120	; 0x78
 80234de:	d806      	bhi.n	80234ee <__ssvfiscanf_r+0xd2>
 80234e0:	2b57      	cmp	r3, #87	; 0x57
 80234e2:	d810      	bhi.n	8023506 <__ssvfiscanf_r+0xea>
 80234e4:	2b25      	cmp	r3, #37	; 0x25
 80234e6:	d05c      	beq.n	80235a2 <__ssvfiscanf_r+0x186>
 80234e8:	d856      	bhi.n	8023598 <__ssvfiscanf_r+0x17c>
 80234ea:	2b00      	cmp	r3, #0
 80234ec:	d074      	beq.n	80235d8 <__ssvfiscanf_r+0x1bc>
 80234ee:	2303      	movs	r3, #3
 80234f0:	9347      	str	r3, [sp, #284]	; 0x11c
 80234f2:	230a      	movs	r3, #10
 80234f4:	9342      	str	r3, [sp, #264]	; 0x108
 80234f6:	e081      	b.n	80235fc <__ssvfiscanf_r+0x1e0>
 80234f8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80234fa:	fb02 1303 	mla	r3, r2, r3, r1
 80234fe:	3b30      	subs	r3, #48	; 0x30
 8023500:	9343      	str	r3, [sp, #268]	; 0x10c
 8023502:	465d      	mov	r5, fp
 8023504:	e7d3      	b.n	80234ae <__ssvfiscanf_r+0x92>
 8023506:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802350a:	2a20      	cmp	r2, #32
 802350c:	d8ef      	bhi.n	80234ee <__ssvfiscanf_r+0xd2>
 802350e:	a101      	add	r1, pc, #4	; (adr r1, 8023514 <__ssvfiscanf_r+0xf8>)
 8023510:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8023514:	080235e7 	.word	0x080235e7
 8023518:	080234ef 	.word	0x080234ef
 802351c:	080234ef 	.word	0x080234ef
 8023520:	08023645 	.word	0x08023645
 8023524:	080234ef 	.word	0x080234ef
 8023528:	080234ef 	.word	0x080234ef
 802352c:	080234ef 	.word	0x080234ef
 8023530:	080234ef 	.word	0x080234ef
 8023534:	080234ef 	.word	0x080234ef
 8023538:	080234ef 	.word	0x080234ef
 802353c:	080234ef 	.word	0x080234ef
 8023540:	0802365b 	.word	0x0802365b
 8023544:	08023631 	.word	0x08023631
 8023548:	0802359f 	.word	0x0802359f
 802354c:	0802359f 	.word	0x0802359f
 8023550:	0802359f 	.word	0x0802359f
 8023554:	080234ef 	.word	0x080234ef
 8023558:	08023635 	.word	0x08023635
 802355c:	080234ef 	.word	0x080234ef
 8023560:	080234ef 	.word	0x080234ef
 8023564:	080234ef 	.word	0x080234ef
 8023568:	080234ef 	.word	0x080234ef
 802356c:	0802366b 	.word	0x0802366b
 8023570:	0802363d 	.word	0x0802363d
 8023574:	080235df 	.word	0x080235df
 8023578:	080234ef 	.word	0x080234ef
 802357c:	080234ef 	.word	0x080234ef
 8023580:	08023667 	.word	0x08023667
 8023584:	080234ef 	.word	0x080234ef
 8023588:	08023631 	.word	0x08023631
 802358c:	080234ef 	.word	0x080234ef
 8023590:	080234ef 	.word	0x080234ef
 8023594:	080235e7 	.word	0x080235e7
 8023598:	3b45      	subs	r3, #69	; 0x45
 802359a:	2b02      	cmp	r3, #2
 802359c:	d8a7      	bhi.n	80234ee <__ssvfiscanf_r+0xd2>
 802359e:	2305      	movs	r3, #5
 80235a0:	e02b      	b.n	80235fa <__ssvfiscanf_r+0x1de>
 80235a2:	6863      	ldr	r3, [r4, #4]
 80235a4:	2b00      	cmp	r3, #0
 80235a6:	dd0d      	ble.n	80235c4 <__ssvfiscanf_r+0x1a8>
 80235a8:	6823      	ldr	r3, [r4, #0]
 80235aa:	781a      	ldrb	r2, [r3, #0]
 80235ac:	4552      	cmp	r2, sl
 80235ae:	f040 80a1 	bne.w	80236f4 <__ssvfiscanf_r+0x2d8>
 80235b2:	3301      	adds	r3, #1
 80235b4:	6862      	ldr	r2, [r4, #4]
 80235b6:	6023      	str	r3, [r4, #0]
 80235b8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80235ba:	3a01      	subs	r2, #1
 80235bc:	3301      	adds	r3, #1
 80235be:	6062      	str	r2, [r4, #4]
 80235c0:	9345      	str	r3, [sp, #276]	; 0x114
 80235c2:	e755      	b.n	8023470 <__ssvfiscanf_r+0x54>
 80235c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80235c6:	4621      	mov	r1, r4
 80235c8:	4630      	mov	r0, r6
 80235ca:	4798      	blx	r3
 80235cc:	2800      	cmp	r0, #0
 80235ce:	d0eb      	beq.n	80235a8 <__ssvfiscanf_r+0x18c>
 80235d0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80235d2:	2800      	cmp	r0, #0
 80235d4:	f040 8084 	bne.w	80236e0 <__ssvfiscanf_r+0x2c4>
 80235d8:	f04f 30ff 	mov.w	r0, #4294967295
 80235dc:	e086      	b.n	80236ec <__ssvfiscanf_r+0x2d0>
 80235de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80235e0:	f042 0220 	orr.w	r2, r2, #32
 80235e4:	9241      	str	r2, [sp, #260]	; 0x104
 80235e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80235e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80235ec:	9241      	str	r2, [sp, #260]	; 0x104
 80235ee:	2210      	movs	r2, #16
 80235f0:	2b6f      	cmp	r3, #111	; 0x6f
 80235f2:	9242      	str	r2, [sp, #264]	; 0x108
 80235f4:	bf34      	ite	cc
 80235f6:	2303      	movcc	r3, #3
 80235f8:	2304      	movcs	r3, #4
 80235fa:	9347      	str	r3, [sp, #284]	; 0x11c
 80235fc:	6863      	ldr	r3, [r4, #4]
 80235fe:	2b00      	cmp	r3, #0
 8023600:	dd41      	ble.n	8023686 <__ssvfiscanf_r+0x26a>
 8023602:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023604:	0659      	lsls	r1, r3, #25
 8023606:	d404      	bmi.n	8023612 <__ssvfiscanf_r+0x1f6>
 8023608:	6823      	ldr	r3, [r4, #0]
 802360a:	781a      	ldrb	r2, [r3, #0]
 802360c:	5cba      	ldrb	r2, [r7, r2]
 802360e:	0712      	lsls	r2, r2, #28
 8023610:	d440      	bmi.n	8023694 <__ssvfiscanf_r+0x278>
 8023612:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8023614:	2b02      	cmp	r3, #2
 8023616:	dc4f      	bgt.n	80236b8 <__ssvfiscanf_r+0x29c>
 8023618:	466b      	mov	r3, sp
 802361a:	4622      	mov	r2, r4
 802361c:	a941      	add	r1, sp, #260	; 0x104
 802361e:	4630      	mov	r0, r6
 8023620:	f000 f874 	bl	802370c <_scanf_chars>
 8023624:	2801      	cmp	r0, #1
 8023626:	d065      	beq.n	80236f4 <__ssvfiscanf_r+0x2d8>
 8023628:	2802      	cmp	r0, #2
 802362a:	f47f af21 	bne.w	8023470 <__ssvfiscanf_r+0x54>
 802362e:	e7cf      	b.n	80235d0 <__ssvfiscanf_r+0x1b4>
 8023630:	220a      	movs	r2, #10
 8023632:	e7dd      	b.n	80235f0 <__ssvfiscanf_r+0x1d4>
 8023634:	2300      	movs	r3, #0
 8023636:	9342      	str	r3, [sp, #264]	; 0x108
 8023638:	2303      	movs	r3, #3
 802363a:	e7de      	b.n	80235fa <__ssvfiscanf_r+0x1de>
 802363c:	2308      	movs	r3, #8
 802363e:	9342      	str	r3, [sp, #264]	; 0x108
 8023640:	2304      	movs	r3, #4
 8023642:	e7da      	b.n	80235fa <__ssvfiscanf_r+0x1de>
 8023644:	4629      	mov	r1, r5
 8023646:	4640      	mov	r0, r8
 8023648:	f000 f9ac 	bl	80239a4 <__sccl>
 802364c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802364e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023652:	9341      	str	r3, [sp, #260]	; 0x104
 8023654:	4605      	mov	r5, r0
 8023656:	2301      	movs	r3, #1
 8023658:	e7cf      	b.n	80235fa <__ssvfiscanf_r+0x1de>
 802365a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802365c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023660:	9341      	str	r3, [sp, #260]	; 0x104
 8023662:	2300      	movs	r3, #0
 8023664:	e7c9      	b.n	80235fa <__ssvfiscanf_r+0x1de>
 8023666:	2302      	movs	r3, #2
 8023668:	e7c7      	b.n	80235fa <__ssvfiscanf_r+0x1de>
 802366a:	9841      	ldr	r0, [sp, #260]	; 0x104
 802366c:	06c3      	lsls	r3, r0, #27
 802366e:	f53f aeff 	bmi.w	8023470 <__ssvfiscanf_r+0x54>
 8023672:	9b00      	ldr	r3, [sp, #0]
 8023674:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023676:	1d19      	adds	r1, r3, #4
 8023678:	9100      	str	r1, [sp, #0]
 802367a:	681b      	ldr	r3, [r3, #0]
 802367c:	07c0      	lsls	r0, r0, #31
 802367e:	bf4c      	ite	mi
 8023680:	801a      	strhmi	r2, [r3, #0]
 8023682:	601a      	strpl	r2, [r3, #0]
 8023684:	e6f4      	b.n	8023470 <__ssvfiscanf_r+0x54>
 8023686:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023688:	4621      	mov	r1, r4
 802368a:	4630      	mov	r0, r6
 802368c:	4798      	blx	r3
 802368e:	2800      	cmp	r0, #0
 8023690:	d0b7      	beq.n	8023602 <__ssvfiscanf_r+0x1e6>
 8023692:	e79d      	b.n	80235d0 <__ssvfiscanf_r+0x1b4>
 8023694:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023696:	3201      	adds	r2, #1
 8023698:	9245      	str	r2, [sp, #276]	; 0x114
 802369a:	6862      	ldr	r2, [r4, #4]
 802369c:	3a01      	subs	r2, #1
 802369e:	2a00      	cmp	r2, #0
 80236a0:	6062      	str	r2, [r4, #4]
 80236a2:	dd02      	ble.n	80236aa <__ssvfiscanf_r+0x28e>
 80236a4:	3301      	adds	r3, #1
 80236a6:	6023      	str	r3, [r4, #0]
 80236a8:	e7ae      	b.n	8023608 <__ssvfiscanf_r+0x1ec>
 80236aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80236ac:	4621      	mov	r1, r4
 80236ae:	4630      	mov	r0, r6
 80236b0:	4798      	blx	r3
 80236b2:	2800      	cmp	r0, #0
 80236b4:	d0a8      	beq.n	8023608 <__ssvfiscanf_r+0x1ec>
 80236b6:	e78b      	b.n	80235d0 <__ssvfiscanf_r+0x1b4>
 80236b8:	2b04      	cmp	r3, #4
 80236ba:	dc06      	bgt.n	80236ca <__ssvfiscanf_r+0x2ae>
 80236bc:	466b      	mov	r3, sp
 80236be:	4622      	mov	r2, r4
 80236c0:	a941      	add	r1, sp, #260	; 0x104
 80236c2:	4630      	mov	r0, r6
 80236c4:	f000 f87a 	bl	80237bc <_scanf_i>
 80236c8:	e7ac      	b.n	8023624 <__ssvfiscanf_r+0x208>
 80236ca:	4b0f      	ldr	r3, [pc, #60]	; (8023708 <__ssvfiscanf_r+0x2ec>)
 80236cc:	2b00      	cmp	r3, #0
 80236ce:	f43f aecf 	beq.w	8023470 <__ssvfiscanf_r+0x54>
 80236d2:	466b      	mov	r3, sp
 80236d4:	4622      	mov	r2, r4
 80236d6:	a941      	add	r1, sp, #260	; 0x104
 80236d8:	4630      	mov	r0, r6
 80236da:	f3af 8000 	nop.w
 80236de:	e7a1      	b.n	8023624 <__ssvfiscanf_r+0x208>
 80236e0:	89a3      	ldrh	r3, [r4, #12]
 80236e2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80236e6:	bf18      	it	ne
 80236e8:	f04f 30ff 	movne.w	r0, #4294967295
 80236ec:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80236f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80236f4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80236f6:	e7f9      	b.n	80236ec <__ssvfiscanf_r+0x2d0>
 80236f8:	08023369 	.word	0x08023369
 80236fc:	080233e3 	.word	0x080233e3
 8023700:	0802a131 	.word	0x0802a131
 8023704:	0802a241 	.word	0x0802a241
 8023708:	00000000 	.word	0x00000000

0802370c <_scanf_chars>:
 802370c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023710:	4615      	mov	r5, r2
 8023712:	688a      	ldr	r2, [r1, #8]
 8023714:	4680      	mov	r8, r0
 8023716:	460c      	mov	r4, r1
 8023718:	b932      	cbnz	r2, 8023728 <_scanf_chars+0x1c>
 802371a:	698a      	ldr	r2, [r1, #24]
 802371c:	2a00      	cmp	r2, #0
 802371e:	bf0c      	ite	eq
 8023720:	2201      	moveq	r2, #1
 8023722:	f04f 32ff 	movne.w	r2, #4294967295
 8023726:	608a      	str	r2, [r1, #8]
 8023728:	6822      	ldr	r2, [r4, #0]
 802372a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80237b8 <_scanf_chars+0xac>
 802372e:	06d1      	lsls	r1, r2, #27
 8023730:	bf5f      	itttt	pl
 8023732:	681a      	ldrpl	r2, [r3, #0]
 8023734:	1d11      	addpl	r1, r2, #4
 8023736:	6019      	strpl	r1, [r3, #0]
 8023738:	6816      	ldrpl	r6, [r2, #0]
 802373a:	2700      	movs	r7, #0
 802373c:	69a0      	ldr	r0, [r4, #24]
 802373e:	b188      	cbz	r0, 8023764 <_scanf_chars+0x58>
 8023740:	2801      	cmp	r0, #1
 8023742:	d107      	bne.n	8023754 <_scanf_chars+0x48>
 8023744:	682b      	ldr	r3, [r5, #0]
 8023746:	781a      	ldrb	r2, [r3, #0]
 8023748:	6963      	ldr	r3, [r4, #20]
 802374a:	5c9b      	ldrb	r3, [r3, r2]
 802374c:	b953      	cbnz	r3, 8023764 <_scanf_chars+0x58>
 802374e:	bb27      	cbnz	r7, 802379a <_scanf_chars+0x8e>
 8023750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023754:	2802      	cmp	r0, #2
 8023756:	d120      	bne.n	802379a <_scanf_chars+0x8e>
 8023758:	682b      	ldr	r3, [r5, #0]
 802375a:	781b      	ldrb	r3, [r3, #0]
 802375c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8023760:	071b      	lsls	r3, r3, #28
 8023762:	d41a      	bmi.n	802379a <_scanf_chars+0x8e>
 8023764:	6823      	ldr	r3, [r4, #0]
 8023766:	06da      	lsls	r2, r3, #27
 8023768:	bf5e      	ittt	pl
 802376a:	682b      	ldrpl	r3, [r5, #0]
 802376c:	781b      	ldrbpl	r3, [r3, #0]
 802376e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8023772:	682a      	ldr	r2, [r5, #0]
 8023774:	686b      	ldr	r3, [r5, #4]
 8023776:	3201      	adds	r2, #1
 8023778:	602a      	str	r2, [r5, #0]
 802377a:	68a2      	ldr	r2, [r4, #8]
 802377c:	3b01      	subs	r3, #1
 802377e:	3a01      	subs	r2, #1
 8023780:	606b      	str	r3, [r5, #4]
 8023782:	3701      	adds	r7, #1
 8023784:	60a2      	str	r2, [r4, #8]
 8023786:	b142      	cbz	r2, 802379a <_scanf_chars+0x8e>
 8023788:	2b00      	cmp	r3, #0
 802378a:	dcd7      	bgt.n	802373c <_scanf_chars+0x30>
 802378c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8023790:	4629      	mov	r1, r5
 8023792:	4640      	mov	r0, r8
 8023794:	4798      	blx	r3
 8023796:	2800      	cmp	r0, #0
 8023798:	d0d0      	beq.n	802373c <_scanf_chars+0x30>
 802379a:	6823      	ldr	r3, [r4, #0]
 802379c:	f013 0310 	ands.w	r3, r3, #16
 80237a0:	d105      	bne.n	80237ae <_scanf_chars+0xa2>
 80237a2:	68e2      	ldr	r2, [r4, #12]
 80237a4:	3201      	adds	r2, #1
 80237a6:	60e2      	str	r2, [r4, #12]
 80237a8:	69a2      	ldr	r2, [r4, #24]
 80237aa:	b102      	cbz	r2, 80237ae <_scanf_chars+0xa2>
 80237ac:	7033      	strb	r3, [r6, #0]
 80237ae:	6923      	ldr	r3, [r4, #16]
 80237b0:	441f      	add	r7, r3
 80237b2:	6127      	str	r7, [r4, #16]
 80237b4:	2000      	movs	r0, #0
 80237b6:	e7cb      	b.n	8023750 <_scanf_chars+0x44>
 80237b8:	0802a131 	.word	0x0802a131

080237bc <_scanf_i>:
 80237bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237c0:	4698      	mov	r8, r3
 80237c2:	4b74      	ldr	r3, [pc, #464]	; (8023994 <_scanf_i+0x1d8>)
 80237c4:	460c      	mov	r4, r1
 80237c6:	4682      	mov	sl, r0
 80237c8:	4616      	mov	r6, r2
 80237ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80237ce:	b087      	sub	sp, #28
 80237d0:	ab03      	add	r3, sp, #12
 80237d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80237d6:	4b70      	ldr	r3, [pc, #448]	; (8023998 <_scanf_i+0x1dc>)
 80237d8:	69a1      	ldr	r1, [r4, #24]
 80237da:	4a70      	ldr	r2, [pc, #448]	; (802399c <_scanf_i+0x1e0>)
 80237dc:	2903      	cmp	r1, #3
 80237de:	bf18      	it	ne
 80237e0:	461a      	movne	r2, r3
 80237e2:	68a3      	ldr	r3, [r4, #8]
 80237e4:	9201      	str	r2, [sp, #4]
 80237e6:	1e5a      	subs	r2, r3, #1
 80237e8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80237ec:	bf88      	it	hi
 80237ee:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80237f2:	4627      	mov	r7, r4
 80237f4:	bf82      	ittt	hi
 80237f6:	eb03 0905 	addhi.w	r9, r3, r5
 80237fa:	f240 135d 	movwhi	r3, #349	; 0x15d
 80237fe:	60a3      	strhi	r3, [r4, #8]
 8023800:	f857 3b1c 	ldr.w	r3, [r7], #28
 8023804:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8023808:	bf98      	it	ls
 802380a:	f04f 0900 	movls.w	r9, #0
 802380e:	6023      	str	r3, [r4, #0]
 8023810:	463d      	mov	r5, r7
 8023812:	f04f 0b00 	mov.w	fp, #0
 8023816:	6831      	ldr	r1, [r6, #0]
 8023818:	ab03      	add	r3, sp, #12
 802381a:	7809      	ldrb	r1, [r1, #0]
 802381c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8023820:	2202      	movs	r2, #2
 8023822:	f7dc fd1d 	bl	8000260 <memchr>
 8023826:	b328      	cbz	r0, 8023874 <_scanf_i+0xb8>
 8023828:	f1bb 0f01 	cmp.w	fp, #1
 802382c:	d159      	bne.n	80238e2 <_scanf_i+0x126>
 802382e:	6862      	ldr	r2, [r4, #4]
 8023830:	b92a      	cbnz	r2, 802383e <_scanf_i+0x82>
 8023832:	6822      	ldr	r2, [r4, #0]
 8023834:	2308      	movs	r3, #8
 8023836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802383a:	6063      	str	r3, [r4, #4]
 802383c:	6022      	str	r2, [r4, #0]
 802383e:	6822      	ldr	r2, [r4, #0]
 8023840:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8023844:	6022      	str	r2, [r4, #0]
 8023846:	68a2      	ldr	r2, [r4, #8]
 8023848:	1e51      	subs	r1, r2, #1
 802384a:	60a1      	str	r1, [r4, #8]
 802384c:	b192      	cbz	r2, 8023874 <_scanf_i+0xb8>
 802384e:	6832      	ldr	r2, [r6, #0]
 8023850:	1c51      	adds	r1, r2, #1
 8023852:	6031      	str	r1, [r6, #0]
 8023854:	7812      	ldrb	r2, [r2, #0]
 8023856:	f805 2b01 	strb.w	r2, [r5], #1
 802385a:	6872      	ldr	r2, [r6, #4]
 802385c:	3a01      	subs	r2, #1
 802385e:	2a00      	cmp	r2, #0
 8023860:	6072      	str	r2, [r6, #4]
 8023862:	dc07      	bgt.n	8023874 <_scanf_i+0xb8>
 8023864:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8023868:	4631      	mov	r1, r6
 802386a:	4650      	mov	r0, sl
 802386c:	4790      	blx	r2
 802386e:	2800      	cmp	r0, #0
 8023870:	f040 8085 	bne.w	802397e <_scanf_i+0x1c2>
 8023874:	f10b 0b01 	add.w	fp, fp, #1
 8023878:	f1bb 0f03 	cmp.w	fp, #3
 802387c:	d1cb      	bne.n	8023816 <_scanf_i+0x5a>
 802387e:	6863      	ldr	r3, [r4, #4]
 8023880:	b90b      	cbnz	r3, 8023886 <_scanf_i+0xca>
 8023882:	230a      	movs	r3, #10
 8023884:	6063      	str	r3, [r4, #4]
 8023886:	6863      	ldr	r3, [r4, #4]
 8023888:	4945      	ldr	r1, [pc, #276]	; (80239a0 <_scanf_i+0x1e4>)
 802388a:	6960      	ldr	r0, [r4, #20]
 802388c:	1ac9      	subs	r1, r1, r3
 802388e:	f000 f889 	bl	80239a4 <__sccl>
 8023892:	f04f 0b00 	mov.w	fp, #0
 8023896:	68a3      	ldr	r3, [r4, #8]
 8023898:	6822      	ldr	r2, [r4, #0]
 802389a:	2b00      	cmp	r3, #0
 802389c:	d03d      	beq.n	802391a <_scanf_i+0x15e>
 802389e:	6831      	ldr	r1, [r6, #0]
 80238a0:	6960      	ldr	r0, [r4, #20]
 80238a2:	f891 c000 	ldrb.w	ip, [r1]
 80238a6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80238aa:	2800      	cmp	r0, #0
 80238ac:	d035      	beq.n	802391a <_scanf_i+0x15e>
 80238ae:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80238b2:	d124      	bne.n	80238fe <_scanf_i+0x142>
 80238b4:	0510      	lsls	r0, r2, #20
 80238b6:	d522      	bpl.n	80238fe <_scanf_i+0x142>
 80238b8:	f10b 0b01 	add.w	fp, fp, #1
 80238bc:	f1b9 0f00 	cmp.w	r9, #0
 80238c0:	d003      	beq.n	80238ca <_scanf_i+0x10e>
 80238c2:	3301      	adds	r3, #1
 80238c4:	f109 39ff 	add.w	r9, r9, #4294967295
 80238c8:	60a3      	str	r3, [r4, #8]
 80238ca:	6873      	ldr	r3, [r6, #4]
 80238cc:	3b01      	subs	r3, #1
 80238ce:	2b00      	cmp	r3, #0
 80238d0:	6073      	str	r3, [r6, #4]
 80238d2:	dd1b      	ble.n	802390c <_scanf_i+0x150>
 80238d4:	6833      	ldr	r3, [r6, #0]
 80238d6:	3301      	adds	r3, #1
 80238d8:	6033      	str	r3, [r6, #0]
 80238da:	68a3      	ldr	r3, [r4, #8]
 80238dc:	3b01      	subs	r3, #1
 80238de:	60a3      	str	r3, [r4, #8]
 80238e0:	e7d9      	b.n	8023896 <_scanf_i+0xda>
 80238e2:	f1bb 0f02 	cmp.w	fp, #2
 80238e6:	d1ae      	bne.n	8023846 <_scanf_i+0x8a>
 80238e8:	6822      	ldr	r2, [r4, #0]
 80238ea:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80238ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80238f2:	d1bf      	bne.n	8023874 <_scanf_i+0xb8>
 80238f4:	2310      	movs	r3, #16
 80238f6:	6063      	str	r3, [r4, #4]
 80238f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80238fc:	e7a2      	b.n	8023844 <_scanf_i+0x88>
 80238fe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8023902:	6022      	str	r2, [r4, #0]
 8023904:	780b      	ldrb	r3, [r1, #0]
 8023906:	f805 3b01 	strb.w	r3, [r5], #1
 802390a:	e7de      	b.n	80238ca <_scanf_i+0x10e>
 802390c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8023910:	4631      	mov	r1, r6
 8023912:	4650      	mov	r0, sl
 8023914:	4798      	blx	r3
 8023916:	2800      	cmp	r0, #0
 8023918:	d0df      	beq.n	80238da <_scanf_i+0x11e>
 802391a:	6823      	ldr	r3, [r4, #0]
 802391c:	05d9      	lsls	r1, r3, #23
 802391e:	d50d      	bpl.n	802393c <_scanf_i+0x180>
 8023920:	42bd      	cmp	r5, r7
 8023922:	d909      	bls.n	8023938 <_scanf_i+0x17c>
 8023924:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8023928:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802392c:	4632      	mov	r2, r6
 802392e:	4650      	mov	r0, sl
 8023930:	4798      	blx	r3
 8023932:	f105 39ff 	add.w	r9, r5, #4294967295
 8023936:	464d      	mov	r5, r9
 8023938:	42bd      	cmp	r5, r7
 802393a:	d028      	beq.n	802398e <_scanf_i+0x1d2>
 802393c:	6822      	ldr	r2, [r4, #0]
 802393e:	f012 0210 	ands.w	r2, r2, #16
 8023942:	d113      	bne.n	802396c <_scanf_i+0x1b0>
 8023944:	702a      	strb	r2, [r5, #0]
 8023946:	6863      	ldr	r3, [r4, #4]
 8023948:	9e01      	ldr	r6, [sp, #4]
 802394a:	4639      	mov	r1, r7
 802394c:	4650      	mov	r0, sl
 802394e:	47b0      	blx	r6
 8023950:	f8d8 3000 	ldr.w	r3, [r8]
 8023954:	6821      	ldr	r1, [r4, #0]
 8023956:	1d1a      	adds	r2, r3, #4
 8023958:	f8c8 2000 	str.w	r2, [r8]
 802395c:	f011 0f20 	tst.w	r1, #32
 8023960:	681b      	ldr	r3, [r3, #0]
 8023962:	d00f      	beq.n	8023984 <_scanf_i+0x1c8>
 8023964:	6018      	str	r0, [r3, #0]
 8023966:	68e3      	ldr	r3, [r4, #12]
 8023968:	3301      	adds	r3, #1
 802396a:	60e3      	str	r3, [r4, #12]
 802396c:	1bed      	subs	r5, r5, r7
 802396e:	44ab      	add	fp, r5
 8023970:	6925      	ldr	r5, [r4, #16]
 8023972:	445d      	add	r5, fp
 8023974:	6125      	str	r5, [r4, #16]
 8023976:	2000      	movs	r0, #0
 8023978:	b007      	add	sp, #28
 802397a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802397e:	f04f 0b00 	mov.w	fp, #0
 8023982:	e7ca      	b.n	802391a <_scanf_i+0x15e>
 8023984:	07ca      	lsls	r2, r1, #31
 8023986:	bf4c      	ite	mi
 8023988:	8018      	strhmi	r0, [r3, #0]
 802398a:	6018      	strpl	r0, [r3, #0]
 802398c:	e7eb      	b.n	8023966 <_scanf_i+0x1aa>
 802398e:	2001      	movs	r0, #1
 8023990:	e7f2      	b.n	8023978 <_scanf_i+0x1bc>
 8023992:	bf00      	nop
 8023994:	0802700c 	.word	0x0802700c
 8023998:	08021d8d 	.word	0x08021d8d
 802399c:	08021c7d 	.word	0x08021c7d
 80239a0:	0802a287 	.word	0x0802a287

080239a4 <__sccl>:
 80239a4:	b570      	push	{r4, r5, r6, lr}
 80239a6:	780b      	ldrb	r3, [r1, #0]
 80239a8:	4604      	mov	r4, r0
 80239aa:	2b5e      	cmp	r3, #94	; 0x5e
 80239ac:	bf0b      	itete	eq
 80239ae:	784b      	ldrbeq	r3, [r1, #1]
 80239b0:	1c48      	addne	r0, r1, #1
 80239b2:	1c88      	addeq	r0, r1, #2
 80239b4:	2200      	movne	r2, #0
 80239b6:	bf08      	it	eq
 80239b8:	2201      	moveq	r2, #1
 80239ba:	1e61      	subs	r1, r4, #1
 80239bc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80239c0:	f801 2f01 	strb.w	r2, [r1, #1]!
 80239c4:	42a9      	cmp	r1, r5
 80239c6:	d1fb      	bne.n	80239c0 <__sccl+0x1c>
 80239c8:	b90b      	cbnz	r3, 80239ce <__sccl+0x2a>
 80239ca:	3801      	subs	r0, #1
 80239cc:	bd70      	pop	{r4, r5, r6, pc}
 80239ce:	f082 0101 	eor.w	r1, r2, #1
 80239d2:	54e1      	strb	r1, [r4, r3]
 80239d4:	1c42      	adds	r2, r0, #1
 80239d6:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80239da:	2d2d      	cmp	r5, #45	; 0x2d
 80239dc:	f102 36ff 	add.w	r6, r2, #4294967295
 80239e0:	4610      	mov	r0, r2
 80239e2:	d006      	beq.n	80239f2 <__sccl+0x4e>
 80239e4:	2d5d      	cmp	r5, #93	; 0x5d
 80239e6:	d0f1      	beq.n	80239cc <__sccl+0x28>
 80239e8:	b90d      	cbnz	r5, 80239ee <__sccl+0x4a>
 80239ea:	4630      	mov	r0, r6
 80239ec:	e7ee      	b.n	80239cc <__sccl+0x28>
 80239ee:	462b      	mov	r3, r5
 80239f0:	e7ef      	b.n	80239d2 <__sccl+0x2e>
 80239f2:	7816      	ldrb	r6, [r2, #0]
 80239f4:	2e5d      	cmp	r6, #93	; 0x5d
 80239f6:	d0fa      	beq.n	80239ee <__sccl+0x4a>
 80239f8:	42b3      	cmp	r3, r6
 80239fa:	dcf8      	bgt.n	80239ee <__sccl+0x4a>
 80239fc:	4618      	mov	r0, r3
 80239fe:	3001      	adds	r0, #1
 8023a00:	4286      	cmp	r6, r0
 8023a02:	5421      	strb	r1, [r4, r0]
 8023a04:	dcfb      	bgt.n	80239fe <__sccl+0x5a>
 8023a06:	43d8      	mvns	r0, r3
 8023a08:	4430      	add	r0, r6
 8023a0a:	1c5d      	adds	r5, r3, #1
 8023a0c:	42b3      	cmp	r3, r6
 8023a0e:	bfa8      	it	ge
 8023a10:	2000      	movge	r0, #0
 8023a12:	182b      	adds	r3, r5, r0
 8023a14:	3202      	adds	r2, #2
 8023a16:	e7de      	b.n	80239d6 <__sccl+0x32>

08023a18 <__submore>:
 8023a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023a1c:	460c      	mov	r4, r1
 8023a1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8023a20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023a24:	4299      	cmp	r1, r3
 8023a26:	d11d      	bne.n	8023a64 <__submore+0x4c>
 8023a28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8023a2c:	f7fd f974 	bl	8020d18 <_malloc_r>
 8023a30:	b918      	cbnz	r0, 8023a3a <__submore+0x22>
 8023a32:	f04f 30ff 	mov.w	r0, #4294967295
 8023a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023a3e:	63a3      	str	r3, [r4, #56]	; 0x38
 8023a40:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8023a44:	6360      	str	r0, [r4, #52]	; 0x34
 8023a46:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8023a4a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8023a4e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8023a52:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8023a56:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8023a5a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8023a5e:	6020      	str	r0, [r4, #0]
 8023a60:	2000      	movs	r0, #0
 8023a62:	e7e8      	b.n	8023a36 <__submore+0x1e>
 8023a64:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8023a66:	0077      	lsls	r7, r6, #1
 8023a68:	463a      	mov	r2, r7
 8023a6a:	f7fe ff05 	bl	8022878 <_realloc_r>
 8023a6e:	4605      	mov	r5, r0
 8023a70:	2800      	cmp	r0, #0
 8023a72:	d0de      	beq.n	8023a32 <__submore+0x1a>
 8023a74:	eb00 0806 	add.w	r8, r0, r6
 8023a78:	4601      	mov	r1, r0
 8023a7a:	4632      	mov	r2, r6
 8023a7c:	4640      	mov	r0, r8
 8023a7e:	f7fd f8d5 	bl	8020c2c <memcpy>
 8023a82:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8023a86:	f8c4 8000 	str.w	r8, [r4]
 8023a8a:	e7e9      	b.n	8023a60 <__submore+0x48>

08023a8c <_init>:
 8023a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023a8e:	bf00      	nop
 8023a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023a92:	bc08      	pop	{r3}
 8023a94:	469e      	mov	lr, r3
 8023a96:	4770      	bx	lr

08023a98 <_fini>:
 8023a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023a9a:	bf00      	nop
 8023a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023a9e:	bc08      	pop	{r3}
 8023aa0:	469e      	mov	lr, r3
 8023aa2:	4770      	bx	lr
 8023aa4:	0000      	movs	r0, r0
	...

08023aa8 <__time_veneer>:
 8023aa8:	e51ff004 	ldr	pc, [pc, #-4]	; 8023aac <__time_veneer+0x4>
 8023aac:	200004a0 	.word	0x200004a0
