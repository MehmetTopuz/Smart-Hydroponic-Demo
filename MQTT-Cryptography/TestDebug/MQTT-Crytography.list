
MQTT-Crytography.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000244f8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006ebc  080246d8  080246d8  000346d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b594  0802b594  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  0802b594  0802b594  0003b594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b59c  0802b59c  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0802b59c  0802b59c  0003b59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000014  0802b5b0  0802b5b0  0003b5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  0802b5c4  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d1c  2000033c  0802b900  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001058  0802b900  00041058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006d57c  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c7a6  00000000  00000000  000ad8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004638  00000000  00000000  000ba090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000043f8  00000000  00000000  000be6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002de2d  00000000  00000000  000c2ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ea11  00000000  00000000  000f08ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115661  00000000  00000000  0011f2fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0023495f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000152a0  00000000  00000000  002349b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080246b4 	.word	0x080246b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	080246b4 	.word	0x080246b4

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f001 f889 	bl	8001c98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a47      	ldr	r2, [pc, #284]	; (8000cd0 <HAL_UART_MspInit+0x13c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b47      	ldr	r3, [pc, #284]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a46      	ldr	r2, [pc, #280]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b44      	ldr	r3, [pc, #272]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b41      	ldr	r3, [pc, #260]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a40      	ldr	r2, [pc, #256]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b3e      	ldr	r3, [pc, #248]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fde6 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e05d      	b.n	8000cc6 <HAL_UART_MspInit+0x132>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_UART_MspInit+0x144>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d158      	bne.n	8000cc6 <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a2e      	ldr	r2, [pc, #184]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	481f      	ldr	r0, [pc, #124]	; (8000cdc <HAL_UART_MspInit+0x148>)
 8000c60:	f000 fdb8 	bl	80017d4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c66:	4a1f      	ldr	r2, [pc, #124]	; (8000ce4 <HAL_UART_MspInit+0x150>)
 8000c68:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c6c:	2218      	movs	r2, #24
 8000c6e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c90:	2220      	movs	r2, #32
 8000c92:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c9a:	4811      	ldr	r0, [pc, #68]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c9c:	f000 fb20 	bl	80012e0 <HAL_DMA_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_UART_MspInit+0x116>
      Error_Handler();
 8000ca6:	f008 f983 	bl	8008fb0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a0c      	ldr	r2, [pc, #48]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000cae:	67da      	str	r2, [r3, #124]	; 0x7c
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2025      	movs	r0, #37	; 0x25
 8000cbc:	f000 fadb 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cc0:	2025      	movs	r0, #37	; 0x25
 8000cc2:	f000 faf2 	bl	80012aa <HAL_NVIC_EnableIRQ>
}
 8000cc6:	bf00      	nop
 8000cc8:	3730      	adds	r7, #48	; 0x30
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40008000 	.word	0x40008000
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40013800 	.word	0x40013800
 8000cdc:	48000800 	.word	0x48000800
 8000ce0:	20000848 	.word	0x20000848
 8000ce4:	40020008 	.word	0x40020008

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f9a6 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <DMA1_Channel1_IRQHandler+0x10>)
 8000d42:	f000 fc35 	bl	80015b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000848 	.word	0x20000848

08000d50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <USART1_IRQHandler+0x10>)
 8000d56:	f001 ff7f 	bl	8002c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200007b8 	.word	0x200007b8

08000d64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d6c:	f000 fecc 	bl	8001b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d80:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d013      	beq.n	8000db4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d90:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d94:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00b      	beq.n	8000db4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d9c:	e000      	b.n	8000da0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d9e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000da0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f9      	beq.n	8000d9e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000daa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
	return 1;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <_kill>:

int _kill(int pid, int sig)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ddc:	f01f ff6a 	bl	8020cb4 <__errno>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2216      	movs	r2, #22
 8000de4:	601a      	str	r2, [r3, #0]
	return -1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <_exit>:

void _exit (int status)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffe7 	bl	8000dd2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e04:	e7fe      	b.n	8000e04 <_exit+0x12>

08000e06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	e00a      	b.n	8000e2e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e18:	f3af 8000 	nop.w
 8000e1c:	4601      	mov	r1, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	60ba      	str	r2, [r7, #8]
 8000e24:	b2ca      	uxtb	r2, r1
 8000e26:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	dbf0      	blt.n	8000e18 <_read+0x12>
	}

return len;
 8000e36:	687b      	ldr	r3, [r7, #4]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	e009      	b.n	8000e66 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1c5a      	adds	r2, r3, #1
 8000e56:	60ba      	str	r2, [r7, #8]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff8a 	bl	8000d74 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	dbf1      	blt.n	8000e52 <_write+0x12>
	}
	return len;
 8000e6e:	687b      	ldr	r3, [r7, #4]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_close>:

int _close(int file)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea0:	605a      	str	r2, [r3, #4]
	return 0;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_isatty>:

int _isatty(int file)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	return 1;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b085      	sub	sp, #20
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
	return 0;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_open>:

int _open(char *path, int flags, ...)
{
 8000ee0:	b40e      	push	{r1, r2, r3}
 8000ee2:	b480      	push	{r7}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	b003      	add	sp, #12
 8000efa:	4770      	bx	lr

08000efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f04:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <_sbrk+0x5c>)
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <_sbrk+0x60>)
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <_sbrk+0x64>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <_sbrk+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d207      	bcs.n	8000f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f2c:	f01f fec2 	bl	8020cb4 <__errno>
 8000f30:	4603      	mov	r3, r0
 8000f32:	220c      	movs	r2, #12
 8000f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	e009      	b.n	8000f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <_sbrk+0x64>)
 8000f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20020000 	.word	0x20020000
 8000f5c:	00000400 	.word	0x00000400
 8000f60:	2000035c 	.word	0x2000035c
 8000f64:	20001058 	.word	0x20001058

08000f68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f92:	490e      	ldr	r1, [pc, #56]	; (8000fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <LoopForever+0xe>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa8:	4c0b      	ldr	r4, [pc, #44]	; (8000fd8 <LoopForever+0x16>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fb6:	f7ff ffd7 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fba:	f020 fa99 	bl	80214f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fbe:	f007 fe0b 	bl	8008bd8 <main>

08000fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc2:	e7fe      	b.n	8000fc2 <LoopForever>
  ldr   r0, =_estack
 8000fc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000fd0:	0802b5c4 	.word	0x0802b5c4
  ldr r2, =_sbss
 8000fd4:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000fd8:	20001058 	.word	0x20001058

08000fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC1_2_IRQHandler>

08000fde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f939 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 f80e 	bl	8001010 <HAL_InitTick>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	e001      	b.n	8001004 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001000:	f7ff fda4 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001004:	79fb      	ldrb	r3, [r7, #7]

}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HAL_InitTick+0x68>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d022      	beq.n	800106a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_InitTick+0x6c>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <HAL_InitTick+0x68>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001030:	fbb1 f3f3 	udiv	r3, r1, r3
 8001034:	fbb2 f3f3 	udiv	r3, r2, r3
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f944 	bl	80012c6 <HAL_SYSTICK_Config>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10f      	bne.n	8001064 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b0f      	cmp	r3, #15
 8001048:	d809      	bhi.n	800105e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104a:	2200      	movs	r2, #0
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	f04f 30ff 	mov.w	r0, #4294967295
 8001052:	f000 f910 	bl	8001276 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_InitTick+0x70>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	e007      	b.n	800106e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e004      	b.n	800106e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e001      	b.n	800106e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000000c 	.word	0x2000000c
 800107c:	20000004 	.word	0x20000004
 8001080:	20000008 	.word	0x20000008

08001084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x1c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x20>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4413      	add	r3, r2
 8001092:	4a03      	ldr	r2, [pc, #12]	; (80010a0 <HAL_IncTick+0x1c>)
 8001094:	6013      	str	r3, [r2, #0]
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	20001044 	.word	0x20001044
 80010a4:	2000000c 	.word	0x2000000c

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20001044 	.word	0x20001044

080010c0 <__NVIC_SetPriorityGrouping>:
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff29 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff40 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff90 	bl	80011b4 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5f 	bl	8001160 <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff33 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa4 	bl	800121c <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e08d      	b.n	800140e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_DMA_Init+0x138>)
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d80f      	bhi.n	800131e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	4b45      	ldr	r3, [pc, #276]	; (800141c <HAL_DMA_Init+0x13c>)
 8001306:	4413      	add	r3, r2
 8001308:	4a45      	ldr	r2, [pc, #276]	; (8001420 <HAL_DMA_Init+0x140>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	009a      	lsls	r2, r3, #2
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a42      	ldr	r2, [pc, #264]	; (8001424 <HAL_DMA_Init+0x144>)
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
 800131c:	e00e      	b.n	800133c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	4b40      	ldr	r3, [pc, #256]	; (8001428 <HAL_DMA_Init+0x148>)
 8001326:	4413      	add	r3, r2
 8001328:	4a3d      	ldr	r2, [pc, #244]	; (8001420 <HAL_DMA_Init+0x140>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	009a      	lsls	r2, r3, #2
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a3c      	ldr	r2, [pc, #240]	; (800142c <HAL_DMA_Init+0x14c>)
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2202      	movs	r2, #2
 8001340:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001356:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f9be 	bl	8001710 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800139c:	d102      	bne.n	80013a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d010      	beq.n	80013e4 <HAL_DMA_Init+0x104>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d80c      	bhi.n	80013e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f9de 	bl	800178c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	e008      	b.n	80013f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40020407 	.word	0x40020407
 800141c:	bffdfff8 	.word	0xbffdfff8
 8001420:	cccccccd 	.word	0xcccccccd
 8001424:	40020000 	.word	0x40020000
 8001428:	bffdfbf8 	.word	0xbffdfbf8
 800142c:	40020400 	.word	0x40020400

08001430 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d005      	beq.n	8001454 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2204      	movs	r2, #4
 800144c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	e037      	b.n	80014c4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 020e 	bic.w	r2, r2, #14
 8001462:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001472:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	2101      	movs	r1, #1
 8001492:	fa01 f202 	lsl.w	r2, r1, r2
 8001496:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014a0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00c      	beq.n	80014c4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014b8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014c2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d00d      	beq.n	8001516 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2204      	movs	r2, #4
 80014fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	e047      	b.n	80015a6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 020e 	bic.w	r2, r2, #14
 8001524:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0201 	bic.w	r2, r2, #1
 8001534:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001544:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f003 021f 	and.w	r2, r3, #31
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	2101      	movs	r1, #1
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001562:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00c      	beq.n	8001586 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800157a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001584:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
    }
  }
  return status;
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	2204      	movs	r2, #4
 80015d2:	409a      	lsls	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d026      	beq.n	800162a <HAL_DMA_IRQHandler+0x7a>
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d021      	beq.n	800162a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0320 	and.w	r3, r3, #32
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d107      	bne.n	8001604 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0204 	bic.w	r2, r2, #4
 8001602:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	2104      	movs	r1, #4
 8001612:	fa01 f202 	lsl.w	r2, r1, r2
 8001616:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	2b00      	cmp	r3, #0
 800161e:	d071      	beq.n	8001704 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001628:	e06c      	b.n	8001704 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	2202      	movs	r2, #2
 8001634:	409a      	lsls	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4013      	ands	r3, r2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d02e      	beq.n	800169c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d029      	beq.n	800169c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10b      	bne.n	800166e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 020a 	bic.w	r2, r2, #10
 8001664:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f003 021f 	and.w	r2, r3, #31
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	2102      	movs	r1, #2
 800167c:	fa01 f202 	lsl.w	r2, r1, r2
 8001680:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	2b00      	cmp	r3, #0
 8001690:	d038      	beq.n	8001704 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800169a:	e033      	b.n	8001704 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	2208      	movs	r2, #8
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d02a      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d025      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 020e 	bic.w	r2, r2, #14
 80016c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f003 021f 	and.w	r2, r3, #31
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	2101      	movs	r1, #1
 80016d8:	fa01 f202 	lsl.w	r2, r1, r2
 80016dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001704:	bf00      	nop
 8001706:	bf00      	nop
}
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001720:	429a      	cmp	r2, r3
 8001722:	d802      	bhi.n	800172a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e001      	b.n	800172e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800172c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	3b08      	subs	r3, #8
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	009a      	lsls	r2, r3, #2
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4413      	add	r3, r2
 8001750:	461a      	mov	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800175a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 031f 	and.w	r3, r3, #31
 8001762:	2201      	movs	r2, #1
 8001764:	409a      	lsls	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	651a      	str	r2, [r3, #80]	; 0x50
}
 800176a:	bf00      	nop
 800176c:	371c      	adds	r7, #28
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40020407 	.word	0x40020407
 800177c:	40020800 	.word	0x40020800
 8001780:	40020820 	.word	0x40020820
 8001784:	cccccccd 	.word	0xcccccccd
 8001788:	40020880 	.word	0x40020880

0800178c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	461a      	mov	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	2201      	movs	r2, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	1000823f 	.word	0x1000823f
 80017d0:	40020940 	.word	0x40020940

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017e2:	e15a      	b.n	8001a9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2101      	movs	r1, #1
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	4013      	ands	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 814c 	beq.w	8001a94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d00b      	beq.n	800181c <HAL_GPIO_Init+0x48>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d007      	beq.n	800181c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001810:	2b11      	cmp	r3, #17
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b12      	cmp	r3, #18
 800181a:	d130      	bne.n	800187e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001852:	2201      	movs	r2, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	f003 0201 	and.w	r2, r3, #1
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0xea>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d123      	bne.n	8001906 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	08da      	lsrs	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	691a      	ldr	r2, [r3, #16]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	6939      	ldr	r1, [r7, #16]
 8001902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0203 	and.w	r2, r3, #3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80a6 	beq.w	8001a94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001948:	4b5b      	ldr	r3, [pc, #364]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 800194a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194c:	4a5a      	ldr	r2, [pc, #360]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6613      	str	r3, [r2, #96]	; 0x60
 8001954:	4b58      	ldr	r3, [pc, #352]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 8001956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001960:	4a56      	ldr	r2, [pc, #344]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800198a:	d01f      	beq.n	80019cc <HAL_GPIO_Init+0x1f8>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a4c      	ldr	r2, [pc, #304]	; (8001ac0 <HAL_GPIO_Init+0x2ec>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d019      	beq.n	80019c8 <HAL_GPIO_Init+0x1f4>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a4b      	ldr	r2, [pc, #300]	; (8001ac4 <HAL_GPIO_Init+0x2f0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d013      	beq.n	80019c4 <HAL_GPIO_Init+0x1f0>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a4a      	ldr	r2, [pc, #296]	; (8001ac8 <HAL_GPIO_Init+0x2f4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d00d      	beq.n	80019c0 <HAL_GPIO_Init+0x1ec>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a49      	ldr	r2, [pc, #292]	; (8001acc <HAL_GPIO_Init+0x2f8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d007      	beq.n	80019bc <HAL_GPIO_Init+0x1e8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a48      	ldr	r2, [pc, #288]	; (8001ad0 <HAL_GPIO_Init+0x2fc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_GPIO_Init+0x1e4>
 80019b4:	2305      	movs	r3, #5
 80019b6:	e00a      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019b8:	2306      	movs	r3, #6
 80019ba:	e008      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019bc:	2304      	movs	r3, #4
 80019be:	e006      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c0:	2303      	movs	r3, #3
 80019c2:	e004      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e002      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019cc:	2300      	movs	r3, #0
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	f002 0203 	and.w	r2, r2, #3
 80019d4:	0092      	lsls	r2, r2, #2
 80019d6:	4093      	lsls	r3, r2
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019de:	4937      	ldr	r1, [pc, #220]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019ec:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a10:	4a30      	ldr	r2, [pc, #192]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a3a:	4a26      	ldr	r2, [pc, #152]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a40:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a8e:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f47f ae9d 	bne.w	80017e4 <HAL_GPIO_Init+0x10>
  }
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010000 	.word	0x40010000
 8001ac0:	48000400 	.word	0x48000400
 8001ac4:	48000800 	.word	0x48000800
 8001ac8:	48000c00 	.word	0x48000c00
 8001acc:	48001000 	.word	0x48001000
 8001ad0:	48001400 	.word	0x48001400
 8001ad4:	40010400 	.word	0x40010400

08001ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001af4:	e002      	b.n	8001afc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001af6:	887a      	ldrh	r2, [r7, #2]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f806 	bl	8001b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40010400 	.word	0x40010400

08001b38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d141      	bne.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b5e:	4b4b      	ldr	r3, [pc, #300]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6a:	d131      	bne.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b6c:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b72:	4a46      	ldr	r2, [pc, #280]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b7c:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b84:	4a41      	ldr	r2, [pc, #260]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b8c:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2232      	movs	r2, #50	; 0x32
 8001b92:	fb02 f303 	mul.w	r3, r2, r3
 8001b96:	4a3f      	ldr	r2, [pc, #252]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b98:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9c:	0c9b      	lsrs	r3, r3, #18
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba2:	e002      	b.n	8001baa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb6:	d102      	bne.n	8001bbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f2      	bne.n	8001ba4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bca:	d158      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e057      	b.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bd6:	4a2d      	ldr	r2, [pc, #180]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001be0:	e04d      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be8:	d141      	bne.n	8001c6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf6:	d131      	bne.n	8001c5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bfe:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c10:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2232      	movs	r2, #50	; 0x32
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	0c9b      	lsrs	r3, r3, #18
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c2e:	e002      	b.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c42:	d102      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f2      	bne.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c56:	d112      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e011      	b.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c6c:	e007      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	20000004 	.word	0x20000004
 8001c94:	431bde83 	.word	0x431bde83

08001c98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca6:	6093      	str	r3, [r2, #8]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40007000 	.word	0x40007000

08001cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e308      	b.n	80022dc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d075      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	4ba3      	ldr	r3, [pc, #652]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce0:	4ba0      	ldr	r3, [pc, #640]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b0c      	cmp	r3, #12
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3e>
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d002      	beq.n	8001cfc <HAL_RCC_OscConfig+0x44>
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d10b      	bne.n	8001d14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	4b99      	ldr	r3, [pc, #612]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d05b      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x108>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d157      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e2e3      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1c:	d106      	bne.n	8001d2c <HAL_RCC_OscConfig+0x74>
 8001d1e:	4b91      	ldr	r3, [pc, #580]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a90      	ldr	r2, [pc, #576]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e01d      	b.n	8001d68 <HAL_RCC_OscConfig+0xb0>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x98>
 8001d36:	4b8b      	ldr	r3, [pc, #556]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a8a      	ldr	r2, [pc, #552]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b88      	ldr	r3, [pc, #544]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a87      	ldr	r2, [pc, #540]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0xb0>
 8001d50:	4b84      	ldr	r3, [pc, #528]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a83      	ldr	r2, [pc, #524]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b81      	ldr	r3, [pc, #516]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a80      	ldr	r2, [pc, #512]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d013      	beq.n	8001d98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7ff f99a 	bl	80010a8 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff f996 	bl	80010a8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e2a8      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0xc0>
 8001d96:	e014      	b.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff f986 	bl	80010a8 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7ff f982 	bl	80010a8 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e294      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001db2:	4b6c      	ldr	r3, [pc, #432]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0xe8>
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d075      	beq.n	8001eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dce:	4b65      	ldr	r3, [pc, #404]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd8:	4b62      	ldr	r3, [pc, #392]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2b0c      	cmp	r3, #12
 8001de6:	d102      	bne.n	8001dee <HAL_RCC_OscConfig+0x136>
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_OscConfig+0x13c>
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d11f      	bne.n	8001e34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df4:	4b5b      	ldr	r3, [pc, #364]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_OscConfig+0x154>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e267      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0c:	4b55      	ldr	r3, [pc, #340]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	4952      	ldr	r1, [pc, #328]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e20:	4b51      	ldr	r3, [pc, #324]	; (8001f68 <HAL_RCC_OscConfig+0x2b0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f8f3 	bl	8001010 <HAL_InitTick>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d043      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e253      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d023      	beq.n	8001e84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3c:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a48      	ldr	r2, [pc, #288]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7ff f92e 	bl	80010a8 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e50:	f7ff f92a 	bl	80010a8 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e23c      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e62:	4b40      	ldr	r3, [pc, #256]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	061b      	lsls	r3, r3, #24
 8001e7c:	4939      	ldr	r1, [pc, #228]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
 8001e82:	e01a      	b.n	8001eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e84:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a36      	ldr	r2, [pc, #216]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff f90a 	bl	80010a8 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e98:	f7ff f906 	bl	80010a8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e218      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eaa:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x1e0>
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d03c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01c      	beq.n	8001f08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ece:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed4:	4a23      	ldr	r2, [pc, #140]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ede:	f7ff f8e3 	bl	80010a8 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee6:	f7ff f8df 	bl	80010a8 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1f1      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0ef      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x22e>
 8001f06:	e01b      	b.n	8001f40 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0e:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f18:	f7ff f8c6 	bl	80010a8 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f20:	f7ff f8c2 	bl	80010a8 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e1d4      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1ef      	bne.n	8001f20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80ab 	beq.w	80020a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <HAL_RCC_OscConfig+0x2b4>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e005      	b.n	8001f6e <HAL_RCC_OscConfig+0x2b6>
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00d      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4baf      	ldr	r3, [pc, #700]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	4aae      	ldr	r2, [pc, #696]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7e:	4bac      	ldr	r3, [pc, #688]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8e:	4ba9      	ldr	r3, [pc, #676]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f9a:	4ba6      	ldr	r3, [pc, #664]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4aa5      	ldr	r2, [pc, #660]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f87f 	bl	80010a8 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fae:	f7ff f87b 	bl	80010a8 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e18d      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc0:	4b9c      	ldr	r3, [pc, #624]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d108      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x32e>
 8001fd4:	4b96      	ldr	r3, [pc, #600]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fda:	4a95      	ldr	r2, [pc, #596]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fe4:	e024      	b.n	8002030 <HAL_RCC_OscConfig+0x378>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d110      	bne.n	8002010 <HAL_RCC_OscConfig+0x358>
 8001fee:	4b90      	ldr	r3, [pc, #576]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff4:	4a8e      	ldr	r2, [pc, #568]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ffe:	4b8c      	ldr	r3, [pc, #560]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002004:	4a8a      	ldr	r2, [pc, #552]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800200e:	e00f      	b.n	8002030 <HAL_RCC_OscConfig+0x378>
 8002010:	4b87      	ldr	r3, [pc, #540]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	4a86      	ldr	r2, [pc, #536]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002020:	4b83      	ldr	r3, [pc, #524]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	4a82      	ldr	r2, [pc, #520]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002028:	f023 0304 	bic.w	r3, r3, #4
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d016      	beq.n	8002066 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7ff f836 	bl	80010a8 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203e:	e00a      	b.n	8002056 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002040:	f7ff f832 	bl	80010a8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e142      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002056:	4b76      	ldr	r3, [pc, #472]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ed      	beq.n	8002040 <HAL_RCC_OscConfig+0x388>
 8002064:	e015      	b.n	8002092 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002066:	f7ff f81f 	bl	80010a8 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7ff f81b 	bl	80010a8 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	; 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e12b      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002084:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ed      	bne.n	800206e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002092:	7ffb      	ldrb	r3, [r7, #31]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d105      	bne.n	80020a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002098:	4b65      	ldr	r3, [pc, #404]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	4a64      	ldr	r2, [pc, #400]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800209e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d03c      	beq.n	800212a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020b8:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020be:	4a5c      	ldr	r2, [pc, #368]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7fe ffee 	bl	80010a8 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020d0:	f7fe ffea 	bl	80010a8 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e0fc      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020e2:	4b53      	ldr	r3, [pc, #332]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ef      	beq.n	80020d0 <HAL_RCC_OscConfig+0x418>
 80020f0:	e01b      	b.n	800212a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020f2:	4b4f      	ldr	r3, [pc, #316]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020f8:	4a4d      	ldr	r2, [pc, #308]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002102:	f7fe ffd1 	bl	80010a8 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800210a:	f7fe ffcd 	bl	80010a8 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0df      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800211c:	4b44      	ldr	r3, [pc, #272]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800211e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ef      	bne.n	800210a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 80d3 	beq.w	80022da <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002134:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b0c      	cmp	r3, #12
 800213e:	f000 808d 	beq.w	800225c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d15a      	bne.n	8002200 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214a:	4b39      	ldr	r3, [pc, #228]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a38      	ldr	r2, [pc, #224]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002150:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7fe ffa7 	bl	80010a8 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215e:	f7fe ffa3 	bl	80010a8 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0b5      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002170:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f0      	bne.n	800215e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800217c:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_RCC_OscConfig+0x580>)
 8002182:	4013      	ands	r3, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6a11      	ldr	r1, [r2, #32]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800218c:	3a01      	subs	r2, #1
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	4311      	orrs	r1, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002196:	0212      	lsls	r2, r2, #8
 8002198:	4311      	orrs	r1, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800219e:	0852      	lsrs	r2, r2, #1
 80021a0:	3a01      	subs	r2, #1
 80021a2:	0552      	lsls	r2, r2, #21
 80021a4:	4311      	orrs	r1, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021aa:	0852      	lsrs	r2, r2, #1
 80021ac:	3a01      	subs	r2, #1
 80021ae:	0652      	lsls	r2, r2, #25
 80021b0:	4311      	orrs	r1, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021b6:	06d2      	lsls	r2, r2, #27
 80021b8:	430a      	orrs	r2, r1
 80021ba:	491d      	ldr	r1, [pc, #116]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a1a      	ldr	r2, [pc, #104]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a17      	ldr	r2, [pc, #92]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe ff66 	bl	80010a8 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe ff62 	bl	80010a8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e074      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x528>
 80021fe:	e06c      	b.n	80022da <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800220a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002212:	f023 0303 	bic.w	r3, r3, #3
 8002216:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800221e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe ff3e 	bl	80010a8 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222e:	e00e      	b.n	800224e <HAL_RCC_OscConfig+0x596>
 8002230:	40021000 	.word	0x40021000
 8002234:	40007000 	.word	0x40007000
 8002238:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe ff34 	bl	80010a8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e046      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224e:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <HAL_RCC_OscConfig+0x62c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x584>
 800225a:	e03e      	b.n	80022da <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e039      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_RCC_OscConfig+0x62c>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f003 0203 	and.w	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	429a      	cmp	r2, r3
 800227a:	d12c      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	3b01      	subs	r3, #1
 8002288:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d123      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d11b      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d113      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	3b01      	subs	r3, #1
 80022bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	3b01      	subs	r3, #1
 80022d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000

080022e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e11e      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b91      	ldr	r3, [pc, #580]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d910      	bls.n	8002330 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b8e      	ldr	r3, [pc, #568]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 020f 	bic.w	r2, r3, #15
 8002316:	498c      	ldr	r1, [pc, #560]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b8a      	ldr	r3, [pc, #552]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e106      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d073      	beq.n	8002424 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d129      	bne.n	8002398 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002344:	4b81      	ldr	r3, [pc, #516]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0f4      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002354:	f000 f99e 	bl	8002694 <RCC_GetSysClockFreqFromPLLSource>
 8002358:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4a7c      	ldr	r2, [pc, #496]	; (8002550 <HAL_RCC_ClockConfig+0x268>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d93f      	bls.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002362:	4b7a      	ldr	r3, [pc, #488]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002376:	2b00      	cmp	r3, #0
 8002378:	d033      	beq.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800237e:	2b00      	cmp	r3, #0
 8002380:	d12f      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002382:	4b72      	ldr	r3, [pc, #456]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800238a:	4a70      	ldr	r2, [pc, #448]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800238c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002390:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e024      	b.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a0:	4b6a      	ldr	r3, [pc, #424]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d109      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0c6      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b0:	4b66      	ldr	r3, [pc, #408]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0be      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023c0:	f000 f8ce 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4a61      	ldr	r2, [pc, #388]	; (8002550 <HAL_RCC_ClockConfig+0x268>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d909      	bls.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ce:	4b5f      	ldr	r3, [pc, #380]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023d6:	4a5d      	ldr	r2, [pc, #372]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023e2:	4b5a      	ldr	r3, [pc, #360]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f023 0203 	bic.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4957      	ldr	r1, [pc, #348]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f4:	f7fe fe58 	bl	80010a8 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7fe fe54 	bl	80010a8 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	; 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e095      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	4b4e      	ldr	r3, [pc, #312]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 020c 	and.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d1eb      	bne.n	80023fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d023      	beq.n	8002478 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800243c:	4b43      	ldr	r3, [pc, #268]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a42      	ldr	r2, [pc, #264]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002442:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002446:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002454:	4b3d      	ldr	r3, [pc, #244]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800245c:	4a3b      	ldr	r2, [pc, #236]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800245e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002462:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b39      	ldr	r3, [pc, #228]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4936      	ldr	r1, [pc, #216]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
 8002476:	e008      	b.n	800248a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b80      	cmp	r3, #128	; 0x80
 800247c:	d105      	bne.n	800248a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800247e:	4b33      	ldr	r3, [pc, #204]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	4a32      	ldr	r2, [pc, #200]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002488:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800248a:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d21d      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002498:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 020f 	bic.w	r2, r3, #15
 80024a0:	4929      	ldr	r1, [pc, #164]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024a8:	f7fe fdfe 	bl	80010a8 <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7fe fdfa 	bl	80010a8 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e03b      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1ed      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e0:	4b1a      	ldr	r3, [pc, #104]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4917      	ldr	r1, [pc, #92]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	490f      	ldr	r1, [pc, #60]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002512:	f000 f825 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8002516:	4602      	mov	r2, r0
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	490c      	ldr	r1, [pc, #48]	; (8002554 <HAL_RCC_ClockConfig+0x26c>)
 8002524:	5ccb      	ldrb	r3, [r1, r3]
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <HAL_RCC_ClockConfig+0x270>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_RCC_ClockConfig+0x274>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fd6a 	bl	8001010 <HAL_InitTick>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40022000 	.word	0x40022000
 800254c:	40021000 	.word	0x40021000
 8002550:	04c4b400 	.word	0x04c4b400
 8002554:	08028188 	.word	0x08028188
 8002558:	20000004 	.word	0x20000004
 800255c:	20000008 	.word	0x20000008

08002560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002566:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b04      	cmp	r3, #4
 8002570:	d102      	bne.n	8002578 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002572:	4b2a      	ldr	r3, [pc, #168]	; (800261c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e047      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d102      	bne.n	800258a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002584:	4b26      	ldr	r3, [pc, #152]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	e03e      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d136      	bne.n	8002604 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3301      	adds	r3, #1
 80025ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d10c      	bne.n	80025ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025b4:	4a1a      	ldr	r2, [pc, #104]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	4a16      	ldr	r2, [pc, #88]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025be:	68d2      	ldr	r2, [r2, #12]
 80025c0:	0a12      	lsrs	r2, r2, #8
 80025c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	617b      	str	r3, [r7, #20]
      break;
 80025cc:	e00c      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ce:	4a13      	ldr	r2, [pc, #76]	; (800261c <HAL_RCC_GetSysClockFreq+0xbc>)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	4a10      	ldr	r2, [pc, #64]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d8:	68d2      	ldr	r2, [r2, #12]
 80025da:	0a12      	lsrs	r2, r2, #8
 80025dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
      break;
 80025e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0e5b      	lsrs	r3, r3, #25
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	3301      	adds	r3, #1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	e001      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002608:	693b      	ldr	r3, [r7, #16]
}
 800260a:	4618      	mov	r0, r3
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	00f42400 	.word	0x00f42400
 8002620:	016e3600 	.word	0x016e3600

08002624 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_RCC_GetHCLKFreq+0x14>)
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000004 	.word	0x20000004

0800263c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002640:	f7ff fff0 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4904      	ldr	r1, [pc, #16]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000
 8002664:	08028198 	.word	0x08028198

08002668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800266c:	f7ff ffda 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0adb      	lsrs	r3, r3, #11
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4904      	ldr	r1, [pc, #16]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x28>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	08028198 	.word	0x08028198

08002694 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800269a:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3301      	adds	r3, #1
 80026b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d10c      	bne.n	80026d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026b8:	4a17      	ldr	r2, [pc, #92]	; (8002718 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026c2:	68d2      	ldr	r2, [r2, #12]
 80026c4:	0a12      	lsrs	r2, r2, #8
 80026c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	617b      	str	r3, [r7, #20]
    break;
 80026d0:	e00c      	b.n	80026ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026d2:	4a12      	ldr	r2, [pc, #72]	; (800271c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026dc:	68d2      	ldr	r2, [r2, #12]
 80026de:	0a12      	lsrs	r2, r2, #8
 80026e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026e4:	fb02 f303 	mul.w	r3, r2, r3
 80026e8:	617b      	str	r3, [r7, #20]
    break;
 80026ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0e5b      	lsrs	r3, r3, #25
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002706:	687b      	ldr	r3, [r7, #4]
}
 8002708:	4618      	mov	r0, r3
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40021000 	.word	0x40021000
 8002718:	016e3600 	.word	0x016e3600
 800271c:	00f42400 	.word	0x00f42400

08002720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002728:	2300      	movs	r3, #0
 800272a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800272c:	2300      	movs	r3, #0
 800272e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8098 	beq.w	800286e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002742:	4b43      	ldr	r3, [pc, #268]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	4b40      	ldr	r3, [pc, #256]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	4a3f      	ldr	r2, [pc, #252]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	6593      	str	r3, [r2, #88]	; 0x58
 800275a:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800276a:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a39      	ldr	r2, [pc, #228]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002776:	f7fe fc97 	bl	80010a8 <HAL_GetTick>
 800277a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800277c:	e009      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7fe fc93 	bl	80010a8 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d902      	bls.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	74fb      	strb	r3, [r7, #19]
        break;
 8002790:	e005      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002792:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ef      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d159      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027a4:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01e      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d019      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027cc:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d2:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027dc:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027ec:	4a18      	ldr	r2, [pc, #96]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d016      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fc53 	bl	80010a8 <HAL_GetTick>
 8002802:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002804:	e00b      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7fe fc4f 	bl	80010a8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d902      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	74fb      	strb	r3, [r7, #19]
            break;
 800281c:	e006      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ec      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10b      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002840:	4903      	ldr	r1, [pc, #12]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002848:	e008      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	74bb      	strb	r3, [r7, #18]
 800284e:	e005      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285c:	7c7b      	ldrb	r3, [r7, #17]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d105      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002862:	4baf      	ldr	r3, [pc, #700]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	4aae      	ldr	r2, [pc, #696]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800287a:	4ba9      	ldr	r3, [pc, #676]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002880:	f023 0203 	bic.w	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	49a5      	ldr	r1, [pc, #660]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800289c:	4ba0      	ldr	r3, [pc, #640]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f023 020c 	bic.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	499d      	ldr	r1, [pc, #628]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028be:	4b98      	ldr	r3, [pc, #608]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4994      	ldr	r1, [pc, #592]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028e0:	4b8f      	ldr	r3, [pc, #572]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	498c      	ldr	r1, [pc, #560]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002902:	4b87      	ldr	r3, [pc, #540]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	4983      	ldr	r1, [pc, #524]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002924:	4b7e      	ldr	r3, [pc, #504]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	497b      	ldr	r1, [pc, #492]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002946:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	4972      	ldr	r1, [pc, #456]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002968:	4b6d      	ldr	r3, [pc, #436]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	496a      	ldr	r1, [pc, #424]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800298a:	4b65      	ldr	r3, [pc, #404]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	4961      	ldr	r1, [pc, #388]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029ac:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	4959      	ldr	r1, [pc, #356]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ce:	4b54      	ldr	r3, [pc, #336]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	4950      	ldr	r1, [pc, #320]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d015      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f0:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4948      	ldr	r1, [pc, #288]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a10:	4b43      	ldr	r3, [pc, #268]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a42      	ldr	r2, [pc, #264]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d015      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a28:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a36:	493a      	ldr	r1, [pc, #232]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a46:	d105      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a48:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a34      	ldr	r2, [pc, #208]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a52:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d015      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a60:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	492c      	ldr	r1, [pc, #176]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a80:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a26      	ldr	r2, [pc, #152]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d015      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a98:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	491e      	ldr	r1, [pc, #120]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ac2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d015      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ad0:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4910      	ldr	r1, [pc, #64]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aee:	d105      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002afa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d018      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	4902      	ldr	r1, [pc, #8]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b1e:	e001      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002b20:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b2c:	d105      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b2e:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4a20      	ldr	r2, [pc, #128]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b38:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d015      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b46:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b54:	4917      	ldr	r1, [pc, #92]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b64:	d105      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b66:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d015      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8c:	4909      	ldr	r1, [pc, #36]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b9c:	d105      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ba4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ba8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002baa:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e042      	b.n	8002c50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fd ffd9 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2224      	movs	r2, #36	; 0x24
 8002be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0201 	bic.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa80 	bl	8003100 <UART_SetConfig>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e022      	b.n	8002c50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fd3e 	bl	8003694 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fdc5 	bl	80037d8 <UART_CheckIdleState>
 8002c4e:	4603      	mov	r3, r0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d118      	bne.n	8002cba <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d013      	beq.n	8002cba <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d104      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 81fb 	beq.w	80030a6 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
      }
      return;
 8002cb8:	e1f5      	b.n	80030a6 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80ef 	beq.w	8002ea0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4b73      	ldr	r3, [pc, #460]	; (8002e94 <HAL_UART_IRQHandler+0x23c>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4b72      	ldr	r3, [pc, #456]	; (8002e98 <HAL_UART_IRQHandler+0x240>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80e4 	beq.w	8002ea0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d010      	beq.n	8002d04 <HAL_UART_IRQHandler+0xac>
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00b      	beq.n	8002d04 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d010      	beq.n	8002d30 <HAL_UART_IRQHandler+0xd8>
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d26:	f043 0204 	orr.w	r2, r3, #4
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d010      	beq.n	8002d5c <HAL_UART_IRQHandler+0x104>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2204      	movs	r2, #4
 8002d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d52:	f043 0202 	orr.w	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d015      	beq.n	8002d92 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d104      	bne.n	8002d7a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4b48      	ldr	r3, [pc, #288]	; (8002e94 <HAL_UART_IRQHandler+0x23c>)
 8002d74:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2208      	movs	r2, #8
 8002d80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d88:	f043 0208 	orr.w	r2, r3, #8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d011      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x168>
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00c      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002db6:	f043 0220 	orr.w	r2, r3, #32
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 816f 	beq.w	80030aa <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d011      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d104      	bne.n	8002dea <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d007      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e00:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	d004      	beq.n	8002e1a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d031      	beq.n	8002e7e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fda7 	bl	800396e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	d123      	bne.n	8002e76 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d013      	beq.n	8002e6e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4a:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <HAL_UART_IRQHandler+0x244>)
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fb45 	bl	80014e2 <HAL_DMA_Abort_IT>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d017      	beq.n	8002e8e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6c:	e00f      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f930 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e74:	e00b      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f92c 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e7c:	e007      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f928 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002e8c:	e10d      	b.n	80030aa <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8e:	bf00      	nop
    return;
 8002e90:	e10b      	b.n	80030aa <HAL_UART_IRQHandler+0x452>
 8002e92:	bf00      	nop
 8002e94:	10000001 	.word	0x10000001
 8002e98:	04000120 	.word	0x04000120
 8002e9c:	080039d3 	.word	0x080039d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	f040 80ab 	bne.w	8003000 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80a5 	beq.w	8003000 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 809f 	beq.w	8003000 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d155      	bne.n	8002f84 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002ee2:	893b      	ldrh	r3, [r7, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80e2 	beq.w	80030ae <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002ef0:	893a      	ldrh	r2, [r7, #8]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	f080 80db 	bcs.w	80030ae <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	893a      	ldrh	r2, [r7, #8]
 8002efc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d12b      	bne.n	8002f68 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f1e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f3e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0210 	bic.w	r2, r2, #16
 8002f5c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe fa64 	bl	8001430 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f8b3 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f82:	e094      	b.n	80030ae <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8087 	beq.w	80030b2 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002fa4:	897b      	ldrh	r3, [r7, #10]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8083 	beq.w	80030b2 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fba:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0210 	bic.w	r2, r2, #16
 8002ff2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ff4:	897b      	ldrh	r3, [r7, #10]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f875 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ffe:	e058      	b.n	80030b2 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00d      	beq.n	8003026 <HAL_UART_IRQHandler+0x3ce>
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800301c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fd07 	bl	8003a32 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003024:	e048      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302c:	2b00      	cmp	r3, #0
 800302e:	d012      	beq.n	8003056 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003048:	2b00      	cmp	r3, #0
 800304a:	d034      	beq.n	80030b6 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
    }
    return;
 8003054:	e02f      	b.n	80030b6 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_UART_IRQHandler+0x41a>
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fcc7 	bl	80039fe <UART_EndTransmit_IT>
    return;
 8003070:	e022      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_UART_IRQHandler+0x436>
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fce7 	bl	8003a5a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800308c:	e014      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00f      	beq.n	80030b8 <HAL_UART_IRQHandler+0x460>
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	da0c      	bge.n	80030b8 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fcd1 	bl	8003a46 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030a4:	e008      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030a6:	bf00      	nop
 80030a8:	e006      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
    return;
 80030aa:	bf00      	nop
 80030ac:	e004      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030ae:	bf00      	nop
 80030b0:	e002      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030b2:	bf00      	nop
 80030b4:	e000      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
    return;
 80030b6:	bf00      	nop
  }
}
 80030b8:	3720      	adds	r7, #32
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop

080030c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003100:	b5b0      	push	{r4, r5, r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4313      	orrs	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4bb1      	ldr	r3, [pc, #708]	; (80033f0 <UART_SetConfig+0x2f0>)
 800312c:	4013      	ands	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	69f9      	ldr	r1, [r7, #28]
 8003134:	430b      	orrs	r3, r1
 8003136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4aa6      	ldr	r2, [pc, #664]	; (80033f4 <UART_SetConfig+0x2f4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	4313      	orrs	r3, r2
 8003166:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003172:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	69f9      	ldr	r1, [r7, #28]
 800317c:	430b      	orrs	r3, r1
 800317e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	f023 010f 	bic.w	r1, r3, #15
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a97      	ldr	r2, [pc, #604]	; (80033f8 <UART_SetConfig+0x2f8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d120      	bne.n	80031e2 <UART_SetConfig+0xe2>
 80031a0:	4b96      	ldr	r3, [pc, #600]	; (80033fc <UART_SetConfig+0x2fc>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d816      	bhi.n	80031dc <UART_SetConfig+0xdc>
 80031ae:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <UART_SetConfig+0xb4>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031c5 	.word	0x080031c5
 80031b8:	080031d1 	.word	0x080031d1
 80031bc:	080031cb 	.word	0x080031cb
 80031c0:	080031d7 	.word	0x080031d7
 80031c4:	2301      	movs	r3, #1
 80031c6:	76fb      	strb	r3, [r7, #27]
 80031c8:	e0e7      	b.n	800339a <UART_SetConfig+0x29a>
 80031ca:	2302      	movs	r3, #2
 80031cc:	76fb      	strb	r3, [r7, #27]
 80031ce:	e0e4      	b.n	800339a <UART_SetConfig+0x29a>
 80031d0:	2304      	movs	r3, #4
 80031d2:	76fb      	strb	r3, [r7, #27]
 80031d4:	e0e1      	b.n	800339a <UART_SetConfig+0x29a>
 80031d6:	2308      	movs	r3, #8
 80031d8:	76fb      	strb	r3, [r7, #27]
 80031da:	e0de      	b.n	800339a <UART_SetConfig+0x29a>
 80031dc:	2310      	movs	r3, #16
 80031de:	76fb      	strb	r3, [r7, #27]
 80031e0:	e0db      	b.n	800339a <UART_SetConfig+0x29a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a86      	ldr	r2, [pc, #536]	; (8003400 <UART_SetConfig+0x300>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d132      	bne.n	8003252 <UART_SetConfig+0x152>
 80031ec:	4b83      	ldr	r3, [pc, #524]	; (80033fc <UART_SetConfig+0x2fc>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d828      	bhi.n	800324c <UART_SetConfig+0x14c>
 80031fa:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <UART_SetConfig+0x100>)
 80031fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003200:	08003235 	.word	0x08003235
 8003204:	0800324d 	.word	0x0800324d
 8003208:	0800324d 	.word	0x0800324d
 800320c:	0800324d 	.word	0x0800324d
 8003210:	08003241 	.word	0x08003241
 8003214:	0800324d 	.word	0x0800324d
 8003218:	0800324d 	.word	0x0800324d
 800321c:	0800324d 	.word	0x0800324d
 8003220:	0800323b 	.word	0x0800323b
 8003224:	0800324d 	.word	0x0800324d
 8003228:	0800324d 	.word	0x0800324d
 800322c:	0800324d 	.word	0x0800324d
 8003230:	08003247 	.word	0x08003247
 8003234:	2300      	movs	r3, #0
 8003236:	76fb      	strb	r3, [r7, #27]
 8003238:	e0af      	b.n	800339a <UART_SetConfig+0x29a>
 800323a:	2302      	movs	r3, #2
 800323c:	76fb      	strb	r3, [r7, #27]
 800323e:	e0ac      	b.n	800339a <UART_SetConfig+0x29a>
 8003240:	2304      	movs	r3, #4
 8003242:	76fb      	strb	r3, [r7, #27]
 8003244:	e0a9      	b.n	800339a <UART_SetConfig+0x29a>
 8003246:	2308      	movs	r3, #8
 8003248:	76fb      	strb	r3, [r7, #27]
 800324a:	e0a6      	b.n	800339a <UART_SetConfig+0x29a>
 800324c:	2310      	movs	r3, #16
 800324e:	76fb      	strb	r3, [r7, #27]
 8003250:	e0a3      	b.n	800339a <UART_SetConfig+0x29a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a6b      	ldr	r2, [pc, #428]	; (8003404 <UART_SetConfig+0x304>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d120      	bne.n	800329e <UART_SetConfig+0x19e>
 800325c:	4b67      	ldr	r3, [pc, #412]	; (80033fc <UART_SetConfig+0x2fc>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003266:	2b30      	cmp	r3, #48	; 0x30
 8003268:	d013      	beq.n	8003292 <UART_SetConfig+0x192>
 800326a:	2b30      	cmp	r3, #48	; 0x30
 800326c:	d814      	bhi.n	8003298 <UART_SetConfig+0x198>
 800326e:	2b20      	cmp	r3, #32
 8003270:	d009      	beq.n	8003286 <UART_SetConfig+0x186>
 8003272:	2b20      	cmp	r3, #32
 8003274:	d810      	bhi.n	8003298 <UART_SetConfig+0x198>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <UART_SetConfig+0x180>
 800327a:	2b10      	cmp	r3, #16
 800327c:	d006      	beq.n	800328c <UART_SetConfig+0x18c>
 800327e:	e00b      	b.n	8003298 <UART_SetConfig+0x198>
 8003280:	2300      	movs	r3, #0
 8003282:	76fb      	strb	r3, [r7, #27]
 8003284:	e089      	b.n	800339a <UART_SetConfig+0x29a>
 8003286:	2302      	movs	r3, #2
 8003288:	76fb      	strb	r3, [r7, #27]
 800328a:	e086      	b.n	800339a <UART_SetConfig+0x29a>
 800328c:	2304      	movs	r3, #4
 800328e:	76fb      	strb	r3, [r7, #27]
 8003290:	e083      	b.n	800339a <UART_SetConfig+0x29a>
 8003292:	2308      	movs	r3, #8
 8003294:	76fb      	strb	r3, [r7, #27]
 8003296:	e080      	b.n	800339a <UART_SetConfig+0x29a>
 8003298:	2310      	movs	r3, #16
 800329a:	76fb      	strb	r3, [r7, #27]
 800329c:	e07d      	b.n	800339a <UART_SetConfig+0x29a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a59      	ldr	r2, [pc, #356]	; (8003408 <UART_SetConfig+0x308>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d120      	bne.n	80032ea <UART_SetConfig+0x1ea>
 80032a8:	4b54      	ldr	r3, [pc, #336]	; (80033fc <UART_SetConfig+0x2fc>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032b2:	2bc0      	cmp	r3, #192	; 0xc0
 80032b4:	d013      	beq.n	80032de <UART_SetConfig+0x1de>
 80032b6:	2bc0      	cmp	r3, #192	; 0xc0
 80032b8:	d814      	bhi.n	80032e4 <UART_SetConfig+0x1e4>
 80032ba:	2b80      	cmp	r3, #128	; 0x80
 80032bc:	d009      	beq.n	80032d2 <UART_SetConfig+0x1d2>
 80032be:	2b80      	cmp	r3, #128	; 0x80
 80032c0:	d810      	bhi.n	80032e4 <UART_SetConfig+0x1e4>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <UART_SetConfig+0x1cc>
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d006      	beq.n	80032d8 <UART_SetConfig+0x1d8>
 80032ca:	e00b      	b.n	80032e4 <UART_SetConfig+0x1e4>
 80032cc:	2300      	movs	r3, #0
 80032ce:	76fb      	strb	r3, [r7, #27]
 80032d0:	e063      	b.n	800339a <UART_SetConfig+0x29a>
 80032d2:	2302      	movs	r3, #2
 80032d4:	76fb      	strb	r3, [r7, #27]
 80032d6:	e060      	b.n	800339a <UART_SetConfig+0x29a>
 80032d8:	2304      	movs	r3, #4
 80032da:	76fb      	strb	r3, [r7, #27]
 80032dc:	e05d      	b.n	800339a <UART_SetConfig+0x29a>
 80032de:	2308      	movs	r3, #8
 80032e0:	76fb      	strb	r3, [r7, #27]
 80032e2:	e05a      	b.n	800339a <UART_SetConfig+0x29a>
 80032e4:	2310      	movs	r3, #16
 80032e6:	76fb      	strb	r3, [r7, #27]
 80032e8:	e057      	b.n	800339a <UART_SetConfig+0x29a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a47      	ldr	r2, [pc, #284]	; (800340c <UART_SetConfig+0x30c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d125      	bne.n	8003340 <UART_SetConfig+0x240>
 80032f4:	4b41      	ldr	r3, [pc, #260]	; (80033fc <UART_SetConfig+0x2fc>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003302:	d017      	beq.n	8003334 <UART_SetConfig+0x234>
 8003304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003308:	d817      	bhi.n	800333a <UART_SetConfig+0x23a>
 800330a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330e:	d00b      	beq.n	8003328 <UART_SetConfig+0x228>
 8003310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003314:	d811      	bhi.n	800333a <UART_SetConfig+0x23a>
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <UART_SetConfig+0x222>
 800331a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331e:	d006      	beq.n	800332e <UART_SetConfig+0x22e>
 8003320:	e00b      	b.n	800333a <UART_SetConfig+0x23a>
 8003322:	2300      	movs	r3, #0
 8003324:	76fb      	strb	r3, [r7, #27]
 8003326:	e038      	b.n	800339a <UART_SetConfig+0x29a>
 8003328:	2302      	movs	r3, #2
 800332a:	76fb      	strb	r3, [r7, #27]
 800332c:	e035      	b.n	800339a <UART_SetConfig+0x29a>
 800332e:	2304      	movs	r3, #4
 8003330:	76fb      	strb	r3, [r7, #27]
 8003332:	e032      	b.n	800339a <UART_SetConfig+0x29a>
 8003334:	2308      	movs	r3, #8
 8003336:	76fb      	strb	r3, [r7, #27]
 8003338:	e02f      	b.n	800339a <UART_SetConfig+0x29a>
 800333a:	2310      	movs	r3, #16
 800333c:	76fb      	strb	r3, [r7, #27]
 800333e:	e02c      	b.n	800339a <UART_SetConfig+0x29a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <UART_SetConfig+0x2f4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d125      	bne.n	8003396 <UART_SetConfig+0x296>
 800334a:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <UART_SetConfig+0x2fc>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003350:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003358:	d017      	beq.n	800338a <UART_SetConfig+0x28a>
 800335a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800335e:	d817      	bhi.n	8003390 <UART_SetConfig+0x290>
 8003360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003364:	d00b      	beq.n	800337e <UART_SetConfig+0x27e>
 8003366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336a:	d811      	bhi.n	8003390 <UART_SetConfig+0x290>
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <UART_SetConfig+0x278>
 8003370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003374:	d006      	beq.n	8003384 <UART_SetConfig+0x284>
 8003376:	e00b      	b.n	8003390 <UART_SetConfig+0x290>
 8003378:	2300      	movs	r3, #0
 800337a:	76fb      	strb	r3, [r7, #27]
 800337c:	e00d      	b.n	800339a <UART_SetConfig+0x29a>
 800337e:	2302      	movs	r3, #2
 8003380:	76fb      	strb	r3, [r7, #27]
 8003382:	e00a      	b.n	800339a <UART_SetConfig+0x29a>
 8003384:	2304      	movs	r3, #4
 8003386:	76fb      	strb	r3, [r7, #27]
 8003388:	e007      	b.n	800339a <UART_SetConfig+0x29a>
 800338a:	2308      	movs	r3, #8
 800338c:	76fb      	strb	r3, [r7, #27]
 800338e:	e004      	b.n	800339a <UART_SetConfig+0x29a>
 8003390:	2310      	movs	r3, #16
 8003392:	76fb      	strb	r3, [r7, #27]
 8003394:	e001      	b.n	800339a <UART_SetConfig+0x29a>
 8003396:	2310      	movs	r3, #16
 8003398:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a15      	ldr	r2, [pc, #84]	; (80033f4 <UART_SetConfig+0x2f4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	f040 809f 	bne.w	80034e4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033a6:	7efb      	ldrb	r3, [r7, #27]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d837      	bhi.n	800341c <UART_SetConfig+0x31c>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <UART_SetConfig+0x2b4>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033d9 	.word	0x080033d9
 80033b8:	0800341d 	.word	0x0800341d
 80033bc:	080033e1 	.word	0x080033e1
 80033c0:	0800341d 	.word	0x0800341d
 80033c4:	080033e7 	.word	0x080033e7
 80033c8:	0800341d 	.word	0x0800341d
 80033cc:	0800341d 	.word	0x0800341d
 80033d0:	0800341d 	.word	0x0800341d
 80033d4:	08003415 	.word	0x08003415
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d8:	f7ff f930 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 80033dc:	6178      	str	r0, [r7, #20]
        break;
 80033de:	e022      	b.n	8003426 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <UART_SetConfig+0x310>)
 80033e2:	617b      	str	r3, [r7, #20]
        break;
 80033e4:	e01f      	b.n	8003426 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e6:	f7ff f8bb 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 80033ea:	6178      	str	r0, [r7, #20]
        break;
 80033ec:	e01b      	b.n	8003426 <UART_SetConfig+0x326>
 80033ee:	bf00      	nop
 80033f0:	cfff69f3 	.word	0xcfff69f3
 80033f4:	40008000 	.word	0x40008000
 80033f8:	40013800 	.word	0x40013800
 80033fc:	40021000 	.word	0x40021000
 8003400:	40004400 	.word	0x40004400
 8003404:	40004800 	.word	0x40004800
 8003408:	40004c00 	.word	0x40004c00
 800340c:	40005000 	.word	0x40005000
 8003410:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003418:	617b      	str	r3, [r7, #20]
        break;
 800341a:	e004      	b.n	8003426 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	76bb      	strb	r3, [r7, #26]
        break;
 8003424:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 811b 	beq.w	8003664 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	4a96      	ldr	r2, [pc, #600]	; (800368c <UART_SetConfig+0x58c>)
 8003434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003438:	461a      	mov	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003440:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	429a      	cmp	r2, r3
 8003450:	d305      	bcc.n	800345e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	d902      	bls.n	8003464 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	76bb      	strb	r3, [r7, #26]
 8003462:	e0ff      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	4618      	mov	r0, r3
 8003468:	f04f 0100 	mov.w	r1, #0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	4a86      	ldr	r2, [pc, #536]	; (800368c <UART_SetConfig+0x58c>)
 8003472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003476:	b29a      	uxth	r2, r3
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	f7fd f9ea 	bl	8000854 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	020b      	lsls	r3, r1, #8
 8003492:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003496:	0202      	lsls	r2, r0, #8
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	6849      	ldr	r1, [r1, #4]
 800349c:	0849      	lsrs	r1, r1, #1
 800349e:	4608      	mov	r0, r1
 80034a0:	f04f 0100 	mov.w	r1, #0
 80034a4:	1814      	adds	r4, r2, r0
 80034a6:	eb43 0501 	adc.w	r5, r3, r1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	461a      	mov	r2, r3
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	4620      	mov	r0, r4
 80034b6:	4629      	mov	r1, r5
 80034b8:	f7fd f9cc 	bl	8000854 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4613      	mov	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ca:	d308      	bcc.n	80034de <UART_SetConfig+0x3de>
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d2:	d204      	bcs.n	80034de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	e0c2      	b.n	8003664 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	76bb      	strb	r3, [r7, #26]
 80034e2:	e0bf      	b.n	8003664 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ec:	d165      	bne.n	80035ba <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80034ee:	7efb      	ldrb	r3, [r7, #27]
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d828      	bhi.n	8003546 <UART_SetConfig+0x446>
 80034f4:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <UART_SetConfig+0x3fc>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	08003521 	.word	0x08003521
 8003500:	08003529 	.word	0x08003529
 8003504:	08003531 	.word	0x08003531
 8003508:	08003547 	.word	0x08003547
 800350c:	08003537 	.word	0x08003537
 8003510:	08003547 	.word	0x08003547
 8003514:	08003547 	.word	0x08003547
 8003518:	08003547 	.word	0x08003547
 800351c:	0800353f 	.word	0x0800353f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003520:	f7ff f88c 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8003524:	6178      	str	r0, [r7, #20]
        break;
 8003526:	e013      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003528:	f7ff f89e 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 800352c:	6178      	str	r0, [r7, #20]
        break;
 800352e:	e00f      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003530:	4b57      	ldr	r3, [pc, #348]	; (8003690 <UART_SetConfig+0x590>)
 8003532:	617b      	str	r3, [r7, #20]
        break;
 8003534:	e00c      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003536:	f7ff f813 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 800353a:	6178      	str	r0, [r7, #20]
        break;
 800353c:	e008      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003542:	617b      	str	r3, [r7, #20]
        break;
 8003544:	e004      	b.n	8003550 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	76bb      	strb	r3, [r7, #26]
        break;
 800354e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8086 	beq.w	8003664 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	4a4b      	ldr	r2, [pc, #300]	; (800368c <UART_SetConfig+0x58c>)
 800355e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003562:	461a      	mov	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fbb3 f3f2 	udiv	r3, r3, r2
 800356a:	005a      	lsls	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	441a      	add	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	fbb2 f3f3 	udiv	r3, r2, r3
 800357c:	b29b      	uxth	r3, r3
 800357e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	2b0f      	cmp	r3, #15
 8003584:	d916      	bls.n	80035b4 <UART_SetConfig+0x4b4>
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	d212      	bcs.n	80035b4 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	b29b      	uxth	r3, r3
 8003592:	f023 030f 	bic.w	r3, r3, #15
 8003596:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	085b      	lsrs	r3, r3, #1
 800359c:	b29b      	uxth	r3, r3
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	89fb      	ldrh	r3, [r7, #14]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	89fa      	ldrh	r2, [r7, #14]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	e057      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	76bb      	strb	r3, [r7, #26]
 80035b8:	e054      	b.n	8003664 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035ba:	7efb      	ldrb	r3, [r7, #27]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d828      	bhi.n	8003612 <UART_SetConfig+0x512>
 80035c0:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <UART_SetConfig+0x4c8>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035ed 	.word	0x080035ed
 80035cc:	080035f5 	.word	0x080035f5
 80035d0:	080035fd 	.word	0x080035fd
 80035d4:	08003613 	.word	0x08003613
 80035d8:	08003603 	.word	0x08003603
 80035dc:	08003613 	.word	0x08003613
 80035e0:	08003613 	.word	0x08003613
 80035e4:	08003613 	.word	0x08003613
 80035e8:	0800360b 	.word	0x0800360b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ec:	f7ff f826 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 80035f0:	6178      	str	r0, [r7, #20]
        break;
 80035f2:	e013      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035f4:	f7ff f838 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 80035f8:	6178      	str	r0, [r7, #20]
        break;
 80035fa:	e00f      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035fc:	4b24      	ldr	r3, [pc, #144]	; (8003690 <UART_SetConfig+0x590>)
 80035fe:	617b      	str	r3, [r7, #20]
        break;
 8003600:	e00c      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003602:	f7fe ffad 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8003606:	6178      	str	r0, [r7, #20]
        break;
 8003608:	e008      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800360a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360e:	617b      	str	r3, [r7, #20]
        break;
 8003610:	e004      	b.n	800361c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	76bb      	strb	r3, [r7, #26]
        break;
 800361a:	bf00      	nop
    }

    if (pclk != 0U)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d020      	beq.n	8003664 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	4a19      	ldr	r2, [pc, #100]	; (800368c <UART_SetConfig+0x58c>)
 8003628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800362c:	461a      	mov	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	fbb3 f2f2 	udiv	r2, r3, r2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	085b      	lsrs	r3, r3, #1
 800363a:	441a      	add	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	b29b      	uxth	r3, r3
 8003646:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2b0f      	cmp	r3, #15
 800364c:	d908      	bls.n	8003660 <UART_SetConfig+0x560>
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003654:	d204      	bcs.n	8003660 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	e001      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003680:	7ebb      	ldrb	r3, [r7, #26]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3720      	adds	r7, #32
 8003686:	46bd      	mov	sp, r7
 8003688:	bdb0      	pop	{r4, r5, r7, pc}
 800368a:	bf00      	nop
 800368c:	080281a0 	.word	0x080281a0
 8003690:	00f42400 	.word	0x00f42400

08003694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01a      	beq.n	80037aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003792:	d10a      	bne.n	80037aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
  }
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af02      	add	r7, sp, #8
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037e8:	f7fd fc5e 	bl	80010a8 <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d10e      	bne.n	800381a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f82f 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e025      	b.n	8003866 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b04      	cmp	r3, #4
 8003826:	d10e      	bne.n	8003846 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f819 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e00f      	b.n	8003866 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	4613      	mov	r3, r2
 800387c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387e:	e062      	b.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d05e      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003888:	f7fd fc0e 	bl	80010a8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	429a      	cmp	r2, r3
 8003896:	d302      	bcc.n	800389e <UART_WaitOnFlagUntilTimeout+0x30>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11d      	bne.n	80038da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e045      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d02e      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f6:	d126      	bne.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003900:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003910:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e00f      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4013      	ands	r3, r2
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	429a      	cmp	r2, r3
 8003962:	d08d      	beq.n	8003880 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003984:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d107      	bne.n	80039b2 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0210 	bic.w	r2, r2, #16
 80039b0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	671a      	str	r2, [r3, #112]	; 0x70
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff fb6f 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a14:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fb4b 	bl	80030c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_UARTEx_DisableFifoMode+0x16>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e027      	b.n	8003ad4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2224      	movs	r2, #36	; 0x24
 8003a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003ab2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e02d      	b.n	8003b54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	; 0x24
 8003b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f84f 	bl	8003bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e02d      	b.n	8003bd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	; 0x24
 8003b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f811 	bl	8003bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d108      	bne.n	8003bfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003bf8:	e031      	b.n	8003c5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003bfe:	2308      	movs	r3, #8
 8003c00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	0e5b      	lsrs	r3, r3, #25
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	0f5b      	lsrs	r3, r3, #29
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c22:	7bbb      	ldrb	r3, [r7, #14]
 8003c24:	7b3a      	ldrb	r2, [r7, #12]
 8003c26:	4911      	ldr	r1, [pc, #68]	; (8003c6c <UARTEx_SetNbDataToProcess+0x94>)
 8003c28:	5c8a      	ldrb	r2, [r1, r2]
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c2e:	7b3a      	ldrb	r2, [r7, #12]
 8003c30:	490f      	ldr	r1, [pc, #60]	; (8003c70 <UARTEx_SetNbDataToProcess+0x98>)
 8003c32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c34:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	7b7a      	ldrb	r2, [r7, #13]
 8003c44:	4909      	ldr	r1, [pc, #36]	; (8003c6c <UARTEx_SetNbDataToProcess+0x94>)
 8003c46:	5c8a      	ldrb	r2, [r1, r2]
 8003c48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c4c:	7b7a      	ldrb	r2, [r7, #13]
 8003c4e:	4908      	ldr	r1, [pc, #32]	; (8003c70 <UARTEx_SetNbDataToProcess+0x98>)
 8003c50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c52:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	080281b8 	.word	0x080281b8
 8003c70:	080281c0 	.word	0x080281c0

08003c74 <ESP_Init>:
 */
int32_t ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 	 uint8_t 	(*UART_Receive)(void),
				 uint32_t 	(*getTick)(void),
				 uint32_t	UART_Buffer_Size)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01d      	beq.n	8003cc4 <ESP_Init+0x50>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d01a      	beq.n	8003cc4 <ESP_Init+0x50>
	   UART_Receive	!= NULL			&&
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d017      	beq.n	8003cc4 <ESP_Init+0x50>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003c94:	4a0e      	ldr	r2, [pc, #56]	; (8003cd0 <ESP_Init+0x5c>)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 8003c9a:	4a0d      	ldr	r2, [pc, #52]	; (8003cd0 <ESP_Init+0x5c>)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003ca0:	4a0b      	ldr	r2, [pc, #44]	; (8003cd0 <ESP_Init+0x5c>)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 8003ca6:	6838      	ldr	r0, [r7, #0]
 8003ca8:	f000 fbc0 	bl	800442c <ringBuffer_init>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <ESP_Init+0x60>)
 8003cb0:	6013      	str	r3, [r2, #0]

		if(rx_buffer != NULL)
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <ESP_Init+0x60>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <ESP_Init+0x4a>
			return 1;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e004      	b.n	8003cc8 <ESP_Init+0x54>
		else
			return -1;
 8003cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc2:	e001      	b.n	8003cc8 <ESP_Init+0x54>
	}
	else
	{
		return -1;
 8003cc4:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000360 	.word	0x20000360
 8003cd4:	2000037c 	.word	0x2000037c

08003cd8 <Send_AT_Command>:
 * 			as a function pointer in the ESP_Init function to send AT commands over UART.
 * @param 	cmd is a string containing the AT command.
 * @retval	None.
 */
void Send_AT_Command(char *cmd)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003ce0:	4b03      	ldr	r3, [pc, #12]	; (8003cf0 <Send_AT_Command+0x18>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4798      	blx	r3
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000360 	.word	0x20000360

08003cf4 <ESP_UART_ReceiveHandler>:
 * 			this function in the UART ISR.
 * @param 	None.
 * @retval	None.
 */
void ESP_UART_ReceiveHandler(void)
{
 8003cf4:	b598      	push	{r3, r4, r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
	ringBuffer_push(rx_buffer, ESP8266.UART_Receive());
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <ESP_UART_ReceiveHandler+0x1c>)
 8003cfa:	681c      	ldr	r4, [r3, #0]
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <ESP_UART_ReceiveHandler+0x20>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4798      	blx	r3
 8003d02:	4603      	mov	r3, r0
 8003d04:	4619      	mov	r1, r3
 8003d06:	4620      	mov	r0, r4
 8003d08:	f000 fbd1 	bl	80044ae <ringBuffer_push>
}
 8003d0c:	bf00      	nop
 8003d0e:	bd98      	pop	{r3, r4, r7, pc}
 8003d10:	2000037c 	.word	0x2000037c
 8003d14:	20000360 	.word	0x20000360

08003d18 <Read_Response>:
 * @param 	response is a string is checked if it is in the ring buffer.
 * @retval	1: There is a string passed as a parameter in the ring buffer.
 * @retval	0: There is no string passed as a parameter in the ring buffer.
 */
uint32_t Read_Response(char * response)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <Read_Response+0x20>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fc4b 	bl	80045c2 <ringBuffer_lookFor>
 8003d2c:	4603      	mov	r3, r0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	2000037c 	.word	0x2000037c

08003d3c <Wait_Response>:
 * @retval	FOUND			:There is a string passed as a parameter in the ring buffer.
 * @retval	TIMEOUT_ERROR	:It returns when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Wait_Response(char* response, uint32_t timeout)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 8003d46:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <Wait_Response+0x74>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d108      	bne.n	8003d60 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 8003d4e:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <Wait_Response+0x78>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	4798      	blx	r3
 8003d54:	4603      	mov	r3, r0
 8003d56:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <Wait_Response+0x7c>)
 8003d58:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 8003d5a:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <Wait_Response+0x74>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 8003d60:	4b16      	ldr	r3, [pc, #88]	; (8003dbc <Wait_Response+0x80>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fc2b 	bl	80045c2 <ringBuffer_lookFor>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <Wait_Response+0x46>
	{
		firstCall = 0;
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <Wait_Response+0x74>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <Wait_Response+0x7c>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
		return FOUND;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e012      	b.n	8003da8 <Wait_Response+0x6c>
	}
	else if(ESP8266.getTick() - time >= timeout)
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <Wait_Response+0x78>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	4798      	blx	r3
 8003d88:	4602      	mov	r2, r0
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <Wait_Response+0x7c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d807      	bhi.n	8003da6 <Wait_Response+0x6a>
	{
		firstCall = 0;
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <Wait_Response+0x74>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <Wait_Response+0x7c>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <Wait_Response+0x6c>
	}
	else
	{
		return IDLE;
 8003da6:	2304      	movs	r3, #4
	}

}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	2000036c 	.word	0x2000036c
 8003db4:	20000360 	.word	0x20000360
 8003db8:	20000370 	.word	0x20000370
 8003dbc:	2000037c 	.word	0x2000037c

08003dc0 <Connect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_Wifi(char* ssid, char* password)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b098      	sub	sp, #96	; 0x60
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
	char *command_buffer[3] =
 8003dca:	4a16      	ldr	r2, [pc, #88]	; (8003e24 <Connect_Wifi+0x64>)
 8003dcc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_CWMODE_STATION,
		AT_CWQAP,
		""
	};
	char *response_buffer[3] =
 8003dd6:	4a14      	ldr	r2, [pc, #80]	; (8003e28 <Connect_Wifi+0x68>)
 8003dd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ddc:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};
	Status response_state = IDLE;
 8003de2:	2304      	movs	r3, #4
 8003de4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char wifi_buffer[50];

	sprintf(wifi_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003de8:	f107 0008 	add.w	r0, r7, #8
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a0e      	ldr	r2, [pc, #56]	; (8003e2c <Connect_Wifi+0x6c>)
 8003df4:	490e      	ldr	r1, [pc, #56]	; (8003e30 <Connect_Wifi+0x70>)
 8003df6:	f01d feef 	bl	8021bd8 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003dfa:	f107 0308 	add.w	r3, r7, #8
 8003dfe:	653b      	str	r3, [r7, #80]	; 0x50

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003e00:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003e04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e08:	2203      	movs	r2, #3
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f82e 	bl	8003e6c <Command_Process>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	return response_state;
 8003e16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3758      	adds	r7, #88	; 0x58
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	08024734 	.word	0x08024734
 8003e28:	08024740 	.word	0x08024740
 8003e2c:	08024718 	.word	0x08024718
 8003e30:	08024724 	.word	0x08024724

08003e34 <Disconnect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about disconnect operation.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_Wifi(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
	char *command_buffer[1] = { AT_CWQAP };
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <Disconnect_Wifi+0x30>)
 8003e3c:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <Disconnect_Wifi+0x34>)
 8003e40:	607b      	str	r3, [r7, #4]

	Status response_state = IDLE;
 8003e42:	2304      	movs	r3, #4
 8003e44:	73fb      	strb	r3, [r7, #15]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8003e46:	1d39      	adds	r1, r7, #4
 8003e48:	f107 0308 	add.w	r3, r7, #8
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f80c 	bl	8003e6c <Command_Process>
 8003e54:	4603      	mov	r3, r0
 8003e56:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8003e58:	7bfb      	ldrb	r3, [r7, #15]

}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	080246e8 	.word	0x080246e8
 8003e68:	080246f8 	.word	0x080246f8

08003e6c <Command_Process>:
 * @retval	STATUS_ERROR	:It returns when ESP send the ERROR message or number of commands is equal zero.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Command_Process(char **commandArray, char **responseArray, uint8_t numberOfCommands)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	4613      	mov	r3, r2
 8003e78:	71fb      	strb	r3, [r7, #7]
	static uint8_t commandFlag  = 1, currentCommand = 0;
	Status response;

	if(!numberOfCommands || currentCommand >= numberOfCommands)
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d004      	beq.n	8003e8a <Command_Process+0x1e>
 8003e80:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <Command_Process+0x104>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	79fa      	ldrb	r2, [r7, #7]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d806      	bhi.n	8003e98 <Command_Process+0x2c>
	{
		ringBuffer_flush(rx_buffer);
 8003e8a:	4b3a      	ldr	r3, [pc, #232]	; (8003f74 <Command_Process+0x108>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fb61 	bl	8004556 <ringBuffer_flush>
		return STATUS_ERROR;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e067      	b.n	8003f68 <Command_Process+0xfc>
	}
	else
	{
		if(commandFlag)
 8003e98:	4b37      	ldr	r3, [pc, #220]	; (8003f78 <Command_Process+0x10c>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00b      	beq.n	8003eb8 <Command_Process+0x4c>
		{
			Send_AT_Command(commandArray[currentCommand]);
 8003ea0:	4b33      	ldr	r3, [pc, #204]	; (8003f70 <Command_Process+0x104>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff ff13 	bl	8003cd8 <Send_AT_Command>
			commandFlag = 0;
 8003eb2:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <Command_Process+0x10c>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
		}
			response = Wait_Response(responseArray[currentCommand], TIMEOUT);
 8003eb8:	4b2d      	ldr	r3, [pc, #180]	; (8003f70 <Command_Process+0x104>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f242 7110 	movw	r1, #10000	; 0x2710
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff ff37 	bl	8003d3c <Wait_Response>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	75fb      	strb	r3, [r7, #23]

			if(Read_Response("ERROR"))
 8003ed2:	482a      	ldr	r0, [pc, #168]	; (8003f7c <Command_Process+0x110>)
 8003ed4:	f7ff ff20 	bl	8003d18 <Read_Response>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00c      	beq.n	8003ef8 <Command_Process+0x8c>
			{
				commandFlag = 1;
 8003ede:	4b26      	ldr	r3, [pc, #152]	; (8003f78 <Command_Process+0x10c>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003ee4:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <Command_Process+0x104>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003eea:	4b22      	ldr	r3, [pc, #136]	; (8003f74 <Command_Process+0x108>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fb31 	bl	8004556 <ringBuffer_flush>
				return STATUS_ERROR;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e037      	b.n	8003f68 <Command_Process+0xfc>
			}
			else if(response == IDLE)
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d101      	bne.n	8003f02 <Command_Process+0x96>
			{
				return response;
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
 8003f00:	e032      	b.n	8003f68 <Command_Process+0xfc>
			}
			else if(response == FOUND)
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d123      	bne.n	8003f50 <Command_Process+0xe4>
			{
				if(currentCommand == (numberOfCommands-1))
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <Command_Process+0x104>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d10c      	bne.n	8003f30 <Command_Process+0xc4>
				{
					commandFlag = 1;
 8003f16:	4b18      	ldr	r3, [pc, #96]	; (8003f78 <Command_Process+0x10c>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]
					currentCommand = 0;
 8003f1c:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <Command_Process+0x104>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003f22:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <Command_Process+0x108>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fb15 	bl	8004556 <ringBuffer_flush>
					return STATUS_OK;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e01b      	b.n	8003f68 <Command_Process+0xfc>
				}
				else
				{
					commandFlag = 1;
 8003f30:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <Command_Process+0x10c>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
					currentCommand += 1;
 8003f36:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <Command_Process+0x104>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <Command_Process+0x104>)
 8003f40:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003f42:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <Command_Process+0x108>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fb05 	bl	8004556 <ringBuffer_flush>
					return IDLE;
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	e00b      	b.n	8003f68 <Command_Process+0xfc>
				}

			}
			else
			{
				commandFlag = 1;
 8003f50:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <Command_Process+0x10c>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <Command_Process+0x104>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003f5c:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <Command_Process+0x108>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 faf8 	bl	8004556 <ringBuffer_flush>
				return response;
 8003f66:	7dfb      	ldrb	r3, [r7, #23]
			}
	}


}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000374 	.word	0x20000374
 8003f74:	2000037c 	.word	0x2000037c
 8003f78:	20000010 	.word	0x20000010
 8003f7c:	0802474c 	.word	0x0802474c

08003f80 <Connect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_TCP_Server(char* ip, char* port)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b0a2      	sub	sp, #136	; 0x88
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
	Status response_state = IDLE;
 8003f8a:	2304      	movs	r3, #4
 8003f8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	char *command_buffer[2] =
 8003f90:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <Connect_TCP_Server+0x68>)
 8003f92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f9a:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		AT_CIPMUX_SINGLE,
		""
	};

	char *response_buffer[2] =
 8003f9e:	4a13      	ldr	r2, [pc, #76]	; (8003fec <Connect_TCP_Server+0x6c>)
 8003fa0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fa8:	e883 0003 	stmia.w	r3, {r0, r1}
		AT_RESPONSE_OK
	};

	char wifi_buffer[100];

	sprintf(wifi_buffer,"%s\"%s\",%s\r\n",AT_CIPSTART_TCP,ip,port);
 8003fac:	f107 0008 	add.w	r0, r7, #8
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a0e      	ldr	r2, [pc, #56]	; (8003ff0 <Connect_TCP_Server+0x70>)
 8003fb8:	490e      	ldr	r1, [pc, #56]	; (8003ff4 <Connect_TCP_Server+0x74>)
 8003fba:	f01d fe0d 	bl	8021bd8 <siprintf>

	command_buffer[1] = wifi_buffer;
 8003fbe:	f107 0308 	add.w	r3, r7, #8
 8003fc2:	67bb      	str	r3, [r7, #120]	; 0x78

	response_state = Command_Process(command_buffer, response_buffer, 2);
 8003fc4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003fc8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003fcc:	2202      	movs	r2, #2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff ff4c 	bl	8003e6c <Command_Process>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	return response_state;
 8003fda:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3780      	adds	r7, #128	; 0x80
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	08024774 	.word	0x08024774
 8003fec:	0802477c 	.word	0x0802477c
 8003ff0:	08024754 	.word	0x08024754
 8003ff4:	08024768 	.word	0x08024768

08003ff8 <Disconnect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about disconnection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_TCP_Server(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
	Status response_state = IDLE;
 8003ffe:	2304      	movs	r3, #4
 8004000:	73fb      	strb	r3, [r7, #15]

	char *command_buffer[1] = { AT_CIPCLOSE };
 8004002:	4b09      	ldr	r3, [pc, #36]	; (8004028 <Disconnect_TCP_Server+0x30>)
 8004004:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <Disconnect_TCP_Server+0x34>)
 8004008:	607b      	str	r3, [r7, #4]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 800400a:	1d39      	adds	r1, r7, #4
 800400c:	f107 0308 	add.w	r3, r7, #8
 8004010:	2201      	movs	r2, #1
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff ff2a 	bl	8003e6c <Command_Process>
 8004018:	4603      	mov	r3, r0
 800401a:	73fb      	strb	r3, [r7, #15]

	return response_state;
 800401c:	7bfb      	ldrb	r3, [r7, #15]

}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	08024784 	.word	0x08024784
 800402c:	080246f8 	.word	0x080246f8

08004030 <Send_TCP_Message>:
 * @retval	STATUS_ERROR	:There is an error about sending message.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Send_TCP_Message(char* message)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b096      	sub	sp, #88	; 0x58
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
	Status response_state = STATUS_ERROR;
 8004038:	2303      	movs	r3, #3
 800403a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint32_t length=0;
 800403e:	2300      	movs	r3, #0
 8004040:	653b      	str	r3, [r7, #80]	; 0x50

	length = strlen(message);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fc f8fa 	bl	800023c <strlen>
 8004048:	6538      	str	r0, [r7, #80]	; 0x50

	char cipSendBuffer[50];

	sprintf(cipSendBuffer,"%s%ld\r\n",AT_CIPSEND,length);
 800404a:	f107 001c 	add.w	r0, r7, #28
 800404e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004050:	4a10      	ldr	r2, [pc, #64]	; (8004094 <Send_TCP_Message+0x64>)
 8004052:	4911      	ldr	r1, [pc, #68]	; (8004098 <Send_TCP_Message+0x68>)
 8004054:	f01d fdc0 	bl	8021bd8 <siprintf>

	char *command_buffer[2];

	command_buffer[0] = cipSendBuffer;
 8004058:	f107 031c 	add.w	r3, r7, #28
 800405c:	617b      	str	r3, [r7, #20]
	command_buffer[1] = message;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	61bb      	str	r3, [r7, #24]

	char *response_buffer[2] =
 8004062:	4a0e      	ldr	r2, [pc, #56]	; (800409c <Send_TCP_Message+0x6c>)
 8004064:	f107 030c 	add.w	r3, r7, #12
 8004068:	e892 0003 	ldmia.w	r2, {r0, r1}
 800406c:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	response_state = Command_Process(command_buffer, response_buffer, 2);
 8004070:	f107 010c 	add.w	r1, r7, #12
 8004074:	f107 0314 	add.w	r3, r7, #20
 8004078:	2202      	movs	r2, #2
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fef6 	bl	8003e6c <Command_Process>
 8004080:	4603      	mov	r3, r0
 8004082:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	return response_state;
 8004086:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57

}
 800408a:	4618      	mov	r0, r3
 800408c:	3758      	adds	r7, #88	; 0x58
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	08024794 	.word	0x08024794
 8004098:	080247a0 	.word	0x080247a0
 800409c:	080247a8 	.word	0x080247a8

080040a0 <Read_TCP_Message>:
 * @param 	receviedMessage : If a message is received, it is assigned to receivedMessage.
 * @retval	STATUS_OK		:The message has been read successfully.
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 */
Status Read_TCP_Message(char* receivedMessage)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

	char *substring = strstr((char*)rx_buffer->buffer,"+IPD,");
 80040a8:	4b2d      	ldr	r3, [pc, #180]	; (8004160 <Read_TCP_Message+0xc0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	492d      	ldr	r1, [pc, #180]	; (8004164 <Read_TCP_Message+0xc4>)
 80040b0:	4618      	mov	r0, r3
 80040b2:	f01e fb5b 	bl	802276c <strstr>
 80040b6:	6138      	str	r0, [r7, #16]

	char messageLengthString[3];

	uint32_t messageLength=0,index=0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]


	if(substring != NULL)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d042      	beq.n	800414c <Read_TCP_Message+0xac>
	{
		for(uint8_t i=0;i<3;i++)
 80040c6:	2300      	movs	r3, #0
 80040c8:	76fb      	strb	r3, [r7, #27]
 80040ca:	e017      	b.n	80040fc <Read_TCP_Message+0x5c>
		{
			if(*(substring+5+i) == ':')
 80040cc:	7efb      	ldrb	r3, [r7, #27]
 80040ce:	3305      	adds	r3, #5
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4413      	add	r3, r2
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b3a      	cmp	r3, #58	; 0x3a
 80040d8:	d014      	beq.n	8004104 <Read_TCP_Message+0x64>
				break;
			messageLengthString[i] = *(substring+5+i);
 80040da:	7efb      	ldrb	r3, [r7, #27]
 80040dc:	3305      	adds	r3, #5
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	441a      	add	r2, r3
 80040e2:	7efb      	ldrb	r3, [r7, #27]
 80040e4:	7812      	ldrb	r2, [r2, #0]
 80040e6:	f107 0120 	add.w	r1, r7, #32
 80040ea:	440b      	add	r3, r1
 80040ec:	f803 2c18 	strb.w	r2, [r3, #-24]
			index += 1;
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	3301      	adds	r3, #1
 80040f4:	61fb      	str	r3, [r7, #28]
		for(uint8_t i=0;i<3;i++)
 80040f6:	7efb      	ldrb	r3, [r7, #27]
 80040f8:	3301      	adds	r3, #1
 80040fa:	76fb      	strb	r3, [r7, #27]
 80040fc:	7efb      	ldrb	r3, [r7, #27]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d9e4      	bls.n	80040cc <Read_TCP_Message+0x2c>
 8004102:	e000      	b.n	8004106 <Read_TCP_Message+0x66>
				break;
 8004104:	bf00      	nop

		}

		messageLength = atoi(messageLengthString);
 8004106:	f107 0308 	add.w	r3, r7, #8
 800410a:	4618      	mov	r0, r3
 800410c:	f01c fdc5 	bl	8020c9a <atoi>
 8004110:	4603      	mov	r3, r0
 8004112:	60fb      	str	r3, [r7, #12]

		for(uint32_t i=0;i<messageLength;i++)
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	e00d      	b.n	8004136 <Read_TCP_Message+0x96>
		{
			receivedMessage[i] = *(substring+6+index+i);
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	4413      	add	r3, r2
 8004120:	3306      	adds	r3, #6
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	441a      	add	r2, r3
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	440b      	add	r3, r1
 800412c:	7812      	ldrb	r2, [r2, #0]
 800412e:	701a      	strb	r2, [r3, #0]
		for(uint32_t i=0;i<messageLength;i++)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	3301      	adds	r3, #1
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	429a      	cmp	r2, r3
 800413c:	d3ed      	bcc.n	800411a <Read_TCP_Message+0x7a>
		}
		ringBuffer_flush(rx_buffer);
 800413e:	4b08      	ldr	r3, [pc, #32]	; (8004160 <Read_TCP_Message+0xc0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fa07 	bl	8004556 <ringBuffer_flush>
		return STATUS_OK;
 8004148:	2302      	movs	r3, #2
 800414a:	e005      	b.n	8004158 <Read_TCP_Message+0xb8>


	}
	else
	{
		ringBuffer_flush(rx_buffer);
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <Read_TCP_Message+0xc0>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fa00 	bl	8004556 <ringBuffer_flush>
		return STATUS_ERROR;
 8004156:	2303      	movs	r3, #3
	}



}
 8004158:	4618      	mov	r0, r3
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	2000037c 	.word	0x2000037c
 8004164:	080247b0 	.word	0x080247b0

08004168 <Wait_TCP_Message>:
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE
 */
Status Wait_TCP_Message(char* receivedMessage, uint32_t timeout)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
	static uint8_t firstCall = 1;
	static uint32_t time = 0;

	if(firstCall)
 8004172:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <Wait_TCP_Message+0x70>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <Wait_TCP_Message+0x24>
	{
		time = ESP8266.getTick();
 800417a:	4b18      	ldr	r3, [pc, #96]	; (80041dc <Wait_TCP_Message+0x74>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	4798      	blx	r3
 8004180:	4603      	mov	r3, r0
 8004182:	4a17      	ldr	r2, [pc, #92]	; (80041e0 <Wait_TCP_Message+0x78>)
 8004184:	6013      	str	r3, [r2, #0]
		firstCall = 0;
 8004186:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <Wait_TCP_Message+0x70>)
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
	}

	if(Read_TCP_Message(receivedMessage) == STATUS_OK)
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff ff87 	bl	80040a0 <Read_TCP_Message>
 8004192:	4603      	mov	r3, r0
 8004194:	2b02      	cmp	r3, #2
 8004196:	d107      	bne.n	80041a8 <Wait_TCP_Message+0x40>
	{
		time = 0;
 8004198:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <Wait_TCP_Message+0x78>)
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 800419e:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <Wait_TCP_Message+0x70>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
 80041a4:	2302      	movs	r3, #2
 80041a6:	e012      	b.n	80041ce <Wait_TCP_Message+0x66>
	}
	else if(ESP8266.getTick()-time >= timeout)
 80041a8:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <Wait_TCP_Message+0x74>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	4798      	blx	r3
 80041ae:	4602      	mov	r2, r0
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <Wait_TCP_Message+0x78>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d807      	bhi.n	80041cc <Wait_TCP_Message+0x64>
	{
		time = 0;
 80041bc:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <Wait_TCP_Message+0x78>)
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 80041c2:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <Wait_TCP_Message+0x70>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	701a      	strb	r2, [r3, #0]
		return TIMEOUT_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <Wait_TCP_Message+0x66>
	}
	else
		return IDLE;
 80041cc:	2304      	movs	r3, #4

}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000011 	.word	0x20000011
 80041dc:	20000360 	.word	0x20000360
 80041e0:	20000378 	.word	0x20000378

080041e4 <mqtt_encode_packet>:

#include <string.h>
#include "mqtt.h"


int32_t mqtt_encode_packet(uint8_t *buffer, void *packet, mqtt_packet_types packetType ){
 80041e4:	b480      	push	{r7}
 80041e6:	b08b      	sub	sp, #44	; 0x2c
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	4613      	mov	r3, r2
 80041f0:	71fb      	strb	r3, [r7, #7]

	if(packetType == CONNECT_PACKET)
 80041f2:	79fb      	ldrb	r3, [r7, #7]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f040 80a4 	bne.w	8004342 <mqtt_encode_packet+0x15e>
	{
		int32_t index = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24

		MQTT_Connect_Packet *connectPacket = (MQTT_Connect_Packet*)packet;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	613b      	str	r3, [r7, #16]

		buffer[index++] = connectPacket->ConnectByte;
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	627a      	str	r2, [r7, #36]	; 0x24
 8004208:	461a      	mov	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4413      	add	r3, r2
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	7812      	ldrb	r2, [r2, #0]
 8004212:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->RemainLength;
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	627a      	str	r2, [r7, #36]	; 0x24
 800421a:	461a      	mov	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4413      	add	r3, r2
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	7852      	ldrb	r2, [r2, #1]
 8004224:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->ProtocolNameLength>>8;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	885b      	ldrh	r3, [r3, #2]
 800422a:	0a1b      	lsrs	r3, r3, #8
 800422c:	b299      	uxth	r1, r3
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	627a      	str	r2, [r7, #36]	; 0x24
 8004234:	461a      	mov	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4413      	add	r3, r2
 800423a:	b2ca      	uxtb	r2, r1
 800423c:	701a      	strb	r2, [r3, #0]
		buffer[index++]= connectPacket->ProtocolNameLength & 0xFF;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	8859      	ldrh	r1, [r3, #2]
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	627a      	str	r2, [r7, #36]	; 0x24
 8004248:	461a      	mov	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4413      	add	r3, r2
 800424e:	b2ca      	uxtb	r2, r1
 8004250:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ProtocolNameLength;i++)
 8004252:	2300      	movs	r3, #0
 8004254:	847b      	strh	r3, [r7, #34]	; 0x22
 8004256:	e013      	b.n	8004280 <mqtt_encode_packet+0x9c>
		{
			if(i==4)
 8004258:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800425a:	2b04      	cmp	r3, #4
 800425c:	d102      	bne.n	8004264 <mqtt_encode_packet+0x80>
				return -1;
 800425e:	f04f 33ff 	mov.w	r3, #4294967295
 8004262:	e0dd      	b.n	8004420 <mqtt_encode_packet+0x23c>
			buffer[index++] = connectPacket->ProtocolName[i];
 8004264:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	1c59      	adds	r1, r3, #1
 800426a:	6279      	str	r1, [r7, #36]	; 0x24
 800426c:	4619      	mov	r1, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	440b      	add	r3, r1
 8004272:	6939      	ldr	r1, [r7, #16]
 8004274:	440a      	add	r2, r1
 8004276:	7912      	ldrb	r2, [r2, #4]
 8004278:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ProtocolNameLength;i++)
 800427a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800427c:	3301      	adds	r3, #1
 800427e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	885b      	ldrh	r3, [r3, #2]
 8004284:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004286:	429a      	cmp	r2, r3
 8004288:	d3e6      	bcc.n	8004258 <mqtt_encode_packet+0x74>
		}
		buffer[index++] = connectPacket->Level;
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	627a      	str	r2, [r7, #36]	; 0x24
 8004290:	461a      	mov	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4413      	add	r3, r2
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	7a12      	ldrb	r2, [r2, #8]
 800429a:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->Flag;
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	627a      	str	r2, [r7, #36]	; 0x24
 80042a2:	461a      	mov	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	7a52      	ldrb	r2, [r2, #9]
 80042ac:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->KeepAlive >> 8;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	895b      	ldrh	r3, [r3, #10]
 80042b2:	0a1b      	lsrs	r3, r3, #8
 80042b4:	b299      	uxth	r1, r3
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	627a      	str	r2, [r7, #36]	; 0x24
 80042bc:	461a      	mov	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4413      	add	r3, r2
 80042c2:	b2ca      	uxtb	r2, r1
 80042c4:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->KeepAlive & 0xFF;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	8959      	ldrh	r1, [r3, #10]
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	627a      	str	r2, [r7, #36]	; 0x24
 80042d0:	461a      	mov	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4413      	add	r3, r2
 80042d6:	b2ca      	uxtb	r2, r1
 80042d8:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->ClientIDLength >> 8;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	899b      	ldrh	r3, [r3, #12]
 80042de:	0a1b      	lsrs	r3, r3, #8
 80042e0:	b299      	uxth	r1, r3
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	627a      	str	r2, [r7, #36]	; 0x24
 80042e8:	461a      	mov	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4413      	add	r3, r2
 80042ee:	b2ca      	uxtb	r2, r1
 80042f0:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->ClientIDLength & 0xFF;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	8999      	ldrh	r1, [r3, #12]
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	627a      	str	r2, [r7, #36]	; 0x24
 80042fc:	461a      	mov	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4413      	add	r3, r2
 8004302:	b2ca      	uxtb	r2, r1
 8004304:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ClientIDLength;i++)
 8004306:	2300      	movs	r3, #0
 8004308:	843b      	strh	r3, [r7, #32]
 800430a:	e013      	b.n	8004334 <mqtt_encode_packet+0x150>
		{
			if(i == MAX_LENGTH_OF_CLIENT_ID)
 800430c:	8c3b      	ldrh	r3, [r7, #32]
 800430e:	2b32      	cmp	r3, #50	; 0x32
 8004310:	d102      	bne.n	8004318 <mqtt_encode_packet+0x134>
				return -1;
 8004312:	f04f 33ff 	mov.w	r3, #4294967295
 8004316:	e083      	b.n	8004420 <mqtt_encode_packet+0x23c>
			buffer[index++] = connectPacket->ClientID[i];
 8004318:	8c3a      	ldrh	r2, [r7, #32]
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	1c59      	adds	r1, r3, #1
 800431e:	6279      	str	r1, [r7, #36]	; 0x24
 8004320:	4619      	mov	r1, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	440b      	add	r3, r1
 8004326:	6939      	ldr	r1, [r7, #16]
 8004328:	440a      	add	r2, r1
 800432a:	7b92      	ldrb	r2, [r2, #14]
 800432c:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ClientIDLength;i++)
 800432e:	8c3b      	ldrh	r3, [r7, #32]
 8004330:	3301      	adds	r3, #1
 8004332:	843b      	strh	r3, [r7, #32]
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	899b      	ldrh	r3, [r3, #12]
 8004338:	8c3a      	ldrh	r2, [r7, #32]
 800433a:	429a      	cmp	r2, r3
 800433c:	d3e6      	bcc.n	800430c <mqtt_encode_packet+0x128>
		}

		return index;
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	e06e      	b.n	8004420 <mqtt_encode_packet+0x23c>

	}
	else if(packetType == SUBSCRIBE_PACKET)
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d169      	bne.n	800441c <mqtt_encode_packet+0x238>
	{

		int32_t index = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	61fb      	str	r3, [r7, #28]

		MQTT_Subscribe_Packet *subscribePacket = (MQTT_Subscribe_Packet*)packet;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	617b      	str	r3, [r7, #20]

		buffer[index++] = subscribePacket->subscribePacketByte;
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	61fa      	str	r2, [r7, #28]
 8004356:	461a      	mov	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4413      	add	r3, r2
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	7812      	ldrb	r2, [r2, #0]
 8004360:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->remainLength;
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	61fa      	str	r2, [r7, #28]
 8004368:	461a      	mov	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4413      	add	r3, r2
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	7852      	ldrb	r2, [r2, #1]
 8004372:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->packetID >> 8;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	885b      	ldrh	r3, [r3, #2]
 8004378:	0a1b      	lsrs	r3, r3, #8
 800437a:	b299      	uxth	r1, r3
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	61fa      	str	r2, [r7, #28]
 8004382:	461a      	mov	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	b2ca      	uxtb	r2, r1
 800438a:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->packetID & 0xFF;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	8859      	ldrh	r1, [r3, #2]
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	61fa      	str	r2, [r7, #28]
 8004396:	461a      	mov	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	b2ca      	uxtb	r2, r1
 800439e:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->topicLength >> 8;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	889b      	ldrh	r3, [r3, #4]
 80043a4:	0a1b      	lsrs	r3, r3, #8
 80043a6:	b299      	uxth	r1, r3
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	61fa      	str	r2, [r7, #28]
 80043ae:	461a      	mov	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4413      	add	r3, r2
 80043b4:	b2ca      	uxtb	r2, r1
 80043b6:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->topicLength & 0xFF;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	8899      	ldrh	r1, [r3, #4]
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	61fa      	str	r2, [r7, #28]
 80043c2:	461a      	mov	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	b2ca      	uxtb	r2, r1
 80043ca:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<subscribePacket->topicLength;i++)
 80043cc:	2300      	movs	r3, #0
 80043ce:	837b      	strh	r3, [r7, #26]
 80043d0:	e013      	b.n	80043fa <mqtt_encode_packet+0x216>
		{
			if(i == MAX_LENGTH_OF_TOPIC_NAME)
 80043d2:	8b7b      	ldrh	r3, [r7, #26]
 80043d4:	2b32      	cmp	r3, #50	; 0x32
 80043d6:	d102      	bne.n	80043de <mqtt_encode_packet+0x1fa>
				return -1;
 80043d8:	f04f 33ff 	mov.w	r3, #4294967295
 80043dc:	e020      	b.n	8004420 <mqtt_encode_packet+0x23c>
			buffer[index++] = subscribePacket->topic[i];
 80043de:	8b7a      	ldrh	r2, [r7, #26]
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	1c59      	adds	r1, r3, #1
 80043e4:	61f9      	str	r1, [r7, #28]
 80043e6:	4619      	mov	r1, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	440b      	add	r3, r1
 80043ec:	6979      	ldr	r1, [r7, #20]
 80043ee:	440a      	add	r2, r1
 80043f0:	7992      	ldrb	r2, [r2, #6]
 80043f2:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<subscribePacket->topicLength;i++)
 80043f4:	8b7b      	ldrh	r3, [r7, #26]
 80043f6:	3301      	adds	r3, #1
 80043f8:	837b      	strh	r3, [r7, #26]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	889b      	ldrh	r3, [r3, #4]
 80043fe:	8b7a      	ldrh	r2, [r7, #26]
 8004400:	429a      	cmp	r2, r3
 8004402:	d3e6      	bcc.n	80043d2 <mqtt_encode_packet+0x1ee>
		}

		buffer[index++] = subscribePacket->Qos;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	61fa      	str	r2, [r7, #28]
 800440a:	461a      	mov	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4413      	add	r3, r2
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8004416:	701a      	strb	r2, [r3, #0]

		return index;
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	e001      	b.n	8004420 <mqtt_encode_packet+0x23c>


	}
	return -1;
 800441c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004420:	4618      	mov	r0, r3
 8004422:	372c      	adds	r7, #44	; 0x2c
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8004434:	2010      	movs	r0, #16
 8004436:	f01d f9fd 	bl	8021834 <malloc>
 800443a:	4603      	mov	r3, r0
 800443c:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <ringBuffer_init+0x1c>
	{
		// Error
		return 0;
 8004444:	2300      	movs	r3, #0
 8004446:	e017      	b.n	8004478 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 800445a:	2101      	movs	r1, #1
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f01c fc21 	bl	8020ca4 <calloc>
 8004462:	4603      	mov	r3, r0
 8004464:	461a      	mov	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <ringBuffer_init+0x4a>
		{
			// Error
			return 0;
 8004472:	2300      	movs	r3, #0
 8004474:	e000      	b.n	8004478 <ringBuffer_init+0x4c>
		}

	return rBuf;
 8004476:	68fb      	ldr	r3, [r7, #12]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00b      	beq.n	80044a6 <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d004      	beq.n	80044a0 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	4618      	mov	r0, r3
 800449c:	f01d f9d2 	bl	8021844 <free>
		}
		free(buffer);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f01d f9cf 	bl	8021844 <free>
	}
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	460b      	mov	r3, r1
 80044b8:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d00c      	beq.n	80044e2 <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4413      	add	r3, r2
 80044d2:	78fa      	ldrb	r2, [r7, #3]
 80044d4:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 80044e0:	e009      	b.n	80044f6 <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4413      	add	r3, r2
 80044ec:	78fa      	ldrb	r2, [r7, #3]
 80044ee:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8004502:	b480      	push	{r7}
 8004504:	b085      	sub	sp, #20
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	3b01      	subs	r3, #1
 8004514:	429a      	cmp	r2, r3
 8004516:	d00d      	beq.n	8004534 <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	4413      	add	r3, r2
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	605a      	str	r2, [r3, #4]
		return data;
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	e00a      	b.n	800454a <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	4413      	add	r3, r2
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	605a      	str	r2, [r3, #4]
		return data;
 8004548:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,(uint8_t)0x00,(size_t)ringBuffer->size);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68d8      	ldr	r0, [r3, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	461a      	mov	r2, r3
 8004568:	2100      	movs	r1, #0
 800456a:	f01d f981 	bl	8021870 <memset>
	ringBuffer->head = ringBuffer->tail = 0;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	605a      	str	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	601a      	str	r2, [r3, #0]
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	e00a      	b.n	80045aa <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	4413      	add	r3, r2
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff ff85 	bl	80044ae <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3301      	adds	r3, #1
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	6838      	ldr	r0, [r7, #0]
 80045ac:	f7fb fe46 	bl	800023c <strlen>
 80045b0:	4602      	mov	r2, r0
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d8ed      	bhi.n	8004594 <ringBuffer_pushArray+0x10>
}
 80045b8:	bf00      	nop
 80045ba:	bf00      	nop
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * @retval	0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	6839      	ldr	r1, [r7, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f01e f8ca 	bl	802276c <strstr>
 80045d8:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <ringBuffer_lookFor+0x22>
		return 1;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <ringBuffer_lookFor+0x24>
	else
		return 0;
 80045e4:	2300      	movs	r3, #0

}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 800460e:	2032      	movs	r0, #50	; 0x32
 8004610:	f7ff ff0c 	bl	800442c <ringBuffer_init>
 8004614:	4602      	mov	r2, r0
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	605a      	str	r2, [r3, #4]

	}
 800461a:	bf00      	nop
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff ff26 	bl	8004480 <ringBuffer_deInit>
	}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4618      	mov	r0, r3
 8004648:	f011 f83c 	bl	80156c4 <_ZN5UtestC1Ev>
 800464c:	4a03      	ldr	r2, [pc, #12]	; (800465c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	0802990c 	.word	0x0802990c

08004660 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	4a05      	ldr	r2, [pc, #20]	; (8004680 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4618      	mov	r0, r3
 8004672:	f011 f837 	bl	80156e4 <_ZN5UtestD1Ev>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	0802990c 	.word	0x0802990c

08004684 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff ffe7 	bl	8004660 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004692:	2108      	movs	r1, #8
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f007 f859 	bl	800b74c <_ZdlPvj>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	605a      	str	r2, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff ffbe 	bl	800463c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80046c0:	4a03      	ldr	r2, [pc, #12]	; (80046d0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4618      	mov	r0, r3
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	080298ec 	.word	0x080298ec

080046d4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 80046d4:	b590      	push	{r4, r7, lr}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	2229      	movs	r2, #41	; 0x29
 80046de:	4906      	ldr	r1, [pc, #24]	; (80046f8 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 80046e0:	2008      	movs	r0, #8
 80046e2:	f007 f81f 	bl	800b724 <_ZnwjPKci>
 80046e6:	4604      	mov	r4, r0
 80046e8:	4620      	mov	r0, r4
 80046ea:	f7ff ffdb 	bl	80046a4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 80046ee:	4623      	mov	r3, r4
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd90      	pop	{r4, r7, pc}
 80046f8:	0802482c 	.word	0x0802482c

080046fc <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4618      	mov	r0, r3
 8004708:	f00f fbfa 	bl	8013f00 <_ZN10UtestShellC1Ev>
 800470c:	4a03      	ldr	r2, [pc, #12]	; (800471c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	08029840 	.word	0x08029840

08004720 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8004720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004722:	b087      	sub	sp, #28
 8004724:	af04      	add	r7, sp, #16
 8004726:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8004728:	f010 ffa2 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 800472c:	4604      	mov	r4, r0
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	3338      	adds	r3, #56	; 0x38
 8004732:	681d      	ldr	r5, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	461e      	mov	r6, r3
 800473c:	f010 ffa8 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004740:	4603      	mov	r3, r0
 8004742:	9302      	str	r3, [sp, #8]
 8004744:	232c      	movs	r3, #44	; 0x2c
 8004746:	9301      	str	r3, [sp, #4]
 8004748:	4b2a      	ldr	r3, [pc, #168]	; (80047f4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	4b2a      	ldr	r3, [pc, #168]	; (80047f8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 800474e:	4632      	mov	r2, r6
 8004750:	2132      	movs	r1, #50	; 0x32
 8004752:	4620      	mov	r0, r4
 8004754:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 8004756:	f010 ff8b 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 800475a:	4604      	mov	r4, r0
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	3320      	adds	r3, #32
 8004760:	681d      	ldr	r5, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	bf14      	ite	ne
 800476c:	2301      	movne	r3, #1
 800476e:	2300      	moveq	r3, #0
 8004770:	b2de      	uxtb	r6, r3
 8004772:	f010 ff8d 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004776:	4603      	mov	r3, r0
 8004778:	9303      	str	r3, [sp, #12]
 800477a:	232d      	movs	r3, #45	; 0x2d
 800477c:	9302      	str	r3, [sp, #8]
 800477e:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004780:	9301      	str	r3, [sp, #4]
 8004782:	2300      	movs	r3, #0
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	4b1d      	ldr	r3, [pc, #116]	; (80047fc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8004788:	4a1d      	ldr	r2, [pc, #116]	; (8004800 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 800478a:	4631      	mov	r1, r6
 800478c:	4620      	mov	r0, r4
 800478e:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8004790:	f010 ff6e 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8004794:	4604      	mov	r4, r0
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	3338      	adds	r3, #56	; 0x38
 800479a:	681d      	ldr	r5, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	461e      	mov	r6, r3
 80047a4:	f010 ff74 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80047a8:	4603      	mov	r3, r0
 80047aa:	9302      	str	r3, [sp, #8]
 80047ac:	232e      	movs	r3, #46	; 0x2e
 80047ae:	9301      	str	r3, [sp, #4]
 80047b0:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	4b13      	ldr	r3, [pc, #76]	; (8004804 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 80047b6:	4632      	mov	r2, r6
 80047b8:	2100      	movs	r1, #0
 80047ba:	4620      	mov	r0, r4
 80047bc:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 80047be:	f010 ff57 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80047c2:	4604      	mov	r4, r0
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	3338      	adds	r3, #56	; 0x38
 80047c8:	681d      	ldr	r5, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	461e      	mov	r6, r3
 80047d2:	f010 ff5d 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80047d6:	4603      	mov	r3, r0
 80047d8:	9302      	str	r3, [sp, #8]
 80047da:	232f      	movs	r3, #47	; 0x2f
 80047dc:	9301      	str	r3, [sp, #4]
 80047de:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	4b09      	ldr	r3, [pc, #36]	; (8004808 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 80047e4:	4632      	mov	r2, r6
 80047e6:	2100      	movs	r1, #0
 80047e8:	4620      	mov	r0, r4
 80047ea:	47a8      	blx	r5

}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047f4:	0802482c 	.word	0x0802482c
 80047f8:	0802484c 	.word	0x0802484c
 80047fc:	08024874 	.word	0x08024874
 8004800:	0802488c 	.word	0x0802488c
 8004804:	08024894 	.word	0x08024894
 8004808:	080248bc 	.word	0x080248bc

0800480c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	605a      	str	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff ff0a 	bl	800463c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004828:	4a03      	ldr	r2, [pc, #12]	; (8004838 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	08029820 	.word	0x08029820

0800483c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 800483c:	b590      	push	{r4, r7, lr}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	2233      	movs	r2, #51	; 0x33
 8004846:	4906      	ldr	r1, [pc, #24]	; (8004860 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 8004848:	2008      	movs	r0, #8
 800484a:	f006 ff6b 	bl	800b724 <_ZnwjPKci>
 800484e:	4604      	mov	r4, r0
 8004850:	4620      	mov	r0, r4
 8004852:	f7ff ffdb 	bl	800480c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 8004856:	4623      	mov	r3, r4
 8004858:	4618      	mov	r0, r3
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	bd90      	pop	{r4, r7, pc}
 8004860:	0802482c 	.word	0x0802482c

08004864 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4618      	mov	r0, r3
 8004870:	f00f fb46 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8004874:	4a03      	ldr	r2, [pc, #12]	; (8004884 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	08029774 	.word	0x08029774

08004888 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 8004888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800488a:	b087      	sub	sp, #28
 800488c:	af04      	add	r7, sp, #16
 800488e:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2145      	movs	r1, #69	; 0x45
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff fe09 	bl	80044ae <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 800489c:	f010 fee8 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80048a0:	4604      	mov	r4, r0
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	3338      	adds	r3, #56	; 0x38
 80048a6:	681d      	ldr	r5, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	461e      	mov	r6, r3
 80048b2:	f010 feed 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80048b6:	4603      	mov	r3, r0
 80048b8:	9302      	str	r3, [sp, #8]
 80048ba:	2336      	movs	r3, #54	; 0x36
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	4b15      	ldr	r3, [pc, #84]	; (8004914 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	4b15      	ldr	r3, [pc, #84]	; (8004918 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 80048c4:	4632      	mov	r2, r6
 80048c6:	2145      	movs	r1, #69	; 0x45
 80048c8:	4620      	mov	r0, r4
 80048ca:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2110      	movs	r1, #16
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff fdeb 	bl	80044ae <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 80048d8:	f010 feca 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80048dc:	4604      	mov	r4, r0
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	3338      	adds	r3, #56	; 0x38
 80048e2:	681d      	ldr	r5, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	3301      	adds	r3, #1
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	461e      	mov	r6, r3
 80048f0:	f010 fece 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80048f4:	4603      	mov	r3, r0
 80048f6:	9302      	str	r3, [sp, #8]
 80048f8:	2339      	movs	r3, #57	; 0x39
 80048fa:	9301      	str	r3, [sp, #4]
 80048fc:	4b05      	ldr	r3, [pc, #20]	; (8004914 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	4b06      	ldr	r3, [pc, #24]	; (800491c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 8004902:	4632      	mov	r2, r6
 8004904:	2110      	movs	r1, #16
 8004906:	4620      	mov	r0, r4
 8004908:	47a8      	blx	r5

}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004912:	bf00      	nop
 8004914:	0802482c 	.word	0x0802482c
 8004918:	080248e4 	.word	0x080248e4
 800491c:	08024914 	.word	0x08024914

08004920 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	605a      	str	r2, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff fe80 	bl	800463c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800493c:	4a03      	ldr	r2, [pc, #12]	; (800494c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4618      	mov	r0, r3
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	08029754 	.word	0x08029754

08004950 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004950:	b590      	push	{r4, r7, lr}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	223d      	movs	r2, #61	; 0x3d
 800495a:	4906      	ldr	r1, [pc, #24]	; (8004974 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 800495c:	2008      	movs	r0, #8
 800495e:	f006 fee1 	bl	800b724 <_ZnwjPKci>
 8004962:	4604      	mov	r4, r0
 8004964:	4620      	mov	r0, r4
 8004966:	f7ff ffdb 	bl	8004920 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 800496a:	4623      	mov	r3, r4
 800496c:	4618      	mov	r0, r3
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	bd90      	pop	{r4, r7, pc}
 8004974:	0802482c 	.word	0x0802482c

08004978 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4618      	mov	r0, r3
 8004984:	f00f fabc 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8004988:	4a03      	ldr	r2, [pc, #12]	; (8004998 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4618      	mov	r0, r3
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	080296a8 	.word	0x080296a8

0800499c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 800499c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800499e:	b089      	sub	sp, #36	; 0x24
 80049a0:	af04      	add	r7, sp, #16
 80049a2:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	429a      	cmp	r2, r3
 80049bc:	bf0c      	ite	eq
 80049be:	2301      	moveq	r3, #1
 80049c0:	2300      	movne	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4293      	cmp	r3, r2
 80049ca:	da0b      	bge.n	80049e4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	4611      	mov	r1, r2
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff fd69 	bl	80044ae <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3301      	adds	r3, #1
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	e7e3      	b.n	80049ac <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	21ff      	movs	r1, #255	; 0xff
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff fd5f 	bl	80044ae <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 80049f0:	f010 fe3e 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80049f4:	4604      	mov	r4, r0
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	3338      	adds	r3, #56	; 0x38
 80049fa:	681d      	ldr	r5, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	461e      	mov	r6, r3
 8004a06:	f010 fe43 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	9302      	str	r3, [sp, #8]
 8004a0e:	2345      	movs	r3, #69	; 0x45
 8004a10:	9301      	str	r3, [sp, #4]
 8004a12:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 8004a18:	4632      	mov	r2, r6
 8004a1a:	21ff      	movs	r1, #255	; 0xff
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	47a8      	blx	r5
}
 8004a20:	bf00      	nop
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a28:	0802482c 	.word	0x0802482c
 8004a2c:	08024944 	.word	0x08024944

08004a30 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	605a      	str	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff fdf8 	bl	800463c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004a4c:	4a03      	ldr	r2, [pc, #12]	; (8004a5c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	08029688 	.word	0x08029688

08004a60 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004a60:	b590      	push	{r4, r7, lr}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	2248      	movs	r2, #72	; 0x48
 8004a6a:	4906      	ldr	r1, [pc, #24]	; (8004a84 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 8004a6c:	2008      	movs	r0, #8
 8004a6e:	f006 fe59 	bl	800b724 <_ZnwjPKci>
 8004a72:	4604      	mov	r4, r0
 8004a74:	4620      	mov	r0, r4
 8004a76:	f7ff ffdb 	bl	8004a30 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 8004a7a:	4623      	mov	r3, r4
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd90      	pop	{r4, r7, pc}
 8004a84:	0802482c 	.word	0x0802482c

08004a88 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f00f fa34 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8004a98:	4a03      	ldr	r2, [pc, #12]	; (8004aa8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	080295dc 	.word	0x080295dc

08004aac <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 8004aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aae:	b089      	sub	sp, #36	; 0x24
 8004ab0:	af04      	add	r7, sp, #16
 8004ab2:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	21ff      	movs	r1, #255	; 0xff
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff fcf7 	bl	80044ae <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff fd1c 	bl	8004502 <ringBuffer_pop>
 8004aca:	4603      	mov	r3, r0
 8004acc:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 8004ace:	f010 fdcf 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	3338      	adds	r3, #56	; 0x38
 8004ad8:	681d      	ldr	r5, [r3, #0]
 8004ada:	7bfe      	ldrb	r6, [r7, #15]
 8004adc:	f010 fdd8 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	9302      	str	r3, [sp, #8]
 8004ae4:	234d      	movs	r3, #77	; 0x4d
 8004ae6:	9301      	str	r3, [sp, #4]
 8004ae8:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 8004aee:	4632      	mov	r2, r6
 8004af0:	21ff      	movs	r1, #255	; 0xff
 8004af2:	4620      	mov	r0, r4
 8004af4:	47a8      	blx	r5

}
 8004af6:	bf00      	nop
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004afe:	bf00      	nop
 8004b00:	0802482c 	.word	0x0802482c
 8004b04:	08024974 	.word	0x08024974

08004b08 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	605a      	str	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff fd8c 	bl	800463c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004b24:	4a03      	ldr	r2, [pc, #12]	; (8004b34 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	080295bc 	.word	0x080295bc

08004b38 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 8004b38:	b590      	push	{r4, r7, lr}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	2251      	movs	r2, #81	; 0x51
 8004b42:	4906      	ldr	r1, [pc, #24]	; (8004b5c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 8004b44:	2008      	movs	r0, #8
 8004b46:	f006 fded 	bl	800b724 <_ZnwjPKci>
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f7ff ffdb 	bl	8004b08 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 8004b52:	4623      	mov	r3, r4
 8004b54:	4618      	mov	r0, r3
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd90      	pop	{r4, r7, pc}
 8004b5c:	0802482c 	.word	0x0802482c

08004b60 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f00f f9c8 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8004b70:	4a03      	ldr	r2, [pc, #12]	; (8004b80 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	08029510 	.word	0x08029510

08004b84 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 8004b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b86:	b089      	sub	sp, #36	; 0x24
 8004b88:	af04      	add	r7, sp, #16
 8004b8a:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	21aa      	movs	r1, #170	; 0xaa
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff fc89 	bl	80044ae <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	bf0c      	ite	eq
 8004bb6:	2301      	moveq	r3, #1
 8004bb8:	2300      	movne	r3, #0
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	da0a      	bge.n	8004bda <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff fc9a 	bl	8004502 <ringBuffer_pop>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	e7e4      	b.n	8004ba4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff fc8f 	bl	8004502 <ringBuffer_pop>
 8004be4:	4603      	mov	r3, r0
 8004be6:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 8004be8:	f010 fd42 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8004bec:	4604      	mov	r4, r0
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	3338      	adds	r3, #56	; 0x38
 8004bf2:	681d      	ldr	r5, [r3, #0]
 8004bf4:	7afe      	ldrb	r6, [r7, #11]
 8004bf6:	f010 fd4b 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	9302      	str	r3, [sp, #8]
 8004bfe:	235e      	movs	r3, #94	; 0x5e
 8004c00:	9301      	str	r3, [sp, #4]
 8004c02:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 8004c08:	4632      	mov	r2, r6
 8004c0a:	21aa      	movs	r1, #170	; 0xaa
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	47a8      	blx	r5
}
 8004c10:	bf00      	nop
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c18:	0802482c 	.word	0x0802482c
 8004c1c:	08024994 	.word	0x08024994

08004c20 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	605a      	str	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff fd00 	bl	800463c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004c3c:	4a03      	ldr	r2, [pc, #12]	; (8004c4c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4618      	mov	r0, r3
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	080294f0 	.word	0x080294f0

08004c50 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004c50:	b590      	push	{r4, r7, lr}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	2261      	movs	r2, #97	; 0x61
 8004c5a:	4906      	ldr	r1, [pc, #24]	; (8004c74 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 8004c5c:	2008      	movs	r0, #8
 8004c5e:	f006 fd61 	bl	800b724 <_ZnwjPKci>
 8004c62:	4604      	mov	r4, r0
 8004c64:	4620      	mov	r0, r4
 8004c66:	f7ff ffdb 	bl	8004c20 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 8004c6a:	4623      	mov	r3, r4
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd90      	pop	{r4, r7, pc}
 8004c74:	0802482c 	.word	0x0802482c

08004c78 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f00f f93c 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8004c88:	4a03      	ldr	r2, [pc, #12]	; (8004c98 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4618      	mov	r0, r3
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	08029444 	.word	0x08029444

08004c9c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 8004c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9e:	b089      	sub	sp, #36	; 0x24
 8004ca0:	af04      	add	r7, sp, #16
 8004ca2:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d20b      	bcs.n	8004ccc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff fbf5 	bl	80044ae <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	e7ed      	b.n	8004ca8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 8004ccc:	f010 fcd0 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	3338      	adds	r3, #56	; 0x38
 8004cd6:	681d      	ldr	r5, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	4413      	add	r3, r2
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	461e      	mov	r6, r3
 8004cec:	f010 fcd0 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	9302      	str	r3, [sp, #8]
 8004cf4:	2368      	movs	r3, #104	; 0x68
 8004cf6:	9301      	str	r3, [sp, #4]
 8004cf8:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	4b24      	ldr	r3, [pc, #144]	; (8004d90 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 8004cfe:	4632      	mov	r2, r6
 8004d00:	2131      	movs	r1, #49	; 0x31
 8004d02:	4620      	mov	r0, r4
 8004d04:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fc23 	bl	8004556 <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 8004d10:	f010 fcae 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8004d14:	4604      	mov	r4, r0
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	3338      	adds	r3, #56	; 0x38
 8004d1a:	681d      	ldr	r5, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	4413      	add	r3, r2
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	461e      	mov	r6, r3
 8004d30:	f010 fcae 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004d34:	4603      	mov	r3, r0
 8004d36:	9302      	str	r3, [sp, #8]
 8004d38:	236c      	movs	r3, #108	; 0x6c
 8004d3a:	9301      	str	r3, [sp, #4]
 8004d3c:	4b13      	ldr	r3, [pc, #76]	; (8004d8c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	4b14      	ldr	r3, [pc, #80]	; (8004d94 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 8004d42:	4632      	mov	r2, r6
 8004d44:	2100      	movs	r1, #0
 8004d46:	4620      	mov	r0, r4
 8004d48:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 8004d4a:	f010 fc91 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8004d4e:	4604      	mov	r4, r0
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	3338      	adds	r3, #56	; 0x38
 8004d54:	681d      	ldr	r5, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	085b      	lsrs	r3, r3, #1
 8004d64:	4413      	add	r3, r2
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	461e      	mov	r6, r3
 8004d6a:	f010 fc91 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	9302      	str	r3, [sp, #8]
 8004d72:	236d      	movs	r3, #109	; 0x6d
 8004d74:	9301      	str	r3, [sp, #4]
 8004d76:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	4b07      	ldr	r3, [pc, #28]	; (8004d98 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 8004d7c:	4632      	mov	r2, r6
 8004d7e:	2100      	movs	r1, #0
 8004d80:	4620      	mov	r0, r4
 8004d82:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all the elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004d84:	bf00      	nop
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d8c:	0802482c 	.word	0x0802482c
 8004d90:	080249b4 	.word	0x080249b4
 8004d94:	080249f0 	.word	0x080249f0
 8004d98:	08024a2c 	.word	0x08024a2c

08004d9c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	605a      	str	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff fc42 	bl	800463c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004db8:	4a03      	ldr	r2, [pc, #12]	; (8004dc8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	08029424 	.word	0x08029424

08004dcc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 8004dcc:	b590      	push	{r4, r7, lr}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	2276      	movs	r2, #118	; 0x76
 8004dd6:	4906      	ldr	r1, [pc, #24]	; (8004df0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004dd8:	2008      	movs	r0, #8
 8004dda:	f006 fca3 	bl	800b724 <_ZnwjPKci>
 8004dde:	4604      	mov	r4, r0
 8004de0:	4620      	mov	r0, r4
 8004de2:	f7ff ffdb 	bl	8004d9c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 8004de6:	4623      	mov	r3, r4
 8004de8:	4618      	mov	r0, r3
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd90      	pop	{r4, r7, pc}
 8004df0:	0802482c 	.word	0x0802482c

08004df4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f00f f87e 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8004e04:	4a03      	ldr	r2, [pc, #12]	; (8004e14 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	08029378 	.word	0x08029378

08004e18 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8004e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af04      	add	r7, sp, #16
 8004e1e:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	490e      	ldr	r1, [pc, #56]	; (8004e60 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff fbac 	bl	8004584 <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 8004e2c:	f010 fc20 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8004e30:	4604      	mov	r4, r0
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	3324      	adds	r3, #36	; 0x24
 8004e36:	681d      	ldr	r5, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	68de      	ldr	r6, [r3, #12]
 8004e3e:	f010 fc27 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004e42:	4603      	mov	r3, r0
 8004e44:	9302      	str	r3, [sp, #8]
 8004e46:	237a      	movs	r3, #122	; 0x7a
 8004e48:	9301      	str	r3, [sp, #4]
 8004e4a:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	4632      	mov	r2, r6
 8004e52:	4903      	ldr	r1, [pc, #12]	; (8004e60 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004e54:	4620      	mov	r0, r4
 8004e56:	47a8      	blx	r5
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e60:	08024a64 	.word	0x08024a64
 8004e64:	0802482c 	.word	0x0802482c

08004e68 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	605a      	str	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff fbdc 	bl	800463c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004e84:	4a03      	ldr	r2, [pc, #12]	; (8004e94 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	08029358 	.word	0x08029358

08004e98 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8004e98:	b590      	push	{r4, r7, lr}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	227d      	movs	r2, #125	; 0x7d
 8004ea2:	4906      	ldr	r1, [pc, #24]	; (8004ebc <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004ea4:	2008      	movs	r0, #8
 8004ea6:	f006 fc3d 	bl	800b724 <_ZnwjPKci>
 8004eaa:	4604      	mov	r4, r0
 8004eac:	4620      	mov	r0, r4
 8004eae:	f7ff ffdb 	bl	8004e68 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004eb2:	4623      	mov	r3, r4
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd90      	pop	{r4, r7, pc}
 8004ebc:	0802482c 	.word	0x0802482c

08004ec0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f00f f818 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8004ed0:	4a03      	ldr	r2, [pc, #12]	; (8004ee0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	080292ac 	.word	0x080292ac

08004ee4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee8:	b08a      	sub	sp, #40	; 0x28
 8004eea:	af04      	add	r7, sp, #16
 8004eec:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	494e      	ldr	r1, [pc, #312]	; (800502c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff fb45 	bl	8004584 <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 8004efa:	f010 fbb9 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8004efe:	4604      	mov	r4, r0
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	3324      	adds	r3, #36	; 0x24
 8004f04:	681d      	ldr	r5, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	68de      	ldr	r6, [r3, #12]
 8004f0c:	f010 fbc0 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004f10:	4603      	mov	r3, r0
 8004f12:	9302      	str	r3, [sp, #8]
 8004f14:	2381      	movs	r3, #129	; 0x81
 8004f16:	9301      	str	r3, [sp, #4]
 8004f18:	4b45      	ldr	r3, [pc, #276]	; (8005030 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	4632      	mov	r2, r6
 8004f20:	4942      	ldr	r1, [pc, #264]	; (800502c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004f22:	4620      	mov	r0, r4
 8004f24:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	4942      	ldr	r1, [pc, #264]	; (8005034 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff fb48 	bl	80045c2 <ringBuffer_lookFor>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	bf14      	ite	ne
 8004f38:	2301      	movne	r3, #1
 8004f3a:	2300      	moveq	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d05c      	beq.n	8004ffc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	493b      	ldr	r1, [pc, #236]	; (8005034 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff fb3a 	bl	80045c2 <ringBuffer_lookFor>
 8004f4e:	4604      	mov	r4, r0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4937      	ldr	r1, [pc, #220]	; (8005034 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fb33 	bl	80045c2 <ringBuffer_lookFor>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	429c      	cmp	r4, r3
 8004f60:	bf14      	ite	ne
 8004f62:	2301      	movne	r3, #1
 8004f64:	2300      	moveq	r3, #0
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d008      	beq.n	8004f7e <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 8004f6c:	f010 fb80 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8004f70:	6803      	ldr	r3, [r0, #0]
 8004f72:	3370      	adds	r3, #112	; 0x70
 8004f74:	681c      	ldr	r4, [r3, #0]
 8004f76:	2382      	movs	r3, #130	; 0x82
 8004f78:	4a2d      	ldr	r2, [pc, #180]	; (8005030 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004f7a:	492f      	ldr	r1, [pc, #188]	; (8005038 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 8004f7c:	47a0      	blx	r4
 8004f7e:	f010 fb77 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8004f82:	4604      	mov	r4, r0
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	3358      	adds	r3, #88	; 0x58
 8004f88:	681d      	ldr	r5, [r3, #0]
 8004f8a:	f107 0308 	add.w	r3, r7, #8
 8004f8e:	2101      	movs	r1, #1
 8004f90:	4618      	mov	r0, r3
 8004f92:	f009 fe09 	bl	800eba8 <_Z10StringFromi>
 8004f96:	f107 0308 	add.w	r3, r7, #8
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f009 fb10 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 8004fa0:	4606      	mov	r6, r0
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	4923      	ldr	r1, [pc, #140]	; (8005034 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff fb0a 	bl	80045c2 <ringBuffer_lookFor>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	f107 0310 	add.w	r3, r7, #16
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f00a f870 	bl	800f09c <_Z10StringFromm>
 8004fbc:	f107 0310 	add.w	r3, r7, #16
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f009 fafd 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 8004fc6:	4680      	mov	r8, r0
 8004fc8:	f010 fb62 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	9303      	str	r3, [sp, #12]
 8004fd0:	2382      	movs	r3, #130	; 0x82
 8004fd2:	9302      	str	r3, [sp, #8]
 8004fd4:	4b16      	ldr	r3, [pc, #88]	; (8005030 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	2300      	movs	r3, #0
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	4643      	mov	r3, r8
 8004fde:	4632      	mov	r2, r6
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	47a8      	blx	r5
 8004fe6:	f107 0310 	add.w	r3, r7, #16
 8004fea:	4618      	mov	r0, r3
 8004fec:	f009 fb15 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8004ff0:	f107 0308 	add.w	r3, r7, #8
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f009 fb10 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8004ffa:	e012      	b.n	8005022 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004ffc:	f010 fb38 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8005000:	4604      	mov	r4, r0
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	3338      	adds	r3, #56	; 0x38
 8005006:	681d      	ldr	r5, [r3, #0]
 8005008:	f010 fb42 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800500c:	4603      	mov	r3, r0
 800500e:	9302      	str	r3, [sp, #8]
 8005010:	2382      	movs	r3, #130	; 0x82
 8005012:	9301      	str	r3, [sp, #4]
 8005014:	4b06      	ldr	r3, [pc, #24]	; (8005030 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	2300      	movs	r3, #0
 800501a:	2200      	movs	r2, #0
 800501c:	2100      	movs	r1, #0
 800501e:	4620      	mov	r0, r4
 8005020:	47a8      	blx	r5
}
 8005022:	bf00      	nop
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800502c:	08024a6c 	.word	0x08024a6c
 8005030:	0802482c 	.word	0x0802482c
 8005034:	08024a78 	.word	0x08024a78
 8005038:	08024a80 	.word	0x08024a80

0800503c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	605a      	str	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff faf2 	bl	800463c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8005058:	4a03      	ldr	r2, [pc, #12]	; (8005068 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4618      	mov	r0, r3
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	0802928c 	.word	0x0802928c

0800506c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 800506c:	b590      	push	{r4, r7, lr}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	2285      	movs	r2, #133	; 0x85
 8005076:	4906      	ldr	r1, [pc, #24]	; (8005090 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8005078:	2008      	movs	r0, #8
 800507a:	f006 fb53 	bl	800b724 <_ZnwjPKci>
 800507e:	4604      	mov	r4, r0
 8005080:	4620      	mov	r0, r4
 8005082:	f7ff ffdb 	bl	800503c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8005086:	4623      	mov	r3, r4
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	bd90      	pop	{r4, r7, pc}
 8005090:	0802482c 	.word	0x0802482c

08005094 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4618      	mov	r0, r3
 80050a0:	f00e ff2e 	bl	8013f00 <_ZN10UtestShellC1Ev>
 80050a4:	4a03      	ldr	r2, [pc, #12]	; (80050b4 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	080291e0 	.word	0x080291e0

080050b8 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 80050b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af04      	add	r7, sp, #16
 80050be:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 80050c0:	f010 fad6 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80050c4:	4604      	mov	r4, r0
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	3338      	adds	r3, #56	; 0x38
 80050ca:	681d      	ldr	r5, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff fa8c 	bl	80045ee <ringBuffer_capacity>
 80050d6:	4603      	mov	r3, r0
 80050d8:	461e      	mov	r6, r3
 80050da:	f010 fad9 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80050de:	4603      	mov	r3, r0
 80050e0:	9302      	str	r3, [sp, #8]
 80050e2:	2388      	movs	r3, #136	; 0x88
 80050e4:	9301      	str	r3, [sp, #4]
 80050e6:	4b05      	ldr	r3, [pc, #20]	; (80050fc <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	4b05      	ldr	r3, [pc, #20]	; (8005100 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 80050ec:	4632      	mov	r2, r6
 80050ee:	2132      	movs	r1, #50	; 0x32
 80050f0:	4620      	mov	r0, r4
 80050f2:	47a8      	blx	r5

}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050fc:	0802482c 	.word	0x0802482c
 8005100:	08024b24 	.word	0x08024b24

08005104 <_Z18UART_Transmit_FakePh>:

/* Mpck functions-----------------------------------------------------------------------*/

void UART_Transmit_Fake(uint8_t* data)
{
 8005104:	b5b0      	push	{r4, r5, r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]

	mock().actualCall("UART_Transmit_Fake").withStringParameter("data", (char*)data);
 800510c:	f107 0308 	add.w	r3, r7, #8
 8005110:	491d      	ldr	r1, [pc, #116]	; (8005188 <_Z18UART_Transmit_FakePh+0x84>)
 8005112:	4618      	mov	r0, r3
 8005114:	f008 fec9 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8005118:	f107 0308 	add.w	r3, r7, #8
 800511c:	2100      	movs	r1, #0
 800511e:	4618      	mov	r0, r3
 8005120:	f006 ff9c 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005124:	4604      	mov	r4, r0
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	3318      	adds	r3, #24
 800512a:	681d      	ldr	r5, [r3, #0]
 800512c:	f107 0310 	add.w	r3, r7, #16
 8005130:	4916      	ldr	r1, [pc, #88]	; (800518c <_Z18UART_Transmit_FakePh+0x88>)
 8005132:	4618      	mov	r0, r3
 8005134:	f008 feb9 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8005138:	f107 0310 	add.w	r3, r7, #16
 800513c:	4619      	mov	r1, r3
 800513e:	4620      	mov	r0, r4
 8005140:	47a8      	blx	r5
 8005142:	4604      	mov	r4, r0
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	333c      	adds	r3, #60	; 0x3c
 8005148:	681d      	ldr	r5, [r3, #0]
 800514a:	f107 0318 	add.w	r3, r7, #24
 800514e:	4910      	ldr	r1, [pc, #64]	; (8005190 <_Z18UART_Transmit_FakePh+0x8c>)
 8005150:	4618      	mov	r0, r3
 8005152:	f008 feaa 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8005156:	f107 0318 	add.w	r3, r7, #24
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	4619      	mov	r1, r3
 800515e:	4620      	mov	r0, r4
 8005160:	47a8      	blx	r5
 8005162:	f107 0318 	add.w	r3, r7, #24
 8005166:	4618      	mov	r0, r3
 8005168:	f009 fa57 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800516c:	f107 0310 	add.w	r3, r7, #16
 8005170:	4618      	mov	r0, r3
 8005172:	f009 fa52 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8005176:	f107 0308 	add.w	r3, r7, #8
 800517a:	4618      	mov	r0, r3
 800517c:	f009 fa4d 	bl	800e61a <_ZN12SimpleStringD1Ev>

}
 8005180:	bf00      	nop
 8005182:	3720      	adds	r7, #32
 8005184:	46bd      	mov	sp, r7
 8005186:	bdb0      	pop	{r4, r5, r7, pc}
 8005188:	08024b5c 	.word	0x08024b5c
 800518c:	08024b60 	.word	0x08024b60
 8005190:	08024b74 	.word	0x08024b74

08005194 <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8005194:	b5b0      	push	{r4, r5, r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 800519a:	463b      	mov	r3, r7
 800519c:	4916      	ldr	r1, [pc, #88]	; (80051f8 <_Z17UART_Receive_Fakev+0x64>)
 800519e:	4618      	mov	r0, r3
 80051a0:	f008 fe83 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80051a4:	463b      	mov	r3, r7
 80051a6:	2100      	movs	r1, #0
 80051a8:	4618      	mov	r0, r3
 80051aa:	f006 ff57 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80051ae:	4604      	mov	r4, r0
 80051b0:	6823      	ldr	r3, [r4, #0]
 80051b2:	3318      	adds	r3, #24
 80051b4:	681d      	ldr	r5, [r3, #0]
 80051b6:	f107 0308 	add.w	r3, r7, #8
 80051ba:	4910      	ldr	r1, [pc, #64]	; (80051fc <_Z17UART_Receive_Fakev+0x68>)
 80051bc:	4618      	mov	r0, r3
 80051be:	f008 fe74 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80051c2:	f107 0308 	add.w	r3, r7, #8
 80051c6:	4619      	mov	r1, r3
 80051c8:	4620      	mov	r0, r4
 80051ca:	47a8      	blx	r5
 80051cc:	4603      	mov	r3, r0
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	3264      	adds	r2, #100	; 0x64
 80051d2:	6812      	ldr	r2, [r2, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	4790      	blx	r2
 80051d8:	4603      	mov	r3, r0
 80051da:	b2dc      	uxtb	r4, r3
 80051dc:	f107 0308 	add.w	r3, r7, #8
 80051e0:	4618      	mov	r0, r3
 80051e2:	f009 fa1a 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80051e6:	463b      	mov	r3, r7
 80051e8:	4618      	mov	r0, r3
 80051ea:	f009 fa16 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80051ee:	4623      	mov	r3, r4
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bdb0      	pop	{r4, r5, r7, pc}
 80051f8:	08024b5c 	.word	0x08024b5c
 80051fc:	08024b7c 	.word	0x08024b7c

08005200 <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 8005204:	4b0a      	ldr	r3, [pc, #40]	; (8005230 <_Z12getTick_Fakev+0x30>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520c:	d103      	bne.n	8005216 <_Z12getTick_Fakev+0x16>
		time = 0;
 800520e:	4b08      	ldr	r3, [pc, #32]	; (8005230 <_Z12getTick_Fakev+0x30>)
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	e004      	b.n	8005220 <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 8005216:	4b06      	ldr	r3, [pc, #24]	; (8005230 <_Z12getTick_Fakev+0x30>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3301      	adds	r3, #1
 800521c:	4a04      	ldr	r2, [pc, #16]	; (8005230 <_Z12getTick_Fakev+0x30>)
 800521e:	6013      	str	r3, [r2, #0]
	return time;
 8005220:	4b03      	ldr	r3, [pc, #12]	; (8005230 <_Z12getTick_Fakev+0x30>)
 8005222:	681b      	ldr	r3, [r3, #0]
}
 8005224:	4618      	mov	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	200004a0 	.word	0x200004a0

08005234 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
/* Test functions of the ring buffer-----------------------------------------------------------------------*/

TEST_GROUP(EspDriver_Test_Group)
{

	void setup()
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 800523c:	2364      	movs	r3, #100	; 0x64
 800523e:	4a04      	ldr	r2, [pc, #16]	; (8005250 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8005240:	4904      	ldr	r1, [pc, #16]	; (8005254 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 8005242:	4805      	ldr	r0, [pc, #20]	; (8005258 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 8005244:	f7fe fd16 	bl	8003c74 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);					// buffer size

	}
 8005248:	bf00      	nop
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	08005201 	.word	0x08005201
 8005254:	08005195 	.word	0x08005195
 8005258:	08005105 	.word	0x08005105

0800525c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
	{

		mock().checkExpectations();
 8005264:	f107 0308 	add.w	r3, r7, #8
 8005268:	4917      	ldr	r1, [pc, #92]	; (80052c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 800526a:	4618      	mov	r0, r3
 800526c:	f008 fe1d 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8005270:	f107 0308 	add.w	r3, r7, #8
 8005274:	2100      	movs	r1, #0
 8005276:	4618      	mov	r0, r3
 8005278:	f006 fef0 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800527c:	4603      	mov	r3, r0
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	3294      	adds	r2, #148	; 0x94
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	4618      	mov	r0, r3
 8005286:	4790      	blx	r2
 8005288:	f107 0308 	add.w	r3, r7, #8
 800528c:	4618      	mov	r0, r3
 800528e:	f009 f9c4 	bl	800e61a <_ZN12SimpleStringD1Ev>
		mock().clear();
 8005292:	f107 0310 	add.w	r3, r7, #16
 8005296:	490c      	ldr	r1, [pc, #48]	; (80052c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8005298:	4618      	mov	r0, r3
 800529a:	f008 fe06 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800529e:	f107 0310 	add.w	r3, r7, #16
 80052a2:	2100      	movs	r1, #0
 80052a4:	4618      	mov	r0, r3
 80052a6:	f006 fed9 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80052aa:	4603      	mov	r3, r0
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	329c      	adds	r2, #156	; 0x9c
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	4790      	blx	r2
 80052b6:	f107 0310 	add.w	r3, r7, #16
 80052ba:	4618      	mov	r0, r3
 80052bc:	f009 f9ad 	bl	800e61a <_ZN12SimpleStringD1Ev>
	}
 80052c0:	bf00      	nop
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	08024b5c 	.word	0x08024b5c

080052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f010 f9f4 	bl	80156c4 <_ZN5UtestC1Ev>
 80052dc:	4a03      	ldr	r2, [pc, #12]	; (80052ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4618      	mov	r0, r3
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	080291c0 	.word	0x080291c0

080052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	4a05      	ldr	r2, [pc, #20]	; (8005310 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4618      	mov	r0, r3
 8005302:	f010 f9ef 	bl	80156e4 <_ZN5UtestD1Ev>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4618      	mov	r0, r3
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	080291c0 	.word	0x080291c0

08005314 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff ffe7 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005322:	2104      	movs	r1, #4
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f006 fa11 	bl	800b74c <_ZdlPvj>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff ffc4 	bl	80052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005344:	4a03      	ldr	r2, [pc, #12]	; (8005354 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4618      	mov	r0, r3
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	080291a0 	.word	0x080291a0

08005358 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8005358:	b590      	push	{r4, r7, lr}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	22c0      	movs	r2, #192	; 0xc0
 8005362:	4906      	ldr	r1, [pc, #24]	; (800537c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8005364:	2004      	movs	r0, #4
 8005366:	f006 f9dd 	bl	800b724 <_ZnwjPKci>
 800536a:	4604      	mov	r4, r0
 800536c:	4620      	mov	r0, r4
 800536e:	f7ff ffe1 	bl	8005334 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 8005372:	4623      	mov	r3, r4
 8005374:	4618      	mov	r0, r3
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	bd90      	pop	{r4, r7, pc}
 800537c:	0802482c 	.word	0x0802482c

08005380 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4618      	mov	r0, r3
 800538c:	f00e fdb8 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8005390:	4a03      	ldr	r2, [pc, #12]	; (80053a0 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	080290f4 	.word	0x080290f4

080053a4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 80053a4:	b5b0      	push	{r4, r5, r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af04      	add	r7, sp, #16
 80053aa:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; 			// or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 80053ac:	4b10      	ldr	r3, [pc, #64]	; (80053f0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 80053ae:	4a11      	ldr	r2, [pc, #68]	; (80053f4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 80053b0:	601a      	str	r2, [r3, #0]
	int32_t result = ESP_Init(transmit,
 80053b2:	4b0f      	ldr	r3, [pc, #60]	; (80053f0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	2364      	movs	r3, #100	; 0x64
 80053b8:	4a0f      	ldr	r2, [pc, #60]	; (80053f8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 80053ba:	4910      	ldr	r1, [pc, #64]	; (80053fc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 80053bc:	f7fe fc5a 	bl	8003c74 <ESP_Init>
 80053c0:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 80053c2:	f010 f955 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80053c6:	4604      	mov	r4, r0
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	3338      	adds	r3, #56	; 0x38
 80053cc:	681d      	ldr	r5, [r3, #0]
 80053ce:	f010 f95f 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80053d2:	4603      	mov	r3, r0
 80053d4:	9302      	str	r3, [sp, #8]
 80053d6:	23ce      	movs	r3, #206	; 0xce
 80053d8:	9301      	str	r3, [sp, #4]
 80053da:	4b09      	ldr	r3, [pc, #36]	; (8005400 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	4b09      	ldr	r3, [pc, #36]	; (8005404 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	2101      	movs	r1, #1
 80053e4:	4620      	mov	r0, r4
 80053e6:	47a8      	blx	r5

}
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bdb0      	pop	{r4, r5, r7, pc}
 80053f0:	200004a4 	.word	0x200004a4
 80053f4:	08005105 	.word	0x08005105
 80053f8:	08005201 	.word	0x08005201
 80053fc:	08005195 	.word	0x08005195
 8005400:	0802482c 	.word	0x0802482c
 8005404:	08024b90 	.word	0x08024b90

08005408 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff ff5a 	bl	80052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005418:	4a03      	ldr	r2, [pc, #12]	; (8005428 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4618      	mov	r0, r3
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	080290d4 	.word	0x080290d4

0800542c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 800542c:	b590      	push	{r4, r7, lr}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	22d2      	movs	r2, #210	; 0xd2
 8005436:	4906      	ldr	r1, [pc, #24]	; (8005450 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 8005438:	2004      	movs	r0, #4
 800543a:	f006 f973 	bl	800b724 <_ZnwjPKci>
 800543e:	4604      	mov	r4, r0
 8005440:	4620      	mov	r0, r4
 8005442:	f7ff ffe1 	bl	8005408 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 8005446:	4623      	mov	r3, r4
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	bd90      	pop	{r4, r7, pc}
 8005450:	0802482c 	.word	0x0802482c

08005454 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4618      	mov	r0, r3
 8005460:	f00e fd4e 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8005464:	4a03      	ldr	r2, [pc, #12]	; (8005474 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	08029028 	.word	0x08029028

08005478 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 8005478:	b5b0      	push	{r4, r5, r7, lr}
 800547a:	b08e      	sub	sp, #56	; 0x38
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Test");  // UART_Transmit_Fake function waits "Test" string.
 8005480:	f107 0308 	add.w	r3, r7, #8
 8005484:	493d      	ldr	r1, [pc, #244]	; (800557c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 8005486:	4618      	mov	r0, r3
 8005488:	f008 fd0f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800548c:	f107 0308 	add.w	r3, r7, #8
 8005490:	2100      	movs	r1, #0
 8005492:	4618      	mov	r0, r3
 8005494:	f006 fde2 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005498:	4604      	mov	r4, r0
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	330c      	adds	r3, #12
 800549e:	681d      	ldr	r5, [r3, #0]
 80054a0:	f107 0310 	add.w	r3, r7, #16
 80054a4:	4936      	ldr	r1, [pc, #216]	; (8005580 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 80054a6:	4618      	mov	r0, r3
 80054a8:	f008 fcff 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80054ac:	f107 0310 	add.w	r3, r7, #16
 80054b0:	4619      	mov	r1, r3
 80054b2:	4620      	mov	r0, r4
 80054b4:	47a8      	blx	r5
 80054b6:	4604      	mov	r4, r0
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	334c      	adds	r3, #76	; 0x4c
 80054bc:	681d      	ldr	r5, [r3, #0]
 80054be:	f107 0318 	add.w	r3, r7, #24
 80054c2:	4930      	ldr	r1, [pc, #192]	; (8005584 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 80054c4:	4618      	mov	r0, r3
 80054c6:	f008 fcf0 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80054ca:	f107 0318 	add.w	r3, r7, #24
 80054ce:	4a2e      	ldr	r2, [pc, #184]	; (8005588 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 80054d0:	4619      	mov	r1, r3
 80054d2:	4620      	mov	r0, r4
 80054d4:	47a8      	blx	r5
 80054d6:	f107 0318 	add.w	r3, r7, #24
 80054da:	4618      	mov	r0, r3
 80054dc:	f009 f89d 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80054e0:	f107 0310 	add.w	r3, r7, #16
 80054e4:	4618      	mov	r0, r3
 80054e6:	f009 f898 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80054ea:	f107 0308 	add.w	r3, r7, #8
 80054ee:	4618      	mov	r0, r3
 80054f0:	f009 f893 	bl	800e61a <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT\r\n");
 80054f4:	f107 0320 	add.w	r3, r7, #32
 80054f8:	4920      	ldr	r1, [pc, #128]	; (800557c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 80054fa:	4618      	mov	r0, r3
 80054fc:	f008 fcd5 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8005500:	f107 0320 	add.w	r3, r7, #32
 8005504:	2100      	movs	r1, #0
 8005506:	4618      	mov	r0, r3
 8005508:	f006 fda8 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800550c:	4604      	mov	r4, r0
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	330c      	adds	r3, #12
 8005512:	681d      	ldr	r5, [r3, #0]
 8005514:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005518:	4919      	ldr	r1, [pc, #100]	; (8005580 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 800551a:	4618      	mov	r0, r3
 800551c:	f008 fcc5 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8005520:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005524:	4619      	mov	r1, r3
 8005526:	4620      	mov	r0, r4
 8005528:	47a8      	blx	r5
 800552a:	4604      	mov	r4, r0
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	334c      	adds	r3, #76	; 0x4c
 8005530:	681d      	ldr	r5, [r3, #0]
 8005532:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005536:	4913      	ldr	r1, [pc, #76]	; (8005584 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 8005538:	4618      	mov	r0, r3
 800553a:	f008 fcb6 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800553e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005542:	4a12      	ldr	r2, [pc, #72]	; (800558c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 8005544:	4619      	mov	r1, r3
 8005546:	4620      	mov	r0, r4
 8005548:	47a8      	blx	r5
 800554a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800554e:	4618      	mov	r0, r3
 8005550:	f009 f863 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8005554:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005558:	4618      	mov	r0, r3
 800555a:	f009 f85e 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800555e:	f107 0320 	add.w	r3, r7, #32
 8005562:	4618      	mov	r0, r3
 8005564:	f009 f859 	bl	800e61a <_ZN12SimpleStringD1Ev>

	Send_AT_Command((char*)"Test");
 8005568:	4807      	ldr	r0, [pc, #28]	; (8005588 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 800556a:	f7fe fbb5 	bl	8003cd8 <Send_AT_Command>
	Send_AT_Command((char*)"AT\r\n");
 800556e:	4807      	ldr	r0, [pc, #28]	; (800558c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 8005570:	f7fe fbb2 	bl	8003cd8 <Send_AT_Command>

	// There is no assertion macro here because the function returns nothing.
	// Mocking library checks if the function has been called.
}
 8005574:	bf00      	nop
 8005576:	3738      	adds	r7, #56	; 0x38
 8005578:	46bd      	mov	sp, r7
 800557a:	bdb0      	pop	{r4, r5, r7, pc}
 800557c:	08024b5c 	.word	0x08024b5c
 8005580:	08024b60 	.word	0x08024b60
 8005584:	08024b74 	.word	0x08024b74
 8005588:	08024a64 	.word	0x08024a64
 800558c:	08024bb0 	.word	0x08024bb0

08005590 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff fe96 	bl	80052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80055a0:	4a03      	ldr	r2, [pc, #12]	; (80055b0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4618      	mov	r0, r3
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	08029008 	.word	0x08029008

080055b4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 80055b4:	b590      	push	{r4, r7, lr}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	22de      	movs	r2, #222	; 0xde
 80055be:	4906      	ldr	r1, [pc, #24]	; (80055d8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 80055c0:	2004      	movs	r0, #4
 80055c2:	f006 f8af 	bl	800b724 <_ZnwjPKci>
 80055c6:	4604      	mov	r4, r0
 80055c8:	4620      	mov	r0, r4
 80055ca:	f7ff ffe1 	bl	8005590 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 80055ce:	4623      	mov	r3, r4
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd90      	pop	{r4, r7, pc}
 80055d8:	0802482c 	.word	0x0802482c

080055dc <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f00e fc8a 	bl	8013f00 <_ZN10UtestShellC1Ev>
 80055ec:	4a03      	ldr	r2, [pc, #12]	; (80055fc <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	08028f5c 	.word	0x08028f5c

08005600 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 8005600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005602:	b08f      	sub	sp, #60	; 0x3c
 8005604:	af04      	add	r7, sp, #16
 8005606:	6078      	str	r0, [r7, #4]

	const char response[] = "OK\r\n";
 8005608:	4a31      	ldr	r2, [pc, #196]	; (80056d0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 800560a:	f107 030c 	add.w	r3, r7, #12
 800560e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005612:	6018      	str	r0, [r3, #0]
 8005614:	3304      	adds	r3, #4
 8005616:	7019      	strb	r1, [r3, #0]

	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 8005618:	2300      	movs	r3, #0
 800561a:	627b      	str	r3, [r7, #36]	; 0x24
 800561c:	f107 030c 	add.w	r3, r7, #12
 8005620:	4618      	mov	r0, r3
 8005622:	f7fa fe0b 	bl	800023c <strlen>
 8005626:	4603      	mov	r3, r0
 8005628:	461a      	mov	r2, r3
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	4293      	cmp	r3, r2
 800562e:	da35      	bge.n	800569c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005630:	f107 0314 	add.w	r3, r7, #20
 8005634:	4927      	ldr	r1, [pc, #156]	; (80056d4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd4>)
 8005636:	4618      	mov	r0, r3
 8005638:	f008 fc37 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800563c:	f107 0314 	add.w	r3, r7, #20
 8005640:	2100      	movs	r1, #0
 8005642:	4618      	mov	r0, r3
 8005644:	f006 fd0a 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005648:	4604      	mov	r4, r0
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	330c      	adds	r3, #12
 800564e:	681d      	ldr	r5, [r3, #0]
 8005650:	f107 031c 	add.w	r3, r7, #28
 8005654:	4920      	ldr	r1, [pc, #128]	; (80056d8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd8>)
 8005656:	4618      	mov	r0, r3
 8005658:	f008 fc27 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800565c:	f107 031c 	add.w	r3, r7, #28
 8005660:	4619      	mov	r1, r3
 8005662:	4620      	mov	r0, r4
 8005664:	47a8      	blx	r5
 8005666:	4603      	mov	r3, r0
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	3264      	adds	r2, #100	; 0x64
 800566c:	6812      	ldr	r2, [r2, #0]
 800566e:	f107 000c 	add.w	r0, r7, #12
 8005672:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005674:	4401      	add	r1, r0
 8005676:	7809      	ldrb	r1, [r1, #0]
 8005678:	4618      	mov	r0, r3
 800567a:	4790      	blx	r2
 800567c:	f107 031c 	add.w	r3, r7, #28
 8005680:	4618      	mov	r0, r3
 8005682:	f008 ffca 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8005686:	f107 0314 	add.w	r3, r7, #20
 800568a:	4618      	mov	r0, r3
 800568c:	f008 ffc5 	bl	800e61a <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8005690:	f7fe fb30 	bl	8003cf4 <ESP_UART_ReceiveHandler>
	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	3301      	adds	r3, #1
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
 800569a:	e7bf      	b.n	800561c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1c>
	}

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the ring buffer.
 800569c:	f00f ffe8 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80056a0:	4604      	mov	r4, r0
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	3324      	adds	r3, #36	; 0x24
 80056a6:	681d      	ldr	r5, [r3, #0]
 80056a8:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xdc>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68de      	ldr	r6, [r3, #12]
 80056ae:	f00f ffef 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80056b2:	4603      	mov	r3, r0
 80056b4:	9302      	str	r3, [sp, #8]
 80056b6:	23e9      	movs	r3, #233	; 0xe9
 80056b8:	9301      	str	r3, [sp, #4]
 80056ba:	4b09      	ldr	r3, [pc, #36]	; (80056e0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xe0>)
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	2300      	movs	r3, #0
 80056c0:	4632      	mov	r2, r6
 80056c2:	4903      	ldr	r1, [pc, #12]	; (80056d0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 80056c4:	4620      	mov	r0, r4
 80056c6:	47a8      	blx	r5

}
 80056c8:	bf00      	nop
 80056ca:	372c      	adds	r7, #44	; 0x2c
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056d0:	08024bb8 	.word	0x08024bb8
 80056d4:	08024b5c 	.word	0x08024b5c
 80056d8:	08024b7c 	.word	0x08024b7c
 80056dc:	2000037c 	.word	0x2000037c
 80056e0:	0802482c 	.word	0x0802482c

080056e4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff fdec 	bl	80052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80056f4:	4a03      	ldr	r2, [pc, #12]	; (8005704 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4618      	mov	r0, r3
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	08028f3c 	.word	0x08028f3c

08005708 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 8005708:	b590      	push	{r4, r7, lr}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	22ed      	movs	r2, #237	; 0xed
 8005712:	4906      	ldr	r1, [pc, #24]	; (800572c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 8005714:	2004      	movs	r0, #4
 8005716:	f006 f805 	bl	800b724 <_ZnwjPKci>
 800571a:	4604      	mov	r4, r0
 800571c:	4620      	mov	r0, r4
 800571e:	f7ff ffe1 	bl	80056e4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 8005722:	4623      	mov	r3, r4
 8005724:	4618      	mov	r0, r3
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	bd90      	pop	{r4, r7, pc}
 800572c:	0802482c 	.word	0x0802482c

08005730 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4618      	mov	r0, r3
 800573c:	f00e fbe0 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8005740:	4a03      	ldr	r2, [pc, #12]	; (8005750 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4618      	mov	r0, r3
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	08028e90 	.word	0x08028e90

08005754 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 8005754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005756:	b08f      	sub	sp, #60	; 0x3c
 8005758:	af04      	add	r7, sp, #16
 800575a:	6078      	str	r0, [r7, #4]
	const char response[] = "OK\r\n";
 800575c:	4a32      	ldr	r2, [pc, #200]	; (8005828 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd4>)
 800575e:	f107 0308 	add.w	r3, r7, #8
 8005762:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005766:	6018      	str	r0, [r3, #0]
 8005768:	3304      	adds	r3, #4
 800576a:	7019      	strb	r1, [r3, #0]

	for(int i=0;i<(int)strlen(response);i++)
 800576c:	2300      	movs	r3, #0
 800576e:	627b      	str	r3, [r7, #36]	; 0x24
 8005770:	f107 0308 	add.w	r3, r7, #8
 8005774:	4618      	mov	r0, r3
 8005776:	f7fa fd61 	bl	800023c <strlen>
 800577a:	4603      	mov	r3, r0
 800577c:	461a      	mov	r2, r3
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	4293      	cmp	r3, r2
 8005782:	da35      	bge.n	80057f0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005784:	f107 0310 	add.w	r3, r7, #16
 8005788:	4928      	ldr	r1, [pc, #160]	; (800582c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd8>)
 800578a:	4618      	mov	r0, r3
 800578c:	f008 fb8d 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8005790:	f107 0310 	add.w	r3, r7, #16
 8005794:	2100      	movs	r1, #0
 8005796:	4618      	mov	r0, r3
 8005798:	f006 fc60 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800579c:	4604      	mov	r4, r0
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	330c      	adds	r3, #12
 80057a2:	681d      	ldr	r5, [r3, #0]
 80057a4:	f107 0318 	add.w	r3, r7, #24
 80057a8:	4921      	ldr	r1, [pc, #132]	; (8005830 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xdc>)
 80057aa:	4618      	mov	r0, r3
 80057ac:	f008 fb7d 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80057b0:	f107 0318 	add.w	r3, r7, #24
 80057b4:	4619      	mov	r1, r3
 80057b6:	4620      	mov	r0, r4
 80057b8:	47a8      	blx	r5
 80057ba:	4603      	mov	r3, r0
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	3264      	adds	r2, #100	; 0x64
 80057c0:	6812      	ldr	r2, [r2, #0]
 80057c2:	f107 0008 	add.w	r0, r7, #8
 80057c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057c8:	4401      	add	r1, r0
 80057ca:	7809      	ldrb	r1, [r1, #0]
 80057cc:	4618      	mov	r0, r3
 80057ce:	4790      	blx	r2
 80057d0:	f107 0318 	add.w	r3, r7, #24
 80057d4:	4618      	mov	r0, r3
 80057d6:	f008 ff20 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80057da:	f107 0310 	add.w	r3, r7, #16
 80057de:	4618      	mov	r0, r3
 80057e0:	f008 ff1b 	bl	800e61a <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 80057e4:	f7fe fa86 	bl	8003cf4 <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	3301      	adds	r3, #1
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
 80057ee:	e7bf      	b.n	8005770 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x1c>
	}

	uint32_t result = Read_Response((char*)"OK");
 80057f0:	4810      	ldr	r0, [pc, #64]	; (8005834 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe0>)
 80057f2:	f7fe fa91 	bl	8003d18 <Read_Response>
 80057f6:	6238      	str	r0, [r7, #32]

	LONGS_EQUAL(1,result);
 80057f8:	f00f ff3a 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80057fc:	4604      	mov	r4, r0
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	3338      	adds	r3, #56	; 0x38
 8005802:	681d      	ldr	r5, [r3, #0]
 8005804:	6a3e      	ldr	r6, [r7, #32]
 8005806:	f00f ff43 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800580a:	4603      	mov	r3, r0
 800580c:	9302      	str	r3, [sp, #8]
 800580e:	23f9      	movs	r3, #249	; 0xf9
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	4b09      	ldr	r3, [pc, #36]	; (8005838 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe4>)
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	4b09      	ldr	r3, [pc, #36]	; (800583c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe8>)
 8005818:	4632      	mov	r2, r6
 800581a:	2101      	movs	r1, #1
 800581c:	4620      	mov	r0, r4
 800581e:	47a8      	blx	r5

}
 8005820:	bf00      	nop
 8005822:	372c      	adds	r7, #44	; 0x2c
 8005824:	46bd      	mov	sp, r7
 8005826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005828:	08024bb8 	.word	0x08024bb8
 800582c:	08024b5c 	.word	0x08024b5c
 8005830:	08024b7c 	.word	0x08024b7c
 8005834:	080247b8 	.word	0x080247b8
 8005838:	0802482c 	.word	0x0802482c
 800583c:	08024b90 	.word	0x08024b90

08005840 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff fd3e 	bl	80052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005850:	4a03      	ldr	r2, [pc, #12]	; (8005860 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	08028e70 	.word	0x08028e70

08005864 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 8005864:	b590      	push	{r4, r7, lr}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	22fe      	movs	r2, #254	; 0xfe
 800586e:	4906      	ldr	r1, [pc, #24]	; (8005888 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x24>)
 8005870:	2004      	movs	r0, #4
 8005872:	f005 ff57 	bl	800b724 <_ZnwjPKci>
 8005876:	4604      	mov	r4, r0
 8005878:	4620      	mov	r0, r4
 800587a:	f7ff ffe1 	bl	8005840 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 800587e:	4623      	mov	r3, r4
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	bd90      	pop	{r4, r7, pc}
 8005888:	0802482c 	.word	0x0802482c

0800588c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4618      	mov	r0, r3
 8005898:	f00e fb32 	bl	8013f00 <_ZN10UtestShellC1Ev>
 800589c:	4a03      	ldr	r2, [pc, #12]	; (80058ac <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4618      	mov	r0, r3
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	08028dc4 	.word	0x08028dc4

080058b0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 80058b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058b2:	b089      	sub	sp, #36	; 0x24
 80058b4:	af04      	add	r7, sp, #16
 80058b6:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 80058b8:	2304      	movs	r3, #4
 80058ba:	73fb      	strb	r3, [r7, #15]

	while(1)	// wait the message until timeout occurs.
	{
		response_state = Wait_Response((char*)"OK", 1000);
 80058bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80058c0:	4811      	ldr	r0, [pc, #68]	; (8005908 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 80058c2:	f7fe fa3b 	bl	8003d3c <Wait_Response>
 80058c6:	4603      	mov	r3, r0
 80058c8:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d100      	bne.n	80058d2 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 80058d0:	e7f4      	b.n	80058bc <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 80058d2:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 80058d4:	f00f fecc 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80058d8:	4604      	mov	r4, r0
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	3338      	adds	r3, #56	; 0x38
 80058de:	681d      	ldr	r5, [r3, #0]
 80058e0:	7bfe      	ldrb	r6, [r7, #15]
 80058e2:	f00f fed5 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80058e6:	4603      	mov	r3, r0
 80058e8:	9302      	str	r3, [sp, #8]
 80058ea:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80058ee:	9301      	str	r3, [sp, #4]
 80058f0:	4b06      	ldr	r3, [pc, #24]	; (800590c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	4b06      	ldr	r3, [pc, #24]	; (8005910 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 80058f6:	4632      	mov	r2, r6
 80058f8:	2101      	movs	r1, #1
 80058fa:	4620      	mov	r0, r4
 80058fc:	47a8      	blx	r5

}
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005906:	bf00      	nop
 8005908:	080247b8 	.word	0x080247b8
 800590c:	0802482c 	.word	0x0802482c
 8005910:	08024bc0 	.word	0x08024bc0

08005914 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff fcd4 	bl	80052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005924:	4a03      	ldr	r2, [pc, #12]	; (8005934 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4618      	mov	r0, r3
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	08028da4 	.word	0x08028da4

08005938 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 8005938:	b590      	push	{r4, r7, lr}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8005944:	4906      	ldr	r1, [pc, #24]	; (8005960 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 8005946:	2004      	movs	r0, #4
 8005948:	f005 feec 	bl	800b724 <_ZnwjPKci>
 800594c:	4604      	mov	r4, r0
 800594e:	4620      	mov	r0, r4
 8005950:	f7ff ffe0 	bl	8005914 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 8005954:	4623      	mov	r3, r4
 8005956:	4618      	mov	r0, r3
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	bd90      	pop	{r4, r7, pc}
 800595e:	bf00      	nop
 8005960:	0802482c 	.word	0x0802482c

08005964 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4618      	mov	r0, r3
 8005970:	f00e fac6 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8005974:	4a03      	ldr	r2, [pc, #12]	; (8005984 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4618      	mov	r0, r3
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	08028cf8 	.word	0x08028cf8

08005988 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 8005988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800598a:	b08f      	sub	sp, #60	; 0x3c
 800598c:	af04      	add	r7, sp, #16
 800598e:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8005990:	2304      	movs	r3, #4
 8005992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	const char response[] = "OK\r\n";
 8005996:	4a38      	ldr	r2, [pc, #224]	; (8005a78 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf0>)
 8005998:	f107 0308 	add.w	r3, r7, #8
 800599c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80059a0:	6018      	str	r0, [r3, #0]
 80059a2:	3304      	adds	r3, #4
 80059a4:	7019      	strb	r1, [r3, #0]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 80059a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80059aa:	4834      	ldr	r0, [pc, #208]	; (8005a7c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf4>)
 80059ac:	f7fe f9c6 	bl	8003d3c <Wait_Response>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if(response_state != IDLE)
 80059b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	d141      	bne.n	8005a42 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xba>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 80059be:	2300      	movs	r3, #0
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
 80059c2:	f107 0308 	add.w	r3, r7, #8
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fa fc38 	bl	800023c <strlen>
 80059cc:	4603      	mov	r3, r0
 80059ce:	461a      	mov	r2, r3
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	4293      	cmp	r3, r2
 80059d4:	dae7      	bge.n	80059a6 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x1e>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80059d6:	f107 0310 	add.w	r3, r7, #16
 80059da:	4929      	ldr	r1, [pc, #164]	; (8005a80 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf8>)
 80059dc:	4618      	mov	r0, r3
 80059de:	f008 fa64 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80059e2:	f107 0310 	add.w	r3, r7, #16
 80059e6:	2100      	movs	r1, #0
 80059e8:	4618      	mov	r0, r3
 80059ea:	f006 fb37 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80059ee:	4604      	mov	r4, r0
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	330c      	adds	r3, #12
 80059f4:	681d      	ldr	r5, [r3, #0]
 80059f6:	f107 0318 	add.w	r3, r7, #24
 80059fa:	4922      	ldr	r1, [pc, #136]	; (8005a84 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 80059fc:	4618      	mov	r0, r3
 80059fe:	f008 fa54 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8005a02:	f107 0318 	add.w	r3, r7, #24
 8005a06:	4619      	mov	r1, r3
 8005a08:	4620      	mov	r0, r4
 8005a0a:	47a8      	blx	r5
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	3264      	adds	r2, #100	; 0x64
 8005a12:	6812      	ldr	r2, [r2, #0]
 8005a14:	f107 0008 	add.w	r0, r7, #8
 8005a18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a1a:	4401      	add	r1, r0
 8005a1c:	7809      	ldrb	r1, [r1, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	4790      	blx	r2
 8005a22:	f107 0318 	add.w	r3, r7, #24
 8005a26:	4618      	mov	r0, r3
 8005a28:	f008 fdf7 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8005a2c:	f107 0310 	add.w	r3, r7, #16
 8005a30:	4618      	mov	r0, r3
 8005a32:	f008 fdf2 	bl	800e61a <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8005a36:	f7fe f95d 	bl	8003cf4 <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a40:	e7bf      	b.n	80059c2 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x3a>
			break;
 8005a42:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 8005a44:	f00f fe14 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8005a48:	4604      	mov	r4, r0
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	3338      	adds	r3, #56	; 0x38
 8005a4e:	681d      	ldr	r5, [r3, #0]
 8005a50:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
 8005a54:	f00f fe1c 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	9302      	str	r3, [sp, #8]
 8005a5c:	f240 1321 	movw	r3, #289	; 0x121
 8005a60:	9301      	str	r3, [sp, #4]
 8005a62:	4b09      	ldr	r3, [pc, #36]	; (8005a88 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	4b09      	ldr	r3, [pc, #36]	; (8005a8c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 8005a68:	4632      	mov	r2, r6
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	47a8      	blx	r5
}
 8005a70:	bf00      	nop
 8005a72:	372c      	adds	r7, #44	; 0x2c
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a78:	08024bb8 	.word	0x08024bb8
 8005a7c:	080247b8 	.word	0x080247b8
 8005a80:	08024b5c 	.word	0x08024b5c
 8005a84:	08024b7c 	.word	0x08024b7c
 8005a88:	0802482c 	.word	0x0802482c
 8005a8c:	08024bf4 	.word	0x08024bf4

08005a90 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff fc16 	bl	80052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005aa0:	4a03      	ldr	r2, [pc, #12]	; (8005ab0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	08028cd8 	.word	0x08028cd8

08005ab4 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005ab4:	b590      	push	{r4, r7, lr}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	f44f 7292 	mov.w	r2, #292	; 0x124
 8005ac0:	4906      	ldr	r1, [pc, #24]	; (8005adc <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 8005ac2:	2004      	movs	r0, #4
 8005ac4:	f005 fe2e 	bl	800b724 <_ZnwjPKci>
 8005ac8:	4604      	mov	r4, r0
 8005aca:	4620      	mov	r0, r4
 8005acc:	f7ff ffe0 	bl	8005a90 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 8005ad0:	4623      	mov	r3, r4
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd90      	pop	{r4, r7, pc}
 8005ada:	bf00      	nop
 8005adc:	0802482c 	.word	0x0802482c

08005ae0 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f00e fa08 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8005af0:	4a03      	ldr	r2, [pc, #12]	; (8005b00 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	08028c2c 	.word	0x08028c2c

08005b04 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8005b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b06:	b08f      	sub	sp, #60	; 0x3c
 8005b08:	af04      	add	r7, sp, #16
 8005b0a:	6078      	str	r0, [r7, #4]
	Status response = TIMEOUT_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data",AT_CWMODE_STATION);
 8005b12:	f107 030c 	add.w	r3, r7, #12
 8005b16:	492f      	ldr	r1, [pc, #188]	; (8005bd4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f008 f9c6 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8005b1e:	f107 030c 	add.w	r3, r7, #12
 8005b22:	2100      	movs	r1, #0
 8005b24:	4618      	mov	r0, r3
 8005b26:	f006 fa99 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	330c      	adds	r3, #12
 8005b30:	681d      	ldr	r5, [r3, #0]
 8005b32:	f107 0314 	add.w	r3, r7, #20
 8005b36:	4928      	ldr	r1, [pc, #160]	; (8005bd8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f008 f9b6 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8005b3e:	f107 0314 	add.w	r3, r7, #20
 8005b42:	4619      	mov	r1, r3
 8005b44:	4620      	mov	r0, r4
 8005b46:	47a8      	blx	r5
 8005b48:	4604      	mov	r4, r0
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	334c      	adds	r3, #76	; 0x4c
 8005b4e:	681d      	ldr	r5, [r3, #0]
 8005b50:	f107 031c 	add.w	r3, r7, #28
 8005b54:	4921      	ldr	r1, [pc, #132]	; (8005bdc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 8005b56:	4618      	mov	r0, r3
 8005b58:	f008 f9a7 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8005b5c:	f107 031c 	add.w	r3, r7, #28
 8005b60:	4a1f      	ldr	r2, [pc, #124]	; (8005be0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 8005b62:	4619      	mov	r1, r3
 8005b64:	4620      	mov	r0, r4
 8005b66:	47a8      	blx	r5
 8005b68:	f107 031c 	add.w	r3, r7, #28
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f008 fd54 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8005b72:	f107 0314 	add.w	r3, r7, #20
 8005b76:	4618      	mov	r0, r3
 8005b78:	f008 fd4f 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8005b7c:	f107 030c 	add.w	r3, r7, #12
 8005b80:	4618      	mov	r0, r3
 8005b82:	f008 fd4a 	bl	800e61a <_ZN12SimpleStringD1Ev>

	while(1)
	{

		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005b86:	4917      	ldr	r1, [pc, #92]	; (8005be4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe0>)
 8005b88:	4817      	ldr	r0, [pc, #92]	; (8005be8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe4>)
 8005b8a:	f7fe f919 	bl	8003dc0 <Connect_Wifi>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 8005b94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b98:	2b04      	cmp	r3, #4
 8005b9a:	d100      	bne.n	8005b9e <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x9a>
		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005b9c:	e7f3      	b.n	8005b86 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x82>
		{
			break;
 8005b9e:	bf00      	nop
		}

	}


	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005ba0:	f00f fd66 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8005ba4:	4604      	mov	r4, r0
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	3338      	adds	r3, #56	; 0x38
 8005baa:	681d      	ldr	r5, [r3, #0]
 8005bac:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8005bb0:	f00f fd6e 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	9302      	str	r3, [sp, #8]
 8005bb8:	f240 1337 	movw	r3, #311	; 0x137
 8005bbc:	9301      	str	r3, [sp, #4]
 8005bbe:	4b0b      	ldr	r3, [pc, #44]	; (8005bec <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe8>)
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	4b0b      	ldr	r3, [pc, #44]	; (8005bf0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xec>)
 8005bc4:	4632      	mov	r2, r6
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	4620      	mov	r0, r4
 8005bca:	47a8      	blx	r5

}
 8005bcc:	bf00      	nop
 8005bce:	372c      	adds	r7, #44	; 0x2c
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bd4:	08024b5c 	.word	0x08024b5c
 8005bd8:	08024b60 	.word	0x08024b60
 8005bdc:	08024b74 	.word	0x08024b74
 8005be0:	080247bc 	.word	0x080247bc
 8005be4:	08024c20 	.word	0x08024c20
 8005be8:	08024c28 	.word	0x08024c28
 8005bec:	0802482c 	.word	0x0802482c
 8005bf0:	08024c30 	.word	0x08024c30

08005bf4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7ff fb64 	bl	80052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005c04:	4a03      	ldr	r2, [pc, #12]	; (8005c14 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	08028c0c 	.word	0x08028c0c

08005c18 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 8005c18:	b590      	push	{r4, r7, lr}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	f240 123b 	movw	r2, #315	; 0x13b
 8005c24:	4906      	ldr	r1, [pc, #24]	; (8005c40 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 8005c26:	2004      	movs	r0, #4
 8005c28:	f005 fd7c 	bl	800b724 <_ZnwjPKci>
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f7ff ffe0 	bl	8005bf4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 8005c34:	4623      	mov	r3, r4
 8005c36:	4618      	mov	r0, r3
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd90      	pop	{r4, r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	0802482c 	.word	0x0802482c

08005c44 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f00e f956 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8005c54:	4a03      	ldr	r2, [pc, #12]	; (8005c64 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	08028b60 	.word	0x08028b60

08005c68 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 8005c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c6a:	b0e1      	sub	sp, #388	; 0x184
 8005c6c:	af04      	add	r7, sp, #16
 8005c6e:	1d3b      	adds	r3, r7, #4
 8005c70:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 8005c72:	4a75      	ldr	r2, [pc, #468]	; (8005e48 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e0>)
 8005c74:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005c78:	4611      	mov	r1, r2
 8005c7a:	2296      	movs	r2, #150	; 0x96
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f01b fde9 	bl	8021854 <memcpy>
	{ "OK\r\n",									// station mode response (AT+CWMODE=1)
	  "OK\r\n",									//  disconnect command response (AT+CWQAP)
	  "ERROR\r\n"								// connect wifi command response (AT+CWJAP="SSID","password")
	};

	const char fake_tx_buffer[3][50] =
 8005c82:	f107 0308 	add.w	r3, r7, #8
 8005c86:	4a71      	ldr	r2, [pc, #452]	; (8005e4c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e4>)
 8005c88:	4618      	mov	r0, r3
 8005c8a:	4611      	mov	r1, r2
 8005c8c:	2396      	movs	r3, #150	; 0x96
 8005c8e:	461a      	mov	r2, r3
 8005c90:	f01b fde0 	bl	8021854 <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005c94:	2300      	movs	r3, #0
 8005c96:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005c9a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	dc46      	bgt.n	8005d30 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005ca2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005ca6:	496a      	ldr	r1, [pc, #424]	; (8005e50 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e8>)
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f008 f8fe 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8005cae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f006 f9d1 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005cba:	4604      	mov	r4, r0
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	330c      	adds	r3, #12
 8005cc0:	681d      	ldr	r5, [r3, #0]
 8005cc2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005cc6:	4963      	ldr	r1, [pc, #396]	; (8005e54 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1ec>)
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f008 f8ee 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8005cce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	47a8      	blx	r5
 8005cd8:	4604      	mov	r4, r0
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	334c      	adds	r3, #76	; 0x4c
 8005cde:	681d      	ldr	r5, [r3, #0]
 8005ce0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ce4:	495c      	ldr	r1, [pc, #368]	; (8005e58 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f0>)
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f008 f8df 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8005cec:	f107 0208 	add.w	r2, r7, #8
 8005cf0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005cf4:	2132      	movs	r1, #50	; 0x32
 8005cf6:	fb01 f303 	mul.w	r3, r1, r3
 8005cfa:	441a      	add	r2, r3
 8005cfc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d00:	4619      	mov	r1, r3
 8005d02:	4620      	mov	r0, r4
 8005d04:	47a8      	blx	r5
 8005d06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f008 fc85 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8005d10:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d14:	4618      	mov	r0, r3
 8005d16:	f008 fc80 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8005d1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f008 fc7b 	bl	800e61a <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005d24:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005d28:	3301      	adds	r3, #1
 8005d2a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005d2e:	e7b4      	b.n	8005c9a <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x32>
	}
	Status response = IDLE;
 8005d30:	2304      	movs	r3, #4
 8005d32:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	int i = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005d3c:	4947      	ldr	r1, [pc, #284]	; (8005e5c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005d3e:	4848      	ldr	r0, [pc, #288]	; (8005e60 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f8>)
 8005d40:	f7fe f83e 	bl	8003dc0 <Connect_Wifi>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response != IDLE)
 8005d4a:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	d15d      	bne.n	8005e0e <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1a6>
		{
			break;
		}

		if(i<3)
 8005d52:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	dcf0      	bgt.n	8005d3c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005d60:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005d64:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005d68:	2132      	movs	r1, #50	; 0x32
 8005d6a:	fb01 f303 	mul.w	r3, r1, r3
 8005d6e:	4413      	add	r3, r2
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fa fa63 	bl	800023c <strlen>
 8005d76:	4603      	mov	r3, r0
 8005d78:	461a      	mov	r2, r3
 8005d7a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	da3f      	bge.n	8005e02 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x19a>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005d82:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005d86:	4932      	ldr	r1, [pc, #200]	; (8005e50 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e8>)
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f008 f88e 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8005d8e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005d92:	2100      	movs	r1, #0
 8005d94:	4618      	mov	r0, r3
 8005d96:	f006 f961 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	6823      	ldr	r3, [r4, #0]
 8005d9e:	330c      	adds	r3, #12
 8005da0:	681d      	ldr	r5, [r3, #0]
 8005da2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005da6:	492f      	ldr	r1, [pc, #188]	; (8005e64 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1fc>)
 8005da8:	4618      	mov	r0, r3
 8005daa:	f008 f87e 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8005dae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005db2:	4619      	mov	r1, r3
 8005db4:	4620      	mov	r0, r4
 8005db6:	47a8      	blx	r5
 8005db8:	4603      	mov	r3, r0
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	3264      	adds	r2, #100	; 0x64
 8005dbe:	6812      	ldr	r2, [r2, #0]
 8005dc0:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005dc4:	2032      	movs	r0, #50	; 0x32
 8005dc6:	fb00 f101 	mul.w	r1, r0, r1
 8005dca:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005dce:	4408      	add	r0, r1
 8005dd0:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005dd4:	4401      	add	r1, r0
 8005dd6:	39d0      	subs	r1, #208	; 0xd0
 8005dd8:	7809      	ldrb	r1, [r1, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	4790      	blx	r2
 8005dde:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005de2:	4618      	mov	r0, r3
 8005de4:	f008 fc19 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8005de8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005dec:	4618      	mov	r0, r3
 8005dee:	f008 fc14 	bl	800e61a <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005df2:	f7fd ff7f 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005df6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005e00:	e7ae      	b.n	8005d60 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xf8>
			}
			i++;
 8005e02:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005e06:	3301      	adds	r3, #1
 8005e08:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005e0c:	e796      	b.n	8005d3c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
			break;
 8005e0e:	bf00      	nop
	LONGS_EQUAL(STATUS_ERROR,response);
 8005e10:	f00f fc2e 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8005e14:	4604      	mov	r4, r0
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	3338      	adds	r3, #56	; 0x38
 8005e1a:	681d      	ldr	r5, [r3, #0]
 8005e1c:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005e20:	f00f fc36 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005e24:	4603      	mov	r3, r0
 8005e26:	9302      	str	r3, [sp, #8]
 8005e28:	f240 1363 	movw	r3, #355	; 0x163
 8005e2c:	9301      	str	r3, [sp, #4]
 8005e2e:	4b0e      	ldr	r3, [pc, #56]	; (8005e68 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x200>)
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	4b0e      	ldr	r3, [pc, #56]	; (8005e6c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x204>)
 8005e34:	4632      	mov	r2, r6
 8005e36:	2103      	movs	r1, #3
 8005e38:	4620      	mov	r0, r4
 8005e3a:	47a8      	blx	r5

}
 8005e3c:	bf00      	nop
 8005e3e:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e46:	bf00      	nop
 8005e48:	08024c88 	.word	0x08024c88
 8005e4c:	08024d20 	.word	0x08024d20
 8005e50:	08024b5c 	.word	0x08024b5c
 8005e54:	08024b60 	.word	0x08024b60
 8005e58:	08024b74 	.word	0x08024b74
 8005e5c:	08024c20 	.word	0x08024c20
 8005e60:	08024c28 	.word	0x08024c28
 8005e64:	08024b7c 	.word	0x08024b7c
 8005e68:	0802482c 	.word	0x0802482c
 8005e6c:	08024c5c 	.word	0x08024c5c

08005e70 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff fa26 	bl	80052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005e80:	4a03      	ldr	r2, [pc, #12]	; (8005e90 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	08028b40 	.word	0x08028b40

08005e94 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 8005e94:	b590      	push	{r4, r7, lr}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	f240 1267 	movw	r2, #359	; 0x167
 8005ea0:	4906      	ldr	r1, [pc, #24]	; (8005ebc <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 8005ea2:	2004      	movs	r0, #4
 8005ea4:	f005 fc3e 	bl	800b724 <_ZnwjPKci>
 8005ea8:	4604      	mov	r4, r0
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f7ff ffe0 	bl	8005e70 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 8005eb0:	4623      	mov	r3, r4
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd90      	pop	{r4, r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	0802482c 	.word	0x0802482c

08005ec0 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f00e f818 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8005ed0:	4a03      	ldr	r2, [pc, #12]	; (8005ee0 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	08028a94 	.word	0x08028a94

08005ee4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 8005ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ee6:	b0e1      	sub	sp, #388	; 0x184
 8005ee8:	af04      	add	r7, sp, #16
 8005eea:	1d3b      	adds	r3, r7, #4
 8005eec:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 8005eee:	4a73      	ldr	r2, [pc, #460]	; (80060bc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1d8>)
 8005ef0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	2296      	movs	r2, #150	; 0x96
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f01b fcab 	bl	8021854 <memcpy>
	{ "OK\r\n",
	  "OK\r\n",
	  "OK\r\n"
	};

	const char fake_tx_buffer[3][50] =
 8005efe:	f107 0308 	add.w	r3, r7, #8
 8005f02:	4a6f      	ldr	r2, [pc, #444]	; (80060c0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1dc>)
 8005f04:	4618      	mov	r0, r3
 8005f06:	4611      	mov	r1, r2
 8005f08:	2396      	movs	r3, #150	; 0x96
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f01b fca2 	bl	8021854 <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005f10:	2300      	movs	r3, #0
 8005f12:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005f16:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	dc46      	bgt.n	8005fac <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005f1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f22:	4968      	ldr	r1, [pc, #416]	; (80060c4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e0>)
 8005f24:	4618      	mov	r0, r3
 8005f26:	f007 ffc0 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8005f2a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f2e:	2100      	movs	r1, #0
 8005f30:	4618      	mov	r0, r3
 8005f32:	f006 f893 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005f36:	4604      	mov	r4, r0
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	330c      	adds	r3, #12
 8005f3c:	681d      	ldr	r5, [r3, #0]
 8005f3e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f42:	4961      	ldr	r1, [pc, #388]	; (80060c8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e4>)
 8005f44:	4618      	mov	r0, r3
 8005f46:	f007 ffb0 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8005f4a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4620      	mov	r0, r4
 8005f52:	47a8      	blx	r5
 8005f54:	4604      	mov	r4, r0
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	334c      	adds	r3, #76	; 0x4c
 8005f5a:	681d      	ldr	r5, [r3, #0]
 8005f5c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f60:	495a      	ldr	r1, [pc, #360]	; (80060cc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e8>)
 8005f62:	4618      	mov	r0, r3
 8005f64:	f007 ffa1 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8005f68:	f107 0208 	add.w	r2, r7, #8
 8005f6c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005f70:	2132      	movs	r1, #50	; 0x32
 8005f72:	fb01 f303 	mul.w	r3, r1, r3
 8005f76:	441a      	add	r2, r3
 8005f78:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4620      	mov	r0, r4
 8005f80:	47a8      	blx	r5
 8005f82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f86:	4618      	mov	r0, r3
 8005f88:	f008 fb47 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8005f8c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f90:	4618      	mov	r0, r3
 8005f92:	f008 fb42 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8005f96:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f008 fb3d 	bl	800e61a <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005fa0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005faa:	e7b4      	b.n	8005f16 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x32>
	}
	Status response;
	int i = 0;
 8005fac:	2300      	movs	r3, #0
 8005fae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005fb2:	4947      	ldr	r1, [pc, #284]	; (80060d0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1ec>)
 8005fb4:	4847      	ldr	r0, [pc, #284]	; (80060d4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005fb6:	f7fd ff03 	bl	8003dc0 <Connect_Wifi>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response != IDLE)
 8005fc0:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d15d      	bne.n	8006084 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1a0>
		{
			break;
		}

		if(i<3)
 8005fc8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	dcf0      	bgt.n	8005fb2 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005fd6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005fda:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005fde:	2132      	movs	r1, #50	; 0x32
 8005fe0:	fb01 f303 	mul.w	r3, r1, r3
 8005fe4:	4413      	add	r3, r2
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fa f928 	bl	800023c <strlen>
 8005fec:	4603      	mov	r3, r0
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	da3f      	bge.n	8006078 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x194>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005ff8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005ffc:	4931      	ldr	r1, [pc, #196]	; (80060c4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e0>)
 8005ffe:	4618      	mov	r0, r3
 8006000:	f007 ff53 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006004:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8006008:	2100      	movs	r1, #0
 800600a:	4618      	mov	r0, r3
 800600c:	f006 f826 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006010:	4604      	mov	r4, r0
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	330c      	adds	r3, #12
 8006016:	681d      	ldr	r5, [r3, #0]
 8006018:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800601c:	492e      	ldr	r1, [pc, #184]	; (80060d8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f4>)
 800601e:	4618      	mov	r0, r3
 8006020:	f007 ff43 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006024:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8006028:	4619      	mov	r1, r3
 800602a:	4620      	mov	r0, r4
 800602c:	47a8      	blx	r5
 800602e:	4603      	mov	r3, r0
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	3264      	adds	r2, #100	; 0x64
 8006034:	6812      	ldr	r2, [r2, #0]
 8006036:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 800603a:	2032      	movs	r0, #50	; 0x32
 800603c:	fb00 f101 	mul.w	r1, r0, r1
 8006040:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8006044:	4408      	add	r0, r1
 8006046:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 800604a:	4401      	add	r1, r0
 800604c:	39d0      	subs	r1, #208	; 0xd0
 800604e:	7809      	ldrb	r1, [r1, #0]
 8006050:	4618      	mov	r0, r3
 8006052:	4790      	blx	r2
 8006054:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8006058:	4618      	mov	r0, r3
 800605a:	f008 fade 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800605e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8006062:	4618      	mov	r0, r3
 8006064:	f008 fad9 	bl	800e61a <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006068:	f7fd fe44 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800606c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006070:	3301      	adds	r3, #1
 8006072:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8006076:	e7ae      	b.n	8005fd6 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xf2>
			}
			i++;
 8006078:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800607c:	3301      	adds	r3, #1
 800607e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8006082:	e796      	b.n	8005fb2 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
			break;
 8006084:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 8006086:	f00f faf3 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 800608a:	4604      	mov	r4, r0
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	3338      	adds	r3, #56	; 0x38
 8006090:	681d      	ldr	r5, [r3, #0]
 8006092:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8006096:	f00f fafb 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800609a:	4603      	mov	r3, r0
 800609c:	9302      	str	r3, [sp, #8]
 800609e:	f240 138f 	movw	r3, #399	; 0x18f
 80060a2:	9301      	str	r3, [sp, #4]
 80060a4:	4b0d      	ldr	r3, [pc, #52]	; (80060dc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f8>)
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	4b0d      	ldr	r3, [pc, #52]	; (80060e0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1fc>)
 80060aa:	4632      	mov	r2, r6
 80060ac:	2102      	movs	r1, #2
 80060ae:	4620      	mov	r0, r4
 80060b0:	47a8      	blx	r5

}
 80060b2:	bf00      	nop
 80060b4:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060bc:	08024de0 	.word	0x08024de0
 80060c0:	08024d20 	.word	0x08024d20
 80060c4:	08024b5c 	.word	0x08024b5c
 80060c8:	08024b60 	.word	0x08024b60
 80060cc:	08024b74 	.word	0x08024b74
 80060d0:	08024c20 	.word	0x08024c20
 80060d4:	08024c28 	.word	0x08024c28
 80060d8:	08024b7c 	.word	0x08024b7c
 80060dc:	0802482c 	.word	0x0802482c
 80060e0:	08024db8 	.word	0x08024db8

080060e4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff f8ec 	bl	80052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80060f4:	4a03      	ldr	r2, [pc, #12]	; (8006104 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4618      	mov	r0, r3
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	08028a74 	.word	0x08028a74

08006108 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8006108:	b590      	push	{r4, r7, lr}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	f240 1293 	movw	r2, #403	; 0x193
 8006114:	4906      	ldr	r1, [pc, #24]	; (8006130 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 8006116:	2004      	movs	r0, #4
 8006118:	f005 fb04 	bl	800b724 <_ZnwjPKci>
 800611c:	4604      	mov	r4, r0
 800611e:	4620      	mov	r0, r4
 8006120:	f7ff ffe0 	bl	80060e4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>
 8006124:	4623      	mov	r3, r4
 8006126:	4618      	mov	r0, r3
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	bd90      	pop	{r4, r7, pc}
 800612e:	bf00      	nop
 8006130:	0802482c 	.word	0x0802482c

08006134 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>:
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4618      	mov	r0, r3
 8006140:	f00d fede 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8006144:	4a03      	ldr	r2, [pc, #12]	; (8006154 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	080289c8 	.word	0x080289c8

08006158 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8006158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800615a:	b08f      	sub	sp, #60	; 0x3c
 800615c:	af04      	add	r7, sp, #16
 800615e:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 8006160:	f107 030c 	add.w	r3, r7, #12
 8006164:	492e      	ldr	r1, [pc, #184]	; (8006220 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xc8>)
 8006166:	4618      	mov	r0, r3
 8006168:	f007 fe9f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800616c:	f107 030c 	add.w	r3, r7, #12
 8006170:	2100      	movs	r1, #0
 8006172:	4618      	mov	r0, r3
 8006174:	f005 ff72 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006178:	4604      	mov	r4, r0
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	330c      	adds	r3, #12
 800617e:	681d      	ldr	r5, [r3, #0]
 8006180:	f107 0314 	add.w	r3, r7, #20
 8006184:	4927      	ldr	r1, [pc, #156]	; (8006224 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xcc>)
 8006186:	4618      	mov	r0, r3
 8006188:	f007 fe8f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800618c:	f107 0314 	add.w	r3, r7, #20
 8006190:	4619      	mov	r1, r3
 8006192:	4620      	mov	r0, r4
 8006194:	47a8      	blx	r5
 8006196:	4604      	mov	r4, r0
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	334c      	adds	r3, #76	; 0x4c
 800619c:	681d      	ldr	r5, [r3, #0]
 800619e:	f107 031c 	add.w	r3, r7, #28
 80061a2:	4921      	ldr	r1, [pc, #132]	; (8006228 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 80061a4:	4618      	mov	r0, r3
 80061a6:	f007 fe80 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80061aa:	f107 031c 	add.w	r3, r7, #28
 80061ae:	4a1f      	ldr	r2, [pc, #124]	; (800622c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 80061b0:	4619      	mov	r1, r3
 80061b2:	4620      	mov	r0, r4
 80061b4:	47a8      	blx	r5
 80061b6:	f107 031c 	add.w	r3, r7, #28
 80061ba:	4618      	mov	r0, r3
 80061bc:	f008 fa2d 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80061c0:	f107 0314 	add.w	r3, r7, #20
 80061c4:	4618      	mov	r0, r3
 80061c6:	f008 fa28 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80061ca:	f107 030c 	add.w	r3, r7, #12
 80061ce:	4618      	mov	r0, r3
 80061d0:	f008 fa23 	bl	800e61a <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 80061d4:	f7fd fe2e 	bl	8003e34 <Disconnect_Wifi>
 80061d8:	4603      	mov	r3, r0
 80061da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 80061de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d100      	bne.n	80061e8 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x90>
		response = Disconnect_Wifi();
 80061e6:	e7f5      	b.n	80061d4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x7c>
			break;
 80061e8:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response);
 80061ea:	f00f fa41 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80061ee:	4604      	mov	r4, r0
 80061f0:	6823      	ldr	r3, [r4, #0]
 80061f2:	3338      	adds	r3, #56	; 0x38
 80061f4:	681d      	ldr	r5, [r3, #0]
 80061f6:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 80061fa:	f00f fa49 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80061fe:	4603      	mov	r3, r0
 8006200:	9302      	str	r3, [sp, #8]
 8006202:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
 8006206:	9301      	str	r3, [sp, #4]
 8006208:	4b09      	ldr	r3, [pc, #36]	; (8006230 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	4b09      	ldr	r3, [pc, #36]	; (8006234 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 800620e:	4632      	mov	r2, r6
 8006210:	2101      	movs	r1, #1
 8006212:	4620      	mov	r0, r4
 8006214:	47a8      	blx	r5
}
 8006216:	bf00      	nop
 8006218:	372c      	adds	r7, #44	; 0x2c
 800621a:	46bd      	mov	sp, r7
 800621c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800621e:	bf00      	nop
 8006220:	08024b5c 	.word	0x08024b5c
 8006224:	08024b60 	.word	0x08024b60
 8006228:	08024b74 	.word	0x08024b74
 800622c:	080247cc 	.word	0x080247cc
 8006230:	0802482c 	.word	0x0802482c
 8006234:	08024c30 	.word	0x08024c30

08006238 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff f842 	bl	80052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006248:	4a03      	ldr	r2, [pc, #12]	; (8006258 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev+0x20>)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4618      	mov	r0, r3
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	080289a8 	.word	0x080289a8

0800625c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv>:
 800625c:	b590      	push	{r4, r7, lr}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	f240 12a5 	movw	r2, #421	; 0x1a5
 8006268:	4906      	ldr	r1, [pc, #24]	; (8006284 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv+0x28>)
 800626a:	2004      	movs	r0, #4
 800626c:	f005 fa5a 	bl	800b724 <_ZnwjPKci>
 8006270:	4604      	mov	r4, r0
 8006272:	4620      	mov	r0, r4
 8006274:	f7ff ffe0 	bl	8006238 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>
 8006278:	4623      	mov	r3, r4
 800627a:	4618      	mov	r0, r3
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	bd90      	pop	{r4, r7, pc}
 8006282:	bf00      	nop
 8006284:	0802482c 	.word	0x0802482c

08006288 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>:
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4618      	mov	r0, r3
 8006294:	f00d fe34 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8006298:	4a03      	ldr	r2, [pc, #12]	; (80062a8 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev+0x20>)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4618      	mov	r0, r3
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	080288fc 	.word	0x080288fc

080062ac <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv>:
{
 80062ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ae:	b093      	sub	sp, #76	; 0x4c
 80062b0:	af04      	add	r7, sp, #16
 80062b2:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 80062b4:	f107 0308 	add.w	r3, r7, #8
 80062b8:	494a      	ldr	r1, [pc, #296]	; (80063e4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 80062ba:	4618      	mov	r0, r3
 80062bc:	f007 fdf5 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80062c0:	f107 0308 	add.w	r3, r7, #8
 80062c4:	2100      	movs	r1, #0
 80062c6:	4618      	mov	r0, r3
 80062c8:	f005 fec8 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80062cc:	4604      	mov	r4, r0
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	330c      	adds	r3, #12
 80062d2:	681d      	ldr	r5, [r3, #0]
 80062d4:	f107 0310 	add.w	r3, r7, #16
 80062d8:	4943      	ldr	r1, [pc, #268]	; (80063e8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x13c>)
 80062da:	4618      	mov	r0, r3
 80062dc:	f007 fde5 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80062e0:	f107 0310 	add.w	r3, r7, #16
 80062e4:	4619      	mov	r1, r3
 80062e6:	4620      	mov	r0, r4
 80062e8:	47a8      	blx	r5
 80062ea:	4604      	mov	r4, r0
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	334c      	adds	r3, #76	; 0x4c
 80062f0:	681d      	ldr	r5, [r3, #0]
 80062f2:	f107 0318 	add.w	r3, r7, #24
 80062f6:	493d      	ldr	r1, [pc, #244]	; (80063ec <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x140>)
 80062f8:	4618      	mov	r0, r3
 80062fa:	f007 fdd6 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80062fe:	f107 0318 	add.w	r3, r7, #24
 8006302:	4a3b      	ldr	r2, [pc, #236]	; (80063f0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x144>)
 8006304:	4619      	mov	r1, r3
 8006306:	4620      	mov	r0, r4
 8006308:	47a8      	blx	r5
 800630a:	f107 0318 	add.w	r3, r7, #24
 800630e:	4618      	mov	r0, r3
 8006310:	f008 f983 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8006314:	f107 0310 	add.w	r3, r7, #16
 8006318:	4618      	mov	r0, r3
 800631a:	f008 f97e 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800631e:	f107 0308 	add.w	r3, r7, #8
 8006322:	4618      	mov	r0, r3
 8006324:	f008 f979 	bl	800e61a <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 8006328:	f7fd fd84 	bl	8003e34 <Disconnect_Wifi>
 800632c:	4603      	mov	r3, r0
 800632e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 8006332:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006336:	2b04      	cmp	r3, #4
 8006338:	d139      	bne.n	80063ae <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 800633a:	2300      	movs	r3, #0
 800633c:	637b      	str	r3, [r7, #52]	; 0x34
 800633e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006340:	2b01      	cmp	r3, #1
 8006342:	dcf1      	bgt.n	8006328 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 8006344:	f107 0320 	add.w	r3, r7, #32
 8006348:	4926      	ldr	r1, [pc, #152]	; (80063e4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 800634a:	4618      	mov	r0, r3
 800634c:	f007 fdad 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006350:	f107 0320 	add.w	r3, r7, #32
 8006354:	2100      	movs	r1, #0
 8006356:	4618      	mov	r0, r3
 8006358:	f005 fe80 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800635c:	4604      	mov	r4, r0
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	330c      	adds	r3, #12
 8006362:	681d      	ldr	r5, [r3, #0]
 8006364:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006368:	4922      	ldr	r1, [pc, #136]	; (80063f4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x148>)
 800636a:	4618      	mov	r0, r3
 800636c:	f007 fd9d 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006370:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006374:	4619      	mov	r1, r3
 8006376:	4620      	mov	r0, r4
 8006378:	47a8      	blx	r5
 800637a:	4603      	mov	r3, r0
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	3264      	adds	r2, #100	; 0x64
 8006380:	6812      	ldr	r2, [r2, #0]
 8006382:	481d      	ldr	r0, [pc, #116]	; (80063f8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x14c>)
 8006384:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006386:	4401      	add	r1, r0
 8006388:	7809      	ldrb	r1, [r1, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	4790      	blx	r2
 800638e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006392:	4618      	mov	r0, r3
 8006394:	f008 f941 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8006398:	f107 0320 	add.w	r3, r7, #32
 800639c:	4618      	mov	r0, r3
 800639e:	f008 f93c 	bl	800e61a <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80063a2:	f7fd fca7 	bl	8003cf4 <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 80063a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a8:	3301      	adds	r3, #1
 80063aa:	637b      	str	r3, [r7, #52]	; 0x34
 80063ac:	e7c7      	b.n	800633e <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x92>
			break;
 80063ae:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 80063b0:	f00f f95e 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80063b4:	4604      	mov	r4, r0
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	3338      	adds	r3, #56	; 0x38
 80063ba:	681d      	ldr	r5, [r3, #0]
 80063bc:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 80063c0:	f00f f966 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80063c4:	4603      	mov	r3, r0
 80063c6:	9302      	str	r3, [sp, #8]
 80063c8:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 80063cc:	9301      	str	r3, [sp, #4]
 80063ce:	4b0b      	ldr	r3, [pc, #44]	; (80063fc <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x150>)
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	4b0b      	ldr	r3, [pc, #44]	; (8006400 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x154>)
 80063d4:	4632      	mov	r2, r6
 80063d6:	2102      	movs	r1, #2
 80063d8:	4620      	mov	r0, r4
 80063da:	47a8      	blx	r5
}
 80063dc:	bf00      	nop
 80063de:	373c      	adds	r7, #60	; 0x3c
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e4:	08024b5c 	.word	0x08024b5c
 80063e8:	08024b60 	.word	0x08024b60
 80063ec:	08024b74 	.word	0x08024b74
 80063f0:	080247cc 	.word	0x080247cc
 80063f4:	08024b7c 	.word	0x08024b7c
 80063f8:	080247b8 	.word	0x080247b8
 80063fc:	0802482c 	.word	0x0802482c
 8006400:	08024db8 	.word	0x08024db8

08006404 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Command_Process_Test)
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe ff5c 	bl	80052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006414:	4a03      	ldr	r2, [pc, #12]	; (8006424 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev+0x20>)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	080288dc 	.word	0x080288dc

08006428 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv>:
 8006428:	b590      	push	{r4, r7, lr}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006434:	4906      	ldr	r1, [pc, #24]	; (8006450 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv+0x28>)
 8006436:	2004      	movs	r0, #4
 8006438:	f005 f974 	bl	800b724 <_ZnwjPKci>
 800643c:	4604      	mov	r4, r0
 800643e:	4620      	mov	r0, r4
 8006440:	f7ff ffe0 	bl	8006404 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>
 8006444:	4623      	mov	r3, r4
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	bd90      	pop	{r4, r7, pc}
 800644e:	bf00      	nop
 8006450:	0802482c 	.word	0x0802482c

08006454 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>:
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4618      	mov	r0, r3
 8006460:	f00d fd4e 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8006464:	4a03      	ldr	r2, [pc, #12]	; (8006474 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev+0x20>)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	08028830 	.word	0x08028830

08006478 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv>:
{
 8006478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800647a:	b09b      	sub	sp, #108	; 0x6c
 800647c:	af04      	add	r7, sp, #16
 800647e:	6078      	str	r0, [r7, #4]
	char *response_arr[3] =
 8006480:	4a6a      	ldr	r2, [pc, #424]	; (800662c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1b4>)
 8006482:	f107 0314 	add.w	r3, r7, #20
 8006486:	ca07      	ldmia	r2, {r0, r1, r2}
 8006488:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{ (char*)AT_RESPONSE_OK,									// station mode response
	  (char*)AT_RESPONSE_OK,									// check wifi connection response
	  (char*)AT_RESPONSE_OK										// connect wifi command response
	};

	char *fake_command_buffer[3] =
 800648c:	4a68      	ldr	r2, [pc, #416]	; (8006630 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1b8>)
 800648e:	f107 0308 	add.w	r3, r7, #8
 8006492:	ca07      	ldmia	r2, {r0, r1, r2}
 8006494:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)AT_CWMODE_STATION,
		(char*)AT_CWQAP,
		(char*)"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8006498:	2300      	movs	r3, #0
 800649a:	657b      	str	r3, [r7, #84]	; 0x54
 800649c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800649e:	2b02      	cmp	r3, #2
 80064a0:	dc43      	bgt.n	800652a <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 80064a2:	f107 0320 	add.w	r3, r7, #32
 80064a6:	4963      	ldr	r1, [pc, #396]	; (8006634 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1bc>)
 80064a8:	4618      	mov	r0, r3
 80064aa:	f007 fcfe 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80064ae:	f107 0320 	add.w	r3, r7, #32
 80064b2:	2100      	movs	r1, #0
 80064b4:	4618      	mov	r0, r3
 80064b6:	f005 fdd1 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80064ba:	4604      	mov	r4, r0
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	330c      	adds	r3, #12
 80064c0:	681d      	ldr	r5, [r3, #0]
 80064c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064c6:	495c      	ldr	r1, [pc, #368]	; (8006638 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c0>)
 80064c8:	4618      	mov	r0, r3
 80064ca:	f007 fcee 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80064ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064d2:	4619      	mov	r1, r3
 80064d4:	4620      	mov	r0, r4
 80064d6:	47a8      	blx	r5
 80064d8:	4604      	mov	r4, r0
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	334c      	adds	r3, #76	; 0x4c
 80064de:	681d      	ldr	r5, [r3, #0]
 80064e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064e4:	4955      	ldr	r1, [pc, #340]	; (800663c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c4>)
 80064e6:	4618      	mov	r0, r3
 80064e8:	f007 fcdf 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80064ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80064f4:	4413      	add	r3, r2
 80064f6:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80064fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064fe:	4619      	mov	r1, r3
 8006500:	4620      	mov	r0, r4
 8006502:	47a8      	blx	r5
 8006504:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006508:	4618      	mov	r0, r3
 800650a:	f008 f886 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800650e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006512:	4618      	mov	r0, r3
 8006514:	f008 f881 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8006518:	f107 0320 	add.w	r3, r7, #32
 800651c:	4618      	mov	r0, r3
 800651e:	f008 f87c 	bl	800e61a <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8006522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006524:	3301      	adds	r3, #1
 8006526:	657b      	str	r3, [r7, #84]	; 0x54
 8006528:	e7b8      	b.n	800649c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x24>
	}
	Status response;
	int i = 0;
 800652a:	2300      	movs	r3, #0
 800652c:	653b      	str	r3, [r7, #80]	; 0x50
	while(1)
	{
		response = Command_Process(fake_command_buffer, response_arr, 3);
 800652e:	f107 0114 	add.w	r1, r7, #20
 8006532:	f107 0308 	add.w	r3, r7, #8
 8006536:	2203      	movs	r2, #3
 8006538:	4618      	mov	r0, r3
 800653a:	f7fd fc97 	bl	8003e6c <Command_Process>
 800653e:	4603      	mov	r3, r0
 8006540:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		if(response != IDLE)
 8006544:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006548:	2b04      	cmp	r3, #4
 800654a:	d153      	bne.n	80065f4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x17c>
		{
			break;
		}

		if(i<3)
 800654c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800654e:	2b02      	cmp	r3, #2
 8006550:	dced      	bgt.n	800652e <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006552:	2300      	movs	r3, #0
 8006554:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800655e:	4413      	add	r3, r2
 8006560:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006564:	4618      	mov	r0, r3
 8006566:	f7f9 fe69 	bl	800023c <strlen>
 800656a:	4603      	mov	r3, r0
 800656c:	461a      	mov	r2, r3
 800656e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006570:	4293      	cmp	r3, r2
 8006572:	da3b      	bge.n	80065ec <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x174>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006574:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006578:	492e      	ldr	r1, [pc, #184]	; (8006634 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1bc>)
 800657a:	4618      	mov	r0, r3
 800657c:	f007 fc95 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006580:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006584:	2100      	movs	r1, #0
 8006586:	4618      	mov	r0, r3
 8006588:	f005 fd68 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800658c:	4604      	mov	r4, r0
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	330c      	adds	r3, #12
 8006592:	681d      	ldr	r5, [r3, #0]
 8006594:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006598:	4929      	ldr	r1, [pc, #164]	; (8006640 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c8>)
 800659a:	4618      	mov	r0, r3
 800659c:	f007 fc85 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80065a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80065a4:	4619      	mov	r1, r3
 80065a6:	4620      	mov	r0, r4
 80065a8:	47a8      	blx	r5
 80065aa:	4602      	mov	r2, r0
 80065ac:	6813      	ldr	r3, [r2, #0]
 80065ae:	3364      	adds	r3, #100	; 0x64
 80065b0:	681c      	ldr	r4, [r3, #0]
 80065b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80065ba:	440b      	add	r3, r1
 80065bc:	f853 1c44 	ldr.w	r1, [r3, #-68]
 80065c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c2:	440b      	add	r3, r1
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	4619      	mov	r1, r3
 80065c8:	4610      	mov	r0, r2
 80065ca:	47a0      	blx	r4
 80065cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80065d0:	4618      	mov	r0, r3
 80065d2:	f008 f822 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80065d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80065da:	4618      	mov	r0, r3
 80065dc:	f008 f81d 	bl	800e61a <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 80065e0:	f7fd fb88 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80065e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e6:	3301      	adds	r3, #1
 80065e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065ea:	e7b4      	b.n	8006556 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xde>
			}
			i++;
 80065ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065ee:	3301      	adds	r3, #1
 80065f0:	653b      	str	r3, [r7, #80]	; 0x50
		}

	}
 80065f2:	e79c      	b.n	800652e <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
			break;
 80065f4:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 80065f6:	f00f f83b 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80065fa:	4604      	mov	r4, r0
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	3338      	adds	r3, #56	; 0x38
 8006600:	681d      	ldr	r5, [r3, #0]
 8006602:	f897 604b 	ldrb.w	r6, [r7, #75]	; 0x4b
 8006606:	f00f f843 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800660a:	4603      	mov	r3, r0
 800660c:	9302      	str	r3, [sp, #8]
 800660e:	f240 13e5 	movw	r3, #485	; 0x1e5
 8006612:	9301      	str	r3, [sp, #4]
 8006614:	4b0b      	ldr	r3, [pc, #44]	; (8006644 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1cc>)
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d0>)
 800661a:	4632      	mov	r2, r6
 800661c:	2102      	movs	r1, #2
 800661e:	4620      	mov	r0, r4
 8006620:	47a8      	blx	r5

}
 8006622:	bf00      	nop
 8006624:	375c      	adds	r7, #92	; 0x5c
 8006626:	46bd      	mov	sp, r7
 8006628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800662a:	bf00      	nop
 800662c:	08024e78 	.word	0x08024e78
 8006630:	08024e84 	.word	0x08024e84
 8006634:	08024b5c 	.word	0x08024b5c
 8006638:	08024b60 	.word	0x08024b60
 800663c:	08024b74 	.word	0x08024b74
 8006640:	08024b7c 	.word	0x08024b7c
 8006644:	0802482c 	.word	0x0802482c
 8006648:	08024db8 	.word	0x08024db8

0800664c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Test)
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe fe38 	bl	80052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800665c:	4a03      	ldr	r2, [pc, #12]	; (800666c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev+0x20>)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4618      	mov	r0, r3
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	08028810 	.word	0x08028810

08006670 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv>:
 8006670:	b590      	push	{r4, r7, lr}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	f240 12e9 	movw	r2, #489	; 0x1e9
 800667c:	4906      	ldr	r1, [pc, #24]	; (8006698 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv+0x28>)
 800667e:	2004      	movs	r0, #4
 8006680:	f005 f850 	bl	800b724 <_ZnwjPKci>
 8006684:	4604      	mov	r4, r0
 8006686:	4620      	mov	r0, r4
 8006688:	f7ff ffe0 	bl	800664c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>
 800668c:	4623      	mov	r3, r4
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	bd90      	pop	{r4, r7, pc}
 8006696:	bf00      	nop
 8006698:	0802482c 	.word	0x0802482c

0800669c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>:
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f00d fc2a 	bl	8013f00 <_ZN10UtestShellC1Ev>
 80066ac:	4a03      	ldr	r2, [pc, #12]	; (80066bc <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev+0x20>)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4618      	mov	r0, r3
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	08028764 	.word	0x08028764

080066c0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv>:
{
 80066c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066c2:	b0b1      	sub	sp, #196	; 0xc4
 80066c4:	af04      	add	r7, sp, #16
 80066c6:	6078      	str	r0, [r7, #4]
	char response_arr[2][50] =
 80066c8:	4a71      	ldr	r2, [pc, #452]	; (8006890 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d0>)
 80066ca:	f107 0314 	add.w	r3, r7, #20
 80066ce:	4611      	mov	r1, r2
 80066d0:	2264      	movs	r2, #100	; 0x64
 80066d2:	4618      	mov	r0, r3
 80066d4:	f01b f8be 	bl	8021854 <memcpy>
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};

	char *fake_command_buffer[2] =
 80066d8:	4a6e      	ldr	r2, [pc, #440]	; (8006894 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d4>)
 80066da:	f107 030c 	add.w	r3, r7, #12
 80066de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066e2:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<2;i++)
 80066e6:	2300      	movs	r3, #0
 80066e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	dc46      	bgt.n	8006782 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 80066f4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80066f8:	4967      	ldr	r1, [pc, #412]	; (8006898 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d8>)
 80066fa:	4618      	mov	r0, r3
 80066fc:	f007 fbd5 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006700:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006704:	2100      	movs	r1, #0
 8006706:	4618      	mov	r0, r3
 8006708:	f005 fca8 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800670c:	4604      	mov	r4, r0
 800670e:	6823      	ldr	r3, [r4, #0]
 8006710:	330c      	adds	r3, #12
 8006712:	681d      	ldr	r5, [r3, #0]
 8006714:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006718:	4960      	ldr	r1, [pc, #384]	; (800689c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1dc>)
 800671a:	4618      	mov	r0, r3
 800671c:	f007 fbc5 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006720:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006724:	4619      	mov	r1, r3
 8006726:	4620      	mov	r0, r4
 8006728:	47a8      	blx	r5
 800672a:	4604      	mov	r4, r0
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	334c      	adds	r3, #76	; 0x4c
 8006730:	681d      	ldr	r5, [r3, #0]
 8006732:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006736:	495a      	ldr	r1, [pc, #360]	; (80068a0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e0>)
 8006738:	4618      	mov	r0, r3
 800673a:	f007 fbb6 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800673e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8006748:	4413      	add	r3, r2
 800674a:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 800674e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006752:	4619      	mov	r1, r3
 8006754:	4620      	mov	r0, r4
 8006756:	47a8      	blx	r5
 8006758:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800675c:	4618      	mov	r0, r3
 800675e:	f007 ff5c 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8006762:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006766:	4618      	mov	r0, r3
 8006768:	f007 ff57 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800676c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006770:	4618      	mov	r0, r3
 8006772:	f007 ff52 	bl	800e61a <_ZN12SimpleStringD1Ev>
	for(int i=0;i<2;i++)
 8006776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800677a:	3301      	adds	r3, #1
 800677c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006780:	e7b4      	b.n	80066ec <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x2c>
	}

	Status response;
	int i = 0;
 8006782:	2300      	movs	r3, #0
 8006784:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006788:	4946      	ldr	r1, [pc, #280]	; (80068a4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e4>)
 800678a:	4847      	ldr	r0, [pc, #284]	; (80068a8 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e8>)
 800678c:	f7fd fbf8 	bl	8003f80 <Connect_TCP_Server>
 8006790:	4603      	mov	r3, r0
 8006792:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		if(response != IDLE)
 8006796:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800679a:	2b04      	cmp	r3, #4
 800679c:	d15d      	bne.n	800685a <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x19a>
		{
			break;
		}

		if(i<3)
 800679e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	dcf0      	bgt.n	8006788 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc8>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80067a6:	2300      	movs	r3, #0
 80067a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80067ac:	f107 0214 	add.w	r2, r7, #20
 80067b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067b4:	2132      	movs	r1, #50	; 0x32
 80067b6:	fb01 f303 	mul.w	r3, r1, r3
 80067ba:	4413      	add	r3, r2
 80067bc:	4618      	mov	r0, r3
 80067be:	f7f9 fd3d 	bl	800023c <strlen>
 80067c2:	4603      	mov	r3, r0
 80067c4:	461a      	mov	r2, r3
 80067c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80067ca:	4293      	cmp	r3, r2
 80067cc:	da3f      	bge.n	800684e <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x18e>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 80067ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80067d2:	4931      	ldr	r1, [pc, #196]	; (8006898 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d8>)
 80067d4:	4618      	mov	r0, r3
 80067d6:	f007 fb68 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80067da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80067de:	2100      	movs	r1, #0
 80067e0:	4618      	mov	r0, r3
 80067e2:	f005 fc3b 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80067e6:	4604      	mov	r4, r0
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	330c      	adds	r3, #12
 80067ec:	681d      	ldr	r5, [r3, #0]
 80067ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80067f2:	492e      	ldr	r1, [pc, #184]	; (80068ac <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1ec>)
 80067f4:	4618      	mov	r0, r3
 80067f6:	f007 fb58 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80067fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80067fe:	4619      	mov	r1, r3
 8006800:	4620      	mov	r0, r4
 8006802:	47a8      	blx	r5
 8006804:	4603      	mov	r3, r0
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	3264      	adds	r2, #100	; 0x64
 800680a:	6812      	ldr	r2, [r2, #0]
 800680c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006810:	2032      	movs	r0, #50	; 0x32
 8006812:	fb00 f101 	mul.w	r1, r0, r1
 8006816:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800681a:	4408      	add	r0, r1
 800681c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006820:	4401      	add	r1, r0
 8006822:	399c      	subs	r1, #156	; 0x9c
 8006824:	7809      	ldrb	r1, [r1, #0]
 8006826:	4618      	mov	r0, r3
 8006828:	4790      	blx	r2
 800682a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800682e:	4618      	mov	r0, r3
 8006830:	f007 fef3 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8006834:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006838:	4618      	mov	r0, r3
 800683a:	f007 feee 	bl	800e61a <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 800683e:	f7fd fa59 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006842:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006846:	3301      	adds	r3, #1
 8006848:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800684c:	e7ae      	b.n	80067ac <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xec>
			}
			i++;
 800684e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006852:	3301      	adds	r3, #1
 8006854:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

	}
 8006858:	e796      	b.n	8006788 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc8>
			break;
 800685a:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 800685c:	f00e ff08 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8006860:	4604      	mov	r4, r0
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	3338      	adds	r3, #56	; 0x38
 8006866:	681d      	ldr	r5, [r3, #0]
 8006868:	f897 60a3 	ldrb.w	r6, [r7, #163]	; 0xa3
 800686c:	f00e ff10 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006870:	4603      	mov	r3, r0
 8006872:	9302      	str	r3, [sp, #8]
 8006874:	f240 2311 	movw	r3, #529	; 0x211
 8006878:	9301      	str	r3, [sp, #4]
 800687a:	4b0d      	ldr	r3, [pc, #52]	; (80068b0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f0>)
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	4b0d      	ldr	r3, [pc, #52]	; (80068b4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f4>)
 8006880:	4632      	mov	r2, r6
 8006882:	2102      	movs	r1, #2
 8006884:	4620      	mov	r0, r4
 8006886:	47a8      	blx	r5

}
 8006888:	bf00      	nop
 800688a:	37b4      	adds	r7, #180	; 0xb4
 800688c:	46bd      	mov	sp, r7
 800688e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006890:	08024ea0 	.word	0x08024ea0
 8006894:	08024f04 	.word	0x08024f04
 8006898:	08024b5c 	.word	0x08024b5c
 800689c:	08024b60 	.word	0x08024b60
 80068a0:	08024b74 	.word	0x08024b74
 80068a4:	08024e90 	.word	0x08024e90
 80068a8:	08024e94 	.word	0x08024e94
 80068ac:	08024b7c 	.word	0x08024b7c
 80068b0:	0802482c 	.word	0x0802482c
 80068b4:	08024db8 	.word	0x08024db8

080068b8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fe fd02 	bl	80052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80068c8:	4a03      	ldr	r2, [pc, #12]	; (80068d8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev+0x20>)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	08028744 	.word	0x08028744

080068dc <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv>:
 80068dc:	b590      	push	{r4, r7, lr}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	f240 2215 	movw	r2, #533	; 0x215
 80068e8:	4906      	ldr	r1, [pc, #24]	; (8006904 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv+0x28>)
 80068ea:	2004      	movs	r0, #4
 80068ec:	f004 ff1a 	bl	800b724 <_ZnwjPKci>
 80068f0:	4604      	mov	r4, r0
 80068f2:	4620      	mov	r0, r4
 80068f4:	f7ff ffe0 	bl	80068b8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>
 80068f8:	4623      	mov	r3, r4
 80068fa:	4618      	mov	r0, r3
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd90      	pop	{r4, r7, pc}
 8006902:	bf00      	nop
 8006904:	0802482c 	.word	0x0802482c

08006908 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>:
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4618      	mov	r0, r3
 8006914:	f00d faf4 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8006918:	4a03      	ldr	r2, [pc, #12]	; (8006928 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev+0x20>)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4618      	mov	r0, r3
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	08028698 	.word	0x08028698

0800692c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv>:
{
 800692c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800692e:	b091      	sub	sp, #68	; 0x44
 8006930:	af04      	add	r7, sp, #16
 8006932:	6078      	str	r0, [r7, #4]

	char *fake_command_buffer[2] =
 8006934:	4a33      	ldr	r2, [pc, #204]	; (8006a04 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xd8>)
 8006936:	f107 030c 	add.w	r3, r7, #12
 800693a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800693e:	e883 0003 	stmia.w	r3, {r0, r1}

		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[0]);
 8006942:	f107 0314 	add.w	r3, r7, #20
 8006946:	4930      	ldr	r1, [pc, #192]	; (8006a08 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xdc>)
 8006948:	4618      	mov	r0, r3
 800694a:	f007 faae 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800694e:	f107 0314 	add.w	r3, r7, #20
 8006952:	2100      	movs	r1, #0
 8006954:	4618      	mov	r0, r3
 8006956:	f005 fb81 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800695a:	4604      	mov	r4, r0
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	330c      	adds	r3, #12
 8006960:	681d      	ldr	r5, [r3, #0]
 8006962:	f107 031c 	add.w	r3, r7, #28
 8006966:	4929      	ldr	r1, [pc, #164]	; (8006a0c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe0>)
 8006968:	4618      	mov	r0, r3
 800696a:	f007 fa9e 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800696e:	f107 031c 	add.w	r3, r7, #28
 8006972:	4619      	mov	r1, r3
 8006974:	4620      	mov	r0, r4
 8006976:	47a8      	blx	r5
 8006978:	4604      	mov	r4, r0
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	334c      	adds	r3, #76	; 0x4c
 800697e:	681d      	ldr	r5, [r3, #0]
 8006980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006984:	4922      	ldr	r1, [pc, #136]	; (8006a10 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe4>)
 8006986:	4618      	mov	r0, r3
 8006988:	f007 fa8f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006992:	4619      	mov	r1, r3
 8006994:	4620      	mov	r0, r4
 8006996:	47a8      	blx	r5
 8006998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800699c:	4618      	mov	r0, r3
 800699e:	f007 fe3c 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80069a2:	f107 031c 	add.w	r3, r7, #28
 80069a6:	4618      	mov	r0, r3
 80069a8:	f007 fe37 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80069ac:	f107 0314 	add.w	r3, r7, #20
 80069b0:	4618      	mov	r0, r3
 80069b2:	f007 fe32 	bl	800e61a <_ZN12SimpleStringD1Ev>


	Status response;
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 80069b6:	4917      	ldr	r1, [pc, #92]	; (8006a14 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe8>)
 80069b8:	4817      	ldr	r0, [pc, #92]	; (8006a18 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xec>)
 80069ba:	f7fd fae1 	bl	8003f80 <Connect_TCP_Server>
 80069be:	4603      	mov	r3, r0
 80069c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(response != IDLE)
 80069c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d100      	bne.n	80069ce <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xa2>
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 80069cc:	e7f3      	b.n	80069b6 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x8a>
		{
			break;
 80069ce:	bf00      	nop
		}

	}
	LONGS_EQUAL(TIMEOUT_ERROR,response);
 80069d0:	f00e fe4e 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80069d4:	4604      	mov	r4, r0
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	3338      	adds	r3, #56	; 0x38
 80069da:	681d      	ldr	r5, [r3, #0]
 80069dc:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 80069e0:	f00e fe56 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80069e4:	4603      	mov	r3, r0
 80069e6:	9302      	str	r3, [sp, #8]
 80069e8:	f44f 730b 	mov.w	r3, #556	; 0x22c
 80069ec:	9301      	str	r3, [sp, #4]
 80069ee:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf0>)
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	4b0b      	ldr	r3, [pc, #44]	; (8006a20 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf4>)
 80069f4:	4632      	mov	r2, r6
 80069f6:	2101      	movs	r1, #1
 80069f8:	4620      	mov	r0, r4
 80069fa:	47a8      	blx	r5

}
 80069fc:	bf00      	nop
 80069fe:	3734      	adds	r7, #52	; 0x34
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a04:	08024f04 	.word	0x08024f04
 8006a08:	08024b5c 	.word	0x08024b5c
 8006a0c:	08024b60 	.word	0x08024b60
 8006a10:	08024b74 	.word	0x08024b74
 8006a14:	08024e90 	.word	0x08024e90
 8006a18:	08024e94 	.word	0x08024e94
 8006a1c:	0802482c 	.word	0x0802482c
 8006a20:	08024c30 	.word	0x08024c30

08006a24 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe fc4c 	bl	80052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006a34:	4a03      	ldr	r2, [pc, #12]	; (8006a44 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev+0x20>)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	08028678 	.word	0x08028678

08006a48 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv>:
 8006a48:	b590      	push	{r4, r7, lr}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	f44f 720c 	mov.w	r2, #560	; 0x230
 8006a54:	4906      	ldr	r1, [pc, #24]	; (8006a70 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv+0x28>)
 8006a56:	2004      	movs	r0, #4
 8006a58:	f004 fe64 	bl	800b724 <_ZnwjPKci>
 8006a5c:	4604      	mov	r4, r0
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f7ff ffe0 	bl	8006a24 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>
 8006a64:	4623      	mov	r3, r4
 8006a66:	4618      	mov	r0, r3
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd90      	pop	{r4, r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	0802482c 	.word	0x0802482c

08006a74 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>:
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f00d fa3e 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8006a84:	4a03      	ldr	r2, [pc, #12]	; (8006a94 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev+0x20>)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	601a      	str	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	080285cc 	.word	0x080285cc

08006a98 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv>:
{
 8006a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a9a:	b0b1      	sub	sp, #196	; 0xc4
 8006a9c:	af04      	add	r7, sp, #16
 8006a9e:	6078      	str	r0, [r7, #4]
	char response_arr[2][50] =
 8006aa0:	4a71      	ldr	r2, [pc, #452]	; (8006c68 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d0>)
 8006aa2:	f107 0314 	add.w	r3, r7, #20
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	2264      	movs	r2, #100	; 0x64
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f01a fed2 	bl	8021854 <memcpy>
	{
	  AT_RESPONSE_OK,
	  AT_RESPONSE_ERROR
	};

	char *fake_command_buffer[2] =
 8006ab0:	4a6e      	ldr	r2, [pc, #440]	; (8006c6c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d4>)
 8006ab2:	f107 030c 	add.w	r3, r7, #12
 8006ab6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006aba:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<2;i++)
 8006abe:	2300      	movs	r3, #0
 8006ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ac4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	dc46      	bgt.n	8006b5a <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 8006acc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006ad0:	4967      	ldr	r1, [pc, #412]	; (8006c70 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d8>)
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f007 f9e9 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006ad8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006adc:	2100      	movs	r1, #0
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f005 fabc 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	330c      	adds	r3, #12
 8006aea:	681d      	ldr	r5, [r3, #0]
 8006aec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006af0:	4960      	ldr	r1, [pc, #384]	; (8006c74 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1dc>)
 8006af2:	4618      	mov	r0, r3
 8006af4:	f007 f9d9 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006af8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006afc:	4619      	mov	r1, r3
 8006afe:	4620      	mov	r0, r4
 8006b00:	47a8      	blx	r5
 8006b02:	4604      	mov	r4, r0
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	334c      	adds	r3, #76	; 0x4c
 8006b08:	681d      	ldr	r5, [r3, #0]
 8006b0a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006b0e:	495a      	ldr	r1, [pc, #360]	; (8006c78 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e0>)
 8006b10:	4618      	mov	r0, r3
 8006b12:	f007 f9ca 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8006b20:	4413      	add	r3, r2
 8006b22:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 8006b26:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	47a8      	blx	r5
 8006b30:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006b34:	4618      	mov	r0, r3
 8006b36:	f007 fd70 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8006b3a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f007 fd6b 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8006b44:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f007 fd66 	bl	800e61a <_ZN12SimpleStringD1Ev>
	for(int i=0;i<2;i++)
 8006b4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b52:	3301      	adds	r3, #1
 8006b54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b58:	e7b4      	b.n	8006ac4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x2c>
	}

	Status response;
	int i = 0;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006b60:	4946      	ldr	r1, [pc, #280]	; (8006c7c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e4>)
 8006b62:	4847      	ldr	r0, [pc, #284]	; (8006c80 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e8>)
 8006b64:	f7fd fa0c 	bl	8003f80 <Connect_TCP_Server>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		if(response != IDLE)
 8006b6e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	d15d      	bne.n	8006c32 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x19a>
		{
			break;
		}

		if(i<3)
 8006b76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	dcf0      	bgt.n	8006b60 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc8>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b84:	f107 0214 	add.w	r2, r7, #20
 8006b88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b8c:	2132      	movs	r1, #50	; 0x32
 8006b8e:	fb01 f303 	mul.w	r3, r1, r3
 8006b92:	4413      	add	r3, r2
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7f9 fb51 	bl	800023c <strlen>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	da3f      	bge.n	8006c26 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x18e>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006ba6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006baa:	4931      	ldr	r1, [pc, #196]	; (8006c70 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d8>)
 8006bac:	4618      	mov	r0, r3
 8006bae:	f007 f97c 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006bb2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f005 fa4f 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	330c      	adds	r3, #12
 8006bc4:	681d      	ldr	r5, [r3, #0]
 8006bc6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006bca:	492e      	ldr	r1, [pc, #184]	; (8006c84 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1ec>)
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f007 f96c 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006bd2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4620      	mov	r0, r4
 8006bda:	47a8      	blx	r5
 8006bdc:	4603      	mov	r3, r0
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	3264      	adds	r2, #100	; 0x64
 8006be2:	6812      	ldr	r2, [r2, #0]
 8006be4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006be8:	2032      	movs	r0, #50	; 0x32
 8006bea:	fb00 f101 	mul.w	r1, r0, r1
 8006bee:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8006bf2:	4408      	add	r0, r1
 8006bf4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006bf8:	4401      	add	r1, r0
 8006bfa:	399c      	subs	r1, #156	; 0x9c
 8006bfc:	7809      	ldrb	r1, [r1, #0]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	4790      	blx	r2
 8006c02:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006c06:	4618      	mov	r0, r3
 8006c08:	f007 fd07 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8006c0c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006c10:	4618      	mov	r0, r3
 8006c12:	f007 fd02 	bl	800e61a <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006c16:	f7fd f86d 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006c1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c1e:	3301      	adds	r3, #1
 8006c20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c24:	e7ae      	b.n	8006b84 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xec>
			}
			i++;
 8006c26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

	}
 8006c30:	e796      	b.n	8006b60 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc8>
			break;
 8006c32:	bf00      	nop
	LONGS_EQUAL(STATUS_ERROR,response);
 8006c34:	f00e fd1c 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8006c38:	4604      	mov	r4, r0
 8006c3a:	6823      	ldr	r3, [r4, #0]
 8006c3c:	3338      	adds	r3, #56	; 0x38
 8006c3e:	681d      	ldr	r5, [r3, #0]
 8006c40:	f897 60a3 	ldrb.w	r6, [r7, #163]	; 0xa3
 8006c44:	f00e fd24 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	9302      	str	r3, [sp, #8]
 8006c4c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	4b0d      	ldr	r3, [pc, #52]	; (8006c88 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f0>)
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	4b0d      	ldr	r3, [pc, #52]	; (8006c8c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f4>)
 8006c58:	4632      	mov	r2, r6
 8006c5a:	2103      	movs	r1, #3
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	47a8      	blx	r5

}
 8006c60:	bf00      	nop
 8006c62:	37b4      	adds	r7, #180	; 0xb4
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c68:	08024f0c 	.word	0x08024f0c
 8006c6c:	08024f04 	.word	0x08024f04
 8006c70:	08024b5c 	.word	0x08024b5c
 8006c74:	08024b60 	.word	0x08024b60
 8006c78:	08024b74 	.word	0x08024b74
 8006c7c:	08024e90 	.word	0x08024e90
 8006c80:	08024e94 	.word	0x08024e94
 8006c84:	08024b7c 	.word	0x08024b7c
 8006c88:	0802482c 	.word	0x0802482c
 8006c8c:	08024c5c 	.word	0x08024c5c

08006c90 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fb16 	bl	80052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006ca0:	4a03      	ldr	r2, [pc, #12]	; (8006cb0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev+0x20>)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	080285ac 	.word	0x080285ac

08006cb4 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv>:
 8006cb4:	b590      	push	{r4, r7, lr}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8006cc0:	4906      	ldr	r1, [pc, #24]	; (8006cdc <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv+0x28>)
 8006cc2:	2004      	movs	r0, #4
 8006cc4:	f004 fd2e 	bl	800b724 <_ZnwjPKci>
 8006cc8:	4604      	mov	r4, r0
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f7ff ffe0 	bl	8006c90 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>
 8006cd0:	4623      	mov	r3, r4
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd90      	pop	{r4, r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	0802482c 	.word	0x0802482c

08006ce0 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>:
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f00d f908 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8006cf0:	4a03      	ldr	r2, [pc, #12]	; (8006d00 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev+0x20>)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	08028500 	.word	0x08028500

08006d04 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv>:
{
 8006d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d06:	b093      	sub	sp, #76	; 0x4c
 8006d08:	af04      	add	r7, sp, #16
 8006d0a:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CIPCLOSE);
 8006d0c:	f107 0308 	add.w	r3, r7, #8
 8006d10:	494a      	ldr	r1, [pc, #296]	; (8006e3c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006d12:	4618      	mov	r0, r3
 8006d14:	f007 f8c9 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006d18:	f107 0308 	add.w	r3, r7, #8
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f005 f99c 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006d24:	4604      	mov	r4, r0
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	330c      	adds	r3, #12
 8006d2a:	681d      	ldr	r5, [r3, #0]
 8006d2c:	f107 0310 	add.w	r3, r7, #16
 8006d30:	4943      	ldr	r1, [pc, #268]	; (8006e40 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x13c>)
 8006d32:	4618      	mov	r0, r3
 8006d34:	f007 f8b9 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006d38:	f107 0310 	add.w	r3, r7, #16
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	4620      	mov	r0, r4
 8006d40:	47a8      	blx	r5
 8006d42:	4604      	mov	r4, r0
 8006d44:	6823      	ldr	r3, [r4, #0]
 8006d46:	334c      	adds	r3, #76	; 0x4c
 8006d48:	681d      	ldr	r5, [r3, #0]
 8006d4a:	f107 0318 	add.w	r3, r7, #24
 8006d4e:	493d      	ldr	r1, [pc, #244]	; (8006e44 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x140>)
 8006d50:	4618      	mov	r0, r3
 8006d52:	f007 f8aa 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006d56:	f107 0318 	add.w	r3, r7, #24
 8006d5a:	4a3b      	ldr	r2, [pc, #236]	; (8006e48 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x144>)
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4620      	mov	r0, r4
 8006d60:	47a8      	blx	r5
 8006d62:	f107 0318 	add.w	r3, r7, #24
 8006d66:	4618      	mov	r0, r3
 8006d68:	f007 fc57 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8006d6c:	f107 0310 	add.w	r3, r7, #16
 8006d70:	4618      	mov	r0, r3
 8006d72:	f007 fc52 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8006d76:	f107 0308 	add.w	r3, r7, #8
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f007 fc4d 	bl	800e61a <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_TCP_Server();
 8006d80:	f7fd f93a 	bl	8003ff8 <Disconnect_TCP_Server>
 8006d84:	4603      	mov	r3, r0
 8006d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 8006d8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	d139      	bne.n	8006e06 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006d92:	2300      	movs	r3, #0
 8006d94:	637b      	str	r3, [r7, #52]	; 0x34
 8006d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	dcf1      	bgt.n	8006d80 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 8006d9c:	f107 0320 	add.w	r3, r7, #32
 8006da0:	4926      	ldr	r1, [pc, #152]	; (8006e3c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006da2:	4618      	mov	r0, r3
 8006da4:	f007 f881 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006da8:	f107 0320 	add.w	r3, r7, #32
 8006dac:	2100      	movs	r1, #0
 8006dae:	4618      	mov	r0, r3
 8006db0:	f005 f954 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006db4:	4604      	mov	r4, r0
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	330c      	adds	r3, #12
 8006dba:	681d      	ldr	r5, [r3, #0]
 8006dbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006dc0:	4922      	ldr	r1, [pc, #136]	; (8006e4c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x148>)
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f007 f871 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006dc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006dcc:	4619      	mov	r1, r3
 8006dce:	4620      	mov	r0, r4
 8006dd0:	47a8      	blx	r5
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	3264      	adds	r2, #100	; 0x64
 8006dd8:	6812      	ldr	r2, [r2, #0]
 8006dda:	481d      	ldr	r0, [pc, #116]	; (8006e50 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x14c>)
 8006ddc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006dde:	4401      	add	r1, r0
 8006de0:	7809      	ldrb	r1, [r1, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	4790      	blx	r2
 8006de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006dea:	4618      	mov	r0, r3
 8006dec:	f007 fc15 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8006df0:	f107 0320 	add.w	r3, r7, #32
 8006df4:	4618      	mov	r0, r3
 8006df6:	f007 fc10 	bl	800e61a <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8006dfa:	f7fc ff7b 	bl	8003cf4 <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e00:	3301      	adds	r3, #1
 8006e02:	637b      	str	r3, [r7, #52]	; 0x34
 8006e04:	e7c7      	b.n	8006d96 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x92>
			break;
 8006e06:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 8006e08:	f00e fc32 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	3338      	adds	r3, #56	; 0x38
 8006e12:	681d      	ldr	r5, [r3, #0]
 8006e14:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 8006e18:	f00e fc3a 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	9302      	str	r3, [sp, #8]
 8006e20:	f240 2371 	movw	r3, #625	; 0x271
 8006e24:	9301      	str	r3, [sp, #4]
 8006e26:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x150>)
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	4b0b      	ldr	r3, [pc, #44]	; (8006e58 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x154>)
 8006e2c:	4632      	mov	r2, r6
 8006e2e:	2102      	movs	r1, #2
 8006e30:	4620      	mov	r0, r4
 8006e32:	47a8      	blx	r5

}
 8006e34:	bf00      	nop
 8006e36:	373c      	adds	r7, #60	; 0x3c
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e3c:	08024b5c 	.word	0x08024b5c
 8006e40:	08024b60 	.word	0x08024b60
 8006e44:	08024b74 	.word	0x08024b74
 8006e48:	08024f70 	.word	0x08024f70
 8006e4c:	08024b7c 	.word	0x08024b7c
 8006e50:	080247b8 	.word	0x080247b8
 8006e54:	0802482c 	.word	0x0802482c
 8006e58:	08024db8 	.word	0x08024db8

08006e5c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fe fa30 	bl	80052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006e6c:	4a03      	ldr	r2, [pc, #12]	; (8006e7c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev+0x20>)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4618      	mov	r0, r3
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	080284e0 	.word	0x080284e0

08006e80 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv>:
 8006e80:	b590      	push	{r4, r7, lr}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	f240 2275 	movw	r2, #629	; 0x275
 8006e8c:	4906      	ldr	r1, [pc, #24]	; (8006ea8 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8006e8e:	2004      	movs	r0, #4
 8006e90:	f004 fc48 	bl	800b724 <_ZnwjPKci>
 8006e94:	4604      	mov	r4, r0
 8006e96:	4620      	mov	r0, r4
 8006e98:	f7ff ffe0 	bl	8006e5c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>
 8006e9c:	4623      	mov	r3, r4
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd90      	pop	{r4, r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	0802482c 	.word	0x0802482c

08006eac <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>:
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f00d f822 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8006ebc:	4a03      	ldr	r2, [pc, #12]	; (8006ecc <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev+0x20>)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	08028434 	.word	0x08028434

08006ed0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv>:
{
 8006ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ed2:	b0b3      	sub	sp, #204	; 0xcc
 8006ed4:	af04      	add	r7, sp, #16
 8006ed6:	6078      	str	r0, [r7, #4]
	Status response;
	int i = 0;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	char response_arr[2][50] =
 8006ede:	4a7f      	ldr	r2, [pc, #508]	; (80070dc <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x20c>)
 8006ee0:	f107 0308 	add.w	r3, r7, #8
 8006ee4:	4611      	mov	r1, r2
 8006ee6:	2264      	movs	r2, #100	; 0x64
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f01a fcb3 	bl	8021854 <memcpy>
	{ AT_RESPONSE_GREATER_THAN,
	  AT_RESPONSE_SEND_OK,
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT+CIPSEND=11\r\n");
 8006eee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006ef2:	497b      	ldr	r1, [pc, #492]	; (80070e0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f006 ffd8 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006efa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006efe:	2100      	movs	r1, #0
 8006f00:	4618      	mov	r0, r3
 8006f02:	f005 f8ab 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006f06:	4604      	mov	r4, r0
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	330c      	adds	r3, #12
 8006f0c:	681d      	ldr	r5, [r3, #0]
 8006f0e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006f12:	4974      	ldr	r1, [pc, #464]	; (80070e4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x214>)
 8006f14:	4618      	mov	r0, r3
 8006f16:	f006 ffc8 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006f1a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006f1e:	4619      	mov	r1, r3
 8006f20:	4620      	mov	r0, r4
 8006f22:	47a8      	blx	r5
 8006f24:	4604      	mov	r4, r0
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	334c      	adds	r3, #76	; 0x4c
 8006f2a:	681d      	ldr	r5, [r3, #0]
 8006f2c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006f30:	496d      	ldr	r1, [pc, #436]	; (80070e8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x218>)
 8006f32:	4618      	mov	r0, r3
 8006f34:	f006 ffb9 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006f38:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006f3c:	4a6b      	ldr	r2, [pc, #428]	; (80070ec <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x21c>)
 8006f3e:	4619      	mov	r1, r3
 8006f40:	4620      	mov	r0, r4
 8006f42:	47a8      	blx	r5
 8006f44:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f007 fb66 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8006f4e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006f52:	4618      	mov	r0, r3
 8006f54:	f007 fb61 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8006f58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f007 fb5c 	bl	800e61a <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Hello World");
 8006f62:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006f66:	495e      	ldr	r1, [pc, #376]	; (80070e0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f006 ff9e 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006f6e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006f72:	2100      	movs	r1, #0
 8006f74:	4618      	mov	r0, r3
 8006f76:	f005 f871 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	330c      	adds	r3, #12
 8006f80:	681d      	ldr	r5, [r3, #0]
 8006f82:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006f86:	4957      	ldr	r1, [pc, #348]	; (80070e4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x214>)
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f006 ff8e 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006f8e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006f92:	4619      	mov	r1, r3
 8006f94:	4620      	mov	r0, r4
 8006f96:	47a8      	blx	r5
 8006f98:	4604      	mov	r4, r0
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	334c      	adds	r3, #76	; 0x4c
 8006f9e:	681d      	ldr	r5, [r3, #0]
 8006fa0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006fa4:	4950      	ldr	r1, [pc, #320]	; (80070e8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x218>)
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f006 ff7f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8006fac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006fb0:	4a4f      	ldr	r2, [pc, #316]	; (80070f0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	47a8      	blx	r5
 8006fb8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f007 fb2c 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8006fc2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f007 fb27 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8006fcc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f007 fb22 	bl	800e61a <_ZN12SimpleStringD1Ev>
	while(1)
	{
		response = Send_TCP_Message((char*)"Hello World");
 8006fd6:	4846      	ldr	r0, [pc, #280]	; (80070f0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006fd8:	f7fd f82a 	bl	8004030 <Send_TCP_Message>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

		if(response != IDLE)
 8006fe2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d15d      	bne.n	80070a6 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1d6>
		{
			break;
		}

		if(i<2)
 8006fea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	dcf1      	bgt.n	8006fd6 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ff8:	f107 0208 	add.w	r2, r7, #8
 8006ffc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007000:	2132      	movs	r1, #50	; 0x32
 8007002:	fb01 f303 	mul.w	r3, r1, r3
 8007006:	4413      	add	r3, r2
 8007008:	4618      	mov	r0, r3
 800700a:	f7f9 f917 	bl	800023c <strlen>
 800700e:	4603      	mov	r3, r0
 8007010:	461a      	mov	r2, r3
 8007012:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007016:	4293      	cmp	r3, r2
 8007018:	da3f      	bge.n	800709a <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1ca>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 800701a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800701e:	4930      	ldr	r1, [pc, #192]	; (80070e0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 8007020:	4618      	mov	r0, r3
 8007022:	f006 ff42 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8007026:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800702a:	2100      	movs	r1, #0
 800702c:	4618      	mov	r0, r3
 800702e:	f005 f815 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007032:	4604      	mov	r4, r0
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	330c      	adds	r3, #12
 8007038:	681d      	ldr	r5, [r3, #0]
 800703a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800703e:	492d      	ldr	r1, [pc, #180]	; (80070f4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x224>)
 8007040:	4618      	mov	r0, r3
 8007042:	f006 ff32 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8007046:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800704a:	4619      	mov	r1, r3
 800704c:	4620      	mov	r0, r4
 800704e:	47a8      	blx	r5
 8007050:	4603      	mov	r3, r0
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	3264      	adds	r2, #100	; 0x64
 8007056:	6812      	ldr	r2, [r2, #0]
 8007058:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800705c:	2032      	movs	r0, #50	; 0x32
 800705e:	fb00 f101 	mul.w	r1, r0, r1
 8007062:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8007066:	4408      	add	r0, r1
 8007068:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800706c:	4401      	add	r1, r0
 800706e:	39b0      	subs	r1, #176	; 0xb0
 8007070:	7809      	ldrb	r1, [r1, #0]
 8007072:	4618      	mov	r0, r3
 8007074:	4790      	blx	r2
 8007076:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800707a:	4618      	mov	r0, r3
 800707c:	f007 facd 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8007080:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007084:	4618      	mov	r0, r3
 8007086:	f007 fac8 	bl	800e61a <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 800708a:	f7fc fe33 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800708e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007092:	3301      	adds	r3, #1
 8007094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007098:	e7ae      	b.n	8006ff8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x128>
			}
			i++;
 800709a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800709e:	3301      	adds	r3, #1
 80070a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		}

	}
 80070a4:	e797      	b.n	8006fd6 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>
			break;
 80070a6:	bf00      	nop

	LONGS_EQUAL(STATUS_OK,response);
 80070a8:	f00e fae2 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80070ac:	4604      	mov	r4, r0
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	3338      	adds	r3, #56	; 0x38
 80070b2:	681d      	ldr	r5, [r3, #0]
 80070b4:	f897 60af 	ldrb.w	r6, [r7, #175]	; 0xaf
 80070b8:	f00e faea 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80070bc:	4603      	mov	r3, r0
 80070be:	9302      	str	r3, [sp, #8]
 80070c0:	f240 2396 	movw	r3, #662	; 0x296
 80070c4:	9301      	str	r3, [sp, #4]
 80070c6:	4b0c      	ldr	r3, [pc, #48]	; (80070f8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x228>)
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	4b0c      	ldr	r3, [pc, #48]	; (80070fc <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x22c>)
 80070cc:	4632      	mov	r2, r6
 80070ce:	2102      	movs	r1, #2
 80070d0:	4620      	mov	r0, r4
 80070d2:	47a8      	blx	r5

}
 80070d4:	bf00      	nop
 80070d6:	37bc      	adds	r7, #188	; 0xbc
 80070d8:	46bd      	mov	sp, r7
 80070da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070dc:	08024f90 	.word	0x08024f90
 80070e0:	08024b5c 	.word	0x08024b5c
 80070e4:	08024b60 	.word	0x08024b60
 80070e8:	08024b74 	.word	0x08024b74
 80070ec:	08024f80 	.word	0x08024f80
 80070f0:	08024a6c 	.word	0x08024a6c
 80070f4:	08024b7c 	.word	0x08024b7c
 80070f8:	0802482c 	.word	0x0802482c
 80070fc:	08024db8 	.word	0x08024db8

08007100 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4618      	mov	r0, r3
 800710c:	f7fe f8de 	bl	80052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007110:	4a03      	ldr	r2, [pc, #12]	; (8007120 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev+0x20>)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	08028414 	.word	0x08028414

08007124 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv>:
 8007124:	b590      	push	{r4, r7, lr}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	f240 229a 	movw	r2, #666	; 0x29a
 8007130:	4906      	ldr	r1, [pc, #24]	; (800714c <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8007132:	2004      	movs	r0, #4
 8007134:	f004 faf6 	bl	800b724 <_ZnwjPKci>
 8007138:	4604      	mov	r4, r0
 800713a:	4620      	mov	r0, r4
 800713c:	f7ff ffe0 	bl	8007100 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>
 8007140:	4623      	mov	r3, r4
 8007142:	4618      	mov	r0, r3
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	bd90      	pop	{r4, r7, pc}
 800714a:	bf00      	nop
 800714c:	0802482c 	.word	0x0802482c

08007150 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>:
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4618      	mov	r0, r3
 800715c:	f00c fed0 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8007160:	4a03      	ldr	r2, [pc, #12]	; (8007170 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev+0x20>)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4618      	mov	r0, r3
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	08028368 	.word	0x08028368

08007174 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv>:
{
 8007174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007176:	b0a3      	sub	sp, #140	; 0x8c
 8007178:	af04      	add	r7, sp, #16
 800717a:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,11:Hello World";		// an example data that ESP received from server
 800717c:	4b49      	ldr	r3, [pc, #292]	; (80072a4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x130>)
 800717e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8007182:	461d      	mov	r5, r3
 8007184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007188:	682b      	ldr	r3, [r5, #0]
 800718a:	6023      	str	r3, [r4, #0]
 800718c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007190:	2200      	movs	r2, #0
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	605a      	str	r2, [r3, #4]
 8007196:	811a      	strh	r2, [r3, #8]

	Status response_state = IDLE;
 8007198:	2304      	movs	r3, #4
 800719a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50] ={0};
 800719e:	2300      	movs	r3, #0
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	f107 0310 	add.w	r3, r7, #16
 80071a6:	222e      	movs	r2, #46	; 0x2e
 80071a8:	2100      	movs	r1, #0
 80071aa:	4618      	mov	r0, r3
 80071ac:	f01a fb60 	bl	8021870 <memset>

	for(int i=0;i<(int)strlen(response);i++)
 80071b0:	2300      	movs	r3, #0
 80071b2:	677b      	str	r3, [r7, #116]	; 0x74
 80071b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7f9 f83f 	bl	800023c <strlen>
 80071be:	4603      	mov	r3, r0
 80071c0:	461a      	mov	r2, r3
 80071c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071c4:	4293      	cmp	r3, r2
 80071c6:	da35      	bge.n	8007234 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80071c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80071cc:	4936      	ldr	r1, [pc, #216]	; (80072a8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x134>)
 80071ce:	4618      	mov	r0, r3
 80071d0:	f006 fe6b 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80071d4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80071d8:	2100      	movs	r1, #0
 80071da:	4618      	mov	r0, r3
 80071dc:	f004 ff3e 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80071e0:	4604      	mov	r4, r0
 80071e2:	6823      	ldr	r3, [r4, #0]
 80071e4:	330c      	adds	r3, #12
 80071e6:	681d      	ldr	r5, [r3, #0]
 80071e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80071ec:	492f      	ldr	r1, [pc, #188]	; (80072ac <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x138>)
 80071ee:	4618      	mov	r0, r3
 80071f0:	f006 fe5b 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80071f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80071f8:	4619      	mov	r1, r3
 80071fa:	4620      	mov	r0, r4
 80071fc:	47a8      	blx	r5
 80071fe:	4603      	mov	r3, r0
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	3264      	adds	r2, #100	; 0x64
 8007204:	6812      	ldr	r2, [r2, #0]
 8007206:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800720a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800720c:	4401      	add	r1, r0
 800720e:	7809      	ldrb	r1, [r1, #0]
 8007210:	4618      	mov	r0, r3
 8007212:	4790      	blx	r2
 8007214:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007218:	4618      	mov	r0, r3
 800721a:	f007 f9fe 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800721e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007222:	4618      	mov	r0, r3
 8007224:	f007 f9f9 	bl	800e61a <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8007228:	f7fc fd64 	bl	8003cf4 <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 800722c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800722e:	3301      	adds	r3, #1
 8007230:	677b      	str	r3, [r7, #116]	; 0x74
 8007232:	e7bf      	b.n	80071b4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x40>
	}

	response_state = Read_TCP_Message(received_message);
 8007234:	f107 030c 	add.w	r3, r7, #12
 8007238:	4618      	mov	r0, r3
 800723a:	f7fc ff31 	bl	80040a0 <Read_TCP_Message>
 800723e:	4603      	mov	r3, r0
 8007240:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LONGS_EQUAL(STATUS_OK,response_state);
 8007244:	f00e fa14 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8007248:	4604      	mov	r4, r0
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	3338      	adds	r3, #56	; 0x38
 800724e:	681d      	ldr	r5, [r3, #0]
 8007250:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 8007254:	f00e fa1c 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007258:	4603      	mov	r3, r0
 800725a:	9302      	str	r3, [sp, #8]
 800725c:	f240 23aa 	movw	r3, #682	; 0x2aa
 8007260:	9301      	str	r3, [sp, #4]
 8007262:	4b13      	ldr	r3, [pc, #76]	; (80072b0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x13c>)
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	4b13      	ldr	r3, [pc, #76]	; (80072b4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x140>)
 8007268:	4632      	mov	r2, r6
 800726a:	2102      	movs	r1, #2
 800726c:	4620      	mov	r0, r4
 800726e:	47a8      	blx	r5

	STRCMP_EQUAL("Hello World",received_message);
 8007270:	f00e f9fe 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8007274:	4604      	mov	r4, r0
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	3324      	adds	r3, #36	; 0x24
 800727a:	681d      	ldr	r5, [r3, #0]
 800727c:	f00e fa08 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007280:	4603      	mov	r3, r0
 8007282:	f107 020c 	add.w	r2, r7, #12
 8007286:	9302      	str	r3, [sp, #8]
 8007288:	f44f 732b 	mov.w	r3, #684	; 0x2ac
 800728c:	9301      	str	r3, [sp, #4]
 800728e:	4b08      	ldr	r3, [pc, #32]	; (80072b0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x13c>)
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	2300      	movs	r3, #0
 8007294:	4908      	ldr	r1, [pc, #32]	; (80072b8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x144>)
 8007296:	4620      	mov	r0, r4
 8007298:	47a8      	blx	r5

}
 800729a:	bf00      	nop
 800729c:	377c      	adds	r7, #124	; 0x7c
 800729e:	46bd      	mov	sp, r7
 80072a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072a2:	bf00      	nop
 80072a4:	08025024 	.word	0x08025024
 80072a8:	08024b5c 	.word	0x08024b5c
 80072ac:	08024b7c 	.word	0x08024b7c
 80072b0:	0802482c 	.word	0x0802482c
 80072b4:	08024ff4 	.word	0x08024ff4
 80072b8:	08024a6c 	.word	0x08024a6c

080072bc <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe f800 	bl	80052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80072cc:	4a03      	ldr	r2, [pc, #12]	; (80072dc <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev+0x20>)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4618      	mov	r0, r3
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	08028348 	.word	0x08028348

080072e0 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv>:
 80072e0:	b590      	push	{r4, r7, lr}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 80072ec:	4906      	ldr	r1, [pc, #24]	; (8007308 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv+0x28>)
 80072ee:	2004      	movs	r0, #4
 80072f0:	f004 fa18 	bl	800b724 <_ZnwjPKci>
 80072f4:	4604      	mov	r4, r0
 80072f6:	4620      	mov	r0, r4
 80072f8:	f7ff ffe0 	bl	80072bc <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>
 80072fc:	4623      	mov	r3, r4
 80072fe:	4618      	mov	r0, r3
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	bd90      	pop	{r4, r7, pc}
 8007306:	bf00      	nop
 8007308:	0802482c 	.word	0x0802482c

0800730c <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>:
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4618      	mov	r0, r3
 8007318:	f00c fdf2 	bl	8013f00 <_ZN10UtestShellC1Ev>
 800731c:	4a03      	ldr	r2, [pc, #12]	; (800732c <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev+0x20>)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	0802829c 	.word	0x0802829c

08007330 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv>:
{
 8007330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007332:	b095      	sub	sp, #84	; 0x54
 8007334:	af04      	add	r7, sp, #16
 8007336:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8007338:	2304      	movs	r3, #4
 800733a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	char received_message[50] ={0};
 800733e:	2300      	movs	r3, #0
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	f107 0310 	add.w	r3, r7, #16
 8007346:	222e      	movs	r2, #46	; 0x2e
 8007348:	2100      	movs	r1, #0
 800734a:	4618      	mov	r0, r3
 800734c:	f01a fa90 	bl	8021870 <memset>
	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8007350:	f107 030c 	add.w	r3, r7, #12
 8007354:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007358:	4618      	mov	r0, r3
 800735a:	f7fc ff05 	bl	8004168 <Wait_TCP_Message>
 800735e:	4603      	mov	r3, r0
 8007360:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(response_state != IDLE)
 8007364:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007368:	2b04      	cmp	r3, #4
 800736a:	d100      	bne.n	800736e <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x3e>
		response_state = Wait_TCP_Message(received_message, 1000);
 800736c:	e7f0      	b.n	8007350 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x20>
			break;
 800736e:	bf00      	nop
	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 8007370:	f00e f97e 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8007374:	4604      	mov	r4, r0
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	3338      	adds	r3, #56	; 0x38
 800737a:	681d      	ldr	r5, [r3, #0]
 800737c:	f897 603f 	ldrb.w	r6, [r7, #63]	; 0x3f
 8007380:	f00e f986 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007384:	4603      	mov	r3, r0
 8007386:	9302      	str	r3, [sp, #8]
 8007388:	f240 23bd 	movw	r3, #701	; 0x2bd
 800738c:	9301      	str	r3, [sp, #4]
 800738e:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x74>)
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	4b05      	ldr	r3, [pc, #20]	; (80073a8 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x78>)
 8007394:	4632      	mov	r2, r6
 8007396:	2101      	movs	r1, #1
 8007398:	4620      	mov	r0, r4
 800739a:	47a8      	blx	r5

}
 800739c:	bf00      	nop
 800739e:	3744      	adds	r7, #68	; 0x44
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073a4:	0802482c 	.word	0x0802482c
 80073a8:	08024bc0 	.word	0x08024bc0

080073ac <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fd ff88 	bl	80052cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80073bc:	4a03      	ldr	r2, [pc, #12]	; (80073cc <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev+0x20>)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	601a      	str	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4618      	mov	r0, r3
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	0802827c 	.word	0x0802827c

080073d0 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv>:
 80073d0:	b590      	push	{r4, r7, lr}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	f240 22c1 	movw	r2, #705	; 0x2c1
 80073dc:	4906      	ldr	r1, [pc, #24]	; (80073f8 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv+0x28>)
 80073de:	2004      	movs	r0, #4
 80073e0:	f004 f9a0 	bl	800b724 <_ZnwjPKci>
 80073e4:	4604      	mov	r4, r0
 80073e6:	4620      	mov	r0, r4
 80073e8:	f7ff ffe0 	bl	80073ac <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>
 80073ec:	4623      	mov	r3, r4
 80073ee:	4618      	mov	r0, r3
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd90      	pop	{r4, r7, pc}
 80073f6:	bf00      	nop
 80073f8:	0802482c 	.word	0x0802482c

080073fc <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>:
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4618      	mov	r0, r3
 8007408:	f00c fd7a 	bl	8013f00 <_ZN10UtestShellC1Ev>
 800740c:	4a03      	ldr	r2, [pc, #12]	; (800741c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev+0x20>)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4618      	mov	r0, r3
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	080281d0 	.word	0x080281d0

08007420 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv>:
{
 8007420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007422:	b0a3      	sub	sp, #140	; 0x8c
 8007424:	af04      	add	r7, sp, #16
 8007426:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,13:PUMP_MOTOR=ON";		// an example string data that ESP received from server
 8007428:	4b4d      	ldr	r3, [pc, #308]	; (8007560 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x140>)
 800742a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800742e:	461d      	mov	r5, r3
 8007430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007434:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007438:	6020      	str	r0, [r4, #0]
 800743a:	3404      	adds	r4, #4
 800743c:	8021      	strh	r1, [r4, #0]
 800743e:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8007442:	2200      	movs	r2, #0
 8007444:	601a      	str	r2, [r3, #0]
 8007446:	605a      	str	r2, [r3, #4]

	Status response_state = IDLE;
 8007448:	2304      	movs	r3, #4
 800744a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50] ={0};
 800744e:	2300      	movs	r3, #0
 8007450:	60fb      	str	r3, [r7, #12]
 8007452:	f107 0310 	add.w	r3, r7, #16
 8007456:	222e      	movs	r2, #46	; 0x2e
 8007458:	2100      	movs	r1, #0
 800745a:	4618      	mov	r0, r3
 800745c:	f01a fa08 	bl	8021870 <memset>

	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8007460:	f107 030c 	add.w	r3, r7, #12
 8007464:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007468:	4618      	mov	r0, r3
 800746a:	f7fc fe7d 	bl	8004168 <Wait_TCP_Message>
 800746e:	4603      	mov	r3, r0
 8007470:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

		if(response_state != IDLE)
 8007474:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8007478:	2b04      	cmp	r3, #4
 800747a:	d141      	bne.n	8007500 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0xe0>
			break;

		for(int i=0;i<(int)strlen(response);i++)
 800747c:	2300      	movs	r3, #0
 800747e:	677b      	str	r3, [r7, #116]	; 0x74
 8007480:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007484:	4618      	mov	r0, r3
 8007486:	f7f8 fed9 	bl	800023c <strlen>
 800748a:	4603      	mov	r3, r0
 800748c:	461a      	mov	r2, r3
 800748e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007490:	4293      	cmp	r3, r2
 8007492:	dae5      	bge.n	8007460 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x40>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8007494:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007498:	4932      	ldr	r1, [pc, #200]	; (8007564 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x144>)
 800749a:	4618      	mov	r0, r3
 800749c:	f006 fd05 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80074a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80074a4:	2100      	movs	r1, #0
 80074a6:	4618      	mov	r0, r3
 80074a8:	f004 fdd8 	bl	800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80074ac:	4604      	mov	r4, r0
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	330c      	adds	r3, #12
 80074b2:	681d      	ldr	r5, [r3, #0]
 80074b4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80074b8:	492b      	ldr	r1, [pc, #172]	; (8007568 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x148>)
 80074ba:	4618      	mov	r0, r3
 80074bc:	f006 fcf5 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80074c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80074c4:	4619      	mov	r1, r3
 80074c6:	4620      	mov	r0, r4
 80074c8:	47a8      	blx	r5
 80074ca:	4603      	mov	r3, r0
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	3264      	adds	r2, #100	; 0x64
 80074d0:	6812      	ldr	r2, [r2, #0]
 80074d2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80074d6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80074d8:	4401      	add	r1, r0
 80074da:	7809      	ldrb	r1, [r1, #0]
 80074dc:	4618      	mov	r0, r3
 80074de:	4790      	blx	r2
 80074e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80074e4:	4618      	mov	r0, r3
 80074e6:	f007 f898 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80074ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80074ee:	4618      	mov	r0, r3
 80074f0:	f007 f893 	bl	800e61a <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80074f4:	f7fc fbfe 	bl	8003cf4 <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 80074f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074fa:	3301      	adds	r3, #1
 80074fc:	677b      	str	r3, [r7, #116]	; 0x74
 80074fe:	e7bf      	b.n	8007480 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x60>
			break;
 8007500:	bf00      	nop
		}
	}

	LONGS_EQUAL(STATUS_OK,response_state);
 8007502:	f00e f8b5 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8007506:	4604      	mov	r4, r0
 8007508:	6823      	ldr	r3, [r4, #0]
 800750a:	3338      	adds	r3, #56	; 0x38
 800750c:	681d      	ldr	r5, [r3, #0]
 800750e:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 8007512:	f00e f8bd 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007516:	4603      	mov	r3, r0
 8007518:	9302      	str	r3, [sp, #8]
 800751a:	f240 23d7 	movw	r3, #727	; 0x2d7
 800751e:	9301      	str	r3, [sp, #4]
 8007520:	4b12      	ldr	r3, [pc, #72]	; (800756c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x14c>)
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	4b12      	ldr	r3, [pc, #72]	; (8007570 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x150>)
 8007526:	4632      	mov	r2, r6
 8007528:	2102      	movs	r1, #2
 800752a:	4620      	mov	r0, r4
 800752c:	47a8      	blx	r5
	STRCMP_EQUAL("PUMP_MOTOR=ON",received_message);
 800752e:	f00e f89f 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8007532:	4604      	mov	r4, r0
 8007534:	6823      	ldr	r3, [r4, #0]
 8007536:	3324      	adds	r3, #36	; 0x24
 8007538:	681d      	ldr	r5, [r3, #0]
 800753a:	f00e f8a9 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800753e:	4603      	mov	r3, r0
 8007540:	f107 020c 	add.w	r2, r7, #12
 8007544:	9302      	str	r3, [sp, #8]
 8007546:	f44f 7336 	mov.w	r3, #728	; 0x2d8
 800754a:	9301      	str	r3, [sp, #4]
 800754c:	4b07      	ldr	r3, [pc, #28]	; (800756c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x14c>)
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	2300      	movs	r3, #0
 8007552:	4908      	ldr	r1, [pc, #32]	; (8007574 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x154>)
 8007554:	4620      	mov	r0, r4
 8007556:	47a8      	blx	r5

}
 8007558:	bf00      	nop
 800755a:	377c      	adds	r7, #124	; 0x7c
 800755c:	46bd      	mov	sp, r7
 800755e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007560:	08025054 	.word	0x08025054
 8007564:	08024b5c 	.word	0x08024b5c
 8007568:	08024b7c 	.word	0x08024b7c
 800756c:	0802482c 	.word	0x0802482c
 8007570:	08024ff4 	.word	0x08024ff4
 8007574:	08025044 	.word	0x08025044

08007578 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	4a05      	ldr	r2, [pc, #20]	; (8007598 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev+0x20>)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4618      	mov	r0, r3
 800758a:	f00c fd0d 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4618      	mov	r0, r3
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	080281d0 	.word	0x080281d0

0800759c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD0Ev>:
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f7ff ffe7 	bl	8007578 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
 80075aa:	211c      	movs	r1, #28
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f004 f8cd 	bl	800b74c <_ZdlPvj>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4618      	mov	r0, r3
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>:
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	4a05      	ldr	r2, [pc, #20]	; (80075dc <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev+0x20>)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	601a      	str	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fd fe8f 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4618      	mov	r0, r3
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	0802827c 	.word	0x0802827c

080075e0 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD0Ev>:
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7ff ffe7 	bl	80075bc <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>
 80075ee:	2104      	movs	r1, #4
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f004 f8ab 	bl	800b74c <_ZdlPvj>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	4a05      	ldr	r2, [pc, #20]	; (8007620 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev+0x20>)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4618      	mov	r0, r3
 8007612:	f00c fcc9 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4618      	mov	r0, r3
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	0802829c 	.word	0x0802829c

08007624 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD0Ev>:
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f7ff ffe7 	bl	8007600 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
 8007632:	211c      	movs	r1, #28
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f004 f889 	bl	800b74c <_ZdlPvj>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>:
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	4a05      	ldr	r2, [pc, #20]	; (8007664 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev+0x20>)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4618      	mov	r0, r3
 8007656:	f7fd fe4b 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4618      	mov	r0, r3
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	08028348 	.word	0x08028348

08007668 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD0Ev>:
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7ff ffe7 	bl	8007644 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>
 8007676:	2104      	movs	r1, #4
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f004 f867 	bl	800b74c <_ZdlPvj>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4618      	mov	r0, r3
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	4a05      	ldr	r2, [pc, #20]	; (80076a8 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev+0x20>)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4618      	mov	r0, r3
 800769a:	f00c fc85 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4618      	mov	r0, r3
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	08028368 	.word	0x08028368

080076ac <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD0Ev>:
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f7ff ffe7 	bl	8007688 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
 80076ba:	211c      	movs	r1, #28
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f004 f845 	bl	800b74c <_ZdlPvj>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>:
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	4a05      	ldr	r2, [pc, #20]	; (80076ec <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev+0x20>)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fd fe07 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4618      	mov	r0, r3
 80076e6:	3708      	adds	r7, #8
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	08028414 	.word	0x08028414

080076f0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD0Ev>:
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff ffe7 	bl	80076cc <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>
 80076fe:	2104      	movs	r1, #4
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f004 f823 	bl	800b74c <_ZdlPvj>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4618      	mov	r0, r3
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	4a05      	ldr	r2, [pc, #20]	; (8007730 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev+0x20>)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4618      	mov	r0, r3
 8007722:	f00c fc41 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	08028434 	.word	0x08028434

08007734 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD0Ev>:
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7ff ffe7 	bl	8007710 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
 8007742:	211c      	movs	r1, #28
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f004 f801 	bl	800b74c <_ZdlPvj>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>:
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	4a05      	ldr	r2, [pc, #20]	; (8007774 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev+0x20>)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	601a      	str	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4618      	mov	r0, r3
 8007766:	f7fd fdc3 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4618      	mov	r0, r3
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	080284e0 	.word	0x080284e0

08007778 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD0Ev>:
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7ff ffe7 	bl	8007754 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>
 8007786:	2104      	movs	r1, #4
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f003 ffdf 	bl	800b74c <_ZdlPvj>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4618      	mov	r0, r3
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	4a05      	ldr	r2, [pc, #20]	; (80077b8 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev+0x20>)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f00c fbfd 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4618      	mov	r0, r3
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	08028500 	.word	0x08028500

080077bc <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD0Ev>:
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7ff ffe7 	bl	8007798 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
 80077ca:	211c      	movs	r1, #28
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f003 ffbd 	bl	800b74c <_ZdlPvj>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4618      	mov	r0, r3
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>:
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	4a05      	ldr	r2, [pc, #20]	; (80077fc <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev+0x20>)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	601a      	str	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7fd fd7f 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4618      	mov	r0, r3
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	080285ac 	.word	0x080285ac

08007800 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD0Ev>:
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7ff ffe7 	bl	80077dc <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>
 800780e:	2104      	movs	r1, #4
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f003 ff9b 	bl	800b74c <_ZdlPvj>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4618      	mov	r0, r3
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	4a05      	ldr	r2, [pc, #20]	; (8007840 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev+0x20>)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4618      	mov	r0, r3
 8007832:	f00c fbb9 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4618      	mov	r0, r3
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	080285cc 	.word	0x080285cc

08007844 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD0Ev>:
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7ff ffe7 	bl	8007820 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
 8007852:	211c      	movs	r1, #28
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f003 ff79 	bl	800b74c <_ZdlPvj>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4618      	mov	r0, r3
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>:
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	4a05      	ldr	r2, [pc, #20]	; (8007884 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev+0x20>)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4618      	mov	r0, r3
 8007876:	f7fd fd3b 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4618      	mov	r0, r3
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	08028678 	.word	0x08028678

08007888 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD0Ev>:
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7ff ffe7 	bl	8007864 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>
 8007896:	2104      	movs	r1, #4
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f003 ff57 	bl	800b74c <_ZdlPvj>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4618      	mov	r0, r3
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	4a05      	ldr	r2, [pc, #20]	; (80078c8 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev+0x20>)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f00c fb75 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4618      	mov	r0, r3
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	08028698 	.word	0x08028698

080078cc <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD0Ev>:
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7ff ffe7 	bl	80078a8 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
 80078da:	211c      	movs	r1, #28
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f003 ff35 	bl	800b74c <_ZdlPvj>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>:
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	4a05      	ldr	r2, [pc, #20]	; (800790c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev+0x20>)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fd fcf7 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4618      	mov	r0, r3
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	08028744 	.word	0x08028744

08007910 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD0Ev>:
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7ff ffe7 	bl	80078ec <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>
 800791e:	2104      	movs	r1, #4
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f003 ff13 	bl	800b74c <_ZdlPvj>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4618      	mov	r0, r3
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	4a05      	ldr	r2, [pc, #20]	; (8007950 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev+0x20>)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4618      	mov	r0, r3
 8007942:	f00c fb31 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4618      	mov	r0, r3
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	08028764 	.word	0x08028764

08007954 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD0Ev>:
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f7ff ffe7 	bl	8007930 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
 8007962:	211c      	movs	r1, #28
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f003 fef1 	bl	800b74c <_ZdlPvj>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4618      	mov	r0, r3
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>:
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	4a05      	ldr	r2, [pc, #20]	; (8007994 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev+0x20>)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4618      	mov	r0, r3
 8007986:	f7fd fcb3 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	08028810 	.word	0x08028810

08007998 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD0Ev>:
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7ff ffe7 	bl	8007974 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>
 80079a6:	2104      	movs	r1, #4
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f003 fecf 	bl	800b74c <_ZdlPvj>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4618      	mov	r0, r3
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Command_Process_Test)
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	4a05      	ldr	r2, [pc, #20]	; (80079d8 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev+0x20>)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	601a      	str	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f00c faed 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4618      	mov	r0, r3
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	08028830 	.word	0x08028830

080079dc <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD0Ev>:
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7ff ffe7 	bl	80079b8 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
 80079ea:	211c      	movs	r1, #28
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f003 fead 	bl	800b74c <_ZdlPvj>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4618      	mov	r0, r3
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>:
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	4a05      	ldr	r2, [pc, #20]	; (8007a1c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev+0x20>)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	601a      	str	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7fd fc6f 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	080288dc 	.word	0x080288dc

08007a20 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD0Ev>:
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7ff ffe7 	bl	80079fc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>
 8007a2e:	2104      	movs	r1, #4
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f003 fe8b 	bl	800b74c <_ZdlPvj>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	4a05      	ldr	r2, [pc, #20]	; (8007a60 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev+0x20>)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f00c faa9 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	080288fc 	.word	0x080288fc

08007a64 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD0Ev>:
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7ff ffe7 	bl	8007a40 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
 8007a72:	211c      	movs	r1, #28
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f003 fe69 	bl	800b74c <_ZdlPvj>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>:
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	4a05      	ldr	r2, [pc, #20]	; (8007aa4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev+0x20>)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	601a      	str	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fd fc2b 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	080289a8 	.word	0x080289a8

08007aa8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD0Ev>:
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7ff ffe7 	bl	8007a84 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>
 8007ab6:	2104      	movs	r1, #4
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f003 fe47 	bl	800b74c <_ZdlPvj>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	4a05      	ldr	r2, [pc, #20]	; (8007ae8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	601a      	str	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f00c fa65 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	080289c8 	.word	0x080289c8

08007aec <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD0Ev>:
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7ff ffe7 	bl	8007ac8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
 8007afa:	211c      	movs	r1, #28
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f003 fe25 	bl	800b74c <_ZdlPvj>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4618      	mov	r0, r3
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>:
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	4a05      	ldr	r2, [pc, #20]	; (8007b2c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fd fbe7 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4618      	mov	r0, r3
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	08028a74 	.word	0x08028a74

08007b30 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD0Ev>:
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7ff ffe7 	bl	8007b0c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>
 8007b3e:	2104      	movs	r1, #4
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f003 fe03 	bl	800b74c <_ZdlPvj>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	4a05      	ldr	r2, [pc, #20]	; (8007b70 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f00c fa21 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	08028a94 	.word	0x08028a94

08007b74 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7ff ffe7 	bl	8007b50 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 8007b82:	211c      	movs	r1, #28
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f003 fde1 	bl	800b74c <_ZdlPvj>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	4a05      	ldr	r2, [pc, #20]	; (8007bb4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fd fba3 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4618      	mov	r0, r3
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	08028b40 	.word	0x08028b40

08007bb8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7ff ffe7 	bl	8007b94 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 8007bc6:	2104      	movs	r1, #4
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f003 fdbf 	bl	800b74c <_ZdlPvj>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	4a05      	ldr	r2, [pc, #20]	; (8007bf8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4618      	mov	r0, r3
 8007bea:	f00c f9dd 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	08028b60 	.word	0x08028b60

08007bfc <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7ff ffe7 	bl	8007bd8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 8007c0a:	211c      	movs	r1, #28
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f003 fd9d 	bl	800b74c <_ZdlPvj>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4618      	mov	r0, r3
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	4a05      	ldr	r2, [pc, #20]	; (8007c3c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fd fb5f 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4618      	mov	r0, r3
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	08028c0c 	.word	0x08028c0c

08007c40 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7ff ffe7 	bl	8007c1c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 8007c4e:	2104      	movs	r1, #4
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f003 fd7b 	bl	800b74c <_ZdlPvj>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	4a05      	ldr	r2, [pc, #20]	; (8007c80 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f00c f999 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	08028c2c 	.word	0x08028c2c

08007c84 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f7ff ffe7 	bl	8007c60 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 8007c92:	211c      	movs	r1, #28
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f003 fd59 	bl	800b74c <_ZdlPvj>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	4a05      	ldr	r2, [pc, #20]	; (8007cc4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	601a      	str	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fd fb1b 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	08028cd8 	.word	0x08028cd8

08007cc8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7ff ffe7 	bl	8007ca4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 8007cd6:	2104      	movs	r1, #4
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f003 fd37 	bl	800b74c <_ZdlPvj>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	4a05      	ldr	r2, [pc, #20]	; (8007d08 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f00c f955 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4618      	mov	r0, r3
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	08028cf8 	.word	0x08028cf8

08007d0c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7ff ffe7 	bl	8007ce8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 8007d1a:	211c      	movs	r1, #28
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f003 fd15 	bl	800b74c <_ZdlPvj>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	4a05      	ldr	r2, [pc, #20]	; (8007d4c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fd fad7 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4618      	mov	r0, r3
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	08028da4 	.word	0x08028da4

08007d50 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7ff ffe7 	bl	8007d2c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 8007d5e:	2104      	movs	r1, #4
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f003 fcf3 	bl	800b74c <_ZdlPvj>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	4a05      	ldr	r2, [pc, #20]	; (8007d90 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f00c f911 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	08028dc4 	.word	0x08028dc4

08007d94 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f7ff ffe7 	bl	8007d70 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 8007da2:	211c      	movs	r1, #28
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f003 fcd1 	bl	800b74c <_ZdlPvj>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4618      	mov	r0, r3
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	4a05      	ldr	r2, [pc, #20]	; (8007dd4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	601a      	str	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fd fa93 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	08028e70 	.word	0x08028e70

08007dd8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7ff ffe7 	bl	8007db4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 8007de6:	2104      	movs	r1, #4
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f003 fcaf 	bl	800b74c <_ZdlPvj>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4618      	mov	r0, r3
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	4a05      	ldr	r2, [pc, #20]	; (8007e18 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	601a      	str	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f00c f8cd 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4618      	mov	r0, r3
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	08028e90 	.word	0x08028e90

08007e1c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7ff ffe7 	bl	8007df8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 8007e2a:	211c      	movs	r1, #28
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f003 fc8d 	bl	800b74c <_ZdlPvj>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4618      	mov	r0, r3
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	4a05      	ldr	r2, [pc, #20]	; (8007e5c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	601a      	str	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fd fa4f 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4618      	mov	r0, r3
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	08028f3c 	.word	0x08028f3c

08007e60 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7ff ffe7 	bl	8007e3c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 8007e6e:	2104      	movs	r1, #4
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f003 fc6b 	bl	800b74c <_ZdlPvj>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	4a05      	ldr	r2, [pc, #20]	; (8007ea0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f00c f889 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	08028f5c 	.word	0x08028f5c

08007ea4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff ffe7 	bl	8007e80 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 8007eb2:	211c      	movs	r1, #28
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f003 fc49 	bl	800b74c <_ZdlPvj>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	4a05      	ldr	r2, [pc, #20]	; (8007ee4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fd fa0b 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	08029008 	.word	0x08029008

08007ee8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7ff ffe7 	bl	8007ec4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 8007ef6:	2104      	movs	r1, #4
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f003 fc27 	bl	800b74c <_ZdlPvj>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4618      	mov	r0, r3
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	4a05      	ldr	r2, [pc, #20]	; (8007f28 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f00c f845 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4618      	mov	r0, r3
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	08029028 	.word	0x08029028

08007f2c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7ff ffe7 	bl	8007f08 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 8007f3a:	211c      	movs	r1, #28
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f003 fc05 	bl	800b74c <_ZdlPvj>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4618      	mov	r0, r3
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	4a05      	ldr	r2, [pc, #20]	; (8007f6c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7fd f9c7 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4618      	mov	r0, r3
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	080290d4 	.word	0x080290d4

08007f70 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f7ff ffe7 	bl	8007f4c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8007f7e:	2104      	movs	r1, #4
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f003 fbe3 	bl	800b74c <_ZdlPvj>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	4a05      	ldr	r2, [pc, #20]	; (8007fb0 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	601a      	str	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f00c f801 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	080290f4 	.word	0x080290f4

08007fb4 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7ff ffe7 	bl	8007f90 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8007fc2:	211c      	movs	r1, #28
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f003 fbc1 	bl	800b74c <_ZdlPvj>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	4a05      	ldr	r2, [pc, #20]	; (8007ff4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7fd f983 	bl	80052f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4618      	mov	r0, r3
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	080291a0 	.word	0x080291a0

08007ff8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7ff ffe7 	bl	8007fd4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 8008006:	2104      	movs	r1, #4
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f003 fb9f 	bl	800b74c <_ZdlPvj>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4618      	mov	r0, r3
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	4a05      	ldr	r2, [pc, #20]	; (8008038 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4618      	mov	r0, r3
 800802a:	f00b ffbd 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4618      	mov	r0, r3
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	080291e0 	.word	0x080291e0

0800803c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7ff ffe7 	bl	8008018 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 800804a:	211c      	movs	r1, #28
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f003 fb7d 	bl	800b74c <_ZdlPvj>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4618      	mov	r0, r3
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	4a05      	ldr	r2, [pc, #20]	; (800807c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4618      	mov	r0, r3
 800806e:	f7fc faf7 	bl	8004660 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4618      	mov	r0, r3
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	0802928c 	.word	0x0802928c

08008080 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7ff ffe7 	bl	800805c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 800808e:	2108      	movs	r1, #8
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f003 fb5b 	bl	800b74c <_ZdlPvj>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4618      	mov	r0, r3
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	4a05      	ldr	r2, [pc, #20]	; (80080c0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f00b ff79 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4618      	mov	r0, r3
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	080292ac 	.word	0x080292ac

080080c4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7ff ffe7 	bl	80080a0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 80080d2:	211c      	movs	r1, #28
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f003 fb39 	bl	800b74c <_ZdlPvj>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4618      	mov	r0, r3
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	4a05      	ldr	r2, [pc, #20]	; (8008104 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fc fab3 	bl	8004660 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4618      	mov	r0, r3
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	08029358 	.word	0x08029358

08008108 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7ff ffe7 	bl	80080e4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 8008116:	2108      	movs	r1, #8
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f003 fb17 	bl	800b74c <_ZdlPvj>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4618      	mov	r0, r3
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	4a05      	ldr	r2, [pc, #20]	; (8008148 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4618      	mov	r0, r3
 800813a:	f00b ff35 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4618      	mov	r0, r3
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	08029378 	.word	0x08029378

0800814c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f7ff ffe7 	bl	8008128 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 800815a:	211c      	movs	r1, #28
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f003 faf5 	bl	800b74c <_ZdlPvj>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4618      	mov	r0, r3
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	4a05      	ldr	r2, [pc, #20]	; (800818c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4618      	mov	r0, r3
 800817e:	f7fc fa6f 	bl	8004660 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	08029424 	.word	0x08029424

08008190 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7ff ffe7 	bl	800816c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 800819e:	2108      	movs	r1, #8
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f003 fad3 	bl	800b74c <_ZdlPvj>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	4a05      	ldr	r2, [pc, #20]	; (80081d0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f00b fef1 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4618      	mov	r0, r3
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	08029444 	.word	0x08029444

080081d4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7ff ffe7 	bl	80081b0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 80081e2:	211c      	movs	r1, #28
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f003 fab1 	bl	800b74c <_ZdlPvj>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4618      	mov	r0, r3
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	4a05      	ldr	r2, [pc, #20]	; (8008214 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	601a      	str	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4618      	mov	r0, r3
 8008206:	f7fc fa2b 	bl	8004660 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4618      	mov	r0, r3
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	080294f0 	.word	0x080294f0

08008218 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7ff ffe7 	bl	80081f4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 8008226:	2108      	movs	r1, #8
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f003 fa8f 	bl	800b74c <_ZdlPvj>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4618      	mov	r0, r3
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	4a05      	ldr	r2, [pc, #20]	; (8008258 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4618      	mov	r0, r3
 800824a:	f00b fead 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	08029510 	.word	0x08029510

0800825c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7ff ffe7 	bl	8008238 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 800826a:	211c      	movs	r1, #28
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f003 fa6d 	bl	800b74c <_ZdlPvj>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4618      	mov	r0, r3
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	4a05      	ldr	r2, [pc, #20]	; (800829c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	601a      	str	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4618      	mov	r0, r3
 800828e:	f7fc f9e7 	bl	8004660 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4618      	mov	r0, r3
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	080295bc 	.word	0x080295bc

080082a0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f7ff ffe7 	bl	800827c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 80082ae:	2108      	movs	r1, #8
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f003 fa4b 	bl	800b74c <_ZdlPvj>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4618      	mov	r0, r3
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	4a05      	ldr	r2, [pc, #20]	; (80082e0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f00b fe69 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	080295dc 	.word	0x080295dc

080082e4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7ff ffe7 	bl	80082c0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 80082f2:	211c      	movs	r1, #28
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f003 fa29 	bl	800b74c <_ZdlPvj>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4618      	mov	r0, r3
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	4a05      	ldr	r2, [pc, #20]	; (8008324 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	601a      	str	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4618      	mov	r0, r3
 8008316:	f7fc f9a3 	bl	8004660 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	08029688 	.word	0x08029688

08008328 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f7ff ffe7 	bl	8008304 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 8008336:	2108      	movs	r1, #8
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f003 fa07 	bl	800b74c <_ZdlPvj>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4618      	mov	r0, r3
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	4a05      	ldr	r2, [pc, #20]	; (8008368 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	601a      	str	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4618      	mov	r0, r3
 800835a:	f00b fe25 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4618      	mov	r0, r3
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	080296a8 	.word	0x080296a8

0800836c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7ff ffe7 	bl	8008348 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 800837a:	211c      	movs	r1, #28
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f003 f9e5 	bl	800b74c <_ZdlPvj>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4618      	mov	r0, r3
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	4a05      	ldr	r2, [pc, #20]	; (80083ac <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4618      	mov	r0, r3
 800839e:	f7fc f95f 	bl	8004660 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	08029754 	.word	0x08029754

080083b0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7ff ffe7 	bl	800838c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 80083be:	2108      	movs	r1, #8
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f003 f9c3 	bl	800b74c <_ZdlPvj>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4618      	mov	r0, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	4a05      	ldr	r2, [pc, #20]	; (80083f0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f00b fde1 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4618      	mov	r0, r3
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	08029774 	.word	0x08029774

080083f4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7ff ffe7 	bl	80083d0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 8008402:	211c      	movs	r1, #28
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f003 f9a1 	bl	800b74c <_ZdlPvj>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4618      	mov	r0, r3
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	4a05      	ldr	r2, [pc, #20]	; (8008434 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4618      	mov	r0, r3
 8008426:	f7fc f91b 	bl	8004660 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4618      	mov	r0, r3
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	08029820 	.word	0x08029820

08008438 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f7ff ffe7 	bl	8008414 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8008446:	2108      	movs	r1, #8
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f003 f97f 	bl	800b74c <_ZdlPvj>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4618      	mov	r0, r3
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	4a05      	ldr	r2, [pc, #20]	; (8008478 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4618      	mov	r0, r3
 800846a:	f00b fd9d 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4618      	mov	r0, r3
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	08029840 	.word	0x08029840

0800847c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7ff ffe7 	bl	8008458 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 800848a:	211c      	movs	r1, #28
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f003 f95d 	bl	800b74c <_ZdlPvj>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4618      	mov	r0, r3
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	4a05      	ldr	r2, [pc, #20]	; (80084bc <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	601a      	str	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7fc f8d7 	bl	8004660 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4618      	mov	r0, r3
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	080298ec 	.word	0x080298ec

080084c0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7ff ffe7 	bl	800849c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 80084ce:	2108      	movs	r1, #8
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f003 f93b 	bl	800b74c <_ZdlPvj>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4618      	mov	r0, r3
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <_Z41__static_initialization_and_destruction_0ii>:
}
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af02      	add	r7, sp, #8
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	f040 8224 	bne.w	800893a <_Z41__static_initialization_and_destruction_0ii+0x45a>
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084f8:	4293      	cmp	r3, r2
 80084fa:	f040 821e 	bne.w	800893a <_Z41__static_initialization_and_destruction_0ii+0x45a>
TEST(RingBuffer_Test_Group, InitTest)
 80084fe:	489f      	ldr	r0, [pc, #636]	; (800877c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8008500:	f7fc f8fc 	bl	80046fc <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 8008504:	2329      	movs	r3, #41	; 0x29
 8008506:	9301      	str	r3, [sp, #4]
 8008508:	4b9d      	ldr	r3, [pc, #628]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	4b9d      	ldr	r3, [pc, #628]	; (8008784 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800850e:	4a9e      	ldr	r2, [pc, #632]	; (8008788 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008510:	499a      	ldr	r1, [pc, #616]	; (800877c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8008512:	489e      	ldr	r0, [pc, #632]	; (800878c <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8008514:	f00d fb44 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 8008518:	489d      	ldr	r0, [pc, #628]	; (8008790 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800851a:	f7fc f9a3 	bl	8004864 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 800851e:	2333      	movs	r3, #51	; 0x33
 8008520:	9301      	str	r3, [sp, #4]
 8008522:	4b97      	ldr	r3, [pc, #604]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	4b9b      	ldr	r3, [pc, #620]	; (8008794 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8008528:	4a97      	ldr	r2, [pc, #604]	; (8008788 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800852a:	4999      	ldr	r1, [pc, #612]	; (8008790 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800852c:	489a      	ldr	r0, [pc, #616]	; (8008798 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800852e:	f00d fb37 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8008532:	489a      	ldr	r0, [pc, #616]	; (800879c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8008534:	f7fc fa20 	bl	8004978 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8008538:	233d      	movs	r3, #61	; 0x3d
 800853a:	9301      	str	r3, [sp, #4]
 800853c:	4b90      	ldr	r3, [pc, #576]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	4b97      	ldr	r3, [pc, #604]	; (80087a0 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8008542:	4a91      	ldr	r2, [pc, #580]	; (8008788 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008544:	4995      	ldr	r1, [pc, #596]	; (800879c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8008546:	4897      	ldr	r0, [pc, #604]	; (80087a4 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8008548:	f00d fb2a 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 800854c:	4896      	ldr	r0, [pc, #600]	; (80087a8 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800854e:	f7fc fa9b 	bl	8004a88 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 8008552:	2348      	movs	r3, #72	; 0x48
 8008554:	9301      	str	r3, [sp, #4]
 8008556:	4b8a      	ldr	r3, [pc, #552]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	4b94      	ldr	r3, [pc, #592]	; (80087ac <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800855c:	4a8a      	ldr	r2, [pc, #552]	; (8008788 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800855e:	4992      	ldr	r1, [pc, #584]	; (80087a8 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8008560:	4893      	ldr	r0, [pc, #588]	; (80087b0 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8008562:	f00d fb1d 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8008566:	4893      	ldr	r0, [pc, #588]	; (80087b4 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8008568:	f7fc fafa 	bl	8004b60 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 800856c:	2351      	movs	r3, #81	; 0x51
 800856e:	9301      	str	r3, [sp, #4]
 8008570:	4b83      	ldr	r3, [pc, #524]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	4b90      	ldr	r3, [pc, #576]	; (80087b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8008576:	4a84      	ldr	r2, [pc, #528]	; (8008788 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008578:	498e      	ldr	r1, [pc, #568]	; (80087b4 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800857a:	4890      	ldr	r0, [pc, #576]	; (80087bc <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800857c:	f00d fb10 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8008580:	488f      	ldr	r0, [pc, #572]	; (80087c0 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8008582:	f7fc fb79 	bl	8004c78 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 8008586:	2361      	movs	r3, #97	; 0x61
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	4b7d      	ldr	r3, [pc, #500]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	4b8d      	ldr	r3, [pc, #564]	; (80087c4 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8008590:	4a7d      	ldr	r2, [pc, #500]	; (8008788 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008592:	498b      	ldr	r1, [pc, #556]	; (80087c0 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8008594:	488c      	ldr	r0, [pc, #560]	; (80087c8 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8008596:	f00d fb03 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 800859a:	488c      	ldr	r0, [pc, #560]	; (80087cc <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800859c:	f7fc fc2a 	bl	8004df4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 80085a0:	2376      	movs	r3, #118	; 0x76
 80085a2:	9301      	str	r3, [sp, #4]
 80085a4:	4b76      	ldr	r3, [pc, #472]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	4b89      	ldr	r3, [pc, #548]	; (80087d0 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 80085aa:	4a77      	ldr	r2, [pc, #476]	; (8008788 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80085ac:	4987      	ldr	r1, [pc, #540]	; (80087cc <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80085ae:	4889      	ldr	r0, [pc, #548]	; (80087d4 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 80085b0:	f00d faf6 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 80085b4:	4888      	ldr	r0, [pc, #544]	; (80087d8 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80085b6:	f7fc fc83 	bl	8004ec0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 80085ba:	237d      	movs	r3, #125	; 0x7d
 80085bc:	9301      	str	r3, [sp, #4]
 80085be:	4b70      	ldr	r3, [pc, #448]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80085c0:	9300      	str	r3, [sp, #0]
 80085c2:	4b86      	ldr	r3, [pc, #536]	; (80087dc <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 80085c4:	4a70      	ldr	r2, [pc, #448]	; (8008788 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80085c6:	4984      	ldr	r1, [pc, #528]	; (80087d8 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80085c8:	4885      	ldr	r0, [pc, #532]	; (80087e0 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80085ca:	f00d fae9 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 80085ce:	4885      	ldr	r0, [pc, #532]	; (80087e4 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80085d0:	f7fc fd60 	bl	8005094 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 80085d4:	2385      	movs	r3, #133	; 0x85
 80085d6:	9301      	str	r3, [sp, #4]
 80085d8:	4b69      	ldr	r3, [pc, #420]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	4b82      	ldr	r3, [pc, #520]	; (80087e8 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 80085de:	4a6a      	ldr	r2, [pc, #424]	; (8008788 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80085e0:	4980      	ldr	r1, [pc, #512]	; (80087e4 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80085e2:	4882      	ldr	r0, [pc, #520]	; (80087ec <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80085e4:	f00d fadc 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80085e8:	4881      	ldr	r0, [pc, #516]	; (80087f0 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80085ea:	f7fc fec9 	bl	8005380 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 80085ee:	23c0      	movs	r3, #192	; 0xc0
 80085f0:	9301      	str	r3, [sp, #4]
 80085f2:	4b63      	ldr	r3, [pc, #396]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	4b7f      	ldr	r3, [pc, #508]	; (80087f4 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 80085f8:	4a7f      	ldr	r2, [pc, #508]	; (80087f8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80085fa:	497d      	ldr	r1, [pc, #500]	; (80087f0 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80085fc:	487f      	ldr	r0, [pc, #508]	; (80087fc <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 80085fe:	f00d facf 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8008602:	487f      	ldr	r0, [pc, #508]	; (8008800 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8008604:	f7fc ff26 	bl	8005454 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 8008608:	23d2      	movs	r3, #210	; 0xd2
 800860a:	9301      	str	r3, [sp, #4]
 800860c:	4b5c      	ldr	r3, [pc, #368]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	4b7c      	ldr	r3, [pc, #496]	; (8008804 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8008612:	4a79      	ldr	r2, [pc, #484]	; (80087f8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008614:	497a      	ldr	r1, [pc, #488]	; (8008800 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8008616:	487c      	ldr	r0, [pc, #496]	; (8008808 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8008618:	f00d fac2 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 800861c:	487b      	ldr	r0, [pc, #492]	; (800880c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800861e:	f7fc ffdd 	bl	80055dc <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 8008622:	23de      	movs	r3, #222	; 0xde
 8008624:	9301      	str	r3, [sp, #4]
 8008626:	4b56      	ldr	r3, [pc, #344]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	4b79      	ldr	r3, [pc, #484]	; (8008810 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 800862c:	4a72      	ldr	r2, [pc, #456]	; (80087f8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800862e:	4977      	ldr	r1, [pc, #476]	; (800880c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8008630:	4878      	ldr	r0, [pc, #480]	; (8008814 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8008632:	f00d fab5 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8008636:	4878      	ldr	r0, [pc, #480]	; (8008818 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8008638:	f7fd f87a 	bl	8005730 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 800863c:	23ed      	movs	r3, #237	; 0xed
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	4b4f      	ldr	r3, [pc, #316]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	4b75      	ldr	r3, [pc, #468]	; (800881c <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8008646:	4a6c      	ldr	r2, [pc, #432]	; (80087f8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008648:	4973      	ldr	r1, [pc, #460]	; (8008818 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 800864a:	4875      	ldr	r0, [pc, #468]	; (8008820 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 800864c:	f00d faa8 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8008650:	4874      	ldr	r0, [pc, #464]	; (8008824 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8008652:	f7fd f91b 	bl	800588c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 8008656:	23fe      	movs	r3, #254	; 0xfe
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	4b49      	ldr	r3, [pc, #292]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	4b72      	ldr	r3, [pc, #456]	; (8008828 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8008660:	4a65      	ldr	r2, [pc, #404]	; (80087f8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008662:	4970      	ldr	r1, [pc, #448]	; (8008824 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8008664:	4871      	ldr	r0, [pc, #452]	; (800882c <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8008666:	f00d fa9b 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 800866a:	4871      	ldr	r0, [pc, #452]	; (8008830 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800866c:	f7fd f97a 	bl	8005964 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 8008670:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	4b42      	ldr	r3, [pc, #264]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	4b6e      	ldr	r3, [pc, #440]	; (8008834 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800867c:	4a5e      	ldr	r2, [pc, #376]	; (80087f8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800867e:	496c      	ldr	r1, [pc, #432]	; (8008830 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8008680:	486d      	ldr	r0, [pc, #436]	; (8008838 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8008682:	f00d fa8d 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8008686:	486d      	ldr	r0, [pc, #436]	; (800883c <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8008688:	f7fd fa2a 	bl	8005ae0 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 800868c:	f44f 7392 	mov.w	r3, #292	; 0x124
 8008690:	9301      	str	r3, [sp, #4]
 8008692:	4b3b      	ldr	r3, [pc, #236]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	4b6a      	ldr	r3, [pc, #424]	; (8008840 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8008698:	4a57      	ldr	r2, [pc, #348]	; (80087f8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800869a:	4968      	ldr	r1, [pc, #416]	; (800883c <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 800869c:	4869      	ldr	r0, [pc, #420]	; (8008844 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 800869e:	f00d fa7f 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80086a2:	4869      	ldr	r0, [pc, #420]	; (8008848 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 80086a4:	f7fd face 	bl	8005c44 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 80086a8:	f240 133b 	movw	r3, #315	; 0x13b
 80086ac:	9301      	str	r3, [sp, #4]
 80086ae:	4b34      	ldr	r3, [pc, #208]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	4b66      	ldr	r3, [pc, #408]	; (800884c <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 80086b4:	4a50      	ldr	r2, [pc, #320]	; (80087f8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80086b6:	4964      	ldr	r1, [pc, #400]	; (8008848 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 80086b8:	4865      	ldr	r0, [pc, #404]	; (8008850 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 80086ba:	f00d fa71 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 80086be:	4865      	ldr	r0, [pc, #404]	; (8008854 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80086c0:	f7fd fbfe 	bl	8005ec0 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 80086c4:	f240 1367 	movw	r3, #359	; 0x167
 80086c8:	9301      	str	r3, [sp, #4]
 80086ca:	4b2d      	ldr	r3, [pc, #180]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	4b62      	ldr	r3, [pc, #392]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 80086d0:	4a49      	ldr	r2, [pc, #292]	; (80087f8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80086d2:	4960      	ldr	r1, [pc, #384]	; (8008854 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80086d4:	4861      	ldr	r0, [pc, #388]	; (800885c <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 80086d6:	f00d fa63 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80086da:	4861      	ldr	r0, [pc, #388]	; (8008860 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 80086dc:	f7fd fd2a 	bl	8006134 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>
 80086e0:	f240 1393 	movw	r3, #403	; 0x193
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	4b26      	ldr	r3, [pc, #152]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	4b5e      	ldr	r3, [pc, #376]	; (8008864 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80086ec:	4a42      	ldr	r2, [pc, #264]	; (80087f8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80086ee:	495c      	ldr	r1, [pc, #368]	; (8008860 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 80086f0:	485d      	ldr	r0, [pc, #372]	; (8008868 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80086f2:	f00d fa55 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80086f6:	485d      	ldr	r0, [pc, #372]	; (800886c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80086f8:	f7fd fdc6 	bl	8006288 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>
 80086fc:	f240 13a5 	movw	r3, #421	; 0x1a5
 8008700:	9301      	str	r3, [sp, #4]
 8008702:	4b1f      	ldr	r3, [pc, #124]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	4b5a      	ldr	r3, [pc, #360]	; (8008870 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8008708:	4a3b      	ldr	r2, [pc, #236]	; (80087f8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800870a:	4958      	ldr	r1, [pc, #352]	; (800886c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800870c:	4859      	ldr	r0, [pc, #356]	; (8008874 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800870e:	f00d fa47 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Command_Process_Test)
 8008712:	4859      	ldr	r0, [pc, #356]	; (8008878 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8008714:	f7fd fe9e 	bl	8006454 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>
 8008718:	f240 13bd 	movw	r3, #445	; 0x1bd
 800871c:	9301      	str	r3, [sp, #4]
 800871e:	4b18      	ldr	r3, [pc, #96]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	4b56      	ldr	r3, [pc, #344]	; (800887c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8008724:	4a34      	ldr	r2, [pc, #208]	; (80087f8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008726:	4954      	ldr	r1, [pc, #336]	; (8008878 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8008728:	4855      	ldr	r0, [pc, #340]	; (8008880 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800872a:	f00d fa39 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 800872e:	4855      	ldr	r0, [pc, #340]	; (8008884 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8008730:	f7fd ffb4 	bl	800669c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>
 8008734:	f240 13e9 	movw	r3, #489	; 0x1e9
 8008738:	9301      	str	r3, [sp, #4]
 800873a:	4b11      	ldr	r3, [pc, #68]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	4b52      	ldr	r3, [pc, #328]	; (8008888 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8008740:	4a2d      	ldr	r2, [pc, #180]	; (80087f8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008742:	4950      	ldr	r1, [pc, #320]	; (8008884 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8008744:	4851      	ldr	r0, [pc, #324]	; (800888c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8008746:	f00d fa2b 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 800874a:	4851      	ldr	r0, [pc, #324]	; (8008890 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800874c:	f7fe f8dc 	bl	8006908 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>
 8008750:	f240 2315 	movw	r3, #533	; 0x215
 8008754:	9301      	str	r3, [sp, #4]
 8008756:	4b0a      	ldr	r3, [pc, #40]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	4b4e      	ldr	r3, [pc, #312]	; (8008894 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800875c:	4a26      	ldr	r2, [pc, #152]	; (80087f8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800875e:	494c      	ldr	r1, [pc, #304]	; (8008890 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8008760:	484d      	ldr	r0, [pc, #308]	; (8008898 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8008762:	f00d fa1d 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8008766:	484d      	ldr	r0, [pc, #308]	; (800889c <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8008768:	f7fe f984 	bl	8006a74 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>
 800876c:	f44f 730c 	mov.w	r3, #560	; 0x230
 8008770:	9301      	str	r3, [sp, #4]
 8008772:	4b03      	ldr	r3, [pc, #12]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	4b4a      	ldr	r3, [pc, #296]	; (80088a0 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8008778:	e094      	b.n	80088a4 <_Z41__static_initialization_and_destruction_0ii+0x3c4>
 800877a:	bf00      	nop
 800877c:	20000380 	.word	0x20000380
 8008780:	0802482c 	.word	0x0802482c
 8008784:	08025074 	.word	0x08025074
 8008788:	08025080 	.word	0x08025080
 800878c:	2000039c 	.word	0x2000039c
 8008790:	200003a0 	.word	0x200003a0
 8008794:	08025098 	.word	0x08025098
 8008798:	200003bc 	.word	0x200003bc
 800879c:	200003c0 	.word	0x200003c0
 80087a0:	080250a8 	.word	0x080250a8
 80087a4:	200003dc 	.word	0x200003dc
 80087a8:	200003e0 	.word	0x200003e0
 80087ac:	080250bc 	.word	0x080250bc
 80087b0:	200003fc 	.word	0x200003fc
 80087b4:	20000400 	.word	0x20000400
 80087b8:	080250cc 	.word	0x080250cc
 80087bc:	2000041c 	.word	0x2000041c
 80087c0:	20000420 	.word	0x20000420
 80087c4:	080250e4 	.word	0x080250e4
 80087c8:	2000043c 	.word	0x2000043c
 80087cc:	20000440 	.word	0x20000440
 80087d0:	080250f4 	.word	0x080250f4
 80087d4:	2000045c 	.word	0x2000045c
 80087d8:	20000460 	.word	0x20000460
 80087dc:	08025104 	.word	0x08025104
 80087e0:	2000047c 	.word	0x2000047c
 80087e4:	20000480 	.word	0x20000480
 80087e8:	08025110 	.word	0x08025110
 80087ec:	2000049c 	.word	0x2000049c
 80087f0:	200004a8 	.word	0x200004a8
 80087f4:	08025120 	.word	0x08025120
 80087f8:	08025130 	.word	0x08025130
 80087fc:	200004c4 	.word	0x200004c4
 8008800:	200004c8 	.word	0x200004c8
 8008804:	08025148 	.word	0x08025148
 8008808:	200004e4 	.word	0x200004e4
 800880c:	200004e8 	.word	0x200004e8
 8008810:	08025160 	.word	0x08025160
 8008814:	20000504 	.word	0x20000504
 8008818:	20000508 	.word	0x20000508
 800881c:	0802517c 	.word	0x0802517c
 8008820:	20000524 	.word	0x20000524
 8008824:	20000528 	.word	0x20000528
 8008828:	08025190 	.word	0x08025190
 800882c:	20000544 	.word	0x20000544
 8008830:	20000548 	.word	0x20000548
 8008834:	080251ac 	.word	0x080251ac
 8008838:	20000564 	.word	0x20000564
 800883c:	20000568 	.word	0x20000568
 8008840:	080251c0 	.word	0x080251c0
 8008844:	20000584 	.word	0x20000584
 8008848:	20000588 	.word	0x20000588
 800884c:	080251dc 	.word	0x080251dc
 8008850:	200005a4 	.word	0x200005a4
 8008854:	200005a8 	.word	0x200005a8
 8008858:	080251f4 	.word	0x080251f4
 800885c:	200005c4 	.word	0x200005c4
 8008860:	200005c8 	.word	0x200005c8
 8008864:	08025208 	.word	0x08025208
 8008868:	200005e4 	.word	0x200005e4
 800886c:	200005e8 	.word	0x200005e8
 8008870:	08025228 	.word	0x08025228
 8008874:	20000604 	.word	0x20000604
 8008878:	20000608 	.word	0x20000608
 800887c:	08025240 	.word	0x08025240
 8008880:	20000624 	.word	0x20000624
 8008884:	20000628 	.word	0x20000628
 8008888:	08025258 	.word	0x08025258
 800888c:	20000644 	.word	0x20000644
 8008890:	20000648 	.word	0x20000648
 8008894:	0802526c 	.word	0x0802526c
 8008898:	20000664 	.word	0x20000664
 800889c:	20000668 	.word	0x20000668
 80088a0:	08025288 	.word	0x08025288
 80088a4:	4a83      	ldr	r2, [pc, #524]	; (8008ab4 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80088a6:	4984      	ldr	r1, [pc, #528]	; (8008ab8 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 80088a8:	4884      	ldr	r0, [pc, #528]	; (8008abc <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 80088aa:	f00d f979 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 80088ae:	4884      	ldr	r0, [pc, #528]	; (8008ac0 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 80088b0:	f7fe fa16 	bl	8006ce0 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>
 80088b4:	f44f 7317 	mov.w	r3, #604	; 0x25c
 80088b8:	9301      	str	r3, [sp, #4]
 80088ba:	4b82      	ldr	r3, [pc, #520]	; (8008ac4 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	4b82      	ldr	r3, [pc, #520]	; (8008ac8 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 80088c0:	4a7c      	ldr	r2, [pc, #496]	; (8008ab4 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80088c2:	497f      	ldr	r1, [pc, #508]	; (8008ac0 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 80088c4:	4881      	ldr	r0, [pc, #516]	; (8008acc <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 80088c6:	f00d f96b 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 80088ca:	4881      	ldr	r0, [pc, #516]	; (8008ad0 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 80088cc:	f7fe faee 	bl	8006eac <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>
 80088d0:	f240 2375 	movw	r3, #629	; 0x275
 80088d4:	9301      	str	r3, [sp, #4]
 80088d6:	4b7b      	ldr	r3, [pc, #492]	; (8008ac4 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	4b7e      	ldr	r3, [pc, #504]	; (8008ad4 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 80088dc:	4a75      	ldr	r2, [pc, #468]	; (8008ab4 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80088de:	497c      	ldr	r1, [pc, #496]	; (8008ad0 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 80088e0:	487d      	ldr	r0, [pc, #500]	; (8008ad8 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 80088e2:	f00d f95d 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 80088e6:	487d      	ldr	r0, [pc, #500]	; (8008adc <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80088e8:	f7fe fc32 	bl	8007150 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>
 80088ec:	f240 239a 	movw	r3, #666	; 0x29a
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	4b74      	ldr	r3, [pc, #464]	; (8008ac4 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	4b7a      	ldr	r3, [pc, #488]	; (8008ae0 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 80088f8:	4a6e      	ldr	r2, [pc, #440]	; (8008ab4 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80088fa:	4978      	ldr	r1, [pc, #480]	; (8008adc <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80088fc:	4879      	ldr	r0, [pc, #484]	; (8008ae4 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 80088fe:	f00d f94f 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8008902:	4879      	ldr	r0, [pc, #484]	; (8008ae8 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8008904:	f7fe fd02 	bl	800730c <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>
 8008908:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 800890c:	9301      	str	r3, [sp, #4]
 800890e:	4b6d      	ldr	r3, [pc, #436]	; (8008ac4 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	4b76      	ldr	r3, [pc, #472]	; (8008aec <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 8008914:	4a67      	ldr	r2, [pc, #412]	; (8008ab4 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8008916:	4974      	ldr	r1, [pc, #464]	; (8008ae8 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8008918:	4875      	ldr	r0, [pc, #468]	; (8008af0 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 800891a:	f00d f941 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 800891e:	4875      	ldr	r0, [pc, #468]	; (8008af4 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8008920:	f7fe fd6c 	bl	80073fc <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>
 8008924:	f240 23c1 	movw	r3, #705	; 0x2c1
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	4b66      	ldr	r3, [pc, #408]	; (8008ac4 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	4b72      	ldr	r3, [pc, #456]	; (8008af8 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 8008930:	4a60      	ldr	r2, [pc, #384]	; (8008ab4 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8008932:	4970      	ldr	r1, [pc, #448]	; (8008af4 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8008934:	4871      	ldr	r0, [pc, #452]	; (8008afc <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8008936:	f00d f933 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	f040 80b4 	bne.w	8008aaa <_Z41__static_initialization_and_destruction_0ii+0x5ca>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008948:	4293      	cmp	r3, r2
 800894a:	f040 80ae 	bne.w	8008aaa <_Z41__static_initialization_and_destruction_0ii+0x5ca>
 800894e:	486b      	ldr	r0, [pc, #428]	; (8008afc <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8008950:	f00d f950 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8008954:	4867      	ldr	r0, [pc, #412]	; (8008af4 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8008956:	f7fe fe0f 	bl	8007578 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 800895a:	4865      	ldr	r0, [pc, #404]	; (8008af0 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 800895c:	f00d f94a 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8008960:	4861      	ldr	r0, [pc, #388]	; (8008ae8 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8008962:	f7fe fe4d 	bl	8007600 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8008966:	485f      	ldr	r0, [pc, #380]	; (8008ae4 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8008968:	f00d f944 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 800896c:	485b      	ldr	r0, [pc, #364]	; (8008adc <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800896e:	f7fe fe8b 	bl	8007688 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8008972:	4859      	ldr	r0, [pc, #356]	; (8008ad8 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 8008974:	f00d f93e 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8008978:	4855      	ldr	r0, [pc, #340]	; (8008ad0 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 800897a:	f7fe fec9 	bl	8007710 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 800897e:	4853      	ldr	r0, [pc, #332]	; (8008acc <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 8008980:	f00d f938 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8008984:	484e      	ldr	r0, [pc, #312]	; (8008ac0 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 8008986:	f7fe ff07 	bl	8007798 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 800898a:	484c      	ldr	r0, [pc, #304]	; (8008abc <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800898c:	f00d f932 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8008990:	4849      	ldr	r0, [pc, #292]	; (8008ab8 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 8008992:	f7fe ff45 	bl	8007820 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8008996:	485a      	ldr	r0, [pc, #360]	; (8008b00 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 8008998:	f00d f92c 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 800899c:	4859      	ldr	r0, [pc, #356]	; (8008b04 <_Z41__static_initialization_and_destruction_0ii+0x624>)
 800899e:	f7fe ff83 	bl	80078a8 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 80089a2:	4859      	ldr	r0, [pc, #356]	; (8008b08 <_Z41__static_initialization_and_destruction_0ii+0x628>)
 80089a4:	f00d f926 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 80089a8:	4858      	ldr	r0, [pc, #352]	; (8008b0c <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 80089aa:	f7fe ffc1 	bl	8007930 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Command_Process_Test)
 80089ae:	4858      	ldr	r0, [pc, #352]	; (8008b10 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 80089b0:	f00d f920 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 80089b4:	4857      	ldr	r0, [pc, #348]	; (8008b14 <_Z41__static_initialization_and_destruction_0ii+0x634>)
 80089b6:	f7fe ffff 	bl	80079b8 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80089ba:	4857      	ldr	r0, [pc, #348]	; (8008b18 <_Z41__static_initialization_and_destruction_0ii+0x638>)
 80089bc:	f00d f91a 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 80089c0:	4856      	ldr	r0, [pc, #344]	; (8008b1c <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 80089c2:	f7ff f83d 	bl	8007a40 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80089c6:	4856      	ldr	r0, [pc, #344]	; (8008b20 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 80089c8:	f00d f914 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 80089cc:	4855      	ldr	r0, [pc, #340]	; (8008b24 <_Z41__static_initialization_and_destruction_0ii+0x644>)
 80089ce:	f7ff f87b 	bl	8007ac8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 80089d2:	4855      	ldr	r0, [pc, #340]	; (8008b28 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 80089d4:	f00d f90e 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 80089d8:	4854      	ldr	r0, [pc, #336]	; (8008b2c <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 80089da:	f7ff f8b9 	bl	8007b50 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80089de:	4854      	ldr	r0, [pc, #336]	; (8008b30 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 80089e0:	f00d f908 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 80089e4:	4853      	ldr	r0, [pc, #332]	; (8008b34 <_Z41__static_initialization_and_destruction_0ii+0x654>)
 80089e6:	f7ff f8f7 	bl	8007bd8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80089ea:	4853      	ldr	r0, [pc, #332]	; (8008b38 <_Z41__static_initialization_and_destruction_0ii+0x658>)
 80089ec:	f00d f902 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 80089f0:	4852      	ldr	r0, [pc, #328]	; (8008b3c <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 80089f2:	f7ff f935 	bl	8007c60 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 80089f6:	4852      	ldr	r0, [pc, #328]	; (8008b40 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 80089f8:	f00d f8fc 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 80089fc:	4851      	ldr	r0, [pc, #324]	; (8008b44 <_Z41__static_initialization_and_destruction_0ii+0x664>)
 80089fe:	f7ff f973 	bl	8007ce8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8008a02:	4851      	ldr	r0, [pc, #324]	; (8008b48 <_Z41__static_initialization_and_destruction_0ii+0x668>)
 8008a04:	f00d f8f6 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8008a08:	4850      	ldr	r0, [pc, #320]	; (8008b4c <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 8008a0a:	f7ff f9b1 	bl	8007d70 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8008a0e:	4850      	ldr	r0, [pc, #320]	; (8008b50 <_Z41__static_initialization_and_destruction_0ii+0x670>)
 8008a10:	f00d f8f0 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8008a14:	484f      	ldr	r0, [pc, #316]	; (8008b54 <_Z41__static_initialization_and_destruction_0ii+0x674>)
 8008a16:	f7ff f9ef 	bl	8007df8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8008a1a:	484f      	ldr	r0, [pc, #316]	; (8008b58 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 8008a1c:	f00d f8ea 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8008a20:	484e      	ldr	r0, [pc, #312]	; (8008b5c <_Z41__static_initialization_and_destruction_0ii+0x67c>)
 8008a22:	f7ff fa2d 	bl	8007e80 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8008a26:	484e      	ldr	r0, [pc, #312]	; (8008b60 <_Z41__static_initialization_and_destruction_0ii+0x680>)
 8008a28:	f00d f8e4 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8008a2c:	484d      	ldr	r0, [pc, #308]	; (8008b64 <_Z41__static_initialization_and_destruction_0ii+0x684>)
 8008a2e:	f7ff fa6b 	bl	8007f08 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8008a32:	484d      	ldr	r0, [pc, #308]	; (8008b68 <_Z41__static_initialization_and_destruction_0ii+0x688>)
 8008a34:	f00d f8de 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8008a38:	484c      	ldr	r0, [pc, #304]	; (8008b6c <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 8008a3a:	f7ff faa9 	bl	8007f90 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 8008a3e:	484c      	ldr	r0, [pc, #304]	; (8008b70 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 8008a40:	f00d f8d8 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8008a44:	484b      	ldr	r0, [pc, #300]	; (8008b74 <_Z41__static_initialization_and_destruction_0ii+0x694>)
 8008a46:	f7ff fae7 	bl	8008018 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 8008a4a:	484b      	ldr	r0, [pc, #300]	; (8008b78 <_Z41__static_initialization_and_destruction_0ii+0x698>)
 8008a4c:	f00d f8d2 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8008a50:	484a      	ldr	r0, [pc, #296]	; (8008b7c <_Z41__static_initialization_and_destruction_0ii+0x69c>)
 8008a52:	f7ff fb25 	bl	80080a0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8008a56:	484a      	ldr	r0, [pc, #296]	; (8008b80 <_Z41__static_initialization_and_destruction_0ii+0x6a0>)
 8008a58:	f00d f8cc 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8008a5c:	4849      	ldr	r0, [pc, #292]	; (8008b84 <_Z41__static_initialization_and_destruction_0ii+0x6a4>)
 8008a5e:	f7ff fb63 	bl	8008128 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8008a62:	4849      	ldr	r0, [pc, #292]	; (8008b88 <_Z41__static_initialization_and_destruction_0ii+0x6a8>)
 8008a64:	f00d f8c6 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8008a68:	4848      	ldr	r0, [pc, #288]	; (8008b8c <_Z41__static_initialization_and_destruction_0ii+0x6ac>)
 8008a6a:	f7ff fba1 	bl	80081b0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8008a6e:	4848      	ldr	r0, [pc, #288]	; (8008b90 <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 8008a70:	f00d f8c0 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8008a74:	4847      	ldr	r0, [pc, #284]	; (8008b94 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 8008a76:	f7ff fbdf 	bl	8008238 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 8008a7a:	4847      	ldr	r0, [pc, #284]	; (8008b98 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 8008a7c:	f00d f8ba 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8008a80:	4846      	ldr	r0, [pc, #280]	; (8008b9c <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 8008a82:	f7ff fc1d 	bl	80082c0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8008a86:	4846      	ldr	r0, [pc, #280]	; (8008ba0 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 8008a88:	f00d f8b4 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8008a8c:	4845      	ldr	r0, [pc, #276]	; (8008ba4 <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 8008a8e:	f7ff fc5b 	bl	8008348 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 8008a92:	4845      	ldr	r0, [pc, #276]	; (8008ba8 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 8008a94:	f00d f8ae 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8008a98:	4844      	ldr	r0, [pc, #272]	; (8008bac <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 8008a9a:	f7ff fc99 	bl	80083d0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 8008a9e:	4844      	ldr	r0, [pc, #272]	; (8008bb0 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 8008aa0:	f00d f8a8 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8008aa4:	4843      	ldr	r0, [pc, #268]	; (8008bb4 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 8008aa6:	f7ff fcd7 	bl	8008458 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 8008aaa:	bf00      	nop
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	08025130 	.word	0x08025130
 8008ab8:	20000668 	.word	0x20000668
 8008abc:	20000684 	.word	0x20000684
 8008ac0:	20000688 	.word	0x20000688
 8008ac4:	0802482c 	.word	0x0802482c
 8008ac8:	080252a0 	.word	0x080252a0
 8008acc:	200006a4 	.word	0x200006a4
 8008ad0:	200006a8 	.word	0x200006a8
 8008ad4:	080252b4 	.word	0x080252b4
 8008ad8:	200006c4 	.word	0x200006c4
 8008adc:	200006c8 	.word	0x200006c8
 8008ae0:	080252cc 	.word	0x080252cc
 8008ae4:	200006e4 	.word	0x200006e4
 8008ae8:	200006e8 	.word	0x200006e8
 8008aec:	080252e4 	.word	0x080252e4
 8008af0:	20000704 	.word	0x20000704
 8008af4:	20000708 	.word	0x20000708
 8008af8:	08025304 	.word	0x08025304
 8008afc:	20000724 	.word	0x20000724
 8008b00:	20000664 	.word	0x20000664
 8008b04:	20000648 	.word	0x20000648
 8008b08:	20000644 	.word	0x20000644
 8008b0c:	20000628 	.word	0x20000628
 8008b10:	20000624 	.word	0x20000624
 8008b14:	20000608 	.word	0x20000608
 8008b18:	20000604 	.word	0x20000604
 8008b1c:	200005e8 	.word	0x200005e8
 8008b20:	200005e4 	.word	0x200005e4
 8008b24:	200005c8 	.word	0x200005c8
 8008b28:	200005c4 	.word	0x200005c4
 8008b2c:	200005a8 	.word	0x200005a8
 8008b30:	200005a4 	.word	0x200005a4
 8008b34:	20000588 	.word	0x20000588
 8008b38:	20000584 	.word	0x20000584
 8008b3c:	20000568 	.word	0x20000568
 8008b40:	20000564 	.word	0x20000564
 8008b44:	20000548 	.word	0x20000548
 8008b48:	20000544 	.word	0x20000544
 8008b4c:	20000528 	.word	0x20000528
 8008b50:	20000524 	.word	0x20000524
 8008b54:	20000508 	.word	0x20000508
 8008b58:	20000504 	.word	0x20000504
 8008b5c:	200004e8 	.word	0x200004e8
 8008b60:	200004e4 	.word	0x200004e4
 8008b64:	200004c8 	.word	0x200004c8
 8008b68:	200004c4 	.word	0x200004c4
 8008b6c:	200004a8 	.word	0x200004a8
 8008b70:	2000049c 	.word	0x2000049c
 8008b74:	20000480 	.word	0x20000480
 8008b78:	2000047c 	.word	0x2000047c
 8008b7c:	20000460 	.word	0x20000460
 8008b80:	2000045c 	.word	0x2000045c
 8008b84:	20000440 	.word	0x20000440
 8008b88:	2000043c 	.word	0x2000043c
 8008b8c:	20000420 	.word	0x20000420
 8008b90:	2000041c 	.word	0x2000041c
 8008b94:	20000400 	.word	0x20000400
 8008b98:	200003fc 	.word	0x200003fc
 8008b9c:	200003e0 	.word	0x200003e0
 8008ba0:	200003dc 	.word	0x200003dc
 8008ba4:	200003c0 	.word	0x200003c0
 8008ba8:	200003bc 	.word	0x200003bc
 8008bac:	200003a0 	.word	0x200003a0
 8008bb0:	2000039c 	.word	0x2000039c
 8008bb4:	20000380 	.word	0x20000380

08008bb8 <_GLOBAL__sub_I_rx_buffer>:
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008bc0:	2001      	movs	r0, #1
 8008bc2:	f7ff fc8d 	bl	80084e0 <_Z41__static_initialization_and_destruction_0ii>
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <_GLOBAL__sub_D_rx_buffer>:
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	f7ff fc85 	bl	80084e0 <_Z41__static_initialization_and_destruction_0ii>
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008bde:	f7f8 f9fe 	bl	8000fde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008be2:	f000 f817 	bl	8008c14 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008be6:	f000 f973 	bl	8008ed0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8008bea:	f000 f947 	bl	8008e7c <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 8008bee:	f000 f887 	bl	8008d00 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8008bf2:	f000 f8e3 	bl	8008dbc <_ZL19MX_USART1_UART_Initv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  const char * av_override[] = { "exe","-v" };      // verbose mode
 8008bf6:	4a06      	ldr	r2, [pc, #24]	; (8008c10 <main+0x38>)
 8008bf8:	463b      	mov	r3, r7
 8008bfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008bfe:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8008c02:	463b      	mov	r3, r7
 8008c04:	4619      	mov	r1, r3
 8008c06:	2002      	movs	r0, #2
 8008c08:	f001 f8be 	bl	8009d88 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>
  while (1)
 8008c0c:	e7fe      	b.n	8008c0c <main+0x34>
 8008c0e:	bf00      	nop
 8008c10:	08025324 	.word	0x08025324

08008c14 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b0a8      	sub	sp, #160	; 0xa0
 8008c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008c1a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008c1e:	2238      	movs	r2, #56	; 0x38
 8008c20:	2100      	movs	r1, #0
 8008c22:	4618      	mov	r0, r3
 8008c24:	f018 fe24 	bl	8021870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008c28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	601a      	str	r2, [r3, #0]
 8008c30:	605a      	str	r2, [r3, #4]
 8008c32:	609a      	str	r2, [r3, #8]
 8008c34:	60da      	str	r2, [r3, #12]
 8008c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008c38:	463b      	mov	r3, r7
 8008c3a:	2254      	movs	r2, #84	; 0x54
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f018 fe16 	bl	8021870 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8008c44:	2000      	movs	r0, #0
 8008c46:	f7f8 ff83 	bl	8001b50 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008c4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c52:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008c54:	2302      	movs	r3, #2
 8008c56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8008c60:	2306      	movs	r3, #6
 8008c62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8008c66:	2355      	movs	r3, #85	; 0x55
 8008c68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008c72:	2302      	movs	r3, #2
 8008c74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008c78:	2302      	movs	r3, #2
 8008c7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008c7e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7f9 f818 	bl	8001cb8 <HAL_RCC_OscConfig>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	bf14      	ite	ne
 8008c8e:	2301      	movne	r3, #1
 8008c90:	2300      	moveq	r3, #0
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d001      	beq.n	8008c9c <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8008c98:	f000 f98a 	bl	8008fb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008c9c:	230f      	movs	r3, #15
 8008c9e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008cac:	2300      	movs	r3, #0
 8008cae:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008cb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008cb4:	2104      	movs	r1, #4
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7f9 fb16 	bl	80022e8 <HAL_RCC_ClockConfig>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	bf14      	ite	ne
 8008cc2:	2301      	movne	r3, #1
 8008cc4:	2300      	moveq	r3, #0
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8008ccc:	f000 f970 	bl	8008fb0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8008cd0:	2321      	movs	r3, #33	; 0x21
 8008cd2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008cdc:	463b      	mov	r3, r7
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7f9 fd1e 	bl	8002720 <HAL_RCCEx_PeriphCLKConfig>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	bf14      	ite	ne
 8008cea:	2301      	movne	r3, #1
 8008cec:	2300      	moveq	r3, #0
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <_Z18SystemClock_Configv+0xe4>
  {
    Error_Handler();
 8008cf4:	f000 f95c 	bl	8008fb0 <Error_Handler>
  }
}
 8008cf8:	bf00      	nop
 8008cfa:	37a0      	adds	r7, #160	; 0xa0
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8008d04:	4b2b      	ldr	r3, [pc, #172]	; (8008db4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008d06:	4a2c      	ldr	r2, [pc, #176]	; (8008db8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008d08:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8008d0a:	4b2a      	ldr	r3, [pc, #168]	; (8008db4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008d10:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008d12:	4b28      	ldr	r3, [pc, #160]	; (8008db4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8008d18:	4b26      	ldr	r3, [pc, #152]	; (8008db4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8008d1e:	4b25      	ldr	r3, [pc, #148]	; (8008db4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8008d24:	4b23      	ldr	r3, [pc, #140]	; (8008db4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008d26:	220c      	movs	r2, #12
 8008d28:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008d2a:	4b22      	ldr	r3, [pc, #136]	; (8008db4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008d30:	4b20      	ldr	r3, [pc, #128]	; (8008db4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008d36:	4b1f      	ldr	r3, [pc, #124]	; (8008db4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008d3c:	4b1d      	ldr	r3, [pc, #116]	; (8008db4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008d3e:	2200      	movs	r2, #0
 8008d40:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8008d42:	481c      	ldr	r0, [pc, #112]	; (8008db4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008d44:	f7f9 ff38 	bl	8002bb8 <HAL_UART_Init>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	bf14      	ite	ne
 8008d4e:	2301      	movne	r3, #1
 8008d50:	2300      	moveq	r3, #0
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8008d58:	f000 f92a 	bl	8008fb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	4815      	ldr	r0, [pc, #84]	; (8008db4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008d60:	f7fa febe 	bl	8003ae0 <HAL_UARTEx_SetTxFifoThreshold>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	bf14      	ite	ne
 8008d6a:	2301      	movne	r3, #1
 8008d6c:	2300      	moveq	r3, #0
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d001      	beq.n	8008d78 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8008d74:	f000 f91c 	bl	8008fb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008d78:	2100      	movs	r1, #0
 8008d7a:	480e      	ldr	r0, [pc, #56]	; (8008db4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008d7c:	f7fa feee 	bl	8003b5c <HAL_UARTEx_SetRxFifoThreshold>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	bf14      	ite	ne
 8008d86:	2301      	movne	r3, #1
 8008d88:	2300      	moveq	r3, #0
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d001      	beq.n	8008d94 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8008d90:	f000 f90e 	bl	8008fb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8008d94:	4807      	ldr	r0, [pc, #28]	; (8008db4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008d96:	f7fa fe6a 	bl	8003a6e <HAL_UARTEx_DisableFifoMode>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	bf14      	ite	ne
 8008da0:	2301      	movne	r3, #1
 8008da2:	2300      	moveq	r3, #0
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d001      	beq.n	8008dae <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8008daa:	f000 f901 	bl	8008fb0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8008dae:	bf00      	nop
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	20000728 	.word	0x20000728
 8008db8:	40008000 	.word	0x40008000

08008dbc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008dc0:	4b2c      	ldr	r3, [pc, #176]	; (8008e74 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008dc2:	4a2d      	ldr	r2, [pc, #180]	; (8008e78 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8008dc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008dc6:	4b2b      	ldr	r3, [pc, #172]	; (8008e74 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008dcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008dce:	4b29      	ldr	r3, [pc, #164]	; (8008e74 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008dd4:	4b27      	ldr	r3, [pc, #156]	; (8008e74 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008dda:	4b26      	ldr	r3, [pc, #152]	; (8008e74 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008de0:	4b24      	ldr	r3, [pc, #144]	; (8008e74 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008de2:	220c      	movs	r2, #12
 8008de4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008de6:	4b23      	ldr	r3, [pc, #140]	; (8008e74 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008dec:	4b21      	ldr	r3, [pc, #132]	; (8008e74 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008dee:	2200      	movs	r2, #0
 8008df0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008df2:	4b20      	ldr	r3, [pc, #128]	; (8008e74 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008df8:	4b1e      	ldr	r3, [pc, #120]	; (8008e74 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008dfe:	4b1d      	ldr	r3, [pc, #116]	; (8008e74 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008e00:	2200      	movs	r2, #0
 8008e02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008e04:	481b      	ldr	r0, [pc, #108]	; (8008e74 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008e06:	f7f9 fed7 	bl	8002bb8 <HAL_UART_Init>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	bf14      	ite	ne
 8008e10:	2301      	movne	r3, #1
 8008e12:	2300      	moveq	r3, #0
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d001      	beq.n	8008e1e <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8008e1a:	f000 f8c9 	bl	8008fb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008e1e:	2100      	movs	r1, #0
 8008e20:	4814      	ldr	r0, [pc, #80]	; (8008e74 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008e22:	f7fa fe5d 	bl	8003ae0 <HAL_UARTEx_SetTxFifoThreshold>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	bf14      	ite	ne
 8008e2c:	2301      	movne	r3, #1
 8008e2e:	2300      	moveq	r3, #0
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d001      	beq.n	8008e3a <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8008e36:	f000 f8bb 	bl	8008fb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	480d      	ldr	r0, [pc, #52]	; (8008e74 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008e3e:	f7fa fe8d 	bl	8003b5c <HAL_UARTEx_SetRxFifoThreshold>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	bf14      	ite	ne
 8008e48:	2301      	movne	r3, #1
 8008e4a:	2300      	moveq	r3, #0
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d001      	beq.n	8008e56 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8008e52:	f000 f8ad 	bl	8008fb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008e56:	4807      	ldr	r0, [pc, #28]	; (8008e74 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008e58:	f7fa fe09 	bl	8003a6e <HAL_UARTEx_DisableFifoMode>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	bf14      	ite	ne
 8008e62:	2301      	movne	r3, #1
 8008e64:	2300      	moveq	r3, #0
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8008e6c:	f000 f8a0 	bl	8008fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008e70:	bf00      	nop
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	200007b8 	.word	0x200007b8
 8008e78:	40013800 	.word	0x40013800

08008e7c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8008e82:	4b12      	ldr	r3, [pc, #72]	; (8008ecc <_ZL11MX_DMA_Initv+0x50>)
 8008e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e86:	4a11      	ldr	r2, [pc, #68]	; (8008ecc <_ZL11MX_DMA_Initv+0x50>)
 8008e88:	f043 0304 	orr.w	r3, r3, #4
 8008e8c:	6493      	str	r3, [r2, #72]	; 0x48
 8008e8e:	4b0f      	ldr	r3, [pc, #60]	; (8008ecc <_ZL11MX_DMA_Initv+0x50>)
 8008e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e92:	f003 0304 	and.w	r3, r3, #4
 8008e96:	607b      	str	r3, [r7, #4]
 8008e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008e9a:	4b0c      	ldr	r3, [pc, #48]	; (8008ecc <_ZL11MX_DMA_Initv+0x50>)
 8008e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e9e:	4a0b      	ldr	r2, [pc, #44]	; (8008ecc <_ZL11MX_DMA_Initv+0x50>)
 8008ea0:	f043 0301 	orr.w	r3, r3, #1
 8008ea4:	6493      	str	r3, [r2, #72]	; 0x48
 8008ea6:	4b09      	ldr	r3, [pc, #36]	; (8008ecc <_ZL11MX_DMA_Initv+0x50>)
 8008ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	200b      	movs	r0, #11
 8008eb8:	f7f8 f9dd 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008ebc:	200b      	movs	r0, #11
 8008ebe:	f7f8 f9f4 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 8008ec2:	bf00      	nop
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	40021000 	.word	0x40021000

08008ed0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08a      	sub	sp, #40	; 0x28
 8008ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ed6:	f107 0314 	add.w	r3, r7, #20
 8008eda:	2200      	movs	r2, #0
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	605a      	str	r2, [r3, #4]
 8008ee0:	609a      	str	r2, [r3, #8]
 8008ee2:	60da      	str	r2, [r3, #12]
 8008ee4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ee6:	4b2f      	ldr	r3, [pc, #188]	; (8008fa4 <_ZL12MX_GPIO_Initv+0xd4>)
 8008ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eea:	4a2e      	ldr	r2, [pc, #184]	; (8008fa4 <_ZL12MX_GPIO_Initv+0xd4>)
 8008eec:	f043 0304 	orr.w	r3, r3, #4
 8008ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ef2:	4b2c      	ldr	r3, [pc, #176]	; (8008fa4 <_ZL12MX_GPIO_Initv+0xd4>)
 8008ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ef6:	f003 0304 	and.w	r3, r3, #4
 8008efa:	613b      	str	r3, [r7, #16]
 8008efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008efe:	4b29      	ldr	r3, [pc, #164]	; (8008fa4 <_ZL12MX_GPIO_Initv+0xd4>)
 8008f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f02:	4a28      	ldr	r2, [pc, #160]	; (8008fa4 <_ZL12MX_GPIO_Initv+0xd4>)
 8008f04:	f043 0320 	orr.w	r3, r3, #32
 8008f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f0a:	4b26      	ldr	r3, [pc, #152]	; (8008fa4 <_ZL12MX_GPIO_Initv+0xd4>)
 8008f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f0e:	f003 0320 	and.w	r3, r3, #32
 8008f12:	60fb      	str	r3, [r7, #12]
 8008f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f16:	4b23      	ldr	r3, [pc, #140]	; (8008fa4 <_ZL12MX_GPIO_Initv+0xd4>)
 8008f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f1a:	4a22      	ldr	r2, [pc, #136]	; (8008fa4 <_ZL12MX_GPIO_Initv+0xd4>)
 8008f1c:	f043 0301 	orr.w	r3, r3, #1
 8008f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f22:	4b20      	ldr	r3, [pc, #128]	; (8008fa4 <_ZL12MX_GPIO_Initv+0xd4>)
 8008f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f26:	f003 0301 	and.w	r3, r3, #1
 8008f2a:	60bb      	str	r3, [r7, #8]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f2e:	4b1d      	ldr	r3, [pc, #116]	; (8008fa4 <_ZL12MX_GPIO_Initv+0xd4>)
 8008f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f32:	4a1c      	ldr	r2, [pc, #112]	; (8008fa4 <_ZL12MX_GPIO_Initv+0xd4>)
 8008f34:	f043 0302 	orr.w	r3, r3, #2
 8008f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f3a:	4b1a      	ldr	r3, [pc, #104]	; (8008fa4 <_ZL12MX_GPIO_Initv+0xd4>)
 8008f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	607b      	str	r3, [r7, #4]
 8008f44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008f46:	2200      	movs	r2, #0
 8008f48:	2120      	movs	r1, #32
 8008f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008f4e:	f7f8 fdc3 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008f52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008f58:	4b13      	ldr	r3, [pc, #76]	; (8008fa8 <_ZL12MX_GPIO_Initv+0xd8>)
 8008f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008f60:	f107 0314 	add.w	r3, r7, #20
 8008f64:	4619      	mov	r1, r3
 8008f66:	4811      	ldr	r0, [pc, #68]	; (8008fac <_ZL12MX_GPIO_Initv+0xdc>)
 8008f68:	f7f8 fc34 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8008f6c:	2320      	movs	r3, #32
 8008f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f70:	2301      	movs	r3, #1
 8008f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f74:	2300      	movs	r3, #0
 8008f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008f7c:	f107 0314 	add.w	r3, r7, #20
 8008f80:	4619      	mov	r1, r3
 8008f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008f86:	f7f8 fc25 	bl	80017d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	2028      	movs	r0, #40	; 0x28
 8008f90:	f7f8 f971 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008f94:	2028      	movs	r0, #40	; 0x28
 8008f96:	f7f8 f988 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 8008f9a:	bf00      	nop
 8008f9c:	3728      	adds	r7, #40	; 0x28
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	40021000 	.word	0x40021000
 8008fa8:	10110000 	.word	0x10110000
 8008fac:	48000800 	.word	0x48000800

08008fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008fb4:	b672      	cpsid	i
}
 8008fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008fb8:	e7fe      	b.n	8008fb8 <Error_Handler+0x8>

08008fba <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup5setupEv>:
/* Test functions of the MQTT library-----------------------------------------------------------------------*/

TEST_GROUP(MqttTestGroup)
{

	void setup()
 8008fba:	b480      	push	{r7}
 8008fbc:	b083      	sub	sp, #12
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
	{

	}
 8008fc2:	bf00      	nop
 8008fc4:	370c      	adds	r7, #12
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr

08008fce <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup8teardownEv>:

	void teardown()
 8008fce:	b480      	push	{r7}
 8008fd0:	b083      	sub	sp, #12
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
	{

	}
 8008fd6:	bf00      	nop
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
	...

08008fe4 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>:
TEST_GROUP(MqttTestGroup)
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f00c fb68 	bl	80156c4 <_ZN5UtestC1Ev>
 8008ff4:	4a03      	ldr	r2, [pc, #12]	; (8009004 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev+0x20>)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	601a      	str	r2, [r3, #0]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	08029b90 	.word	0x08029b90

08009008 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>:
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	4a05      	ldr	r2, [pc, #20]	; (8009028 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev+0x20>)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	601a      	str	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4618      	mov	r0, r3
 800901a:	f00c fb63 	bl	80156e4 <_ZN5UtestD1Ev>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4618      	mov	r0, r3
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	08029b90 	.word	0x08029b90

0800902c <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD0Ev>:
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff ffe7 	bl	8009008 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 800903a:	2104      	movs	r1, #4
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f002 fb85 	bl	800b74c <_ZdlPvj>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4618      	mov	r0, r3
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev>:
};

TEST(MqttTestGroup, ConnectPacketTest)
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4618      	mov	r0, r3
 8009058:	f7ff ffc4 	bl	8008fe4 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>
 800905c:	4a03      	ldr	r2, [pc, #12]	; (800906c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev+0x20>)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	08029b70 	.word	0x08029b70

08009070 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShell10createTestEv>:
 8009070:	b590      	push	{r4, r7, lr}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	2222      	movs	r2, #34	; 0x22
 800907a:	4906      	ldr	r1, [pc, #24]	; (8009094 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShell10createTestEv+0x24>)
 800907c:	2004      	movs	r0, #4
 800907e:	f002 fb51 	bl	800b724 <_ZnwjPKci>
 8009082:	4604      	mov	r4, r0
 8009084:	4620      	mov	r0, r4
 8009086:	f7ff ffe1 	bl	800904c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev>
 800908a:	4623      	mov	r3, r4
 800908c:	4618      	mov	r0, r3
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	bd90      	pop	{r4, r7, pc}
 8009094:	0802532c 	.word	0x0802532c

08009098 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev>:
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f00a ff2c 	bl	8013f00 <_ZN10UtestShellC1Ev>
 80090a8:	4a03      	ldr	r2, [pc, #12]	; (80090b8 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev+0x20>)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	601a      	str	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4618      	mov	r0, r3
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	08029ac4 	.word	0x08029ac4

080090bc <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv>:
{
 80090bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090c0:	b0b4      	sub	sp, #208	; 0xd0
 80090c2:	af04      	add	r7, sp, #16
 80090c4:	6078      	str	r0, [r7, #4]
	char clientID[] = "Topuz";
 80090c6:	4ac2      	ldr	r2, [pc, #776]	; (80093d0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x314>)
 80090c8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80090cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80090d0:	6018      	str	r0, [r3, #0]
 80090d2:	3304      	adds	r3, #4
 80090d4:	8019      	strh	r1, [r3, #0]
	uint16_t ClientIDLength = strlen(clientID);
 80090d6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80090da:	4618      	mov	r0, r3
 80090dc:	f7f7 f8ae 	bl	800023c <strlen>
 80090e0:	4603      	mov	r3, r0
 80090e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	uint8_t remainLength = (uint8_t)ClientIDLength + 12;  	// 12 represents the bytes in the packet between remain length and Client ID byte.
 80090e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	330c      	adds	r3, #12
 80090ee:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd

	uint8_t outputStream[100] ={0};							// for serialize
 80090f2:	2300      	movs	r3, #0
 80090f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80090fa:	2260      	movs	r2, #96	; 0x60
 80090fc:	2100      	movs	r1, #0
 80090fe:	4618      	mov	r0, r3
 8009100:	f018 fbb6 	bl	8021870 <memset>

	MQTT_Connect_Packet connectPacket;

	connectPacket.ConnectByte = 0x10;
 8009104:	2310      	movs	r3, #16
 8009106:	733b      	strb	r3, [r7, #12]
	connectPacket.RemainLength = remainLength;
 8009108:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 800910c:	737b      	strb	r3, [r7, #13]
	connectPacket.ProtocolNameLength = 0x0004;
 800910e:	2304      	movs	r3, #4
 8009110:	81fb      	strh	r3, [r7, #14]
	strcpy(connectPacket.ProtocolName,"MQTT");
 8009112:	f107 030c 	add.w	r3, r7, #12
 8009116:	3304      	adds	r3, #4
 8009118:	4aae      	ldr	r2, [pc, #696]	; (80093d4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x318>)
 800911a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800911e:	6018      	str	r0, [r3, #0]
 8009120:	3304      	adds	r3, #4
 8009122:	7019      	strb	r1, [r3, #0]
	connectPacket.Level = 0x04;
 8009124:	2304      	movs	r3, #4
 8009126:	753b      	strb	r3, [r7, #20]
	connectPacket.Flag = 0x02;
 8009128:	2302      	movs	r3, #2
 800912a:	757b      	strb	r3, [r7, #21]
	connectPacket.KeepAlive = 60;
 800912c:	233c      	movs	r3, #60	; 0x3c
 800912e:	82fb      	strh	r3, [r7, #22]
	connectPacket.ClientIDLength = ClientIDLength;
 8009130:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009134:	833b      	strh	r3, [r7, #24]
	strcpy(connectPacket.ClientID,clientID);
 8009136:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800913a:	f107 030c 	add.w	r3, r7, #12
 800913e:	330e      	adds	r3, #14
 8009140:	4611      	mov	r1, r2
 8009142:	4618      	mov	r0, r3
 8009144:	f018 fdad 	bl	8021ca2 <strcpy>

	int32_t status = mqtt_encode_packet(outputStream, &connectPacket, CONNECT_PACKET);
 8009148:	f107 010c 	add.w	r1, r7, #12
 800914c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009150:	2200      	movs	r2, #0
 8009152:	4618      	mov	r0, r3
 8009154:	f7fb f846 	bl	80041e4 <mqtt_encode_packet>
 8009158:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

	LONGS_EQUAL(remainLength+2,status);												// check number of bytes that is written to buffer
 800915c:	f00c fa88 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8009160:	4604      	mov	r4, r0
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	3338      	adds	r3, #56	; 0x38
 8009166:	681d      	ldr	r5, [r3, #0]
 8009168:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 800916c:	1c9e      	adds	r6, r3, #2
 800916e:	f00c fa8f 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009172:	4603      	mov	r3, r0
 8009174:	9302      	str	r3, [sp, #8]
 8009176:	2338      	movs	r3, #56	; 0x38
 8009178:	9301      	str	r3, [sp, #4]
 800917a:	4b97      	ldr	r3, [pc, #604]	; (80093d8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	4b97      	ldr	r3, [pc, #604]	; (80093dc <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x320>)
 8009180:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009184:	4631      	mov	r1, r6
 8009186:	4620      	mov	r0, r4
 8009188:	47a8      	blx	r5
	STRCMP_EQUAL("Topuz",(const char*)&outputStream[status-ClientIDLength]);		// check clientID that is written to buffer
 800918a:	f00c fa71 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 800918e:	4604      	mov	r4, r0
 8009190:	6823      	ldr	r3, [r4, #0]
 8009192:	3324      	adds	r3, #36	; 0x24
 8009194:	681d      	ldr	r5, [r3, #0]
 8009196:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800919a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80091a4:	18d6      	adds	r6, r2, r3
 80091a6:	f00c fa73 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80091aa:	4603      	mov	r3, r0
 80091ac:	9302      	str	r3, [sp, #8]
 80091ae:	2339      	movs	r3, #57	; 0x39
 80091b0:	9301      	str	r3, [sp, #4]
 80091b2:	4b89      	ldr	r3, [pc, #548]	; (80093d8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	2300      	movs	r3, #0
 80091b8:	4632      	mov	r2, r6
 80091ba:	4985      	ldr	r1, [pc, #532]	; (80093d0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x314>)
 80091bc:	4620      	mov	r0, r4
 80091be:	47a8      	blx	r5
	LONGS_EQUAL(0x10,outputStream[0]);												// check connectByte
 80091c0:	f00c fa56 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80091c4:	4604      	mov	r4, r0
 80091c6:	6823      	ldr	r3, [r4, #0]
 80091c8:	3338      	adds	r3, #56	; 0x38
 80091ca:	681d      	ldr	r5, [r3, #0]
 80091cc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80091d0:	461e      	mov	r6, r3
 80091d2:	f00c fa5d 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80091d6:	4603      	mov	r3, r0
 80091d8:	9302      	str	r3, [sp, #8]
 80091da:	233a      	movs	r3, #58	; 0x3a
 80091dc:	9301      	str	r3, [sp, #4]
 80091de:	4b7e      	ldr	r3, [pc, #504]	; (80093d8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	4b7f      	ldr	r3, [pc, #508]	; (80093e0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x324>)
 80091e4:	4632      	mov	r2, r6
 80091e6:	2110      	movs	r1, #16
 80091e8:	4620      	mov	r0, r4
 80091ea:	47a8      	blx	r5
	LONGS_EQUAL(remainLength,outputStream[1]);										// check remainlength
 80091ec:	f00c fa40 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80091f0:	4604      	mov	r4, r0
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	3338      	adds	r3, #56	; 0x38
 80091f6:	681d      	ldr	r5, [r3, #0]
 80091f8:	f897 60bd 	ldrb.w	r6, [r7, #189]	; 0xbd
 80091fc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009200:	4698      	mov	r8, r3
 8009202:	f00c fa45 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009206:	4603      	mov	r3, r0
 8009208:	9302      	str	r3, [sp, #8]
 800920a:	233b      	movs	r3, #59	; 0x3b
 800920c:	9301      	str	r3, [sp, #4]
 800920e:	4b72      	ldr	r3, [pc, #456]	; (80093d8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	4b74      	ldr	r3, [pc, #464]	; (80093e4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x328>)
 8009214:	4642      	mov	r2, r8
 8009216:	4631      	mov	r1, r6
 8009218:	4620      	mov	r0, r4
 800921a:	47a8      	blx	r5
	LONGS_EQUAL(0x0004,(uint16_t)((outputStream[2] << 8) + outputStream[3]));		// check protocol name length
 800921c:	f00c fa28 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8009220:	4604      	mov	r4, r0
 8009222:	6823      	ldr	r3, [r4, #0]
 8009224:	3338      	adds	r3, #56	; 0x38
 8009226:	681d      	ldr	r5, [r3, #0]
 8009228:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800922c:	b29b      	uxth	r3, r3
 800922e:	021b      	lsls	r3, r3, #8
 8009230:	b29a      	uxth	r2, r3
 8009232:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009236:	b29b      	uxth	r3, r3
 8009238:	4413      	add	r3, r2
 800923a:	b29b      	uxth	r3, r3
 800923c:	461e      	mov	r6, r3
 800923e:	f00c fa27 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009242:	4603      	mov	r3, r0
 8009244:	9302      	str	r3, [sp, #8]
 8009246:	233c      	movs	r3, #60	; 0x3c
 8009248:	9301      	str	r3, [sp, #4]
 800924a:	4b63      	ldr	r3, [pc, #396]	; (80093d8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	4b66      	ldr	r3, [pc, #408]	; (80093e8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x32c>)
 8009250:	4632      	mov	r2, r6
 8009252:	2104      	movs	r1, #4
 8009254:	4620      	mov	r0, r4
 8009256:	47a8      	blx	r5
	LONGS_EQUAL('M',outputStream[4]); 												// check protocol name
 8009258:	f00c fa0a 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 800925c:	4604      	mov	r4, r0
 800925e:	6823      	ldr	r3, [r4, #0]
 8009260:	3338      	adds	r3, #56	; 0x38
 8009262:	681d      	ldr	r5, [r3, #0]
 8009264:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8009268:	461e      	mov	r6, r3
 800926a:	f00c fa11 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800926e:	4603      	mov	r3, r0
 8009270:	9302      	str	r3, [sp, #8]
 8009272:	233d      	movs	r3, #61	; 0x3d
 8009274:	9301      	str	r3, [sp, #4]
 8009276:	4b58      	ldr	r3, [pc, #352]	; (80093d8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	4b5c      	ldr	r3, [pc, #368]	; (80093ec <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x330>)
 800927c:	4632      	mov	r2, r6
 800927e:	214d      	movs	r1, #77	; 0x4d
 8009280:	4620      	mov	r0, r4
 8009282:	47a8      	blx	r5
	LONGS_EQUAL('Q',outputStream[5]);
 8009284:	f00c f9f4 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8009288:	4604      	mov	r4, r0
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	3338      	adds	r3, #56	; 0x38
 800928e:	681d      	ldr	r5, [r3, #0]
 8009290:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8009294:	461e      	mov	r6, r3
 8009296:	f00c f9fb 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800929a:	4603      	mov	r3, r0
 800929c:	9302      	str	r3, [sp, #8]
 800929e:	233e      	movs	r3, #62	; 0x3e
 80092a0:	9301      	str	r3, [sp, #4]
 80092a2:	4b4d      	ldr	r3, [pc, #308]	; (80093d8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 80092a4:	9300      	str	r3, [sp, #0]
 80092a6:	4b52      	ldr	r3, [pc, #328]	; (80093f0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x334>)
 80092a8:	4632      	mov	r2, r6
 80092aa:	2151      	movs	r1, #81	; 0x51
 80092ac:	4620      	mov	r0, r4
 80092ae:	47a8      	blx	r5
	LONGS_EQUAL('T',outputStream[6]);
 80092b0:	f00c f9de 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80092b4:	4604      	mov	r4, r0
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	3338      	adds	r3, #56	; 0x38
 80092ba:	681d      	ldr	r5, [r3, #0]
 80092bc:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80092c0:	461e      	mov	r6, r3
 80092c2:	f00c f9e5 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80092c6:	4603      	mov	r3, r0
 80092c8:	9302      	str	r3, [sp, #8]
 80092ca:	233f      	movs	r3, #63	; 0x3f
 80092cc:	9301      	str	r3, [sp, #4]
 80092ce:	4b42      	ldr	r3, [pc, #264]	; (80093d8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	4b48      	ldr	r3, [pc, #288]	; (80093f4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x338>)
 80092d4:	4632      	mov	r2, r6
 80092d6:	2154      	movs	r1, #84	; 0x54
 80092d8:	4620      	mov	r0, r4
 80092da:	47a8      	blx	r5
	LONGS_EQUAL('T',outputStream[7]);
 80092dc:	f00c f9c8 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80092e0:	4604      	mov	r4, r0
 80092e2:	6823      	ldr	r3, [r4, #0]
 80092e4:	3338      	adds	r3, #56	; 0x38
 80092e6:	681d      	ldr	r5, [r3, #0]
 80092e8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80092ec:	461e      	mov	r6, r3
 80092ee:	f00c f9cf 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80092f2:	4603      	mov	r3, r0
 80092f4:	9302      	str	r3, [sp, #8]
 80092f6:	2340      	movs	r3, #64	; 0x40
 80092f8:	9301      	str	r3, [sp, #4]
 80092fa:	4b37      	ldr	r3, [pc, #220]	; (80093d8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	4b3e      	ldr	r3, [pc, #248]	; (80093f8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x33c>)
 8009300:	4632      	mov	r2, r6
 8009302:	2154      	movs	r1, #84	; 0x54
 8009304:	4620      	mov	r0, r4
 8009306:	47a8      	blx	r5
	LONGS_EQUAL(0x04,outputStream[8]);													// check level byte
 8009308:	f00c f9b2 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 800930c:	4604      	mov	r4, r0
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	3338      	adds	r3, #56	; 0x38
 8009312:	681d      	ldr	r5, [r3, #0]
 8009314:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8009318:	461e      	mov	r6, r3
 800931a:	f00c f9b9 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800931e:	4603      	mov	r3, r0
 8009320:	9302      	str	r3, [sp, #8]
 8009322:	2341      	movs	r3, #65	; 0x41
 8009324:	9301      	str	r3, [sp, #4]
 8009326:	4b2c      	ldr	r3, [pc, #176]	; (80093d8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	4b34      	ldr	r3, [pc, #208]	; (80093fc <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x340>)
 800932c:	4632      	mov	r2, r6
 800932e:	2104      	movs	r1, #4
 8009330:	4620      	mov	r0, r4
 8009332:	47a8      	blx	r5
	LONGS_EQUAL(0x02,outputStream[9]);													// check flag byte
 8009334:	f00c f99c 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8009338:	4604      	mov	r4, r0
 800933a:	6823      	ldr	r3, [r4, #0]
 800933c:	3338      	adds	r3, #56	; 0x38
 800933e:	681d      	ldr	r5, [r3, #0]
 8009340:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8009344:	461e      	mov	r6, r3
 8009346:	f00c f9a3 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800934a:	4603      	mov	r3, r0
 800934c:	9302      	str	r3, [sp, #8]
 800934e:	2342      	movs	r3, #66	; 0x42
 8009350:	9301      	str	r3, [sp, #4]
 8009352:	4b21      	ldr	r3, [pc, #132]	; (80093d8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	4b2a      	ldr	r3, [pc, #168]	; (8009400 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x344>)
 8009358:	4632      	mov	r2, r6
 800935a:	2102      	movs	r1, #2
 800935c:	4620      	mov	r0, r4
 800935e:	47a8      	blx	r5
	LONGS_EQUAL((uint16_t)60,(uint16_t)((outputStream[10] << 8) + outputStream[11]));	// check keep alive bytes
 8009360:	f00c f986 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8009364:	4604      	mov	r4, r0
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	3338      	adds	r3, #56	; 0x38
 800936a:	681d      	ldr	r5, [r3, #0]
 800936c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8009370:	b29b      	uxth	r3, r3
 8009372:	021b      	lsls	r3, r3, #8
 8009374:	b29a      	uxth	r2, r3
 8009376:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800937a:	b29b      	uxth	r3, r3
 800937c:	4413      	add	r3, r2
 800937e:	b29b      	uxth	r3, r3
 8009380:	461e      	mov	r6, r3
 8009382:	f00c f985 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009386:	4603      	mov	r3, r0
 8009388:	9302      	str	r3, [sp, #8]
 800938a:	2343      	movs	r3, #67	; 0x43
 800938c:	9301      	str	r3, [sp, #4]
 800938e:	4b12      	ldr	r3, [pc, #72]	; (80093d8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	4b1c      	ldr	r3, [pc, #112]	; (8009404 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x348>)
 8009394:	4632      	mov	r2, r6
 8009396:	213c      	movs	r1, #60	; 0x3c
 8009398:	4620      	mov	r0, r4
 800939a:	47a8      	blx	r5
	LONGS_EQUAL(ClientIDLength,(uint16_t)((outputStream[12] << 8) + outputStream[13]));	// check client id length bytes
 800939c:	f00c f968 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80093a0:	4604      	mov	r4, r0
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	3338      	adds	r3, #56	; 0x38
 80093a6:	681d      	ldr	r5, [r3, #0]
 80093a8:	f8b7 60be 	ldrh.w	r6, [r7, #190]	; 0xbe
 80093ac:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	021b      	lsls	r3, r3, #8
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	4413      	add	r3, r2
 80093be:	b29b      	uxth	r3, r3
 80093c0:	4698      	mov	r8, r3
 80093c2:	f00c f965 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80093c6:	4603      	mov	r3, r0
 80093c8:	9302      	str	r3, [sp, #8]
 80093ca:	2344      	movs	r3, #68	; 0x44
 80093cc:	e01c      	b.n	8009408 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x34c>
 80093ce:	bf00      	nop
 80093d0:	0802537c 	.word	0x0802537c
 80093d4:	08025348 	.word	0x08025348
 80093d8:	0802532c 	.word	0x0802532c
 80093dc:	08025350 	.word	0x08025350
 80093e0:	08025384 	.word	0x08025384
 80093e4:	080253b0 	.word	0x080253b0
 80093e8:	080253e4 	.word	0x080253e4
 80093ec:	08025438 	.word	0x08025438
 80093f0:	08025464 	.word	0x08025464
 80093f4:	08025490 	.word	0x08025490
 80093f8:	080254bc 	.word	0x080254bc
 80093fc:	080254e8 	.word	0x080254e8
 8009400:	08025514 	.word	0x08025514
 8009404:	08025540 	.word	0x08025540
 8009408:	9301      	str	r3, [sp, #4]
 800940a:	4b06      	ldr	r3, [pc, #24]	; (8009424 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x368>)
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	4b06      	ldr	r3, [pc, #24]	; (8009428 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x36c>)
 8009410:	4642      	mov	r2, r8
 8009412:	4631      	mov	r1, r6
 8009414:	4620      	mov	r0, r4
 8009416:	47a8      	blx	r5

}
 8009418:	bf00      	nop
 800941a:	37c0      	adds	r7, #192	; 0xc0
 800941c:	46bd      	mov	sp, r7
 800941e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009422:	bf00      	nop
 8009424:	0802532c 	.word	0x0802532c
 8009428:	0802559c 	.word	0x0802559c

0800942c <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestC1Ev>:


TEST(MqttTestGroup, SubscribePacketTest)
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4618      	mov	r0, r3
 8009438:	f7ff fdd4 	bl	8008fe4 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>
 800943c:	4a03      	ldr	r2, [pc, #12]	; (800944c <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestC1Ev+0x20>)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	601a      	str	r2, [r3, #0]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4618      	mov	r0, r3
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	08029aa4 	.word	0x08029aa4

08009450 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShell10createTestEv>:
 8009450:	b590      	push	{r4, r7, lr}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	2249      	movs	r2, #73	; 0x49
 800945a:	4906      	ldr	r1, [pc, #24]	; (8009474 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShell10createTestEv+0x24>)
 800945c:	2004      	movs	r0, #4
 800945e:	f002 f961 	bl	800b724 <_ZnwjPKci>
 8009462:	4604      	mov	r4, r0
 8009464:	4620      	mov	r0, r4
 8009466:	f7ff ffe1 	bl	800942c <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestC1Ev>
 800946a:	4623      	mov	r3, r4
 800946c:	4618      	mov	r0, r3
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	bd90      	pop	{r4, r7, pc}
 8009474:	0802532c 	.word	0x0802532c

08009478 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellC1Ev>:
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4618      	mov	r0, r3
 8009484:	f00a fd3c 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8009488:	4a03      	ldr	r2, [pc, #12]	; (8009498 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellC1Ev+0x20>)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	601a      	str	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4618      	mov	r0, r3
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	080299f8 	.word	0x080299f8

0800949c <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv>:
{
 800949c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094a0:	b0b6      	sub	sp, #216	; 0xd8
 80094a2:	af04      	add	r7, sp, #16
 80094a4:	6078      	str	r0, [r7, #4]
	char topicName[] = "Testtopic";
 80094a6:	4a8c      	ldr	r2, [pc, #560]	; (80096d8 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x23c>)
 80094a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80094ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80094ae:	c303      	stmia	r3!, {r0, r1}
 80094b0:	801a      	strh	r2, [r3, #0]
	uint16_t topicLength = strlen(topicName);
 80094b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7f6 fec0 	bl	800023c <strlen>
 80094bc:	4603      	mov	r3, r0
 80094be:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
	uint8_t remainLength = (uint8_t)topicLength + 5;
 80094c2:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	3305      	adds	r3, #5
 80094ca:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

	uint8_t outputBuffer[100] = {0};
 80094ce:	2300      	movs	r3, #0
 80094d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80094d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80094d6:	2260      	movs	r2, #96	; 0x60
 80094d8:	2100      	movs	r1, #0
 80094da:	4618      	mov	r0, r3
 80094dc:	f018 f9c8 	bl	8021870 <memset>

	MQTT_Subscribe_Packet subscribePacket;

	subscribePacket.subscribePacketByte = 0x82;
 80094e0:	2382      	movs	r3, #130	; 0x82
 80094e2:	733b      	strb	r3, [r7, #12]
	subscribePacket.remainLength = remainLength;
 80094e4:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80094e8:	737b      	strb	r3, [r7, #13]
	subscribePacket.packetID = 1;
 80094ea:	2301      	movs	r3, #1
 80094ec:	81fb      	strh	r3, [r7, #14]
	subscribePacket.topicLength = topicLength;
 80094ee:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80094f2:	823b      	strh	r3, [r7, #16]
	strcpy(subscribePacket.topic,topicName);
 80094f4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80094f8:	f107 030c 	add.w	r3, r7, #12
 80094fc:	3306      	adds	r3, #6
 80094fe:	4611      	mov	r1, r2
 8009500:	4618      	mov	r0, r3
 8009502:	f018 fbce 	bl	8021ca2 <strcpy>
	subscribePacket.Qos = 0;
 8009506:	2300      	movs	r3, #0
 8009508:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	int32_t numberOfBytes = mqtt_encode_packet(outputBuffer, &subscribePacket, SUBSCRIBE_PACKET);
 800950c:	f107 010c 	add.w	r1, r7, #12
 8009510:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009514:	2201      	movs	r2, #1
 8009516:	4618      	mov	r0, r3
 8009518:	f7fa fe64 	bl	80041e4 <mqtt_encode_packet>
 800951c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

	LONGS_EQUAL(remainLength+2,numberOfBytes);
 8009520:	f00c f8a6 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8009524:	4604      	mov	r4, r0
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	3338      	adds	r3, #56	; 0x38
 800952a:	681d      	ldr	r5, [r3, #0]
 800952c:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8009530:	1c9e      	adds	r6, r3, #2
 8009532:	f00c f8ad 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009536:	4603      	mov	r3, r0
 8009538:	9302      	str	r3, [sp, #8]
 800953a:	235c      	movs	r3, #92	; 0x5c
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	4b67      	ldr	r3, [pc, #412]	; (80096dc <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	4b67      	ldr	r3, [pc, #412]	; (80096e0 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x244>)
 8009544:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009548:	4631      	mov	r1, r6
 800954a:	4620      	mov	r0, r4
 800954c:	47a8      	blx	r5
	LONGS_EQUAL(0x82,outputBuffer[0]);
 800954e:	f00c f88f 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8009552:	4604      	mov	r4, r0
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	3338      	adds	r3, #56	; 0x38
 8009558:	681d      	ldr	r5, [r3, #0]
 800955a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800955e:	461e      	mov	r6, r3
 8009560:	f00c f896 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009564:	4603      	mov	r3, r0
 8009566:	9302      	str	r3, [sp, #8]
 8009568:	235d      	movs	r3, #93	; 0x5d
 800956a:	9301      	str	r3, [sp, #4]
 800956c:	4b5b      	ldr	r3, [pc, #364]	; (80096dc <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	4b5c      	ldr	r3, [pc, #368]	; (80096e4 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x248>)
 8009572:	4632      	mov	r2, r6
 8009574:	2182      	movs	r1, #130	; 0x82
 8009576:	4620      	mov	r0, r4
 8009578:	47a8      	blx	r5
	LONGS_EQUAL(remainLength,outputBuffer[1]);
 800957a:	f00c f879 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 800957e:	4604      	mov	r4, r0
 8009580:	6823      	ldr	r3, [r4, #0]
 8009582:	3338      	adds	r3, #56	; 0x38
 8009584:	681d      	ldr	r5, [r3, #0]
 8009586:	f897 60bf 	ldrb.w	r6, [r7, #191]	; 0xbf
 800958a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800958e:	4698      	mov	r8, r3
 8009590:	f00c f87e 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009594:	4603      	mov	r3, r0
 8009596:	9302      	str	r3, [sp, #8]
 8009598:	235e      	movs	r3, #94	; 0x5e
 800959a:	9301      	str	r3, [sp, #4]
 800959c:	4b4f      	ldr	r3, [pc, #316]	; (80096dc <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	4b51      	ldr	r3, [pc, #324]	; (80096e8 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x24c>)
 80095a2:	4642      	mov	r2, r8
 80095a4:	4631      	mov	r1, r6
 80095a6:	4620      	mov	r0, r4
 80095a8:	47a8      	blx	r5
	LONGS_EQUAL(0x0001,(uint16_t)((outputBuffer[2] << 8) + outputBuffer[3]));
 80095aa:	f00c f861 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80095ae:	4604      	mov	r4, r0
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	3338      	adds	r3, #56	; 0x38
 80095b4:	681d      	ldr	r5, [r3, #0]
 80095b6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	021b      	lsls	r3, r3, #8
 80095be:	b29a      	uxth	r2, r3
 80095c0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	4413      	add	r3, r2
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	461e      	mov	r6, r3
 80095cc:	f00c f860 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80095d0:	4603      	mov	r3, r0
 80095d2:	9302      	str	r3, [sp, #8]
 80095d4:	235f      	movs	r3, #95	; 0x5f
 80095d6:	9301      	str	r3, [sp, #4]
 80095d8:	4b40      	ldr	r3, [pc, #256]	; (80096dc <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	4b43      	ldr	r3, [pc, #268]	; (80096ec <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x250>)
 80095de:	4632      	mov	r2, r6
 80095e0:	2101      	movs	r1, #1
 80095e2:	4620      	mov	r0, r4
 80095e4:	47a8      	blx	r5
	LONGS_EQUAL(topicLength,(uint16_t)((outputBuffer[4] << 8) + outputBuffer[5]));
 80095e6:	f00c f843 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80095ea:	4604      	mov	r4, r0
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	3338      	adds	r3, #56	; 0x38
 80095f0:	681d      	ldr	r5, [r3, #0]
 80095f2:	f8b7 60c0 	ldrh.w	r6, [r7, #192]	; 0xc0
 80095f6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	021b      	lsls	r3, r3, #8
 80095fe:	b29a      	uxth	r2, r3
 8009600:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009604:	b29b      	uxth	r3, r3
 8009606:	4413      	add	r3, r2
 8009608:	b29b      	uxth	r3, r3
 800960a:	4698      	mov	r8, r3
 800960c:	f00c f840 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009610:	4603      	mov	r3, r0
 8009612:	9302      	str	r3, [sp, #8]
 8009614:	2360      	movs	r3, #96	; 0x60
 8009616:	9301      	str	r3, [sp, #4]
 8009618:	4b30      	ldr	r3, [pc, #192]	; (80096dc <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	4b34      	ldr	r3, [pc, #208]	; (80096f0 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x254>)
 800961e:	4642      	mov	r2, r8
 8009620:	4631      	mov	r1, r6
 8009622:	4620      	mov	r0, r4
 8009624:	47a8      	blx	r5

	int32_t index = 6;
 8009626:	2306      	movs	r3, #6
 8009628:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	for(int16_t i=0;i<topicLength;i++)
 800962c:	2300      	movs	r3, #0
 800962e:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8009632:	f9b7 20c2 	ldrsh.w	r2, [r7, #194]	; 0xc2
 8009636:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800963a:	429a      	cmp	r2, r3
 800963c:	da2d      	bge.n	800969a <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x1fe>
	{
		BYTES_EQUAL(topicName[i],outputBuffer[index++]);
 800963e:	f00c f817 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8009642:	4604      	mov	r4, r0
 8009644:	6823      	ldr	r3, [r4, #0]
 8009646:	3338      	adds	r3, #56	; 0x38
 8009648:	681d      	ldr	r5, [r3, #0]
 800964a:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 800964e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8009652:	4413      	add	r3, r2
 8009654:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8009658:	461e      	mov	r6, r3
 800965a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800965e:	1c5a      	adds	r2, r3, #1
 8009660:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009664:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8009668:	4413      	add	r3, r2
 800966a:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 800966e:	4698      	mov	r8, r3
 8009670:	f00c f80e 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009674:	4603      	mov	r3, r0
 8009676:	9302      	str	r3, [sp, #8]
 8009678:	2366      	movs	r3, #102	; 0x66
 800967a:	9301      	str	r3, [sp, #4]
 800967c:	4b17      	ldr	r3, [pc, #92]	; (80096dc <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	4b1c      	ldr	r3, [pc, #112]	; (80096f4 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x258>)
 8009682:	4642      	mov	r2, r8
 8009684:	4631      	mov	r1, r6
 8009686:	4620      	mov	r0, r4
 8009688:	47a8      	blx	r5
	for(int16_t i=0;i<topicLength;i++)
 800968a:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 800968e:	b29b      	uxth	r3, r3
 8009690:	3301      	adds	r3, #1
 8009692:	b29b      	uxth	r3, r3
 8009694:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8009698:	e7cb      	b.n	8009632 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x196>
	}

	LONGS_EQUAL(0,outputBuffer[index]);
 800969a:	f00b ffe9 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 800969e:	4604      	mov	r4, r0
 80096a0:	6823      	ldr	r3, [r4, #0]
 80096a2:	3338      	adds	r3, #56	; 0x38
 80096a4:	681d      	ldr	r5, [r3, #0]
 80096a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80096aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80096ae:	4413      	add	r3, r2
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	461e      	mov	r6, r3
 80096b4:	f00b ffec 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80096b8:	4603      	mov	r3, r0
 80096ba:	9302      	str	r3, [sp, #8]
 80096bc:	2369      	movs	r3, #105	; 0x69
 80096be:	9301      	str	r3, [sp, #4]
 80096c0:	4b06      	ldr	r3, [pc, #24]	; (80096dc <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	4b0c      	ldr	r3, [pc, #48]	; (80096f8 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x25c>)
 80096c6:	4632      	mov	r2, r6
 80096c8:	2100      	movs	r1, #0
 80096ca:	4620      	mov	r0, r4
 80096cc:	47a8      	blx	r5


}
 80096ce:	bf00      	nop
 80096d0:	37c8      	adds	r7, #200	; 0xc8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d8:	080257b0 	.word	0x080257b0
 80096dc:	0802532c 	.word	0x0802532c
 80096e0:	080255f8 	.word	0x080255f8
 80096e4:	0802562c 	.word	0x0802562c
 80096e8:	08025658 	.word	0x08025658
 80096ec:	0802568c 	.word	0x0802568c
 80096f0:	080256e0 	.word	0x080256e0
 80096f4:	08025738 	.word	0x08025738
 80096f8:	08025784 	.word	0x08025784

080096fc <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestC1Ev>:

TEST(MqttTestGroup, PublishPacketTest)
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4618      	mov	r0, r3
 8009708:	f7ff fc6c 	bl	8008fe4 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>
 800970c:	4a03      	ldr	r2, [pc, #12]	; (800971c <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestC1Ev+0x20>)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	601a      	str	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4618      	mov	r0, r3
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	080299d8 	.word	0x080299d8

08009720 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShell10createTestEv>:
 8009720:	b590      	push	{r4, r7, lr}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	226e      	movs	r2, #110	; 0x6e
 800972a:	4906      	ldr	r1, [pc, #24]	; (8009744 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShell10createTestEv+0x24>)
 800972c:	2004      	movs	r0, #4
 800972e:	f001 fff9 	bl	800b724 <_ZnwjPKci>
 8009732:	4604      	mov	r4, r0
 8009734:	4620      	mov	r0, r4
 8009736:	f7ff ffe1 	bl	80096fc <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestC1Ev>
 800973a:	4623      	mov	r3, r4
 800973c:	4618      	mov	r0, r3
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	bd90      	pop	{r4, r7, pc}
 8009744:	0802532c 	.word	0x0802532c

08009748 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellC1Ev>:
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4618      	mov	r0, r3
 8009754:	f00a fbd4 	bl	8013f00 <_ZN10UtestShellC1Ev>
 8009758:	4a03      	ldr	r2, [pc, #12]	; (8009768 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellC1Ev+0x20>)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4618      	mov	r0, r3
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	0802992c 	.word	0x0802992c

0800976c <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv>:
{
 800976c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009770:	b0d2      	sub	sp, #328	; 0x148
 8009772:	af04      	add	r7, sp, #16
 8009774:	1d3b      	adds	r3, r7, #4
 8009776:	6018      	str	r0, [r3, #0]
	char topicName[] = "Testtopic";
 8009778:	4a9e      	ldr	r2, [pc, #632]	; (80099f4 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x288>)
 800977a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800977e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009780:	c303      	stmia	r3!, {r0, r1}
 8009782:	801a      	strh	r2, [r3, #0]
	char message[] = "hello world!";
 8009784:	4b9c      	ldr	r3, [pc, #624]	; (80099f8 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x28c>)
 8009786:	f507 7484 	add.w	r4, r7, #264	; 0x108
 800978a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800978c:	c407      	stmia	r4!, {r0, r1, r2}
 800978e:	7023      	strb	r3, [r4, #0]

	uint16_t topicLength = strlen(topicName);
 8009790:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009794:	4618      	mov	r0, r3
 8009796:	f7f6 fd51 	bl	800023c <strlen>
 800979a:	4603      	mov	r3, r0
 800979c:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
	uint16_t messageLength = strlen(message);
 80097a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7f6 fd49 	bl	800023c <strlen>
 80097aa:	4603      	mov	r3, r0
 80097ac:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
	uint8_t remainLength = (uint8_t)topicLength+ (uint8_t)messageLength;
 80097b0:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	4413      	add	r3, r2
 80097be:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b

	uint8_t outputBuffer[100] = {0};
 80097c2:	2300      	movs	r3, #0
 80097c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80097c8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80097cc:	2260      	movs	r2, #96	; 0x60
 80097ce:	2100      	movs	r1, #0
 80097d0:	4618      	mov	r0, r3
 80097d2:	f018 f84d 	bl	8021870 <memset>

	MQTT_Publish_Packet publishPacket = {0};
 80097d6:	f107 0308 	add.w	r3, r7, #8
 80097da:	4618      	mov	r0, r3
 80097dc:	239a      	movs	r3, #154	; 0x9a
 80097de:	461a      	mov	r2, r3
 80097e0:	2100      	movs	r1, #0
 80097e2:	f018 f845 	bl	8021870 <memset>

	publishPacket.publishPacketByte = 0x30;
 80097e6:	f107 0308 	add.w	r3, r7, #8
 80097ea:	2230      	movs	r2, #48	; 0x30
 80097ec:	701a      	strb	r2, [r3, #0]
	publishPacket.remainLength = remainLength;
 80097ee:	f107 0308 	add.w	r3, r7, #8
 80097f2:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80097f6:	705a      	strb	r2, [r3, #1]
	publishPacket.topicLength = topicLength;
 80097f8:	f107 0308 	add.w	r3, r7, #8
 80097fc:	f8b7 212e 	ldrh.w	r2, [r7, #302]	; 0x12e
 8009800:	805a      	strh	r2, [r3, #2]
	strcpy(publishPacket.topic,topicName);
 8009802:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8009806:	f107 0308 	add.w	r3, r7, #8
 800980a:	3304      	adds	r3, #4
 800980c:	4611      	mov	r1, r2
 800980e:	4618      	mov	r0, r3
 8009810:	f018 fa47 	bl	8021ca2 <strcpy>
	strcpy(publishPacket.message,message);
 8009814:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8009818:	f107 0308 	add.w	r3, r7, #8
 800981c:	3336      	adds	r3, #54	; 0x36
 800981e:	4611      	mov	r1, r2
 8009820:	4618      	mov	r0, r3
 8009822:	f018 fa3e 	bl	8021ca2 <strcpy>

	int32_t numberOfBytes = mqtt_encode_packet(outputBuffer, &publishPacket, PUBLISH_PACKET);
 8009826:	f107 0108 	add.w	r1, r7, #8
 800982a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800982e:	2202      	movs	r2, #2
 8009830:	4618      	mov	r0, r3
 8009832:	f7fa fcd7 	bl	80041e4 <mqtt_encode_packet>
 8009836:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124

	LONGS_EQUAL(remainLength+2,numberOfBytes);
 800983a:	f00b ff19 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 800983e:	4604      	mov	r4, r0
 8009840:	6823      	ldr	r3, [r4, #0]
 8009842:	3338      	adds	r3, #56	; 0x38
 8009844:	681d      	ldr	r5, [r3, #0]
 8009846:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800984a:	1c9e      	adds	r6, r3, #2
 800984c:	f00b ff20 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009850:	4603      	mov	r3, r0
 8009852:	9302      	str	r3, [sp, #8]
 8009854:	2383      	movs	r3, #131	; 0x83
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	4b68      	ldr	r3, [pc, #416]	; (80099fc <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x290>)
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	4b68      	ldr	r3, [pc, #416]	; (8009a00 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 800985e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8009862:	4631      	mov	r1, r6
 8009864:	4620      	mov	r0, r4
 8009866:	47a8      	blx	r5
	LONGS_EQUAL(0x30,outputBuffer[0]);
 8009868:	f00b ff02 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 800986c:	4604      	mov	r4, r0
 800986e:	6823      	ldr	r3, [r4, #0]
 8009870:	3338      	adds	r3, #56	; 0x38
 8009872:	681d      	ldr	r5, [r3, #0]
 8009874:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8009878:	461e      	mov	r6, r3
 800987a:	f00b ff09 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800987e:	4603      	mov	r3, r0
 8009880:	9302      	str	r3, [sp, #8]
 8009882:	2384      	movs	r3, #132	; 0x84
 8009884:	9301      	str	r3, [sp, #4]
 8009886:	4b5d      	ldr	r3, [pc, #372]	; (80099fc <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x290>)
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	4b5e      	ldr	r3, [pc, #376]	; (8009a04 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x298>)
 800988c:	4632      	mov	r2, r6
 800988e:	2130      	movs	r1, #48	; 0x30
 8009890:	4620      	mov	r0, r4
 8009892:	47a8      	blx	r5
	LONGS_EQUAL(remainLength,outputBuffer[1]);
 8009894:	f00b feec 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8009898:	4604      	mov	r4, r0
 800989a:	6823      	ldr	r3, [r4, #0]
 800989c:	3338      	adds	r3, #56	; 0x38
 800989e:	681d      	ldr	r5, [r3, #0]
 80098a0:	f897 612b 	ldrb.w	r6, [r7, #299]	; 0x12b
 80098a4:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80098a8:	4698      	mov	r8, r3
 80098aa:	f00b fef1 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80098ae:	4603      	mov	r3, r0
 80098b0:	9302      	str	r3, [sp, #8]
 80098b2:	2385      	movs	r3, #133	; 0x85
 80098b4:	9301      	str	r3, [sp, #4]
 80098b6:	4b51      	ldr	r3, [pc, #324]	; (80099fc <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x290>)
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	4b53      	ldr	r3, [pc, #332]	; (8009a08 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x29c>)
 80098bc:	4642      	mov	r2, r8
 80098be:	4631      	mov	r1, r6
 80098c0:	4620      	mov	r0, r4
 80098c2:	47a8      	blx	r5
	LONGS_EQUAL(topicLength,(uint16_t)((outputBuffer[2] << 8) + outputBuffer[3]));
 80098c4:	f00b fed4 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80098c8:	4604      	mov	r4, r0
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	3338      	adds	r3, #56	; 0x38
 80098ce:	681d      	ldr	r5, [r3, #0]
 80098d0:	f8b7 612e 	ldrh.w	r6, [r7, #302]	; 0x12e
 80098d4:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80098d8:	b29b      	uxth	r3, r3
 80098da:	021b      	lsls	r3, r3, #8
 80098dc:	b29a      	uxth	r2, r3
 80098de:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	4413      	add	r3, r2
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	4698      	mov	r8, r3
 80098ea:	f00b fed1 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80098ee:	4603      	mov	r3, r0
 80098f0:	9302      	str	r3, [sp, #8]
 80098f2:	2386      	movs	r3, #134	; 0x86
 80098f4:	9301      	str	r3, [sp, #4]
 80098f6:	4b41      	ldr	r3, [pc, #260]	; (80099fc <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x290>)
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	4b44      	ldr	r3, [pc, #272]	; (8009a0c <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x2a0>)
 80098fc:	4642      	mov	r2, r8
 80098fe:	4631      	mov	r1, r6
 8009900:	4620      	mov	r0, r4
 8009902:	47a8      	blx	r5

	int32_t index = 4;
 8009904:	2304      	movs	r3, #4
 8009906:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

	for(int16_t i=0;i<topicLength;i++)
 800990a:	2300      	movs	r3, #0
 800990c:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
 8009910:	f9b7 2132 	ldrsh.w	r2, [r7, #306]	; 0x132
 8009914:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8009918:	429a      	cmp	r2, r3
 800991a:	da2d      	bge.n	8009978 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x20c>
	{
		BYTES_EQUAL(topicName[i],outputBuffer[index++]);
 800991c:	f00b fea8 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8009920:	4604      	mov	r4, r0
 8009922:	6823      	ldr	r3, [r4, #0]
 8009924:	3338      	adds	r3, #56	; 0x38
 8009926:	681d      	ldr	r5, [r3, #0]
 8009928:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 800992c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009930:	4413      	add	r3, r2
 8009932:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8009936:	461e      	mov	r6, r3
 8009938:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800993c:	1c5a      	adds	r2, r3, #1
 800993e:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8009942:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009946:	4413      	add	r3, r2
 8009948:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 800994c:	4698      	mov	r8, r3
 800994e:	f00b fe9f 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009952:	4603      	mov	r3, r0
 8009954:	9302      	str	r3, [sp, #8]
 8009956:	238c      	movs	r3, #140	; 0x8c
 8009958:	9301      	str	r3, [sp, #4]
 800995a:	4b28      	ldr	r3, [pc, #160]	; (80099fc <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x290>)
 800995c:	9300      	str	r3, [sp, #0]
 800995e:	4b2c      	ldr	r3, [pc, #176]	; (8009a10 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x2a4>)
 8009960:	4642      	mov	r2, r8
 8009962:	4631      	mov	r1, r6
 8009964:	4620      	mov	r0, r4
 8009966:	47a8      	blx	r5
	for(int16_t i=0;i<topicLength;i++)
 8009968:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 800996c:	b29b      	uxth	r3, r3
 800996e:	3301      	adds	r3, #1
 8009970:	b29b      	uxth	r3, r3
 8009972:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
 8009976:	e7cb      	b.n	8009910 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x1a4>
	}

	for(int16_t i=0;i<messageLength;i++)
 8009978:	2300      	movs	r3, #0
 800997a:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
 800997e:	f9b7 2130 	ldrsh.w	r2, [r7, #304]	; 0x130
 8009982:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8009986:	429a      	cmp	r2, r3
 8009988:	da2d      	bge.n	80099e6 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x27a>
	{
		BYTES_EQUAL(message[i],outputBuffer[index++]);
 800998a:	f00b fe71 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 800998e:	4604      	mov	r4, r0
 8009990:	6823      	ldr	r3, [r4, #0]
 8009992:	3338      	adds	r3, #56	; 0x38
 8009994:	681d      	ldr	r5, [r3, #0]
 8009996:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 800999a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800999e:	4413      	add	r3, r2
 80099a0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80099a4:	461e      	mov	r6, r3
 80099a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80099aa:	1c5a      	adds	r2, r3, #1
 80099ac:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80099b0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80099b4:	4413      	add	r3, r2
 80099b6:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 80099ba:	4698      	mov	r8, r3
 80099bc:	f00b fe68 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80099c0:	4603      	mov	r3, r0
 80099c2:	9302      	str	r3, [sp, #8]
 80099c4:	2391      	movs	r3, #145	; 0x91
 80099c6:	9301      	str	r3, [sp, #4]
 80099c8:	4b0c      	ldr	r3, [pc, #48]	; (80099fc <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x290>)
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	4b11      	ldr	r3, [pc, #68]	; (8009a14 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x2a8>)
 80099ce:	4642      	mov	r2, r8
 80099d0:	4631      	mov	r1, r6
 80099d2:	4620      	mov	r0, r4
 80099d4:	47a8      	blx	r5
	for(int16_t i=0;i<messageLength;i++)
 80099d6:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 80099da:	b29b      	uxth	r3, r3
 80099dc:	3301      	adds	r3, #1
 80099de:	b29b      	uxth	r3, r3
 80099e0:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
 80099e4:	e7cb      	b.n	800997e <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x212>
	}


}
 80099e6:	bf00      	nop
 80099e8:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80099ec:	46bd      	mov	sp, r7
 80099ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f2:	bf00      	nop
 80099f4:	080257b0 	.word	0x080257b0
 80099f8:	08025888 	.word	0x08025888
 80099fc:	0802532c 	.word	0x0802532c
 8009a00:	080255f8 	.word	0x080255f8
 8009a04:	080257bc 	.word	0x080257bc
 8009a08:	08025658 	.word	0x08025658
 8009a0c:	080257e8 	.word	0x080257e8
 8009a10:	08025738 	.word	0x08025738
 8009a14:	08025840 	.word	0x08025840

08009a18 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD1Ev>:
TEST(MqttTestGroup, PublishPacketTest)
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	4a05      	ldr	r2, [pc, #20]	; (8009a38 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD1Ev+0x20>)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	601a      	str	r2, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f00a fabd 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4618      	mov	r0, r3
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	0802992c 	.word	0x0802992c

08009a3c <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD0Ev>:
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7ff ffe7 	bl	8009a18 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD1Ev>
 8009a4a:	211c      	movs	r1, #28
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f001 fe7d 	bl	800b74c <_ZdlPvj>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4618      	mov	r0, r3
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestD1Ev>:
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	4a05      	ldr	r2, [pc, #20]	; (8009a7c <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestD1Ev+0x20>)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	601a      	str	r2, [r3, #0]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7ff facb 	bl	8009008 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4618      	mov	r0, r3
 8009a76:	3708      	adds	r7, #8
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	080299d8 	.word	0x080299d8

08009a80 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestD0Ev>:
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f7ff ffe7 	bl	8009a5c <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestD1Ev>
 8009a8e:	2104      	movs	r1, #4
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f001 fe5b 	bl	800b74c <_ZdlPvj>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3708      	adds	r7, #8
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD1Ev>:
TEST(MqttTestGroup, SubscribePacketTest)
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	4a05      	ldr	r2, [pc, #20]	; (8009ac0 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD1Ev+0x20>)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f00a fa79 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	080299f8 	.word	0x080299f8

08009ac4 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD0Ev>:
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7ff ffe7 	bl	8009aa0 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD1Ev>
 8009ad2:	211c      	movs	r1, #28
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f001 fe39 	bl	800b74c <_ZdlPvj>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4618      	mov	r0, r3
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestD1Ev>:
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	4a05      	ldr	r2, [pc, #20]	; (8009b04 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestD1Ev+0x20>)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	601a      	str	r2, [r3, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7ff fa87 	bl	8009008 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4618      	mov	r0, r3
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	08029aa4 	.word	0x08029aa4

08009b08 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestD0Ev>:
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f7ff ffe7 	bl	8009ae4 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestD1Ev>
 8009b16:	2104      	movs	r1, #4
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f001 fe17 	bl	800b74c <_ZdlPvj>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4618      	mov	r0, r3
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>:
TEST(MqttTestGroup, ConnectPacketTest)
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	4a05      	ldr	r2, [pc, #20]	; (8009b48 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev+0x20>)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	601a      	str	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f00a fa35 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4618      	mov	r0, r3
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	08029ac4 	.word	0x08029ac4

08009b4c <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD0Ev>:
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f7ff ffe7 	bl	8009b28 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>
 8009b5a:	211c      	movs	r1, #28
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f001 fdf5 	bl	800b74c <_ZdlPvj>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4618      	mov	r0, r3
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev>:
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	4a05      	ldr	r2, [pc, #20]	; (8009b8c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev+0x20>)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	601a      	str	r2, [r3, #0]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7ff fa43 	bl	8009008 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4618      	mov	r0, r3
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	08029b70 	.word	0x08029b70

08009b90 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD0Ev>:
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f7ff ffe7 	bl	8009b6c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev>
 8009b9e:	2104      	movs	r1, #4
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f001 fdd3 	bl	800b74c <_ZdlPvj>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3708      	adds	r7, #8
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <_Z41__static_initialization_and_destruction_0ii>:
}
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af02      	add	r7, sp, #8
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d12b      	bne.n	8009c18 <_Z41__static_initialization_and_destruction_0ii+0x68>
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d126      	bne.n	8009c18 <_Z41__static_initialization_and_destruction_0ii+0x68>
TEST(MqttTestGroup, ConnectPacketTest)
 8009bca:	4822      	ldr	r0, [pc, #136]	; (8009c54 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009bcc:	f7ff fa64 	bl	8009098 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev>
 8009bd0:	2322      	movs	r3, #34	; 0x22
 8009bd2:	9301      	str	r3, [sp, #4]
 8009bd4:	4b20      	ldr	r3, [pc, #128]	; (8009c58 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009bd6:	9300      	str	r3, [sp, #0]
 8009bd8:	4b20      	ldr	r3, [pc, #128]	; (8009c5c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009bda:	4a21      	ldr	r2, [pc, #132]	; (8009c60 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009bdc:	491d      	ldr	r1, [pc, #116]	; (8009c54 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009bde:	4821      	ldr	r0, [pc, #132]	; (8009c64 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009be0:	f00b ffde 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(MqttTestGroup, SubscribePacketTest)
 8009be4:	4820      	ldr	r0, [pc, #128]	; (8009c68 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009be6:	f7ff fc47 	bl	8009478 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellC1Ev>
 8009bea:	2349      	movs	r3, #73	; 0x49
 8009bec:	9301      	str	r3, [sp, #4]
 8009bee:	4b1a      	ldr	r3, [pc, #104]	; (8009c58 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	4b1e      	ldr	r3, [pc, #120]	; (8009c6c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009bf4:	4a1a      	ldr	r2, [pc, #104]	; (8009c60 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009bf6:	491c      	ldr	r1, [pc, #112]	; (8009c68 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009bf8:	481d      	ldr	r0, [pc, #116]	; (8009c70 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009bfa:	f00b ffd1 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(MqttTestGroup, PublishPacketTest)
 8009bfe:	481d      	ldr	r0, [pc, #116]	; (8009c74 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009c00:	f7ff fda2 	bl	8009748 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellC1Ev>
 8009c04:	236e      	movs	r3, #110	; 0x6e
 8009c06:	9301      	str	r3, [sp, #4]
 8009c08:	4b13      	ldr	r3, [pc, #76]	; (8009c58 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	4b1a      	ldr	r3, [pc, #104]	; (8009c78 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009c0e:	4a14      	ldr	r2, [pc, #80]	; (8009c60 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009c10:	4918      	ldr	r1, [pc, #96]	; (8009c74 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009c12:	481a      	ldr	r0, [pc, #104]	; (8009c7c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009c14:	f00b ffc4 	bl	8015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d116      	bne.n	8009c4c <_Z41__static_initialization_and_destruction_0ii+0x9c>
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d111      	bne.n	8009c4c <_Z41__static_initialization_and_destruction_0ii+0x9c>
 8009c28:	4814      	ldr	r0, [pc, #80]	; (8009c7c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009c2a:	f00b ffe3 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8009c2e:	4811      	ldr	r0, [pc, #68]	; (8009c74 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009c30:	f7ff fef2 	bl	8009a18 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD1Ev>
TEST(MqttTestGroup, SubscribePacketTest)
 8009c34:	480e      	ldr	r0, [pc, #56]	; (8009c70 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009c36:	f00b ffdd 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8009c3a:	480b      	ldr	r0, [pc, #44]	; (8009c68 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009c3c:	f7ff ff30 	bl	8009aa0 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD1Ev>
TEST(MqttTestGroup, ConnectPacketTest)
 8009c40:	4808      	ldr	r0, [pc, #32]	; (8009c64 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009c42:	f00b ffd7 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8009c46:	4803      	ldr	r0, [pc, #12]	; (8009c54 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009c48:	f7ff ff6e 	bl	8009b28 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>
}
 8009c4c:	bf00      	nop
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	200008a8 	.word	0x200008a8
 8009c58:	0802532c 	.word	0x0802532c
 8009c5c:	08025898 	.word	0x08025898
 8009c60:	080258ac 	.word	0x080258ac
 8009c64:	200008c4 	.word	0x200008c4
 8009c68:	200008c8 	.word	0x200008c8
 8009c6c:	080258bc 	.word	0x080258bc
 8009c70:	200008e4 	.word	0x200008e4
 8009c74:	200008e8 	.word	0x200008e8
 8009c78:	080258d0 	.word	0x080258d0
 8009c7c:	20000904 	.word	0x20000904

08009c80 <_GLOBAL__sub_I_externTestGroupMqttTestGroup>:
 8009c80:	b580      	push	{r7, lr}
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009c88:	2001      	movs	r0, #1
 8009c8a:	f7ff ff91 	bl	8009bb0 <_Z41__static_initialization_and_destruction_0ii>
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <_GLOBAL__sub_D_externTestGroupMqttTestGroup>:
 8009c90:	b580      	push	{r7, lr}
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009c98:	2000      	movs	r0, #0
 8009c9a:	f7ff ff89 	bl	8009bb0 <_Z41__static_initialization_and_destruction_0ii>
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68db      	ldr	r3, [r3, #12]
    }
 8009cac:	4618      	mov	r0, r3
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	69db      	ldr	r3, [r3, #28]
    }
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	695b      	ldr	r3, [r3, #20]
    }
 8009cdc:	4618      	mov	r0, r3
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 8009ce8:	b590      	push	{r4, r7, lr}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f7ff ffed 	bl	8009cd0 <_ZNK10TestResult15getFailureCountEv>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10a      	bne.n	8009d12 <_ZNK10TestResult9isFailureEv+0x2a>
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f7ff ffcf 	bl	8009ca0 <_ZNK10TestResult11getRunCountEv>
 8009d02:	4604      	mov	r4, r0
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f7ff ffd7 	bl	8009cb8 <_ZNK10TestResult15getIgnoredCountEv>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	4423      	add	r3, r4
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d101      	bne.n	8009d16 <_ZNK10TestResult9isFailureEv+0x2e>
 8009d12:	2301      	movs	r3, #1
 8009d14:	e000      	b.n	8009d18 <_ZNK10TestResult9isFailureEv+0x30>
 8009d16:	2300      	movs	r3, #0
    }
 8009d18:	4618      	mov	r0, r3
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd90      	pop	{r4, r7, pc}

08009d20 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
    {
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f007 fde6 	bl	80118fc <_ZN10TestOutputC1Ev>
 8009d30:	4a03      	ldr	r2, [pc, #12]	; (8009d40 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	601a      	str	r2, [r3, #0]
    }
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	0802a224 	.word	0x0802a224

08009d44 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
    {
 8009d4c:	4a05      	ldr	r2, [pc, #20]	; (8009d64 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	601a      	str	r2, [r3, #0]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4618      	mov	r0, r3
 8009d56:	f007 fdef 	bl	8011938 <_ZN10TestOutputD1Ev>
    }
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	0802a224 	.word	0x0802a224

08009d68 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
    }
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f7ff ffe7 	bl	8009d44 <_ZN17ConsoleTestOutputD1Ev>
 8009d76:	2110      	movs	r1, #16
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f001 fce7 	bl	800b74c <_ZdlPvj>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4618      	mov	r0, r3
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8009d88:	b5b0      	push	{r4, r5, r7, lr}
 8009d8a:	b098      	sub	sp, #96	; 0x60
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
    int result = 0;
 8009d92:	2300      	movs	r3, #0
 8009d94:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 8009d96:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7ff ffc0 	bl	8009d20 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8009da0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009da4:	4935      	ldr	r1, [pc, #212]	; (8009e7c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8009da6:	4618      	mov	r0, r3
 8009da8:	f004 f87f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8009dac:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8009db0:	f107 0318 	add.w	r3, r7, #24
 8009db4:	2200      	movs	r2, #0
 8009db6:	4618      	mov	r0, r3
 8009db8:	f001 ff6a 	bl	800bc90 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 8009dbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f004 fc2a 	bl	800e61a <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 8009dc6:	f107 0318 	add.w	r3, r7, #24
 8009dca:	2101      	movs	r1, #1
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f001 ff2f 	bl	800bc30 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 8009dd2:	f009 fb21 	bl	8013418 <_ZN12TestRegistry18getCurrentRegistryEv>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	3234      	adds	r2, #52	; 0x34
 8009ddc:	6812      	ldr	r2, [r2, #0]
 8009dde:	f107 0118 	add.w	r1, r7, #24
 8009de2:	4618      	mov	r0, r3
 8009de4:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8009de6:	f009 fb17 	bl	8013418 <_ZN12TestRegistry18getCurrentRegistryEv>
 8009dea:	4603      	mov	r3, r0
 8009dec:	f107 0008 	add.w	r0, r7, #8
 8009df0:	683a      	ldr	r2, [r7, #0]
 8009df2:	6879      	ldr	r1, [r7, #4]
 8009df4:	f000 f844 	bl	8009e80 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 8009df8:	f107 0308 	add.w	r3, r7, #8
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f000 f899 	bl	8009f34 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 8009e02:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8009e04:	f107 0308 	add.w	r3, r7, #8
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f000 f863 	bl	8009ed4 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 8009e0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d10c      	bne.n	8009e2e <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8009e14:	f107 0318 	add.w	r3, r7, #24
 8009e18:	2100      	movs	r1, #0
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f002 f83a 	bl	800be94 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8009e20:	4602      	mov	r2, r0
 8009e22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009e26:	4611      	mov	r1, r2
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f007 fe27 	bl	8011a7c <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 8009e2e:	f009 faf3 	bl	8013418 <_ZN12TestRegistry18getCurrentRegistryEv>
 8009e32:	4604      	mov	r4, r0
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	3344      	adds	r3, #68	; 0x44
 8009e38:	681d      	ldr	r5, [r3, #0]
 8009e3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009e3e:	490f      	ldr	r1, [pc, #60]	; (8009e7c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8009e40:	4618      	mov	r0, r3
 8009e42:	f004 f832 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8009e46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	47a8      	blx	r5
 8009e50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009e54:	4618      	mov	r0, r3
 8009e56:	f004 fbe0 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return result;
 8009e5a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8009e5c:	f107 0318 	add.w	r3, r7, #24
 8009e60:	4618      	mov	r0, r3
 8009e62:	f001 ff4d 	bl	800bd00 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 8009e66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7ff ff6a 	bl	8009d44 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8009e70:	4623      	mov	r3, r4
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3760      	adds	r7, #96	; 0x60
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bdb0      	pop	{r4, r5, r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	080258e4 	.word	0x080258e4

08009e80 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8009e80:	b590      	push	{r4, r7, lr}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
 8009e8c:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 8009e8e:	4a0f      	ldr	r2, [pc, #60]	; (8009ecc <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	601a      	str	r2, [r3, #0]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	605a      	str	r2, [r3, #4]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	609a      	str	r2, [r3, #8]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 8009ea6:	2241      	movs	r2, #65	; 0x41
 8009ea8:	4909      	ldr	r1, [pc, #36]	; (8009ed0 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 8009eaa:	2038      	movs	r0, #56	; 0x38
 8009eac:	f001 fc3a 	bl	800b724 <_ZnwjPKci>
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	68b9      	ldr	r1, [r7, #8]
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f00c f84a 	bl	8015f50 <_ZN20CommandLineArgumentsC1EiPKPKc>
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	609c      	str	r4, [r3, #8]
}
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd90      	pop	{r4, r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	08029bb0 	.word	0x08029bb0
 8009ed0:	080258f8 	.word	0x080258f8

08009ed4 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	4a0c      	ldr	r2, [pc, #48]	; (8009f10 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d004      	beq.n	8009ef4 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	3204      	adds	r2, #4
 8009eee:	6812      	ldr	r2, [r2, #0]
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	4790      	blx	r2
    delete output_;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d004      	beq.n	8009f06 <_ZN21CommandLineTestRunnerD1Ev+0x32>
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	3204      	adds	r2, #4
 8009f00:	6812      	ldr	r2, [r2, #0]
 8009f02:	4618      	mov	r0, r3
 8009f04:	4790      	blx	r2
}
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	08029bb0 	.word	0x08029bb0

08009f14 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
}
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7ff ffd9 	bl	8009ed4 <_ZN21CommandLineTestRunnerD1Ev>
 8009f22:	2110      	movs	r1, #16
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f001 fc11 	bl	800b74c <_ZdlPvj>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 8009f34:	b5b0      	push	{r4, r5, r7, lr}
 8009f36:	b08c      	sub	sp, #48	; 0x30
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8009f40:	f107 031c 	add.w	r3, r7, #28
 8009f44:	4929      	ldr	r1, [pc, #164]	; (8009fec <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8009f46:	4618      	mov	r0, r3
 8009f48:	f003 ffaf 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8009f4c:	f107 021c 	add.w	r2, r7, #28
 8009f50:	f107 0308 	add.w	r3, r7, #8
 8009f54:	4611      	mov	r1, r2
 8009f56:	4618      	mov	r0, r3
 8009f58:	f008 fe1c 	bl	8012b94 <_ZN16SetPointerPluginC1ERK12SimpleString>
 8009f5c:	f107 031c 	add.w	r3, r7, #28
 8009f60:	4618      	mov	r0, r3
 8009f62:	f004 fb5a 	bl	800e61a <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	68da      	ldr	r2, [r3, #12]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	3334      	adds	r3, #52	; 0x34
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f107 0108 	add.w	r1, r7, #8
 8009f78:	4610      	mov	r0, r2
 8009f7a:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	68da      	ldr	r2, [r3, #12]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	333c      	adds	r3, #60	; 0x3c
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	4798      	blx	r3
 8009f8e:	4603      	mov	r3, r0
 8009f90:	4619      	mov	r1, r3
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fa3e 	bl	800a414 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d003      	beq.n	8009fa6 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f8ac 	bl	800a0fc <_ZN21CommandLineTestRunner11runAllTestsEv>
 8009fa4:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	68dd      	ldr	r5, [r3, #12]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	3344      	adds	r3, #68	; 0x44
 8009fb2:	681c      	ldr	r4, [r3, #0]
 8009fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fb8:	490c      	ldr	r1, [pc, #48]	; (8009fec <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f003 ff75 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8009fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	47a0      	blx	r4
 8009fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f004 fb23 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return testResult;
 8009fd4:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8009fd6:	f107 0308 	add.w	r3, r7, #8
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 faaa 	bl	800a534 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 8009fe0:	4623      	mov	r3, r4
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3730      	adds	r7, #48	; 0x30
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8009fea:	bf00      	nop
 8009fec:	0802591c 	.word	0x0802591c

08009ff0 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 8009ff0:	b5b0      	push	{r4, r5, r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	68dd      	ldr	r5, [r3, #12]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	3330      	adds	r3, #48	; 0x30
 800a004:	681c      	ldr	r4, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	4618      	mov	r0, r3
 800a00c:	f00c fce0 	bl	80169d0 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 800a010:	4603      	mov	r3, r0
 800a012:	4619      	mov	r1, r3
 800a014:	4628      	mov	r0, r5
 800a016:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68dd      	ldr	r5, [r3, #12]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	332c      	adds	r3, #44	; 0x2c
 800a024:	681c      	ldr	r4, [r3, #0]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	4618      	mov	r0, r3
 800a02c:	f00c fcdc 	bl	80169e8 <_ZNK20CommandLineArguments14getNameFiltersEv>
 800a030:	4603      	mov	r3, r0
 800a032:	4619      	mov	r1, r3
 800a034:	4628      	mov	r0, r5
 800a036:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	4618      	mov	r0, r3
 800a03e:	f00c fc2b 	bl	8016898 <_ZNK20CommandLineArguments9isVerboseEv>
 800a042:	4603      	mov	r3, r0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d009      	beq.n	800a05c <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	685a      	ldr	r2, [r3, #4]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	3320      	adds	r3, #32
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2101      	movs	r1, #1
 800a058:	4610      	mov	r0, r2
 800a05a:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	4618      	mov	r0, r3
 800a062:	f00c fc25 	bl	80168b0 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d009      	beq.n	800a080 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685a      	ldr	r2, [r3, #4]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	3320      	adds	r3, #32
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2102      	movs	r1, #2
 800a07c:	4610      	mov	r0, r2
 800a07e:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	4618      	mov	r0, r3
 800a086:	f00c fc1f 	bl	80168c8 <_ZNK20CommandLineArguments7isColorEv>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d008      	beq.n	800a0a2 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	685a      	ldr	r2, [r3, #4]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3324      	adds	r3, #36	; 0x24
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4610      	mov	r0, r2
 800a0a0:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f00c fc4a 	bl	8016940 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d008      	beq.n	800a0c4 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68da      	ldr	r2, [r3, #12]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3360      	adds	r3, #96	; 0x60
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f00c fc2d 	bl	8016928 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d004      	beq.n	800a0de <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f009 fa19 	bl	8013510 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f00c fc50 	bl	8016988 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d001      	beq.n	800a0f2 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 800a0ee:	f00b fadb 	bl	80156a8 <_ZN10UtestShell14setCrashOnFailEv>
}
 800a0f2:	bf00      	nop
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a0fc <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 800a0fc:	b5b0      	push	{r4, r5, r7, lr}
 800a0fe:	b094      	sub	sp, #80	; 0x50
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f7ff ff73 	bl	8009ff0 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 800a10a:	2300      	movs	r3, #0
 800a10c:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 800a10e:	2300      	movs	r3, #0
 800a110:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 800a112:	2300      	movs	r3, #0
 800a114:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f00c fc1c 	bl	8016958 <_ZNK20CommandLineArguments14getRepeatCountEv>
 800a120:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	4618      	mov	r0, r3
 800a128:	f00c fbda 	bl	80168e0 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d019      	beq.n	800a166 <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	685a      	ldr	r2, [r3, #4]
 800a136:	f107 0308 	add.w	r3, r7, #8
 800a13a:	4611      	mov	r1, r2
 800a13c:	4618      	mov	r0, r3
 800a13e:	f009 fbaf 	bl	80138a0 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	68da      	ldr	r2, [r3, #12]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	3320      	adds	r3, #32
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f107 0108 	add.w	r1, r7, #8
 800a154:	4610      	mov	r0, r2
 800a156:	4798      	blx	r3
        return 0;
 800a158:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800a15a:	f107 0308 	add.w	r3, r7, #8
 800a15e:	4618      	mov	r0, r3
 800a160:	f009 fbd6 	bl	8013910 <_ZN10TestResultD1Ev>
 800a164:	e0e1      	b.n	800a32a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f00c fbc4 	bl	80168f8 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d019      	beq.n	800a1aa <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	685a      	ldr	r2, [r3, #4]
 800a17a:	f107 0308 	add.w	r3, r7, #8
 800a17e:	4611      	mov	r1, r2
 800a180:	4618      	mov	r0, r3
 800a182:	f009 fb8d 	bl	80138a0 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	68da      	ldr	r2, [r3, #12]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	3324      	adds	r3, #36	; 0x24
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f107 0108 	add.w	r1, r7, #8
 800a198:	4610      	mov	r0, r2
 800a19a:	4798      	blx	r3
        return 0;
 800a19c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800a19e:	f107 0308 	add.w	r3, r7, #8
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f009 fbb4 	bl	8013910 <_ZN10TestResultD1Ev>
 800a1a8:	e0bf      	b.n	800a32a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f00c fbae 	bl	8016910 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d019      	beq.n	800a1ee <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	f107 0308 	add.w	r3, r7, #8
 800a1c2:	4611      	mov	r1, r2
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f009 fb6b 	bl	80138a0 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	68da      	ldr	r2, [r3, #12]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	3328      	adds	r3, #40	; 0x28
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f107 0108 	add.w	r1, r7, #8
 800a1dc:	4610      	mov	r0, r2
 800a1de:	4798      	blx	r3
        return 0;
 800a1e0:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800a1e2:	f107 0308 	add.w	r3, r7, #8
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f009 fb92 	bl	8013910 <_ZN10TestResultD1Ev>
 800a1ec:	e09d      	b.n	800a32a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f00c fbbc 	bl	8016970 <_ZNK20CommandLineArguments11isReversingEv>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d008      	beq.n	800a210 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68da      	ldr	r2, [r3, #12]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	331c      	adds	r3, #28
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4610      	mov	r0, r2
 800a20e:	4798      	blx	r3

    if (arguments_->isShuffling())
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	4618      	mov	r0, r3
 800a216:	f00c fbc3 	bl	80169a0 <_ZNK20CommandLineArguments11isShufflingEv>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d023      	beq.n	800a268 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685a      	ldr	r2, [r3, #4]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	332c      	adds	r3, #44	; 0x2c
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4941      	ldr	r1, [pc, #260]	; (800a334 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 800a230:	4610      	mov	r0, r2
 800a232:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	685d      	ldr	r5, [r3, #4]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	3334      	adds	r3, #52	; 0x34
 800a240:	681c      	ldr	r4, [r3, #0]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	4618      	mov	r0, r3
 800a248:	f00c fbb6 	bl	80169b8 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800a24c:	4603      	mov	r3, r0
 800a24e:	4619      	mov	r1, r3
 800a250:	4628      	mov	r0, r5
 800a252:	47a0      	blx	r4
        output_->print("\n");
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	685a      	ldr	r2, [r3, #4]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	332c      	adds	r3, #44	; 0x2c
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4935      	ldr	r1, [pc, #212]	; (800a338 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 800a264:	4610      	mov	r0, r2
 800a266:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 800a268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a26a:	1c5a      	adds	r2, r3, #1
 800a26c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a26e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a270:	429a      	cmp	r2, r3
 800a272:	bf8c      	ite	hi
 800a274:	2301      	movhi	r3, #1
 800a276:	2300      	movls	r3, #0
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d04e      	beq.n	800a31c <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	4618      	mov	r0, r3
 800a284:	f00c fb8c 	bl	80169a0 <_ZNK20CommandLineArguments11isShufflingEv>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00f      	beq.n	800a2ae <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	68dd      	ldr	r5, [r3, #12]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	3318      	adds	r3, #24
 800a29a:	681c      	ldr	r4, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f00c fb89 	bl	80169b8 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6858      	ldr	r0, [r3, #4]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	3340      	adds	r3, #64	; 0x40
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2be:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a2c0:	4798      	blx	r3
        TestResult tr(*output_);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	f107 0308 	add.w	r3, r7, #8
 800a2ca:	4611      	mov	r1, r2
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f009 fae7 	bl	80138a0 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	68da      	ldr	r2, [r3, #12]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	3314      	adds	r3, #20
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f107 0108 	add.w	r1, r7, #8
 800a2e4:	4610      	mov	r0, r2
 800a2e6:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 800a2e8:	f107 0308 	add.w	r3, r7, #8
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7ff fcef 	bl	8009cd0 <_ZNK10TestResult15getFailureCountEv>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2f6:	4413      	add	r3, r2
 800a2f8:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 800a2fa:	f107 0308 	add.w	r3, r7, #8
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7ff fcf2 	bl	8009ce8 <_ZNK10TestResult9isFailureEv>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d002      	beq.n	800a310 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 800a30a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a30c:	3301      	adds	r3, #1
 800a30e:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 800a310:	f107 0308 	add.w	r3, r7, #8
 800a314:	4618      	mov	r0, r3
 800a316:	f009 fafb 	bl	8013910 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 800a31a:	e7a5      	b.n	800a268 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 800a31c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d001      	beq.n	800a326 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 800a322:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800a324:	e000      	b.n	800a328 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 800a326:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800a328:	bf00      	nop
 800a32a:	4623      	mov	r3, r4
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3750      	adds	r7, #80	; 0x50
 800a330:	46bd      	mov	sp, r7
 800a332:	bdb0      	pop	{r4, r5, r7, pc}
 800a334:	08025930 	.word	0x08025930
 800a338:	0802595c 	.word	0x0802595c

0800a33c <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 800a33c:	b590      	push	{r4, r7, lr}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 800a344:	229d      	movs	r2, #157	; 0x9d
 800a346:	4906      	ldr	r1, [pc, #24]	; (800a360 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 800a348:	201c      	movs	r0, #28
 800a34a:	f001 f9eb 	bl	800b724 <_ZnwjPKci>
 800a34e:	4604      	mov	r4, r0
 800a350:	4620      	mov	r0, r4
 800a352:	f005 f955 	bl	800f600 <_ZN18TeamCityTestOutputC1Ev>
 800a356:	4623      	mov	r3, r4
}
 800a358:	4618      	mov	r0, r3
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd90      	pop	{r4, r7, pc}
 800a360:	080258f8 	.word	0x080258f8

0800a364 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 800a364:	b590      	push	{r4, r7, lr}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 800a36e:	22a2      	movs	r2, #162	; 0xa2
 800a370:	490a      	ldr	r1, [pc, #40]	; (800a39c <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 800a372:	2014      	movs	r0, #20
 800a374:	f001 f9d6 	bl	800b724 <_ZnwjPKci>
 800a378:	4604      	mov	r4, r0
 800a37a:	4620      	mov	r0, r4
 800a37c:	f000 f980 	bl	800a680 <_ZN15JUnitTestOutputC1Ev>
 800a380:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d003      	beq.n	800a390 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 800a388:	6839      	ldr	r1, [r7, #0]
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f000 fbb2 	bl	800aaf4 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 800a390:	68fb      	ldr	r3, [r7, #12]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3714      	adds	r7, #20
 800a396:	46bd      	mov	sp, r7
 800a398:	bd90      	pop	{r4, r7, pc}
 800a39a:	bf00      	nop
 800a39c:	080258f8 	.word	0x080258f8

0800a3a0 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 800a3a0:	b590      	push	{r4, r7, lr}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 800a3a8:	22ab      	movs	r2, #171	; 0xab
 800a3aa:	4906      	ldr	r1, [pc, #24]	; (800a3c4 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 800a3ac:	2010      	movs	r0, #16
 800a3ae:	f001 f9b9 	bl	800b724 <_ZnwjPKci>
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f7ff fcb3 	bl	8009d20 <_ZN17ConsoleTestOutputC1Ev>
 800a3ba:	4623      	mov	r3, r4
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd90      	pop	{r4, r7, pc}
 800a3c4:	080258f8 	.word	0x080258f8

0800a3c8 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 800a3c8:	b590      	push	{r4, r7, lr}
 800a3ca:	b087      	sub	sp, #28
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 800a3d4:	22b0      	movs	r2, #176	; 0xb0
 800a3d6:	490e      	ldr	r1, [pc, #56]	; (800a410 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 800a3d8:	2018      	movs	r0, #24
 800a3da:	f001 f9a3 	bl	800b724 <_ZnwjPKci>
 800a3de:	4604      	mov	r4, r0
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	f007 ff83 	bl	80122ec <_ZN19CompositeTestOutputC1Ev>
 800a3e6:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	335c      	adds	r3, #92	; 0x5c
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68b9      	ldr	r1, [r7, #8]
 800a3f2:	6978      	ldr	r0, [r7, #20]
 800a3f4:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	3360      	adds	r3, #96	; 0x60
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	6879      	ldr	r1, [r7, #4]
 800a400:	6978      	ldr	r0, [r7, #20]
 800a402:	4798      	blx	r3
  return composite;
 800a404:	697b      	ldr	r3, [r7, #20]
}
 800a406:	4618      	mov	r0, r3
 800a408:	371c      	adds	r7, #28
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd90      	pop	{r4, r7, pc}
 800a40e:	bf00      	nop
 800a410:	080258f8 	.word	0x080258f8

0800a414 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 800a414:	b5b0      	push	{r4, r5, r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	6839      	ldr	r1, [r7, #0]
 800a424:	4618      	mov	r0, r3
 800a426:	f00b fe4f 	bl	80160c8 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 800a42a:	4603      	mov	r3, r0
 800a42c:	f083 0301 	eor.w	r3, r3, #1
 800a430:	b2db      	uxtb	r3, r3
 800a432:	2b00      	cmp	r3, #0
 800a434:	d029      	beq.n	800a48a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	3310      	adds	r3, #16
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	4798      	blx	r3
 800a442:	4602      	mov	r2, r0
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685d      	ldr	r5, [r3, #4]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	332c      	adds	r3, #44	; 0x2c
 800a454:	681c      	ldr	r4, [r3, #0]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	4618      	mov	r0, r3
 800a45c:	f00c fa10 	bl	8016880 <_ZNK20CommandLineArguments8needHelpEv>
 800a460:	4603      	mov	r3, r0
 800a462:	2b00      	cmp	r3, #0
 800a464:	d006      	beq.n	800a474 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	689b      	ldr	r3, [r3, #8]
 800a46a:	4618      	mov	r0, r3
 800a46c:	f00c f9fa 	bl	8016864 <_ZNK20CommandLineArguments4helpEv>
 800a470:	4603      	mov	r3, r0
 800a472:	e005      	b.n	800a480 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	4618      	mov	r0, r3
 800a47a:	f00c f9e5 	bl	8016848 <_ZNK20CommandLineArguments5usageEv>
 800a47e:	4603      	mov	r3, r0
 800a480:	4619      	mov	r1, r3
 800a482:	4628      	mov	r0, r5
 800a484:	47a0      	blx	r4
    return false;
 800a486:	2300      	movs	r3, #0
 800a488:	e050      	b.n	800a52c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	4618      	mov	r0, r3
 800a490:	f00d f84c 	bl	801752c <_ZNK20CommandLineArguments13isJUnitOutputEv>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d02c      	beq.n	800a4f4 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	330c      	adds	r3, #12
 800a4a0:	681c      	ldr	r4, [r3, #0]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f00d f864 	bl	8017574 <_ZNK20CommandLineArguments14getPackageNameEv>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	47a0      	blx	r4
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f00c f9ea 	bl	8016898 <_ZNK20CommandLineArguments9isVerboseEv>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d02f      	beq.n	800a52a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	3314      	adds	r3, #20
 800a4d0:	681c      	ldr	r4, [r3, #0]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	685d      	ldr	r5, [r3, #4]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	3310      	adds	r3, #16
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	4798      	blx	r3
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	4629      	mov	r1, r5
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	47a0      	blx	r4
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	605a      	str	r2, [r3, #4]
 800a4f2:	e01a      	b.n	800a52a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f00d f829 	bl	8017550 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d009      	beq.n	800a518 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	3308      	adds	r3, #8
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	4798      	blx	r3
 800a510:	4602      	mov	r2, r0
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	605a      	str	r2, [r3, #4]
 800a516:	e008      	b.n	800a52a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	3310      	adds	r3, #16
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	4798      	blx	r3
 800a524:	4602      	mov	r2, r0
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	605a      	str	r2, [r3, #4]
  return true;
 800a52a:	2301      	movs	r3, #1
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bdb0      	pop	{r4, r5, r7, pc}

0800a534 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	4a05      	ldr	r2, [pc, #20]	; (800a554 <_ZN16SetPointerPluginD1Ev+0x20>)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	601a      	str	r2, [r3, #0]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4618      	mov	r0, r3
 800a546:	f008 f9e7 	bl	8012918 <_ZN10TestPluginD1Ev>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4618      	mov	r0, r3
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	0802a330 	.word	0x0802a330

0800a558 <_ZN16SetPointerPluginD0Ev>:
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f7ff ffe7 	bl	800a534 <_ZN16SetPointerPluginD1Ev>
 800a566:	2114      	movs	r1, #20
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f001 f8ef 	bl	800b74c <_ZdlPvj>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4618      	mov	r0, r3
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
        return checkCount_;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	691b      	ldr	r3, [r3, #16]
    }
 800a584:	4618      	mov	r0, r3
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4910      	ldr	r1, [pc, #64]	; (800a5dc <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 800a59c:	4618      	mov	r0, r3
 800a59e:	f003 fc84 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	609a      	str	r2, [r3, #8]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	60da      	str	r2, [r3, #12]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	741a      	strb	r2, [r3, #16]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	3314      	adds	r3, #20
 800a5b8:	4908      	ldr	r1, [pc, #32]	; (800a5dc <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f003 fc75 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	61da      	str	r2, [r3, #28]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	621a      	str	r2, [r3, #32]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	08025960 	.word	0x08025960

0800a5e0 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	601a      	str	r2, [r3, #0]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	605a      	str	r2, [r3, #4]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	609a      	str	r2, [r3, #8]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	60da      	str	r2, [r3, #12]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	611a      	str	r2, [r3, #16]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	3314      	adds	r3, #20
 800a60a:	4907      	ldr	r1, [pc, #28]	; (800a628 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 800a60c:	4618      	mov	r0, r3
 800a60e:	f003 fc4c 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	61da      	str	r2, [r3, #28]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	621a      	str	r2, [r3, #32]
    {
    }
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4618      	mov	r0, r3
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	08025960 	.word	0x08025960

0800a62c <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	3314      	adds	r3, #20
 800a638:	4618      	mov	r0, r3
 800a63a:	f003 ffee 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4618      	mov	r0, r3
 800a642:	3708      	adds	r7, #8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	4618      	mov	r0, r3
 800a654:	f7ff ffc4 	bl	800a5e0 <_ZN20JUnitTestGroupResultC1Ev>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	3328      	adds	r3, #40	; 0x28
 800a65c:	4907      	ldr	r1, [pc, #28]	; (800a67c <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 800a65e:	4618      	mov	r0, r3
 800a660:	f003 fc23 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	3330      	adds	r3, #48	; 0x30
 800a668:	4904      	ldr	r1, [pc, #16]	; (800a67c <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 800a66a:	4618      	mov	r0, r3
 800a66c:	f003 fc1d 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	4618      	mov	r0, r3
 800a674:	3708      	adds	r7, #8
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	08025960 	.word	0x08025960

0800a680 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 800a680:	b590      	push	{r4, r7, lr}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4618      	mov	r0, r3
 800a68c:	f007 f936 	bl	80118fc <_ZN10TestOutputC1Ev>
 800a690:	4a09      	ldr	r2, [pc, #36]	; (800a6b8 <_ZN15JUnitTestOutputC1Ev+0x38>)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	601a      	str	r2, [r3, #0]
 800a696:	224d      	movs	r2, #77	; 0x4d
 800a698:	4908      	ldr	r1, [pc, #32]	; (800a6bc <_ZN15JUnitTestOutputC1Ev+0x3c>)
 800a69a:	2038      	movs	r0, #56	; 0x38
 800a69c:	f001 f842 	bl	800b724 <_ZnwjPKci>
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f7ff ffd0 	bl	800a648 <_ZN19JUnitTestOutputImplC1Ev>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	611c      	str	r4, [r3, #16]
{
}
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	370c      	adds	r7, #12
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd90      	pop	{r4, r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	08029bd0 	.word	0x08029bd0
 800a6bc:	08025964 	.word	0x08025964

0800a6c0 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	3330      	adds	r3, #48	; 0x30
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f003 ffa4 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	3328      	adds	r3, #40	; 0x28
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f003 ff9f 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7ff ffa4 	bl	800a62c <_ZN20JUnitTestGroupResultD1Ev>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
	...

0800a6f0 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 800a6f0:	b590      	push	{r4, r7, lr}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	4a0c      	ldr	r2, [pc, #48]	; (800a72c <_ZN15JUnitTestOutputD1Ev+0x3c>)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 f838 	bl	800a774 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	691c      	ldr	r4, [r3, #16]
 800a708:	2c00      	cmp	r4, #0
 800a70a:	d006      	beq.n	800a71a <_ZN15JUnitTestOutputD1Ev+0x2a>
 800a70c:	4620      	mov	r0, r4
 800a70e:	f7ff ffd7 	bl	800a6c0 <_ZN19JUnitTestOutputImplD1Ev>
 800a712:	2138      	movs	r1, #56	; 0x38
 800a714:	4620      	mov	r0, r4
 800a716:	f001 f819 	bl	800b74c <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4618      	mov	r0, r3
 800a71e:	f007 f90b 	bl	8011938 <_ZN10TestOutputD1Ev>
}
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4618      	mov	r0, r3
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd90      	pop	{r4, r7, pc}
 800a72c:	08029bd0 	.word	0x08029bd0

0800a730 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
}
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f7ff ffd9 	bl	800a6f0 <_ZN15JUnitTestOutputD1Ev>
 800a73e:	2114      	movs	r1, #20
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f001 f803 	bl	800b74c <_ZdlPvj>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4618      	mov	r0, r3
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	3314      	adds	r3, #20
 800a75c:	4618      	mov	r0, r3
 800a75e:	f003 ff5c 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	4618      	mov	r0, r3
 800a766:	f003 ff58 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4618      	mov	r0, r3
 800a76e:	3708      	adds	r7, #8
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 800a774:	b590      	push	{r4, r7, lr}
 800a776:	b087      	sub	sp, #28
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	691b      	ldr	r3, [r3, #16]
 800a780:	2200      	movs	r2, #0
 800a782:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	2200      	movs	r2, #0
 800a78a:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	691b      	ldr	r3, [r3, #16]
 800a790:	f103 0414 	add.w	r4, r3, #20
 800a794:	f107 0308 	add.w	r3, r7, #8
 800a798:	491d      	ldr	r1, [pc, #116]	; (800a810 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 800a79a:	4618      	mov	r0, r3
 800a79c:	f003 fb85 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800a7a0:	f107 0308 	add.w	r3, r7, #8
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f003 fbeb 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 800a7ac:	f107 0308 	add.w	r3, r7, #8
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f003 ff32 	bl	800e61a <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	691b      	ldr	r3, [r3, #16]
 800a7ba:	69db      	ldr	r3, [r3, #28]
 800a7bc:	617b      	str	r3, [r7, #20]
    while (cur) {
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d018      	beq.n	800a7f6 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c8:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d004      	beq.n	800a7dc <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	3204      	adds	r2, #4
 800a7d6:	6812      	ldr	r2, [r2, #0]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	4790      	blx	r2
        delete cur;
 800a7dc:	697c      	ldr	r4, [r7, #20]
 800a7de:	2c00      	cmp	r4, #0
 800a7e0:	d006      	beq.n	800a7f0 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f7ff ffb4 	bl	800a750 <_ZN23JUnitTestCaseResultNodeD1Ev>
 800a7e8:	2128      	movs	r1, #40	; 0x28
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f000 ffae 	bl	800b74c <_ZdlPvj>
        cur = tmp;
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	617b      	str	r3, [r7, #20]
    while (cur) {
 800a7f4:	e7e3      	b.n	800a7be <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	691b      	ldr	r3, [r3, #16]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	2200      	movs	r2, #0
 800a804:	621a      	str	r2, [r3, #32]
}
 800a806:	bf00      	nop
 800a808:	371c      	adds	r7, #28
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd90      	pop	{r4, r7, pc}
 800a80e:	bf00      	nop
 800a810:	08025960 	.word	0x08025960

0800a814 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
}
 800a81c:	bf00      	nop
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
}
 800a832:	bf00      	nop
 800a834:	370c      	adds	r7, #12
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 800a83e:	b590      	push	{r4, r7, lr}
 800a840:	b083      	sub	sp, #12
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	691b      	ldr	r3, [r3, #16]
 800a84c:	6a1c      	ldr	r4, [r3, #32]
 800a84e:	6838      	ldr	r0, [r7, #0]
 800a850:	f009 f9c6 	bl	8013be0 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800a854:	4603      	mov	r3, r0
 800a856:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	691b      	ldr	r3, [r3, #16]
 800a85c:	6a1c      	ldr	r4, [r3, #32]
 800a85e:	6838      	ldr	r0, [r7, #0]
 800a860:	f7ff fe8a 	bl	800a578 <_ZNK10TestResult13getCheckCountEv>
 800a864:	4603      	mov	r3, r0
 800a866:	6223      	str	r3, [r4, #32]
}
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd90      	pop	{r4, r7, pc}

0800a870 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
}
 800a87a:	bf00      	nop
 800a87c:	370c      	adds	r7, #12
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr

0800a886 <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 800a886:	b590      	push	{r4, r7, lr}
 800a888:	b083      	sub	sp, #12
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	691c      	ldr	r4, [r3, #16]
 800a894:	6838      	ldr	r0, [r7, #0]
 800a896:	f009 f9af 	bl	8013bf8 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 800a89a:	4603      	mov	r3, r0
 800a89c:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3364      	adds	r3, #100	; 0x64
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	4798      	blx	r3
    resetTestGroupResult();
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f7ff ff62 	bl	800a774 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd90      	pop	{r4, r7, pc}

0800a8b8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800a8b8:	b590      	push	{r4, r7, lr}
 800a8ba:	b089      	sub	sp, #36	; 0x24
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	3201      	adds	r2, #1
 800a8ca:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	691b      	ldr	r3, [r3, #16]
 800a8d0:	f103 0414 	add.w	r4, r3, #20
 800a8d4:	f107 0308 	add.w	r3, r7, #8
 800a8d8:	6839      	ldr	r1, [r7, #0]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f009 fcef 	bl	80142be <_ZNK10UtestShell8getGroupEv>
 800a8e0:	f107 0308 	add.w	r3, r7, #8
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	f003 fb4b 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 800a8ec:	f107 0308 	add.w	r3, r7, #8
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f003 fe92 	bl	800e61a <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 800a8f6:	4b3c      	ldr	r3, [pc, #240]	; (800a9e8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4798      	blx	r3
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	6a1b      	ldr	r3, [r3, #32]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d110      	bne.n	800a930 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 800a90e:	2288      	movs	r2, #136	; 0x88
 800a910:	4936      	ldr	r1, [pc, #216]	; (800a9ec <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 800a912:	2028      	movs	r0, #40	; 0x28
 800a914:	f000 ff06 	bl	800b724 <_ZnwjPKci>
 800a918:	4604      	mov	r4, r0
 800a91a:	4620      	mov	r0, r4
 800a91c:	f7ff fe38 	bl	800a590 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 800a924:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	6912      	ldr	r2, [r2, #16]
 800a92a:	6a1b      	ldr	r3, [r3, #32]
 800a92c:	61d3      	str	r3, [r2, #28]
 800a92e:	e013      	b.n	800a958 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 800a930:	228b      	movs	r2, #139	; 0x8b
 800a932:	492e      	ldr	r1, [pc, #184]	; (800a9ec <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 800a934:	2028      	movs	r0, #40	; 0x28
 800a936:	f000 fef5 	bl	800b724 <_ZnwjPKci>
 800a93a:	4604      	mov	r4, r0
 800a93c:	4620      	mov	r0, r4
 800a93e:	f7ff fe27 	bl	800a590 <_ZN23JUnitTestCaseResultNodeC1Ev>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	6a1b      	ldr	r3, [r3, #32]
 800a948:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	6a1a      	ldr	r2, [r3, #32]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	691b      	ldr	r3, [r3, #16]
 800a954:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a956:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	6a1b      	ldr	r3, [r3, #32]
 800a95e:	461c      	mov	r4, r3
 800a960:	f107 0310 	add.w	r3, r7, #16
 800a964:	6839      	ldr	r1, [r7, #0]
 800a966:	4618      	mov	r0, r3
 800a968:	f009 fc9a 	bl	80142a0 <_ZNK10UtestShell7getNameEv>
 800a96c:	f107 0310 	add.w	r3, r7, #16
 800a970:	4619      	mov	r1, r3
 800a972:	4620      	mov	r0, r4
 800a974:	f003 fb05 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 800a978:	f107 0310 	add.w	r3, r7, #16
 800a97c:	4618      	mov	r0, r3
 800a97e:	f003 fe4c 	bl	800e61a <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	691b      	ldr	r3, [r3, #16]
 800a986:	6a1b      	ldr	r3, [r3, #32]
 800a988:	f103 0414 	add.w	r4, r3, #20
 800a98c:	f107 0318 	add.w	r3, r7, #24
 800a990:	6839      	ldr	r1, [r7, #0]
 800a992:	4618      	mov	r0, r3
 800a994:	f009 fd55 	bl	8014442 <_ZNK10UtestShell7getFileEv>
 800a998:	f107 0318 	add.w	r3, r7, #24
 800a99c:	4619      	mov	r1, r3
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f003 faef 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 800a9a4:	f107 0318 	add.w	r3, r7, #24
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f003 fe36 	bl	800e61a <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	691b      	ldr	r3, [r3, #16]
 800a9b2:	6a1c      	ldr	r4, [r3, #32]
 800a9b4:	6838      	ldr	r0, [r7, #0]
 800a9b6:	f009 fd53 	bl	8014460 <_ZNK10UtestShell13getLineNumberEv>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	3318      	adds	r3, #24
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	6838      	ldr	r0, [r7, #0]
 800a9c8:	4798      	blx	r3
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	f083 0301 	eor.w	r3, r3, #1
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d004      	beq.n	800a9e0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	6a1b      	ldr	r3, [r3, #32]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	741a      	strb	r2, [r3, #16]
    }
}
 800a9e0:	bf00      	nop
 800a9e2:	3724      	adds	r7, #36	; 0x24
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd90      	pop	{r4, r7, pc}
 800a9e8:	200000a8 	.word	0x200000a8
 800a9ec:	08025964 	.word	0x08025964

0800a9f0 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b08a      	sub	sp, #40	; 0x28
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 800a9fc:	f107 0310 	add.w	r3, r7, #16
 800aa00:	4928      	ldr	r1, [pc, #160]	; (800aaa4 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 800aa02:	4618      	mov	r0, r3
 800aa04:	f003 fa51 	bl	800deaa <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	3328      	adds	r3, #40	; 0x28
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f003 fdf2 	bl	800e5f8 <_ZNK12SimpleString7isEmptyEv>
 800aa14:	4603      	mov	r3, r0
 800aa16:	f083 0301 	eor.w	r3, r3, #1
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00f      	beq.n	800aa40 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800aa28:	f107 0310 	add.w	r3, r7, #16
 800aa2c:	4611      	mov	r1, r2
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f003 fe70 	bl	800e714 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 800aa34:	f107 0310 	add.w	r3, r7, #16
 800aa38:	491b      	ldr	r1, [pc, #108]	; (800aaa8 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f003 fe7c 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 800aa40:	f107 0310 	add.w	r3, r7, #16
 800aa44:	6879      	ldr	r1, [r7, #4]
 800aa46:	4618      	mov	r0, r3
 800aa48:	f003 fe64 	bl	800e714 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	3384      	adds	r3, #132	; 0x84
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f107 0018 	add.w	r0, r7, #24
 800aa58:	f107 0210 	add.w	r2, r7, #16
 800aa5c:	68b9      	ldr	r1, [r7, #8]
 800aa5e:	4798      	blx	r3
 800aa60:	f107 0320 	add.w	r3, r7, #32
 800aa64:	4911      	ldr	r1, [pc, #68]	; (800aaac <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 800aa66:	4618      	mov	r0, r3
 800aa68:	f003 fa1f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f107 0220 	add.w	r2, r7, #32
 800aa72:	f107 0118 	add.w	r1, r7, #24
 800aa76:	4618      	mov	r0, r3
 800aa78:	f003 fe31 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 800aa7c:	f107 0320 	add.w	r3, r7, #32
 800aa80:	4618      	mov	r0, r3
 800aa82:	f003 fdca 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800aa86:	f107 0318 	add.w	r3, r7, #24
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f003 fdc5 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 800aa90:	f107 0310 	add.w	r3, r7, #16
 800aa94:	4618      	mov	r0, r3
 800aa96:	f003 fdc0 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 800aa9a:	bf00      	nop
}
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	3728      	adds	r7, #40	; 0x28
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	08025980 	.word	0x08025980
 800aaa8:	0802598c 	.word	0x0802598c
 800aaac:	08025990 	.word	0x08025990

0800aab0 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 800aabc:	6879      	ldr	r1, [r7, #4]
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	f003 fa47 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 800aac4:	4b0a      	ldr	r3, [pc, #40]	; (800aaf0 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 800aac6:	617b      	str	r3, [r7, #20]
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00a      	beq.n	800aae6 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	225f      	movs	r2, #95	; 0x5f
 800aad6:	4619      	mov	r1, r3
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f003 fbcc 	bl	800e276 <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	3301      	adds	r3, #1
 800aae2:	617b      	str	r3, [r7, #20]
 800aae4:	e7f0      	b.n	800aac8 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 800aae6:	bf00      	nop
}
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	3718      	adds	r7, #24
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	08025998 	.word	0x08025998

0800aaf4 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d006      	beq.n	800ab14 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	3328      	adds	r3, #40	; 0x28
 800ab0c:	6839      	ldr	r1, [r7, #0]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f003 fa37 	bl	800df82 <_ZN12SimpleStringaSERKS_>
    }
}
 800ab14:	bf00      	nop
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 800ab1c:	b590      	push	{r4, r7, lr}
 800ab1e:	b085      	sub	sp, #20
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	3368      	adds	r3, #104	; 0x68
 800ab2a:	681c      	ldr	r4, [r3, #0]
 800ab2c:	f107 0308 	add.w	r3, r7, #8
 800ab30:	4908      	ldr	r1, [pc, #32]	; (800ab54 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 800ab32:	4618      	mov	r0, r3
 800ab34:	f003 f9b9 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800ab38:	f107 0308 	add.w	r3, r7, #8
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	47a0      	blx	r4
 800ab42:	f107 0308 	add.w	r3, r7, #8
 800ab46:	4618      	mov	r0, r3
 800ab48:	f003 fd67 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 800ab4c:	bf00      	nop
 800ab4e:	3714      	adds	r7, #20
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd90      	pop	{r4, r7, pc}
 800ab54:	080259a4 	.word	0x080259a4

0800ab58 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 800ab58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab5c:	b08a      	sub	sp, #40	; 0x28
 800ab5e:	af04      	add	r7, sp, #16
 800ab60:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 800ab68:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 800ab6e:	3314      	adds	r3, #20
 800ab70:	4618      	mov	r0, r3
 800ab72:	f003 fd25 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800ab76:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 800ab7e:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	4a23      	ldr	r2, [pc, #140]	; (800ac14 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 800ab88:	fba2 2303 	umull	r2, r3, r2, r3
 800ab8c:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 800ab8e:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	691a      	ldr	r2, [r3, #16]
 800ab96:	4b1f      	ldr	r3, [pc, #124]	; (800ac14 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 800ab98:	fba3 1302 	umull	r1, r3, r3, r2
 800ab9c:	099b      	lsrs	r3, r3, #6
 800ab9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800aba2:	fb01 f303 	mul.w	r3, r1, r3
 800aba6:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 800aba8:	603b      	str	r3, [r7, #0]
 800abaa:	4b1b      	ldr	r3, [pc, #108]	; (800ac18 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4798      	blx	r3
 800abb0:	4603      	mov	r3, r0
 800abb2:	f107 0008 	add.w	r0, r7, #8
 800abb6:	9303      	str	r3, [sp, #12]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	9302      	str	r3, [sp, #8]
 800abbc:	9601      	str	r6, [sp, #4]
 800abbe:	9500      	str	r5, [sp, #0]
 800abc0:	4623      	mov	r3, r4
 800abc2:	4642      	mov	r2, r8
 800abc4:	4915      	ldr	r1, [pc, #84]	; (800ac1c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 800abc6:	f004 fa2f 	bl	800f028 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	3368      	adds	r3, #104	; 0x68
 800abd0:	681c      	ldr	r4, [r3, #0]
 800abd2:	f107 0308 	add.w	r3, r7, #8
 800abd6:	4618      	mov	r0, r3
 800abd8:	f003 fcf2 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800abdc:	4602      	mov	r2, r0
 800abde:	f107 0310 	add.w	r3, r7, #16
 800abe2:	4611      	mov	r1, r2
 800abe4:	4618      	mov	r0, r3
 800abe6:	f003 f960 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800abea:	f107 0310 	add.w	r3, r7, #16
 800abee:	4619      	mov	r1, r3
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	47a0      	blx	r4
 800abf4:	f107 0310 	add.w	r3, r7, #16
 800abf8:	4618      	mov	r0, r3
 800abfa:	f003 fd0e 	bl	800e61a <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 800abfe:	f107 0308 	add.w	r3, r7, #8
 800ac02:	4618      	mov	r0, r3
 800ac04:	f003 fd09 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 800ac08:	bf00      	nop
 800ac0a:	3718      	adds	r7, #24
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac12:	bf00      	nop
 800ac14:	10624dd3 	.word	0x10624dd3
 800ac18:	200000ac 	.word	0x200000ac
 800ac1c:	080259d0 	.word	0x080259d0

0800ac20 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 800ac20:	b590      	push	{r4, r7, lr}
 800ac22:	b087      	sub	sp, #28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	3368      	adds	r3, #104	; 0x68
 800ac2e:	681c      	ldr	r4, [r3, #0]
 800ac30:	f107 0308 	add.w	r3, r7, #8
 800ac34:	4912      	ldr	r1, [pc, #72]	; (800ac80 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 800ac36:	4618      	mov	r0, r3
 800ac38:	f003 f937 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800ac3c:	f107 0308 	add.w	r3, r7, #8
 800ac40:	4619      	mov	r1, r3
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	47a0      	blx	r4
 800ac46:	f107 0308 	add.w	r3, r7, #8
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f003 fce5 	bl	800e61a <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	3368      	adds	r3, #104	; 0x68
 800ac56:	681c      	ldr	r4, [r3, #0]
 800ac58:	f107 0310 	add.w	r3, r7, #16
 800ac5c:	4909      	ldr	r1, [pc, #36]	; (800ac84 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f003 f923 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800ac64:	f107 0310 	add.w	r3, r7, #16
 800ac68:	4619      	mov	r1, r3
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	47a0      	blx	r4
 800ac6e:	f107 0310 	add.w	r3, r7, #16
 800ac72:	4618      	mov	r0, r3
 800ac74:	f003 fcd1 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 800ac78:	bf00      	nop
 800ac7a:	371c      	adds	r7, #28
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd90      	pop	{r4, r7, pc}
 800ac80:	08025a40 	.word	0x08025a40
 800ac84:	08025a50 	.word	0x08025a50

0800ac88 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f003 fc93 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f003 f903 	bl	800deaa <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 800aca4:	4a0e      	ldr	r2, [pc, #56]	; (800ace0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 800aca6:	490f      	ldr	r1, [pc, #60]	; (800ace4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f003 fb13 	bl	800e2d4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 800acae:	4a0e      	ldr	r2, [pc, #56]	; (800ace8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 800acb0:	490e      	ldr	r1, [pc, #56]	; (800acec <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f003 fb0e 	bl	800e2d4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 800acb8:	4a0d      	ldr	r2, [pc, #52]	; (800acf0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 800acba:	490e      	ldr	r1, [pc, #56]	; (800acf4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f003 fb09 	bl	800e2d4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 800acc2:	4a0d      	ldr	r2, [pc, #52]	; (800acf8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 800acc4:	490d      	ldr	r1, [pc, #52]	; (800acfc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	f003 fb04 	bl	800e2d4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 800accc:	4a0c      	ldr	r2, [pc, #48]	; (800ad00 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 800acce:	490d      	ldr	r1, [pc, #52]	; (800ad04 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	f003 faff 	bl	800e2d4 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 800acd6:	bf00      	nop
}
 800acd8:	68f8      	ldr	r0, [r7, #12]
 800acda:	3710      	adds	r7, #16
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	08025a60 	.word	0x08025a60
 800ace4:	08025a68 	.word	0x08025a68
 800ace8:	08025a6c 	.word	0x08025a6c
 800acec:	08025a74 	.word	0x08025a74
 800acf0:	08025a78 	.word	0x08025a78
 800acf4:	08025a80 	.word	0x08025a80
 800acf8:	08025a84 	.word	0x08025a84
 800acfc:	08025a8c 	.word	0x08025a8c
 800ad00:	08025a90 	.word	0x08025a90
 800ad04:	08025a9c 	.word	0x08025a9c

0800ad08 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 800ad08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad0c:	b096      	sub	sp, #88	; 0x58
 800ad0e:	af08      	add	r7, sp, #32
 800ad10:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	69db      	ldr	r3, [r3, #28]
 800ad18:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 800ad1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 80b2 	beq.w	800ae86 <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 800ad26:	3328      	adds	r3, #40	; 0x28
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f003 fc49 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800ad2e:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	691b      	ldr	r3, [r3, #16]
 800ad34:	3328      	adds	r3, #40	; 0x28
 800ad36:	4618      	mov	r0, r3
 800ad38:	f003 fc5e 	bl	800e5f8 <_ZNK12SimpleString7isEmptyEv>
 800ad3c:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 800ad42:	4c53      	ldr	r4, [pc, #332]	; (800ae90 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 800ad44:	e000      	b.n	800ad48 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 800ad46:	4c53      	ldr	r4, [pc, #332]	; (800ae94 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 800ad4c:	3314      	adds	r3, #20
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f003 fc36 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800ad54:	4605      	mov	r5, r0
 800ad56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f003 fc31 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800ad5e:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 800ad60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad62:	6a1a      	ldr	r2, [r3, #32]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	691b      	ldr	r3, [r3, #16]
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800ad6c:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800ad6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	4a49      	ldr	r2, [pc, #292]	; (800ae98 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800ad74:	fba2 2303 	umull	r2, r3, r2, r3
 800ad78:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 800ad7a:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800ad7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7e:	689a      	ldr	r2, [r3, #8]
 800ad80:	4b45      	ldr	r3, [pc, #276]	; (800ae98 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800ad82:	fba3 1302 	umull	r1, r3, r3, r2
 800ad86:	099b      	lsrs	r3, r3, #6
 800ad88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ad8c:	fb01 f303 	mul.w	r3, r1, r3
 800ad90:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800ad92:	603b      	str	r3, [r7, #0]
 800ad94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad96:	3314      	adds	r3, #20
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f003 fc11 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada2:	69db      	ldr	r3, [r3, #28]
 800ada4:	f107 0014 	add.w	r0, r7, #20
 800ada8:	9306      	str	r3, [sp, #24]
 800adaa:	9205      	str	r2, [sp, #20]
 800adac:	683a      	ldr	r2, [r7, #0]
 800adae:	9204      	str	r2, [sp, #16]
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	9203      	str	r2, [sp, #12]
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	9302      	str	r3, [sp, #8]
 800adb8:	9601      	str	r6, [sp, #4]
 800adba:	9500      	str	r5, [sp, #0]
 800adbc:	4623      	mov	r3, r4
 800adbe:	4642      	mov	r2, r8
 800adc0:	4936      	ldr	r1, [pc, #216]	; (800ae9c <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 800adc2:	f004 f931 	bl	800f028 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	3368      	adds	r3, #104	; 0x68
 800adcc:	681c      	ldr	r4, [r3, #0]
 800adce:	f107 0314 	add.w	r3, r7, #20
 800add2:	4618      	mov	r0, r3
 800add4:	f003 fbf4 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800add8:	4602      	mov	r2, r0
 800adda:	f107 031c 	add.w	r3, r7, #28
 800adde:	4611      	mov	r1, r2
 800ade0:	4618      	mov	r0, r3
 800ade2:	f003 f862 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800ade6:	f107 031c 	add.w	r3, r7, #28
 800adea:	4619      	mov	r1, r3
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	47a0      	blx	r4
 800adf0:	f107 031c 	add.w	r3, r7, #28
 800adf4:	4618      	mov	r0, r3
 800adf6:	f003 fc10 	bl	800e61a <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae00:	6a12      	ldr	r2, [r2, #32]
 800ae02:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 800ae04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d007      	beq.n	800ae1c <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	3388      	adds	r3, #136	; 0x88
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	4798      	blx	r3
 800ae1a:	e017      	b.n	800ae4c <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 800ae1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1e:	7c1b      	ldrb	r3, [r3, #16]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d013      	beq.n	800ae4c <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	3368      	adds	r3, #104	; 0x68
 800ae2a:	681c      	ldr	r4, [r3, #0]
 800ae2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae30:	491b      	ldr	r1, [pc, #108]	; (800aea0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 800ae32:	4618      	mov	r0, r3
 800ae34:	f003 f839 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800ae38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	47a0      	blx	r4
 800ae42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae46:	4618      	mov	r0, r3
 800ae48:	f003 fbe7 	bl	800e61a <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	3368      	adds	r3, #104	; 0x68
 800ae52:	681c      	ldr	r4, [r3, #0]
 800ae54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae58:	4912      	ldr	r1, [pc, #72]	; (800aea4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f003 f825 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800ae60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae64:	4619      	mov	r1, r3
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	47a0      	blx	r4
 800ae6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f003 fbd3 	bl	800e61a <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 800ae74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae78:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 800ae7a:	f107 0314 	add.w	r3, r7, #20
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f003 fbcb 	bl	800e61a <_ZN12SimpleStringD1Ev>
    while (cur) {
 800ae84:	e749      	b.n	800ad1a <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 800ae86:	bf00      	nop
 800ae88:	3738      	adds	r7, #56	; 0x38
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae90:	08025960 	.word	0x08025960
 800ae94:	08025aa0 	.word	0x08025aa0
 800ae98:	10624dd3 	.word	0x10624dd3
 800ae9c:	08025aa4 	.word	0x08025aa4
 800aea0:	08025b00 	.word	0x08025b00
 800aea4:	08025b10 	.word	0x08025b10

0800aea8 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 800aea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeaa:	b091      	sub	sp, #68	; 0x44
 800aeac:	af02      	add	r7, sp, #8
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	68d9      	ldr	r1, [r3, #12]
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	3308      	adds	r3, #8
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f107 0210 	add.w	r2, r7, #16
 800aec4:	4610      	mov	r0, r2
 800aec6:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800aec8:	f107 0310 	add.w	r3, r7, #16
 800aecc:	4618      	mov	r0, r3
 800aece:	f003 fb77 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800aed2:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	68da      	ldr	r2, [r3, #12]
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	3314      	adds	r3, #20
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4610      	mov	r0, r2
 800aee4:	4798      	blx	r3
 800aee6:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800aee8:	461e      	mov	r6, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	3380      	adds	r3, #128	; 0x80
 800aef0:	681c      	ldr	r4, [r3, #0]
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	68d9      	ldr	r1, [r3, #12]
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	3318      	adds	r3, #24
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f107 0220 	add.w	r2, r7, #32
 800af04:	4610      	mov	r0, r2
 800af06:	4798      	blx	r3
 800af08:	f107 0318 	add.w	r3, r7, #24
 800af0c:	f107 0220 	add.w	r2, r7, #32
 800af10:	6879      	ldr	r1, [r7, #4]
 800af12:	4618      	mov	r0, r3
 800af14:	47a0      	blx	r4
 800af16:	f107 0318 	add.w	r3, r7, #24
 800af1a:	4618      	mov	r0, r3
 800af1c:	f003 fb50 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800af20:	4603      	mov	r3, r0
 800af22:	f107 0008 	add.w	r0, r7, #8
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	4633      	mov	r3, r6
 800af2a:	462a      	mov	r2, r5
 800af2c:	4924      	ldr	r1, [pc, #144]	; (800afc0 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 800af2e:	f004 f87b 	bl	800f028 <_Z16StringFromFormatPKcz>
 800af32:	f107 0318 	add.w	r3, r7, #24
 800af36:	4618      	mov	r0, r3
 800af38:	f003 fb6f 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800af3c:	f107 0320 	add.w	r3, r7, #32
 800af40:	4618      	mov	r0, r3
 800af42:	f003 fb6a 	bl	800e61a <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 800af46:	f107 0310 	add.w	r3, r7, #16
 800af4a:	4618      	mov	r0, r3
 800af4c:	f003 fb65 	bl	800e61a <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	3368      	adds	r3, #104	; 0x68
 800af56:	681c      	ldr	r4, [r3, #0]
 800af58:	f107 0308 	add.w	r3, r7, #8
 800af5c:	4618      	mov	r0, r3
 800af5e:	f003 fb2f 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800af62:	4602      	mov	r2, r0
 800af64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800af68:	4611      	mov	r1, r2
 800af6a:	4618      	mov	r0, r3
 800af6c:	f002 ff9d 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800af70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800af74:	4619      	mov	r1, r3
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	47a0      	blx	r4
 800af7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800af7e:	4618      	mov	r0, r3
 800af80:	f003 fb4b 	bl	800e61a <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	3368      	adds	r3, #104	; 0x68
 800af8a:	681c      	ldr	r4, [r3, #0]
 800af8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800af90:	490c      	ldr	r1, [pc, #48]	; (800afc4 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 800af92:	4618      	mov	r0, r3
 800af94:	f002 ff89 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800af98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800af9c:	4619      	mov	r1, r3
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	47a0      	blx	r4
 800afa2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800afa6:	4618      	mov	r0, r3
 800afa8:	f003 fb37 	bl	800e61a <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800afac:	f107 0308 	add.w	r3, r7, #8
 800afb0:	4618      	mov	r0, r3
 800afb2:	f003 fb32 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 800afb6:	bf00      	nop
 800afb8:	373c      	adds	r7, #60	; 0x3c
 800afba:	46bd      	mov	sp, r7
 800afbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afbe:	bf00      	nop
 800afc0:	08025b20 	.word	0x08025b20
 800afc4:	08025b5c 	.word	0x08025b5c

0800afc8 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 800afc8:	b590      	push	{r4, r7, lr}
 800afca:	b08d      	sub	sp, #52	; 0x34
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	3368      	adds	r3, #104	; 0x68
 800afd6:	681c      	ldr	r4, [r3, #0]
 800afd8:	f107 0308 	add.w	r3, r7, #8
 800afdc:	4933      	ldr	r1, [pc, #204]	; (800b0ac <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 800afde:	4618      	mov	r0, r3
 800afe0:	f002 ff63 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800afe4:	f107 0308 	add.w	r3, r7, #8
 800afe8:	4619      	mov	r1, r3
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	47a0      	blx	r4
 800afee:	f107 0308 	add.w	r3, r7, #8
 800aff2:	4618      	mov	r0, r3
 800aff4:	f003 fb11 	bl	800e61a <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	3368      	adds	r3, #104	; 0x68
 800affe:	681c      	ldr	r4, [r3, #0]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	3380      	adds	r3, #128	; 0x80
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	6912      	ldr	r2, [r2, #16]
 800b00c:	3230      	adds	r2, #48	; 0x30
 800b00e:	f107 0010 	add.w	r0, r7, #16
 800b012:	6879      	ldr	r1, [r7, #4]
 800b014:	4798      	blx	r3
 800b016:	f107 0310 	add.w	r3, r7, #16
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	47a0      	blx	r4
 800b020:	f107 0310 	add.w	r3, r7, #16
 800b024:	4618      	mov	r0, r3
 800b026:	f003 faf8 	bl	800e61a <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	3368      	adds	r3, #104	; 0x68
 800b030:	681c      	ldr	r4, [r3, #0]
 800b032:	f107 0318 	add.w	r3, r7, #24
 800b036:	491e      	ldr	r1, [pc, #120]	; (800b0b0 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 800b038:	4618      	mov	r0, r3
 800b03a:	f002 ff36 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800b03e:	f107 0318 	add.w	r3, r7, #24
 800b042:	4619      	mov	r1, r3
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	47a0      	blx	r4
 800b048:	f107 0318 	add.w	r3, r7, #24
 800b04c:	4618      	mov	r0, r3
 800b04e:	f003 fae4 	bl	800e61a <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	3368      	adds	r3, #104	; 0x68
 800b058:	681c      	ldr	r4, [r3, #0]
 800b05a:	f107 0320 	add.w	r3, r7, #32
 800b05e:	4915      	ldr	r1, [pc, #84]	; (800b0b4 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 800b060:	4618      	mov	r0, r3
 800b062:	f002 ff22 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800b066:	f107 0320 	add.w	r3, r7, #32
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	47a0      	blx	r4
 800b070:	f107 0320 	add.w	r3, r7, #32
 800b074:	4618      	mov	r0, r3
 800b076:	f003 fad0 	bl	800e61a <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	3368      	adds	r3, #104	; 0x68
 800b080:	681c      	ldr	r4, [r3, #0]
 800b082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b086:	490c      	ldr	r1, [pc, #48]	; (800b0b8 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 800b088:	4618      	mov	r0, r3
 800b08a:	f002 ff0e 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800b08e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b092:	4619      	mov	r1, r3
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	47a0      	blx	r4
 800b098:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b09c:	4618      	mov	r0, r3
 800b09e:	f003 fabc 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 800b0a2:	bf00      	nop
 800b0a4:	3734      	adds	r7, #52	; 0x34
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd90      	pop	{r4, r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	08025b68 	.word	0x08025b68
 800b0b0:	08025b78 	.word	0x08025b78
 800b0b4:	08025b88 	.word	0x08025b88
 800b0b8:	08025ba4 	.word	0x08025ba4

0800b0bc <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 800b0bc:	b590      	push	{r4, r7, lr}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	3360      	adds	r3, #96	; 0x60
 800b0ca:	681c      	ldr	r4, [r3, #0]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	335c      	adds	r3, #92	; 0x5c
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	6912      	ldr	r2, [r2, #16]
 800b0d8:	3214      	adds	r2, #20
 800b0da:	f107 0008 	add.w	r0, r7, #8
 800b0de:	6879      	ldr	r1, [r7, #4]
 800b0e0:	4798      	blx	r3
 800b0e2:	f107 0308 	add.w	r3, r7, #8
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	47a0      	blx	r4
 800b0ec:	f107 0308 	add.w	r3, r7, #8
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f003 fa92 	bl	800e61a <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	3370      	adds	r3, #112	; 0x70
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	4798      	blx	r3
    writeTestSuiteSummary();
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	3374      	adds	r3, #116	; 0x74
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	4798      	blx	r3
    writeProperties();
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	3378      	adds	r3, #120	; 0x78
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	4798      	blx	r3
    writeTestCases();
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	337c      	adds	r3, #124	; 0x7c
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	4798      	blx	r3
    writeFileEnding();
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	338c      	adds	r3, #140	; 0x8c
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	4798      	blx	r3
    closeFile();
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	336c      	adds	r3, #108	; 0x6c
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	4798      	blx	r3
}
 800b13e:	bf00      	nop
 800b140:	3714      	adds	r7, #20
 800b142:	46bd      	mov	sp, r7
 800b144:	bd90      	pop	{r4, r7, pc}

0800b146 <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 800b146:	b480      	push	{r7}
 800b148:	b083      	sub	sp, #12
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	6039      	str	r1, [r7, #0]
}
 800b150:	bf00      	nop
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr

0800b15c <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	3330      	adds	r3, #48	; 0x30
 800b16c:	6839      	ldr	r1, [r7, #0]
 800b16e:	4618      	mov	r0, r3
 800b170:	f003 fae2 	bl	800e738 <_ZN12SimpleStringpLEPKc>
}
 800b174:	bf00      	nop
 800b176:	3708      	adds	r7, #8
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
}
 800b186:	bf00      	nop
 800b188:	370c      	adds	r7, #12
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr

0800b192 <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 800b192:	b480      	push	{r7}
 800b194:	b083      	sub	sp, #12
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
 800b19a:	6039      	str	r1, [r7, #0]
}
 800b19c:	bf00      	nop
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
}
 800b1b0:	bf00      	nop
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 800b1bc:	b590      	push	{r4, r7, lr}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	691b      	ldr	r3, [r3, #16]
 800b1ca:	6a1b      	ldr	r3, [r3, #32]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d113      	bne.n	800b1fa <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	691b      	ldr	r3, [r3, #16]
 800b1d6:	685a      	ldr	r2, [r3, #4]
 800b1d8:	3201      	adds	r2, #1
 800b1da:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 800b1dc:	f240 1233 	movw	r2, #307	; 0x133
 800b1e0:	4908      	ldr	r1, [pc, #32]	; (800b204 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 800b1e2:	2034      	movs	r0, #52	; 0x34
 800b1e4:	f000 fa9e 	bl	800b724 <_ZnwjPKci>
 800b1e8:	4604      	mov	r4, r0
 800b1ea:	6839      	ldr	r1, [r7, #0]
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	f004 fd37 	bl	800fc60 <_ZN11TestFailureC1ERKS_>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	691b      	ldr	r3, [r3, #16]
 800b1f6:	6a1b      	ldr	r3, [r3, #32]
 800b1f8:	60dc      	str	r4, [r3, #12]
    }
}
 800b1fa:	bf00      	nop
 800b1fc:	370c      	adds	r7, #12
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd90      	pop	{r4, r7, pc}
 800b202:	bf00      	nop
 800b204:	08025964 	.word	0x08025964

0800b208 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 800b208:	b5b0      	push	{r4, r5, r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 800b212:	4b08      	ldr	r3, [pc, #32]	; (800b234 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 800b214:	681d      	ldr	r5, [r3, #0]
 800b216:	6838      	ldr	r0, [r7, #0]
 800b218:	f003 f9d2 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800b21c:	4602      	mov	r2, r0
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	691c      	ldr	r4, [r3, #16]
 800b222:	4905      	ldr	r1, [pc, #20]	; (800b238 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 800b224:	4610      	mov	r0, r2
 800b226:	47a8      	blx	r5
 800b228:	4603      	mov	r3, r0
 800b22a:	6263      	str	r3, [r4, #36]	; 0x24
}
 800b22c:	bf00      	nop
 800b22e:	3708      	adds	r7, #8
 800b230:	46bd      	mov	sp, r7
 800b232:	bdb0      	pop	{r4, r5, r7, pc}
 800b234:	200000b4 	.word	0x200000b4
 800b238:	08025bb4 	.word	0x08025bb4

0800b23c <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 800b23c:	b590      	push	{r4, r7, lr}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 800b246:	4b08      	ldr	r3, [pc, #32]	; (800b268 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 800b248:	681c      	ldr	r4, [r3, #0]
 800b24a:	6838      	ldr	r0, [r7, #0]
 800b24c:	f003 f9b8 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800b250:	4602      	mov	r2, r0
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b258:	4619      	mov	r1, r3
 800b25a:	4610      	mov	r0, r2
 800b25c:	47a0      	blx	r4
}
 800b25e:	bf00      	nop
 800b260:	370c      	adds	r7, #12
 800b262:	46bd      	mov	sp, r7
 800b264:	bd90      	pop	{r4, r7, pc}
 800b266:	bf00      	nop
 800b268:	200000b8 	.word	0x200000b8

0800b26c <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 800b274:	4b05      	ldr	r3, [pc, #20]	; (800b28c <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	6912      	ldr	r2, [r2, #16]
 800b27c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b27e:	4610      	mov	r0, r2
 800b280:	4798      	blx	r3
}
 800b282:	bf00      	nop
 800b284:	3708      	adds	r7, #8
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	200000bc 	.word	0x200000bc

0800b290 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 800b290:	b480      	push	{r7}
 800b292:	b085      	sub	sp, #20
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	607a      	str	r2, [r7, #4]
 800b29c:	603b      	str	r3, [r7, #0]
        return false;
 800b29e:	2300      	movs	r3, #0
    }
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3714      	adds	r7, #20
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
    {
 800b2b4:	4a04      	ldr	r2, [pc, #16]	; (800b2c8 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	601a      	str	r2, [r3, #0]
    }
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4618      	mov	r0, r3
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr
 800b2c8:	08029c7c 	.word	0x08029c7c

0800b2cc <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
    }
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f7ff ffe9 	bl	800b2ac <_ZN17MemoryLeakFailureD1Ev>
 800b2da:	2104      	movs	r1, #4
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 fa35 	bl	800b74c <_ZdlPvj>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 800b2ec:	b590      	push	{r4, r7, lr}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	687c      	ldr	r4, [r7, #4]
 800b2f6:	f000 fc71 	bl	800bbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f00c ff6c 	bl	80181da <_ZN18MemoryLeakDetector8getMutexEv>
 800b302:	4603      	mov	r3, r0
 800b304:	4619      	mov	r1, r3
 800b306:	4620      	mov	r0, r4
 800b308:	f002 fb24 	bl	800d954 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4618      	mov	r0, r3
 800b310:	370c      	adds	r7, #12
 800b312:	46bd      	mov	sp, r7
 800b314:	bd90      	pop	{r4, r7, pc}

0800b316 <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 800b316:	b580      	push	{r7, lr}
 800b318:	b082      	sub	sp, #8
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4618      	mov	r0, r3
 800b322:	f002 fb29 	bl	800d978 <_ZN15ScopedMutexLockD1Ev>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4618      	mov	r0, r3
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 800b330:	b590      	push	{r4, r7, lr}
 800b332:	b087      	sub	sp, #28
 800b334:	af02      	add	r7, sp, #8
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 800b33c:	f000 fc4e 	bl	800bbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b340:	4604      	mov	r4, r0
 800b342:	f006 f8df 	bl	8011504 <_Z25getCurrentMallocAllocatorv>
 800b346:	4601      	mov	r1, r0
 800b348:	2301      	movs	r3, #1
 800b34a:	9301      	str	r3, [sp, #4]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	4620      	mov	r0, r4
 800b356:	f00d f983 	bl	8018660 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800b35a:	4603      	mov	r3, r0
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3714      	adds	r7, #20
 800b360:	46bd      	mov	sp, r7
 800b362:	bd90      	pop	{r4, r7, pc}

0800b364 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 800b364:	b590      	push	{r4, r7, lr}
 800b366:	b087      	sub	sp, #28
 800b368:	af02      	add	r7, sp, #8
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 800b370:	f000 fc34 	bl	800bbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b374:	4603      	mov	r3, r0
 800b376:	68f9      	ldr	r1, [r7, #12]
 800b378:	4618      	mov	r0, r3
 800b37a:	f00c ffdd 	bl	8018338 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 800b37e:	f000 fc2d 	bl	800bbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b382:	4604      	mov	r4, r0
 800b384:	f006 f8be 	bl	8011504 <_Z25getCurrentMallocAllocatorv>
 800b388:	4601      	mov	r1, r0
 800b38a:	2301      	movs	r3, #1
 800b38c:	9301      	str	r3, [sp, #4]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	9300      	str	r3, [sp, #0]
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	4620      	mov	r0, r4
 800b398:	f00d f996 	bl	80186c8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 800b39c:	bf00      	nop
 800b39e:	3714      	adds	r7, #20
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd90      	pop	{r4, r7, pc}

0800b3a4 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 800b3a4:	b590      	push	{r4, r7, lr}
 800b3a6:	b089      	sub	sp, #36	; 0x24
 800b3a8:	af04      	add	r7, sp, #16
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	607a      	str	r2, [r7, #4]
 800b3b0:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 800b3b2:	f000 fc13 	bl	800bbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b3b6:	4604      	mov	r4, r0
 800b3b8:	f006 f8a4 	bl	8011504 <_Z25getCurrentMallocAllocatorv>
 800b3bc:	4601      	mov	r1, r0
 800b3be:	2301      	movs	r3, #1
 800b3c0:	9302      	str	r3, [sp, #8]
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	9301      	str	r3, [sp, #4]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f00d f9de 	bl	8018790 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 800b3d4:	4603      	mov	r3, r0
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3714      	adds	r7, #20
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd90      	pop	{r4, r7, pc}
	...

0800b3e0 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	60b9      	str	r1, [r7, #8]
 800b3ea:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 800b3ec:	4b04      	ldr	r3, [pc, #16]	; (800b400 <_ZL13normal_mallocjPKcj+0x20>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	4798      	blx	r3
 800b3f4:	4603      	mov	r3, r0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	200000c8 	.word	0x200000c8

0800b404 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	607a      	str	r2, [r7, #4]
 800b410:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 800b412:	4b05      	ldr	r3, [pc, #20]	; (800b428 <_ZL14normal_reallocPvjPKcj+0x24>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	68b9      	ldr	r1, [r7, #8]
 800b418:	68f8      	ldr	r0, [r7, #12]
 800b41a:	4798      	blx	r3
 800b41c:	4603      	mov	r3, r0
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3710      	adds	r7, #16
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	200000cc 	.word	0x200000cc

0800b42c <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 800b438:	4b03      	ldr	r3, [pc, #12]	; (800b448 <_ZL11normal_freePvPKcj+0x1c>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	4798      	blx	r3
}
 800b440:	bf00      	nop
 800b442:	3710      	adds	r7, #16
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	200000d0 	.word	0x200000d0

0800b44c <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800b44c:	b590      	push	{r4, r7, lr}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 800b454:	f107 0308 	add.w	r3, r7, #8
 800b458:	4618      	mov	r0, r3
 800b45a:	f7ff ff47 	bl	800b2ec <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800b45e:	f000 fbbd 	bl	800bbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b462:	4604      	mov	r4, r0
 800b464:	f005 ff9e 	bl	80113a4 <_Z22getCurrentNewAllocatorv>
 800b468:	4601      	mov	r1, r0
 800b46a:	2300      	movs	r3, #0
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	4620      	mov	r0, r4
 800b470:	f00d f864 	bl	801853c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800b474:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800b476:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 800b478:	f107 0308 	add.w	r3, r7, #8
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7ff ff4a 	bl	800b316 <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 800b482:	4623      	mov	r3, r4
}
 800b484:	4618      	mov	r0, r3
 800b486:	3714      	adds	r7, #20
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd90      	pop	{r4, r7, pc}

0800b48c <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800b48c:	b590      	push	{r4, r7, lr}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800b494:	f000 fba2 	bl	800bbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b498:	4604      	mov	r4, r0
 800b49a:	f005 ff83 	bl	80113a4 <_Z22getCurrentNewAllocatorv>
 800b49e:	4601      	mov	r1, r0
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	f00d f849 	bl	801853c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800b4aa:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3714      	adds	r7, #20
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd90      	pop	{r4, r7, pc}

0800b4b6 <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800b4b6:	b590      	push	{r4, r7, lr}
 800b4b8:	b083      	sub	sp, #12
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800b4be:	f000 fb8d 	bl	800bbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	f005 ff6e 	bl	80113a4 <_Z22getCurrentNewAllocatorv>
 800b4c8:	4601      	mov	r1, r0
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	f00d f834 	bl	801853c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800b4d4:	4603      	mov	r3, r0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	370c      	adds	r7, #12
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd90      	pop	{r4, r7, pc}

0800b4de <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800b4de:	b590      	push	{r4, r7, lr}
 800b4e0:	b089      	sub	sp, #36	; 0x24
 800b4e2:	af02      	add	r7, sp, #8
 800b4e4:	60f8      	str	r0, [r7, #12]
 800b4e6:	60b9      	str	r1, [r7, #8]
 800b4e8:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 800b4ea:	f000 fb77 	bl	800bbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	f005 ff58 	bl	80113a4 <_Z22getCurrentNewAllocatorv>
 800b4f4:	4601      	mov	r1, r0
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	9301      	str	r3, [sp, #4]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	4620      	mov	r0, r4
 800b504:	f00d f8ac 	bl	8018660 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800b508:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800b50a:	697b      	ldr	r3, [r7, #20]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	371c      	adds	r7, #28
 800b510:	46bd      	mov	sp, r7
 800b512:	bd90      	pop	{r4, r7, pc}

0800b514 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800b514:	b590      	push	{r4, r7, lr}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800b51c:	f000 fb5e 	bl	800bbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b520:	4604      	mov	r4, r0
 800b522:	f005 ff97 	bl	8011454 <_Z27getCurrentNewArrayAllocatorv>
 800b526:	4601      	mov	r1, r0
 800b528:	2300      	movs	r3, #0
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	4620      	mov	r0, r4
 800b52e:	f00d f805 	bl	801853c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800b532:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800b534:	68fb      	ldr	r3, [r7, #12]
}
 800b536:	4618      	mov	r0, r3
 800b538:	3714      	adds	r7, #20
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd90      	pop	{r4, r7, pc}

0800b53e <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800b53e:	b590      	push	{r4, r7, lr}
 800b540:	b083      	sub	sp, #12
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800b546:	f000 fb49 	bl	800bbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b54a:	4604      	mov	r4, r0
 800b54c:	f005 ff82 	bl	8011454 <_Z27getCurrentNewArrayAllocatorv>
 800b550:	4601      	mov	r1, r0
 800b552:	2300      	movs	r3, #0
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	4620      	mov	r0, r4
 800b558:	f00c fff0 	bl	801853c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800b55c:	4603      	mov	r3, r0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	370c      	adds	r7, #12
 800b562:	46bd      	mov	sp, r7
 800b564:	bd90      	pop	{r4, r7, pc}

0800b566 <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800b566:	b590      	push	{r4, r7, lr}
 800b568:	b089      	sub	sp, #36	; 0x24
 800b56a:	af02      	add	r7, sp, #8
 800b56c:	60f8      	str	r0, [r7, #12]
 800b56e:	60b9      	str	r1, [r7, #8]
 800b570:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 800b572:	f000 fb33 	bl	800bbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b576:	4604      	mov	r4, r0
 800b578:	f005 ff6c 	bl	8011454 <_Z27getCurrentNewArrayAllocatorv>
 800b57c:	4601      	mov	r1, r0
 800b57e:	2300      	movs	r3, #0
 800b580:	9301      	str	r3, [sp, #4]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	9300      	str	r3, [sp, #0]
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	4620      	mov	r0, r4
 800b58c:	f00d f868 	bl	8018660 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800b590:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800b592:	697b      	ldr	r3, [r7, #20]
}
 800b594:	4618      	mov	r0, r3
 800b596:	371c      	adds	r7, #28
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd90      	pop	{r4, r7, pc}

0800b59c <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 800b59c:	b590      	push	{r4, r7, lr}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800b5a4:	f000 fb1a 	bl	800bbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	6879      	ldr	r1, [r7, #4]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f00c fec3 	bl	8018338 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 800b5b2:	f000 fb13 	bl	800bbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	f005 fef4 	bl	80113a4 <_Z22getCurrentNewAllocatorv>
 800b5bc:	4601      	mov	r1, r0
 800b5be:	2300      	movs	r3, #0
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f00d f8ca 	bl	801875c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800b5c8:	bf00      	nop
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd90      	pop	{r4, r7, pc}

0800b5d0 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 800b5d0:	b590      	push	{r4, r7, lr}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800b5d8:	f000 fb00 	bl	800bbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	6879      	ldr	r1, [r7, #4]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f00c fea9 	bl	8018338 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 800b5e6:	f000 faf9 	bl	800bbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	f005 ff32 	bl	8011454 <_Z27getCurrentNewArrayAllocatorv>
 800b5f0:	4601      	mov	r1, r0
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f00d f8b0 	bl	801875c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800b5fc:	bf00      	nop
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	bd90      	pop	{r4, r7, pc}

0800b604 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800b60c:	4b04      	ldr	r3, [pc, #16]	; (800b620 <_ZL19normal_operator_newj+0x1c>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	4798      	blx	r3
 800b614:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800b616:	68fb      	ldr	r3, [r7, #12]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3710      	adds	r7, #16
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	200000c8 	.word	0x200000c8

0800b624 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800b62c:	4b04      	ldr	r3, [pc, #16]	; (800b640 <_ZL27normal_operator_new_nothrowj+0x1c>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	4798      	blx	r3
 800b634:	4603      	mov	r3, r0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3708      	adds	r7, #8
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	200000c8 	.word	0x200000c8

0800b644 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b086      	sub	sp, #24
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800b650:	4b04      	ldr	r3, [pc, #16]	; (800b664 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	4798      	blx	r3
 800b658:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800b65a:	697b      	ldr	r3, [r7, #20]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3718      	adds	r7, #24
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	200000c8 	.word	0x200000c8

0800b668 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800b670:	4b04      	ldr	r3, [pc, #16]	; (800b684 <_ZL25normal_operator_new_arrayj+0x1c>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	4798      	blx	r3
 800b678:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800b67a:	68fb      	ldr	r3, [r7, #12]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3710      	adds	r7, #16
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	200000c8 	.word	0x200000c8

0800b688 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800b690:	4b04      	ldr	r3, [pc, #16]	; (800b6a4 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	4798      	blx	r3
 800b698:	4603      	mov	r3, r0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3708      	adds	r7, #8
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	200000c8 	.word	0x200000c8

0800b6a8 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800b6b4:	4b04      	ldr	r3, [pc, #16]	; (800b6c8 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68f8      	ldr	r0, [r7, #12]
 800b6ba:	4798      	blx	r3
 800b6bc:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800b6be:	697b      	ldr	r3, [r7, #20]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	200000c8 	.word	0x200000c8

0800b6cc <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800b6d4:	4b03      	ldr	r3, [pc, #12]	; (800b6e4 <_ZL22normal_operator_deletePv+0x18>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	4798      	blx	r3
}
 800b6dc:	bf00      	nop
 800b6de:	3708      	adds	r7, #8
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	200000d0 	.word	0x200000d0

0800b6e8 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800b6f0:	4b03      	ldr	r3, [pc, #12]	; (800b700 <_ZL28normal_operator_delete_arrayPv+0x18>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	4798      	blx	r3
}
 800b6f8:	bf00      	nop
 800b6fa:	3708      	adds	r7, #8
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	200000d0 	.word	0x200000d0

0800b704 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 800b70c:	4b04      	ldr	r3, [pc, #16]	; (800b720 <_Znwj+0x1c>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	4798      	blx	r3
 800b714:	4603      	mov	r3, r0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3708      	adds	r7, #8
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	2000002c 	.word	0x2000002c

0800b724 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 800b730:	4b05      	ldr	r3, [pc, #20]	; (800b748 <_ZnwjPKci+0x24>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	68b9      	ldr	r1, [r7, #8]
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	4798      	blx	r3
 800b73c:	4603      	mov	r3, r0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	20000034 	.word	0x20000034

0800b74c <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 800b756:	4b04      	ldr	r3, [pc, #16]	; (800b768 <_ZdlPvj+0x1c>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	4798      	blx	r3
}
 800b75e:	bf00      	nop
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	20000044 	.word	0x20000044

0800b76c <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 800b778:	4b05      	ldr	r3, [pc, #20]	; (800b790 <_ZnajPKci+0x24>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	68b9      	ldr	r1, [r7, #8]
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	4798      	blx	r3
 800b784:	4603      	mov	r3, r0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	20000040 	.word	0x20000040

0800b794 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 800b79c:	4b03      	ldr	r3, [pc, #12]	; (800b7ac <_ZdaPv+0x18>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	4798      	blx	r3
}
 800b7a4:	bf00      	nop
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	20000048 	.word	0x20000048

0800b7b0 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 800b7ba:	4b04      	ldr	r3, [pc, #16]	; (800b7cc <_ZdaPvj+0x1c>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	4798      	blx	r3
}
 800b7c2:	bf00      	nop
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	20000048 	.word	0x20000048

0800b7d0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 800b7d4:	4b12      	ldr	r3, [pc, #72]	; (800b820 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 800b7d6:	4a13      	ldr	r2, [pc, #76]	; (800b824 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 800b7d8:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 800b7da:	4b13      	ldr	r3, [pc, #76]	; (800b828 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 800b7dc:	4a13      	ldr	r2, [pc, #76]	; (800b82c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 800b7de:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 800b7e0:	4b13      	ldr	r3, [pc, #76]	; (800b830 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 800b7e2:	4a14      	ldr	r2, [pc, #80]	; (800b834 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 800b7e4:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 800b7e6:	4b14      	ldr	r3, [pc, #80]	; (800b838 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 800b7e8:	4a14      	ldr	r2, [pc, #80]	; (800b83c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 800b7ea:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 800b7ec:	4b14      	ldr	r3, [pc, #80]	; (800b840 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 800b7ee:	4a15      	ldr	r2, [pc, #84]	; (800b844 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 800b7f0:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 800b7f2:	4b15      	ldr	r3, [pc, #84]	; (800b848 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 800b7f4:	4a15      	ldr	r2, [pc, #84]	; (800b84c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 800b7f6:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 800b7f8:	4b15      	ldr	r3, [pc, #84]	; (800b850 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 800b7fa:	4a16      	ldr	r2, [pc, #88]	; (800b854 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 800b7fc:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 800b7fe:	4b16      	ldr	r3, [pc, #88]	; (800b858 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 800b800:	4a16      	ldr	r2, [pc, #88]	; (800b85c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 800b802:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 800b804:	4b16      	ldr	r3, [pc, #88]	; (800b860 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 800b806:	4a17      	ldr	r2, [pc, #92]	; (800b864 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 800b808:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 800b80a:	4b17      	ldr	r3, [pc, #92]	; (800b868 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 800b80c:	4a17      	ldr	r2, [pc, #92]	; (800b86c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 800b80e:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 800b810:	4b17      	ldr	r3, [pc, #92]	; (800b870 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 800b812:	4a18      	ldr	r2, [pc, #96]	; (800b874 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 800b814:	601a      	str	r2, [r3, #0]

#endif
}
 800b816:	bf00      	nop
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr
 800b820:	2000002c 	.word	0x2000002c
 800b824:	0800b605 	.word	0x0800b605
 800b828:	20000030 	.word	0x20000030
 800b82c:	0800b625 	.word	0x0800b625
 800b830:	20000034 	.word	0x20000034
 800b834:	0800b645 	.word	0x0800b645
 800b838:	20000038 	.word	0x20000038
 800b83c:	0800b669 	.word	0x0800b669
 800b840:	2000003c 	.word	0x2000003c
 800b844:	0800b689 	.word	0x0800b689
 800b848:	20000040 	.word	0x20000040
 800b84c:	0800b6a9 	.word	0x0800b6a9
 800b850:	20000044 	.word	0x20000044
 800b854:	0800b6cd 	.word	0x0800b6cd
 800b858:	20000048 	.word	0x20000048
 800b85c:	0800b6e9 	.word	0x0800b6e9
 800b860:	20000014 	.word	0x20000014
 800b864:	0800b3e1 	.word	0x0800b3e1
 800b868:	2000001c 	.word	0x2000001c
 800b86c:	0800b405 	.word	0x0800b405
 800b870:	20000018 	.word	0x20000018
 800b874:	0800b42d 	.word	0x0800b42d

0800b878 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 800b878:	b480      	push	{r7}
 800b87a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 800b87c:	4b08      	ldr	r3, [pc, #32]	; (800b8a0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a08      	ldr	r2, [pc, #32]	; (800b8a4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d004      	beq.n	800b890 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 800b886:	4b06      	ldr	r3, [pc, #24]	; (800b8a0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a07      	ldr	r2, [pc, #28]	; (800b8a8 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d101      	bne.n	800b894 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 800b890:	2301      	movs	r3, #1
 800b892:	e000      	b.n	800b896 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 800b894:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 800b896:	4618      	mov	r0, r3
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr
 800b8a0:	2000002c 	.word	0x2000002c
 800b8a4:	0800b48d 	.word	0x0800b48d
 800b8a8:	0800b44d 	.word	0x0800b44d

0800b8ac <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 800b8b0:	4b1f      	ldr	r3, [pc, #124]	; (800b930 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	4a1e      	ldr	r2, [pc, #120]	; (800b930 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800b8b8:	6013      	str	r3, [r2, #0]
 800b8ba:	4b1d      	ldr	r3, [pc, #116]	; (800b930 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	bfcc      	ite	gt
 800b8c2:	2301      	movgt	r3, #1
 800b8c4:	2300      	movle	r3, #0
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d12e      	bne.n	800b92a <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 800b8cc:	4b19      	ldr	r3, [pc, #100]	; (800b934 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a19      	ldr	r2, [pc, #100]	; (800b938 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 800b8d2:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 800b8d4:	4b19      	ldr	r3, [pc, #100]	; (800b93c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a19      	ldr	r2, [pc, #100]	; (800b940 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 800b8da:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 800b8dc:	4b19      	ldr	r3, [pc, #100]	; (800b944 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a19      	ldr	r2, [pc, #100]	; (800b948 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 800b8e2:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 800b8e4:	4b19      	ldr	r3, [pc, #100]	; (800b94c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a19      	ldr	r2, [pc, #100]	; (800b950 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 800b8ea:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 800b8ec:	4b19      	ldr	r3, [pc, #100]	; (800b954 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a19      	ldr	r2, [pc, #100]	; (800b958 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 800b8f2:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 800b8f4:	4b19      	ldr	r3, [pc, #100]	; (800b95c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a19      	ldr	r2, [pc, #100]	; (800b960 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 800b8fa:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 800b8fc:	4b19      	ldr	r3, [pc, #100]	; (800b964 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a19      	ldr	r2, [pc, #100]	; (800b968 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 800b902:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 800b904:	4b19      	ldr	r3, [pc, #100]	; (800b96c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4a19      	ldr	r2, [pc, #100]	; (800b970 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 800b90a:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 800b90c:	4b19      	ldr	r3, [pc, #100]	; (800b974 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a19      	ldr	r2, [pc, #100]	; (800b978 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 800b912:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 800b914:	4b19      	ldr	r3, [pc, #100]	; (800b97c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a19      	ldr	r2, [pc, #100]	; (800b980 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 800b91a:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 800b91c:	4b19      	ldr	r3, [pc, #100]	; (800b984 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a19      	ldr	r2, [pc, #100]	; (800b988 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 800b922:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 800b924:	f7ff ff54 	bl	800b7d0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 800b928:	e000      	b.n	800b92c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 800b92a:	bf00      	nop
#endif
}
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	20000908 	.word	0x20000908
 800b934:	2000002c 	.word	0x2000002c
 800b938:	2000004c 	.word	0x2000004c
 800b93c:	20000030 	.word	0x20000030
 800b940:	20000050 	.word	0x20000050
 800b944:	20000034 	.word	0x20000034
 800b948:	20000054 	.word	0x20000054
 800b94c:	20000038 	.word	0x20000038
 800b950:	20000058 	.word	0x20000058
 800b954:	2000003c 	.word	0x2000003c
 800b958:	2000005c 	.word	0x2000005c
 800b95c:	20000040 	.word	0x20000040
 800b960:	20000060 	.word	0x20000060
 800b964:	20000044 	.word	0x20000044
 800b968:	20000064 	.word	0x20000064
 800b96c:	20000048 	.word	0x20000048
 800b970:	20000068 	.word	0x20000068
 800b974:	20000014 	.word	0x20000014
 800b978:	20000020 	.word	0x20000020
 800b97c:	2000001c 	.word	0x2000001c
 800b980:	20000028 	.word	0x20000028
 800b984:	20000018 	.word	0x20000018
 800b988:	20000024 	.word	0x20000024

0800b98c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 800b98c:	b480      	push	{r7}
 800b98e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 800b990:	4b1f      	ldr	r3, [pc, #124]	; (800ba10 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	3b01      	subs	r3, #1
 800b996:	4a1e      	ldr	r2, [pc, #120]	; (800ba10 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800b998:	6013      	str	r3, [r2, #0]
 800b99a:	4b1d      	ldr	r3, [pc, #116]	; (800ba10 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	bfcc      	ite	gt
 800b9a2:	2301      	movgt	r3, #1
 800b9a4:	2300      	movle	r3, #0
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d12c      	bne.n	800ba06 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 800b9ac:	4b19      	ldr	r3, [pc, #100]	; (800ba14 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a19      	ldr	r2, [pc, #100]	; (800ba18 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 800b9b2:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 800b9b4:	4b19      	ldr	r3, [pc, #100]	; (800ba1c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a19      	ldr	r2, [pc, #100]	; (800ba20 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 800b9ba:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 800b9bc:	4b19      	ldr	r3, [pc, #100]	; (800ba24 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a19      	ldr	r2, [pc, #100]	; (800ba28 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 800b9c2:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 800b9c4:	4b19      	ldr	r3, [pc, #100]	; (800ba2c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a19      	ldr	r2, [pc, #100]	; (800ba30 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 800b9ca:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 800b9cc:	4b19      	ldr	r3, [pc, #100]	; (800ba34 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a19      	ldr	r2, [pc, #100]	; (800ba38 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 800b9d2:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 800b9d4:	4b19      	ldr	r3, [pc, #100]	; (800ba3c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a19      	ldr	r2, [pc, #100]	; (800ba40 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 800b9da:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 800b9dc:	4b19      	ldr	r3, [pc, #100]	; (800ba44 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a19      	ldr	r2, [pc, #100]	; (800ba48 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 800b9e2:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 800b9e4:	4b19      	ldr	r3, [pc, #100]	; (800ba4c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a19      	ldr	r2, [pc, #100]	; (800ba50 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 800b9ea:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 800b9ec:	4b19      	ldr	r3, [pc, #100]	; (800ba54 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a19      	ldr	r2, [pc, #100]	; (800ba58 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 800b9f2:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 800b9f4:	4b19      	ldr	r3, [pc, #100]	; (800ba5c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a19      	ldr	r2, [pc, #100]	; (800ba60 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 800b9fa:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 800b9fc:	4b19      	ldr	r3, [pc, #100]	; (800ba64 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4a19      	ldr	r2, [pc, #100]	; (800ba68 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 800ba02:	6013      	str	r3, [r2, #0]
 800ba04:	e000      	b.n	800ba08 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 800ba06:	bf00      	nop
#endif
}
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr
 800ba10:	20000908 	.word	0x20000908
 800ba14:	2000004c 	.word	0x2000004c
 800ba18:	2000002c 	.word	0x2000002c
 800ba1c:	20000050 	.word	0x20000050
 800ba20:	20000030 	.word	0x20000030
 800ba24:	20000054 	.word	0x20000054
 800ba28:	20000034 	.word	0x20000034
 800ba2c:	20000058 	.word	0x20000058
 800ba30:	20000038 	.word	0x20000038
 800ba34:	2000005c 	.word	0x2000005c
 800ba38:	2000003c 	.word	0x2000003c
 800ba3c:	20000060 	.word	0x20000060
 800ba40:	20000040 	.word	0x20000040
 800ba44:	20000064 	.word	0x20000064
 800ba48:	20000044 	.word	0x20000044
 800ba4c:	20000068 	.word	0x20000068
 800ba50:	20000048 	.word	0x20000048
 800ba54:	20000020 	.word	0x20000020
 800ba58:	20000014 	.word	0x20000014
 800ba5c:	20000028 	.word	0x20000028
 800ba60:	2000001c 	.word	0x2000001c
 800ba64:	20000024 	.word	0x20000024
 800ba68:	20000018 	.word	0x20000018

0800ba6c <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
    {
 800ba74:	4a05      	ldr	r2, [pc, #20]	; (800ba8c <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	601a      	str	r2, [r3, #0]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7ff fc15 	bl	800b2ac <_ZN17MemoryLeakFailureD1Ev>
    }
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	4618      	mov	r0, r3
 800ba86:	3708      	adds	r7, #8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	08029c68 	.word	0x08029c68

0800ba90 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
    }
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f7ff ffe7 	bl	800ba6c <_ZN25MemoryLeakWarningReporterD1Ev>
 800ba9e:	2104      	movs	r1, #4
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7ff fe53 	bl	800b74c <_ZdlPvj>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	4618      	mov	r0, r3
 800baaa:	3708      	adds	r7, #8
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 800bab0:	b480      	push	{r7}
 800bab2:	b083      	sub	sp, #12
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	4a04      	ldr	r2, [pc, #16]	; (800bacc <_ZN14TestTerminatorC1Ev+0x1c>)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	601a      	str	r2, [r3, #0]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4618      	mov	r0, r3
 800bac2:	370c      	adds	r7, #12
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr
 800bacc:	0802a614 	.word	0x0802a614

0800bad0 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	4618      	mov	r0, r3
 800badc:	f7ff ffe8 	bl	800bab0 <_ZN14TestTerminatorC1Ev>
 800bae0:	4a03      	ldr	r2, [pc, #12]	; (800baf0 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	601a      	str	r2, [r3, #0]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4618      	mov	r0, r3
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	0802a5ec 	.word	0x0802a5ec

0800baf4 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 800baf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baf6:	b099      	sub	sp, #100	; 0x64
 800baf8:	af02      	add	r7, sp, #8
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 800bafe:	f009 fdb7 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 800bb02:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 800bb04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	339c      	adds	r3, #156	; 0x9c
 800bb0a:	681c      	ldr	r4, [r3, #0]
 800bb0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bb10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb12:	4618      	mov	r0, r3
 800bb14:	f008 fbc4 	bl	80142a0 <_ZNK10UtestShell7getNameEv>
 800bb18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f002 fd4f 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800bb22:	4605      	mov	r5, r0
 800bb24:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bb26:	f008 fc9b 	bl	8014460 <_ZNK10UtestShell13getLineNumberEv>
 800bb2a:	4606      	mov	r6, r0
 800bb2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bb30:	6839      	ldr	r1, [r7, #0]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f002 f9b9 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800bb38:	f107 000c 	add.w	r0, r7, #12
 800bb3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	4633      	mov	r3, r6
 800bb44:	462a      	mov	r2, r5
 800bb46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb48:	f004 fd14 	bl	8010574 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	653b      	str	r3, [r7, #80]	; 0x50
 800bb50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7ff ffbb 	bl	800bad0 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800bb5a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800bb5e:	f107 030c 	add.w	r3, r7, #12
 800bb62:	4619      	mov	r1, r3
 800bb64:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bb66:	47a0      	blx	r4
 800bb68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f009 fe79 	bl	8015864 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800bb72:	f107 030c 	add.w	r3, r7, #12
 800bb76:	4618      	mov	r0, r3
 800bb78:	f000 f9ac 	bl	800bed4 <_ZN11FailFailureD1Ev>
 800bb7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bb80:	4618      	mov	r0, r3
 800bb82:	f002 fd4a 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800bb86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f002 fd45 	bl	800e61a <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 800bb90:	bf00      	nop
 800bb92:	375c      	adds	r7, #92	; 0x5c
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bb98 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	4a04      	ldr	r2, [pc, #16]	; (800bbb4 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	601a      	str	r2, [r3, #0]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4618      	mov	r0, r3
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr
 800bbb4:	08029c7c 	.word	0x08029c7c

0800bbb8 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7ff ffe8 	bl	800bb98 <_ZN17MemoryLeakFailureC1Ev>
 800bbc8:	4a03      	ldr	r2, [pc, #12]	; (800bbd8 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	601a      	str	r2, [r3, #0]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	08029c68 	.word	0x08029c68

0800bbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 800bbdc:	b598      	push	{r3, r4, r7, lr}
 800bbde:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 800bbe0:	4b11      	ldr	r3, [pc, #68]	; (800bc28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d11b      	bne.n	800bc20 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 800bbe8:	f7ff fe60 	bl	800b8ac <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 800bbec:	2004      	movs	r0, #4
 800bbee:	f7ff fd89 	bl	800b704 <_Znwj>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	461c      	mov	r4, r3
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f7ff ffde 	bl	800bbb8 <_ZN25MemoryLeakWarningReporterC1Ev>
 800bbfc:	4b0b      	ldr	r3, [pc, #44]	; (800bc2c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800bbfe:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 800bc00:	f241 1050 	movw	r0, #4432	; 0x1150
 800bc04:	f7ff fd7e 	bl	800b704 <_Znwj>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	461c      	mov	r4, r3
 800bc0c:	4b07      	ldr	r3, [pc, #28]	; (800bc2c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4619      	mov	r1, r3
 800bc12:	4620      	mov	r0, r4
 800bc14:	f00c fa3e 	bl	8018094 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 800bc18:	4b03      	ldr	r3, [pc, #12]	; (800bc28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800bc1a:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 800bc1c:	f7ff feb6 	bl	800b98c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 800bc20:	4b01      	ldr	r3, [pc, #4]	; (800bc28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800bc22:	681b      	ldr	r3, [r3, #0]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	bd98      	pop	{r3, r4, r7, pc}
 800bc28:	20000910 	.word	0x20000910
 800bc2c:	2000090c 	.word	0x2000090c

0800bc30 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	460b      	mov	r3, r1
 800bc3a:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	78fa      	ldrb	r2, [r7, #3]
 800bc40:	765a      	strb	r2, [r3, #25]
}
 800bc42:	bf00      	nop
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
	...

0800bc50 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 800bc54:	f7ff fdbc 	bl	800b7d0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 800bc58:	4b0b      	ldr	r3, [pc, #44]	; (800bc88 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d004      	beq.n	800bc6a <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	3204      	adds	r2, #4
 800bc64:	6812      	ldr	r2, [r2, #0]
 800bc66:	4618      	mov	r0, r3
 800bc68:	4790      	blx	r2
    delete globalReporter;
 800bc6a:	4b08      	ldr	r3, [pc, #32]	; (800bc8c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d004      	beq.n	800bc7c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	3204      	adds	r2, #4
 800bc76:	6812      	ldr	r2, [r2, #0]
 800bc78:	4618      	mov	r0, r3
 800bc7a:	4790      	blx	r2
    globalDetector = NULLPTR;
 800bc7c:	4b02      	ldr	r3, [pc, #8]	; (800bc88 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800bc7e:	2200      	movs	r2, #0
 800bc80:	601a      	str	r2, [r3, #0]
}
 800bc82:	bf00      	nop
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	20000910 	.word	0x20000910
 800bc8c:	2000090c 	.word	0x2000090c

0800bc90 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	68b9      	ldr	r1, [r7, #8]
 800bca0:	4618      	mov	r0, r3
 800bca2:	f006 fdfd 	bl	80128a0 <_ZN10TestPluginC1ERK12SimpleString>
 800bca6:	4a14      	ldr	r2, [pc, #80]	; (800bcf8 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	601a      	str	r2, [r3, #0]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	761a      	strb	r2, [r3, #24]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	765a      	strb	r2, [r3, #25]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 800bcbe:	4b0f      	ldr	r3, [pc, #60]	; (800bcfc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d102      	bne.n	800bccc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 800bcc6:	4a0d      	ldr	r2, [pc, #52]	; (800bcfc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d003      	beq.n	800bcda <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	615a      	str	r2, [r3, #20]
 800bcd8:	e004      	b.n	800bce4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 800bcda:	f7ff ff7f 	bl	800bbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800bcde:	4602      	mov	r2, r0
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	695b      	ldr	r3, [r3, #20]
 800bce8:	4618      	mov	r0, r3
 800bcea:	f00c fa69 	bl	80181c0 <_ZN18MemoryLeakDetector6enableEv>
}
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3710      	adds	r7, #16
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	08029c90 	.word	0x08029c90
 800bcfc:	20000914 	.word	0x20000914

0800bd00 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	4a09      	ldr	r2, [pc, #36]	; (800bd30 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	7e5b      	ldrb	r3, [r3, #25]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d003      	beq.n	800bd1e <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 800bd16:	f7ff fd5b 	bl	800b7d0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800bd1a:	f7ff ff99 	bl	800bc50 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4618      	mov	r0, r3
 800bd22:	f006 fdf9 	bl	8012918 <_ZN10TestPluginD1Ev>
    }
}
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	08029c90 	.word	0x08029c90

0800bd34 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
}
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f7ff ffdf 	bl	800bd00 <_ZN23MemoryLeakWarningPluginD1Ev>
 800bd42:	2124      	movs	r1, #36	; 0x24
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f7ff fd01 	bl	800b74c <_ZdlPvj>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3708      	adds	r7, #8
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	695b      	ldr	r3, [r3, #20]
 800bd64:	4618      	mov	r0, r3
 800bd66:	f00c fa0e 	bl	8018186 <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7fd ffb0 	bl	8009cd0 <_ZNK10TestResult15getFailureCountEv>
 800bd70:	4602      	mov	r2, r0
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	621a      	str	r2, [r3, #32]
}
 800bd76:	bf00      	nop
 800bd78:	3710      	adds	r7, #16
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
	...

0800bd80 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 800bd80:	b590      	push	{r4, r7, lr}
 800bd82:	b097      	sub	sp, #92	; 0x5c
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	695b      	ldr	r3, [r3, #20]
 800bd90:	4618      	mov	r0, r3
 800bd92:	f00c fa08 	bl	80181a6 <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	695b      	ldr	r3, [r3, #20]
 800bd9a:	2103      	movs	r1, #3
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f00c fda5 	bl	80188ec <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800bda2:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	7e1b      	ldrb	r3, [r3, #24]
 800bda8:	f083 0301 	eor.w	r3, r3, #1
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d00e      	beq.n	800bdd0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	69db      	ldr	r3, [r3, #28]
 800bdb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d009      	beq.n	800bdd0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6a1c      	ldr	r4, [r3, #32]
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f7fd ff85 	bl	8009cd0 <_ZNK10TestResult15getFailureCountEv>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	429c      	cmp	r4, r3
 800bdca:	d101      	bne.n	800bdd0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800bdcc:	2301      	movs	r3, #1
 800bdce:	e000      	b.n	800bdd2 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d04c      	beq.n	800be70 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 800bdd6:	f7ff fd4f 	bl	800b878 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 800bdda:	4603      	mov	r3, r0
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d028      	beq.n	800be32 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	695b      	ldr	r3, [r3, #20]
 800bde4:	2103      	movs	r1, #3
 800bde6:	4618      	mov	r0, r3
 800bde8:	f00c fd45 	bl	8018876 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800bdec:	4602      	mov	r2, r0
 800bdee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800bdf2:	4611      	mov	r1, r2
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f002 f858 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800bdfa:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800bdfe:	f107 0310 	add.w	r3, r7, #16
 800be02:	68b9      	ldr	r1, [r7, #8]
 800be04:	4618      	mov	r0, r3
 800be06:	f003 feaf 	bl	800fb68 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800be0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800be0e:	4618      	mov	r0, r3
 800be10:	f002 fc03 	bl	800e61a <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	3334      	adds	r3, #52	; 0x34
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f107 0210 	add.w	r2, r7, #16
 800be20:	4611      	mov	r1, r2
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800be26:	f107 0310 	add.w	r3, r7, #16
 800be2a:	4618      	mov	r0, r3
 800be2c:	f003 ff5c 	bl	800fce8 <_ZN11TestFailureD1Ev>
 800be30:	e01e      	b.n	800be70 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	69db      	ldr	r3, [r3, #28]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d01a      	beq.n	800be70 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	3338      	adds	r3, #56	; 0x38
 800be40:	681c      	ldr	r4, [r3, #0]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	69db      	ldr	r3, [r3, #28]
 800be46:	461a      	mov	r2, r3
 800be48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800be4c:	4910      	ldr	r1, [pc, #64]	; (800be90 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 800be4e:	4618      	mov	r0, r3
 800be50:	f003 f8ea 	bl	800f028 <_Z16StringFromFormatPKcz>
 800be54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800be58:	4618      	mov	r0, r3
 800be5a:	f002 fbb1 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800be5e:	4603      	mov	r3, r0
 800be60:	4619      	mov	r1, r3
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	47a0      	blx	r4
 800be66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800be6a:	4618      	mov	r0, r3
 800be6c:	f002 fbd5 	bl	800e61a <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	695b      	ldr	r3, [r3, #20]
 800be74:	4618      	mov	r0, r3
 800be76:	f00c fd13 	bl	80188a0 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2200      	movs	r2, #0
 800be7e:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2200      	movs	r2, #0
 800be84:	61da      	str	r2, [r3, #28]
}
 800be86:	bf00      	nop
 800be88:	375c      	adds	r7, #92	; 0x5c
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd90      	pop	{r4, r7, pc}
 800be8e:	bf00      	nop
 800be90:	08025bb8 	.word	0x08025bb8

0800be94 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	695b      	ldr	r3, [r3, #20]
 800bea2:	2102      	movs	r1, #2
 800bea4:	4618      	mov	r0, r3
 800bea6:	f00c fd21 	bl	80188ec <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800beaa:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d007      	beq.n	800bec4 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	695b      	ldr	r3, [r3, #20]
 800beb8:	2102      	movs	r1, #2
 800beba:	4618      	mov	r0, r3
 800bebc:	f00c fcdb 	bl	8018876 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800bec0:	4603      	mov	r3, r0
 800bec2:	e000      	b.n	800bec6 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 800bec4:	4b02      	ldr	r3, [pc, #8]	; (800bed0 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3710      	adds	r7, #16
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	08025bf8 	.word	0x08025bf8

0800bed4 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	4a05      	ldr	r2, [pc, #20]	; (800bef4 <_ZN11FailFailureD1Ev+0x20>)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	601a      	str	r2, [r3, #0]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4618      	mov	r0, r3
 800bee6:	f003 feff 	bl	800fce8 <_ZN11TestFailureD1Ev>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4618      	mov	r0, r3
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	08029cd8 	.word	0x08029cd8

0800bef8 <_ZN11FailFailureD0Ev>:
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f7ff ffe7 	bl	800bed4 <_ZN11FailFailureD1Ev>
 800bf06:	2134      	movs	r1, #52	; 0x34
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f7ff fc1f 	bl	800b74c <_ZdlPvj>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	4618      	mov	r0, r3
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4618      	mov	r0, r3
 800bf26:	370c      	adds	r7, #12
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	370c      	adds	r7, #12
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	4a06      	ldr	r2, [pc, #24]	; (800bf6c <_ZN19MockFailureReporterC1Ev+0x24>)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	601a      	str	r2, [r3, #0]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	711a      	strb	r2, [r3, #4]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	370c      	adds	r7, #12
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop
 800bf6c:	0802aeb4 	.word	0x0802aeb4

0800bf70 <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 800bf70:	b480      	push	{r7}
 800bf72:	b083      	sub	sp, #12
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	4a04      	ldr	r2, [pc, #16]	; (800bf8c <_ZN19MockFailureReporterD1Ev+0x1c>)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	601a      	str	r2, [r3, #0]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	4618      	mov	r0, r3
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr
 800bf8c:	0802aeb4 	.word	0x0802aeb4

0800bf90 <_ZN19MockFailureReporterD0Ev>:
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f7ff ffe9 	bl	800bf70 <_ZN19MockFailureReporterD1Ev>
 800bf9e:	2108      	movs	r1, #8
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f7ff fbd3 	bl	800b74c <_ZdlPvj>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3708      	adds	r7, #8
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	4a05      	ldr	r2, [pc, #20]	; (800bfd0 <_ZN11MockFailureD1Ev+0x20>)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	601a      	str	r2, [r3, #0]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f003 fe91 	bl	800fce8 <_ZN11TestFailureD1Ev>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	08029e2c 	.word	0x08029e2c

0800bfd4 <_ZN11MockFailureD0Ev>:
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f7ff ffe7 	bl	800bfb0 <_ZN11MockFailureD1Ev>
 800bfe2:	2134      	movs	r1, #52	; 0x34
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f7ff fbb1 	bl	800b74c <_ZdlPvj>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4618      	mov	r0, r3
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 800bff4:	b590      	push	{r4, r7, lr}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
 800bffe:	4a16      	ldr	r2, [pc, #88]	; (800c058 <_ZN14MockNamedValueC1ERKS_+0x64>)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	601a      	str	r2, [r3, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	1d1a      	adds	r2, r3, #4
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	3304      	adds	r3, #4
 800c00c:	4619      	mov	r1, r3
 800c00e:	4610      	mov	r0, r2
 800c010:	f001 ff9f 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f103 020c 	add.w	r2, r3, #12
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	330c      	adds	r3, #12
 800c01e:	4619      	mov	r1, r3
 800c020:	4610      	mov	r0, r2
 800c022:	f001 ff96 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	f102 0418 	add.w	r4, r2, #24
 800c02e:	3318      	adds	r3, #24
 800c030:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c032:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	629a      	str	r2, [r3, #40]	; 0x28
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	62da      	str	r2, [r3, #44]	; 0x2c
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	631a      	str	r2, [r3, #48]	; 0x30
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	4618      	mov	r0, r3
 800c052:	370c      	adds	r7, #12
 800c054:	46bd      	mov	sp, r7
 800c056:	bd90      	pop	{r4, r7, pc}
 800c058:	0802aef4 	.word	0x0802aef4

0800c05c <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b086      	sub	sp, #24
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 800c066:	f107 030c 	add.w	r3, r7, #12
 800c06a:	4916      	ldr	r1, [pc, #88]	; (800c0c4 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 800c06c:	4618      	mov	r0, r3
 800c06e:	f001 ff1c 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800c072:	f107 030c 	add.w	r3, r7, #12
 800c076:	4619      	mov	r1, r3
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f002 fb1f 	bl	800e6bc <_ZneRK12SimpleStringS1_>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d005      	beq.n	800c090 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 800c084:	6879      	ldr	r1, [r7, #4]
 800c086:	4810      	ldr	r0, [pc, #64]	; (800c0c8 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800c088:	f000 ff70 	bl	800cf6c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 800c08c:	4603      	mov	r3, r0
 800c08e:	e000      	b.n	800c092 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 800c090:	4b0d      	ldr	r3, [pc, #52]	; (800c0c8 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800c092:	617b      	str	r3, [r7, #20]
 800c094:	f107 030c 	add.w	r3, r7, #12
 800c098:	4618      	mov	r0, r3
 800c09a:	f002 fabe 	bl	800e61a <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	33a8      	adds	r3, #168	; 0xa8
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	6839      	ldr	r1, [r7, #0]
 800c0a8:	6978      	ldr	r0, [r7, #20]
 800c0aa:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	33ac      	adds	r3, #172	; 0xac
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	6978      	ldr	r0, [r7, #20]
 800c0b6:	4798      	blx	r3
    return mock_support;
 800c0b8:	697b      	ldr	r3, [r7, #20]
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3718      	adds	r7, #24
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	08025bfc 	.word	0x08025bfc
 800c0c8:	20000918 	.word	0x20000918

0800c0cc <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 800c0d6:	4a21      	ldr	r2, [pc, #132]	; (800c15c <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	601a      	str	r2, [r3, #0]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	605a      	str	r2, [r3, #4]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	609a      	str	r2, [r3, #8]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	731a      	strb	r2, [r3, #12]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f103 0218 	add.w	r2, r3, #24
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	615a      	str	r2, [r3, #20]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	3318      	adds	r3, #24
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7ff ff23 	bl	800bf48 <_ZN19MockFailureReporterC1Ev>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	3320      	adds	r3, #32
 800c106:	4618      	mov	r0, r3
 800c108:	f010 fefc 	bl	801cf04 <_ZN21MockExpectedCallsListC1Ev>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2200      	movs	r2, #0
 800c110:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2201      	movs	r2, #1
 800c118:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	62da      	str	r2, [r3, #44]	; 0x2c
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	3330      	adds	r3, #48	; 0x30
 800c126:	4618      	mov	r0, r3
 800c128:	f014 fbe8 	bl	80208fc <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	3338      	adds	r3, #56	; 0x38
 800c130:	4618      	mov	r0, r3
 800c132:	f014 faf2 	bl	802071a <_ZN18MockNamedValueListC1Ev>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	333c      	adds	r3, #60	; 0x3c
 800c13a:	6839      	ldr	r1, [r7, #0]
 800c13c:	4618      	mov	r0, r3
 800c13e:	f001 ff08 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2200      	movs	r2, #0
 800c146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 800c14a:	2100      	movs	r1, #0
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f000 f894 	bl	800c27a <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	4618      	mov	r0, r3
 800c156:	3708      	adds	r7, #8
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	08029d04 	.word	0x08029d04

0800c160 <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	4a0d      	ldr	r2, [pc, #52]	; (800c1a0 <_ZN11MockSupportD1Ev+0x40>)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	601a      	str	r2, [r3, #0]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	333c      	adds	r3, #60	; 0x3c
 800c172:	4618      	mov	r0, r3
 800c174:	f002 fa51 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	3330      	adds	r3, #48	; 0x30
 800c17c:	4618      	mov	r0, r3
 800c17e:	f014 fbd1 	bl	8020924 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	3320      	adds	r3, #32
 800c186:	4618      	mov	r0, r3
 800c188:	f010 fed0 	bl	801cf2c <_ZN21MockExpectedCallsListD1Ev>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	3318      	adds	r3, #24
 800c190:	4618      	mov	r0, r3
 800c192:	f7ff feed 	bl	800bf70 <_ZN19MockFailureReporterD1Ev>
{
}
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4618      	mov	r0, r3
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	08029d04 	.word	0x08029d04

0800c1a4 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
}
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f7ff ffd7 	bl	800c160 <_ZN11MockSupportD1Ev>
 800c1b2:	2148      	movs	r1, #72	; 0x48
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f7ff fac9 	bl	800b74c <_ZdlPvj>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	691a      	ldr	r2, [r3, #16]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	691b      	ldr	r3, [r3, #16]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	3310      	adds	r3, #16
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	78f9      	ldrb	r1, [r7, #3]
 800c1e0:	4610      	mov	r0, r2
 800c1e2:	4798      	blx	r3
}
 800c1e4:	bf00      	nop
 800c1e6:	3708      	adds	r7, #8
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b084      	sub	sp, #16
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d102      	bne.n	800c202 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	3318      	adds	r3, #24
 800c200:	e000      	b.n	800c204 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d00a      	beq.n	800c226 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	33c8      	adds	r3, #200	; 0xc8
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	6952      	ldr	r2, [r2, #20]
 800c222:	4611      	mov	r1, r2
 800c224:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	3338      	adds	r3, #56	; 0x38
 800c22a:	4618      	mov	r0, r3
 800c22c:	f014 fb0b 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 800c230:	60f8      	str	r0, [r7, #12]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d01c      	beq.n	800c272 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 800c238:	68f9      	ldr	r1, [r7, #12]
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 ff26 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	bf14      	ite	ne
 800c246:	2301      	movne	r3, #1
 800c248:	2300      	moveq	r3, #0
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00b      	beq.n	800c268 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 800c250:	68f9      	ldr	r1, [r7, #12]
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 ff1a 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c258:	4603      	mov	r3, r0
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	32a4      	adds	r2, #164	; 0xa4
 800c25e:	6812      	ldr	r2, [r2, #0]
 800c260:	6879      	ldr	r1, [r7, #4]
 800c262:	6949      	ldr	r1, [r1, #20]
 800c264:	4618      	mov	r0, r3
 800c266:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c268:	68f8      	ldr	r0, [r7, #12]
 800c26a:	f014 f9f5 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	e7df      	b.n	800c232 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 800c272:	bf00      	nop
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800c27a:	b480      	push	{r7}
 800c27c:	b083      	sub	sp, #12
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d102      	bne.n	800c290 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	695b      	ldr	r3, [r3, #20]
 800c28e:	e000      	b.n	800c292 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	6113      	str	r3, [r2, #16]
}
 800c296:	bf00      	nop
 800c298:	370c      	adds	r7, #12
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr

0800c2a2 <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 800c2a2:	b580      	push	{r7, lr}
 800c2a4:	b082      	sub	sp, #8
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	3330      	adds	r3, #48	; 0x30
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f012 fb10 	bl	801e8d4 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 800c2b4:	bf00      	nop
 800c2b6:	3708      	adds	r7, #8
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 800c2bc:	b590      	push	{r4, r7, lr}
 800c2be:	b087      	sub	sp, #28
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	3330      	adds	r3, #48	; 0x30
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	68b9      	ldr	r1, [r7, #8]
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f014 fb75 	bl	80209c0 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	3338      	adds	r3, #56	; 0x38
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f014 fab3 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 800c2e0:	6178      	str	r0, [r7, #20]
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d01c      	beq.n	800c322 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 800c2e8:	6979      	ldr	r1, [r7, #20]
 800c2ea:	68f8      	ldr	r0, [r7, #12]
 800c2ec:	f000 fece 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	bf14      	ite	ne
 800c2f6:	2301      	movne	r3, #1
 800c2f8:	2300      	moveq	r3, #0
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00b      	beq.n	800c318 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 800c300:	6979      	ldr	r1, [r7, #20]
 800c302:	68f8      	ldr	r0, [r7, #12]
 800c304:	f000 fec2 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c308:	4603      	mov	r3, r0
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	32b0      	adds	r2, #176	; 0xb0
 800c30e:	6814      	ldr	r4, [r2, #0]
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	68b9      	ldr	r1, [r7, #8]
 800c314:	4618      	mov	r0, r3
 800c316:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c318:	6978      	ldr	r0, [r7, #20]
 800c31a:	f014 f99d 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 800c31e:	6178      	str	r0, [r7, #20]
 800c320:	e7df      	b.n	800c2e2 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 800c322:	bf00      	nop
 800c324:	371c      	adds	r7, #28
 800c326:	46bd      	mov	sp, r7
 800c328:	bd90      	pop	{r4, r7, pc}

0800c32a <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 800c32a:	b590      	push	{r4, r7, lr}
 800c32c:	b087      	sub	sp, #28
 800c32e:	af00      	add	r7, sp, #0
 800c330:	60f8      	str	r0, [r7, #12]
 800c332:	60b9      	str	r1, [r7, #8]
 800c334:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	3330      	adds	r3, #48	; 0x30
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	68b9      	ldr	r1, [r7, #8]
 800c33e:	4618      	mov	r0, r3
 800c340:	f014 fb5a 	bl	80209f8 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	3338      	adds	r3, #56	; 0x38
 800c348:	4618      	mov	r0, r3
 800c34a:	f014 fa7c 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 800c34e:	6178      	str	r0, [r7, #20]
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d01c      	beq.n	800c390 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 800c356:	6979      	ldr	r1, [r7, #20]
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	f000 fe97 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c35e:	4603      	mov	r3, r0
 800c360:	2b00      	cmp	r3, #0
 800c362:	bf14      	ite	ne
 800c364:	2301      	movne	r3, #1
 800c366:	2300      	moveq	r3, #0
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00b      	beq.n	800c386 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 800c36e:	6979      	ldr	r1, [r7, #20]
 800c370:	68f8      	ldr	r0, [r7, #12]
 800c372:	f000 fe8b 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c376:	4603      	mov	r3, r0
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	32b4      	adds	r2, #180	; 0xb4
 800c37c:	6814      	ldr	r4, [r2, #0]
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	68b9      	ldr	r1, [r7, #8]
 800c382:	4618      	mov	r0, r3
 800c384:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c386:	6978      	ldr	r0, [r7, #20]
 800c388:	f014 f966 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 800c38c:	6178      	str	r0, [r7, #20]
 800c38e:	e7df      	b.n	800c350 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 800c390:	bf00      	nop
 800c392:	371c      	adds	r7, #28
 800c394:	46bd      	mov	sp, r7
 800c396:	bd90      	pop	{r4, r7, pc}

0800c398 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	3330      	adds	r3, #48	; 0x30
 800c3a6:	6839      	ldr	r1, [r7, #0]
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f014 fb91 	bl	8020ad0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	3338      	adds	r3, #56	; 0x38
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f014 fa47 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 800c3b8:	60f8      	str	r0, [r7, #12]
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d01b      	beq.n	800c3f8 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 800c3c0:	68f9      	ldr	r1, [r7, #12]
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 fe62 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	bf14      	ite	ne
 800c3ce:	2301      	movne	r3, #1
 800c3d0:	2300      	moveq	r3, #0
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00a      	beq.n	800c3ee <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 800c3d8:	68f9      	ldr	r1, [r7, #12]
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 fe56 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	32b8      	adds	r2, #184	; 0xb8
 800c3e6:	6812      	ldr	r2, [r2, #0]
 800c3e8:	6839      	ldr	r1, [r7, #0]
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f014 f932 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 800c3f4:	60f8      	str	r0, [r7, #12]
 800c3f6:	e7e0      	b.n	800c3ba <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 800c3f8:	bf00      	nop
 800c3fa:	3710      	adds	r7, #16
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	3330      	adds	r3, #48	; 0x30
 800c40c:	4618      	mov	r0, r3
 800c40e:	f014 fab8 	bl	8020982 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	3338      	adds	r3, #56	; 0x38
 800c416:	4618      	mov	r0, r3
 800c418:	f014 fa15 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 800c41c:	60f8      	str	r0, [r7, #12]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d01a      	beq.n	800c45a <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 800c424:	68f9      	ldr	r1, [r7, #12]
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 fe30 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c42c:	4603      	mov	r3, r0
 800c42e:	2b00      	cmp	r3, #0
 800c430:	bf14      	ite	ne
 800c432:	2301      	movne	r3, #1
 800c434:	2300      	moveq	r3, #0
 800c436:	b2db      	uxtb	r3, r3
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d009      	beq.n	800c450 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 800c43c:	68f9      	ldr	r1, [r7, #12]
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 fe24 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c444:	4603      	mov	r3, r0
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	32bc      	adds	r2, #188	; 0xbc
 800c44a:	6812      	ldr	r2, [r2, #0]
 800c44c:	4618      	mov	r0, r3
 800c44e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f014 f901 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	e7e1      	b.n	800c41e <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 800c45a:	bf00      	nop
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}

0800c462 <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 800c462:	b580      	push	{r7, lr}
 800c464:	b084      	sub	sp, #16
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d004      	beq.n	800c47c <_ZN11MockSupport5clearEv+0x1a>
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	3204      	adds	r2, #4
 800c476:	6812      	ldr	r2, [r2, #0]
 800c478:	4618      	mov	r0, r3
 800c47a:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2200      	movs	r2, #0
 800c486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 800c48a:	f00e fe0d 	bl	801b0a8 <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	3320      	adds	r3, #32
 800c492:	4618      	mov	r0, r3
 800c494:	f011 f937 	bl	801d706 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	3338      	adds	r3, #56	; 0x38
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f014 f9c1 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 800c4c4:	60f8      	str	r0, [r7, #12]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d01a      	beq.n	800c502 <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 800c4cc:	68f9      	ldr	r1, [r7, #12]
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fddc 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c4d4:	60b8      	str	r0, [r7, #8]
        if (support) {
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d00d      	beq.n	800c4f8 <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	339c      	adds	r3, #156	; 0x9c
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	68b8      	ldr	r0, [r7, #8]
 800c4e6:	4798      	blx	r3
            delete support;
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d004      	beq.n	800c4f8 <_ZN11MockSupport5clearEv+0x96>
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	3204      	adds	r2, #4
 800c4f2:	6812      	ldr	r2, [r2, #0]
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	f014 f8ad 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	e7e1      	b.n	800c4c6 <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	3338      	adds	r3, #56	; 0x38
 800c506:	4618      	mov	r0, r3
 800c508:	f014 f915 	bl	8020736 <_ZN18MockNamedValueList5clearEv>
}
 800c50c:	bf00      	nop
 800c50e:	3710      	adds	r7, #16
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2201      	movs	r2, #1
 800c520:	731a      	strb	r2, [r3, #12]
}
 800c522:	bf00      	nop
 800c524:	370c      	adds	r7, #12
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr
	...

0800c530 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 800c530:	b590      	push	{r4, r7, lr}
 800c532:	b089      	sub	sp, #36	; 0x24
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	333c      	adds	r3, #60	; 0x3c
 800c540:	4618      	mov	r0, r3
 800c542:	f002 f859 	bl	800e5f8 <_ZNK12SimpleString7isEmptyEv>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d004      	beq.n	800c556 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 800c54c:	6879      	ldr	r1, [r7, #4]
 800c54e:	68f8      	ldr	r0, [r7, #12]
 800c550:	f001 fcff 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
 800c554:	e021      	b.n	800c59a <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800c55c:	f107 0318 	add.w	r3, r7, #24
 800c560:	4910      	ldr	r1, [pc, #64]	; (800c5a4 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 800c562:	4618      	mov	r0, r3
 800c564:	f001 fca1 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800c568:	f107 0310 	add.w	r3, r7, #16
 800c56c:	f107 0218 	add.w	r2, r7, #24
 800c570:	4621      	mov	r1, r4
 800c572:	4618      	mov	r0, r3
 800c574:	f002 f8b3 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f107 0110 	add.w	r1, r7, #16
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	4618      	mov	r0, r3
 800c582:	f002 f8ac 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 800c586:	f107 0310 	add.w	r3, r7, #16
 800c58a:	4618      	mov	r0, r3
 800c58c:	f002 f845 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800c590:	f107 0318 	add.w	r3, r7, #24
 800c594:	4618      	mov	r0, r3
 800c596:	f002 f840 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 800c59a:	68f8      	ldr	r0, [r7, #12]
 800c59c:	3724      	adds	r7, #36	; 0x24
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd90      	pop	{r4, r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	08025c00 	.word	0x08025c00

0800c5a8 <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	3314      	adds	r3, #20
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	683a      	ldr	r2, [r7, #0]
 800c5bc:	2101      	movs	r1, #1
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	4798      	blx	r3
 800c5c2:	4603      	mov	r3, r0
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3708      	adds	r7, #8
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	3314      	adds	r3, #20
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	683a      	ldr	r2, [r7, #0]
 800c5e0:	2100      	movs	r1, #0
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	4798      	blx	r3
}
 800c5e6:	bf00      	nop
 800c5e8:	3708      	adds	r7, #8
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
	...

0800c5f0 <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 800c5f0:	b590      	push	{r4, r7, lr}
 800c5f2:	b089      	sub	sp, #36	; 0x24
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c602:	f083 0301 	eor.w	r3, r3, #1
 800c606:	b2db      	uxtb	r3, r3
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d003      	beq.n	800c614 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 800c60c:	f010 fbf6 	bl	801cdfc <_ZN23MockIgnoredExpectedCall8instanceEv>
 800c610:	4603      	mov	r3, r0
 800c612:	e041      	b.n	800c698 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f000 fb1b 	bl	800cc50 <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 800c61a:	22a5      	movs	r2, #165	; 0xa5
 800c61c:	4920      	ldr	r1, [pc, #128]	; (800c6a0 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 800c61e:	2070      	movs	r0, #112	; 0x70
 800c620:	f7ff f880 	bl	800b724 <_ZnwjPKci>
 800c624:	4604      	mov	r4, r0
 800c626:	68b9      	ldr	r1, [r7, #8]
 800c628:	4620      	mov	r0, r4
 800c62a:	f00f f8f3 	bl	801b814 <_ZN23MockCheckedExpectedCallC1Ej>
 800c62e:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	3308      	adds	r3, #8
 800c636:	681c      	ldr	r4, [r3, #0]
 800c638:	f107 0314 	add.w	r3, r7, #20
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	68f9      	ldr	r1, [r7, #12]
 800c640:	4618      	mov	r0, r3
 800c642:	f7ff ff75 	bl	800c530 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 800c646:	f107 0314 	add.w	r3, r7, #20
 800c64a:	4619      	mov	r1, r3
 800c64c:	69f8      	ldr	r0, [r7, #28]
 800c64e:	47a0      	blx	r4
 800c650:	f107 0314 	add.w	r3, r7, #20
 800c654:	4618      	mov	r0, r3
 800c656:	f001 ffe0 	bl	800e61a <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	7b1b      	ldrb	r3, [r3, #12]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d013      	beq.n	800c68a <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	3310      	adds	r3, #16
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	68fa      	ldr	r2, [r7, #12]
 800c66c:	6892      	ldr	r2, [r2, #8]
 800c66e:	1c50      	adds	r0, r2, #1
 800c670:	68fa      	ldr	r2, [r7, #12]
 800c672:	6891      	ldr	r1, [r2, #8]
 800c674:	68ba      	ldr	r2, [r7, #8]
 800c676:	440a      	add	r2, r1
 800c678:	4601      	mov	r1, r0
 800c67a:	69f8      	ldr	r0, [r7, #28]
 800c67c:	4798      	blx	r3
        expectedCallOrder_ += amount;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	689a      	ldr	r2, [r3, #8]
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	441a      	add	r2, r3
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	3320      	adds	r3, #32
 800c68e:	69f9      	ldr	r1, [r7, #28]
 800c690:	4618      	mov	r0, r3
 800c692:	f010 fd89 	bl	801d1a8 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 800c696:	69fb      	ldr	r3, [r7, #28]
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3724      	adds	r7, #36	; 0x24
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd90      	pop	{r4, r7, pc}
 800c6a0:	08025c04 	.word	0x08025c04

0800c6a4 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 800c6a4:	b5b0      	push	{r4, r5, r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	1c5a      	adds	r2, r3, #1
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	605a      	str	r2, [r3, #4]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	685d      	ldr	r5, [r3, #4]
 800c6ba:	22b1      	movs	r2, #177	; 0xb1
 800c6bc:	490a      	ldr	r1, [pc, #40]	; (800c6e8 <_ZN11MockSupport16createActualCallEv+0x44>)
 800c6be:	202c      	movs	r0, #44	; 0x2c
 800c6c0:	f7ff f830 	bl	800b724 <_ZnwjPKci>
 800c6c4:	4604      	mov	r4, r0
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	691a      	ldr	r2, [r3, #16]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	3320      	adds	r3, #32
 800c6ce:	4629      	mov	r1, r5
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f00c fbdb 	bl	8018e8c <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bdb0      	pop	{r4, r5, r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	08025c04 	.word	0x08025c04

0800c6ec <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d00d      	beq.n	800c71c <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	3320      	adds	r3, #32
 800c704:	6839      	ldr	r1, [r7, #0]
 800c706:	4618      	mov	r0, r3
 800c708:	f010 fd2a 	bl	801d160 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 800c70c:	4603      	mov	r3, r0
 800c70e:	f083 0301 	eor.w	r3, r3, #1
 800c712:	b2db      	uxtb	r3, r3
 800c714:	2b00      	cmp	r3, #0
 800c716:	d001      	beq.n	800c71c <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800c718:	2301      	movs	r3, #1
 800c71a:	e000      	b.n	800c71e <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 800c71c:	2300      	movs	r3, #0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3708      	adds	r7, #8
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 800c726:	b590      	push	{r4, r7, lr}
 800c728:	b087      	sub	sp, #28
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
 800c72e:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800c730:	f107 030c 	add.w	r3, r7, #12
 800c734:	683a      	ldr	r2, [r7, #0]
 800c736:	6879      	ldr	r1, [r7, #4]
 800c738:	4618      	mov	r0, r3
 800c73a:	f7ff fef9 	bl	800c530 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c742:	2b00      	cmp	r3, #0
 800c744:	d014      	beq.n	800c770 <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	33c4      	adds	r3, #196	; 0xc4
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4610      	mov	r0, r2
 800c756:	4798      	blx	r3
        delete lastActualFunctionCall_;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d004      	beq.n	800c76a <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 800c760:	681a      	ldr	r2, [r3, #0]
 800c762:	3204      	adds	r2, #4
 800c764:	6812      	ldr	r2, [r2, #0]
 800c766:	4618      	mov	r0, r3
 800c768:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2200      	movs	r2, #0
 800c76e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c776:	f083 0301 	eor.w	r3, r3, #1
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d004      	beq.n	800c78a <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 800c780:	f00e fcbe 	bl	801b100 <_ZN21MockIgnoredActualCall8instanceEv>
 800c784:	4603      	mov	r3, r0
 800c786:	461c      	mov	r4, r3
 800c788:	e02f      	b.n	800c7ea <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c790:	2b00      	cmp	r3, #0
 800c792:	d00b      	beq.n	800c7ac <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 800c794:	f00e fc6e 	bl	801b074 <_ZN19MockActualCallTrace8instanceEv>
 800c798:	4603      	mov	r3, r0
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	3208      	adds	r2, #8
 800c79e:	6812      	ldr	r2, [r2, #0]
 800c7a0:	f107 010c 	add.w	r1, r7, #12
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	4790      	blx	r2
 800c7a8:	4604      	mov	r4, r0
 800c7aa:	e01e      	b.n	800c7ea <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 800c7ac:	f107 030c 	add.w	r3, r7, #12
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f7ff ff9a 	bl	800c6ec <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d004      	beq.n	800c7c8 <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 800c7be:	f00e fc9f 	bl	801b100 <_ZN21MockIgnoredActualCall8instanceEv>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	461c      	mov	r4, r3
 800c7c6:	e010      	b.n	800c7ea <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	33c0      	adds	r3, #192	; 0xc0
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	4798      	blx	r3
 800c7d4:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	3308      	adds	r3, #8
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f107 020c 	add.w	r2, r7, #12
 800c7e2:	4611      	mov	r1, r2
 800c7e4:	6978      	ldr	r0, [r7, #20]
 800c7e6:	4798      	blx	r3
    return *call;
 800c7e8:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800c7ea:	f107 030c 	add.w	r3, r7, #12
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f001 ff13 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800c7f4:	4623      	mov	r3, r4
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	371c      	adds	r7, #28
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd90      	pop	{r4, r7, pc}

0800c7fe <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 800c7fe:	b580      	push	{r7, lr}
 800c800:	b084      	sub	sp, #16
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2201      	movs	r2, #1
 800c80a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	3338      	adds	r3, #56	; 0x38
 800c812:	4618      	mov	r0, r3
 800c814:	f014 f817 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 800c818:	60f8      	str	r0, [r7, #12]
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d01a      	beq.n	800c856 <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 800c820:	68f9      	ldr	r1, [r7, #12]
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 fc32 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	bf14      	ite	ne
 800c82e:	2301      	movne	r3, #1
 800c830:	2300      	moveq	r3, #0
 800c832:	b2db      	uxtb	r3, r3
 800c834:	2b00      	cmp	r3, #0
 800c836:	d009      	beq.n	800c84c <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 800c838:	68f9      	ldr	r1, [r7, #12]
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f000 fc26 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c840:	4603      	mov	r3, r0
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	3290      	adds	r2, #144	; 0x90
 800c846:	6812      	ldr	r2, [r2, #0]
 800c848:	4618      	mov	r0, r3
 800c84a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c84c:	68f8      	ldr	r0, [r7, #12]
 800c84e:	f013 ff03 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	e7e1      	b.n	800c81a <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 800c856:	bf00      	nop
 800c858:	3710      	adds	r7, #16
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 800c85e:	b580      	push	{r7, lr}
 800c860:	b084      	sub	sp, #16
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	3338      	adds	r3, #56	; 0x38
 800c872:	4618      	mov	r0, r3
 800c874:	f013 ffe7 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 800c878:	60f8      	str	r0, [r7, #12]
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d01a      	beq.n	800c8b6 <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 800c880:	68f9      	ldr	r1, [r7, #12]
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 fc02 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	bf14      	ite	ne
 800c88e:	2301      	movne	r3, #1
 800c890:	2300      	moveq	r3, #0
 800c892:	b2db      	uxtb	r3, r3
 800c894:	2b00      	cmp	r3, #0
 800c896:	d009      	beq.n	800c8ac <_ZN11MockSupport7disableEv+0x4e>
 800c898:	68f9      	ldr	r1, [r7, #12]
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 fbf6 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	3284      	adds	r2, #132	; 0x84
 800c8a6:	6812      	ldr	r2, [r2, #0]
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c8ac:	68f8      	ldr	r0, [r7, #12]
 800c8ae:	f013 fed3 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	e7e1      	b.n	800c87a <_ZN11MockSupport7disableEv+0x1c>
}
 800c8b6:	bf00      	nop
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b084      	sub	sp, #16
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	3338      	adds	r3, #56	; 0x38
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f013 ffb7 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 800c8d8:	60f8      	str	r0, [r7, #12]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d01a      	beq.n	800c916 <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 800c8e0:	68f9      	ldr	r1, [r7, #12]
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 fbd2 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	bf14      	ite	ne
 800c8ee:	2301      	movne	r3, #1
 800c8f0:	2300      	moveq	r3, #0
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d009      	beq.n	800c90c <_ZN11MockSupport6enableEv+0x4e>
 800c8f8:	68f9      	ldr	r1, [r7, #12]
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 fbc6 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c900:	4603      	mov	r3, r0
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	3288      	adds	r2, #136	; 0x88
 800c906:	6812      	ldr	r2, [r2, #0]
 800c908:	4618      	mov	r0, r3
 800c90a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c90c:	68f8      	ldr	r0, [r7, #12]
 800c90e:	f013 fea3 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	e7e1      	b.n	800c8da <_ZN11MockSupport6enableEv+0x1c>
}
 800c916:	bf00      	nop
 800c918:	3710      	adds	r7, #16
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 800c91e:	b580      	push	{r7, lr}
 800c920:	b084      	sub	sp, #16
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
 800c926:	460b      	mov	r3, r1
 800c928:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	78fa      	ldrb	r2, [r7, #3]
 800c92e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	3338      	adds	r3, #56	; 0x38
 800c936:	4618      	mov	r0, r3
 800c938:	f013 ff85 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 800c93c:	60f8      	str	r0, [r7, #12]
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d01b      	beq.n	800c97c <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 800c944:	68f9      	ldr	r1, [r7, #12]
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 fba0 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	bf14      	ite	ne
 800c952:	2301      	movne	r3, #1
 800c954:	2300      	moveq	r3, #0
 800c956:	b2db      	uxtb	r3, r3
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00a      	beq.n	800c972 <_ZN11MockSupport7tracingEb+0x54>
 800c95c:	68f9      	ldr	r1, [r7, #12]
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 fb94 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c964:	4603      	mov	r3, r0
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	328c      	adds	r2, #140	; 0x8c
 800c96a:	6812      	ldr	r2, [r2, #0]
 800c96c:	78f9      	ldrb	r1, [r7, #3]
 800c96e:	4618      	mov	r0, r3
 800c970:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c972:	68f8      	ldr	r0, [r7, #12]
 800c974:	f013 fe70 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 800c978:	60f8      	str	r0, [r7, #12]
 800c97a:	e7e0      	b.n	800c93e <_ZN11MockSupport7tracingEb+0x20>
}
 800c97c:	bf00      	nop
 800c97e:	3710      	adds	r7, #16
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	3320      	adds	r3, #32
 800c990:	4618      	mov	r0, r3
 800c992:	f010 fbc1 	bl	801d118 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 800c996:	4603      	mov	r3, r0
 800c998:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	3338      	adds	r3, #56	; 0x38
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f013 ff51 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 800c9a4:	60b8      	str	r0, [r7, #8]
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d01f      	beq.n	800c9ec <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 800c9ac:	68b9      	ldr	r1, [r7, #8]
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 fb6c 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	bf14      	ite	ne
 800c9ba:	2301      	movne	r3, #1
 800c9bc:	2300      	moveq	r3, #0
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00e      	beq.n	800c9e2 <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 800c9c4:	68b9      	ldr	r1, [r7, #8]
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 fb60 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	3298      	adds	r2, #152	; 0x98
 800c9d2:	6812      	ldr	r2, [r2, #0]
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	4790      	blx	r2
 800c9d8:	4603      	mov	r3, r0
 800c9da:	461a      	mov	r2, r3
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	4413      	add	r3, r2
 800c9e0:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c9e2:	68b8      	ldr	r0, [r7, #8]
 800c9e4:	f013 fe38 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 800c9e8:	60b8      	str	r0, [r7, #8]
 800c9ea:	e7dc      	b.n	800c9a6 <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	bf14      	ite	ne
 800c9f2:	2301      	movne	r3, #1
 800c9f4:	2300      	moveq	r3, #0
 800c9f6:	b2db      	uxtb	r3, r3
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d010      	beq.n	800ca32 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	33bc      	adds	r3, #188	; 0xbc
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4610      	mov	r0, r2
 800ca20:	4798      	blx	r3
 800ca22:	4603      	mov	r3, r0
 800ca24:	f083 0301 	eor.w	r3, r3, #1
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d001      	beq.n	800ca32 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e000      	b.n	800ca34 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 800ca32:	2300      	movs	r3, #0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d001      	beq.n	800ca3c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	e02a      	b.n	800ca92 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	3338      	adds	r3, #56	; 0x38
 800ca40:	4618      	mov	r0, r3
 800ca42:	f013 ff00 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d020      	beq.n	800ca90 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 800ca4e:	68f9      	ldr	r1, [r7, #12]
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 fb1b 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d00f      	beq.n	800ca7c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800ca5c:	68f9      	ldr	r1, [r7, #12]
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 fb14 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ca64:	4603      	mov	r3, r0
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7ff ffca 	bl	800ca00 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	f083 0301 	eor.w	r3, r3, #1
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d001      	beq.n	800ca7c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800ca78:	2301      	movs	r3, #1
 800ca7a:	e000      	b.n	800ca7e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d001      	beq.n	800ca86 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 800ca82:	2300      	movs	r3, #0
 800ca84:	e005      	b.n	800ca92 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ca86:	68f8      	ldr	r0, [r7, #12]
 800ca88:	f013 fde6 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 800ca8c:	60f8      	str	r0, [r7, #12]
 800ca8e:	e7db      	b.n	800ca48 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 800ca90:	2301      	movs	r3, #1
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b092      	sub	sp, #72	; 0x48
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800caa2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800caa6:	4618      	mov	r0, r3
 800caa8:	f010 fa2c 	bl	801cf04 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f103 0220 	add.w	r2, r3, #32
 800cab2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cab6:	4611      	mov	r1, r2
 800cab8:	4618      	mov	r0, r3
 800caba:	f010 fbf3 	bl	801d2a4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	3338      	adds	r3, #56	; 0x38
 800cac2:	4618      	mov	r0, r3
 800cac4:	f013 febf 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 800cac8:	6478      	str	r0, [r7, #68]	; 0x44
 800caca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d01d      	beq.n	800cb0c <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 800cad0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 fada 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	bf14      	ite	ne
 800cade:	2301      	movne	r3, #1
 800cae0:	2300      	moveq	r3, #0
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d00c      	beq.n	800cb02 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800cae8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 face 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800caf0:	4603      	mov	r3, r0
 800caf2:	f103 0220 	add.w	r2, r3, #32
 800caf6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cafa:	4611      	mov	r1, r2
 800cafc:	4618      	mov	r0, r3
 800cafe:	f010 fbd1 	bl	801d2a4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800cb02:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cb04:	f013 fda8 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 800cb08:	6478      	str	r0, [r7, #68]	; 0x44
 800cb0a:	e7de      	b.n	800caca <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	691a      	ldr	r2, [r3, #16]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	691b      	ldr	r3, [r3, #16]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	330c      	adds	r3, #12
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4610      	mov	r0, r2
 800cb1c:	4798      	blx	r3
 800cb1e:	4601      	mov	r1, r0
 800cb20:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800cb24:	f107 0308 	add.w	r3, r7, #8
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f011 f9f5 	bl	801df18 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	33c4      	adds	r3, #196	; 0xc4
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f107 0208 	add.w	r2, r7, #8
 800cb3a:	4611      	mov	r1, r2
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800cb40:	f107 0308 	add.w	r3, r7, #8
 800cb44:	4618      	mov	r0, r3
 800cb46:	f000 fe6d 	bl	800d824 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800cb4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f010 f9ec 	bl	801cf2c <_ZN21MockExpectedCallsListD1Ev>
}
 800cb54:	bf00      	nop
 800cb56:	3748      	adds	r7, #72	; 0x48
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}

0800cb5c <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b092      	sub	sp, #72	; 0x48
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800cb64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f010 f9cb 	bl	801cf04 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f103 0220 	add.w	r2, r3, #32
 800cb74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cb78:	4611      	mov	r1, r2
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f010 fb92 	bl	801d2a4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	3338      	adds	r3, #56	; 0x38
 800cb84:	4618      	mov	r0, r3
 800cb86:	f013 fe5e 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 800cb8a:	6478      	str	r0, [r7, #68]	; 0x44
 800cb8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d01d      	beq.n	800cbce <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 800cb92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 fa79 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	bf14      	ite	ne
 800cba0:	2301      	movne	r3, #1
 800cba2:	2300      	moveq	r3, #0
 800cba4:	b2db      	uxtb	r3, r3
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d00c      	beq.n	800cbc4 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800cbaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f000 fa6d 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	f103 0220 	add.w	r2, r3, #32
 800cbb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cbbc:	4611      	mov	r1, r2
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f010 fb70 	bl	801d2a4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800cbc4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cbc6:	f013 fd47 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 800cbca:	6478      	str	r0, [r7, #68]	; 0x44
 800cbcc:	e7de      	b.n	800cb8c <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	691a      	ldr	r2, [r3, #16]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	691b      	ldr	r3, [r3, #16]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	330c      	adds	r3, #12
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	4610      	mov	r0, r2
 800cbde:	4798      	blx	r3
 800cbe0:	4601      	mov	r1, r0
 800cbe2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800cbe6:	f107 0308 	add.w	r3, r7, #8
 800cbea:	4618      	mov	r0, r3
 800cbec:	f011 fa38 	bl	801e060 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	33c4      	adds	r3, #196	; 0xc4
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f107 0208 	add.w	r2, r7, #8
 800cbfc:	4611      	mov	r1, r2
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800cc02:	f107 0308 	add.w	r3, r7, #8
 800cc06:	4618      	mov	r0, r3
 800cc08:	f000 fe2e 	bl	800d868 <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800cc0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cc10:	4618      	mov	r0, r3
 800cc12:	f010 f98b 	bl	801cf2c <_ZN21MockExpectedCallsListD1Ev>
}
 800cc16:	bf00      	nop
 800cc18:	3748      	adds	r7, #72	; 0x48
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b082      	sub	sp, #8
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
 800cc26:	6039      	str	r1, [r7, #0]
    clear();
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	339c      	adds	r3, #156	; 0x9c
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	4798      	blx	r3
    activeReporter_->failTest(failure);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	691a      	ldr	r2, [r3, #16]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	691b      	ldr	r3, [r3, #16]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	3308      	adds	r3, #8
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	6839      	ldr	r1, [r7, #0]
 800cc44:	4610      	mov	r0, r2
 800cc46:	4798      	blx	r3
}
 800cc48:	bf00      	nop
 800cc4a:	3708      	adds	r7, #8
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 800cc58:	f008 fd0a 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f007 fb78 	bl	8014354 <_ZN10UtestShell10countCheckEv>
}
 800cc64:	bf00      	nop
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d008      	beq.n	800cc8e <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	33c4      	adds	r3, #196	; 0xc4
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4610      	mov	r0, r2
 800cc8c:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	3338      	adds	r3, #56	; 0x38
 800cc92:	4618      	mov	r0, r3
 800cc94:	f013 fdd7 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 800cc98:	60f8      	str	r0, [r7, #12]
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d023      	beq.n	800cce8 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 800cca0:	68f9      	ldr	r1, [r7, #12]
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 f9f2 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d009      	beq.n	800ccc2 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800ccae:	68f9      	ldr	r1, [r7, #12]
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 f9eb 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d001      	beq.n	800ccc2 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	e000      	b.n	800ccc4 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d00a      	beq.n	800ccde <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 800ccc8:	68f9      	ldr	r1, [r7, #12]
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 f9de 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	32c4      	adds	r2, #196	; 0xc4
 800ccd8:	6812      	ldr	r2, [r2, #0]
 800ccda:	4618      	mov	r0, r3
 800ccdc:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800ccde:	68f8      	ldr	r0, [r7, #12]
 800cce0:	f013 fcba 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 800cce4:	60f8      	str	r0, [r7, #12]
 800cce6:	e7d8      	b.n	800cc9a <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 800cce8:	bf00      	nop
 800ccea:	3710      	adds	r7, #16
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	3320      	adds	r3, #32
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f010 f947 	bl	801cf90 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d001      	beq.n	800cd0c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e027      	b.n	800cd5c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	3338      	adds	r3, #56	; 0x38
 800cd10:	4618      	mov	r0, r3
 800cd12:	f013 fd98 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d01d      	beq.n	800cd5a <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 800cd1e:	68f9      	ldr	r1, [r7, #12]
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 f9b3 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d00c      	beq.n	800cd46 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800cd2c:	68f9      	ldr	r1, [r7, #12]
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 f9ac 	bl	800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cd34:	4603      	mov	r3, r0
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7ff ffda 	bl	800ccf0 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d001      	beq.n	800cd46 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800cd42:	2301      	movs	r3, #1
 800cd44:	e000      	b.n	800cd48 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 800cd46:	2300      	movs	r3, #0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d001      	beq.n	800cd50 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	e005      	b.n	800cd5c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f013 fc81 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	e7de      	b.n	800cd18 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800cd5a:	2300      	movs	r3, #0
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3710      	adds	r7, #16
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f7ff ff7d 	bl	800cc6c <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f7ff fe44 	bl	800ca00 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00a      	beq.n	800cd94 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	3398      	adds	r3, #152	; 0x98
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	4798      	blx	r3
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d001      	beq.n	800cd94 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800cd90:	2301      	movs	r3, #1
 800cd92:	e000      	b.n	800cd96 <_ZN11MockSupport17checkExpectationsEv+0x32>
 800cd94:	2300      	movs	r3, #0
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d002      	beq.n	800cda0 <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f7ff fe7d 	bl	800ca9a <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f7ff ffa5 	bl	800ccf0 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d002      	beq.n	800cdb2 <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7ff fed5 	bl	800cb5c <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 800cdb2:	bf00      	nop
 800cdb4:	3708      	adds	r7, #8
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}

0800cdba <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b082      	sub	sp, #8
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
 800cdc2:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	3338      	adds	r3, #56	; 0x38
 800cdc8:	6839      	ldr	r1, [r7, #0]
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f013 fd0c 	bl	80207e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	bf14      	ite	ne
 800cdd6:	2301      	movne	r3, #1
 800cdd8:	2300      	moveq	r3, #0
 800cdda:	b2db      	uxtb	r3, r3
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3708      	adds	r7, #8
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 800cde4:	b590      	push	{r4, r7, lr}
 800cde6:	b085      	sub	sp, #20
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	3338      	adds	r3, #56	; 0x38
 800cdf2:	6839      	ldr	r1, [r7, #0]
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f013 fcf7 	bl	80207e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800cdfa:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d111      	bne.n	800ce26 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 800ce02:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ce06:	490a      	ldr	r1, [pc, #40]	; (800ce30 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 800ce08:	2038      	movs	r0, #56	; 0x38
 800ce0a:	f7fe fc8b 	bl	800b724 <_ZnwjPKci>
 800ce0e:	4604      	mov	r4, r0
 800ce10:	6839      	ldr	r1, [r7, #0]
 800ce12:	4620      	mov	r0, r4
 800ce14:	f011 fd6e 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
 800ce18:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	3338      	adds	r3, #56	; 0x38
 800ce1e:	68f9      	ldr	r1, [r7, #12]
 800ce20:	4618      	mov	r0, r3
 800ce22:	f013 fcab 	bl	802077c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 800ce26:	68fb      	ldr	r3, [r7, #12]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3714      	adds	r7, #20
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd90      	pop	{r4, r7, pc}
 800ce30:	08025c04 	.word	0x08025c04

0800ce34 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b086      	sub	sp, #24
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	60b9      	str	r1, [r7, #8]
 800ce3e:	607a      	str	r2, [r7, #4]
 800ce40:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 800ce42:	68b9      	ldr	r1, [r7, #8]
 800ce44:	68f8      	ldr	r0, [r7, #12]
 800ce46:	f7ff ffcd 	bl	800cde4 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800ce4a:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	3344      	adds	r3, #68	; 0x44
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	683a      	ldr	r2, [r7, #0]
 800ce56:	6879      	ldr	r1, [r7, #4]
 800ce58:	6978      	ldr	r0, [r7, #20]
 800ce5a:	4798      	blx	r3
}
 800ce5c:	bf00      	nop
 800ce5e:	3718      	adds	r7, #24
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b088      	sub	sp, #32
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	60f8      	str	r0, [r7, #12]
 800ce6c:	60b9      	str	r1, [r7, #8]
 800ce6e:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	3338      	adds	r3, #56	; 0x38
 800ce74:	6879      	ldr	r1, [r7, #4]
 800ce76:	4618      	mov	r0, r3
 800ce78:	f013 fcb6 	bl	80207e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800ce7c:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d111      	bne.n	800cea8 <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 800ce84:	f107 0314 	add.w	r3, r7, #20
 800ce88:	490b      	ldr	r1, [pc, #44]	; (800ceb8 <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f001 f80d 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800ce90:	f107 0314 	add.w	r3, r7, #20
 800ce94:	4619      	mov	r1, r3
 800ce96:	68f8      	ldr	r0, [r7, #12]
 800ce98:	f011 fd2c 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
 800ce9c:	f107 0314 	add.w	r3, r7, #20
 800cea0:	4618      	mov	r0, r3
 800cea2:	f001 fbba 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800cea6:	e003      	b.n	800ceb0 <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 800cea8:	69f9      	ldr	r1, [r7, #28]
 800ceaa:	68f8      	ldr	r0, [r7, #12]
 800ceac:	f7ff f8a2 	bl	800bff4 <_ZN14MockNamedValueC1ERKS_>
}
 800ceb0:	68f8      	ldr	r0, [r7, #12]
 800ceb2:	3720      	adds	r7, #32
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	08025bfc 	.word	0x08025bfc

0800cebc <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 800cebc:	b590      	push	{r4, r7, lr}
 800cebe:	b085      	sub	sp, #20
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 800cec6:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ceca:	4927      	ldr	r1, [pc, #156]	; (800cf68 <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 800cecc:	2048      	movs	r0, #72	; 0x48
 800cece:	f7fe fc29 	bl	800b724 <_ZnwjPKci>
 800ced2:	4604      	mov	r4, r0
 800ced4:	6839      	ldr	r1, [r7, #0]
 800ced6:	4620      	mov	r0, r4
 800ced8:	f7ff f8f8 	bl	800c0cc <_ZN11MockSupportC1ERK12SimpleString>
 800cedc:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	33a4      	adds	r3, #164	; 0xa4
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	687a      	ldr	r2, [r7, #4]
 800cee8:	6952      	ldr	r2, [r2, #20]
 800ceea:	4611      	mov	r1, r2
 800ceec:	68f8      	ldr	r0, [r7, #12]
 800ceee:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d005      	beq.n	800cf06 <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	3390      	adds	r3, #144	; 0x90
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	68f8      	ldr	r0, [r7, #12]
 800cf04:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cf0c:	f083 0301 	eor.w	r3, r3, #1
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d005      	beq.n	800cf22 <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	3384      	adds	r3, #132	; 0x84
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	7b1b      	ldrb	r3, [r3, #12]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d005      	beq.n	800cf36 <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	3308      	adds	r3, #8
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	4798      	blx	r3

    newMock->tracing(tracing_);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	338c      	adds	r3, #140	; 0x8c
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 800cf44:	4611      	mov	r1, r2
 800cf46:	68f8      	ldr	r0, [r7, #12]
 800cf48:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	33b8      	adds	r3, #184	; 0xb8
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	3230      	adds	r2, #48	; 0x30
 800cf56:	4611      	mov	r1, r2
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	4798      	blx	r3
    return newMock;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3714      	adds	r7, #20
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd90      	pop	{r4, r7, pc}
 800cf66:	bf00      	nop
 800cf68:	08025c04 	.word	0x08025c04

0800cf6c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 800cf6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf6e:	b0ab      	sub	sp, #172	; 0xac
 800cf70:	af04      	add	r7, sp, #16
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800cf76:	f107 0308 	add.w	r3, r7, #8
 800cf7a:	4941      	ldr	r1, [pc, #260]	; (800d080 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f000 ff94 	bl	800deaa <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 800cf82:	f107 0308 	add.w	r3, r7, #8
 800cf86:	6839      	ldr	r1, [r7, #0]
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f001 fbc3 	bl	800e714 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 800cf8e:	f107 0308 	add.w	r3, r7, #8
 800cf92:	4619      	mov	r1, r3
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f7ff ff10 	bl	800cdba <_ZN11MockSupport7hasDataERK12SimpleString>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d048      	beq.n	800d032 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 800cfa0:	f008 fb66 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	6823      	ldr	r3, [r4, #0]
 800cfa8:	3324      	adds	r3, #36	; 0x24
 800cfaa:	681d      	ldr	r5, [r3, #0]
 800cfac:	f107 0318 	add.w	r3, r7, #24
 800cfb0:	f107 0208 	add.w	r2, r7, #8
 800cfb4:	6879      	ldr	r1, [r7, #4]
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7ff ff54 	bl	800ce64 <_ZN11MockSupport7getDataERK12SimpleString>
 800cfbc:	f107 0310 	add.w	r3, r7, #16
 800cfc0:	f107 0218 	add.w	r2, r7, #24
 800cfc4:	4611      	mov	r1, r2
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f011 ff61 	bl	801ee8e <_ZNK14MockNamedValue7getTypeEv>
 800cfcc:	f107 0310 	add.w	r3, r7, #16
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f001 faf5 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800cfd6:	4606      	mov	r6, r0
 800cfd8:	f008 fb5a 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	9302      	str	r3, [sp, #8]
 800cfe0:	f240 13bd 	movw	r3, #445	; 0x1bd
 800cfe4:	9301      	str	r3, [sp, #4]
 800cfe6:	4b27      	ldr	r3, [pc, #156]	; (800d084 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	2300      	movs	r3, #0
 800cfec:	4632      	mov	r2, r6
 800cfee:	4926      	ldr	r1, [pc, #152]	; (800d088 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800cff0:	4620      	mov	r0, r4
 800cff2:	47a8      	blx	r5
 800cff4:	f107 0310 	add.w	r3, r7, #16
 800cff8:	4618      	mov	r0, r3
 800cffa:	f001 fb0e 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800cffe:	f107 0318 	add.w	r3, r7, #24
 800d002:	4618      	mov	r0, r3
 800d004:	f011 fca0 	bl	801e948 <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 800d008:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d00c:	f107 0208 	add.w	r2, r7, #8
 800d010:	6879      	ldr	r1, [r7, #4]
 800d012:	4618      	mov	r0, r3
 800d014:	f7ff ff26 	bl	800ce64 <_ZN11MockSupport7getDataERK12SimpleString>
 800d018:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d01c:	4618      	mov	r0, r3
 800d01e:	f012 fa4f 	bl	801f4c0 <_ZNK14MockNamedValue16getObjectPointerEv>
 800d022:	4604      	mov	r4, r0
 800d024:	bf00      	nop
 800d026:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d02a:	4618      	mov	r0, r3
 800d02c:	f011 fc8c 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 800d030:	e01b      	b.n	800d06a <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 800d032:	6839      	ldr	r1, [r7, #0]
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f7ff ff41 	bl	800cebc <_ZN11MockSupport5cloneERK12SimpleString>
 800d03a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 800d03e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d042:	4911      	ldr	r1, [pc, #68]	; (800d088 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800d044:	4618      	mov	r0, r3
 800d046:	f000 ff30 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800d04a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800d04e:	f107 0108 	add.w	r1, r7, #8
 800d052:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f7ff feec 	bl	800ce34 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 800d05c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d060:	4618      	mov	r0, r3
 800d062:	f001 fada 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return newMock;
 800d066:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800d06a:	f107 0308 	add.w	r3, r7, #8
 800d06e:	4618      	mov	r0, r3
 800d070:	f001 fad3 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800d074:	4623      	mov	r3, r4
}
 800d076:	4618      	mov	r0, r3
 800d078:	379c      	adds	r7, #156	; 0x9c
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d07e:	bf00      	nop
 800d080:	08025c1c 	.word	0x08025c1c
 800d084:	08025c04 	.word	0x08025c04
 800d088:	08025c3c 	.word	0x08025c3c

0800d08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 800d08c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d090:	b08b      	sub	sp, #44	; 0x2c
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
 800d096:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 800d098:	2500      	movs	r5, #0
 800d09a:	2600      	movs	r6, #0
 800d09c:	f107 0308 	add.w	r3, r7, #8
 800d0a0:	6839      	ldr	r1, [r7, #0]
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f013 fb26 	bl	80206f4 <_ZNK22MockNamedValueListNode7getTypeEv>
 800d0a8:	f04f 0801 	mov.w	r8, #1
 800d0ac:	f107 0310 	add.w	r3, r7, #16
 800d0b0:	492e      	ldr	r1, [pc, #184]	; (800d16c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f000 fef9 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800d0b8:	f04f 0901 	mov.w	r9, #1
 800d0bc:	f107 0210 	add.w	r2, r7, #16
 800d0c0:	f107 0308 	add.w	r3, r7, #8
 800d0c4:	4611      	mov	r1, r2
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f001 fab3 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d01a      	beq.n	800d108 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800d0d2:	f107 0318 	add.w	r3, r7, #24
 800d0d6:	6839      	ldr	r1, [r7, #0]
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f013 faf8 	bl	80206ce <_ZNK22MockNamedValueListNode7getNameEv>
 800d0de:	2501      	movs	r5, #1
 800d0e0:	f107 0320 	add.w	r3, r7, #32
 800d0e4:	4922      	ldr	r1, [pc, #136]	; (800d170 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f000 fedf 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800d0ec:	2601      	movs	r6, #1
 800d0ee:	f107 0220 	add.w	r2, r7, #32
 800d0f2:	f107 0318 	add.w	r3, r7, #24
 800d0f6:	4611      	mov	r1, r2
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f000 ff54 	bl	800dfa6 <_ZNK12SimpleString8containsERKS_>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d001      	beq.n	800d108 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800d104:	2401      	movs	r4, #1
 800d106:	e000      	b.n	800d10a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 800d108:	2400      	movs	r4, #0
 800d10a:	2e00      	cmp	r6, #0
 800d10c:	d004      	beq.n	800d118 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800d10e:	f107 0320 	add.w	r3, r7, #32
 800d112:	4618      	mov	r0, r3
 800d114:	f001 fa81 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800d118:	2d00      	cmp	r5, #0
 800d11a:	d004      	beq.n	800d126 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800d11c:	f107 0318 	add.w	r3, r7, #24
 800d120:	4618      	mov	r0, r3
 800d122:	f001 fa7a 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800d126:	f1b9 0f00 	cmp.w	r9, #0
 800d12a:	d004      	beq.n	800d136 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800d12c:	f107 0310 	add.w	r3, r7, #16
 800d130:	4618      	mov	r0, r3
 800d132:	f001 fa72 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800d136:	f1b8 0f00 	cmp.w	r8, #0
 800d13a:	d004      	beq.n	800d146 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800d13c:	f107 0308 	add.w	r3, r7, #8
 800d140:	4618      	mov	r0, r3
 800d142:	f001 fa6a 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800d146:	2c00      	cmp	r4, #0
 800d148:	d00a      	beq.n	800d160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800d14a:	6838      	ldr	r0, [r7, #0]
 800d14c:	f013 fa90 	bl	8020670 <_ZN22MockNamedValueListNode4itemEv>
 800d150:	4603      	mov	r3, r0
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	32a0      	adds	r2, #160	; 0xa0
 800d156:	6812      	ldr	r2, [r2, #0]
 800d158:	4618      	mov	r0, r3
 800d15a:	4790      	blx	r2
 800d15c:	4603      	mov	r3, r0
 800d15e:	e000      	b.n	800d162 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 800d160:	2300      	movs	r3, #0
}
 800d162:	4618      	mov	r0, r3
 800d164:	372c      	adds	r7, #44	; 0x2c
 800d166:	46bd      	mov	sp, r7
 800d168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d16c:	08025c3c 	.word	0x08025c3c
 800d170:	08025c1c 	.word	0x08025c1c

0800d174 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00a      	beq.n	800d19c <_ZN11MockSupport11returnValueEv+0x28>
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	3354      	adds	r3, #84	; 0x54
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	4610      	mov	r0, r2
 800d198:	4798      	blx	r3
 800d19a:	e010      	b.n	800d1be <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800d19c:	f107 0308 	add.w	r3, r7, #8
 800d1a0:	4909      	ldr	r1, [pc, #36]	; (800d1c8 <_ZN11MockSupport11returnValueEv+0x54>)
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f000 fe81 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800d1a8:	f107 0308 	add.w	r3, r7, #8
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f011 fba0 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
 800d1b4:	f107 0308 	add.w	r3, r7, #8
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f001 fa2e 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	3710      	adds	r7, #16
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	08025bfc 	.word	0x08025bfc

0800d1cc <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 800d1cc:	b590      	push	{r4, r7, lr}
 800d1ce:	b091      	sub	sp, #68	; 0x44
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	3320      	adds	r3, #32
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f107 0208 	add.w	r2, r7, #8
 800d1e0:	6879      	ldr	r1, [r7, #4]
 800d1e2:	4610      	mov	r0, r2
 800d1e4:	4798      	blx	r3
 800d1e6:	f107 0308 	add.w	r3, r7, #8
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f011 fe5e 	bl	801eeac <_ZNK14MockNamedValue12getBoolValueEv>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	461c      	mov	r4, r3
 800d1f4:	bf00      	nop
 800d1f6:	f107 0308 	add.w	r3, r7, #8
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f011 fba4 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 800d200:	4623      	mov	r3, r4
}
 800d202:	4618      	mov	r0, r3
 800d204:	3744      	adds	r7, #68	; 0x44
 800d206:	46bd      	mov	sp, r7
 800d208:	bd90      	pop	{r4, r7, pc}

0800d20a <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800d20a:	b590      	push	{r4, r7, lr}
 800d20c:	b091      	sub	sp, #68	; 0x44
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	3320      	adds	r3, #32
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f107 0208 	add.w	r2, r7, #8
 800d21e:	6879      	ldr	r1, [r7, #4]
 800d220:	4610      	mov	r0, r2
 800d222:	4798      	blx	r3
 800d224:	f107 0308 	add.w	r3, r7, #8
 800d228:	4618      	mov	r0, r3
 800d22a:	f011 fe67 	bl	801eefc <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800d22e:	4604      	mov	r4, r0
 800d230:	bf00      	nop
 800d232:	f107 0308 	add.w	r3, r7, #8
 800d236:	4618      	mov	r0, r3
 800d238:	f011 fb86 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 800d23c:	4623      	mov	r3, r4
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3744      	adds	r7, #68	; 0x44
 800d242:	46bd      	mov	sp, r7
 800d244:	bd90      	pop	{r4, r7, pc}

0800d246 <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800d246:	b590      	push	{r4, r7, lr}
 800d248:	b091      	sub	sp, #68	; 0x44
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	3320      	adds	r3, #32
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f107 0208 	add.w	r2, r7, #8
 800d25a:	6879      	ldr	r1, [r7, #4]
 800d25c:	4610      	mov	r0, r2
 800d25e:	4798      	blx	r3
 800d260:	f107 0308 	add.w	r3, r7, #8
 800d264:	4618      	mov	r0, r3
 800d266:	f011 fe99 	bl	801ef9c <_ZNK14MockNamedValue11getIntValueEv>
 800d26a:	4604      	mov	r4, r0
 800d26c:	bf00      	nop
 800d26e:	f107 0308 	add.w	r3, r7, #8
 800d272:	4618      	mov	r0, r3
 800d274:	f011 fb68 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 800d278:	4623      	mov	r3, r4
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3744      	adds	r7, #68	; 0x44
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd90      	pop	{r4, r7, pc}

0800d282 <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 800d282:	b580      	push	{r7, lr}
 800d284:	b082      	sub	sp, #8
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
 800d28a:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	331c      	adds	r3, #28
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	4798      	blx	r3
 800d298:	4603      	mov	r3, r0
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d007      	beq.n	800d2ae <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	335c      	adds	r3, #92	; 0x5c
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	4798      	blx	r3
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	e000      	b.n	800d2b0 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800d2ae:	683b      	ldr	r3, [r7, #0]
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3708      	adds	r7, #8
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b084      	sub	sp, #16
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	331c      	adds	r3, #28
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	68f8      	ldr	r0, [r7, #12]
 800d2ce:	4798      	blx	r3
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00a      	beq.n	800d2ec <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	3368      	adds	r3, #104	; 0x68
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	68f8      	ldr	r0, [r7, #12]
 800d2e0:	4798      	blx	r3
 800d2e2:	eeb0 7a40 	vmov.f32	s14, s0
 800d2e6:	eef0 7a60 	vmov.f32	s15, s1
 800d2ea:	e001      	b.n	800d2f0 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800d2ec:	ed97 7b00 	vldr	d7, [r7]
}
 800d2f0:	eeb0 0a47 	vmov.f32	s0, s14
 800d2f4:	eef0 0a67 	vmov.f32	s1, s15
 800d2f8:	3710      	adds	r7, #16
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}

0800d2fe <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800d2fe:	b580      	push	{r7, lr}
 800d300:	b082      	sub	sp, #8
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
 800d306:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	331c      	adds	r3, #28
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	4798      	blx	r3
 800d314:	4603      	mov	r3, r0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d007      	beq.n	800d32a <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	3338      	adds	r3, #56	; 0x38
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	4798      	blx	r3
 800d326:	4603      	mov	r3, r0
 800d328:	e000      	b.n	800d32c <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800d32a:	683b      	ldr	r3, [r7, #0]
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3708      	adds	r7, #8
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	460b      	mov	r3, r1
 800d33e:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	331c      	adds	r3, #28
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	4798      	blx	r3
 800d34c:	4603      	mov	r3, r0
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d007      	beq.n	800d362 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	3324      	adds	r3, #36	; 0x24
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	4798      	blx	r3
 800d35e:	4603      	mov	r3, r0
 800d360:	e000      	b.n	800d364 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 800d362:	78fb      	ldrb	r3, [r7, #3]
}
 800d364:	4618      	mov	r0, r3
 800d366:	3708      	adds	r7, #8
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	331c      	adds	r3, #28
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	4798      	blx	r3
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d007      	beq.n	800d398 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	332c      	adds	r3, #44	; 0x2c
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	4798      	blx	r3
 800d394:	4603      	mov	r3, r0
 800d396:	e000      	b.n	800d39a <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 800d398:	683b      	ldr	r3, [r7, #0]
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3708      	adds	r7, #8
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}

0800d3a2 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 800d3a2:	b580      	push	{r7, lr}
 800d3a4:	b082      	sub	sp, #8
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
 800d3aa:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	331c      	adds	r3, #28
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	4798      	blx	r3
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d007      	beq.n	800d3ce <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	3334      	adds	r3, #52	; 0x34
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	4798      	blx	r3
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	e000      	b.n	800d3d0 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800d3ce:	683b      	ldr	r3, [r7, #0]
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3708      	adds	r7, #8
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	331c      	adds	r3, #28
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	4798      	blx	r3
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d007      	beq.n	800d404 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	3340      	adds	r3, #64	; 0x40
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	4798      	blx	r3
 800d400:	4603      	mov	r3, r0
 800d402:	e000      	b.n	800d406 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 800d404:	683b      	ldr	r3, [r7, #0]
}
 800d406:	4618      	mov	r0, r3
 800d408:	3708      	adds	r7, #8
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}

0800d40e <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800d40e:	b590      	push	{r4, r7, lr}
 800d410:	b091      	sub	sp, #68	; 0x44
 800d412:	af00      	add	r7, sp, #0
 800d414:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	3320      	adds	r3, #32
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f107 0208 	add.w	r2, r7, #8
 800d422:	6879      	ldr	r1, [r7, #4]
 800d424:	4610      	mov	r0, r2
 800d426:	4798      	blx	r3
 800d428:	f107 0308 	add.w	r3, r7, #8
 800d42c:	4618      	mov	r0, r3
 800d42e:	f011 fddd 	bl	801efec <_ZNK14MockNamedValue15getLongIntValueEv>
 800d432:	4604      	mov	r4, r0
 800d434:	bf00      	nop
 800d436:	f107 0308 	add.w	r3, r7, #8
 800d43a:	4618      	mov	r0, r3
 800d43c:	f011 fa84 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 800d440:	4623      	mov	r3, r4
}
 800d442:	4618      	mov	r0, r3
 800d444:	3744      	adds	r7, #68	; 0x44
 800d446:	46bd      	mov	sp, r7
 800d448:	bd90      	pop	{r4, r7, pc}

0800d44a <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800d44a:	b590      	push	{r4, r7, lr}
 800d44c:	b091      	sub	sp, #68	; 0x44
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	3320      	adds	r3, #32
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f107 0208 	add.w	r2, r7, #8
 800d45e:	6879      	ldr	r1, [r7, #4]
 800d460:	4610      	mov	r0, r2
 800d462:	4798      	blx	r3
 800d464:	f107 0308 	add.w	r3, r7, #8
 800d468:	4618      	mov	r0, r3
 800d46a:	f011 fe21 	bl	801f0b0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800d46e:	4604      	mov	r4, r0
 800d470:	bf00      	nop
 800d472:	f107 0308 	add.w	r3, r7, #8
 800d476:	4618      	mov	r0, r3
 800d478:	f011 fa66 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 800d47c:	4623      	mov	r3, r4
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3744      	adds	r7, #68	; 0x44
 800d482:	46bd      	mov	sp, r7
 800d484:	bd90      	pop	{r4, r7, pc}
	...

0800d488 <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 800d488:	b5b0      	push	{r4, r5, r7, lr}
 800d48a:	b084      	sub	sp, #16
 800d48c:	af02      	add	r7, sp, #8
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 800d492:	f008 f8ed 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 800d496:	4604      	mov	r4, r0
 800d498:	6823      	ldr	r3, [r4, #0]
 800d49a:	3368      	adds	r3, #104	; 0x68
 800d49c:	681d      	ldr	r5, [r3, #0]
 800d49e:	f008 f8f7 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	9300      	str	r3, [sp, #0]
 800d4a6:	f240 2345 	movw	r3, #581	; 0x245
 800d4aa:	4a06      	ldr	r2, [pc, #24]	; (800d4c4 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800d4ac:	4906      	ldr	r1, [pc, #24]	; (800d4c8 <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	47a8      	blx	r5
    return cpputest_longlong(0);
 800d4b2:	2100      	movs	r1, #0
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f7fe fd2f 	bl	800bf18 <_ZN17cpputest_longlongC1Ei>
}
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	3708      	adds	r7, #8
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bdb0      	pop	{r4, r5, r7, pc}
 800d4c2:	bf00      	nop
 800d4c4:	08025c04 	.word	0x08025c04
 800d4c8:	08025c48 	.word	0x08025c48

0800d4cc <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800d4cc:	b5b0      	push	{r4, r5, r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af02      	add	r7, sp, #8
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 800d4d6:	f008 f8cb 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 800d4da:	4604      	mov	r4, r0
 800d4dc:	6823      	ldr	r3, [r4, #0]
 800d4de:	3368      	adds	r3, #104	; 0x68
 800d4e0:	681d      	ldr	r5, [r3, #0]
 800d4e2:	f008 f8d5 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	9300      	str	r3, [sp, #0]
 800d4ea:	f240 234b 	movw	r3, #587	; 0x24b
 800d4ee:	4a06      	ldr	r2, [pc, #24]	; (800d508 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800d4f0:	4906      	ldr	r1, [pc, #24]	; (800d50c <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800d4f6:	2100      	movs	r1, #0
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f7fe fd19 	bl	800bf30 <_ZN18cpputest_ulonglongC1Ei>
}
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	3708      	adds	r7, #8
 800d502:	46bd      	mov	sp, r7
 800d504:	bdb0      	pop	{r4, r5, r7, pc}
 800d506:	bf00      	nop
 800d508:	08025c04 	.word	0x08025c04
 800d50c:	08025c68 	.word	0x08025c68

0800d510 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800d510:	b5b0      	push	{r4, r5, r7, lr}
 800d512:	b086      	sub	sp, #24
 800d514:	af02      	add	r7, sp, #8
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	4639      	mov	r1, r7
 800d51c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800d520:	f008 f8a6 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 800d524:	4604      	mov	r4, r0
 800d526:	6823      	ldr	r3, [r4, #0]
 800d528:	3368      	adds	r3, #104	; 0x68
 800d52a:	681d      	ldr	r5, [r3, #0]
 800d52c:	f008 f8b0 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800d530:	4603      	mov	r3, r0
 800d532:	9300      	str	r3, [sp, #0]
 800d534:	f240 2351 	movw	r3, #593	; 0x251
 800d538:	4a06      	ldr	r2, [pc, #24]	; (800d554 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800d53a:	4907      	ldr	r1, [pc, #28]	; (800d558 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800d53c:	4620      	mov	r0, r4
 800d53e:	47a8      	blx	r5
    return defaultValue;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	461a      	mov	r2, r3
 800d544:	463b      	mov	r3, r7
 800d546:	cb03      	ldmia	r3!, {r0, r1}
 800d548:	6010      	str	r0, [r2, #0]
 800d54a:	6051      	str	r1, [r2, #4]
}
 800d54c:	68f8      	ldr	r0, [r7, #12]
 800d54e:	3710      	adds	r7, #16
 800d550:	46bd      	mov	sp, r7
 800d552:	bdb0      	pop	{r4, r5, r7, pc}
 800d554:	08025c04 	.word	0x08025c04
 800d558:	08025c48 	.word	0x08025c48

0800d55c <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800d55c:	b5b0      	push	{r4, r5, r7, lr}
 800d55e:	b086      	sub	sp, #24
 800d560:	af02      	add	r7, sp, #8
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	4639      	mov	r1, r7
 800d568:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800d56c:	f008 f880 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 800d570:	4604      	mov	r4, r0
 800d572:	6823      	ldr	r3, [r4, #0]
 800d574:	3368      	adds	r3, #104	; 0x68
 800d576:	681d      	ldr	r5, [r3, #0]
 800d578:	f008 f88a 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800d57c:	4603      	mov	r3, r0
 800d57e:	9300      	str	r3, [sp, #0]
 800d580:	f240 2357 	movw	r3, #599	; 0x257
 800d584:	4a06      	ldr	r2, [pc, #24]	; (800d5a0 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800d586:	4907      	ldr	r1, [pc, #28]	; (800d5a4 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800d588:	4620      	mov	r0, r4
 800d58a:	47a8      	blx	r5
    return defaultValue;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	461a      	mov	r2, r3
 800d590:	463b      	mov	r3, r7
 800d592:	cb03      	ldmia	r3!, {r0, r1}
 800d594:	6010      	str	r0, [r2, #0]
 800d596:	6051      	str	r1, [r2, #4]
}
 800d598:	68f8      	ldr	r0, [r7, #12]
 800d59a:	3710      	adds	r7, #16
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bdb0      	pop	{r4, r5, r7, pc}
 800d5a0:	08025c04 	.word	0x08025c04
 800d5a4:	08025c68 	.word	0x08025c68

0800d5a8 <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800d5a8:	b590      	push	{r4, r7, lr}
 800d5aa:	b091      	sub	sp, #68	; 0x44
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	3320      	adds	r3, #32
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f107 0208 	add.w	r2, r7, #8
 800d5bc:	6879      	ldr	r1, [r7, #4]
 800d5be:	4610      	mov	r0, r2
 800d5c0:	4798      	blx	r3
 800d5c2:	f107 0308 	add.w	r3, r7, #8
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f011 fea6 	bl	801f318 <_ZNK14MockNamedValue14getStringValueEv>
 800d5cc:	4604      	mov	r4, r0
 800d5ce:	bf00      	nop
 800d5d0:	f107 0308 	add.w	r3, r7, #8
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f011 f9b7 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 800d5da:	4623      	mov	r3, r4
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3744      	adds	r7, #68	; 0x44
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd90      	pop	{r4, r7, pc}

0800d5e4 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	ed2d 8b02 	vpush	{d8}
 800d5ea:	b090      	sub	sp, #64	; 0x40
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	3320      	adds	r3, #32
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	f107 0208 	add.w	r2, r7, #8
 800d5fc:	6879      	ldr	r1, [r7, #4]
 800d5fe:	4610      	mov	r0, r2
 800d600:	4798      	blx	r3
 800d602:	f107 0308 	add.w	r3, r7, #8
 800d606:	4618      	mov	r0, r3
 800d608:	f011 fe2a 	bl	801f260 <_ZNK14MockNamedValue14getDoubleValueEv>
 800d60c:	eeb0 8a40 	vmov.f32	s16, s0
 800d610:	eef0 8a60 	vmov.f32	s17, s1
 800d614:	bf00      	nop
 800d616:	f107 0308 	add.w	r3, r7, #8
 800d61a:	4618      	mov	r0, r3
 800d61c:	f011 f994 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 800d620:	eeb0 7a48 	vmov.f32	s14, s16
 800d624:	eef0 7a68 	vmov.f32	s15, s17
}
 800d628:	eeb0 0a47 	vmov.f32	s0, s14
 800d62c:	eef0 0a67 	vmov.f32	s1, s15
 800d630:	3740      	adds	r7, #64	; 0x40
 800d632:	46bd      	mov	sp, r7
 800d634:	ecbd 8b02 	vpop	{d8}
 800d638:	bd80      	pop	{r7, pc}

0800d63a <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b082      	sub	sp, #8
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
 800d642:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	331c      	adds	r3, #28
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	4798      	blx	r3
 800d650:	4603      	mov	r3, r0
 800d652:	2b00      	cmp	r3, #0
 800d654:	d007      	beq.n	800d666 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	336c      	adds	r3, #108	; 0x6c
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	4798      	blx	r3
 800d662:	4603      	mov	r3, r0
 800d664:	e000      	b.n	800d668 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800d666:	683b      	ldr	r3, [r7, #0]
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3708      	adds	r7, #8
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	331c      	adds	r3, #28
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	4798      	blx	r3
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d007      	beq.n	800d69c <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	3378      	adds	r3, #120	; 0x78
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	4798      	blx	r3
 800d698:	4603      	mov	r3, r0
 800d69a:	e000      	b.n	800d69e <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800d69c:	683b      	ldr	r3, [r7, #0]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3708      	adds	r7, #8
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}

0800d6a6 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800d6a6:	b580      	push	{r7, lr}
 800d6a8:	b082      	sub	sp, #8
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
 800d6ae:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	331c      	adds	r3, #28
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	4798      	blx	r3
 800d6bc:	4603      	mov	r3, r0
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d007      	beq.n	800d6d2 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	3380      	adds	r3, #128	; 0x80
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	4798      	blx	r3
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	e000      	b.n	800d6d4 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800d6d2:	683b      	ldr	r3, [r7, #0]
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3708      	adds	r7, #8
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800d6dc:	b590      	push	{r4, r7, lr}
 800d6de:	b091      	sub	sp, #68	; 0x44
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	3320      	adds	r3, #32
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f107 0208 	add.w	r2, r7, #8
 800d6f0:	6879      	ldr	r1, [r7, #4]
 800d6f2:	4610      	mov	r0, r2
 800d6f4:	4798      	blx	r3
 800d6f6:	f107 0308 	add.w	r3, r7, #8
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f011 fe34 	bl	801f368 <_ZNK14MockNamedValue15getPointerValueEv>
 800d700:	4604      	mov	r4, r0
 800d702:	bf00      	nop
 800d704:	f107 0308 	add.w	r3, r7, #8
 800d708:	4618      	mov	r0, r3
 800d70a:	f011 f91d 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 800d70e:	4623      	mov	r3, r4
}
 800d710:	4618      	mov	r0, r3
 800d712:	3744      	adds	r7, #68	; 0x44
 800d714:	46bd      	mov	sp, r7
 800d716:	bd90      	pop	{r4, r7, pc}

0800d718 <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800d718:	b590      	push	{r4, r7, lr}
 800d71a:	b091      	sub	sp, #68	; 0x44
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	3320      	adds	r3, #32
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f107 0208 	add.w	r2, r7, #8
 800d72c:	6879      	ldr	r1, [r7, #4]
 800d72e:	4610      	mov	r0, r2
 800d730:	4798      	blx	r3
 800d732:	f107 0308 	add.w	r3, r7, #8
 800d736:	4618      	mov	r0, r3
 800d738:	f011 fe3e 	bl	801f3b8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800d73c:	4604      	mov	r4, r0
 800d73e:	bf00      	nop
 800d740:	f107 0308 	add.w	r3, r7, #8
 800d744:	4618      	mov	r0, r3
 800d746:	f011 f8ff 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 800d74a:	4623      	mov	r3, r4
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3744      	adds	r7, #68	; 0x44
 800d750:	46bd      	mov	sp, r7
 800d752:	bd90      	pop	{r4, r7, pc}

0800d754 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800d754:	b590      	push	{r4, r7, lr}
 800d756:	b091      	sub	sp, #68	; 0x44
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	3320      	adds	r3, #32
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f107 0208 	add.w	r2, r7, #8
 800d768:	6879      	ldr	r1, [r7, #4]
 800d76a:	4610      	mov	r0, r2
 800d76c:	4798      	blx	r3
 800d76e:	f107 0308 	add.w	r3, r7, #8
 800d772:	4618      	mov	r0, r3
 800d774:	f011 fe48 	bl	801f408 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800d778:	4604      	mov	r4, r0
 800d77a:	bf00      	nop
 800d77c:	f107 0308 	add.w	r3, r7, #8
 800d780:	4618      	mov	r0, r3
 800d782:	f011 f8e1 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 800d786:	4623      	mov	r3, r4
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3744      	adds	r7, #68	; 0x44
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd90      	pop	{r4, r7, pc}

0800d790 <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d00a      	beq.n	800d7b6 <_ZN11MockSupport14hasReturnValueEv+0x26>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	3350      	adds	r3, #80	; 0x50
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4610      	mov	r0, r2
 800d7b0:	4798      	blx	r3
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	e000      	b.n	800d7b8 <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800d7b6:	2300      	movs	r3, #0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3708      	adds	r7, #8
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <_Z41__static_initialization_and_destruction_0ii>:
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b084      	sub	sp, #16
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	6039      	str	r1, [r7, #0]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d115      	bne.n	800d7fc <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d110      	bne.n	800d7fc <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800d7da:	f107 0308 	add.w	r3, r7, #8
 800d7de:	490f      	ldr	r1, [pc, #60]	; (800d81c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f000 fb62 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800d7e6:	f107 0308 	add.w	r3, r7, #8
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	480c      	ldr	r0, [pc, #48]	; (800d820 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800d7ee:	f7fe fc6d 	bl	800c0cc <_ZN11MockSupportC1ERK12SimpleString>
 800d7f2:	f107 0308 	add.w	r3, r7, #8
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f000 ff0f 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d107      	bne.n	800d812 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d808:	4293      	cmp	r3, r2
 800d80a:	d102      	bne.n	800d812 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800d80c:	4804      	ldr	r0, [pc, #16]	; (800d820 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800d80e:	f7fe fca7 	bl	800c160 <_ZN11MockSupportD1Ev>
}
 800d812:	bf00      	nop
 800d814:	3710      	adds	r7, #16
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	08025bfc 	.word	0x08025bfc
 800d820:	20000918 	.word	0x20000918

0800d824 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	4a05      	ldr	r2, [pc, #20]	; (800d844 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	601a      	str	r2, [r3, #0]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	4618      	mov	r0, r3
 800d836:	f7fe fbbb 	bl	800bfb0 <_ZN11MockFailureD1Ev>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	4618      	mov	r0, r3
 800d83e:	3708      	adds	r7, #8
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	08029e00 	.word	0x08029e00

0800d848 <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f7ff ffe7 	bl	800d824 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800d856:	2134      	movs	r1, #52	; 0x34
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f7fd ff77 	bl	800b74c <_ZdlPvj>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	4618      	mov	r0, r3
 800d862:	3708      	adds	r7, #8
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}

0800d868 <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	4a05      	ldr	r2, [pc, #20]	; (800d888 <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	601a      	str	r2, [r3, #0]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	4618      	mov	r0, r3
 800d87a:	f7fe fb99 	bl	800bfb0 <_ZN11MockFailureD1Ev>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	4618      	mov	r0, r3
 800d882:	3708      	adds	r7, #8
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}
 800d888:	08029dd4 	.word	0x08029dd4

0800d88c <_ZN20MockCallOrderFailureD0Ev>:
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f7ff ffe7 	bl	800d868 <_ZN20MockCallOrderFailureD1Ev>
 800d89a:	2134      	movs	r1, #52	; 0x34
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f7fd ff55 	bl	800b74c <_ZdlPvj>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3708      	adds	r7, #8
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d8b4:	2001      	movs	r0, #1
 800d8b6:	f7ff ff83 	bl	800d7c0 <_Z41__static_initialization_and_destruction_0ii>
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d8c4:	2000      	movs	r0, #0
 800d8c6:	f7ff ff7b 	bl	800d7c0 <_Z41__static_initialization_and_destruction_0ii>
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800d8d4:	4b05      	ldr	r3, [pc, #20]	; (800d8ec <_ZN11SimpleMutexC1Ev+0x20>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4798      	blx	r3
 800d8da:	4602      	mov	r2, r0
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	601a      	str	r2, [r3, #0]
}
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3708      	adds	r7, #8
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	200000f0 	.word	0x200000f0

0800d8f0 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800d8f8:	4b05      	ldr	r3, [pc, #20]	; (800d910 <_ZN11SimpleMutexD1Ev+0x20>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	687a      	ldr	r2, [r7, #4]
 800d8fe:	6812      	ldr	r2, [r2, #0]
 800d900:	4610      	mov	r0, r2
 800d902:	4798      	blx	r3
}
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	4618      	mov	r0, r3
 800d908:	3708      	adds	r7, #8
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	200000fc 	.word	0x200000fc

0800d914 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800d91c:	4b04      	ldr	r3, [pc, #16]	; (800d930 <_ZN11SimpleMutex4LockEv+0x1c>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	687a      	ldr	r2, [r7, #4]
 800d922:	6812      	ldr	r2, [r2, #0]
 800d924:	4610      	mov	r0, r2
 800d926:	4798      	blx	r3
}
 800d928:	bf00      	nop
 800d92a:	3708      	adds	r7, #8
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	200000f4 	.word	0x200000f4

0800d934 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800d93c:	4b04      	ldr	r3, [pc, #16]	; (800d950 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	6812      	ldr	r2, [r2, #0]
 800d944:	4610      	mov	r0, r2
 800d946:	4798      	blx	r3
}
 800d948:	bf00      	nop
 800d94a:	3708      	adds	r7, #8
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	200000f8 	.word	0x200000f8

0800d954 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	683a      	ldr	r2, [r7, #0]
 800d962:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4618      	mov	r0, r3
 800d96a:	f7ff ffd3 	bl	800d914 <_ZN11SimpleMutex4LockEv>
}
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	4618      	mov	r0, r3
 800d972:	3708      	adds	r7, #8
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}

0800d978 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4618      	mov	r0, r3
 800d986:	f7ff ffd5 	bl	800d934 <_ZN11SimpleMutex6UnlockEv>
}
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	4618      	mov	r0, r3
 800d98e:	3708      	adds	r7, #8
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800d994:	b580      	push	{r7, lr}
 800d996:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800d998:	4b05      	ldr	r3, [pc, #20]	; (800d9b0 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d103      	bne.n	800d9a8 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800d9a0:	f003 fd7a 	bl	8011498 <_Z24defaultNewArrayAllocatorv>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	e001      	b.n	800d9ac <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800d9a8:	4b01      	ldr	r3, [pc, #4]	; (800d9b0 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	20000960 	.word	0x20000960

0800d9b4 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800d9b4:	b590      	push	{r4, r7, lr}
 800d9b6:	b085      	sub	sp, #20
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	60b9      	str	r1, [r7, #8]
 800d9be:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800d9c0:	f7ff ffe8 	bl	800d994 <_ZN12SimpleString18getStringAllocatorEv>
 800d9c4:	6803      	ldr	r3, [r0, #0]
 800d9c6:	3308      	adds	r3, #8
 800d9c8:	681c      	ldr	r4, [r3, #0]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	68ba      	ldr	r2, [r7, #8]
 800d9ce:	68f9      	ldr	r1, [r7, #12]
 800d9d0:	47a0      	blx	r4
 800d9d2:	4603      	mov	r3, r0
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3714      	adds	r7, #20
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd90      	pop	{r4, r7, pc}

0800d9dc <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800d9dc:	b590      	push	{r4, r7, lr}
 800d9de:	b087      	sub	sp, #28
 800d9e0:	af02      	add	r7, sp, #8
 800d9e2:	60f8      	str	r0, [r7, #12]
 800d9e4:	60b9      	str	r1, [r7, #8]
 800d9e6:	607a      	str	r2, [r7, #4]
 800d9e8:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800d9ea:	f7ff ffd3 	bl	800d994 <_ZN12SimpleString18getStringAllocatorEv>
 800d9ee:	6803      	ldr	r3, [r0, #0]
 800d9f0:	330c      	adds	r3, #12
 800d9f2:	681c      	ldr	r4, [r3, #0]
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	9300      	str	r3, [sp, #0]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	68ba      	ldr	r2, [r7, #8]
 800d9fc:	68f9      	ldr	r1, [r7, #12]
 800d9fe:	47a0      	blx	r4
}
 800da00:	bf00      	nop
 800da02:	3714      	adds	r7, #20
 800da04:	46bd      	mov	sp, r7
 800da06:	bd90      	pop	{r4, r7, pc}

0800da08 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800da10:	2284      	movs	r2, #132	; 0x84
 800da12:	4906      	ldr	r1, [pc, #24]	; (800da2c <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800da14:	2001      	movs	r0, #1
 800da16:	f7ff ffcd 	bl	800d9b4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800da1a:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2200      	movs	r2, #0
 800da20:	701a      	strb	r2, [r3, #0]
    return empty;
 800da22:	68fb      	ldr	r3, [r7, #12]
}
 800da24:	4618      	mov	r0, r3
 800da26:	3710      	adds	r7, #16
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}
 800da2c:	08025c94 	.word	0x08025c94

0800da30 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	4618      	mov	r0, r3
 800da3e:	f001 f809 	bl	800ea54 <_ZN12SimpleString7isSpaceEc>
 800da42:	4603      	mov	r3, r0
 800da44:	2b00      	cmp	r3, #0
 800da46:	d003      	beq.n	800da50 <_ZN12SimpleString4AtoUEPKc+0x20>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	3301      	adds	r3, #1
 800da4c:	607b      	str	r3, [r7, #4]
 800da4e:	e7f3      	b.n	800da38 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800da50:	2300      	movs	r3, #0
 800da52:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	4618      	mov	r0, r3
 800da5a:	f000 ffe7 	bl	800ea2c <_ZN12SimpleString7isDigitEc>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d005      	beq.n	800da70 <_ZN12SimpleString4AtoUEPKc+0x40>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	2b2f      	cmp	r3, #47	; 0x2f
 800da6a:	d901      	bls.n	800da70 <_ZN12SimpleString4AtoUEPKc+0x40>
 800da6c:	2301      	movs	r3, #1
 800da6e:	e000      	b.n	800da72 <_ZN12SimpleString4AtoUEPKc+0x42>
 800da70:	2300      	movs	r3, #0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d010      	beq.n	800da98 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800da76:	68fa      	ldr	r2, [r7, #12]
 800da78:	4613      	mov	r3, r2
 800da7a:	009b      	lsls	r3, r3, #2
 800da7c:	4413      	add	r3, r2
 800da7e:	005b      	lsls	r3, r3, #1
 800da80:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	461a      	mov	r2, r3
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	4413      	add	r3, r2
 800da8c:	3b30      	subs	r3, #48	; 0x30
 800da8e:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	3301      	adds	r3, #1
 800da94:	607b      	str	r3, [r7, #4]
 800da96:	e7dd      	b.n	800da54 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800da98:	68fb      	ldr	r3, [r7, #12]
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3710      	adds	r7, #16
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}

0800daa2 <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b084      	sub	sp, #16
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	4618      	mov	r0, r3
 800dab0:	f000 ffd0 	bl	800ea54 <_ZN12SimpleString7isSpaceEc>
 800dab4:	4603      	mov	r3, r0
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d003      	beq.n	800dac2 <_ZN12SimpleString4AtoIEPKc+0x20>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	3301      	adds	r3, #1
 800dabe:	607b      	str	r3, [r7, #4]
 800dac0:	e7f3      	b.n	800daaa <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800dac8:	7afb      	ldrb	r3, [r7, #11]
 800daca:	2b2d      	cmp	r3, #45	; 0x2d
 800dacc:	d002      	beq.n	800dad4 <_ZN12SimpleString4AtoIEPKc+0x32>
 800dace:	7afb      	ldrb	r3, [r7, #11]
 800dad0:	2b2b      	cmp	r3, #43	; 0x2b
 800dad2:	d102      	bne.n	800dada <_ZN12SimpleString4AtoIEPKc+0x38>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	3301      	adds	r3, #1
 800dad8:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800dada:	2300      	movs	r3, #0
 800dadc:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	4618      	mov	r0, r3
 800dae4:	f000 ffa2 	bl	800ea2c <_ZN12SimpleString7isDigitEc>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d00f      	beq.n	800db0e <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800daee:	68fa      	ldr	r2, [r7, #12]
 800daf0:	4613      	mov	r3, r2
 800daf2:	009b      	lsls	r3, r3, #2
 800daf4:	4413      	add	r3, r2
 800daf6:	005b      	lsls	r3, r3, #1
 800daf8:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	3b30      	subs	r3, #48	; 0x30
 800db00:	68fa      	ldr	r2, [r7, #12]
 800db02:	4413      	add	r3, r2
 800db04:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	3301      	adds	r3, #1
 800db0a:	607b      	str	r3, [r7, #4]
 800db0c:	e7e7      	b.n	800dade <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800db0e:	7afb      	ldrb	r3, [r7, #11]
 800db10:	2b2d      	cmp	r3, #45	; 0x2d
 800db12:	d102      	bne.n	800db1a <_ZN12SimpleString4AtoIEPKc+0x78>
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	425b      	negs	r3, r3
 800db18:	e000      	b.n	800db1c <_ZN12SimpleString4AtoIEPKc+0x7a>
 800db1a:	68fb      	ldr	r3, [r7, #12]
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3710      	adds	r7, #16
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d00c      	beq.n	800db50 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	781a      	ldrb	r2, [r3, #0]
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	429a      	cmp	r2, r3
 800db40:	d106      	bne.n	800db50 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	3301      	adds	r3, #1
 800db46:	607b      	str	r3, [r7, #4]
       ++s2;
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	3301      	adds	r3, #1
 800db4c:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800db4e:	e7ee      	b.n	800db2e <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	461a      	mov	r2, r3
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	1ad3      	subs	r3, r2, r3
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	370c      	adds	r7, #12
 800db60:	46bd      	mov	sp, r7
 800db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db66:	4770      	bx	lr

0800db68 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800db68:	b480      	push	{r7}
 800db6a:	b085      	sub	sp, #20
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800db70:	f04f 33ff 	mov.w	r3, #4294967295
 800db74:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	3301      	adds	r3, #1
 800db7a:	60fb      	str	r3, [r7, #12]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	1c5a      	adds	r2, r3, #1
 800db80:	607a      	str	r2, [r7, #4]
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	bf14      	ite	ne
 800db88:	2301      	movne	r3, #1
 800db8a:	2300      	moveq	r3, #0
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d000      	beq.n	800db94 <_ZN12SimpleString6StrLenEPKc+0x2c>
 800db92:	e7f0      	b.n	800db76 <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800db94:	68fb      	ldr	r3, [r7, #12]
}
 800db96:	4618      	mov	r0, r3
 800db98:	3714      	adds	r7, #20
 800db9a:	46bd      	mov	sp, r7
 800db9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba0:	4770      	bx	lr

0800dba2 <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800dba2:	b480      	push	{r7}
 800dba4:	b085      	sub	sp, #20
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	60f8      	str	r0, [r7, #12]
 800dbaa:	60b9      	str	r1, [r7, #8]
 800dbac:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d013      	beq.n	800dbdc <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00f      	beq.n	800dbdc <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	781a      	ldrb	r2, [r3, #0]
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d109      	bne.n	800dbdc <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	3b01      	subs	r3, #1
 800dbcc:	607b      	str	r3, [r7, #4]
        ++s1;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	60fb      	str	r3, [r7, #12]
        ++s2;
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800dbda:	e7e8      	b.n	800dbae <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d006      	beq.n	800dbf0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	1ad3      	subs	r3, r2, r3
 800dbee:	e000      	b.n	800dbf2 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800dbf0:	2300      	movs	r3, #0
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3714      	adds	r7, #20
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr

0800dbfe <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800dbfe:	b480      	push	{r7}
 800dc00:	b087      	sub	sp, #28
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	60f8      	str	r0, [r7, #12]
 800dc06:	60b9      	str	r1, [r7, #8]
 800dc08:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d002      	beq.n	800dc1a <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d101      	bne.n	800dc1e <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	e01e      	b.n	800dc5c <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	781a      	ldrb	r2, [r3, #0]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	3b01      	subs	r3, #1
 800dc2a:	607b      	str	r3, [r7, #4]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d005      	beq.n	800dc3e <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d001      	beq.n	800dc3e <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	e000      	b.n	800dc40 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800dc3e:	2300      	movs	r3, #0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d00a      	beq.n	800dc5a <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	3301      	adds	r3, #1
 800dc48:	60bb      	str	r3, [r7, #8]
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	3301      	adds	r3, #1
 800dc4e:	60fb      	str	r3, [r7, #12]
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	781a      	ldrb	r2, [r3, #0]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800dc58:	e7e5      	b.n	800dc26 <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800dc5a:	697b      	ldr	r3, [r7, #20]
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	371c      	adds	r7, #28
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d101      	bne.n	800dc7e <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	e01b      	b.n	800dcb6 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	781b      	ldrb	r3, [r3, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d016      	beq.n	800dcb4 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800dc86:	6838      	ldr	r0, [r7, #0]
 800dc88:	f7ff ff6e 	bl	800db68 <_ZN12SimpleString6StrLenEPKc>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	461a      	mov	r2, r3
 800dc90:	6839      	ldr	r1, [r7, #0]
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f7ff ff85 	bl	800dba2 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	bf0c      	ite	eq
 800dc9e:	2301      	moveq	r3, #1
 800dca0:	2300      	movne	r3, #0
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d001      	beq.n	800dcac <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	e004      	b.n	800dcb6 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	3301      	adds	r3, #1
 800dcb0:	607b      	str	r3, [r7, #4]
 800dcb2:	e7e4      	b.n	800dc7e <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800dcb4:	2300      	movs	r3, #0
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3708      	adds	r7, #8
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}

0800dcbe <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b082      	sub	sp, #8
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800dcc8:	79fb      	ldrb	r3, [r7, #7]
 800dcca:	4618      	mov	r0, r3
 800dccc:	f000 fed9 	bl	800ea82 <_ZN12SimpleString7isUpperEc>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d003      	beq.n	800dcde <_ZN12SimpleString7ToLowerEc+0x20>
 800dcd6:	79fb      	ldrb	r3, [r7, #7]
 800dcd8:	3320      	adds	r3, #32
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	e000      	b.n	800dce0 <_ZN12SimpleString7ToLowerEc+0x22>
 800dcde:	79fb      	ldrb	r3, [r7, #7]
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3708      	adds	r7, #8
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b087      	sub	sp, #28
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	613b      	str	r3, [r7, #16]

    while (n--)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	1e5a      	subs	r2, r3, #1
 800dd00:	607a      	str	r2, [r7, #4]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	bf14      	ite	ne
 800dd06:	2301      	movne	r3, #1
 800dd08:	2300      	moveq	r3, #0
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d013      	beq.n	800dd38 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	781a      	ldrb	r2, [r3, #0]
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d006      	beq.n	800dd2a <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	461a      	mov	r2, r3
 800dd22:	693b      	ldr	r3, [r7, #16]
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	1ad3      	subs	r3, r2, r3
 800dd28:	e007      	b.n	800dd3a <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	617b      	str	r3, [r7, #20]
            ++p2;
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	3301      	adds	r3, #1
 800dd34:	613b      	str	r3, [r7, #16]
    while (n--)
 800dd36:	e7e1      	b.n	800dcfc <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800dd38:	2300      	movs	r3, #0
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	371c      	adds	r7, #28
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr
	...

0800dd48 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b082      	sub	sp, #8
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d00d      	beq.n	800dd74 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6818      	ldr	r0, [r3, #0]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6859      	ldr	r1, [r3, #4]
 800dd60:	23ee      	movs	r3, #238	; 0xee
 800dd62:	4a06      	ldr	r2, [pc, #24]	; (800dd7c <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800dd64:	f7ff fe3a 	bl	800d9dc <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2200      	movs	r2, #0
 800dd72:	605a      	str	r2, [r3, #4]
    }
}
 800dd74:	bf00      	nop
 800dd76:	3708      	adds	r7, #8
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}
 800dd7c:	08025c94 	.word	0x08025c94

0800dd80 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f7ff ffdd 	bl	800dd48 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2201      	movs	r2, #1
 800dd92:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f7ff fe37 	bl	800da08 <_ZNK12SimpleString14getEmptyStringEv>
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	601a      	str	r2, [r3, #0]
}
 800dda0:	bf00      	nop
 800dda2:	3708      	adds	r7, #8
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800ddb4:	68f8      	ldr	r0, [r7, #12]
 800ddb6:	f7ff ffc7 	bl	800dd48 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	687a      	ldr	r2, [r7, #4]
 800ddbe:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	68b8      	ldr	r0, [r7, #8]
 800ddc8:	f000 fe12 	bl	800e9f0 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800ddcc:	4602      	mov	r2, r0
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	601a      	str	r2, [r3, #0]
}
 800ddd2:	bf00      	nop
 800ddd4:	3710      	adds	r7, #16
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
	...

0800dddc <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b082      	sub	sp, #8
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f7ff ffae 	bl	800dd48 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	683a      	ldr	r2, [r7, #0]
 800ddf0:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	f240 1209 	movw	r2, #265	; 0x109
 800ddfa:	4907      	ldr	r1, [pc, #28]	; (800de18 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7ff fdd9 	bl	800d9b4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800de02:	4602      	mov	r2, r0
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2200      	movs	r2, #0
 800de0e:	701a      	strb	r2, [r3, #0]
}
 800de10:	bf00      	nop
 800de12:	3708      	adds	r7, #8
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}
 800de18:	08025c94 	.word	0x08025c94

0800de1c <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	60b9      	str	r1, [r7, #8]
 800de26:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800de28:	68f8      	ldr	r0, [r7, #12]
 800de2a:	f7ff ff8d 	bl	800dd48 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	687a      	ldr	r2, [r7, #4]
 800de32:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	68ba      	ldr	r2, [r7, #8]
 800de38:	601a      	str	r2, [r3, #0]
}
 800de3a:	bf00      	nop
 800de3c:	3710      	adds	r7, #16
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}

0800de42 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800de42:	b590      	push	{r4, r7, lr}
 800de44:	b083      	sub	sp, #12
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]
 800de4a:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	681c      	ldr	r4, [r3, #0]
 800de50:	6838      	ldr	r0, [r7, #0]
 800de52:	f000 fbc1 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800de56:	4603      	mov	r3, r0
 800de58:	3301      	adds	r3, #1
 800de5a:	461a      	mov	r2, r3
 800de5c:	4621      	mov	r1, r4
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f7ff ffa2 	bl	800dda8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800de64:	bf00      	nop
 800de66:	370c      	adds	r7, #12
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd90      	pop	{r4, r7, pc}

0800de6c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b082      	sub	sp, #8
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800de76:	6838      	ldr	r0, [r7, #0]
 800de78:	f7ff fe76 	bl	800db68 <_ZN12SimpleString6StrLenEPKc>
 800de7c:	4603      	mov	r3, r0
 800de7e:	3301      	adds	r3, #1
 800de80:	461a      	mov	r2, r3
 800de82:	6839      	ldr	r1, [r7, #0]
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f7ff ff8f 	bl	800dda8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800de8a:	bf00      	nop
 800de8c:	3708      	adds	r7, #8
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}

0800de92 <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800de92:	b480      	push	{r7}
 800de94:	b083      	sub	sp, #12
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
    return buffer_;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	370c      	adds	r7, #12
 800dea2:	46bd      	mov	sp, r7
 800dea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea8:	4770      	bx	lr

0800deaa <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800deaa:	b580      	push	{r7, lr}
 800deac:	b082      	sub	sp, #8
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]
 800deb2:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2200      	movs	r2, #0
 800deb8:	601a      	str	r2, [r3, #0]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2200      	movs	r2, #0
 800debe:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d103      	bne.n	800dece <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f7ff ff5a 	bl	800dd80 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800decc:	e003      	b.n	800ded6 <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800dece:	6839      	ldr	r1, [r7, #0]
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f7ff ffcb 	bl	800de6c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	4618      	mov	r0, r3
 800deda:	3708      	adds	r7, #8
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b088      	sub	sp, #32
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2200      	movs	r2, #0
 800def0:	601a      	str	r2, [r3, #0]
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2200      	movs	r2, #0
 800def6:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800def8:	68b8      	ldr	r0, [r7, #8]
 800defa:	f7ff fe35 	bl	800db68 <_ZN12SimpleString6StrLenEPKc>
 800defe:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	fb02 f303 	mul.w	r3, r2, r3
 800df08:	3301      	adds	r3, #1
 800df0a:	4619      	mov	r1, r3
 800df0c:	68f8      	ldr	r0, [r7, #12]
 800df0e:	f7ff ff65 	bl	800dddc <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800df18:	2300      	movs	r3, #0
 800df1a:	61bb      	str	r3, [r7, #24]
 800df1c:	69ba      	ldr	r2, [r7, #24]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	429a      	cmp	r2, r3
 800df22:	d20e      	bcs.n	800df42 <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	3301      	adds	r3, #1
 800df28:	461a      	mov	r2, r3
 800df2a:	68b9      	ldr	r1, [r7, #8]
 800df2c:	69f8      	ldr	r0, [r7, #28]
 800df2e:	f7ff fe66 	bl	800dbfe <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800df32:	69fa      	ldr	r2, [r7, #28]
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	4413      	add	r3, r2
 800df38:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800df3a:	69bb      	ldr	r3, [r7, #24]
 800df3c:	3301      	adds	r3, #1
 800df3e:	61bb      	str	r3, [r7, #24]
 800df40:	e7ec      	b.n	800df1c <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800df42:	69fb      	ldr	r3, [r7, #28]
 800df44:	2200      	movs	r2, #0
 800df46:	701a      	strb	r2, [r3, #0]
}
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	4618      	mov	r0, r3
 800df4c:	3720      	adds	r7, #32
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}

0800df52 <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800df52:	b580      	push	{r7, lr}
 800df54:	b082      	sub	sp, #8
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
 800df5a:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2200      	movs	r2, #0
 800df60:	601a      	str	r2, [r3, #0]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2200      	movs	r2, #0
 800df66:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800df68:	6838      	ldr	r0, [r7, #0]
 800df6a:	f7ff ff92 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800df6e:	4603      	mov	r3, r0
 800df70:	4619      	mov	r1, r3
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f7ff ff7a 	bl	800de6c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	4618      	mov	r0, r3
 800df7c:	3708      	adds	r7, #8
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}

0800df82 <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800df82:	b580      	push	{r7, lr}
 800df84:	b082      	sub	sp, #8
 800df86:	af00      	add	r7, sp, #0
 800df88:	6078      	str	r0, [r7, #4]
 800df8a:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800df8c:	687a      	ldr	r2, [r7, #4]
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	429a      	cmp	r2, r3
 800df92:	d003      	beq.n	800df9c <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800df94:	6839      	ldr	r1, [r7, #0]
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f7ff ff53 	bl	800de42 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800df9c:	687b      	ldr	r3, [r7, #4]
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3708      	adds	r7, #8
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}

0800dfa6 <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800dfa6:	b590      	push	{r4, r7, lr}
 800dfa8:	b083      	sub	sp, #12
 800dfaa:	af00      	add	r7, sp, #0
 800dfac:	6078      	str	r0, [r7, #4]
 800dfae:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f7ff ff6e 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	6838      	ldr	r0, [r7, #0]
 800dfba:	f7ff ff6a 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	f7ff fe50 	bl	800dc68 <_ZN12SimpleString6StrStrEPKcS1_>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	bf14      	ite	ne
 800dfce:	2301      	movne	r3, #1
 800dfd0:	2300      	moveq	r3, #0
 800dfd2:	b2db      	uxtb	r3, r3
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	370c      	adds	r7, #12
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd90      	pop	{r4, r7, pc}

0800dfdc <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800dfdc:	b590      	push	{r4, r7, lr}
 800dfde:	b087      	sub	sp, #28
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800dfe6:	f107 0308 	add.w	r3, r7, #8
 800dfea:	6879      	ldr	r1, [r7, #4]
 800dfec:	4618      	mov	r0, r3
 800dfee:	f000 fabb 	bl	800e568 <_ZNK12SimpleString9lowerCaseEv>
 800dff2:	f107 0310 	add.w	r3, r7, #16
 800dff6:	6839      	ldr	r1, [r7, #0]
 800dff8:	4618      	mov	r0, r3
 800dffa:	f000 fab5 	bl	800e568 <_ZNK12SimpleString9lowerCaseEv>
 800dffe:	f107 0210 	add.w	r2, r7, #16
 800e002:	f107 0308 	add.w	r3, r7, #8
 800e006:	4611      	mov	r1, r2
 800e008:	4618      	mov	r0, r3
 800e00a:	f7ff ffcc 	bl	800dfa6 <_ZNK12SimpleString8containsERKS_>
 800e00e:	4603      	mov	r3, r0
 800e010:	461c      	mov	r4, r3
 800e012:	bf00      	nop
 800e014:	f107 0310 	add.w	r3, r7, #16
 800e018:	4618      	mov	r0, r3
 800e01a:	f000 fafe 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800e01e:	f107 0308 	add.w	r3, r7, #8
 800e022:	4618      	mov	r0, r3
 800e024:	f000 faf9 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800e028:	4623      	mov	r3, r4
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	371c      	adds	r7, #28
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd90      	pop	{r4, r7, pc}

0800e032 <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800e032:	b590      	push	{r4, r7, lr}
 800e034:	b083      	sub	sp, #12
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
 800e03a:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800e03c:	6838      	ldr	r0, [r7, #0]
 800e03e:	f000 facb 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800e042:	4603      	mov	r3, r0
 800e044:	2b00      	cmp	r3, #0
 800e046:	bf0c      	ite	eq
 800e048:	2301      	moveq	r3, #1
 800e04a:	2300      	movne	r3, #0
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d001      	beq.n	800e056 <_ZNK12SimpleString10startsWithERKS_+0x24>
 800e052:	2301      	movs	r3, #1
 800e054:	e022      	b.n	800e09c <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 fabe 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800e05c:	4603      	mov	r3, r0
 800e05e:	2b00      	cmp	r3, #0
 800e060:	bf0c      	ite	eq
 800e062:	2301      	moveq	r3, #1
 800e064:	2300      	movne	r3, #0
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d001      	beq.n	800e070 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800e06c:	2300      	movs	r3, #0
 800e06e:	e015      	b.n	800e09c <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f7ff ff0e 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e076:	4604      	mov	r4, r0
 800e078:	6838      	ldr	r0, [r7, #0]
 800e07a:	f7ff ff0a 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e07e:	4603      	mov	r3, r0
 800e080:	4619      	mov	r1, r3
 800e082:	4620      	mov	r0, r4
 800e084:	f7ff fdf0 	bl	800dc68 <_ZN12SimpleString6StrStrEPKcS1_>
 800e088:	4604      	mov	r4, r0
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f7ff ff01 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e090:	4603      	mov	r3, r0
 800e092:	429c      	cmp	r4, r3
 800e094:	bf0c      	ite	eq
 800e096:	2301      	moveq	r3, #1
 800e098:	2300      	movne	r3, #0
 800e09a:	b2db      	uxtb	r3, r3
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	370c      	adds	r7, #12
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd90      	pop	{r4, r7, pc}

0800e0a4 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800e0a4:	b590      	push	{r4, r7, lr}
 800e0a6:	b085      	sub	sp, #20
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 fa92 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800e0b4:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800e0b6:	6838      	ldr	r0, [r7, #0]
 800e0b8:	f000 fa8e 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800e0bc:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d101      	bne.n	800e0c8 <_ZNK12SimpleString8endsWithERKS_+0x24>
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	e020      	b.n	800e10a <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d101      	bne.n	800e0d2 <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	e01b      	b.n	800e10a <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800e0d2:	68fa      	ldr	r2, [r7, #12]
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d201      	bcs.n	800e0de <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	e015      	b.n	800e10a <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f7ff fed7 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e0e4:	4601      	mov	r1, r0
 800e0e6:	68fa      	ldr	r2, [r7, #12]
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	1ad3      	subs	r3, r2, r3
 800e0ec:	18cc      	adds	r4, r1, r3
 800e0ee:	6838      	ldr	r0, [r7, #0]
 800e0f0:	f7ff fecf 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	f7ff fd13 	bl	800db24 <_ZN12SimpleString6StrCmpEPKcS1_>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	bf0c      	ite	eq
 800e104:	2301      	moveq	r3, #1
 800e106:	2300      	movne	r3, #0
 800e108:	b2db      	uxtb	r3, r3
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3714      	adds	r7, #20
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd90      	pop	{r4, r7, pc}

0800e112 <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800e112:	b580      	push	{r7, lr}
 800e114:	b086      	sub	sp, #24
 800e116:	af00      	add	r7, sp, #0
 800e118:	6078      	str	r0, [r7, #4]
 800e11a:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800e11c:	2300      	movs	r3, #0
 800e11e:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f7ff feb6 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e126:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800e128:	2300      	movs	r3, #0
 800e12a:	60fb      	str	r3, [r7, #12]
    if (*str){
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d008      	beq.n	800e146 <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800e134:	6838      	ldr	r0, [r7, #0]
 800e136:	f7ff feac 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e13a:	4603      	mov	r3, r0
 800e13c:	4619      	mov	r1, r3
 800e13e:	6938      	ldr	r0, [r7, #16]
 800e140:	f7ff fd92 	bl	800dc68 <_ZN12SimpleString6StrStrEPKcS1_>
 800e144:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d014      	beq.n	800e178 <_ZNK12SimpleString5countERKS_+0x66>
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d011      	beq.n	800e178 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	613b      	str	r3, [r7, #16]
        str++;
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	3301      	adds	r3, #1
 800e15c:	613b      	str	r3, [r7, #16]
        num++;
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	3301      	adds	r3, #1
 800e162:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800e164:	6838      	ldr	r0, [r7, #0]
 800e166:	f7ff fe94 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e16a:	4603      	mov	r3, r0
 800e16c:	4619      	mov	r1, r3
 800e16e:	6938      	ldr	r0, [r7, #16]
 800e170:	f7ff fd7a 	bl	800dc68 <_ZN12SimpleString6StrStrEPKcS1_>
 800e174:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800e176:	e7e6      	b.n	800e146 <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800e178:	697b      	ldr	r3, [r7, #20]
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3718      	adds	r7, #24
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}

0800e182 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800e182:	b590      	push	{r4, r7, lr}
 800e184:	b091      	sub	sp, #68	; 0x44
 800e186:	af00      	add	r7, sp, #0
 800e188:	60f8      	str	r0, [r7, #12]
 800e18a:	60b9      	str	r1, [r7, #8]
 800e18c:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800e18e:	68b9      	ldr	r1, [r7, #8]
 800e190:	68f8      	ldr	r0, [r7, #12]
 800e192:	f7ff ffbe 	bl	800e112 <_ZNK12SimpleString5countERKS_>
 800e196:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800e198:	68b9      	ldr	r1, [r7, #8]
 800e19a:	68f8      	ldr	r0, [r7, #12]
 800e19c:	f7ff ff82 	bl	800e0a4 <_ZNK12SimpleString8endsWithERKS_>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d001      	beq.n	800e1aa <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	e000      	b.n	800e1ac <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800e1ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b2:	4413      	add	r3, r2
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f001 f95c 	bl	800f474 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800e1bc:	68f8      	ldr	r0, [r7, #12]
 800e1be:	f7ff fe68 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e1c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800e1c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d235      	bcs.n	800e23c <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800e1d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800e1d4:	68b8      	ldr	r0, [r7, #8]
 800e1d6:	f7ff fe5c 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	4619      	mov	r1, r3
 800e1de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e1e0:	f7ff fd42 	bl	800dc68 <_ZN12SimpleString6StrStrEPKcS1_>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800e1ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f001 f9db 	bl	800f5a8 <_ZN22SimpleStringCollectionixEj>
 800e1f2:	4604      	mov	r4, r0
 800e1f4:	f107 031c 	add.w	r3, r7, #28
 800e1f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7ff fe55 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800e200:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e204:	1ad3      	subs	r3, r2, r3
 800e206:	f107 0014 	add.w	r0, r7, #20
 800e20a:	f107 011c 	add.w	r1, r7, #28
 800e20e:	2200      	movs	r2, #0
 800e210:	f000 fb0c 	bl	800e82c <_ZNK12SimpleString9subStringEjj>
 800e214:	f107 0314 	add.w	r3, r7, #20
 800e218:	4619      	mov	r1, r3
 800e21a:	4620      	mov	r0, r4
 800e21c:	f7ff feb1 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 800e220:	f107 0314 	add.w	r3, r7, #20
 800e224:	4618      	mov	r0, r3
 800e226:	f000 f9f8 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800e22a:	f107 031c 	add.w	r3, r7, #28
 800e22e:	4618      	mov	r0, r3
 800e230:	f000 f9f3 	bl	800e61a <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800e234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e236:	3301      	adds	r3, #1
 800e238:	63bb      	str	r3, [r7, #56]	; 0x38
 800e23a:	e7c5      	b.n	800e1c8 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800e23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d015      	beq.n	800e26e <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800e242:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f001 f9af 	bl	800f5a8 <_ZN22SimpleStringCollectionixEj>
 800e24a:	4604      	mov	r4, r0
 800e24c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e250:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e252:	4618      	mov	r0, r3
 800e254:	f7ff fe29 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800e258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e25c:	4619      	mov	r1, r3
 800e25e:	4620      	mov	r0, r4
 800e260:	f7ff fe8f 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 800e264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e268:	4618      	mov	r0, r3
 800e26a:	f000 f9d6 	bl	800e61a <_ZN12SimpleStringD1Ev>
    }
}
 800e26e:	bf00      	nop
 800e270:	3744      	adds	r7, #68	; 0x44
 800e272:	46bd      	mov	sp, r7
 800e274:	bd90      	pop	{r4, r7, pc}

0800e276 <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800e276:	b580      	push	{r7, lr}
 800e278:	b084      	sub	sp, #16
 800e27a:	af00      	add	r7, sp, #0
 800e27c:	6078      	str	r0, [r7, #4]
 800e27e:	460b      	mov	r3, r1
 800e280:	70fb      	strb	r3, [r7, #3]
 800e282:	4613      	mov	r3, r2
 800e284:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f000 f9a6 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800e28c:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800e28e:	2300      	movs	r3, #0
 800e290:	60fb      	str	r3, [r7, #12]
 800e292:	68fa      	ldr	r2, [r7, #12]
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	429a      	cmp	r2, r3
 800e298:	d218      	bcs.n	800e2cc <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f7ff fdf9 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e2a0:	4602      	mov	r2, r0
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	4413      	add	r3, r2
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	78fa      	ldrb	r2, [r7, #3]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	bf0c      	ite	eq
 800e2ae:	2301      	moveq	r3, #1
 800e2b0:	2300      	movne	r3, #0
 800e2b2:	b2db      	uxtb	r3, r3
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d005      	beq.n	800e2c4 <_ZN12SimpleString7replaceEcc+0x4e>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	4413      	add	r3, r2
 800e2c0:	78ba      	ldrb	r2, [r7, #2]
 800e2c2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	60fb      	str	r3, [r7, #12]
 800e2ca:	e7e2      	b.n	800e292 <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800e2cc:	bf00      	nop
 800e2ce:	3710      	adds	r7, #16
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b08e      	sub	sp, #56	; 0x38
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	60f8      	str	r0, [r7, #12]
 800e2dc:	60b9      	str	r1, [r7, #8]
 800e2de:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800e2e0:	f107 0310 	add.w	r3, r7, #16
 800e2e4:	68b9      	ldr	r1, [r7, #8]
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7ff fddf 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800e2ec:	f107 0310 	add.w	r3, r7, #16
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	68f8      	ldr	r0, [r7, #12]
 800e2f4:	f7ff ff0d 	bl	800e112 <_ZNK12SimpleString5countERKS_>
 800e2f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e2fa:	f107 0310 	add.w	r3, r7, #16
 800e2fe:	4618      	mov	r0, r3
 800e300:	f000 f98b 	bl	800e61a <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800e304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e306:	2b00      	cmp	r3, #0
 800e308:	d071      	beq.n	800e3ee <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800e30a:	68f8      	ldr	r0, [r7, #12]
 800e30c:	f000 f964 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800e310:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800e312:	68b8      	ldr	r0, [r7, #8]
 800e314:	f7ff fc28 	bl	800db68 <_ZN12SimpleString6StrLenEPKc>
 800e318:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f7ff fc24 	bl	800db68 <_ZN12SimpleString6StrLenEPKc>
 800e320:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800e322:	6a3b      	ldr	r3, [r7, #32]
 800e324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e326:	fb02 f203 	mul.w	r2, r2, r3
 800e32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32c:	441a      	add	r2, r3
 800e32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e330:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e332:	fb01 f303 	mul.w	r3, r1, r3
 800e336:	1ad3      	subs	r3, r2, r3
 800e338:	3301      	adds	r3, #1
 800e33a:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800e33c:	69fb      	ldr	r3, [r7, #28]
 800e33e:	2b01      	cmp	r3, #1
 800e340:	d951      	bls.n	800e3e6 <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800e342:	f240 129d 	movw	r2, #413	; 0x19d
 800e346:	492c      	ldr	r1, [pc, #176]	; (800e3f8 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800e348:	69f8      	ldr	r0, [r7, #28]
 800e34a:	f7ff fb33 	bl	800d9b4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800e34e:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800e350:	2300      	movs	r3, #0
 800e352:	637b      	str	r3, [r7, #52]	; 0x34
 800e354:	2300      	movs	r3, #0
 800e356:	633b      	str	r3, [r7, #48]	; 0x30
 800e358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d236      	bcs.n	800e3ce <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800e360:	68f8      	ldr	r0, [r7, #12]
 800e362:	f7ff fd96 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e366:	4602      	mov	r2, r0
 800e368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e36a:	4413      	add	r3, r2
 800e36c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e36e:	68b9      	ldr	r1, [r7, #8]
 800e370:	4618      	mov	r0, r3
 800e372:	f7ff fc16 	bl	800dba2 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800e376:	4603      	mov	r3, r0
 800e378:	2b00      	cmp	r3, #0
 800e37a:	bf0c      	ite	eq
 800e37c:	2301      	moveq	r3, #1
 800e37e:	2300      	movne	r3, #0
 800e380:	b2db      	uxtb	r3, r3
 800e382:	2b00      	cmp	r3, #0
 800e384:	d011      	beq.n	800e3aa <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800e386:	69ba      	ldr	r2, [r7, #24]
 800e388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38a:	18d0      	adds	r0, r2, r3
 800e38c:	6a3b      	ldr	r3, [r7, #32]
 800e38e:	3301      	adds	r3, #1
 800e390:	461a      	mov	r2, r3
 800e392:	6879      	ldr	r1, [r7, #4]
 800e394:	f7ff fc33 	bl	800dbfe <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800e398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e39a:	6a3b      	ldr	r3, [r7, #32]
 800e39c:	4413      	add	r3, r2
 800e39e:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800e3a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a4:	4413      	add	r3, r2
 800e3a6:	637b      	str	r3, [r7, #52]	; 0x34
 800e3a8:	e7d6      	b.n	800e358 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800e3aa:	68f8      	ldr	r0, [r7, #12]
 800e3ac:	f7ff fd71 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3b4:	441a      	add	r2, r3
 800e3b6:	69b9      	ldr	r1, [r7, #24]
 800e3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ba:	440b      	add	r3, r1
 800e3bc:	7812      	ldrb	r2, [r2, #0]
 800e3be:	701a      	strb	r2, [r3, #0]
                j++;
 800e3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800e3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800e3cc:	e7c4      	b.n	800e358 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800e3ce:	69fb      	ldr	r3, [r7, #28]
 800e3d0:	3b01      	subs	r3, #1
 800e3d2:	69ba      	ldr	r2, [r7, #24]
 800e3d4:	4413      	add	r3, r2
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800e3da:	69fa      	ldr	r2, [r7, #28]
 800e3dc:	69b9      	ldr	r1, [r7, #24]
 800e3de:	68f8      	ldr	r0, [r7, #12]
 800e3e0:	f7ff fd1c 	bl	800de1c <_ZN12SimpleString19setInternalBufferToEPcj>
 800e3e4:	e004      	b.n	800e3f0 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800e3e6:	68f8      	ldr	r0, [r7, #12]
 800e3e8:	f7ff fcca 	bl	800dd80 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800e3ec:	e000      	b.n	800e3f0 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800e3ee:	bf00      	nop
}
 800e3f0:	3738      	adds	r7, #56	; 0x38
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	08025c94 	.word	0x08025c94

0800e3fc <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800e3fc:	b590      	push	{r4, r7, lr}
 800e3fe:	b089      	sub	sp, #36	; 0x24
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800e406:	493b      	ldr	r1, [pc, #236]	; (800e4f4 <_ZNK12SimpleString9printableEv+0xf8>)
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f7ff fd4e 	bl	800deaa <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800e40e:	6838      	ldr	r0, [r7, #0]
 800e410:	f000 f876 	bl	800e500 <_ZNK12SimpleString16getPrintableSizeEv>
 800e414:	4603      	mov	r3, r0
 800e416:	3301      	adds	r3, #1
 800e418:	4619      	mov	r1, r3
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f7ff fcde 	bl	800dddc <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800e420:	6838      	ldr	r0, [r7, #0]
 800e422:	f000 f8d9 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800e426:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800e428:	2300      	movs	r3, #0
 800e42a:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800e42c:	2300      	movs	r3, #0
 800e42e:	61bb      	str	r3, [r7, #24]
 800e430:	69ba      	ldr	r2, [r7, #24]
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	429a      	cmp	r2, r3
 800e436:	d252      	bcs.n	800e4de <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	69bb      	ldr	r3, [r7, #24]
 800e43e:	4413      	add	r3, r2
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800e444:	7cfb      	ldrb	r3, [r7, #19]
 800e446:	4618      	mov	r0, r3
 800e448:	f000 fb43 	bl	800ead2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800e44c:	4603      	mov	r3, r0
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d012      	beq.n	800e478 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681a      	ldr	r2, [r3, #0]
 800e456:	69fb      	ldr	r3, [r7, #28]
 800e458:	18d0      	adds	r0, r2, r3
 800e45a:	7cfb      	ldrb	r3, [r7, #19]
 800e45c:	3b07      	subs	r3, #7
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	461a      	mov	r2, r3
 800e462:	4b25      	ldr	r3, [pc, #148]	; (800e4f8 <_ZNK12SimpleString9printableEv+0xfc>)
 800e464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e468:	2202      	movs	r2, #2
 800e46a:	4619      	mov	r1, r3
 800e46c:	f7ff fbc7 	bl	800dbfe <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800e470:	69fb      	ldr	r3, [r7, #28]
 800e472:	3302      	adds	r3, #2
 800e474:	61fb      	str	r3, [r7, #28]
 800e476:	e02e      	b.n	800e4d6 <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800e478:	7cfb      	ldrb	r3, [r7, #19]
 800e47a:	4618      	mov	r0, r3
 800e47c:	f000 fb15 	bl	800eaaa <_ZN12SimpleString9isControlEc>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d01e      	beq.n	800e4c4 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800e486:	7cfa      	ldrb	r2, [r7, #19]
 800e488:	f107 0308 	add.w	r3, r7, #8
 800e48c:	491b      	ldr	r1, [pc, #108]	; (800e4fc <_ZNK12SimpleString9printableEv+0x100>)
 800e48e:	4618      	mov	r0, r3
 800e490:	f000 fdca 	bl	800f028 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681a      	ldr	r2, [r3, #0]
 800e498:	69fb      	ldr	r3, [r7, #28]
 800e49a:	18d4      	adds	r4, r2, r3
 800e49c:	f107 0308 	add.w	r3, r7, #8
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f000 f88d 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	2204      	movs	r2, #4
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	4620      	mov	r0, r4
 800e4ae:	f7ff fba6 	bl	800dbfe <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800e4b2:	69fb      	ldr	r3, [r7, #28]
 800e4b4:	3304      	adds	r3, #4
 800e4b6:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800e4b8:	f107 0308 	add.w	r3, r7, #8
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f000 f8ac 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800e4c2:	e008      	b.n	800e4d6 <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	69fb      	ldr	r3, [r7, #28]
 800e4ca:	4413      	add	r3, r2
 800e4cc:	7cfa      	ldrb	r2, [r7, #19]
 800e4ce:	701a      	strb	r2, [r3, #0]
            j++;
 800e4d0:	69fb      	ldr	r3, [r7, #28]
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800e4d6:	69bb      	ldr	r3, [r7, #24]
 800e4d8:	3301      	adds	r3, #1
 800e4da:	61bb      	str	r3, [r7, #24]
 800e4dc:	e7a8      	b.n	800e430 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	69fb      	ldr	r3, [r7, #28]
 800e4e4:	4413      	add	r3, r2
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	701a      	strb	r2, [r3, #0]

    return result;
 800e4ea:	bf00      	nop
}
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	3724      	adds	r7, #36	; 0x24
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd90      	pop	{r4, r7, pc}
 800e4f4:	08025d54 	.word	0x08025d54
 800e4f8:	2000006c 	.word	0x2000006c
 800e4fc:	08025d58 	.word	0x08025d58

0800e500 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b086      	sub	sp, #24
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f000 f865 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800e50e:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800e514:	2300      	movs	r3, #0
 800e516:	613b      	str	r3, [r7, #16]
 800e518:	693a      	ldr	r2, [r7, #16]
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d21e      	bcs.n	800e55e <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681a      	ldr	r2, [r3, #0]
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	4413      	add	r3, r2
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800e52c:	7afb      	ldrb	r3, [r7, #11]
 800e52e:	4618      	mov	r0, r3
 800e530:	f000 facf 	bl	800ead2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800e534:	4603      	mov	r3, r0
 800e536:	2b00      	cmp	r3, #0
 800e538:	d003      	beq.n	800e542 <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	3301      	adds	r3, #1
 800e53e:	617b      	str	r3, [r7, #20]
 800e540:	e009      	b.n	800e556 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800e542:	7afb      	ldrb	r3, [r7, #11]
 800e544:	4618      	mov	r0, r3
 800e546:	f000 fab0 	bl	800eaaa <_ZN12SimpleString9isControlEc>
 800e54a:	4603      	mov	r3, r0
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d002      	beq.n	800e556 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	3303      	adds	r3, #3
 800e554:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	3301      	adds	r3, #1
 800e55a:	613b      	str	r3, [r7, #16]
 800e55c:	e7dc      	b.n	800e518 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800e55e:	697b      	ldr	r3, [r7, #20]
}
 800e560:	4618      	mov	r0, r3
 800e562:	3718      	adds	r7, #24
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800e568:	b590      	push	{r4, r7, lr}
 800e56a:	b085      	sub	sp, #20
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800e572:	6839      	ldr	r1, [r7, #0]
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f7ff fcec 	bl	800df52 <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 f82c 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800e580:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800e582:	2300      	movs	r3, #0
 800e584:	60fb      	str	r3, [r7, #12]
 800e586:	68fa      	ldr	r2, [r7, #12]
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d213      	bcs.n	800e5b6 <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f7ff fc7f 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e594:	4602      	mov	r2, r0
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	4413      	add	r3, r2
 800e59a:	7819      	ldrb	r1, [r3, #0]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681a      	ldr	r2, [r3, #0]
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	18d4      	adds	r4, r2, r3
 800e5a4:	4608      	mov	r0, r1
 800e5a6:	f7ff fb8a 	bl	800dcbe <_ZN12SimpleString7ToLowerEc>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	3301      	adds	r3, #1
 800e5b2:	60fb      	str	r3, [r7, #12]
 800e5b4:	e7e7      	b.n	800e586 <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800e5b6:	bf00      	nop
}
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	3714      	adds	r7, #20
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd90      	pop	{r4, r7, pc}

0800e5c0 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f7ff fc62 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e5ce:	4603      	mov	r3, r0
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3708      	adds	r7, #8
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b082      	sub	sp, #8
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f7ff fc56 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7ff fabd 	bl	800db68 <_ZN12SimpleString6StrLenEPKc>
 800e5ee:	4603      	mov	r3, r0
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3708      	adds	r7, #8
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f7ff ffe9 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800e606:	4603      	mov	r3, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	bf0c      	ite	eq
 800e60c:	2301      	moveq	r3, #1
 800e60e:	2300      	movne	r3, #0
 800e610:	b2db      	uxtb	r3, r3
}
 800e612:	4618      	mov	r0, r3
 800e614:	3708      	adds	r7, #8
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}

0800e61a <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800e61a:	b580      	push	{r7, lr}
 800e61c:	b082      	sub	sp, #8
 800e61e:	af00      	add	r7, sp, #0
 800e620:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f7ff fb90 	bl	800dd48 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	4618      	mov	r0, r3
 800e62c:	3708      	adds	r7, #8
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}

0800e632 <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800e632:	b590      	push	{r4, r7, lr}
 800e634:	b083      	sub	sp, #12
 800e636:	af00      	add	r7, sp, #0
 800e638:	6078      	str	r0, [r7, #4]
 800e63a:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f7ff ffbf 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800e642:	4604      	mov	r4, r0
 800e644:	6838      	ldr	r0, [r7, #0]
 800e646:	f7ff ffbb 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800e64a:	4603      	mov	r3, r0
 800e64c:	4619      	mov	r1, r3
 800e64e:	4620      	mov	r0, r4
 800e650:	f7ff fa68 	bl	800db24 <_ZN12SimpleString6StrCmpEPKcS1_>
 800e654:	4603      	mov	r3, r0
 800e656:	2b00      	cmp	r3, #0
 800e658:	bf0c      	ite	eq
 800e65a:	2301      	moveq	r3, #1
 800e65c:	2300      	movne	r3, #0
 800e65e:	b2db      	uxtb	r3, r3
}
 800e660:	4618      	mov	r0, r3
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	bd90      	pop	{r4, r7, pc}

0800e668 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800e668:	b590      	push	{r4, r7, lr}
 800e66a:	b087      	sub	sp, #28
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
 800e670:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800e672:	f107 0308 	add.w	r3, r7, #8
 800e676:	6879      	ldr	r1, [r7, #4]
 800e678:	4618      	mov	r0, r3
 800e67a:	f7ff ff75 	bl	800e568 <_ZNK12SimpleString9lowerCaseEv>
 800e67e:	f107 0310 	add.w	r3, r7, #16
 800e682:	6839      	ldr	r1, [r7, #0]
 800e684:	4618      	mov	r0, r3
 800e686:	f7ff ff6f 	bl	800e568 <_ZNK12SimpleString9lowerCaseEv>
 800e68a:	f107 0210 	add.w	r2, r7, #16
 800e68e:	f107 0308 	add.w	r3, r7, #8
 800e692:	4611      	mov	r1, r2
 800e694:	4618      	mov	r0, r3
 800e696:	f7ff ffcc 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 800e69a:	4603      	mov	r3, r0
 800e69c:	461c      	mov	r4, r3
 800e69e:	f107 0310 	add.w	r3, r7, #16
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7ff ffb9 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800e6a8:	f107 0308 	add.w	r3, r7, #8
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7ff ffb4 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800e6b2:	4623      	mov	r3, r4
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	371c      	adds	r7, #28
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd90      	pop	{r4, r7, pc}

0800e6bc <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800e6c6:	6839      	ldr	r1, [r7, #0]
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f7ff ffb2 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	f083 0301 	eor.w	r3, r3, #1
 800e6d4:	b2db      	uxtb	r3, r3
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3708      	adds	r7, #8
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b084      	sub	sp, #16
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	60f8      	str	r0, [r7, #12]
 800e6e6:	60b9      	str	r1, [r7, #8]
 800e6e8:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800e6ea:	68b8      	ldr	r0, [r7, #8]
 800e6ec:	f7ff fbd1 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	68f8      	ldr	r0, [r7, #12]
 800e6f6:	f7ff fbd8 	bl	800deaa <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f7ff fbc9 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e700:	4603      	mov	r3, r0
 800e702:	4619      	mov	r1, r3
 800e704:	68f8      	ldr	r0, [r7, #12]
 800e706:	f000 f817 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    return t;
 800e70a:	bf00      	nop
}
 800e70c:	68f8      	ldr	r0, [r7, #12]
 800e70e:	3710      	adds	r7, #16
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b082      	sub	sp, #8
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800e71e:	6838      	ldr	r0, [r7, #0]
 800e720:	f7ff fbb7 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e724:	4603      	mov	r3, r0
 800e726:	4619      	mov	r1, r3
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f000 f805 	bl	800e738 <_ZN12SimpleStringpLEPKc>
 800e72e:	4603      	mov	r3, r0
}
 800e730:	4618      	mov	r0, r3
 800e732:	3708      	adds	r7, #8
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}

0800e738 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b086      	sub	sp, #24
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f7ff ff48 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800e748:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800e74a:	6838      	ldr	r0, [r7, #0]
 800e74c:	f7ff fa0c 	bl	800db68 <_ZN12SimpleString6StrLenEPKc>
 800e750:	4603      	mov	r3, r0
 800e752:	3301      	adds	r3, #1
 800e754:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800e756:	697a      	ldr	r2, [r7, #20]
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	4413      	add	r3, r2
 800e75c:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f7ff fb97 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e764:	4603      	mov	r3, r0
 800e766:	68f9      	ldr	r1, [r7, #12]
 800e768:	4618      	mov	r0, r3
 800e76a:	f000 f941 	bl	800e9f0 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800e76e:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800e770:	68ba      	ldr	r2, [r7, #8]
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	4413      	add	r3, r2
 800e776:	693a      	ldr	r2, [r7, #16]
 800e778:	6839      	ldr	r1, [r7, #0]
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7ff fa3f 	bl	800dbfe <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800e780:	68fa      	ldr	r2, [r7, #12]
 800e782:	68b9      	ldr	r1, [r7, #8]
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f7ff fb49 	bl	800de1c <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800e78a:	687b      	ldr	r3, [r7, #4]
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3718      	adds	r7, #24
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}

0800e794 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800e794:	b590      	push	{r4, r7, lr}
 800e796:	b08b      	sub	sp, #44	; 0x2c
 800e798:	af00      	add	r7, sp, #0
 800e79a:	60f8      	str	r0, [r7, #12]
 800e79c:	60b9      	str	r1, [r7, #8]
 800e79e:	4613      	mov	r3, r2
 800e7a0:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800e7a2:	68f8      	ldr	r0, [r7, #12]
 800e7a4:	f7ff ff18 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800e7a8:	4604      	mov	r4, r0
 800e7aa:	68b8      	ldr	r0, [r7, #8]
 800e7ac:	f7ff ff14 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	429c      	cmp	r4, r3
 800e7b4:	bf8c      	ite	hi
 800e7b6:	2301      	movhi	r3, #1
 800e7b8:	2300      	movls	r3, #0
 800e7ba:	b2db      	uxtb	r3, r3
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d006      	beq.n	800e7ce <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800e7c0:	79fb      	ldrb	r3, [r7, #7]
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	68f9      	ldr	r1, [r7, #12]
 800e7c6:	68b8      	ldr	r0, [r7, #8]
 800e7c8:	f7ff ffe4 	bl	800e794 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800e7cc:	e02b      	b.n	800e826 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800e7ce:	79fb      	ldrb	r3, [r7, #7]
 800e7d0:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800e7d6:	68b8      	ldr	r0, [r7, #8]
 800e7d8:	f7ff fefe 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800e7dc:	4604      	mov	r4, r0
 800e7de:	68f8      	ldr	r0, [r7, #12]
 800e7e0:	f7ff fefa 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	1ae2      	subs	r2, r4, r3
 800e7e8:	f107 0114 	add.w	r1, r7, #20
 800e7ec:	f107 0320 	add.w	r3, r7, #32
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f7ff fb75 	bl	800dee0 <_ZN12SimpleStringC1EPKcj>
 800e7f6:	f107 0318 	add.w	r3, r7, #24
 800e7fa:	f107 0120 	add.w	r1, r7, #32
 800e7fe:	68fa      	ldr	r2, [r7, #12]
 800e800:	4618      	mov	r0, r3
 800e802:	f7ff ff6c 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 800e806:	f107 0318 	add.w	r3, r7, #24
 800e80a:	4619      	mov	r1, r3
 800e80c:	68f8      	ldr	r0, [r7, #12]
 800e80e:	f7ff fbb8 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 800e812:	f107 0318 	add.w	r3, r7, #24
 800e816:	4618      	mov	r0, r3
 800e818:	f7ff feff 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800e81c:	f107 0320 	add.w	r3, r7, #32
 800e820:	4618      	mov	r0, r3
 800e822:	f7ff fefa 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 800e826:	372c      	adds	r7, #44	; 0x2c
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd90      	pop	{r4, r7, pc}

0800e82c <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b086      	sub	sp, #24
 800e830:	af00      	add	r7, sp, #0
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	60b9      	str	r1, [r7, #8]
 800e836:	607a      	str	r2, [r7, #4]
 800e838:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800e83a:	68b8      	ldr	r0, [r7, #8]
 800e83c:	f7ff fecc 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800e840:	4603      	mov	r3, r0
 800e842:	3b01      	subs	r3, #1
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	429a      	cmp	r2, r3
 800e848:	bf8c      	ite	hi
 800e84a:	2301      	movhi	r3, #1
 800e84c:	2300      	movls	r3, #0
 800e84e:	b2db      	uxtb	r3, r3
 800e850:	2b00      	cmp	r3, #0
 800e852:	d004      	beq.n	800e85e <_ZNK12SimpleString9subStringEjj+0x32>
 800e854:	4919      	ldr	r1, [pc, #100]	; (800e8bc <_ZNK12SimpleString9subStringEjj+0x90>)
 800e856:	68f8      	ldr	r0, [r7, #12]
 800e858:	f7ff fb27 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800e85c:	e029      	b.n	800e8b2 <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800e85e:	68b8      	ldr	r0, [r7, #8]
 800e860:	f7ff fb17 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e864:	4602      	mov	r2, r0
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	441a      	add	r2, r3
 800e86a:	f107 0310 	add.w	r3, r7, #16
 800e86e:	4611      	mov	r1, r2
 800e870:	4618      	mov	r0, r3
 800e872:	f7ff fb1a 	bl	800deaa <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800e876:	f107 0310 	add.w	r3, r7, #16
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7ff feac 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800e880:	4602      	mov	r2, r0
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	4293      	cmp	r3, r2
 800e886:	bf34      	ite	cc
 800e888:	2301      	movcc	r3, #1
 800e88a:	2300      	movcs	r3, #0
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d004      	beq.n	800e89c <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800e892:	693a      	ldr	r2, [r7, #16]
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	4413      	add	r3, r2
 800e898:	2200      	movs	r2, #0
 800e89a:	701a      	strb	r2, [r3, #0]

    return newString;
 800e89c:	f107 0310 	add.w	r3, r7, #16
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	68f8      	ldr	r0, [r7, #12]
 800e8a4:	f7ff fb55 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800e8a8:	f107 0310 	add.w	r3, r7, #16
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f7ff feb4 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 800e8b2:	68f8      	ldr	r0, [r7, #12]
 800e8b4:	3718      	adds	r7, #24
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	08025d54 	.word	0x08025d54

0800e8c0 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b084      	sub	sp, #16
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800e8cc:	68f8      	ldr	r0, [r7, #12]
 800e8ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	68b9      	ldr	r1, [r7, #8]
 800e8d6:	f7ff ffa9 	bl	800e82c <_ZNK12SimpleString9subStringEjj>
}
 800e8da:	68f8      	ldr	r0, [r7, #12]
 800e8dc:	3710      	adds	r7, #16
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}

0800e8e2 <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800e8e2:	b580      	push	{r7, lr}
 800e8e4:	b082      	sub	sp, #8
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
 800e8ea:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f7ff fad0 	bl	800de92 <_ZNK12SimpleString9getBufferEv>
 800e8f2:	4602      	mov	r2, r0
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	4413      	add	r3, r2
 800e8f8:	781b      	ldrb	r3, [r3, #0]
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3708      	adds	r7, #8
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}

0800e902 <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800e902:	b580      	push	{r7, lr}
 800e904:	b082      	sub	sp, #8
 800e906:	af00      	add	r7, sp, #0
 800e908:	6078      	str	r0, [r7, #4]
 800e90a:	460b      	mov	r3, r1
 800e90c:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800e90e:	78fb      	ldrb	r3, [r7, #3]
 800e910:	461a      	mov	r2, r3
 800e912:	2100      	movs	r1, #0
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f000 f805 	bl	800e924 <_ZNK12SimpleString8findFromEjc>
 800e91a:	4603      	mov	r3, r0
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3708      	adds	r7, #8
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b086      	sub	sp, #24
 800e928:	af00      	add	r7, sp, #0
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	4613      	mov	r3, r2
 800e930:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800e932:	68f8      	ldr	r0, [r7, #12]
 800e934:	f7ff fe50 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800e938:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	617b      	str	r3, [r7, #20]
 800e93e:	697a      	ldr	r2, [r7, #20]
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	429a      	cmp	r2, r3
 800e944:	d213      	bcs.n	800e96e <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800e946:	6979      	ldr	r1, [r7, #20]
 800e948:	68f8      	ldr	r0, [r7, #12]
 800e94a:	f7ff ffca 	bl	800e8e2 <_ZNK12SimpleString2atEj>
 800e94e:	4603      	mov	r3, r0
 800e950:	461a      	mov	r2, r3
 800e952:	79fb      	ldrb	r3, [r7, #7]
 800e954:	4293      	cmp	r3, r2
 800e956:	bf0c      	ite	eq
 800e958:	2301      	moveq	r3, #1
 800e95a:	2300      	movne	r3, #0
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d001      	beq.n	800e966 <_ZNK12SimpleString8findFromEjc+0x42>
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	e005      	b.n	800e972 <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	3301      	adds	r3, #1
 800e96a:	617b      	str	r3, [r7, #20]
 800e96c:	e7e7      	b.n	800e93e <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800e96e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e972:	4618      	mov	r0, r3
 800e974:	3718      	adds	r7, #24
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
	...

0800e97c <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b086      	sub	sp, #24
 800e980:	af00      	add	r7, sp, #0
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	4611      	mov	r1, r2
 800e988:	461a      	mov	r2, r3
 800e98a:	460b      	mov	r3, r1
 800e98c:	71fb      	strb	r3, [r7, #7]
 800e98e:	4613      	mov	r3, r2
 800e990:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800e992:	79fb      	ldrb	r3, [r7, #7]
 800e994:	4619      	mov	r1, r3
 800e996:	68b8      	ldr	r0, [r7, #8]
 800e998:	f7ff ffb3 	bl	800e902 <_ZNK12SimpleString4findEc>
 800e99c:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9a4:	d104      	bne.n	800e9b0 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800e9a6:	4911      	ldr	r1, [pc, #68]	; (800e9ec <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800e9a8:	68f8      	ldr	r0, [r7, #12]
 800e9aa:	f7ff fa7e 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800e9ae:	e019      	b.n	800e9e4 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800e9b0:	79bb      	ldrb	r3, [r7, #6]
 800e9b2:	461a      	mov	r2, r3
 800e9b4:	6979      	ldr	r1, [r7, #20]
 800e9b6:	68b8      	ldr	r0, [r7, #8]
 800e9b8:	f7ff ffb4 	bl	800e924 <_ZNK12SimpleString8findFromEjc>
 800e9bc:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c4:	d106      	bne.n	800e9d4 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	697a      	ldr	r2, [r7, #20]
 800e9ca:	68b9      	ldr	r1, [r7, #8]
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f7ff ff77 	bl	800e8c0 <_ZNK12SimpleString9subStringEj>
 800e9d2:	e007      	b.n	800e9e4 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800e9d4:	693a      	ldr	r2, [r7, #16]
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	1ad3      	subs	r3, r2, r3
 800e9da:	68f8      	ldr	r0, [r7, #12]
 800e9dc:	697a      	ldr	r2, [r7, #20]
 800e9de:	68b9      	ldr	r1, [r7, #8]
 800e9e0:	f7ff ff24 	bl	800e82c <_ZNK12SimpleString9subStringEjj>
}
 800e9e4:	68f8      	ldr	r0, [r7, #12]
 800e9e6:	3718      	adds	r7, #24
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}
 800e9ec:	08025d54 	.word	0x08025d54

0800e9f0 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b084      	sub	sp, #16
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800e9fa:	f240 2275 	movw	r2, #629	; 0x275
 800e9fe:	490a      	ldr	r1, [pc, #40]	; (800ea28 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800ea00:	6838      	ldr	r0, [r7, #0]
 800ea02:	f7fe ffd7 	bl	800d9b4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800ea06:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800ea08:	683a      	ldr	r2, [r7, #0]
 800ea0a:	6879      	ldr	r1, [r7, #4]
 800ea0c:	68f8      	ldr	r0, [r7, #12]
 800ea0e:	f7ff f8f6 	bl	800dbfe <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	3b01      	subs	r3, #1
 800ea16:	68fa      	ldr	r2, [r7, #12]
 800ea18:	4413      	add	r3, r2
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3710      	adds	r7, #16
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	08025c94 	.word	0x08025c94

0800ea2c <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	b083      	sub	sp, #12
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	4603      	mov	r3, r0
 800ea34:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800ea36:	79fb      	ldrb	r3, [r7, #7]
 800ea38:	2b2f      	cmp	r3, #47	; 0x2f
 800ea3a:	d904      	bls.n	800ea46 <_ZN12SimpleString7isDigitEc+0x1a>
 800ea3c:	79fb      	ldrb	r3, [r7, #7]
 800ea3e:	2b39      	cmp	r3, #57	; 0x39
 800ea40:	d801      	bhi.n	800ea46 <_ZN12SimpleString7isDigitEc+0x1a>
 800ea42:	2301      	movs	r3, #1
 800ea44:	e000      	b.n	800ea48 <_ZN12SimpleString7isDigitEc+0x1c>
 800ea46:	2300      	movs	r3, #0
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	370c      	adds	r7, #12
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea52:	4770      	bx	lr

0800ea54 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800ea54:	b480      	push	{r7}
 800ea56:	b083      	sub	sp, #12
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800ea5e:	79fb      	ldrb	r3, [r7, #7]
 800ea60:	2b20      	cmp	r3, #32
 800ea62:	d005      	beq.n	800ea70 <_ZN12SimpleString7isSpaceEc+0x1c>
 800ea64:	79fb      	ldrb	r3, [r7, #7]
 800ea66:	2b08      	cmp	r3, #8
 800ea68:	d904      	bls.n	800ea74 <_ZN12SimpleString7isSpaceEc+0x20>
 800ea6a:	79fb      	ldrb	r3, [r7, #7]
 800ea6c:	2b0d      	cmp	r3, #13
 800ea6e:	d801      	bhi.n	800ea74 <_ZN12SimpleString7isSpaceEc+0x20>
 800ea70:	2301      	movs	r3, #1
 800ea72:	e000      	b.n	800ea76 <_ZN12SimpleString7isSpaceEc+0x22>
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	370c      	adds	r7, #12
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea80:	4770      	bx	lr

0800ea82 <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800ea82:	b480      	push	{r7}
 800ea84:	b083      	sub	sp, #12
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	4603      	mov	r3, r0
 800ea8a:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800ea8c:	79fb      	ldrb	r3, [r7, #7]
 800ea8e:	2b40      	cmp	r3, #64	; 0x40
 800ea90:	d904      	bls.n	800ea9c <_ZN12SimpleString7isUpperEc+0x1a>
 800ea92:	79fb      	ldrb	r3, [r7, #7]
 800ea94:	2b5a      	cmp	r3, #90	; 0x5a
 800ea96:	d801      	bhi.n	800ea9c <_ZN12SimpleString7isUpperEc+0x1a>
 800ea98:	2301      	movs	r3, #1
 800ea9a:	e000      	b.n	800ea9e <_ZN12SimpleString7isUpperEc+0x1c>
 800ea9c:	2300      	movs	r3, #0
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	370c      	adds	r7, #12
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr

0800eaaa <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800eaaa:	b480      	push	{r7}
 800eaac:	b083      	sub	sp, #12
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	4603      	mov	r3, r0
 800eab2:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800eab4:	79fb      	ldrb	r3, [r7, #7]
 800eab6:	2b1f      	cmp	r3, #31
 800eab8:	d902      	bls.n	800eac0 <_ZN12SimpleString9isControlEc+0x16>
 800eaba:	79fb      	ldrb	r3, [r7, #7]
 800eabc:	2b7f      	cmp	r3, #127	; 0x7f
 800eabe:	d101      	bne.n	800eac4 <_ZN12SimpleString9isControlEc+0x1a>
 800eac0:	2301      	movs	r3, #1
 800eac2:	e000      	b.n	800eac6 <_ZN12SimpleString9isControlEc+0x1c>
 800eac4:	2300      	movs	r3, #0
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	370c      	adds	r7, #12
 800eaca:	46bd      	mov	sp, r7
 800eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead0:	4770      	bx	lr

0800ead2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800ead2:	b480      	push	{r7}
 800ead4:	b083      	sub	sp, #12
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	4603      	mov	r3, r0
 800eada:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800eadc:	79fb      	ldrb	r3, [r7, #7]
 800eade:	2b06      	cmp	r3, #6
 800eae0:	d904      	bls.n	800eaec <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800eae2:	79fb      	ldrb	r3, [r7, #7]
 800eae4:	2b0d      	cmp	r3, #13
 800eae6:	d801      	bhi.n	800eaec <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800eae8:	2301      	movs	r3, #1
 800eaea:	e000      	b.n	800eaee <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800eaec:	2300      	movs	r3, #0
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	370c      	adds	r7, #12
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf8:	4770      	bx	lr
	...

0800eafc <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	460b      	mov	r3, r1
 800eb06:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800eb08:	78fb      	ldrb	r3, [r7, #3]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d001      	beq.n	800eb12 <_Z10StringFromb+0x16>
 800eb0e:	4a06      	ldr	r2, [pc, #24]	; (800eb28 <_Z10StringFromb+0x2c>)
 800eb10:	e000      	b.n	800eb14 <_Z10StringFromb+0x18>
 800eb12:	4a06      	ldr	r2, [pc, #24]	; (800eb2c <_Z10StringFromb+0x30>)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	4906      	ldr	r1, [pc, #24]	; (800eb30 <_Z10StringFromb+0x34>)
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f000 fa85 	bl	800f028 <_Z16StringFromFormatPKcz>
}
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	3708      	adds	r7, #8
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}
 800eb26:	bf00      	nop
 800eb28:	08025d60 	.word	0x08025d60
 800eb2c:	08025d68 	.word	0x08025d68
 800eb30:	08025d70 	.word	0x08025d70

0800eb34 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800eb3e:	6839      	ldr	r1, [r7, #0]
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f7ff f9b2 	bl	800deaa <_ZN12SimpleStringC1EPKc>
}
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	3708      	adds	r7, #8
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
	...

0800eb50 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800eb50:	b590      	push	{r4, r7, lr}
 800eb52:	b085      	sub	sp, #20
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800eb5a:	2400      	movs	r4, #0
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d00e      	beq.n	800eb80 <_Z25PrintableStringFromOrNullPKc+0x30>
 800eb62:	f107 0308 	add.w	r3, r7, #8
 800eb66:	6839      	ldr	r1, [r7, #0]
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7ff ffe3 	bl	800eb34 <_Z10StringFromPKc>
 800eb6e:	2401      	movs	r4, #1
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f107 0208 	add.w	r2, r7, #8
 800eb76:	4611      	mov	r1, r2
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7ff fc3f 	bl	800e3fc <_ZNK12SimpleString9printableEv>
 800eb7e:	e004      	b.n	800eb8a <_Z25PrintableStringFromOrNullPKc+0x3a>
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	4908      	ldr	r1, [pc, #32]	; (800eba4 <_Z25PrintableStringFromOrNullPKc+0x54>)
 800eb84:	4618      	mov	r0, r3
 800eb86:	f7ff ffd5 	bl	800eb34 <_Z10StringFromPKc>
 800eb8a:	2c00      	cmp	r4, #0
 800eb8c:	d004      	beq.n	800eb98 <_Z25PrintableStringFromOrNullPKc+0x48>
 800eb8e:	f107 0308 	add.w	r3, r7, #8
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7ff fd41 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800eb98:	bf00      	nop
}
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	3714      	adds	r7, #20
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd90      	pop	{r4, r7, pc}
 800eba2:	bf00      	nop
 800eba4:	08025d74 	.word	0x08025d74

0800eba8 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	683a      	ldr	r2, [r7, #0]
 800ebb6:	4904      	ldr	r1, [pc, #16]	; (800ebc8 <_Z10StringFromi+0x20>)
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f000 fa35 	bl	800f028 <_Z16StringFromFormatPKcz>
}
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	3708      	adds	r7, #8
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	bf00      	nop
 800ebc8:	08025d7c 	.word	0x08025d7c

0800ebcc <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	683a      	ldr	r2, [r7, #0]
 800ebda:	4904      	ldr	r1, [pc, #16]	; (800ebec <_Z10StringFroml+0x20>)
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f000 fa23 	bl	800f028 <_Z16StringFromFormatPKcz>
}
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	3708      	adds	r7, #8
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}
 800ebea:	bf00      	nop
 800ebec:	08025d80 	.word	0x08025d80

0800ebf0 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b086      	sub	sp, #24
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800ebfa:	f107 0308 	add.w	r3, r7, #8
 800ebfe:	4910      	ldr	r1, [pc, #64]	; (800ec40 <_Z10StringFromPKv+0x50>)
 800ec00:	4618      	mov	r0, r3
 800ec02:	f7ff f952 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800ec06:	f107 0310 	add.w	r3, r7, #16
 800ec0a:	6839      	ldr	r1, [r7, #0]
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f000 f9a1 	bl	800ef54 <_Z13HexStringFromPKv>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f107 0210 	add.w	r2, r7, #16
 800ec18:	f107 0108 	add.w	r1, r7, #8
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f7ff fd5e 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 800ec22:	f107 0310 	add.w	r3, r7, #16
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7ff fcf7 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800ec2c:	f107 0308 	add.w	r3, r7, #8
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7ff fcf2 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800ec36:	bf00      	nop
}
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	3718      	adds	r7, #24
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	08025d84 	.word	0x08025d84

0800ec44 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b086      	sub	sp, #24
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800ec4e:	f107 0308 	add.w	r3, r7, #8
 800ec52:	4910      	ldr	r1, [pc, #64]	; (800ec94 <_Z10StringFromPFvvE+0x50>)
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7ff f928 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800ec5a:	f107 0310 	add.w	r3, r7, #16
 800ec5e:	6839      	ldr	r1, [r7, #0]
 800ec60:	4618      	mov	r0, r3
 800ec62:	f000 f98b 	bl	800ef7c <_Z13HexStringFromPFvvE>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f107 0210 	add.w	r2, r7, #16
 800ec6c:	f107 0108 	add.w	r1, r7, #8
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7ff fd34 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 800ec76:	f107 0310 	add.w	r3, r7, #16
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7ff fccd 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800ec80:	f107 0308 	add.w	r3, r7, #8
 800ec84:	4618      	mov	r0, r3
 800ec86:	f7ff fcc8 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800ec8a:	bf00      	nop
}
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	3718      	adds	r7, #24
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	08025d84 	.word	0x08025d84

0800ec98 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b082      	sub	sp, #8
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	683a      	ldr	r2, [r7, #0]
 800eca6:	4904      	ldr	r1, [pc, #16]	; (800ecb8 <_Z13HexStringFroml+0x20>)
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f000 f9bd 	bl	800f028 <_Z16StringFromFormatPKcz>
}
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	3708      	adds	r7, #8
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}
 800ecb6:	bf00      	nop
 800ecb8:	08025d88 	.word	0x08025d88

0800ecbc <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b082      	sub	sp, #8
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	683a      	ldr	r2, [r7, #0]
 800ecca:	4904      	ldr	r1, [pc, #16]	; (800ecdc <_Z13HexStringFromi+0x20>)
 800eccc:	4618      	mov	r0, r3
 800ecce:	f000 f9ab 	bl	800f028 <_Z16StringFromFormatPKcz>
}
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	3708      	adds	r7, #8
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	08025d8c 	.word	0x08025d8c

0800ece0 <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b086      	sub	sp, #24
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
 800ece8:	460b      	mov	r3, r1
 800ecea:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800ecec:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	4912      	ldr	r1, [pc, #72]	; (800ed3c <_Z13HexStringFroma+0x5c>)
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f000 f997 	bl	800f028 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800ecfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	da16      	bge.n	800ed30 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f7ff fc68 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800ed08:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	1e9a      	subs	r2, r3, #2
 800ed0e:	f107 030c 	add.w	r3, r7, #12
 800ed12:	6879      	ldr	r1, [r7, #4]
 800ed14:	4618      	mov	r0, r3
 800ed16:	f7ff fdd3 	bl	800e8c0 <_ZNK12SimpleString9subStringEj>
 800ed1a:	f107 030c 	add.w	r3, r7, #12
 800ed1e:	4619      	mov	r1, r3
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f7ff f92e 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 800ed26:	f107 030c 	add.w	r3, r7, #12
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7ff fc75 	bl	800e61a <_ZN12SimpleStringD1Ev>
    }
    return result;
 800ed30:	bf00      	nop
}
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	3718      	adds	r7, #24
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	08025d8c 	.word	0x08025d8c

0800ed40 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b082      	sub	sp, #8
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	683a      	ldr	r2, [r7, #0]
 800ed4e:	4904      	ldr	r1, [pc, #16]	; (800ed60 <_Z13HexStringFromm+0x20>)
 800ed50:	4618      	mov	r0, r3
 800ed52:	f000 f969 	bl	800f028 <_Z16StringFromFormatPKcz>
}
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	3708      	adds	r7, #8
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	08025d88 	.word	0x08025d88

0800ed64 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	683a      	ldr	r2, [r7, #0]
 800ed72:	4904      	ldr	r1, [pc, #16]	; (800ed84 <_Z13HexStringFromj+0x20>)
 800ed74:	4618      	mov	r0, r3
 800ed76:	f000 f957 	bl	800f028 <_Z16StringFromFormatPKcz>
}
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	3708      	adds	r7, #8
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}
 800ed82:	bf00      	nop
 800ed84:	08025d8c 	.word	0x08025d8c

0800ed88 <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b084      	sub	sp, #16
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800ed92:	f107 0308 	add.w	r3, r7, #8
 800ed96:	6839      	ldr	r1, [r7, #0]
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7ff ff8f 	bl	800ecbc <_Z13HexStringFromi>
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f107 0208 	add.w	r2, r7, #8
 800eda4:	4611      	mov	r1, r2
 800eda6:	4618      	mov	r0, r3
 800eda8:	f000 f87e 	bl	800eea8 <_Z26BracketsFormattedHexString12SimpleString>
 800edac:	f107 0308 	add.w	r3, r7, #8
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7ff fc32 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800edb6:	bf00      	nop
}
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	3710      	adds	r7, #16
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}

0800edc0 <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b084      	sub	sp, #16
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
 800edc8:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800edca:	f107 0308 	add.w	r3, r7, #8
 800edce:	6839      	ldr	r1, [r7, #0]
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7ff ffc7 	bl	800ed64 <_Z13HexStringFromj>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f107 0208 	add.w	r2, r7, #8
 800eddc:	4611      	mov	r1, r2
 800edde:	4618      	mov	r0, r3
 800ede0:	f000 f862 	bl	800eea8 <_Z26BracketsFormattedHexString12SimpleString>
 800ede4:	f107 0308 	add.w	r3, r7, #8
 800ede8:	4618      	mov	r0, r3
 800edea:	f7ff fc16 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800edee:	bf00      	nop
}
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	3710      	adds	r7, #16
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b084      	sub	sp, #16
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800ee02:	f107 0308 	add.w	r3, r7, #8
 800ee06:	6839      	ldr	r1, [r7, #0]
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7ff ff45 	bl	800ec98 <_Z13HexStringFroml>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f107 0208 	add.w	r2, r7, #8
 800ee14:	4611      	mov	r1, r2
 800ee16:	4618      	mov	r0, r3
 800ee18:	f000 f846 	bl	800eea8 <_Z26BracketsFormattedHexString12SimpleString>
 800ee1c:	f107 0308 	add.w	r3, r7, #8
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7ff fbfa 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800ee26:	bf00      	nop
}
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	3710      	adds	r7, #16
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}

0800ee30 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b084      	sub	sp, #16
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
 800ee38:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800ee3a:	f107 0308 	add.w	r3, r7, #8
 800ee3e:	6839      	ldr	r1, [r7, #0]
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7ff ff7d 	bl	800ed40 <_Z13HexStringFromm>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f107 0208 	add.w	r2, r7, #8
 800ee4c:	4611      	mov	r1, r2
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f000 f82a 	bl	800eea8 <_Z26BracketsFormattedHexString12SimpleString>
 800ee54:	f107 0308 	add.w	r3, r7, #8
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7ff fbde 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800ee5e:	bf00      	nop
}
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	3710      	adds	r7, #16
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}

0800ee68 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	460b      	mov	r3, r1
 800ee72:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800ee74:	f107 0308 	add.w	r3, r7, #8
 800ee78:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800ee7c:	4611      	mov	r1, r2
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7ff ff2e 	bl	800ece0 <_Z13HexStringFroma>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f107 0208 	add.w	r2, r7, #8
 800ee8a:	4611      	mov	r1, r2
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f000 f80b 	bl	800eea8 <_Z26BracketsFormattedHexString12SimpleString>
 800ee92:	f107 0308 	add.w	r3, r7, #8
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7ff fbbf 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800ee9c:	bf00      	nop
}
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	3710      	adds	r7, #16
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}
	...

0800eea8 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b088      	sub	sp, #32
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800eeb2:	f107 0310 	add.w	r3, r7, #16
 800eeb6:	4917      	ldr	r1, [pc, #92]	; (800ef14 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7fe fff6 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800eebe:	f107 0308 	add.w	r3, r7, #8
 800eec2:	f107 0110 	add.w	r1, r7, #16
 800eec6:	683a      	ldr	r2, [r7, #0]
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7ff fc08 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 800eece:	f107 0318 	add.w	r3, r7, #24
 800eed2:	4911      	ldr	r1, [pc, #68]	; (800ef18 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800eed4:	4618      	mov	r0, r3
 800eed6:	f7fe ffe8 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f107 0218 	add.w	r2, r7, #24
 800eee0:	f107 0108 	add.w	r1, r7, #8
 800eee4:	4618      	mov	r0, r3
 800eee6:	f7ff fbfa 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 800eeea:	f107 0318 	add.w	r3, r7, #24
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7ff fb93 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800eef4:	f107 0308 	add.w	r3, r7, #8
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7ff fb8e 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800eefe:	f107 0310 	add.w	r3, r7, #16
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7ff fb89 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800ef08:	bf00      	nop
}
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	3720      	adds	r7, #32
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}
 800ef12:	bf00      	nop
 800ef14:	08025d90 	.word	0x08025d90
 800ef18:	08025d94 	.word	0x08025d94

0800ef1c <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b085      	sub	sp, #20
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800ef24:	1d3b      	adds	r3, r7, #4
 800ef26:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	681b      	ldr	r3, [r3, #0]
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3714      	adds	r7, #20
 800ef30:	46bd      	mov	sp, r7
 800ef32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef36:	4770      	bx	lr

0800ef38 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b085      	sub	sp, #20
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800ef40:	1d3b      	adds	r3, r7, #4
 800ef42:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	681b      	ldr	r3, [r3, #0]
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3714      	adds	r7, #20
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef52:	4770      	bx	lr

0800ef54 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b082      	sub	sp, #8
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800ef5e:	6838      	ldr	r0, [r7, #0]
 800ef60:	f7ff ffdc 	bl	800ef1c <_ZL25convertPointerToLongValuePKv>
 800ef64:	4602      	mov	r2, r0
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	4903      	ldr	r1, [pc, #12]	; (800ef78 <_Z13HexStringFromPKv+0x24>)
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f000 f85c 	bl	800f028 <_Z16StringFromFormatPKcz>
}
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	3708      	adds	r7, #8
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}
 800ef78:	08025d88 	.word	0x08025d88

0800ef7c <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b082      	sub	sp, #8
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
 800ef84:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800ef86:	6838      	ldr	r0, [r7, #0]
 800ef88:	f7ff ffd6 	bl	800ef38 <_ZL33convertFunctionPointerToLongValuePFvvE>
 800ef8c:	4602      	mov	r2, r0
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	4903      	ldr	r1, [pc, #12]	; (800efa0 <_Z13HexStringFromPFvvE+0x24>)
 800ef92:	4618      	mov	r0, r3
 800ef94:	f000 f848 	bl	800f028 <_Z16StringFromFormatPKcz>
}
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	3708      	adds	r7, #8
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}
 800efa0:	08025d88 	.word	0x08025d88

0800efa4 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b086      	sub	sp, #24
 800efa8:	af02      	add	r7, sp, #8
 800efaa:	60f8      	str	r0, [r7, #12]
 800efac:	ed87 0b00 	vstr	d0, [r7]
 800efb0:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800efb2:	4b18      	ldr	r3, [pc, #96]	; (800f014 <_Z10StringFromdi+0x70>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	ed97 0b00 	vldr	d0, [r7]
 800efba:	4798      	blx	r3
 800efbc:	4603      	mov	r3, r0
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	bf14      	ite	ne
 800efc2:	2301      	movne	r3, #1
 800efc4:	2300      	moveq	r3, #0
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d004      	beq.n	800efd6 <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800efcc:	4912      	ldr	r1, [pc, #72]	; (800f018 <_Z10StringFromdi+0x74>)
 800efce:	68f8      	ldr	r0, [r7, #12]
 800efd0:	f7fe ff6b 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800efd4:	e01a      	b.n	800f00c <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800efd6:	4b11      	ldr	r3, [pc, #68]	; (800f01c <_Z10StringFromdi+0x78>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	ed97 0b00 	vldr	d0, [r7]
 800efde:	4798      	blx	r3
 800efe0:	4603      	mov	r3, r0
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	bf14      	ite	ne
 800efe6:	2301      	movne	r3, #1
 800efe8:	2300      	moveq	r3, #0
 800efea:	b2db      	uxtb	r3, r3
 800efec:	2b00      	cmp	r3, #0
 800efee:	d004      	beq.n	800effa <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800eff0:	490b      	ldr	r1, [pc, #44]	; (800f020 <_Z10StringFromdi+0x7c>)
 800eff2:	68f8      	ldr	r0, [r7, #12]
 800eff4:	f7fe ff59 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800eff8:	e008      	b.n	800f00c <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800effa:	68f8      	ldr	r0, [r7, #12]
 800effc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f000:	e9cd 2300 	strd	r2, r3, [sp]
 800f004:	68ba      	ldr	r2, [r7, #8]
 800f006:	4907      	ldr	r1, [pc, #28]	; (800f024 <_Z10StringFromdi+0x80>)
 800f008:	f000 f80e 	bl	800f028 <_Z16StringFromFormatPKcz>
}
 800f00c:	68f8      	ldr	r0, [r7, #12]
 800f00e:	3710      	adds	r7, #16
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}
 800f014:	200000e8 	.word	0x200000e8
 800f018:	08025dc8 	.word	0x08025dc8
 800f01c:	200000ec 	.word	0x200000ec
 800f020:	08025ddc 	.word	0x08025ddc
 800f024:	08025dec 	.word	0x08025dec

0800f028 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800f028:	b40e      	push	{r1, r2, r3}
 800f02a:	b580      	push	{r7, lr}
 800f02c:	b087      	sub	sp, #28
 800f02e:	af00      	add	r7, sp, #0
 800f030:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800f032:	4910      	ldr	r1, [pc, #64]	; (800f074 <_Z16StringFromFormatPKcz+0x4c>)
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f7fe ff38 	bl	800deaa <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800f03a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f03e:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800f040:	f107 0310 	add.w	r3, r7, #16
 800f044:	68fa      	ldr	r2, [r7, #12]
 800f046:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f048:	4618      	mov	r0, r3
 800f04a:	f000 f839 	bl	800f0c0 <_Z17VStringFromFormatPKcSt9__va_list>
 800f04e:	f107 0310 	add.w	r3, r7, #16
 800f052:	4619      	mov	r1, r3
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f7fe ff94 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 800f05a:	f107 0310 	add.w	r3, r7, #16
 800f05e:	4618      	mov	r0, r3
 800f060:	f7ff fadb 	bl	800e61a <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800f064:	bf00      	nop
}
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	371c      	adds	r7, #28
 800f06a:	46bd      	mov	sp, r7
 800f06c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f070:	b003      	add	sp, #12
 800f072:	4770      	bx	lr
 800f074:	08025d54 	.word	0x08025d54

0800f078 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b082      	sub	sp, #8
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	683a      	ldr	r2, [r7, #0]
 800f086:	4904      	ldr	r1, [pc, #16]	; (800f098 <_Z10StringFromj+0x20>)
 800f088:	4618      	mov	r0, r3
 800f08a:	f7ff ffcd 	bl	800f028 <_Z16StringFromFormatPKcz>
}
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	3708      	adds	r7, #8
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	08025df8 	.word	0x08025df8

0800f09c <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b082      	sub	sp, #8
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	683a      	ldr	r2, [r7, #0]
 800f0aa:	4904      	ldr	r1, [pc, #16]	; (800f0bc <_Z10StringFromm+0x20>)
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7ff ffbb 	bl	800f028 <_Z16StringFromFormatPKcz>
}
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	3708      	adds	r7, #8
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}
 800f0ba:	bf00      	nop
 800f0bc:	08025dfc 	.word	0x08025dfc

0800f0c0 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800f0c0:	b590      	push	{r4, r7, lr}
 800f0c2:	b0a7      	sub	sp, #156	; 0x9c
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	60b9      	str	r1, [r7, #8]
 800f0ca:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800f0d0:	492e      	ldr	r1, [pc, #184]	; (800f18c <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800f0d2:	68f8      	ldr	r0, [r7, #12]
 800f0d4:	f7fe fee9 	bl	800deaa <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800f0d8:	4b2d      	ldr	r3, [pc, #180]	; (800f190 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800f0da:	681c      	ldr	r4, [r3, #0]
 800f0dc:	f107 0014 	add.w	r0, r7, #20
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	68ba      	ldr	r2, [r7, #8]
 800f0e4:	2164      	movs	r1, #100	; 0x64
 800f0e6:	47a0      	blx	r4
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800f0ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f0f2:	2b63      	cmp	r3, #99	; 0x63
 800f0f4:	d813      	bhi.n	800f11e <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800f0f6:	f107 0214 	add.w	r2, r7, #20
 800f0fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f0fe:	4611      	mov	r1, r2
 800f100:	4618      	mov	r0, r3
 800f102:	f7fe fed2 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800f106:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f10a:	4619      	mov	r1, r3
 800f10c:	68f8      	ldr	r0, [r7, #12]
 800f10e:	f7fe ff38 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 800f112:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f116:	4618      	mov	r0, r3
 800f118:	f7ff fa7f 	bl	800e61a <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800f11c:	e031      	b.n	800f182 <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800f11e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f122:	3301      	adds	r3, #1
 800f124:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800f128:	f240 32c3 	movw	r2, #963	; 0x3c3
 800f12c:	4919      	ldr	r1, [pc, #100]	; (800f194 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800f12e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800f132:	f7fe fc3f 	bl	800d9b4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800f136:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800f13a:	4b15      	ldr	r3, [pc, #84]	; (800f190 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800f13c:	681c      	ldr	r4, [r3, #0]
 800f13e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f140:	68ba      	ldr	r2, [r7, #8]
 800f142:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f146:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800f14a:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800f14c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f150:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800f154:	4618      	mov	r0, r3
 800f156:	f7fe fea8 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800f15a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f15e:	4619      	mov	r1, r3
 800f160:	68f8      	ldr	r0, [r7, #12]
 800f162:	f7fe ff0e 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 800f166:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7ff fa55 	bl	800e61a <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800f170:	f240 33c7 	movw	r3, #967	; 0x3c7
 800f174:	4a07      	ldr	r2, [pc, #28]	; (800f194 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800f176:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f17a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800f17e:	f7fe fc2d 	bl	800d9dc <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800f182:	bf00      	nop
}
 800f184:	68f8      	ldr	r0, [r7, #12]
 800f186:	379c      	adds	r7, #156	; 0x9c
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd90      	pop	{r4, r7, pc}
 800f18c:	08025d54 	.word	0x08025d54
 800f190:	200000b0 	.word	0x200000b0
 800f194:	08025c94 	.word	0x08025c94

0800f198 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b08a      	sub	sp, #40	; 0x28
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	60f8      	str	r0, [r7, #12]
 800f1a0:	60b9      	str	r1, [r7, #8]
 800f1a2:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800f1a4:	491f      	ldr	r1, [pc, #124]	; (800f224 <_Z16StringFromBinaryPKhj+0x8c>)
 800f1a6:	68f8      	ldr	r0, [r7, #12]
 800f1a8:	f7fe fe7f 	bl	800deaa <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	627b      	str	r3, [r7, #36]	; 0x24
 800f1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d219      	bcs.n	800f1ec <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800f1b8:	68ba      	ldr	r2, [r7, #8]
 800f1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1bc:	4413      	add	r3, r2
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	461a      	mov	r2, r3
 800f1c2:	f107 0314 	add.w	r3, r7, #20
 800f1c6:	4918      	ldr	r1, [pc, #96]	; (800f228 <_Z16StringFromBinaryPKhj+0x90>)
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7ff ff2d 	bl	800f028 <_Z16StringFromFormatPKcz>
 800f1ce:	f107 0314 	add.w	r3, r7, #20
 800f1d2:	4619      	mov	r1, r3
 800f1d4:	68f8      	ldr	r0, [r7, #12]
 800f1d6:	f7ff fa9d 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 800f1da:	f107 0314 	add.w	r3, r7, #20
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7ff fa1b 	bl	800e61a <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800f1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	627b      	str	r3, [r7, #36]	; 0x24
 800f1ea:	e7e1      	b.n	800f1b0 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800f1ec:	68f8      	ldr	r0, [r7, #12]
 800f1ee:	f7ff f9f3 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	3b01      	subs	r3, #1
 800f1f6:	f107 001c 	add.w	r0, r7, #28
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	68f9      	ldr	r1, [r7, #12]
 800f1fe:	f7ff fb15 	bl	800e82c <_ZNK12SimpleString9subStringEjj>
 800f202:	f107 031c 	add.w	r3, r7, #28
 800f206:	4619      	mov	r1, r3
 800f208:	68f8      	ldr	r0, [r7, #12]
 800f20a:	f7fe feba 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 800f20e:	f107 031c 	add.w	r3, r7, #28
 800f212:	4618      	mov	r0, r3
 800f214:	f7ff fa01 	bl	800e61a <_ZN12SimpleStringD1Ev>

    return result;
 800f218:	bf00      	nop
}
 800f21a:	68f8      	ldr	r0, [r7, #12]
 800f21c:	3728      	adds	r7, #40	; 0x28
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	08025d54 	.word	0x08025d54
 800f228:	08025e00 	.word	0x08025e00

0800f22c <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b084      	sub	sp, #16
 800f230:	af00      	add	r7, sp, #0
 800f232:	60f8      	str	r0, [r7, #12]
 800f234:	60b9      	str	r1, [r7, #8]
 800f236:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d006      	beq.n	800f24c <_Z22StringFromBinaryOrNullPKhj+0x20>
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	68b9      	ldr	r1, [r7, #8]
 800f244:	4618      	mov	r0, r3
 800f246:	f7ff ffa7 	bl	800f198 <_Z16StringFromBinaryPKhj>
 800f24a:	e004      	b.n	800f256 <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	4904      	ldr	r1, [pc, #16]	; (800f260 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800f250:	4618      	mov	r0, r3
 800f252:	f7ff fc6f 	bl	800eb34 <_Z10StringFromPKc>
}
 800f256:	68f8      	ldr	r0, [r7, #12]
 800f258:	3710      	adds	r7, #16
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	08025d74 	.word	0x08025d74

0800f264 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b088      	sub	sp, #32
 800f268:	af00      	add	r7, sp, #0
 800f26a:	60f8      	str	r0, [r7, #12]
 800f26c:	60b9      	str	r1, [r7, #8]
 800f26e:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	687a      	ldr	r2, [r7, #4]
 800f274:	4913      	ldr	r1, [pc, #76]	; (800f2c4 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800f276:	4618      	mov	r0, r3
 800f278:	f7ff fed6 	bl	800f028 <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2b80      	cmp	r3, #128	; 0x80
 800f280:	bf28      	it	cs
 800f282:	2380      	movcs	r3, #128	; 0x80
 800f284:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800f286:	f107 0314 	add.w	r3, r7, #20
 800f28a:	69fa      	ldr	r2, [r7, #28]
 800f28c:	68b9      	ldr	r1, [r7, #8]
 800f28e:	4618      	mov	r0, r3
 800f290:	f7ff ffcc 	bl	800f22c <_Z22StringFromBinaryOrNullPKhj>
 800f294:	f107 0314 	add.w	r3, r7, #20
 800f298:	4619      	mov	r1, r3
 800f29a:	68f8      	ldr	r0, [r7, #12]
 800f29c:	f7ff fa3a 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 800f2a0:	f107 0314 	add.w	r3, r7, #20
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f7ff f9b8 	bl	800e61a <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800f2aa:	687a      	ldr	r2, [r7, #4]
 800f2ac:	69fb      	ldr	r3, [r7, #28]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d903      	bls.n	800f2ba <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800f2b2:	4905      	ldr	r1, [pc, #20]	; (800f2c8 <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800f2b4:	68f8      	ldr	r0, [r7, #12]
 800f2b6:	f7ff fa3f 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800f2ba:	bf00      	nop
}
 800f2bc:	68f8      	ldr	r0, [r7, #12]
 800f2be:	3720      	adds	r7, #32
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}
 800f2c4:	08025e08 	.word	0x08025e08
 800f2c8:	08025e24 	.word	0x08025e24

0800f2cc <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b084      	sub	sp, #16
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	60f8      	str	r0, [r7, #12]
 800f2d4:	60b9      	str	r1, [r7, #8]
 800f2d6:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d006      	beq.n	800f2ec <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	687a      	ldr	r2, [r7, #4]
 800f2e2:	68b9      	ldr	r1, [r7, #8]
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7ff ffbd 	bl	800f264 <_Z24StringFromBinaryWithSizePKhj>
 800f2ea:	e004      	b.n	800f2f6 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	4904      	ldr	r1, [pc, #16]	; (800f300 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7ff fc1f 	bl	800eb34 <_Z10StringFromPKc>
}
 800f2f6:	68f8      	ldr	r0, [r7, #12]
 800f2f8:	3710      	adds	r7, #16
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	08025d74 	.word	0x08025d74

0800f304 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b088      	sub	sp, #32
 800f308:	af00      	add	r7, sp, #0
 800f30a:	60f8      	str	r0, [r7, #12]
 800f30c:	60b9      	str	r1, [r7, #8]
 800f30e:	607a      	str	r2, [r7, #4]
 800f310:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800f312:	4925      	ldr	r1, [pc, #148]	; (800f3a8 <_Z20StringFromMaskedBitsmmj+0xa4>)
 800f314:	68f8      	ldr	r0, [r7, #12]
 800f316:	f7fe fdc8 	bl	800deaa <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	2b04      	cmp	r3, #4
 800f31e:	d802      	bhi.n	800f326 <_Z20StringFromMaskedBitsmmj+0x22>
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	00db      	lsls	r3, r3, #3
 800f324:	e000      	b.n	800f328 <_Z20StringFromMaskedBitsmmj+0x24>
 800f326:	2320      	movs	r3, #32
 800f328:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800f32a:	69bb      	ldr	r3, [r7, #24]
 800f32c:	3b01      	subs	r3, #1
 800f32e:	2201      	movs	r2, #1
 800f330:	fa02 f303 	lsl.w	r3, r2, r3
 800f334:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800f336:	2300      	movs	r3, #0
 800f338:	61fb      	str	r3, [r7, #28]
 800f33a:	69fa      	ldr	r2, [r7, #28]
 800f33c:	69bb      	ldr	r3, [r7, #24]
 800f33e:	429a      	cmp	r2, r3
 800f340:	d22d      	bcs.n	800f39e <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800f342:	687a      	ldr	r2, [r7, #4]
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	4013      	ands	r3, r2
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d00c      	beq.n	800f366 <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800f34c:	68ba      	ldr	r2, [r7, #8]
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	4013      	ands	r3, r2
 800f352:	2b00      	cmp	r3, #0
 800f354:	d001      	beq.n	800f35a <_Z20StringFromMaskedBitsmmj+0x56>
 800f356:	4b15      	ldr	r3, [pc, #84]	; (800f3ac <_Z20StringFromMaskedBitsmmj+0xa8>)
 800f358:	e000      	b.n	800f35c <_Z20StringFromMaskedBitsmmj+0x58>
 800f35a:	4b15      	ldr	r3, [pc, #84]	; (800f3b0 <_Z20StringFromMaskedBitsmmj+0xac>)
 800f35c:	4619      	mov	r1, r3
 800f35e:	68f8      	ldr	r0, [r7, #12]
 800f360:	f7ff f9ea 	bl	800e738 <_ZN12SimpleStringpLEPKc>
 800f364:	e003      	b.n	800f36e <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800f366:	4913      	ldr	r1, [pc, #76]	; (800f3b4 <_Z20StringFromMaskedBitsmmj+0xb0>)
 800f368:	68f8      	ldr	r0, [r7, #12]
 800f36a:	f7ff f9e5 	bl	800e738 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800f36e:	69fb      	ldr	r3, [r7, #28]
 800f370:	f003 0307 	and.w	r3, r3, #7
 800f374:	2b07      	cmp	r3, #7
 800f376:	d108      	bne.n	800f38a <_Z20StringFromMaskedBitsmmj+0x86>
 800f378:	69bb      	ldr	r3, [r7, #24]
 800f37a:	3b01      	subs	r3, #1
 800f37c:	69fa      	ldr	r2, [r7, #28]
 800f37e:	429a      	cmp	r2, r3
 800f380:	d003      	beq.n	800f38a <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800f382:	490d      	ldr	r1, [pc, #52]	; (800f3b8 <_Z20StringFromMaskedBitsmmj+0xb4>)
 800f384:	68f8      	ldr	r0, [r7, #12]
 800f386:	f7ff f9d7 	bl	800e738 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	005b      	lsls	r3, r3, #1
 800f38e:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	005b      	lsls	r3, r3, #1
 800f394:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800f396:	69fb      	ldr	r3, [r7, #28]
 800f398:	3301      	adds	r3, #1
 800f39a:	61fb      	str	r3, [r7, #28]
 800f39c:	e7cd      	b.n	800f33a <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800f39e:	bf00      	nop
}
 800f3a0:	68f8      	ldr	r0, [r7, #12]
 800f3a2:	3720      	adds	r7, #32
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}
 800f3a8:	08025d54 	.word	0x08025d54
 800f3ac:	08025e2c 	.word	0x08025e2c
 800f3b0:	08025e30 	.word	0x08025e30
 800f3b4:	08025e34 	.word	0x08025e34
 800f3b8:	08025e38 	.word	0x08025e38

0800f3bc <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b084      	sub	sp, #16
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800f3c6:	683a      	ldr	r2, [r7, #0]
 800f3c8:	4b18      	ldr	r3, [pc, #96]	; (800f42c <_Z23StringFromOrdinalNumberj+0x70>)
 800f3ca:	fba3 1302 	umull	r1, r3, r3, r2
 800f3ce:	08d9      	lsrs	r1, r3, #3
 800f3d0:	460b      	mov	r3, r1
 800f3d2:	009b      	lsls	r3, r3, #2
 800f3d4:	440b      	add	r3, r1
 800f3d6:	005b      	lsls	r3, r3, #1
 800f3d8:	1ad3      	subs	r3, r2, r3
 800f3da:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	2b0a      	cmp	r3, #10
 800f3e0:	d905      	bls.n	800f3ee <_Z23StringFromOrdinalNumberj+0x32>
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	2b0d      	cmp	r3, #13
 800f3e6:	d802      	bhi.n	800f3ee <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800f3e8:	4b11      	ldr	r3, [pc, #68]	; (800f430 <_Z23StringFromOrdinalNumberj+0x74>)
 800f3ea:	60fb      	str	r3, [r7, #12]
 800f3ec:	e013      	b.n	800f416 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	2b03      	cmp	r3, #3
 800f3f2:	d102      	bne.n	800f3fa <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800f3f4:	4b0f      	ldr	r3, [pc, #60]	; (800f434 <_Z23StringFromOrdinalNumberj+0x78>)
 800f3f6:	60fb      	str	r3, [r7, #12]
 800f3f8:	e00d      	b.n	800f416 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	2b02      	cmp	r3, #2
 800f3fe:	d102      	bne.n	800f406 <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800f400:	4b0d      	ldr	r3, [pc, #52]	; (800f438 <_Z23StringFromOrdinalNumberj+0x7c>)
 800f402:	60fb      	str	r3, [r7, #12]
 800f404:	e007      	b.n	800f416 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	2b01      	cmp	r3, #1
 800f40a:	d102      	bne.n	800f412 <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800f40c:	4b0b      	ldr	r3, [pc, #44]	; (800f43c <_Z23StringFromOrdinalNumberj+0x80>)
 800f40e:	60fb      	str	r3, [r7, #12]
 800f410:	e001      	b.n	800f416 <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800f412:	4b07      	ldr	r3, [pc, #28]	; (800f430 <_Z23StringFromOrdinalNumberj+0x74>)
 800f414:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	683a      	ldr	r2, [r7, #0]
 800f41c:	4908      	ldr	r1, [pc, #32]	; (800f440 <_Z23StringFromOrdinalNumberj+0x84>)
 800f41e:	f7ff fe03 	bl	800f028 <_Z16StringFromFormatPKcz>
}
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	3710      	adds	r7, #16
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}
 800f42a:	bf00      	nop
 800f42c:	cccccccd 	.word	0xcccccccd
 800f430:	08025e3c 	.word	0x08025e3c
 800f434:	08025e40 	.word	0x08025e40
 800f438:	08025e44 	.word	0x08025e44
 800f43c:	08025e48 	.word	0x08025e48
 800f440:	08025e4c 	.word	0x08025e4c

0800f444 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800f444:	b580      	push	{r7, lr}
 800f446:	b082      	sub	sp, #8
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	3304      	adds	r3, #4
 800f450:	4907      	ldr	r1, [pc, #28]	; (800f470 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800f452:	4618      	mov	r0, r3
 800f454:	f7fe fd29 	bl	800deaa <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2200      	movs	r2, #0
 800f45c:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2200      	movs	r2, #0
 800f462:	60da      	str	r2, [r3, #12]
}
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	4618      	mov	r0, r3
 800f468:	3708      	adds	r7, #8
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	08025d54 	.word	0x08025d54

0800f474 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800f474:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f476:	b083      	sub	sp, #12
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d01e      	beq.n	800f4c4 <_ZN22SimpleStringCollection8allocateEj+0x50>
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681a      	ldr	r2, [r3, #0]
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	3b04      	subs	r3, #4
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	00db      	lsls	r3, r3, #3
 800f494:	18d4      	adds	r4, r2, r3
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	429c      	cmp	r4, r3
 800f49c:	d004      	beq.n	800f4a8 <_ZN22SimpleStringCollection8allocateEj+0x34>
 800f49e:	3c08      	subs	r4, #8
 800f4a0:	4620      	mov	r0, r4
 800f4a2:	f7ff f8ba 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800f4a6:	e7f6      	b.n	800f496 <_ZN22SimpleStringCollection8allocateEj+0x22>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	f1a3 0208 	sub.w	r2, r3, #8
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	3b04      	subs	r3, #4
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	3301      	adds	r3, #1
 800f4ba:	00db      	lsls	r3, r3, #3
 800f4bc:	4619      	mov	r1, r3
 800f4be:	4610      	mov	r0, r2
 800f4c0:	f7fc f976 	bl	800b7b0 <_ZdaPvj>

    size_ = _size;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	683a      	ldr	r2, [r7, #0]
 800f4c8:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	68dc      	ldr	r4, [r3, #12]
 800f4ce:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800f4d2:	d202      	bcs.n	800f4da <_ZN22SimpleStringCollection8allocateEj+0x66>
 800f4d4:	1c63      	adds	r3, r4, #1
 800f4d6:	00db      	lsls	r3, r3, #3
 800f4d8:	e001      	b.n	800f4de <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800f4da:	f04f 33ff 	mov.w	r3, #4294967295
 800f4de:	f240 4227 	movw	r2, #1063	; 0x427
 800f4e2:	4910      	ldr	r1, [pc, #64]	; (800f524 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7fc f941 	bl	800b76c <_ZnajPKci>
 800f4ea:	4605      	mov	r5, r0
 800f4ec:	1d2b      	adds	r3, r5, #4
 800f4ee:	3b04      	subs	r3, #4
 800f4f0:	2208      	movs	r2, #8
 800f4f2:	601a      	str	r2, [r3, #0]
 800f4f4:	1d2b      	adds	r3, r5, #4
 800f4f6:	601c      	str	r4, [r3, #0]
 800f4f8:	f105 0308 	add.w	r3, r5, #8
 800f4fc:	1e62      	subs	r2, r4, #1
 800f4fe:	4614      	mov	r4, r2
 800f500:	461e      	mov	r6, r3
 800f502:	2c00      	cmp	r4, #0
 800f504:	db06      	blt.n	800f514 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800f506:	4908      	ldr	r1, [pc, #32]	; (800f528 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800f508:	4630      	mov	r0, r6
 800f50a:	f7fe fcce 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800f50e:	3608      	adds	r6, #8
 800f510:	3c01      	subs	r4, #1
 800f512:	e7f6      	b.n	800f502 <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800f514:	f105 0208 	add.w	r2, r5, #8
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	601a      	str	r2, [r3, #0]
}
 800f51c:	bf00      	nop
 800f51e:	370c      	adds	r7, #12
 800f520:	46bd      	mov	sp, r7
 800f522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f524:	08025c94 	.word	0x08025c94
 800f528:	08025d54 	.word	0x08025d54

0800f52c <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800f52c:	b590      	push	{r4, r7, lr}
 800f52e:	b083      	sub	sp, #12
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d01e      	beq.n	800f57a <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681a      	ldr	r2, [r3, #0]
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	3b04      	subs	r3, #4
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	00db      	lsls	r3, r3, #3
 800f54a:	18d4      	adds	r4, r2, r3
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	429c      	cmp	r4, r3
 800f552:	d004      	beq.n	800f55e <_ZN22SimpleStringCollectionD1Ev+0x32>
 800f554:	3c08      	subs	r4, #8
 800f556:	4620      	mov	r0, r4
 800f558:	f7ff f85f 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800f55c:	e7f6      	b.n	800f54c <_ZN22SimpleStringCollectionD1Ev+0x20>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f1a3 0208 	sub.w	r2, r3, #8
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	3b04      	subs	r3, #4
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	3301      	adds	r3, #1
 800f570:	00db      	lsls	r3, r3, #3
 800f572:	4619      	mov	r1, r3
 800f574:	4610      	mov	r0, r2
 800f576:	f7fc f91b 	bl	800b7b0 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	3304      	adds	r3, #4
 800f57e:	4618      	mov	r0, r3
 800f580:	f7ff f84b 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	4618      	mov	r0, r3
 800f588:	370c      	adds	r7, #12
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd90      	pop	{r4, r7, pc}

0800f58e <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800f58e:	b480      	push	{r7}
 800f590:	b083      	sub	sp, #12
 800f592:	af00      	add	r7, sp, #0
 800f594:	6078      	str	r0, [r7, #4]
    return size_;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	68db      	ldr	r3, [r3, #12]
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	370c      	adds	r7, #12
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a4:	4770      	bx	lr
	...

0800f5a8 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800f5a8:	b590      	push	{r4, r7, lr}
 800f5aa:	b085      	sub	sp, #20
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	68db      	ldr	r3, [r3, #12]
 800f5b6:	683a      	ldr	r2, [r7, #0]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d315      	bcc.n	800f5e8 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	1d1c      	adds	r4, r3, #4
 800f5c0:	f107 0308 	add.w	r3, r7, #8
 800f5c4:	490d      	ldr	r1, [pc, #52]	; (800f5fc <_ZN22SimpleStringCollectionixEj+0x54>)
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7fe fc6f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800f5cc:	f107 0308 	add.w	r3, r7, #8
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	4620      	mov	r0, r4
 800f5d4:	f7fe fcd5 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 800f5d8:	f107 0308 	add.w	r3, r7, #8
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f7ff f81c 	bl	800e61a <_ZN12SimpleStringD1Ev>
        return empty_;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	3304      	adds	r3, #4
 800f5e6:	e004      	b.n	800f5f2 <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681a      	ldr	r2, [r3, #0]
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	00db      	lsls	r3, r3, #3
 800f5f0:	4413      	add	r3, r2
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3714      	adds	r7, #20
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd90      	pop	{r4, r7, pc}
 800f5fa:	bf00      	nop
 800f5fc:	08025d54 	.word	0x08025d54

0800f600 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800f600:	b580      	push	{r7, lr}
 800f602:	b082      	sub	sp, #8
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	4618      	mov	r0, r3
 800f60c:	f7fa fb88 	bl	8009d20 <_ZN17ConsoleTestOutputC1Ev>
 800f610:	4a08      	ldr	r2, [pc, #32]	; (800f634 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	601a      	str	r2, [r3, #0]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2200      	movs	r2, #0
 800f61a:	611a      	str	r2, [r3, #16]
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	3314      	adds	r3, #20
 800f620:	4905      	ldr	r1, [pc, #20]	; (800f638 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800f622:	4618      	mov	r0, r3
 800f624:	f7fe fc41 	bl	800deaa <_ZN12SimpleStringC1EPKc>
{
}
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	4618      	mov	r0, r3
 800f62c:	3708      	adds	r7, #8
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop
 800f634:	08029e58 	.word	0x08029e58
 800f638:	08025e54 	.word	0x08025e54

0800f63c <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b082      	sub	sp, #8
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	4a08      	ldr	r2, [pc, #32]	; (800f668 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	601a      	str	r2, [r3, #0]
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	3314      	adds	r3, #20
 800f64e:	4618      	mov	r0, r3
 800f650:	f7fe ffe3 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	4618      	mov	r0, r3
 800f658:	f7fa fb74 	bl	8009d44 <_ZN17ConsoleTestOutputD1Ev>
{
}
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	4618      	mov	r0, r3
 800f660:	3708      	adds	r7, #8
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}
 800f666:	bf00      	nop
 800f668:	08029e58 	.word	0x08029e58

0800f66c <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b082      	sub	sp, #8
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
}
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f7ff ffe1 	bl	800f63c <_ZN18TeamCityTestOutputD1Ev>
 800f67a:	211c      	movs	r1, #28
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f7fc f865 	bl	800b74c <_ZdlPvj>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	4618      	mov	r0, r3
 800f686:	3708      	adds	r7, #8
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}

0800f68c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b086      	sub	sp, #24
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
 800f694:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800f696:	687a      	ldr	r2, [r7, #4]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	332c      	adds	r3, #44	; 0x2c
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	492b      	ldr	r1, [pc, #172]	; (800f750 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800f6a2:	4610      	mov	r0, r2
 800f6a4:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800f6a6:	f107 0308 	add.w	r3, r7, #8
 800f6aa:	6839      	ldr	r1, [r7, #0]
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f004 fdf7 	bl	80142a0 <_ZNK10UtestShell7getNameEv>
 800f6b2:	f107 0308 	add.w	r3, r7, #8
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7fe ff82 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	4619      	mov	r1, r3
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f000 f919 	bl	800f8f8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800f6c6:	f107 0308 	add.w	r3, r7, #8
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7fe ffa5 	bl	800e61a <_ZN12SimpleStringD1Ev>
    print("']\n");
 800f6d0:	687a      	ldr	r2, [r7, #4]
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	332c      	adds	r3, #44	; 0x2c
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	491e      	ldr	r1, [pc, #120]	; (800f754 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800f6dc:	4610      	mov	r0, r2
 800f6de:	4798      	blx	r3
    if (!test.willRun()) {
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	3318      	adds	r3, #24
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	6838      	ldr	r0, [r7, #0]
 800f6ea:	4798      	blx	r3
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	f083 0301 	eor.w	r3, r3, #1
 800f6f2:	b2db      	uxtb	r3, r3
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d024      	beq.n	800f742 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800f6f8:	687a      	ldr	r2, [r7, #4]
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	332c      	adds	r3, #44	; 0x2c
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	4915      	ldr	r1, [pc, #84]	; (800f758 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800f704:	4610      	mov	r0, r2
 800f706:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800f708:	f107 0310 	add.w	r3, r7, #16
 800f70c:	6839      	ldr	r1, [r7, #0]
 800f70e:	4618      	mov	r0, r3
 800f710:	f004 fdc6 	bl	80142a0 <_ZNK10UtestShell7getNameEv>
 800f714:	f107 0310 	add.w	r3, r7, #16
 800f718:	4618      	mov	r0, r3
 800f71a:	f7fe ff51 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800f71e:	4603      	mov	r3, r0
 800f720:	4619      	mov	r1, r3
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f000 f8e8 	bl	800f8f8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800f728:	f107 0310 	add.w	r3, r7, #16
 800f72c:	4618      	mov	r0, r3
 800f72e:	f7fe ff74 	bl	800e61a <_ZN12SimpleStringD1Ev>
        print("']\n");
 800f732:	687a      	ldr	r2, [r7, #4]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	332c      	adds	r3, #44	; 0x2c
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	4905      	ldr	r1, [pc, #20]	; (800f754 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800f73e:	4610      	mov	r0, r2
 800f740:	4798      	blx	r3
    }
    currtest_ = &test;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	683a      	ldr	r2, [r7, #0]
 800f746:	611a      	str	r2, [r3, #16]
}
 800f748:	bf00      	nop
 800f74a:	3718      	adds	r7, #24
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}
 800f750:	08025e58 	.word	0x08025e58
 800f754:	08025e78 	.word	0x08025e78
 800f758:	08025e7c 	.word	0x08025e7c

0800f75c <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800f75c:	b5b0      	push	{r4, r5, r7, lr}
 800f75e:	b084      	sub	sp, #16
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	691b      	ldr	r3, [r3, #16]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d03b      	beq.n	800f7e6 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800f76e:	687a      	ldr	r2, [r7, #4]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	332c      	adds	r3, #44	; 0x2c
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	491d      	ldr	r1, [pc, #116]	; (800f7f0 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800f77a:	4610      	mov	r0, r2
 800f77c:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	691a      	ldr	r2, [r3, #16]
 800f782:	f107 0308 	add.w	r3, r7, #8
 800f786:	4611      	mov	r1, r2
 800f788:	4618      	mov	r0, r3
 800f78a:	f004 fd89 	bl	80142a0 <_ZNK10UtestShell7getNameEv>
 800f78e:	f107 0308 	add.w	r3, r7, #8
 800f792:	4618      	mov	r0, r3
 800f794:	f7fe ff14 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800f798:	4603      	mov	r3, r0
 800f79a:	4619      	mov	r1, r3
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f000 f8ab 	bl	800f8f8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800f7a2:	f107 0308 	add.w	r3, r7, #8
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7fe ff37 	bl	800e61a <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800f7ac:	687a      	ldr	r2, [r7, #4]
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	332c      	adds	r3, #44	; 0x2c
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	490f      	ldr	r1, [pc, #60]	; (800f7f4 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800f7b8:	4610      	mov	r0, r2
 800f7ba:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800f7bc:	687d      	ldr	r5, [r7, #4]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	3334      	adds	r3, #52	; 0x34
 800f7c4:	681c      	ldr	r4, [r3, #0]
 800f7c6:	6838      	ldr	r0, [r7, #0]
 800f7c8:	f004 fa0a 	bl	8013be0 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	4619      	mov	r1, r3
 800f7d0:	4628      	mov	r0, r5
 800f7d2:	47a0      	blx	r4
    print("']\n");
 800f7d4:	687a      	ldr	r2, [r7, #4]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	332c      	adds	r3, #44	; 0x2c
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	4906      	ldr	r1, [pc, #24]	; (800f7f8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800f7e0:	4610      	mov	r0, r2
 800f7e2:	4798      	blx	r3
 800f7e4:	e000      	b.n	800f7e8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800f7e6:	bf00      	nop
}
 800f7e8:	3710      	adds	r7, #16
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bdb0      	pop	{r4, r5, r7, pc}
 800f7ee:	bf00      	nop
 800f7f0:	08025e9c 	.word	0x08025e9c
 800f7f4:	08025ebc 	.word	0x08025ebc
 800f7f8:	08025e78 	.word	0x08025e78

0800f7fc <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800f7fc:	b590      	push	{r4, r7, lr}
 800f7fe:	b085      	sub	sp, #20
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f103 0414 	add.w	r4, r3, #20
 800f80c:	f107 0308 	add.w	r3, r7, #8
 800f810:	6839      	ldr	r1, [r7, #0]
 800f812:	4618      	mov	r0, r3
 800f814:	f004 fd53 	bl	80142be <_ZNK10UtestShell8getGroupEv>
 800f818:	f107 0308 	add.w	r3, r7, #8
 800f81c:	4619      	mov	r1, r3
 800f81e:	4620      	mov	r0, r4
 800f820:	f7fe fbaf 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 800f824:	f107 0308 	add.w	r3, r7, #8
 800f828:	4618      	mov	r0, r3
 800f82a:	f7fe fef6 	bl	800e61a <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800f82e:	687a      	ldr	r2, [r7, #4]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	332c      	adds	r3, #44	; 0x2c
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	490c      	ldr	r1, [pc, #48]	; (800f86c <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800f83a:	4610      	mov	r0, r2
 800f83c:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	3314      	adds	r3, #20
 800f842:	4618      	mov	r0, r3
 800f844:	f7fe febc 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800f848:	4603      	mov	r3, r0
 800f84a:	4619      	mov	r1, r3
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f000 f853 	bl	800f8f8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800f852:	687a      	ldr	r2, [r7, #4]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	332c      	adds	r3, #44	; 0x2c
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	4904      	ldr	r1, [pc, #16]	; (800f870 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800f85e:	4610      	mov	r0, r2
 800f860:	4798      	blx	r3
}
 800f862:	bf00      	nop
 800f864:	3714      	adds	r7, #20
 800f866:	46bd      	mov	sp, r7
 800f868:	bd90      	pop	{r4, r7, pc}
 800f86a:	bf00      	nop
 800f86c:	08025ecc 	.word	0x08025ecc
 800f870:	08025e78 	.word	0x08025e78

0800f874 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800f874:	b590      	push	{r4, r7, lr}
 800f876:	b085      	sub	sp, #20
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f103 0414 	add.w	r4, r3, #20
 800f884:	f107 0308 	add.w	r3, r7, #8
 800f888:	4918      	ldr	r1, [pc, #96]	; (800f8ec <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7fe fb0d 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800f890:	f107 0308 	add.w	r3, r7, #8
 800f894:	4619      	mov	r1, r3
 800f896:	4620      	mov	r0, r4
 800f898:	f7fe fecb 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 800f89c:	4603      	mov	r3, r0
 800f89e:	461c      	mov	r4, r3
 800f8a0:	f107 0308 	add.w	r3, r7, #8
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f7fe feb8 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800f8aa:	2c00      	cmp	r4, #0
 800f8ac:	d11a      	bne.n	800f8e4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	332c      	adds	r3, #44	; 0x2c
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	490d      	ldr	r1, [pc, #52]	; (800f8f0 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800f8ba:	4610      	mov	r0, r2
 800f8bc:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	3314      	adds	r3, #20
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f7fe fe7c 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	4619      	mov	r1, r3
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f000 f813 	bl	800f8f8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800f8d2:	687a      	ldr	r2, [r7, #4]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	332c      	adds	r3, #44	; 0x2c
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	4905      	ldr	r1, [pc, #20]	; (800f8f4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800f8de:	4610      	mov	r0, r2
 800f8e0:	4798      	blx	r3
 800f8e2:	e000      	b.n	800f8e6 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800f8e4:	bf00      	nop
}
 800f8e6:	3714      	adds	r7, #20
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd90      	pop	{r4, r7, pc}
 800f8ec:	08025e54 	.word	0x08025e54
 800f8f0:	08025ef0 	.word	0x08025ef0
 800f8f4:	08025e78 	.word	0x08025e78

0800f8f8 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	6039      	str	r1, [r7, #0]
    while (*s) {
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d03f      	beq.n	800f98a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	2b27      	cmp	r3, #39	; 0x27
 800f910:	d00b      	beq.n	800f92a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	781b      	ldrb	r3, [r3, #0]
 800f916:	2b7c      	cmp	r3, #124	; 0x7c
 800f918:	d007      	beq.n	800f92a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	2b5b      	cmp	r3, #91	; 0x5b
 800f920:	d003      	beq.n	800f92a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	2b5d      	cmp	r3, #93	; 0x5d
 800f928:	d107      	bne.n	800f93a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800f92a:	237c      	movs	r3, #124	; 0x7c
 800f92c:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800f934:	2300      	movs	r3, #0
 800f936:	73bb      	strb	r3, [r7, #14]
 800f938:	e01a      	b.n	800f970 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	2b0d      	cmp	r3, #13
 800f940:	d106      	bne.n	800f950 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800f942:	237c      	movs	r3, #124	; 0x7c
 800f944:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800f946:	2372      	movs	r3, #114	; 0x72
 800f948:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800f94a:	2300      	movs	r3, #0
 800f94c:	73bb      	strb	r3, [r7, #14]
 800f94e:	e00f      	b.n	800f970 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	2b0a      	cmp	r3, #10
 800f956:	d106      	bne.n	800f966 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800f958:	237c      	movs	r3, #124	; 0x7c
 800f95a:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800f95c:	236e      	movs	r3, #110	; 0x6e
 800f95e:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800f960:	2300      	movs	r3, #0
 800f962:	73bb      	strb	r3, [r7, #14]
 800f964:	e004      	b.n	800f970 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	781b      	ldrb	r3, [r3, #0]
 800f96a:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800f96c:	2300      	movs	r3, #0
 800f96e:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800f970:	687a      	ldr	r2, [r7, #4]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	3328      	adds	r3, #40	; 0x28
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	f107 010c 	add.w	r1, r7, #12
 800f97e:	4610      	mov	r0, r2
 800f980:	4798      	blx	r3
        s++;
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	3301      	adds	r3, #1
 800f986:	603b      	str	r3, [r7, #0]
    while (*s) {
 800f988:	e7bb      	b.n	800f902 <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800f98a:	bf00      	nop
 800f98c:	3710      	adds	r7, #16
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
	...

0800f994 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800f994:	b5b0      	push	{r4, r5, r7, lr}
 800f996:	b08a      	sub	sp, #40	; 0x28
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800f99e:	687a      	ldr	r2, [r7, #4]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	332c      	adds	r3, #44	; 0x2c
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	4968      	ldr	r1, [pc, #416]	; (800fb4c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800f9aa:	4610      	mov	r0, r2
 800f9ac:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	3310      	adds	r3, #16
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	f107 0208 	add.w	r2, r7, #8
 800f9ba:	6839      	ldr	r1, [r7, #0]
 800f9bc:	4610      	mov	r0, r2
 800f9be:	4798      	blx	r3
 800f9c0:	f107 0308 	add.w	r3, r7, #8
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7fe fdfb 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f7ff ff92 	bl	800f8f8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800f9d4:	f107 0308 	add.w	r3, r7, #8
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f7fe fe1e 	bl	800e61a <_ZN12SimpleStringD1Ev>
    print("' message='");
 800f9de:	687a      	ldr	r2, [r7, #4]
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	332c      	adds	r3, #44	; 0x2c
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	4959      	ldr	r1, [pc, #356]	; (800fb50 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800f9ea:	4610      	mov	r0, r2
 800f9ec:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800f9ee:	6838      	ldr	r0, [r7, #0]
 800f9f0:	f000 fa15 	bl	800fe1e <_ZNK11TestFailure17isOutsideTestFileEv>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d105      	bne.n	800fa06 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800f9fa:	6838      	ldr	r0, [r7, #0]
 800f9fc:	f000 fa21 	bl	800fe42 <_ZNK11TestFailure18isInHelperFunctionEv>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d001      	beq.n	800fa0a <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800fa06:	2301      	movs	r3, #1
 800fa08:	e000      	b.n	800fa0c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d042      	beq.n	800fa96 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800fa10:	687a      	ldr	r2, [r7, #4]
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	332c      	adds	r3, #44	; 0x2c
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	494e      	ldr	r1, [pc, #312]	; (800fb54 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800fa1c:	4610      	mov	r0, r2
 800fa1e:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800fa20:	687d      	ldr	r5, [r7, #4]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	332c      	adds	r3, #44	; 0x2c
 800fa28:	681c      	ldr	r4, [r3, #0]
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	331c      	adds	r3, #28
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	f107 0210 	add.w	r2, r7, #16
 800fa36:	6839      	ldr	r1, [r7, #0]
 800fa38:	4610      	mov	r0, r2
 800fa3a:	4798      	blx	r3
 800fa3c:	f107 0310 	add.w	r3, r7, #16
 800fa40:	4618      	mov	r0, r3
 800fa42:	f7fe fdbd 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800fa46:	4603      	mov	r3, r0
 800fa48:	4619      	mov	r1, r3
 800fa4a:	4628      	mov	r0, r5
 800fa4c:	47a0      	blx	r4
 800fa4e:	f107 0310 	add.w	r3, r7, #16
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7fe fde1 	bl	800e61a <_ZN12SimpleStringD1Ev>
        print(":");
 800fa58:	687a      	ldr	r2, [r7, #4]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	332c      	adds	r3, #44	; 0x2c
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	493d      	ldr	r1, [pc, #244]	; (800fb58 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800fa64:	4610      	mov	r0, r2
 800fa66:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800fa68:	687d      	ldr	r5, [r7, #4]
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	3334      	adds	r3, #52	; 0x34
 800fa70:	681c      	ldr	r4, [r3, #0]
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	3320      	adds	r3, #32
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	6838      	ldr	r0, [r7, #0]
 800fa7c:	4798      	blx	r3
 800fa7e:	4603      	mov	r3, r0
 800fa80:	4619      	mov	r1, r3
 800fa82:	4628      	mov	r0, r5
 800fa84:	47a0      	blx	r4
        print("): ");
 800fa86:	687a      	ldr	r2, [r7, #4]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	332c      	adds	r3, #44	; 0x2c
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	4932      	ldr	r1, [pc, #200]	; (800fb5c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800fa92:	4610      	mov	r0, r2
 800fa94:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	3308      	adds	r3, #8
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f107 0218 	add.w	r2, r7, #24
 800faa2:	6839      	ldr	r1, [r7, #0]
 800faa4:	4610      	mov	r0, r2
 800faa6:	4798      	blx	r3
 800faa8:	f107 0318 	add.w	r3, r7, #24
 800faac:	4618      	mov	r0, r3
 800faae:	f7fe fd87 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800fab2:	4603      	mov	r3, r0
 800fab4:	4619      	mov	r1, r3
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f7ff ff1e 	bl	800f8f8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800fabc:	f107 0318 	add.w	r3, r7, #24
 800fac0:	4618      	mov	r0, r3
 800fac2:	f7fe fdaa 	bl	800e61a <_ZN12SimpleStringD1Ev>
    print(":");
 800fac6:	687a      	ldr	r2, [r7, #4]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	332c      	adds	r3, #44	; 0x2c
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	4921      	ldr	r1, [pc, #132]	; (800fb58 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800fad2:	4610      	mov	r0, r2
 800fad4:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800fad6:	687d      	ldr	r5, [r7, #4]
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	3334      	adds	r3, #52	; 0x34
 800fade:	681c      	ldr	r4, [r3, #0]
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	3314      	adds	r3, #20
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	6838      	ldr	r0, [r7, #0]
 800faea:	4798      	blx	r3
 800faec:	4603      	mov	r3, r0
 800faee:	4619      	mov	r1, r3
 800faf0:	4628      	mov	r0, r5
 800faf2:	47a0      	blx	r4

    print("' details='");
 800faf4:	687a      	ldr	r2, [r7, #4]
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	332c      	adds	r3, #44	; 0x2c
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	4918      	ldr	r1, [pc, #96]	; (800fb60 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800fb00:	4610      	mov	r0, r2
 800fb02:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	3318      	adds	r3, #24
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	f107 0220 	add.w	r2, r7, #32
 800fb10:	6839      	ldr	r1, [r7, #0]
 800fb12:	4610      	mov	r0, r2
 800fb14:	4798      	blx	r3
 800fb16:	f107 0320 	add.w	r3, r7, #32
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fe fd50 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800fb20:	4603      	mov	r3, r0
 800fb22:	4619      	mov	r1, r3
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f7ff fee7 	bl	800f8f8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800fb2a:	f107 0320 	add.w	r3, r7, #32
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7fe fd73 	bl	800e61a <_ZN12SimpleStringD1Ev>
    print("']\n");
 800fb34:	687a      	ldr	r2, [r7, #4]
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	332c      	adds	r3, #44	; 0x2c
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	4909      	ldr	r1, [pc, #36]	; (800fb64 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800fb40:	4610      	mov	r0, r2
 800fb42:	4798      	blx	r3
}
 800fb44:	bf00      	nop
 800fb46:	3728      	adds	r7, #40	; 0x28
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bdb0      	pop	{r4, r5, r7, pc}
 800fb4c:	08025f14 	.word	0x08025f14
 800fb50:	08025f34 	.word	0x08025f34
 800fb54:	08025f40 	.word	0x08025f40
 800fb58:	08025f50 	.word	0x08025f50
 800fb5c:	08025f54 	.word	0x08025f54
 800fb60:	08025f58 	.word	0x08025f58
 800fb64:	08025e78 	.word	0x08025e78

0800fb68 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	60f8      	str	r0, [r7, #12]
 800fb70:	60b9      	str	r1, [r7, #8]
 800fb72:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800fb74:	4a1a      	ldr	r2, [pc, #104]	; (800fbe0 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	601a      	str	r2, [r3, #0]
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	3314      	adds	r3, #20
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	68fa      	ldr	r2, [r7, #12]
 800fb84:	3204      	adds	r2, #4
 800fb86:	68b9      	ldr	r1, [r7, #8]
 800fb88:	4610      	mov	r0, r2
 800fb8a:	4798      	blx	r3
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	330c      	adds	r3, #12
 800fb90:	68b9      	ldr	r1, [r7, #8]
 800fb92:	4618      	mov	r0, r3
 800fb94:	f004 fb84 	bl	80142a0 <_ZNK10UtestShell7getNameEv>
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	3314      	adds	r3, #20
 800fb9c:	68b9      	ldr	r1, [r7, #8]
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f004 fc4f 	bl	8014442 <_ZNK10UtestShell7getFileEv>
 800fba4:	68b8      	ldr	r0, [r7, #8]
 800fba6:	f004 fc5b 	bl	8014460 <_ZNK10UtestShell13getLineNumberEv>
 800fbaa:	4602      	mov	r2, r0
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	61da      	str	r2, [r3, #28]
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	3320      	adds	r3, #32
 800fbb4:	68b9      	ldr	r1, [r7, #8]
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f004 fc43 	bl	8014442 <_ZNK10UtestShell7getFileEv>
 800fbbc:	68b8      	ldr	r0, [r7, #8]
 800fbbe:	f004 fc4f 	bl	8014460 <_ZNK10UtestShell13getLineNumberEv>
 800fbc2:	4602      	mov	r2, r0
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	629a      	str	r2, [r3, #40]	; 0x28
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	332c      	adds	r3, #44	; 0x2c
 800fbcc:	6879      	ldr	r1, [r7, #4]
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7fe f9bf 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
{
}
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3710      	adds	r7, #16
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	0802a124 	.word	0x0802a124

0800fbe4 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b084      	sub	sp, #16
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	60f8      	str	r0, [r7, #12]
 800fbec:	60b9      	str	r1, [r7, #8]
 800fbee:	607a      	str	r2, [r7, #4]
 800fbf0:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800fbf2:	4a19      	ldr	r2, [pc, #100]	; (800fc58 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	601a      	str	r2, [r3, #0]
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	3314      	adds	r3, #20
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	68fa      	ldr	r2, [r7, #12]
 800fc02:	3204      	adds	r2, #4
 800fc04:	68b9      	ldr	r1, [r7, #8]
 800fc06:	4610      	mov	r0, r2
 800fc08:	4798      	blx	r3
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	330c      	adds	r3, #12
 800fc0e:	68b9      	ldr	r1, [r7, #8]
 800fc10:	4618      	mov	r0, r3
 800fc12:	f004 fb45 	bl	80142a0 <_ZNK10UtestShell7getNameEv>
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	3314      	adds	r3, #20
 800fc1a:	6879      	ldr	r1, [r7, #4]
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7fe f944 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	683a      	ldr	r2, [r7, #0]
 800fc26:	61da      	str	r2, [r3, #28]
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	3320      	adds	r3, #32
 800fc2c:	68b9      	ldr	r1, [r7, #8]
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f004 fc07 	bl	8014442 <_ZNK10UtestShell7getFileEv>
 800fc34:	68b8      	ldr	r0, [r7, #8]
 800fc36:	f004 fc13 	bl	8014460 <_ZNK10UtestShell13getLineNumberEv>
 800fc3a:	4602      	mov	r2, r0
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	629a      	str	r2, [r3, #40]	; 0x28
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	332c      	adds	r3, #44	; 0x2c
 800fc44:	4905      	ldr	r1, [pc, #20]	; (800fc5c <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7fe f92f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
{
}
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	4618      	mov	r0, r3
 800fc50:	3710      	adds	r7, #16
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}
 800fc56:	bf00      	nop
 800fc58:	0802a124 	.word	0x0802a124
 800fc5c:	08025f64 	.word	0x08025f64

0800fc60 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b082      	sub	sp, #8
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800fc6a:	4a1e      	ldr	r2, [pc, #120]	; (800fce4 <_ZN11TestFailureC1ERKS_+0x84>)
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	601a      	str	r2, [r3, #0]
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	1d1a      	adds	r2, r3, #4
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	3304      	adds	r3, #4
 800fc78:	4619      	mov	r1, r3
 800fc7a:	4610      	mov	r0, r2
 800fc7c:	f7fe f969 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f103 020c 	add.w	r2, r3, #12
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	330c      	adds	r3, #12
 800fc8a:	4619      	mov	r1, r3
 800fc8c:	4610      	mov	r0, r2
 800fc8e:	f7fe f960 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f103 0214 	add.w	r2, r3, #20
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	3314      	adds	r3, #20
 800fc9c:	4619      	mov	r1, r3
 800fc9e:	4610      	mov	r0, r2
 800fca0:	f7fe f957 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	69da      	ldr	r2, [r3, #28]
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	61da      	str	r2, [r3, #28]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f103 0220 	add.w	r2, r3, #32
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	3320      	adds	r3, #32
 800fcb6:	4619      	mov	r1, r3
 800fcb8:	4610      	mov	r0, r2
 800fcba:	f7fe f94a 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	629a      	str	r2, [r3, #40]	; 0x28
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	332c      	adds	r3, #44	; 0x2c
 800fcd0:	4619      	mov	r1, r3
 800fcd2:	4610      	mov	r0, r2
 800fcd4:	f7fe f93d 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
{
}
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	4618      	mov	r0, r3
 800fcdc:	3708      	adds	r7, #8
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}
 800fce2:	bf00      	nop
 800fce4:	0802a124 	.word	0x0802a124

0800fce8 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b082      	sub	sp, #8
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	4a10      	ldr	r2, [pc, #64]	; (800fd34 <_ZN11TestFailureD1Ev+0x4c>)
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	601a      	str	r2, [r3, #0]
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	332c      	adds	r3, #44	; 0x2c
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7fe fc8d 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	3320      	adds	r3, #32
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7fe fc88 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	3314      	adds	r3, #20
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7fe fc83 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	330c      	adds	r3, #12
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f7fe fc7e 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	3304      	adds	r3, #4
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7fe fc79 	bl	800e61a <_ZN12SimpleStringD1Ev>
{
}
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3708      	adds	r7, #8
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	0802a124 	.word	0x0802a124

0800fd38 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
}
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f7ff ffd1 	bl	800fce8 <_ZN11TestFailureD1Ev>
 800fd46:	2134      	movs	r1, #52	; 0x34
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f7fb fcff 	bl	800b74c <_ZdlPvj>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	4618      	mov	r0, r3
 800fd52:	3708      	adds	r7, #8
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}

0800fd58 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b082      	sub	sp, #8
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
 800fd60:	6039      	str	r1, [r7, #0]
    return fileName_;
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	3314      	adds	r3, #20
 800fd66:	4619      	mov	r1, r3
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f7fe f8f2 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
}
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	3708      	adds	r7, #8
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}

0800fd76 <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800fd76:	b580      	push	{r7, lr}
 800fd78:	b082      	sub	sp, #8
 800fd7a:	af00      	add	r7, sp, #0
 800fd7c:	6078      	str	r0, [r7, #4]
 800fd7e:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	3320      	adds	r3, #32
 800fd84:	4619      	mov	r1, r3
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f7fe f8e3 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
}
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	3708      	adds	r7, #8
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	6039      	str	r1, [r7, #0]
    return testName_;
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	3304      	adds	r3, #4
 800fda2:	4619      	mov	r1, r3
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f7fe f8d4 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
}
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	3708      	adds	r7, #8
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}

0800fdb2 <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b082      	sub	sp, #8
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
 800fdba:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	330c      	adds	r3, #12
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f7fe f8c5 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
}
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	3708      	adds	r7, #8
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	69db      	ldr	r3, [r3, #28]
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	370c      	adds	r7, #12
 800fde0:	46bd      	mov	sp, r7
 800fde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde6:	4770      	bx	lr

0800fde8 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800fde8:	b480      	push	{r7}
 800fdea:	b083      	sub	sp, #12
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	370c      	adds	r7, #12
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfe:	4770      	bx	lr

0800fe00 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b082      	sub	sp, #8
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	6039      	str	r1, [r7, #0]
    return message_;
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	332c      	adds	r3, #44	; 0x2c
 800fe0e:	4619      	mov	r1, r3
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f7fe f89e 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
}
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	3708      	adds	r7, #8
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}

0800fe1e <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800fe1e:	b580      	push	{r7, lr}
 800fe20:	b082      	sub	sp, #8
 800fe22:	af00      	add	r7, sp, #0
 800fe24:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	f103 0220 	add.w	r2, r3, #32
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	3314      	adds	r3, #20
 800fe30:	4619      	mov	r1, r3
 800fe32:	4610      	mov	r0, r2
 800fe34:	f7fe fc42 	bl	800e6bc <_ZneRK12SimpleStringS1_>
 800fe38:	4603      	mov	r3, r0
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3708      	adds	r7, #8
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}

0800fe42 <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800fe42:	b480      	push	{r7}
 800fe44:	b083      	sub	sp, #12
 800fe46:	af00      	add	r7, sp, #0
 800fe48:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	69da      	ldr	r2, [r3, #28]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe52:	429a      	cmp	r2, r3
 800fe54:	bf34      	ite	cc
 800fe56:	2301      	movcc	r3, #1
 800fe58:	2300      	movcs	r3, #0
 800fe5a:	b2db      	uxtb	r3, r3
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	370c      	adds	r7, #12
 800fe60:	46bd      	mov	sp, r7
 800fe62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe66:	4770      	bx	lr

0800fe68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800fe68:	b590      	push	{r4, r7, lr}
 800fe6a:	b085      	sub	sp, #20
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	60f8      	str	r0, [r7, #12]
 800fe70:	60b9      	str	r1, [r7, #8]
 800fe72:	607a      	str	r2, [r7, #4]
 800fe74:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f7fe fba2 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800fe7c:	4604      	mov	r4, r0
 800fe7e:	6838      	ldr	r0, [r7, #0]
 800fe80:	f7fe fb9e 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800fe84:	4603      	mov	r3, r0
 800fe86:	68f8      	ldr	r0, [r7, #12]
 800fe88:	4622      	mov	r2, r4
 800fe8a:	4903      	ldr	r1, [pc, #12]	; (800fe98 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800fe8c:	f7ff f8cc 	bl	800f028 <_Z16StringFromFormatPKcz>
}
 800fe90:	68f8      	ldr	r0, [r7, #12]
 800fe92:	3714      	adds	r7, #20
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd90      	pop	{r4, r7, pc}
 800fe98:	08025f70 	.word	0x08025f70

0800fe9c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800fe9c:	b590      	push	{r4, r7, lr}
 800fe9e:	b097      	sub	sp, #92	; 0x5c
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	60f8      	str	r0, [r7, #12]
 800fea4:	60b9      	str	r1, [r7, #8]
 800fea6:	607a      	str	r2, [r7, #4]
 800fea8:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800feaa:	494c      	ldr	r1, [pc, #304]	; (800ffdc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800feac:	68f8      	ldr	r0, [r7, #12]
 800feae:	f7fd fffc 	bl	800deaa <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800feb2:	2314      	movs	r3, #20
 800feb4:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800feb6:	230a      	movs	r3, #10
 800feb8:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800feba:	f107 0320 	add.w	r3, r7, #32
 800febe:	220a      	movs	r2, #10
 800fec0:	4947      	ldr	r1, [pc, #284]	; (800ffe0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7fe f80c 	bl	800dee0 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800fec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fecc:	f107 0120 	add.w	r1, r7, #32
 800fed0:	687a      	ldr	r2, [r7, #4]
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7fe fc03 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 800fed8:	f107 0318 	add.w	r3, r7, #24
 800fedc:	f107 0220 	add.w	r2, r7, #32
 800fee0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7fe fbfa 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 800feea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800feee:	4618      	mov	r0, r3
 800fef0:	f7fe fb93 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800fef4:	f107 0310 	add.w	r3, r7, #16
 800fef8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fefa:	493a      	ldr	r1, [pc, #232]	; (800ffe4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800fefc:	4618      	mov	r0, r3
 800fefe:	f7ff f893 	bl	800f028 <_Z16StringFromFormatPKcz>

    result += "\n";
 800ff02:	4939      	ldr	r1, [pc, #228]	; (800ffe8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800ff04:	68f8      	ldr	r0, [r7, #12]
 800ff06:	f7fe fc17 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800ff0a:	f107 0310 	add.w	r3, r7, #16
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f7fe fb56 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800ff14:	4604      	mov	r4, r0
 800ff16:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800ff1a:	f107 0118 	add.w	r1, r7, #24
 800ff1e:	2314      	movs	r3, #20
 800ff20:	683a      	ldr	r2, [r7, #0]
 800ff22:	f7fe fc83 	bl	800e82c <_ZNK12SimpleString9subStringEjj>
 800ff26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7fe fb48 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800ff30:	4603      	mov	r3, r0
 800ff32:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800ff36:	4622      	mov	r2, r4
 800ff38:	492c      	ldr	r1, [pc, #176]	; (800ffec <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800ff3a:	f7ff f875 	bl	800f028 <_Z16StringFromFormatPKcz>
 800ff3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ff42:	4619      	mov	r1, r3
 800ff44:	68f8      	ldr	r0, [r7, #12]
 800ff46:	f7fe fbe5 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 800ff4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f7fe fb63 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800ff54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f7fe fb5e 	bl	800e61a <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800ff5e:	f107 0310 	add.w	r3, r7, #16
 800ff62:	4618      	mov	r0, r3
 800ff64:	f7fe fb38 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	f103 020a 	add.w	r2, r3, #10
 800ff6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ff72:	491b      	ldr	r1, [pc, #108]	; (800ffe0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800ff74:	4618      	mov	r0, r3
 800ff76:	f7fd ffb3 	bl	800dee0 <_ZN12SimpleStringC1EPKcj>
 800ff7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7fe fb1e 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 800ff84:	4602      	mov	r2, r0
 800ff86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ff8a:	4919      	ldr	r1, [pc, #100]	; (800fff0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7ff f84b 	bl	800f028 <_Z16StringFromFormatPKcz>
 800ff92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ff96:	4619      	mov	r1, r3
 800ff98:	68f8      	ldr	r0, [r7, #12]
 800ff9a:	f7fe fbbb 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 800ff9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7fe fb39 	bl	800e61a <_ZN12SimpleStringD1Ev>
 800ffa8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7fe fb34 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return result;
 800ffb2:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800ffb4:	f107 0310 	add.w	r3, r7, #16
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f7fe fb2e 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800ffbe:	f107 0318 	add.w	r3, r7, #24
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7fe fb29 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800ffc8:	f107 0320 	add.w	r3, r7, #32
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f7fe fb24 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return result;
 800ffd2:	bf00      	nop
}
 800ffd4:	68f8      	ldr	r0, [r7, #12]
 800ffd6:	375c      	adds	r7, #92	; 0x5c
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd90      	pop	{r4, r7, pc}
 800ffdc:	08025f90 	.word	0x08025f90
 800ffe0:	08025f94 	.word	0x08025f94
 800ffe4:	08025f98 	.word	0x08025f98
 800ffe8:	08025fc0 	.word	0x08025fc0
 800ffec:	08025fc4 	.word	0x08025fc4
 800fff0:	08025fcc 	.word	0x08025fcc

0800fff4 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800fff4:	b590      	push	{r4, r7, lr}
 800fff6:	b087      	sub	sp, #28
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	60f8      	str	r0, [r7, #12]
 800fffc:	60b9      	str	r1, [r7, #8]
 800fffe:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 8010000:	491a      	ldr	r1, [pc, #104]	; (801006c <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 8010002:	68f8      	ldr	r0, [r7, #12]
 8010004:	f7fd ff51 	bl	800deaa <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f7fe faf5 	bl	800e5f8 <_ZNK12SimpleString7isEmptyEv>
 801000e:	4603      	mov	r3, r0
 8010010:	f083 0301 	eor.w	r3, r3, #1
 8010014:	b2db      	uxtb	r3, r3
 8010016:	2b00      	cmp	r3, #0
 8010018:	d022      	beq.n	8010060 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 801001a:	f107 0310 	add.w	r3, r7, #16
 801001e:	4914      	ldr	r1, [pc, #80]	; (8010070 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 8010020:	4618      	mov	r0, r3
 8010022:	f7fd ff42 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8010026:	f107 0310 	add.w	r3, r7, #16
 801002a:	4619      	mov	r1, r3
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f7fe f800 	bl	800e032 <_ZNK12SimpleString10startsWithERKS_>
 8010032:	4603      	mov	r3, r0
 8010034:	f083 0301 	eor.w	r3, r3, #1
 8010038:	b2dc      	uxtb	r4, r3
 801003a:	f107 0310 	add.w	r3, r7, #16
 801003e:	4618      	mov	r0, r3
 8010040:	f7fe faeb 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8010044:	2c00      	cmp	r4, #0
 8010046:	d003      	beq.n	8010050 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 8010048:	490a      	ldr	r1, [pc, #40]	; (8010074 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 801004a:	68f8      	ldr	r0, [r7, #12]
 801004c:	f7fe fb74 	bl	800e738 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 8010050:	6879      	ldr	r1, [r7, #4]
 8010052:	68f8      	ldr	r0, [r7, #12]
 8010054:	f7fe fb5e 	bl	800e714 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 8010058:	4907      	ldr	r1, [pc, #28]	; (8010078 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 801005a:	68f8      	ldr	r0, [r7, #12]
 801005c:	f7fe fb6c 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 8010060:	bf00      	nop
}
 8010062:	68f8      	ldr	r0, [r7, #12]
 8010064:	371c      	adds	r7, #28
 8010066:	46bd      	mov	sp, r7
 8010068:	bd90      	pop	{r4, r7, pc}
 801006a:	bf00      	nop
 801006c:	08025f90 	.word	0x08025f90
 8010070:	08025fd4 	.word	0x08025fd4
 8010074:	08025fe0 	.word	0x08025fe0
 8010078:	08025fec 	.word	0x08025fec

0801007c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 801007c:	b590      	push	{r4, r7, lr}
 801007e:	b089      	sub	sp, #36	; 0x24
 8010080:	af00      	add	r7, sp, #0
 8010082:	60f8      	str	r0, [r7, #12]
 8010084:	60b9      	str	r1, [r7, #8]
 8010086:	607a      	str	r2, [r7, #4]
 8010088:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 801008a:	68f8      	ldr	r0, [r7, #12]
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	687a      	ldr	r2, [r7, #4]
 8010090:	68b9      	ldr	r1, [r7, #8]
 8010092:	f7ff fda7 	bl	800fbe4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010096:	4a19      	ldr	r2, [pc, #100]	; (80100fc <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80100a2:	68f9      	ldr	r1, [r7, #12]
 80100a4:	f107 0310 	add.w	r3, r7, #16
 80100a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7ff ffa2 	bl	800fff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80100b0:	f107 0310 	add.w	r3, r7, #16
 80100b4:	4619      	mov	r1, r3
 80100b6:	4620      	mov	r0, r4
 80100b8:	f7fd ff63 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 80100bc:	f107 0310 	add.w	r3, r7, #16
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7fe faaa 	bl	800e61a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80100cc:	68f9      	ldr	r1, [r7, #12]
 80100ce:	f107 0018 	add.w	r0, r7, #24
 80100d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100d6:	f7ff fec7 	bl	800fe68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80100da:	f107 0318 	add.w	r3, r7, #24
 80100de:	4619      	mov	r1, r3
 80100e0:	4620      	mov	r0, r4
 80100e2:	f7fe fb17 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 80100e6:	f107 0318 	add.w	r3, r7, #24
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7fe fa95 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	4618      	mov	r0, r3
 80100f4:	3724      	adds	r7, #36	; 0x24
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd90      	pop	{r4, r7, pc}
 80100fa:	bf00      	nop
 80100fc:	0802a0f8 	.word	0x0802a0f8

08010100 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 8010100:	b5b0      	push	{r4, r5, r7, lr}
 8010102:	b094      	sub	sp, #80	; 0x50
 8010104:	af00      	add	r7, sp, #0
 8010106:	6278      	str	r0, [r7, #36]	; 0x24
 8010108:	6239      	str	r1, [r7, #32]
 801010a:	61fa      	str	r2, [r7, #28]
 801010c:	61bb      	str	r3, [r7, #24]
 801010e:	ed87 0b04 	vstr	d0, [r7, #16]
 8010112:	ed87 1b02 	vstr	d1, [r7, #8]
 8010116:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 801011a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801011c:	69bb      	ldr	r3, [r7, #24]
 801011e:	69fa      	ldr	r2, [r7, #28]
 8010120:	6a39      	ldr	r1, [r7, #32]
 8010122:	f7ff fd5f 	bl	800fbe4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010126:	4a4a      	ldr	r2, [pc, #296]	; (8010250 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 8010128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 801012c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010132:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010134:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010138:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801013a:	4618      	mov	r0, r3
 801013c:	f7ff ff5a 	bl	800fff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010140:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010144:	4619      	mov	r1, r3
 8010146:	4620      	mov	r0, r4
 8010148:	f7fd ff1b 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801014c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010150:	4618      	mov	r0, r3
 8010152:	f7fe fa62 	bl	800e61a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 8010156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010158:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801015c:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 801015e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010162:	2107      	movs	r1, #7
 8010164:	ed97 0b04 	vldr	d0, [r7, #16]
 8010168:	4618      	mov	r0, r3
 801016a:	f7fe ff1b 	bl	800efa4 <_Z10StringFromdi>
 801016e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010172:	2107      	movs	r1, #7
 8010174:	ed97 0b02 	vldr	d0, [r7, #8]
 8010178:	4618      	mov	r0, r3
 801017a:	f7fe ff13 	bl	800efa4 <_Z10StringFromdi>
 801017e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010182:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010186:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801018a:	4629      	mov	r1, r5
 801018c:	f7ff fe6c 	bl	800fe68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8010190:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010194:	4619      	mov	r1, r3
 8010196:	4620      	mov	r0, r4
 8010198:	f7fe fabc 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801019c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7fe fa3a 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80101a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7fe fa35 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80101b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7fe fa30 	bl	800e61a <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 80101ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101bc:	332c      	adds	r3, #44	; 0x2c
 80101be:	4925      	ldr	r1, [pc, #148]	; (8010254 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7fe fab9 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 80101c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80101cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80101d0:	2107      	movs	r1, #7
 80101d2:	ed97 0b00 	vldr	d0, [r7]
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7fe fee4 	bl	800efa4 <_Z10StringFromdi>
 80101dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80101e0:	4619      	mov	r1, r3
 80101e2:	4620      	mov	r0, r4
 80101e4:	f7fe fa96 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 80101e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7fe fa14 	bl	800e61a <_ZN12SimpleStringD1Ev>
    message_ += ">";
 80101f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f4:	332c      	adds	r3, #44	; 0x2c
 80101f6:	4918      	ldr	r1, [pc, #96]	; (8010258 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7fe fa9d 	bl	800e738 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 80101fe:	4b17      	ldr	r3, [pc, #92]	; (801025c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	ed97 0b04 	vldr	d0, [r7, #16]
 8010206:	4798      	blx	r3
 8010208:	4603      	mov	r3, r0
 801020a:	2b00      	cmp	r3, #0
 801020c:	d10f      	bne.n	801022e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 801020e:	4b13      	ldr	r3, [pc, #76]	; (801025c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	ed97 0b02 	vldr	d0, [r7, #8]
 8010216:	4798      	blx	r3
 8010218:	4603      	mov	r3, r0
 801021a:	2b00      	cmp	r3, #0
 801021c:	d107      	bne.n	801022e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 801021e:	4b0f      	ldr	r3, [pc, #60]	; (801025c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	ed97 0b00 	vldr	d0, [r7]
 8010226:	4798      	blx	r3
 8010228:	4603      	mov	r3, r0
 801022a:	2b00      	cmp	r3, #0
 801022c:	d001      	beq.n	8010232 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 801022e:	2301      	movs	r3, #1
 8010230:	e000      	b.n	8010234 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 8010232:	2300      	movs	r3, #0
 8010234:	2b00      	cmp	r3, #0
 8010236:	d005      	beq.n	8010244 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 8010238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801023a:	332c      	adds	r3, #44	; 0x2c
 801023c:	4908      	ldr	r1, [pc, #32]	; (8010260 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 801023e:	4618      	mov	r0, r3
 8010240:	f7fe fa7a 	bl	800e738 <_ZN12SimpleStringpLEPKc>
}
 8010244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010246:	4618      	mov	r0, r3
 8010248:	3750      	adds	r7, #80	; 0x50
 801024a:	46bd      	mov	sp, r7
 801024c:	bdb0      	pop	{r4, r5, r7, pc}
 801024e:	bf00      	nop
 8010250:	0802a0cc 	.word	0x0802a0cc
 8010254:	08025ff0 	.word	0x08025ff0
 8010258:	08026008 	.word	0x08026008
 801025c:	200000e8 	.word	0x200000e8
 8010260:	0802600c 	.word	0x0802600c

08010264 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8010264:	b590      	push	{r4, r7, lr}
 8010266:	b093      	sub	sp, #76	; 0x4c
 8010268:	af02      	add	r7, sp, #8
 801026a:	60f8      	str	r0, [r7, #12]
 801026c:	60b9      	str	r1, [r7, #8]
 801026e:	607a      	str	r2, [r7, #4]
 8010270:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8010272:	68f8      	ldr	r0, [r7, #12]
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	687a      	ldr	r2, [r7, #4]
 8010278:	68b9      	ldr	r1, [r7, #8]
 801027a:	f7ff fcb3 	bl	800fbe4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 801027e:	4a4f      	ldr	r2, [pc, #316]	; (80103bc <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801028a:	68f9      	ldr	r1, [r7, #12]
 801028c:	f107 0320 	add.w	r3, r7, #32
 8010290:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010292:	4618      	mov	r0, r3
 8010294:	f7ff feae 	bl	800fff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010298:	f107 0320 	add.w	r3, r7, #32
 801029c:	4619      	mov	r1, r3
 801029e:	4620      	mov	r0, r4
 80102a0:	f7fd fe6f 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 80102a4:	f107 0320 	add.w	r3, r7, #32
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7fe f9b6 	bl	800e61a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 80102ae:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80102b0:	f7fe f986 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 80102b4:	4602      	mov	r2, r0
 80102b6:	f107 0318 	add.w	r3, r7, #24
 80102ba:	4611      	mov	r1, r2
 80102bc:	4618      	mov	r0, r3
 80102be:	f7fe fc47 	bl	800eb50 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 80102c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80102c4:	f7fe f97c 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 80102c8:	4602      	mov	r2, r0
 80102ca:	f107 0310 	add.w	r3, r7, #16
 80102ce:	4611      	mov	r1, r2
 80102d0:	4618      	mov	r0, r3
 80102d2:	f7fe fc3d 	bl	800eb50 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80102dc:	68f9      	ldr	r1, [r7, #12]
 80102de:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80102e2:	f107 0310 	add.w	r3, r7, #16
 80102e6:	f107 0218 	add.w	r2, r7, #24
 80102ea:	f7ff fdbd 	bl	800fe68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80102ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80102f2:	4619      	mov	r1, r3
 80102f4:	4620      	mov	r0, r4
 80102f6:	f7fe fa0d 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 80102fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80102fe:	4618      	mov	r0, r3
 8010300:	f7fe f98b 	bl	800e61a <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 8010304:	2300      	movs	r3, #0
 8010306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010308:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801030a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801030c:	f7fe fae9 	bl	800e8e2 <_ZNK12SimpleString2atEj>
 8010310:	4603      	mov	r3, r0
 8010312:	461c      	mov	r4, r3
 8010314:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010316:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010318:	f7fe fae3 	bl	800e8e2 <_ZNK12SimpleString2atEj>
 801031c:	4603      	mov	r3, r0
 801031e:	429c      	cmp	r4, r3
 8010320:	bf0c      	ite	eq
 8010322:	2301      	moveq	r3, #1
 8010324:	2300      	movne	r3, #0
 8010326:	b2db      	uxtb	r3, r3
 8010328:	2b00      	cmp	r3, #0
 801032a:	d003      	beq.n	8010334 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 801032c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801032e:	3301      	adds	r3, #1
 8010330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010332:	e7e9      	b.n	8010308 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 8010334:	2300      	movs	r3, #0
 8010336:	63bb      	str	r3, [r7, #56]	; 0x38
 8010338:	f107 0310 	add.w	r3, r7, #16
 801033c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801033e:	4618      	mov	r0, r3
 8010340:	f7fe facf 	bl	800e8e2 <_ZNK12SimpleString2atEj>
 8010344:	4603      	mov	r3, r0
 8010346:	461c      	mov	r4, r3
 8010348:	f107 0318 	add.w	r3, r7, #24
 801034c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801034e:	4618      	mov	r0, r3
 8010350:	f7fe fac7 	bl	800e8e2 <_ZNK12SimpleString2atEj>
 8010354:	4603      	mov	r3, r0
 8010356:	429c      	cmp	r4, r3
 8010358:	bf0c      	ite	eq
 801035a:	2301      	moveq	r3, #1
 801035c:	2300      	movne	r3, #0
 801035e:	b2db      	uxtb	r3, r3
 8010360:	2b00      	cmp	r3, #0
 8010362:	d003      	beq.n	801036c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 8010364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010366:	3301      	adds	r3, #1
 8010368:	63bb      	str	r3, [r7, #56]	; 0x38
 801036a:	e7e5      	b.n	8010338 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010372:	68f9      	ldr	r1, [r7, #12]
 8010374:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010378:	f107 0210 	add.w	r2, r7, #16
 801037c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801037e:	9300      	str	r3, [sp, #0]
 8010380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010382:	f7ff fd8b 	bl	800fe9c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8010386:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801038a:	4619      	mov	r1, r3
 801038c:	4620      	mov	r0, r4
 801038e:	f7fe f9c1 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 8010392:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010396:	4618      	mov	r0, r3
 8010398:	f7fe f93f 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 801039c:	f107 0310 	add.w	r3, r7, #16
 80103a0:	4618      	mov	r0, r3
 80103a2:	f7fe f93a 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 80103a6:	f107 0318 	add.w	r3, r7, #24
 80103aa:	4618      	mov	r0, r3
 80103ac:	f7fe f935 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	4618      	mov	r0, r3
 80103b4:	3744      	adds	r7, #68	; 0x44
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd90      	pop	{r4, r7, pc}
 80103ba:	bf00      	nop
 80103bc:	0802a0a0 	.word	0x0802a0a0

080103c0 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 80103c0:	b590      	push	{r4, r7, lr}
 80103c2:	b087      	sub	sp, #28
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	60f8      	str	r0, [r7, #12]
 80103c8:	60b9      	str	r1, [r7, #8]
 80103ca:	607a      	str	r2, [r7, #4]
 80103cc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80103ce:	68f8      	ldr	r0, [r7, #12]
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	687a      	ldr	r2, [r7, #4]
 80103d4:	68b9      	ldr	r1, [r7, #8]
 80103d6:	f7ff fc05 	bl	800fbe4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80103da:	4a1a      	ldr	r2, [pc, #104]	; (8010444 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80103e6:	68f9      	ldr	r1, [r7, #12]
 80103e8:	f107 0310 	add.w	r3, r7, #16
 80103ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7ff fe00 	bl	800fff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80103f4:	f107 0310 	add.w	r3, r7, #16
 80103f8:	4619      	mov	r1, r3
 80103fa:	4620      	mov	r0, r4
 80103fc:	f7fd fdc1 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 8010400:	f107 0310 	add.w	r3, r7, #16
 8010404:	4618      	mov	r0, r3
 8010406:	f7fe f908 	bl	800e61a <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	332c      	adds	r3, #44	; 0x2c
 801040e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010410:	4618      	mov	r0, r3
 8010412:	f7fe f97f 	bl	800e714 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	332c      	adds	r3, #44	; 0x2c
 801041a:	490b      	ldr	r1, [pc, #44]	; (8010448 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 801041c:	4618      	mov	r0, r3
 801041e:	f7fe f98b 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	332c      	adds	r3, #44	; 0x2c
 8010426:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010428:	4618      	mov	r0, r3
 801042a:	f7fe f973 	bl	800e714 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	332c      	adds	r3, #44	; 0x2c
 8010432:	4906      	ldr	r1, [pc, #24]	; (801044c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8010434:	4618      	mov	r0, r3
 8010436:	f7fe f97f 	bl	800e738 <_ZN12SimpleStringpLEPKc>
}
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	4618      	mov	r0, r3
 801043e:	371c      	adds	r7, #28
 8010440:	46bd      	mov	sp, r7
 8010442:	bd90      	pop	{r4, r7, pc}
 8010444:	0802a074 	.word	0x0802a074
 8010448:	08026030 	.word	0x08026030
 801044c:	08026034 	.word	0x08026034

08010450 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8010450:	b5b0      	push	{r4, r5, r7, lr}
 8010452:	b088      	sub	sp, #32
 8010454:	af00      	add	r7, sp, #0
 8010456:	60f8      	str	r0, [r7, #12]
 8010458:	60b9      	str	r1, [r7, #8]
 801045a:	607a      	str	r2, [r7, #4]
 801045c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 801045e:	68f8      	ldr	r0, [r7, #12]
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	687a      	ldr	r2, [r7, #4]
 8010464:	68b9      	ldr	r1, [r7, #8]
 8010466:	f7ff fbbd 	bl	800fbe4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 801046a:	4a1c      	ldr	r2, [pc, #112]	; (80104dc <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010476:	68f9      	ldr	r1, [r7, #12]
 8010478:	f107 0310 	add.w	r3, r7, #16
 801047c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801047e:	4618      	mov	r0, r3
 8010480:	f7ff fdb8 	bl	800fff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010484:	f107 0310 	add.w	r3, r7, #16
 8010488:	4619      	mov	r1, r3
 801048a:	4620      	mov	r0, r4
 801048c:	f7fd fd79 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 8010490:	f107 0310 	add.w	r3, r7, #16
 8010494:	4618      	mov	r0, r3
 8010496:	f7fe f8c0 	bl	800e61a <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80104a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80104a2:	f7fe f88d 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 80104a6:	4605      	mov	r5, r0
 80104a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104aa:	f7fe f889 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 80104ae:	4603      	mov	r3, r0
 80104b0:	f107 0018 	add.w	r0, r7, #24
 80104b4:	462a      	mov	r2, r5
 80104b6:	490a      	ldr	r1, [pc, #40]	; (80104e0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 80104b8:	f7fe fdb6 	bl	800f028 <_Z16StringFromFormatPKcz>
 80104bc:	f107 0318 	add.w	r3, r7, #24
 80104c0:	4619      	mov	r1, r3
 80104c2:	4620      	mov	r0, r4
 80104c4:	f7fe f926 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 80104c8:	f107 0318 	add.w	r3, r7, #24
 80104cc:	4618      	mov	r0, r3
 80104ce:	f7fe f8a4 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	4618      	mov	r0, r3
 80104d6:	3720      	adds	r7, #32
 80104d8:	46bd      	mov	sp, r7
 80104da:	bdb0      	pop	{r4, r5, r7, pc}
 80104dc:	0802a048 	.word	0x0802a048
 80104e0:	08026040 	.word	0x08026040

080104e4 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 80104e4:	b590      	push	{r4, r7, lr}
 80104e6:	b087      	sub	sp, #28
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	60f8      	str	r0, [r7, #12]
 80104ec:	60b9      	str	r1, [r7, #8]
 80104ee:	607a      	str	r2, [r7, #4]
 80104f0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80104f2:	68f8      	ldr	r0, [r7, #12]
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	687a      	ldr	r2, [r7, #4]
 80104f8:	68b9      	ldr	r1, [r7, #8]
 80104fa:	f7ff fb73 	bl	800fbe4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80104fe:	4a1a      	ldr	r2, [pc, #104]	; (8010568 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801050a:	68f9      	ldr	r1, [r7, #12]
 801050c:	f107 0310 	add.w	r3, r7, #16
 8010510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010512:	4618      	mov	r0, r3
 8010514:	f7ff fd6e 	bl	800fff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010518:	f107 0310 	add.w	r3, r7, #16
 801051c:	4619      	mov	r1, r3
 801051e:	4620      	mov	r0, r4
 8010520:	f7fd fd2f 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 8010524:	f107 0310 	add.w	r3, r7, #16
 8010528:	4618      	mov	r0, r3
 801052a:	f7fe f876 	bl	800e61a <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	332c      	adds	r3, #44	; 0x2c
 8010532:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010534:	4618      	mov	r0, r3
 8010536:	f7fe f8ed 	bl	800e714 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	332c      	adds	r3, #44	; 0x2c
 801053e:	490b      	ldr	r1, [pc, #44]	; (801056c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 8010540:	4618      	mov	r0, r3
 8010542:	f7fe f8f9 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	332c      	adds	r3, #44	; 0x2c
 801054a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801054c:	4618      	mov	r0, r3
 801054e:	f7fe f8e1 	bl	800e714 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	332c      	adds	r3, #44	; 0x2c
 8010556:	4906      	ldr	r1, [pc, #24]	; (8010570 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8010558:	4618      	mov	r0, r3
 801055a:	f7fe f8ed 	bl	800e738 <_ZN12SimpleStringpLEPKc>
}
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	4618      	mov	r0, r3
 8010562:	371c      	adds	r7, #28
 8010564:	46bd      	mov	sp, r7
 8010566:	bd90      	pop	{r4, r7, pc}
 8010568:	0802a01c 	.word	0x0802a01c
 801056c:	08026030 	.word	0x08026030
 8010570:	08026034 	.word	0x08026034

08010574 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 8010574:	b580      	push	{r7, lr}
 8010576:	b084      	sub	sp, #16
 8010578:	af00      	add	r7, sp, #0
 801057a:	60f8      	str	r0, [r7, #12]
 801057c:	60b9      	str	r1, [r7, #8]
 801057e:	607a      	str	r2, [r7, #4]
 8010580:	603b      	str	r3, [r7, #0]
 8010582:	68f8      	ldr	r0, [r7, #12]
 8010584:	683b      	ldr	r3, [r7, #0]
 8010586:	687a      	ldr	r2, [r7, #4]
 8010588:	68b9      	ldr	r1, [r7, #8]
 801058a:	f7ff fb2b 	bl	800fbe4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 801058e:	4a07      	ldr	r2, [pc, #28]	; (80105ac <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	332c      	adds	r3, #44	; 0x2c
 8010598:	69b9      	ldr	r1, [r7, #24]
 801059a:	4618      	mov	r0, r3
 801059c:	f7fd fcf1 	bl	800df82 <_ZN12SimpleStringaSERKS_>
}
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	4618      	mov	r0, r3
 80105a4:	3710      	adds	r7, #16
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}
 80105aa:	bf00      	nop
 80105ac:	08029cd8 	.word	0x08029cd8

080105b0 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 80105b0:	b590      	push	{r4, r7, lr}
 80105b2:	b09d      	sub	sp, #116	; 0x74
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	60f8      	str	r0, [r7, #12]
 80105b8:	60b9      	str	r1, [r7, #8]
 80105ba:	607a      	str	r2, [r7, #4]
 80105bc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80105be:	68f8      	ldr	r0, [r7, #12]
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	687a      	ldr	r2, [r7, #4]
 80105c4:	68b9      	ldr	r1, [r7, #8]
 80105c6:	f7ff fb0d 	bl	800fbe4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80105ca:	4a5d      	ldr	r2, [pc, #372]	; (8010740 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80105d6:	68f9      	ldr	r1, [r7, #12]
 80105d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80105dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7ff fd07 	bl	800fff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80105e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80105ea:	4619      	mov	r1, r3
 80105ec:	4620      	mov	r0, r4
 80105ee:	f7fd fcc8 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 80105f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80105f6:	4618      	mov	r0, r3
 80105f8:	f7fe f80f 	bl	800e61a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 80105fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010600:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010604:	4618      	mov	r0, r3
 8010606:	f7fe fae1 	bl	800ebcc <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 801060a:	f107 0320 	add.w	r3, r7, #32
 801060e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8010612:	4618      	mov	r0, r3
 8010614:	f7fe fada 	bl	800ebcc <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8010618:	f107 0120 	add.w	r1, r7, #32
 801061c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010620:	2220      	movs	r2, #32
 8010622:	4618      	mov	r0, r3
 8010624:	f7fe f8b6 	bl	800e794 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8010628:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801062c:	4945      	ldr	r1, [pc, #276]	; (8010744 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 801062e:	4618      	mov	r0, r3
 8010630:	f7fd fc3b 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8010634:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010638:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801063c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010640:	4618      	mov	r0, r3
 8010642:	f7fe f84c 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 8010646:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801064a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801064e:	4618      	mov	r0, r3
 8010650:	f7fe fbd2 	bl	800edf8 <_Z30BracketsFormattedHexStringFroml>
 8010654:	f107 0318 	add.w	r3, r7, #24
 8010658:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801065c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8010660:	4618      	mov	r0, r3
 8010662:	f7fe f83c 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 8010666:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801066a:	4618      	mov	r0, r3
 801066c:	f7fd ffd5 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8010670:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010674:	4618      	mov	r0, r3
 8010676:	f7fd ffd0 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801067a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801067e:	4618      	mov	r0, r3
 8010680:	f7fd ffcb 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8010684:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010688:	492e      	ldr	r1, [pc, #184]	; (8010744 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 801068a:	4618      	mov	r0, r3
 801068c:	f7fd fc0d 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8010690:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010694:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010698:	f107 0120 	add.w	r1, r7, #32
 801069c:	4618      	mov	r0, r3
 801069e:	f7fe f81e 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 80106a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80106a6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80106aa:	4618      	mov	r0, r3
 80106ac:	f7fe fba4 	bl	800edf8 <_Z30BracketsFormattedHexStringFroml>
 80106b0:	f107 0310 	add.w	r3, r7, #16
 80106b4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80106b8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80106bc:	4618      	mov	r0, r3
 80106be:	f7fe f80e 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 80106c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80106c6:	4618      	mov	r0, r3
 80106c8:	f7fd ffa7 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80106cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7fd ffa2 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80106d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80106da:	4618      	mov	r0, r3
 80106dc:	f7fd ff9d 	bl	800e61a <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80106e6:	68f9      	ldr	r1, [r7, #12]
 80106e8:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80106ec:	f107 0318 	add.w	r3, r7, #24
 80106f0:	f107 0210 	add.w	r2, r7, #16
 80106f4:	f7ff fbb8 	bl	800fe68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80106f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80106fc:	4619      	mov	r1, r3
 80106fe:	4620      	mov	r0, r4
 8010700:	f7fe f808 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 8010704:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010708:	4618      	mov	r0, r3
 801070a:	f7fd ff86 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 801070e:	f107 0310 	add.w	r3, r7, #16
 8010712:	4618      	mov	r0, r3
 8010714:	f7fd ff81 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8010718:	f107 0318 	add.w	r3, r7, #24
 801071c:	4618      	mov	r0, r3
 801071e:	f7fd ff7c 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 8010722:	f107 0320 	add.w	r3, r7, #32
 8010726:	4618      	mov	r0, r3
 8010728:	f7fd ff77 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 801072c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010730:	4618      	mov	r0, r3
 8010732:	f7fd ff72 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	4618      	mov	r0, r3
 801073a:	3774      	adds	r7, #116	; 0x74
 801073c:	46bd      	mov	sp, r7
 801073e:	bd90      	pop	{r4, r7, pc}
 8010740:	08029ff0 	.word	0x08029ff0
 8010744:	08025f94 	.word	0x08025f94

08010748 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 8010748:	b590      	push	{r4, r7, lr}
 801074a:	b09d      	sub	sp, #116	; 0x74
 801074c:	af00      	add	r7, sp, #0
 801074e:	60f8      	str	r0, [r7, #12]
 8010750:	60b9      	str	r1, [r7, #8]
 8010752:	607a      	str	r2, [r7, #4]
 8010754:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8010756:	68f8      	ldr	r0, [r7, #12]
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	687a      	ldr	r2, [r7, #4]
 801075c:	68b9      	ldr	r1, [r7, #8]
 801075e:	f7ff fa41 	bl	800fbe4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010762:	4a5d      	ldr	r2, [pc, #372]	; (80108d8 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801076e:	68f9      	ldr	r1, [r7, #12]
 8010770:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010774:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010778:	4618      	mov	r0, r3
 801077a:	f7ff fc3b 	bl	800fff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 801077e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010782:	4619      	mov	r1, r3
 8010784:	4620      	mov	r0, r4
 8010786:	f7fd fbfc 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801078a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801078e:	4618      	mov	r0, r3
 8010790:	f7fd ff43 	bl	800e61a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 8010794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010798:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801079c:	4618      	mov	r0, r3
 801079e:	f7fe fc7d 	bl	800f09c <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 80107a2:	f107 0320 	add.w	r3, r7, #32
 80107a6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7fe fc76 	bl	800f09c <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 80107b0:	f107 0120 	add.w	r1, r7, #32
 80107b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80107b8:	2220      	movs	r2, #32
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7fd ffea 	bl	800e794 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 80107c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80107c4:	4945      	ldr	r1, [pc, #276]	; (80108dc <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 80107c6:	4618      	mov	r0, r3
 80107c8:	f7fd fb6f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80107cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80107d0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80107d4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80107d8:	4618      	mov	r0, r3
 80107da:	f7fd ff80 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 80107de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80107e2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80107e6:	4618      	mov	r0, r3
 80107e8:	f7fe fb22 	bl	800ee30 <_Z30BracketsFormattedHexStringFromm>
 80107ec:	f107 0318 	add.w	r3, r7, #24
 80107f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80107f4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80107f8:	4618      	mov	r0, r3
 80107fa:	f7fd ff70 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 80107fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010802:	4618      	mov	r0, r3
 8010804:	f7fd ff09 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8010808:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801080c:	4618      	mov	r0, r3
 801080e:	f7fd ff04 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8010812:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010816:	4618      	mov	r0, r3
 8010818:	f7fd feff 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 801081c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010820:	492e      	ldr	r1, [pc, #184]	; (80108dc <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 8010822:	4618      	mov	r0, r3
 8010824:	f7fd fb41 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8010828:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801082c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010830:	f107 0120 	add.w	r1, r7, #32
 8010834:	4618      	mov	r0, r3
 8010836:	f7fd ff52 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 801083a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801083e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8010842:	4618      	mov	r0, r3
 8010844:	f7fe faf4 	bl	800ee30 <_Z30BracketsFormattedHexStringFromm>
 8010848:	f107 0310 	add.w	r3, r7, #16
 801084c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8010850:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8010854:	4618      	mov	r0, r3
 8010856:	f7fd ff42 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 801085a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801085e:	4618      	mov	r0, r3
 8010860:	f7fd fedb 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8010864:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010868:	4618      	mov	r0, r3
 801086a:	f7fd fed6 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801086e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010872:	4618      	mov	r0, r3
 8010874:	f7fd fed1 	bl	800e61a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801087e:	68f9      	ldr	r1, [r7, #12]
 8010880:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8010884:	f107 0318 	add.w	r3, r7, #24
 8010888:	f107 0210 	add.w	r2, r7, #16
 801088c:	f7ff faec 	bl	800fe68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8010890:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010894:	4619      	mov	r1, r3
 8010896:	4620      	mov	r0, r4
 8010898:	f7fd ff3c 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801089c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7fd feba 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 80108a6:	f107 0310 	add.w	r3, r7, #16
 80108aa:	4618      	mov	r0, r3
 80108ac:	f7fd feb5 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 80108b0:	f107 0318 	add.w	r3, r7, #24
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7fd feb0 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 80108ba:	f107 0320 	add.w	r3, r7, #32
 80108be:	4618      	mov	r0, r3
 80108c0:	f7fd feab 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 80108c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80108c8:	4618      	mov	r0, r3
 80108ca:	f7fd fea6 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	4618      	mov	r0, r3
 80108d2:	3774      	adds	r7, #116	; 0x74
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd90      	pop	{r4, r7, pc}
 80108d8:	08029fc4 	.word	0x08029fc4
 80108dc:	08025f94 	.word	0x08025f94

080108e0 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 80108e0:	b590      	push	{r4, r7, lr}
 80108e2:	b09d      	sub	sp, #116	; 0x74
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	60f8      	str	r0, [r7, #12]
 80108e8:	60b9      	str	r1, [r7, #8]
 80108ea:	607a      	str	r2, [r7, #4]
 80108ec:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80108ee:	68f8      	ldr	r0, [r7, #12]
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	687a      	ldr	r2, [r7, #4]
 80108f4:	68b9      	ldr	r1, [r7, #8]
 80108f6:	f7ff f975 	bl	800fbe4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80108fa:	4a5f      	ldr	r2, [pc, #380]	; (8010a78 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010906:	68f9      	ldr	r1, [r7, #12]
 8010908:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801090c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010910:	4618      	mov	r0, r3
 8010912:	f7ff fb6f 	bl	800fff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010916:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801091a:	4619      	mov	r1, r3
 801091c:	4620      	mov	r0, r4
 801091e:	f7fd fb30 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 8010922:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010926:	4618      	mov	r0, r3
 8010928:	f7fd fe77 	bl	800e61a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 801092c:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 8010930:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010934:	4611      	mov	r1, r2
 8010936:	4618      	mov	r0, r3
 8010938:	f7fe f936 	bl	800eba8 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 801093c:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 8010940:	f107 0320 	add.w	r3, r7, #32
 8010944:	4611      	mov	r1, r2
 8010946:	4618      	mov	r0, r3
 8010948:	f7fe f92e 	bl	800eba8 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 801094c:	f107 0120 	add.w	r1, r7, #32
 8010950:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010954:	2220      	movs	r2, #32
 8010956:	4618      	mov	r0, r3
 8010958:	f7fd ff1c 	bl	800e794 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 801095c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010960:	4946      	ldr	r1, [pc, #280]	; (8010a7c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 8010962:	4618      	mov	r0, r3
 8010964:	f7fd faa1 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8010968:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801096c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010970:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010974:	4618      	mov	r0, r3
 8010976:	f7fd feb2 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 801097a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801097e:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 8010982:	4611      	mov	r1, r2
 8010984:	4618      	mov	r0, r3
 8010986:	f7fe fa6f 	bl	800ee68 <_Z30BracketsFormattedHexStringFroma>
 801098a:	f107 0318 	add.w	r3, r7, #24
 801098e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010992:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8010996:	4618      	mov	r0, r3
 8010998:	f7fd fea1 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 801099c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7fd fe3a 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80109a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80109aa:	4618      	mov	r0, r3
 80109ac:	f7fd fe35 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80109b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7fd fe30 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 80109ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80109be:	492f      	ldr	r1, [pc, #188]	; (8010a7c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 80109c0:	4618      	mov	r0, r3
 80109c2:	f7fd fa72 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80109c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80109ca:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80109ce:	f107 0120 	add.w	r1, r7, #32
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7fd fe83 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 80109d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80109dc:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 80109e0:	4611      	mov	r1, r2
 80109e2:	4618      	mov	r0, r3
 80109e4:	f7fe fa40 	bl	800ee68 <_Z30BracketsFormattedHexStringFroma>
 80109e8:	f107 0310 	add.w	r3, r7, #16
 80109ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80109f0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80109f4:	4618      	mov	r0, r3
 80109f6:	f7fd fe72 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 80109fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80109fe:	4618      	mov	r0, r3
 8010a00:	f7fd fe0b 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8010a04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7fd fe06 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8010a0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fd fe01 	bl	800e61a <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010a1e:	68f9      	ldr	r1, [r7, #12]
 8010a20:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8010a24:	f107 0318 	add.w	r3, r7, #24
 8010a28:	f107 0210 	add.w	r2, r7, #16
 8010a2c:	f7ff fa1c 	bl	800fe68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8010a30:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010a34:	4619      	mov	r1, r3
 8010a36:	4620      	mov	r0, r4
 8010a38:	f7fd fe6c 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 8010a3c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7fd fdea 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8010a46:	f107 0310 	add.w	r3, r7, #16
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7fd fde5 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8010a50:	f107 0318 	add.w	r3, r7, #24
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7fd fde0 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 8010a5a:	f107 0320 	add.w	r3, r7, #32
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7fd fddb 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 8010a64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7fd fdd6 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	4618      	mov	r0, r3
 8010a72:	3774      	adds	r7, #116	; 0x74
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd90      	pop	{r4, r7, pc}
 8010a78:	08029f98 	.word	0x08029f98
 8010a7c:	08025f94 	.word	0x08025f94

08010a80 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 8010a80:	b590      	push	{r4, r7, lr}
 8010a82:	b093      	sub	sp, #76	; 0x4c
 8010a84:	af02      	add	r7, sp, #8
 8010a86:	60f8      	str	r0, [r7, #12]
 8010a88:	60b9      	str	r1, [r7, #8]
 8010a8a:	607a      	str	r2, [r7, #4]
 8010a8c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8010a8e:	68f8      	ldr	r0, [r7, #12]
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	687a      	ldr	r2, [r7, #4]
 8010a94:	68b9      	ldr	r1, [r7, #8]
 8010a96:	f7ff f8a5 	bl	800fbe4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010a9a:	4a4a      	ldr	r2, [pc, #296]	; (8010bc4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010aa6:	68f9      	ldr	r1, [r7, #12]
 8010aa8:	f107 0320 	add.w	r3, r7, #32
 8010aac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7ff faa0 	bl	800fff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010ab4:	f107 0320 	add.w	r3, r7, #32
 8010ab8:	4619      	mov	r1, r3
 8010aba:	4620      	mov	r0, r4
 8010abc:	f7fd fa61 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 8010ac0:	f107 0320 	add.w	r3, r7, #32
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f7fd fda8 	bl	800e61a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8010aca:	f107 0318 	add.w	r3, r7, #24
 8010ace:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f7fe f83d 	bl	800eb50 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8010ad6:	f107 0310 	add.w	r3, r7, #16
 8010ada:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010adc:	4618      	mov	r0, r3
 8010ade:	f7fe f837 	bl	800eb50 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010ae8:	68f9      	ldr	r1, [r7, #12]
 8010aea:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8010aee:	f107 0310 	add.w	r3, r7, #16
 8010af2:	f107 0218 	add.w	r2, r7, #24
 8010af6:	f7ff f9b7 	bl	800fe68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8010afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010afe:	4619      	mov	r1, r3
 8010b00:	4620      	mov	r0, r4
 8010b02:	f7fd fe07 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 8010b06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f7fd fd85 	bl	800e61a <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 8010b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d046      	beq.n	8010ba4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 8010b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d043      	beq.n	8010ba4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b24:	4413      	add	r3, r2
 8010b26:	781a      	ldrb	r2, [r3, #0]
 8010b28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b2c:	440b      	add	r3, r1
 8010b2e:	781b      	ldrb	r3, [r3, #0]
 8010b30:	429a      	cmp	r2, r3
 8010b32:	d103      	bne.n	8010b3c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 8010b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b36:	3301      	adds	r3, #1
 8010b38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b3a:	e7f1      	b.n	8010b20 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010b40:	f107 0310 	add.w	r3, r7, #16
 8010b44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7fd fecb 	bl	800e8e2 <_ZNK12SimpleString2atEj>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	461c      	mov	r4, r3
 8010b50:	f107 0318 	add.w	r3, r7, #24
 8010b54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010b56:	4618      	mov	r0, r3
 8010b58:	f7fd fec3 	bl	800e8e2 <_ZNK12SimpleString2atEj>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	429c      	cmp	r4, r3
 8010b60:	bf0c      	ite	eq
 8010b62:	2301      	moveq	r3, #1
 8010b64:	2300      	movne	r3, #0
 8010b66:	b2db      	uxtb	r3, r3
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d003      	beq.n	8010b74 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 8010b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b6e:	3301      	adds	r3, #1
 8010b70:	63bb      	str	r3, [r7, #56]	; 0x38
 8010b72:	e7e5      	b.n	8010b40 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010b7a:	68f9      	ldr	r1, [r7, #12]
 8010b7c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010b80:	f107 0210 	add.w	r2, r7, #16
 8010b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b86:	9300      	str	r3, [sp, #0]
 8010b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b8a:	f7ff f987 	bl	800fe9c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8010b8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010b92:	4619      	mov	r1, r3
 8010b94:	4620      	mov	r0, r4
 8010b96:	f7fd fdbd 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 8010b9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f7fd fd3b 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8010ba4:	f107 0310 	add.w	r3, r7, #16
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f7fd fd36 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8010bae:	f107 0318 	add.w	r3, r7, #24
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f7fd fd31 	bl	800e61a <_ZN12SimpleStringD1Ev>
    }
}
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3744      	adds	r7, #68	; 0x44
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd90      	pop	{r4, r7, pc}
 8010bc2:	bf00      	nop
 8010bc4:	08029f6c 	.word	0x08029f6c

08010bc8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 8010bc8:	b590      	push	{r4, r7, lr}
 8010bca:	b093      	sub	sp, #76	; 0x4c
 8010bcc:	af02      	add	r7, sp, #8
 8010bce:	60f8      	str	r0, [r7, #12]
 8010bd0:	60b9      	str	r1, [r7, #8]
 8010bd2:	607a      	str	r2, [r7, #4]
 8010bd4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8010bd6:	68f8      	ldr	r0, [r7, #12]
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	687a      	ldr	r2, [r7, #4]
 8010bdc:	68b9      	ldr	r1, [r7, #8]
 8010bde:	f7ff f801 	bl	800fbe4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010be2:	4a55      	ldr	r2, [pc, #340]	; (8010d38 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010bee:	68f9      	ldr	r1, [r7, #12]
 8010bf0:	f107 0320 	add.w	r3, r7, #32
 8010bf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f7ff f9fc 	bl	800fff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010bfc:	f107 0320 	add.w	r3, r7, #32
 8010c00:	4619      	mov	r1, r3
 8010c02:	4620      	mov	r0, r4
 8010c04:	f7fd f9bd 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 8010c08:	f107 0320 	add.w	r3, r7, #32
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f7fd fd04 	bl	800e61a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8010c12:	f107 0318 	add.w	r3, r7, #24
 8010c16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7fd ff99 	bl	800eb50 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8010c1e:	f107 0310 	add.w	r3, r7, #16
 8010c22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7fd ff93 	bl	800eb50 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010c30:	68f9      	ldr	r1, [r7, #12]
 8010c32:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8010c36:	f107 0310 	add.w	r3, r7, #16
 8010c3a:	f107 0218 	add.w	r2, r7, #24
 8010c3e:	f7ff f913 	bl	800fe68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8010c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010c46:	4619      	mov	r1, r3
 8010c48:	4620      	mov	r0, r4
 8010c4a:	f7fd fd63 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 8010c4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010c52:	4618      	mov	r0, r3
 8010c54:	f7fd fce1 	bl	800e61a <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 8010c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d05c      	beq.n	8010d18 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 8010c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d059      	beq.n	8010d18 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 8010c64:	2300      	movs	r3, #0
 8010c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c6c:	4413      	add	r3, r2
 8010c6e:	781b      	ldrb	r3, [r3, #0]
 8010c70:	4618      	mov	r0, r3
 8010c72:	f7fd f824 	bl	800dcbe <_ZN12SimpleString7ToLowerEc>
 8010c76:	4603      	mov	r3, r0
 8010c78:	461c      	mov	r4, r3
 8010c7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c7e:	4413      	add	r3, r2
 8010c80:	781b      	ldrb	r3, [r3, #0]
 8010c82:	4618      	mov	r0, r3
 8010c84:	f7fd f81b 	bl	800dcbe <_ZN12SimpleString7ToLowerEc>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	429c      	cmp	r4, r3
 8010c8c:	bf0c      	ite	eq
 8010c8e:	2301      	moveq	r3, #1
 8010c90:	2300      	movne	r3, #0
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d003      	beq.n	8010ca0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 8010c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c9a:	3301      	adds	r3, #1
 8010c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c9e:	e7e3      	b.n	8010c68 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 8010ca4:	f107 0310 	add.w	r3, r7, #16
 8010ca8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010caa:	4618      	mov	r0, r3
 8010cac:	f7fd fe19 	bl	800e8e2 <_ZNK12SimpleString2atEj>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7fd f803 	bl	800dcbe <_ZN12SimpleString7ToLowerEc>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	461c      	mov	r4, r3
 8010cbc:	f107 0318 	add.w	r3, r7, #24
 8010cc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f7fd fe0d 	bl	800e8e2 <_ZNK12SimpleString2atEj>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7fc fff7 	bl	800dcbe <_ZN12SimpleString7ToLowerEc>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	429c      	cmp	r4, r3
 8010cd4:	bf0c      	ite	eq
 8010cd6:	2301      	moveq	r3, #1
 8010cd8:	2300      	movne	r3, #0
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d003      	beq.n	8010ce8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 8010ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ce2:	3301      	adds	r3, #1
 8010ce4:	63bb      	str	r3, [r7, #56]	; 0x38
 8010ce6:	e7dd      	b.n	8010ca4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010cee:	68f9      	ldr	r1, [r7, #12]
 8010cf0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010cf4:	f107 0210 	add.w	r2, r7, #16
 8010cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cfa:	9300      	str	r3, [sp, #0]
 8010cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cfe:	f7ff f8cd 	bl	800fe9c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8010d02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010d06:	4619      	mov	r1, r3
 8010d08:	4620      	mov	r0, r4
 8010d0a:	f7fd fd03 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 8010d0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010d12:	4618      	mov	r0, r3
 8010d14:	f7fd fc81 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8010d18:	f107 0310 	add.w	r3, r7, #16
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f7fd fc7c 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8010d22:	f107 0318 	add.w	r3, r7, #24
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7fd fc77 	bl	800e61a <_ZN12SimpleStringD1Ev>
    }
}
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3744      	adds	r7, #68	; 0x44
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd90      	pop	{r4, r7, pc}
 8010d36:	bf00      	nop
 8010d38:	08029f40 	.word	0x08029f40

08010d3c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 8010d3c:	b5b0      	push	{r4, r5, r7, lr}
 8010d3e:	b092      	sub	sp, #72	; 0x48
 8010d40:	af02      	add	r7, sp, #8
 8010d42:	60f8      	str	r0, [r7, #12]
 8010d44:	60b9      	str	r1, [r7, #8]
 8010d46:	607a      	str	r2, [r7, #4]
 8010d48:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 8010d4a:	68f8      	ldr	r0, [r7, #12]
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	687a      	ldr	r2, [r7, #4]
 8010d50:	68b9      	ldr	r1, [r7, #8]
 8010d52:	f7fe ff47 	bl	800fbe4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010d56:	4a40      	ldr	r2, [pc, #256]	; (8010e58 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010d62:	68f9      	ldr	r1, [r7, #12]
 8010d64:	f107 031c 	add.w	r3, r7, #28
 8010d68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7ff f942 	bl	800fff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010d70:	f107 031c 	add.w	r3, r7, #28
 8010d74:	4619      	mov	r1, r3
 8010d76:	4620      	mov	r0, r4
 8010d78:	f7fd f903 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 8010d7c:	f107 031c 	add.w	r3, r7, #28
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7fd fc4a 	bl	800e61a <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 8010d86:	f107 0314 	add.w	r3, r7, #20
 8010d8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010d8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7fe fa4c 	bl	800f22c <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010d9a:	68fd      	ldr	r5, [r7, #12]
 8010d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010da0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010da2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010da4:	4618      	mov	r0, r3
 8010da6:	f7fe fa41 	bl	800f22c <_Z22StringFromBinaryOrNullPKhj>
 8010daa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010dae:	f107 0314 	add.w	r3, r7, #20
 8010db2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010db6:	4629      	mov	r1, r5
 8010db8:	f7ff f856 	bl	800fe68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8010dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010dc0:	4619      	mov	r1, r3
 8010dc2:	4620      	mov	r0, r4
 8010dc4:	f7fd fca6 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 8010dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f7fd fc24 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8010dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f7fd fc1f 	bl	800e61a <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 8010ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d02f      	beq.n	8010e42 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 8010de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d02c      	beq.n	8010e42 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 8010de8:	2300      	movs	r3, #0
 8010dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010dec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010df0:	4413      	add	r3, r2
 8010df2:	781a      	ldrb	r2, [r3, #0]
 8010df4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010df8:	440b      	add	r3, r1
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	429a      	cmp	r2, r3
 8010dfe:	d103      	bne.n	8010e08 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 8010e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e02:	3301      	adds	r3, #1
 8010e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e06:	e7f1      	b.n	8010dec <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010e0e:	68f9      	ldr	r1, [r7, #12]
 8010e10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010e12:	4613      	mov	r3, r2
 8010e14:	005b      	lsls	r3, r3, #1
 8010e16:	4413      	add	r3, r2
 8010e18:	1c5d      	adds	r5, r3, #1
 8010e1a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8010e1e:	f107 0214 	add.w	r2, r7, #20
 8010e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e24:	9300      	str	r3, [sp, #0]
 8010e26:	462b      	mov	r3, r5
 8010e28:	f7ff f838 	bl	800fe9c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8010e2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010e30:	4619      	mov	r1, r3
 8010e32:	4620      	mov	r0, r4
 8010e34:	f7fd fc6e 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 8010e38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f7fd fbec 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 8010e42:	f107 0314 	add.w	r3, r7, #20
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7fd fbe7 	bl	800e61a <_ZN12SimpleStringD1Ev>
	}
}
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3740      	adds	r7, #64	; 0x40
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bdb0      	pop	{r4, r5, r7, pc}
 8010e56:	bf00      	nop
 8010e58:	08029f14 	.word	0x08029f14

08010e5c <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 8010e5c:	b5b0      	push	{r4, r5, r7, lr}
 8010e5e:	b08c      	sub	sp, #48	; 0x30
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	60f8      	str	r0, [r7, #12]
 8010e64:	60b9      	str	r1, [r7, #8]
 8010e66:	607a      	str	r2, [r7, #4]
 8010e68:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 8010e6a:	68f8      	ldr	r0, [r7, #12]
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	687a      	ldr	r2, [r7, #4]
 8010e70:	68b9      	ldr	r1, [r7, #8]
 8010e72:	f7fe feb7 	bl	800fbe4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010e76:	4a26      	ldr	r2, [pc, #152]	; (8010f10 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010e82:	68f9      	ldr	r1, [r7, #12]
 8010e84:	f107 0310 	add.w	r3, r7, #16
 8010e88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7ff f8b2 	bl	800fff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010e90:	f107 0310 	add.w	r3, r7, #16
 8010e94:	4619      	mov	r1, r3
 8010e96:	4620      	mov	r0, r4
 8010e98:	f7fd f873 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 8010e9c:	f107 0310 	add.w	r3, r7, #16
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7fd fbba 	bl	800e61a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010eac:	68fd      	ldr	r5, [r7, #12]
 8010eae:	f107 0020 	add.w	r0, r7, #32
 8010eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010eb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010eb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010eb8:	f7fe fa24 	bl	800f304 <_Z20StringFromMaskedBitsmmj>
 8010ebc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8010ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ec2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010ec4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010ec6:	f7fe fa1d 	bl	800f304 <_Z20StringFromMaskedBitsmmj>
 8010eca:	f107 0018 	add.w	r0, r7, #24
 8010ece:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010ed2:	f107 0220 	add.w	r2, r7, #32
 8010ed6:	4629      	mov	r1, r5
 8010ed8:	f7fe ffc6 	bl	800fe68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8010edc:	f107 0318 	add.w	r3, r7, #24
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	f7fd fc16 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 8010ee8:	f107 0318 	add.w	r3, r7, #24
 8010eec:	4618      	mov	r0, r3
 8010eee:	f7fd fb94 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8010ef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7fd fb8f 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8010efc:	f107 0320 	add.w	r3, r7, #32
 8010f00:	4618      	mov	r0, r3
 8010f02:	f7fd fb8a 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3730      	adds	r7, #48	; 0x30
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bdb0      	pop	{r4, r5, r7, pc}
 8010f10:	08029ee8 	.word	0x08029ee8

08010f14 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 8010f14:	b590      	push	{r4, r7, lr}
 8010f16:	b089      	sub	sp, #36	; 0x24
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	60f8      	str	r0, [r7, #12]
 8010f1c:	60b9      	str	r1, [r7, #8]
 8010f1e:	607a      	str	r2, [r7, #4]
 8010f20:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 8010f22:	68f8      	ldr	r0, [r7, #12]
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	687a      	ldr	r2, [r7, #4]
 8010f28:	68b9      	ldr	r1, [r7, #8]
 8010f2a:	f7fe fe5b 	bl	800fbe4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010f2e:	4a1a      	ldr	r2, [pc, #104]	; (8010f98 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010f3a:	68f9      	ldr	r1, [r7, #12]
 8010f3c:	f107 0310 	add.w	r3, r7, #16
 8010f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7ff f856 	bl	800fff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010f48:	f107 0310 	add.w	r3, r7, #16
 8010f4c:	4619      	mov	r1, r3
 8010f4e:	4620      	mov	r0, r4
 8010f50:	f7fd f817 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 8010f54:	f107 0310 	add.w	r3, r7, #16
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f7fd fb5e 	bl	800e61a <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f66:	f7fd fb2b 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 8010f6a:	4602      	mov	r2, r0
 8010f6c:	f107 0318 	add.w	r3, r7, #24
 8010f70:	490a      	ldr	r1, [pc, #40]	; (8010f9c <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 8010f72:	4618      	mov	r0, r3
 8010f74:	f7fe f858 	bl	800f028 <_Z16StringFromFormatPKcz>
 8010f78:	f107 0318 	add.w	r3, r7, #24
 8010f7c:	4619      	mov	r1, r3
 8010f7e:	4620      	mov	r0, r4
 8010f80:	f7fd fbc8 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 8010f84:	f107 0318 	add.w	r3, r7, #24
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7fd fb46 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	4618      	mov	r0, r3
 8010f92:	3724      	adds	r7, #36	; 0x24
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd90      	pop	{r4, r7, pc}
 8010f98:	08029ebc 	.word	0x08029ebc
 8010f9c:	08026064 	.word	0x08026064

08010fa0 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	4a05      	ldr	r2, [pc, #20]	; (8010fc0 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	601a      	str	r2, [r3, #0]
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7fe fe99 	bl	800fce8 <_ZN11TestFailureD1Ev>
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3708      	adds	r7, #8
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}
 8010fc0:	08029ebc 	.word	0x08029ebc

08010fc4 <_ZN25FeatureUnsupportedFailureD0Ev>:
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b082      	sub	sp, #8
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	f7ff ffe7 	bl	8010fa0 <_ZN25FeatureUnsupportedFailureD1Ev>
 8010fd2:	2134      	movs	r1, #52	; 0x34
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f7fa fbb9 	bl	800b74c <_ZdlPvj>
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3708      	adds	r7, #8
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}

08010fe4 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b082      	sub	sp, #8
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	4a05      	ldr	r2, [pc, #20]	; (8011004 <_ZN16BitsEqualFailureD1Ev+0x20>)
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	601a      	str	r2, [r3, #0]
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f7fe fe77 	bl	800fce8 <_ZN11TestFailureD1Ev>
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3708      	adds	r7, #8
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}
 8011004:	08029ee8 	.word	0x08029ee8

08011008 <_ZN16BitsEqualFailureD0Ev>:
 8011008:	b580      	push	{r7, lr}
 801100a:	b082      	sub	sp, #8
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f7ff ffe7 	bl	8010fe4 <_ZN16BitsEqualFailureD1Ev>
 8011016:	2134      	movs	r1, #52	; 0x34
 8011018:	6878      	ldr	r0, [r7, #4]
 801101a:	f7fa fb97 	bl	800b74c <_ZdlPvj>
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	4618      	mov	r0, r3
 8011022:	3708      	adds	r7, #8
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}

08011028 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 8011028:	b580      	push	{r7, lr}
 801102a:	b082      	sub	sp, #8
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	4a05      	ldr	r2, [pc, #20]	; (8011048 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	601a      	str	r2, [r3, #0]
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	4618      	mov	r0, r3
 801103a:	f7fe fe55 	bl	800fce8 <_ZN11TestFailureD1Ev>
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	4618      	mov	r0, r3
 8011042:	3708      	adds	r7, #8
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}
 8011048:	08029f14 	.word	0x08029f14

0801104c <_ZN18BinaryEqualFailureD0Ev>:
 801104c:	b580      	push	{r7, lr}
 801104e:	b082      	sub	sp, #8
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f7ff ffe7 	bl	8011028 <_ZN18BinaryEqualFailureD1Ev>
 801105a:	2134      	movs	r1, #52	; 0x34
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	f7fa fb75 	bl	800b74c <_ZdlPvj>
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	4618      	mov	r0, r3
 8011066:	3708      	adds	r7, #8
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}

0801106c <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 801106c:	b580      	push	{r7, lr}
 801106e:	b082      	sub	sp, #8
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	4a05      	ldr	r2, [pc, #20]	; (801108c <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	601a      	str	r2, [r3, #0]
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	4618      	mov	r0, r3
 801107e:	f7fe fe33 	bl	800fce8 <_ZN11TestFailureD1Ev>
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	4618      	mov	r0, r3
 8011086:	3708      	adds	r7, #8
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}
 801108c:	08029f40 	.word	0x08029f40

08011090 <_ZN24StringEqualNoCaseFailureD0Ev>:
 8011090:	b580      	push	{r7, lr}
 8011092:	b082      	sub	sp, #8
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f7ff ffe7 	bl	801106c <_ZN24StringEqualNoCaseFailureD1Ev>
 801109e:	2134      	movs	r1, #52	; 0x34
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f7fa fb53 	bl	800b74c <_ZdlPvj>
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	4618      	mov	r0, r3
 80110aa:	3708      	adds	r7, #8
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}

080110b0 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b082      	sub	sp, #8
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
 80110b8:	4a05      	ldr	r2, [pc, #20]	; (80110d0 <_ZN18StringEqualFailureD1Ev+0x20>)
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	601a      	str	r2, [r3, #0]
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7fe fe11 	bl	800fce8 <_ZN11TestFailureD1Ev>
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	4618      	mov	r0, r3
 80110ca:	3708      	adds	r7, #8
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd80      	pop	{r7, pc}
 80110d0:	08029f6c 	.word	0x08029f6c

080110d4 <_ZN18StringEqualFailureD0Ev>:
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b082      	sub	sp, #8
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f7ff ffe7 	bl	80110b0 <_ZN18StringEqualFailureD1Ev>
 80110e2:	2134      	movs	r1, #52	; 0x34
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f7fa fb31 	bl	800b74c <_ZdlPvj>
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	4618      	mov	r0, r3
 80110ee:	3708      	adds	r7, #8
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}

080110f4 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b082      	sub	sp, #8
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
 80110fc:	4a05      	ldr	r2, [pc, #20]	; (8011114 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	601a      	str	r2, [r3, #0]
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	4618      	mov	r0, r3
 8011106:	f7fe fdef 	bl	800fce8 <_ZN11TestFailureD1Ev>
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	4618      	mov	r0, r3
 801110e:	3708      	adds	r7, #8
 8011110:	46bd      	mov	sp, r7
 8011112:	bd80      	pop	{r7, pc}
 8011114:	08029f98 	.word	0x08029f98

08011118 <_ZN23SignedBytesEqualFailureD0Ev>:
 8011118:	b580      	push	{r7, lr}
 801111a:	b082      	sub	sp, #8
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
 8011120:	6878      	ldr	r0, [r7, #4]
 8011122:	f7ff ffe7 	bl	80110f4 <_ZN23SignedBytesEqualFailureD1Ev>
 8011126:	2134      	movs	r1, #52	; 0x34
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f7fa fb0f 	bl	800b74c <_ZdlPvj>
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	4618      	mov	r0, r3
 8011132:	3708      	adds	r7, #8
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}

08011138 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 8011138:	b580      	push	{r7, lr}
 801113a:	b082      	sub	sp, #8
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
 8011140:	4a05      	ldr	r2, [pc, #20]	; (8011158 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	601a      	str	r2, [r3, #0]
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	4618      	mov	r0, r3
 801114a:	f7fe fdcd 	bl	800fce8 <_ZN11TestFailureD1Ev>
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	4618      	mov	r0, r3
 8011152:	3708      	adds	r7, #8
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}
 8011158:	08029fc4 	.word	0x08029fc4

0801115c <_ZN25UnsignedLongsEqualFailureD0Ev>:
 801115c:	b580      	push	{r7, lr}
 801115e:	b082      	sub	sp, #8
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f7ff ffe7 	bl	8011138 <_ZN25UnsignedLongsEqualFailureD1Ev>
 801116a:	2134      	movs	r1, #52	; 0x34
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	f7fa faed 	bl	800b74c <_ZdlPvj>
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	4618      	mov	r0, r3
 8011176:	3708      	adds	r7, #8
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	4a05      	ldr	r2, [pc, #20]	; (801119c <_ZN17LongsEqualFailureD1Ev+0x20>)
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	601a      	str	r2, [r3, #0]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	4618      	mov	r0, r3
 801118e:	f7fe fdab 	bl	800fce8 <_ZN11TestFailureD1Ev>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	4618      	mov	r0, r3
 8011196:	3708      	adds	r7, #8
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}
 801119c:	08029ff0 	.word	0x08029ff0

080111a0 <_ZN17LongsEqualFailureD0Ev>:
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b082      	sub	sp, #8
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	f7ff ffe7 	bl	801117c <_ZN17LongsEqualFailureD1Ev>
 80111ae:	2134      	movs	r1, #52	; 0x34
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	f7fa facb 	bl	800b74c <_ZdlPvj>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	4618      	mov	r0, r3
 80111ba:	3708      	adds	r7, #8
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}

080111c0 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b082      	sub	sp, #8
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
 80111c8:	4a05      	ldr	r2, [pc, #20]	; (80111e0 <_ZN12CheckFailureD1Ev+0x20>)
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	601a      	str	r2, [r3, #0]
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	4618      	mov	r0, r3
 80111d2:	f7fe fd89 	bl	800fce8 <_ZN11TestFailureD1Ev>
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	4618      	mov	r0, r3
 80111da:	3708      	adds	r7, #8
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}
 80111e0:	0802a01c 	.word	0x0802a01c

080111e4 <_ZN12CheckFailureD0Ev>:
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f7ff ffe7 	bl	80111c0 <_ZN12CheckFailureD1Ev>
 80111f2:	2134      	movs	r1, #52	; 0x34
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f7fa faa9 	bl	800b74c <_ZdlPvj>
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	4618      	mov	r0, r3
 80111fe:	3708      	adds	r7, #8
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}

08011204 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 8011204:	b580      	push	{r7, lr}
 8011206:	b082      	sub	sp, #8
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
 801120c:	4a05      	ldr	r2, [pc, #20]	; (8011224 <_ZN15ContainsFailureD1Ev+0x20>)
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	601a      	str	r2, [r3, #0]
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	4618      	mov	r0, r3
 8011216:	f7fe fd67 	bl	800fce8 <_ZN11TestFailureD1Ev>
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	4618      	mov	r0, r3
 801121e:	3708      	adds	r7, #8
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}
 8011224:	0802a048 	.word	0x0802a048

08011228 <_ZN15ContainsFailureD0Ev>:
 8011228:	b580      	push	{r7, lr}
 801122a:	b082      	sub	sp, #8
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	6878      	ldr	r0, [r7, #4]
 8011232:	f7ff ffe7 	bl	8011204 <_ZN15ContainsFailureD1Ev>
 8011236:	2134      	movs	r1, #52	; 0x34
 8011238:	6878      	ldr	r0, [r7, #4]
 801123a:	f7fa fa87 	bl	800b74c <_ZdlPvj>
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	4618      	mov	r0, r3
 8011242:	3708      	adds	r7, #8
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}

08011248 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 8011248:	b580      	push	{r7, lr}
 801124a:	b082      	sub	sp, #8
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
 8011250:	4a05      	ldr	r2, [pc, #20]	; (8011268 <_ZN17ComparisonFailureD1Ev+0x20>)
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	601a      	str	r2, [r3, #0]
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	4618      	mov	r0, r3
 801125a:	f7fe fd45 	bl	800fce8 <_ZN11TestFailureD1Ev>
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	4618      	mov	r0, r3
 8011262:	3708      	adds	r7, #8
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}
 8011268:	0802a074 	.word	0x0802a074

0801126c <_ZN17ComparisonFailureD0Ev>:
 801126c:	b580      	push	{r7, lr}
 801126e:	b082      	sub	sp, #8
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f7ff ffe7 	bl	8011248 <_ZN17ComparisonFailureD1Ev>
 801127a:	2134      	movs	r1, #52	; 0x34
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f7fa fa65 	bl	800b74c <_ZdlPvj>
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	4618      	mov	r0, r3
 8011286:	3708      	adds	r7, #8
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}

0801128c <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
 8011294:	4a05      	ldr	r2, [pc, #20]	; (80112ac <_ZN17CheckEqualFailureD1Ev+0x20>)
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	601a      	str	r2, [r3, #0]
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	4618      	mov	r0, r3
 801129e:	f7fe fd23 	bl	800fce8 <_ZN11TestFailureD1Ev>
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	4618      	mov	r0, r3
 80112a6:	3708      	adds	r7, #8
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}
 80112ac:	0802a0a0 	.word	0x0802a0a0

080112b0 <_ZN17CheckEqualFailureD0Ev>:
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b082      	sub	sp, #8
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
 80112b8:	6878      	ldr	r0, [r7, #4]
 80112ba:	f7ff ffe7 	bl	801128c <_ZN17CheckEqualFailureD1Ev>
 80112be:	2134      	movs	r1, #52	; 0x34
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	f7fa fa43 	bl	800b74c <_ZdlPvj>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	4618      	mov	r0, r3
 80112ca:	3708      	adds	r7, #8
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}

080112d0 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b082      	sub	sp, #8
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
 80112d8:	4a05      	ldr	r2, [pc, #20]	; (80112f0 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	601a      	str	r2, [r3, #0]
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7fe fd01 	bl	800fce8 <_ZN11TestFailureD1Ev>
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	4618      	mov	r0, r3
 80112ea:	3708      	adds	r7, #8
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}
 80112f0:	0802a0cc 	.word	0x0802a0cc

080112f4 <_ZN19DoublesEqualFailureD0Ev>:
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b082      	sub	sp, #8
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6878      	ldr	r0, [r7, #4]
 80112fe:	f7ff ffe7 	bl	80112d0 <_ZN19DoublesEqualFailureD1Ev>
 8011302:	2134      	movs	r1, #52	; 0x34
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f7fa fa21 	bl	800b74c <_ZdlPvj>
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	4618      	mov	r0, r3
 801130e:	3708      	adds	r7, #8
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}

08011314 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 8011314:	b580      	push	{r7, lr}
 8011316:	b082      	sub	sp, #8
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	4a05      	ldr	r2, [pc, #20]	; (8011334 <_ZN13EqualsFailureD1Ev+0x20>)
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	601a      	str	r2, [r3, #0]
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	4618      	mov	r0, r3
 8011326:	f7fe fcdf 	bl	800fce8 <_ZN11TestFailureD1Ev>
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	4618      	mov	r0, r3
 801132e:	3708      	adds	r7, #8
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}
 8011334:	0802a0f8 	.word	0x0802a0f8

08011338 <_ZN13EqualsFailureD0Ev>:
 8011338:	b580      	push	{r7, lr}
 801133a:	b082      	sub	sp, #8
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	6878      	ldr	r0, [r7, #4]
 8011342:	f7ff ffe7 	bl	8011314 <_ZN13EqualsFailureD1Ev>
 8011346:	2134      	movs	r1, #52	; 0x34
 8011348:	6878      	ldr	r0, [r7, #4]
 801134a:	f7fa f9ff 	bl	800b74c <_ZdlPvj>
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	4618      	mov	r0, r3
 8011352:	3708      	adds	r7, #8
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}

08011358 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 8011358:	b5b0      	push	{r4, r5, r7, lr}
 801135a:	b086      	sub	sp, #24
 801135c:	af02      	add	r7, sp, #8
 801135e:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 8011360:	4b0d      	ldr	r3, [pc, #52]	; (8011398 <_ZL13checkedMallocj+0x40>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	4798      	blx	r3
 8011368:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d10e      	bne.n	801138e <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 8011370:	f004 f97e 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8011374:	4604      	mov	r4, r0
 8011376:	6823      	ldr	r3, [r4, #0]
 8011378:	3368      	adds	r3, #104	; 0x68
 801137a:	681d      	ldr	r5, [r3, #0]
 801137c:	f004 f988 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8011380:	4603      	mov	r3, r0
 8011382:	9300      	str	r3, [sp, #0]
 8011384:	2325      	movs	r3, #37	; 0x25
 8011386:	4a05      	ldr	r2, [pc, #20]	; (801139c <_ZL13checkedMallocj+0x44>)
 8011388:	4905      	ldr	r1, [pc, #20]	; (80113a0 <_ZL13checkedMallocj+0x48>)
 801138a:	4620      	mov	r0, r4
 801138c:	47a8      	blx	r5
    return mem;
 801138e:	68fb      	ldr	r3, [r7, #12]
}
 8011390:	4618      	mov	r0, r3
 8011392:	3710      	adds	r7, #16
 8011394:	46bd      	mov	sp, r7
 8011396:	bdb0      	pop	{r4, r5, r7, pc}
 8011398:	200000c8 	.word	0x200000c8
 801139c:	080260d8 	.word	0x080260d8
 80113a0:	080260f8 	.word	0x080260f8

080113a4 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 80113a8:	4b04      	ldr	r3, [pc, #16]	; (80113bc <_Z22getCurrentNewAllocatorv+0x18>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d101      	bne.n	80113b4 <_Z22getCurrentNewAllocatorv+0x10>
 80113b0:	f000 f806 	bl	80113c0 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 80113b4:	4b01      	ldr	r3, [pc, #4]	; (80113bc <_Z22getCurrentNewAllocatorv+0x18>)
 80113b6:	681b      	ldr	r3, [r3, #0]
}
 80113b8:	4618      	mov	r0, r3
 80113ba:	bd80      	pop	{r7, pc}
 80113bc:	20000964 	.word	0x20000964

080113c0 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 80113c4:	f000 f810 	bl	80113e8 <_Z19defaultNewAllocatorv>
 80113c8:	4603      	mov	r3, r0
 80113ca:	4a02      	ldr	r2, [pc, #8]	; (80113d4 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 80113cc:	6013      	str	r3, [r2, #0]
}
 80113ce:	bf00      	nop
 80113d0:	bd80      	pop	{r7, pc}
 80113d2:	bf00      	nop
 80113d4:	20000964 	.word	0x20000964

080113d8 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 80113d8:	b580      	push	{r7, lr}
 80113da:	af00      	add	r7, sp, #0
 80113dc:	4801      	ldr	r0, [pc, #4]	; (80113e4 <__tcf_0+0xc>)
 80113de:	f000 f909 	bl	80115f4 <_ZN19TestMemoryAllocatorD1Ev>
 80113e2:	bd80      	pop	{r7, pc}
 80113e4:	20000970 	.word	0x20000970

080113e8 <_Z19defaultNewAllocatorv>:
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 80113ec:	4b13      	ldr	r3, [pc, #76]	; (801143c <_Z19defaultNewAllocatorv+0x54>)
 80113ee:	781b      	ldrb	r3, [r3, #0]
 80113f0:	f3bf 8f5b 	dmb	ish
 80113f4:	b2db      	uxtb	r3, r3
 80113f6:	f003 0301 	and.w	r3, r3, #1
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	bf0c      	ite	eq
 80113fe:	2301      	moveq	r3, #1
 8011400:	2300      	movne	r3, #0
 8011402:	b2db      	uxtb	r3, r3
 8011404:	2b00      	cmp	r3, #0
 8011406:	d016      	beq.n	8011436 <_Z19defaultNewAllocatorv+0x4e>
 8011408:	480c      	ldr	r0, [pc, #48]	; (801143c <_Z19defaultNewAllocatorv+0x54>)
 801140a:	f00f fc0d 	bl	8020c28 <__cxa_guard_acquire>
 801140e:	4603      	mov	r3, r0
 8011410:	2b00      	cmp	r3, #0
 8011412:	bf14      	ite	ne
 8011414:	2301      	movne	r3, #1
 8011416:	2300      	moveq	r3, #0
 8011418:	b2db      	uxtb	r3, r3
 801141a:	2b00      	cmp	r3, #0
 801141c:	d00b      	beq.n	8011436 <_Z19defaultNewAllocatorv+0x4e>
 801141e:	4b08      	ldr	r3, [pc, #32]	; (8011440 <_Z19defaultNewAllocatorv+0x58>)
 8011420:	4a08      	ldr	r2, [pc, #32]	; (8011444 <_Z19defaultNewAllocatorv+0x5c>)
 8011422:	4909      	ldr	r1, [pc, #36]	; (8011448 <_Z19defaultNewAllocatorv+0x60>)
 8011424:	4809      	ldr	r0, [pc, #36]	; (801144c <_Z19defaultNewAllocatorv+0x64>)
 8011426:	f000 f8c5 	bl	80115b4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 801142a:	4804      	ldr	r0, [pc, #16]	; (801143c <_Z19defaultNewAllocatorv+0x54>)
 801142c:	f00f fc08 	bl	8020c40 <__cxa_guard_release>
 8011430:	4807      	ldr	r0, [pc, #28]	; (8011450 <_Z19defaultNewAllocatorv+0x68>)
 8011432:	f00f fc2c 	bl	8020c8e <atexit>
    return &allocator;
 8011436:	4b05      	ldr	r3, [pc, #20]	; (801144c <_Z19defaultNewAllocatorv+0x64>)
}
 8011438:	4618      	mov	r0, r3
 801143a:	bd80      	pop	{r7, pc}
 801143c:	20000984 	.word	0x20000984
 8011440:	08026118 	.word	0x08026118
 8011444:	08026120 	.word	0x08026120
 8011448:	08026124 	.word	0x08026124
 801144c:	20000970 	.word	0x20000970
 8011450:	080113d9 	.word	0x080113d9

08011454 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 8011454:	b580      	push	{r7, lr}
 8011456:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 8011458:	4b04      	ldr	r3, [pc, #16]	; (801146c <_Z27getCurrentNewArrayAllocatorv+0x18>)
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d101      	bne.n	8011464 <_Z27getCurrentNewArrayAllocatorv+0x10>
 8011460:	f000 f806 	bl	8011470 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 8011464:	4b01      	ldr	r3, [pc, #4]	; (801146c <_Z27getCurrentNewArrayAllocatorv+0x18>)
 8011466:	681b      	ldr	r3, [r3, #0]
}
 8011468:	4618      	mov	r0, r3
 801146a:	bd80      	pop	{r7, pc}
 801146c:	20000968 	.word	0x20000968

08011470 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 8011470:	b580      	push	{r7, lr}
 8011472:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 8011474:	f000 f810 	bl	8011498 <_Z24defaultNewArrayAllocatorv>
 8011478:	4603      	mov	r3, r0
 801147a:	4a02      	ldr	r2, [pc, #8]	; (8011484 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 801147c:	6013      	str	r3, [r2, #0]
}
 801147e:	bf00      	nop
 8011480:	bd80      	pop	{r7, pc}
 8011482:	bf00      	nop
 8011484:	20000968 	.word	0x20000968

08011488 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 8011488:	b580      	push	{r7, lr}
 801148a:	af00      	add	r7, sp, #0
 801148c:	4801      	ldr	r0, [pc, #4]	; (8011494 <__tcf_1+0xc>)
 801148e:	f000 f8b1 	bl	80115f4 <_ZN19TestMemoryAllocatorD1Ev>
 8011492:	bd80      	pop	{r7, pc}
 8011494:	20000988 	.word	0x20000988

08011498 <_Z24defaultNewArrayAllocatorv>:
{
 8011498:	b580      	push	{r7, lr}
 801149a:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 801149c:	4b13      	ldr	r3, [pc, #76]	; (80114ec <_Z24defaultNewArrayAllocatorv+0x54>)
 801149e:	781b      	ldrb	r3, [r3, #0]
 80114a0:	f3bf 8f5b 	dmb	ish
 80114a4:	b2db      	uxtb	r3, r3
 80114a6:	f003 0301 	and.w	r3, r3, #1
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	bf0c      	ite	eq
 80114ae:	2301      	moveq	r3, #1
 80114b0:	2300      	movne	r3, #0
 80114b2:	b2db      	uxtb	r3, r3
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d016      	beq.n	80114e6 <_Z24defaultNewArrayAllocatorv+0x4e>
 80114b8:	480c      	ldr	r0, [pc, #48]	; (80114ec <_Z24defaultNewArrayAllocatorv+0x54>)
 80114ba:	f00f fbb5 	bl	8020c28 <__cxa_guard_acquire>
 80114be:	4603      	mov	r3, r0
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	bf14      	ite	ne
 80114c4:	2301      	movne	r3, #1
 80114c6:	2300      	moveq	r3, #0
 80114c8:	b2db      	uxtb	r3, r3
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d00b      	beq.n	80114e6 <_Z24defaultNewArrayAllocatorv+0x4e>
 80114ce:	4b08      	ldr	r3, [pc, #32]	; (80114f0 <_Z24defaultNewArrayAllocatorv+0x58>)
 80114d0:	4a08      	ldr	r2, [pc, #32]	; (80114f4 <_Z24defaultNewArrayAllocatorv+0x5c>)
 80114d2:	4909      	ldr	r1, [pc, #36]	; (80114f8 <_Z24defaultNewArrayAllocatorv+0x60>)
 80114d4:	4809      	ldr	r0, [pc, #36]	; (80114fc <_Z24defaultNewArrayAllocatorv+0x64>)
 80114d6:	f000 f86d 	bl	80115b4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 80114da:	4804      	ldr	r0, [pc, #16]	; (80114ec <_Z24defaultNewArrayAllocatorv+0x54>)
 80114dc:	f00f fbb0 	bl	8020c40 <__cxa_guard_release>
 80114e0:	4807      	ldr	r0, [pc, #28]	; (8011500 <_Z24defaultNewArrayAllocatorv+0x68>)
 80114e2:	f00f fbd4 	bl	8020c8e <atexit>
    return &allocator;
 80114e6:	4b05      	ldr	r3, [pc, #20]	; (80114fc <_Z24defaultNewArrayAllocatorv+0x64>)
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	bd80      	pop	{r7, pc}
 80114ec:	2000099c 	.word	0x2000099c
 80114f0:	0802613c 	.word	0x0802613c
 80114f4:	08026148 	.word	0x08026148
 80114f8:	08026150 	.word	0x08026150
 80114fc:	20000988 	.word	0x20000988
 8011500:	08011489 	.word	0x08011489

08011504 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 8011504:	b580      	push	{r7, lr}
 8011506:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 8011508:	4b04      	ldr	r3, [pc, #16]	; (801151c <_Z25getCurrentMallocAllocatorv+0x18>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d101      	bne.n	8011514 <_Z25getCurrentMallocAllocatorv+0x10>
 8011510:	f000 f806 	bl	8011520 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 8011514:	4b01      	ldr	r3, [pc, #4]	; (801151c <_Z25getCurrentMallocAllocatorv+0x18>)
 8011516:	681b      	ldr	r3, [r3, #0]
}
 8011518:	4618      	mov	r0, r3
 801151a:	bd80      	pop	{r7, pc}
 801151c:	2000096c 	.word	0x2000096c

08011520 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 8011520:	b580      	push	{r7, lr}
 8011522:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 8011524:	f000 f810 	bl	8011548 <_Z22defaultMallocAllocatorv>
 8011528:	4603      	mov	r3, r0
 801152a:	4a02      	ldr	r2, [pc, #8]	; (8011534 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 801152c:	6013      	str	r3, [r2, #0]
}
 801152e:	bf00      	nop
 8011530:	bd80      	pop	{r7, pc}
 8011532:	bf00      	nop
 8011534:	2000096c 	.word	0x2000096c

08011538 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 8011538:	b580      	push	{r7, lr}
 801153a:	af00      	add	r7, sp, #0
 801153c:	4801      	ldr	r0, [pc, #4]	; (8011544 <__tcf_2+0xc>)
 801153e:	f000 f859 	bl	80115f4 <_ZN19TestMemoryAllocatorD1Ev>
 8011542:	bd80      	pop	{r7, pc}
 8011544:	200009a0 	.word	0x200009a0

08011548 <_Z22defaultMallocAllocatorv>:
{
 8011548:	b580      	push	{r7, lr}
 801154a:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 801154c:	4b13      	ldr	r3, [pc, #76]	; (801159c <_Z22defaultMallocAllocatorv+0x54>)
 801154e:	781b      	ldrb	r3, [r3, #0]
 8011550:	f3bf 8f5b 	dmb	ish
 8011554:	b2db      	uxtb	r3, r3
 8011556:	f003 0301 	and.w	r3, r3, #1
 801155a:	2b00      	cmp	r3, #0
 801155c:	bf0c      	ite	eq
 801155e:	2301      	moveq	r3, #1
 8011560:	2300      	movne	r3, #0
 8011562:	b2db      	uxtb	r3, r3
 8011564:	2b00      	cmp	r3, #0
 8011566:	d016      	beq.n	8011596 <_Z22defaultMallocAllocatorv+0x4e>
 8011568:	480c      	ldr	r0, [pc, #48]	; (801159c <_Z22defaultMallocAllocatorv+0x54>)
 801156a:	f00f fb5d 	bl	8020c28 <__cxa_guard_acquire>
 801156e:	4603      	mov	r3, r0
 8011570:	2b00      	cmp	r3, #0
 8011572:	bf14      	ite	ne
 8011574:	2301      	movne	r3, #1
 8011576:	2300      	moveq	r3, #0
 8011578:	b2db      	uxtb	r3, r3
 801157a:	2b00      	cmp	r3, #0
 801157c:	d00b      	beq.n	8011596 <_Z22defaultMallocAllocatorv+0x4e>
 801157e:	4b08      	ldr	r3, [pc, #32]	; (80115a0 <_Z22defaultMallocAllocatorv+0x58>)
 8011580:	4a08      	ldr	r2, [pc, #32]	; (80115a4 <_Z22defaultMallocAllocatorv+0x5c>)
 8011582:	4909      	ldr	r1, [pc, #36]	; (80115a8 <_Z22defaultMallocAllocatorv+0x60>)
 8011584:	4809      	ldr	r0, [pc, #36]	; (80115ac <_Z22defaultMallocAllocatorv+0x64>)
 8011586:	f000 f815 	bl	80115b4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 801158a:	4804      	ldr	r0, [pc, #16]	; (801159c <_Z22defaultMallocAllocatorv+0x54>)
 801158c:	f00f fb58 	bl	8020c40 <__cxa_guard_release>
 8011590:	4807      	ldr	r0, [pc, #28]	; (80115b0 <_Z22defaultMallocAllocatorv+0x68>)
 8011592:	f00f fb7c 	bl	8020c8e <atexit>
    return &allocator;
 8011596:	4b05      	ldr	r3, [pc, #20]	; (80115ac <_Z22defaultMallocAllocatorv+0x64>)
}
 8011598:	4618      	mov	r0, r3
 801159a:	bd80      	pop	{r7, pc}
 801159c:	200009b4 	.word	0x200009b4
 80115a0:	0802616c 	.word	0x0802616c
 80115a4:	08026174 	.word	0x08026174
 80115a8:	0802617c 	.word	0x0802617c
 80115ac:	200009a0 	.word	0x200009a0
 80115b0:	08011539 	.word	0x08011539

080115b4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 80115b4:	b480      	push	{r7}
 80115b6:	b085      	sub	sp, #20
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	60f8      	str	r0, [r7, #12]
 80115bc:	60b9      	str	r1, [r7, #8]
 80115be:	607a      	str	r2, [r7, #4]
 80115c0:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 80115c2:	4a0b      	ldr	r2, [pc, #44]	; (80115f0 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	601a      	str	r2, [r3, #0]
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	68ba      	ldr	r2, [r7, #8]
 80115cc:	605a      	str	r2, [r3, #4]
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	687a      	ldr	r2, [r7, #4]
 80115d2:	609a      	str	r2, [r3, #8]
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	683a      	ldr	r2, [r7, #0]
 80115d8:	60da      	str	r2, [r3, #12]
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	2200      	movs	r2, #0
 80115de:	741a      	strb	r2, [r3, #16]
{
}
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	4618      	mov	r0, r3
 80115e4:	3714      	adds	r7, #20
 80115e6:	46bd      	mov	sp, r7
 80115e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ec:	4770      	bx	lr
 80115ee:	bf00      	nop
 80115f0:	0802a184 	.word	0x0802a184

080115f4 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 80115f4:	b480      	push	{r7}
 80115f6:	b083      	sub	sp, #12
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	4a06      	ldr	r2, [pc, #24]	; (8011618 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2201      	movs	r2, #1
 8011606:	741a      	strb	r2, [r3, #16]
}
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	4618      	mov	r0, r3
 801160c:	370c      	adds	r7, #12
 801160e:	46bd      	mov	sp, r7
 8011610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011614:	4770      	bx	lr
 8011616:	bf00      	nop
 8011618:	0802a184 	.word	0x0802a184

0801161c <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 801161c:	b580      	push	{r7, lr}
 801161e:	b082      	sub	sp, #8
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
}
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f7ff ffe5 	bl	80115f4 <_ZN19TestMemoryAllocatorD1Ev>
 801162a:	2114      	movs	r1, #20
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f7fa f88d 	bl	800b74c <_ZdlPvj>
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	4618      	mov	r0, r3
 8011636:	3708      	adds	r7, #8
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}

0801163c <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 801163c:	b480      	push	{r7}
 801163e:	b083      	sub	sp, #12
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	7c1b      	ldrb	r3, [r3, #16]
}
 8011648:	4618      	mov	r0, r3
 801164a:	370c      	adds	r7, #12
 801164c:	46bd      	mov	sp, r7
 801164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011652:	4770      	bx	lr

08011654 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 8011654:	b590      	push	{r4, r7, lr}
 8011656:	b083      	sub	sp, #12
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	3310      	adds	r3, #16
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	4798      	blx	r3
 801166a:	4604      	mov	r4, r0
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	3310      	adds	r3, #16
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	6838      	ldr	r0, [r7, #0]
 8011676:	4798      	blx	r3
 8011678:	4603      	mov	r3, r0
 801167a:	4619      	mov	r1, r3
 801167c:	4620      	mov	r0, r4
 801167e:	f7fc fa51 	bl	800db24 <_ZN12SimpleString6StrCmpEPKcS1_>
 8011682:	4603      	mov	r3, r0
 8011684:	2b00      	cmp	r3, #0
 8011686:	bf0c      	ite	eq
 8011688:	2301      	moveq	r3, #1
 801168a:	2300      	movne	r3, #0
 801168c:	b2db      	uxtb	r3, r3
}
 801168e:	4618      	mov	r0, r3
 8011690:	370c      	adds	r7, #12
 8011692:	46bd      	mov	sp, r7
 8011694:	bd90      	pop	{r4, r7, pc}
	...

08011698 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 8011698:	b590      	push	{r4, r7, lr}
 801169a:	b083      	sub	sp, #12
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
 80116a0:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	3308      	adds	r3, #8
 80116a8:	681c      	ldr	r4, [r3, #0]
 80116aa:	2301      	movs	r3, #1
 80116ac:	4a04      	ldr	r2, [pc, #16]	; (80116c0 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 80116ae:	6839      	ldr	r1, [r7, #0]
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	47a0      	blx	r4
 80116b4:	4603      	mov	r3, r0
}
 80116b6:	4618      	mov	r0, r3
 80116b8:	370c      	adds	r7, #12
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd90      	pop	{r4, r7, pc}
 80116be:	bf00      	nop
 80116c0:	08026198 	.word	0x08026198

080116c4 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 80116c4:	b590      	push	{r4, r7, lr}
 80116c6:	b085      	sub	sp, #20
 80116c8:	af02      	add	r7, sp, #8
 80116ca:	6078      	str	r0, [r7, #4]
 80116cc:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	330c      	adds	r3, #12
 80116d4:	681c      	ldr	r4, [r3, #0]
 80116d6:	2301      	movs	r3, #1
 80116d8:	9300      	str	r3, [sp, #0]
 80116da:	4b04      	ldr	r3, [pc, #16]	; (80116ec <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 80116dc:	2200      	movs	r2, #0
 80116de:	6839      	ldr	r1, [r7, #0]
 80116e0:	6878      	ldr	r0, [r7, #4]
 80116e2:	47a0      	blx	r4
}
 80116e4:	bf00      	nop
 80116e6:	370c      	adds	r7, #12
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd90      	pop	{r4, r7, pc}
 80116ec:	08026198 	.word	0x08026198

080116f0 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b084      	sub	sp, #16
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	60f8      	str	r0, [r7, #12]
 80116f8:	60b9      	str	r1, [r7, #8]
 80116fa:	607a      	str	r2, [r7, #4]
 80116fc:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 80116fe:	68b8      	ldr	r0, [r7, #8]
 8011700:	f7ff fe2a 	bl	8011358 <_ZL13checkedMallocj>
 8011704:	4603      	mov	r3, r0
}
 8011706:	4618      	mov	r0, r3
 8011708:	3710      	adds	r7, #16
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
	...

08011710 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b084      	sub	sp, #16
 8011714:	af00      	add	r7, sp, #0
 8011716:	60f8      	str	r0, [r7, #12]
 8011718:	60b9      	str	r1, [r7, #8]
 801171a:	607a      	str	r2, [r7, #4]
 801171c:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 801171e:	4b04      	ldr	r3, [pc, #16]	; (8011730 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	68b8      	ldr	r0, [r7, #8]
 8011724:	4798      	blx	r3
}
 8011726:	bf00      	nop
 8011728:	3710      	adds	r7, #16
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}
 801172e:	bf00      	nop
 8011730:	200000d0 	.word	0x200000d0

08011734 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 8011734:	b480      	push	{r7}
 8011736:	b083      	sub	sp, #12
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
    return name_;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	685b      	ldr	r3, [r3, #4]
}
 8011740:	4618      	mov	r0, r3
 8011742:	370c      	adds	r7, #12
 8011744:	46bd      	mov	sp, r7
 8011746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174a:	4770      	bx	lr

0801174c <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 801174c:	b480      	push	{r7}
 801174e:	b083      	sub	sp, #12
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	689b      	ldr	r3, [r3, #8]
}
 8011758:	4618      	mov	r0, r3
 801175a:	370c      	adds	r7, #12
 801175c:	46bd      	mov	sp, r7
 801175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011762:	4770      	bx	lr

08011764 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 8011764:	b480      	push	{r7}
 8011766:	b083      	sub	sp, #12
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
    return free_name_;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	68db      	ldr	r3, [r3, #12]
}
 8011770:	4618      	mov	r0, r3
 8011772:	370c      	adds	r7, #12
 8011774:	46bd      	mov	sp, r7
 8011776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177a:	4770      	bx	lr

0801177c <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 801177c:	b480      	push	{r7}
 801177e:	b083      	sub	sp, #12
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
    return this;
 8011784:	687b      	ldr	r3, [r7, #4]
}
 8011786:	4618      	mov	r0, r3
 8011788:	370c      	adds	r7, #12
 801178a:	46bd      	mov	sp, r7
 801178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011790:	4770      	bx	lr
	...

08011794 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 8011794:	b580      	push	{r7, lr}
 8011796:	b082      	sub	sp, #8
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
 801179c:	4a05      	ldr	r2, [pc, #20]	; (80117b4 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	601a      	str	r2, [r3, #0]
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	4618      	mov	r0, r3
 80117a6:	f7ff ff25 	bl	80115f4 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	4618      	mov	r0, r3
 80117ae:	3708      	adds	r7, #8
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}
 80117b4:	0802a150 	.word	0x0802a150

080117b8 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b082      	sub	sp, #8
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
}
 80117c0:	6878      	ldr	r0, [r7, #4]
 80117c2:	f7ff ffe7 	bl	8011794 <_ZN20NullUnknownAllocatorD1Ev>
 80117c6:	2114      	movs	r1, #20
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f7f9 ffbf 	bl	800b74c <_ZdlPvj>
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	4618      	mov	r0, r3
 80117d2:	3708      	adds	r7, #8
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}

080117d8 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 80117d8:	b480      	push	{r7}
 80117da:	b085      	sub	sp, #20
 80117dc:	af00      	add	r7, sp, #0
 80117de:	60f8      	str	r0, [r7, #12]
 80117e0:	60b9      	str	r1, [r7, #8]
 80117e2:	607a      	str	r2, [r7, #4]
 80117e4:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 80117e6:	2300      	movs	r3, #0
}
 80117e8:	4618      	mov	r0, r3
 80117ea:	3714      	adds	r7, #20
 80117ec:	46bd      	mov	sp, r7
 80117ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f2:	4770      	bx	lr

080117f4 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 80117f4:	b480      	push	{r7}
 80117f6:	b085      	sub	sp, #20
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	60f8      	str	r0, [r7, #12]
 80117fc:	60b9      	str	r1, [r7, #8]
 80117fe:	607a      	str	r2, [r7, #4]
 8011800:	603b      	str	r3, [r7, #0]
}
 8011802:	bf00      	nop
 8011804:	3714      	adds	r7, #20
 8011806:	46bd      	mov	sp, r7
 8011808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180c:	4770      	bx	lr
	...

08011810 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 8011810:	b580      	push	{r7, lr}
 8011812:	b082      	sub	sp, #8
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	4b06      	ldr	r3, [pc, #24]	; (8011834 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 801181c:	4a05      	ldr	r2, [pc, #20]	; (8011834 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 801181e:	4906      	ldr	r1, [pc, #24]	; (8011838 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 8011820:	f7ff fec8 	bl	80115b4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8011824:	4a05      	ldr	r2, [pc, #20]	; (801183c <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	601a      	str	r2, [r3, #0]
{
}
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	4618      	mov	r0, r3
 801182e:	3708      	adds	r7, #8
 8011830:	46bd      	mov	sp, r7
 8011832:	bd80      	pop	{r7, pc}
 8011834:	080261cc 	.word	0x080261cc
 8011838:	080261d4 	.word	0x080261d4
 801183c:	0802a150 	.word	0x0802a150

08011840 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 8011840:	b580      	push	{r7, lr}
 8011842:	af00      	add	r7, sp, #0
 8011844:	4801      	ldr	r0, [pc, #4]	; (801184c <__tcf_3+0xc>)
 8011846:	f7ff ffa5 	bl	8011794 <_ZN20NullUnknownAllocatorD1Ev>
 801184a:	bd80      	pop	{r7, pc}
 801184c:	200009b8 	.word	0x200009b8

08011850 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 8011850:	b580      	push	{r7, lr}
 8011852:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 8011854:	4b12      	ldr	r3, [pc, #72]	; (80118a0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 8011856:	781b      	ldrb	r3, [r3, #0]
 8011858:	f3bf 8f5b 	dmb	ish
 801185c:	b2db      	uxtb	r3, r3
 801185e:	f003 0301 	and.w	r3, r3, #1
 8011862:	2b00      	cmp	r3, #0
 8011864:	bf0c      	ite	eq
 8011866:	2301      	moveq	r3, #1
 8011868:	2300      	movne	r3, #0
 801186a:	b2db      	uxtb	r3, r3
 801186c:	2b00      	cmp	r3, #0
 801186e:	d013      	beq.n	8011898 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 8011870:	480b      	ldr	r0, [pc, #44]	; (80118a0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 8011872:	f00f f9d9 	bl	8020c28 <__cxa_guard_acquire>
 8011876:	4603      	mov	r3, r0
 8011878:	2b00      	cmp	r3, #0
 801187a:	bf14      	ite	ne
 801187c:	2301      	movne	r3, #1
 801187e:	2300      	moveq	r3, #0
 8011880:	b2db      	uxtb	r3, r3
 8011882:	2b00      	cmp	r3, #0
 8011884:	d008      	beq.n	8011898 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 8011886:	4807      	ldr	r0, [pc, #28]	; (80118a4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 8011888:	f7ff ffc2 	bl	8011810 <_ZN20NullUnknownAllocatorC1Ev>
 801188c:	4804      	ldr	r0, [pc, #16]	; (80118a0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 801188e:	f00f f9d7 	bl	8020c40 <__cxa_guard_release>
 8011892:	4805      	ldr	r0, [pc, #20]	; (80118a8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 8011894:	f00f f9fb 	bl	8020c8e <atexit>
    return &allocator;
 8011898:	4b02      	ldr	r3, [pc, #8]	; (80118a4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 801189a:	4618      	mov	r0, r3
 801189c:	bd80      	pop	{r7, pc}
 801189e:	bf00      	nop
 80118a0:	200009cc 	.word	0x200009cc
 80118a4:	200009b8 	.word	0x200009b8
 80118a8:	08011841 	.word	0x08011841

080118ac <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 80118ac:	b480      	push	{r7}
 80118ae:	b083      	sub	sp, #12
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
        return testCount_;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	689b      	ldr	r3, [r3, #8]
    }
 80118b8:	4618      	mov	r0, r3
 80118ba:	370c      	adds	r7, #12
 80118bc:	46bd      	mov	sp, r7
 80118be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c2:	4770      	bx	lr

080118c4 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 80118c4:	b480      	push	{r7}
 80118c6:	b083      	sub	sp, #12
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	699b      	ldr	r3, [r3, #24]
    }
 80118d0:	4618      	mov	r0, r3
 80118d2:	370c      	adds	r7, #12
 80118d4:	46bd      	mov	sp, r7
 80118d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118da:	4770      	bx	lr

080118dc <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 80118e0:	4b05      	ldr	r3, [pc, #20]	; (80118f8 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 80118e2:	781b      	ldrb	r3, [r3, #0]
 80118e4:	2b02      	cmp	r3, #2
 80118e6:	d103      	bne.n	80118f0 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 80118e8:	f004 fa4a 	bl	8015d80 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 80118ec:	4603      	mov	r3, r0
 80118ee:	e001      	b.n	80118f4 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 80118f0:	4b01      	ldr	r3, [pc, #4]	; (80118f8 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 80118f2:	781b      	ldrb	r3, [r3, #0]
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	bd80      	pop	{r7, pc}
 80118f8:	20000088 	.word	0x20000088

080118fc <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 80118fc:	b480      	push	{r7}
 80118fe:	b083      	sub	sp, #12
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 8011904:	4a0a      	ldr	r2, [pc, #40]	; (8011930 <_ZN10TestOutputC1Ev+0x34>)
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	601a      	str	r2, [r3, #0]
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	2200      	movs	r2, #0
 801190e:	605a      	str	r2, [r3, #4]
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	2200      	movs	r2, #0
 8011914:	721a      	strb	r2, [r3, #8]
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	2200      	movs	r2, #0
 801191a:	725a      	strb	r2, [r3, #9]
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	4a05      	ldr	r2, [pc, #20]	; (8011934 <_ZN10TestOutputC1Ev+0x38>)
 8011920:	60da      	str	r2, [r3, #12]
{
}
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	4618      	mov	r0, r3
 8011926:	370c      	adds	r7, #12
 8011928:	46bd      	mov	sp, r7
 801192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192e:	4770      	bx	lr
 8011930:	0802a288 	.word	0x0802a288
 8011934:	080265d4 	.word	0x080265d4

08011938 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 8011938:	b480      	push	{r7}
 801193a:	b083      	sub	sp, #12
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
 8011940:	4a04      	ldr	r2, [pc, #16]	; (8011954 <_ZN10TestOutputD1Ev+0x1c>)
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	601a      	str	r2, [r3, #0]
{
}
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	4618      	mov	r0, r3
 801194a:	370c      	adds	r7, #12
 801194c:	46bd      	mov	sp, r7
 801194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011952:	4770      	bx	lr
 8011954:	0802a288 	.word	0x0802a288

08011958 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 8011958:	b480      	push	{r7}
 801195a:	b083      	sub	sp, #12
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
 8011960:	460b      	mov	r3, r1
 8011962:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	78fa      	ldrb	r2, [r7, #3]
 8011968:	721a      	strb	r2, [r3, #8]
}
 801196a:	bf00      	nop
 801196c:	370c      	adds	r7, #12
 801196e:	46bd      	mov	sp, r7
 8011970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011974:	4770      	bx	lr

08011976 <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 8011976:	b480      	push	{r7}
 8011978:	b083      	sub	sp, #12
 801197a:	af00      	add	r7, sp, #0
 801197c:	6078      	str	r0, [r7, #4]
    color_ = true;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	2201      	movs	r2, #1
 8011982:	725a      	strb	r2, [r3, #9]
}
 8011984:	bf00      	nop
 8011986:	370c      	adds	r7, #12
 8011988:	46bd      	mov	sp, r7
 801198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198e:	4770      	bx	lr

08011990 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b082      	sub	sp, #8
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
 8011998:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	3328      	adds	r3, #40	; 0x28
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	6839      	ldr	r1, [r7, #0]
 80119a4:	6878      	ldr	r0, [r7, #4]
 80119a6:	4798      	blx	r3
}
 80119a8:	bf00      	nop
 80119aa:	3708      	adds	r7, #8
 80119ac:	46bd      	mov	sp, r7
 80119ae:	bd80      	pop	{r7, pc}

080119b0 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 80119b0:	b590      	push	{r4, r7, lr}
 80119b2:	b085      	sub	sp, #20
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	332c      	adds	r3, #44	; 0x2c
 80119c0:	681c      	ldr	r4, [r3, #0]
 80119c2:	f107 0308 	add.w	r3, r7, #8
 80119c6:	6839      	ldr	r1, [r7, #0]
 80119c8:	4618      	mov	r0, r3
 80119ca:	f7fd f8ff 	bl	800ebcc <_Z10StringFroml>
 80119ce:	f107 0308 	add.w	r3, r7, #8
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7fc fdf4 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 80119d8:	4603      	mov	r3, r0
 80119da:	4619      	mov	r1, r3
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	47a0      	blx	r4
 80119e0:	f107 0308 	add.w	r3, r7, #8
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7fc fe18 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 80119ea:	bf00      	nop
 80119ec:	3714      	adds	r7, #20
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd90      	pop	{r4, r7, pc}

080119f2 <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 80119f2:	b590      	push	{r4, r7, lr}
 80119f4:	b085      	sub	sp, #20
 80119f6:	af00      	add	r7, sp, #0
 80119f8:	6078      	str	r0, [r7, #4]
 80119fa:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	332c      	adds	r3, #44	; 0x2c
 8011a02:	681c      	ldr	r4, [r3, #0]
 8011a04:	f107 0308 	add.w	r3, r7, #8
 8011a08:	6839      	ldr	r1, [r7, #0]
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f7fd fb34 	bl	800f078 <_Z10StringFromj>
 8011a10:	f107 0308 	add.w	r3, r7, #8
 8011a14:	4618      	mov	r0, r3
 8011a16:	f7fc fdd3 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	4619      	mov	r1, r3
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	47a0      	blx	r4
 8011a22:	f107 0308 	add.w	r3, r7, #8
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7fc fdf7 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8011a2c:	bf00      	nop
 8011a2e:	3714      	adds	r7, #20
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bd90      	pop	{r4, r7, pc}

08011a34 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 8011a34:	b590      	push	{r4, r7, lr}
 8011a36:	b087      	sub	sp, #28
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	60f8      	str	r0, [r7, #12]
 8011a3c:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	332c      	adds	r3, #44	; 0x2c
 8011a46:	681c      	ldr	r4, [r3, #0]
 8011a48:	f107 0310 	add.w	r3, r7, #16
 8011a4c:	2106      	movs	r1, #6
 8011a4e:	ed97 0b00 	vldr	d0, [r7]
 8011a52:	4618      	mov	r0, r3
 8011a54:	f7fd faa6 	bl	800efa4 <_Z10StringFromdi>
 8011a58:	f107 0310 	add.w	r3, r7, #16
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7fc fdaf 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 8011a62:	4603      	mov	r3, r0
 8011a64:	4619      	mov	r1, r3
 8011a66:	68f8      	ldr	r0, [r7, #12]
 8011a68:	47a0      	blx	r4
 8011a6a:	f107 0310 	add.w	r3, r7, #16
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7fc fdd3 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8011a74:	bf00      	nop
 8011a76:	371c      	adds	r7, #28
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd90      	pop	{r4, r7, pc}

08011a7c <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b082      	sub	sp, #8
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	6039      	str	r1, [r7, #0]
    p.print(s);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	332c      	adds	r3, #44	; 0x2c
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	6839      	ldr	r1, [r7, #0]
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	4798      	blx	r3
    return p;
 8011a94:	687b      	ldr	r3, [r7, #4]
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3708      	adds	r7, #8
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}
	...

08011aa0 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8011aa0:	b590      	push	{r4, r7, lr}
 8011aa2:	b085      	sub	sp, #20
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	7a1b      	ldrb	r3, [r3, #8]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d01a      	beq.n	8011ae8 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	332c      	adds	r3, #44	; 0x2c
 8011ab8:	681c      	ldr	r4, [r3, #0]
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	3314      	adds	r3, #20
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	f107 0208 	add.w	r2, r7, #8
 8011ac6:	6839      	ldr	r1, [r7, #0]
 8011ac8:	4610      	mov	r0, r2
 8011aca:	4798      	blx	r3
 8011acc:	f107 0308 	add.w	r3, r7, #8
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f7fc fd75 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	4619      	mov	r1, r3
 8011ada:	6878      	ldr	r0, [r7, #4]
 8011adc:	47a0      	blx	r4
 8011ade:	f107 0308 	add.w	r3, r7, #8
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7fc fd99 	bl	800e61a <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	3318      	adds	r3, #24
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	6838      	ldr	r0, [r7, #0]
 8011af2:	4798      	blx	r3
 8011af4:	4603      	mov	r3, r0
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d007      	beq.n	8011b0a <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	3344      	adds	r3, #68	; 0x44
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	4907      	ldr	r1, [pc, #28]	; (8011b20 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 8011b08:	e006      	b.n	8011b18 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	3344      	adds	r3, #68	; 0x44
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	4904      	ldr	r1, [pc, #16]	; (8011b24 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 8011b14:	6878      	ldr	r0, [r7, #4]
 8011b16:	4798      	blx	r3
}
 8011b18:	bf00      	nop
 8011b1a:	3714      	adds	r7, #20
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bd90      	pop	{r4, r7, pc}
 8011b20:	080265d4 	.word	0x080265d4
 8011b24:	080265d8 	.word	0x080265d8

08011b28 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 8011b28:	b590      	push	{r4, r7, lr}
 8011b2a:	b083      	sub	sp, #12
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	7a1b      	ldrb	r3, [r3, #8]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d019      	beq.n	8011b6e <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	332c      	adds	r3, #44	; 0x2c
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	4910      	ldr	r1, [pc, #64]	; (8011b84 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	3334      	adds	r3, #52	; 0x34
 8011b4e:	681c      	ldr	r4, [r3, #0]
 8011b50:	6838      	ldr	r0, [r7, #0]
 8011b52:	f002 f845 	bl	8013be0 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8011b56:	4603      	mov	r3, r0
 8011b58:	4619      	mov	r1, r3
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	47a0      	blx	r4
        print(" ms\n");
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	332c      	adds	r3, #44	; 0x2c
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	4908      	ldr	r1, [pc, #32]	; (8011b88 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 8011b6c:	e005      	b.n	8011b7a <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	3358      	adds	r3, #88	; 0x58
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	4798      	blx	r3
}
 8011b7a:	bf00      	nop
 8011b7c:	370c      	adds	r7, #12
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd90      	pop	{r4, r7, pc}
 8011b82:	bf00      	nop
 8011b84:	080265dc 	.word	0x080265dc
 8011b88:	080265e0 	.word	0x080265e0

08011b8c <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b082      	sub	sp, #8
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	332c      	adds	r3, #44	; 0x2c
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	687a      	ldr	r2, [r7, #4]
 8011b9e:	68d2      	ldr	r2, [r2, #12]
 8011ba0:	4611      	mov	r1, r2
 8011ba2:	6878      	ldr	r0, [r7, #4]
 8011ba4:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	685b      	ldr	r3, [r3, #4]
 8011baa:	1c5a      	adds	r2, r3, #1
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	605a      	str	r2, [r3, #4]
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	685a      	ldr	r2, [r3, #4]
 8011bb4:	4b0d      	ldr	r3, [pc, #52]	; (8011bec <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 8011bb6:	fb83 1302 	smull	r1, r3, r3, r2
 8011bba:	1119      	asrs	r1, r3, #4
 8011bbc:	17d3      	asrs	r3, r2, #31
 8011bbe:	1acb      	subs	r3, r1, r3
 8011bc0:	2132      	movs	r1, #50	; 0x32
 8011bc2:	fb01 f303 	mul.w	r3, r1, r3
 8011bc6:	1ad3      	subs	r3, r2, r3
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	bf0c      	ite	eq
 8011bcc:	2301      	moveq	r3, #1
 8011bce:	2300      	movne	r3, #0
 8011bd0:	b2db      	uxtb	r3, r3
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d006      	beq.n	8011be4 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	332c      	adds	r3, #44	; 0x2c
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	4904      	ldr	r1, [pc, #16]	; (8011bf0 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	4798      	blx	r3
}
 8011be4:	bf00      	nop
 8011be6:	3708      	adds	r7, #8
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}
 8011bec:	51eb851f 	.word	0x51eb851f
 8011bf0:	080265e8 	.word	0x080265e8

08011bf4 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 8011bf4:	b480      	push	{r7}
 8011bf6:	b083      	sub	sp, #12
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
 8011bfc:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	683a      	ldr	r2, [r7, #0]
 8011c02:	60da      	str	r2, [r3, #12]
}
 8011c04:	bf00      	nop
 8011c06:	370c      	adds	r7, #12
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0e:	4770      	bx	lr

08011c10 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 8011c10:	b480      	push	{r7}
 8011c12:	b083      	sub	sp, #12
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
}
 8011c18:	bf00      	nop
 8011c1a:	370c      	adds	r7, #12
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c22:	4770      	bx	lr

08011c24 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8011c24:	b480      	push	{r7}
 8011c26:	b083      	sub	sp, #12
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	6039      	str	r1, [r7, #0]
}
 8011c2e:	bf00      	nop
 8011c30:	370c      	adds	r7, #12
 8011c32:	46bd      	mov	sp, r7
 8011c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c38:	4770      	bx	lr

08011c3a <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 8011c3a:	b480      	push	{r7}
 8011c3c:	b083      	sub	sp, #12
 8011c3e:	af00      	add	r7, sp, #0
 8011c40:	6078      	str	r0, [r7, #4]
 8011c42:	6039      	str	r1, [r7, #0]
}
 8011c44:	bf00      	nop
 8011c46:	370c      	adds	r7, #12
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4e:	4770      	bx	lr

08011c50 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 8011c50:	b590      	push	{r4, r7, lr}
 8011c52:	b085      	sub	sp, #20
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
 8011c58:	6039      	str	r1, [r7, #0]
    print("\n");
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	332c      	adds	r3, #44	; 0x2c
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	496f      	ldr	r1, [pc, #444]	; (8011e20 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 8011c68:	6838      	ldr	r0, [r7, #0]
 8011c6a:	f7f8 f83d 	bl	8009ce8 <_ZNK10TestResult9isFailureEv>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 8011c72:	6838      	ldr	r0, [r7, #0]
 8011c74:	f7f8 f82c 	bl	8009cd0 <_ZNK10TestResult15getFailureCountEv>
 8011c78:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 8011c7a:	7bfb      	ldrb	r3, [r7, #15]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d02b      	beq.n	8011cd8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	7a5b      	ldrb	r3, [r3, #9]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d006      	beq.n	8011c96 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	332c      	adds	r3, #44	; 0x2c
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	4964      	ldr	r1, [pc, #400]	; (8011e24 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 8011c92:	6878      	ldr	r0, [r7, #4]
 8011c94:	4798      	blx	r3
        }
        print("Errors (");
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	332c      	adds	r3, #44	; 0x2c
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	4962      	ldr	r1, [pc, #392]	; (8011e28 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 8011ca0:	6878      	ldr	r0, [r7, #4]
 8011ca2:	4798      	blx	r3
        if (failureCount > 0) {
 8011ca4:	68bb      	ldr	r3, [r7, #8]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d00e      	beq.n	8011cc8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	3334      	adds	r3, #52	; 0x34
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	68b9      	ldr	r1, [r7, #8]
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	4798      	blx	r3
            print(" failures, ");
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	332c      	adds	r3, #44	; 0x2c
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	495a      	ldr	r1, [pc, #360]	; (8011e2c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 8011cc2:	6878      	ldr	r0, [r7, #4]
 8011cc4:	4798      	blx	r3
 8011cc6:	e019      	b.n	8011cfc <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	332c      	adds	r3, #44	; 0x2c
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	4957      	ldr	r1, [pc, #348]	; (8011e30 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	4798      	blx	r3
 8011cd6:	e011      	b.n	8011cfc <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	7a5b      	ldrb	r3, [r3, #9]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d006      	beq.n	8011cee <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	332c      	adds	r3, #44	; 0x2c
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	4952      	ldr	r1, [pc, #328]	; (8011e34 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 8011cea:	6878      	ldr	r0, [r7, #4]
 8011cec:	4798      	blx	r3
        }
        print("OK (");
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	332c      	adds	r3, #44	; 0x2c
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	4950      	ldr	r1, [pc, #320]	; (8011e38 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	4798      	blx	r3
    }
    print(result.getTestCount());
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	3334      	adds	r3, #52	; 0x34
 8011d02:	681c      	ldr	r4, [r3, #0]
 8011d04:	6838      	ldr	r0, [r7, #0]
 8011d06:	f7ff fdd1 	bl	80118ac <_ZNK10TestResult12getTestCountEv>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	47a0      	blx	r4
    print(" tests, ");
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	332c      	adds	r3, #44	; 0x2c
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	4948      	ldr	r1, [pc, #288]	; (8011e3c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	4798      	blx	r3
    print(result.getRunCount());
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	3334      	adds	r3, #52	; 0x34
 8011d26:	681c      	ldr	r4, [r3, #0]
 8011d28:	6838      	ldr	r0, [r7, #0]
 8011d2a:	f7f7 ffb9 	bl	8009ca0 <_ZNK10TestResult11getRunCountEv>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	4619      	mov	r1, r3
 8011d32:	6878      	ldr	r0, [r7, #4]
 8011d34:	47a0      	blx	r4
    print(" ran, ");
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	332c      	adds	r3, #44	; 0x2c
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	4940      	ldr	r1, [pc, #256]	; (8011e40 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 8011d40:	6878      	ldr	r0, [r7, #4]
 8011d42:	4798      	blx	r3
    print(result.getCheckCount());
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	3334      	adds	r3, #52	; 0x34
 8011d4a:	681c      	ldr	r4, [r3, #0]
 8011d4c:	6838      	ldr	r0, [r7, #0]
 8011d4e:	f7f8 fc13 	bl	800a578 <_ZNK10TestResult13getCheckCountEv>
 8011d52:	4603      	mov	r3, r0
 8011d54:	4619      	mov	r1, r3
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	47a0      	blx	r4
    print(" checks, ");
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	332c      	adds	r3, #44	; 0x2c
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	4938      	ldr	r1, [pc, #224]	; (8011e44 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 8011d64:	6878      	ldr	r0, [r7, #4]
 8011d66:	4798      	blx	r3
    print(result.getIgnoredCount());
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	3334      	adds	r3, #52	; 0x34
 8011d6e:	681c      	ldr	r4, [r3, #0]
 8011d70:	6838      	ldr	r0, [r7, #0]
 8011d72:	f7f7 ffa1 	bl	8009cb8 <_ZNK10TestResult15getIgnoredCountEv>
 8011d76:	4603      	mov	r3, r0
 8011d78:	4619      	mov	r1, r3
 8011d7a:	6878      	ldr	r0, [r7, #4]
 8011d7c:	47a0      	blx	r4
    print(" ignored, ");
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	332c      	adds	r3, #44	; 0x2c
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	4930      	ldr	r1, [pc, #192]	; (8011e48 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 8011d88:	6878      	ldr	r0, [r7, #4]
 8011d8a:	4798      	blx	r3
    print(result.getFilteredOutCount());
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	3334      	adds	r3, #52	; 0x34
 8011d92:	681c      	ldr	r4, [r3, #0]
 8011d94:	6838      	ldr	r0, [r7, #0]
 8011d96:	f7ff fd95 	bl	80118c4 <_ZNK10TestResult19getFilteredOutCountEv>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	4619      	mov	r1, r3
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	47a0      	blx	r4
    print(" filtered out, ");
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	332c      	adds	r3, #44	; 0x2c
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	4928      	ldr	r1, [pc, #160]	; (8011e4c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 8011dac:	6878      	ldr	r0, [r7, #4]
 8011dae:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	3334      	adds	r3, #52	; 0x34
 8011db6:	681c      	ldr	r4, [r3, #0]
 8011db8:	6838      	ldr	r0, [r7, #0]
 8011dba:	f001 ff05 	bl	8013bc8 <_ZNK10TestResult21getTotalExecutionTimeEv>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	4619      	mov	r1, r3
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	47a0      	blx	r4
    print(" ms)");
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	332c      	adds	r3, #44	; 0x2c
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	4920      	ldr	r1, [pc, #128]	; (8011e50 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	4798      	blx	r3
    if (color_) {
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	7a5b      	ldrb	r3, [r3, #9]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d006      	beq.n	8011dea <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	332c      	adds	r3, #44	; 0x2c
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	491b      	ldr	r1, [pc, #108]	; (8011e54 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 8011de6:	6878      	ldr	r0, [r7, #4]
 8011de8:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 8011dea:	7bfb      	ldrb	r3, [r7, #15]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d009      	beq.n	8011e04 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d106      	bne.n	8011e04 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	332c      	adds	r3, #44	; 0x2c
 8011dfc:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 8011dfe:	4916      	ldr	r1, [pc, #88]	; (8011e58 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	4798      	blx	r3
    }
    print("\n\n");
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	332c      	adds	r3, #44	; 0x2c
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	4913      	ldr	r1, [pc, #76]	; (8011e5c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 8011e0e:	6878      	ldr	r0, [r7, #4]
 8011e10:	4798      	blx	r3

    dotCount_ = 0;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2200      	movs	r2, #0
 8011e16:	605a      	str	r2, [r3, #4]
}
 8011e18:	bf00      	nop
 8011e1a:	3714      	adds	r7, #20
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd90      	pop	{r4, r7, pc}
 8011e20:	080265e8 	.word	0x080265e8
 8011e24:	080265ec 	.word	0x080265ec
 8011e28:	080265f4 	.word	0x080265f4
 8011e2c:	08026600 	.word	0x08026600
 8011e30:	0802660c 	.word	0x0802660c
 8011e34:	0802661c 	.word	0x0802661c
 8011e38:	08026624 	.word	0x08026624
 8011e3c:	0802662c 	.word	0x0802662c
 8011e40:	08026638 	.word	0x08026638
 8011e44:	08026640 	.word	0x08026640
 8011e48:	0802664c 	.word	0x0802664c
 8011e4c:	08026658 	.word	0x08026658
 8011e50:	08026668 	.word	0x08026668
 8011e54:	08026670 	.word	0x08026670
 8011e58:	08026674 	.word	0x08026674
 8011e5c:	08026718 	.word	0x08026718

08011e60 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b084      	sub	sp, #16
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	60f8      	str	r0, [r7, #12]
 8011e68:	60b9      	str	r1, [r7, #8]
 8011e6a:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2b01      	cmp	r3, #1
 8011e70:	d922      	bls.n	8011eb8 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	332c      	adds	r3, #44	; 0x2c
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	4911      	ldr	r1, [pc, #68]	; (8011ec0 <_ZN10TestOutput12printTestRunEjj+0x60>)
 8011e7c:	68f8      	ldr	r0, [r7, #12]
 8011e7e:	4798      	blx	r3
        print(number);
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	3334      	adds	r3, #52	; 0x34
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	68b9      	ldr	r1, [r7, #8]
 8011e8a:	68f8      	ldr	r0, [r7, #12]
 8011e8c:	4798      	blx	r3
        print(" of ");
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	332c      	adds	r3, #44	; 0x2c
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	490b      	ldr	r1, [pc, #44]	; (8011ec4 <_ZN10TestOutput12printTestRunEjj+0x64>)
 8011e98:	68f8      	ldr	r0, [r7, #12]
 8011e9a:	4798      	blx	r3
        print(total);
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	3334      	adds	r3, #52	; 0x34
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	6879      	ldr	r1, [r7, #4]
 8011ea6:	68f8      	ldr	r0, [r7, #12]
 8011ea8:	4798      	blx	r3
        print("\n");
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	332c      	adds	r3, #44	; 0x2c
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	4905      	ldr	r1, [pc, #20]	; (8011ec8 <_ZN10TestOutput12printTestRunEjj+0x68>)
 8011eb4:	68f8      	ldr	r0, [r7, #12]
 8011eb6:	4798      	blx	r3
    }
}
 8011eb8:	bf00      	nop
 8011eba:	3710      	adds	r7, #16
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}
 8011ec0:	0802671c 	.word	0x0802671c
 8011ec4:	08026728 	.word	0x08026728
 8011ec8:	080265e8 	.word	0x080265e8

08011ecc <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b084      	sub	sp, #16
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
 8011ed4:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 8011ed6:	6838      	ldr	r0, [r7, #0]
 8011ed8:	f7fd ffa1 	bl	800fe1e <_ZNK11TestFailure17isOutsideTestFileEv>
 8011edc:	4603      	mov	r3, r0
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d105      	bne.n	8011eee <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 8011ee2:	6838      	ldr	r0, [r7, #0]
 8011ee4:	f7fd ffad 	bl	800fe42 <_ZNK11TestFailure18isInHelperFunctionEv>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d001      	beq.n	8011ef2 <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 8011eee:	2301      	movs	r3, #1
 8011ef0:	e000      	b.n	8011ef4 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d004      	beq.n	8011f02 <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 8011ef8:	6839      	ldr	r1, [r7, #0]
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f000 f81d 	bl	8011f3a <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 8011f00:	e003      	b.n	8011f0a <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 8011f02:	6839      	ldr	r1, [r7, #0]
 8011f04:	6878      	ldr	r0, [r7, #4]
 8011f06:	f000 f86b 	bl	8011fe0 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	3318      	adds	r3, #24
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	f107 0208 	add.w	r2, r7, #8
 8011f16:	6839      	ldr	r1, [r7, #0]
 8011f18:	4610      	mov	r0, r2
 8011f1a:	4798      	blx	r3
 8011f1c:	f107 0308 	add.w	r3, r7, #8
 8011f20:	4619      	mov	r1, r3
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f000 f8b2 	bl	801208c <_ZN10TestOutput19printFailureMessageE12SimpleString>
 8011f28:	f107 0308 	add.w	r3, r7, #8
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f7fc fb74 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8011f32:	bf00      	nop
 8011f34:	3710      	adds	r7, #16
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd80      	pop	{r7, pc}

08011f3a <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 8011f3a:	b580      	push	{r7, lr}
 8011f3c:	b088      	sub	sp, #32
 8011f3e:	af00      	add	r7, sp, #0
 8011f40:	6078      	str	r0, [r7, #4]
 8011f42:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	331c      	adds	r3, #28
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	f107 0208 	add.w	r2, r7, #8
 8011f50:	6839      	ldr	r1, [r7, #0]
 8011f52:	4610      	mov	r0, r2
 8011f54:	4798      	blx	r3
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	3320      	adds	r3, #32
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	6838      	ldr	r0, [r7, #0]
 8011f60:	4798      	blx	r3
 8011f62:	4602      	mov	r2, r0
 8011f64:	f107 0308 	add.w	r3, r7, #8
 8011f68:	4619      	mov	r1, r3
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f000 f8be 	bl	80120ec <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8011f70:	f107 0308 	add.w	r3, r7, #8
 8011f74:	4618      	mov	r0, r3
 8011f76:	f7fc fb50 	bl	800e61a <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	330c      	adds	r3, #12
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	f107 0210 	add.w	r2, r7, #16
 8011f86:	6839      	ldr	r1, [r7, #0]
 8011f88:	4610      	mov	r0, r2
 8011f8a:	4798      	blx	r3
 8011f8c:	f107 0310 	add.w	r3, r7, #16
 8011f90:	4619      	mov	r1, r3
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f000 f85c 	bl	8012050 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 8011f98:	f107 0310 	add.w	r3, r7, #16
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7fc fb3c 	bl	800e61a <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	3308      	adds	r3, #8
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	f107 0218 	add.w	r2, r7, #24
 8011fae:	6839      	ldr	r1, [r7, #0]
 8011fb0:	4610      	mov	r0, r2
 8011fb2:	4798      	blx	r3
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	3314      	adds	r3, #20
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	6838      	ldr	r0, [r7, #0]
 8011fbe:	4798      	blx	r3
 8011fc0:	4602      	mov	r2, r0
 8011fc2:	f107 0318 	add.w	r3, r7, #24
 8011fc6:	4619      	mov	r1, r3
 8011fc8:	6878      	ldr	r0, [r7, #4]
 8011fca:	f000 f88f 	bl	80120ec <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8011fce:	f107 0318 	add.w	r3, r7, #24
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f7fc fb21 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8011fd8:	bf00      	nop
 8011fda:	3720      	adds	r7, #32
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}

08011fe0 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b086      	sub	sp, #24
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
 8011fe8:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 8011fea:	683b      	ldr	r3, [r7, #0]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	3308      	adds	r3, #8
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	f107 0208 	add.w	r2, r7, #8
 8011ff6:	6839      	ldr	r1, [r7, #0]
 8011ff8:	4610      	mov	r0, r2
 8011ffa:	4798      	blx	r3
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	3314      	adds	r3, #20
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	6838      	ldr	r0, [r7, #0]
 8012006:	4798      	blx	r3
 8012008:	4602      	mov	r2, r0
 801200a:	f107 0308 	add.w	r3, r7, #8
 801200e:	4619      	mov	r1, r3
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f000 f86b 	bl	80120ec <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8012016:	f107 0308 	add.w	r3, r7, #8
 801201a:	4618      	mov	r0, r3
 801201c:	f7fc fafd 	bl	800e61a <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	330c      	adds	r3, #12
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	f107 0210 	add.w	r2, r7, #16
 801202c:	6839      	ldr	r1, [r7, #0]
 801202e:	4610      	mov	r0, r2
 8012030:	4798      	blx	r3
 8012032:	f107 0310 	add.w	r3, r7, #16
 8012036:	4619      	mov	r1, r3
 8012038:	6878      	ldr	r0, [r7, #4]
 801203a:	f000 f809 	bl	8012050 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 801203e:	f107 0310 	add.w	r3, r7, #16
 8012042:	4618      	mov	r0, r3
 8012044:	f7fc fae9 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8012048:	bf00      	nop
 801204a:	3718      	adds	r7, #24
 801204c:	46bd      	mov	sp, r7
 801204e:	bd80      	pop	{r7, pc}

08012050 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 8012050:	b590      	push	{r4, r7, lr}
 8012052:	b083      	sub	sp, #12
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
 8012058:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	332c      	adds	r3, #44	; 0x2c
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	4909      	ldr	r1, [pc, #36]	; (8012088 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 8012064:	6878      	ldr	r0, [r7, #4]
 8012066:	4798      	blx	r3
    print(testName.asCharString());
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	332c      	adds	r3, #44	; 0x2c
 801206e:	681c      	ldr	r4, [r3, #0]
 8012070:	6838      	ldr	r0, [r7, #0]
 8012072:	f7fc faa5 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 8012076:	4603      	mov	r3, r0
 8012078:	4619      	mov	r1, r3
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	47a0      	blx	r4
}
 801207e:	bf00      	nop
 8012080:	370c      	adds	r7, #12
 8012082:	46bd      	mov	sp, r7
 8012084:	bd90      	pop	{r4, r7, pc}
 8012086:	bf00      	nop
 8012088:	08026730 	.word	0x08026730

0801208c <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 801208c:	b590      	push	{r4, r7, lr}
 801208e:	b083      	sub	sp, #12
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
 8012094:	6039      	str	r1, [r7, #0]
    print("\n");
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	332c      	adds	r3, #44	; 0x2c
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	4910      	ldr	r1, [pc, #64]	; (80120e0 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 80120a0:	6878      	ldr	r0, [r7, #4]
 80120a2:	4798      	blx	r3
    print("\t");
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	332c      	adds	r3, #44	; 0x2c
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	490d      	ldr	r1, [pc, #52]	; (80120e4 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 80120ae:	6878      	ldr	r0, [r7, #4]
 80120b0:	4798      	blx	r3
    print(reason.asCharString());
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	332c      	adds	r3, #44	; 0x2c
 80120b8:	681c      	ldr	r4, [r3, #0]
 80120ba:	6838      	ldr	r0, [r7, #0]
 80120bc:	f7fc fa80 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 80120c0:	4603      	mov	r3, r0
 80120c2:	4619      	mov	r1, r3
 80120c4:	6878      	ldr	r0, [r7, #4]
 80120c6:	47a0      	blx	r4
    print("\n\n");
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	332c      	adds	r3, #44	; 0x2c
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	4905      	ldr	r1, [pc, #20]	; (80120e8 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 80120d2:	6878      	ldr	r0, [r7, #4]
 80120d4:	4798      	blx	r3
}
 80120d6:	bf00      	nop
 80120d8:	370c      	adds	r7, #12
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd90      	pop	{r4, r7, pc}
 80120de:	bf00      	nop
 80120e0:	080265e8 	.word	0x080265e8
 80120e4:	08026740 	.word	0x08026740
 80120e8:	08026718 	.word	0x08026718

080120ec <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 80120ec:	b590      	push	{r4, r7, lr}
 80120ee:	b089      	sub	sp, #36	; 0x24
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	60f8      	str	r0, [r7, #12]
 80120f4:	60b9      	str	r1, [r7, #8]
 80120f6:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 80120f8:	f7ff fbf0 	bl	80118dc <_ZN10TestOutput21getWorkingEnvironmentEv>
 80120fc:	4603      	mov	r3, r0
 80120fe:	2b00      	cmp	r3, #0
 8012100:	bf0c      	ite	eq
 8012102:	2301      	moveq	r3, #1
 8012104:	2300      	movne	r3, #0
 8012106:	b2db      	uxtb	r3, r3
 8012108:	2b00      	cmp	r3, #0
 801210a:	d015      	beq.n	8012138 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	3354      	adds	r3, #84	; 0x54
 8012112:	681c      	ldr	r4, [r3, #0]
 8012114:	f107 0310 	add.w	r3, r7, #16
 8012118:	68b9      	ldr	r1, [r7, #8]
 801211a:	4618      	mov	r0, r3
 801211c:	f7fb ff19 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
 8012120:	f107 0310 	add.w	r3, r7, #16
 8012124:	687a      	ldr	r2, [r7, #4]
 8012126:	4619      	mov	r1, r3
 8012128:	68f8      	ldr	r0, [r7, #12]
 801212a:	47a0      	blx	r4
 801212c:	f107 0310 	add.w	r3, r7, #16
 8012130:	4618      	mov	r0, r3
 8012132:	f7fc fa72 	bl	800e61a <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 8012136:	e014      	b.n	8012162 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	3350      	adds	r3, #80	; 0x50
 801213e:	681c      	ldr	r4, [r3, #0]
 8012140:	f107 0318 	add.w	r3, r7, #24
 8012144:	68b9      	ldr	r1, [r7, #8]
 8012146:	4618      	mov	r0, r3
 8012148:	f7fb ff03 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
 801214c:	f107 0318 	add.w	r3, r7, #24
 8012150:	687a      	ldr	r2, [r7, #4]
 8012152:	4619      	mov	r1, r3
 8012154:	68f8      	ldr	r0, [r7, #12]
 8012156:	47a0      	blx	r4
 8012158:	f107 0318 	add.w	r3, r7, #24
 801215c:	4618      	mov	r0, r3
 801215e:	f7fc fa5c 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8012162:	bf00      	nop
 8012164:	3724      	adds	r7, #36	; 0x24
 8012166:	46bd      	mov	sp, r7
 8012168:	bd90      	pop	{r4, r7, pc}
	...

0801216c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 801216c:	b590      	push	{r4, r7, lr}
 801216e:	b085      	sub	sp, #20
 8012170:	af00      	add	r7, sp, #0
 8012172:	60f8      	str	r0, [r7, #12]
 8012174:	60b9      	str	r1, [r7, #8]
 8012176:	607a      	str	r2, [r7, #4]
    print("\n");
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	332c      	adds	r3, #44	; 0x2c
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	4916      	ldr	r1, [pc, #88]	; (80121dc <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 8012182:	68f8      	ldr	r0, [r7, #12]
 8012184:	4798      	blx	r3
    print(file.asCharString());
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	332c      	adds	r3, #44	; 0x2c
 801218c:	681c      	ldr	r4, [r3, #0]
 801218e:	68b8      	ldr	r0, [r7, #8]
 8012190:	f7fc fa16 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 8012194:	4603      	mov	r3, r0
 8012196:	4619      	mov	r1, r3
 8012198:	68f8      	ldr	r0, [r7, #12]
 801219a:	47a0      	blx	r4
    print(":");
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	332c      	adds	r3, #44	; 0x2c
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	490e      	ldr	r1, [pc, #56]	; (80121e0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 80121a6:	68f8      	ldr	r0, [r7, #12]
 80121a8:	4798      	blx	r3
    print(lineNumber);
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	3334      	adds	r3, #52	; 0x34
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	6879      	ldr	r1, [r7, #4]
 80121b4:	68f8      	ldr	r0, [r7, #12]
 80121b6:	4798      	blx	r3
    print(":");
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	332c      	adds	r3, #44	; 0x2c
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	4907      	ldr	r1, [pc, #28]	; (80121e0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 80121c2:	68f8      	ldr	r0, [r7, #12]
 80121c4:	4798      	blx	r3
    print(" error:");
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	332c      	adds	r3, #44	; 0x2c
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	4905      	ldr	r1, [pc, #20]	; (80121e4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 80121d0:	68f8      	ldr	r0, [r7, #12]
 80121d2:	4798      	blx	r3
}
 80121d4:	bf00      	nop
 80121d6:	3714      	adds	r7, #20
 80121d8:	46bd      	mov	sp, r7
 80121da:	bd90      	pop	{r4, r7, pc}
 80121dc:	080265e8 	.word	0x080265e8
 80121e0:	08026744 	.word	0x08026744
 80121e4:	08026748 	.word	0x08026748

080121e8 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 80121e8:	b590      	push	{r4, r7, lr}
 80121ea:	b085      	sub	sp, #20
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	60f8      	str	r0, [r7, #12]
 80121f0:	60b9      	str	r1, [r7, #8]
 80121f2:	607a      	str	r2, [r7, #4]
    print("\n");
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	332c      	adds	r3, #44	; 0x2c
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	4916      	ldr	r1, [pc, #88]	; (8012258 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 80121fe:	68f8      	ldr	r0, [r7, #12]
 8012200:	4798      	blx	r3
    print(file.asCharString());
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	332c      	adds	r3, #44	; 0x2c
 8012208:	681c      	ldr	r4, [r3, #0]
 801220a:	68b8      	ldr	r0, [r7, #8]
 801220c:	f7fc f9d8 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 8012210:	4603      	mov	r3, r0
 8012212:	4619      	mov	r1, r3
 8012214:	68f8      	ldr	r0, [r7, #12]
 8012216:	47a0      	blx	r4
    print("(");
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	332c      	adds	r3, #44	; 0x2c
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	490e      	ldr	r1, [pc, #56]	; (801225c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 8012222:	68f8      	ldr	r0, [r7, #12]
 8012224:	4798      	blx	r3
    print(lineNumber);
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	3334      	adds	r3, #52	; 0x34
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	6879      	ldr	r1, [r7, #4]
 8012230:	68f8      	ldr	r0, [r7, #12]
 8012232:	4798      	blx	r3
    print("):");
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	332c      	adds	r3, #44	; 0x2c
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	4908      	ldr	r1, [pc, #32]	; (8012260 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 801223e:	68f8      	ldr	r0, [r7, #12]
 8012240:	4798      	blx	r3
    print(" error:");
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	332c      	adds	r3, #44	; 0x2c
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	4906      	ldr	r1, [pc, #24]	; (8012264 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 801224c:	68f8      	ldr	r0, [r7, #12]
 801224e:	4798      	blx	r3
}
 8012250:	bf00      	nop
 8012252:	3714      	adds	r7, #20
 8012254:	46bd      	mov	sp, r7
 8012256:	bd90      	pop	{r4, r7, pc}
 8012258:	080265e8 	.word	0x080265e8
 801225c:	08026750 	.word	0x08026750
 8012260:	08026754 	.word	0x08026754
 8012264:	08026748 	.word	0x08026748

08012268 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b082      	sub	sp, #8
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	7a1b      	ldrb	r3, [r3, #8]
 8012276:	2b02      	cmp	r3, #2
 8012278:	d106      	bne.n	8012288 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	3328      	adds	r3, #40	; 0x28
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	6839      	ldr	r1, [r7, #0]
 8012284:	6878      	ldr	r0, [r7, #4]
 8012286:	4798      	blx	r3
}
 8012288:	bf00      	nop
 801228a:	3708      	adds	r7, #8
 801228c:	46bd      	mov	sp, r7
 801228e:	bd80      	pop	{r7, pc}

08012290 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b082      	sub	sp, #8
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
 8012298:	6039      	str	r1, [r7, #0]
    while (*s) {
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	781b      	ldrb	r3, [r3, #0]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d009      	beq.n	80122b6 <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 80122a2:	4b0a      	ldr	r3, [pc, #40]	; (80122cc <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	683a      	ldr	r2, [r7, #0]
 80122a8:	7812      	ldrb	r2, [r2, #0]
 80122aa:	4610      	mov	r0, r2
 80122ac:	4798      	blx	r3
        s++;
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	3301      	adds	r3, #1
 80122b2:	603b      	str	r3, [r7, #0]
    while (*s) {
 80122b4:	e7f1      	b.n	801229a <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	334c      	adds	r3, #76	; 0x4c
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	4798      	blx	r3
}
 80122c2:	bf00      	nop
 80122c4:	3708      	adds	r7, #8
 80122c6:	46bd      	mov	sp, r7
 80122c8:	bd80      	pop	{r7, pc}
 80122ca:	bf00      	nop
 80122cc:	200000c0 	.word	0x200000c0

080122d0 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b082      	sub	sp, #8
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 80122d8:	4b03      	ldr	r3, [pc, #12]	; (80122e8 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	4798      	blx	r3
}
 80122de:	bf00      	nop
 80122e0:	3708      	adds	r7, #8
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}
 80122e6:	bf00      	nop
 80122e8:	200000c4 	.word	0x200000c4

080122ec <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7ff fb00 	bl	80118fc <_ZN10TestOutputC1Ev>
 80122fc:	4a06      	ldr	r2, [pc, #24]	; (8012318 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	601a      	str	r2, [r3, #0]
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	2200      	movs	r2, #0
 8012306:	611a      	str	r2, [r3, #16]
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	2200      	movs	r2, #0
 801230c:	615a      	str	r2, [r3, #20]
{
}
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	4618      	mov	r0, r3
 8012312:	3708      	adds	r7, #8
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}
 8012318:	0802a1b8 	.word	0x0802a1b8

0801231c <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 801231c:	b580      	push	{r7, lr}
 801231e:	b082      	sub	sp, #8
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
 8012324:	4a0e      	ldr	r2, [pc, #56]	; (8012360 <_ZN19CompositeTestOutputD1Ev+0x44>)
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	691b      	ldr	r3, [r3, #16]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d004      	beq.n	801233c <_ZN19CompositeTestOutputD1Ev+0x20>
 8012332:	681a      	ldr	r2, [r3, #0]
 8012334:	3204      	adds	r2, #4
 8012336:	6812      	ldr	r2, [r2, #0]
 8012338:	4618      	mov	r0, r3
 801233a:	4790      	blx	r2
  delete outputTwo_;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	695b      	ldr	r3, [r3, #20]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d004      	beq.n	801234e <_ZN19CompositeTestOutputD1Ev+0x32>
 8012344:	681a      	ldr	r2, [r3, #0]
 8012346:	3204      	adds	r2, #4
 8012348:	6812      	ldr	r2, [r2, #0]
 801234a:	4618      	mov	r0, r3
 801234c:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	4618      	mov	r0, r3
 8012352:	f7ff faf1 	bl	8011938 <_ZN10TestOutputD1Ev>
}
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	4618      	mov	r0, r3
 801235a:	3708      	adds	r7, #8
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}
 8012360:	0802a1b8 	.word	0x0802a1b8

08012364 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 8012364:	b580      	push	{r7, lr}
 8012366:	b082      	sub	sp, #8
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
}
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f7ff ffd5 	bl	801231c <_ZN19CompositeTestOutputD1Ev>
 8012372:	2118      	movs	r1, #24
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	f7f9 f9e9 	bl	800b74c <_ZdlPvj>
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	4618      	mov	r0, r3
 801237e:	3708      	adds	r7, #8
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}

08012384 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b082      	sub	sp, #8
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
 801238c:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	691b      	ldr	r3, [r3, #16]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d004      	beq.n	80123a0 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 8012396:	681a      	ldr	r2, [r3, #0]
 8012398:	3204      	adds	r2, #4
 801239a:	6812      	ldr	r2, [r2, #0]
 801239c:	4618      	mov	r0, r3
 801239e:	4790      	blx	r2
  outputOne_ = output;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	683a      	ldr	r2, [r7, #0]
 80123a4:	611a      	str	r2, [r3, #16]
}
 80123a6:	bf00      	nop
 80123a8:	3708      	adds	r7, #8
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd80      	pop	{r7, pc}

080123ae <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 80123ae:	b580      	push	{r7, lr}
 80123b0:	b082      	sub	sp, #8
 80123b2:	af00      	add	r7, sp, #0
 80123b4:	6078      	str	r0, [r7, #4]
 80123b6:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	695b      	ldr	r3, [r3, #20]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d004      	beq.n	80123ca <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 80123c0:	681a      	ldr	r2, [r3, #0]
 80123c2:	3204      	adds	r2, #4
 80123c4:	6812      	ldr	r2, [r2, #0]
 80123c6:	4618      	mov	r0, r3
 80123c8:	4790      	blx	r2
  outputTwo_ = output;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	683a      	ldr	r2, [r7, #0]
 80123ce:	615a      	str	r2, [r3, #20]
}
 80123d0:	bf00      	nop
 80123d2:	3708      	adds	r7, #8
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}

080123d8 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	691b      	ldr	r3, [r3, #16]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d008      	beq.n	80123fa <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	691a      	ldr	r2, [r3, #16]
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	691b      	ldr	r3, [r3, #16]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	3308      	adds	r3, #8
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	4610      	mov	r0, r2
 80123f8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	695b      	ldr	r3, [r3, #20]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d008      	beq.n	8012414 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	695a      	ldr	r2, [r3, #20]
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	695b      	ldr	r3, [r3, #20]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	3308      	adds	r3, #8
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	4610      	mov	r0, r2
 8012412:	4798      	blx	r3
}
 8012414:	bf00      	nop
 8012416:	3708      	adds	r7, #8
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}

0801241c <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
 8012424:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	691b      	ldr	r3, [r3, #16]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d009      	beq.n	8012442 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	691a      	ldr	r2, [r3, #16]
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	691b      	ldr	r3, [r3, #16]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	330c      	adds	r3, #12
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	6839      	ldr	r1, [r7, #0]
 801243e:	4610      	mov	r0, r2
 8012440:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	695b      	ldr	r3, [r3, #20]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d009      	beq.n	801245e <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	695a      	ldr	r2, [r3, #20]
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	695b      	ldr	r3, [r3, #20]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	330c      	adds	r3, #12
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	6839      	ldr	r1, [r7, #0]
 801245a:	4610      	mov	r0, r2
 801245c:	4798      	blx	r3
}
 801245e:	bf00      	nop
 8012460:	3708      	adds	r7, #8
 8012462:	46bd      	mov	sp, r7
 8012464:	bd80      	pop	{r7, pc}

08012466 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8012466:	b580      	push	{r7, lr}
 8012468:	b082      	sub	sp, #8
 801246a:	af00      	add	r7, sp, #0
 801246c:	6078      	str	r0, [r7, #4]
 801246e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	691b      	ldr	r3, [r3, #16]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d009      	beq.n	801248c <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	691a      	ldr	r2, [r3, #16]
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	691b      	ldr	r3, [r3, #16]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	3310      	adds	r3, #16
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	6839      	ldr	r1, [r7, #0]
 8012488:	4610      	mov	r0, r2
 801248a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	695b      	ldr	r3, [r3, #20]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d009      	beq.n	80124a8 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	695a      	ldr	r2, [r3, #20]
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	695b      	ldr	r3, [r3, #20]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	3310      	adds	r3, #16
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	6839      	ldr	r1, [r7, #0]
 80124a4:	4610      	mov	r0, r2
 80124a6:	4798      	blx	r3
}
 80124a8:	bf00      	nop
 80124aa:	3708      	adds	r7, #8
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}

080124b0 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b082      	sub	sp, #8
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
 80124b8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	691b      	ldr	r3, [r3, #16]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d009      	beq.n	80124d6 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	691a      	ldr	r2, [r3, #16]
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	691b      	ldr	r3, [r3, #16]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	3314      	adds	r3, #20
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	6839      	ldr	r1, [r7, #0]
 80124d2:	4610      	mov	r0, r2
 80124d4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	695b      	ldr	r3, [r3, #20]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d009      	beq.n	80124f2 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	695a      	ldr	r2, [r3, #20]
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	695b      	ldr	r3, [r3, #20]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	3314      	adds	r3, #20
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	6839      	ldr	r1, [r7, #0]
 80124ee:	4610      	mov	r0, r2
 80124f0:	4798      	blx	r3
}
 80124f2:	bf00      	nop
 80124f4:	3708      	adds	r7, #8
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}

080124fa <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 80124fa:	b580      	push	{r7, lr}
 80124fc:	b082      	sub	sp, #8
 80124fe:	af00      	add	r7, sp, #0
 8012500:	6078      	str	r0, [r7, #4]
 8012502:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	691b      	ldr	r3, [r3, #16]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d009      	beq.n	8012520 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	691a      	ldr	r2, [r3, #16]
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	691b      	ldr	r3, [r3, #16]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	3318      	adds	r3, #24
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	6839      	ldr	r1, [r7, #0]
 801251c:	4610      	mov	r0, r2
 801251e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	695b      	ldr	r3, [r3, #20]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d009      	beq.n	801253c <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	695a      	ldr	r2, [r3, #20]
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	695b      	ldr	r3, [r3, #20]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	3318      	adds	r3, #24
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	6839      	ldr	r1, [r7, #0]
 8012538:	4610      	mov	r0, r2
 801253a:	4798      	blx	r3
}
 801253c:	bf00      	nop
 801253e:	3708      	adds	r7, #8
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}

08012544 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b082      	sub	sp, #8
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	691b      	ldr	r3, [r3, #16]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d009      	beq.n	801256a <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	691a      	ldr	r2, [r3, #16]
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	691b      	ldr	r3, [r3, #16]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	331c      	adds	r3, #28
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	6839      	ldr	r1, [r7, #0]
 8012566:	4610      	mov	r0, r2
 8012568:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	695b      	ldr	r3, [r3, #20]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d009      	beq.n	8012586 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	695a      	ldr	r2, [r3, #20]
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	695b      	ldr	r3, [r3, #20]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	331c      	adds	r3, #28
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	6839      	ldr	r1, [r7, #0]
 8012582:	4610      	mov	r0, r2
 8012584:	4798      	blx	r3
}
 8012586:	bf00      	nop
 8012588:	3708      	adds	r7, #8
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}

0801258e <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 801258e:	b580      	push	{r7, lr}
 8012590:	b082      	sub	sp, #8
 8012592:	af00      	add	r7, sp, #0
 8012594:	6078      	str	r0, [r7, #4]
 8012596:	460b      	mov	r3, r1
 8012598:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	691b      	ldr	r3, [r3, #16]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d009      	beq.n	80125b6 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	691a      	ldr	r2, [r3, #16]
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	691b      	ldr	r3, [r3, #16]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	3320      	adds	r3, #32
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	78f9      	ldrb	r1, [r7, #3]
 80125b2:	4610      	mov	r0, r2
 80125b4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	695b      	ldr	r3, [r3, #20]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d009      	beq.n	80125d2 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	695a      	ldr	r2, [r3, #20]
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	695b      	ldr	r3, [r3, #20]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	3320      	adds	r3, #32
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	78f9      	ldrb	r1, [r7, #3]
 80125ce:	4610      	mov	r0, r2
 80125d0:	4798      	blx	r3
}
 80125d2:	bf00      	nop
 80125d4:	3708      	adds	r7, #8
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}

080125da <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 80125da:	b580      	push	{r7, lr}
 80125dc:	b082      	sub	sp, #8
 80125de:	af00      	add	r7, sp, #0
 80125e0:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	691b      	ldr	r3, [r3, #16]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d008      	beq.n	80125fc <_ZN19CompositeTestOutput5colorEv+0x22>
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	691a      	ldr	r2, [r3, #16]
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	691b      	ldr	r3, [r3, #16]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	3324      	adds	r3, #36	; 0x24
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	4610      	mov	r0, r2
 80125fa:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	695b      	ldr	r3, [r3, #20]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d008      	beq.n	8012616 <_ZN19CompositeTestOutput5colorEv+0x3c>
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	695a      	ldr	r2, [r3, #20]
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	695b      	ldr	r3, [r3, #20]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	3324      	adds	r3, #36	; 0x24
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	4610      	mov	r0, r2
 8012614:	4798      	blx	r3
}
 8012616:	bf00      	nop
 8012618:	3708      	adds	r7, #8
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}

0801261e <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 801261e:	b580      	push	{r7, lr}
 8012620:	b082      	sub	sp, #8
 8012622:	af00      	add	r7, sp, #0
 8012624:	6078      	str	r0, [r7, #4]
 8012626:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	691b      	ldr	r3, [r3, #16]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d009      	beq.n	8012644 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	691a      	ldr	r2, [r3, #16]
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	691b      	ldr	r3, [r3, #16]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	3328      	adds	r3, #40	; 0x28
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	6839      	ldr	r1, [r7, #0]
 8012640:	4610      	mov	r0, r2
 8012642:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	695b      	ldr	r3, [r3, #20]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d009      	beq.n	8012660 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	695a      	ldr	r2, [r3, #20]
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	695b      	ldr	r3, [r3, #20]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	3328      	adds	r3, #40	; 0x28
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	6839      	ldr	r1, [r7, #0]
 801265c:	4610      	mov	r0, r2
 801265e:	4798      	blx	r3
}
 8012660:	bf00      	nop
 8012662:	3708      	adds	r7, #8
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}

08012668 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b082      	sub	sp, #8
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	691b      	ldr	r3, [r3, #16]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d009      	beq.n	801268e <_ZN19CompositeTestOutput5printEPKc+0x26>
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	691a      	ldr	r2, [r3, #16]
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	691b      	ldr	r3, [r3, #16]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	332c      	adds	r3, #44	; 0x2c
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	6839      	ldr	r1, [r7, #0]
 801268a:	4610      	mov	r0, r2
 801268c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	695b      	ldr	r3, [r3, #20]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d009      	beq.n	80126aa <_ZN19CompositeTestOutput5printEPKc+0x42>
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	695a      	ldr	r2, [r3, #20]
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	695b      	ldr	r3, [r3, #20]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	332c      	adds	r3, #44	; 0x2c
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	6839      	ldr	r1, [r7, #0]
 80126a6:	4610      	mov	r0, r2
 80126a8:	4798      	blx	r3
}
 80126aa:	bf00      	nop
 80126ac:	3708      	adds	r7, #8
 80126ae:	46bd      	mov	sp, r7
 80126b0:	bd80      	pop	{r7, pc}

080126b2 <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 80126b2:	b580      	push	{r7, lr}
 80126b4:	b082      	sub	sp, #8
 80126b6:	af00      	add	r7, sp, #0
 80126b8:	6078      	str	r0, [r7, #4]
 80126ba:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	691b      	ldr	r3, [r3, #16]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d009      	beq.n	80126d8 <_ZN19CompositeTestOutput5printEl+0x26>
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	691a      	ldr	r2, [r3, #16]
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	691b      	ldr	r3, [r3, #16]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	3330      	adds	r3, #48	; 0x30
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	6839      	ldr	r1, [r7, #0]
 80126d4:	4610      	mov	r0, r2
 80126d6:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	695b      	ldr	r3, [r3, #20]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d009      	beq.n	80126f4 <_ZN19CompositeTestOutput5printEl+0x42>
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	695a      	ldr	r2, [r3, #20]
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	695b      	ldr	r3, [r3, #20]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	3330      	adds	r3, #48	; 0x30
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	6839      	ldr	r1, [r7, #0]
 80126f0:	4610      	mov	r0, r2
 80126f2:	4798      	blx	r3
}
 80126f4:	bf00      	nop
 80126f6:	3708      	adds	r7, #8
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}

080126fc <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b082      	sub	sp, #8
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
 8012704:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	691b      	ldr	r3, [r3, #16]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d009      	beq.n	8012722 <_ZN19CompositeTestOutput5printEj+0x26>
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	691a      	ldr	r2, [r3, #16]
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	691b      	ldr	r3, [r3, #16]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	3334      	adds	r3, #52	; 0x34
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	6839      	ldr	r1, [r7, #0]
 801271e:	4610      	mov	r0, r2
 8012720:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	695b      	ldr	r3, [r3, #20]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d009      	beq.n	801273e <_ZN19CompositeTestOutput5printEj+0x42>
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	695a      	ldr	r2, [r3, #20]
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	695b      	ldr	r3, [r3, #20]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	3334      	adds	r3, #52	; 0x34
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	6839      	ldr	r1, [r7, #0]
 801273a:	4610      	mov	r0, r2
 801273c:	4798      	blx	r3
}
 801273e:	bf00      	nop
 8012740:	3708      	adds	r7, #8
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}

08012746 <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 8012746:	b580      	push	{r7, lr}
 8012748:	b084      	sub	sp, #16
 801274a:	af00      	add	r7, sp, #0
 801274c:	60f8      	str	r0, [r7, #12]
 801274e:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	691b      	ldr	r3, [r3, #16]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d00a      	beq.n	8012770 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	691a      	ldr	r2, [r3, #16]
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	691b      	ldr	r3, [r3, #16]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	3338      	adds	r3, #56	; 0x38
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	ed97 0b00 	vldr	d0, [r7]
 801276c:	4610      	mov	r0, r2
 801276e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	695b      	ldr	r3, [r3, #20]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d00a      	beq.n	801278e <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	695a      	ldr	r2, [r3, #20]
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	695b      	ldr	r3, [r3, #20]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	3338      	adds	r3, #56	; 0x38
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	ed97 0b00 	vldr	d0, [r7]
 801278a:	4610      	mov	r0, r2
 801278c:	4798      	blx	r3
}
 801278e:	bf00      	nop
 8012790:	3710      	adds	r7, #16
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}

08012796 <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 8012796:	b580      	push	{r7, lr}
 8012798:	b082      	sub	sp, #8
 801279a:	af00      	add	r7, sp, #0
 801279c:	6078      	str	r0, [r7, #4]
 801279e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	691b      	ldr	r3, [r3, #16]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d009      	beq.n	80127bc <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	691a      	ldr	r2, [r3, #16]
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	691b      	ldr	r3, [r3, #16]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	333c      	adds	r3, #60	; 0x3c
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	6839      	ldr	r1, [r7, #0]
 80127b8:	4610      	mov	r0, r2
 80127ba:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	695b      	ldr	r3, [r3, #20]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d009      	beq.n	80127d8 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	695a      	ldr	r2, [r3, #20]
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	695b      	ldr	r3, [r3, #20]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	333c      	adds	r3, #60	; 0x3c
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	6839      	ldr	r1, [r7, #0]
 80127d4:	4610      	mov	r0, r2
 80127d6:	4798      	blx	r3
}
 80127d8:	bf00      	nop
 80127da:	3708      	adds	r7, #8
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}

080127e0 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b082      	sub	sp, #8
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
 80127e8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	691b      	ldr	r3, [r3, #16]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d009      	beq.n	8012806 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	691a      	ldr	r2, [r3, #16]
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	691b      	ldr	r3, [r3, #16]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	3344      	adds	r3, #68	; 0x44
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	6839      	ldr	r1, [r7, #0]
 8012802:	4610      	mov	r0, r2
 8012804:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	695b      	ldr	r3, [r3, #20]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d009      	beq.n	8012822 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	695a      	ldr	r2, [r3, #20]
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	695b      	ldr	r3, [r3, #20]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	3344      	adds	r3, #68	; 0x44
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	6839      	ldr	r1, [r7, #0]
 801281e:	4610      	mov	r0, r2
 8012820:	4798      	blx	r3
}
 8012822:	bf00      	nop
 8012824:	3708      	adds	r7, #8
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}

0801282a <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 801282a:	b580      	push	{r7, lr}
 801282c:	b082      	sub	sp, #8
 801282e:	af00      	add	r7, sp, #0
 8012830:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	691b      	ldr	r3, [r3, #16]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d008      	beq.n	801284c <_ZN19CompositeTestOutput5flushEv+0x22>
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	691a      	ldr	r2, [r3, #16]
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	691b      	ldr	r3, [r3, #16]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	334c      	adds	r3, #76	; 0x4c
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	4610      	mov	r0, r2
 801284a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	695b      	ldr	r3, [r3, #20]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d008      	beq.n	8012866 <_ZN19CompositeTestOutput5flushEv+0x3c>
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	695a      	ldr	r2, [r3, #20]
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	695b      	ldr	r3, [r3, #20]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	334c      	adds	r3, #76	; 0x4c
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	4610      	mov	r0, r2
 8012864:	4798      	blx	r3
}
 8012866:	bf00      	nop
 8012868:	3708      	adds	r7, #8
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}

0801286e <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 801286e:	b480      	push	{r7}
 8012870:	b085      	sub	sp, #20
 8012872:	af00      	add	r7, sp, #0
 8012874:	60f8      	str	r0, [r7, #12]
 8012876:	60b9      	str	r1, [r7, #8]
 8012878:	607a      	str	r2, [r7, #4]
    }
 801287a:	bf00      	nop
 801287c:	3714      	adds	r7, #20
 801287e:	46bd      	mov	sp, r7
 8012880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012884:	4770      	bx	lr

08012886 <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 8012886:	b480      	push	{r7}
 8012888:	b085      	sub	sp, #20
 801288a:	af00      	add	r7, sp, #0
 801288c:	60f8      	str	r0, [r7, #12]
 801288e:	60b9      	str	r1, [r7, #8]
 8012890:	607a      	str	r2, [r7, #4]
    }
 8012892:	bf00      	nop
 8012894:	3714      	adds	r7, #20
 8012896:	46bd      	mov	sp, r7
 8012898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289c:	4770      	bx	lr
	...

080128a0 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b082      	sub	sp, #8
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
 80128a8:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 80128aa:	4a0b      	ldr	r2, [pc, #44]	; (80128d8 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	601a      	str	r2, [r3, #0]
 80128b0:	f000 f9ce 	bl	8012c50 <_ZN14NullTestPlugin8instanceEv>
 80128b4:	4602      	mov	r2, r0
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	605a      	str	r2, [r3, #4]
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	3308      	adds	r3, #8
 80128be:	6839      	ldr	r1, [r7, #0]
 80128c0:	4618      	mov	r0, r3
 80128c2:	f7fb fb46 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2201      	movs	r2, #1
 80128ca:	741a      	strb	r2, [r3, #16]
{
}
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	4618      	mov	r0, r3
 80128d0:	3708      	adds	r7, #8
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}
 80128d6:	bf00      	nop
 80128d8:	0802a374 	.word	0x0802a374

080128dc <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 80128dc:	b580      	push	{r7, lr}
 80128de:	b082      	sub	sp, #8
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
 80128e4:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 80128e6:	4a0a      	ldr	r2, [pc, #40]	; (8012910 <_ZN10TestPluginC1EPS_+0x34>)
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	601a      	str	r2, [r3, #0]
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	683a      	ldr	r2, [r7, #0]
 80128f0:	605a      	str	r2, [r3, #4]
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	3308      	adds	r3, #8
 80128f6:	4907      	ldr	r1, [pc, #28]	; (8012914 <_ZN10TestPluginC1EPS_+0x38>)
 80128f8:	4618      	mov	r0, r3
 80128fa:	f7fb fad6 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	2201      	movs	r2, #1
 8012902:	741a      	strb	r2, [r3, #16]
{
}
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	4618      	mov	r0, r3
 8012908:	3708      	adds	r7, #8
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}
 801290e:	bf00      	nop
 8012910:	0802a374 	.word	0x0802a374
 8012914:	08026758 	.word	0x08026758

08012918 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 8012918:	b580      	push	{r7, lr}
 801291a:	b082      	sub	sp, #8
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
 8012920:	4a06      	ldr	r2, [pc, #24]	; (801293c <_ZN10TestPluginD1Ev+0x24>)
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	601a      	str	r2, [r3, #0]
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	3308      	adds	r3, #8
 801292a:	4618      	mov	r0, r3
 801292c:	f7fb fe75 	bl	800e61a <_ZN12SimpleStringD1Ev>
{
}
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	4618      	mov	r0, r3
 8012934:	3708      	adds	r7, #8
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}
 801293a:	bf00      	nop
 801293c:	0802a374 	.word	0x0802a374

08012940 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 8012940:	b580      	push	{r7, lr}
 8012942:	b082      	sub	sp, #8
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
}
 8012948:	6878      	ldr	r0, [r7, #4]
 801294a:	f7ff ffe5 	bl	8012918 <_ZN10TestPluginD1Ev>
 801294e:	2114      	movs	r1, #20
 8012950:	6878      	ldr	r0, [r7, #4]
 8012952:	f7f8 fefb 	bl	800b74c <_ZdlPvj>
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	4618      	mov	r0, r3
 801295a:	3708      	adds	r7, #8
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}

08012960 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 8012960:	b480      	push	{r7}
 8012962:	b083      	sub	sp, #12
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	683a      	ldr	r2, [r7, #0]
 801296e:	605a      	str	r2, [r3, #4]
    return this;
 8012970:	687b      	ldr	r3, [r7, #4]
}
 8012972:	4618      	mov	r0, r3
 8012974:	370c      	adds	r7, #12
 8012976:	46bd      	mov	sp, r7
 8012978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297c:	4770      	bx	lr

0801297e <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 801297e:	b580      	push	{r7, lr}
 8012980:	b084      	sub	sp, #16
 8012982:	af00      	add	r7, sp, #0
 8012984:	60f8      	str	r0, [r7, #12]
 8012986:	60b9      	str	r1, [r7, #8]
 8012988:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	7c1b      	ldrb	r3, [r3, #16]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d007      	beq.n	80129a2 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	3308      	adds	r3, #8
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	687a      	ldr	r2, [r7, #4]
 801299c:	68b9      	ldr	r1, [r7, #8]
 801299e:	68f8      	ldr	r0, [r7, #12]
 80129a0:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	6858      	ldr	r0, [r3, #4]
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	685b      	ldr	r3, [r3, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	3314      	adds	r3, #20
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	687a      	ldr	r2, [r7, #4]
 80129b2:	68b9      	ldr	r1, [r7, #8]
 80129b4:	4798      	blx	r3
}
 80129b6:	bf00      	nop
 80129b8:	3710      	adds	r7, #16
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}

080129be <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 80129be:	b580      	push	{r7, lr}
 80129c0:	b084      	sub	sp, #16
 80129c2:	af00      	add	r7, sp, #0
 80129c4:	60f8      	str	r0, [r7, #12]
 80129c6:	60b9      	str	r1, [r7, #8]
 80129c8:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	6858      	ldr	r0, [r3, #4]
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	685b      	ldr	r3, [r3, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	3318      	adds	r3, #24
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	687a      	ldr	r2, [r7, #4]
 80129da:	68b9      	ldr	r1, [r7, #8]
 80129dc:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	7c1b      	ldrb	r3, [r3, #16]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d007      	beq.n	80129f6 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	330c      	adds	r3, #12
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	687a      	ldr	r2, [r7, #4]
 80129f0:	68b9      	ldr	r1, [r7, #8]
 80129f2:	68f8      	ldr	r0, [r7, #12]
 80129f4:	4798      	blx	r3
}
 80129f6:	bf00      	nop
 80129f8:	3710      	adds	r7, #16
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd80      	pop	{r7, pc}

080129fe <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 80129fe:	b590      	push	{r4, r7, lr}
 8012a00:	b085      	sub	sp, #20
 8012a02:	af00      	add	r7, sp, #0
 8012a04:	60f8      	str	r0, [r7, #12]
 8012a06:	60b9      	str	r1, [r7, #8]
 8012a08:	607a      	str	r2, [r7, #4]
 8012a0a:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	331c      	adds	r3, #28
 8012a12:	681c      	ldr	r4, [r3, #0]
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	687a      	ldr	r2, [r7, #4]
 8012a18:	68b9      	ldr	r1, [r7, #8]
 8012a1a:	68f8      	ldr	r0, [r7, #12]
 8012a1c:	47a0      	blx	r4
 8012a1e:	4603      	mov	r3, r0
}
 8012a20:	4618      	mov	r0, r3
 8012a22:	3714      	adds	r7, #20
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd90      	pop	{r4, r7, pc}

08012a28 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 8012a28:	b590      	push	{r4, r7, lr}
 8012a2a:	b085      	sub	sp, #20
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	60f8      	str	r0, [r7, #12]
 8012a30:	60b9      	str	r1, [r7, #8]
 8012a32:	607a      	str	r2, [r7, #4]
 8012a34:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	3310      	adds	r3, #16
 8012a3c:	681c      	ldr	r4, [r3, #0]
 8012a3e:	683b      	ldr	r3, [r7, #0]
 8012a40:	687a      	ldr	r2, [r7, #4]
 8012a42:	68b9      	ldr	r1, [r7, #8]
 8012a44:	68f8      	ldr	r0, [r7, #12]
 8012a46:	47a0      	blx	r4
 8012a48:	4603      	mov	r3, r0
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d001      	beq.n	8012a52 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 8012a4e:	2301      	movs	r3, #1
 8012a50:	e011      	b.n	8012a76 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	685b      	ldr	r3, [r3, #4]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d00c      	beq.n	8012a74 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	6858      	ldr	r0, [r3, #4]
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	685b      	ldr	r3, [r3, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	331c      	adds	r3, #28
 8012a66:	681c      	ldr	r4, [r3, #0]
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	687a      	ldr	r2, [r7, #4]
 8012a6c:	68b9      	ldr	r1, [r7, #8]
 8012a6e:	47a0      	blx	r4
 8012a70:	4603      	mov	r3, r0
 8012a72:	e000      	b.n	8012a76 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 8012a74:	2300      	movs	r3, #0
}
 8012a76:	4618      	mov	r0, r3
 8012a78:	3714      	adds	r7, #20
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	bd90      	pop	{r4, r7, pc}

08012a7e <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 8012a7e:	b480      	push	{r7}
 8012a80:	b083      	sub	sp, #12
 8012a82:	af00      	add	r7, sp, #0
 8012a84:	6078      	str	r0, [r7, #4]
    return name_;
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	3308      	adds	r3, #8
}
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	370c      	adds	r7, #12
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a94:	4770      	bx	lr

08012a96 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 8012a96:	b580      	push	{r7, lr}
 8012a98:	b082      	sub	sp, #8
 8012a9a:	af00      	add	r7, sp, #0
 8012a9c:	6078      	str	r0, [r7, #4]
 8012a9e:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	3308      	adds	r3, #8
 8012aa4:	4619      	mov	r1, r3
 8012aa6:	6838      	ldr	r0, [r7, #0]
 8012aa8:	f7fb fdc3 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 8012aac:	4603      	mov	r3, r0
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d001      	beq.n	8012ab6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	e00d      	b.n	8012ad2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	685b      	ldr	r3, [r3, #4]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d007      	beq.n	8012ace <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	685b      	ldr	r3, [r3, #4]
 8012ac2:	6839      	ldr	r1, [r7, #0]
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f7ff ffe6 	bl	8012a96 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8012aca:	4603      	mov	r3, r0
 8012acc:	e001      	b.n	8012ad2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	685b      	ldr	r3, [r3, #4]
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	3708      	adds	r7, #8
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}

08012ada <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 8012ada:	b480      	push	{r7}
 8012adc:	b083      	sub	sp, #12
 8012ade:	af00      	add	r7, sp, #0
 8012ae0:	6078      	str	r0, [r7, #4]
    return next_;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	685b      	ldr	r3, [r3, #4]
}
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	370c      	adds	r7, #12
 8012aea:	46bd      	mov	sp, r7
 8012aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af0:	4770      	bx	lr

08012af2 <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 8012af2:	b580      	push	{r7, lr}
 8012af4:	b084      	sub	sp, #16
 8012af6:	af00      	add	r7, sp, #0
 8012af8:	6078      	str	r0, [r7, #4]
 8012afa:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 8012afc:	2300      	movs	r3, #0
 8012afe:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	685b      	ldr	r3, [r3, #4]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d00e      	beq.n	8012b26 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	685b      	ldr	r3, [r3, #4]
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f7ff ffb6 	bl	8012a7e <_ZN10TestPlugin7getNameEv>
 8012b12:	4603      	mov	r3, r0
 8012b14:	6839      	ldr	r1, [r7, #0]
 8012b16:	4618      	mov	r0, r3
 8012b18:	f7fb fd8b 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d001      	beq.n	8012b26 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 8012b22:	2301      	movs	r3, #1
 8012b24:	e000      	b.n	8012b28 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 8012b26:	2300      	movs	r3, #0
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d007      	beq.n	8012b3c <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	685b      	ldr	r3, [r3, #4]
 8012b30:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	685b      	ldr	r3, [r3, #4]
 8012b36:	685a      	ldr	r2, [r3, #4]
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	605a      	str	r2, [r3, #4]
    }
    return removed;
 8012b3c:	68fb      	ldr	r3, [r7, #12]
}
 8012b3e:	4618      	mov	r0, r3
 8012b40:	3710      	adds	r7, #16
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}

08012b46 <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 8012b46:	b480      	push	{r7}
 8012b48:	b083      	sub	sp, #12
 8012b4a:	af00      	add	r7, sp, #0
 8012b4c:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	2200      	movs	r2, #0
 8012b52:	741a      	strb	r2, [r3, #16]
}
 8012b54:	bf00      	nop
 8012b56:	370c      	adds	r7, #12
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5e:	4770      	bx	lr

08012b60 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 8012b60:	b480      	push	{r7}
 8012b62:	b083      	sub	sp, #12
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2201      	movs	r2, #1
 8012b6c:	741a      	strb	r2, [r3, #16]
}
 8012b6e:	bf00      	nop
 8012b70:	370c      	adds	r7, #12
 8012b72:	46bd      	mov	sp, r7
 8012b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b78:	4770      	bx	lr

08012b7a <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 8012b7a:	b480      	push	{r7}
 8012b7c:	b083      	sub	sp, #12
 8012b7e:	af00      	add	r7, sp, #0
 8012b80:	6078      	str	r0, [r7, #4]
    return enabled_;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	7c1b      	ldrb	r3, [r3, #16]
}
 8012b86:	4618      	mov	r0, r3
 8012b88:	370c      	adds	r7, #12
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b90:	4770      	bx	lr
	...

08012b94 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b082      	sub	sp, #8
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
 8012b9c:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	6839      	ldr	r1, [r7, #0]
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f7ff fe7c 	bl	80128a0 <_ZN10TestPluginC1ERK12SimpleString>
 8012ba8:	4a05      	ldr	r2, [pc, #20]	; (8012bc0 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 8012bae:	4b05      	ldr	r3, [pc, #20]	; (8012bc4 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	601a      	str	r2, [r3, #0]
}
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	3708      	adds	r7, #8
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	0802a330 	.word	0x0802a330
 8012bc4:	200009d0 	.word	0x200009d0

08012bc8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 8012bc8:	b480      	push	{r7}
 8012bca:	b087      	sub	sp, #28
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	60f8      	str	r0, [r7, #12]
 8012bd0:	60b9      	str	r1, [r7, #8]
 8012bd2:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8012bd4:	4b0e      	ldr	r3, [pc, #56]	; (8012c10 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	3b01      	subs	r3, #1
 8012bda:	617b      	str	r3, [r7, #20]
 8012bdc:	697b      	ldr	r3, [r7, #20]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	db0d      	blt.n	8012bfe <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 8012be2:	4a0c      	ldr	r2, [pc, #48]	; (8012c14 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8012be4:	697b      	ldr	r3, [r7, #20]
 8012be6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012bea:	490a      	ldr	r1, [pc, #40]	; (8012c14 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8012bec:	697b      	ldr	r3, [r7, #20]
 8012bee:	00db      	lsls	r3, r3, #3
 8012bf0:	440b      	add	r3, r1
 8012bf2:	685b      	ldr	r3, [r3, #4]
 8012bf4:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8012bf6:	697b      	ldr	r3, [r7, #20]
 8012bf8:	3b01      	subs	r3, #1
 8012bfa:	617b      	str	r3, [r7, #20]
 8012bfc:	e7ee      	b.n	8012bdc <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 8012bfe:	4b04      	ldr	r3, [pc, #16]	; (8012c10 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8012c00:	2200      	movs	r2, #0
 8012c02:	601a      	str	r2, [r3, #0]
}
 8012c04:	bf00      	nop
 8012c06:	371c      	adds	r7, #28
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0e:	4770      	bx	lr
 8012c10:	200009d0 	.word	0x200009d0
 8012c14:	200009d4 	.word	0x200009d4

08012c18 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2100      	movs	r1, #0
 8012c24:	4618      	mov	r0, r3
 8012c26:	f7ff fe59 	bl	80128dc <_ZN10TestPluginC1EPS_>
 8012c2a:	4a04      	ldr	r2, [pc, #16]	; (8012c3c <_ZN14NullTestPluginC1Ev+0x24>)
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	601a      	str	r2, [r3, #0]
{
}
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	4618      	mov	r0, r3
 8012c34:	3708      	adds	r7, #8
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}
 8012c3a:	bf00      	nop
 8012c3c:	0802a2ec 	.word	0x0802a2ec

08012c40 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 8012c40:	b580      	push	{r7, lr}
 8012c42:	af00      	add	r7, sp, #0
 8012c44:	4801      	ldr	r0, [pc, #4]	; (8012c4c <__tcf_0+0xc>)
 8012c46:	f000 f849 	bl	8012cdc <_ZN14NullTestPluginD1Ev>
 8012c4a:	bd80      	pop	{r7, pc}
 8012c4c:	20000ad4 	.word	0x20000ad4

08012c50 <_ZN14NullTestPlugin8instanceEv>:
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 8012c54:	4b12      	ldr	r3, [pc, #72]	; (8012ca0 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8012c56:	781b      	ldrb	r3, [r3, #0]
 8012c58:	f3bf 8f5b 	dmb	ish
 8012c5c:	b2db      	uxtb	r3, r3
 8012c5e:	f003 0301 	and.w	r3, r3, #1
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	bf0c      	ite	eq
 8012c66:	2301      	moveq	r3, #1
 8012c68:	2300      	movne	r3, #0
 8012c6a:	b2db      	uxtb	r3, r3
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d013      	beq.n	8012c98 <_ZN14NullTestPlugin8instanceEv+0x48>
 8012c70:	480b      	ldr	r0, [pc, #44]	; (8012ca0 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8012c72:	f00d ffd9 	bl	8020c28 <__cxa_guard_acquire>
 8012c76:	4603      	mov	r3, r0
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	bf14      	ite	ne
 8012c7c:	2301      	movne	r3, #1
 8012c7e:	2300      	moveq	r3, #0
 8012c80:	b2db      	uxtb	r3, r3
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d008      	beq.n	8012c98 <_ZN14NullTestPlugin8instanceEv+0x48>
 8012c86:	4807      	ldr	r0, [pc, #28]	; (8012ca4 <_ZN14NullTestPlugin8instanceEv+0x54>)
 8012c88:	f7ff ffc6 	bl	8012c18 <_ZN14NullTestPluginC1Ev>
 8012c8c:	4804      	ldr	r0, [pc, #16]	; (8012ca0 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8012c8e:	f00d ffd7 	bl	8020c40 <__cxa_guard_release>
 8012c92:	4805      	ldr	r0, [pc, #20]	; (8012ca8 <_ZN14NullTestPlugin8instanceEv+0x58>)
 8012c94:	f00d fffb 	bl	8020c8e <atexit>
    return &_instance;
 8012c98:	4b02      	ldr	r3, [pc, #8]	; (8012ca4 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	bd80      	pop	{r7, pc}
 8012c9e:	bf00      	nop
 8012ca0:	20000ae8 	.word	0x20000ae8
 8012ca4:	20000ad4 	.word	0x20000ad4
 8012ca8:	08012c41 	.word	0x08012c41

08012cac <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 8012cac:	b480      	push	{r7}
 8012cae:	b085      	sub	sp, #20
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	60f8      	str	r0, [r7, #12]
 8012cb4:	60b9      	str	r1, [r7, #8]
 8012cb6:	607a      	str	r2, [r7, #4]
}
 8012cb8:	bf00      	nop
 8012cba:	3714      	adds	r7, #20
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc2:	4770      	bx	lr

08012cc4 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 8012cc4:	b480      	push	{r7}
 8012cc6:	b085      	sub	sp, #20
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	60f8      	str	r0, [r7, #12]
 8012ccc:	60b9      	str	r1, [r7, #8]
 8012cce:	607a      	str	r2, [r7, #4]
}
 8012cd0:	bf00      	nop
 8012cd2:	3714      	adds	r7, #20
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cda:	4770      	bx	lr

08012cdc <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b082      	sub	sp, #8
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	4a05      	ldr	r2, [pc, #20]	; (8012cfc <_ZN14NullTestPluginD1Ev+0x20>)
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	601a      	str	r2, [r3, #0]
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7ff fe13 	bl	8012918 <_ZN10TestPluginD1Ev>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3708      	adds	r7, #8
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	0802a2ec 	.word	0x0802a2ec

08012d00 <_ZN14NullTestPluginD0Ev>:
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f7ff ffe7 	bl	8012cdc <_ZN14NullTestPluginD1Ev>
 8012d0e:	2114      	movs	r1, #20
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f7f8 fd1b 	bl	800b74c <_ZdlPvj>
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	4618      	mov	r0, r3
 8012d1a:	3708      	adds	r7, #8
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}

08012d20 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b082      	sub	sp, #8
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 8012d28:	4a0f      	ldr	r2, [pc, #60]	; (8012d68 <_ZN12TestRegistryC1Ev+0x48>)
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	601a      	str	r2, [r3, #0]
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	2200      	movs	r2, #0
 8012d32:	605a      	str	r2, [r3, #4]
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	2200      	movs	r2, #0
 8012d38:	609a      	str	r2, [r3, #8]
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	60da      	str	r2, [r3, #12]
 8012d40:	f7ff ff86 	bl	8012c50 <_ZN14NullTestPlugin8instanceEv>
 8012d44:	4602      	mov	r2, r0
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	611a      	str	r2, [r3, #16]
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	751a      	strb	r2, [r3, #20]
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	2200      	movs	r2, #0
 8012d54:	619a      	str	r2, [r3, #24]
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	2200      	movs	r2, #0
 8012d5a:	771a      	strb	r2, [r3, #28]
{
}
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	4618      	mov	r0, r3
 8012d60:	3708      	adds	r7, #8
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd80      	pop	{r7, pc}
 8012d66:	bf00      	nop
 8012d68:	0802a3b8 	.word	0x0802a3b8

08012d6c <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 8012d6c:	b480      	push	{r7}
 8012d6e:	b083      	sub	sp, #12
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
 8012d74:	4a04      	ldr	r2, [pc, #16]	; (8012d88 <_ZN12TestRegistryD1Ev+0x1c>)
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	601a      	str	r2, [r3, #0]
{
}
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	370c      	adds	r7, #12
 8012d80:	46bd      	mov	sp, r7
 8012d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d86:	4770      	bx	lr
 8012d88:	0802a3b8 	.word	0x0802a3b8

08012d8c <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b082      	sub	sp, #8
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
}
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f7ff ffe9 	bl	8012d6c <_ZN12TestRegistryD1Ev>
 8012d9a:	2120      	movs	r1, #32
 8012d9c:	6878      	ldr	r0, [r7, #4]
 8012d9e:	f7f8 fcd5 	bl	800b74c <_ZdlPvj>
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	4618      	mov	r0, r3
 8012da6:	3708      	adds	r7, #8
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd80      	pop	{r7, pc}

08012dac <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b082      	sub	sp, #8
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
 8012db4:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	3308      	adds	r3, #8
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	687a      	ldr	r2, [r7, #4]
 8012dc0:	6852      	ldr	r2, [r2, #4]
 8012dc2:	4611      	mov	r1, r2
 8012dc4:	6838      	ldr	r0, [r7, #0]
 8012dc6:	4798      	blx	r3
 8012dc8:	4602      	mov	r2, r0
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	605a      	str	r2, [r3, #4]
}
 8012dce:	bf00      	nop
 8012dd0:	3708      	adds	r7, #8
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd80      	pop	{r7, pc}

08012dd6 <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 8012dd6:	b580      	push	{r7, lr}
 8012dd8:	b084      	sub	sp, #16
 8012dda:	af00      	add	r7, sp, #0
 8012ddc:	6078      	str	r0, [r7, #4]
 8012dde:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 8012de0:	2301      	movs	r3, #1
 8012de2:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	3308      	adds	r3, #8
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	6838      	ldr	r0, [r7, #0]
 8012dee:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	685b      	ldr	r3, [r3, #4]
 8012df4:	60bb      	str	r3, [r7, #8]
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d05c      	beq.n	8012eb6 <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	7d1b      	ldrb	r3, [r3, #20]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d005      	beq.n	8012e10 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 8012e04:	68bb      	ldr	r3, [r7, #8]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	3380      	adds	r3, #128	; 0x80
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	68b8      	ldr	r0, [r7, #8]
 8012e0e:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	7f1b      	ldrb	r3, [r3, #28]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d005      	beq.n	8012e24 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	3384      	adds	r3, #132	; 0x84
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	68b8      	ldr	r0, [r7, #8]
 8012e22:	4798      	blx	r3

        if (groupStart) {
 8012e24:	7bfb      	ldrb	r3, [r7, #15]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d008      	beq.n	8012e3c <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 8012e2a:	683b      	ldr	r3, [r7, #0]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	3310      	adds	r3, #16
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	68b9      	ldr	r1, [r7, #8]
 8012e34:	6838      	ldr	r0, [r7, #0]
 8012e36:	4798      	blx	r3
            groupStart = false;
 8012e38:	2300      	movs	r3, #0
 8012e3a:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 8012e3c:	683b      	ldr	r3, [r7, #0]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	3320      	adds	r3, #32
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	6838      	ldr	r0, [r7, #0]
 8012e46:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 8012e48:	683a      	ldr	r2, [r7, #0]
 8012e4a:	68b9      	ldr	r1, [r7, #8]
 8012e4c:	6878      	ldr	r0, [r7, #4]
 8012e4e:	f000 fb79 	bl	8013544 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8012e52:	4603      	mov	r3, r0
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d016      	beq.n	8012e86 <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	3318      	adds	r3, #24
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	68b9      	ldr	r1, [r7, #8]
 8012e62:	6838      	ldr	r0, [r7, #0]
 8012e64:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	3390      	adds	r3, #144	; 0x90
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	687a      	ldr	r2, [r7, #4]
 8012e70:	6911      	ldr	r1, [r2, #16]
 8012e72:	683a      	ldr	r2, [r7, #0]
 8012e74:	68b8      	ldr	r0, [r7, #8]
 8012e76:	4798      	blx	r3
            result.currentTestEnded(test);
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	331c      	adds	r3, #28
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	68b9      	ldr	r1, [r7, #8]
 8012e82:	6838      	ldr	r0, [r7, #0]
 8012e84:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 8012e86:	68b9      	ldr	r1, [r7, #8]
 8012e88:	6878      	ldr	r0, [r7, #4]
 8012e8a:	f000 fa5b 	bl	8013344 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d008      	beq.n	8012ea6 <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 8012e94:	2301      	movs	r3, #1
 8012e96:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 8012e98:	683b      	ldr	r3, [r7, #0]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	3314      	adds	r3, #20
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	68b9      	ldr	r1, [r7, #8]
 8012ea2:	6838      	ldr	r0, [r7, #0]
 8012ea4:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	330c      	adds	r3, #12
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	68b8      	ldr	r0, [r7, #8]
 8012eb0:	4798      	blx	r3
 8012eb2:	60b8      	str	r0, [r7, #8]
 8012eb4:	e79f      	b.n	8012df6 <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	330c      	adds	r3, #12
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	6838      	ldr	r0, [r7, #0]
 8012ec0:	4798      	blx	r3
    currentRepetition_++;
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	699b      	ldr	r3, [r3, #24]
 8012ec6:	1c5a      	adds	r2, r3, #1
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	619a      	str	r2, [r3, #24]
}
 8012ecc:	bf00      	nop
 8012ece:	3710      	adds	r7, #16
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}

08012ed4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 8012ed4:	b590      	push	{r4, r7, lr}
 8012ed6:	b08f      	sub	sp, #60	; 0x3c
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
 8012edc:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 8012ede:	f107 0314 	add.w	r3, r7, #20
 8012ee2:	4953      	ldr	r1, [pc, #332]	; (8013030 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f7fa ffe0 	bl	800deaa <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	685b      	ldr	r3, [r3, #4]
 8012eee:	637b      	str	r3, [r7, #52]	; 0x34
 8012ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d04d      	beq.n	8012f92 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 8012ef6:	f107 030c 	add.w	r3, r7, #12
 8012efa:	494d      	ldr	r1, [pc, #308]	; (8013030 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7fa ffd4 	bl	800deaa <_ZN12SimpleStringC1EPKc>
        gname += "#";
 8012f02:	f107 030c 	add.w	r3, r7, #12
 8012f06:	494b      	ldr	r1, [pc, #300]	; (8013034 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f7fb fc15 	bl	800e738 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 8012f0e:	f107 031c 	add.w	r3, r7, #28
 8012f12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012f14:	4618      	mov	r0, r3
 8012f16:	f001 f9d2 	bl	80142be <_ZNK10UtestShell8getGroupEv>
 8012f1a:	f107 021c 	add.w	r2, r7, #28
 8012f1e:	f107 030c 	add.w	r3, r7, #12
 8012f22:	4611      	mov	r1, r2
 8012f24:	4618      	mov	r0, r3
 8012f26:	f7fb fbf5 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 8012f2a:	f107 031c 	add.w	r3, r7, #28
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f7fb fb73 	bl	800e61a <_ZN12SimpleStringD1Ev>
        gname += "#";
 8012f34:	f107 030c 	add.w	r3, r7, #12
 8012f38:	493e      	ldr	r1, [pc, #248]	; (8013034 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	f7fb fbfc 	bl	800e738 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 8012f40:	f107 020c 	add.w	r2, r7, #12
 8012f44:	f107 0314 	add.w	r3, r7, #20
 8012f48:	4611      	mov	r1, r2
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f7fb f82b 	bl	800dfa6 <_ZNK12SimpleString8containsERKS_>
 8012f50:	4603      	mov	r3, r0
 8012f52:	f083 0301 	eor.w	r3, r3, #1
 8012f56:	b2db      	uxtb	r3, r3
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d00d      	beq.n	8012f78 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 8012f5c:	f107 020c 	add.w	r2, r7, #12
 8012f60:	f107 0314 	add.w	r3, r7, #20
 8012f64:	4611      	mov	r1, r2
 8012f66:	4618      	mov	r0, r3
 8012f68:	f7fb fbd4 	bl	800e714 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 8012f6c:	f107 0314 	add.w	r3, r7, #20
 8012f70:	4931      	ldr	r1, [pc, #196]	; (8013038 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7fb fbe0 	bl	800e738 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 8012f78:	f107 030c 	add.w	r3, r7, #12
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	f7fb fb4c 	bl	800e61a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8012f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	330c      	adds	r3, #12
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012f8c:	4798      	blx	r3
 8012f8e:	6378      	str	r0, [r7, #52]	; 0x34
 8012f90:	e7ae      	b.n	8012ef0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 8012f92:	f107 0314 	add.w	r3, r7, #20
 8012f96:	4a26      	ldr	r2, [pc, #152]	; (8013030 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8012f98:	4926      	ldr	r1, [pc, #152]	; (8013034 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7fb f99a 	bl	800e2d4 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 8012fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012fa4:	4924      	ldr	r1, [pc, #144]	; (8013038 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f7fa ff7f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8012fac:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012fb0:	f107 0314 	add.w	r3, r7, #20
 8012fb4:	4611      	mov	r1, r2
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f7fb f874 	bl	800e0a4 <_ZNK12SimpleString8endsWithERKS_>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	461c      	mov	r4, r3
 8012fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f7fb fb28 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8012fca:	2c00      	cmp	r4, #0
 8012fcc:	d01a      	beq.n	8013004 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 8012fce:	f107 0314 	add.w	r3, r7, #20
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f7fb fb00 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	3b01      	subs	r3, #1
 8012fdc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8012fe0:	f107 0114 	add.w	r1, r7, #20
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	f7fb fc21 	bl	800e82c <_ZNK12SimpleString9subStringEjj>
 8012fea:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012fee:	f107 0314 	add.w	r3, r7, #20
 8012ff2:	4611      	mov	r1, r2
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f7fa ffc4 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 8012ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ffe:	4618      	mov	r0, r3
 8013000:	f7fb fb0b 	bl	800e61a <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 8013004:	683b      	ldr	r3, [r7, #0]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	3338      	adds	r3, #56	; 0x38
 801300a:	681c      	ldr	r4, [r3, #0]
 801300c:	f107 0314 	add.w	r3, r7, #20
 8013010:	4618      	mov	r0, r3
 8013012:	f7fb fad5 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 8013016:	4603      	mov	r3, r0
 8013018:	4619      	mov	r1, r3
 801301a:	6838      	ldr	r0, [r7, #0]
 801301c:	47a0      	blx	r4
    SimpleString groupList;
 801301e:	f107 0314 	add.w	r3, r7, #20
 8013022:	4618      	mov	r0, r3
 8013024:	f7fb faf9 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8013028:	bf00      	nop
 801302a:	373c      	adds	r7, #60	; 0x3c
 801302c:	46bd      	mov	sp, r7
 801302e:	bd90      	pop	{r4, r7, pc}
 8013030:	080267a8 	.word	0x080267a8
 8013034:	080267ac 	.word	0x080267ac
 8013038:	080267b0 	.word	0x080267b0

0801303c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 801303c:	b590      	push	{r4, r7, lr}
 801303e:	b091      	sub	sp, #68	; 0x44
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
 8013044:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 8013046:	f107 0314 	add.w	r3, r7, #20
 801304a:	4964      	ldr	r1, [pc, #400]	; (80131dc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 801304c:	4618      	mov	r0, r3
 801304e:	f7fa ff2c 	bl	800deaa <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	685b      	ldr	r3, [r3, #4]
 8013056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801305a:	2b00      	cmp	r3, #0
 801305c:	d06e      	beq.n	801313c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 801305e:	683a      	ldr	r2, [r7, #0]
 8013060:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013062:	6878      	ldr	r0, [r7, #4]
 8013064:	f000 fa6e 	bl	8013544 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8013068:	4603      	mov	r3, r0
 801306a:	2b00      	cmp	r3, #0
 801306c:	d05e      	beq.n	801312c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 801306e:	f107 030c 	add.w	r3, r7, #12
 8013072:	495a      	ldr	r1, [pc, #360]	; (80131dc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8013074:	4618      	mov	r0, r3
 8013076:	f7fa ff18 	bl	800deaa <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 801307a:	f107 030c 	add.w	r3, r7, #12
 801307e:	4958      	ldr	r1, [pc, #352]	; (80131e0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8013080:	4618      	mov	r0, r3
 8013082:	f7fb fb59 	bl	800e738 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 8013086:	f107 031c 	add.w	r3, r7, #28
 801308a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801308c:	4618      	mov	r0, r3
 801308e:	f001 f916 	bl	80142be <_ZNK10UtestShell8getGroupEv>
 8013092:	f107 021c 	add.w	r2, r7, #28
 8013096:	f107 030c 	add.w	r3, r7, #12
 801309a:	4611      	mov	r1, r2
 801309c:	4618      	mov	r0, r3
 801309e:	f7fb fb39 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 80130a2:	f107 031c 	add.w	r3, r7, #28
 80130a6:	4618      	mov	r0, r3
 80130a8:	f7fb fab7 	bl	800e61a <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 80130ac:	f107 030c 	add.w	r3, r7, #12
 80130b0:	494c      	ldr	r1, [pc, #304]	; (80131e4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7fb fb40 	bl	800e738 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 80130b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80130bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80130be:	4618      	mov	r0, r3
 80130c0:	f001 f8ee 	bl	80142a0 <_ZNK10UtestShell7getNameEv>
 80130c4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80130c8:	f107 030c 	add.w	r3, r7, #12
 80130cc:	4611      	mov	r1, r2
 80130ce:	4618      	mov	r0, r3
 80130d0:	f7fb fb20 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 80130d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80130d8:	4618      	mov	r0, r3
 80130da:	f7fb fa9e 	bl	800e61a <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 80130de:	f107 030c 	add.w	r3, r7, #12
 80130e2:	493f      	ldr	r1, [pc, #252]	; (80131e0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 80130e4:	4618      	mov	r0, r3
 80130e6:	f7fb fb27 	bl	800e738 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 80130ea:	f107 020c 	add.w	r2, r7, #12
 80130ee:	f107 0314 	add.w	r3, r7, #20
 80130f2:	4611      	mov	r1, r2
 80130f4:	4618      	mov	r0, r3
 80130f6:	f7fa ff56 	bl	800dfa6 <_ZNK12SimpleString8containsERKS_>
 80130fa:	4603      	mov	r3, r0
 80130fc:	f083 0301 	eor.w	r3, r3, #1
 8013100:	b2db      	uxtb	r3, r3
 8013102:	2b00      	cmp	r3, #0
 8013104:	d00d      	beq.n	8013122 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 8013106:	f107 020c 	add.w	r2, r7, #12
 801310a:	f107 0314 	add.w	r3, r7, #20
 801310e:	4611      	mov	r1, r2
 8013110:	4618      	mov	r0, r3
 8013112:	f7fb faff 	bl	800e714 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 8013116:	f107 0314 	add.w	r3, r7, #20
 801311a:	4933      	ldr	r1, [pc, #204]	; (80131e8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 801311c:	4618      	mov	r0, r3
 801311e:	f7fb fb0b 	bl	800e738 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 8013122:	f107 030c 	add.w	r3, r7, #12
 8013126:	4618      	mov	r0, r3
 8013128:	f7fb fa77 	bl	800e61a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801312c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	330c      	adds	r3, #12
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013136:	4798      	blx	r3
 8013138:	63f8      	str	r0, [r7, #60]	; 0x3c
 801313a:	e78d      	b.n	8013058 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 801313c:	f107 0314 	add.w	r3, r7, #20
 8013140:	4a26      	ldr	r2, [pc, #152]	; (80131dc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8013142:	4927      	ldr	r1, [pc, #156]	; (80131e0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8013144:	4618      	mov	r0, r3
 8013146:	f7fb f8c5 	bl	800e2d4 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 801314a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801314e:	4926      	ldr	r1, [pc, #152]	; (80131e8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8013150:	4618      	mov	r0, r3
 8013152:	f7fa feaa 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8013156:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801315a:	f107 0314 	add.w	r3, r7, #20
 801315e:	4611      	mov	r1, r2
 8013160:	4618      	mov	r0, r3
 8013162:	f7fa ff9f 	bl	800e0a4 <_ZNK12SimpleString8endsWithERKS_>
 8013166:	4603      	mov	r3, r0
 8013168:	461c      	mov	r4, r3
 801316a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801316e:	4618      	mov	r0, r3
 8013170:	f7fb fa53 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8013174:	2c00      	cmp	r4, #0
 8013176:	d01a      	beq.n	80131ae <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 8013178:	f107 0314 	add.w	r3, r7, #20
 801317c:	4618      	mov	r0, r3
 801317e:	f7fb fa2b 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 8013182:	4603      	mov	r3, r0
 8013184:	3b01      	subs	r3, #1
 8013186:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801318a:	f107 0114 	add.w	r1, r7, #20
 801318e:	2200      	movs	r2, #0
 8013190:	f7fb fb4c 	bl	800e82c <_ZNK12SimpleString9subStringEjj>
 8013194:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8013198:	f107 0314 	add.w	r3, r7, #20
 801319c:	4611      	mov	r1, r2
 801319e:	4618      	mov	r0, r3
 80131a0:	f7fa feef 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 80131a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80131a8:	4618      	mov	r0, r3
 80131aa:	f7fb fa36 	bl	800e61a <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 80131ae:	683b      	ldr	r3, [r7, #0]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	3338      	adds	r3, #56	; 0x38
 80131b4:	681c      	ldr	r4, [r3, #0]
 80131b6:	f107 0314 	add.w	r3, r7, #20
 80131ba:	4618      	mov	r0, r3
 80131bc:	f7fb fa00 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 80131c0:	4603      	mov	r3, r0
 80131c2:	4619      	mov	r1, r3
 80131c4:	6838      	ldr	r0, [r7, #0]
 80131c6:	47a0      	blx	r4
    SimpleString groupAndNameList;
 80131c8:	f107 0314 	add.w	r3, r7, #20
 80131cc:	4618      	mov	r0, r3
 80131ce:	f7fb fa24 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 80131d2:	bf00      	nop
 80131d4:	3744      	adds	r7, #68	; 0x44
 80131d6:	46bd      	mov	sp, r7
 80131d8:	bd90      	pop	{r4, r7, pc}
 80131da:	bf00      	nop
 80131dc:	080267a8 	.word	0x080267a8
 80131e0:	080267ac 	.word	0x080267ac
 80131e4:	080267b4 	.word	0x080267b4
 80131e8:	080267b0 	.word	0x080267b0

080131ec <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 80131ec:	b590      	push	{r4, r7, lr}
 80131ee:	b091      	sub	sp, #68	; 0x44
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
 80131f4:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 80131f6:	f107 0314 	add.w	r3, r7, #20
 80131fa:	494f      	ldr	r1, [pc, #316]	; (8013338 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 80131fc:	4618      	mov	r0, r3
 80131fe:	f7fa fe54 	bl	800deaa <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	685b      	ldr	r3, [r3, #4]
 8013206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801320a:	2b00      	cmp	r3, #0
 801320c:	d07d      	beq.n	801330a <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 801320e:	f107 030c 	add.w	r3, r7, #12
 8013212:	4949      	ldr	r1, [pc, #292]	; (8013338 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 8013214:	4618      	mov	r0, r3
 8013216:	f7fa fe48 	bl	800deaa <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 801321a:	f107 031c 	add.w	r3, r7, #28
 801321e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013220:	4618      	mov	r0, r3
 8013222:	f001 f84c 	bl	80142be <_ZNK10UtestShell8getGroupEv>
 8013226:	f107 021c 	add.w	r2, r7, #28
 801322a:	f107 030c 	add.w	r3, r7, #12
 801322e:	4611      	mov	r1, r2
 8013230:	4618      	mov	r0, r3
 8013232:	f7fb fa6f 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 8013236:	f107 031c 	add.w	r3, r7, #28
 801323a:	4618      	mov	r0, r3
 801323c:	f7fb f9ed 	bl	800e61a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8013240:	f107 030c 	add.w	r3, r7, #12
 8013244:	493d      	ldr	r1, [pc, #244]	; (801333c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8013246:	4618      	mov	r0, r3
 8013248:	f7fb fa76 	bl	800e738 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 801324c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013250:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013252:	4618      	mov	r0, r3
 8013254:	f001 f824 	bl	80142a0 <_ZNK10UtestShell7getNameEv>
 8013258:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801325c:	f107 030c 	add.w	r3, r7, #12
 8013260:	4611      	mov	r1, r2
 8013262:	4618      	mov	r0, r3
 8013264:	f7fb fa56 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 8013268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801326c:	4618      	mov	r0, r3
 801326e:	f7fb f9d4 	bl	800e61a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8013272:	f107 030c 	add.w	r3, r7, #12
 8013276:	4931      	ldr	r1, [pc, #196]	; (801333c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8013278:	4618      	mov	r0, r3
 801327a:	f7fb fa5d 	bl	800e738 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 801327e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013282:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013284:	4618      	mov	r0, r3
 8013286:	f001 f8dc 	bl	8014442 <_ZNK10UtestShell7getFileEv>
 801328a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801328e:	f107 030c 	add.w	r3, r7, #12
 8013292:	4611      	mov	r1, r2
 8013294:	4618      	mov	r0, r3
 8013296:	f7fb fa3d 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801329a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801329e:	4618      	mov	r0, r3
 80132a0:	f7fb f9bb 	bl	800e61a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 80132a4:	f107 030c 	add.w	r3, r7, #12
 80132a8:	4924      	ldr	r1, [pc, #144]	; (801333c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7fb fa44 	bl	800e738 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 80132b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80132b2:	f001 f8d5 	bl	8014460 <_ZNK10UtestShell13getLineNumberEv>
 80132b6:	4603      	mov	r3, r0
 80132b8:	461a      	mov	r2, r3
 80132ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80132be:	4920      	ldr	r1, [pc, #128]	; (8013340 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 80132c0:	4618      	mov	r0, r3
 80132c2:	f7fb feb1 	bl	800f028 <_Z16StringFromFormatPKcz>
 80132c6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80132ca:	f107 030c 	add.w	r3, r7, #12
 80132ce:	4611      	mov	r1, r2
 80132d0:	4618      	mov	r0, r3
 80132d2:	f7fb fa1f 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 80132d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80132da:	4618      	mov	r0, r3
 80132dc:	f7fb f99d 	bl	800e61a <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 80132e0:	f107 020c 	add.w	r2, r7, #12
 80132e4:	f107 0314 	add.w	r3, r7, #20
 80132e8:	4611      	mov	r1, r2
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7fb fa12 	bl	800e714 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 80132f0:	f107 030c 	add.w	r3, r7, #12
 80132f4:	4618      	mov	r0, r3
 80132f6:	f7fb f990 	bl	800e61a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80132fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	330c      	adds	r3, #12
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013304:	4798      	blx	r3
 8013306:	63f8      	str	r0, [r7, #60]	; 0x3c
 8013308:	e77e      	b.n	8013208 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	3338      	adds	r3, #56	; 0x38
 8013310:	681c      	ldr	r4, [r3, #0]
 8013312:	f107 0314 	add.w	r3, r7, #20
 8013316:	4618      	mov	r0, r3
 8013318:	f7fb f952 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801331c:	4603      	mov	r3, r0
 801331e:	4619      	mov	r1, r3
 8013320:	6838      	ldr	r0, [r7, #0]
 8013322:	47a0      	blx	r4
    SimpleString testLocations;
 8013324:	f107 0314 	add.w	r3, r7, #20
 8013328:	4618      	mov	r0, r3
 801332a:	f7fb f976 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 801332e:	bf00      	nop
 8013330:	3744      	adds	r7, #68	; 0x44
 8013332:	46bd      	mov	sp, r7
 8013334:	bd90      	pop	{r4, r7, pc}
 8013336:	bf00      	nop
 8013338:	080267a8 	.word	0x080267a8
 801333c:	080267b4 	.word	0x080267b4
 8013340:	080267b8 	.word	0x080267b8

08013344 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 8013344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013346:	b087      	sub	sp, #28
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 801334e:	2400      	movs	r4, #0
 8013350:	2500      	movs	r5, #0
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d028      	beq.n	80133aa <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 8013358:	683b      	ldr	r3, [r7, #0]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	330c      	adds	r3, #12
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	6838      	ldr	r0, [r7, #0]
 8013362:	4798      	blx	r3
 8013364:	4603      	mov	r3, r0
 8013366:	2b00      	cmp	r3, #0
 8013368:	d01f      	beq.n	80133aa <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 801336a:	f107 0308 	add.w	r3, r7, #8
 801336e:	6839      	ldr	r1, [r7, #0]
 8013370:	4618      	mov	r0, r3
 8013372:	f000 ffa4 	bl	80142be <_ZNK10UtestShell8getGroupEv>
 8013376:	2401      	movs	r4, #1
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	330c      	adds	r3, #12
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	6838      	ldr	r0, [r7, #0]
 8013382:	4798      	blx	r3
 8013384:	4602      	mov	r2, r0
 8013386:	f107 0310 	add.w	r3, r7, #16
 801338a:	4611      	mov	r1, r2
 801338c:	4618      	mov	r0, r3
 801338e:	f000 ff96 	bl	80142be <_ZNK10UtestShell8getGroupEv>
 8013392:	2501      	movs	r5, #1
 8013394:	f107 0210 	add.w	r2, r7, #16
 8013398:	f107 0308 	add.w	r3, r7, #8
 801339c:	4611      	mov	r1, r2
 801339e:	4618      	mov	r0, r3
 80133a0:	f7fb f98c 	bl	800e6bc <_ZneRK12SimpleStringS1_>
 80133a4:	4603      	mov	r3, r0
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d001      	beq.n	80133ae <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 80133aa:	2601      	movs	r6, #1
 80133ac:	e000      	b.n	80133b0 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 80133ae:	2600      	movs	r6, #0
 80133b0:	2d00      	cmp	r5, #0
 80133b2:	d004      	beq.n	80133be <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 80133b4:	f107 0310 	add.w	r3, r7, #16
 80133b8:	4618      	mov	r0, r3
 80133ba:	f7fb f92e 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80133be:	2c00      	cmp	r4, #0
 80133c0:	d004      	beq.n	80133cc <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 80133c2:	f107 0308 	add.w	r3, r7, #8
 80133c6:	4618      	mov	r0, r3
 80133c8:	f7fb f927 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80133cc:	4633      	mov	r3, r6
}
 80133ce:	4618      	mov	r0, r3
 80133d0:	371c      	adds	r7, #28
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080133d6 <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 80133d6:	b580      	push	{r7, lr}
 80133d8:	b082      	sub	sp, #8
 80133da:	af00      	add	r7, sp, #0
 80133dc:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	685b      	ldr	r3, [r3, #4]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d00a      	beq.n	80133fc <_ZN12TestRegistry10countTestsEv+0x26>
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	685a      	ldr	r2, [r3, #4]
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	685b      	ldr	r3, [r3, #4]
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	3310      	adds	r3, #16
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	4610      	mov	r0, r2
 80133f6:	4798      	blx	r3
 80133f8:	4603      	mov	r3, r0
 80133fa:	e000      	b.n	80133fe <_ZN12TestRegistry10countTestsEv+0x28>
 80133fc:	2300      	movs	r3, #0
}
 80133fe:	4618      	mov	r0, r3
 8013400:	3708      	adds	r7, #8
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}
	...

08013408 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 8013408:	b580      	push	{r7, lr}
 801340a:	af00      	add	r7, sp, #0
 801340c:	4801      	ldr	r0, [pc, #4]	; (8013414 <__tcf_0+0xc>)
 801340e:	f7ff fcad 	bl	8012d6c <_ZN12TestRegistryD1Ev>
 8013412:	bd80      	pop	{r7, pc}
 8013414:	20000af0 	.word	0x20000af0

08013418 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 8013418:	b580      	push	{r7, lr}
 801341a:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 801341c:	4b15      	ldr	r3, [pc, #84]	; (8013474 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 801341e:	781b      	ldrb	r3, [r3, #0]
 8013420:	f3bf 8f5b 	dmb	ish
 8013424:	b2db      	uxtb	r3, r3
 8013426:	f003 0301 	and.w	r3, r3, #1
 801342a:	2b00      	cmp	r3, #0
 801342c:	bf0c      	ite	eq
 801342e:	2301      	moveq	r3, #1
 8013430:	2300      	movne	r3, #0
 8013432:	b2db      	uxtb	r3, r3
 8013434:	2b00      	cmp	r3, #0
 8013436:	d013      	beq.n	8013460 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8013438:	480e      	ldr	r0, [pc, #56]	; (8013474 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 801343a:	f00d fbf5 	bl	8020c28 <__cxa_guard_acquire>
 801343e:	4603      	mov	r3, r0
 8013440:	2b00      	cmp	r3, #0
 8013442:	bf14      	ite	ne
 8013444:	2301      	movne	r3, #1
 8013446:	2300      	moveq	r3, #0
 8013448:	b2db      	uxtb	r3, r3
 801344a:	2b00      	cmp	r3, #0
 801344c:	d008      	beq.n	8013460 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 801344e:	480a      	ldr	r0, [pc, #40]	; (8013478 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 8013450:	f7ff fc66 	bl	8012d20 <_ZN12TestRegistryC1Ev>
 8013454:	4807      	ldr	r0, [pc, #28]	; (8013474 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8013456:	f00d fbf3 	bl	8020c40 <__cxa_guard_release>
 801345a:	4808      	ldr	r0, [pc, #32]	; (801347c <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 801345c:	f00d fc17 	bl	8020c8e <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 8013460:	4b07      	ldr	r3, [pc, #28]	; (8013480 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d002      	beq.n	801346e <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 8013468:	4b05      	ldr	r3, [pc, #20]	; (8013480 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	e000      	b.n	8013470 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 801346e:	4b02      	ldr	r3, [pc, #8]	; (8013478 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 8013470:	4618      	mov	r0, r3
 8013472:	bd80      	pop	{r7, pc}
 8013474:	20000b10 	.word	0x20000b10
 8013478:	20000af0 	.word	0x20000af0
 801347c:	08013409 	.word	0x08013409
 8013480:	20000aec 	.word	0x20000aec

08013484 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 8013484:	b480      	push	{r7}
 8013486:	b083      	sub	sp, #12
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
 801348c:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 801348e:	4a04      	ldr	r2, [pc, #16]	; (80134a0 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	6013      	str	r3, [r2, #0]
}
 8013494:	bf00      	nop
 8013496:	370c      	adds	r7, #12
 8013498:	46bd      	mov	sp, r7
 801349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349e:	4770      	bx	lr
 80134a0:	20000aec 	.word	0x20000aec

080134a4 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b082      	sub	sp, #8
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	685b      	ldr	r3, [r3, #4]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d00a      	beq.n	80134ca <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	685a      	ldr	r2, [r3, #4]
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	685b      	ldr	r3, [r3, #4]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	330c      	adds	r3, #12
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	4610      	mov	r0, r2
 80134c4:	4798      	blx	r3
 80134c6:	4603      	mov	r3, r0
 80134c8:	e000      	b.n	80134cc <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 80134ca:	2300      	movs	r3, #0
 80134cc:	687a      	ldr	r2, [r7, #4]
 80134ce:	6053      	str	r3, [r2, #4]

}
 80134d0:	bf00      	nop
 80134d2:	3708      	adds	r7, #8
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}

080134d8 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 80134d8:	b480      	push	{r7}
 80134da:	b083      	sub	sp, #12
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	683a      	ldr	r2, [r7, #0]
 80134e6:	609a      	str	r2, [r3, #8]
}
 80134e8:	bf00      	nop
 80134ea:	370c      	adds	r7, #12
 80134ec:	46bd      	mov	sp, r7
 80134ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f2:	4770      	bx	lr

080134f4 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 80134f4:	b480      	push	{r7}
 80134f6:	b083      	sub	sp, #12
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
 80134fc:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	683a      	ldr	r2, [r7, #0]
 8013502:	60da      	str	r2, [r3, #12]
}
 8013504:	bf00      	nop
 8013506:	370c      	adds	r7, #12
 8013508:	46bd      	mov	sp, r7
 801350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350e:	4770      	bx	lr

08013510 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 8013510:	b480      	push	{r7}
 8013512:	b083      	sub	sp, #12
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	2201      	movs	r2, #1
 801351c:	771a      	strb	r2, [r3, #28]
}
 801351e:	bf00      	nop
 8013520:	370c      	adds	r7, #12
 8013522:	46bd      	mov	sp, r7
 8013524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013528:	4770      	bx	lr

0801352a <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 801352a:	b480      	push	{r7}
 801352c:	b083      	sub	sp, #12
 801352e:	af00      	add	r7, sp, #0
 8013530:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	2201      	movs	r2, #1
 8013536:	751a      	strb	r2, [r3, #20]
}
 8013538:	bf00      	nop
 801353a:	370c      	adds	r7, #12
 801353c:	46bd      	mov	sp, r7
 801353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013542:	4770      	bx	lr

08013544 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b084      	sub	sp, #16
 8013548:	af00      	add	r7, sp, #0
 801354a:	60f8      	str	r0, [r7, #12]
 801354c:	60b9      	str	r1, [r7, #8]
 801354e:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	68d9      	ldr	r1, [r3, #12]
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	689b      	ldr	r3, [r3, #8]
 8013558:	461a      	mov	r2, r3
 801355a:	68b8      	ldr	r0, [r7, #8]
 801355c:	f000 ffbb 	bl	80144d6 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 8013560:	4603      	mov	r3, r0
 8013562:	2b00      	cmp	r3, #0
 8013564:	d001      	beq.n	801356a <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 8013566:	2301      	movs	r3, #1
 8013568:	e006      	b.n	8013578 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	332c      	adds	r3, #44	; 0x2c
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	6878      	ldr	r0, [r7, #4]
 8013574:	4798      	blx	r3
        return false;
 8013576:	2300      	movs	r3, #0
    }
}
 8013578:	4618      	mov	r0, r3
 801357a:	3710      	adds	r7, #16
 801357c:	46bd      	mov	sp, r7
 801357e:	bd80      	pop	{r7, pc}

08013580 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 8013580:	b580      	push	{r7, lr}
 8013582:	b082      	sub	sp, #8
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 8013588:	f7ff fb62 	bl	8012c50 <_ZN14NullTestPlugin8instanceEv>
 801358c:	4602      	mov	r2, r0
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	611a      	str	r2, [r3, #16]
}
 8013592:	bf00      	nop
 8013594:	3708      	adds	r7, #8
 8013596:	46bd      	mov	sp, r7
 8013598:	bd80      	pop	{r7, pc}

0801359a <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 801359a:	b580      	push	{r7, lr}
 801359c:	b082      	sub	sp, #8
 801359e:	af00      	add	r7, sp, #0
 80135a0:	6078      	str	r0, [r7, #4]
 80135a2:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	3324      	adds	r3, #36	; 0x24
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	687a      	ldr	r2, [r7, #4]
 80135ae:	6912      	ldr	r2, [r2, #16]
 80135b0:	4611      	mov	r1, r2
 80135b2:	6838      	ldr	r0, [r7, #0]
 80135b4:	4798      	blx	r3
 80135b6:	4602      	mov	r2, r0
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	611a      	str	r2, [r3, #16]
}
 80135bc:	bf00      	nop
 80135be:	3708      	adds	r7, #8
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}

080135c4 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 80135c4:	b480      	push	{r7}
 80135c6:	b083      	sub	sp, #12
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	691b      	ldr	r3, [r3, #16]
}
 80135d0:	4618      	mov	r0, r3
 80135d2:	370c      	adds	r7, #12
 80135d4:	46bd      	mov	sp, r7
 80135d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135da:	4770      	bx	lr

080135dc <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b082      	sub	sp, #8
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
 80135e4:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	691b      	ldr	r3, [r3, #16]
 80135ea:	6839      	ldr	r1, [r7, #0]
 80135ec:	4618      	mov	r0, r3
 80135ee:	f7ff fa52 	bl	8012a96 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 80135f2:	4603      	mov	r3, r0
}
 80135f4:	4618      	mov	r0, r3
 80135f6:	3708      	adds	r7, #8
 80135f8:	46bd      	mov	sp, r7
 80135fa:	bd80      	pop	{r7, pc}

080135fc <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b082      	sub	sp, #8
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
 8013604:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	691a      	ldr	r2, [r3, #16]
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	691b      	ldr	r3, [r3, #16]
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	3328      	adds	r3, #40	; 0x28
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	6839      	ldr	r1, [r7, #0]
 8013616:	4610      	mov	r0, r2
 8013618:	4798      	blx	r3
 801361a:	4602      	mov	r2, r0
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	691b      	ldr	r3, [r3, #16]
 8013620:	429a      	cmp	r2, r3
 8013622:	bf0c      	ite	eq
 8013624:	2301      	moveq	r3, #1
 8013626:	2300      	movne	r3, #0
 8013628:	b2db      	uxtb	r3, r3
 801362a:	2b00      	cmp	r3, #0
 801362c:	d00b      	beq.n	8013646 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	691a      	ldr	r2, [r3, #16]
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	691b      	ldr	r3, [r3, #16]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	332c      	adds	r3, #44	; 0x2c
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	4610      	mov	r0, r2
 801363e:	4798      	blx	r3
 8013640:	4602      	mov	r2, r0
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	691b      	ldr	r3, [r3, #16]
 801364a:	4618      	mov	r0, r3
 801364c:	f7ff fa17 	bl	8012a7e <_ZN10TestPlugin7getNameEv>
 8013650:	4603      	mov	r3, r0
 8013652:	6839      	ldr	r1, [r7, #0]
 8013654:	4618      	mov	r0, r3
 8013656:	f7fa ffec 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801365a:	4603      	mov	r3, r0
 801365c:	2b00      	cmp	r3, #0
 801365e:	d00b      	beq.n	8013678 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	691a      	ldr	r2, [r3, #16]
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	691b      	ldr	r3, [r3, #16]
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	332c      	adds	r3, #44	; 0x2c
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	4610      	mov	r0, r2
 8013670:	4798      	blx	r3
 8013672:	4602      	mov	r2, r0
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	691a      	ldr	r2, [r3, #16]
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	691b      	ldr	r3, [r3, #16]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	3328      	adds	r3, #40	; 0x28
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	6839      	ldr	r1, [r7, #0]
 8013688:	4610      	mov	r0, r2
 801368a:	4798      	blx	r3
}
 801368c:	bf00      	nop
 801368e:	3708      	adds	r7, #8
 8013690:	46bd      	mov	sp, r7
 8013692:	bd80      	pop	{r7, pc}

08013694 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b084      	sub	sp, #16
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
    int count = 0;
 801369c:	2300      	movs	r3, #0
 801369e:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	691b      	ldr	r3, [r3, #16]
 80136a4:	60bb      	str	r3, [r7, #8]
 80136a6:	f7ff fad3 	bl	8012c50 <_ZN14NullTestPlugin8instanceEv>
 80136aa:	4602      	mov	r2, r0
 80136ac:	68bb      	ldr	r3, [r7, #8]
 80136ae:	4293      	cmp	r3, r2
 80136b0:	bf14      	ite	ne
 80136b2:	2301      	movne	r3, #1
 80136b4:	2300      	moveq	r3, #0
 80136b6:	b2db      	uxtb	r3, r3
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d00a      	beq.n	80136d2 <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	3301      	adds	r3, #1
 80136c0:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 80136c2:	68bb      	ldr	r3, [r7, #8]
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	332c      	adds	r3, #44	; 0x2c
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	68b8      	ldr	r0, [r7, #8]
 80136cc:	4798      	blx	r3
 80136ce:	60b8      	str	r0, [r7, #8]
 80136d0:	e7e9      	b.n	80136a6 <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 80136d2:	68fb      	ldr	r3, [r7, #12]
}
 80136d4:	4618      	mov	r0, r3
 80136d6:	3710      	adds	r7, #16
 80136d8:	46bd      	mov	sp, r7
 80136da:	bd80      	pop	{r7, pc}

080136dc <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 80136dc:	b480      	push	{r7}
 80136de:	b083      	sub	sp, #12
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
    return tests_;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	685b      	ldr	r3, [r3, #4]
}
 80136e8:	4618      	mov	r0, r3
 80136ea:	370c      	adds	r7, #12
 80136ec:	46bd      	mov	sp, r7
 80136ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f2:	4770      	bx	lr

080136f4 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b084      	sub	sp, #16
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
 80136fc:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	334c      	adds	r3, #76	; 0x4c
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	6878      	ldr	r0, [r7, #4]
 8013708:	4798      	blx	r3
 801370a:	4602      	mov	r2, r0
 801370c:	f107 0308 	add.w	r3, r7, #8
 8013710:	4611      	mov	r1, r2
 8013712:	4618      	mov	r0, r3
 8013714:	f002 f8f8 	bl	8015908 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 8013718:	f107 0308 	add.w	r3, r7, #8
 801371c:	6839      	ldr	r1, [r7, #0]
 801371e:	4618      	mov	r0, r3
 8013720:	f002 f980 	bl	8015a24 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 8013724:	f107 0308 	add.w	r3, r7, #8
 8013728:	4618      	mov	r0, r3
 801372a:	f002 fa13 	bl	8015b54 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 801372e:	4602      	mov	r2, r0
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8013734:	f107 0308 	add.w	r3, r7, #8
 8013738:	4618      	mov	r0, r3
 801373a:	f002 f939 	bl	80159b0 <_ZN22UtestShellPointerArrayD1Ev>
}
 801373e:	bf00      	nop
 8013740:	3710      	adds	r7, #16
 8013742:	46bd      	mov	sp, r7
 8013744:	bd80      	pop	{r7, pc}

08013746 <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 8013746:	b580      	push	{r7, lr}
 8013748:	b084      	sub	sp, #16
 801374a:	af00      	add	r7, sp, #0
 801374c:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	334c      	adds	r3, #76	; 0x4c
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	4798      	blx	r3
 801375a:	4602      	mov	r2, r0
 801375c:	f107 0308 	add.w	r3, r7, #8
 8013760:	4611      	mov	r1, r2
 8013762:	4618      	mov	r0, r3
 8013764:	f002 f8d0 	bl	8015908 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 8013768:	f107 0308 	add.w	r3, r7, #8
 801376c:	4618      	mov	r0, r3
 801376e:	f002 f995 	bl	8015a9c <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 8013772:	f107 0308 	add.w	r3, r7, #8
 8013776:	4618      	mov	r0, r3
 8013778:	f002 f9ec 	bl	8015b54 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 801377c:	4602      	mov	r2, r0
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8013782:	f107 0308 	add.w	r3, r7, #8
 8013786:	4618      	mov	r0, r3
 8013788:	f002 f912 	bl	80159b0 <_ZN22UtestShellPointerArrayD1Ev>
}
 801378c:	bf00      	nop
 801378e:	3710      	adds	r7, #16
 8013790:	46bd      	mov	sp, r7
 8013792:	bd80      	pop	{r7, pc}

08013794 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b084      	sub	sp, #16
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
 801379c:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	685b      	ldr	r3, [r3, #4]
 80137a2:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d00b      	beq.n	80137c2 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	330c      	adds	r3, #12
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	68f8      	ldr	r0, [r7, #12]
 80137b4:	4798      	blx	r3
 80137b6:	4602      	mov	r2, r0
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	4293      	cmp	r3, r2
 80137bc:	d001      	beq.n	80137c2 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 80137be:	2301      	movs	r3, #1
 80137c0:	e000      	b.n	80137c4 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 80137c2:	2300      	movs	r3, #0
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d007      	beq.n	80137d8 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	330c      	adds	r3, #12
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	68f8      	ldr	r0, [r7, #12]
 80137d2:	4798      	blx	r3
 80137d4:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 80137d6:	e7e5      	b.n	80137a4 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 80137d8:	68fb      	ldr	r3, [r7, #12]
}
 80137da:	4618      	mov	r0, r3
 80137dc:	3710      	adds	r7, #16
 80137de:	46bd      	mov	sp, r7
 80137e0:	bd80      	pop	{r7, pc}

080137e2 <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 80137e2:	b590      	push	{r4, r7, lr}
 80137e4:	b087      	sub	sp, #28
 80137e6:	af00      	add	r7, sp, #0
 80137e8:	6078      	str	r0, [r7, #4]
 80137ea:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	685b      	ldr	r3, [r3, #4]
 80137f0:	617b      	str	r3, [r7, #20]
    while (current) {
 80137f2:	697b      	ldr	r3, [r7, #20]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d01e      	beq.n	8013836 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 80137f8:	f107 030c 	add.w	r3, r7, #12
 80137fc:	6979      	ldr	r1, [r7, #20]
 80137fe:	4618      	mov	r0, r3
 8013800:	f000 fd4e 	bl	80142a0 <_ZNK10UtestShell7getNameEv>
 8013804:	f107 030c 	add.w	r3, r7, #12
 8013808:	6839      	ldr	r1, [r7, #0]
 801380a:	4618      	mov	r0, r3
 801380c:	f7fa ff11 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 8013810:	4603      	mov	r3, r0
 8013812:	461c      	mov	r4, r3
 8013814:	f107 030c 	add.w	r3, r7, #12
 8013818:	4618      	mov	r0, r3
 801381a:	f7fa fefe 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801381e:	2c00      	cmp	r4, #0
 8013820:	d001      	beq.n	8013826 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	e008      	b.n	8013838 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 8013826:	697b      	ldr	r3, [r7, #20]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	330c      	adds	r3, #12
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	6978      	ldr	r0, [r7, #20]
 8013830:	4798      	blx	r3
 8013832:	6178      	str	r0, [r7, #20]
    while (current) {
 8013834:	e7dd      	b.n	80137f2 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 8013836:	2300      	movs	r3, #0
}
 8013838:	4618      	mov	r0, r3
 801383a:	371c      	adds	r7, #28
 801383c:	46bd      	mov	sp, r7
 801383e:	bd90      	pop	{r4, r7, pc}

08013840 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 8013840:	b590      	push	{r4, r7, lr}
 8013842:	b087      	sub	sp, #28
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
 8013848:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	685b      	ldr	r3, [r3, #4]
 801384e:	617b      	str	r3, [r7, #20]
    while (current) {
 8013850:	697b      	ldr	r3, [r7, #20]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d01e      	beq.n	8013894 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 8013856:	f107 030c 	add.w	r3, r7, #12
 801385a:	6979      	ldr	r1, [r7, #20]
 801385c:	4618      	mov	r0, r3
 801385e:	f000 fd2e 	bl	80142be <_ZNK10UtestShell8getGroupEv>
 8013862:	f107 030c 	add.w	r3, r7, #12
 8013866:	6839      	ldr	r1, [r7, #0]
 8013868:	4618      	mov	r0, r3
 801386a:	f7fa fee2 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801386e:	4603      	mov	r3, r0
 8013870:	461c      	mov	r4, r3
 8013872:	f107 030c 	add.w	r3, r7, #12
 8013876:	4618      	mov	r0, r3
 8013878:	f7fa fecf 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801387c:	2c00      	cmp	r4, #0
 801387e:	d001      	beq.n	8013884 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	e008      	b.n	8013896 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 8013884:	697b      	ldr	r3, [r7, #20]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	330c      	adds	r3, #12
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	6978      	ldr	r0, [r7, #20]
 801388e:	4798      	blx	r3
 8013890:	6178      	str	r0, [r7, #20]
    while (current) {
 8013892:	e7dd      	b.n	8013850 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 8013894:	2300      	movs	r3, #0
}
 8013896:	4618      	mov	r0, r3
 8013898:	371c      	adds	r7, #28
 801389a:	46bd      	mov	sp, r7
 801389c:	bd90      	pop	{r4, r7, pc}
	...

080138a0 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 80138a0:	b480      	push	{r7}
 80138a2:	b083      	sub	sp, #12
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
 80138a8:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 80138aa:	4a18      	ldr	r2, [pc, #96]	; (801390c <_ZN10TestResultC1ER10TestOutput+0x6c>)
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	601a      	str	r2, [r3, #0]
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	683a      	ldr	r2, [r7, #0]
 80138b4:	605a      	str	r2, [r3, #4]
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	2200      	movs	r2, #0
 80138ba:	609a      	str	r2, [r3, #8]
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	2200      	movs	r2, #0
 80138c0:	60da      	str	r2, [r3, #12]
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	2200      	movs	r2, #0
 80138c6:	611a      	str	r2, [r3, #16]
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	2200      	movs	r2, #0
 80138cc:	615a      	str	r2, [r3, #20]
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	2200      	movs	r2, #0
 80138d2:	619a      	str	r2, [r3, #24]
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	2200      	movs	r2, #0
 80138d8:	61da      	str	r2, [r3, #28]
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	2200      	movs	r2, #0
 80138de:	621a      	str	r2, [r3, #32]
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	2200      	movs	r2, #0
 80138e4:	625a      	str	r2, [r3, #36]	; 0x24
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	2200      	movs	r2, #0
 80138ea:	629a      	str	r2, [r3, #40]	; 0x28
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2200      	movs	r2, #0
 80138f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	2200      	movs	r2, #0
 80138f6:	631a      	str	r2, [r3, #48]	; 0x30
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	2200      	movs	r2, #0
 80138fc:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	4618      	mov	r0, r3
 8013902:	370c      	adds	r7, #12
 8013904:	46bd      	mov	sp, r7
 8013906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390a:	4770      	bx	lr
 801390c:	0802a424 	.word	0x0802a424

08013910 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 8013910:	b480      	push	{r7}
 8013912:	b083      	sub	sp, #12
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	4a04      	ldr	r2, [pc, #16]	; (801392c <_ZN10TestResultD1Ev+0x1c>)
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	601a      	str	r2, [r3, #0]
{
}
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	4618      	mov	r0, r3
 8013922:	370c      	adds	r7, #12
 8013924:	46bd      	mov	sp, r7
 8013926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392a:	4770      	bx	lr
 801392c:	0802a424 	.word	0x0802a424

08013930 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 8013930:	b580      	push	{r7, lr}
 8013932:	b082      	sub	sp, #8
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
}
 8013938:	6878      	ldr	r0, [r7, #4]
 801393a:	f7ff ffe9 	bl	8013910 <_ZN10TestResultD1Ev>
 801393e:	2138      	movs	r1, #56	; 0x38
 8013940:	6878      	ldr	r0, [r7, #4]
 8013942:	f7f7 ff03 	bl	800b74c <_ZdlPvj>
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	4618      	mov	r0, r3
 801394a:	3708      	adds	r7, #8
 801394c:	46bd      	mov	sp, r7
 801394e:	bd80      	pop	{r7, pc}

08013950 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 8013950:	b580      	push	{r7, lr}
 8013952:	b082      	sub	sp, #8
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]
 8013958:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	685a      	ldr	r2, [r3, #4]
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	685b      	ldr	r3, [r3, #4]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	3318      	adds	r3, #24
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	6839      	ldr	r1, [r7, #0]
 801396a:	4610      	mov	r0, r2
 801396c:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 801396e:	4b05      	ldr	r3, [pc, #20]	; (8013984 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	4798      	blx	r3
 8013974:	4603      	mov	r3, r0
 8013976:	461a      	mov	r2, r3
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	631a      	str	r2, [r3, #48]	; 0x30
}
 801397c:	bf00      	nop
 801397e:	3708      	adds	r7, #8
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}
 8013984:	200000a8 	.word	0x200000a8

08013988 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 8013988:	b580      	push	{r7, lr}
 801398a:	b082      	sub	sp, #8
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
 8013990:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 8013992:	4b0c      	ldr	r3, [pc, #48]	; (80139c4 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	4798      	blx	r3
 8013998:	4603      	mov	r3, r0
 801399a:	461a      	mov	r2, r3
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139a0:	1ad2      	subs	r2, r2, r3
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	685a      	ldr	r2, [r3, #4]
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	685b      	ldr	r3, [r3, #4]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	331c      	adds	r3, #28
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	6879      	ldr	r1, [r7, #4]
 80139b6:	4610      	mov	r0, r2
 80139b8:	4798      	blx	r3
}
 80139ba:	bf00      	nop
 80139bc:	3708      	adds	r7, #8
 80139be:	46bd      	mov	sp, r7
 80139c0:	bd80      	pop	{r7, pc}
 80139c2:	bf00      	nop
 80139c4:	200000a8 	.word	0x200000a8

080139c8 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b082      	sub	sp, #8
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
 80139d0:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	685a      	ldr	r2, [r3, #4]
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	685b      	ldr	r3, [r3, #4]
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	3310      	adds	r3, #16
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	6839      	ldr	r1, [r7, #0]
 80139e2:	4610      	mov	r0, r2
 80139e4:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 80139e6:	4b05      	ldr	r3, [pc, #20]	; (80139fc <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	4798      	blx	r3
 80139ec:	4603      	mov	r3, r0
 80139ee:	461a      	mov	r2, r3
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80139f4:	bf00      	nop
 80139f6:	3708      	adds	r7, #8
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bd80      	pop	{r7, pc}
 80139fc:	200000a8 	.word	0x200000a8

08013a00 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b082      	sub	sp, #8
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
 8013a08:	6039      	str	r1, [r7, #0]
    output_.print(text);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	685a      	ldr	r2, [r3, #4]
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	685b      	ldr	r3, [r3, #4]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	332c      	adds	r3, #44	; 0x2c
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	6839      	ldr	r1, [r7, #0]
 8013a1a:	4610      	mov	r0, r2
 8013a1c:	4798      	blx	r3
}
 8013a1e:	bf00      	nop
 8013a20:	3708      	adds	r7, #8
 8013a22:	46bd      	mov	sp, r7
 8013a24:	bd80      	pop	{r7, pc}

08013a26 <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 8013a26:	b580      	push	{r7, lr}
 8013a28:	b082      	sub	sp, #8
 8013a2a:	af00      	add	r7, sp, #0
 8013a2c:	6078      	str	r0, [r7, #4]
 8013a2e:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	685a      	ldr	r2, [r3, #4]
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	685b      	ldr	r3, [r3, #4]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	3348      	adds	r3, #72	; 0x48
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	6839      	ldr	r1, [r7, #0]
 8013a40:	4610      	mov	r0, r2
 8013a42:	4798      	blx	r3
}
 8013a44:	bf00      	nop
 8013a46:	3708      	adds	r7, #8
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	bd80      	pop	{r7, pc}

08013a4c <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b082      	sub	sp, #8
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
 8013a54:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 8013a56:	4b0c      	ldr	r3, [pc, #48]	; (8013a88 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	4798      	blx	r3
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	461a      	mov	r2, r3
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a64:	1ad2      	subs	r2, r2, r3
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	685a      	ldr	r2, [r3, #4]
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	685b      	ldr	r3, [r3, #4]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	3314      	adds	r3, #20
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	6879      	ldr	r1, [r7, #4]
 8013a7a:	4610      	mov	r0, r2
 8013a7c:	4798      	blx	r3

}
 8013a7e:	bf00      	nop
 8013a80:	3708      	adds	r7, #8
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}
 8013a86:	bf00      	nop
 8013a88:	200000a8 	.word	0x200000a8

08013a8c <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b082      	sub	sp, #8
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
 8013a94:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	685a      	ldr	r2, [r3, #4]
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	685b      	ldr	r3, [r3, #4]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	333c      	adds	r3, #60	; 0x3c
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	6839      	ldr	r1, [r7, #0]
 8013aa6:	4610      	mov	r0, r2
 8013aa8:	4798      	blx	r3
    failureCount_++;
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	695b      	ldr	r3, [r3, #20]
 8013aae:	1c5a      	adds	r2, r3, #1
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	615a      	str	r2, [r3, #20]
}
 8013ab4:	bf00      	nop
 8013ab6:	3708      	adds	r7, #8
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	bd80      	pop	{r7, pc}

08013abc <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 8013abc:	b480      	push	{r7}
 8013abe:	b083      	sub	sp, #12
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
    testCount_++;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	689b      	ldr	r3, [r3, #8]
 8013ac8:	1c5a      	adds	r2, r3, #1
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	609a      	str	r2, [r3, #8]
}
 8013ace:	bf00      	nop
 8013ad0:	370c      	adds	r7, #12
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad8:	4770      	bx	lr

08013ada <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 8013ada:	b480      	push	{r7}
 8013adc:	b083      	sub	sp, #12
 8013ade:	af00      	add	r7, sp, #0
 8013ae0:	6078      	str	r0, [r7, #4]
    runCount_++;
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	68db      	ldr	r3, [r3, #12]
 8013ae6:	1c5a      	adds	r2, r3, #1
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	60da      	str	r2, [r3, #12]
}
 8013aec:	bf00      	nop
 8013aee:	370c      	adds	r7, #12
 8013af0:	46bd      	mov	sp, r7
 8013af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af6:	4770      	bx	lr

08013af8 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 8013af8:	b480      	push	{r7}
 8013afa:	b083      	sub	sp, #12
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
    checkCount_++;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	691b      	ldr	r3, [r3, #16]
 8013b04:	1c5a      	adds	r2, r3, #1
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	611a      	str	r2, [r3, #16]
}
 8013b0a:	bf00      	nop
 8013b0c:	370c      	adds	r7, #12
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b14:	4770      	bx	lr

08013b16 <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 8013b16:	b480      	push	{r7}
 8013b18:	b083      	sub	sp, #12
 8013b1a:	af00      	add	r7, sp, #0
 8013b1c:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	699b      	ldr	r3, [r3, #24]
 8013b22:	1c5a      	adds	r2, r3, #1
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	619a      	str	r2, [r3, #24]
}
 8013b28:	bf00      	nop
 8013b2a:	370c      	adds	r7, #12
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b32:	4770      	bx	lr

08013b34 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 8013b34:	b480      	push	{r7}
 8013b36:	b083      	sub	sp, #12
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	69db      	ldr	r3, [r3, #28]
 8013b40:	1c5a      	adds	r2, r3, #1
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	61da      	str	r2, [r3, #28]
}
 8013b46:	bf00      	nop
 8013b48:	370c      	adds	r7, #12
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b50:	4770      	bx	lr
	...

08013b54 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b082      	sub	sp, #8
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8013b5c:	4b09      	ldr	r3, [pc, #36]	; (8013b84 <_ZN10TestResult12testsStartedEv+0x30>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	4798      	blx	r3
 8013b62:	4603      	mov	r3, r0
 8013b64:	461a      	mov	r2, r3
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	685a      	ldr	r2, [r3, #4]
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	685b      	ldr	r3, [r3, #4]
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	3308      	adds	r3, #8
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	4610      	mov	r0, r2
 8013b7a:	4798      	blx	r3
}
 8013b7c:	bf00      	nop
 8013b7e:	3708      	adds	r7, #8
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}
 8013b84:	200000a8 	.word	0x200000a8

08013b88 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b084      	sub	sp, #16
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 8013b90:	4b0c      	ldr	r3, [pc, #48]	; (8013bc4 <_ZN10TestResult10testsEndedEv+0x3c>)
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	4798      	blx	r3
 8013b96:	4603      	mov	r3, r0
 8013b98:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b9e:	68fa      	ldr	r2, [r7, #12]
 8013ba0:	1ad2      	subs	r2, r2, r3
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	685a      	ldr	r2, [r3, #4]
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	685b      	ldr	r3, [r3, #4]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	330c      	adds	r3, #12
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	6879      	ldr	r1, [r7, #4]
 8013bb6:	4610      	mov	r0, r2
 8013bb8:	4798      	blx	r3
}
 8013bba:	bf00      	nop
 8013bbc:	3710      	adds	r7, #16
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}
 8013bc2:	bf00      	nop
 8013bc4:	200000a8 	.word	0x200000a8

08013bc8 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 8013bc8:	b480      	push	{r7}
 8013bca:	b083      	sub	sp, #12
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6a1b      	ldr	r3, [r3, #32]
}
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	370c      	adds	r7, #12
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bde:	4770      	bx	lr

08013be0 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 8013be0:	b480      	push	{r7}
 8013be2:	b083      	sub	sp, #12
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8013bec:	4618      	mov	r0, r3
 8013bee:	370c      	adds	r7, #12
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf6:	4770      	bx	lr

08013bf8 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 8013bf8:	b480      	push	{r7}
 8013bfa:	b083      	sub	sp, #12
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8013c04:	4618      	mov	r0, r3
 8013c06:	370c      	adds	r7, #12
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0e:	4770      	bx	lr

08013c10 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 8013c10:	b590      	push	{r4, r7, lr}
 8013c12:	b087      	sub	sp, #28
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	ed87 0b04 	vstr	d0, [r7, #16]
 8013c1a:	ed87 1b02 	vstr	d1, [r7, #8]
 8013c1e:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 8013c22:	4b2c      	ldr	r3, [pc, #176]	; (8013cd4 <_Z13doubles_equalddd+0xc4>)
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	ed97 0b04 	vldr	d0, [r7, #16]
 8013c2a:	4798      	blx	r3
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d10f      	bne.n	8013c52 <_Z13doubles_equalddd+0x42>
 8013c32:	4b28      	ldr	r3, [pc, #160]	; (8013cd4 <_Z13doubles_equalddd+0xc4>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	ed97 0b02 	vldr	d0, [r7, #8]
 8013c3a:	4798      	blx	r3
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d107      	bne.n	8013c52 <_Z13doubles_equalddd+0x42>
 8013c42:	4b24      	ldr	r3, [pc, #144]	; (8013cd4 <_Z13doubles_equalddd+0xc4>)
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	ed97 0b00 	vldr	d0, [r7]
 8013c4a:	4798      	blx	r3
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d001      	beq.n	8013c56 <_Z13doubles_equalddd+0x46>
 8013c52:	2301      	movs	r3, #1
 8013c54:	e000      	b.n	8013c58 <_Z13doubles_equalddd+0x48>
 8013c56:	2300      	movs	r3, #0
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d001      	beq.n	8013c60 <_Z13doubles_equalddd+0x50>
        return false;
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	e035      	b.n	8013ccc <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 8013c60:	4b1d      	ldr	r3, [pc, #116]	; (8013cd8 <_Z13doubles_equalddd+0xc8>)
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	ed97 0b04 	vldr	d0, [r7, #16]
 8013c68:	4798      	blx	r3
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d009      	beq.n	8013c84 <_Z13doubles_equalddd+0x74>
 8013c70:	4b19      	ldr	r3, [pc, #100]	; (8013cd8 <_Z13doubles_equalddd+0xc8>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	ed97 0b02 	vldr	d0, [r7, #8]
 8013c78:	4798      	blx	r3
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d001      	beq.n	8013c84 <_Z13doubles_equalddd+0x74>
 8013c80:	2301      	movs	r3, #1
 8013c82:	e000      	b.n	8013c86 <_Z13doubles_equalddd+0x76>
 8013c84:	2300      	movs	r3, #0
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d001      	beq.n	8013c8e <_Z13doubles_equalddd+0x7e>
    {
        return true;
 8013c8a:	2301      	movs	r3, #1
 8013c8c:	e01e      	b.n	8013ccc <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 8013c8e:	4b13      	ldr	r3, [pc, #76]	; (8013cdc <_Z13doubles_equalddd+0xcc>)
 8013c90:	681c      	ldr	r4, [r3, #0]
 8013c92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013c96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8013c9a:	f7ec fb35 	bl	8000308 <__aeabi_dsub>
 8013c9e:	4602      	mov	r2, r0
 8013ca0:	460b      	mov	r3, r1
 8013ca2:	ec43 2b17 	vmov	d7, r2, r3
 8013ca6:	eeb0 0a47 	vmov.f32	s0, s14
 8013caa:	eef0 0a67 	vmov.f32	s1, s15
 8013cae:	47a0      	blx	r4
 8013cb0:	ec53 2b10 	vmov	r2, r3, d0
 8013cb4:	2101      	movs	r1, #1
 8013cb6:	460c      	mov	r4, r1
 8013cb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013cbc:	f7ec fd50 	bl	8000760 <__aeabi_dcmpge>
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d101      	bne.n	8013cca <_Z13doubles_equalddd+0xba>
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	461c      	mov	r4, r3
 8013cca:	b2e3      	uxtb	r3, r4
}
 8013ccc:	4618      	mov	r0, r3
 8013cce:	371c      	adds	r7, #28
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bd90      	pop	{r4, r7, pc}
 8013cd4:	200000e8 	.word	0x200000e8
 8013cd8:	200000ec 	.word	0x200000ec
 8013cdc:	200000dc 	.word	0x200000dc

08013ce0 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 8013ce0:	b480      	push	{r7}
 8013ce2:	b083      	sub	sp, #12
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	332c      	adds	r3, #44	; 0x2c
    }
 8013cec:	4618      	mov	r0, r3
 8013cee:	370c      	adds	r7, #12
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf6:	4770      	bx	lr

08013cf8 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
    {
 8013d00:	4a0a      	ldr	r2, [pc, #40]	; (8013d2c <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	601a      	str	r2, [r3, #0]
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	332c      	adds	r3, #44	; 0x2c
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f7ff fe00 	bl	8013910 <_ZN10TestResultD1Ev>
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	331c      	adds	r3, #28
 8013d14:	4618      	mov	r0, r3
 8013d16:	f7f6 f815 	bl	8009d44 <_ZN17ConsoleTestOutputD1Ev>
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f000 f943 	bl	8013fa8 <_ZN10UtestShellD1Ev>
    }
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	4618      	mov	r0, r3
 8013d26:	3708      	adds	r7, #8
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd80      	pop	{r7, pc}
 8013d2c:	0802a46c 	.word	0x0802a46c

08013d30 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b082      	sub	sp, #8
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
    }
 8013d38:	6878      	ldr	r0, [r7, #4]
 8013d3a:	f7ff ffdd 	bl	8013cf8 <_ZN22OutsideTestRunnerUTestD1Ev>
 8013d3e:	2164      	movs	r1, #100	; 0x64
 8013d40:	6878      	ldr	r0, [r7, #4]
 8013d42:	f7f7 fd03 	bl	800b74c <_ZdlPvj>
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	4618      	mov	r0, r3
 8013d4a:	3708      	adds	r7, #8
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	bd80      	pop	{r7, pc}

08013d50 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b084      	sub	sp, #16
 8013d54:	af02      	add	r7, sp, #8
 8013d56:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	9300      	str	r3, [sp, #0]
 8013d5e:	4b0d      	ldr	r3, [pc, #52]	; (8013d94 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 8013d60:	4a0d      	ldr	r2, [pc, #52]	; (8013d98 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 8013d62:	490e      	ldr	r1, [pc, #56]	; (8013d9c <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 8013d64:	f000 f8f8 	bl	8013f58 <_ZN10UtestShellC1EPKcS1_S1_j>
 8013d68:	4a0d      	ldr	r2, [pc, #52]	; (8013da0 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	601a      	str	r2, [r3, #0]
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	331c      	adds	r3, #28
 8013d72:	4618      	mov	r0, r3
 8013d74:	f7f5 ffd4 	bl	8009d20 <_ZN17ConsoleTestOutputC1Ev>
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	331c      	adds	r3, #28
 8013d82:	4619      	mov	r1, r3
 8013d84:	4610      	mov	r0, r2
 8013d86:	f7ff fd8b 	bl	80138a0 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	3708      	adds	r7, #8
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bd80      	pop	{r7, pc}
 8013d94:	080267bc 	.word	0x080267bc
 8013d98:	080267cc 	.word	0x080267cc
 8013d9c:	0802680c 	.word	0x0802680c
 8013da0:	0802a46c 	.word	0x0802a46c

08013da4 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 8013da4:	b580      	push	{r7, lr}
 8013da6:	af00      	add	r7, sp, #0
 8013da8:	4801      	ldr	r0, [pc, #4]	; (8013db0 <__tcf_0+0xc>)
 8013daa:	f7ff ffa5 	bl	8013cf8 <_ZN22OutsideTestRunnerUTestD1Ev>
 8013dae:	bd80      	pop	{r7, pc}
 8013db0:	20000b14 	.word	0x20000b14

08013db4 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 8013db8:	4b12      	ldr	r3, [pc, #72]	; (8013e04 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8013dba:	781b      	ldrb	r3, [r3, #0]
 8013dbc:	f3bf 8f5b 	dmb	ish
 8013dc0:	b2db      	uxtb	r3, r3
 8013dc2:	f003 0301 	and.w	r3, r3, #1
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	bf0c      	ite	eq
 8013dca:	2301      	moveq	r3, #1
 8013dcc:	2300      	movne	r3, #0
 8013dce:	b2db      	uxtb	r3, r3
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d013      	beq.n	8013dfc <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8013dd4:	480b      	ldr	r0, [pc, #44]	; (8013e04 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8013dd6:	f00c ff27 	bl	8020c28 <__cxa_guard_acquire>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	bf14      	ite	ne
 8013de0:	2301      	movne	r3, #1
 8013de2:	2300      	moveq	r3, #0
 8013de4:	b2db      	uxtb	r3, r3
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d008      	beq.n	8013dfc <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8013dea:	4807      	ldr	r0, [pc, #28]	; (8013e08 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 8013dec:	f7ff ffb0 	bl	8013d50 <_ZN22OutsideTestRunnerUTestC1Ev>
 8013df0:	4804      	ldr	r0, [pc, #16]	; (8013e04 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8013df2:	f00c ff25 	bl	8020c40 <__cxa_guard_release>
 8013df6:	4805      	ldr	r0, [pc, #20]	; (8013e0c <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 8013df8:	f00c ff49 	bl	8020c8e <atexit>
    return instance_;
 8013dfc:	4b02      	ldr	r3, [pc, #8]	; (8013e08 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	bd80      	pop	{r7, pc}
 8013e02:	bf00      	nop
 8013e04:	20000b78 	.word	0x20000b78
 8013e08:	20000b14 	.word	0x20000b14
 8013e0c:	08013da5 	.word	0x08013da5

08013e10 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b082      	sub	sp, #8
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	330c      	adds	r3, #12
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	6878      	ldr	r0, [r7, #4]
 8013e22:	4798      	blx	r3
    }
 8013e24:	bf00      	nop
 8013e26:	3708      	adds	r7, #8
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}

08013e2c <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b082      	sub	sp, #8
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	3314      	adds	r3, #20
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	6878      	ldr	r0, [r7, #4]
 8013e3e:	4798      	blx	r3
    }
 8013e40:	bf00      	nop
 8013e42:	3708      	adds	r7, #8
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}

08013e48 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	b082      	sub	sp, #8
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	3310      	adds	r3, #16
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	6878      	ldr	r0, [r7, #4]
 8013e5a:	4798      	blx	r3
    }
 8013e5c:	bf00      	nop
 8013e5e:	3708      	adds	r7, #8
 8013e60:	46bd      	mov	sp, r7
 8013e62:	bd80      	pop	{r7, pc}

08013e64 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 8013e64:	b480      	push	{r7}
 8013e66:	b085      	sub	sp, #20
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	60f8      	str	r0, [r7, #12]
 8013e6c:	60b9      	str	r1, [r7, #8]
 8013e6e:	607a      	str	r2, [r7, #4]
 8013e70:	603b      	str	r3, [r7, #0]
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	68ba      	ldr	r2, [r7, #8]
 8013e76:	601a      	str	r2, [r3, #0]
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	687a      	ldr	r2, [r7, #4]
 8013e7c:	605a      	str	r2, [r3, #4]
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	683a      	ldr	r2, [r7, #0]
 8013e82:	609a      	str	r2, [r3, #8]
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	4618      	mov	r0, r3
 8013e88:	3714      	adds	r7, #20
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e90:	4770      	bx	lr

08013e92 <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 8013e92:	b580      	push	{r7, lr}
 8013e94:	b086      	sub	sp, #24
 8013e96:	af00      	add	r7, sp, #0
 8013e98:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8013e9e:	697b      	ldr	r3, [r7, #20]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8013ea4:	697b      	ldr	r3, [r7, #20]
 8013ea6:	685b      	ldr	r3, [r3, #4]
 8013ea8:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	689b      	ldr	r3, [r3, #8]
 8013eae:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 8013eb0:	693b      	ldr	r3, [r7, #16]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	3394      	adds	r3, #148	; 0x94
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	68ba      	ldr	r2, [r7, #8]
 8013eba:	68f9      	ldr	r1, [r7, #12]
 8013ebc:	6938      	ldr	r0, [r7, #16]
 8013ebe:	4798      	blx	r3
    }
 8013ec0:	bf00      	nop
 8013ec2:	3718      	adds	r7, #24
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}

08013ec8 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b086      	sub	sp, #24
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8013ed4:	697b      	ldr	r3, [r7, #20]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8013eda:	697b      	ldr	r3, [r7, #20]
 8013edc:	685b      	ldr	r3, [r3, #4]
 8013ede:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8013ee0:	697b      	ldr	r3, [r7, #20]
 8013ee2:	689b      	ldr	r3, [r3, #8]
 8013ee4:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 8013ee6:	4b05      	ldr	r3, [pc, #20]	; (8013efc <helperDoRunOneTestSeperateProcess+0x34>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	68ba      	ldr	r2, [r7, #8]
 8013eec:	68f9      	ldr	r1, [r7, #12]
 8013eee:	6938      	ldr	r0, [r7, #16]
 8013ef0:	4798      	blx	r3
    }
 8013ef2:	bf00      	nop
 8013ef4:	3718      	adds	r7, #24
 8013ef6:	46bd      	mov	sp, r7
 8013ef8:	bd80      	pop	{r7, pc}
 8013efa:	bf00      	nop
 8013efc:	2000009c 	.word	0x2000009c

08013f00 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 8013f00:	b480      	push	{r7}
 8013f02:	b083      	sub	sp, #12
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8013f08:	4a0f      	ldr	r2, [pc, #60]	; (8013f48 <_ZN10UtestShellC1Ev+0x48>)
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	601a      	str	r2, [r3, #0]
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	4a0e      	ldr	r2, [pc, #56]	; (8013f4c <_ZN10UtestShellC1Ev+0x4c>)
 8013f12:	605a      	str	r2, [r3, #4]
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	4a0e      	ldr	r2, [pc, #56]	; (8013f50 <_ZN10UtestShellC1Ev+0x50>)
 8013f18:	609a      	str	r2, [r3, #8]
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	4a0d      	ldr	r2, [pc, #52]	; (8013f54 <_ZN10UtestShellC1Ev+0x54>)
 8013f1e:	60da      	str	r2, [r3, #12]
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	2200      	movs	r2, #0
 8013f24:	611a      	str	r2, [r3, #16]
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	2200      	movs	r2, #0
 8013f2a:	615a      	str	r2, [r3, #20]
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	2200      	movs	r2, #0
 8013f30:	761a      	strb	r2, [r3, #24]
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	2200      	movs	r2, #0
 8013f36:	765a      	strb	r2, [r3, #25]
{
}
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	370c      	adds	r7, #12
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f44:	4770      	bx	lr
 8013f46:	bf00      	nop
 8013f48:	0802a52c 	.word	0x0802a52c
 8013f4c:	08026858 	.word	0x08026858
 8013f50:	0802686c 	.word	0x0802686c
 8013f54:	0802687c 	.word	0x0802687c

08013f58 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 8013f58:	b480      	push	{r7}
 8013f5a:	b085      	sub	sp, #20
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	60f8      	str	r0, [r7, #12]
 8013f60:	60b9      	str	r1, [r7, #8]
 8013f62:	607a      	str	r2, [r7, #4]
 8013f64:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8013f66:	4a0f      	ldr	r2, [pc, #60]	; (8013fa4 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	601a      	str	r2, [r3, #0]
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	68ba      	ldr	r2, [r7, #8]
 8013f70:	605a      	str	r2, [r3, #4]
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	687a      	ldr	r2, [r7, #4]
 8013f76:	609a      	str	r2, [r3, #8]
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	683a      	ldr	r2, [r7, #0]
 8013f7c:	60da      	str	r2, [r3, #12]
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	69ba      	ldr	r2, [r7, #24]
 8013f82:	611a      	str	r2, [r3, #16]
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	2200      	movs	r2, #0
 8013f88:	615a      	str	r2, [r3, #20]
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	761a      	strb	r2, [r3, #24]
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	2200      	movs	r2, #0
 8013f94:	765a      	strb	r2, [r3, #25]
{
}
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	4618      	mov	r0, r3
 8013f9a:	3714      	adds	r7, #20
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa2:	4770      	bx	lr
 8013fa4:	0802a52c 	.word	0x0802a52c

08013fa8 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 8013fa8:	b480      	push	{r7}
 8013faa:	b083      	sub	sp, #12
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	6078      	str	r0, [r7, #4]
 8013fb0:	4a04      	ldr	r2, [pc, #16]	; (8013fc4 <_ZN10UtestShellD1Ev+0x1c>)
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	601a      	str	r2, [r3, #0]
{
}
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	4618      	mov	r0, r3
 8013fba:	370c      	adds	r7, #12
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc2:	4770      	bx	lr
 8013fc4:	0802a52c 	.word	0x0802a52c

08013fc8 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b082      	sub	sp, #8
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
}
 8013fd0:	6878      	ldr	r0, [r7, #4]
 8013fd2:	f7ff ffe9 	bl	8013fa8 <_ZN10UtestShellD1Ev>
 8013fd6:	211c      	movs	r1, #28
 8013fd8:	6878      	ldr	r0, [r7, #4]
 8013fda:	f7f7 fbb7 	bl	800b74c <_ZdlPvj>
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3708      	adds	r7, #8
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}

08013fe8 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b082      	sub	sp, #8
 8013fec:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 8013fee:	2300      	movs	r3, #0
 8013ff0:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	3310      	adds	r3, #16
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	6878      	ldr	r0, [r7, #4]
 8013ffc:	4798      	blx	r3
}
 8013ffe:	bf00      	nop
 8014000:	3708      	adds	r7, #8
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}
	...

08014008 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 8014008:	b580      	push	{r7, lr}
 801400a:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 801400c:	4b02      	ldr	r3, [pc, #8]	; (8014018 <_ZN10UtestShell5crashEv+0x10>)
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	4798      	blx	r3
}
 8014012:	bf00      	nop
 8014014:	bd80      	pop	{r7, pc}
 8014016:	bf00      	nop
 8014018:	20000098 	.word	0x20000098

0801401c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b088      	sub	sp, #32
 8014020:	af00      	add	r7, sp, #0
 8014022:	60f8      	str	r0, [r7, #12]
 8014024:	60b9      	str	r1, [r7, #8]
 8014026:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	2200      	movs	r2, #0
 801402c:	765a      	strb	r2, [r3, #25]
    result.countRun();
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	3324      	adds	r3, #36	; 0x24
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	6878      	ldr	r0, [r7, #4]
 8014038:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 801403a:	f107 0014 	add.w	r0, r7, #20
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	68ba      	ldr	r2, [r7, #8]
 8014042:	68f9      	ldr	r1, [r7, #12]
 8014044:	f7ff ff0e 	bl	8013e64 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	337c      	adds	r3, #124	; 0x7c
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	68f8      	ldr	r0, [r7, #12]
 8014052:	4798      	blx	r3
 8014054:	4603      	mov	r3, r0
 8014056:	2b00      	cmp	r3, #0
 8014058:	d007      	beq.n	801406a <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 801405a:	4b09      	ldr	r3, [pc, #36]	; (8014080 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	f107 0214 	add.w	r2, r7, #20
 8014062:	4611      	mov	r1, r2
 8014064:	4807      	ldr	r0, [pc, #28]	; (8014084 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 8014066:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 8014068:	e006      	b.n	8014078 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 801406a:	4b05      	ldr	r3, [pc, #20]	; (8014080 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	f107 0214 	add.w	r2, r7, #20
 8014072:	4611      	mov	r1, r2
 8014074:	4804      	ldr	r0, [pc, #16]	; (8014088 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 8014076:	4798      	blx	r3
}
 8014078:	bf00      	nop
 801407a:	3720      	adds	r7, #32
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}
 8014080:	200000a4 	.word	0x200000a4
 8014084:	08013ec9 	.word	0x08013ec9
 8014088:	08013e93 	.word	0x08013e93

0801408c <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 801408c:	b590      	push	{r4, r7, lr}
 801408e:	b083      	sub	sp, #12
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
    return new Utest();
 8014094:	22d3      	movs	r2, #211	; 0xd3
 8014096:	4906      	ldr	r1, [pc, #24]	; (80140b0 <_ZN10UtestShell10createTestEv+0x24>)
 8014098:	2004      	movs	r0, #4
 801409a:	f7f7 fb43 	bl	800b724 <_ZnwjPKci>
 801409e:	4604      	mov	r4, r0
 80140a0:	4620      	mov	r0, r4
 80140a2:	f001 fb0f 	bl	80156c4 <_ZN5UtestC1Ev>
 80140a6:	4623      	mov	r3, r4
}
 80140a8:	4618      	mov	r0, r3
 80140aa:	370c      	adds	r7, #12
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd90      	pop	{r4, r7, pc}
 80140b0:	0802688c 	.word	0x0802688c

080140b4 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b082      	sub	sp, #8
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
 80140bc:	6039      	str	r1, [r7, #0]
    delete test;
 80140be:	683b      	ldr	r3, [r7, #0]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d004      	beq.n	80140ce <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 80140c4:	681a      	ldr	r2, [r3, #0]
 80140c6:	3204      	adds	r2, #4
 80140c8:	6812      	ldr	r2, [r2, #0]
 80140ca:	4618      	mov	r0, r3
 80140cc:	4790      	blx	r2
}
 80140ce:	bf00      	nop
 80140d0:	3708      	adds	r7, #8
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bd80      	pop	{r7, pc}
	...

080140d8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b088      	sub	sp, #32
 80140dc:	af00      	add	r7, sp, #0
 80140de:	60f8      	str	r0, [r7, #12]
 80140e0:	60b9      	str	r1, [r7, #8]
 80140e2:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	333c      	adds	r3, #60	; 0x3c
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	4940      	ldr	r1, [pc, #256]	; (80141f0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 80140ee:	6878      	ldr	r0, [r7, #4]
 80140f0:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 80140f2:	68bb      	ldr	r3, [r7, #8]
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	3314      	adds	r3, #20
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	687a      	ldr	r2, [r7, #4]
 80140fc:	68f9      	ldr	r1, [r7, #12]
 80140fe:	68b8      	ldr	r0, [r7, #8]
 8014100:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	333c      	adds	r3, #60	; 0x3c
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	493a      	ldr	r1, [pc, #232]	; (80141f4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 801410c:	6878      	ldr	r0, [r7, #4]
 801410e:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 8014110:	f001 faae 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8014114:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 8014116:	68f8      	ldr	r0, [r7, #12]
 8014118:	f001 fa90 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 801411c:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 801411e:	6879      	ldr	r1, [r7, #4]
 8014120:	68f8      	ldr	r0, [r7, #12]
 8014122:	f001 fa6b 	bl	80155fc <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 8014126:	68f9      	ldr	r1, [r7, #12]
 8014128:	68f8      	ldr	r0, [r7, #12]
 801412a:	f001 fa77 	bl	801561c <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	333c      	adds	r3, #60	; 0x3c
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	4930      	ldr	r1, [pc, #192]	; (80141f8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 8014138:	6878      	ldr	r0, [r7, #4]
 801413a:	4798      	blx	r3
    Utest* testToRun = createTest();
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	3388      	adds	r3, #136	; 0x88
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	68f8      	ldr	r0, [r7, #12]
 8014146:	4798      	blx	r3
 8014148:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	333c      	adds	r3, #60	; 0x3c
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	492a      	ldr	r1, [pc, #168]	; (80141fc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 8014154:	6878      	ldr	r0, [r7, #4]
 8014156:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	333c      	adds	r3, #60	; 0x3c
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	4927      	ldr	r1, [pc, #156]	; (8014200 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	4798      	blx	r3
    testToRun->run();
 8014166:	697b      	ldr	r3, [r7, #20]
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	3308      	adds	r3, #8
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	6978      	ldr	r0, [r7, #20]
 8014170:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	333c      	adds	r3, #60	; 0x3c
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	4922      	ldr	r1, [pc, #136]	; (8014204 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 801417c:	6878      	ldr	r0, [r7, #4]
 801417e:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 8014180:	69f9      	ldr	r1, [r7, #28]
 8014182:	68f8      	ldr	r0, [r7, #12]
 8014184:	f001 fa4a 	bl	801561c <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 8014188:	69b9      	ldr	r1, [r7, #24]
 801418a:	68f8      	ldr	r0, [r7, #12]
 801418c:	f001 fa36 	bl	80155fc <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	333c      	adds	r3, #60	; 0x3c
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	491b      	ldr	r1, [pc, #108]	; (8014208 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 801419a:	6878      	ldr	r0, [r7, #4]
 801419c:	4798      	blx	r3
    destroyTest(testToRun);
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	338c      	adds	r3, #140	; 0x8c
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	6979      	ldr	r1, [r7, #20]
 80141a8:	68f8      	ldr	r0, [r7, #12]
 80141aa:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	333c      	adds	r3, #60	; 0x3c
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	4915      	ldr	r1, [pc, #84]	; (801420c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 80141b6:	6878      	ldr	r0, [r7, #4]
 80141b8:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	333c      	adds	r3, #60	; 0x3c
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	4913      	ldr	r1, [pc, #76]	; (8014210 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 80141c4:	6878      	ldr	r0, [r7, #4]
 80141c6:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 80141c8:	68bb      	ldr	r3, [r7, #8]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	3318      	adds	r3, #24
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	687a      	ldr	r2, [r7, #4]
 80141d2:	68f9      	ldr	r1, [r7, #12]
 80141d4:	68b8      	ldr	r0, [r7, #8]
 80141d6:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	333c      	adds	r3, #60	; 0x3c
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	490c      	ldr	r1, [pc, #48]	; (8014214 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 80141e2:	6878      	ldr	r0, [r7, #4]
 80141e4:	4798      	blx	r3
}
 80141e6:	bf00      	nop
 80141e8:	3720      	adds	r7, #32
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd80      	pop	{r7, pc}
 80141ee:	bf00      	nop
 80141f0:	080268a0 	.word	0x080268a0
 80141f4:	080268c4 	.word	0x080268c4
 80141f8:	080268e4 	.word	0x080268e4
 80141fc:	08026900 	.word	0x08026900
 8014200:	0802691c 	.word	0x0802691c
 8014204:	08026938 	.word	0x08026938
 8014208:	08026950 	.word	0x08026950
 801420c:	0802696c 	.word	0x0802696c
 8014210:	08026988 	.word	0x08026988
 8014214:	080269ac 	.word	0x080269ac

08014218 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 8014218:	b480      	push	{r7}
 801421a:	b083      	sub	sp, #12
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
    return next_;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	695b      	ldr	r3, [r3, #20]
}
 8014224:	4618      	mov	r0, r3
 8014226:	370c      	adds	r7, #12
 8014228:	46bd      	mov	sp, r7
 801422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422e:	4770      	bx	lr

08014230 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 8014230:	b480      	push	{r7}
 8014232:	b083      	sub	sp, #12
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
 8014238:	6039      	str	r1, [r7, #0]
    next_ = test;
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	683a      	ldr	r2, [r7, #0]
 801423e:	615a      	str	r2, [r3, #20]
    return this;
 8014240:	687b      	ldr	r3, [r7, #4]
}
 8014242:	4618      	mov	r0, r3
 8014244:	370c      	adds	r7, #12
 8014246:	46bd      	mov	sp, r7
 8014248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424c:	4770      	bx	lr

0801424e <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 801424e:	b580      	push	{r7, lr}
 8014250:	b082      	sub	sp, #8
 8014252:	af00      	add	r7, sp, #0
 8014254:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	695b      	ldr	r3, [r3, #20]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d00b      	beq.n	8014276 <_ZN10UtestShell10countTestsEv+0x28>
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	695a      	ldr	r2, [r3, #20]
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	695b      	ldr	r3, [r3, #20]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	3310      	adds	r3, #16
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	4610      	mov	r0, r2
 801426e:	4798      	blx	r3
 8014270:	4603      	mov	r3, r0
 8014272:	3301      	adds	r3, #1
 8014274:	e000      	b.n	8014278 <_ZN10UtestShell10countTestsEv+0x2a>
 8014276:	2301      	movs	r3, #1
}
 8014278:	4618      	mov	r0, r3
 801427a:	3708      	adds	r7, #8
 801427c:	46bd      	mov	sp, r7
 801427e:	bd80      	pop	{r7, pc}

08014280 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b082      	sub	sp, #8
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
 8014288:	6039      	str	r1, [r7, #0]
    return "TEST";
 801428a:	4904      	ldr	r1, [pc, #16]	; (801429c <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 801428c:	6878      	ldr	r0, [r7, #4]
 801428e:	f7f9 fe0c 	bl	800deaa <_ZN12SimpleStringC1EPKc>
}
 8014292:	6878      	ldr	r0, [r7, #4]
 8014294:	3708      	adds	r7, #8
 8014296:	46bd      	mov	sp, r7
 8014298:	bd80      	pop	{r7, pc}
 801429a:	bf00      	nop
 801429c:	080269d0 	.word	0x080269d0

080142a0 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b082      	sub	sp, #8
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
 80142a8:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 80142aa:	683b      	ldr	r3, [r7, #0]
 80142ac:	689b      	ldr	r3, [r3, #8]
 80142ae:	4619      	mov	r1, r3
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f7f9 fdfa 	bl	800deaa <_ZN12SimpleStringC1EPKc>
}
 80142b6:	6878      	ldr	r0, [r7, #4]
 80142b8:	3708      	adds	r7, #8
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd80      	pop	{r7, pc}

080142be <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 80142be:	b580      	push	{r7, lr}
 80142c0:	b082      	sub	sp, #8
 80142c2:	af00      	add	r7, sp, #0
 80142c4:	6078      	str	r0, [r7, #4]
 80142c6:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 80142c8:	683b      	ldr	r3, [r7, #0]
 80142ca:	685b      	ldr	r3, [r3, #4]
 80142cc:	4619      	mov	r1, r3
 80142ce:	6878      	ldr	r0, [r7, #4]
 80142d0:	f7f9 fdeb 	bl	800deaa <_ZN12SimpleStringC1EPKc>
}
 80142d4:	6878      	ldr	r0, [r7, #4]
 80142d6:	3708      	adds	r7, #8
 80142d8:	46bd      	mov	sp, r7
 80142da:	bd80      	pop	{r7, pc}

080142dc <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b082      	sub	sp, #8
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
 80142e4:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 80142e6:	683b      	ldr	r3, [r7, #0]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	33a0      	adds	r3, #160	; 0xa0
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	687a      	ldr	r2, [r7, #4]
 80142f0:	6839      	ldr	r1, [r7, #0]
 80142f2:	4610      	mov	r0, r2
 80142f4:	4798      	blx	r3
    formattedName += "(";
 80142f6:	490e      	ldr	r1, [pc, #56]	; (8014330 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 80142f8:	6878      	ldr	r0, [r7, #4]
 80142fa:	f7fa fa1d 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 80142fe:	683b      	ldr	r3, [r7, #0]
 8014300:	685b      	ldr	r3, [r3, #4]
 8014302:	4619      	mov	r1, r3
 8014304:	6878      	ldr	r0, [r7, #4]
 8014306:	f7fa fa17 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 801430a:	490a      	ldr	r1, [pc, #40]	; (8014334 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 801430c:	6878      	ldr	r0, [r7, #4]
 801430e:	f7fa fa13 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 8014312:	683b      	ldr	r3, [r7, #0]
 8014314:	689b      	ldr	r3, [r3, #8]
 8014316:	4619      	mov	r1, r3
 8014318:	6878      	ldr	r0, [r7, #4]
 801431a:	f7fa fa0d 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 801431e:	4906      	ldr	r1, [pc, #24]	; (8014338 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 8014320:	6878      	ldr	r0, [r7, #4]
 8014322:	f7fa fa09 	bl	800e738 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 8014326:	bf00      	nop
}
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	3708      	adds	r7, #8
 801432c:	46bd      	mov	sp, r7
 801432e:	bd80      	pop	{r7, pc}
 8014330:	080269d8 	.word	0x080269d8
 8014334:	080269dc 	.word	0x080269dc
 8014338:	080269e0 	.word	0x080269e0

0801433c <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 801433c:	b480      	push	{r7}
 801433e:	b083      	sub	sp, #12
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	7e5b      	ldrb	r3, [r3, #25]
}
 8014348:	4618      	mov	r0, r3
 801434a:	370c      	adds	r7, #12
 801434c:	46bd      	mov	sp, r7
 801434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014352:	4770      	bx	lr

08014354 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b082      	sub	sp, #8
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	f001 f96d 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 8014362:	4603      	mov	r3, r0
 8014364:	681a      	ldr	r2, [r3, #0]
 8014366:	3228      	adds	r2, #40	; 0x28
 8014368:	6812      	ldr	r2, [r2, #0]
 801436a:	4618      	mov	r0, r3
 801436c:	4790      	blx	r2
}
 801436e:	bf00      	nop
 8014370:	3708      	adds	r7, #8
 8014372:	46bd      	mov	sp, r7
 8014374:	bd80      	pop	{r7, pc}

08014376 <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 8014376:	b480      	push	{r7}
 8014378:	b083      	sub	sp, #12
 801437a:	af00      	add	r7, sp, #0
 801437c:	6078      	str	r0, [r7, #4]
    return true;
 801437e:	2301      	movs	r3, #1
}
 8014380:	4618      	mov	r0, r3
 8014382:	370c      	adds	r7, #12
 8014384:	46bd      	mov	sp, r7
 8014386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438a:	4770      	bx	lr

0801438c <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 801438c:	b480      	push	{r7}
 801438e:	b083      	sub	sp, #12
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	7e1b      	ldrb	r3, [r3, #24]
}
 8014398:	4618      	mov	r0, r3
 801439a:	370c      	adds	r7, #12
 801439c:	46bd      	mov	sp, r7
 801439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a2:	4770      	bx	lr

080143a4 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 80143a4:	b480      	push	{r7}
 80143a6:	b083      	sub	sp, #12
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	2201      	movs	r2, #1
 80143b0:	761a      	strb	r2, [r3, #24]
}
 80143b2:	bf00      	nop
 80143b4:	370c      	adds	r7, #12
 80143b6:	46bd      	mov	sp, r7
 80143b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143bc:	4770      	bx	lr

080143be <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 80143be:	b480      	push	{r7}
 80143c0:	b083      	sub	sp, #12
 80143c2:	af00      	add	r7, sp, #0
 80143c4:	6078      	str	r0, [r7, #4]

}
 80143c6:	bf00      	nop
 80143c8:	370c      	adds	r7, #12
 80143ca:	46bd      	mov	sp, r7
 80143cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d0:	4770      	bx	lr

080143d2 <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 80143d2:	b480      	push	{r7}
 80143d4:	b083      	sub	sp, #12
 80143d6:	af00      	add	r7, sp, #0
 80143d8:	6078      	str	r0, [r7, #4]
 80143da:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	683a      	ldr	r2, [r7, #0]
 80143e0:	60da      	str	r2, [r3, #12]
}
 80143e2:	bf00      	nop
 80143e4:	370c      	adds	r7, #12
 80143e6:	46bd      	mov	sp, r7
 80143e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ec:	4770      	bx	lr

080143ee <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 80143ee:	b480      	push	{r7}
 80143f0:	b083      	sub	sp, #12
 80143f2:	af00      	add	r7, sp, #0
 80143f4:	6078      	str	r0, [r7, #4]
 80143f6:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	683a      	ldr	r2, [r7, #0]
 80143fc:	611a      	str	r2, [r3, #16]
}
 80143fe:	bf00      	nop
 8014400:	370c      	adds	r7, #12
 8014402:	46bd      	mov	sp, r7
 8014404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014408:	4770      	bx	lr

0801440a <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 801440a:	b480      	push	{r7}
 801440c:	b083      	sub	sp, #12
 801440e:	af00      	add	r7, sp, #0
 8014410:	6078      	str	r0, [r7, #4]
 8014412:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	683a      	ldr	r2, [r7, #0]
 8014418:	605a      	str	r2, [r3, #4]
}
 801441a:	bf00      	nop
 801441c:	370c      	adds	r7, #12
 801441e:	46bd      	mov	sp, r7
 8014420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014424:	4770      	bx	lr

08014426 <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 8014426:	b480      	push	{r7}
 8014428:	b083      	sub	sp, #12
 801442a:	af00      	add	r7, sp, #0
 801442c:	6078      	str	r0, [r7, #4]
 801442e:	6039      	str	r1, [r7, #0]
    name_ = testName;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	683a      	ldr	r2, [r7, #0]
 8014434:	609a      	str	r2, [r3, #8]
}
 8014436:	bf00      	nop
 8014438:	370c      	adds	r7, #12
 801443a:	46bd      	mov	sp, r7
 801443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014440:	4770      	bx	lr

08014442 <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 8014442:	b580      	push	{r7, lr}
 8014444:	b082      	sub	sp, #8
 8014446:	af00      	add	r7, sp, #0
 8014448:	6078      	str	r0, [r7, #4]
 801444a:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 801444c:	683b      	ldr	r3, [r7, #0]
 801444e:	68db      	ldr	r3, [r3, #12]
 8014450:	4619      	mov	r1, r3
 8014452:	6878      	ldr	r0, [r7, #4]
 8014454:	f7f9 fd29 	bl	800deaa <_ZN12SimpleStringC1EPKc>
}
 8014458:	6878      	ldr	r0, [r7, #4]
 801445a:	3708      	adds	r7, #8
 801445c:	46bd      	mov	sp, r7
 801445e:	bd80      	pop	{r7, pc}

08014460 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 8014460:	b480      	push	{r7}
 8014462:	b083      	sub	sp, #12
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	691b      	ldr	r3, [r3, #16]
}
 801446c:	4618      	mov	r0, r3
 801446e:	370c      	adds	r7, #12
 8014470:	46bd      	mov	sp, r7
 8014472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014476:	4770      	bx	lr

08014478 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 8014478:	b590      	push	{r4, r7, lr}
 801447a:	b087      	sub	sp, #28
 801447c:	af00      	add	r7, sp, #0
 801447e:	60f8      	str	r0, [r7, #12]
 8014480:	60b9      	str	r1, [r7, #8]
 8014482:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d101      	bne.n	801448e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 801448a:	2301      	movs	r3, #1
 801448c:	e01f      	b.n	80144ce <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d01b      	beq.n	80144cc <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 8014494:	f107 0310 	add.w	r3, r7, #16
 8014498:	68b9      	ldr	r1, [r7, #8]
 801449a:	4618      	mov	r0, r3
 801449c:	f7f9 fd05 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80144a0:	f107 0310 	add.w	r3, r7, #16
 80144a4:	4619      	mov	r1, r3
 80144a6:	6878      	ldr	r0, [r7, #4]
 80144a8:	f00c fb91 	bl	8020bce <_ZNK10TestFilter5matchERK12SimpleString>
 80144ac:	4603      	mov	r3, r0
 80144ae:	461c      	mov	r4, r3
 80144b0:	f107 0310 	add.w	r3, r7, #16
 80144b4:	4618      	mov	r0, r3
 80144b6:	f7fa f8b0 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80144ba:	2c00      	cmp	r4, #0
 80144bc:	d001      	beq.n	80144c2 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 80144be:	2301      	movs	r3, #1
 80144c0:	e005      	b.n	80144ce <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f00c fb5d 	bl	8020b82 <_ZNK10TestFilter7getNextEv>
 80144c8:	6078      	str	r0, [r7, #4]
 80144ca:	e7e0      	b.n	801448e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 80144cc:	2300      	movs	r3, #0
}
 80144ce:	4618      	mov	r0, r3
 80144d0:	371c      	adds	r7, #28
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bd90      	pop	{r4, r7, pc}

080144d6 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 80144d6:	b580      	push	{r7, lr}
 80144d8:	b084      	sub	sp, #16
 80144da:	af00      	add	r7, sp, #0
 80144dc:	60f8      	str	r0, [r7, #12]
 80144de:	60b9      	str	r1, [r7, #8]
 80144e0:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	685b      	ldr	r3, [r3, #4]
 80144e6:	68ba      	ldr	r2, [r7, #8]
 80144e8:	4619      	mov	r1, r3
 80144ea:	68f8      	ldr	r0, [r7, #12]
 80144ec:	f7ff ffc4 	bl	8014478 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 80144f0:	4603      	mov	r3, r0
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d00b      	beq.n	801450e <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	689b      	ldr	r3, [r3, #8]
 80144fa:	687a      	ldr	r2, [r7, #4]
 80144fc:	4619      	mov	r1, r3
 80144fe:	68f8      	ldr	r0, [r7, #12]
 8014500:	f7ff ffba 	bl	8014478 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8014504:	4603      	mov	r3, r0
 8014506:	2b00      	cmp	r3, #0
 8014508:	d001      	beq.n	801450e <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 801450a:	2301      	movs	r3, #1
 801450c:	e000      	b.n	8014510 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 801450e:	2300      	movs	r3, #0
}
 8014510:	4618      	mov	r0, r3
 8014512:	3710      	adds	r7, #16
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}

08014518 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 8014518:	b590      	push	{r4, r7, lr}
 801451a:	b083      	sub	sp, #12
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
 8014520:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	339c      	adds	r3, #156	; 0x9c
 8014528:	681c      	ldr	r4, [r3, #0]
 801452a:	f001 f8b1 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801452e:	4603      	mov	r3, r0
 8014530:	461a      	mov	r2, r3
 8014532:	6839      	ldr	r1, [r7, #0]
 8014534:	6878      	ldr	r0, [r7, #4]
 8014536:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 8014538:	bf00      	nop
 801453a:	370c      	adds	r7, #12
 801453c:	46bd      	mov	sp, r7
 801453e:	bd90      	pop	{r4, r7, pc}

08014540 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b084      	sub	sp, #16
 8014544:	af00      	add	r7, sp, #0
 8014546:	60f8      	str	r0, [r7, #12]
 8014548:	60b9      	str	r1, [r7, #8]
 801454a:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	2201      	movs	r2, #1
 8014550:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 8014552:	68f8      	ldr	r0, [r7, #12]
 8014554:	f001 f872 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 8014558:	4603      	mov	r3, r0
 801455a:	681a      	ldr	r2, [r3, #0]
 801455c:	3234      	adds	r2, #52	; 0x34
 801455e:	6812      	ldr	r2, [r2, #0]
 8014560:	68b9      	ldr	r1, [r7, #8]
 8014562:	4618      	mov	r0, r3
 8014564:	4790      	blx	r2
    terminator.exitCurrentTest();
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	6878      	ldr	r0, [r7, #4]
 801456e:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8014570:	bf00      	nop
 8014572:	3710      	adds	r7, #16
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}

08014578 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 8014582:	683b      	ldr	r3, [r7, #0]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	6838      	ldr	r0, [r7, #0]
 801458a:	4798      	blx	r3
} // LCOV_EXCL_LINE
 801458c:	bf00      	nop
 801458e:	3708      	adds	r7, #8
 8014590:	46bd      	mov	sp, r7
 8014592:	bd80      	pop	{r7, pc}

08014594 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014594:	b590      	push	{r4, r7, lr}
 8014596:	b09d      	sub	sp, #116	; 0x74
 8014598:	af04      	add	r7, sp, #16
 801459a:	60f8      	str	r0, [r7, #12]
 801459c:	607a      	str	r2, [r7, #4]
 801459e:	603b      	str	r3, [r7, #0]
 80145a0:	460b      	mov	r3, r1
 80145a2:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 80145a4:	68f8      	ldr	r0, [r7, #12]
 80145a6:	f001 f849 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 80145aa:	4603      	mov	r3, r0
 80145ac:	681a      	ldr	r2, [r3, #0]
 80145ae:	3228      	adds	r2, #40	; 0x28
 80145b0:	6812      	ldr	r2, [r2, #0]
 80145b2:	4618      	mov	r0, r3
 80145b4:	4790      	blx	r2
    if (!condition)
 80145b6:	7afb      	ldrb	r3, [r7, #11]
 80145b8:	f083 0301 	eor.w	r3, r3, #1
 80145bc:	b2db      	uxtb	r3, r3
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d03f      	beq.n	8014642 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	339c      	adds	r3, #156	; 0x9c
 80145c8:	681c      	ldr	r4, [r3, #0]
 80145ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80145ce:	6879      	ldr	r1, [r7, #4]
 80145d0:	4618      	mov	r0, r3
 80145d2:	f7f9 fc6a 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80145d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80145da:	6839      	ldr	r1, [r7, #0]
 80145dc:	4618      	mov	r0, r3
 80145de:	f7f9 fc64 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80145e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80145e6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80145e8:	4618      	mov	r0, r3
 80145ea:	f7f9 fc5e 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80145ee:	f107 0014 	add.w	r0, r7, #20
 80145f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80145f6:	9302      	str	r3, [sp, #8]
 80145f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80145fc:	9301      	str	r3, [sp, #4]
 80145fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014602:	9300      	str	r3, [sp, #0]
 8014604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014606:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014608:	68f9      	ldr	r1, [r7, #12]
 801460a:	f7fb ff6b 	bl	80104e4 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801460e:	f107 0314 	add.w	r3, r7, #20
 8014612:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014614:	4619      	mov	r1, r3
 8014616:	68f8      	ldr	r0, [r7, #12]
 8014618:	47a0      	blx	r4
 801461a:	f107 0314 	add.w	r3, r7, #20
 801461e:	4618      	mov	r0, r3
 8014620:	f7fc fdce 	bl	80111c0 <_ZN12CheckFailureD1Ev>
 8014624:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014628:	4618      	mov	r0, r3
 801462a:	f7f9 fff6 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801462e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014632:	4618      	mov	r0, r3
 8014634:	f7f9 fff1 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8014638:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801463c:	4618      	mov	r0, r3
 801463e:	f7f9 ffec 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8014642:	bf00      	nop
 8014644:	3764      	adds	r7, #100	; 0x64
 8014646:	46bd      	mov	sp, r7
 8014648:	bd90      	pop	{r4, r7, pc}

0801464a <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801464a:	b590      	push	{r4, r7, lr}
 801464c:	b097      	sub	sp, #92	; 0x5c
 801464e:	af02      	add	r7, sp, #8
 8014650:	60f8      	str	r0, [r7, #12]
 8014652:	60b9      	str	r1, [r7, #8]
 8014654:	607a      	str	r2, [r7, #4]
 8014656:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014658:	68f8      	ldr	r0, [r7, #12]
 801465a:	f000 ffef 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 801465e:	4603      	mov	r3, r0
 8014660:	681a      	ldr	r2, [r3, #0]
 8014662:	3228      	adds	r2, #40	; 0x28
 8014664:	6812      	ldr	r2, [r2, #0]
 8014666:	4618      	mov	r0, r3
 8014668:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	339c      	adds	r3, #156	; 0x9c
 8014670:	681c      	ldr	r4, [r3, #0]
 8014672:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014676:	68b9      	ldr	r1, [r7, #8]
 8014678:	4618      	mov	r0, r3
 801467a:	f7f9 fc16 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801467e:	f107 0014 	add.w	r0, r7, #20
 8014682:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014686:	9300      	str	r3, [sp, #0]
 8014688:	683b      	ldr	r3, [r7, #0]
 801468a:	687a      	ldr	r2, [r7, #4]
 801468c:	68f9      	ldr	r1, [r7, #12]
 801468e:	f7fb ff71 	bl	8010574 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8014692:	f107 0314 	add.w	r3, r7, #20
 8014696:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014698:	4619      	mov	r1, r3
 801469a:	68f8      	ldr	r0, [r7, #12]
 801469c:	47a0      	blx	r4
 801469e:	f107 0314 	add.w	r3, r7, #20
 80146a2:	4618      	mov	r0, r3
 80146a4:	f7f7 fc16 	bl	800bed4 <_ZN11FailFailureD1Ev>
 80146a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80146ac:	4618      	mov	r0, r3
 80146ae:	f7f9 ffb4 	bl	800e61a <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 80146b2:	bf00      	nop
 80146b4:	3754      	adds	r7, #84	; 0x54
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd90      	pop	{r4, r7, pc}

080146ba <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80146ba:	b590      	push	{r4, r7, lr}
 80146bc:	b0a7      	sub	sp, #156	; 0x9c
 80146be:	af04      	add	r7, sp, #16
 80146c0:	60f8      	str	r0, [r7, #12]
 80146c2:	60b9      	str	r1, [r7, #8]
 80146c4:	607a      	str	r2, [r7, #4]
 80146c6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80146c8:	68f8      	ldr	r0, [r7, #12]
 80146ca:	f000 ffb7 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 80146ce:	4603      	mov	r3, r0
 80146d0:	681a      	ldr	r2, [r3, #0]
 80146d2:	3228      	adds	r2, #40	; 0x28
 80146d4:	6812      	ldr	r2, [r2, #0]
 80146d6:	4618      	mov	r0, r3
 80146d8:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d102      	bne.n	80146e6 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 80146e0:	68bb      	ldr	r3, [r7, #8]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d068      	beq.n	80147b8 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d002      	beq.n	80146f2 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d12a      	bne.n	8014748 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	339c      	adds	r3, #156	; 0x9c
 80146f8:	681c      	ldr	r4, [r3, #0]
 80146fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80146fe:	6839      	ldr	r1, [r7, #0]
 8014700:	4618      	mov	r0, r3
 8014702:	f7f9 fbd2 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014706:	f107 0010 	add.w	r0, r7, #16
 801470a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801470e:	9302      	str	r3, [sp, #8]
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	9301      	str	r3, [sp, #4]
 8014714:	68bb      	ldr	r3, [r7, #8]
 8014716:	9300      	str	r3, [sp, #0]
 8014718:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801471c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8014720:	68f9      	ldr	r1, [r7, #12]
 8014722:	f7fc f9ad 	bl	8010a80 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8014726:	f107 0310 	add.w	r3, r7, #16
 801472a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801472e:	4619      	mov	r1, r3
 8014730:	68f8      	ldr	r0, [r7, #12]
 8014732:	47a0      	blx	r4
 8014734:	f107 0310 	add.w	r3, r7, #16
 8014738:	4618      	mov	r0, r3
 801473a:	f7fc fcb9 	bl	80110b0 <_ZN18StringEqualFailureD1Ev>
 801473e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014742:	4618      	mov	r0, r3
 8014744:	f7f9 ff69 	bl	800e61a <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 8014748:	6879      	ldr	r1, [r7, #4]
 801474a:	68b8      	ldr	r0, [r7, #8]
 801474c:	f7f9 f9ea 	bl	800db24 <_ZN12SimpleString6StrCmpEPKcS1_>
 8014750:	4603      	mov	r3, r0
 8014752:	2b00      	cmp	r3, #0
 8014754:	bf14      	ite	ne
 8014756:	2301      	movne	r3, #1
 8014758:	2300      	moveq	r3, #0
 801475a:	b2db      	uxtb	r3, r3
 801475c:	2b00      	cmp	r3, #0
 801475e:	d02c      	beq.n	80147ba <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	339c      	adds	r3, #156	; 0x9c
 8014766:	681c      	ldr	r4, [r3, #0]
 8014768:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801476c:	6839      	ldr	r1, [r7, #0]
 801476e:	4618      	mov	r0, r3
 8014770:	f7f9 fb9b 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014774:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8014778:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801477c:	9302      	str	r3, [sp, #8]
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	9301      	str	r3, [sp, #4]
 8014782:	68bb      	ldr	r3, [r7, #8]
 8014784:	9300      	str	r3, [sp, #0]
 8014786:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801478a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801478e:	68f9      	ldr	r1, [r7, #12]
 8014790:	f7fc f976 	bl	8010a80 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8014794:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014798:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801479c:	4619      	mov	r1, r3
 801479e:	68f8      	ldr	r0, [r7, #12]
 80147a0:	47a0      	blx	r4
 80147a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80147a6:	4618      	mov	r0, r3
 80147a8:	f7fc fc82 	bl	80110b0 <_ZN18StringEqualFailureD1Ev>
 80147ac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80147b0:	4618      	mov	r0, r3
 80147b2:	f7f9 ff32 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80147b6:	e000      	b.n	80147ba <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80147b8:	bf00      	nop
}
 80147ba:	378c      	adds	r7, #140	; 0x8c
 80147bc:	46bd      	mov	sp, r7
 80147be:	bd90      	pop	{r4, r7, pc}

080147c0 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80147c0:	b590      	push	{r4, r7, lr}
 80147c2:	b0a7      	sub	sp, #156	; 0x9c
 80147c4:	af04      	add	r7, sp, #16
 80147c6:	60f8      	str	r0, [r7, #12]
 80147c8:	60b9      	str	r1, [r7, #8]
 80147ca:	607a      	str	r2, [r7, #4]
 80147cc:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80147ce:	68f8      	ldr	r0, [r7, #12]
 80147d0:	f000 ff34 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 80147d4:	4603      	mov	r3, r0
 80147d6:	681a      	ldr	r2, [r3, #0]
 80147d8:	3228      	adds	r2, #40	; 0x28
 80147da:	6812      	ldr	r2, [r2, #0]
 80147dc:	4618      	mov	r0, r3
 80147de:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d102      	bne.n	80147ec <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d06b      	beq.n	80148c4 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d002      	beq.n	80147f8 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 80147f2:	68bb      	ldr	r3, [r7, #8]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d12b      	bne.n	8014850 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	339c      	adds	r3, #156	; 0x9c
 80147fe:	681c      	ldr	r4, [r3, #0]
 8014800:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014804:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8014808:	4618      	mov	r0, r3
 801480a:	f7f9 fb4e 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801480e:	f107 0010 	add.w	r0, r7, #16
 8014812:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014816:	9302      	str	r3, [sp, #8]
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	9301      	str	r3, [sp, #4]
 801481c:	68bb      	ldr	r3, [r7, #8]
 801481e:	9300      	str	r3, [sp, #0]
 8014820:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014824:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8014828:	68f9      	ldr	r1, [r7, #12]
 801482a:	f7fc f929 	bl	8010a80 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801482e:	f107 0310 	add.w	r3, r7, #16
 8014832:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014836:	4619      	mov	r1, r3
 8014838:	68f8      	ldr	r0, [r7, #12]
 801483a:	47a0      	blx	r4
 801483c:	f107 0310 	add.w	r3, r7, #16
 8014840:	4618      	mov	r0, r3
 8014842:	f7fc fc35 	bl	80110b0 <_ZN18StringEqualFailureD1Ev>
 8014846:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801484a:	4618      	mov	r0, r3
 801484c:	f7f9 fee5 	bl	800e61a <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 8014850:	683a      	ldr	r2, [r7, #0]
 8014852:	6879      	ldr	r1, [r7, #4]
 8014854:	68b8      	ldr	r0, [r7, #8]
 8014856:	f7f9 f9a4 	bl	800dba2 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 801485a:	4603      	mov	r3, r0
 801485c:	2b00      	cmp	r3, #0
 801485e:	bf14      	ite	ne
 8014860:	2301      	movne	r3, #1
 8014862:	2300      	moveq	r3, #0
 8014864:	b2db      	uxtb	r3, r3
 8014866:	2b00      	cmp	r3, #0
 8014868:	d02d      	beq.n	80148c6 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	339c      	adds	r3, #156	; 0x9c
 8014870:	681c      	ldr	r4, [r3, #0]
 8014872:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014876:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801487a:	4618      	mov	r0, r3
 801487c:	f7f9 fb15 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014880:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8014884:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014888:	9302      	str	r3, [sp, #8]
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	9301      	str	r3, [sp, #4]
 801488e:	68bb      	ldr	r3, [r7, #8]
 8014890:	9300      	str	r3, [sp, #0]
 8014892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014896:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801489a:	68f9      	ldr	r1, [r7, #12]
 801489c:	f7fc f8f0 	bl	8010a80 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80148a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80148a4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80148a8:	4619      	mov	r1, r3
 80148aa:	68f8      	ldr	r0, [r7, #12]
 80148ac:	47a0      	blx	r4
 80148ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7fc fbfc 	bl	80110b0 <_ZN18StringEqualFailureD1Ev>
 80148b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80148bc:	4618      	mov	r0, r3
 80148be:	f7f9 feac 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80148c2:	e000      	b.n	80148c6 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80148c4:	bf00      	nop
}
 80148c6:	378c      	adds	r7, #140	; 0x8c
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd90      	pop	{r4, r7, pc}

080148cc <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 80148cc:	b590      	push	{r4, r7, lr}
 80148ce:	b0ab      	sub	sp, #172	; 0xac
 80148d0:	af04      	add	r7, sp, #16
 80148d2:	60f8      	str	r0, [r7, #12]
 80148d4:	60b9      	str	r1, [r7, #8]
 80148d6:	607a      	str	r2, [r7, #4]
 80148d8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80148da:	68f8      	ldr	r0, [r7, #12]
 80148dc:	f000 feae 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 80148e0:	4603      	mov	r3, r0
 80148e2:	681a      	ldr	r2, [r3, #0]
 80148e4:	3228      	adds	r2, #40	; 0x28
 80148e6:	6812      	ldr	r2, [r2, #0]
 80148e8:	4618      	mov	r0, r3
 80148ea:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d102      	bne.n	80148f8 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 80148f2:	68bb      	ldr	r3, [r7, #8]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d07c      	beq.n	80149f2 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d002      	beq.n	8014904 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 80148fe:	68bb      	ldr	r3, [r7, #8]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d128      	bne.n	8014956 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	3398      	adds	r3, #152	; 0x98
 801490a:	681c      	ldr	r4, [r3, #0]
 801490c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014910:	6839      	ldr	r1, [r7, #0]
 8014912:	4618      	mov	r0, r3
 8014914:	f7f9 fac9 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014918:	f107 0010 	add.w	r0, r7, #16
 801491c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014920:	9302      	str	r3, [sp, #8]
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	9301      	str	r3, [sp, #4]
 8014926:	68bb      	ldr	r3, [r7, #8]
 8014928:	9300      	str	r3, [sp, #0]
 801492a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801492e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014932:	68f9      	ldr	r1, [r7, #12]
 8014934:	f7fc f948 	bl	8010bc8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8014938:	f107 0310 	add.w	r3, r7, #16
 801493c:	4619      	mov	r1, r3
 801493e:	68f8      	ldr	r0, [r7, #12]
 8014940:	47a0      	blx	r4
 8014942:	f107 0310 	add.w	r3, r7, #16
 8014946:	4618      	mov	r0, r3
 8014948:	f7fc fb90 	bl	801106c <_ZN24StringEqualNoCaseFailureD1Ev>
 801494c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014950:	4618      	mov	r0, r3
 8014952:	f7f9 fe62 	bl	800e61a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 8014956:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801495a:	68b9      	ldr	r1, [r7, #8]
 801495c:	4618      	mov	r0, r3
 801495e:	f7f9 faa4 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014962:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014966:	6879      	ldr	r1, [r7, #4]
 8014968:	4618      	mov	r0, r3
 801496a:	f7f9 fa9e 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801496e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8014972:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014976:	4611      	mov	r1, r2
 8014978:	4618      	mov	r0, r3
 801497a:	f7f9 fe75 	bl	800e668 <_ZNK12SimpleString12equalsNoCaseERKS_>
 801497e:	4603      	mov	r3, r0
 8014980:	f083 0301 	eor.w	r3, r3, #1
 8014984:	b2dc      	uxtb	r4, r3
 8014986:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801498a:	4618      	mov	r0, r3
 801498c:	f7f9 fe45 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8014990:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014994:	4618      	mov	r0, r3
 8014996:	f7f9 fe40 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801499a:	2c00      	cmp	r4, #0
 801499c:	d02a      	beq.n	80149f4 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	3398      	adds	r3, #152	; 0x98
 80149a4:	681c      	ldr	r4, [r3, #0]
 80149a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80149aa:	6839      	ldr	r1, [r7, #0]
 80149ac:	4618      	mov	r0, r3
 80149ae:	f7f9 fa7c 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80149b2:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80149b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80149ba:	9302      	str	r3, [sp, #8]
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	9301      	str	r3, [sp, #4]
 80149c0:	68bb      	ldr	r3, [r7, #8]
 80149c2:	9300      	str	r3, [sp, #0]
 80149c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80149c8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80149cc:	68f9      	ldr	r1, [r7, #12]
 80149ce:	f7fc f8fb 	bl	8010bc8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80149d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80149d6:	4619      	mov	r1, r3
 80149d8:	68f8      	ldr	r0, [r7, #12]
 80149da:	47a0      	blx	r4
 80149dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80149e0:	4618      	mov	r0, r3
 80149e2:	f7fc fb43 	bl	801106c <_ZN24StringEqualNoCaseFailureD1Ev>
 80149e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80149ea:	4618      	mov	r0, r3
 80149ec:	f7f9 fe15 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80149f0:	e000      	b.n	80149f4 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80149f2:	bf00      	nop
}
 80149f4:	379c      	adds	r7, #156	; 0x9c
 80149f6:	46bd      	mov	sp, r7
 80149f8:	bd90      	pop	{r4, r7, pc}

080149fa <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 80149fa:	b590      	push	{r4, r7, lr}
 80149fc:	b0b3      	sub	sp, #204	; 0xcc
 80149fe:	af04      	add	r7, sp, #16
 8014a00:	60f8      	str	r0, [r7, #12]
 8014a02:	60b9      	str	r1, [r7, #8]
 8014a04:	607a      	str	r2, [r7, #4]
 8014a06:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014a08:	68f8      	ldr	r0, [r7, #12]
 8014a0a:	f000 fe17 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 8014a0e:	4603      	mov	r3, r0
 8014a10:	681a      	ldr	r2, [r3, #0]
 8014a12:	3228      	adds	r2, #40	; 0x28
 8014a14:	6812      	ldr	r2, [r2, #0]
 8014a16:	4618      	mov	r0, r3
 8014a18:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d103      	bne.n	8014a28 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 8014a20:	68bb      	ldr	r3, [r7, #8]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	f000 80ad 	beq.w	8014b82 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d002      	beq.n	8014a34 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 8014a2e:	68bb      	ldr	r3, [r7, #8]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d140      	bne.n	8014ab6 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	3398      	adds	r3, #152	; 0x98
 8014a3a:	681c      	ldr	r4, [r3, #0]
 8014a3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014a40:	68b9      	ldr	r1, [r7, #8]
 8014a42:	4618      	mov	r0, r3
 8014a44:	f7f9 fa31 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014a48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014a4c:	6879      	ldr	r1, [r7, #4]
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f7f9 fa2b 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014a54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014a58:	6839      	ldr	r1, [r7, #0]
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	f7f9 fa25 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014a60:	f107 0010 	add.w	r0, r7, #16
 8014a64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014a68:	9302      	str	r3, [sp, #8]
 8014a6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014a6e:	9301      	str	r3, [sp, #4]
 8014a70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014a74:	9300      	str	r3, [sp, #0]
 8014a76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014a7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8014a7e:	68f9      	ldr	r1, [r7, #12]
 8014a80:	f7fb fce6 	bl	8010450 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8014a84:	f107 0310 	add.w	r3, r7, #16
 8014a88:	4619      	mov	r1, r3
 8014a8a:	68f8      	ldr	r0, [r7, #12]
 8014a8c:	47a0      	blx	r4
 8014a8e:	f107 0310 	add.w	r3, r7, #16
 8014a92:	4618      	mov	r0, r3
 8014a94:	f7fc fbb6 	bl	8011204 <_ZN15ContainsFailureD1Ev>
 8014a98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f7f9 fdbc 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8014aa2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f7f9 fdb7 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8014aac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7f9 fdb2 	bl	800e61a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 8014ab6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014aba:	6879      	ldr	r1, [r7, #4]
 8014abc:	4618      	mov	r0, r3
 8014abe:	f7f9 f9f4 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014ac2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014ac6:	68b9      	ldr	r1, [r7, #8]
 8014ac8:	4618      	mov	r0, r3
 8014aca:	f7f9 f9ee 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014ace:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8014ad2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014ad6:	4611      	mov	r1, r2
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f7f9 fa64 	bl	800dfa6 <_ZNK12SimpleString8containsERKS_>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	f083 0301 	eor.w	r3, r3, #1
 8014ae4:	b2dc      	uxtb	r4, r3
 8014ae6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014aea:	4618      	mov	r0, r3
 8014aec:	f7f9 fd95 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8014af0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014af4:	4618      	mov	r0, r3
 8014af6:	f7f9 fd90 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8014afa:	2c00      	cmp	r4, #0
 8014afc:	d042      	beq.n	8014b84 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	3398      	adds	r3, #152	; 0x98
 8014b04:	681c      	ldr	r4, [r3, #0]
 8014b06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014b0a:	68b9      	ldr	r1, [r7, #8]
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	f7f9 f9cc 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014b12:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8014b16:	6879      	ldr	r1, [r7, #4]
 8014b18:	4618      	mov	r0, r3
 8014b1a:	f7f9 f9c6 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014b1e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014b22:	6839      	ldr	r1, [r7, #0]
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7f9 f9c0 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014b2a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8014b2e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014b32:	9302      	str	r3, [sp, #8]
 8014b34:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8014b38:	9301      	str	r3, [sp, #4]
 8014b3a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014b3e:	9300      	str	r3, [sp, #0]
 8014b40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014b44:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8014b48:	68f9      	ldr	r1, [r7, #12]
 8014b4a:	f7fb fc81 	bl	8010450 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8014b4e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014b52:	4619      	mov	r1, r3
 8014b54:	68f8      	ldr	r0, [r7, #12]
 8014b56:	47a0      	blx	r4
 8014b58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	f7fc fb51 	bl	8011204 <_ZN15ContainsFailureD1Ev>
 8014b62:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014b66:	4618      	mov	r0, r3
 8014b68:	f7f9 fd57 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8014b6c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8014b70:	4618      	mov	r0, r3
 8014b72:	f7f9 fd52 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8014b76:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	f7f9 fd4d 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8014b80:	e000      	b.n	8014b84 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8014b82:	bf00      	nop
}
 8014b84:	37bc      	adds	r7, #188	; 0xbc
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd90      	pop	{r4, r7, pc}

08014b8a <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8014b8a:	b590      	push	{r4, r7, lr}
 8014b8c:	b0b3      	sub	sp, #204	; 0xcc
 8014b8e:	af04      	add	r7, sp, #16
 8014b90:	60f8      	str	r0, [r7, #12]
 8014b92:	60b9      	str	r1, [r7, #8]
 8014b94:	607a      	str	r2, [r7, #4]
 8014b96:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014b98:	68f8      	ldr	r0, [r7, #12]
 8014b9a:	f000 fd4f 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	681a      	ldr	r2, [r3, #0]
 8014ba2:	3228      	adds	r2, #40	; 0x28
 8014ba4:	6812      	ldr	r2, [r2, #0]
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d103      	bne.n	8014bb8 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 8014bb0:	68bb      	ldr	r3, [r7, #8]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	f000 80ad 	beq.w	8014d12 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d002      	beq.n	8014bc4 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 8014bbe:	68bb      	ldr	r3, [r7, #8]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d140      	bne.n	8014c46 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	3398      	adds	r3, #152	; 0x98
 8014bca:	681c      	ldr	r4, [r3, #0]
 8014bcc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014bd0:	68b9      	ldr	r1, [r7, #8]
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	f7f9 f969 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014bd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014bdc:	6879      	ldr	r1, [r7, #4]
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7f9 f963 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014be4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014be8:	6839      	ldr	r1, [r7, #0]
 8014bea:	4618      	mov	r0, r3
 8014bec:	f7f9 f95d 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014bf0:	f107 0010 	add.w	r0, r7, #16
 8014bf4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014bf8:	9302      	str	r3, [sp, #8]
 8014bfa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014bfe:	9301      	str	r3, [sp, #4]
 8014c00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014c04:	9300      	str	r3, [sp, #0]
 8014c06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014c0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8014c0e:	68f9      	ldr	r1, [r7, #12]
 8014c10:	f7fb fc1e 	bl	8010450 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8014c14:	f107 0310 	add.w	r3, r7, #16
 8014c18:	4619      	mov	r1, r3
 8014c1a:	68f8      	ldr	r0, [r7, #12]
 8014c1c:	47a0      	blx	r4
 8014c1e:	f107 0310 	add.w	r3, r7, #16
 8014c22:	4618      	mov	r0, r3
 8014c24:	f7fc faee 	bl	8011204 <_ZN15ContainsFailureD1Ev>
 8014c28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f7f9 fcf4 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8014c32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014c36:	4618      	mov	r0, r3
 8014c38:	f7f9 fcef 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8014c3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014c40:	4618      	mov	r0, r3
 8014c42:	f7f9 fcea 	bl	800e61a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 8014c46:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014c4a:	6879      	ldr	r1, [r7, #4]
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	f7f9 f92c 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014c52:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014c56:	68b9      	ldr	r1, [r7, #8]
 8014c58:	4618      	mov	r0, r3
 8014c5a:	f7f9 f926 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014c5e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8014c62:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014c66:	4611      	mov	r1, r2
 8014c68:	4618      	mov	r0, r3
 8014c6a:	f7f9 f9b7 	bl	800dfdc <_ZNK12SimpleString14containsNoCaseERKS_>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	f083 0301 	eor.w	r3, r3, #1
 8014c74:	b2dc      	uxtb	r4, r3
 8014c76:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	f7f9 fccd 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8014c80:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014c84:	4618      	mov	r0, r3
 8014c86:	f7f9 fcc8 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8014c8a:	2c00      	cmp	r4, #0
 8014c8c:	d042      	beq.n	8014d14 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	3398      	adds	r3, #152	; 0x98
 8014c94:	681c      	ldr	r4, [r3, #0]
 8014c96:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014c9a:	68b9      	ldr	r1, [r7, #8]
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	f7f9 f904 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014ca2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8014ca6:	6879      	ldr	r1, [r7, #4]
 8014ca8:	4618      	mov	r0, r3
 8014caa:	f7f9 f8fe 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014cae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014cb2:	6839      	ldr	r1, [r7, #0]
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	f7f9 f8f8 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014cba:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8014cbe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014cc2:	9302      	str	r3, [sp, #8]
 8014cc4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8014cc8:	9301      	str	r3, [sp, #4]
 8014cca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014cce:	9300      	str	r3, [sp, #0]
 8014cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014cd4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8014cd8:	68f9      	ldr	r1, [r7, #12]
 8014cda:	f7fb fbb9 	bl	8010450 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8014cde:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014ce2:	4619      	mov	r1, r3
 8014ce4:	68f8      	ldr	r0, [r7, #12]
 8014ce6:	47a0      	blx	r4
 8014ce8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014cec:	4618      	mov	r0, r3
 8014cee:	f7fc fa89 	bl	8011204 <_ZN15ContainsFailureD1Ev>
 8014cf2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	f7f9 fc8f 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8014cfc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8014d00:	4618      	mov	r0, r3
 8014d02:	f7f9 fc8a 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8014d06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f7f9 fc85 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8014d10:	e000      	b.n	8014d14 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8014d12:	bf00      	nop
}
 8014d14:	37bc      	adds	r7, #188	; 0xbc
 8014d16:	46bd      	mov	sp, r7
 8014d18:	bd90      	pop	{r4, r7, pc}

08014d1a <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014d1a:	b590      	push	{r4, r7, lr}
 8014d1c:	b099      	sub	sp, #100	; 0x64
 8014d1e:	af04      	add	r7, sp, #16
 8014d20:	60f8      	str	r0, [r7, #12]
 8014d22:	60b9      	str	r1, [r7, #8]
 8014d24:	607a      	str	r2, [r7, #4]
 8014d26:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014d28:	68f8      	ldr	r0, [r7, #12]
 8014d2a:	f000 fc87 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 8014d2e:	4603      	mov	r3, r0
 8014d30:	681a      	ldr	r2, [r3, #0]
 8014d32:	3228      	adds	r2, #40	; 0x28
 8014d34:	6812      	ldr	r2, [r2, #0]
 8014d36:	4618      	mov	r0, r3
 8014d38:	4790      	blx	r2
    if (expected != actual)
 8014d3a:	68ba      	ldr	r2, [r7, #8]
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	d027      	beq.n	8014d92 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	339c      	adds	r3, #156	; 0x9c
 8014d48:	681c      	ldr	r4, [r3, #0]
 8014d4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014d4e:	6839      	ldr	r1, [r7, #0]
 8014d50:	4618      	mov	r0, r3
 8014d52:	f7f9 f8aa 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014d56:	f107 0014 	add.w	r0, r7, #20
 8014d5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014d5e:	9302      	str	r3, [sp, #8]
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	9301      	str	r3, [sp, #4]
 8014d64:	68bb      	ldr	r3, [r7, #8]
 8014d66:	9300      	str	r3, [sp, #0]
 8014d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014d6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014d6c:	68f9      	ldr	r1, [r7, #12]
 8014d6e:	f7fb fc1f 	bl	80105b0 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 8014d72:	f107 0314 	add.w	r3, r7, #20
 8014d76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014d78:	4619      	mov	r1, r3
 8014d7a:	68f8      	ldr	r0, [r7, #12]
 8014d7c:	47a0      	blx	r4
 8014d7e:	f107 0314 	add.w	r3, r7, #20
 8014d82:	4618      	mov	r0, r3
 8014d84:	f7fc f9fa 	bl	801117c <_ZN17LongsEqualFailureD1Ev>
 8014d88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	f7f9 fc44 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8014d92:	bf00      	nop
 8014d94:	3754      	adds	r7, #84	; 0x54
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bd90      	pop	{r4, r7, pc}

08014d9a <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014d9a:	b590      	push	{r4, r7, lr}
 8014d9c:	b099      	sub	sp, #100	; 0x64
 8014d9e:	af04      	add	r7, sp, #16
 8014da0:	60f8      	str	r0, [r7, #12]
 8014da2:	60b9      	str	r1, [r7, #8]
 8014da4:	607a      	str	r2, [r7, #4]
 8014da6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014da8:	68f8      	ldr	r0, [r7, #12]
 8014daa:	f000 fc47 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 8014dae:	4603      	mov	r3, r0
 8014db0:	681a      	ldr	r2, [r3, #0]
 8014db2:	3228      	adds	r2, #40	; 0x28
 8014db4:	6812      	ldr	r2, [r2, #0]
 8014db6:	4618      	mov	r0, r3
 8014db8:	4790      	blx	r2
    if (expected != actual)
 8014dba:	68ba      	ldr	r2, [r7, #8]
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	429a      	cmp	r2, r3
 8014dc0:	d027      	beq.n	8014e12 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	339c      	adds	r3, #156	; 0x9c
 8014dc8:	681c      	ldr	r4, [r3, #0]
 8014dca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014dce:	6839      	ldr	r1, [r7, #0]
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	f7f9 f86a 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014dd6:	f107 0014 	add.w	r0, r7, #20
 8014dda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014dde:	9302      	str	r3, [sp, #8]
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	9301      	str	r3, [sp, #4]
 8014de4:	68bb      	ldr	r3, [r7, #8]
 8014de6:	9300      	str	r3, [sp, #0]
 8014de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014dea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014dec:	68f9      	ldr	r1, [r7, #12]
 8014dee:	f7fb fcab 	bl	8010748 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 8014df2:	f107 0314 	add.w	r3, r7, #20
 8014df6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014df8:	4619      	mov	r1, r3
 8014dfa:	68f8      	ldr	r0, [r7, #12]
 8014dfc:	47a0      	blx	r4
 8014dfe:	f107 0314 	add.w	r3, r7, #20
 8014e02:	4618      	mov	r0, r3
 8014e04:	f7fc f998 	bl	8011138 <_ZN25UnsignedLongsEqualFailureD1Ev>
 8014e08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f7f9 fc04 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8014e12:	bf00      	nop
 8014e14:	3754      	adds	r7, #84	; 0x54
 8014e16:	46bd      	mov	sp, r7
 8014e18:	bd90      	pop	{r4, r7, pc}
	...

08014e1c <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014e1c:	b082      	sub	sp, #8
 8014e1e:	b590      	push	{r4, r7, lr}
 8014e20:	b099      	sub	sp, #100	; 0x64
 8014e22:	af02      	add	r7, sp, #8
 8014e24:	60f8      	str	r0, [r7, #12]
 8014e26:	1d38      	adds	r0, r7, #4
 8014e28:	e880 0006 	stmia.w	r0, {r1, r2}
 8014e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8014e2e:	68f8      	ldr	r0, [r7, #12]
 8014e30:	f000 fc04 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 8014e34:	4603      	mov	r3, r0
 8014e36:	681a      	ldr	r2, [r3, #0]
 8014e38:	3228      	adds	r2, #40	; 0x28
 8014e3a:	6812      	ldr	r2, [r2, #0]
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	339c      	adds	r3, #156	; 0x9c
 8014e46:	681c      	ldr	r4, [r3, #0]
 8014e48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014e4c:	4919      	ldr	r1, [pc, #100]	; (8014eb4 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 8014e4e:	4618      	mov	r0, r3
 8014e50:	f7f9 f82b 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014e54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014e58:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f7f9 f825 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014e60:	f107 0014 	add.w	r0, r7, #20
 8014e64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014e68:	9301      	str	r3, [sp, #4]
 8014e6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014e6e:	9300      	str	r3, [sp, #0]
 8014e70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014e72:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014e74:	68f9      	ldr	r1, [r7, #12]
 8014e76:	f7fc f84d 	bl	8010f14 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8014e7a:	f107 0314 	add.w	r3, r7, #20
 8014e7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014e82:	4619      	mov	r1, r3
 8014e84:	68f8      	ldr	r0, [r7, #12]
 8014e86:	47a0      	blx	r4
 8014e88:	f107 0314 	add.w	r3, r7, #20
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	f7fc f887 	bl	8010fa0 <_ZN25FeatureUnsupportedFailureD1Ev>
 8014e92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014e96:	4618      	mov	r0, r3
 8014e98:	f7f9 fbbf 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8014e9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	f7f9 fbba 	bl	800e61a <_ZN12SimpleStringD1Ev>
#endif
}
 8014ea6:	bf00      	nop
 8014ea8:	375c      	adds	r7, #92	; 0x5c
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8014eb0:	b002      	add	sp, #8
 8014eb2:	4770      	bx	lr
 8014eb4:	080269e4 	.word	0x080269e4

08014eb8 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014eb8:	b082      	sub	sp, #8
 8014eba:	b590      	push	{r4, r7, lr}
 8014ebc:	b099      	sub	sp, #100	; 0x64
 8014ebe:	af02      	add	r7, sp, #8
 8014ec0:	60f8      	str	r0, [r7, #12]
 8014ec2:	1d38      	adds	r0, r7, #4
 8014ec4:	e880 0006 	stmia.w	r0, {r1, r2}
 8014ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8014eca:	68f8      	ldr	r0, [r7, #12]
 8014ecc:	f000 fbb6 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 8014ed0:	4603      	mov	r3, r0
 8014ed2:	681a      	ldr	r2, [r3, #0]
 8014ed4:	3228      	adds	r2, #40	; 0x28
 8014ed6:	6812      	ldr	r2, [r2, #0]
 8014ed8:	4618      	mov	r0, r3
 8014eda:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	339c      	adds	r3, #156	; 0x9c
 8014ee2:	681c      	ldr	r4, [r3, #0]
 8014ee4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014ee8:	4919      	ldr	r1, [pc, #100]	; (8014f50 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 8014eea:	4618      	mov	r0, r3
 8014eec:	f7f8 ffdd 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014ef0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014ef4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	f7f8 ffd7 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014efc:	f107 0014 	add.w	r0, r7, #20
 8014f00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014f04:	9301      	str	r3, [sp, #4]
 8014f06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014f0a:	9300      	str	r3, [sp, #0]
 8014f0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014f0e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014f10:	68f9      	ldr	r1, [r7, #12]
 8014f12:	f7fb ffff 	bl	8010f14 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8014f16:	f107 0314 	add.w	r3, r7, #20
 8014f1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014f1e:	4619      	mov	r1, r3
 8014f20:	68f8      	ldr	r0, [r7, #12]
 8014f22:	47a0      	blx	r4
 8014f24:	f107 0314 	add.w	r3, r7, #20
 8014f28:	4618      	mov	r0, r3
 8014f2a:	f7fc f839 	bl	8010fa0 <_ZN25FeatureUnsupportedFailureD1Ev>
 8014f2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014f32:	4618      	mov	r0, r3
 8014f34:	f7f9 fb71 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8014f38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	f7f9 fb6c 	bl	800e61a <_ZN12SimpleStringD1Ev>
#endif
}
 8014f42:	bf00      	nop
 8014f44:	375c      	adds	r7, #92	; 0x5c
 8014f46:	46bd      	mov	sp, r7
 8014f48:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8014f4c:	b002      	add	sp, #8
 8014f4e:	4770      	bx	lr
 8014f50:	080269e4 	.word	0x080269e4

08014f54 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014f54:	b590      	push	{r4, r7, lr}
 8014f56:	b099      	sub	sp, #100	; 0x64
 8014f58:	af04      	add	r7, sp, #16
 8014f5a:	60f8      	str	r0, [r7, #12]
 8014f5c:	607b      	str	r3, [r7, #4]
 8014f5e:	460b      	mov	r3, r1
 8014f60:	72fb      	strb	r3, [r7, #11]
 8014f62:	4613      	mov	r3, r2
 8014f64:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 8014f66:	68f8      	ldr	r0, [r7, #12]
 8014f68:	f000 fb68 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 8014f6c:	4603      	mov	r3, r0
 8014f6e:	681a      	ldr	r2, [r3, #0]
 8014f70:	3228      	adds	r2, #40	; 0x28
 8014f72:	6812      	ldr	r2, [r2, #0]
 8014f74:	4618      	mov	r0, r3
 8014f76:	4790      	blx	r2
    if (expected != actual)
 8014f78:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8014f7c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8014f80:	429a      	cmp	r2, r3
 8014f82:	d029      	beq.n	8014fd8 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	339c      	adds	r3, #156	; 0x9c
 8014f8a:	681c      	ldr	r4, [r3, #0]
 8014f8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014f90:	6879      	ldr	r1, [r7, #4]
 8014f92:	4618      	mov	r0, r3
 8014f94:	f7f8 ff89 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8014f98:	f107 0014 	add.w	r0, r7, #20
 8014f9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014fa0:	9302      	str	r3, [sp, #8]
 8014fa2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8014fa6:	9301      	str	r3, [sp, #4]
 8014fa8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014fac:	9300      	str	r3, [sp, #0]
 8014fae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014fb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014fb2:	68f9      	ldr	r1, [r7, #12]
 8014fb4:	f7fb fc94 	bl	80108e0 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 8014fb8:	f107 0314 	add.w	r3, r7, #20
 8014fbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014fbe:	4619      	mov	r1, r3
 8014fc0:	68f8      	ldr	r0, [r7, #12]
 8014fc2:	47a0      	blx	r4
 8014fc4:	f107 0314 	add.w	r3, r7, #20
 8014fc8:	4618      	mov	r0, r3
 8014fca:	f7fc f893 	bl	80110f4 <_ZN23SignedBytesEqualFailureD1Ev>
 8014fce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f7f9 fb21 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8014fd8:	bf00      	nop
 8014fda:	3754      	adds	r7, #84	; 0x54
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd90      	pop	{r4, r7, pc}

08014fe0 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014fe0:	b590      	push	{r4, r7, lr}
 8014fe2:	b09d      	sub	sp, #116	; 0x74
 8014fe4:	af04      	add	r7, sp, #16
 8014fe6:	60f8      	str	r0, [r7, #12]
 8014fe8:	60b9      	str	r1, [r7, #8]
 8014fea:	607a      	str	r2, [r7, #4]
 8014fec:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014fee:	68f8      	ldr	r0, [r7, #12]
 8014ff0:	f000 fb24 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 8014ff4:	4603      	mov	r3, r0
 8014ff6:	681a      	ldr	r2, [r3, #0]
 8014ff8:	3228      	adds	r2, #40	; 0x28
 8014ffa:	6812      	ldr	r2, [r2, #0]
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	4790      	blx	r2
    if (expected != actual)
 8015000:	68ba      	ldr	r2, [r7, #8]
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	429a      	cmp	r2, r3
 8015006:	d03f      	beq.n	8015088 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	339c      	adds	r3, #156	; 0x9c
 801500e:	681c      	ldr	r4, [r3, #0]
 8015010:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015014:	68b9      	ldr	r1, [r7, #8]
 8015016:	4618      	mov	r0, r3
 8015018:	f7f9 fdea 	bl	800ebf0 <_Z10StringFromPKv>
 801501c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015020:	6879      	ldr	r1, [r7, #4]
 8015022:	4618      	mov	r0, r3
 8015024:	f7f9 fde4 	bl	800ebf0 <_Z10StringFromPKv>
 8015028:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801502c:	6839      	ldr	r1, [r7, #0]
 801502e:	4618      	mov	r0, r3
 8015030:	f7f8 ff3b 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8015034:	f107 0014 	add.w	r0, r7, #20
 8015038:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801503c:	9302      	str	r3, [sp, #8]
 801503e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015042:	9301      	str	r3, [sp, #4]
 8015044:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015048:	9300      	str	r3, [sp, #0]
 801504a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801504c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801504e:	68f9      	ldr	r1, [r7, #12]
 8015050:	f7fb f814 	bl	801007c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8015054:	f107 0314 	add.w	r3, r7, #20
 8015058:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801505a:	4619      	mov	r1, r3
 801505c:	68f8      	ldr	r0, [r7, #12]
 801505e:	47a0      	blx	r4
 8015060:	f107 0314 	add.w	r3, r7, #20
 8015064:	4618      	mov	r0, r3
 8015066:	f7fc f955 	bl	8011314 <_ZN13EqualsFailureD1Ev>
 801506a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801506e:	4618      	mov	r0, r3
 8015070:	f7f9 fad3 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8015074:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015078:	4618      	mov	r0, r3
 801507a:	f7f9 face 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801507e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015082:	4618      	mov	r0, r3
 8015084:	f7f9 fac9 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8015088:	bf00      	nop
 801508a:	3764      	adds	r7, #100	; 0x64
 801508c:	46bd      	mov	sp, r7
 801508e:	bd90      	pop	{r4, r7, pc}

08015090 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015090:	b590      	push	{r4, r7, lr}
 8015092:	b09d      	sub	sp, #116	; 0x74
 8015094:	af04      	add	r7, sp, #16
 8015096:	60f8      	str	r0, [r7, #12]
 8015098:	60b9      	str	r1, [r7, #8]
 801509a:	607a      	str	r2, [r7, #4]
 801509c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801509e:	68f8      	ldr	r0, [r7, #12]
 80150a0:	f000 facc 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 80150a4:	4603      	mov	r3, r0
 80150a6:	681a      	ldr	r2, [r3, #0]
 80150a8:	3228      	adds	r2, #40	; 0x28
 80150aa:	6812      	ldr	r2, [r2, #0]
 80150ac:	4618      	mov	r0, r3
 80150ae:	4790      	blx	r2
    if (expected != actual)
 80150b0:	68ba      	ldr	r2, [r7, #8]
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	429a      	cmp	r2, r3
 80150b6:	d03f      	beq.n	8015138 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	339c      	adds	r3, #156	; 0x9c
 80150be:	681c      	ldr	r4, [r3, #0]
 80150c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80150c4:	68b9      	ldr	r1, [r7, #8]
 80150c6:	4618      	mov	r0, r3
 80150c8:	f7f9 fdbc 	bl	800ec44 <_Z10StringFromPFvvE>
 80150cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80150d0:	6879      	ldr	r1, [r7, #4]
 80150d2:	4618      	mov	r0, r3
 80150d4:	f7f9 fdb6 	bl	800ec44 <_Z10StringFromPFvvE>
 80150d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80150dc:	6839      	ldr	r1, [r7, #0]
 80150de:	4618      	mov	r0, r3
 80150e0:	f7f8 fee3 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80150e4:	f107 0014 	add.w	r0, r7, #20
 80150e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80150ec:	9302      	str	r3, [sp, #8]
 80150ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80150f2:	9301      	str	r3, [sp, #4]
 80150f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80150f8:	9300      	str	r3, [sp, #0]
 80150fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80150fc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80150fe:	68f9      	ldr	r1, [r7, #12]
 8015100:	f7fa ffbc 	bl	801007c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8015104:	f107 0314 	add.w	r3, r7, #20
 8015108:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801510a:	4619      	mov	r1, r3
 801510c:	68f8      	ldr	r0, [r7, #12]
 801510e:	47a0      	blx	r4
 8015110:	f107 0314 	add.w	r3, r7, #20
 8015114:	4618      	mov	r0, r3
 8015116:	f7fc f8fd 	bl	8011314 <_ZN13EqualsFailureD1Ev>
 801511a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801511e:	4618      	mov	r0, r3
 8015120:	f7f9 fa7b 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8015124:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015128:	4618      	mov	r0, r3
 801512a:	f7f9 fa76 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801512e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015132:	4618      	mov	r0, r3
 8015134:	f7f9 fa71 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8015138:	bf00      	nop
 801513a:	3764      	adds	r7, #100	; 0x64
 801513c:	46bd      	mov	sp, r7
 801513e:	bd90      	pop	{r4, r7, pc}

08015140 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015140:	b590      	push	{r4, r7, lr}
 8015142:	b09d      	sub	sp, #116	; 0x74
 8015144:	af02      	add	r7, sp, #8
 8015146:	6278      	str	r0, [r7, #36]	; 0x24
 8015148:	ed87 0b06 	vstr	d0, [r7, #24]
 801514c:	ed87 1b04 	vstr	d1, [r7, #16]
 8015150:	ed87 2b02 	vstr	d2, [r7, #8]
 8015154:	6239      	str	r1, [r7, #32]
 8015156:	607a      	str	r2, [r7, #4]
 8015158:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801515a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801515c:	f000 fa6e 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 8015160:	4603      	mov	r3, r0
 8015162:	681a      	ldr	r2, [r3, #0]
 8015164:	3228      	adds	r2, #40	; 0x28
 8015166:	6812      	ldr	r2, [r2, #0]
 8015168:	4618      	mov	r0, r3
 801516a:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 801516c:	ed97 2b02 	vldr	d2, [r7, #8]
 8015170:	ed97 1b04 	vldr	d1, [r7, #16]
 8015174:	ed97 0b06 	vldr	d0, [r7, #24]
 8015178:	f7fe fd4a 	bl	8013c10 <_Z13doubles_equalddd>
 801517c:	4603      	mov	r3, r0
 801517e:	f083 0301 	eor.w	r3, r3, #1
 8015182:	b2db      	uxtb	r3, r3
 8015184:	2b00      	cmp	r3, #0
 8015186:	d029      	beq.n	80151dc <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 8015188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	339c      	adds	r3, #156	; 0x9c
 801518e:	681c      	ldr	r4, [r3, #0]
 8015190:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8015194:	6a39      	ldr	r1, [r7, #32]
 8015196:	4618      	mov	r0, r3
 8015198:	f7f8 fe87 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801519c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80151a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80151a4:	9300      	str	r3, [sp, #0]
 80151a6:	ed97 2b02 	vldr	d2, [r7, #8]
 80151aa:	ed97 1b04 	vldr	d1, [r7, #16]
 80151ae:	ed97 0b06 	vldr	d0, [r7, #24]
 80151b2:	683b      	ldr	r3, [r7, #0]
 80151b4:	687a      	ldr	r2, [r7, #4]
 80151b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80151b8:	f7fa ffa2 	bl	8010100 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 80151bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80151c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80151c2:	4619      	mov	r1, r3
 80151c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80151c6:	47a0      	blx	r4
 80151c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80151cc:	4618      	mov	r0, r3
 80151ce:	f7fc f87f 	bl	80112d0 <_ZN19DoublesEqualFailureD1Ev>
 80151d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80151d6:	4618      	mov	r0, r3
 80151d8:	f7f9 fa1f 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 80151dc:	bf00      	nop
 80151de:	376c      	adds	r7, #108	; 0x6c
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd90      	pop	{r4, r7, pc}

080151e4 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80151e4:	b590      	push	{r4, r7, lr}
 80151e6:	b0a7      	sub	sp, #156	; 0x9c
 80151e8:	af04      	add	r7, sp, #16
 80151ea:	60f8      	str	r0, [r7, #12]
 80151ec:	60b9      	str	r1, [r7, #8]
 80151ee:	607a      	str	r2, [r7, #4]
 80151f0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80151f2:	68f8      	ldr	r0, [r7, #12]
 80151f4:	f000 fa22 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 80151f8:	4603      	mov	r3, r0
 80151fa:	681a      	ldr	r2, [r3, #0]
 80151fc:	3228      	adds	r2, #40	; 0x28
 80151fe:	6812      	ldr	r2, [r2, #0]
 8015200:	4618      	mov	r0, r3
 8015202:	4790      	blx	r2
	if (length == 0) return;
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d075      	beq.n	80152f6 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d102      	bne.n	8015216 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 8015210:	68bb      	ldr	r3, [r7, #8]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d071      	beq.n	80152fa <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d002      	beq.n	8015222 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 801521c:	68bb      	ldr	r3, [r7, #8]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d12d      	bne.n	801527e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	339c      	adds	r3, #156	; 0x9c
 8015228:	681c      	ldr	r4, [r3, #0]
 801522a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801522e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8015232:	4618      	mov	r0, r3
 8015234:	f7f8 fe39 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8015238:	f107 0010 	add.w	r0, r7, #16
 801523c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015240:	9303      	str	r3, [sp, #12]
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	9302      	str	r3, [sp, #8]
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	9301      	str	r3, [sp, #4]
 801524a:	68bb      	ldr	r3, [r7, #8]
 801524c:	9300      	str	r3, [sp, #0]
 801524e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015252:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015256:	68f9      	ldr	r1, [r7, #12]
 8015258:	f7fb fd70 	bl	8010d3c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 801525c:	f107 0310 	add.w	r3, r7, #16
 8015260:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8015264:	4619      	mov	r1, r3
 8015266:	68f8      	ldr	r0, [r7, #12]
 8015268:	47a0      	blx	r4
 801526a:	f107 0310 	add.w	r3, r7, #16
 801526e:	4618      	mov	r0, r3
 8015270:	f7fb feda 	bl	8011028 <_ZN18BinaryEqualFailureD1Ev>
 8015274:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015278:	4618      	mov	r0, r3
 801527a:	f7f9 f9ce 	bl	800e61a <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 801527e:	683a      	ldr	r2, [r7, #0]
 8015280:	6879      	ldr	r1, [r7, #4]
 8015282:	68b8      	ldr	r0, [r7, #8]
 8015284:	f7f8 fd30 	bl	800dce8 <_ZN12SimpleString6MemCmpEPKvS1_j>
 8015288:	4603      	mov	r3, r0
 801528a:	2b00      	cmp	r3, #0
 801528c:	bf14      	ite	ne
 801528e:	2301      	movne	r3, #1
 8015290:	2300      	moveq	r3, #0
 8015292:	b2db      	uxtb	r3, r3
 8015294:	2b00      	cmp	r3, #0
 8015296:	d031      	beq.n	80152fc <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	339c      	adds	r3, #156	; 0x9c
 801529e:	681c      	ldr	r4, [r3, #0]
 80152a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80152a4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80152a8:	4618      	mov	r0, r3
 80152aa:	f7f8 fdfe 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80152ae:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80152b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80152b6:	9303      	str	r3, [sp, #12]
 80152b8:	683b      	ldr	r3, [r7, #0]
 80152ba:	9302      	str	r3, [sp, #8]
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	9301      	str	r3, [sp, #4]
 80152c0:	68bb      	ldr	r3, [r7, #8]
 80152c2:	9300      	str	r3, [sp, #0]
 80152c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80152c8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80152cc:	68f9      	ldr	r1, [r7, #12]
 80152ce:	f7fb fd35 	bl	8010d3c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 80152d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80152d6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80152da:	4619      	mov	r1, r3
 80152dc:	68f8      	ldr	r0, [r7, #12]
 80152de:	47a0      	blx	r4
 80152e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80152e4:	4618      	mov	r0, r3
 80152e6:	f7fb fe9f 	bl	8011028 <_ZN18BinaryEqualFailureD1Ev>
 80152ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80152ee:	4618      	mov	r0, r3
 80152f0:	f7f9 f993 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80152f4:	e002      	b.n	80152fc <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 80152f6:	bf00      	nop
 80152f8:	e000      	b.n	80152fc <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80152fa:	bf00      	nop
}
 80152fc:	378c      	adds	r7, #140	; 0x8c
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd90      	pop	{r4, r7, pc}

08015302 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015302:	b590      	push	{r4, r7, lr}
 8015304:	b09b      	sub	sp, #108	; 0x6c
 8015306:	af06      	add	r7, sp, #24
 8015308:	60f8      	str	r0, [r7, #12]
 801530a:	60b9      	str	r1, [r7, #8]
 801530c:	607a      	str	r2, [r7, #4]
 801530e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8015310:	68f8      	ldr	r0, [r7, #12]
 8015312:	f000 f993 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 8015316:	4603      	mov	r3, r0
 8015318:	681a      	ldr	r2, [r3, #0]
 801531a:	3228      	adds	r2, #40	; 0x28
 801531c:	6812      	ldr	r2, [r2, #0]
 801531e:	4618      	mov	r0, r3
 8015320:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 8015322:	68ba      	ldr	r2, [r7, #8]
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	405a      	eors	r2, r3
 8015328:	683b      	ldr	r3, [r7, #0]
 801532a:	4013      	ands	r3, r2
 801532c:	2b00      	cmp	r3, #0
 801532e:	d02b      	beq.n	8015388 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	339c      	adds	r3, #156	; 0x9c
 8015336:	681c      	ldr	r4, [r3, #0]
 8015338:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801533c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801533e:	4618      	mov	r0, r3
 8015340:	f7f8 fdb3 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8015344:	f107 0014 	add.w	r0, r7, #20
 8015348:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801534c:	9304      	str	r3, [sp, #16]
 801534e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015350:	9303      	str	r3, [sp, #12]
 8015352:	683b      	ldr	r3, [r7, #0]
 8015354:	9302      	str	r3, [sp, #8]
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	9301      	str	r3, [sp, #4]
 801535a:	68bb      	ldr	r3, [r7, #8]
 801535c:	9300      	str	r3, [sp, #0]
 801535e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015360:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015362:	68f9      	ldr	r1, [r7, #12]
 8015364:	f7fb fd7a 	bl	8010e5c <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 8015368:	f107 0314 	add.w	r3, r7, #20
 801536c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801536e:	4619      	mov	r1, r3
 8015370:	68f8      	ldr	r0, [r7, #12]
 8015372:	47a0      	blx	r4
 8015374:	f107 0314 	add.w	r3, r7, #20
 8015378:	4618      	mov	r0, r3
 801537a:	f7fb fe33 	bl	8010fe4 <_ZN16BitsEqualFailureD1Ev>
 801537e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015382:	4618      	mov	r0, r3
 8015384:	f7f9 f949 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8015388:	bf00      	nop
 801538a:	3754      	adds	r7, #84	; 0x54
 801538c:	46bd      	mov	sp, r7
 801538e:	bd90      	pop	{r4, r7, pc}

08015390 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 8015390:	b590      	push	{r4, r7, lr}
 8015392:	b09d      	sub	sp, #116	; 0x74
 8015394:	af04      	add	r7, sp, #16
 8015396:	60f8      	str	r0, [r7, #12]
 8015398:	607a      	str	r2, [r7, #4]
 801539a:	603b      	str	r3, [r7, #0]
 801539c:	460b      	mov	r3, r1
 801539e:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 80153a0:	68f8      	ldr	r0, [r7, #12]
 80153a2:	f000 f94b 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 80153a6:	4603      	mov	r3, r0
 80153a8:	681a      	ldr	r2, [r3, #0]
 80153aa:	3228      	adds	r2, #40	; 0x28
 80153ac:	6812      	ldr	r2, [r2, #0]
 80153ae:	4618      	mov	r0, r3
 80153b0:	4790      	blx	r2
    if (failed)
 80153b2:	7afb      	ldrb	r3, [r7, #11]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d03f      	beq.n	8015438 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	339c      	adds	r3, #156	; 0x9c
 80153be:	681c      	ldr	r4, [r3, #0]
 80153c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80153c4:	6879      	ldr	r1, [r7, #4]
 80153c6:	4618      	mov	r0, r3
 80153c8:	f7f8 fd6f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80153cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80153d0:	6839      	ldr	r1, [r7, #0]
 80153d2:	4618      	mov	r0, r3
 80153d4:	f7f8 fd69 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80153d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80153dc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80153de:	4618      	mov	r0, r3
 80153e0:	f7f8 fd63 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80153e4:	f107 0014 	add.w	r0, r7, #20
 80153e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80153ec:	9302      	str	r3, [sp, #8]
 80153ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80153f2:	9301      	str	r3, [sp, #4]
 80153f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80153f8:	9300      	str	r3, [sp, #0]
 80153fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80153fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80153fe:	68f9      	ldr	r1, [r7, #12]
 8015400:	f7fa ff30 	bl	8010264 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8015404:	f107 0314 	add.w	r3, r7, #20
 8015408:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801540a:	4619      	mov	r1, r3
 801540c:	68f8      	ldr	r0, [r7, #12]
 801540e:	47a0      	blx	r4
 8015410:	f107 0314 	add.w	r3, r7, #20
 8015414:	4618      	mov	r0, r3
 8015416:	f7fb ff39 	bl	801128c <_ZN17CheckEqualFailureD1Ev>
 801541a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801541e:	4618      	mov	r0, r3
 8015420:	f7f9 f8fb 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8015424:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015428:	4618      	mov	r0, r3
 801542a:	f7f9 f8f6 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801542e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015432:	4618      	mov	r0, r3
 8015434:	f7f9 f8f1 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8015438:	bf00      	nop
 801543a:	3764      	adds	r7, #100	; 0x64
 801543c:	46bd      	mov	sp, r7
 801543e:	bd90      	pop	{r4, r7, pc}

08015440 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8015440:	b590      	push	{r4, r7, lr}
 8015442:	b09d      	sub	sp, #116	; 0x74
 8015444:	af04      	add	r7, sp, #16
 8015446:	60f8      	str	r0, [r7, #12]
 8015448:	607a      	str	r2, [r7, #4]
 801544a:	603b      	str	r3, [r7, #0]
 801544c:	460b      	mov	r3, r1
 801544e:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8015450:	68f8      	ldr	r0, [r7, #12]
 8015452:	f000 f8f3 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 8015456:	4603      	mov	r3, r0
 8015458:	681a      	ldr	r2, [r3, #0]
 801545a:	3228      	adds	r2, #40	; 0x28
 801545c:	6812      	ldr	r2, [r2, #0]
 801545e:	4618      	mov	r0, r3
 8015460:	4790      	blx	r2
    if (!comparison)
 8015462:	7afb      	ldrb	r3, [r7, #11]
 8015464:	f083 0301 	eor.w	r3, r3, #1
 8015468:	b2db      	uxtb	r3, r3
 801546a:	2b00      	cmp	r3, #0
 801546c:	d03f      	beq.n	80154ee <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	339c      	adds	r3, #156	; 0x9c
 8015474:	681c      	ldr	r4, [r3, #0]
 8015476:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801547a:	6879      	ldr	r1, [r7, #4]
 801547c:	4618      	mov	r0, r3
 801547e:	f7f8 fd14 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8015482:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015486:	6839      	ldr	r1, [r7, #0]
 8015488:	4618      	mov	r0, r3
 801548a:	f7f8 fd0e 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801548e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015492:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015494:	4618      	mov	r0, r3
 8015496:	f7f8 fd08 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801549a:	f107 0014 	add.w	r0, r7, #20
 801549e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80154a2:	9302      	str	r3, [sp, #8]
 80154a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80154a8:	9301      	str	r3, [sp, #4]
 80154aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80154ae:	9300      	str	r3, [sp, #0]
 80154b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80154b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80154b4:	68f9      	ldr	r1, [r7, #12]
 80154b6:	f7fa ff83 	bl	80103c0 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80154ba:	f107 0314 	add.w	r3, r7, #20
 80154be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80154c0:	4619      	mov	r1, r3
 80154c2:	68f8      	ldr	r0, [r7, #12]
 80154c4:	47a0      	blx	r4
 80154c6:	f107 0314 	add.w	r3, r7, #20
 80154ca:	4618      	mov	r0, r3
 80154cc:	f7fb febc 	bl	8011248 <_ZN17ComparisonFailureD1Ev>
 80154d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80154d4:	4618      	mov	r0, r3
 80154d6:	f7f9 f8a0 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80154da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80154de:	4618      	mov	r0, r3
 80154e0:	f7f9 f89b 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80154e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80154e8:	4618      	mov	r0, r3
 80154ea:	f7f9 f896 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 80154ee:	bf00      	nop
 80154f0:	3764      	adds	r7, #100	; 0x64
 80154f2:	46bd      	mov	sp, r7
 80154f4:	bd90      	pop	{r4, r7, pc}
	...

080154f8 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 80154f8:	b5b0      	push	{r4, r5, r7, lr}
 80154fa:	b088      	sub	sp, #32
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	60f8      	str	r0, [r7, #12]
 8015500:	60b9      	str	r1, [r7, #8]
 8015502:	607a      	str	r2, [r7, #4]
 8015504:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 8015506:	f107 0310 	add.w	r3, r7, #16
 801550a:	4924      	ldr	r1, [pc, #144]	; (801559c <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 801550c:	4618      	mov	r0, r3
 801550e:	f7f8 fccc 	bl	800deaa <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 8015512:	f107 0310 	add.w	r3, r7, #16
 8015516:	6879      	ldr	r1, [r7, #4]
 8015518:	4618      	mov	r0, r3
 801551a:	f7f9 f90d 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 801551e:	f107 0310 	add.w	r3, r7, #16
 8015522:	491f      	ldr	r1, [pc, #124]	; (80155a0 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 8015524:	4618      	mov	r0, r3
 8015526:	f7f9 f907 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 801552a:	f107 0318 	add.w	r3, r7, #24
 801552e:	6839      	ldr	r1, [r7, #0]
 8015530:	4618      	mov	r0, r3
 8015532:	f7f9 fda1 	bl	800f078 <_Z10StringFromj>
 8015536:	f107 0218 	add.w	r2, r7, #24
 801553a:	f107 0310 	add.w	r3, r7, #16
 801553e:	4611      	mov	r1, r2
 8015540:	4618      	mov	r0, r3
 8015542:	f7f9 f8e7 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 8015546:	f107 0318 	add.w	r3, r7, #24
 801554a:	4618      	mov	r0, r3
 801554c:	f7f9 f865 	bl	800e61a <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8015550:	f107 0310 	add.w	r3, r7, #16
 8015554:	4913      	ldr	r1, [pc, #76]	; (80155a4 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 8015556:	4618      	mov	r0, r3
 8015558:	f7f9 f8ee 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 801555c:	f107 0310 	add.w	r3, r7, #16
 8015560:	68b9      	ldr	r1, [r7, #8]
 8015562:	4618      	mov	r0, r3
 8015564:	f7f9 f8e8 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 8015568:	68f8      	ldr	r0, [r7, #12]
 801556a:	f000 f867 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 801556e:	4604      	mov	r4, r0
 8015570:	6823      	ldr	r3, [r4, #0]
 8015572:	3338      	adds	r3, #56	; 0x38
 8015574:	681d      	ldr	r5, [r3, #0]
 8015576:	f107 0310 	add.w	r3, r7, #16
 801557a:	4618      	mov	r0, r3
 801557c:	f7f9 f820 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 8015580:	4603      	mov	r3, r0
 8015582:	4619      	mov	r1, r3
 8015584:	4620      	mov	r0, r4
 8015586:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 8015588:	f107 0310 	add.w	r3, r7, #16
 801558c:	4618      	mov	r0, r3
 801558e:	f7f9 f844 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8015592:	bf00      	nop
 8015594:	3720      	adds	r7, #32
 8015596:	46bd      	mov	sp, r7
 8015598:	bdb0      	pop	{r4, r5, r7, pc}
 801559a:	bf00      	nop
 801559c:	080269fc 	.word	0x080269fc
 80155a0:	08026a00 	.word	0x08026a00
 80155a4:	08026a04 	.word	0x08026a04

080155a8 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 80155a8:	b590      	push	{r4, r7, lr}
 80155aa:	b085      	sub	sp, #20
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	60f8      	str	r0, [r7, #12]
 80155b0:	60b9      	str	r1, [r7, #8]
 80155b2:	607a      	str	r2, [r7, #4]
 80155b4:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	3370      	adds	r3, #112	; 0x70
 80155bc:	681c      	ldr	r4, [r3, #0]
 80155be:	68b8      	ldr	r0, [r7, #8]
 80155c0:	f7f8 fffe 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 80155c4:	4601      	mov	r1, r0
 80155c6:	683b      	ldr	r3, [r7, #0]
 80155c8:	687a      	ldr	r2, [r7, #4]
 80155ca:	68f8      	ldr	r0, [r7, #12]
 80155cc:	47a0      	blx	r4
}
 80155ce:	bf00      	nop
 80155d0:	3714      	adds	r7, #20
 80155d2:	46bd      	mov	sp, r7
 80155d4:	bd90      	pop	{r4, r7, pc}

080155d6 <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 80155d6:	b580      	push	{r7, lr}
 80155d8:	b082      	sub	sp, #8
 80155da:	af00      	add	r7, sp, #0
 80155dc:	6078      	str	r0, [r7, #4]
 80155de:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 80155e0:	6878      	ldr	r0, [r7, #4]
 80155e2:	f000 f82b 	bl	801563c <_ZN10UtestShell13getTestResultEv>
 80155e6:	4603      	mov	r3, r0
 80155e8:	681a      	ldr	r2, [r3, #0]
 80155ea:	323c      	adds	r2, #60	; 0x3c
 80155ec:	6812      	ldr	r2, [r2, #0]
 80155ee:	6839      	ldr	r1, [r7, #0]
 80155f0:	4618      	mov	r0, r3
 80155f2:	4790      	blx	r2
}
 80155f4:	bf00      	nop
 80155f6:	3708      	adds	r7, #8
 80155f8:	46bd      	mov	sp, r7
 80155fa:	bd80      	pop	{r7, pc}

080155fc <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 80155fc:	b480      	push	{r7}
 80155fe:	b083      	sub	sp, #12
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
 8015604:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 8015606:	4a04      	ldr	r2, [pc, #16]	; (8015618 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 8015608:	683b      	ldr	r3, [r7, #0]
 801560a:	6013      	str	r3, [r2, #0]
}
 801560c:	bf00      	nop
 801560e:	370c      	adds	r7, #12
 8015610:	46bd      	mov	sp, r7
 8015612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015616:	4770      	bx	lr
 8015618:	20000b7c 	.word	0x20000b7c

0801561c <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 801561c:	b480      	push	{r7}
 801561e:	b083      	sub	sp, #12
 8015620:	af00      	add	r7, sp, #0
 8015622:	6078      	str	r0, [r7, #4]
 8015624:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 8015626:	4a04      	ldr	r2, [pc, #16]	; (8015638 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 8015628:	683b      	ldr	r3, [r7, #0]
 801562a:	6013      	str	r3, [r2, #0]
}
 801562c:	bf00      	nop
 801562e:	370c      	adds	r7, #12
 8015630:	46bd      	mov	sp, r7
 8015632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015636:	4770      	bx	lr
 8015638:	20000b80 	.word	0x20000b80

0801563c <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 801563c:	b580      	push	{r7, lr}
 801563e:	b082      	sub	sp, #8
 8015640:	af00      	add	r7, sp, #0
 8015642:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8015644:	4b09      	ldr	r3, [pc, #36]	; (801566c <_ZN10UtestShell13getTestResultEv+0x30>)
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d109      	bne.n	8015660 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 801564c:	f7fe fbb2 	bl	8013db4 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8015650:	4603      	mov	r3, r0
 8015652:	681a      	ldr	r2, [r3, #0]
 8015654:	32a4      	adds	r2, #164	; 0xa4
 8015656:	6812      	ldr	r2, [r2, #0]
 8015658:	4618      	mov	r0, r3
 801565a:	4790      	blx	r2
 801565c:	4603      	mov	r3, r0
 801565e:	e001      	b.n	8015664 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 8015660:	4b02      	ldr	r3, [pc, #8]	; (801566c <_ZN10UtestShell13getTestResultEv+0x30>)
 8015662:	681b      	ldr	r3, [r3, #0]
}
 8015664:	4618      	mov	r0, r3
 8015666:	3708      	adds	r7, #8
 8015668:	46bd      	mov	sp, r7
 801566a:	bd80      	pop	{r7, pc}
 801566c:	20000b7c 	.word	0x20000b7c

08015670 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 8015670:	b580      	push	{r7, lr}
 8015672:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8015674:	4b05      	ldr	r3, [pc, #20]	; (801568c <_ZN10UtestShell10getCurrentEv+0x1c>)
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d103      	bne.n	8015684 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 801567c:	f7fe fb9a 	bl	8013db4 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8015680:	4603      	mov	r3, r0
 8015682:	e001      	b.n	8015688 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 8015684:	4b01      	ldr	r3, [pc, #4]	; (801568c <_ZN10UtestShell10getCurrentEv+0x1c>)
 8015686:	681b      	ldr	r3, [r3, #0]
}
 8015688:	4618      	mov	r0, r3
 801568a:	bd80      	pop	{r7, pc}
 801568c:	20000b80 	.word	0x20000b80

08015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 8015690:	b480      	push	{r7}
 8015692:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 8015694:	4b03      	ldr	r3, [pc, #12]	; (80156a4 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 8015696:	681b      	ldr	r3, [r3, #0]
}
 8015698:	4618      	mov	r0, r3
 801569a:	46bd      	mov	sp, r7
 801569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a0:	4770      	bx	lr
 80156a2:	bf00      	nop
 80156a4:	20000094 	.word	0x20000094

080156a8 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 80156a8:	b480      	push	{r7}
 80156aa:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 80156ac:	4b03      	ldr	r3, [pc, #12]	; (80156bc <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 80156ae:	4a04      	ldr	r2, [pc, #16]	; (80156c0 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 80156b0:	601a      	str	r2, [r3, #0]
}
 80156b2:	bf00      	nop
 80156b4:	46bd      	mov	sp, r7
 80156b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ba:	4770      	bx	lr
 80156bc:	20000094 	.word	0x20000094
 80156c0:	20000090 	.word	0x20000090

080156c4 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 80156c4:	b480      	push	{r7}
 80156c6:	b083      	sub	sp, #12
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
 80156cc:	4a04      	ldr	r2, [pc, #16]	; (80156e0 <_ZN5UtestC1Ev+0x1c>)
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	601a      	str	r2, [r3, #0]
{
}
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	4618      	mov	r0, r3
 80156d6:	370c      	adds	r7, #12
 80156d8:	46bd      	mov	sp, r7
 80156da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156de:	4770      	bx	lr
 80156e0:	0802a628 	.word	0x0802a628

080156e4 <_ZN5UtestD1Ev>:

Utest::~Utest()
 80156e4:	b480      	push	{r7}
 80156e6:	b083      	sub	sp, #12
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
 80156ec:	4a04      	ldr	r2, [pc, #16]	; (8015700 <_ZN5UtestD1Ev+0x1c>)
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	601a      	str	r2, [r3, #0]
{
}
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	4618      	mov	r0, r3
 80156f6:	370c      	adds	r7, #12
 80156f8:	46bd      	mov	sp, r7
 80156fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156fe:	4770      	bx	lr
 8015700:	0802a628 	.word	0x0802a628

08015704 <_ZN5UtestD0Ev>:
Utest::~Utest()
 8015704:	b580      	push	{r7, lr}
 8015706:	b082      	sub	sp, #8
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
}
 801570c:	6878      	ldr	r0, [r7, #4]
 801570e:	f7ff ffe9 	bl	80156e4 <_ZN5UtestD1Ev>
 8015712:	2104      	movs	r1, #4
 8015714:	6878      	ldr	r0, [r7, #4]
 8015716:	f7f6 f819 	bl	800b74c <_ZdlPvj>
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	4618      	mov	r0, r3
 801571e:	3708      	adds	r7, #8
 8015720:	46bd      	mov	sp, r7
 8015722:	bd80      	pop	{r7, pc}

08015724 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 8015724:	b580      	push	{r7, lr}
 8015726:	b082      	sub	sp, #8
 8015728:	af00      	add	r7, sp, #0
 801572a:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 801572c:	4b0d      	ldr	r3, [pc, #52]	; (8015764 <_ZN5Utest3runEv+0x40>)
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	6879      	ldr	r1, [r7, #4]
 8015732:	480d      	ldr	r0, [pc, #52]	; (8015768 <_ZN5Utest3runEv+0x44>)
 8015734:	4798      	blx	r3
 8015736:	4603      	mov	r3, r0
 8015738:	2b00      	cmp	r3, #0
 801573a:	bf14      	ite	ne
 801573c:	2301      	movne	r3, #1
 801573e:	2300      	moveq	r3, #0
 8015740:	b2db      	uxtb	r3, r3
 8015742:	2b00      	cmp	r3, #0
 8015744:	d004      	beq.n	8015750 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 8015746:	4b07      	ldr	r3, [pc, #28]	; (8015764 <_ZN5Utest3runEv+0x40>)
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	6879      	ldr	r1, [r7, #4]
 801574c:	4807      	ldr	r0, [pc, #28]	; (801576c <_ZN5Utest3runEv+0x48>)
 801574e:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 8015750:	4b04      	ldr	r3, [pc, #16]	; (8015764 <_ZN5Utest3runEv+0x40>)
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	6879      	ldr	r1, [r7, #4]
 8015756:	4806      	ldr	r0, [pc, #24]	; (8015770 <_ZN5Utest3runEv+0x4c>)
 8015758:	4798      	blx	r3
}
 801575a:	bf00      	nop
 801575c:	3708      	adds	r7, #8
 801575e:	46bd      	mov	sp, r7
 8015760:	bd80      	pop	{r7, pc}
 8015762:	bf00      	nop
 8015764:	200000a4 	.word	0x200000a4
 8015768:	08013e11 	.word	0x08013e11
 801576c:	08013e2d 	.word	0x08013e2d
 8015770:	08013e49 	.word	0x08013e49

08015774 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 8015774:	b480      	push	{r7}
 8015776:	b083      	sub	sp, #12
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
}
 801577c:	bf00      	nop
 801577e:	370c      	adds	r7, #12
 8015780:	46bd      	mov	sp, r7
 8015782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015786:	4770      	bx	lr

08015788 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 8015788:	b480      	push	{r7}
 801578a:	b083      	sub	sp, #12
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
}
 8015790:	bf00      	nop
 8015792:	370c      	adds	r7, #12
 8015794:	46bd      	mov	sp, r7
 8015796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801579a:	4770      	bx	lr

0801579c <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 801579c:	b480      	push	{r7}
 801579e:	b083      	sub	sp, #12
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
}
 80157a4:	bf00      	nop
 80157a6:	370c      	adds	r7, #12
 80157a8:	46bd      	mov	sp, r7
 80157aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ae:	4770      	bx	lr

080157b0 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 80157b0:	b480      	push	{r7}
 80157b2:	b083      	sub	sp, #12
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]
 80157b8:	4a04      	ldr	r2, [pc, #16]	; (80157cc <_ZN14TestTerminatorD1Ev+0x1c>)
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	601a      	str	r2, [r3, #0]
{
}
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	4618      	mov	r0, r3
 80157c2:	370c      	adds	r7, #12
 80157c4:	46bd      	mov	sp, r7
 80157c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ca:	4770      	bx	lr
 80157cc:	0802a614 	.word	0x0802a614

080157d0 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b084      	sub	sp, #16
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 80157d8:	2300      	movs	r3, #0
 80157da:	60fb      	str	r3, [r7, #12]
 80157dc:	f107 030c 	add.w	r3, r7, #12
 80157e0:	4618      	mov	r0, r3
 80157e2:	f7f6 f975 	bl	800bad0 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 80157e6:	f107 030c 	add.w	r3, r7, #12
 80157ea:	4618      	mov	r0, r3
 80157ec:	f000 f82c 	bl	8015848 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 80157f0:	f107 030c 	add.w	r3, r7, #12
 80157f4:	4618      	mov	r0, r3
 80157f6:	f000 f835 	bl	8015864 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 80157fa:	bf00      	nop
 80157fc:	3710      	adds	r7, #16
 80157fe:	46bd      	mov	sp, r7
 8015800:	bd80      	pop	{r7, pc}
	...

08015804 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 8015804:	b580      	push	{r7, lr}
 8015806:	b082      	sub	sp, #8
 8015808:	af00      	add	r7, sp, #0
 801580a:	6078      	str	r0, [r7, #4]
 801580c:	4a05      	ldr	r2, [pc, #20]	; (8015824 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	601a      	str	r2, [r3, #0]
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	4618      	mov	r0, r3
 8015816:	f7ff ffcb 	bl	80157b0 <_ZN14TestTerminatorD1Ev>
{
}
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	4618      	mov	r0, r3
 801581e:	3708      	adds	r7, #8
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}
 8015824:	0802a600 	.word	0x0802a600

08015828 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 8015828:	b580      	push	{r7, lr}
 801582a:	b082      	sub	sp, #8
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
}
 8015830:	6878      	ldr	r0, [r7, #4]
 8015832:	f7ff ffe7 	bl	8015804 <_ZN20NormalTestTerminatorD1Ev>
 8015836:	2104      	movs	r1, #4
 8015838:	6878      	ldr	r0, [r7, #4]
 801583a:	f7f5 ff87 	bl	800b74c <_ZdlPvj>
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	4618      	mov	r0, r3
 8015842:	3708      	adds	r7, #8
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}

08015848 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b082      	sub	sp, #8
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 8015850:	4b03      	ldr	r3, [pc, #12]	; (8015860 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8015856:	bf00      	nop
 8015858:	3708      	adds	r7, #8
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}
 801585e:	bf00      	nop
 8015860:	200000a0 	.word	0x200000a0

08015864 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8015864:	b580      	push	{r7, lr}
 8015866:	b082      	sub	sp, #8
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
 801586c:	4a05      	ldr	r2, [pc, #20]	; (8015884 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	601a      	str	r2, [r3, #0]
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	4618      	mov	r0, r3
 8015876:	f7ff ff9b 	bl	80157b0 <_ZN14TestTerminatorD1Ev>
{
}
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	4618      	mov	r0, r3
 801587e:	3708      	adds	r7, #8
 8015880:	46bd      	mov	sp, r7
 8015882:	bd80      	pop	{r7, pc}
 8015884:	0802a5ec 	.word	0x0802a5ec

08015888 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8015888:	b580      	push	{r7, lr}
 801588a:	b082      	sub	sp, #8
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
}
 8015890:	6878      	ldr	r0, [r7, #4]
 8015892:	f7ff ffe7 	bl	8015864 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8015896:	2104      	movs	r1, #4
 8015898:	6878      	ldr	r0, [r7, #4]
 801589a:	f7f5 ff57 	bl	800b74c <_ZdlPvj>
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	4618      	mov	r0, r3
 80158a2:	3708      	adds	r7, #8
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd80      	pop	{r7, pc}

080158a8 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b082      	sub	sp, #8
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 80158b0:	f7fe fbaa 	bl	8014008 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	4618      	mov	r0, r3
 80158b8:	f7ff ff8a 	bl	80157d0 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 80158bc:	bf00      	nop
 80158be:	3708      	adds	r7, #8
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}

080158c4 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b082      	sub	sp, #8
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
 80158cc:	4a05      	ldr	r2, [pc, #20]	; (80158e4 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	601a      	str	r2, [r3, #0]
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	4618      	mov	r0, r3
 80158d6:	f7ff ff95 	bl	8015804 <_ZN20NormalTestTerminatorD1Ev>
{
}
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	4618      	mov	r0, r3
 80158de:	3708      	adds	r7, #8
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bd80      	pop	{r7, pc}
 80158e4:	0802a5d8 	.word	0x0802a5d8

080158e8 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b082      	sub	sp, #8
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	6078      	str	r0, [r7, #4]
}
 80158f0:	6878      	ldr	r0, [r7, #4]
 80158f2:	f7ff ffe7 	bl	80158c4 <_ZN22CrashingTestTerminatorD1Ev>
 80158f6:	2104      	movs	r1, #4
 80158f8:	6878      	ldr	r0, [r7, #4]
 80158fa:	f7f5 ff27 	bl	800b74c <_ZdlPvj>
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	4618      	mov	r0, r3
 8015902:	3708      	adds	r7, #8
 8015904:	46bd      	mov	sp, r7
 8015906:	bd80      	pop	{r7, pc}

08015908 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 8015908:	b580      	push	{r7, lr}
 801590a:	b084      	sub	sp, #16
 801590c:	af00      	add	r7, sp, #0
 801590e:	6078      	str	r0, [r7, #4]
 8015910:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	2200      	movs	r2, #0
 8015916:	601a      	str	r2, [r3, #0]
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	2200      	movs	r2, #0
 801591c:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d007      	beq.n	8015934 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 8015924:	683b      	ldr	r3, [r7, #0]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	3310      	adds	r3, #16
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	6838      	ldr	r0, [r7, #0]
 801592e:	4798      	blx	r3
 8015930:	4603      	mov	r3, r0
 8015932:	e000      	b.n	8015936 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 8015934:	2300      	movs	r3, #0
 8015936:	687a      	ldr	r2, [r7, #4]
 8015938:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	685b      	ldr	r3, [r3, #4]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d02d      	beq.n	801599e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	685b      	ldr	r3, [r3, #4]
 8015946:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 801594a:	4293      	cmp	r3, r2
 801594c:	d201      	bcs.n	8015952 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 801594e:	009b      	lsls	r3, r3, #2
 8015950:	e001      	b.n	8015956 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 8015952:	f04f 33ff 	mov.w	r3, #4294967295
 8015956:	f240 3237 	movw	r2, #823	; 0x337
 801595a:	4914      	ldr	r1, [pc, #80]	; (80159ac <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 801595c:	4618      	mov	r0, r3
 801595e:	f7f5 ff05 	bl	800b76c <_ZnajPKci>
 8015962:	4602      	mov	r2, r0
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 8015968:	683b      	ldr	r3, [r7, #0]
 801596a:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 801596c:	2300      	movs	r3, #0
 801596e:	60bb      	str	r3, [r7, #8]
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	685b      	ldr	r3, [r3, #4]
 8015974:	68ba      	ldr	r2, [r7, #8]
 8015976:	429a      	cmp	r2, r3
 8015978:	d212      	bcs.n	80159a0 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	681a      	ldr	r2, [r3, #0]
 801597e:	68bb      	ldr	r3, [r7, #8]
 8015980:	009b      	lsls	r3, r3, #2
 8015982:	4413      	add	r3, r2
 8015984:	68fa      	ldr	r2, [r7, #12]
 8015986:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	330c      	adds	r3, #12
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	68f8      	ldr	r0, [r7, #12]
 8015992:	4798      	blx	r3
 8015994:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8015996:	68bb      	ldr	r3, [r7, #8]
 8015998:	3301      	adds	r3, #1
 801599a:	60bb      	str	r3, [r7, #8]
 801599c:	e7e8      	b.n	8015970 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 801599e:	bf00      	nop
    }
}
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	4618      	mov	r0, r3
 80159a4:	3710      	adds	r7, #16
 80159a6:	46bd      	mov	sp, r7
 80159a8:	bd80      	pop	{r7, pc}
 80159aa:	bf00      	nop
 80159ac:	0802688c 	.word	0x0802688c

080159b0 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b082      	sub	sp, #8
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d004      	beq.n	80159ca <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	4618      	mov	r0, r3
 80159c6:	f7f5 fee5 	bl	800b794 <_ZdaPv>
}
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	4618      	mov	r0, r3
 80159ce:	3708      	adds	r7, #8
 80159d0:	46bd      	mov	sp, r7
 80159d2:	bd80      	pop	{r7, pc}

080159d4 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 80159d4:	b480      	push	{r7}
 80159d6:	b087      	sub	sp, #28
 80159d8:	af00      	add	r7, sp, #0
 80159da:	60f8      	str	r0, [r7, #12]
 80159dc:	60b9      	str	r1, [r7, #8]
 80159de:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	681a      	ldr	r2, [r3, #0]
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	009b      	lsls	r3, r3, #2
 80159e8:	4413      	add	r3, r2
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	681a      	ldr	r2, [r3, #0]
 80159f2:	68bb      	ldr	r3, [r7, #8]
 80159f4:	009b      	lsls	r3, r3, #2
 80159f6:	4413      	add	r3, r2
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	681a      	ldr	r2, [r3, #0]
 8015a00:	68bb      	ldr	r3, [r7, #8]
 8015a02:	009b      	lsls	r3, r3, #2
 8015a04:	4413      	add	r3, r2
 8015a06:	697a      	ldr	r2, [r7, #20]
 8015a08:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	681a      	ldr	r2, [r3, #0]
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	009b      	lsls	r3, r3, #2
 8015a12:	4413      	add	r3, r2
 8015a14:	693a      	ldr	r2, [r7, #16]
 8015a16:	601a      	str	r2, [r3, #0]
}
 8015a18:	bf00      	nop
 8015a1a:	371c      	adds	r7, #28
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a22:	4770      	bx	lr

08015a24 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b084      	sub	sp, #16
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	6078      	str	r0, [r7, #4]
 8015a2c:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	685b      	ldr	r3, [r3, #4]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d028      	beq.n	8015a88 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 8015a36:	4b17      	ldr	r3, [pc, #92]	; (8015a94 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	6838      	ldr	r0, [r7, #0]
 8015a3c:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	685b      	ldr	r3, [r3, #4]
 8015a42:	3b01      	subs	r3, #1
 8015a44:	60fb      	str	r3, [r7, #12]
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d019      	beq.n	8015a80 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	685b      	ldr	r3, [r3, #4]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d01b      	beq.n	8015a8c <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 8015a54:	4b10      	ldr	r3, [pc, #64]	; (8015a98 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	4798      	blx	r3
 8015a5a:	4603      	mov	r3, r0
 8015a5c:	461a      	mov	r2, r3
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	3301      	adds	r3, #1
 8015a62:	fbb2 f1f3 	udiv	r1, r2, r3
 8015a66:	fb03 f301 	mul.w	r3, r3, r1
 8015a6a:	1ad3      	subs	r3, r2, r3
 8015a6c:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 8015a6e:	68ba      	ldr	r2, [r7, #8]
 8015a70:	68f9      	ldr	r1, [r7, #12]
 8015a72:	6878      	ldr	r0, [r7, #4]
 8015a74:	f7ff ffae 	bl	80159d4 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	3b01      	subs	r3, #1
 8015a7c:	60fb      	str	r3, [r7, #12]
 8015a7e:	e7e2      	b.n	8015a46 <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 8015a80:	6878      	ldr	r0, [r7, #4]
 8015a82:	f000 f834 	bl	8015aee <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8015a86:	e002      	b.n	8015a8e <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 8015a88:	bf00      	nop
 8015a8a:	e000      	b.n	8015a8e <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 8015a8c:	bf00      	nop
}
 8015a8e:	3710      	adds	r7, #16
 8015a90:	46bd      	mov	sp, r7
 8015a92:	bd80      	pop	{r7, pc}
 8015a94:	200000e0 	.word	0x200000e0
 8015a98:	200000e4 	.word	0x200000e4

08015a9c <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b086      	sub	sp, #24
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	685b      	ldr	r3, [r3, #4]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d01c      	beq.n	8015ae6 <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	685b      	ldr	r3, [r3, #4]
 8015ab0:	085b      	lsrs	r3, r3, #1
 8015ab2:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	617b      	str	r3, [r7, #20]
 8015ab8:	697a      	ldr	r2, [r7, #20]
 8015aba:	693b      	ldr	r3, [r7, #16]
 8015abc:	429a      	cmp	r2, r3
 8015abe:	d20e      	bcs.n	8015ade <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	685a      	ldr	r2, [r3, #4]
 8015ac4:	697b      	ldr	r3, [r7, #20]
 8015ac6:	1ad3      	subs	r3, r2, r3
 8015ac8:	3b01      	subs	r3, #1
 8015aca:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 8015acc:	68fa      	ldr	r2, [r7, #12]
 8015ace:	6979      	ldr	r1, [r7, #20]
 8015ad0:	6878      	ldr	r0, [r7, #4]
 8015ad2:	f7ff ff7f 	bl	80159d4 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 8015ad6:	697b      	ldr	r3, [r7, #20]
 8015ad8:	3301      	adds	r3, #1
 8015ada:	617b      	str	r3, [r7, #20]
 8015adc:	e7ec      	b.n	8015ab8 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 8015ade:	6878      	ldr	r0, [r7, #4]
 8015ae0:	f000 f805 	bl	8015aee <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8015ae4:	e000      	b.n	8015ae8 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 8015ae6:	bf00      	nop
}
 8015ae8:	3718      	adds	r7, #24
 8015aea:	46bd      	mov	sp, r7
 8015aec:	bd80      	pop	{r7, pc}

08015aee <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 8015aee:	b580      	push	{r7, lr}
 8015af0:	b084      	sub	sp, #16
 8015af2:	af00      	add	r7, sp, #0
 8015af4:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 8015af6:	2300      	movs	r3, #0
 8015af8:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8015afa:	2300      	movs	r3, #0
 8015afc:	60bb      	str	r3, [r7, #8]
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	685b      	ldr	r3, [r3, #4]
 8015b02:	68ba      	ldr	r2, [r7, #8]
 8015b04:	429a      	cmp	r2, r3
 8015b06:	d221      	bcs.n	8015b4c <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681a      	ldr	r2, [r3, #0]
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	6859      	ldr	r1, [r3, #4]
 8015b10:	68bb      	ldr	r3, [r7, #8]
 8015b12:	1acb      	subs	r3, r1, r3
 8015b14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015b18:	3b01      	subs	r3, #1
 8015b1a:	009b      	lsls	r3, r3, #2
 8015b1c:	4413      	add	r3, r2
 8015b1e:	6818      	ldr	r0, [r3, #0]
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	681a      	ldr	r2, [r3, #0]
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	6859      	ldr	r1, [r3, #4]
 8015b28:	68bb      	ldr	r3, [r7, #8]
 8015b2a:	1acb      	subs	r3, r1, r3
 8015b2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015b30:	3b01      	subs	r3, #1
 8015b32:	009b      	lsls	r3, r3, #2
 8015b34:	4413      	add	r3, r2
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	3308      	adds	r3, #8
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	68f9      	ldr	r1, [r7, #12]
 8015b40:	4798      	blx	r3
 8015b42:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8015b44:	68bb      	ldr	r3, [r7, #8]
 8015b46:	3301      	adds	r3, #1
 8015b48:	60bb      	str	r3, [r7, #8]
 8015b4a:	e7d8      	b.n	8015afe <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 8015b4c:	bf00      	nop
 8015b4e:	3710      	adds	r7, #16
 8015b50:	46bd      	mov	sp, r7
 8015b52:	bd80      	pop	{r7, pc}

08015b54 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b082      	sub	sp, #8
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
    return get(0);
 8015b5c:	2100      	movs	r1, #0
 8015b5e:	6878      	ldr	r0, [r7, #4]
 8015b60:	f000 f805 	bl	8015b6e <_ZNK22UtestShellPointerArray3getEj>
 8015b64:	4603      	mov	r3, r0
}
 8015b66:	4618      	mov	r0, r3
 8015b68:	3708      	adds	r7, #8
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	bd80      	pop	{r7, pc}

08015b6e <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 8015b6e:	b480      	push	{r7}
 8015b70:	b083      	sub	sp, #12
 8015b72:	af00      	add	r7, sp, #0
 8015b74:	6078      	str	r0, [r7, #4]
 8015b76:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	685b      	ldr	r3, [r3, #4]
 8015b7c:	683a      	ldr	r2, [r7, #0]
 8015b7e:	429a      	cmp	r2, r3
 8015b80:	d301      	bcc.n	8015b86 <_ZNK22UtestShellPointerArray3getEj+0x18>
 8015b82:	2300      	movs	r3, #0
 8015b84:	e005      	b.n	8015b92 <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	681a      	ldr	r2, [r3, #0]
 8015b8a:	683b      	ldr	r3, [r7, #0]
 8015b8c:	009b      	lsls	r3, r3, #2
 8015b8e:	4413      	add	r3, r2
 8015b90:	681b      	ldr	r3, [r3, #0]
}
 8015b92:	4618      	mov	r0, r3
 8015b94:	370c      	adds	r7, #12
 8015b96:	46bd      	mov	sp, r7
 8015b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b9c:	4770      	bx	lr
	...

08015ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b084      	sub	sp, #16
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	60f8      	str	r0, [r7, #12]
 8015ba8:	60b9      	str	r1, [r7, #8]
 8015baa:	607a      	str	r2, [r7, #4]
 8015bac:	603b      	str	r3, [r7, #0]
 8015bae:	4a10      	ldr	r2, [pc, #64]	; (8015bf0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 8015bb4:	6879      	ldr	r1, [r7, #4]
 8015bb6:	68b8      	ldr	r0, [r7, #8]
 8015bb8:	f7fe fc27 	bl	801440a <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 8015bbc:	6839      	ldr	r1, [r7, #0]
 8015bbe:	68b8      	ldr	r0, [r7, #8]
 8015bc0:	f7fe fc31 	bl	8014426 <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 8015bc4:	69b9      	ldr	r1, [r7, #24]
 8015bc6:	68b8      	ldr	r0, [r7, #8]
 8015bc8:	f7fe fc03 	bl	80143d2 <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 8015bcc:	69f9      	ldr	r1, [r7, #28]
 8015bce:	68b8      	ldr	r0, [r7, #8]
 8015bd0:	f7fe fc0d 	bl	80143ee <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 8015bd4:	f7fd fc20 	bl	8013418 <_ZN12TestRegistry18getCurrentRegistryEv>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	681a      	ldr	r2, [r3, #0]
 8015bdc:	3208      	adds	r2, #8
 8015bde:	6812      	ldr	r2, [r2, #0]
 8015be0:	68b9      	ldr	r1, [r7, #8]
 8015be2:	4618      	mov	r0, r3
 8015be4:	4790      	blx	r2
}
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	4618      	mov	r0, r3
 8015bea:	3710      	adds	r7, #16
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd80      	pop	{r7, pc}
 8015bf0:	0802a51c 	.word	0x0802a51c

08015bf4 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 8015bf4:	b480      	push	{r7}
 8015bf6:	b083      	sub	sp, #12
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]
 8015bfc:	4a04      	ldr	r2, [pc, #16]	; (8015c10 <_ZN13TestInstallerD1Ev+0x1c>)
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	601a      	str	r2, [r3, #0]
{
}
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	4618      	mov	r0, r3
 8015c06:	370c      	adds	r7, #12
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c0e:	4770      	bx	lr
 8015c10:	0802a51c 	.word	0x0802a51c

08015c14 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b082      	sub	sp, #8
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	6078      	str	r0, [r7, #4]
}
 8015c1c:	6878      	ldr	r0, [r7, #4]
 8015c1e:	f7ff ffe9 	bl	8015bf4 <_ZN13TestInstallerD1Ev>
 8015c22:	2104      	movs	r1, #4
 8015c24:	6878      	ldr	r0, [r7, #4]
 8015c26:	f7f5 fd91 	bl	800b74c <_ZdlPvj>
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	3708      	adds	r7, #8
 8015c30:	46bd      	mov	sp, r7
 8015c32:	bd80      	pop	{r7, pc}

08015c34 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 8015c34:	b580      	push	{r7, lr}
 8015c36:	b082      	sub	sp, #8
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
 8015c3c:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d10a      	bne.n	8015c5a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8015c44:	683b      	ldr	r3, [r7, #0]
 8015c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015c4a:	4293      	cmp	r3, r2
 8015c4c:	d105      	bne.n	8015c5a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8015c4e:	4805      	ldr	r0, [pc, #20]	; (8015c64 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8015c50:	f7ff fe38 	bl	80158c4 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 8015c54:	4804      	ldr	r0, [pc, #16]	; (8015c68 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8015c56:	f7ff fdd5 	bl	8015804 <_ZN20NormalTestTerminatorD1Ev>
}
 8015c5a:	bf00      	nop
 8015c5c:	3708      	adds	r7, #8
 8015c5e:	46bd      	mov	sp, r7
 8015c60:	bd80      	pop	{r7, pc}
 8015c62:	bf00      	nop
 8015c64:	20000090 	.word	0x20000090
 8015c68:	2000008c 	.word	0x2000008c

08015c6c <_GLOBAL__sub_I__Z13doubles_equalddd>:
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	af00      	add	r7, sp, #0
 8015c70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015c74:	2001      	movs	r0, #1
 8015c76:	f7ff ffdd 	bl	8015c34 <_Z41__static_initialization_and_destruction_0ii>
 8015c7a:	bd80      	pop	{r7, pc}

08015c7c <_GLOBAL__sub_D__Z13doubles_equalddd>:
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	af00      	add	r7, sp, #0
 8015c80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015c84:	2000      	movs	r0, #0
 8015c86:	f7ff ffd5 	bl	8015c34 <_Z41__static_initialization_and_destruction_0ii>
 8015c8a:	bd80      	pop	{r7, pc}

08015c8c <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8015c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c8e:	b083      	sub	sp, #12
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	ed87 0b00 	vstr	d0, [r7]
 8015c96:	683c      	ldr	r4, [r7, #0]
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8015c9e:	2301      	movs	r3, #1
 8015ca0:	461e      	mov	r6, r3
 8015ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8015ca6:	4b10      	ldr	r3, [pc, #64]	; (8015ce8 <_ZSt5isinfd+0x5c>)
 8015ca8:	4620      	mov	r0, r4
 8015caa:	4629      	mov	r1, r5
 8015cac:	f7ea fd6c 	bl	8000788 <__aeabi_dcmpun>
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d10b      	bne.n	8015cce <_ZSt5isinfd+0x42>
 8015cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8015cba:	4b0b      	ldr	r3, [pc, #44]	; (8015ce8 <_ZSt5isinfd+0x5c>)
 8015cbc:	4620      	mov	r0, r4
 8015cbe:	4629      	mov	r1, r5
 8015cc0:	f7ea fd44 	bl	800074c <__aeabi_dcmple>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d101      	bne.n	8015cce <_ZSt5isinfd+0x42>
 8015cca:	2300      	movs	r3, #0
 8015ccc:	461e      	mov	r6, r3
 8015cce:	b2f3      	uxtb	r3, r6
 8015cd0:	f083 0301 	eor.w	r3, r3, #1
 8015cd4:	b2db      	uxtb	r3, r3
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	bf14      	ite	ne
 8015cda:	2301      	movne	r3, #1
 8015cdc:	2300      	moveq	r3, #0
 8015cde:	b2db      	uxtb	r3, r3
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	370c      	adds	r7, #12
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ce8:	7fefffff 	.word	0x7fefffff

08015cec <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8015cec:	b590      	push	{r4, r7, lr}
 8015cee:	b083      	sub	sp, #12
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	ed87 0b00 	vstr	d0, [r7]
 8015cf6:	2301      	movs	r3, #1
 8015cf8:	461c      	mov	r4, r3
 8015cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015cfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015d02:	f7ea fd41 	bl	8000788 <__aeabi_dcmpun>
 8015d06:	4603      	mov	r3, r0
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d101      	bne.n	8015d10 <_ZSt5isnand+0x24>
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	461c      	mov	r4, r3
 8015d10:	b2e3      	uxtb	r3, r4
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	bf14      	ite	ne
 8015d16:	2301      	movne	r3, #1
 8015d18:	2300      	moveq	r3, #0
 8015d1a:	b2db      	uxtb	r3, r3
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	370c      	adds	r7, #12
 8015d20:	46bd      	mov	sp, r7
 8015d22:	bd90      	pop	{r4, r7, pc}

08015d24 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 8015d24:	b590      	push	{r4, r7, lr}
 8015d26:	b095      	sub	sp, #84	; 0x54
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	60f8      	str	r0, [r7, #12]
 8015d2c:	60b9      	str	r1, [r7, #8]
 8015d2e:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	3334      	adds	r3, #52	; 0x34
 8015d36:	681c      	ldr	r4, [r3, #0]
 8015d38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015d3c:	490f      	ldr	r1, [pc, #60]	; (8015d7c <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 8015d3e:	4618      	mov	r0, r3
 8015d40:	f7f8 f8b3 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8015d44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8015d48:	f107 0314 	add.w	r3, r7, #20
 8015d4c:	68f9      	ldr	r1, [r7, #12]
 8015d4e:	4618      	mov	r0, r3
 8015d50:	f7f9 ff0a 	bl	800fb68 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8015d54:	f107 0314 	add.w	r3, r7, #20
 8015d58:	4619      	mov	r1, r3
 8015d5a:	6878      	ldr	r0, [r7, #4]
 8015d5c:	47a0      	blx	r4
 8015d5e:	f107 0314 	add.w	r3, r7, #20
 8015d62:	4618      	mov	r0, r3
 8015d64:	f7f9 ffc0 	bl	800fce8 <_ZN11TestFailureD1Ev>
 8015d68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015d6c:	4618      	mov	r0, r3
 8015d6e:	f7f8 fc54 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8015d72:	bf00      	nop
 8015d74:	3754      	adds	r7, #84	; 0x54
 8015d76:	46bd      	mov	sp, r7
 8015d78:	bd90      	pop	{r4, r7, pc}
 8015d7a:	bf00      	nop
 8015d7c:	08026a14 	.word	0x08026a14

08015d80 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 8015d80:	b480      	push	{r7}
 8015d82:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 8015d84:	2301      	movs	r3, #1
}
 8015d86:	4618      	mov	r0, r3
 8015d88:	46bd      	mov	sp, r7
 8015d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8e:	4770      	bx	lr

08015d90 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b082      	sub	sp, #8
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
 8015d98:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 8015d9a:	4b13      	ldr	r3, [pc, #76]	; (8015de8 <PlatformSpecificSetJmpImplementation+0x58>)
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	225c      	movs	r2, #92	; 0x5c
 8015da0:	fb02 f303 	mul.w	r3, r2, r3
 8015da4:	4a11      	ldr	r2, [pc, #68]	; (8015dec <PlatformSpecificSetJmpImplementation+0x5c>)
 8015da6:	4413      	add	r3, r2
 8015da8:	4618      	mov	r0, r3
 8015daa:	f7ea fa39 	bl	8000220 <setjmp>
 8015dae:	4603      	mov	r3, r0
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	bf0c      	ite	eq
 8015db4:	2301      	moveq	r3, #1
 8015db6:	2300      	movne	r3, #0
 8015db8:	b2db      	uxtb	r3, r3
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d00e      	beq.n	8015ddc <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 8015dbe:	4b0a      	ldr	r3, [pc, #40]	; (8015de8 <PlatformSpecificSetJmpImplementation+0x58>)
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	3301      	adds	r3, #1
 8015dc4:	4a08      	ldr	r2, [pc, #32]	; (8015de8 <PlatformSpecificSetJmpImplementation+0x58>)
 8015dc6:	6013      	str	r3, [r2, #0]
        function(data);
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	6838      	ldr	r0, [r7, #0]
 8015dcc:	4798      	blx	r3
        jmp_buf_index--;
 8015dce:	4b06      	ldr	r3, [pc, #24]	; (8015de8 <PlatformSpecificSetJmpImplementation+0x58>)
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	3b01      	subs	r3, #1
 8015dd4:	4a04      	ldr	r2, [pc, #16]	; (8015de8 <PlatformSpecificSetJmpImplementation+0x58>)
 8015dd6:	6013      	str	r3, [r2, #0]
        return 1;
 8015dd8:	2301      	movs	r3, #1
 8015dda:	e000      	b.n	8015dde <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 8015ddc:	2300      	movs	r3, #0
}
 8015dde:	4618      	mov	r0, r3
 8015de0:	3708      	adds	r7, #8
 8015de2:	46bd      	mov	sp, r7
 8015de4:	bd80      	pop	{r7, pc}
 8015de6:	bf00      	nop
 8015de8:	20000f1c 	.word	0x20000f1c
 8015dec:	20000b84 	.word	0x20000b84

08015df0 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 8015df0:	b580      	push	{r7, lr}
 8015df2:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 8015df4:	4b07      	ldr	r3, [pc, #28]	; (8015e14 <PlatformSpecificLongJmpImplementation+0x24>)
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	3b01      	subs	r3, #1
 8015dfa:	4a06      	ldr	r2, [pc, #24]	; (8015e14 <PlatformSpecificLongJmpImplementation+0x24>)
 8015dfc:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 8015dfe:	4b05      	ldr	r3, [pc, #20]	; (8015e14 <PlatformSpecificLongJmpImplementation+0x24>)
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	225c      	movs	r2, #92	; 0x5c
 8015e04:	fb02 f303 	mul.w	r3, r2, r3
 8015e08:	4a03      	ldr	r2, [pc, #12]	; (8015e18 <PlatformSpecificLongJmpImplementation+0x28>)
 8015e0a:	4413      	add	r3, r2
 8015e0c:	2101      	movs	r1, #1
 8015e0e:	4618      	mov	r0, r3
 8015e10:	f7ea fa0c 	bl	800022c <longjmp>
 8015e14:	20000f1c 	.word	0x20000f1c
 8015e18:	20000b84 	.word	0x20000b84

08015e1c <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 8015e1c:	b480      	push	{r7}
 8015e1e:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 8015e20:	2300      	movs	r3, #0
#endif
}
 8015e22:	4618      	mov	r0, r3
 8015e24:	46bd      	mov	sp, r7
 8015e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2a:	4770      	bx	lr

08015e2c <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 8015e2c:	b580      	push	{r7, lr}
 8015e2e:	b084      	sub	sp, #16
 8015e30:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 8015e32:	2000      	movs	r0, #0
 8015e34:	f00e ec4c 	blx	80246d0 <__time_veneer>
 8015e38:	4602      	mov	r2, r0
 8015e3a:	460b      	mov	r3, r1
 8015e3c:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 8015e40:	463b      	mov	r3, r7
 8015e42:	4618      	mov	r0, r3
 8015e44:	f00b fb78 	bl	8021538 <localtime>
 8015e48:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	4a04      	ldr	r2, [pc, #16]	; (8015e60 <TimeStringImplementation+0x34>)
 8015e4e:	2150      	movs	r1, #80	; 0x50
 8015e50:	4804      	ldr	r0, [pc, #16]	; (8015e64 <TimeStringImplementation+0x38>)
 8015e52:	f00c fc81 	bl	8022758 <strftime>
    return dateTime;
 8015e56:	4b03      	ldr	r3, [pc, #12]	; (8015e64 <TimeStringImplementation+0x38>)
}
 8015e58:	4618      	mov	r0, r3
 8015e5a:	3710      	adds	r7, #16
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	bd80      	pop	{r7, pc}
 8015e60:	08026a50 	.word	0x08026a50
 8015e64:	20000f20 	.word	0x20000f20

08015e68 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b082      	sub	sp, #8
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	6078      	str	r0, [r7, #4]
 8015e70:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 8015e72:	6839      	ldr	r1, [r7, #0]
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f00b f995 	bl	80211a4 <fopen>
 8015e7a:	4603      	mov	r3, r0
#endif
}
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	3708      	adds	r7, #8
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}

08015e84 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b082      	sub	sp, #8
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	6078      	str	r0, [r7, #4]
 8015e8c:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 8015e8e:	6839      	ldr	r1, [r7, #0]
 8015e90:	6878      	ldr	r0, [r7, #4]
 8015e92:	f00b f9f5 	bl	8021280 <fputs>
}
 8015e96:	bf00      	nop
 8015e98:	3708      	adds	r7, #8
 8015e9a:	46bd      	mov	sp, r7
 8015e9c:	bd80      	pop	{r7, pc}

08015e9e <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 8015e9e:	b580      	push	{r7, lr}
 8015ea0:	b082      	sub	sp, #8
 8015ea2:	af00      	add	r7, sp, #0
 8015ea4:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 8015ea6:	6878      	ldr	r0, [r7, #4]
 8015ea8:	f00a ff76 	bl	8020d98 <fclose>
}
 8015eac:	bf00      	nop
 8015eae:	3708      	adds	r7, #8
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	bd80      	pop	{r7, pc}

08015eb4 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	af00      	add	r7, sp, #0
  fflush(stdout);
 8015eb8:	4b03      	ldr	r3, [pc, #12]	; (8015ec8 <PlatformSpecificFlushImplementation+0x14>)
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	689b      	ldr	r3, [r3, #8]
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	f00b f834 	bl	8020f2c <fflush>
}
 8015ec4:	bf00      	nop
 8015ec6:	bd80      	pop	{r7, pc}
 8015ec8:	20000108 	.word	0x20000108

08015ecc <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b082      	sub	sp, #8
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 8015ed6:	ed97 0b00 	vldr	d0, [r7]
 8015eda:	f7ff ff07 	bl	8015cec <_ZSt5isnand>
 8015ede:	4603      	mov	r3, r0
}
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	3708      	adds	r7, #8
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	bd80      	pop	{r7, pc}

08015ee8 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b082      	sub	sp, #8
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 8015ef2:	ed97 0b00 	vldr	d0, [r7]
 8015ef6:	f7ff fec9 	bl	8015c8c <_ZSt5isinfd>
 8015efa:	4603      	mov	r3, r0
}
 8015efc:	4618      	mov	r0, r3
 8015efe:	3708      	adds	r7, #8
 8015f00:	46bd      	mov	sp, r7
 8015f02:	bd80      	pop	{r7, pc}

08015f04 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 8015f04:	b480      	push	{r7}
 8015f06:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 8015f08:	2300      	movs	r3, #0
#endif

}
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f12:	4770      	bx	lr

08015f14 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 8015f14:	b480      	push	{r7}
 8015f16:	b083      	sub	sp, #12
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]
}
 8015f1c:	bf00      	nop
 8015f1e:	370c      	adds	r7, #12
 8015f20:	46bd      	mov	sp, r7
 8015f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f26:	4770      	bx	lr

08015f28 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 8015f28:	b480      	push	{r7}
 8015f2a:	b083      	sub	sp, #12
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
}
 8015f30:	bf00      	nop
 8015f32:	370c      	adds	r7, #12
 8015f34:	46bd      	mov	sp, r7
 8015f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f3a:	4770      	bx	lr

08015f3c <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8015f3c:	b480      	push	{r7}
 8015f3e:	b083      	sub	sp, #12
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	6078      	str	r0, [r7, #4]
}
 8015f44:	bf00      	nop
 8015f46:	370c      	adds	r7, #12
 8015f48:	46bd      	mov	sp, r7
 8015f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4e:	4770      	bx	lr

08015f50 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b084      	sub	sp, #16
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	60f8      	str	r0, [r7, #12]
 8015f58:	60b9      	str	r1, [r7, #8]
 8015f5a:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8015f5c:	4a25      	ldr	r2, [pc, #148]	; (8015ff4 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	601a      	str	r2, [r3, #0]
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	68ba      	ldr	r2, [r7, #8]
 8015f66:	605a      	str	r2, [r3, #4]
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	687a      	ldr	r2, [r7, #4]
 8015f6c:	609a      	str	r2, [r3, #8]
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	2200      	movs	r2, #0
 8015f72:	731a      	strb	r2, [r3, #12]
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	2200      	movs	r2, #0
 8015f78:	735a      	strb	r2, [r3, #13]
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	2200      	movs	r2, #0
 8015f7e:	739a      	strb	r2, [r3, #14]
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	2200      	movs	r2, #0
 8015f84:	73da      	strb	r2, [r3, #15]
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	2200      	movs	r2, #0
 8015f8a:	741a      	strb	r2, [r3, #16]
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	2200      	movs	r2, #0
 8015f90:	745a      	strb	r2, [r3, #17]
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	2200      	movs	r2, #0
 8015f96:	749a      	strb	r2, [r3, #18]
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	74da      	strb	r2, [r3, #19]
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	2200      	movs	r2, #0
 8015fa2:	751a      	strb	r2, [r3, #20]
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	2200      	movs	r2, #0
 8015fa8:	755a      	strb	r2, [r3, #21]
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	2200      	movs	r2, #0
 8015fae:	759a      	strb	r2, [r3, #22]
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	75da      	strb	r2, [r3, #23]
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	2200      	movs	r2, #0
 8015fba:	761a      	strb	r2, [r3, #24]
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	2201      	movs	r2, #1
 8015fc0:	61da      	str	r2, [r3, #28]
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	621a      	str	r2, [r3, #32]
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	2200      	movs	r2, #0
 8015fcc:	625a      	str	r2, [r3, #36]	; 0x24
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	629a      	str	r2, [r3, #40]	; 0x28
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	3330      	adds	r3, #48	; 0x30
 8015fe0:	4905      	ldr	r1, [pc, #20]	; (8015ff8 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	f7f7 ff61 	bl	800deaa <_ZN12SimpleStringC1EPKc>
{
}
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	4618      	mov	r0, r3
 8015fec:	3710      	adds	r7, #16
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	bd80      	pop	{r7, pc}
 8015ff2:	bf00      	nop
 8015ff4:	0802a648 	.word	0x0802a648
 8015ff8:	08026a64 	.word	0x08026a64

08015ffc <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	b082      	sub	sp, #8
 8016000:	af00      	add	r7, sp, #0
 8016002:	6078      	str	r0, [r7, #4]
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	4618      	mov	r0, r3
 8016008:	f7f8 fb07 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	4618      	mov	r0, r3
 8016010:	3708      	adds	r7, #8
 8016012:	46bd      	mov	sp, r7
 8016014:	bd80      	pop	{r7, pc}
	...

08016018 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 8016018:	b590      	push	{r4, r7, lr}
 801601a:	b085      	sub	sp, #20
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
 8016020:	4a20      	ldr	r2, [pc, #128]	; (80160a4 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801602a:	2b00      	cmp	r3, #0
 801602c:	d015      	beq.n	801605a <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016032:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016038:	4618      	mov	r0, r3
 801603a:	f00a fda2 	bl	8020b82 <_ZNK10TestFilter7getNextEv>
 801603e:	4602      	mov	r2, r0
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 8016044:	68fc      	ldr	r4, [r7, #12]
 8016046:	2c00      	cmp	r4, #0
 8016048:	d0ed      	beq.n	8016026 <_ZN20CommandLineArgumentsD1Ev+0xe>
 801604a:	4620      	mov	r0, r4
 801604c:	f7ff ffd6 	bl	8015ffc <_ZN10TestFilterD1Ev>
 8016050:	2110      	movs	r1, #16
 8016052:	4620      	mov	r0, r4
 8016054:	f7f5 fb7a 	bl	800b74c <_ZdlPvj>
    while(groupFilters_) {
 8016058:	e7e5      	b.n	8016026 <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801605e:	2b00      	cmp	r3, #0
 8016060:	d015      	beq.n	801608e <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016066:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801606c:	4618      	mov	r0, r3
 801606e:	f00a fd88 	bl	8020b82 <_ZNK10TestFilter7getNextEv>
 8016072:	4602      	mov	r2, r0
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 8016078:	68bc      	ldr	r4, [r7, #8]
 801607a:	2c00      	cmp	r4, #0
 801607c:	d0ed      	beq.n	801605a <_ZN20CommandLineArgumentsD1Ev+0x42>
 801607e:	4620      	mov	r0, r4
 8016080:	f7ff ffbc 	bl	8015ffc <_ZN10TestFilterD1Ev>
 8016084:	2110      	movs	r1, #16
 8016086:	4620      	mov	r0, r4
 8016088:	f7f5 fb60 	bl	800b74c <_ZdlPvj>
    while(nameFilters_) {
 801608c:	e7e5      	b.n	801605a <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	3330      	adds	r3, #48	; 0x30
 8016092:	4618      	mov	r0, r3
 8016094:	f7f8 fac1 	bl	800e61a <_ZN12SimpleStringD1Ev>
    }
}
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	4618      	mov	r0, r3
 801609c:	3714      	adds	r7, #20
 801609e:	46bd      	mov	sp, r7
 80160a0:	bd90      	pop	{r4, r7, pc}
 80160a2:	bf00      	nop
 80160a4:	0802a648 	.word	0x0802a648

080160a8 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b082      	sub	sp, #8
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
}
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f7ff ffb1 	bl	8016018 <_ZN20CommandLineArgumentsD1Ev>
 80160b6:	2138      	movs	r1, #56	; 0x38
 80160b8:	6878      	ldr	r0, [r7, #4]
 80160ba:	f7f5 fb47 	bl	800b74c <_ZdlPvj>
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	4618      	mov	r0, r3
 80160c2:	3708      	adds	r7, #8
 80160c4:	46bd      	mov	sp, r7
 80160c6:	bd80      	pop	{r7, pc}

080160c8 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 80160c8:	b5b0      	push	{r4, r5, r7, lr}
 80160ca:	b0be      	sub	sp, #248	; 0xf8
 80160cc:	af02      	add	r7, sp, #8
 80160ce:	6078      	str	r0, [r7, #4]
 80160d0:	6039      	str	r1, [r7, #0]
 80160d2:	2400      	movs	r4, #0
    bool correctParameters = true;
 80160d4:	2301      	movs	r3, #1
 80160d6:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 80160da:	2301      	movs	r3, #1
 80160dc:	613b      	str	r3, [r7, #16]
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	685a      	ldr	r2, [r3, #4]
 80160e2:	693b      	ldr	r3, [r7, #16]
 80160e4:	429a      	cmp	r2, r3
 80160e6:	f340 83a4 	ble.w	8016832 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	689a      	ldr	r2, [r3, #8]
 80160ee:	693b      	ldr	r3, [r7, #16]
 80160f0:	009b      	lsls	r3, r3, #2
 80160f2:	4413      	add	r3, r2
 80160f4:	681a      	ldr	r2, [r3, #0]
 80160f6:	f107 0308 	add.w	r3, r7, #8
 80160fa:	4611      	mov	r1, r2
 80160fc:	4618      	mov	r0, r3
 80160fe:	f7f7 fed4 	bl	800deaa <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 8016102:	f107 0314 	add.w	r3, r7, #20
 8016106:	49c8      	ldr	r1, [pc, #800]	; (8016428 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 8016108:	4618      	mov	r0, r3
 801610a:	f7f7 fece 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801610e:	f107 0214 	add.w	r2, r7, #20
 8016112:	f107 0308 	add.w	r3, r7, #8
 8016116:	4611      	mov	r1, r2
 8016118:	4618      	mov	r0, r3
 801611a:	f7f8 fa8a 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801611e:	4603      	mov	r3, r0
 8016120:	461d      	mov	r5, r3
 8016122:	f107 0314 	add.w	r3, r7, #20
 8016126:	4618      	mov	r0, r3
 8016128:	f7f8 fa77 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801612c:	2d00      	cmp	r5, #0
 801612e:	d006      	beq.n	801613e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	2201      	movs	r2, #1
 8016134:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 8016136:	2300      	movs	r3, #0
 8016138:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 801613c:	e366      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 801613e:	f107 031c 	add.w	r3, r7, #28
 8016142:	49ba      	ldr	r1, [pc, #744]	; (801642c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8016144:	4618      	mov	r0, r3
 8016146:	f7f7 feb0 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801614a:	f107 021c 	add.w	r2, r7, #28
 801614e:	f107 0308 	add.w	r3, r7, #8
 8016152:	4611      	mov	r1, r2
 8016154:	4618      	mov	r0, r3
 8016156:	f7f8 fa6c 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801615a:	4603      	mov	r3, r0
 801615c:	461d      	mov	r5, r3
 801615e:	f107 031c 	add.w	r3, r7, #28
 8016162:	4618      	mov	r0, r3
 8016164:	f7f8 fa59 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8016168:	2d00      	cmp	r5, #0
 801616a:	d003      	beq.n	8016174 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	2201      	movs	r2, #1
 8016170:	735a      	strb	r2, [r3, #13]
 8016172:	e34b      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8016174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016178:	49ad      	ldr	r1, [pc, #692]	; (8016430 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 801617a:	4618      	mov	r0, r3
 801617c:	f7f7 fe95 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8016180:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8016184:	f107 0308 	add.w	r3, r7, #8
 8016188:	4611      	mov	r1, r2
 801618a:	4618      	mov	r0, r3
 801618c:	f7f8 fa51 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 8016190:	4603      	mov	r3, r0
 8016192:	461d      	mov	r5, r3
 8016194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016198:	4618      	mov	r0, r3
 801619a:	f7f8 fa3e 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801619e:	2d00      	cmp	r5, #0
 80161a0:	d003      	beq.n	80161aa <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	2201      	movs	r2, #1
 80161a6:	739a      	strb	r2, [r3, #14]
 80161a8:	e330      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 80161aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80161ae:	49a1      	ldr	r1, [pc, #644]	; (8016434 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 80161b0:	4618      	mov	r0, r3
 80161b2:	f7f7 fe7a 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80161b6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80161ba:	f107 0308 	add.w	r3, r7, #8
 80161be:	4611      	mov	r1, r2
 80161c0:	4618      	mov	r0, r3
 80161c2:	f7f8 fa36 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 80161c6:	4603      	mov	r3, r0
 80161c8:	461d      	mov	r5, r3
 80161ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80161ce:	4618      	mov	r0, r3
 80161d0:	f7f8 fa23 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80161d4:	2d00      	cmp	r5, #0
 80161d6:	d003      	beq.n	80161e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	2201      	movs	r2, #1
 80161dc:	73da      	strb	r2, [r3, #15]
 80161de:	e315      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 80161e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80161e4:	4994      	ldr	r1, [pc, #592]	; (8016438 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 80161e6:	4618      	mov	r0, r3
 80161e8:	f7f7 fe5f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80161ec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80161f0:	f107 0308 	add.w	r3, r7, #8
 80161f4:	4611      	mov	r1, r2
 80161f6:	4618      	mov	r0, r3
 80161f8:	f7f8 fa1b 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 80161fc:	4603      	mov	r3, r0
 80161fe:	461d      	mov	r5, r3
 8016200:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016204:	4618      	mov	r0, r3
 8016206:	f7f8 fa08 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801620a:	2d00      	cmp	r5, #0
 801620c:	d003      	beq.n	8016216 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	2201      	movs	r2, #1
 8016212:	741a      	strb	r2, [r3, #16]
 8016214:	e2fa      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 8016216:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801621a:	4988      	ldr	r1, [pc, #544]	; (801643c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 801621c:	4618      	mov	r0, r3
 801621e:	f7f7 fe44 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8016222:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8016226:	f107 0308 	add.w	r3, r7, #8
 801622a:	4611      	mov	r1, r2
 801622c:	4618      	mov	r0, r3
 801622e:	f7f8 fa00 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 8016232:	4603      	mov	r3, r0
 8016234:	461d      	mov	r5, r3
 8016236:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801623a:	4618      	mov	r0, r3
 801623c:	f7f8 f9ed 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8016240:	2d00      	cmp	r5, #0
 8016242:	d003      	beq.n	801624c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	2201      	movs	r2, #1
 8016248:	755a      	strb	r2, [r3, #21]
 801624a:	e2df      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 801624c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016250:	497b      	ldr	r1, [pc, #492]	; (8016440 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 8016252:	4618      	mov	r0, r3
 8016254:	f7f7 fe29 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8016258:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801625c:	f107 0308 	add.w	r3, r7, #8
 8016260:	4611      	mov	r1, r2
 8016262:	4618      	mov	r0, r3
 8016264:	f7f8 f9e5 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 8016268:	4603      	mov	r3, r0
 801626a:	461d      	mov	r5, r3
 801626c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016270:	4618      	mov	r0, r3
 8016272:	f7f8 f9d2 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8016276:	2d00      	cmp	r5, #0
 8016278:	d003      	beq.n	8016282 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	2201      	movs	r2, #1
 801627e:	745a      	strb	r2, [r3, #17]
 8016280:	e2c4      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 8016282:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016286:	496f      	ldr	r1, [pc, #444]	; (8016444 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 8016288:	4618      	mov	r0, r3
 801628a:	f7f7 fe0e 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801628e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8016292:	f107 0308 	add.w	r3, r7, #8
 8016296:	4611      	mov	r1, r2
 8016298:	4618      	mov	r0, r3
 801629a:	f7f8 f9ca 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801629e:	4603      	mov	r3, r0
 80162a0:	461d      	mov	r5, r3
 80162a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80162a6:	4618      	mov	r0, r3
 80162a8:	f7f8 f9b7 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80162ac:	2d00      	cmp	r5, #0
 80162ae:	d003      	beq.n	80162b8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	2201      	movs	r2, #1
 80162b4:	749a      	strb	r2, [r3, #18]
 80162b6:	e2a9      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 80162b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80162bc:	4962      	ldr	r1, [pc, #392]	; (8016448 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 80162be:	4618      	mov	r0, r3
 80162c0:	f7f7 fdf3 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80162c4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80162c8:	f107 0308 	add.w	r3, r7, #8
 80162cc:	4611      	mov	r1, r2
 80162ce:	4618      	mov	r0, r3
 80162d0:	f7f8 f9af 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 80162d4:	4603      	mov	r3, r0
 80162d6:	461d      	mov	r5, r3
 80162d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80162dc:	4618      	mov	r0, r3
 80162de:	f7f8 f99c 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80162e2:	2d00      	cmp	r5, #0
 80162e4:	d003      	beq.n	80162ee <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	2201      	movs	r2, #1
 80162ea:	74da      	strb	r2, [r3, #19]
 80162ec:	e28e      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 80162ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80162f2:	4956      	ldr	r1, [pc, #344]	; (801644c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 80162f4:	4618      	mov	r0, r3
 80162f6:	f7f7 fdd8 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80162fa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80162fe:	f107 0308 	add.w	r3, r7, #8
 8016302:	4611      	mov	r1, r2
 8016304:	4618      	mov	r0, r3
 8016306:	f7f8 f994 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801630a:	4603      	mov	r3, r0
 801630c:	461d      	mov	r5, r3
 801630e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8016312:	4618      	mov	r0, r3
 8016314:	f7f8 f981 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8016318:	2d00      	cmp	r5, #0
 801631a:	d003      	beq.n	8016324 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	2201      	movs	r2, #1
 8016320:	751a      	strb	r2, [r3, #20]
 8016322:	e273      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 8016324:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016328:	4949      	ldr	r1, [pc, #292]	; (8016450 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 801632a:	4618      	mov	r0, r3
 801632c:	f7f7 fdbd 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8016330:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8016334:	f107 0308 	add.w	r3, r7, #8
 8016338:	4611      	mov	r1, r2
 801633a:	4618      	mov	r0, r3
 801633c:	f7f8 f979 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 8016340:	4603      	mov	r3, r0
 8016342:	461d      	mov	r5, r3
 8016344:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016348:	4618      	mov	r0, r3
 801634a:	f7f8 f966 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801634e:	2d00      	cmp	r5, #0
 8016350:	d003      	beq.n	801635a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	2201      	movs	r2, #1
 8016356:	759a      	strb	r2, [r3, #22]
 8016358:	e258      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 801635a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801635e:	493d      	ldr	r1, [pc, #244]	; (8016454 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 8016360:	4618      	mov	r0, r3
 8016362:	f7f7 fda2 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8016366:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801636a:	f107 0308 	add.w	r3, r7, #8
 801636e:	4611      	mov	r1, r2
 8016370:	4618      	mov	r0, r3
 8016372:	f7f7 fe5e 	bl	800e032 <_ZNK12SimpleString10startsWithERKS_>
 8016376:	4603      	mov	r3, r0
 8016378:	461d      	mov	r5, r3
 801637a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801637e:	4618      	mov	r0, r3
 8016380:	f7f8 f94b 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8016384:	2d00      	cmp	r5, #0
 8016386:	d009      	beq.n	801639c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	6859      	ldr	r1, [r3, #4]
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	689a      	ldr	r2, [r3, #8]
 8016390:	f107 0310 	add.w	r3, r7, #16
 8016394:	6878      	ldr	r0, [r7, #4]
 8016396:	f000 fb33 	bl	8016a00 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 801639a:	e237      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 801639c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80163a0:	492d      	ldr	r1, [pc, #180]	; (8016458 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 80163a2:	4618      	mov	r0, r3
 80163a4:	f7f7 fd81 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80163a8:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80163ac:	f107 0308 	add.w	r3, r7, #8
 80163b0:	4611      	mov	r1, r2
 80163b2:	4618      	mov	r0, r3
 80163b4:	f7f7 fe3d 	bl	800e032 <_ZNK12SimpleString10startsWithERKS_>
 80163b8:	4603      	mov	r3, r0
 80163ba:	461d      	mov	r5, r3
 80163bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80163c0:	4618      	mov	r0, r3
 80163c2:	f7f8 f92a 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80163c6:	2d00      	cmp	r5, #0
 80163c8:	d009      	beq.n	80163de <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	6859      	ldr	r1, [r3, #4]
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	689a      	ldr	r2, [r3, #8]
 80163d2:	f107 0310 	add.w	r3, r7, #16
 80163d6:	6878      	ldr	r0, [r7, #4]
 80163d8:	f000 fc40 	bl	8016c5c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 80163dc:	e216      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 80163de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80163e2:	491e      	ldr	r1, [pc, #120]	; (801645c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 80163e4:	4618      	mov	r0, r3
 80163e6:	f7f7 fd60 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80163ea:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80163ee:	f107 0308 	add.w	r3, r7, #8
 80163f2:	4611      	mov	r1, r2
 80163f4:	4618      	mov	r0, r3
 80163f6:	f7f7 fe1c 	bl	800e032 <_ZNK12SimpleString10startsWithERKS_>
 80163fa:	4603      	mov	r3, r0
 80163fc:	461d      	mov	r5, r3
 80163fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016402:	4618      	mov	r0, r3
 8016404:	f7f8 f909 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8016408:	2d00      	cmp	r5, #0
 801640a:	d029      	beq.n	8016460 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	6859      	ldr	r1, [r3, #4]
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	689a      	ldr	r2, [r3, #8]
 8016414:	f107 0310 	add.w	r3, r7, #16
 8016418:	6878      	ldr	r0, [r7, #4]
 801641a:	f000 fc61 	bl	8016ce0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 801641e:	4603      	mov	r3, r0
 8016420:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8016424:	e1f2      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8016426:	bf00      	nop
 8016428:	08026a68 	.word	0x08026a68
 801642c:	08026a6c 	.word	0x08026a6c
 8016430:	08026a70 	.word	0x08026a70
 8016434:	08026a74 	.word	0x08026a74
 8016438:	08026a78 	.word	0x08026a78
 801643c:	08026a7c 	.word	0x08026a7c
 8016440:	08026a80 	.word	0x08026a80
 8016444:	08026a84 	.word	0x08026a84
 8016448:	08026a88 	.word	0x08026a88
 801644c:	08026a8c 	.word	0x08026a8c
 8016450:	08026a90 	.word	0x08026a90
 8016454:	08026a94 	.word	0x08026a94
 8016458:	08026a98 	.word	0x08026a98
 801645c:	08026a9c 	.word	0x08026a9c
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8016460:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8016464:	49b9      	ldr	r1, [pc, #740]	; (801674c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 8016466:	4618      	mov	r0, r3
 8016468:	f7f7 fd1f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801646c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8016470:	f107 0308 	add.w	r3, r7, #8
 8016474:	4611      	mov	r1, r2
 8016476:	4618      	mov	r0, r3
 8016478:	f7f7 fddb 	bl	800e032 <_ZNK12SimpleString10startsWithERKS_>
 801647c:	4603      	mov	r3, r0
 801647e:	461d      	mov	r5, r3
 8016480:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8016484:	4618      	mov	r0, r3
 8016486:	f7f8 f8c8 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801648a:	2d00      	cmp	r5, #0
 801648c:	d009      	beq.n	80164a2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	6859      	ldr	r1, [r3, #4]
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	689a      	ldr	r2, [r3, #8]
 8016496:	f107 0310 	add.w	r3, r7, #16
 801649a:	6878      	ldr	r0, [r7, #4]
 801649c:	f000 fccc 	bl	8016e38 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 80164a0:	e1b4      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 80164a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80164a6:	49aa      	ldr	r1, [pc, #680]	; (8016750 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 80164a8:	4618      	mov	r0, r3
 80164aa:	f7f7 fcfe 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80164ae:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80164b2:	f107 0308 	add.w	r3, r7, #8
 80164b6:	4611      	mov	r1, r2
 80164b8:	4618      	mov	r0, r3
 80164ba:	f7f7 fdba 	bl	800e032 <_ZNK12SimpleString10startsWithERKS_>
 80164be:	4603      	mov	r3, r0
 80164c0:	461d      	mov	r5, r3
 80164c2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80164c6:	4618      	mov	r0, r3
 80164c8:	f7f8 f8a7 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80164cc:	2d00      	cmp	r5, #0
 80164ce:	d009      	beq.n	80164e4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	6859      	ldr	r1, [r3, #4]
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	689a      	ldr	r2, [r3, #8]
 80164d8:	f107 0310 	add.w	r3, r7, #16
 80164dc:	6878      	ldr	r0, [r7, #4]
 80164de:	f000 fcf1 	bl	8016ec4 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 80164e2:	e193      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 80164e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80164e8:	499a      	ldr	r1, [pc, #616]	; (8016754 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 80164ea:	4618      	mov	r0, r3
 80164ec:	f7f7 fcdd 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80164f0:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80164f4:	f107 0308 	add.w	r3, r7, #8
 80164f8:	4611      	mov	r1, r2
 80164fa:	4618      	mov	r0, r3
 80164fc:	f7f7 fd99 	bl	800e032 <_ZNK12SimpleString10startsWithERKS_>
 8016500:	4603      	mov	r3, r0
 8016502:	461d      	mov	r5, r3
 8016504:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8016508:	4618      	mov	r0, r3
 801650a:	f7f8 f886 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801650e:	2d00      	cmp	r5, #0
 8016510:	d009      	beq.n	8016526 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	6859      	ldr	r1, [r3, #4]
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	689a      	ldr	r2, [r3, #8]
 801651a:	f107 0310 	add.w	r3, r7, #16
 801651e:	6878      	ldr	r0, [r7, #4]
 8016520:	f000 fd16 	bl	8016f50 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 8016524:	e172      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 8016526:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801652a:	498b      	ldr	r1, [pc, #556]	; (8016758 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 801652c:	4618      	mov	r0, r3
 801652e:	f7f7 fcbc 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8016532:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8016536:	f107 0308 	add.w	r3, r7, #8
 801653a:	4611      	mov	r1, r2
 801653c:	4618      	mov	r0, r3
 801653e:	f7f7 fd78 	bl	800e032 <_ZNK12SimpleString10startsWithERKS_>
 8016542:	4603      	mov	r3, r0
 8016544:	461d      	mov	r5, r3
 8016546:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801654a:	4618      	mov	r0, r3
 801654c:	f7f8 f865 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8016550:	2d00      	cmp	r5, #0
 8016552:	d009      	beq.n	8016568 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	6859      	ldr	r1, [r3, #4]
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	689a      	ldr	r2, [r3, #8]
 801655c:	f107 0310 	add.w	r3, r7, #16
 8016560:	6878      	ldr	r0, [r7, #4]
 8016562:	f000 fd3d 	bl	8016fe0 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 8016566:	e151      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 8016568:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801656c:	497b      	ldr	r1, [pc, #492]	; (801675c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 801656e:	4618      	mov	r0, r3
 8016570:	f7f7 fc9b 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8016574:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8016578:	f107 0308 	add.w	r3, r7, #8
 801657c:	4611      	mov	r1, r2
 801657e:	4618      	mov	r0, r3
 8016580:	f7f7 fd57 	bl	800e032 <_ZNK12SimpleString10startsWithERKS_>
 8016584:	4603      	mov	r3, r0
 8016586:	461d      	mov	r5, r3
 8016588:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801658c:	4618      	mov	r0, r3
 801658e:	f7f8 f844 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8016592:	2d00      	cmp	r5, #0
 8016594:	d009      	beq.n	80165aa <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	6859      	ldr	r1, [r3, #4]
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	689a      	ldr	r2, [r3, #8]
 801659e:	f107 0310 	add.w	r3, r7, #16
 80165a2:	6878      	ldr	r0, [r7, #4]
 80165a4:	f000 fd5e 	bl	8017064 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 80165a8:	e130      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 80165aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80165ae:	496c      	ldr	r1, [pc, #432]	; (8016760 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 80165b0:	4618      	mov	r0, r3
 80165b2:	f7f7 fc7a 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80165b6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80165ba:	f107 0308 	add.w	r3, r7, #8
 80165be:	4611      	mov	r1, r2
 80165c0:	4618      	mov	r0, r3
 80165c2:	f7f7 fd36 	bl	800e032 <_ZNK12SimpleString10startsWithERKS_>
 80165c6:	4603      	mov	r3, r0
 80165c8:	461d      	mov	r5, r3
 80165ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80165ce:	4618      	mov	r0, r3
 80165d0:	f7f8 f823 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80165d4:	2d00      	cmp	r5, #0
 80165d6:	d009      	beq.n	80165ec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	6859      	ldr	r1, [r3, #4]
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	689a      	ldr	r2, [r3, #8]
 80165e0:	f107 0310 	add.w	r3, r7, #16
 80165e4:	6878      	ldr	r0, [r7, #4]
 80165e6:	f000 fd83 	bl	80170f0 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 80165ea:	e10f      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 80165ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80165f0:	495c      	ldr	r1, [pc, #368]	; (8016764 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 80165f2:	4618      	mov	r0, r3
 80165f4:	f7f7 fc59 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80165f8:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80165fc:	f107 0308 	add.w	r3, r7, #8
 8016600:	4611      	mov	r1, r2
 8016602:	4618      	mov	r0, r3
 8016604:	f7f7 fd15 	bl	800e032 <_ZNK12SimpleString10startsWithERKS_>
 8016608:	4603      	mov	r3, r0
 801660a:	461d      	mov	r5, r3
 801660c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8016610:	4618      	mov	r0, r3
 8016612:	f7f8 f802 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8016616:	2d00      	cmp	r5, #0
 8016618:	d009      	beq.n	801662e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	6859      	ldr	r1, [r3, #4]
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	689a      	ldr	r2, [r3, #8]
 8016622:	f107 0310 	add.w	r3, r7, #16
 8016626:	6878      	ldr	r0, [r7, #4]
 8016628:	f000 fda8 	bl	801717c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 801662c:	e0ee      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 801662e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8016632:	494d      	ldr	r1, [pc, #308]	; (8016768 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8016634:	4618      	mov	r0, r3
 8016636:	f7f7 fc38 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801663a:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 801663e:	f107 0308 	add.w	r3, r7, #8
 8016642:	4611      	mov	r1, r2
 8016644:	4618      	mov	r0, r3
 8016646:	f7f7 fcf4 	bl	800e032 <_ZNK12SimpleString10startsWithERKS_>
 801664a:	4603      	mov	r3, r0
 801664c:	461d      	mov	r5, r3
 801664e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8016652:	4618      	mov	r0, r3
 8016654:	f7f7 ffe1 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8016658:	2d00      	cmp	r5, #0
 801665a:	d00c      	beq.n	8016676 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	6859      	ldr	r1, [r3, #4]
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	689a      	ldr	r2, [r3, #8]
 8016664:	f107 0310 	add.w	r3, r7, #16
 8016668:	6878      	ldr	r0, [r7, #4]
 801666a:	f000 fa29 	bl	8016ac0 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 801666e:	4603      	mov	r3, r0
 8016670:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8016674:	e0ca      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 8016676:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801667a:	493c      	ldr	r1, [pc, #240]	; (801676c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 801667c:	4618      	mov	r0, r3
 801667e:	f7f7 fc14 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8016682:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8016686:	f107 0308 	add.w	r3, r7, #8
 801668a:	4611      	mov	r1, r2
 801668c:	4618      	mov	r0, r3
 801668e:	f7f7 fcd0 	bl	800e032 <_ZNK12SimpleString10startsWithERKS_>
 8016692:	4603      	mov	r3, r0
 8016694:	461d      	mov	r5, r3
 8016696:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801669a:	4618      	mov	r0, r3
 801669c:	f7f7 ffbd 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80166a0:	2d00      	cmp	r5, #0
 80166a2:	d00b      	beq.n	80166bc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	6859      	ldr	r1, [r3, #4]
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	689a      	ldr	r2, [r3, #8]
 80166ac:	f107 0310 	add.w	r3, r7, #16
 80166b0:	482e      	ldr	r0, [pc, #184]	; (801676c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 80166b2:	9000      	str	r0, [sp, #0]
 80166b4:	6878      	ldr	r0, [r7, #4]
 80166b6:	f000 fda9 	bl	801720c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 80166ba:	e0a7      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 80166bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80166c0:	492b      	ldr	r1, [pc, #172]	; (8016770 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 80166c2:	4618      	mov	r0, r3
 80166c4:	f7f7 fbf1 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80166c8:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80166cc:	f107 0308 	add.w	r3, r7, #8
 80166d0:	4611      	mov	r1, r2
 80166d2:	4618      	mov	r0, r3
 80166d4:	f7f7 fcad 	bl	800e032 <_ZNK12SimpleString10startsWithERKS_>
 80166d8:	4603      	mov	r3, r0
 80166da:	461d      	mov	r5, r3
 80166dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80166e0:	4618      	mov	r0, r3
 80166e2:	f7f7 ff9a 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80166e6:	2d00      	cmp	r5, #0
 80166e8:	d00b      	beq.n	8016702 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	6859      	ldr	r1, [r3, #4]
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	689a      	ldr	r2, [r3, #8]
 80166f2:	f107 0310 	add.w	r3, r7, #16
 80166f6:	481e      	ldr	r0, [pc, #120]	; (8016770 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 80166f8:	9000      	str	r0, [sp, #0]
 80166fa:	6878      	ldr	r0, [r7, #4]
 80166fc:	f000 fd86 	bl	801720c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8016700:	e084      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 8016702:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8016706:	491b      	ldr	r1, [pc, #108]	; (8016774 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 8016708:	4618      	mov	r0, r3
 801670a:	f7f7 fbce 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801670e:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8016712:	f107 0308 	add.w	r3, r7, #8
 8016716:	4611      	mov	r1, r2
 8016718:	4618      	mov	r0, r3
 801671a:	f7f7 fc8a 	bl	800e032 <_ZNK12SimpleString10startsWithERKS_>
 801671e:	4603      	mov	r3, r0
 8016720:	461d      	mov	r5, r3
 8016722:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8016726:	4618      	mov	r0, r3
 8016728:	f7f7 ff77 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801672c:	2d00      	cmp	r5, #0
 801672e:	d023      	beq.n	8016778 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	6859      	ldr	r1, [r3, #4]
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	689a      	ldr	r2, [r3, #8]
 8016738:	f107 0310 	add.w	r3, r7, #16
 801673c:	6878      	ldr	r0, [r7, #4]
 801673e:	f000 fe3b 	bl	80173b8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 8016742:	4603      	mov	r3, r0
 8016744:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8016748:	e060      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 801674a:	bf00      	nop
 801674c:	08026aa0 	.word	0x08026aa0
 8016750:	08026aa4 	.word	0x08026aa4
 8016754:	08026aa8 	.word	0x08026aa8
 8016758:	08026ab0 	.word	0x08026ab0
 801675c:	08026ab4 	.word	0x08026ab4
 8016760:	08026ab8 	.word	0x08026ab8
 8016764:	08026abc 	.word	0x08026abc
 8016768:	08026ac4 	.word	0x08026ac4
 801676c:	08026ac8 	.word	0x08026ac8
 8016770:	08026ad0 	.word	0x08026ad0
 8016774:	08026ae0 	.word	0x08026ae0
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 8016778:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801677c:	4930      	ldr	r1, [pc, #192]	; (8016840 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 801677e:	4618      	mov	r0, r3
 8016780:	f7f7 fb93 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8016784:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8016788:	f107 0308 	add.w	r3, r7, #8
 801678c:	4611      	mov	r1, r2
 801678e:	4618      	mov	r0, r3
 8016790:	f7f7 fc4f 	bl	800e032 <_ZNK12SimpleString10startsWithERKS_>
 8016794:	4603      	mov	r3, r0
 8016796:	461d      	mov	r5, r3
 8016798:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801679c:	4618      	mov	r0, r3
 801679e:	f7f7 ff3c 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80167a2:	2d00      	cmp	r5, #0
 80167a4:	d00e      	beq.n	80167c4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 80167a6:	683b      	ldr	r3, [r7, #0]
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	331c      	adds	r3, #28
 80167ac:	681d      	ldr	r5, [r3, #0]
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	6859      	ldr	r1, [r3, #4]
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	689a      	ldr	r2, [r3, #8]
 80167b6:	693b      	ldr	r3, [r7, #16]
 80167b8:	6838      	ldr	r0, [r7, #0]
 80167ba:	47a8      	blx	r5
 80167bc:	4603      	mov	r3, r0
 80167be:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80167c2:	e023      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 80167c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80167c8:	491e      	ldr	r1, [pc, #120]	; (8016844 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 80167ca:	4618      	mov	r0, r3
 80167cc:	f7f7 fb6d 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80167d0:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80167d4:	f107 0308 	add.w	r3, r7, #8
 80167d8:	4611      	mov	r1, r2
 80167da:	4618      	mov	r0, r3
 80167dc:	f7f7 fc29 	bl	800e032 <_ZNK12SimpleString10startsWithERKS_>
 80167e0:	4603      	mov	r3, r0
 80167e2:	461d      	mov	r5, r3
 80167e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80167e8:	4618      	mov	r0, r3
 80167ea:	f7f7 ff16 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80167ee:	2d00      	cmp	r5, #0
 80167f0:	d009      	beq.n	8016806 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	6859      	ldr	r1, [r3, #4]
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	689a      	ldr	r2, [r3, #8]
 80167fa:	f107 0310 	add.w	r3, r7, #16
 80167fe:	6878      	ldr	r0, [r7, #4]
 8016800:	f000 fd98 	bl	8017334 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 8016804:	e002      	b.n	801680c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 8016806:	2300      	movs	r3, #0
 8016808:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 801680c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8016810:	2b00      	cmp	r3, #0
 8016812:	d102      	bne.n	801681a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 8016814:	2400      	movs	r4, #0
 8016816:	2500      	movs	r5, #0
 8016818:	e000      	b.n	801681c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 801681a:	2501      	movs	r5, #1
 801681c:	f107 0308 	add.w	r3, r7, #8
 8016820:	4618      	mov	r0, r3
 8016822:	f7f7 fefa 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8016826:	2d01      	cmp	r5, #1
 8016828:	d104      	bne.n	8016834 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 801682a:	693b      	ldr	r3, [r7, #16]
 801682c:	3301      	adds	r3, #1
 801682e:	613b      	str	r3, [r7, #16]
 8016830:	e455      	b.n	80160de <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 8016832:	2401      	movs	r4, #1
 8016834:	4623      	mov	r3, r4
}
 8016836:	4618      	mov	r0, r3
 8016838:	37f0      	adds	r7, #240	; 0xf0
 801683a:	46bd      	mov	sp, r7
 801683c:	bdb0      	pop	{r4, r5, r7, pc}
 801683e:	bf00      	nop
 8016840:	08026a78 	.word	0x08026a78
 8016844:	08026ae4 	.word	0x08026ae4

08016848 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 8016848:	b480      	push	{r7}
 801684a:	b083      	sub	sp, #12
 801684c:	af00      	add	r7, sp, #0
 801684e:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 8016850:	4b03      	ldr	r3, [pc, #12]	; (8016860 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 8016852:	4618      	mov	r0, r3
 8016854:	370c      	adds	r7, #12
 8016856:	46bd      	mov	sp, r7
 8016858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801685c:	4770      	bx	lr
 801685e:	bf00      	nop
 8016860:	08026ae8 	.word	0x08026ae8

08016864 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 8016864:	b480      	push	{r7}
 8016866:	b083      	sub	sp, #12
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 801686c:	4b03      	ldr	r3, [pc, #12]	; (801687c <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 801686e:	4618      	mov	r0, r3
 8016870:	370c      	adds	r7, #12
 8016872:	46bd      	mov	sp, r7
 8016874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016878:	4770      	bx	lr
 801687a:	bf00      	nop
 801687c:	08026c18 	.word	0x08026c18

08016880 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8016880:	b480      	push	{r7}
 8016882:	b083      	sub	sp, #12
 8016884:	af00      	add	r7, sp, #0
 8016886:	6078      	str	r0, [r7, #4]
    return needHelp_;
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	7b1b      	ldrb	r3, [r3, #12]
}
 801688c:	4618      	mov	r0, r3
 801688e:	370c      	adds	r7, #12
 8016890:	46bd      	mov	sp, r7
 8016892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016896:	4770      	bx	lr

08016898 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 8016898:	b480      	push	{r7}
 801689a:	b083      	sub	sp, #12
 801689c:	af00      	add	r7, sp, #0
 801689e:	6078      	str	r0, [r7, #4]
    return verbose_;
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	7b5b      	ldrb	r3, [r3, #13]
}
 80168a4:	4618      	mov	r0, r3
 80168a6:	370c      	adds	r7, #12
 80168a8:	46bd      	mov	sp, r7
 80168aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ae:	4770      	bx	lr

080168b0 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 80168b0:	b480      	push	{r7}
 80168b2:	b083      	sub	sp, #12
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	7b9b      	ldrb	r3, [r3, #14]
}
 80168bc:	4618      	mov	r0, r3
 80168be:	370c      	adds	r7, #12
 80168c0:	46bd      	mov	sp, r7
 80168c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c6:	4770      	bx	lr

080168c8 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 80168c8:	b480      	push	{r7}
 80168ca:	b083      	sub	sp, #12
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
    return color_;
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	7bdb      	ldrb	r3, [r3, #15]
}
 80168d4:	4618      	mov	r0, r3
 80168d6:	370c      	adds	r7, #12
 80168d8:	46bd      	mov	sp, r7
 80168da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168de:	4770      	bx	lr

080168e0 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 80168e0:	b480      	push	{r7}
 80168e2:	b083      	sub	sp, #12
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	7c5b      	ldrb	r3, [r3, #17]
}
 80168ec:	4618      	mov	r0, r3
 80168ee:	370c      	adds	r7, #12
 80168f0:	46bd      	mov	sp, r7
 80168f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f6:	4770      	bx	lr

080168f8 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 80168f8:	b480      	push	{r7}
 80168fa:	b083      	sub	sp, #12
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	7c9b      	ldrb	r3, [r3, #18]
}
 8016904:	4618      	mov	r0, r3
 8016906:	370c      	adds	r7, #12
 8016908:	46bd      	mov	sp, r7
 801690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690e:	4770      	bx	lr

08016910 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 8016910:	b480      	push	{r7}
 8016912:	b083      	sub	sp, #12
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	7cdb      	ldrb	r3, [r3, #19]
}
 801691c:	4618      	mov	r0, r3
 801691e:	370c      	adds	r7, #12
 8016920:	46bd      	mov	sp, r7
 8016922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016926:	4770      	bx	lr

08016928 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 8016928:	b480      	push	{r7}
 801692a:	b083      	sub	sp, #12
 801692c:	af00      	add	r7, sp, #0
 801692e:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	7d1b      	ldrb	r3, [r3, #20]
}
 8016934:	4618      	mov	r0, r3
 8016936:	370c      	adds	r7, #12
 8016938:	46bd      	mov	sp, r7
 801693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801693e:	4770      	bx	lr

08016940 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8016940:	b480      	push	{r7}
 8016942:	b083      	sub	sp, #12
 8016944:	af00      	add	r7, sp, #0
 8016946:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	7c1b      	ldrb	r3, [r3, #16]
}
 801694c:	4618      	mov	r0, r3
 801694e:	370c      	adds	r7, #12
 8016950:	46bd      	mov	sp, r7
 8016952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016956:	4770      	bx	lr

08016958 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8016958:	b480      	push	{r7}
 801695a:	b083      	sub	sp, #12
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
    return repeat_;
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	69db      	ldr	r3, [r3, #28]
}
 8016964:	4618      	mov	r0, r3
 8016966:	370c      	adds	r7, #12
 8016968:	46bd      	mov	sp, r7
 801696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801696e:	4770      	bx	lr

08016970 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8016970:	b480      	push	{r7}
 8016972:	b083      	sub	sp, #12
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]
    return reversing_;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	7d5b      	ldrb	r3, [r3, #21]
}
 801697c:	4618      	mov	r0, r3
 801697e:	370c      	adds	r7, #12
 8016980:	46bd      	mov	sp, r7
 8016982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016986:	4770      	bx	lr

08016988 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8016988:	b480      	push	{r7}
 801698a:	b083      	sub	sp, #12
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	7d9b      	ldrb	r3, [r3, #22]
}
 8016994:	4618      	mov	r0, r3
 8016996:	370c      	adds	r7, #12
 8016998:	46bd      	mov	sp, r7
 801699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801699e:	4770      	bx	lr

080169a0 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 80169a0:	b480      	push	{r7}
 80169a2:	b083      	sub	sp, #12
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	6078      	str	r0, [r7, #4]
    return shuffling_;
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	7ddb      	ldrb	r3, [r3, #23]
}
 80169ac:	4618      	mov	r0, r3
 80169ae:	370c      	adds	r7, #12
 80169b0:	46bd      	mov	sp, r7
 80169b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b6:	4770      	bx	lr

080169b8 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 80169b8:	b480      	push	{r7}
 80169ba:	b083      	sub	sp, #12
 80169bc:	af00      	add	r7, sp, #0
 80169be:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	6a1b      	ldr	r3, [r3, #32]
}
 80169c4:	4618      	mov	r0, r3
 80169c6:	370c      	adds	r7, #12
 80169c8:	46bd      	mov	sp, r7
 80169ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ce:	4770      	bx	lr

080169d0 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 80169d0:	b480      	push	{r7}
 80169d2:	b083      	sub	sp, #12
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80169dc:	4618      	mov	r0, r3
 80169de:	370c      	adds	r7, #12
 80169e0:	46bd      	mov	sp, r7
 80169e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e6:	4770      	bx	lr

080169e8 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 80169e8:	b480      	push	{r7}
 80169ea:	b083      	sub	sp, #12
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80169f4:	4618      	mov	r0, r3
 80169f6:	370c      	adds	r7, #12
 80169f8:	46bd      	mov	sp, r7
 80169fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fe:	4770      	bx	lr

08016a00 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b086      	sub	sp, #24
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	60f8      	str	r0, [r7, #12]
 8016a08:	60b9      	str	r1, [r7, #8]
 8016a0a:	607a      	str	r2, [r7, #4]
 8016a0c:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	2200      	movs	r2, #0
 8016a12:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 8016a14:	683b      	ldr	r3, [r7, #0]
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	009b      	lsls	r3, r3, #2
 8016a1a:	687a      	ldr	r2, [r7, #4]
 8016a1c:	4413      	add	r3, r2
 8016a1e:	681a      	ldr	r2, [r3, #0]
 8016a20:	f107 0310 	add.w	r3, r7, #16
 8016a24:	4611      	mov	r1, r2
 8016a26:	4618      	mov	r0, r3
 8016a28:	f7f7 fa3f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 8016a2c:	f107 0310 	add.w	r3, r7, #16
 8016a30:	4618      	mov	r0, r3
 8016a32:	f7f7 fdd1 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 8016a36:	4603      	mov	r3, r0
 8016a38:	2b02      	cmp	r3, #2
 8016a3a:	bf8c      	ite	hi
 8016a3c:	2301      	movhi	r3, #1
 8016a3e:	2300      	movls	r3, #0
 8016a40:	b2db      	uxtb	r3, r3
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d00e      	beq.n	8016a64 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 8016a46:	683b      	ldr	r3, [r7, #0]
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	009b      	lsls	r3, r3, #2
 8016a4c:	687a      	ldr	r2, [r7, #4]
 8016a4e:	4413      	add	r3, r2
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	3302      	adds	r3, #2
 8016a54:	4618      	mov	r0, r3
 8016a56:	f7f7 f824 	bl	800daa2 <_ZN12SimpleString4AtoIEPKc>
 8016a5a:	4603      	mov	r3, r0
 8016a5c:	461a      	mov	r2, r3
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	61da      	str	r2, [r3, #28]
 8016a62:	e01c      	b.n	8016a9e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 8016a64:	683b      	ldr	r3, [r7, #0]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	3301      	adds	r3, #1
 8016a6a:	68ba      	ldr	r2, [r7, #8]
 8016a6c:	429a      	cmp	r2, r3
 8016a6e:	dd16      	ble.n	8016a9e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 8016a70:	683b      	ldr	r3, [r7, #0]
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	3301      	adds	r3, #1
 8016a76:	009b      	lsls	r3, r3, #2
 8016a78:	687a      	ldr	r2, [r7, #4]
 8016a7a:	4413      	add	r3, r2
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f7f7 f80f 	bl	800daa2 <_ZN12SimpleString4AtoIEPKc>
 8016a84:	4603      	mov	r3, r0
 8016a86:	461a      	mov	r2, r3
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	69db      	ldr	r3, [r3, #28]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d004      	beq.n	8016a9e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 8016a94:	683b      	ldr	r3, [r7, #0]
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	1c5a      	adds	r2, r3, #1
 8016a9a:	683b      	ldr	r3, [r7, #0]
 8016a9c:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	69db      	ldr	r3, [r3, #28]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d102      	bne.n	8016aac <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	2202      	movs	r2, #2
 8016aaa:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 8016aac:	f107 0310 	add.w	r3, r7, #16
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	f7f7 fdb2 	bl	800e61a <_ZN12SimpleStringD1Ev>

}
 8016ab6:	bf00      	nop
 8016ab8:	3718      	adds	r7, #24
 8016aba:	46bd      	mov	sp, r7
 8016abc:	bd80      	pop	{r7, pc}
	...

08016ac0 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 8016ac0:	b590      	push	{r4, r7, lr}
 8016ac2:	b089      	sub	sp, #36	; 0x24
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	60f8      	str	r0, [r7, #12]
 8016ac8:	60b9      	str	r1, [r7, #8]
 8016aca:	607a      	str	r2, [r7, #4]
 8016acc:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	2201      	movs	r2, #1
 8016ad2:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 8016ad4:	4b34      	ldr	r3, [pc, #208]	; (8016ba8 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	4798      	blx	r3
 8016ada:	4603      	mov	r3, r0
 8016adc:	461a      	mov	r2, r3
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	6a1b      	ldr	r3, [r3, #32]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d104      	bne.n	8016af4 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	6a1b      	ldr	r3, [r3, #32]
 8016aee:	1c5a      	adds	r2, r3, #1
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 8016af4:	683b      	ldr	r3, [r7, #0]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	009b      	lsls	r3, r3, #2
 8016afa:	687a      	ldr	r2, [r7, #4]
 8016afc:	4413      	add	r3, r2
 8016afe:	681a      	ldr	r2, [r3, #0]
 8016b00:	f107 0314 	add.w	r3, r7, #20
 8016b04:	4611      	mov	r1, r2
 8016b06:	4618      	mov	r0, r3
 8016b08:	f7f7 f9cf 	bl	800deaa <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 8016b0c:	f107 0314 	add.w	r3, r7, #20
 8016b10:	4618      	mov	r0, r3
 8016b12:	f7f7 fd61 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 8016b16:	4603      	mov	r3, r0
 8016b18:	2b02      	cmp	r3, #2
 8016b1a:	bf8c      	ite	hi
 8016b1c:	2301      	movhi	r3, #1
 8016b1e:	2300      	movls	r3, #0
 8016b20:	b2db      	uxtb	r3, r3
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d010      	beq.n	8016b48 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	2201      	movs	r2, #1
 8016b2a:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 8016b2c:	683b      	ldr	r3, [r7, #0]
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	009b      	lsls	r3, r3, #2
 8016b32:	687a      	ldr	r2, [r7, #4]
 8016b34:	4413      	add	r3, r2
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	3302      	adds	r3, #2
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	f7f6 ff78 	bl	800da30 <_ZN12SimpleString4AtoUEPKc>
 8016b40:	4602      	mov	r2, r0
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	621a      	str	r2, [r3, #32]
 8016b46:	e01e      	b.n	8016b86 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 8016b48:	683b      	ldr	r3, [r7, #0]
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	3301      	adds	r3, #1
 8016b4e:	68ba      	ldr	r2, [r7, #8]
 8016b50:	429a      	cmp	r2, r3
 8016b52:	dd18      	ble.n	8016b86 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 8016b54:	683b      	ldr	r3, [r7, #0]
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	3301      	adds	r3, #1
 8016b5a:	009b      	lsls	r3, r3, #2
 8016b5c:	687a      	ldr	r2, [r7, #4]
 8016b5e:	4413      	add	r3, r2
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	4618      	mov	r0, r3
 8016b64:	f7f6 ff64 	bl	800da30 <_ZN12SimpleString4AtoUEPKc>
 8016b68:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 8016b6a:	69fb      	ldr	r3, [r7, #28]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d00a      	beq.n	8016b86 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	2201      	movs	r2, #1
 8016b74:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	69fa      	ldr	r2, [r7, #28]
 8016b7a:	621a      	str	r2, [r3, #32]
            i++;
 8016b7c:	683b      	ldr	r3, [r7, #0]
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	1c5a      	adds	r2, r3, #1
 8016b82:	683b      	ldr	r3, [r7, #0]
 8016b84:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	6a1b      	ldr	r3, [r3, #32]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	bf14      	ite	ne
 8016b8e:	2301      	movne	r3, #1
 8016b90:	2300      	moveq	r3, #0
 8016b92:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 8016b94:	f107 0314 	add.w	r3, r7, #20
 8016b98:	4618      	mov	r0, r3
 8016b9a:	f7f7 fd3e 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 8016b9e:	4623      	mov	r3, r4
}
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	3724      	adds	r7, #36	; 0x24
 8016ba4:	46bd      	mov	sp, r7
 8016ba6:	bd90      	pop	{r4, r7, pc}
 8016ba8:	200000a8 	.word	0x200000a8

08016bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b088      	sub	sp, #32
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	60f8      	str	r0, [r7, #12]
 8016bb4:	60b9      	str	r1, [r7, #8]
 8016bb6:	607a      	str	r2, [r7, #4]
 8016bb8:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 8016bba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016bbc:	f7f7 fd0c 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 8016bc0:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 8016bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	009b      	lsls	r3, r3, #2
 8016bc8:	683a      	ldr	r2, [r7, #0]
 8016bca:	4413      	add	r3, r2
 8016bcc:	681a      	ldr	r2, [r3, #0]
 8016bce:	f107 0314 	add.w	r3, r7, #20
 8016bd2:	4611      	mov	r1, r2
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	f7f7 f968 	bl	800deaa <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 8016bda:	f107 0314 	add.w	r3, r7, #20
 8016bde:	4618      	mov	r0, r3
 8016be0:	f7f7 fcfa 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 8016be4:	4602      	mov	r2, r0
 8016be6:	69fb      	ldr	r3, [r7, #28]
 8016be8:	4293      	cmp	r3, r2
 8016bea:	bf34      	ite	cc
 8016bec:	2301      	movcc	r3, #1
 8016bee:	2300      	movcs	r3, #0
 8016bf0:	b2db      	uxtb	r3, r3
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d00c      	beq.n	8016c10 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 8016bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	009b      	lsls	r3, r3, #2
 8016bfc:	683a      	ldr	r2, [r7, #0]
 8016bfe:	4413      	add	r3, r2
 8016c00:	681a      	ldr	r2, [r3, #0]
 8016c02:	69fb      	ldr	r3, [r7, #28]
 8016c04:	4413      	add	r3, r2
 8016c06:	4619      	mov	r1, r3
 8016c08:	68f8      	ldr	r0, [r7, #12]
 8016c0a:	f7f7 f94e 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8016c0e:	e019      	b.n	8016c44 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 8016c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	3301      	adds	r3, #1
 8016c16:	687a      	ldr	r2, [r7, #4]
 8016c18:	429a      	cmp	r2, r3
 8016c1a:	dd0f      	ble.n	8016c3c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 8016c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	1c5a      	adds	r2, r3, #1
 8016c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c24:	601a      	str	r2, [r3, #0]
 8016c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	009b      	lsls	r3, r3, #2
 8016c2c:	683a      	ldr	r2, [r7, #0]
 8016c2e:	4413      	add	r3, r2
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	4619      	mov	r1, r3
 8016c34:	68f8      	ldr	r0, [r7, #12]
 8016c36:	f7f7 f938 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8016c3a:	e003      	b.n	8016c44 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 8016c3c:	4906      	ldr	r1, [pc, #24]	; (8016c58 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 8016c3e:	68f8      	ldr	r0, [r7, #12]
 8016c40:	f7f7 f933 	bl	800deaa <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8016c44:	f107 0314 	add.w	r3, r7, #20
 8016c48:	4618      	mov	r0, r3
 8016c4a:	f7f7 fce6 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8016c4e:	68f8      	ldr	r0, [r7, #12]
 8016c50:	3720      	adds	r7, #32
 8016c52:	46bd      	mov	sp, r7
 8016c54:	bd80      	pop	{r7, pc}
 8016c56:	bf00      	nop
 8016c58:	08026a64 	.word	0x08026a64

08016c5c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8016c5c:	b5b0      	push	{r4, r5, r7, lr}
 8016c5e:	b08c      	sub	sp, #48	; 0x30
 8016c60:	af02      	add	r7, sp, #8
 8016c62:	60f8      	str	r0, [r7, #12]
 8016c64:	60b9      	str	r1, [r7, #8]
 8016c66:	607a      	str	r2, [r7, #4]
 8016c68:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 8016c6a:	f107 031c 	add.w	r3, r7, #28
 8016c6e:	491a      	ldr	r1, [pc, #104]	; (8016cd8 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8016c70:	4618      	mov	r0, r3
 8016c72:	f7f7 f91a 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8016c76:	f107 0014 	add.w	r0, r7, #20
 8016c7a:	f107 031c 	add.w	r3, r7, #28
 8016c7e:	9301      	str	r3, [sp, #4]
 8016c80:	683b      	ldr	r3, [r7, #0]
 8016c82:	9300      	str	r3, [sp, #0]
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	68ba      	ldr	r2, [r7, #8]
 8016c88:	68f9      	ldr	r1, [r7, #12]
 8016c8a:	f7ff ff8f 	bl	8016bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016c8e:	f107 0514 	add.w	r5, r7, #20
 8016c92:	f44f 7289 	mov.w	r2, #274	; 0x112
 8016c96:	4911      	ldr	r1, [pc, #68]	; (8016cdc <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8016c98:	2010      	movs	r0, #16
 8016c9a:	f7f4 fd43 	bl	800b724 <_ZnwjPKci>
 8016c9e:	4604      	mov	r4, r0
 8016ca0:	4629      	mov	r1, r5
 8016ca2:	4620      	mov	r0, r4
 8016ca4:	f009 ff3e 	bl	8020b24 <_ZN10TestFilterC1ERK12SimpleString>
 8016ca8:	627c      	str	r4, [r7, #36]	; 0x24
 8016caa:	f107 0314 	add.w	r3, r7, #20
 8016cae:	4618      	mov	r0, r3
 8016cb0:	f7f7 fcb3 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8016cb4:	f107 031c 	add.w	r3, r7, #28
 8016cb8:	4618      	mov	r0, r3
 8016cba:	f7f7 fcae 	bl	800e61a <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cc2:	4619      	mov	r1, r3
 8016cc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016cc6:	f009 ff4d 	bl	8020b64 <_ZN10TestFilter3addEPS_>
 8016cca:	4602      	mov	r2, r0
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016cd0:	bf00      	nop
 8016cd2:	3728      	adds	r7, #40	; 0x28
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8016cd8:	08026a98 	.word	0x08026a98
 8016cdc:	0802742c 	.word	0x0802742c

08016ce0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 8016ce0:	b5b0      	push	{r4, r5, r7, lr}
 8016ce2:	b092      	sub	sp, #72	; 0x48
 8016ce4:	af02      	add	r7, sp, #8
 8016ce6:	60f8      	str	r0, [r7, #12]
 8016ce8:	60b9      	str	r1, [r7, #8]
 8016cea:	607a      	str	r2, [r7, #4]
 8016cec:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8016cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016cf2:	494e      	ldr	r1, [pc, #312]	; (8016e2c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	f7f7 f8d8 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8016cfa:	f107 0020 	add.w	r0, r7, #32
 8016cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016d02:	9301      	str	r3, [sp, #4]
 8016d04:	683b      	ldr	r3, [r7, #0]
 8016d06:	9300      	str	r3, [sp, #0]
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	68ba      	ldr	r2, [r7, #8]
 8016d0c:	68f9      	ldr	r1, [r7, #12]
 8016d0e:	f7ff ff4d 	bl	8016bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016d12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016d16:	4618      	mov	r0, r3
 8016d18:	f7f7 fc7f 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 8016d1c:	f107 0310 	add.w	r3, r7, #16
 8016d20:	4618      	mov	r0, r3
 8016d22:	f7f8 fb8f 	bl	800f444 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 8016d26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016d2a:	4941      	ldr	r1, [pc, #260]	; (8016e30 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	f7f7 f8bc 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8016d32:	f107 0210 	add.w	r2, r7, #16
 8016d36:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8016d3a:	f107 0320 	add.w	r3, r7, #32
 8016d3e:	4618      	mov	r0, r3
 8016d40:	f7f7 fa1f 	bl	800e182 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8016d44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016d48:	4618      	mov	r0, r3
 8016d4a:	f7f7 fc66 	bl	800e61a <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 8016d4e:	f107 0310 	add.w	r3, r7, #16
 8016d52:	4618      	mov	r0, r3
 8016d54:	f7f8 fc1b 	bl	800f58e <_ZNK22SimpleStringCollection4sizeEv>
 8016d58:	4603      	mov	r3, r0
 8016d5a:	2b02      	cmp	r3, #2
 8016d5c:	bf14      	ite	ne
 8016d5e:	2301      	movne	r3, #1
 8016d60:	2300      	moveq	r3, #0
 8016d62:	b2db      	uxtb	r3, r3
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d001      	beq.n	8016d6c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8016d68:	2400      	movs	r4, #0
 8016d6a:	e04f      	b.n	8016e0c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8016d6c:	f107 0310 	add.w	r3, r7, #16
 8016d70:	2100      	movs	r1, #0
 8016d72:	4618      	mov	r0, r3
 8016d74:	f7f8 fc18 	bl	800f5a8 <_ZN22SimpleStringCollectionixEj>
 8016d78:	4604      	mov	r4, r0
 8016d7a:	f107 0310 	add.w	r3, r7, #16
 8016d7e:	2100      	movs	r1, #0
 8016d80:	4618      	mov	r0, r3
 8016d82:	f7f8 fc11 	bl	800f5a8 <_ZN22SimpleStringCollectionixEj>
 8016d86:	4603      	mov	r3, r0
 8016d88:	4618      	mov	r0, r3
 8016d8a:	f7f7 fc25 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 8016d8e:	4603      	mov	r3, r0
 8016d90:	3b01      	subs	r3, #1
 8016d92:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8016d96:	2200      	movs	r2, #0
 8016d98:	4621      	mov	r1, r4
 8016d9a:	f7f7 fd47 	bl	800e82c <_ZNK12SimpleString9subStringEjj>
 8016d9e:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8016da2:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8016da6:	4923      	ldr	r1, [pc, #140]	; (8016e34 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8016da8:	2010      	movs	r0, #16
 8016daa:	f7f4 fcbb 	bl	800b724 <_ZnwjPKci>
 8016dae:	4604      	mov	r4, r0
 8016db0:	4629      	mov	r1, r5
 8016db2:	4620      	mov	r0, r4
 8016db4:	f009 feb6 	bl	8020b24 <_ZN10TestFilterC1ERK12SimpleString>
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dbc:	4619      	mov	r1, r3
 8016dbe:	4620      	mov	r0, r4
 8016dc0:	f009 fed0 	bl	8020b64 <_ZN10TestFilter3addEPS_>
 8016dc4:	4602      	mov	r2, r0
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	625a      	str	r2, [r3, #36]	; 0x24
 8016dca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016dce:	4618      	mov	r0, r3
 8016dd0:	f7f7 fc23 	bl	800e61a <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 8016dd4:	f107 0310 	add.w	r3, r7, #16
 8016dd8:	2101      	movs	r1, #1
 8016dda:	4618      	mov	r0, r3
 8016ddc:	f7f8 fbe4 	bl	800f5a8 <_ZN22SimpleStringCollectionixEj>
 8016de0:	4605      	mov	r5, r0
 8016de2:	f240 121f 	movw	r2, #287	; 0x11f
 8016de6:	4913      	ldr	r1, [pc, #76]	; (8016e34 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8016de8:	2010      	movs	r0, #16
 8016dea:	f7f4 fc9b 	bl	800b724 <_ZnwjPKci>
 8016dee:	4604      	mov	r4, r0
 8016df0:	4629      	mov	r1, r5
 8016df2:	4620      	mov	r0, r4
 8016df4:	f009 fe96 	bl	8020b24 <_ZN10TestFilterC1ERK12SimpleString>
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016dfc:	4619      	mov	r1, r3
 8016dfe:	4620      	mov	r0, r4
 8016e00:	f009 feb0 	bl	8020b64 <_ZN10TestFilter3addEPS_>
 8016e04:	4602      	mov	r2, r0
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8016e0a:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 8016e0c:	f107 0310 	add.w	r3, r7, #16
 8016e10:	4618      	mov	r0, r3
 8016e12:	f7f8 fb8b 	bl	800f52c <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8016e16:	f107 0320 	add.w	r3, r7, #32
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	f7f7 fbfd 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8016e20:	4623      	mov	r3, r4
}
 8016e22:	4618      	mov	r0, r3
 8016e24:	3740      	adds	r7, #64	; 0x40
 8016e26:	46bd      	mov	sp, r7
 8016e28:	bdb0      	pop	{r4, r5, r7, pc}
 8016e2a:	bf00      	nop
 8016e2c:	08026a9c 	.word	0x08026a9c
 8016e30:	0802744c 	.word	0x0802744c
 8016e34:	0802742c 	.word	0x0802742c

08016e38 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8016e38:	b5b0      	push	{r4, r5, r7, lr}
 8016e3a:	b08c      	sub	sp, #48	; 0x30
 8016e3c:	af02      	add	r7, sp, #8
 8016e3e:	60f8      	str	r0, [r7, #12]
 8016e40:	60b9      	str	r1, [r7, #8]
 8016e42:	607a      	str	r2, [r7, #4]
 8016e44:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 8016e46:	f107 031c 	add.w	r3, r7, #28
 8016e4a:	491c      	ldr	r1, [pc, #112]	; (8016ebc <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8016e4c:	4618      	mov	r0, r3
 8016e4e:	f7f7 f82c 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8016e52:	f107 0014 	add.w	r0, r7, #20
 8016e56:	f107 031c 	add.w	r3, r7, #28
 8016e5a:	9301      	str	r3, [sp, #4]
 8016e5c:	683b      	ldr	r3, [r7, #0]
 8016e5e:	9300      	str	r3, [sp, #0]
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	68ba      	ldr	r2, [r7, #8]
 8016e64:	68f9      	ldr	r1, [r7, #12]
 8016e66:	f7ff fea1 	bl	8016bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016e6a:	f107 0514 	add.w	r5, r7, #20
 8016e6e:	f240 1225 	movw	r2, #293	; 0x125
 8016e72:	4913      	ldr	r1, [pc, #76]	; (8016ec0 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8016e74:	2010      	movs	r0, #16
 8016e76:	f7f4 fc55 	bl	800b724 <_ZnwjPKci>
 8016e7a:	4604      	mov	r4, r0
 8016e7c:	4629      	mov	r1, r5
 8016e7e:	4620      	mov	r0, r4
 8016e80:	f009 fe50 	bl	8020b24 <_ZN10TestFilterC1ERK12SimpleString>
 8016e84:	627c      	str	r4, [r7, #36]	; 0x24
 8016e86:	f107 0314 	add.w	r3, r7, #20
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	f7f7 fbc5 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8016e90:	f107 031c 	add.w	r3, r7, #28
 8016e94:	4618      	mov	r0, r3
 8016e96:	f7f7 fbc0 	bl	800e61a <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8016e9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016e9c:	f009 fe7d 	bl	8020b9a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ea4:	4619      	mov	r1, r3
 8016ea6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016ea8:	f009 fe5c 	bl	8020b64 <_ZN10TestFilter3addEPS_>
 8016eac:	4602      	mov	r2, r0
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016eb2:	bf00      	nop
 8016eb4:	3728      	adds	r7, #40	; 0x28
 8016eb6:	46bd      	mov	sp, r7
 8016eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8016eba:	bf00      	nop
 8016ebc:	08026aa0 	.word	0x08026aa0
 8016ec0:	0802742c 	.word	0x0802742c

08016ec4 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 8016ec4:	b5b0      	push	{r4, r5, r7, lr}
 8016ec6:	b08c      	sub	sp, #48	; 0x30
 8016ec8:	af02      	add	r7, sp, #8
 8016eca:	60f8      	str	r0, [r7, #12]
 8016ecc:	60b9      	str	r1, [r7, #8]
 8016ece:	607a      	str	r2, [r7, #4]
 8016ed0:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 8016ed2:	f107 031c 	add.w	r3, r7, #28
 8016ed6:	491c      	ldr	r1, [pc, #112]	; (8016f48 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 8016ed8:	4618      	mov	r0, r3
 8016eda:	f7f6 ffe6 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8016ede:	f107 0014 	add.w	r0, r7, #20
 8016ee2:	f107 031c 	add.w	r3, r7, #28
 8016ee6:	9301      	str	r3, [sp, #4]
 8016ee8:	683b      	ldr	r3, [r7, #0]
 8016eea:	9300      	str	r3, [sp, #0]
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	68ba      	ldr	r2, [r7, #8]
 8016ef0:	68f9      	ldr	r1, [r7, #12]
 8016ef2:	f7ff fe5b 	bl	8016bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016ef6:	f107 0514 	add.w	r5, r7, #20
 8016efa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8016efe:	4913      	ldr	r1, [pc, #76]	; (8016f4c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 8016f00:	2010      	movs	r0, #16
 8016f02:	f7f4 fc0f 	bl	800b724 <_ZnwjPKci>
 8016f06:	4604      	mov	r4, r0
 8016f08:	4629      	mov	r1, r5
 8016f0a:	4620      	mov	r0, r4
 8016f0c:	f009 fe0a 	bl	8020b24 <_ZN10TestFilterC1ERK12SimpleString>
 8016f10:	627c      	str	r4, [r7, #36]	; 0x24
 8016f12:	f107 0314 	add.w	r3, r7, #20
 8016f16:	4618      	mov	r0, r3
 8016f18:	f7f7 fb7f 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8016f1c:	f107 031c 	add.w	r3, r7, #28
 8016f20:	4618      	mov	r0, r3
 8016f22:	f7f7 fb7a 	bl	800e61a <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 8016f26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f28:	f009 fe44 	bl	8020bb4 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f30:	4619      	mov	r1, r3
 8016f32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f34:	f009 fe16 	bl	8020b64 <_ZN10TestFilter3addEPS_>
 8016f38:	4602      	mov	r2, r0
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016f3e:	bf00      	nop
 8016f40:	3728      	adds	r7, #40	; 0x28
 8016f42:	46bd      	mov	sp, r7
 8016f44:	bdb0      	pop	{r4, r5, r7, pc}
 8016f46:	bf00      	nop
 8016f48:	08026aa4 	.word	0x08026aa4
 8016f4c:	0802742c 	.word	0x0802742c

08016f50 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8016f50:	b5b0      	push	{r4, r5, r7, lr}
 8016f52:	b08c      	sub	sp, #48	; 0x30
 8016f54:	af02      	add	r7, sp, #8
 8016f56:	60f8      	str	r0, [r7, #12]
 8016f58:	60b9      	str	r1, [r7, #8]
 8016f5a:	607a      	str	r2, [r7, #4]
 8016f5c:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 8016f5e:	f107 031c 	add.w	r3, r7, #28
 8016f62:	491d      	ldr	r1, [pc, #116]	; (8016fd8 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8016f64:	4618      	mov	r0, r3
 8016f66:	f7f6 ffa0 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8016f6a:	f107 0014 	add.w	r0, r7, #20
 8016f6e:	f107 031c 	add.w	r3, r7, #28
 8016f72:	9301      	str	r3, [sp, #4]
 8016f74:	683b      	ldr	r3, [r7, #0]
 8016f76:	9300      	str	r3, [sp, #0]
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	68ba      	ldr	r2, [r7, #8]
 8016f7c:	68f9      	ldr	r1, [r7, #12]
 8016f7e:	f7ff fe15 	bl	8016bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016f82:	f107 0514 	add.w	r5, r7, #20
 8016f86:	f240 1233 	movw	r2, #307	; 0x133
 8016f8a:	4914      	ldr	r1, [pc, #80]	; (8016fdc <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8016f8c:	2010      	movs	r0, #16
 8016f8e:	f7f4 fbc9 	bl	800b724 <_ZnwjPKci>
 8016f92:	4604      	mov	r4, r0
 8016f94:	4629      	mov	r1, r5
 8016f96:	4620      	mov	r0, r4
 8016f98:	f009 fdc4 	bl	8020b24 <_ZN10TestFilterC1ERK12SimpleString>
 8016f9c:	627c      	str	r4, [r7, #36]	; 0x24
 8016f9e:	f107 0314 	add.w	r3, r7, #20
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	f7f7 fb39 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8016fa8:	f107 031c 	add.w	r3, r7, #28
 8016fac:	4618      	mov	r0, r3
 8016fae:	f7f7 fb34 	bl	800e61a <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8016fb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016fb4:	f009 fdf1 	bl	8020b9a <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 8016fb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016fba:	f009 fdfb 	bl	8020bb4 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fc2:	4619      	mov	r1, r3
 8016fc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016fc6:	f009 fdcd 	bl	8020b64 <_ZN10TestFilter3addEPS_>
 8016fca:	4602      	mov	r2, r0
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016fd0:	bf00      	nop
 8016fd2:	3728      	adds	r7, #40	; 0x28
 8016fd4:	46bd      	mov	sp, r7
 8016fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8016fd8:	08026aa8 	.word	0x08026aa8
 8016fdc:	0802742c 	.word	0x0802742c

08016fe0 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 8016fe0:	b5b0      	push	{r4, r5, r7, lr}
 8016fe2:	b08c      	sub	sp, #48	; 0x30
 8016fe4:	af02      	add	r7, sp, #8
 8016fe6:	60f8      	str	r0, [r7, #12]
 8016fe8:	60b9      	str	r1, [r7, #8]
 8016fea:	607a      	str	r2, [r7, #4]
 8016fec:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 8016fee:	f107 031c 	add.w	r3, r7, #28
 8016ff2:	491a      	ldr	r1, [pc, #104]	; (801705c <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	f7f6 ff58 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8016ffa:	f107 0014 	add.w	r0, r7, #20
 8016ffe:	f107 031c 	add.w	r3, r7, #28
 8017002:	9301      	str	r3, [sp, #4]
 8017004:	683b      	ldr	r3, [r7, #0]
 8017006:	9300      	str	r3, [sp, #0]
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	68ba      	ldr	r2, [r7, #8]
 801700c:	68f9      	ldr	r1, [r7, #12]
 801700e:	f7ff fdcd 	bl	8016bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8017012:	f107 0514 	add.w	r5, r7, #20
 8017016:	f240 123b 	movw	r2, #315	; 0x13b
 801701a:	4911      	ldr	r1, [pc, #68]	; (8017060 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 801701c:	2010      	movs	r0, #16
 801701e:	f7f4 fb81 	bl	800b724 <_ZnwjPKci>
 8017022:	4604      	mov	r4, r0
 8017024:	4629      	mov	r1, r5
 8017026:	4620      	mov	r0, r4
 8017028:	f009 fd7c 	bl	8020b24 <_ZN10TestFilterC1ERK12SimpleString>
 801702c:	627c      	str	r4, [r7, #36]	; 0x24
 801702e:	f107 0314 	add.w	r3, r7, #20
 8017032:	4618      	mov	r0, r3
 8017034:	f7f7 faf1 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8017038:	f107 031c 	add.w	r3, r7, #28
 801703c:	4618      	mov	r0, r3
 801703e:	f7f7 faec 	bl	800e61a <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017046:	4619      	mov	r1, r3
 8017048:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801704a:	f009 fd8b 	bl	8020b64 <_ZN10TestFilter3addEPS_>
 801704e:	4602      	mov	r2, r0
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	629a      	str	r2, [r3, #40]	; 0x28
}
 8017054:	bf00      	nop
 8017056:	3728      	adds	r7, #40	; 0x28
 8017058:	46bd      	mov	sp, r7
 801705a:	bdb0      	pop	{r4, r5, r7, pc}
 801705c:	08026ab0 	.word	0x08026ab0
 8017060:	0802742c 	.word	0x0802742c

08017064 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8017064:	b5b0      	push	{r4, r5, r7, lr}
 8017066:	b08c      	sub	sp, #48	; 0x30
 8017068:	af02      	add	r7, sp, #8
 801706a:	60f8      	str	r0, [r7, #12]
 801706c:	60b9      	str	r1, [r7, #8]
 801706e:	607a      	str	r2, [r7, #4]
 8017070:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8017072:	f107 031c 	add.w	r3, r7, #28
 8017076:	491c      	ldr	r1, [pc, #112]	; (80170e8 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8017078:	4618      	mov	r0, r3
 801707a:	f7f6 ff16 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801707e:	f107 0014 	add.w	r0, r7, #20
 8017082:	f107 031c 	add.w	r3, r7, #28
 8017086:	9301      	str	r3, [sp, #4]
 8017088:	683b      	ldr	r3, [r7, #0]
 801708a:	9300      	str	r3, [sp, #0]
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	68ba      	ldr	r2, [r7, #8]
 8017090:	68f9      	ldr	r1, [r7, #12]
 8017092:	f7ff fd8b 	bl	8016bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8017096:	f107 0514 	add.w	r5, r7, #20
 801709a:	f240 1241 	movw	r2, #321	; 0x141
 801709e:	4913      	ldr	r1, [pc, #76]	; (80170ec <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 80170a0:	2010      	movs	r0, #16
 80170a2:	f7f4 fb3f 	bl	800b724 <_ZnwjPKci>
 80170a6:	4604      	mov	r4, r0
 80170a8:	4629      	mov	r1, r5
 80170aa:	4620      	mov	r0, r4
 80170ac:	f009 fd3a 	bl	8020b24 <_ZN10TestFilterC1ERK12SimpleString>
 80170b0:	627c      	str	r4, [r7, #36]	; 0x24
 80170b2:	f107 0314 	add.w	r3, r7, #20
 80170b6:	4618      	mov	r0, r3
 80170b8:	f7f7 faaf 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80170bc:	f107 031c 	add.w	r3, r7, #28
 80170c0:	4618      	mov	r0, r3
 80170c2:	f7f7 faaa 	bl	800e61a <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 80170c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80170c8:	f009 fd67 	bl	8020b9a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80170d0:	4619      	mov	r1, r3
 80170d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80170d4:	f009 fd46 	bl	8020b64 <_ZN10TestFilter3addEPS_>
 80170d8:	4602      	mov	r2, r0
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80170de:	bf00      	nop
 80170e0:	3728      	adds	r7, #40	; 0x28
 80170e2:	46bd      	mov	sp, r7
 80170e4:	bdb0      	pop	{r4, r5, r7, pc}
 80170e6:	bf00      	nop
 80170e8:	08026ab4 	.word	0x08026ab4
 80170ec:	0802742c 	.word	0x0802742c

080170f0 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 80170f0:	b5b0      	push	{r4, r5, r7, lr}
 80170f2:	b08c      	sub	sp, #48	; 0x30
 80170f4:	af02      	add	r7, sp, #8
 80170f6:	60f8      	str	r0, [r7, #12]
 80170f8:	60b9      	str	r1, [r7, #8]
 80170fa:	607a      	str	r2, [r7, #4]
 80170fc:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 80170fe:	f107 031c 	add.w	r3, r7, #28
 8017102:	491c      	ldr	r1, [pc, #112]	; (8017174 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 8017104:	4618      	mov	r0, r3
 8017106:	f7f6 fed0 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801710a:	f107 0014 	add.w	r0, r7, #20
 801710e:	f107 031c 	add.w	r3, r7, #28
 8017112:	9301      	str	r3, [sp, #4]
 8017114:	683b      	ldr	r3, [r7, #0]
 8017116:	9300      	str	r3, [sp, #0]
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	68ba      	ldr	r2, [r7, #8]
 801711c:	68f9      	ldr	r1, [r7, #12]
 801711e:	f7ff fd45 	bl	8016bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8017122:	f107 0514 	add.w	r5, r7, #20
 8017126:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801712a:	4913      	ldr	r1, [pc, #76]	; (8017178 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 801712c:	2010      	movs	r0, #16
 801712e:	f7f4 faf9 	bl	800b724 <_ZnwjPKci>
 8017132:	4604      	mov	r4, r0
 8017134:	4629      	mov	r1, r5
 8017136:	4620      	mov	r0, r4
 8017138:	f009 fcf4 	bl	8020b24 <_ZN10TestFilterC1ERK12SimpleString>
 801713c:	627c      	str	r4, [r7, #36]	; 0x24
 801713e:	f107 0314 	add.w	r3, r7, #20
 8017142:	4618      	mov	r0, r3
 8017144:	f7f7 fa69 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8017148:	f107 031c 	add.w	r3, r7, #28
 801714c:	4618      	mov	r0, r3
 801714e:	f7f7 fa64 	bl	800e61a <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8017152:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017154:	f009 fd2e 	bl	8020bb4 <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801715c:	4619      	mov	r1, r3
 801715e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017160:	f009 fd00 	bl	8020b64 <_ZN10TestFilter3addEPS_>
 8017164:	4602      	mov	r2, r0
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	629a      	str	r2, [r3, #40]	; 0x28
}
 801716a:	bf00      	nop
 801716c:	3728      	adds	r7, #40	; 0x28
 801716e:	46bd      	mov	sp, r7
 8017170:	bdb0      	pop	{r4, r5, r7, pc}
 8017172:	bf00      	nop
 8017174:	08026ab8 	.word	0x08026ab8
 8017178:	0802742c 	.word	0x0802742c

0801717c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 801717c:	b5b0      	push	{r4, r5, r7, lr}
 801717e:	b08c      	sub	sp, #48	; 0x30
 8017180:	af02      	add	r7, sp, #8
 8017182:	60f8      	str	r0, [r7, #12]
 8017184:	60b9      	str	r1, [r7, #8]
 8017186:	607a      	str	r2, [r7, #4]
 8017188:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 801718a:	f107 031c 	add.w	r3, r7, #28
 801718e:	491d      	ldr	r1, [pc, #116]	; (8017204 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8017190:	4618      	mov	r0, r3
 8017192:	f7f6 fe8a 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8017196:	f107 0014 	add.w	r0, r7, #20
 801719a:	f107 031c 	add.w	r3, r7, #28
 801719e:	9301      	str	r3, [sp, #4]
 80171a0:	683b      	ldr	r3, [r7, #0]
 80171a2:	9300      	str	r3, [sp, #0]
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	68ba      	ldr	r2, [r7, #8]
 80171a8:	68f9      	ldr	r1, [r7, #12]
 80171aa:	f7ff fcff 	bl	8016bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80171ae:	f107 0514 	add.w	r5, r7, #20
 80171b2:	f240 124f 	movw	r2, #335	; 0x14f
 80171b6:	4914      	ldr	r1, [pc, #80]	; (8017208 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 80171b8:	2010      	movs	r0, #16
 80171ba:	f7f4 fab3 	bl	800b724 <_ZnwjPKci>
 80171be:	4604      	mov	r4, r0
 80171c0:	4629      	mov	r1, r5
 80171c2:	4620      	mov	r0, r4
 80171c4:	f009 fcae 	bl	8020b24 <_ZN10TestFilterC1ERK12SimpleString>
 80171c8:	627c      	str	r4, [r7, #36]	; 0x24
 80171ca:	f107 0314 	add.w	r3, r7, #20
 80171ce:	4618      	mov	r0, r3
 80171d0:	f7f7 fa23 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80171d4:	f107 031c 	add.w	r3, r7, #28
 80171d8:	4618      	mov	r0, r3
 80171da:	f7f7 fa1e 	bl	800e61a <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 80171de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80171e0:	f009 fce8 	bl	8020bb4 <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 80171e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80171e6:	f009 fcd8 	bl	8020b9a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80171ee:	4619      	mov	r1, r3
 80171f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80171f2:	f009 fcb7 	bl	8020b64 <_ZN10TestFilter3addEPS_>
 80171f6:	4602      	mov	r2, r0
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80171fc:	bf00      	nop
 80171fe:	3728      	adds	r7, #40	; 0x28
 8017200:	46bd      	mov	sp, r7
 8017202:	bdb0      	pop	{r4, r5, r7, pc}
 8017204:	08026abc 	.word	0x08026abc
 8017208:	0802742c 	.word	0x0802742c

0801720c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 801720c:	b5b0      	push	{r4, r5, r7, lr}
 801720e:	b092      	sub	sp, #72	; 0x48
 8017210:	af02      	add	r7, sp, #8
 8017212:	60f8      	str	r0, [r7, #12]
 8017214:	60b9      	str	r1, [r7, #8]
 8017216:	607a      	str	r2, [r7, #4]
 8017218:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 801721a:	f107 0320 	add.w	r3, r7, #32
 801721e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017220:	4618      	mov	r0, r3
 8017222:	f7f6 fe42 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8017226:	f107 0018 	add.w	r0, r7, #24
 801722a:	f107 0320 	add.w	r3, r7, #32
 801722e:	9301      	str	r3, [sp, #4]
 8017230:	683b      	ldr	r3, [r7, #0]
 8017232:	9300      	str	r3, [sp, #0]
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	68ba      	ldr	r2, [r7, #8]
 8017238:	68f9      	ldr	r1, [r7, #12]
 801723a:	f7ff fcb7 	bl	8016bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801723e:	f107 0320 	add.w	r3, r7, #32
 8017242:	4618      	mov	r0, r3
 8017244:	f7f7 f9e9 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8017248:	f107 0010 	add.w	r0, r7, #16
 801724c:	f107 0118 	add.w	r1, r7, #24
 8017250:	2329      	movs	r3, #41	; 0x29
 8017252:	222c      	movs	r2, #44	; 0x2c
 8017254:	f7f7 fb92 	bl	800e97c <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 8017258:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801725c:	f107 0110 	add.w	r1, r7, #16
 8017260:	2202      	movs	r2, #2
 8017262:	4618      	mov	r0, r3
 8017264:	f7f7 fb2c 	bl	800e8c0 <_ZNK12SimpleString9subStringEj>
 8017268:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801726c:	f107 0310 	add.w	r3, r7, #16
 8017270:	4611      	mov	r1, r2
 8017272:	4618      	mov	r0, r3
 8017274:	f7f6 fe85 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 8017278:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801727c:	4618      	mov	r0, r3
 801727e:	f7f7 f9cc 	bl	800e61a <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8017282:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8017286:	492a      	ldr	r1, [pc, #168]	; (8017330 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8017288:	2010      	movs	r0, #16
 801728a:	f7f4 fa4b 	bl	800b724 <_ZnwjPKci>
 801728e:	4604      	mov	r4, r0
 8017290:	f107 0310 	add.w	r3, r7, #16
 8017294:	4619      	mov	r1, r3
 8017296:	4620      	mov	r0, r4
 8017298:	f009 fc44 	bl	8020b24 <_ZN10TestFilterC1ERK12SimpleString>
 801729c:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 801729e:	f107 0318 	add.w	r3, r7, #24
 80172a2:	2100      	movs	r1, #0
 80172a4:	4618      	mov	r0, r3
 80172a6:	f7f7 fb1c 	bl	800e8e2 <_ZNK12SimpleString2atEj>
 80172aa:	4603      	mov	r3, r0
 80172ac:	461a      	mov	r2, r3
 80172ae:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80172b2:	f107 0118 	add.w	r1, r7, #24
 80172b6:	232c      	movs	r3, #44	; 0x2c
 80172b8:	f7f7 fb60 	bl	800e97c <_ZNK12SimpleString17subStringFromTillEcc>
 80172bc:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80172c0:	f240 125b 	movw	r2, #347	; 0x15b
 80172c4:	491a      	ldr	r1, [pc, #104]	; (8017330 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 80172c6:	2010      	movs	r0, #16
 80172c8:	f7f4 fa2c 	bl	800b724 <_ZnwjPKci>
 80172cc:	4604      	mov	r4, r0
 80172ce:	4629      	mov	r1, r5
 80172d0:	4620      	mov	r0, r4
 80172d2:	f009 fc27 	bl	8020b24 <_ZN10TestFilterC1ERK12SimpleString>
 80172d6:	63bc      	str	r4, [r7, #56]	; 0x38
 80172d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80172dc:	4618      	mov	r0, r3
 80172de:	f7f7 f99c 	bl	800e61a <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 80172e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80172e4:	f009 fc59 	bl	8020b9a <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 80172e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80172ea:	f009 fc56 	bl	8020b9a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172f2:	4619      	mov	r1, r3
 80172f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80172f6:	f009 fc35 	bl	8020b64 <_ZN10TestFilter3addEPS_>
 80172fa:	4602      	mov	r2, r0
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017304:	4619      	mov	r1, r3
 8017306:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017308:	f009 fc2c 	bl	8020b64 <_ZN10TestFilter3addEPS_>
 801730c:	4602      	mov	r2, r0
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8017312:	f107 0310 	add.w	r3, r7, #16
 8017316:	4618      	mov	r0, r3
 8017318:	f7f7 f97f 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 801731c:	f107 0318 	add.w	r3, r7, #24
 8017320:	4618      	mov	r0, r3
 8017322:	f7f7 f97a 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8017326:	bf00      	nop
 8017328:	3740      	adds	r7, #64	; 0x40
 801732a:	46bd      	mov	sp, r7
 801732c:	bdb0      	pop	{r4, r5, r7, pc}
 801732e:	bf00      	nop
 8017330:	0802742c 	.word	0x0802742c

08017334 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8017334:	b590      	push	{r4, r7, lr}
 8017336:	b08b      	sub	sp, #44	; 0x2c
 8017338:	af02      	add	r7, sp, #8
 801733a:	60f8      	str	r0, [r7, #12]
 801733c:	60b9      	str	r1, [r7, #8]
 801733e:	607a      	str	r2, [r7, #4]
 8017340:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8017342:	f107 0318 	add.w	r3, r7, #24
 8017346:	491b      	ldr	r1, [pc, #108]	; (80173b4 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 8017348:	4618      	mov	r0, r3
 801734a:	f7f6 fdae 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801734e:	f107 0010 	add.w	r0, r7, #16
 8017352:	f107 0318 	add.w	r3, r7, #24
 8017356:	9301      	str	r3, [sp, #4]
 8017358:	683b      	ldr	r3, [r7, #0]
 801735a:	9300      	str	r3, [sp, #0]
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	68ba      	ldr	r2, [r7, #8]
 8017360:	68f9      	ldr	r1, [r7, #12]
 8017362:	f7ff fc23 	bl	8016bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8017366:	f107 0318 	add.w	r3, r7, #24
 801736a:	4618      	mov	r0, r3
 801736c:	f7f7 f955 	bl	800e61a <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8017370:	f107 0310 	add.w	r3, r7, #16
 8017374:	4618      	mov	r0, r3
 8017376:	f7f7 f92f 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 801737a:	4603      	mov	r3, r0
 801737c:	2b00      	cmp	r3, #0
 801737e:	bf0c      	ite	eq
 8017380:	2301      	moveq	r3, #1
 8017382:	2300      	movne	r3, #0
 8017384:	b2db      	uxtb	r3, r3
 8017386:	2b00      	cmp	r3, #0
 8017388:	d001      	beq.n	801738e <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 801738a:	2400      	movs	r4, #0
 801738c:	e008      	b.n	80173a0 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	3330      	adds	r3, #48	; 0x30
 8017392:	f107 0210 	add.w	r2, r7, #16
 8017396:	4611      	mov	r1, r2
 8017398:	4618      	mov	r0, r3
 801739a:	f7f6 fdf2 	bl	800df82 <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 801739e:	2401      	movs	r4, #1
 80173a0:	f107 0310 	add.w	r3, r7, #16
 80173a4:	4618      	mov	r0, r3
 80173a6:	f7f7 f938 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80173aa:	2c01      	cmp	r4, #1
}
 80173ac:	3724      	adds	r7, #36	; 0x24
 80173ae:	46bd      	mov	sp, r7
 80173b0:	bd90      	pop	{r4, r7, pc}
 80173b2:	bf00      	nop
 80173b4:	08026ae4 	.word	0x08026ae4

080173b8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 80173b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173ba:	b093      	sub	sp, #76	; 0x4c
 80173bc:	af02      	add	r7, sp, #8
 80173be:	60f8      	str	r0, [r7, #12]
 80173c0:	60b9      	str	r1, [r7, #8]
 80173c2:	607a      	str	r2, [r7, #4]
 80173c4:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 80173c6:	f107 0318 	add.w	r3, r7, #24
 80173ca:	4953      	ldr	r1, [pc, #332]	; (8017518 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 80173cc:	4618      	mov	r0, r3
 80173ce:	f7f6 fd6c 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80173d2:	f107 0010 	add.w	r0, r7, #16
 80173d6:	f107 0318 	add.w	r3, r7, #24
 80173da:	9301      	str	r3, [sp, #4]
 80173dc:	683b      	ldr	r3, [r7, #0]
 80173de:	9300      	str	r3, [sp, #0]
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	68ba      	ldr	r2, [r7, #8]
 80173e4:	68f9      	ldr	r1, [r7, #12]
 80173e6:	f7ff fbe1 	bl	8016bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80173ea:	f107 0318 	add.w	r3, r7, #24
 80173ee:	4618      	mov	r0, r3
 80173f0:	f7f7 f913 	bl	800e61a <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 80173f4:	f107 0310 	add.w	r3, r7, #16
 80173f8:	4618      	mov	r0, r3
 80173fa:	f7f7 f8ed 	bl	800e5d8 <_ZNK12SimpleString4sizeEv>
 80173fe:	4603      	mov	r3, r0
 8017400:	2b00      	cmp	r3, #0
 8017402:	bf0c      	ite	eq
 8017404:	2301      	moveq	r3, #1
 8017406:	2300      	movne	r3, #0
 8017408:	b2db      	uxtb	r3, r3
 801740a:	2b00      	cmp	r3, #0
 801740c:	d001      	beq.n	8017412 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 801740e:	2400      	movs	r4, #0
 8017410:	e078      	b.n	8017504 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 8017412:	2500      	movs	r5, #0
 8017414:	f107 0320 	add.w	r3, r7, #32
 8017418:	4940      	ldr	r1, [pc, #256]	; (801751c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 801741a:	4618      	mov	r0, r3
 801741c:	f7f6 fd45 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8017420:	2601      	movs	r6, #1
 8017422:	f107 0220 	add.w	r2, r7, #32
 8017426:	f107 0310 	add.w	r3, r7, #16
 801742a:	4611      	mov	r1, r2
 801742c:	4618      	mov	r0, r3
 801742e:	f7f7 f900 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 8017432:	4603      	mov	r3, r0
 8017434:	2b00      	cmp	r3, #0
 8017436:	d111      	bne.n	801745c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8017438:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801743c:	4938      	ldr	r1, [pc, #224]	; (8017520 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 801743e:	4618      	mov	r0, r3
 8017440:	f7f6 fd33 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8017444:	2501      	movs	r5, #1
 8017446:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801744a:	f107 0310 	add.w	r3, r7, #16
 801744e:	4611      	mov	r1, r2
 8017450:	4618      	mov	r0, r3
 8017452:	f7f7 f8ee 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 8017456:	4603      	mov	r3, r0
 8017458:	2b00      	cmp	r3, #0
 801745a:	d001      	beq.n	8017460 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 801745c:	2401      	movs	r4, #1
 801745e:	e000      	b.n	8017462 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8017460:	2400      	movs	r4, #0
 8017462:	2d00      	cmp	r5, #0
 8017464:	d004      	beq.n	8017470 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 8017466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801746a:	4618      	mov	r0, r3
 801746c:	f7f7 f8d5 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8017470:	2e00      	cmp	r6, #0
 8017472:	d004      	beq.n	801747e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8017474:	f107 0320 	add.w	r3, r7, #32
 8017478:	4618      	mov	r0, r3
 801747a:	f7f7 f8ce 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801747e:	2c00      	cmp	r4, #0
 8017480:	d005      	beq.n	801748e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	2200      	movs	r2, #0
 8017486:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 801748a:	2401      	movs	r4, #1
 801748c:	e03a      	b.n	8017504 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 801748e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017492:	4924      	ldr	r1, [pc, #144]	; (8017524 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8017494:	4618      	mov	r0, r3
 8017496:	f7f6 fd08 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801749a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801749e:	f107 0310 	add.w	r3, r7, #16
 80174a2:	4611      	mov	r1, r2
 80174a4:	4618      	mov	r0, r3
 80174a6:	f7f7 f8c4 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 80174aa:	4603      	mov	r3, r0
 80174ac:	461c      	mov	r4, r3
 80174ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80174b2:	4618      	mov	r0, r3
 80174b4:	f7f7 f8b1 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80174b8:	2c00      	cmp	r4, #0
 80174ba:	d005      	beq.n	80174c8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	2201      	movs	r2, #1
 80174c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 80174c4:	2401      	movs	r4, #1
 80174c6:	e01d      	b.n	8017504 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 80174c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80174cc:	4916      	ldr	r1, [pc, #88]	; (8017528 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 80174ce:	4618      	mov	r0, r3
 80174d0:	f7f6 fceb 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80174d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80174d8:	f107 0310 	add.w	r3, r7, #16
 80174dc:	4611      	mov	r1, r2
 80174de:	4618      	mov	r0, r3
 80174e0:	f7f7 f8a7 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 80174e4:	4603      	mov	r3, r0
 80174e6:	461c      	mov	r4, r3
 80174e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80174ec:	4618      	mov	r0, r3
 80174ee:	f7f7 f894 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80174f2:	2c00      	cmp	r4, #0
 80174f4:	d005      	beq.n	8017502 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	2202      	movs	r2, #2
 80174fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 80174fe:	2401      	movs	r4, #1
 8017500:	e000      	b.n	8017504 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8017502:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8017504:	f107 0310 	add.w	r3, r7, #16
 8017508:	4618      	mov	r0, r3
 801750a:	f7f7 f886 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801750e:	4623      	mov	r3, r4
}
 8017510:	4618      	mov	r0, r3
 8017512:	3744      	adds	r7, #68	; 0x44
 8017514:	46bd      	mov	sp, r7
 8017516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017518:	08026ae0 	.word	0x08026ae0
 801751c:	08027450 	.word	0x08027450
 8017520:	08027458 	.word	0x08027458
 8017524:	08027460 	.word	0x08027460
 8017528:	08027468 	.word	0x08027468

0801752c <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 801752c:	b480      	push	{r7}
 801752e:	b083      	sub	sp, #12
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801753a:	2b01      	cmp	r3, #1
 801753c:	bf0c      	ite	eq
 801753e:	2301      	moveq	r3, #1
 8017540:	2300      	movne	r3, #0
 8017542:	b2db      	uxtb	r3, r3
}
 8017544:	4618      	mov	r0, r3
 8017546:	370c      	adds	r7, #12
 8017548:	46bd      	mov	sp, r7
 801754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801754e:	4770      	bx	lr

08017550 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8017550:	b480      	push	{r7}
 8017552:	b083      	sub	sp, #12
 8017554:	af00      	add	r7, sp, #0
 8017556:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801755e:	2b02      	cmp	r3, #2
 8017560:	bf0c      	ite	eq
 8017562:	2301      	moveq	r3, #1
 8017564:	2300      	movne	r3, #0
 8017566:	b2db      	uxtb	r3, r3
}
 8017568:	4618      	mov	r0, r3
 801756a:	370c      	adds	r7, #12
 801756c:	46bd      	mov	sp, r7
 801756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017572:	4770      	bx	lr

08017574 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8017574:	b480      	push	{r7}
 8017576:	b083      	sub	sp, #12
 8017578:	af00      	add	r7, sp, #0
 801757a:	6078      	str	r0, [r7, #4]
    return packageName_;
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	3330      	adds	r3, #48	; 0x30
}
 8017580:	4618      	mov	r0, r3
 8017582:	370c      	adds	r7, #12
 8017584:	46bd      	mov	sp, r7
 8017586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801758a:	4770      	bx	lr

0801758c <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 801758c:	b480      	push	{r7}
 801758e:	b083      	sub	sp, #12
 8017590:	af00      	add	r7, sp, #0
 8017592:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	2200      	movs	r2, #0
 8017598:	601a      	str	r2, [r3, #0]
    {}
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	4618      	mov	r0, r3
 801759e:	370c      	adds	r7, #12
 80175a0:	46bd      	mov	sp, r7
 80175a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a6:	4770      	bx	lr

080175a8 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 80175a8:	b480      	push	{r7}
 80175aa:	b083      	sub	sp, #12
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80175b6:	2200      	movs	r2, #0
 80175b8:	601a      	str	r2, [r3, #0]
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80175c0:	3304      	adds	r3, #4
 80175c2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80175c6:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	2200      	movs	r2, #0
 80175cc:	701a      	strb	r2, [r3, #0]
}
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	4618      	mov	r0, r3
 80175d2:	370c      	adds	r7, #12
 80175d4:	46bd      	mov	sp, r7
 80175d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175da:	4770      	bx	lr

080175dc <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 80175dc:	b480      	push	{r7}
 80175de:	b083      	sub	sp, #12
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80175ea:	2200      	movs	r2, #0
 80175ec:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	2200      	movs	r2, #0
 80175f2:	701a      	strb	r2, [r3, #0]
}
 80175f4:	bf00      	nop
 80175f6:	370c      	adds	r7, #12
 80175f8:	46bd      	mov	sp, r7
 80175fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175fe:	4770      	bx	lr

08017600 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8017600:	b40e      	push	{r1, r2, r3}
 8017602:	b590      	push	{r4, r7, lr}
 8017604:	b086      	sub	sp, #24
 8017606:	af00      	add	r7, sp, #0
 8017608:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017610:	3304      	adds	r3, #4
 8017612:	681a      	ldr	r2, [r3, #0]
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	1ad3      	subs	r3, r2, r3
 801761e:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8017620:	697b      	ldr	r3, [r7, #20]
 8017622:	2b00      	cmp	r3, #0
 8017624:	d032      	beq.n	801768c <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8017626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801762a:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 801762c:	4b1b      	ldr	r3, [pc, #108]	; (801769c <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 801762e:	681c      	ldr	r4, [r3, #0]
 8017630:	687a      	ldr	r2, [r7, #4]
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	18d0      	adds	r0, r2, r3
 801763c:	697b      	ldr	r3, [r7, #20]
 801763e:	1c59      	adds	r1, r3, #1
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017644:	47a0      	blx	r4
 8017646:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8017648:	693b      	ldr	r3, [r7, #16]
 801764a:	2b00      	cmp	r3, #0
 801764c:	dd09      	ble.n	8017662 <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017654:	681a      	ldr	r2, [r3, #0]
 8017656:	693b      	ldr	r3, [r7, #16]
 8017658:	441a      	add	r2, r3
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017660:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017668:	681a      	ldr	r2, [r3, #0]
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017670:	3304      	adds	r3, #4
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	429a      	cmp	r2, r3
 8017676:	d90a      	bls.n	801768e <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801767e:	3304      	adds	r3, #4
 8017680:	681a      	ldr	r2, [r3, #0]
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017688:	601a      	str	r2, [r3, #0]
 801768a:	e000      	b.n	801768e <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 801768c:	bf00      	nop
    va_end(arguments);
}
 801768e:	3718      	adds	r7, #24
 8017690:	46bd      	mov	sp, r7
 8017692:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8017696:	b003      	add	sp, #12
 8017698:	4770      	bx	lr
 801769a:	bf00      	nop
 801769c:	200000b0 	.word	0x200000b0

080176a0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b08c      	sub	sp, #48	; 0x30
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	60f8      	str	r0, [r7, #12]
 80176a8:	60b9      	str	r1, [r7, #8]
 80176aa:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 80176ac:	68bb      	ldr	r3, [r7, #8]
 80176ae:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 80176b0:	2310      	movs	r3, #16
 80176b2:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 80176b4:	2300      	movs	r3, #0
 80176b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 80176b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	429a      	cmp	r2, r3
 80176be:	d273      	bcs.n	80177a8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 80176c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80176c2:	493b      	ldr	r1, [pc, #236]	; (80177b0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 80176c4:	68f8      	ldr	r0, [r7, #12]
 80176c6:	f7ff ff9b 	bl	8017600 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 80176ca:	687a      	ldr	r2, [r7, #4]
 80176cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176ce:	1ad3      	subs	r3, r2, r3
 80176d0:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 80176d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176d4:	2b10      	cmp	r3, #16
 80176d6:	d901      	bls.n	80176dc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 80176d8:	2310      	movs	r3, #16
 80176da:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 80176dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176de:	f1c3 0310 	rsb	r3, r3, #16
 80176e2:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 80176e4:	2300      	movs	r3, #0
 80176e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80176e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80176ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176ec:	429a      	cmp	r2, r3
 80176ee:	d215      	bcs.n	801771c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 80176f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80176f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176f4:	4413      	add	r3, r2
 80176f6:	69fa      	ldr	r2, [r7, #28]
 80176f8:	4413      	add	r3, r2
 80176fa:	781b      	ldrb	r3, [r3, #0]
 80176fc:	461a      	mov	r2, r3
 80176fe:	492d      	ldr	r1, [pc, #180]	; (80177b4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8017700:	68f8      	ldr	r0, [r7, #12]
 8017702:	f7ff ff7d 	bl	8017600 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 8017706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017708:	2b07      	cmp	r3, #7
 801770a:	d103      	bne.n	8017714 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 801770c:	492a      	ldr	r1, [pc, #168]	; (80177b8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 801770e:	68f8      	ldr	r0, [r7, #12]
 8017710:	f7ff ff76 	bl	8017600 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8017714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017716:	3301      	adds	r3, #1
 8017718:	62bb      	str	r3, [r7, #40]	; 0x28
 801771a:	e7e5      	b.n	80176e8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 801771c:	2300      	movs	r3, #0
 801771e:	62bb      	str	r3, [r7, #40]	; 0x28
 8017720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017722:	697b      	ldr	r3, [r7, #20]
 8017724:	429a      	cmp	r2, r3
 8017726:	d207      	bcs.n	8017738 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8017728:	4924      	ldr	r1, [pc, #144]	; (80177bc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 801772a:	68f8      	ldr	r0, [r7, #12]
 801772c:	f7ff ff68 	bl	8017600 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8017730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017732:	3301      	adds	r3, #1
 8017734:	62bb      	str	r3, [r7, #40]	; 0x28
 8017736:	e7f3      	b.n	8017720 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8017738:	697b      	ldr	r3, [r7, #20]
 801773a:	2b08      	cmp	r3, #8
 801773c:	d903      	bls.n	8017746 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 801773e:	491e      	ldr	r1, [pc, #120]	; (80177b8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8017740:	68f8      	ldr	r0, [r7, #12]
 8017742:	f7ff ff5d 	bl	8017600 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 8017746:	491e      	ldr	r1, [pc, #120]	; (80177c0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8017748:	68f8      	ldr	r0, [r7, #12]
 801774a:	f7ff ff59 	bl	8017600 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 801774e:	2300      	movs	r3, #0
 8017750:	62bb      	str	r3, [r7, #40]	; 0x28
 8017752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017756:	429a      	cmp	r2, r3
 8017758:	d21d      	bcs.n	8017796 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 801775a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801775e:	4413      	add	r3, r2
 8017760:	69fa      	ldr	r2, [r7, #28]
 8017762:	4413      	add	r3, r2
 8017764:	781b      	ldrb	r3, [r3, #0]
 8017766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 801776a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801776e:	2b1f      	cmp	r3, #31
 8017770:	d903      	bls.n	801777a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 8017772:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017776:	2b7e      	cmp	r3, #126	; 0x7e
 8017778:	d902      	bls.n	8017780 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 801777a:	232e      	movs	r3, #46	; 0x2e
 801777c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8017780:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017784:	461a      	mov	r2, r3
 8017786:	490f      	ldr	r1, [pc, #60]	; (80177c4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8017788:	68f8      	ldr	r0, [r7, #12]
 801778a:	f7ff ff39 	bl	8017600 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 801778e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017790:	3301      	adds	r3, #1
 8017792:	62bb      	str	r3, [r7, #40]	; 0x28
 8017794:	e7dd      	b.n	8017752 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 8017796:	490c      	ldr	r1, [pc, #48]	; (80177c8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 8017798:	68f8      	ldr	r0, [r7, #12]
 801779a:	f7ff ff31 	bl	8017600 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 801779e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80177a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177a2:	4413      	add	r3, r2
 80177a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 80177a6:	e787      	b.n	80176b8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 80177a8:	bf00      	nop
 80177aa:	3730      	adds	r7, #48	; 0x30
 80177ac:	46bd      	mov	sp, r7
 80177ae:	bd80      	pop	{r7, pc}
 80177b0:	08027480 	.word	0x08027480
 80177b4:	0802748c 	.word	0x0802748c
 80177b8:	08027494 	.word	0x08027494
 80177bc:	08027498 	.word	0x08027498
 80177c0:	0802749c 	.word	0x0802749c
 80177c4:	080274a0 	.word	0x080274a0
 80177c8:	080274a4 	.word	0x080274a4

080177cc <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 80177cc:	b480      	push	{r7}
 80177ce:	b083      	sub	sp, #12
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6078      	str	r0, [r7, #4]
    return buffer_;
 80177d4:	687b      	ldr	r3, [r7, #4]
}
 80177d6:	4618      	mov	r0, r3
 80177d8:	370c      	adds	r7, #12
 80177da:	46bd      	mov	sp, r7
 80177dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e0:	4770      	bx	lr

080177e2 <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 80177e2:	b480      	push	{r7}
 80177e4:	b083      	sub	sp, #12
 80177e6:	af00      	add	r7, sp, #0
 80177e8:	6078      	str	r0, [r7, #4]
 80177ea:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80177f2:	3304      	adds	r3, #4
 80177f4:	683a      	ldr	r2, [r7, #0]
 80177f6:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80177fe:	3304      	adds	r3, #4
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017806:	d306      	bcc.n	8017816 <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801780e:	3304      	adds	r3, #4
 8017810:	f640 72ff 	movw	r2, #4095	; 0xfff
 8017814:	601a      	str	r2, [r3, #0]
}
 8017816:	bf00      	nop
 8017818:	370c      	adds	r7, #12
 801781a:	46bd      	mov	sp, r7
 801781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017820:	4770      	bx	lr

08017822 <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 8017822:	b480      	push	{r7}
 8017824:	b083      	sub	sp, #12
 8017826:	af00      	add	r7, sp, #0
 8017828:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017830:	3304      	adds	r3, #4
 8017832:	f640 72ff 	movw	r2, #4095	; 0xfff
 8017836:	601a      	str	r2, [r3, #0]
}
 8017838:	bf00      	nop
 801783a:	370c      	adds	r7, #12
 801783c:	46bd      	mov	sp, r7
 801783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017842:	4770      	bx	lr

08017844 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8017844:	b480      	push	{r7}
 8017846:	b083      	sub	sp, #12
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017852:	681a      	ldr	r2, [r3, #0]
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801785a:	3304      	adds	r3, #4
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	429a      	cmp	r2, r3
 8017860:	bf2c      	ite	cs
 8017862:	2301      	movcs	r3, #1
 8017864:	2300      	movcc	r3, #0
 8017866:	b2db      	uxtb	r3, r3
}
 8017868:	4618      	mov	r0, r3
 801786a:	370c      	adds	r7, #12
 801786c:	46bd      	mov	sp, r7
 801786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017872:	4770      	bx	lr

08017874 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8017874:	b580      	push	{r7, lr}
 8017876:	b082      	sub	sp, #8
 8017878:	af00      	add	r7, sp, #0
 801787a:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	2200      	movs	r2, #0
 8017880:	601a      	str	r2, [r3, #0]
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	2200      	movs	r2, #0
 8017886:	711a      	strb	r2, [r3, #4]
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	3308      	adds	r3, #8
 801788c:	4618      	mov	r0, r3
 801788e:	f7ff fe8b 	bl	80175a8 <_ZN18SimpleStringBufferC1Ev>
{
}
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	4618      	mov	r0, r3
 8017896:	3708      	adds	r7, #8
 8017898:	46bd      	mov	sp, r7
 801789a:	bd80      	pop	{r7, pc}

0801789c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 801789c:	b5b0      	push	{r4, r5, r7, lr}
 801789e:	b086      	sub	sp, #24
 80178a0:	af02      	add	r7, sp, #8
 80178a2:	60f8      	str	r0, [r7, #12]
 80178a4:	60b9      	str	r1, [r7, #8]
 80178a6:	607a      	str	r2, [r7, #4]
 80178a8:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	f103 0408 	add.w	r4, r3, #8
 80178b0:	687d      	ldr	r5, [r7, #4]
 80178b2:	6a3b      	ldr	r3, [r7, #32]
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	3314      	adds	r3, #20
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	6a38      	ldr	r0, [r7, #32]
 80178bc:	4798      	blx	r3
 80178be:	4603      	mov	r3, r0
 80178c0:	9301      	str	r3, [sp, #4]
 80178c2:	683b      	ldr	r3, [r7, #0]
 80178c4:	9300      	str	r3, [sp, #0]
 80178c6:	462b      	mov	r3, r5
 80178c8:	68ba      	ldr	r2, [r7, #8]
 80178ca:	4904      	ldr	r1, [pc, #16]	; (80178dc <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 80178cc:	4620      	mov	r0, r4
 80178ce:	f7ff fe97 	bl	8017600 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80178d2:	bf00      	nop
 80178d4:	3710      	adds	r7, #16
 80178d6:	46bd      	mov	sp, r7
 80178d8:	bdb0      	pop	{r4, r5, r7, pc}
 80178da:	bf00      	nop
 80178dc:	080274a8 	.word	0x080274a8

080178e0 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 80178e0:	b5b0      	push	{r4, r5, r7, lr}
 80178e2:	b086      	sub	sp, #24
 80178e4:	af02      	add	r7, sp, #8
 80178e6:	60f8      	str	r0, [r7, #12]
 80178e8:	60b9      	str	r1, [r7, #8]
 80178ea:	607a      	str	r2, [r7, #4]
 80178ec:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	f103 0408 	add.w	r4, r3, #8
 80178f4:	687d      	ldr	r5, [r7, #4]
 80178f6:	683b      	ldr	r3, [r7, #0]
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	3318      	adds	r3, #24
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	6838      	ldr	r0, [r7, #0]
 8017900:	4798      	blx	r3
 8017902:	4603      	mov	r3, r0
 8017904:	9300      	str	r3, [sp, #0]
 8017906:	462b      	mov	r3, r5
 8017908:	68ba      	ldr	r2, [r7, #8]
 801790a:	4904      	ldr	r1, [pc, #16]	; (801791c <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 801790c:	4620      	mov	r0, r4
 801790e:	f7ff fe77 	bl	8017600 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8017912:	bf00      	nop
 8017914:	3710      	adds	r7, #16
 8017916:	46bd      	mov	sp, r7
 8017918:	bdb0      	pop	{r4, r5, r7, pc}
 801791a:	bf00      	nop
 801791c:	080274e0 	.word	0x080274e0

08017920 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b082      	sub	sp, #8
 8017924:	af00      	add	r7, sp, #0
 8017926:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	3308      	adds	r3, #8
 801792c:	4903      	ldr	r1, [pc, #12]	; (801793c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 801792e:	4618      	mov	r0, r3
 8017930:	f7ff fe66 	bl	8017600 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8017934:	bf00      	nop
 8017936:	3708      	adds	r7, #8
 8017938:	46bd      	mov	sp, r7
 801793a:	bd80      	pop	{r7, pc}
 801793c:	08027510 	.word	0x08027510

08017940 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8017940:	b580      	push	{r7, lr}
 8017942:	b084      	sub	sp, #16
 8017944:	af00      	add	r7, sp, #0
 8017946:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	2200      	movs	r2, #0
 801794c:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	2200      	movs	r2, #0
 8017952:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8017954:	2367      	movs	r3, #103	; 0x67
 8017956:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	f203 1311 	addw	r3, r3, #273	; 0x111
 801795e:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	f103 0208 	add.w	r2, r3, #8
 8017966:	68bb      	ldr	r3, [r7, #8]
 8017968:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 801796c:	4619      	mov	r1, r3
 801796e:	4610      	mov	r0, r2
 8017970:	f7ff ff37 	bl	80177e2 <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8017974:	bf00      	nop
 8017976:	3710      	adds	r7, #16
 8017978:	46bd      	mov	sp, r7
 801797a:	bd80      	pop	{r7, pc}

0801797c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 801797c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801797e:	b089      	sub	sp, #36	; 0x24
 8017980:	af04      	add	r7, sp, #16
 8017982:	60f8      	str	r0, [r7, #12]
 8017984:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d102      	bne.n	8017994 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 801798e:	68f8      	ldr	r0, [r7, #12]
 8017990:	f000 f882 	bl	8017a98 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	1c5a      	adds	r2, r3, #1
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	f103 0508 	add.w	r5, r3, #8
 80179a4:	68bb      	ldr	r3, [r7, #8]
 80179a6:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80179a8:	68bb      	ldr	r3, [r7, #8]
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80179ae:	68bb      	ldr	r3, [r7, #8]
 80179b0:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80179b2:	68bb      	ldr	r3, [r7, #8]
 80179b4:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80179b6:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80179b8:	68bb      	ldr	r3, [r7, #8]
 80179ba:	695a      	ldr	r2, [r3, #20]
 80179bc:	68bb      	ldr	r3, [r7, #8]
 80179be:	695b      	ldr	r3, [r3, #20]
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	3314      	adds	r3, #20
 80179c4:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80179c6:	4610      	mov	r0, r2
 80179c8:	4798      	blx	r3
 80179ca:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80179cc:	68bb      	ldr	r3, [r7, #8]
 80179ce:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80179d0:	9303      	str	r3, [sp, #12]
 80179d2:	9202      	str	r2, [sp, #8]
 80179d4:	683a      	ldr	r2, [r7, #0]
 80179d6:	9201      	str	r2, [sp, #4]
 80179d8:	9400      	str	r4, [sp, #0]
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	4632      	mov	r2, r6
 80179de:	4915      	ldr	r1, [pc, #84]	; (8017a34 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 80179e0:	4628      	mov	r0, r5
 80179e2:	f7ff fe0d 	bl	8017600 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	f103 0008 	add.w	r0, r3, #8
 80179ec:	68bb      	ldr	r3, [r7, #8]
 80179ee:	6899      	ldr	r1, [r3, #8]
 80179f0:	68bb      	ldr	r3, [r7, #8]
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	461a      	mov	r2, r3
 80179f6:	f7ff fe53 	bl	80176a0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 80179fa:	68bb      	ldr	r3, [r7, #8]
 80179fc:	695a      	ldr	r2, [r3, #20]
 80179fe:	68bb      	ldr	r3, [r7, #8]
 8017a00:	695b      	ldr	r3, [r3, #20]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	3314      	adds	r3, #20
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	4610      	mov	r0, r2
 8017a0a:	4798      	blx	r3
 8017a0c:	4603      	mov	r3, r0
 8017a0e:	490a      	ldr	r1, [pc, #40]	; (8017a38 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 8017a10:	4618      	mov	r0, r3
 8017a12:	f7f6 f887 	bl	800db24 <_ZN12SimpleString6StrCmpEPKcS1_>
 8017a16:	4603      	mov	r3, r0
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	bf0c      	ite	eq
 8017a1c:	2301      	moveq	r3, #1
 8017a1e:	2300      	movne	r3, #0
 8017a20:	b2db      	uxtb	r3, r3
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d002      	beq.n	8017a2c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	2201      	movs	r2, #1
 8017a2a:	711a      	strb	r2, [r3, #4]
}
 8017a2c:	bf00      	nop
 8017a2e:	3714      	adds	r7, #20
 8017a30:	46bd      	mov	sp, r7
 8017a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a34:	08027530 	.word	0x08027530
 8017a38:	08027590 	.word	0x08027590

08017a3c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8017a3c:	b580      	push	{r7, lr}
 8017a3e:	b084      	sub	sp, #16
 8017a40:	af00      	add	r7, sp, #0
 8017a42:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d103      	bne.n	8017a54 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8017a4c:	6878      	ldr	r0, [r7, #4]
 8017a4e:	f7ff ff67 	bl	8017920 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 8017a52:	e01e      	b.n	8017a92 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	3308      	adds	r3, #8
 8017a58:	4618      	mov	r0, r3
 8017a5a:	f7ff fef3 	bl	8017844 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 8017a5e:	4603      	mov	r3, r0
 8017a60:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	3308      	adds	r3, #8
 8017a66:	4618      	mov	r0, r3
 8017a68:	f7ff fedb 	bl	8017822 <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8017a6c:	7bfb      	ldrb	r3, [r7, #15]
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d002      	beq.n	8017a78 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 8017a72:	6878      	ldr	r0, [r7, #4]
 8017a74:	f000 f820 	bl	8017ab8 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	4619      	mov	r1, r3
 8017a7e:	6878      	ldr	r0, [r7, #4]
 8017a80:	f000 f82a 	bl	8017ad8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	791b      	ldrb	r3, [r3, #4]
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d002      	beq.n	8017a92 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 8017a8c:	6878      	ldr	r0, [r7, #4]
 8017a8e:	f000 f839 	bl	8017b04 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 8017a92:	3710      	adds	r7, #16
 8017a94:	46bd      	mov	sp, r7
 8017a96:	bd80      	pop	{r7, pc}

08017a98 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b082      	sub	sp, #8
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	3308      	adds	r3, #8
 8017aa4:	4903      	ldr	r1, [pc, #12]	; (8017ab4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	f7ff fdaa 	bl	8017600 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8017aac:	bf00      	nop
 8017aae:	3708      	adds	r7, #8
 8017ab0:	46bd      	mov	sp, r7
 8017ab2:	bd80      	pop	{r7, pc}
 8017ab4:	08027598 	.word	0x08027598

08017ab8 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b082      	sub	sp, #8
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	3308      	adds	r3, #8
 8017ac4:	4903      	ldr	r1, [pc, #12]	; (8017ad4 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	f7ff fd9a 	bl	8017600 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8017acc:	bf00      	nop
 8017ace:	3708      	adds	r7, #8
 8017ad0:	46bd      	mov	sp, r7
 8017ad2:	bd80      	pop	{r7, pc}
 8017ad4:	080275b0 	.word	0x080275b0

08017ad8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b082      	sub	sp, #8
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	6078      	str	r0, [r7, #4]
 8017ae0:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	f103 0008 	add.w	r0, r3, #8
 8017ae8:	683b      	ldr	r3, [r7, #0]
 8017aea:	4a04      	ldr	r2, [pc, #16]	; (8017afc <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 8017aec:	4904      	ldr	r1, [pc, #16]	; (8017b00 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 8017aee:	f7ff fd87 	bl	8017600 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8017af2:	bf00      	nop
 8017af4:	3708      	adds	r7, #8
 8017af6:	46bd      	mov	sp, r7
 8017af8:	bd80      	pop	{r7, pc}
 8017afa:	bf00      	nop
 8017afc:	080275f8 	.word	0x080275f8
 8017b00:	08027610 	.word	0x08027610

08017b04 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b082      	sub	sp, #8
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	3308      	adds	r3, #8
 8017b10:	4903      	ldr	r1, [pc, #12]	; (8017b20 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 8017b12:	4618      	mov	r0, r3
 8017b14:	f7ff fd74 	bl	8017600 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8017b18:	bf00      	nop
 8017b1a:	3708      	adds	r7, #8
 8017b1c:	46bd      	mov	sp, r7
 8017b1e:	bd80      	pop	{r7, pc}
 8017b20:	08027618 	.word	0x08027618

08017b24 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8017b24:	b580      	push	{r7, lr}
 8017b26:	b08a      	sub	sp, #40	; 0x28
 8017b28:	af06      	add	r7, sp, #24
 8017b2a:	60f8      	str	r0, [r7, #12]
 8017b2c:	60b9      	str	r1, [r7, #8]
 8017b2e:	607a      	str	r2, [r7, #4]
 8017b30:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 8017b32:	f7f9 fe8d 	bl	8011850 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 8017b36:	4602      	mov	r2, r0
 8017b38:	69bb      	ldr	r3, [r7, #24]
 8017b3a:	9305      	str	r3, [sp, #20]
 8017b3c:	683b      	ldr	r3, [r7, #0]
 8017b3e:	9304      	str	r3, [sp, #16]
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	9303      	str	r3, [sp, #12]
 8017b44:	68bb      	ldr	r3, [r7, #8]
 8017b46:	9302      	str	r3, [sp, #8]
 8017b48:	9201      	str	r2, [sp, #4]
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	9300      	str	r3, [sp, #0]
 8017b4e:	2300      	movs	r3, #0
 8017b50:	4a04      	ldr	r2, [pc, #16]	; (8017b64 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 8017b52:	4905      	ldr	r1, [pc, #20]	; (8017b68 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8017b54:	68f8      	ldr	r0, [r7, #12]
 8017b56:	f000 f855 	bl	8017c04 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8017b5a:	bf00      	nop
 8017b5c:	3710      	adds	r7, #16
 8017b5e:	46bd      	mov	sp, r7
 8017b60:	bd80      	pop	{r7, pc}
 8017b62:	bf00      	nop
 8017b64:	08027474 	.word	0x08027474
 8017b68:	0802772c 	.word	0x0802772c

08017b6c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8017b6c:	b590      	push	{r4, r7, lr}
 8017b6e:	b08b      	sub	sp, #44	; 0x2c
 8017b70:	af06      	add	r7, sp, #24
 8017b72:	60f8      	str	r0, [r7, #12]
 8017b74:	60b9      	str	r1, [r7, #8]
 8017b76:	607a      	str	r2, [r7, #4]
 8017b78:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8017b7a:	68bb      	ldr	r3, [r7, #8]
 8017b7c:	68d8      	ldr	r0, [r3, #12]
 8017b7e:	68bb      	ldr	r3, [r7, #8]
 8017b80:	691c      	ldr	r4, [r3, #16]
 8017b82:	68bb      	ldr	r3, [r7, #8]
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	68ba      	ldr	r2, [r7, #8]
 8017b88:	6952      	ldr	r2, [r2, #20]
 8017b8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017b8c:	9105      	str	r1, [sp, #20]
 8017b8e:	6a39      	ldr	r1, [r7, #32]
 8017b90:	9104      	str	r1, [sp, #16]
 8017b92:	6839      	ldr	r1, [r7, #0]
 8017b94:	9103      	str	r1, [sp, #12]
 8017b96:	6879      	ldr	r1, [r7, #4]
 8017b98:	9102      	str	r1, [sp, #8]
 8017b9a:	9201      	str	r2, [sp, #4]
 8017b9c:	9300      	str	r3, [sp, #0]
 8017b9e:	4623      	mov	r3, r4
 8017ba0:	4602      	mov	r2, r0
 8017ba2:	4904      	ldr	r1, [pc, #16]	; (8017bb4 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8017ba4:	68f8      	ldr	r0, [r7, #12]
 8017ba6:	f000 f82d 	bl	8017c04 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8017baa:	bf00      	nop
 8017bac:	3714      	adds	r7, #20
 8017bae:	46bd      	mov	sp, r7
 8017bb0:	bd90      	pop	{r4, r7, pc}
 8017bb2:	bf00      	nop
 8017bb4:	08027750 	.word	0x08027750

08017bb8 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8017bb8:	b590      	push	{r4, r7, lr}
 8017bba:	b08b      	sub	sp, #44	; 0x2c
 8017bbc:	af06      	add	r7, sp, #24
 8017bbe:	60f8      	str	r0, [r7, #12]
 8017bc0:	60b9      	str	r1, [r7, #8]
 8017bc2:	607a      	str	r2, [r7, #4]
 8017bc4:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8017bc6:	68bb      	ldr	r3, [r7, #8]
 8017bc8:	68d8      	ldr	r0, [r3, #12]
 8017bca:	68bb      	ldr	r3, [r7, #8]
 8017bcc:	691c      	ldr	r4, [r3, #16]
 8017bce:	68bb      	ldr	r3, [r7, #8]
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	68ba      	ldr	r2, [r7, #8]
 8017bd4:	6952      	ldr	r2, [r2, #20]
 8017bd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017bd8:	9105      	str	r1, [sp, #20]
 8017bda:	6a39      	ldr	r1, [r7, #32]
 8017bdc:	9104      	str	r1, [sp, #16]
 8017bde:	6839      	ldr	r1, [r7, #0]
 8017be0:	9103      	str	r1, [sp, #12]
 8017be2:	6879      	ldr	r1, [r7, #4]
 8017be4:	9102      	str	r1, [sp, #8]
 8017be6:	9201      	str	r2, [sp, #4]
 8017be8:	9300      	str	r3, [sp, #0]
 8017bea:	4623      	mov	r3, r4
 8017bec:	4602      	mov	r2, r0
 8017bee:	4904      	ldr	r1, [pc, #16]	; (8017c00 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8017bf0:	68f8      	ldr	r0, [r7, #12]
 8017bf2:	f000 f807 	bl	8017c04 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8017bf6:	bf00      	nop
 8017bf8:	3714      	adds	r7, #20
 8017bfa:	46bd      	mov	sp, r7
 8017bfc:	bd90      	pop	{r4, r7, pc}
 8017bfe:	bf00      	nop
 8017c00:	08027778 	.word	0x08027778

08017c04 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8017c04:	b590      	push	{r4, r7, lr}
 8017c06:	b087      	sub	sp, #28
 8017c08:	af02      	add	r7, sp, #8
 8017c0a:	60f8      	str	r0, [r7, #12]
 8017c0c:	60b9      	str	r1, [r7, #8]
 8017c0e:	607a      	str	r2, [r7, #4]
 8017c10:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	3308      	adds	r3, #8
 8017c16:	68ba      	ldr	r2, [r7, #8]
 8017c18:	4910      	ldr	r1, [pc, #64]	; (8017c5c <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 8017c1a:	4618      	mov	r0, r3
 8017c1c:	f7ff fcf0 	bl	8017600 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 8017c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c22:	9300      	str	r3, [sp, #0]
 8017c24:	6a3b      	ldr	r3, [r7, #32]
 8017c26:	683a      	ldr	r2, [r7, #0]
 8017c28:	6879      	ldr	r1, [r7, #4]
 8017c2a:	68f8      	ldr	r0, [r7, #12]
 8017c2c:	f7ff fe36 	bl	801789c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 8017c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017c36:	68f8      	ldr	r0, [r7, #12]
 8017c38:	f7ff fe52 	bl	80178e0 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8017c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	3308      	adds	r3, #8
 8017c42:	681c      	ldr	r4, [r3, #0]
 8017c44:	68f8      	ldr	r0, [r7, #12]
 8017c46:	f000 f80b 	bl	8017c60 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8017c4a:	4603      	mov	r3, r0
 8017c4c:	4619      	mov	r1, r3
 8017c4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017c50:	47a0      	blx	r4
}
 8017c52:	bf00      	nop
 8017c54:	3714      	adds	r7, #20
 8017c56:	46bd      	mov	sp, r7
 8017c58:	bd90      	pop	{r4, r7, pc}
 8017c5a:	bf00      	nop
 8017c5c:	080277a4 	.word	0x080277a4

08017c60 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8017c60:	b580      	push	{r7, lr}
 8017c62:	b082      	sub	sp, #8
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	3308      	adds	r3, #8
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	f7ff fdad 	bl	80177cc <_ZN18SimpleStringBuffer8toStringEv>
 8017c72:	4603      	mov	r3, r0
}
 8017c74:	4618      	mov	r0, r3
 8017c76:	3708      	adds	r7, #8
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	bd80      	pop	{r7, pc}

08017c7c <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8017c7c:	b580      	push	{r7, lr}
 8017c7e:	b082      	sub	sp, #8
 8017c80:	af00      	add	r7, sp, #0
 8017c82:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	3308      	adds	r3, #8
 8017c88:	4618      	mov	r0, r3
 8017c8a:	f7ff fca7 	bl	80175dc <_ZN18SimpleStringBuffer5clearEv>
}
 8017c8e:	bf00      	nop
 8017c90:	3708      	adds	r7, #8
 8017c92:	46bd      	mov	sp, r7
 8017c94:	bd80      	pop	{r7, pc}

08017c96 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 8017c96:	b480      	push	{r7}
 8017c98:	b085      	sub	sp, #20
 8017c9a:	af00      	add	r7, sp, #0
 8017c9c:	60f8      	str	r0, [r7, #12]
 8017c9e:	60b9      	str	r1, [r7, #8]
 8017ca0:	607a      	str	r2, [r7, #4]
 8017ca2:	603b      	str	r3, [r7, #0]
    number_ = number;
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	687a      	ldr	r2, [r7, #4]
 8017ca8:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	68ba      	ldr	r2, [r7, #8]
 8017cae:	609a      	str	r2, [r3, #8]
    size_ = size;
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	683a      	ldr	r2, [r7, #0]
 8017cb4:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	69ba      	ldr	r2, [r7, #24]
 8017cba:	615a      	str	r2, [r3, #20]
    period_ = period;
 8017cbc:	68fb      	ldr	r3, [r7, #12]
 8017cbe:	7f3a      	ldrb	r2, [r7, #28]
 8017cc0:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017cc8:	765a      	strb	r2, [r3, #25]
    file_ = file;
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017cce:	60da      	str	r2, [r3, #12]
    line_ = line;
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017cd4:	611a      	str	r2, [r3, #16]
}
 8017cd6:	bf00      	nop
 8017cd8:	3714      	adds	r7, #20
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ce0:	4770      	bx	lr

08017ce2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8017ce2:	b480      	push	{r7}
 8017ce4:	b085      	sub	sp, #20
 8017ce6:	af00      	add	r7, sp, #0
 8017ce8:	60f8      	str	r0, [r7, #12]
 8017cea:	60b9      	str	r1, [r7, #8]
 8017cec:	4613      	mov	r3, r2
 8017cee:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 8017cf0:	79fb      	ldrb	r3, [r7, #7]
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d00b      	beq.n	8017d0e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8017cf6:	68bb      	ldr	r3, [r7, #8]
 8017cf8:	7e1b      	ldrb	r3, [r3, #24]
 8017cfa:	79fa      	ldrb	r2, [r7, #7]
 8017cfc:	429a      	cmp	r2, r3
 8017cfe:	d006      	beq.n	8017d0e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8017d00:	68bb      	ldr	r3, [r7, #8]
 8017d02:	7e1b      	ldrb	r3, [r3, #24]
 8017d04:	2b01      	cmp	r3, #1
 8017d06:	d004      	beq.n	8017d12 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8017d08:	79fb      	ldrb	r3, [r7, #7]
 8017d0a:	2b02      	cmp	r3, #2
 8017d0c:	d101      	bne.n	8017d12 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8017d0e:	2301      	movs	r3, #1
 8017d10:	e000      	b.n	8017d14 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 8017d12:	2300      	movs	r3, #0
}
 8017d14:	4618      	mov	r0, r3
 8017d16:	3714      	adds	r7, #20
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d1e:	4770      	bx	lr

08017d20 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 8017d20:	b480      	push	{r7}
 8017d22:	b083      	sub	sp, #12
 8017d24:	af00      	add	r7, sp, #0
 8017d26:	6078      	str	r0, [r7, #4]
 8017d28:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	681a      	ldr	r2, [r3, #0]
 8017d2e:	683b      	ldr	r3, [r7, #0]
 8017d30:	61da      	str	r2, [r3, #28]
    head_ = node;
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	683a      	ldr	r2, [r7, #0]
 8017d36:	601a      	str	r2, [r3, #0]
}
 8017d38:	bf00      	nop
 8017d3a:	370c      	adds	r7, #12
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d42:	4770      	bx	lr

08017d44 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8017d44:	b480      	push	{r7}
 8017d46:	b085      	sub	sp, #20
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	6078      	str	r0, [r7, #4]
 8017d4c:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8017d54:	2300      	movs	r3, #0
 8017d56:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d019      	beq.n	8017d92 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	689b      	ldr	r3, [r3, #8]
 8017d62:	683a      	ldr	r2, [r7, #0]
 8017d64:	429a      	cmp	r2, r3
 8017d66:	d10e      	bne.n	8017d86 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8017d68:	68bb      	ldr	r3, [r7, #8]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d005      	beq.n	8017d7a <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	69da      	ldr	r2, [r3, #28]
 8017d72:	68bb      	ldr	r3, [r7, #8]
 8017d74:	61da      	str	r2, [r3, #28]
                return cur;
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	e00c      	b.n	8017d94 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	69da      	ldr	r2, [r3, #28]
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	601a      	str	r2, [r3, #0]
                return cur;
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	e006      	b.n	8017d94 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	69db      	ldr	r3, [r3, #28]
 8017d8e:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8017d90:	e7e2      	b.n	8017d58 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 8017d92:	2300      	movs	r3, #0
}
 8017d94:	4618      	mov	r0, r3
 8017d96:	3714      	adds	r7, #20
 8017d98:	46bd      	mov	sp, r7
 8017d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d9e:	4770      	bx	lr

08017da0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8017da0:	b480      	push	{r7}
 8017da2:	b085      	sub	sp, #20
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	6078      	str	r0, [r7, #4]
 8017da8:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d00a      	beq.n	8017dcc <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	689b      	ldr	r3, [r3, #8]
 8017dba:	683a      	ldr	r2, [r7, #0]
 8017dbc:	429a      	cmp	r2, r3
 8017dbe:	d101      	bne.n	8017dc4 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	e004      	b.n	8017dce <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	69db      	ldr	r3, [r3, #28]
 8017dc8:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8017dca:	e7f1      	b.n	8017db0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 8017dcc:	2300      	movs	r3, #0
}
 8017dce:	4618      	mov	r0, r3
 8017dd0:	3714      	adds	r7, #20
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dd8:	4770      	bx	lr

08017dda <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8017dda:	b580      	push	{r7, lr}
 8017ddc:	b086      	sub	sp, #24
 8017dde:	af00      	add	r7, sp, #0
 8017de0:	60f8      	str	r0, [r7, #12]
 8017de2:	60b9      	str	r1, [r7, #8]
 8017de4:	4613      	mov	r3, r2
 8017de6:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8017de8:	68bb      	ldr	r3, [r7, #8]
 8017dea:	617b      	str	r3, [r7, #20]
 8017dec:	697b      	ldr	r3, [r7, #20]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d00e      	beq.n	8017e10 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 8017df2:	79fb      	ldrb	r3, [r7, #7]
 8017df4:	461a      	mov	r2, r3
 8017df6:	6979      	ldr	r1, [r7, #20]
 8017df8:	68f8      	ldr	r0, [r7, #12]
 8017dfa:	f7ff ff72 	bl	8017ce2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8017dfe:	4603      	mov	r3, r0
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d001      	beq.n	8017e08 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8017e04:	697b      	ldr	r3, [r7, #20]
 8017e06:	e004      	b.n	8017e12 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8017e08:	697b      	ldr	r3, [r7, #20]
 8017e0a:	69db      	ldr	r3, [r3, #28]
 8017e0c:	617b      	str	r3, [r7, #20]
 8017e0e:	e7ed      	b.n	8017dec <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 8017e10:	2300      	movs	r3, #0
}
 8017e12:	4618      	mov	r0, r3
 8017e14:	3718      	adds	r7, #24
 8017e16:	46bd      	mov	sp, r7
 8017e18:	bd80      	pop	{r7, pc}

08017e1a <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8017e1a:	b580      	push	{r7, lr}
 8017e1c:	b082      	sub	sp, #8
 8017e1e:	af00      	add	r7, sp, #0
 8017e20:	6078      	str	r0, [r7, #4]
 8017e22:	460b      	mov	r3, r1
 8017e24:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	78fa      	ldrb	r2, [r7, #3]
 8017e2c:	4619      	mov	r1, r3
 8017e2e:	6878      	ldr	r0, [r7, #4]
 8017e30:	f7ff ffd3 	bl	8017dda <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8017e34:	4603      	mov	r3, r0
}
 8017e36:	4618      	mov	r0, r3
 8017e38:	3708      	adds	r7, #8
 8017e3a:	46bd      	mov	sp, r7
 8017e3c:	bd80      	pop	{r7, pc}

08017e3e <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8017e3e:	b580      	push	{r7, lr}
 8017e40:	b084      	sub	sp, #16
 8017e42:	af00      	add	r7, sp, #0
 8017e44:	60f8      	str	r0, [r7, #12]
 8017e46:	60b9      	str	r1, [r7, #8]
 8017e48:	4613      	mov	r3, r2
 8017e4a:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8017e4c:	68bb      	ldr	r3, [r7, #8]
 8017e4e:	69db      	ldr	r3, [r3, #28]
 8017e50:	79fa      	ldrb	r2, [r7, #7]
 8017e52:	4619      	mov	r1, r3
 8017e54:	68f8      	ldr	r0, [r7, #12]
 8017e56:	f7ff ffc0 	bl	8017dda <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8017e5a:	4603      	mov	r3, r0
}
 8017e5c:	4618      	mov	r0, r3
 8017e5e:	3710      	adds	r7, #16
 8017e60:	46bd      	mov	sp, r7
 8017e62:	bd80      	pop	{r7, pc}

08017e64 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8017e64:	b580      	push	{r7, lr}
 8017e66:	b084      	sub	sp, #16
 8017e68:	af00      	add	r7, sp, #0
 8017e6a:	6078      	str	r0, [r7, #4]
 8017e6c:	460b      	mov	r3, r1
 8017e6e:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8017e70:	2300      	movs	r3, #0
 8017e72:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	60bb      	str	r3, [r7, #8]
 8017e7a:	68bb      	ldr	r3, [r7, #8]
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d00f      	beq.n	8017ea0 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8017e80:	78fb      	ldrb	r3, [r7, #3]
 8017e82:	461a      	mov	r2, r3
 8017e84:	68b9      	ldr	r1, [r7, #8]
 8017e86:	6878      	ldr	r0, [r7, #4]
 8017e88:	f7ff ff2b 	bl	8017ce2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8017e8c:	4603      	mov	r3, r0
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d002      	beq.n	8017e98 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	3301      	adds	r3, #1
 8017e96:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8017e98:	68bb      	ldr	r3, [r7, #8]
 8017e9a:	69db      	ldr	r3, [r3, #28]
 8017e9c:	60bb      	str	r3, [r7, #8]
 8017e9e:	e7ec      	b.n	8017e7a <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8017ea0:	68fb      	ldr	r3, [r7, #12]
}
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	3710      	adds	r7, #16
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	bd80      	pop	{r7, pc}
	...

08017eac <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 8017eac:	b480      	push	{r7}
 8017eae:	b083      	sub	sp, #12
 8017eb0:	af00      	add	r7, sp, #0
 8017eb2:	6078      	str	r0, [r7, #4]
 8017eb4:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 8017eb6:	6839      	ldr	r1, [r7, #0]
 8017eb8:	4b09      	ldr	r3, [pc, #36]	; (8017ee0 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 8017eba:	fba3 2301 	umull	r2, r3, r3, r1
 8017ebe:	1aca      	subs	r2, r1, r3
 8017ec0:	0852      	lsrs	r2, r2, #1
 8017ec2:	4413      	add	r3, r2
 8017ec4:	099a      	lsrs	r2, r3, #6
 8017ec6:	4613      	mov	r3, r2
 8017ec8:	00db      	lsls	r3, r3, #3
 8017eca:	4413      	add	r3, r2
 8017ecc:	00db      	lsls	r3, r3, #3
 8017ece:	4413      	add	r3, r2
 8017ed0:	1aca      	subs	r2, r1, r3
 8017ed2:	4613      	mov	r3, r2
}
 8017ed4:	4618      	mov	r0, r3
 8017ed6:	370c      	adds	r7, #12
 8017ed8:	46bd      	mov	sp, r7
 8017eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ede:	4770      	bx	lr
 8017ee0:	c0e07039 	.word	0xc0e07039

08017ee4 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 8017ee4:	b580      	push	{r7, lr}
 8017ee6:	b082      	sub	sp, #8
 8017ee8:	af00      	add	r7, sp, #0
 8017eea:	6078      	str	r0, [r7, #4]
 8017eec:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 8017eee:	683b      	ldr	r3, [r7, #0]
 8017ef0:	689b      	ldr	r3, [r3, #8]
 8017ef2:	4619      	mov	r1, r3
 8017ef4:	6878      	ldr	r0, [r7, #4]
 8017ef6:	f7ff ffd9 	bl	8017eac <_ZN23MemoryLeakDetectorTable4hashEPc>
 8017efa:	4603      	mov	r3, r0
 8017efc:	009b      	lsls	r3, r3, #2
 8017efe:	687a      	ldr	r2, [r7, #4]
 8017f00:	4413      	add	r3, r2
 8017f02:	6839      	ldr	r1, [r7, #0]
 8017f04:	4618      	mov	r0, r3
 8017f06:	f7ff ff0b 	bl	8017d20 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 8017f0a:	bf00      	nop
 8017f0c:	3708      	adds	r7, #8
 8017f0e:	46bd      	mov	sp, r7
 8017f10:	bd80      	pop	{r7, pc}

08017f12 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 8017f12:	b580      	push	{r7, lr}
 8017f14:	b082      	sub	sp, #8
 8017f16:	af00      	add	r7, sp, #0
 8017f18:	6078      	str	r0, [r7, #4]
 8017f1a:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8017f1c:	6839      	ldr	r1, [r7, #0]
 8017f1e:	6878      	ldr	r0, [r7, #4]
 8017f20:	f7ff ffc4 	bl	8017eac <_ZN23MemoryLeakDetectorTable4hashEPc>
 8017f24:	4603      	mov	r3, r0
 8017f26:	009b      	lsls	r3, r3, #2
 8017f28:	687a      	ldr	r2, [r7, #4]
 8017f2a:	4413      	add	r3, r2
 8017f2c:	6839      	ldr	r1, [r7, #0]
 8017f2e:	4618      	mov	r0, r3
 8017f30:	f7ff ff08 	bl	8017d44 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8017f34:	4603      	mov	r3, r0
}
 8017f36:	4618      	mov	r0, r3
 8017f38:	3708      	adds	r7, #8
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bd80      	pop	{r7, pc}

08017f3e <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 8017f3e:	b580      	push	{r7, lr}
 8017f40:	b082      	sub	sp, #8
 8017f42:	af00      	add	r7, sp, #0
 8017f44:	6078      	str	r0, [r7, #4]
 8017f46:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8017f48:	6839      	ldr	r1, [r7, #0]
 8017f4a:	6878      	ldr	r0, [r7, #4]
 8017f4c:	f7ff ffae 	bl	8017eac <_ZN23MemoryLeakDetectorTable4hashEPc>
 8017f50:	4603      	mov	r3, r0
 8017f52:	009b      	lsls	r3, r3, #2
 8017f54:	687a      	ldr	r2, [r7, #4]
 8017f56:	4413      	add	r3, r2
 8017f58:	6839      	ldr	r1, [r7, #0]
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	f7ff ff20 	bl	8017da0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8017f60:	4603      	mov	r3, r0
}
 8017f62:	4618      	mov	r0, r3
 8017f64:	3708      	adds	r7, #8
 8017f66:	46bd      	mov	sp, r7
 8017f68:	bd80      	pop	{r7, pc}

08017f6a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8017f6a:	b580      	push	{r7, lr}
 8017f6c:	b084      	sub	sp, #16
 8017f6e:	af00      	add	r7, sp, #0
 8017f70:	6078      	str	r0, [r7, #4]
 8017f72:	460b      	mov	r3, r1
 8017f74:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8017f76:	2300      	movs	r3, #0
 8017f78:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	60bb      	str	r3, [r7, #8]
 8017f7e:	68bb      	ldr	r3, [r7, #8]
 8017f80:	2b48      	cmp	r3, #72	; 0x48
 8017f82:	dc10      	bgt.n	8017fa6 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8017f84:	68bb      	ldr	r3, [r7, #8]
 8017f86:	009b      	lsls	r3, r3, #2
 8017f88:	687a      	ldr	r2, [r7, #4]
 8017f8a:	4413      	add	r3, r2
 8017f8c:	78fa      	ldrb	r2, [r7, #3]
 8017f8e:	4611      	mov	r1, r2
 8017f90:	4618      	mov	r0, r3
 8017f92:	f7ff ff67 	bl	8017e64 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 8017f96:	4602      	mov	r2, r0
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	4413      	add	r3, r2
 8017f9c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8017f9e:	68bb      	ldr	r3, [r7, #8]
 8017fa0:	3301      	adds	r3, #1
 8017fa2:	60bb      	str	r3, [r7, #8]
 8017fa4:	e7eb      	b.n	8017f7e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 8017fa6:	68fb      	ldr	r3, [r7, #12]
}
 8017fa8:	4618      	mov	r0, r3
 8017faa:	3710      	adds	r7, #16
 8017fac:	46bd      	mov	sp, r7
 8017fae:	bd80      	pop	{r7, pc}

08017fb0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8017fb0:	b580      	push	{r7, lr}
 8017fb2:	b084      	sub	sp, #16
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	6078      	str	r0, [r7, #4]
 8017fb8:	460b      	mov	r3, r1
 8017fba:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 8017fbc:	2300      	movs	r3, #0
 8017fbe:	60fb      	str	r3, [r7, #12]
 8017fc0:	68fb      	ldr	r3, [r7, #12]
 8017fc2:	2b48      	cmp	r3, #72	; 0x48
 8017fc4:	dc12      	bgt.n	8017fec <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	009b      	lsls	r3, r3, #2
 8017fca:	687a      	ldr	r2, [r7, #4]
 8017fcc:	4413      	add	r3, r2
 8017fce:	78fa      	ldrb	r2, [r7, #3]
 8017fd0:	4611      	mov	r1, r2
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	f7ff ff21 	bl	8017e1a <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8017fd8:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 8017fda:	68bb      	ldr	r3, [r7, #8]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d001      	beq.n	8017fe4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 8017fe0:	68bb      	ldr	r3, [r7, #8]
 8017fe2:	e004      	b.n	8017fee <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 8017fe4:	68fb      	ldr	r3, [r7, #12]
 8017fe6:	3301      	adds	r3, #1
 8017fe8:	60fb      	str	r3, [r7, #12]
 8017fea:	e7e9      	b.n	8017fc0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 8017fec:	2300      	movs	r3, #0
}
 8017fee:	4618      	mov	r0, r3
 8017ff0:	3710      	adds	r7, #16
 8017ff2:	46bd      	mov	sp, r7
 8017ff4:	bd80      	pop	{r7, pc}

08017ff6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 8017ff6:	b580      	push	{r7, lr}
 8017ff8:	b086      	sub	sp, #24
 8017ffa:	af00      	add	r7, sp, #0
 8017ffc:	60f8      	str	r0, [r7, #12]
 8017ffe:	60b9      	str	r1, [r7, #8]
 8018000:	4613      	mov	r3, r2
 8018002:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8018004:	68bb      	ldr	r3, [r7, #8]
 8018006:	689b      	ldr	r3, [r3, #8]
 8018008:	4619      	mov	r1, r3
 801800a:	68f8      	ldr	r0, [r7, #12]
 801800c:	f7ff ff4e 	bl	8017eac <_ZN23MemoryLeakDetectorTable4hashEPc>
 8018010:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 8018012:	697b      	ldr	r3, [r7, #20]
 8018014:	009b      	lsls	r3, r3, #2
 8018016:	68fa      	ldr	r2, [r7, #12]
 8018018:	4413      	add	r3, r2
 801801a:	79fa      	ldrb	r2, [r7, #7]
 801801c:	68b9      	ldr	r1, [r7, #8]
 801801e:	4618      	mov	r0, r3
 8018020:	f7ff ff0d 	bl	8017e3e <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8018024:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8018026:	693b      	ldr	r3, [r7, #16]
 8018028:	2b00      	cmp	r3, #0
 801802a:	d001      	beq.n	8018030 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 801802c:	693b      	ldr	r3, [r7, #16]
 801802e:	e019      	b.n	8018064 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8018030:	697b      	ldr	r3, [r7, #20]
 8018032:	3301      	adds	r3, #1
 8018034:	617b      	str	r3, [r7, #20]
 8018036:	697b      	ldr	r3, [r7, #20]
 8018038:	2b48      	cmp	r3, #72	; 0x48
 801803a:	d812      	bhi.n	8018062 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 801803c:	697b      	ldr	r3, [r7, #20]
 801803e:	009b      	lsls	r3, r3, #2
 8018040:	68fa      	ldr	r2, [r7, #12]
 8018042:	4413      	add	r3, r2
 8018044:	79fa      	ldrb	r2, [r7, #7]
 8018046:	4611      	mov	r1, r2
 8018048:	4618      	mov	r0, r3
 801804a:	f7ff fee6 	bl	8017e1a <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 801804e:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8018050:	693b      	ldr	r3, [r7, #16]
 8018052:	2b00      	cmp	r3, #0
 8018054:	d001      	beq.n	801805a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8018056:	693b      	ldr	r3, [r7, #16]
 8018058:	e004      	b.n	8018064 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 801805a:	697b      	ldr	r3, [r7, #20]
 801805c:	3301      	adds	r3, #1
 801805e:	617b      	str	r3, [r7, #20]
 8018060:	e7e9      	b.n	8018036 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8018062:	2300      	movs	r3, #0
}
 8018064:	4618      	mov	r0, r3
 8018066:	3718      	adds	r7, #24
 8018068:	46bd      	mov	sp, r7
 801806a:	bd80      	pop	{r7, pc}

0801806c <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 801806c:	b5b0      	push	{r4, r5, r7, lr}
 801806e:	b082      	sub	sp, #8
 8018070:	af00      	add	r7, sp, #0
 8018072:	6078      	str	r0, [r7, #4]
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	2448      	movs	r4, #72	; 0x48
 8018078:	461d      	mov	r5, r3
 801807a:	2c00      	cmp	r4, #0
 801807c:	db05      	blt.n	801808a <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 801807e:	4628      	mov	r0, r5
 8018080:	f7ff fa84 	bl	801758c <_ZN22MemoryLeakDetectorListC1Ev>
 8018084:	3504      	adds	r5, #4
 8018086:	3c01      	subs	r4, #1
 8018088:	e7f7      	b.n	801807a <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	4618      	mov	r0, r3
 801808e:	3708      	adds	r7, #8
 8018090:	46bd      	mov	sp, r7
 8018092:	bdb0      	pop	{r4, r5, r7, pc}

08018094 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8018094:	b590      	push	{r4, r7, lr}
 8018096:	b083      	sub	sp, #12
 8018098:	af00      	add	r7, sp, #0
 801809a:	6078      	str	r0, [r7, #4]
 801809c:	6039      	str	r1, [r7, #0]
 801809e:	4a1d      	ldr	r2, [pc, #116]	; (8018114 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	601a      	str	r2, [r3, #0]
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	330c      	adds	r3, #12
 80180a8:	4618      	mov	r0, r3
 80180aa:	f7ff fbe3 	bl	8017874 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80180b4:	331c      	adds	r3, #28
 80180b6:	4618      	mov	r0, r3
 80180b8:	f7ff ffd8 	bl	801806c <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80180c2:	2201      	movs	r2, #1
 80180c4:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80180cc:	3304      	adds	r3, #4
 80180ce:	2201      	movs	r2, #1
 80180d0:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	2201      	movs	r2, #1
 80180d6:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80180de:	3308      	adds	r3, #8
 80180e0:	2200      	movs	r2, #0
 80180e2:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	683a      	ldr	r2, [r7, #0]
 80180e8:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 80180ea:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 80180ee:	490a      	ldr	r1, [pc, #40]	; (8018118 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 80180f0:	2004      	movs	r0, #4
 80180f2:	f7f3 fb17 	bl	800b724 <_ZnwjPKci>
 80180f6:	4604      	mov	r4, r0
 80180f8:	4620      	mov	r0, r4
 80180fa:	f7f5 fbe7 	bl	800d8cc <_ZN11SimpleMutexC1Ev>
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8018104:	330c      	adds	r3, #12
 8018106:	601c      	str	r4, [r3, #0]
}
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	4618      	mov	r0, r3
 801810c:	370c      	adds	r7, #12
 801810e:	46bd      	mov	sp, r7
 8018110:	bd90      	pop	{r4, r7, pc}
 8018112:	bf00      	nop
 8018114:	0802a65c 	.word	0x0802a65c
 8018118:	080277a8 	.word	0x080277a8

0801811c <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 801811c:	b590      	push	{r4, r7, lr}
 801811e:	b083      	sub	sp, #12
 8018120:	af00      	add	r7, sp, #0
 8018122:	6078      	str	r0, [r7, #4]
 8018124:	4a0e      	ldr	r2, [pc, #56]	; (8018160 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8018130:	330c      	adds	r3, #12
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d00d      	beq.n	8018154 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801813e:	330c      	adds	r3, #12
 8018140:	681c      	ldr	r4, [r3, #0]
 8018142:	2c00      	cmp	r4, #0
 8018144:	d006      	beq.n	8018154 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8018146:	4620      	mov	r0, r4
 8018148:	f7f5 fbd2 	bl	800d8f0 <_ZN11SimpleMutexD1Ev>
 801814c:	2104      	movs	r1, #4
 801814e:	4620      	mov	r0, r4
 8018150:	f7f3 fafc 	bl	800b74c <_ZdlPvj>
    }
}
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	4618      	mov	r0, r3
 8018158:	370c      	adds	r7, #12
 801815a:	46bd      	mov	sp, r7
 801815c:	bd90      	pop	{r4, r7, pc}
 801815e:	bf00      	nop
 8018160:	0802a65c 	.word	0x0802a65c

08018164 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8018164:	b580      	push	{r7, lr}
 8018166:	b082      	sub	sp, #8
 8018168:	af00      	add	r7, sp, #0
 801816a:	6078      	str	r0, [r7, #4]
}
 801816c:	6878      	ldr	r0, [r7, #4]
 801816e:	f7ff ffd5 	bl	801811c <_ZN18MemoryLeakDetectorD1Ev>
 8018172:	f241 1150 	movw	r1, #4432	; 0x1150
 8018176:	6878      	ldr	r0, [r7, #4]
 8018178:	f7f3 fae8 	bl	800b74c <_ZdlPvj>
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	4618      	mov	r0, r3
 8018180:	3708      	adds	r7, #8
 8018182:	46bd      	mov	sp, r7
 8018184:	bd80      	pop	{r7, pc}

08018186 <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8018186:	b580      	push	{r7, lr}
 8018188:	b082      	sub	sp, #8
 801818a:	af00      	add	r7, sp, #0
 801818c:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	330c      	adds	r3, #12
 8018192:	4618      	mov	r0, r3
 8018194:	f7ff fd72 	bl	8017c7c <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	2203      	movs	r2, #3
 801819c:	721a      	strb	r2, [r3, #8]
}
 801819e:	bf00      	nop
 80181a0:	3708      	adds	r7, #8
 80181a2:	46bd      	mov	sp, r7
 80181a4:	bd80      	pop	{r7, pc}

080181a6 <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 80181a6:	b480      	push	{r7}
 80181a8:	b083      	sub	sp, #12
 80181aa:	af00      	add	r7, sp, #0
 80181ac:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	2202      	movs	r2, #2
 80181b2:	721a      	strb	r2, [r3, #8]
}
 80181b4:	bf00      	nop
 80181b6:	370c      	adds	r7, #12
 80181b8:	46bd      	mov	sp, r7
 80181ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181be:	4770      	bx	lr

080181c0 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 80181c0:	b480      	push	{r7}
 80181c2:	b083      	sub	sp, #12
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	2202      	movs	r2, #2
 80181cc:	721a      	strb	r2, [r3, #8]
}
 80181ce:	bf00      	nop
 80181d0:	370c      	adds	r7, #12
 80181d2:	46bd      	mov	sp, r7
 80181d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d8:	4770      	bx	lr

080181da <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 80181da:	b480      	push	{r7}
 80181dc:	b083      	sub	sp, #12
 80181de:	af00      	add	r7, sp, #0
 80181e0:	6078      	str	r0, [r7, #4]
    return mutex_;
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80181e8:	330c      	adds	r3, #12
 80181ea:	681b      	ldr	r3, [r3, #0]
}
 80181ec:	4618      	mov	r0, r3
 80181ee:	370c      	adds	r7, #12
 80181f0:	46bd      	mov	sp, r7
 80181f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181f6:	4770      	bx	lr

080181f8 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 80181f8:	b480      	push	{r7}
 80181fa:	b083      	sub	sp, #12
 80181fc:	af00      	add	r7, sp, #0
 80181fe:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	f023 0303 	bic.w	r3, r3, #3
 8018206:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 8018208:	4618      	mov	r0, r3
 801820a:	370c      	adds	r7, #12
 801820c:	46bd      	mov	sp, r7
 801820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018212:	4770      	bx	lr

08018214 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b082      	sub	sp, #8
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
 801821c:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 801821e:	683b      	ldr	r3, [r7, #0]
 8018220:	3303      	adds	r3, #3
 8018222:	4618      	mov	r0, r3
 8018224:	f7ff ffe8 	bl	80181f8 <_ZL31calculateVoidPointerAlignedSizej>
 8018228:	4603      	mov	r3, r0
}
 801822a:	4618      	mov	r0, r3
 801822c:	3708      	adds	r7, #8
 801822e:	46bd      	mov	sp, r7
 8018230:	bd80      	pop	{r7, pc}

08018232 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 8018232:	b580      	push	{r7, lr}
 8018234:	b084      	sub	sp, #16
 8018236:	af00      	add	r7, sp, #0
 8018238:	60f8      	str	r0, [r7, #12]
 801823a:	60b9      	str	r1, [r7, #8]
 801823c:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 801823e:	6879      	ldr	r1, [r7, #4]
 8018240:	68f8      	ldr	r0, [r7, #12]
 8018242:	f7ff ffe7 	bl	8018214 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8018246:	4602      	mov	r2, r0
 8018248:	68bb      	ldr	r3, [r7, #8]
 801824a:	4413      	add	r3, r2
}
 801824c:	4618      	mov	r0, r3
 801824e:	3710      	adds	r7, #16
 8018250:	46bd      	mov	sp, r7
 8018252:	bd80      	pop	{r7, pc}

08018254 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8018254:	b580      	push	{r7, lr}
 8018256:	b08a      	sub	sp, #40	; 0x28
 8018258:	af06      	add	r7, sp, #24
 801825a:	60f8      	str	r0, [r7, #12]
 801825c:	60b9      	str	r1, [r7, #8]
 801825e:	607a      	str	r2, [r7, #4]
 8018260:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8018262:	68fb      	ldr	r3, [r7, #12]
 8018264:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8018268:	3304      	adds	r3, #4
 801826a:	681a      	ldr	r2, [r3, #0]
 801826c:	1c51      	adds	r1, r2, #1
 801826e:	68fb      	ldr	r3, [r7, #12]
 8018270:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8018274:	3304      	adds	r3, #4
 8018276:	6019      	str	r1, [r3, #0]
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	7a19      	ldrb	r1, [r3, #8]
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8018282:	3308      	adds	r3, #8
 8018284:	781b      	ldrb	r3, [r3, #0]
 8018286:	6a38      	ldr	r0, [r7, #32]
 8018288:	9004      	str	r0, [sp, #16]
 801828a:	69f8      	ldr	r0, [r7, #28]
 801828c:	9003      	str	r0, [sp, #12]
 801828e:	9302      	str	r3, [sp, #8]
 8018290:	9101      	str	r1, [sp, #4]
 8018292:	69bb      	ldr	r3, [r7, #24]
 8018294:	9300      	str	r3, [sp, #0]
 8018296:	683b      	ldr	r3, [r7, #0]
 8018298:	6879      	ldr	r1, [r7, #4]
 801829a:	68b8      	ldr	r0, [r7, #8]
 801829c:	f7ff fcfb 	bl	8017c96 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 80182a0:	68bb      	ldr	r3, [r7, #8]
 80182a2:	689a      	ldr	r2, [r3, #8]
 80182a4:	68bb      	ldr	r3, [r7, #8]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	4413      	add	r3, r2
 80182aa:	4619      	mov	r1, r3
 80182ac:	68f8      	ldr	r0, [r7, #12]
 80182ae:	f000 f861 	bl	8018374 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80182b8:	331c      	adds	r3, #28
 80182ba:	68b9      	ldr	r1, [r7, #8]
 80182bc:	4618      	mov	r0, r3
 80182be:	f7ff fe11 	bl	8017ee4 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 80182c2:	bf00      	nop
 80182c4:	3710      	adds	r7, #16
 80182c6:	46bd      	mov	sp, r7
 80182c8:	bd80      	pop	{r7, pc}

080182ca <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80182ca:	b580      	push	{r7, lr}
 80182cc:	b08a      	sub	sp, #40	; 0x28
 80182ce:	af04      	add	r7, sp, #16
 80182d0:	60f8      	str	r0, [r7, #12]
 80182d2:	60b9      	str	r1, [r7, #8]
 80182d4:	607a      	str	r2, [r7, #4]
 80182d6:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80182d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80182dc:	9302      	str	r3, [sp, #8]
 80182de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182e0:	9301      	str	r3, [sp, #4]
 80182e2:	6a3b      	ldr	r3, [r7, #32]
 80182e4:	9300      	str	r3, [sp, #0]
 80182e6:	683b      	ldr	r3, [r7, #0]
 80182e8:	687a      	ldr	r2, [r7, #4]
 80182ea:	68b9      	ldr	r1, [r7, #8]
 80182ec:	68f8      	ldr	r0, [r7, #12]
 80182ee:	f000 f96f 	bl	80185d0 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 80182f2:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 80182f4:	697b      	ldr	r3, [r7, #20]
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d101      	bne.n	80182fe <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 80182fa:	2300      	movs	r3, #0
 80182fc:	e017      	b.n	801832e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 80182fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018302:	9300      	str	r3, [sp, #0]
 8018304:	697b      	ldr	r3, [r7, #20]
 8018306:	683a      	ldr	r2, [r7, #0]
 8018308:	68b9      	ldr	r1, [r7, #8]
 801830a:	68f8      	ldr	r0, [r7, #12]
 801830c:	f000 f98a 	bl	8018624 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8018310:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 8018312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018314:	9302      	str	r3, [sp, #8]
 8018316:	6a3b      	ldr	r3, [r7, #32]
 8018318:	9301      	str	r3, [sp, #4]
 801831a:	68bb      	ldr	r3, [r7, #8]
 801831c:	9300      	str	r3, [sp, #0]
 801831e:	683b      	ldr	r3, [r7, #0]
 8018320:	697a      	ldr	r2, [r7, #20]
 8018322:	6939      	ldr	r1, [r7, #16]
 8018324:	68f8      	ldr	r0, [r7, #12]
 8018326:	f7ff ff95 	bl	8018254 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 801832a:	693b      	ldr	r3, [r7, #16]
 801832c:	689b      	ldr	r3, [r3, #8]
}
 801832e:	4618      	mov	r0, r3
 8018330:	3718      	adds	r7, #24
 8018332:	46bd      	mov	sp, r7
 8018334:	bd80      	pop	{r7, pc}
	...

08018338 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8018338:	b580      	push	{r7, lr}
 801833a:	b084      	sub	sp, #16
 801833c:	af00      	add	r7, sp, #0
 801833e:	6078      	str	r0, [r7, #4]
 8018340:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018348:	331c      	adds	r3, #28
 801834a:	6839      	ldr	r1, [r7, #0]
 801834c:	4618      	mov	r0, r3
 801834e:	f7ff fdf6 	bl	8017f3e <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8018352:	60f8      	str	r0, [r7, #12]
  if (node)
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	2b00      	cmp	r3, #0
 8018358:	d006      	beq.n	8018368 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 801835a:	4b05      	ldr	r3, [pc, #20]	; (8018370 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	68fa      	ldr	r2, [r7, #12]
 8018360:	6812      	ldr	r2, [r2, #0]
 8018362:	21cd      	movs	r1, #205	; 0xcd
 8018364:	6838      	ldr	r0, [r7, #0]
 8018366:	4798      	blx	r3
#endif
}
 8018368:	bf00      	nop
 801836a:	3710      	adds	r7, #16
 801836c:	46bd      	mov	sp, r7
 801836e:	bd80      	pop	{r7, pc}
 8018370:	200000d8 	.word	0x200000d8

08018374 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8018374:	b480      	push	{r7}
 8018376:	b085      	sub	sp, #20
 8018378:	af00      	add	r7, sp, #0
 801837a:	6078      	str	r0, [r7, #4]
 801837c:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801837e:	2300      	movs	r3, #0
 8018380:	60fb      	str	r3, [r7, #12]
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	2b02      	cmp	r3, #2
 8018386:	d812      	bhi.n	80183ae <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8018388:	68f9      	ldr	r1, [r7, #12]
 801838a:	4b0c      	ldr	r3, [pc, #48]	; (80183bc <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 801838c:	fba3 2301 	umull	r2, r3, r3, r1
 8018390:	085a      	lsrs	r2, r3, #1
 8018392:	4613      	mov	r3, r2
 8018394:	005b      	lsls	r3, r3, #1
 8018396:	4413      	add	r3, r2
 8018398:	1aca      	subs	r2, r1, r3
 801839a:	6839      	ldr	r1, [r7, #0]
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	440b      	add	r3, r1
 80183a0:	4907      	ldr	r1, [pc, #28]	; (80183c0 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 80183a2:	5c8a      	ldrb	r2, [r1, r2]
 80183a4:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80183a6:	68fb      	ldr	r3, [r7, #12]
 80183a8:	3301      	adds	r3, #1
 80183aa:	60fb      	str	r3, [r7, #12]
 80183ac:	e7e9      	b.n	8018382 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 80183ae:	bf00      	nop
 80183b0:	3714      	adds	r7, #20
 80183b2:	46bd      	mov	sp, r7
 80183b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183b8:	4770      	bx	lr
 80183ba:	bf00      	nop
 80183bc:	aaaaaaab 	.word	0xaaaaaaab
 80183c0:	0802a650 	.word	0x0802a650

080183c4 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 80183c4:	b480      	push	{r7}
 80183c6:	b085      	sub	sp, #20
 80183c8:	af00      	add	r7, sp, #0
 80183ca:	6078      	str	r0, [r7, #4]
 80183cc:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80183ce:	2300      	movs	r3, #0
 80183d0:	60fb      	str	r3, [r7, #12]
 80183d2:	68fb      	ldr	r3, [r7, #12]
 80183d4:	2b02      	cmp	r3, #2
 80183d6:	d816      	bhi.n	8018406 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 80183d8:	683a      	ldr	r2, [r7, #0]
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	4413      	add	r3, r2
 80183de:	7818      	ldrb	r0, [r3, #0]
 80183e0:	68f9      	ldr	r1, [r7, #12]
 80183e2:	4b0c      	ldr	r3, [pc, #48]	; (8018414 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 80183e4:	fba3 2301 	umull	r2, r3, r3, r1
 80183e8:	085a      	lsrs	r2, r3, #1
 80183ea:	4613      	mov	r3, r2
 80183ec:	005b      	lsls	r3, r3, #1
 80183ee:	4413      	add	r3, r2
 80183f0:	1aca      	subs	r2, r1, r3
 80183f2:	4b09      	ldr	r3, [pc, #36]	; (8018418 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 80183f4:	5c9b      	ldrb	r3, [r3, r2]
 80183f6:	4298      	cmp	r0, r3
 80183f8:	d001      	beq.n	80183fe <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 80183fa:	2300      	movs	r3, #0
 80183fc:	e004      	b.n	8018408 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80183fe:	68fb      	ldr	r3, [r7, #12]
 8018400:	3301      	adds	r3, #1
 8018402:	60fb      	str	r3, [r7, #12]
 8018404:	e7e5      	b.n	80183d2 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 8018406:	2301      	movs	r3, #1
}
 8018408:	4618      	mov	r0, r3
 801840a:	3714      	adds	r7, #20
 801840c:	46bd      	mov	sp, r7
 801840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018412:	4770      	bx	lr
 8018414:	aaaaaaab 	.word	0xaaaaaaab
 8018418:	0802a650 	.word	0x0802a650

0801841c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b084      	sub	sp, #16
 8018420:	af00      	add	r7, sp, #0
 8018422:	60f8      	str	r0, [r7, #12]
 8018424:	60b9      	str	r1, [r7, #8]
 8018426:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8018428:	68ba      	ldr	r2, [r7, #8]
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	429a      	cmp	r2, r3
 801842e:	d101      	bne.n	8018434 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8018430:	2301      	movs	r3, #1
 8018432:	e013      	b.n	801845c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801843a:	781b      	ldrb	r3, [r3, #0]
 801843c:	f083 0301 	eor.w	r3, r3, #1
 8018440:	b2db      	uxtb	r3, r3
 8018442:	2b00      	cmp	r3, #0
 8018444:	d001      	beq.n	801844a <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8018446:	2301      	movs	r3, #1
 8018448:	e008      	b.n	801845c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	331c      	adds	r3, #28
 8018450:	681b      	ldr	r3, [r3, #0]
 8018452:	68b9      	ldr	r1, [r7, #8]
 8018454:	6878      	ldr	r0, [r7, #4]
 8018456:	4798      	blx	r3
 8018458:	4603      	mov	r3, r0
 801845a:	bf00      	nop
}
 801845c:	4618      	mov	r0, r3
 801845e:	3710      	adds	r7, #16
 8018460:	46bd      	mov	sp, r7
 8018462:	bd80      	pop	{r7, pc}

08018464 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8018464:	b590      	push	{r4, r7, lr}
 8018466:	b087      	sub	sp, #28
 8018468:	af02      	add	r7, sp, #8
 801846a:	60f8      	str	r0, [r7, #12]
 801846c:	60b9      	str	r1, [r7, #8]
 801846e:	607a      	str	r2, [r7, #4]
 8018470:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8018472:	68bb      	ldr	r3, [r7, #8]
 8018474:	695a      	ldr	r2, [r3, #20]
 8018476:	68bb      	ldr	r3, [r7, #8]
 8018478:	695b      	ldr	r3, [r3, #20]
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	3328      	adds	r3, #40	; 0x28
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	4610      	mov	r0, r2
 8018482:	4798      	blx	r3
 8018484:	4604      	mov	r4, r0
 8018486:	6a3b      	ldr	r3, [r7, #32]
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	3328      	adds	r3, #40	; 0x28
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	6a38      	ldr	r0, [r7, #32]
 8018490:	4798      	blx	r3
 8018492:	4603      	mov	r3, r0
 8018494:	461a      	mov	r2, r3
 8018496:	4621      	mov	r1, r4
 8018498:	68f8      	ldr	r0, [r7, #12]
 801849a:	f7ff ffbf 	bl	801841c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 801849e:	4603      	mov	r3, r0
 80184a0:	f083 0301 	eor.w	r3, r3, #1
 80184a4:	b2db      	uxtb	r3, r3
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d014      	beq.n	80184d4 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	f103 040c 	add.w	r4, r3, #12
 80184b0:	6a3b      	ldr	r3, [r7, #32]
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	3328      	adds	r3, #40	; 0x28
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	6a38      	ldr	r0, [r7, #32]
 80184ba:	4798      	blx	r3
 80184bc:	4602      	mov	r2, r0
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	685b      	ldr	r3, [r3, #4]
 80184c2:	9301      	str	r3, [sp, #4]
 80184c4:	9200      	str	r2, [sp, #0]
 80184c6:	683b      	ldr	r3, [r7, #0]
 80184c8:	687a      	ldr	r2, [r7, #4]
 80184ca:	68b9      	ldr	r1, [r7, #8]
 80184cc:	4620      	mov	r0, r4
 80184ce:	f7ff fb4d 	bl	8017b6c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 80184d2:	e02e      	b.n	8018532 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 80184d4:	68bb      	ldr	r3, [r7, #8]
 80184d6:	689a      	ldr	r2, [r3, #8]
 80184d8:	68bb      	ldr	r3, [r7, #8]
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	4413      	add	r3, r2
 80184de:	4619      	mov	r1, r3
 80184e0:	68f8      	ldr	r0, [r7, #12]
 80184e2:	f7ff ff6f 	bl	80183c4 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 80184e6:	4603      	mov	r3, r0
 80184e8:	f083 0301 	eor.w	r3, r3, #1
 80184ec:	b2db      	uxtb	r3, r3
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d014      	beq.n	801851c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	f103 040c 	add.w	r4, r3, #12
 80184f8:	6a3b      	ldr	r3, [r7, #32]
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	3328      	adds	r3, #40	; 0x28
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	6a38      	ldr	r0, [r7, #32]
 8018502:	4798      	blx	r3
 8018504:	4602      	mov	r2, r0
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	685b      	ldr	r3, [r3, #4]
 801850a:	9301      	str	r3, [sp, #4]
 801850c:	9200      	str	r2, [sp, #0]
 801850e:	683b      	ldr	r3, [r7, #0]
 8018510:	687a      	ldr	r2, [r7, #4]
 8018512:	68b9      	ldr	r1, [r7, #8]
 8018514:	4620      	mov	r0, r4
 8018516:	f7ff fb4f 	bl	8017bb8 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 801851a:	e00a      	b.n	8018532 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 801851c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018520:	2b00      	cmp	r3, #0
 8018522:	d006      	beq.n	8018532 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8018524:	6a3b      	ldr	r3, [r7, #32]
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	3324      	adds	r3, #36	; 0x24
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	68b9      	ldr	r1, [r7, #8]
 801852e:	6a38      	ldr	r0, [r7, #32]
 8018530:	4798      	blx	r3
}
 8018532:	bf00      	nop
 8018534:	3714      	adds	r7, #20
 8018536:	46bd      	mov	sp, r7
 8018538:	bd90      	pop	{r4, r7, pc}
	...

0801853c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 801853c:	b580      	push	{r7, lr}
 801853e:	b086      	sub	sp, #24
 8018540:	af02      	add	r7, sp, #8
 8018542:	60f8      	str	r0, [r7, #12]
 8018544:	60b9      	str	r1, [r7, #8]
 8018546:	607a      	str	r2, [r7, #4]
 8018548:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 801854a:	4b08      	ldr	r3, [pc, #32]	; (801856c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 801854c:	681a      	ldr	r2, [r3, #0]
 801854e:	78fb      	ldrb	r3, [r7, #3]
 8018550:	9301      	str	r3, [sp, #4]
 8018552:	2300      	movs	r3, #0
 8018554:	9300      	str	r3, [sp, #0]
 8018556:	4613      	mov	r3, r2
 8018558:	687a      	ldr	r2, [r7, #4]
 801855a:	68b9      	ldr	r1, [r7, #8]
 801855c:	68f8      	ldr	r0, [r7, #12]
 801855e:	f000 f87f 	bl	8018660 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8018562:	4603      	mov	r3, r0
}
 8018564:	4618      	mov	r0, r3
 8018566:	3710      	adds	r7, #16
 8018568:	46bd      	mov	sp, r7
 801856a:	bd80      	pop	{r7, pc}
 801856c:	20000100 	.word	0x20000100

08018570 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8018570:	b590      	push	{r4, r7, lr}
 8018572:	b085      	sub	sp, #20
 8018574:	af00      	add	r7, sp, #0
 8018576:	60f8      	str	r0, [r7, #12]
 8018578:	60b9      	str	r1, [r7, #8]
 801857a:	607a      	str	r2, [r7, #4]
 801857c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 801857e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018582:	2b00      	cmp	r3, #0
 8018584:	d00e      	beq.n	80185a4 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8018586:	68bb      	ldr	r3, [r7, #8]
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	3308      	adds	r3, #8
 801858c:	681c      	ldr	r4, [r3, #0]
 801858e:	6879      	ldr	r1, [r7, #4]
 8018590:	68f8      	ldr	r0, [r7, #12]
 8018592:	f7ff fe3f 	bl	8018214 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8018596:	4601      	mov	r1, r0
 8018598:	6a3b      	ldr	r3, [r7, #32]
 801859a:	683a      	ldr	r2, [r7, #0]
 801859c:	68b8      	ldr	r0, [r7, #8]
 801859e:	47a0      	blx	r4
 80185a0:	4603      	mov	r3, r0
 80185a2:	e010      	b.n	80185c6 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 80185a4:	68bb      	ldr	r3, [r7, #8]
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	3308      	adds	r3, #8
 80185aa:	681c      	ldr	r4, [r3, #0]
 80185ac:	6879      	ldr	r1, [r7, #4]
 80185ae:	68f8      	ldr	r0, [r7, #12]
 80185b0:	f7ff fe30 	bl	8018214 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80185b4:	4603      	mov	r3, r0
 80185b6:	f103 0120 	add.w	r1, r3, #32
 80185ba:	6a3b      	ldr	r3, [r7, #32]
 80185bc:	683a      	ldr	r2, [r7, #0]
 80185be:	68b8      	ldr	r0, [r7, #8]
 80185c0:	47a0      	blx	r4
 80185c2:	4603      	mov	r3, r0
 80185c4:	bf00      	nop
}
 80185c6:	4618      	mov	r0, r3
 80185c8:	3714      	adds	r7, #20
 80185ca:	46bd      	mov	sp, r7
 80185cc:	bd90      	pop	{r4, r7, pc}
	...

080185d0 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 80185d0:	b590      	push	{r4, r7, lr}
 80185d2:	b085      	sub	sp, #20
 80185d4:	af00      	add	r7, sp, #0
 80185d6:	60f8      	str	r0, [r7, #12]
 80185d8:	60b9      	str	r1, [r7, #8]
 80185da:	607a      	str	r2, [r7, #4]
 80185dc:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 80185de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d00b      	beq.n	80185fe <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 80185e6:	4b0e      	ldr	r3, [pc, #56]	; (8018620 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 80185e8:	681c      	ldr	r4, [r3, #0]
 80185ea:	6839      	ldr	r1, [r7, #0]
 80185ec:	68f8      	ldr	r0, [r7, #12]
 80185ee:	f7ff fe11 	bl	8018214 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80185f2:	4603      	mov	r3, r0
 80185f4:	4619      	mov	r1, r3
 80185f6:	6878      	ldr	r0, [r7, #4]
 80185f8:	47a0      	blx	r4
 80185fa:	4603      	mov	r3, r0
 80185fc:	e00c      	b.n	8018618 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 80185fe:	4b08      	ldr	r3, [pc, #32]	; (8018620 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8018600:	681c      	ldr	r4, [r3, #0]
 8018602:	6839      	ldr	r1, [r7, #0]
 8018604:	68f8      	ldr	r0, [r7, #12]
 8018606:	f7ff fe05 	bl	8018214 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801860a:	4603      	mov	r3, r0
 801860c:	3320      	adds	r3, #32
 801860e:	4619      	mov	r1, r3
 8018610:	6878      	ldr	r0, [r7, #4]
 8018612:	47a0      	blx	r4
 8018614:	4603      	mov	r3, r0
 8018616:	bf00      	nop
}
 8018618:	4618      	mov	r0, r3
 801861a:	3714      	adds	r7, #20
 801861c:	46bd      	mov	sp, r7
 801861e:	bd90      	pop	{r4, r7, pc}
 8018620:	200000cc 	.word	0x200000cc

08018624 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8018624:	b580      	push	{r7, lr}
 8018626:	b084      	sub	sp, #16
 8018628:	af00      	add	r7, sp, #0
 801862a:	60f8      	str	r0, [r7, #12]
 801862c:	60b9      	str	r1, [r7, #8]
 801862e:	607a      	str	r2, [r7, #4]
 8018630:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8018632:	7e3b      	ldrb	r3, [r7, #24]
 8018634:	2b00      	cmp	r3, #0
 8018636:	d008      	beq.n	801864a <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8018638:	68bb      	ldr	r3, [r7, #8]
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	3320      	adds	r3, #32
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	2120      	movs	r1, #32
 8018642:	68b8      	ldr	r0, [r7, #8]
 8018644:	4798      	blx	r3
 8018646:	4603      	mov	r3, r0
 8018648:	e006      	b.n	8018658 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 801864a:	687a      	ldr	r2, [r7, #4]
 801864c:	6839      	ldr	r1, [r7, #0]
 801864e:	68f8      	ldr	r0, [r7, #12]
 8018650:	f7ff fdef 	bl	8018232 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8018654:	4603      	mov	r3, r0
 8018656:	bf00      	nop
}
 8018658:	4618      	mov	r0, r3
 801865a:	3710      	adds	r7, #16
 801865c:	46bd      	mov	sp, r7
 801865e:	bd80      	pop	{r7, pc}

08018660 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8018660:	b580      	push	{r7, lr}
 8018662:	b08a      	sub	sp, #40	; 0x28
 8018664:	af04      	add	r7, sp, #16
 8018666:	60f8      	str	r0, [r7, #12]
 8018668:	60b9      	str	r1, [r7, #8]
 801866a:	607a      	str	r2, [r7, #4]
 801866c:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 801866e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018672:	9301      	str	r3, [sp, #4]
 8018674:	6a3b      	ldr	r3, [r7, #32]
 8018676:	9300      	str	r3, [sp, #0]
 8018678:	683b      	ldr	r3, [r7, #0]
 801867a:	687a      	ldr	r2, [r7, #4]
 801867c:	68b9      	ldr	r1, [r7, #8]
 801867e:	68f8      	ldr	r0, [r7, #12]
 8018680:	f7ff ff76 	bl	8018570 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8018684:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8018686:	697b      	ldr	r3, [r7, #20]
 8018688:	2b00      	cmp	r3, #0
 801868a:	d101      	bne.n	8018690 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 801868c:	2300      	movs	r3, #0
 801868e:	e017      	b.n	80186c0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8018690:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018694:	9300      	str	r3, [sp, #0]
 8018696:	697b      	ldr	r3, [r7, #20]
 8018698:	687a      	ldr	r2, [r7, #4]
 801869a:	68b9      	ldr	r1, [r7, #8]
 801869c:	68f8      	ldr	r0, [r7, #12]
 801869e:	f7ff ffc1 	bl	8018624 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80186a2:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 80186a4:	6a3b      	ldr	r3, [r7, #32]
 80186a6:	9302      	str	r3, [sp, #8]
 80186a8:	683b      	ldr	r3, [r7, #0]
 80186aa:	9301      	str	r3, [sp, #4]
 80186ac:	68bb      	ldr	r3, [r7, #8]
 80186ae:	9300      	str	r3, [sp, #0]
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	697a      	ldr	r2, [r7, #20]
 80186b4:	6939      	ldr	r1, [r7, #16]
 80186b6:	68f8      	ldr	r0, [r7, #12]
 80186b8:	f7ff fdcc 	bl	8018254 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 80186bc:	693b      	ldr	r3, [r7, #16]
 80186be:	689b      	ldr	r3, [r3, #8]
}
 80186c0:	4618      	mov	r0, r3
 80186c2:	3718      	adds	r7, #24
 80186c4:	46bd      	mov	sp, r7
 80186c6:	bd80      	pop	{r7, pc}

080186c8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 80186c8:	b590      	push	{r4, r7, lr}
 80186ca:	b089      	sub	sp, #36	; 0x24
 80186cc:	af02      	add	r7, sp, #8
 80186ce:	60f8      	str	r0, [r7, #12]
 80186d0:	60b9      	str	r1, [r7, #8]
 80186d2:	607a      	str	r2, [r7, #4]
 80186d4:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d03a      	beq.n	8018752 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80186e2:	331c      	adds	r3, #28
 80186e4:	6879      	ldr	r1, [r7, #4]
 80186e6:	4618      	mov	r0, r3
 80186e8:	f7ff fc13 	bl	8017f12 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 80186ec:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 80186ee:	697b      	ldr	r3, [r7, #20]
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d10b      	bne.n	801870c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	f103 000c 	add.w	r0, r3, #12
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	685b      	ldr	r3, [r3, #4]
 80186fe:	9300      	str	r3, [sp, #0]
 8018700:	68bb      	ldr	r3, [r7, #8]
 8018702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018704:	6839      	ldr	r1, [r7, #0]
 8018706:	f7ff fa0d 	bl	8017b24 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 801870a:	e023      	b.n	8018754 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 801870c:	68b8      	ldr	r0, [r7, #8]
 801870e:	f7f8 ff95 	bl	801163c <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 8018712:	4603      	mov	r3, r0
 8018714:	f083 0301 	eor.w	r3, r3, #1
 8018718:	b2db      	uxtb	r3, r3
 801871a:	2b00      	cmp	r3, #0
 801871c:	d01a      	beq.n	8018754 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 801871e:	697b      	ldr	r3, [r7, #20]
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8018724:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018728:	9301      	str	r3, [sp, #4]
 801872a:	68bb      	ldr	r3, [r7, #8]
 801872c:	9300      	str	r3, [sp, #0]
 801872e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018730:	683a      	ldr	r2, [r7, #0]
 8018732:	6979      	ldr	r1, [r7, #20]
 8018734:	68f8      	ldr	r0, [r7, #12]
 8018736:	f7ff fe95 	bl	8018464 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 801873a:	68bb      	ldr	r3, [r7, #8]
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	330c      	adds	r3, #12
 8018740:	681c      	ldr	r4, [r3, #0]
 8018742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018744:	9300      	str	r3, [sp, #0]
 8018746:	683b      	ldr	r3, [r7, #0]
 8018748:	693a      	ldr	r2, [r7, #16]
 801874a:	6879      	ldr	r1, [r7, #4]
 801874c:	68b8      	ldr	r0, [r7, #8]
 801874e:	47a0      	blx	r4
 8018750:	e000      	b.n	8018754 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 8018752:	bf00      	nop
    }
}
 8018754:	371c      	adds	r7, #28
 8018756:	46bd      	mov	sp, r7
 8018758:	bd90      	pop	{r4, r7, pc}
	...

0801875c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 801875c:	b580      	push	{r7, lr}
 801875e:	b086      	sub	sp, #24
 8018760:	af02      	add	r7, sp, #8
 8018762:	60f8      	str	r0, [r7, #12]
 8018764:	60b9      	str	r1, [r7, #8]
 8018766:	607a      	str	r2, [r7, #4]
 8018768:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 801876a:	4b08      	ldr	r3, [pc, #32]	; (801878c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 801876c:	681a      	ldr	r2, [r3, #0]
 801876e:	78fb      	ldrb	r3, [r7, #3]
 8018770:	9301      	str	r3, [sp, #4]
 8018772:	2300      	movs	r3, #0
 8018774:	9300      	str	r3, [sp, #0]
 8018776:	4613      	mov	r3, r2
 8018778:	687a      	ldr	r2, [r7, #4]
 801877a:	68b9      	ldr	r1, [r7, #8]
 801877c:	68f8      	ldr	r0, [r7, #12]
 801877e:	f7ff ffa3 	bl	80186c8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8018782:	bf00      	nop
 8018784:	3710      	adds	r7, #16
 8018786:	46bd      	mov	sp, r7
 8018788:	bd80      	pop	{r7, pc}
 801878a:	bf00      	nop
 801878c:	20000100 	.word	0x20000100

08018790 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8018790:	b580      	push	{r7, lr}
 8018792:	b08a      	sub	sp, #40	; 0x28
 8018794:	af04      	add	r7, sp, #16
 8018796:	60f8      	str	r0, [r7, #12]
 8018798:	60b9      	str	r1, [r7, #8]
 801879a:	607a      	str	r2, [r7, #4]
 801879c:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d023      	beq.n	80187ec <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 80187a4:	68fb      	ldr	r3, [r7, #12]
 80187a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80187aa:	331c      	adds	r3, #28
 80187ac:	6879      	ldr	r1, [r7, #4]
 80187ae:	4618      	mov	r0, r3
 80187b0:	f7ff fbaf 	bl	8017f12 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 80187b4:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 80187b6:	697b      	ldr	r3, [r7, #20]
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d10c      	bne.n	80187d6 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 80187bc:	68fb      	ldr	r3, [r7, #12]
 80187be:	f103 000c 	add.w	r0, r3, #12
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	685b      	ldr	r3, [r3, #4]
 80187c6:	9300      	str	r3, [sp, #0]
 80187c8:	68bb      	ldr	r3, [r7, #8]
 80187ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187cc:	6a39      	ldr	r1, [r7, #32]
 80187ce:	f7ff f9a9 	bl	8017b24 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 80187d2:	2300      	movs	r3, #0
 80187d4:	e019      	b.n	801880a <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 80187d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80187da:	9301      	str	r3, [sp, #4]
 80187dc:	68bb      	ldr	r3, [r7, #8]
 80187de:	9300      	str	r3, [sp, #0]
 80187e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187e2:	6a3a      	ldr	r2, [r7, #32]
 80187e4:	6979      	ldr	r1, [r7, #20]
 80187e6:	68f8      	ldr	r0, [r7, #12]
 80187e8:	f7ff fe3c 	bl	8018464 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80187ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80187f0:	9302      	str	r3, [sp, #8]
 80187f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187f4:	9301      	str	r3, [sp, #4]
 80187f6:	6a3b      	ldr	r3, [r7, #32]
 80187f8:	9300      	str	r3, [sp, #0]
 80187fa:	683b      	ldr	r3, [r7, #0]
 80187fc:	687a      	ldr	r2, [r7, #4]
 80187fe:	68b9      	ldr	r1, [r7, #8]
 8018800:	68f8      	ldr	r0, [r7, #12]
 8018802:	f7ff fd62 	bl	80182ca <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8018806:	4603      	mov	r3, r0
 8018808:	bf00      	nop
}
 801880a:	4618      	mov	r0, r3
 801880c:	3718      	adds	r7, #24
 801880e:	46bd      	mov	sp, r7
 8018810:	bd80      	pop	{r7, pc}

08018812 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 8018812:	b580      	push	{r7, lr}
 8018814:	b084      	sub	sp, #16
 8018816:	af00      	add	r7, sp, #0
 8018818:	6078      	str	r0, [r7, #4]
 801881a:	460b      	mov	r3, r1
 801881c:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018824:	331c      	adds	r3, #28
 8018826:	78fa      	ldrb	r2, [r7, #3]
 8018828:	4611      	mov	r1, r2
 801882a:	4618      	mov	r0, r3
 801882c:	f7ff fbc0 	bl	8017fb0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8018830:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	330c      	adds	r3, #12
 8018836:	4618      	mov	r0, r3
 8018838:	f7ff f882 	bl	8017940 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 801883c:	68fb      	ldr	r3, [r7, #12]
 801883e:	2b00      	cmp	r3, #0
 8018840:	d010      	beq.n	8018864 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	330c      	adds	r3, #12
 8018846:	68f9      	ldr	r1, [r7, #12]
 8018848:	4618      	mov	r0, r3
 801884a:	f7ff f897 	bl	801797c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018854:	331c      	adds	r3, #28
 8018856:	78fa      	ldrb	r2, [r7, #3]
 8018858:	68f9      	ldr	r1, [r7, #12]
 801885a:	4618      	mov	r0, r3
 801885c:	f7ff fbcb 	bl	8017ff6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8018860:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8018862:	e7eb      	b.n	801883c <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	330c      	adds	r3, #12
 8018868:	4618      	mov	r0, r3
 801886a:	f7ff f8e7 	bl	8017a3c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 801886e:	bf00      	nop
 8018870:	3710      	adds	r7, #16
 8018872:	46bd      	mov	sp, r7
 8018874:	bd80      	pop	{r7, pc}

08018876 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8018876:	b580      	push	{r7, lr}
 8018878:	b082      	sub	sp, #8
 801887a:	af00      	add	r7, sp, #0
 801887c:	6078      	str	r0, [r7, #4]
 801887e:	460b      	mov	r3, r1
 8018880:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 8018882:	78fb      	ldrb	r3, [r7, #3]
 8018884:	4619      	mov	r1, r3
 8018886:	6878      	ldr	r0, [r7, #4]
 8018888:	f7ff ffc3 	bl	8018812 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	330c      	adds	r3, #12
 8018890:	4618      	mov	r0, r3
 8018892:	f7ff f9e5 	bl	8017c60 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8018896:	4603      	mov	r3, r0
}
 8018898:	4618      	mov	r0, r3
 801889a:	3708      	adds	r7, #8
 801889c:	46bd      	mov	sp, r7
 801889e:	bd80      	pop	{r7, pc}

080188a0 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 80188a0:	b580      	push	{r7, lr}
 80188a2:	b084      	sub	sp, #16
 80188a4:	af00      	add	r7, sp, #0
 80188a6:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80188ae:	331c      	adds	r3, #28
 80188b0:	2103      	movs	r1, #3
 80188b2:	4618      	mov	r0, r3
 80188b4:	f7ff fb7c 	bl	8017fb0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 80188b8:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80188ba:	68fb      	ldr	r3, [r7, #12]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d011      	beq.n	80188e4 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 80188c0:	68fb      	ldr	r3, [r7, #12]
 80188c2:	7e1b      	ldrb	r3, [r3, #24]
 80188c4:	2b03      	cmp	r3, #3
 80188c6:	d102      	bne.n	80188ce <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	2202      	movs	r2, #2
 80188cc:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80188d4:	331c      	adds	r3, #28
 80188d6:	2203      	movs	r2, #3
 80188d8:	68f9      	ldr	r1, [r7, #12]
 80188da:	4618      	mov	r0, r3
 80188dc:	f7ff fb8b 	bl	8017ff6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80188e0:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80188e2:	e7ea      	b.n	80188ba <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 80188e4:	bf00      	nop
 80188e6:	3710      	adds	r7, #16
 80188e8:	46bd      	mov	sp, r7
 80188ea:	bd80      	pop	{r7, pc}

080188ec <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	b082      	sub	sp, #8
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	6078      	str	r0, [r7, #4]
 80188f4:	460b      	mov	r3, r1
 80188f6:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80188fe:	331c      	adds	r3, #28
 8018900:	78fa      	ldrb	r2, [r7, #3]
 8018902:	4611      	mov	r1, r2
 8018904:	4618      	mov	r0, r3
 8018906:	f7ff fb30 	bl	8017f6a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 801890a:	4603      	mov	r3, r0
}
 801890c:	4618      	mov	r0, r3
 801890e:	3708      	adds	r7, #8
 8018910:	46bd      	mov	sp, r7
 8018912:	bd80      	pop	{r7, pc}

08018914 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 8018914:	b580      	push	{r7, lr}
 8018916:	b084      	sub	sp, #16
 8018918:	af00      	add	r7, sp, #0
 801891a:	60f8      	str	r0, [r7, #12]
 801891c:	60b9      	str	r1, [r7, #8]
 801891e:	607a      	str	r2, [r7, #4]
 8018920:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	68b9      	ldr	r1, [r7, #8]
 8018926:	4618      	mov	r0, r3
 8018928:	f7f5 fb13 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	3308      	adds	r3, #8
 8018930:	6879      	ldr	r1, [r7, #4]
 8018932:	4618      	mov	r0, r3
 8018934:	f7f5 fb0d 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
 8018938:	68fb      	ldr	r3, [r7, #12]
 801893a:	683a      	ldr	r2, [r7, #0]
 801893c:	611a      	str	r2, [r3, #16]
 801893e:	68fb      	ldr	r3, [r7, #12]
 8018940:	2200      	movs	r2, #0
 8018942:	615a      	str	r2, [r3, #20]
 8018944:	68fb      	ldr	r3, [r7, #12]
 8018946:	4618      	mov	r0, r3
 8018948:	3710      	adds	r7, #16
 801894a:	46bd      	mov	sp, r7
 801894c:	bd80      	pop	{r7, pc}

0801894e <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 801894e:	b480      	push	{r7}
 8018950:	b083      	sub	sp, #12
 8018952:	af00      	add	r7, sp, #0
 8018954:	6078      	str	r0, [r7, #4]
 8018956:	6039      	str	r1, [r7, #0]
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	4618      	mov	r0, r3
 801895c:	370c      	adds	r7, #12
 801895e:	46bd      	mov	sp, r7
 8018960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018964:	4770      	bx	lr

08018966 <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 8018966:	b480      	push	{r7}
 8018968:	b083      	sub	sp, #12
 801896a:	af00      	add	r7, sp, #0
 801896c:	6078      	str	r0, [r7, #4]
 801896e:	6039      	str	r1, [r7, #0]
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	4618      	mov	r0, r3
 8018974:	370c      	adds	r7, #12
 8018976:	46bd      	mov	sp, r7
 8018978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801897c:	4770      	bx	lr

0801897e <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 801897e:	b480      	push	{r7}
 8018980:	b085      	sub	sp, #20
 8018982:	af00      	add	r7, sp, #0
 8018984:	60f8      	str	r0, [r7, #12]
 8018986:	60b9      	str	r1, [r7, #8]
 8018988:	4613      	mov	r3, r2
 801898a:	71fb      	strb	r3, [r7, #7]
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	4618      	mov	r0, r3
 8018990:	3714      	adds	r7, #20
 8018992:	46bd      	mov	sp, r7
 8018994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018998:	4770      	bx	lr

0801899a <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801899a:	b480      	push	{r7}
 801899c:	b085      	sub	sp, #20
 801899e:	af00      	add	r7, sp, #0
 80189a0:	60f8      	str	r0, [r7, #12]
 80189a2:	60b9      	str	r1, [r7, #8]
 80189a4:	607a      	str	r2, [r7, #4]
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	4618      	mov	r0, r3
 80189aa:	3714      	adds	r7, #20
 80189ac:	46bd      	mov	sp, r7
 80189ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189b2:	4770      	bx	lr

080189b4 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 80189b4:	b480      	push	{r7}
 80189b6:	b085      	sub	sp, #20
 80189b8:	af00      	add	r7, sp, #0
 80189ba:	60f8      	str	r0, [r7, #12]
 80189bc:	60b9      	str	r1, [r7, #8]
 80189be:	607a      	str	r2, [r7, #4]
 80189c0:	68fb      	ldr	r3, [r7, #12]
 80189c2:	4618      	mov	r0, r3
 80189c4:	3714      	adds	r7, #20
 80189c6:	46bd      	mov	sp, r7
 80189c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189cc:	4770      	bx	lr

080189ce <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 80189ce:	b480      	push	{r7}
 80189d0:	b085      	sub	sp, #20
 80189d2:	af00      	add	r7, sp, #0
 80189d4:	60f8      	str	r0, [r7, #12]
 80189d6:	60b9      	str	r1, [r7, #8]
 80189d8:	607a      	str	r2, [r7, #4]
 80189da:	68fb      	ldr	r3, [r7, #12]
 80189dc:	4618      	mov	r0, r3
 80189de:	3714      	adds	r7, #20
 80189e0:	46bd      	mov	sp, r7
 80189e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e6:	4770      	bx	lr

080189e8 <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 80189e8:	b480      	push	{r7}
 80189ea:	b085      	sub	sp, #20
 80189ec:	af00      	add	r7, sp, #0
 80189ee:	60f8      	str	r0, [r7, #12]
 80189f0:	60b9      	str	r1, [r7, #8]
 80189f2:	607a      	str	r2, [r7, #4]
 80189f4:	68fb      	ldr	r3, [r7, #12]
 80189f6:	4618      	mov	r0, r3
 80189f8:	3714      	adds	r7, #20
 80189fa:	46bd      	mov	sp, r7
 80189fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a00:	4770      	bx	lr

08018a02 <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8018a02:	b480      	push	{r7}
 8018a04:	b085      	sub	sp, #20
 8018a06:	af00      	add	r7, sp, #0
 8018a08:	60f8      	str	r0, [r7, #12]
 8018a0a:	60b9      	str	r1, [r7, #8]
 8018a0c:	4639      	mov	r1, r7
 8018a0e:	e881 000c 	stmia.w	r1, {r2, r3}
 8018a12:	68fb      	ldr	r3, [r7, #12]
 8018a14:	4618      	mov	r0, r3
 8018a16:	3714      	adds	r7, #20
 8018a18:	46bd      	mov	sp, r7
 8018a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a1e:	4770      	bx	lr

08018a20 <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8018a20:	b480      	push	{r7}
 8018a22:	b085      	sub	sp, #20
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	60f8      	str	r0, [r7, #12]
 8018a28:	60b9      	str	r1, [r7, #8]
 8018a2a:	4639      	mov	r1, r7
 8018a2c:	e881 000c 	stmia.w	r1, {r2, r3}
 8018a30:	68fb      	ldr	r3, [r7, #12]
 8018a32:	4618      	mov	r0, r3
 8018a34:	3714      	adds	r7, #20
 8018a36:	46bd      	mov	sp, r7
 8018a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a3c:	4770      	bx	lr

08018a3e <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8018a3e:	b480      	push	{r7}
 8018a40:	b085      	sub	sp, #20
 8018a42:	af00      	add	r7, sp, #0
 8018a44:	60f8      	str	r0, [r7, #12]
 8018a46:	60b9      	str	r1, [r7, #8]
 8018a48:	ed87 0b00 	vstr	d0, [r7]
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	4618      	mov	r0, r3
 8018a50:	3714      	adds	r7, #20
 8018a52:	46bd      	mov	sp, r7
 8018a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a58:	4770      	bx	lr

08018a5a <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8018a5a:	b480      	push	{r7}
 8018a5c:	b085      	sub	sp, #20
 8018a5e:	af00      	add	r7, sp, #0
 8018a60:	60f8      	str	r0, [r7, #12]
 8018a62:	60b9      	str	r1, [r7, #8]
 8018a64:	607a      	str	r2, [r7, #4]
 8018a66:	68fb      	ldr	r3, [r7, #12]
 8018a68:	4618      	mov	r0, r3
 8018a6a:	3714      	adds	r7, #20
 8018a6c:	46bd      	mov	sp, r7
 8018a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a72:	4770      	bx	lr

08018a74 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8018a74:	b480      	push	{r7}
 8018a76:	b085      	sub	sp, #20
 8018a78:	af00      	add	r7, sp, #0
 8018a7a:	60f8      	str	r0, [r7, #12]
 8018a7c:	60b9      	str	r1, [r7, #8]
 8018a7e:	607a      	str	r2, [r7, #4]
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	4618      	mov	r0, r3
 8018a84:	3714      	adds	r7, #20
 8018a86:	46bd      	mov	sp, r7
 8018a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a8c:	4770      	bx	lr

08018a8e <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8018a8e:	b480      	push	{r7}
 8018a90:	b085      	sub	sp, #20
 8018a92:	af00      	add	r7, sp, #0
 8018a94:	60f8      	str	r0, [r7, #12]
 8018a96:	60b9      	str	r1, [r7, #8]
 8018a98:	607a      	str	r2, [r7, #4]
 8018a9a:	68fb      	ldr	r3, [r7, #12]
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	3714      	adds	r7, #20
 8018aa0:	46bd      	mov	sp, r7
 8018aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aa6:	4770      	bx	lr

08018aa8 <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 8018aa8:	b480      	push	{r7}
 8018aaa:	b085      	sub	sp, #20
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	60f8      	str	r0, [r7, #12]
 8018ab0:	60b9      	str	r1, [r7, #8]
 8018ab2:	607a      	str	r2, [r7, #4]
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	4618      	mov	r0, r3
 8018ab8:	3714      	adds	r7, #20
 8018aba:	46bd      	mov	sp, r7
 8018abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac0:	4770      	bx	lr

08018ac2 <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 8018ac2:	b480      	push	{r7}
 8018ac4:	b085      	sub	sp, #20
 8018ac6:	af00      	add	r7, sp, #0
 8018ac8:	60f8      	str	r0, [r7, #12]
 8018aca:	60b9      	str	r1, [r7, #8]
 8018acc:	607a      	str	r2, [r7, #4]
 8018ace:	603b      	str	r3, [r7, #0]
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	4618      	mov	r0, r3
 8018ad4:	3714      	adds	r7, #20
 8018ad6:	46bd      	mov	sp, r7
 8018ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018adc:	4770      	bx	lr

08018ade <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8018ade:	b480      	push	{r7}
 8018ae0:	b085      	sub	sp, #20
 8018ae2:	af00      	add	r7, sp, #0
 8018ae4:	60f8      	str	r0, [r7, #12]
 8018ae6:	60b9      	str	r1, [r7, #8]
 8018ae8:	607a      	str	r2, [r7, #4]
 8018aea:	603b      	str	r3, [r7, #0]
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	4618      	mov	r0, r3
 8018af0:	3714      	adds	r7, #20
 8018af2:	46bd      	mov	sp, r7
 8018af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018af8:	4770      	bx	lr

08018afa <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 8018afa:	b480      	push	{r7}
 8018afc:	b085      	sub	sp, #20
 8018afe:	af00      	add	r7, sp, #0
 8018b00:	60f8      	str	r0, [r7, #12]
 8018b02:	60b9      	str	r1, [r7, #8]
 8018b04:	607a      	str	r2, [r7, #4]
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	4618      	mov	r0, r3
 8018b0a:	3714      	adds	r7, #20
 8018b0c:	46bd      	mov	sp, r7
 8018b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b12:	4770      	bx	lr

08018b14 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 8018b14:	b480      	push	{r7}
 8018b16:	b085      	sub	sp, #20
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	60f8      	str	r0, [r7, #12]
 8018b1c:	60b9      	str	r1, [r7, #8]
 8018b1e:	607a      	str	r2, [r7, #4]
 8018b20:	603b      	str	r3, [r7, #0]
 8018b22:	68fb      	ldr	r3, [r7, #12]
 8018b24:	4618      	mov	r0, r3
 8018b26:	3714      	adds	r7, #20
 8018b28:	46bd      	mov	sp, r7
 8018b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b2e:	4770      	bx	lr

08018b30 <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 8018b30:	b480      	push	{r7}
 8018b32:	b083      	sub	sp, #12
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	6078      	str	r0, [r7, #4]
 8018b38:	2300      	movs	r3, #0
 8018b3a:	4618      	mov	r0, r3
 8018b3c:	370c      	adds	r7, #12
 8018b3e:	46bd      	mov	sp, r7
 8018b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b44:	4770      	bx	lr
	...

08018b48 <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 8018b48:	b580      	push	{r7, lr}
 8018b4a:	b084      	sub	sp, #16
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	6078      	str	r0, [r7, #4]
 8018b50:	6039      	str	r1, [r7, #0]
 8018b52:	f107 0308 	add.w	r3, r7, #8
 8018b56:	4909      	ldr	r1, [pc, #36]	; (8018b7c <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 8018b58:	4618      	mov	r0, r3
 8018b5a:	f7f5 f9a6 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8018b5e:	f107 0308 	add.w	r3, r7, #8
 8018b62:	4619      	mov	r1, r3
 8018b64:	6878      	ldr	r0, [r7, #4]
 8018b66:	f005 fec5 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018b6a:	f107 0308 	add.w	r3, r7, #8
 8018b6e:	4618      	mov	r0, r3
 8018b70:	f7f5 fd53 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8018b74:	6878      	ldr	r0, [r7, #4]
 8018b76:	3710      	adds	r7, #16
 8018b78:	46bd      	mov	sp, r7
 8018b7a:	bd80      	pop	{r7, pc}
 8018b7c:	080277c8 	.word	0x080277c8

08018b80 <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 8018b80:	b480      	push	{r7}
 8018b82:	b083      	sub	sp, #12
 8018b84:	af00      	add	r7, sp, #0
 8018b86:	6078      	str	r0, [r7, #4]
 8018b88:	460b      	mov	r3, r1
 8018b8a:	70fb      	strb	r3, [r7, #3]
 8018b8c:	78fb      	ldrb	r3, [r7, #3]
 8018b8e:	4618      	mov	r0, r3
 8018b90:	370c      	adds	r7, #12
 8018b92:	46bd      	mov	sp, r7
 8018b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b98:	4770      	bx	lr

08018b9a <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 8018b9a:	b480      	push	{r7}
 8018b9c:	b083      	sub	sp, #12
 8018b9e:	af00      	add	r7, sp, #0
 8018ba0:	6078      	str	r0, [r7, #4]
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	4618      	mov	r0, r3
 8018ba6:	370c      	adds	r7, #12
 8018ba8:	46bd      	mov	sp, r7
 8018baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bae:	4770      	bx	lr

08018bb0 <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 8018bb0:	b480      	push	{r7}
 8018bb2:	b083      	sub	sp, #12
 8018bb4:	af00      	add	r7, sp, #0
 8018bb6:	6078      	str	r0, [r7, #4]
 8018bb8:	2300      	movs	r3, #0
 8018bba:	4618      	mov	r0, r3
 8018bbc:	370c      	adds	r7, #12
 8018bbe:	46bd      	mov	sp, r7
 8018bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bc4:	4770      	bx	lr

08018bc6 <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 8018bc6:	b480      	push	{r7}
 8018bc8:	b083      	sub	sp, #12
 8018bca:	af00      	add	r7, sp, #0
 8018bcc:	6078      	str	r0, [r7, #4]
 8018bce:	6039      	str	r1, [r7, #0]
 8018bd0:	683b      	ldr	r3, [r7, #0]
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	370c      	adds	r7, #12
 8018bd6:	46bd      	mov	sp, r7
 8018bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bdc:	4770      	bx	lr

08018bde <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 8018bde:	b480      	push	{r7}
 8018be0:	b083      	sub	sp, #12
 8018be2:	af00      	add	r7, sp, #0
 8018be4:	6078      	str	r0, [r7, #4]
 8018be6:	2300      	movs	r3, #0
 8018be8:	4618      	mov	r0, r3
 8018bea:	370c      	adds	r7, #12
 8018bec:	46bd      	mov	sp, r7
 8018bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf2:	4770      	bx	lr

08018bf4 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 8018bf4:	b480      	push	{r7}
 8018bf6:	b083      	sub	sp, #12
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	6078      	str	r0, [r7, #4]
 8018bfc:	6039      	str	r1, [r7, #0]
 8018bfe:	683b      	ldr	r3, [r7, #0]
 8018c00:	4618      	mov	r0, r3
 8018c02:	370c      	adds	r7, #12
 8018c04:	46bd      	mov	sp, r7
 8018c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c0a:	4770      	bx	lr

08018c0c <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 8018c0c:	b480      	push	{r7}
 8018c0e:	b083      	sub	sp, #12
 8018c10:	af00      	add	r7, sp, #0
 8018c12:	6078      	str	r0, [r7, #4]
 8018c14:	2300      	movs	r3, #0
 8018c16:	4618      	mov	r0, r3
 8018c18:	370c      	adds	r7, #12
 8018c1a:	46bd      	mov	sp, r7
 8018c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c20:	4770      	bx	lr

08018c22 <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 8018c22:	b480      	push	{r7}
 8018c24:	b083      	sub	sp, #12
 8018c26:	af00      	add	r7, sp, #0
 8018c28:	6078      	str	r0, [r7, #4]
 8018c2a:	6039      	str	r1, [r7, #0]
 8018c2c:	683b      	ldr	r3, [r7, #0]
 8018c2e:	4618      	mov	r0, r3
 8018c30:	370c      	adds	r7, #12
 8018c32:	46bd      	mov	sp, r7
 8018c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c38:	4770      	bx	lr

08018c3a <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 8018c3a:	b580      	push	{r7, lr}
 8018c3c:	b082      	sub	sp, #8
 8018c3e:	af00      	add	r7, sp, #0
 8018c40:	6078      	str	r0, [r7, #4]
 8018c42:	6039      	str	r1, [r7, #0]
 8018c44:	2100      	movs	r1, #0
 8018c46:	6878      	ldr	r0, [r7, #4]
 8018c48:	f7f3 f972 	bl	800bf30 <_ZN18cpputest_ulonglongC1Ei>
 8018c4c:	6878      	ldr	r0, [r7, #4]
 8018c4e:	3708      	adds	r7, #8
 8018c50:	46bd      	mov	sp, r7
 8018c52:	bd80      	pop	{r7, pc}

08018c54 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 8018c54:	b480      	push	{r7}
 8018c56:	b085      	sub	sp, #20
 8018c58:	af00      	add	r7, sp, #0
 8018c5a:	60f8      	str	r0, [r7, #12]
 8018c5c:	60b9      	str	r1, [r7, #8]
 8018c5e:	4639      	mov	r1, r7
 8018c60:	e881 000c 	stmia.w	r1, {r2, r3}
 8018c64:	68fb      	ldr	r3, [r7, #12]
 8018c66:	461a      	mov	r2, r3
 8018c68:	463b      	mov	r3, r7
 8018c6a:	cb03      	ldmia	r3!, {r0, r1}
 8018c6c:	6010      	str	r0, [r2, #0]
 8018c6e:	6051      	str	r1, [r2, #4]
 8018c70:	68f8      	ldr	r0, [r7, #12]
 8018c72:	3714      	adds	r7, #20
 8018c74:	46bd      	mov	sp, r7
 8018c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c7a:	4770      	bx	lr

08018c7c <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 8018c7c:	b580      	push	{r7, lr}
 8018c7e:	b082      	sub	sp, #8
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	6078      	str	r0, [r7, #4]
 8018c84:	6039      	str	r1, [r7, #0]
 8018c86:	2100      	movs	r1, #0
 8018c88:	6878      	ldr	r0, [r7, #4]
 8018c8a:	f7f3 f945 	bl	800bf18 <_ZN17cpputest_longlongC1Ei>
 8018c8e:	6878      	ldr	r0, [r7, #4]
 8018c90:	3708      	adds	r7, #8
 8018c92:	46bd      	mov	sp, r7
 8018c94:	bd80      	pop	{r7, pc}

08018c96 <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 8018c96:	b480      	push	{r7}
 8018c98:	b085      	sub	sp, #20
 8018c9a:	af00      	add	r7, sp, #0
 8018c9c:	60f8      	str	r0, [r7, #12]
 8018c9e:	60b9      	str	r1, [r7, #8]
 8018ca0:	4639      	mov	r1, r7
 8018ca2:	e881 000c 	stmia.w	r1, {r2, r3}
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	461a      	mov	r2, r3
 8018caa:	463b      	mov	r3, r7
 8018cac:	cb03      	ldmia	r3!, {r0, r1}
 8018cae:	6010      	str	r0, [r2, #0]
 8018cb0:	6051      	str	r1, [r2, #4]
 8018cb2:	68f8      	ldr	r0, [r7, #12]
 8018cb4:	3714      	adds	r7, #20
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cbc:	4770      	bx	lr

08018cbe <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 8018cbe:	b480      	push	{r7}
 8018cc0:	b083      	sub	sp, #12
 8018cc2:	af00      	add	r7, sp, #0
 8018cc4:	6078      	str	r0, [r7, #4]
 8018cc6:	2300      	movs	r3, #0
 8018cc8:	4618      	mov	r0, r3
 8018cca:	370c      	adds	r7, #12
 8018ccc:	46bd      	mov	sp, r7
 8018cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd2:	4770      	bx	lr

08018cd4 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 8018cd4:	b480      	push	{r7}
 8018cd6:	b083      	sub	sp, #12
 8018cd8:	af00      	add	r7, sp, #0
 8018cda:	6078      	str	r0, [r7, #4]
 8018cdc:	6039      	str	r1, [r7, #0]
 8018cde:	683b      	ldr	r3, [r7, #0]
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	370c      	adds	r7, #12
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cea:	4770      	bx	lr

08018cec <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 8018cec:	b480      	push	{r7}
 8018cee:	b083      	sub	sp, #12
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
 8018cf4:	f04f 0200 	mov.w	r2, #0
 8018cf8:	f04f 0300 	mov.w	r3, #0
 8018cfc:	ec43 2b17 	vmov	d7, r2, r3
 8018d00:	eeb0 0a47 	vmov.f32	s0, s14
 8018d04:	eef0 0a67 	vmov.f32	s1, s15
 8018d08:	370c      	adds	r7, #12
 8018d0a:	46bd      	mov	sp, r7
 8018d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d10:	4770      	bx	lr

08018d12 <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 8018d12:	b480      	push	{r7}
 8018d14:	b085      	sub	sp, #20
 8018d16:	af00      	add	r7, sp, #0
 8018d18:	60f8      	str	r0, [r7, #12]
 8018d1a:	ed87 0b00 	vstr	d0, [r7]
 8018d1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018d22:	ec43 2b17 	vmov	d7, r2, r3
 8018d26:	eeb0 0a47 	vmov.f32	s0, s14
 8018d2a:	eef0 0a67 	vmov.f32	s1, s15
 8018d2e:	3714      	adds	r7, #20
 8018d30:	46bd      	mov	sp, r7
 8018d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d36:	4770      	bx	lr

08018d38 <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 8018d38:	b480      	push	{r7}
 8018d3a:	b083      	sub	sp, #12
 8018d3c:	af00      	add	r7, sp, #0
 8018d3e:	6078      	str	r0, [r7, #4]
 8018d40:	4b03      	ldr	r3, [pc, #12]	; (8018d50 <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 8018d42:	4618      	mov	r0, r3
 8018d44:	370c      	adds	r7, #12
 8018d46:	46bd      	mov	sp, r7
 8018d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d4c:	4770      	bx	lr
 8018d4e:	bf00      	nop
 8018d50:	080277c8 	.word	0x080277c8

08018d54 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 8018d54:	b480      	push	{r7}
 8018d56:	b083      	sub	sp, #12
 8018d58:	af00      	add	r7, sp, #0
 8018d5a:	6078      	str	r0, [r7, #4]
 8018d5c:	6039      	str	r1, [r7, #0]
 8018d5e:	683b      	ldr	r3, [r7, #0]
 8018d60:	4618      	mov	r0, r3
 8018d62:	370c      	adds	r7, #12
 8018d64:	46bd      	mov	sp, r7
 8018d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d6a:	4770      	bx	lr

08018d6c <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 8018d6c:	b480      	push	{r7}
 8018d6e:	b083      	sub	sp, #12
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	6078      	str	r0, [r7, #4]
 8018d74:	2300      	movs	r3, #0
 8018d76:	4618      	mov	r0, r3
 8018d78:	370c      	adds	r7, #12
 8018d7a:	46bd      	mov	sp, r7
 8018d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d80:	4770      	bx	lr

08018d82 <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 8018d82:	b480      	push	{r7}
 8018d84:	b083      	sub	sp, #12
 8018d86:	af00      	add	r7, sp, #0
 8018d88:	6078      	str	r0, [r7, #4]
 8018d8a:	6039      	str	r1, [r7, #0]
 8018d8c:	683b      	ldr	r3, [r7, #0]
 8018d8e:	4618      	mov	r0, r3
 8018d90:	370c      	adds	r7, #12
 8018d92:	46bd      	mov	sp, r7
 8018d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d98:	4770      	bx	lr

08018d9a <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 8018d9a:	b480      	push	{r7}
 8018d9c:	b083      	sub	sp, #12
 8018d9e:	af00      	add	r7, sp, #0
 8018da0:	6078      	str	r0, [r7, #4]
 8018da2:	2300      	movs	r3, #0
 8018da4:	4618      	mov	r0, r3
 8018da6:	370c      	adds	r7, #12
 8018da8:	46bd      	mov	sp, r7
 8018daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dae:	4770      	bx	lr

08018db0 <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 8018db0:	b480      	push	{r7}
 8018db2:	b083      	sub	sp, #12
 8018db4:	af00      	add	r7, sp, #0
 8018db6:	6078      	str	r0, [r7, #4]
 8018db8:	6039      	str	r1, [r7, #0]
 8018dba:	683b      	ldr	r3, [r7, #0]
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	370c      	adds	r7, #12
 8018dc0:	46bd      	mov	sp, r7
 8018dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dc6:	4770      	bx	lr

08018dc8 <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 8018dc8:	b480      	push	{r7}
 8018dca:	b083      	sub	sp, #12
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	6078      	str	r0, [r7, #4]
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	4618      	mov	r0, r3
 8018dd4:	370c      	adds	r7, #12
 8018dd6:	46bd      	mov	sp, r7
 8018dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ddc:	4770      	bx	lr

08018dde <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 8018dde:	b480      	push	{r7}
 8018de0:	b083      	sub	sp, #12
 8018de2:	af00      	add	r7, sp, #0
 8018de4:	6078      	str	r0, [r7, #4]
 8018de6:	6039      	str	r1, [r7, #0]
 8018de8:	683b      	ldr	r3, [r7, #0]
 8018dea:	4618      	mov	r0, r3
 8018dec:	370c      	adds	r7, #12
 8018dee:	46bd      	mov	sp, r7
 8018df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df4:	4770      	bx	lr

08018df6 <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 8018df6:	b480      	push	{r7}
 8018df8:	b083      	sub	sp, #12
 8018dfa:	af00      	add	r7, sp, #0
 8018dfc:	6078      	str	r0, [r7, #4]
 8018dfe:	6039      	str	r1, [r7, #0]
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	4618      	mov	r0, r3
 8018e04:	370c      	adds	r7, #12
 8018e06:	46bd      	mov	sp, r7
 8018e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e0c:	4770      	bx	lr
	...

08018e10 <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 8018e10:	b480      	push	{r7}
 8018e12:	b083      	sub	sp, #12
 8018e14:	af00      	add	r7, sp, #0
 8018e16:	6078      	str	r0, [r7, #4]
 8018e18:	4a04      	ldr	r2, [pc, #16]	; (8018e2c <_ZN14MockActualCallC1Ev+0x1c>)
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	601a      	str	r2, [r3, #0]
{
}
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	4618      	mov	r0, r3
 8018e22:	370c      	adds	r7, #12
 8018e24:	46bd      	mov	sp, r7
 8018e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e2a:	4770      	bx	lr
 8018e2c:	0802aa54 	.word	0x0802aa54

08018e30 <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 8018e30:	b480      	push	{r7}
 8018e32:	b083      	sub	sp, #12
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	6078      	str	r0, [r7, #4]
 8018e38:	4a04      	ldr	r2, [pc, #16]	; (8018e4c <_ZN14MockActualCallD1Ev+0x1c>)
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	601a      	str	r2, [r3, #0]
{
}
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	4618      	mov	r0, r3
 8018e42:	370c      	adds	r7, #12
 8018e44:	46bd      	mov	sp, r7
 8018e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e4a:	4770      	bx	lr
 8018e4c:	0802aa54 	.word	0x0802aa54

08018e50 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 8018e50:	b580      	push	{r7, lr}
 8018e52:	b082      	sub	sp, #8
 8018e54:	af00      	add	r7, sp, #0
 8018e56:	6078      	str	r0, [r7, #4]
 8018e58:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	3304      	adds	r3, #4
 8018e5e:	6839      	ldr	r1, [r7, #0]
 8018e60:	4618      	mov	r0, r3
 8018e62:	f7f5 f88e 	bl	800df82 <_ZN12SimpleStringaSERKS_>
}
 8018e66:	bf00      	nop
 8018e68:	3708      	adds	r7, #8
 8018e6a:	46bd      	mov	sp, r7
 8018e6c:	bd80      	pop	{r7, pc}

08018e6e <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 8018e6e:	b580      	push	{r7, lr}
 8018e70:	b082      	sub	sp, #8
 8018e72:	af00      	add	r7, sp, #0
 8018e74:	6078      	str	r0, [r7, #4]
 8018e76:	6039      	str	r1, [r7, #0]
    return functionName_;
 8018e78:	683b      	ldr	r3, [r7, #0]
 8018e7a:	3304      	adds	r3, #4
 8018e7c:	4619      	mov	r1, r3
 8018e7e:	6878      	ldr	r0, [r7, #4]
 8018e80:	f7f5 f867 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
}
 8018e84:	6878      	ldr	r0, [r7, #4]
 8018e86:	3708      	adds	r7, #8
 8018e88:	46bd      	mov	sp, r7
 8018e8a:	bd80      	pop	{r7, pc}

08018e8c <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b084      	sub	sp, #16
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	60f8      	str	r0, [r7, #12]
 8018e94:	60b9      	str	r1, [r7, #8]
 8018e96:	607a      	str	r2, [r7, #4]
 8018e98:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	4618      	mov	r0, r3
 8018e9e:	f7ff ffb7 	bl	8018e10 <_ZN14MockActualCallC1Ev>
 8018ea2:	4a17      	ldr	r2, [pc, #92]	; (8018f00 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	601a      	str	r2, [r3, #0]
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	3304      	adds	r3, #4
 8018eac:	4915      	ldr	r1, [pc, #84]	; (8018f04 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 8018eae:	4618      	mov	r0, r3
 8018eb0:	f7f4 fffb 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	68ba      	ldr	r2, [r7, #8]
 8018eb8:	60da      	str	r2, [r3, #12]
 8018eba:	68fb      	ldr	r3, [r7, #12]
 8018ebc:	687a      	ldr	r2, [r7, #4]
 8018ebe:	611a      	str	r2, [r3, #16]
 8018ec0:	68fb      	ldr	r3, [r7, #12]
 8018ec2:	2202      	movs	r2, #2
 8018ec4:	751a      	strb	r2, [r3, #20]
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	2200      	movs	r2, #0
 8018eca:	755a      	strb	r2, [r3, #21]
 8018ecc:	68fb      	ldr	r3, [r7, #12]
 8018ece:	2200      	movs	r2, #0
 8018ed0:	619a      	str	r2, [r3, #24]
 8018ed2:	68fb      	ldr	r3, [r7, #12]
 8018ed4:	331c      	adds	r3, #28
 8018ed6:	4618      	mov	r0, r3
 8018ed8:	f004 f814 	bl	801cf04 <_ZN21MockExpectedCallsListC1Ev>
 8018edc:	68fb      	ldr	r3, [r7, #12]
 8018ede:	683a      	ldr	r2, [r7, #0]
 8018ee0:	625a      	str	r2, [r3, #36]	; 0x24
 8018ee2:	68fb      	ldr	r3, [r7, #12]
 8018ee4:	2200      	movs	r2, #0
 8018ee6:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 8018ee8:	68fb      	ldr	r3, [r7, #12]
 8018eea:	331c      	adds	r3, #28
 8018eec:	6839      	ldr	r1, [r7, #0]
 8018eee:	4618      	mov	r0, r3
 8018ef0:	f004 f986 	bl	801d200 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 8018ef4:	68fb      	ldr	r3, [r7, #12]
 8018ef6:	4618      	mov	r0, r3
 8018ef8:	3710      	adds	r7, #16
 8018efa:	46bd      	mov	sp, r7
 8018efc:	bd80      	pop	{r7, pc}
 8018efe:	bf00      	nop
 8018f00:	0802a954 	.word	0x0802a954
 8018f04:	080277c8 	.word	0x080277c8

08018f08 <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b082      	sub	sp, #8
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
 8018f10:	4a0c      	ldr	r2, [pc, #48]	; (8018f44 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 8018f16:	6878      	ldr	r0, [r7, #4]
 8018f18:	f001 fae4 	bl	801a4e4 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	331c      	adds	r3, #28
 8018f20:	4618      	mov	r0, r3
 8018f22:	f004 f803 	bl	801cf2c <_ZN21MockExpectedCallsListD1Ev>
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	3304      	adds	r3, #4
 8018f2a:	4618      	mov	r0, r3
 8018f2c:	f7f5 fb75 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	4618      	mov	r0, r3
 8018f34:	f7ff ff7c 	bl	8018e30 <_ZN14MockActualCallD1Ev>
}
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	4618      	mov	r0, r3
 8018f3c:	3708      	adds	r7, #8
 8018f3e:	46bd      	mov	sp, r7
 8018f40:	bd80      	pop	{r7, pc}
 8018f42:	bf00      	nop
 8018f44:	0802a954 	.word	0x0802a954

08018f48 <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 8018f48:	b580      	push	{r7, lr}
 8018f4a:	b082      	sub	sp, #8
 8018f4c:	af00      	add	r7, sp, #0
 8018f4e:	6078      	str	r0, [r7, #4]
}
 8018f50:	6878      	ldr	r0, [r7, #4]
 8018f52:	f7ff ffd9 	bl	8018f08 <_ZN21MockCheckedActualCallD1Ev>
 8018f56:	212c      	movs	r1, #44	; 0x2c
 8018f58:	6878      	ldr	r0, [r7, #4]
 8018f5a:	f7f2 fbf7 	bl	800b74c <_ZdlPvj>
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	4618      	mov	r0, r3
 8018f62:	3708      	adds	r7, #8
 8018f64:	46bd      	mov	sp, r7
 8018f66:	bd80      	pop	{r7, pc}

08018f68 <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 8018f68:	b480      	push	{r7}
 8018f6a:	b083      	sub	sp, #12
 8018f6c:	af00      	add	r7, sp, #0
 8018f6e:	6078      	str	r0, [r7, #4]
 8018f70:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	683a      	ldr	r2, [r7, #0]
 8018f76:	611a      	str	r2, [r3, #16]
}
 8018f78:	bf00      	nop
 8018f7a:	370c      	adds	r7, #12
 8018f7c:	46bd      	mov	sp, r7
 8018f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f82:	4770      	bx	lr

08018f84 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 8018f84:	b580      	push	{r7, lr}
 8018f86:	b082      	sub	sp, #8
 8018f88:	af00      	add	r7, sp, #0
 8018f8a:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	691a      	ldr	r2, [r3, #16]
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	691b      	ldr	r3, [r3, #16]
 8018f94:	681b      	ldr	r3, [r3, #0]
 8018f96:	330c      	adds	r3, #12
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	4610      	mov	r0, r2
 8018f9c:	4798      	blx	r3
 8018f9e:	4603      	mov	r3, r0
}
 8018fa0:	4618      	mov	r0, r3
 8018fa2:	3708      	adds	r7, #8
 8018fa4:	46bd      	mov	sp, r7
 8018fa6:	bd80      	pop	{r7, pc}

08018fa8 <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	b082      	sub	sp, #8
 8018fac:	af00      	add	r7, sp, #0
 8018fae:	6078      	str	r0, [r7, #4]
 8018fb0:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	33c0      	adds	r3, #192	; 0xc0
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	6878      	ldr	r0, [r7, #4]
 8018fbc:	4798      	blx	r3
 8018fbe:	4603      	mov	r3, r0
 8018fc0:	f083 0301 	eor.w	r3, r3, #1
 8018fc4:	b2db      	uxtb	r3, r3
 8018fc6:	2b00      	cmp	r3, #0
 8018fc8:	d010      	beq.n	8018fec <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	33ec      	adds	r3, #236	; 0xec
 8018fd0:	681b      	ldr	r3, [r3, #0]
 8018fd2:	2101      	movs	r1, #1
 8018fd4:	6878      	ldr	r0, [r7, #4]
 8018fd6:	4798      	blx	r3
        reporter_->failTest(failure);
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	691a      	ldr	r2, [r3, #16]
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	691b      	ldr	r3, [r3, #16]
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	3308      	adds	r3, #8
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	6839      	ldr	r1, [r7, #0]
 8018fe8:	4610      	mov	r0, r2
 8018fea:	4798      	blx	r3
    }
}
 8018fec:	bf00      	nop
 8018fee:	3708      	adds	r7, #8
 8018ff0:	46bd      	mov	sp, r7
 8018ff2:	bd80      	pop	{r7, pc}

08018ff4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 8018ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ff8:	b0bc      	sub	sp, #240	; 0xf0
 8018ffa:	af00      	add	r7, sp, #0
 8018ffc:	6078      	str	r0, [r7, #4]
 8018ffe:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019004:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8019008:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801900c:	2b00      	cmp	r3, #0
 801900e:	f000 80f5 	beq.w	80191fc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8019012:	683b      	ldr	r3, [r7, #0]
 8019014:	681b      	ldr	r3, [r3, #0]
 8019016:	339c      	adds	r3, #156	; 0x9c
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801901e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8019022:	6839      	ldr	r1, [r7, #0]
 8019024:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 8019026:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801902a:	4618      	mov	r0, r3
 801902c:	f006 fa6c 	bl	801f508 <_ZNK14MockNamedValue9getCopierEv>
 8019030:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 8019034:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8019038:	2b00      	cmp	r3, #0
 801903a:	d013      	beq.n	8019064 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 801903c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	3308      	adds	r3, #8
 8019044:	681c      	ldr	r4, [r3, #0]
 8019046:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801904a:	691d      	ldr	r5, [r3, #16]
 801904c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019050:	4618      	mov	r0, r3
 8019052:	f006 fa29 	bl	801f4a8 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 8019056:	4603      	mov	r3, r0
 8019058:	461a      	mov	r2, r3
 801905a:	4629      	mov	r1, r5
 801905c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8019060:	47a0      	blx	r4
 8019062:	e0c0      	b.n	80191e6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 8019064:	2500      	movs	r5, #0
 8019066:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801906a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801906e:	4611      	mov	r1, r2
 8019070:	4618      	mov	r0, r3
 8019072:	f005 ff0c 	bl	801ee8e <_ZNK14MockNamedValue7getTypeEv>
 8019076:	2601      	movs	r6, #1
 8019078:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801907c:	4962      	ldr	r1, [pc, #392]	; (8019208 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 801907e:	4618      	mov	r0, r3
 8019080:	f7f4 ff13 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8019084:	f04f 0801 	mov.w	r8, #1
 8019088:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801908c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8019090:	4611      	mov	r1, r2
 8019092:	4618      	mov	r0, r3
 8019094:	f7f5 facd 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 8019098:	4603      	mov	r3, r0
 801909a:	2b00      	cmp	r3, #0
 801909c:	d015      	beq.n	80190ca <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 801909e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80190a2:	f103 0408 	add.w	r4, r3, #8
 80190a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80190aa:	4958      	ldr	r1, [pc, #352]	; (801920c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 80190ac:	4618      	mov	r0, r3
 80190ae:	f7f4 fefc 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80190b2:	2501      	movs	r5, #1
 80190b4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80190b8:	4619      	mov	r1, r3
 80190ba:	4620      	mov	r0, r4
 80190bc:	f7f5 fab9 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 80190c0:	4603      	mov	r3, r0
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d001      	beq.n	80190ca <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 80190c6:	2401      	movs	r4, #1
 80190c8:	e000      	b.n	80190cc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 80190ca:	2400      	movs	r4, #0
 80190cc:	2d00      	cmp	r5, #0
 80190ce:	d004      	beq.n	80190da <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 80190d0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80190d4:	4618      	mov	r0, r3
 80190d6:	f7f5 faa0 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80190da:	f1b8 0f00 	cmp.w	r8, #0
 80190de:	d004      	beq.n	80190ea <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 80190e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80190e4:	4618      	mov	r0, r3
 80190e6:	f7f5 fa98 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80190ea:	2e00      	cmp	r6, #0
 80190ec:	d004      	beq.n	80190f8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 80190ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80190f2:	4618      	mov	r0, r3
 80190f4:	f7f5 fa91 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80190f8:	2c00      	cmp	r4, #0
 80190fa:	d018      	beq.n	801912e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 80190fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019100:	4618      	mov	r0, r3
 8019102:	f006 f959 	bl	801f3b8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8019106:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 801910a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801910e:	4618      	mov	r0, r3
 8019110:	f006 f9e2 	bl	801f4d8 <_ZNK14MockNamedValue7getSizeEv>
 8019114:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 8019118:	4b3d      	ldr	r3, [pc, #244]	; (8019210 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 801911a:	681b      	ldr	r3, [r3, #0]
 801911c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8019120:	6910      	ldr	r0, [r2, #16]
 8019122:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8019126:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 801912a:	4798      	blx	r3
 801912c:	e05b      	b.n	80191e6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 801912e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8019132:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8019136:	4611      	mov	r1, r2
 8019138:	4618      	mov	r0, r3
 801913a:	f005 fe99 	bl	801ee70 <_ZNK14MockNamedValue7getNameEv>
 801913e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8019142:	4934      	ldr	r1, [pc, #208]	; (8019214 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 8019144:	4618      	mov	r0, r3
 8019146:	f7f4 feb0 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801914a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801914e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8019152:	4611      	mov	r1, r2
 8019154:	4618      	mov	r0, r3
 8019156:	f7f5 fab1 	bl	800e6bc <_ZneRK12SimpleStringS1_>
 801915a:	4603      	mov	r3, r0
 801915c:	461c      	mov	r4, r3
 801915e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8019162:	4618      	mov	r0, r3
 8019164:	f7f5 fa59 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8019168:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801916c:	4618      	mov	r0, r3
 801916e:	f7f5 fa54 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8019172:	2c00      	cmp	r4, #0
 8019174:	d037      	beq.n	80191e6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8019176:	683b      	ldr	r3, [r7, #0]
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	339c      	adds	r3, #156	; 0x9c
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8019182:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8019186:	6839      	ldr	r1, [r7, #0]
 8019188:	4798      	blx	r3
 801918a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801918e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8019192:	4611      	mov	r1, r2
 8019194:	4618      	mov	r0, r3
 8019196:	f005 fe7a 	bl	801ee8e <_ZNK14MockNamedValue7getTypeEv>
 801919a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801919e:	4618      	mov	r0, r3
 80191a0:	f005 fbd2 	bl	801e948 <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	33cc      	adds	r3, #204	; 0xcc
 80191aa:	681b      	ldr	r3, [r3, #0]
 80191ac:	6878      	ldr	r0, [r7, #4]
 80191ae:	4798      	blx	r3
 80191b0:	4601      	mov	r1, r0
 80191b2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80191b6:	f107 030c 	add.w	r3, r7, #12
 80191ba:	4618      	mov	r0, r3
 80191bc:	f005 faee 	bl	801e79c <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	33dc      	adds	r3, #220	; 0xdc
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	f107 020c 	add.w	r2, r7, #12
 80191cc:	4611      	mov	r1, r2
 80191ce:	6878      	ldr	r0, [r7, #4]
 80191d0:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 80191d2:	f107 030c 	add.w	r3, r7, #12
 80191d6:	4618      	mov	r0, r3
 80191d8:	f001 ffe2 	bl	801b1a0 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 80191dc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80191e0:	4618      	mov	r0, r3
 80191e2:	f7f5 fa1a 	bl	800e61a <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 80191e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80191ea:	4618      	mov	r0, r3
 80191ec:	f005 fbac 	bl	801e948 <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 80191f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80191f4:	695b      	ldr	r3, [r3, #20]
 80191f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80191fa:	e705      	b.n	8019008 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 80191fc:	bf00      	nop
 80191fe:	37f0      	adds	r7, #240	; 0xf0
 8019200:	46bd      	mov	sp, r7
 8019202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019206:	bf00      	nop
 8019208:	080277cc 	.word	0x080277cc
 801920c:	080277d8 	.word	0x080277d8
 8019210:	200000d4 	.word	0x200000d4
 8019214:	080277c8 	.word	0x080277c8

08019218 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 8019218:	b580      	push	{r7, lr}
 801921a:	b084      	sub	sp, #16
 801921c:	af00      	add	r7, sp, #0
 801921e:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	331c      	adds	r3, #28
 8019224:	4618      	mov	r0, r3
 8019226:	f004 f9bb 	bl	801d5a0 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 801922a:	4602      	mov	r2, r0
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	699b      	ldr	r3, [r3, #24]
 8019234:	2b00      	cmp	r3, #0
 8019236:	d00f      	beq.n	8019258 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	33d4      	adds	r3, #212	; 0xd4
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	687a      	ldr	r2, [r7, #4]
 8019242:	6992      	ldr	r2, [r2, #24]
 8019244:	4611      	mov	r1, r2
 8019246:	6878      	ldr	r0, [r7, #4]
 8019248:	4798      	blx	r3
        callHasSucceeded();
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	33d0      	adds	r3, #208	; 0xd0
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	6878      	ldr	r0, [r7, #4]
 8019254:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 8019256:	e00f      	b.n	8019278 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	331c      	adds	r3, #28
 801925c:	4618      	mov	r0, r3
 801925e:	f004 f9cc 	bl	801d5fa <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 8019262:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 8019264:	68fb      	ldr	r3, [r7, #12]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d006      	beq.n	8019278 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	33d4      	adds	r3, #212	; 0xd4
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	68f9      	ldr	r1, [r7, #12]
 8019274:	6878      	ldr	r0, [r7, #4]
 8019276:	4798      	blx	r3
}
 8019278:	bf00      	nop
 801927a:	3710      	adds	r7, #16
 801927c:	46bd      	mov	sp, r7
 801927e:	bd80      	pop	{r7, pc}

08019280 <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 8019280:	b580      	push	{r7, lr}
 8019282:	b082      	sub	sp, #8
 8019284:	af00      	add	r7, sp, #0
 8019286:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	33ec      	adds	r3, #236	; 0xec
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	2102      	movs	r1, #2
 8019292:	6878      	ldr	r0, [r7, #4]
 8019294:	4798      	blx	r3
}
 8019296:	bf00      	nop
 8019298:	3708      	adds	r7, #8
 801929a:	46bd      	mov	sp, r7
 801929c:	bd80      	pop	{r7, pc}

0801929e <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 801929e:	b580      	push	{r7, lr}
 80192a0:	b082      	sub	sp, #8
 80192a2:	af00      	add	r7, sp, #0
 80192a4:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	699b      	ldr	r3, [r3, #24]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d00b      	beq.n	80192c6 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	699a      	ldr	r2, [r3, #24]
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	699b      	ldr	r3, [r3, #24]
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	33ec      	adds	r3, #236	; 0xec
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	4610      	mov	r0, r2
 80192be:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	2200      	movs	r2, #0
 80192c4:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	331c      	adds	r3, #28
 80192ca:	4618      	mov	r0, r3
 80192cc:	f004 f85c 	bl	801d388 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 80192d0:	bf00      	nop
 80192d2:	3708      	adds	r7, #8
 80192d4:	46bd      	mov	sp, r7
 80192d6:	bd80      	pop	{r7, pc}

080192d8 <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 80192d8:	b590      	push	{r4, r7, lr}
 80192da:	b091      	sub	sp, #68	; 0x44
 80192dc:	af00      	add	r7, sp, #0
 80192de:	6078      	str	r0, [r7, #4]
 80192e0:	6039      	str	r1, [r7, #0]
    setName(name);
 80192e2:	6839      	ldr	r1, [r7, #0]
 80192e4:	6878      	ldr	r0, [r7, #4]
 80192e6:	f7ff fdb3 	bl	8018e50 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	33ec      	adds	r3, #236	; 0xec
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	2100      	movs	r1, #0
 80192f4:	6878      	ldr	r0, [r7, #4]
 80192f6:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	331c      	adds	r3, #28
 80192fc:	6839      	ldr	r1, [r7, #0]
 80192fe:	4618      	mov	r0, r3
 8019300:	f003 ffec 	bl	801d2dc <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	331c      	adds	r3, #28
 8019308:	4618      	mov	r0, r3
 801930a:	f003 fe7c 	bl	801d006 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801930e:	4603      	mov	r3, r0
 8019310:	2b00      	cmp	r3, #0
 8019312:	d01d      	beq.n	8019350 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	33cc      	adds	r3, #204	; 0xcc
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	6878      	ldr	r0, [r7, #4]
 801931e:	4798      	blx	r3
 8019320:	4601      	mov	r1, r0
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019326:	f107 000c 	add.w	r0, r7, #12
 801932a:	683a      	ldr	r2, [r7, #0]
 801932c:	f004 fe24 	bl	801df78 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	33dc      	adds	r3, #220	; 0xdc
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	f107 020c 	add.w	r2, r7, #12
 801933c:	4611      	mov	r1, r2
 801933e:	6878      	ldr	r0, [r7, #4]
 8019340:	4798      	blx	r3
        return *this;
 8019342:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8019344:	f107 030c 	add.w	r3, r7, #12
 8019348:	4618      	mov	r0, r3
 801934a:	f001 ff4b 	bl	801b1e4 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 801934e:	e006      	b.n	801935e <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	33d8      	adds	r3, #216	; 0xd8
 8019356:	681b      	ldr	r3, [r3, #0]
 8019358:	6878      	ldr	r0, [r7, #4]
 801935a:	4798      	blx	r3

    return *this;
 801935c:	687c      	ldr	r4, [r7, #4]
 801935e:	4623      	mov	r3, r4
}
 8019360:	4618      	mov	r0, r3
 8019362:	3744      	adds	r7, #68	; 0x44
 8019364:	46bd      	mov	sp, r7
 8019366:	bd90      	pop	{r4, r7, pc}

08019368 <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 8019368:	b480      	push	{r7}
 801936a:	b083      	sub	sp, #12
 801936c:	af00      	add	r7, sp, #0
 801936e:	6078      	str	r0, [r7, #4]
 8019370:	6039      	str	r1, [r7, #0]
    return *this;
 8019372:	687b      	ldr	r3, [r7, #4]
}
 8019374:	4618      	mov	r0, r3
 8019376:	370c      	adds	r7, #12
 8019378:	46bd      	mov	sp, r7
 801937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801937e:	4770      	bx	lr

08019380 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 8019380:	b590      	push	{r4, r7, lr}
 8019382:	b097      	sub	sp, #92	; 0x5c
 8019384:	af02      	add	r7, sp, #8
 8019386:	6078      	str	r0, [r7, #4]
 8019388:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	33c0      	adds	r3, #192	; 0xc0
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	6878      	ldr	r0, [r7, #4]
 8019394:	4798      	blx	r3
 8019396:	4603      	mov	r3, r0
 8019398:	2b00      	cmp	r3, #0
 801939a:	d164      	bne.n	8019466 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	33ec      	adds	r3, #236	; 0xec
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	2100      	movs	r1, #0
 80193a6:	6878      	ldr	r0, [r7, #4]
 80193a8:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	33e8      	adds	r3, #232	; 0xe8
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	6878      	ldr	r0, [r7, #4]
 80193b4:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	331c      	adds	r3, #28
 80193ba:	6839      	ldr	r1, [r7, #0]
 80193bc:	4618      	mov	r0, r3
 80193be:	f004 f86b 	bl	801d498 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	331c      	adds	r3, #28
 80193c6:	4618      	mov	r0, r3
 80193c8:	f003 fe1d 	bl	801d006 <_ZNK21MockExpectedCallsList7isEmptyEv>
 80193cc:	4603      	mov	r3, r0
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	d02b      	beq.n	801942a <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	33cc      	adds	r3, #204	; 0xcc
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	6878      	ldr	r0, [r7, #4]
 80193dc:	4798      	blx	r3
 80193de:	4604      	mov	r4, r0
 80193e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80193e4:	6879      	ldr	r1, [r7, #4]
 80193e6:	4618      	mov	r0, r3
 80193e8:	f7ff fd41 	bl	8018e6e <_ZNK21MockCheckedActualCall7getNameEv>
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193f0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80193f4:	f107 000c 	add.w	r0, r7, #12
 80193f8:	9300      	str	r3, [sp, #0]
 80193fa:	683b      	ldr	r3, [r7, #0]
 80193fc:	4621      	mov	r1, r4
 80193fe:	f004 fe7f 	bl	801e100 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8019402:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019406:	4618      	mov	r0, r3
 8019408:	f7f5 f907 	bl	800e61a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	33dc      	adds	r3, #220	; 0xdc
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	f107 020c 	add.w	r2, r7, #12
 8019418:	4611      	mov	r1, r2
 801941a:	6878      	ldr	r0, [r7, #4]
 801941c:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 801941e:	f107 030c 	add.w	r3, r7, #12
 8019422:	4618      	mov	r0, r3
 8019424:	f001 ff00 	bl	801b228 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8019428:	e01e      	b.n	8019468 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	f103 041c 	add.w	r4, r3, #28
 8019430:	683b      	ldr	r3, [r7, #0]
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	335c      	adds	r3, #92	; 0x5c
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801943c:	6839      	ldr	r1, [r7, #0]
 801943e:	4610      	mov	r0, r2
 8019440:	4798      	blx	r3
 8019442:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019446:	4619      	mov	r1, r3
 8019448:	4620      	mov	r0, r4
 801944a:	f004 f9b8 	bl	801d7be <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 801944e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019452:	4618      	mov	r0, r3
 8019454:	f7f5 f8e1 	bl	800e61a <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	33d8      	adds	r3, #216	; 0xd8
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	6878      	ldr	r0, [r7, #4]
 8019462:	4798      	blx	r3
 8019464:	e000      	b.n	8019468 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 8019466:	bf00      	nop
}
 8019468:	3754      	adds	r7, #84	; 0x54
 801946a:	46bd      	mov	sp, r7
 801946c:	bd90      	pop	{r4, r7, pc}

0801946e <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 801946e:	b590      	push	{r4, r7, lr}
 8019470:	b097      	sub	sp, #92	; 0x5c
 8019472:	af02      	add	r7, sp, #8
 8019474:	6078      	str	r0, [r7, #4]
 8019476:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	33c0      	adds	r3, #192	; 0xc0
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	6878      	ldr	r0, [r7, #4]
 8019482:	4798      	blx	r3
 8019484:	4603      	mov	r3, r0
 8019486:	2b00      	cmp	r3, #0
 8019488:	d164      	bne.n	8019554 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	33ec      	adds	r3, #236	; 0xec
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	2100      	movs	r1, #0
 8019494:	6878      	ldr	r0, [r7, #4]
 8019496:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	33e8      	adds	r3, #232	; 0xe8
 801949e:	681b      	ldr	r3, [r3, #0]
 80194a0:	6878      	ldr	r0, [r7, #4]
 80194a2:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	331c      	adds	r3, #28
 80194a8:	6839      	ldr	r1, [r7, #0]
 80194aa:	4618      	mov	r0, r3
 80194ac:	f004 f820 	bl	801d4f0 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	331c      	adds	r3, #28
 80194b4:	4618      	mov	r0, r3
 80194b6:	f003 fda6 	bl	801d006 <_ZNK21MockExpectedCallsList7isEmptyEv>
 80194ba:	4603      	mov	r3, r0
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d02b      	beq.n	8019518 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	681b      	ldr	r3, [r3, #0]
 80194c4:	33cc      	adds	r3, #204	; 0xcc
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	6878      	ldr	r0, [r7, #4]
 80194ca:	4798      	blx	r3
 80194cc:	4604      	mov	r4, r0
 80194ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80194d2:	6879      	ldr	r1, [r7, #4]
 80194d4:	4618      	mov	r0, r3
 80194d6:	f7ff fcca 	bl	8018e6e <_ZNK21MockCheckedActualCall7getNameEv>
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194de:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80194e2:	f107 000c 	add.w	r0, r7, #12
 80194e6:	9300      	str	r3, [sp, #0]
 80194e8:	683b      	ldr	r3, [r7, #0]
 80194ea:	4621      	mov	r1, r4
 80194ec:	f004 ff6a 	bl	801e3c4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 80194f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80194f4:	4618      	mov	r0, r3
 80194f6:	f7f5 f890 	bl	800e61a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	33dc      	adds	r3, #220	; 0xdc
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	f107 020c 	add.w	r2, r7, #12
 8019506:	4611      	mov	r1, r2
 8019508:	6878      	ldr	r0, [r7, #4]
 801950a:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 801950c:	f107 030c 	add.w	r3, r7, #12
 8019510:	4618      	mov	r0, r3
 8019512:	f001 feab 	bl	801b26c <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8019516:	e01e      	b.n	8019556 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	f103 041c 	add.w	r4, r3, #28
 801951e:	683b      	ldr	r3, [r7, #0]
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	335c      	adds	r3, #92	; 0x5c
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801952a:	6839      	ldr	r1, [r7, #0]
 801952c:	4610      	mov	r0, r2
 801952e:	4798      	blx	r3
 8019530:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019534:	4619      	mov	r1, r3
 8019536:	4620      	mov	r0, r4
 8019538:	f004 f95e 	bl	801d7f8 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 801953c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019540:	4618      	mov	r0, r3
 8019542:	f7f5 f86a 	bl	800e61a <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	33d8      	adds	r3, #216	; 0xd8
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	6878      	ldr	r0, [r7, #4]
 8019550:	4798      	blx	r3
 8019552:	e000      	b.n	8019556 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 8019554:	bf00      	nop
}
 8019556:	3754      	adds	r7, #84	; 0x54
 8019558:	46bd      	mov	sp, r7
 801955a:	bd90      	pop	{r4, r7, pc}

0801955c <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 801955c:	b590      	push	{r4, r7, lr}
 801955e:	b093      	sub	sp, #76	; 0x4c
 8019560:	af00      	add	r7, sp, #0
 8019562:	60f8      	str	r0, [r7, #12]
 8019564:	60b9      	str	r1, [r7, #8]
 8019566:	4613      	mov	r3, r2
 8019568:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 801956a:	f107 0310 	add.w	r3, r7, #16
 801956e:	68b9      	ldr	r1, [r7, #8]
 8019570:	4618      	mov	r0, r3
 8019572:	f005 f9bf 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8019576:	79fa      	ldrb	r2, [r7, #7]
 8019578:	f107 0310 	add.w	r3, r7, #16
 801957c:	4611      	mov	r1, r2
 801957e:	4618      	mov	r0, r3
 8019580:	f005 fa0a 	bl	801e998 <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 8019584:	68fb      	ldr	r3, [r7, #12]
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	33e0      	adds	r3, #224	; 0xe0
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	f107 0210 	add.w	r2, r7, #16
 8019590:	4611      	mov	r1, r2
 8019592:	68f8      	ldr	r0, [r7, #12]
 8019594:	4798      	blx	r3
    return *this;
 8019596:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8019598:	f107 0310 	add.w	r3, r7, #16
 801959c:	4618      	mov	r0, r3
 801959e:	f005 f9d3 	bl	801e948 <_ZN14MockNamedValueD1Ev>
    return *this;
 80195a2:	4623      	mov	r3, r4
}
 80195a4:	4618      	mov	r0, r3
 80195a6:	374c      	adds	r7, #76	; 0x4c
 80195a8:	46bd      	mov	sp, r7
 80195aa:	bd90      	pop	{r4, r7, pc}

080195ac <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 80195ac:	b590      	push	{r4, r7, lr}
 80195ae:	b093      	sub	sp, #76	; 0x4c
 80195b0:	af00      	add	r7, sp, #0
 80195b2:	60f8      	str	r0, [r7, #12]
 80195b4:	60b9      	str	r1, [r7, #8]
 80195b6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80195b8:	f107 0310 	add.w	r3, r7, #16
 80195bc:	68b9      	ldr	r1, [r7, #8]
 80195be:	4618      	mov	r0, r3
 80195c0:	f005 f998 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80195c4:	f107 0310 	add.w	r3, r7, #16
 80195c8:	6879      	ldr	r1, [r7, #4]
 80195ca:	4618      	mov	r0, r3
 80195cc:	f005 fa08 	bl	801e9e0 <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	33e0      	adds	r3, #224	; 0xe0
 80195d6:	681b      	ldr	r3, [r3, #0]
 80195d8:	f107 0210 	add.w	r2, r7, #16
 80195dc:	4611      	mov	r1, r2
 80195de:	68f8      	ldr	r0, [r7, #12]
 80195e0:	4798      	blx	r3
    return *this;
 80195e2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80195e4:	f107 0310 	add.w	r3, r7, #16
 80195e8:	4618      	mov	r0, r3
 80195ea:	f005 f9ad 	bl	801e948 <_ZN14MockNamedValueD1Ev>
    return *this;
 80195ee:	4623      	mov	r3, r4
}
 80195f0:	4618      	mov	r0, r3
 80195f2:	374c      	adds	r7, #76	; 0x4c
 80195f4:	46bd      	mov	sp, r7
 80195f6:	bd90      	pop	{r4, r7, pc}

080195f8 <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 80195f8:	b590      	push	{r4, r7, lr}
 80195fa:	b093      	sub	sp, #76	; 0x4c
 80195fc:	af00      	add	r7, sp, #0
 80195fe:	60f8      	str	r0, [r7, #12]
 8019600:	60b9      	str	r1, [r7, #8]
 8019602:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8019604:	f107 0310 	add.w	r3, r7, #16
 8019608:	68b9      	ldr	r1, [r7, #8]
 801960a:	4618      	mov	r0, r3
 801960c:	f005 f972 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8019610:	f107 0310 	add.w	r3, r7, #16
 8019614:	6879      	ldr	r1, [r7, #4]
 8019616:	4618      	mov	r0, r3
 8019618:	f005 fa04 	bl	801ea24 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 801961c:	68fb      	ldr	r3, [r7, #12]
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	33e0      	adds	r3, #224	; 0xe0
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	f107 0210 	add.w	r2, r7, #16
 8019628:	4611      	mov	r1, r2
 801962a:	68f8      	ldr	r0, [r7, #12]
 801962c:	4798      	blx	r3
    return *this;
 801962e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8019630:	f107 0310 	add.w	r3, r7, #16
 8019634:	4618      	mov	r0, r3
 8019636:	f005 f987 	bl	801e948 <_ZN14MockNamedValueD1Ev>
    return *this;
 801963a:	4623      	mov	r3, r4
}
 801963c:	4618      	mov	r0, r3
 801963e:	374c      	adds	r7, #76	; 0x4c
 8019640:	46bd      	mov	sp, r7
 8019642:	bd90      	pop	{r4, r7, pc}

08019644 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8019644:	b590      	push	{r4, r7, lr}
 8019646:	b093      	sub	sp, #76	; 0x4c
 8019648:	af00      	add	r7, sp, #0
 801964a:	60f8      	str	r0, [r7, #12]
 801964c:	60b9      	str	r1, [r7, #8]
 801964e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8019650:	f107 0310 	add.w	r3, r7, #16
 8019654:	68b9      	ldr	r1, [r7, #8]
 8019656:	4618      	mov	r0, r3
 8019658:	f005 f94c 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801965c:	f107 0310 	add.w	r3, r7, #16
 8019660:	6879      	ldr	r1, [r7, #4]
 8019662:	4618      	mov	r0, r3
 8019664:	f005 fa22 	bl	801eaac <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	681b      	ldr	r3, [r3, #0]
 801966c:	33e0      	adds	r3, #224	; 0xe0
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	f107 0210 	add.w	r2, r7, #16
 8019674:	4611      	mov	r1, r2
 8019676:	68f8      	ldr	r0, [r7, #12]
 8019678:	4798      	blx	r3
    return *this;
 801967a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801967c:	f107 0310 	add.w	r3, r7, #16
 8019680:	4618      	mov	r0, r3
 8019682:	f005 f961 	bl	801e948 <_ZN14MockNamedValueD1Ev>
    return *this;
 8019686:	4623      	mov	r3, r4
}
 8019688:	4618      	mov	r0, r3
 801968a:	374c      	adds	r7, #76	; 0x4c
 801968c:	46bd      	mov	sp, r7
 801968e:	bd90      	pop	{r4, r7, pc}

08019690 <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8019690:	b590      	push	{r4, r7, lr}
 8019692:	b093      	sub	sp, #76	; 0x4c
 8019694:	af00      	add	r7, sp, #0
 8019696:	60f8      	str	r0, [r7, #12]
 8019698:	60b9      	str	r1, [r7, #8]
 801969a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801969c:	f107 0310 	add.w	r3, r7, #16
 80196a0:	68b9      	ldr	r1, [r7, #8]
 80196a2:	4618      	mov	r0, r3
 80196a4:	f005 f926 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80196a8:	f107 0310 	add.w	r3, r7, #16
 80196ac:	6879      	ldr	r1, [r7, #4]
 80196ae:	4618      	mov	r0, r3
 80196b0:	f005 f9da 	bl	801ea68 <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 80196b4:	68fb      	ldr	r3, [r7, #12]
 80196b6:	681b      	ldr	r3, [r3, #0]
 80196b8:	33e0      	adds	r3, #224	; 0xe0
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	f107 0210 	add.w	r2, r7, #16
 80196c0:	4611      	mov	r1, r2
 80196c2:	68f8      	ldr	r0, [r7, #12]
 80196c4:	4798      	blx	r3
    return *this;
 80196c6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80196c8:	f107 0310 	add.w	r3, r7, #16
 80196cc:	4618      	mov	r0, r3
 80196ce:	f005 f93b 	bl	801e948 <_ZN14MockNamedValueD1Ev>
    return *this;
 80196d2:	4623      	mov	r3, r4
}
 80196d4:	4618      	mov	r0, r3
 80196d6:	374c      	adds	r7, #76	; 0x4c
 80196d8:	46bd      	mov	sp, r7
 80196da:	bd90      	pop	{r4, r7, pc}

080196dc <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 80196dc:	b5b0      	push	{r4, r5, r7, lr}
 80196de:	b086      	sub	sp, #24
 80196e0:	af02      	add	r7, sp, #8
 80196e2:	60f8      	str	r0, [r7, #12]
 80196e4:	60b9      	str	r1, [r7, #8]
 80196e6:	4639      	mov	r1, r7
 80196e8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80196ec:	f7fb ffc0 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 80196f0:	4604      	mov	r4, r0
 80196f2:	6823      	ldr	r3, [r4, #0]
 80196f4:	3368      	adds	r3, #104	; 0x68
 80196f6:	681d      	ldr	r5, [r3, #0]
 80196f8:	f7fb ffca 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80196fc:	4603      	mov	r3, r0
 80196fe:	9300      	str	r3, [sp, #0]
 8019700:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8019704:	4a04      	ldr	r2, [pc, #16]	; (8019718 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8019706:	4905      	ldr	r1, [pc, #20]	; (801971c <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8019708:	4620      	mov	r0, r4
 801970a:	47a8      	blx	r5
    return *this;
 801970c:	68fb      	ldr	r3, [r7, #12]
}
 801970e:	4618      	mov	r0, r3
 8019710:	3710      	adds	r7, #16
 8019712:	46bd      	mov	sp, r7
 8019714:	bdb0      	pop	{r4, r5, r7, pc}
 8019716:	bf00      	nop
 8019718:	080277e0 	.word	0x080277e0
 801971c:	080277fc 	.word	0x080277fc

08019720 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8019720:	b5b0      	push	{r4, r5, r7, lr}
 8019722:	b086      	sub	sp, #24
 8019724:	af02      	add	r7, sp, #8
 8019726:	60f8      	str	r0, [r7, #12]
 8019728:	60b9      	str	r1, [r7, #8]
 801972a:	4639      	mov	r1, r7
 801972c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8019730:	f7fb ff9e 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8019734:	4604      	mov	r4, r0
 8019736:	6823      	ldr	r3, [r4, #0]
 8019738:	3368      	adds	r3, #104	; 0x68
 801973a:	681d      	ldr	r5, [r3, #0]
 801973c:	f7fb ffa8 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019740:	4603      	mov	r3, r0
 8019742:	9300      	str	r3, [sp, #0]
 8019744:	f44f 7388 	mov.w	r3, #272	; 0x110
 8019748:	4a04      	ldr	r2, [pc, #16]	; (801975c <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801974a:	4905      	ldr	r1, [pc, #20]	; (8019760 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 801974c:	4620      	mov	r0, r4
 801974e:	47a8      	blx	r5
    return *this;
 8019750:	68fb      	ldr	r3, [r7, #12]
}
 8019752:	4618      	mov	r0, r3
 8019754:	3710      	adds	r7, #16
 8019756:	46bd      	mov	sp, r7
 8019758:	bdb0      	pop	{r4, r5, r7, pc}
 801975a:	bf00      	nop
 801975c:	080277e0 	.word	0x080277e0
 8019760:	08027828 	.word	0x08027828

08019764 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 8019764:	b590      	push	{r4, r7, lr}
 8019766:	b093      	sub	sp, #76	; 0x4c
 8019768:	af00      	add	r7, sp, #0
 801976a:	60f8      	str	r0, [r7, #12]
 801976c:	60b9      	str	r1, [r7, #8]
 801976e:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 8019772:	f107 0310 	add.w	r3, r7, #16
 8019776:	68b9      	ldr	r1, [r7, #8]
 8019778:	4618      	mov	r0, r3
 801977a:	f005 f8bb 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801977e:	f107 0310 	add.w	r3, r7, #16
 8019782:	ed97 0b00 	vldr	d0, [r7]
 8019786:	4618      	mov	r0, r3
 8019788:	f005 f9ee 	bl	801eb68 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	33e0      	adds	r3, #224	; 0xe0
 8019792:	681b      	ldr	r3, [r3, #0]
 8019794:	f107 0210 	add.w	r2, r7, #16
 8019798:	4611      	mov	r1, r2
 801979a:	68f8      	ldr	r0, [r7, #12]
 801979c:	4798      	blx	r3
    return *this;
 801979e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80197a0:	f107 0310 	add.w	r3, r7, #16
 80197a4:	4618      	mov	r0, r3
 80197a6:	f005 f8cf 	bl	801e948 <_ZN14MockNamedValueD1Ev>
    return *this;
 80197aa:	4623      	mov	r3, r4
}
 80197ac:	4618      	mov	r0, r3
 80197ae:	374c      	adds	r7, #76	; 0x4c
 80197b0:	46bd      	mov	sp, r7
 80197b2:	bd90      	pop	{r4, r7, pc}

080197b4 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 80197b4:	b590      	push	{r4, r7, lr}
 80197b6:	b093      	sub	sp, #76	; 0x4c
 80197b8:	af00      	add	r7, sp, #0
 80197ba:	60f8      	str	r0, [r7, #12]
 80197bc:	60b9      	str	r1, [r7, #8]
 80197be:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80197c0:	f107 0310 	add.w	r3, r7, #16
 80197c4:	68b9      	ldr	r1, [r7, #8]
 80197c6:	4618      	mov	r0, r3
 80197c8:	f005 f894 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80197cc:	f107 0310 	add.w	r3, r7, #16
 80197d0:	6879      	ldr	r1, [r7, #4]
 80197d2:	4618      	mov	r0, r3
 80197d4:	f005 fa72 	bl	801ecbc <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 80197d8:	68fb      	ldr	r3, [r7, #12]
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	33e0      	adds	r3, #224	; 0xe0
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	f107 0210 	add.w	r2, r7, #16
 80197e4:	4611      	mov	r1, r2
 80197e6:	68f8      	ldr	r0, [r7, #12]
 80197e8:	4798      	blx	r3
    return *this;
 80197ea:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80197ec:	f107 0310 	add.w	r3, r7, #16
 80197f0:	4618      	mov	r0, r3
 80197f2:	f005 f8a9 	bl	801e948 <_ZN14MockNamedValueD1Ev>
    return *this;
 80197f6:	4623      	mov	r3, r4
}
 80197f8:	4618      	mov	r0, r3
 80197fa:	374c      	adds	r7, #76	; 0x4c
 80197fc:	46bd      	mov	sp, r7
 80197fe:	bd90      	pop	{r4, r7, pc}

08019800 <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 8019800:	b590      	push	{r4, r7, lr}
 8019802:	b093      	sub	sp, #76	; 0x4c
 8019804:	af00      	add	r7, sp, #0
 8019806:	60f8      	str	r0, [r7, #12]
 8019808:	60b9      	str	r1, [r7, #8]
 801980a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801980c:	f107 0310 	add.w	r3, r7, #16
 8019810:	68b9      	ldr	r1, [r7, #8]
 8019812:	4618      	mov	r0, r3
 8019814:	f005 f86e 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8019818:	f107 0310 	add.w	r3, r7, #16
 801981c:	6879      	ldr	r1, [r7, #4]
 801981e:	4618      	mov	r0, r3
 8019820:	f005 f9e6 	bl	801ebf0 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	33e0      	adds	r3, #224	; 0xe0
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	f107 0210 	add.w	r2, r7, #16
 8019830:	4611      	mov	r1, r2
 8019832:	68f8      	ldr	r0, [r7, #12]
 8019834:	4798      	blx	r3
    return *this;
 8019836:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8019838:	f107 0310 	add.w	r3, r7, #16
 801983c:	4618      	mov	r0, r3
 801983e:	f005 f883 	bl	801e948 <_ZN14MockNamedValueD1Ev>
    return *this;
 8019842:	4623      	mov	r3, r4
}
 8019844:	4618      	mov	r0, r3
 8019846:	374c      	adds	r7, #76	; 0x4c
 8019848:	46bd      	mov	sp, r7
 801984a:	bd90      	pop	{r4, r7, pc}

0801984c <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801984c:	b590      	push	{r4, r7, lr}
 801984e:	b093      	sub	sp, #76	; 0x4c
 8019850:	af00      	add	r7, sp, #0
 8019852:	60f8      	str	r0, [r7, #12]
 8019854:	60b9      	str	r1, [r7, #8]
 8019856:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8019858:	f107 0310 	add.w	r3, r7, #16
 801985c:	68b9      	ldr	r1, [r7, #8]
 801985e:	4618      	mov	r0, r3
 8019860:	f005 f848 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8019864:	f107 0310 	add.w	r3, r7, #16
 8019868:	6879      	ldr	r1, [r7, #4]
 801986a:	4618      	mov	r0, r3
 801986c:	f005 f9e2 	bl	801ec34 <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	33e0      	adds	r3, #224	; 0xe0
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	f107 0210 	add.w	r2, r7, #16
 801987c:	4611      	mov	r1, r2
 801987e:	68f8      	ldr	r0, [r7, #12]
 8019880:	4798      	blx	r3
    return *this;
 8019882:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8019884:	f107 0310 	add.w	r3, r7, #16
 8019888:	4618      	mov	r0, r3
 801988a:	f005 f85d 	bl	801e948 <_ZN14MockNamedValueD1Ev>
    return *this;
 801988e:	4623      	mov	r3, r4
}
 8019890:	4618      	mov	r0, r3
 8019892:	374c      	adds	r7, #76	; 0x4c
 8019894:	46bd      	mov	sp, r7
 8019896:	bd90      	pop	{r4, r7, pc}

08019898 <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8019898:	b590      	push	{r4, r7, lr}
 801989a:	b093      	sub	sp, #76	; 0x4c
 801989c:	af00      	add	r7, sp, #0
 801989e:	60f8      	str	r0, [r7, #12]
 80198a0:	60b9      	str	r1, [r7, #8]
 80198a2:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80198a4:	f107 0310 	add.w	r3, r7, #16
 80198a8:	68b9      	ldr	r1, [r7, #8]
 80198aa:	4618      	mov	r0, r3
 80198ac:	f005 f822 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80198b0:	f107 0310 	add.w	r3, r7, #16
 80198b4:	6879      	ldr	r1, [r7, #4]
 80198b6:	4618      	mov	r0, r3
 80198b8:	f005 f9de 	bl	801ec78 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 80198bc:	68fb      	ldr	r3, [r7, #12]
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	33e0      	adds	r3, #224	; 0xe0
 80198c2:	681b      	ldr	r3, [r3, #0]
 80198c4:	f107 0210 	add.w	r2, r7, #16
 80198c8:	4611      	mov	r1, r2
 80198ca:	68f8      	ldr	r0, [r7, #12]
 80198cc:	4798      	blx	r3
    return *this;
 80198ce:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80198d0:	f107 0310 	add.w	r3, r7, #16
 80198d4:	4618      	mov	r0, r3
 80198d6:	f005 f837 	bl	801e948 <_ZN14MockNamedValueD1Ev>
    return *this;
 80198da:	4623      	mov	r3, r4
}
 80198dc:	4618      	mov	r0, r3
 80198de:	374c      	adds	r7, #76	; 0x4c
 80198e0:	46bd      	mov	sp, r7
 80198e2:	bd90      	pop	{r4, r7, pc}

080198e4 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 80198e4:	b590      	push	{r4, r7, lr}
 80198e6:	b093      	sub	sp, #76	; 0x4c
 80198e8:	af00      	add	r7, sp, #0
 80198ea:	60f8      	str	r0, [r7, #12]
 80198ec:	60b9      	str	r1, [r7, #8]
 80198ee:	607a      	str	r2, [r7, #4]
 80198f0:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 80198f2:	f107 0310 	add.w	r3, r7, #16
 80198f6:	68b9      	ldr	r1, [r7, #8]
 80198f8:	4618      	mov	r0, r3
 80198fa:	f004 fffb 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 80198fe:	f107 0310 	add.w	r3, r7, #16
 8019902:	683a      	ldr	r2, [r7, #0]
 8019904:	6879      	ldr	r1, [r7, #4]
 8019906:	4618      	mov	r0, r3
 8019908:	f005 f9fa 	bl	801ed00 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	33e0      	adds	r3, #224	; 0xe0
 8019912:	681b      	ldr	r3, [r3, #0]
 8019914:	f107 0210 	add.w	r2, r7, #16
 8019918:	4611      	mov	r1, r2
 801991a:	68f8      	ldr	r0, [r7, #12]
 801991c:	4798      	blx	r3
    return *this;
 801991e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8019920:	f107 0310 	add.w	r3, r7, #16
 8019924:	4618      	mov	r0, r3
 8019926:	f005 f80f 	bl	801e948 <_ZN14MockNamedValueD1Ev>
    return *this;
 801992a:	4623      	mov	r3, r4
}
 801992c:	4618      	mov	r0, r3
 801992e:	374c      	adds	r7, #76	; 0x4c
 8019930:	46bd      	mov	sp, r7
 8019932:	bd90      	pop	{r4, r7, pc}

08019934 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8019934:	b590      	push	{r4, r7, lr}
 8019936:	b0a1      	sub	sp, #132	; 0x84
 8019938:	af00      	add	r7, sp, #0
 801993a:	60f8      	str	r0, [r7, #12]
 801993c:	60b9      	str	r1, [r7, #8]
 801993e:	607a      	str	r2, [r7, #4]
 8019940:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8019942:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019946:	6879      	ldr	r1, [r7, #4]
 8019948:	4618      	mov	r0, r3
 801994a:	f004 ffd3 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 801994e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019952:	683a      	ldr	r2, [r7, #0]
 8019954:	68b9      	ldr	r1, [r7, #8]
 8019956:	4618      	mov	r0, r3
 8019958:	f005 f9f8 	bl	801ed4c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 801995c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019960:	4618      	mov	r0, r3
 8019962:	f005 fdc5 	bl	801f4f0 <_ZNK14MockNamedValue13getComparatorEv>
 8019966:	4603      	mov	r3, r0
 8019968:	2b00      	cmp	r3, #0
 801996a:	bf0c      	ite	eq
 801996c:	2301      	moveq	r3, #1
 801996e:	2300      	movne	r3, #0
 8019970:	b2db      	uxtb	r3, r3
 8019972:	2b00      	cmp	r3, #0
 8019974:	d01c      	beq.n	80199b0 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	33cc      	adds	r3, #204	; 0xcc
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	68f8      	ldr	r0, [r7, #12]
 8019980:	4798      	blx	r3
 8019982:	4601      	mov	r1, r0
 8019984:	f107 0314 	add.w	r3, r7, #20
 8019988:	68ba      	ldr	r2, [r7, #8]
 801998a:	4618      	mov	r0, r3
 801998c:	f004 fed6 	bl	801e73c <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 8019990:	68fb      	ldr	r3, [r7, #12]
 8019992:	681b      	ldr	r3, [r3, #0]
 8019994:	33dc      	adds	r3, #220	; 0xdc
 8019996:	681b      	ldr	r3, [r3, #0]
 8019998:	f107 0214 	add.w	r2, r7, #20
 801999c:	4611      	mov	r1, r2
 801999e:	68f8      	ldr	r0, [r7, #12]
 80199a0:	4798      	blx	r3
        return *this;
 80199a2:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 80199a4:	f107 0314 	add.w	r3, r7, #20
 80199a8:	4618      	mov	r0, r3
 80199aa:	f001 fc81 	bl	801b2b0 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 80199ae:	e009      	b.n	80199c4 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 80199b0:	68fb      	ldr	r3, [r7, #12]
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	33e0      	adds	r3, #224	; 0xe0
 80199b6:	681b      	ldr	r3, [r3, #0]
 80199b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80199bc:	4611      	mov	r1, r2
 80199be:	68f8      	ldr	r0, [r7, #12]
 80199c0:	4798      	blx	r3
    return *this;
 80199c2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80199c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80199c8:	4618      	mov	r0, r3
 80199ca:	f004 ffbd 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 80199ce:	4623      	mov	r3, r4
}
 80199d0:	4618      	mov	r0, r3
 80199d2:	3784      	adds	r7, #132	; 0x84
 80199d4:	46bd      	mov	sp, r7
 80199d6:	bd90      	pop	{r4, r7, pc}

080199d8 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 80199d8:	b590      	push	{r4, r7, lr}
 80199da:	b095      	sub	sp, #84	; 0x54
 80199dc:	af00      	add	r7, sp, #0
 80199de:	60f8      	str	r0, [r7, #12]
 80199e0:	60b9      	str	r1, [r7, #8]
 80199e2:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 80199e4:	68fb      	ldr	r3, [r7, #12]
 80199e6:	681b      	ldr	r3, [r3, #0]
 80199e8:	33f0      	adds	r3, #240	; 0xf0
 80199ea:	681c      	ldr	r4, [r3, #0]
 80199ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80199f0:	4917      	ldr	r1, [pc, #92]	; (8019a50 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 80199f2:	4618      	mov	r0, r3
 80199f4:	f7f4 fa59 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80199f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	68b9      	ldr	r1, [r7, #8]
 8019a00:	68f8      	ldr	r0, [r7, #12]
 8019a02:	47a0      	blx	r4
 8019a04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019a08:	4618      	mov	r0, r3
 8019a0a:	f7f4 fe06 	bl	800e61a <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 8019a0e:	f107 0310 	add.w	r3, r7, #16
 8019a12:	68b9      	ldr	r1, [r7, #8]
 8019a14:	4618      	mov	r0, r3
 8019a16:	f004 ff6d 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 8019a1a:	f107 0310 	add.w	r3, r7, #16
 8019a1e:	6879      	ldr	r1, [r7, #4]
 8019a20:	4618      	mov	r0, r3
 8019a22:	f005 f8e5 	bl	801ebf0 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 8019a26:	68fb      	ldr	r3, [r7, #12]
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	33e4      	adds	r3, #228	; 0xe4
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	f107 0210 	add.w	r2, r7, #16
 8019a32:	4611      	mov	r1, r2
 8019a34:	68f8      	ldr	r0, [r7, #12]
 8019a36:	4798      	blx	r3

    return *this;
 8019a38:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8019a3a:	f107 0310 	add.w	r3, r7, #16
 8019a3e:	4618      	mov	r0, r3
 8019a40:	f004 ff82 	bl	801e948 <_ZN14MockNamedValueD1Ev>
    return *this;
 8019a44:	4623      	mov	r3, r4
}
 8019a46:	4618      	mov	r0, r3
 8019a48:	3754      	adds	r7, #84	; 0x54
 8019a4a:	46bd      	mov	sp, r7
 8019a4c:	bd90      	pop	{r4, r7, pc}
 8019a4e:	bf00      	nop
 8019a50:	080277d8 	.word	0x080277d8

08019a54 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 8019a54:	b590      	push	{r4, r7, lr}
 8019a56:	b093      	sub	sp, #76	; 0x4c
 8019a58:	af00      	add	r7, sp, #0
 8019a5a:	60f8      	str	r0, [r7, #12]
 8019a5c:	60b9      	str	r1, [r7, #8]
 8019a5e:	607a      	str	r2, [r7, #4]
 8019a60:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 8019a62:	68fb      	ldr	r3, [r7, #12]
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	33f0      	adds	r3, #240	; 0xf0
 8019a68:	681c      	ldr	r4, [r3, #0]
 8019a6a:	683b      	ldr	r3, [r7, #0]
 8019a6c:	68ba      	ldr	r2, [r7, #8]
 8019a6e:	6879      	ldr	r1, [r7, #4]
 8019a70:	68f8      	ldr	r0, [r7, #12]
 8019a72:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 8019a74:	f107 0310 	add.w	r3, r7, #16
 8019a78:	6879      	ldr	r1, [r7, #4]
 8019a7a:	4618      	mov	r0, r3
 8019a7c:	f004 ff3a 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 8019a80:	f107 0310 	add.w	r3, r7, #16
 8019a84:	683a      	ldr	r2, [r7, #0]
 8019a86:	68b9      	ldr	r1, [r7, #8]
 8019a88:	4618      	mov	r0, r3
 8019a8a:	f005 f95f 	bl	801ed4c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	33e4      	adds	r3, #228	; 0xe4
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	f107 0210 	add.w	r2, r7, #16
 8019a9a:	4611      	mov	r1, r2
 8019a9c:	68f8      	ldr	r0, [r7, #12]
 8019a9e:	4798      	blx	r3

    return *this;
 8019aa0:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8019aa2:	f107 0310 	add.w	r3, r7, #16
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	f004 ff4e 	bl	801e948 <_ZN14MockNamedValueD1Ev>
    return *this;
 8019aac:	4623      	mov	r3, r4
}
 8019aae:	4618      	mov	r0, r3
 8019ab0:	374c      	adds	r7, #76	; 0x4c
 8019ab2:	46bd      	mov	sp, r7
 8019ab4:	bd90      	pop	{r4, r7, pc}

08019ab6 <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 8019ab6:	b480      	push	{r7}
 8019ab8:	b083      	sub	sp, #12
 8019aba:	af00      	add	r7, sp, #0
 8019abc:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	7d1b      	ldrb	r3, [r3, #20]
 8019ac2:	2b02      	cmp	r3, #2
 8019ac4:	bf0c      	ite	eq
 8019ac6:	2301      	moveq	r3, #1
 8019ac8:	2300      	movne	r3, #0
 8019aca:	b2db      	uxtb	r3, r3
}
 8019acc:	4618      	mov	r0, r3
 8019ace:	370c      	adds	r7, #12
 8019ad0:	46bd      	mov	sp, r7
 8019ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ad6:	4770      	bx	lr

08019ad8 <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 8019ad8:	b480      	push	{r7}
 8019ada:	b083      	sub	sp, #12
 8019adc:	af00      	add	r7, sp, #0
 8019ade:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	7d1b      	ldrb	r3, [r3, #20]
 8019ae4:	2b01      	cmp	r3, #1
 8019ae6:	bf0c      	ite	eq
 8019ae8:	2301      	moveq	r3, #1
 8019aea:	2300      	movne	r3, #0
 8019aec:	b2db      	uxtb	r3, r3
}
 8019aee:	4618      	mov	r0, r3
 8019af0:	370c      	adds	r7, #12
 8019af2:	46bd      	mov	sp, r7
 8019af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019af8:	4770      	bx	lr
	...

08019afc <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 8019afc:	b5b0      	push	{r4, r5, r7, lr}
 8019afe:	b096      	sub	sp, #88	; 0x58
 8019b00:	af02      	add	r7, sp, #8
 8019b02:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	7d5b      	ldrb	r3, [r3, #21]
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	f040 80bc 	bne.w	8019c86 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	2201      	movs	r2, #1
 8019b12:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	7d1b      	ldrb	r3, [r3, #20]
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d014      	beq.n	8019b46 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	7d1b      	ldrb	r3, [r3, #20]
 8019b20:	2b02      	cmp	r3, #2
 8019b22:	d10a      	bne.n	8019b3a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	6998      	ldr	r0, [r3, #24]
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	699b      	ldr	r3, [r3, #24]
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	33d8      	adds	r3, #216	; 0xd8
 8019b30:	681b      	ldr	r3, [r3, #0]
 8019b32:	687a      	ldr	r2, [r7, #4]
 8019b34:	68d2      	ldr	r2, [r2, #12]
 8019b36:	4611      	mov	r1, r2
 8019b38:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	331c      	adds	r3, #28
 8019b3e:	4618      	mov	r0, r3
 8019b40:	f003 fe07 	bl	801d752 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8019b44:	e0a0      	b.n	8019c88 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	331c      	adds	r3, #28
 8019b4a:	4618      	mov	r0, r3
 8019b4c:	f003 fac3 	bl	801d0d6 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 8019b50:	4603      	mov	r3, r0
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d00f      	beq.n	8019b76 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 8019b56:	f7fb fd8b 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8019b5a:	4604      	mov	r4, r0
 8019b5c:	6823      	ldr	r3, [r4, #0]
 8019b5e:	3368      	adds	r3, #104	; 0x68
 8019b60:	681d      	ldr	r5, [r3, #0]
 8019b62:	f7fb fd95 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019b66:	4603      	mov	r3, r0
 8019b68:	9300      	str	r3, [sp, #0]
 8019b6a:	f240 1385 	movw	r3, #389	; 0x185
 8019b6e:	4a48      	ldr	r2, [pc, #288]	; (8019c90 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 8019b70:	4948      	ldr	r1, [pc, #288]	; (8019c94 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 8019b72:	4620      	mov	r0, r4
 8019b74:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	331c      	adds	r3, #28
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	f003 fd5f 	bl	801d63e <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 8019b80:	4602      	mov	r2, r0
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	699b      	ldr	r3, [r3, #24]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d01f      	beq.n	8019bce <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	699a      	ldr	r2, [r3, #24]
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	699b      	ldr	r3, [r3, #24]
 8019b96:	681b      	ldr	r3, [r3, #0]
 8019b98:	33e4      	adds	r3, #228	; 0xe4
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	4610      	mov	r0, r2
 8019b9e:	4798      	blx	r3
        callHasSucceeded();
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	681b      	ldr	r3, [r3, #0]
 8019ba4:	33d0      	adds	r3, #208	; 0xd0
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	6878      	ldr	r0, [r7, #4]
 8019baa:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	6998      	ldr	r0, [r3, #24]
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	699b      	ldr	r3, [r3, #24]
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	33d8      	adds	r3, #216	; 0xd8
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	687a      	ldr	r2, [r7, #4]
 8019bbc:	68d2      	ldr	r2, [r2, #12]
 8019bbe:	4611      	mov	r1, r2
 8019bc0:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	331c      	adds	r3, #28
 8019bc6:	4618      	mov	r0, r3
 8019bc8:	f003 fdc3 	bl	801d752 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8019bcc:	e05c      	b.n	8019c88 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	331c      	adds	r3, #28
 8019bd2:	4618      	mov	r0, r3
 8019bd4:	f003 ffc4 	bl	801db60 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 8019bd8:	4603      	mov	r3, r0
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d029      	beq.n	8019c32 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	33cc      	adds	r3, #204	; 0xcc
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	6878      	ldr	r0, [r7, #4]
 8019be8:	4798      	blx	r3
 8019bea:	4604      	mov	r4, r0
 8019bec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019bf0:	6879      	ldr	r1, [r7, #4]
 8019bf2:	4618      	mov	r0, r3
 8019bf4:	f7ff f93b 	bl	8018e6e <_ZNK21MockCheckedActualCall7getNameEv>
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bfc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8019c00:	f107 000c 	add.w	r0, r7, #12
 8019c04:	4621      	mov	r1, r4
 8019c06:	f004 fd21 	bl	801e64c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8019c0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019c0e:	4618      	mov	r0, r3
 8019c10:	f7f4 fd03 	bl	800e61a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	33dc      	adds	r3, #220	; 0xdc
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	f107 020c 	add.w	r2, r7, #12
 8019c20:	4611      	mov	r1, r2
 8019c22:	6878      	ldr	r0, [r7, #4]
 8019c24:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8019c26:	f107 030c 	add.w	r3, r7, #12
 8019c2a:	4618      	mov	r0, r3
 8019c2c:	f001 fb62 	bl	801b2f4 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8019c30:	e02a      	b.n	8019c88 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	33cc      	adds	r3, #204	; 0xcc
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	6878      	ldr	r0, [r7, #4]
 8019c3c:	4798      	blx	r3
 8019c3e:	4604      	mov	r4, r0
 8019c40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019c44:	6879      	ldr	r1, [r7, #4]
 8019c46:	4618      	mov	r0, r3
 8019c48:	f7ff f911 	bl	8018e6e <_ZNK21MockCheckedActualCall7getNameEv>
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019c54:	f107 000c 	add.w	r0, r7, #12
 8019c58:	4621      	mov	r1, r4
 8019c5a:	f004 fe05 	bl	801e868 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8019c5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019c62:	4618      	mov	r0, r3
 8019c64:	f7f4 fcd9 	bl	800e61a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	33dc      	adds	r3, #220	; 0xdc
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	f107 020c 	add.w	r2, r7, #12
 8019c74:	4611      	mov	r1, r2
 8019c76:	6878      	ldr	r0, [r7, #4]
 8019c78:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8019c7a:	f107 030c 	add.w	r3, r7, #12
 8019c7e:	4618      	mov	r0, r3
 8019c80:	f001 fb5a 	bl	801b338 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8019c84:	e000      	b.n	8019c88 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 8019c86:	bf00      	nop
    }
}
 8019c88:	3750      	adds	r7, #80	; 0x50
 8019c8a:	46bd      	mov	sp, r7
 8019c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8019c8e:	bf00      	nop
 8019c90:	080277e0 	.word	0x080277e0
 8019c94:	08027848 	.word	0x08027848

08019c98 <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 8019c98:	b480      	push	{r7}
 8019c9a:	b083      	sub	sp, #12
 8019c9c:	af00      	add	r7, sp, #0
 8019c9e:	6078      	str	r0, [r7, #4]
 8019ca0:	460b      	mov	r3, r1
 8019ca2:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	78fa      	ldrb	r2, [r7, #3]
 8019ca8:	751a      	strb	r2, [r3, #20]
}
 8019caa:	bf00      	nop
 8019cac:	370c      	adds	r7, #12
 8019cae:	46bd      	mov	sp, r7
 8019cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cb4:	4770      	bx	lr
	...

08019cb8 <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 8019cb8:	b580      	push	{r7, lr}
 8019cba:	b084      	sub	sp, #16
 8019cbc:	af00      	add	r7, sp, #0
 8019cbe:	6078      	str	r0, [r7, #4]
 8019cc0:	6039      	str	r1, [r7, #0]
    checkExpectations();
 8019cc2:	683b      	ldr	r3, [r7, #0]
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	33c4      	adds	r3, #196	; 0xc4
 8019cc8:	681b      	ldr	r3, [r3, #0]
 8019cca:	6838      	ldr	r0, [r7, #0]
 8019ccc:	4798      	blx	r3
    if (matchingExpectation_)
 8019cce:	683b      	ldr	r3, [r7, #0]
 8019cd0:	699b      	ldr	r3, [r3, #24]
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d00a      	beq.n	8019cec <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 8019cd6:	683b      	ldr	r3, [r7, #0]
 8019cd8:	6999      	ldr	r1, [r3, #24]
 8019cda:	683b      	ldr	r3, [r7, #0]
 8019cdc:	699b      	ldr	r3, [r3, #24]
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	3394      	adds	r3, #148	; 0x94
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	687a      	ldr	r2, [r7, #4]
 8019ce6:	4610      	mov	r0, r2
 8019ce8:	4798      	blx	r3
 8019cea:	e010      	b.n	8019d0e <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 8019cec:	f107 0308 	add.w	r3, r7, #8
 8019cf0:	4909      	ldr	r1, [pc, #36]	; (8019d18 <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	f7f4 f8d9 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8019cf8:	f107 0308 	add.w	r3, r7, #8
 8019cfc:	4619      	mov	r1, r3
 8019cfe:	6878      	ldr	r0, [r7, #4]
 8019d00:	f004 fdf8 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
 8019d04:	f107 0308 	add.w	r3, r7, #8
 8019d08:	4618      	mov	r0, r3
 8019d0a:	f7f4 fc86 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 8019d0e:	6878      	ldr	r0, [r7, #4]
 8019d10:	3710      	adds	r7, #16
 8019d12:	46bd      	mov	sp, r7
 8019d14:	bd80      	pop	{r7, pc}
 8019d16:	bf00      	nop
 8019d18:	080278c4 	.word	0x080278c4

08019d1c <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 8019d1c:	b580      	push	{r7, lr}
 8019d1e:	b082      	sub	sp, #8
 8019d20:	af00      	add	r7, sp, #0
 8019d22:	6078      	str	r0, [r7, #4]
 8019d24:	460b      	mov	r3, r1
 8019d26:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	3350      	adds	r3, #80	; 0x50
 8019d2e:	681b      	ldr	r3, [r3, #0]
 8019d30:	6878      	ldr	r0, [r7, #4]
 8019d32:	4798      	blx	r3
 8019d34:	4603      	mov	r3, r0
 8019d36:	f083 0301 	eor.w	r3, r3, #1
 8019d3a:	b2db      	uxtb	r3, r3
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d001      	beq.n	8019d44 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 8019d40:	78fb      	ldrb	r3, [r7, #3]
 8019d42:	e007      	b.n	8019d54 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	335c      	adds	r3, #92	; 0x5c
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	6878      	ldr	r0, [r7, #4]
 8019d4e:	4798      	blx	r3
 8019d50:	4603      	mov	r3, r0
 8019d52:	bf00      	nop
}
 8019d54:	4618      	mov	r0, r3
 8019d56:	3708      	adds	r7, #8
 8019d58:	46bd      	mov	sp, r7
 8019d5a:	bd80      	pop	{r7, pc}

08019d5c <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 8019d5c:	b590      	push	{r4, r7, lr}
 8019d5e:	b091      	sub	sp, #68	; 0x44
 8019d60:	af00      	add	r7, sp, #0
 8019d62:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	3354      	adds	r3, #84	; 0x54
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	f107 0208 	add.w	r2, r7, #8
 8019d70:	6879      	ldr	r1, [r7, #4]
 8019d72:	4610      	mov	r0, r2
 8019d74:	4798      	blx	r3
 8019d76:	f107 0308 	add.w	r3, r7, #8
 8019d7a:	4618      	mov	r0, r3
 8019d7c:	f005 f896 	bl	801eeac <_ZNK14MockNamedValue12getBoolValueEv>
 8019d80:	4603      	mov	r3, r0
 8019d82:	461c      	mov	r4, r3
 8019d84:	bf00      	nop
 8019d86:	f107 0308 	add.w	r3, r7, #8
 8019d8a:	4618      	mov	r0, r3
 8019d8c:	f004 fddc 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 8019d90:	4623      	mov	r3, r4
}
 8019d92:	4618      	mov	r0, r3
 8019d94:	3744      	adds	r7, #68	; 0x44
 8019d96:	46bd      	mov	sp, r7
 8019d98:	bd90      	pop	{r4, r7, pc}

08019d9a <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 8019d9a:	b580      	push	{r7, lr}
 8019d9c:	b082      	sub	sp, #8
 8019d9e:	af00      	add	r7, sp, #0
 8019da0:	6078      	str	r0, [r7, #4]
 8019da2:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	681b      	ldr	r3, [r3, #0]
 8019da8:	3350      	adds	r3, #80	; 0x50
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	6878      	ldr	r0, [r7, #4]
 8019dae:	4798      	blx	r3
 8019db0:	4603      	mov	r3, r0
 8019db2:	f083 0301 	eor.w	r3, r3, #1
 8019db6:	b2db      	uxtb	r3, r3
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d001      	beq.n	8019dc0 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 8019dbc:	683b      	ldr	r3, [r7, #0]
 8019dbe:	e007      	b.n	8019dd0 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	3364      	adds	r3, #100	; 0x64
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	6878      	ldr	r0, [r7, #4]
 8019dca:	4798      	blx	r3
 8019dcc:	4603      	mov	r3, r0
 8019dce:	bf00      	nop
}
 8019dd0:	4618      	mov	r0, r3
 8019dd2:	3708      	adds	r7, #8
 8019dd4:	46bd      	mov	sp, r7
 8019dd6:	bd80      	pop	{r7, pc}

08019dd8 <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 8019dd8:	b590      	push	{r4, r7, lr}
 8019dda:	b091      	sub	sp, #68	; 0x44
 8019ddc:	af00      	add	r7, sp, #0
 8019dde:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	3354      	adds	r3, #84	; 0x54
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	f107 0208 	add.w	r2, r7, #8
 8019dec:	6879      	ldr	r1, [r7, #4]
 8019dee:	4610      	mov	r0, r2
 8019df0:	4798      	blx	r3
 8019df2:	f107 0308 	add.w	r3, r7, #8
 8019df6:	4618      	mov	r0, r3
 8019df8:	f005 f8d0 	bl	801ef9c <_ZNK14MockNamedValue11getIntValueEv>
 8019dfc:	4604      	mov	r4, r0
 8019dfe:	bf00      	nop
 8019e00:	f107 0308 	add.w	r3, r7, #8
 8019e04:	4618      	mov	r0, r3
 8019e06:	f004 fd9f 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 8019e0a:	4623      	mov	r3, r4
}
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	3744      	adds	r7, #68	; 0x44
 8019e10:	46bd      	mov	sp, r7
 8019e12:	bd90      	pop	{r4, r7, pc}

08019e14 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 8019e14:	b590      	push	{r4, r7, lr}
 8019e16:	b091      	sub	sp, #68	; 0x44
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	3354      	adds	r3, #84	; 0x54
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	f107 0208 	add.w	r2, r7, #8
 8019e28:	6879      	ldr	r1, [r7, #4]
 8019e2a:	4610      	mov	r0, r2
 8019e2c:	4798      	blx	r3
 8019e2e:	f107 0308 	add.w	r3, r7, #8
 8019e32:	4618      	mov	r0, r3
 8019e34:	f005 f93c 	bl	801f0b0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 8019e38:	4604      	mov	r4, r0
 8019e3a:	bf00      	nop
 8019e3c:	f107 0308 	add.w	r3, r7, #8
 8019e40:	4618      	mov	r0, r3
 8019e42:	f004 fd81 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 8019e46:	4623      	mov	r3, r4
}
 8019e48:	4618      	mov	r0, r3
 8019e4a:	3744      	adds	r7, #68	; 0x44
 8019e4c:	46bd      	mov	sp, r7
 8019e4e:	bd90      	pop	{r4, r7, pc}

08019e50 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 8019e50:	b580      	push	{r7, lr}
 8019e52:	b082      	sub	sp, #8
 8019e54:	af00      	add	r7, sp, #0
 8019e56:	6078      	str	r0, [r7, #4]
 8019e58:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	3350      	adds	r3, #80	; 0x50
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	6878      	ldr	r0, [r7, #4]
 8019e64:	4798      	blx	r3
 8019e66:	4603      	mov	r3, r0
 8019e68:	f083 0301 	eor.w	r3, r3, #1
 8019e6c:	b2db      	uxtb	r3, r3
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d001      	beq.n	8019e76 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 8019e72:	683b      	ldr	r3, [r7, #0]
 8019e74:	e007      	b.n	8019e86 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	3368      	adds	r3, #104	; 0x68
 8019e7c:	681b      	ldr	r3, [r3, #0]
 8019e7e:	6878      	ldr	r0, [r7, #4]
 8019e80:	4798      	blx	r3
 8019e82:	4603      	mov	r3, r0
 8019e84:	bf00      	nop
}
 8019e86:	4618      	mov	r0, r3
 8019e88:	3708      	adds	r7, #8
 8019e8a:	46bd      	mov	sp, r7
 8019e8c:	bd80      	pop	{r7, pc}

08019e8e <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 8019e8e:	b590      	push	{r4, r7, lr}
 8019e90:	b091      	sub	sp, #68	; 0x44
 8019e92:	af00      	add	r7, sp, #0
 8019e94:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	3354      	adds	r3, #84	; 0x54
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	f107 0208 	add.w	r2, r7, #8
 8019ea2:	6879      	ldr	r1, [r7, #4]
 8019ea4:	4610      	mov	r0, r2
 8019ea6:	4798      	blx	r3
 8019ea8:	f107 0308 	add.w	r3, r7, #8
 8019eac:	4618      	mov	r0, r3
 8019eae:	f005 f89d 	bl	801efec <_ZNK14MockNamedValue15getLongIntValueEv>
 8019eb2:	4604      	mov	r4, r0
 8019eb4:	bf00      	nop
 8019eb6:	f107 0308 	add.w	r3, r7, #8
 8019eba:	4618      	mov	r0, r3
 8019ebc:	f004 fd44 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 8019ec0:	4623      	mov	r3, r4
}
 8019ec2:	4618      	mov	r0, r3
 8019ec4:	3744      	adds	r7, #68	; 0x44
 8019ec6:	46bd      	mov	sp, r7
 8019ec8:	bd90      	pop	{r4, r7, pc}

08019eca <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 8019eca:	b580      	push	{r7, lr}
 8019ecc:	b082      	sub	sp, #8
 8019ece:	af00      	add	r7, sp, #0
 8019ed0:	6078      	str	r0, [r7, #4]
 8019ed2:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	3350      	adds	r3, #80	; 0x50
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	6878      	ldr	r0, [r7, #4]
 8019ede:	4798      	blx	r3
 8019ee0:	4603      	mov	r3, r0
 8019ee2:	f083 0301 	eor.w	r3, r3, #1
 8019ee6:	b2db      	uxtb	r3, r3
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d001      	beq.n	8019ef0 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 8019eec:	683b      	ldr	r3, [r7, #0]
 8019eee:	e007      	b.n	8019f00 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	3370      	adds	r3, #112	; 0x70
 8019ef6:	681b      	ldr	r3, [r3, #0]
 8019ef8:	6878      	ldr	r0, [r7, #4]
 8019efa:	4798      	blx	r3
 8019efc:	4603      	mov	r3, r0
 8019efe:	bf00      	nop
}
 8019f00:	4618      	mov	r0, r3
 8019f02:	3708      	adds	r7, #8
 8019f04:	46bd      	mov	sp, r7
 8019f06:	bd80      	pop	{r7, pc}

08019f08 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 8019f08:	b5b0      	push	{r4, r5, r7, lr}
 8019f0a:	b084      	sub	sp, #16
 8019f0c:	af02      	add	r7, sp, #8
 8019f0e:	6078      	str	r0, [r7, #4]
 8019f10:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8019f12:	f7fb fbad 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8019f16:	4604      	mov	r4, r0
 8019f18:	6823      	ldr	r3, [r4, #0]
 8019f1a:	3368      	adds	r3, #104	; 0x68
 8019f1c:	681d      	ldr	r5, [r3, #0]
 8019f1e:	f7fb fbb7 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019f22:	4603      	mov	r3, r0
 8019f24:	9300      	str	r3, [sp, #0]
 8019f26:	f240 13fb 	movw	r3, #507	; 0x1fb
 8019f2a:	4a06      	ldr	r2, [pc, #24]	; (8019f44 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 8019f2c:	4906      	ldr	r1, [pc, #24]	; (8019f48 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 8019f2e:	4620      	mov	r0, r4
 8019f30:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8019f32:	2100      	movs	r1, #0
 8019f34:	6878      	ldr	r0, [r7, #4]
 8019f36:	f7f1 fffb 	bl	800bf30 <_ZN18cpputest_ulonglongC1Ei>
}
 8019f3a:	6878      	ldr	r0, [r7, #4]
 8019f3c:	3708      	adds	r7, #8
 8019f3e:	46bd      	mov	sp, r7
 8019f40:	bdb0      	pop	{r4, r5, r7, pc}
 8019f42:	bf00      	nop
 8019f44:	080277e0 	.word	0x080277e0
 8019f48:	080277fc 	.word	0x080277fc

08019f4c <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 8019f4c:	b5b0      	push	{r4, r5, r7, lr}
 8019f4e:	b086      	sub	sp, #24
 8019f50:	af02      	add	r7, sp, #8
 8019f52:	60f8      	str	r0, [r7, #12]
 8019f54:	60b9      	str	r1, [r7, #8]
 8019f56:	4639      	mov	r1, r7
 8019f58:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8019f5c:	f7fb fb88 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8019f60:	4604      	mov	r4, r0
 8019f62:	6823      	ldr	r3, [r4, #0]
 8019f64:	3368      	adds	r3, #104	; 0x68
 8019f66:	681d      	ldr	r5, [r3, #0]
 8019f68:	f7fb fb92 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019f6c:	4603      	mov	r3, r0
 8019f6e:	9300      	str	r3, [sp, #0]
 8019f70:	f240 2301 	movw	r3, #513	; 0x201
 8019f74:	4a06      	ldr	r2, [pc, #24]	; (8019f90 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8019f76:	4907      	ldr	r1, [pc, #28]	; (8019f94 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8019f78:	4620      	mov	r0, r4
 8019f7a:	47a8      	blx	r5
    return default_value;
 8019f7c:	68fb      	ldr	r3, [r7, #12]
 8019f7e:	461a      	mov	r2, r3
 8019f80:	463b      	mov	r3, r7
 8019f82:	cb03      	ldmia	r3!, {r0, r1}
 8019f84:	6010      	str	r0, [r2, #0]
 8019f86:	6051      	str	r1, [r2, #4]
}
 8019f88:	68f8      	ldr	r0, [r7, #12]
 8019f8a:	3710      	adds	r7, #16
 8019f8c:	46bd      	mov	sp, r7
 8019f8e:	bdb0      	pop	{r4, r5, r7, pc}
 8019f90:	080277e0 	.word	0x080277e0
 8019f94:	080277fc 	.word	0x080277fc

08019f98 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 8019f98:	b5b0      	push	{r4, r5, r7, lr}
 8019f9a:	b084      	sub	sp, #16
 8019f9c:	af02      	add	r7, sp, #8
 8019f9e:	6078      	str	r0, [r7, #4]
 8019fa0:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8019fa2:	f7fb fb65 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8019fa6:	4604      	mov	r4, r0
 8019fa8:	6823      	ldr	r3, [r4, #0]
 8019faa:	3368      	adds	r3, #104	; 0x68
 8019fac:	681d      	ldr	r5, [r3, #0]
 8019fae:	f7fb fb6f 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019fb2:	4603      	mov	r3, r0
 8019fb4:	9300      	str	r3, [sp, #0]
 8019fb6:	f240 2307 	movw	r3, #519	; 0x207
 8019fba:	4a06      	ldr	r2, [pc, #24]	; (8019fd4 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 8019fbc:	4906      	ldr	r1, [pc, #24]	; (8019fd8 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 8019fbe:	4620      	mov	r0, r4
 8019fc0:	47a8      	blx	r5
    return cpputest_longlong(0);
 8019fc2:	2100      	movs	r1, #0
 8019fc4:	6878      	ldr	r0, [r7, #4]
 8019fc6:	f7f1 ffa7 	bl	800bf18 <_ZN17cpputest_longlongC1Ei>
}
 8019fca:	6878      	ldr	r0, [r7, #4]
 8019fcc:	3708      	adds	r7, #8
 8019fce:	46bd      	mov	sp, r7
 8019fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8019fd2:	bf00      	nop
 8019fd4:	080277e0 	.word	0x080277e0
 8019fd8:	08027828 	.word	0x08027828

08019fdc <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 8019fdc:	b5b0      	push	{r4, r5, r7, lr}
 8019fde:	b086      	sub	sp, #24
 8019fe0:	af02      	add	r7, sp, #8
 8019fe2:	60f8      	str	r0, [r7, #12]
 8019fe4:	60b9      	str	r1, [r7, #8]
 8019fe6:	4639      	mov	r1, r7
 8019fe8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8019fec:	f7fb fb40 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 8019ff0:	4604      	mov	r4, r0
 8019ff2:	6823      	ldr	r3, [r4, #0]
 8019ff4:	3368      	adds	r3, #104	; 0x68
 8019ff6:	681d      	ldr	r5, [r3, #0]
 8019ff8:	f7fb fb4a 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019ffc:	4603      	mov	r3, r0
 8019ffe:	9300      	str	r3, [sp, #0]
 801a000:	f240 230d 	movw	r3, #525	; 0x20d
 801a004:	4a06      	ldr	r2, [pc, #24]	; (801a020 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 801a006:	4907      	ldr	r1, [pc, #28]	; (801a024 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 801a008:	4620      	mov	r0, r4
 801a00a:	47a8      	blx	r5
    return default_value;
 801a00c:	68fb      	ldr	r3, [r7, #12]
 801a00e:	461a      	mov	r2, r3
 801a010:	463b      	mov	r3, r7
 801a012:	cb03      	ldmia	r3!, {r0, r1}
 801a014:	6010      	str	r0, [r2, #0]
 801a016:	6051      	str	r1, [r2, #4]
}
 801a018:	68f8      	ldr	r0, [r7, #12]
 801a01a:	3710      	adds	r7, #16
 801a01c:	46bd      	mov	sp, r7
 801a01e:	bdb0      	pop	{r4, r5, r7, pc}
 801a020:	080277e0 	.word	0x080277e0
 801a024:	08027828 	.word	0x08027828

0801a028 <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 801a028:	b580      	push	{r7, lr}
 801a02a:	ed2d 8b02 	vpush	{d8}
 801a02e:	b090      	sub	sp, #64	; 0x40
 801a030:	af00      	add	r7, sp, #0
 801a032:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	3354      	adds	r3, #84	; 0x54
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	f107 0208 	add.w	r2, r7, #8
 801a040:	6879      	ldr	r1, [r7, #4]
 801a042:	4610      	mov	r0, r2
 801a044:	4798      	blx	r3
 801a046:	f107 0308 	add.w	r3, r7, #8
 801a04a:	4618      	mov	r0, r3
 801a04c:	f005 f908 	bl	801f260 <_ZNK14MockNamedValue14getDoubleValueEv>
 801a050:	eeb0 8a40 	vmov.f32	s16, s0
 801a054:	eef0 8a60 	vmov.f32	s17, s1
 801a058:	bf00      	nop
 801a05a:	f107 0308 	add.w	r3, r7, #8
 801a05e:	4618      	mov	r0, r3
 801a060:	f004 fc72 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 801a064:	eeb0 7a48 	vmov.f32	s14, s16
 801a068:	eef0 7a68 	vmov.f32	s15, s17
}
 801a06c:	eeb0 0a47 	vmov.f32	s0, s14
 801a070:	eef0 0a67 	vmov.f32	s1, s15
 801a074:	3740      	adds	r7, #64	; 0x40
 801a076:	46bd      	mov	sp, r7
 801a078:	ecbd 8b02 	vpop	{d8}
 801a07c:	bd80      	pop	{r7, pc}

0801a07e <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 801a07e:	b580      	push	{r7, lr}
 801a080:	b084      	sub	sp, #16
 801a082:	af00      	add	r7, sp, #0
 801a084:	60f8      	str	r0, [r7, #12]
 801a086:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 801a08a:	68fb      	ldr	r3, [r7, #12]
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	3350      	adds	r3, #80	; 0x50
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	68f8      	ldr	r0, [r7, #12]
 801a094:	4798      	blx	r3
 801a096:	4603      	mov	r3, r0
 801a098:	f083 0301 	eor.w	r3, r3, #1
 801a09c:	b2db      	uxtb	r3, r3
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d002      	beq.n	801a0a8 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 801a0a2:	ed97 7b00 	vldr	d7, [r7]
 801a0a6:	e00a      	b.n	801a0be <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 801a0a8:	68fb      	ldr	r3, [r7, #12]
 801a0aa:	681b      	ldr	r3, [r3, #0]
 801a0ac:	3398      	adds	r3, #152	; 0x98
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	68f8      	ldr	r0, [r7, #12]
 801a0b2:	4798      	blx	r3
 801a0b4:	eeb0 7a40 	vmov.f32	s14, s0
 801a0b8:	eef0 7a60 	vmov.f32	s15, s1
 801a0bc:	bf00      	nop
}
 801a0be:	eeb0 0a47 	vmov.f32	s0, s14
 801a0c2:	eef0 0a67 	vmov.f32	s1, s15
 801a0c6:	3710      	adds	r7, #16
 801a0c8:	46bd      	mov	sp, r7
 801a0ca:	bd80      	pop	{r7, pc}

0801a0cc <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 801a0cc:	b590      	push	{r4, r7, lr}
 801a0ce:	b091      	sub	sp, #68	; 0x44
 801a0d0:	af00      	add	r7, sp, #0
 801a0d2:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	681b      	ldr	r3, [r3, #0]
 801a0d8:	3354      	adds	r3, #84	; 0x54
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	f107 0208 	add.w	r2, r7, #8
 801a0e0:	6879      	ldr	r1, [r7, #4]
 801a0e2:	4610      	mov	r0, r2
 801a0e4:	4798      	blx	r3
 801a0e6:	f107 0308 	add.w	r3, r7, #8
 801a0ea:	4618      	mov	r0, r3
 801a0ec:	f004 ff06 	bl	801eefc <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 801a0f0:	4604      	mov	r4, r0
 801a0f2:	bf00      	nop
 801a0f4:	f107 0308 	add.w	r3, r7, #8
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	f004 fc25 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 801a0fe:	4623      	mov	r3, r4
}
 801a100:	4618      	mov	r0, r3
 801a102:	3744      	adds	r7, #68	; 0x44
 801a104:	46bd      	mov	sp, r7
 801a106:	bd90      	pop	{r4, r7, pc}

0801a108 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 801a108:	b580      	push	{r7, lr}
 801a10a:	b082      	sub	sp, #8
 801a10c:	af00      	add	r7, sp, #0
 801a10e:	6078      	str	r0, [r7, #4]
 801a110:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	3350      	adds	r3, #80	; 0x50
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	6878      	ldr	r0, [r7, #4]
 801a11c:	4798      	blx	r3
 801a11e:	4603      	mov	r3, r0
 801a120:	f083 0301 	eor.w	r3, r3, #1
 801a124:	b2db      	uxtb	r3, r3
 801a126:	2b00      	cmp	r3, #0
 801a128:	d001      	beq.n	801a12e <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 801a12a:	683b      	ldr	r3, [r7, #0]
 801a12c:	e007      	b.n	801a13e <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	3388      	adds	r3, #136	; 0x88
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	6878      	ldr	r0, [r7, #4]
 801a138:	4798      	blx	r3
 801a13a:	4603      	mov	r3, r0
 801a13c:	bf00      	nop
}
 801a13e:	4618      	mov	r0, r3
 801a140:	3708      	adds	r7, #8
 801a142:	46bd      	mov	sp, r7
 801a144:	bd80      	pop	{r7, pc}

0801a146 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 801a146:	b580      	push	{r7, lr}
 801a148:	b082      	sub	sp, #8
 801a14a:	af00      	add	r7, sp, #0
 801a14c:	6078      	str	r0, [r7, #4]
 801a14e:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	3350      	adds	r3, #80	; 0x50
 801a156:	681b      	ldr	r3, [r3, #0]
 801a158:	6878      	ldr	r0, [r7, #4]
 801a15a:	4798      	blx	r3
 801a15c:	4603      	mov	r3, r0
 801a15e:	f083 0301 	eor.w	r3, r3, #1
 801a162:	b2db      	uxtb	r3, r3
 801a164:	2b00      	cmp	r3, #0
 801a166:	d001      	beq.n	801a16c <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 801a168:	683b      	ldr	r3, [r7, #0]
 801a16a:	e007      	b.n	801a17c <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	33a0      	adds	r3, #160	; 0xa0
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	6878      	ldr	r0, [r7, #4]
 801a176:	4798      	blx	r3
 801a178:	4603      	mov	r3, r0
 801a17a:	bf00      	nop
}
 801a17c:	4618      	mov	r0, r3
 801a17e:	3708      	adds	r7, #8
 801a180:	46bd      	mov	sp, r7
 801a182:	bd80      	pop	{r7, pc}

0801a184 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 801a184:	b590      	push	{r4, r7, lr}
 801a186:	b091      	sub	sp, #68	; 0x44
 801a188:	af00      	add	r7, sp, #0
 801a18a:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	681b      	ldr	r3, [r3, #0]
 801a190:	3354      	adds	r3, #84	; 0x54
 801a192:	681b      	ldr	r3, [r3, #0]
 801a194:	f107 0208 	add.w	r2, r7, #8
 801a198:	6879      	ldr	r1, [r7, #4]
 801a19a:	4610      	mov	r0, r2
 801a19c:	4798      	blx	r3
 801a19e:	f107 0308 	add.w	r3, r7, #8
 801a1a2:	4618      	mov	r0, r3
 801a1a4:	f005 f8e0 	bl	801f368 <_ZNK14MockNamedValue15getPointerValueEv>
 801a1a8:	4604      	mov	r4, r0
 801a1aa:	bf00      	nop
 801a1ac:	f107 0308 	add.w	r3, r7, #8
 801a1b0:	4618      	mov	r0, r3
 801a1b2:	f004 fbc9 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 801a1b6:	4623      	mov	r3, r4
}
 801a1b8:	4618      	mov	r0, r3
 801a1ba:	3744      	adds	r7, #68	; 0x44
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	bd90      	pop	{r4, r7, pc}

0801a1c0 <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 801a1c0:	b590      	push	{r4, r7, lr}
 801a1c2:	b091      	sub	sp, #68	; 0x44
 801a1c4:	af00      	add	r7, sp, #0
 801a1c6:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	3354      	adds	r3, #84	; 0x54
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	f107 0208 	add.w	r2, r7, #8
 801a1d4:	6879      	ldr	r1, [r7, #4]
 801a1d6:	4610      	mov	r0, r2
 801a1d8:	4798      	blx	r3
 801a1da:	f107 0308 	add.w	r3, r7, #8
 801a1de:	4618      	mov	r0, r3
 801a1e0:	f005 f8ea 	bl	801f3b8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 801a1e4:	4604      	mov	r4, r0
 801a1e6:	bf00      	nop
 801a1e8:	f107 0308 	add.w	r3, r7, #8
 801a1ec:	4618      	mov	r0, r3
 801a1ee:	f004 fbab 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 801a1f2:	4623      	mov	r3, r4
}
 801a1f4:	4618      	mov	r0, r3
 801a1f6:	3744      	adds	r7, #68	; 0x44
 801a1f8:	46bd      	mov	sp, r7
 801a1fa:	bd90      	pop	{r4, r7, pc}

0801a1fc <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 801a1fc:	b580      	push	{r7, lr}
 801a1fe:	b082      	sub	sp, #8
 801a200:	af00      	add	r7, sp, #0
 801a202:	6078      	str	r0, [r7, #4]
 801a204:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	681b      	ldr	r3, [r3, #0]
 801a20a:	3350      	adds	r3, #80	; 0x50
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	6878      	ldr	r0, [r7, #4]
 801a210:	4798      	blx	r3
 801a212:	4603      	mov	r3, r0
 801a214:	f083 0301 	eor.w	r3, r3, #1
 801a218:	b2db      	uxtb	r3, r3
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d001      	beq.n	801a222 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 801a21e:	683b      	ldr	r3, [r7, #0]
 801a220:	e007      	b.n	801a232 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	33a8      	adds	r3, #168	; 0xa8
 801a228:	681b      	ldr	r3, [r3, #0]
 801a22a:	6878      	ldr	r0, [r7, #4]
 801a22c:	4798      	blx	r3
 801a22e:	4603      	mov	r3, r0
 801a230:	bf00      	nop
}
 801a232:	4618      	mov	r0, r3
 801a234:	3708      	adds	r7, #8
 801a236:	46bd      	mov	sp, r7
 801a238:	bd80      	pop	{r7, pc}

0801a23a <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 801a23a:	b590      	push	{r4, r7, lr}
 801a23c:	b091      	sub	sp, #68	; 0x44
 801a23e:	af00      	add	r7, sp, #0
 801a240:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	3354      	adds	r3, #84	; 0x54
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	f107 0208 	add.w	r2, r7, #8
 801a24e:	6879      	ldr	r1, [r7, #4]
 801a250:	4610      	mov	r0, r2
 801a252:	4798      	blx	r3
 801a254:	f107 0308 	add.w	r3, r7, #8
 801a258:	4618      	mov	r0, r3
 801a25a:	f005 f8d5 	bl	801f408 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 801a25e:	4604      	mov	r4, r0
 801a260:	bf00      	nop
 801a262:	f107 0308 	add.w	r3, r7, #8
 801a266:	4618      	mov	r0, r3
 801a268:	f004 fb6e 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 801a26c:	4623      	mov	r3, r4
}
 801a26e:	4618      	mov	r0, r3
 801a270:	3744      	adds	r7, #68	; 0x44
 801a272:	46bd      	mov	sp, r7
 801a274:	bd90      	pop	{r4, r7, pc}

0801a276 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 801a276:	b580      	push	{r7, lr}
 801a278:	b082      	sub	sp, #8
 801a27a:	af00      	add	r7, sp, #0
 801a27c:	6078      	str	r0, [r7, #4]
 801a27e:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	3350      	adds	r3, #80	; 0x50
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	6878      	ldr	r0, [r7, #4]
 801a28a:	4798      	blx	r3
 801a28c:	4603      	mov	r3, r0
 801a28e:	f083 0301 	eor.w	r3, r3, #1
 801a292:	b2db      	uxtb	r3, r3
 801a294:	2b00      	cmp	r3, #0
 801a296:	d001      	beq.n	801a29c <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 801a298:	683b      	ldr	r3, [r7, #0]
 801a29a:	e007      	b.n	801a2ac <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	33b0      	adds	r3, #176	; 0xb0
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	6878      	ldr	r0, [r7, #4]
 801a2a6:	4798      	blx	r3
 801a2a8:	4603      	mov	r3, r0
 801a2aa:	bf00      	nop
}
 801a2ac:	4618      	mov	r0, r3
 801a2ae:	3708      	adds	r7, #8
 801a2b0:	46bd      	mov	sp, r7
 801a2b2:	bd80      	pop	{r7, pc}

0801a2b4 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 801a2b4:	b580      	push	{r7, lr}
 801a2b6:	b082      	sub	sp, #8
 801a2b8:	af00      	add	r7, sp, #0
 801a2ba:	6078      	str	r0, [r7, #4]
 801a2bc:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	681b      	ldr	r3, [r3, #0]
 801a2c2:	3350      	adds	r3, #80	; 0x50
 801a2c4:	681b      	ldr	r3, [r3, #0]
 801a2c6:	6878      	ldr	r0, [r7, #4]
 801a2c8:	4798      	blx	r3
 801a2ca:	4603      	mov	r3, r0
 801a2cc:	f083 0301 	eor.w	r3, r3, #1
 801a2d0:	b2db      	uxtb	r3, r3
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	d001      	beq.n	801a2da <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 801a2d6:	683b      	ldr	r3, [r7, #0]
 801a2d8:	e007      	b.n	801a2ea <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	3394      	adds	r3, #148	; 0x94
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	6878      	ldr	r0, [r7, #4]
 801a2e4:	4798      	blx	r3
 801a2e6:	4603      	mov	r3, r0
 801a2e8:	bf00      	nop
}
 801a2ea:	4618      	mov	r0, r3
 801a2ec:	3708      	adds	r7, #8
 801a2ee:	46bd      	mov	sp, r7
 801a2f0:	bd80      	pop	{r7, pc}

0801a2f2 <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 801a2f2:	b590      	push	{r4, r7, lr}
 801a2f4:	b091      	sub	sp, #68	; 0x44
 801a2f6:	af00      	add	r7, sp, #0
 801a2f8:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	3354      	adds	r3, #84	; 0x54
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	f107 0208 	add.w	r2, r7, #8
 801a306:	6879      	ldr	r1, [r7, #4]
 801a308:	4610      	mov	r0, r2
 801a30a:	4798      	blx	r3
 801a30c:	f107 0308 	add.w	r3, r7, #8
 801a310:	4618      	mov	r0, r3
 801a312:	f005 f801 	bl	801f318 <_ZNK14MockNamedValue14getStringValueEv>
 801a316:	4604      	mov	r4, r0
 801a318:	bf00      	nop
 801a31a:	f107 0308 	add.w	r3, r7, #8
 801a31e:	4618      	mov	r0, r3
 801a320:	f004 fb12 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 801a324:	4623      	mov	r3, r4
}
 801a326:	4618      	mov	r0, r3
 801a328:	3744      	adds	r7, #68	; 0x44
 801a32a:	46bd      	mov	sp, r7
 801a32c:	bd90      	pop	{r4, r7, pc}

0801a32e <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 801a32e:	b590      	push	{r4, r7, lr}
 801a330:	b093      	sub	sp, #76	; 0x4c
 801a332:	af00      	add	r7, sp, #0
 801a334:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	3354      	adds	r3, #84	; 0x54
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	f107 0210 	add.w	r2, r7, #16
 801a342:	6879      	ldr	r1, [r7, #4]
 801a344:	4610      	mov	r0, r2
 801a346:	4798      	blx	r3
 801a348:	f107 0308 	add.w	r3, r7, #8
 801a34c:	f107 0210 	add.w	r2, r7, #16
 801a350:	4611      	mov	r1, r2
 801a352:	4618      	mov	r0, r3
 801a354:	f004 fd8c 	bl	801ee70 <_ZNK14MockNamedValue7getNameEv>
 801a358:	f107 0308 	add.w	r3, r7, #8
 801a35c:	4618      	mov	r0, r3
 801a35e:	f7f4 f94b 	bl	800e5f8 <_ZNK12SimpleString7isEmptyEv>
 801a362:	4603      	mov	r3, r0
 801a364:	f083 0301 	eor.w	r3, r3, #1
 801a368:	b2dc      	uxtb	r4, r3
 801a36a:	f107 0308 	add.w	r3, r7, #8
 801a36e:	4618      	mov	r0, r3
 801a370:	f7f4 f953 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801a374:	f107 0310 	add.w	r3, r7, #16
 801a378:	4618      	mov	r0, r3
 801a37a:	f004 fae5 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 801a37e:	4623      	mov	r3, r4
}
 801a380:	4618      	mov	r0, r3
 801a382:	374c      	adds	r7, #76	; 0x4c
 801a384:	46bd      	mov	sp, r7
 801a386:	bd90      	pop	{r4, r7, pc}

0801a388 <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 801a388:	b590      	push	{r4, r7, lr}
 801a38a:	b095      	sub	sp, #84	; 0x54
 801a38c:	af02      	add	r7, sp, #8
 801a38e:	6078      	str	r0, [r7, #4]
 801a390:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	33c0      	adds	r3, #192	; 0xc0
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	6878      	ldr	r0, [r7, #4]
 801a39c:	4798      	blx	r3
 801a39e:	4603      	mov	r3, r0
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d001      	beq.n	801a3a8 <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 801a3a4:	687c      	ldr	r4, [r7, #4]
 801a3a6:	e053      	b.n	801a450 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	331c      	adds	r3, #28
 801a3ac:	6839      	ldr	r1, [r7, #0]
 801a3ae:	4618      	mov	r0, r3
 801a3b0:	f003 f8ca 	bl	801d548 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	699b      	ldr	r3, [r3, #24]
 801a3b8:	2b00      	cmp	r3, #0
 801a3ba:	d109      	bne.n	801a3d0 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	331c      	adds	r3, #28
 801a3c0:	4618      	mov	r0, r3
 801a3c2:	f002 fe20 	bl	801d006 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801a3c6:	4603      	mov	r3, r0
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d001      	beq.n	801a3d0 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 801a3cc:	2301      	movs	r3, #1
 801a3ce:	e000      	b.n	801a3d2 <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 801a3d0:	2300      	movs	r3, #0
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d02c      	beq.n	801a430 <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	33cc      	adds	r3, #204	; 0xcc
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	6878      	ldr	r0, [r7, #4]
 801a3e0:	4798      	blx	r3
 801a3e2:	4604      	mov	r4, r0
 801a3e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a3e8:	6879      	ldr	r1, [r7, #4]
 801a3ea:	4618      	mov	r0, r3
 801a3ec:	f7fe fd3f 	bl	8018e6e <_ZNK21MockCheckedActualCall7getNameEv>
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3f4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a3f8:	f107 000c 	add.w	r0, r7, #12
 801a3fc:	9300      	str	r3, [sp, #0]
 801a3fe:	683b      	ldr	r3, [r7, #0]
 801a400:	4621      	mov	r1, r4
 801a402:	f004 f9fb 	bl	801e7fc <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 801a406:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a40a:	4618      	mov	r0, r3
 801a40c:	f7f4 f905 	bl	800e61a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	681b      	ldr	r3, [r3, #0]
 801a414:	33dc      	adds	r3, #220	; 0xdc
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	f107 020c 	add.w	r2, r7, #12
 801a41c:	4611      	mov	r1, r2
 801a41e:	6878      	ldr	r0, [r7, #4]
 801a420:	4798      	blx	r3
        return *this;
 801a422:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 801a424:	f107 030c 	add.w	r3, r7, #12
 801a428:	4618      	mov	r0, r3
 801a42a:	f000 ffa7 	bl	801b37c <_ZN27MockUnexpectedObjectFailureD1Ev>
 801a42e:	e00f      	b.n	801a450 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	331c      	adds	r3, #28
 801a434:	4618      	mov	r0, r3
 801a436:	f003 f9a7 	bl	801d788 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	699b      	ldr	r3, [r3, #24]
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d105      	bne.n	801a44e <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	33d8      	adds	r3, #216	; 0xd8
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	6878      	ldr	r0, [r7, #4]
 801a44c:	4798      	blx	r3
    }

    return *this;
 801a44e:	687c      	ldr	r4, [r7, #4]
 801a450:	4623      	mov	r3, r4
}
 801a452:	4618      	mov	r0, r3
 801a454:	374c      	adds	r7, #76	; 0x4c
 801a456:	46bd      	mov	sp, r7
 801a458:	bd90      	pop	{r4, r7, pc}
	...

0801a45c <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 801a45c:	b590      	push	{r4, r7, lr}
 801a45e:	b087      	sub	sp, #28
 801a460:	af00      	add	r7, sp, #0
 801a462:	60f8      	str	r0, [r7, #12]
 801a464:	60b9      	str	r1, [r7, #8]
 801a466:	607a      	str	r2, [r7, #4]
 801a468:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 801a46a:	f240 2282 	movw	r2, #642	; 0x282
 801a46e:	4913      	ldr	r1, [pc, #76]	; (801a4bc <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 801a470:	2018      	movs	r0, #24
 801a472:	f7f1 f957 	bl	800b724 <_ZnwjPKci>
 801a476:	4604      	mov	r4, r0
 801a478:	683b      	ldr	r3, [r7, #0]
 801a47a:	687a      	ldr	r2, [r7, #4]
 801a47c:	68b9      	ldr	r1, [r7, #8]
 801a47e:	4620      	mov	r0, r4
 801a480:	f7fe fa48 	bl	8018914 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 801a484:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 801a486:	68fb      	ldr	r3, [r7, #12]
 801a488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d103      	bne.n	801a496 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	693a      	ldr	r2, [r7, #16]
 801a492:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 801a494:	e00d      	b.n	801a4b2 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 801a496:	68fb      	ldr	r3, [r7, #12]
 801a498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a49a:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 801a49c:	697b      	ldr	r3, [r7, #20]
 801a49e:	695b      	ldr	r3, [r3, #20]
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d003      	beq.n	801a4ac <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 801a4a4:	697b      	ldr	r3, [r7, #20]
 801a4a6:	695b      	ldr	r3, [r3, #20]
 801a4a8:	617b      	str	r3, [r7, #20]
 801a4aa:	e7f7      	b.n	801a49c <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 801a4ac:	697b      	ldr	r3, [r7, #20]
 801a4ae:	693a      	ldr	r2, [r7, #16]
 801a4b0:	615a      	str	r2, [r3, #20]
}
 801a4b2:	bf00      	nop
 801a4b4:	371c      	adds	r7, #28
 801a4b6:	46bd      	mov	sp, r7
 801a4b8:	bd90      	pop	{r4, r7, pc}
 801a4ba:	bf00      	nop
 801a4bc:	080277e0 	.word	0x080277e0

0801a4c0 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 801a4c0:	b580      	push	{r7, lr}
 801a4c2:	b082      	sub	sp, #8
 801a4c4:	af00      	add	r7, sp, #0
 801a4c6:	6078      	str	r0, [r7, #4]
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	3308      	adds	r3, #8
 801a4cc:	4618      	mov	r0, r3
 801a4ce:	f7f4 f8a4 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	4618      	mov	r0, r3
 801a4d6:	f7f4 f8a0 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	4618      	mov	r0, r3
 801a4de:	3708      	adds	r7, #8
 801a4e0:	46bd      	mov	sp, r7
 801a4e2:	bd80      	pop	{r7, pc}

0801a4e4 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 801a4e4:	b590      	push	{r4, r7, lr}
 801a4e6:	b085      	sub	sp, #20
 801a4e8:	af00      	add	r7, sp, #0
 801a4ea:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4f0:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 801a4f2:	2300      	movs	r3, #0
 801a4f4:	60bb      	str	r3, [r7, #8]

    while (current) {
 801a4f6:	68fb      	ldr	r3, [r7, #12]
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	d012      	beq.n	801a522 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 801a4fc:	68fb      	ldr	r3, [r7, #12]
 801a4fe:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 801a500:	68fb      	ldr	r3, [r7, #12]
 801a502:	695b      	ldr	r3, [r3, #20]
 801a504:	60fb      	str	r3, [r7, #12]
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	68fa      	ldr	r2, [r7, #12]
 801a50a:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 801a50c:	68bc      	ldr	r4, [r7, #8]
 801a50e:	2c00      	cmp	r4, #0
 801a510:	d0f1      	beq.n	801a4f6 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 801a512:	4620      	mov	r0, r4
 801a514:	f7ff ffd4 	bl	801a4c0 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 801a518:	2118      	movs	r1, #24
 801a51a:	4620      	mov	r0, r4
 801a51c:	f7f1 f916 	bl	800b74c <_ZdlPvj>
    while (current) {
 801a520:	e7e9      	b.n	801a4f6 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 801a522:	bf00      	nop
 801a524:	3714      	adds	r7, #20
 801a526:	46bd      	mov	sp, r7
 801a528:	bd90      	pop	{r4, r7, pc}
	...

0801a52c <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 801a52c:	b580      	push	{r7, lr}
 801a52e:	b082      	sub	sp, #8
 801a530:	af00      	add	r7, sp, #0
 801a532:	6078      	str	r0, [r7, #4]
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	4618      	mov	r0, r3
 801a538:	f7fe fc6a 	bl	8018e10 <_ZN14MockActualCallC1Ev>
 801a53c:	4a06      	ldr	r2, [pc, #24]	; (801a558 <_ZN19MockActualCallTraceC1Ev+0x2c>)
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	601a      	str	r2, [r3, #0]
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	3304      	adds	r3, #4
 801a546:	4905      	ldr	r1, [pc, #20]	; (801a55c <_ZN19MockActualCallTraceC1Ev+0x30>)
 801a548:	4618      	mov	r0, r3
 801a54a:	f7f3 fcae 	bl	800deaa <_ZN12SimpleStringC1EPKc>
{
}
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	4618      	mov	r0, r3
 801a552:	3708      	adds	r7, #8
 801a554:	46bd      	mov	sp, r7
 801a556:	bd80      	pop	{r7, pc}
 801a558:	0802a890 	.word	0x0802a890
 801a55c:	080277c8 	.word	0x080277c8

0801a560 <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 801a560:	b580      	push	{r7, lr}
 801a562:	b082      	sub	sp, #8
 801a564:	af00      	add	r7, sp, #0
 801a566:	6078      	str	r0, [r7, #4]
 801a568:	4a08      	ldr	r2, [pc, #32]	; (801a58c <_ZN19MockActualCallTraceD1Ev+0x2c>)
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	601a      	str	r2, [r3, #0]
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	3304      	adds	r3, #4
 801a572:	4618      	mov	r0, r3
 801a574:	f7f4 f851 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	4618      	mov	r0, r3
 801a57c:	f7fe fc58 	bl	8018e30 <_ZN14MockActualCallD1Ev>
{
}
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	4618      	mov	r0, r3
 801a584:	3708      	adds	r7, #8
 801a586:	46bd      	mov	sp, r7
 801a588:	bd80      	pop	{r7, pc}
 801a58a:	bf00      	nop
 801a58c:	0802a890 	.word	0x0802a890

0801a590 <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 801a590:	b580      	push	{r7, lr}
 801a592:	b082      	sub	sp, #8
 801a594:	af00      	add	r7, sp, #0
 801a596:	6078      	str	r0, [r7, #4]
}
 801a598:	6878      	ldr	r0, [r7, #4]
 801a59a:	f7ff ffe1 	bl	801a560 <_ZN19MockActualCallTraceD1Ev>
 801a59e:	210c      	movs	r1, #12
 801a5a0:	6878      	ldr	r0, [r7, #4]
 801a5a2:	f7f1 f8d3 	bl	800b74c <_ZdlPvj>
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	4618      	mov	r0, r3
 801a5aa:	3708      	adds	r7, #8
 801a5ac:	46bd      	mov	sp, r7
 801a5ae:	bd80      	pop	{r7, pc}

0801a5b0 <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 801a5b0:	b580      	push	{r7, lr}
 801a5b2:	b082      	sub	sp, #8
 801a5b4:	af00      	add	r7, sp, #0
 801a5b6:	6078      	str	r0, [r7, #4]
 801a5b8:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	3304      	adds	r3, #4
 801a5be:	4907      	ldr	r1, [pc, #28]	; (801a5dc <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 801a5c0:	4618      	mov	r0, r3
 801a5c2:	f7f4 f8b9 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	3304      	adds	r3, #4
 801a5ca:	6839      	ldr	r1, [r7, #0]
 801a5cc:	4618      	mov	r0, r3
 801a5ce:	f7f4 f8a1 	bl	800e714 <_ZN12SimpleStringpLERKS_>
    return *this;
 801a5d2:	687b      	ldr	r3, [r7, #4]
}
 801a5d4:	4618      	mov	r0, r3
 801a5d6:	3708      	adds	r7, #8
 801a5d8:	46bd      	mov	sp, r7
 801a5da:	bd80      	pop	{r7, pc}
 801a5dc:	080278d4 	.word	0x080278d4

0801a5e0 <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 801a5e0:	b590      	push	{r4, r7, lr}
 801a5e2:	b085      	sub	sp, #20
 801a5e4:	af00      	add	r7, sp, #0
 801a5e6:	6078      	str	r0, [r7, #4]
 801a5e8:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	3304      	adds	r3, #4
 801a5ee:	490e      	ldr	r1, [pc, #56]	; (801a628 <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	f7f4 f8a1 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	1d1c      	adds	r4, r3, #4
 801a5fa:	f107 0308 	add.w	r3, r7, #8
 801a5fe:	6839      	ldr	r1, [r7, #0]
 801a600:	4618      	mov	r0, r3
 801a602:	f7f4 fd39 	bl	800f078 <_Z10StringFromj>
 801a606:	f107 0308 	add.w	r3, r7, #8
 801a60a:	4619      	mov	r1, r3
 801a60c:	4620      	mov	r0, r4
 801a60e:	f7f4 f881 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801a612:	f107 0308 	add.w	r3, r7, #8
 801a616:	4618      	mov	r0, r3
 801a618:	f7f3 ffff 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return *this;
 801a61c:	687b      	ldr	r3, [r7, #4]
}
 801a61e:	4618      	mov	r0, r3
 801a620:	3714      	adds	r7, #20
 801a622:	46bd      	mov	sp, r7
 801a624:	bd90      	pop	{r4, r7, pc}
 801a626:	bf00      	nop
 801a628:	080278e4 	.word	0x080278e4

0801a62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 801a62c:	b580      	push	{r7, lr}
 801a62e:	b082      	sub	sp, #8
 801a630:	af00      	add	r7, sp, #0
 801a632:	6078      	str	r0, [r7, #4]
 801a634:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	3304      	adds	r3, #4
 801a63a:	490a      	ldr	r1, [pc, #40]	; (801a664 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 801a63c:	4618      	mov	r0, r3
 801a63e:	f7f4 f87b 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	3304      	adds	r3, #4
 801a646:	6839      	ldr	r1, [r7, #0]
 801a648:	4618      	mov	r0, r3
 801a64a:	f7f4 f863 	bl	800e714 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	3304      	adds	r3, #4
 801a652:	4905      	ldr	r1, [pc, #20]	; (801a668 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 801a654:	4618      	mov	r0, r3
 801a656:	f7f4 f86f 	bl	800e738 <_ZN12SimpleStringpLEPKc>
}
 801a65a:	bf00      	nop
 801a65c:	3708      	adds	r7, #8
 801a65e:	46bd      	mov	sp, r7
 801a660:	bd80      	pop	{r7, pc}
 801a662:	bf00      	nop
 801a664:	080278f4 	.word	0x080278f4
 801a668:	080278f8 	.word	0x080278f8

0801a66c <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 801a66c:	b590      	push	{r4, r7, lr}
 801a66e:	b087      	sub	sp, #28
 801a670:	af00      	add	r7, sp, #0
 801a672:	60f8      	str	r0, [r7, #12]
 801a674:	60b9      	str	r1, [r7, #8]
 801a676:	4613      	mov	r3, r2
 801a678:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 801a67a:	68b9      	ldr	r1, [r7, #8]
 801a67c:	68f8      	ldr	r0, [r7, #12]
 801a67e:	f7ff ffd5 	bl	801a62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801a682:	68fb      	ldr	r3, [r7, #12]
 801a684:	1d1c      	adds	r4, r3, #4
 801a686:	f107 0310 	add.w	r3, r7, #16
 801a68a:	79fa      	ldrb	r2, [r7, #7]
 801a68c:	4611      	mov	r1, r2
 801a68e:	4618      	mov	r0, r3
 801a690:	f7f4 fa34 	bl	800eafc <_Z10StringFromb>
 801a694:	f107 0310 	add.w	r3, r7, #16
 801a698:	4619      	mov	r1, r3
 801a69a:	4620      	mov	r0, r4
 801a69c:	f7f4 f83a 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801a6a0:	f107 0310 	add.w	r3, r7, #16
 801a6a4:	4618      	mov	r0, r3
 801a6a6:	f7f3 ffb8 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return *this;
 801a6aa:	68fb      	ldr	r3, [r7, #12]
}
 801a6ac:	4618      	mov	r0, r3
 801a6ae:	371c      	adds	r7, #28
 801a6b0:	46bd      	mov	sp, r7
 801a6b2:	bd90      	pop	{r4, r7, pc}

0801a6b4 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801a6b4:	b590      	push	{r4, r7, lr}
 801a6b6:	b08f      	sub	sp, #60	; 0x3c
 801a6b8:	af00      	add	r7, sp, #0
 801a6ba:	60f8      	str	r0, [r7, #12]
 801a6bc:	60b9      	str	r1, [r7, #8]
 801a6be:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801a6c0:	68b9      	ldr	r1, [r7, #8]
 801a6c2:	68f8      	ldr	r0, [r7, #12]
 801a6c4:	f7ff ffb2 	bl	801a62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801a6c8:	68fb      	ldr	r3, [r7, #12]
 801a6ca:	1d1c      	adds	r4, r3, #4
 801a6cc:	f107 0320 	add.w	r3, r7, #32
 801a6d0:	6879      	ldr	r1, [r7, #4]
 801a6d2:	4618      	mov	r0, r3
 801a6d4:	f7f4 fcd0 	bl	800f078 <_Z10StringFromj>
 801a6d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a6dc:	491f      	ldr	r1, [pc, #124]	; (801a75c <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 801a6de:	4618      	mov	r0, r3
 801a6e0:	f7f3 fbe3 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801a6e4:	f107 0318 	add.w	r3, r7, #24
 801a6e8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a6ec:	f107 0120 	add.w	r1, r7, #32
 801a6f0:	4618      	mov	r0, r3
 801a6f2:	f7f3 fff4 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 801a6f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a6fa:	6879      	ldr	r1, [r7, #4]
 801a6fc:	4618      	mov	r0, r3
 801a6fe:	f7f4 fb5f 	bl	800edc0 <_Z30BracketsFormattedHexStringFromj>
 801a702:	f107 0310 	add.w	r3, r7, #16
 801a706:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801a70a:	f107 0118 	add.w	r1, r7, #24
 801a70e:	4618      	mov	r0, r3
 801a710:	f7f3 ffe5 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 801a714:	f107 0310 	add.w	r3, r7, #16
 801a718:	4619      	mov	r1, r3
 801a71a:	4620      	mov	r0, r4
 801a71c:	f7f3 fffa 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801a720:	f107 0310 	add.w	r3, r7, #16
 801a724:	4618      	mov	r0, r3
 801a726:	f7f3 ff78 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801a72a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a72e:	4618      	mov	r0, r3
 801a730:	f7f3 ff73 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801a734:	f107 0318 	add.w	r3, r7, #24
 801a738:	4618      	mov	r0, r3
 801a73a:	f7f3 ff6e 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801a73e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a742:	4618      	mov	r0, r3
 801a744:	f7f3 ff69 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801a748:	f107 0320 	add.w	r3, r7, #32
 801a74c:	4618      	mov	r0, r3
 801a74e:	f7f3 ff64 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return *this;
 801a752:	68fb      	ldr	r3, [r7, #12]
}
 801a754:	4618      	mov	r0, r3
 801a756:	373c      	adds	r7, #60	; 0x3c
 801a758:	46bd      	mov	sp, r7
 801a75a:	bd90      	pop	{r4, r7, pc}
 801a75c:	080278f4 	.word	0x080278f4

0801a760 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 801a760:	b590      	push	{r4, r7, lr}
 801a762:	b08f      	sub	sp, #60	; 0x3c
 801a764:	af00      	add	r7, sp, #0
 801a766:	60f8      	str	r0, [r7, #12]
 801a768:	60b9      	str	r1, [r7, #8]
 801a76a:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801a76c:	68b9      	ldr	r1, [r7, #8]
 801a76e:	68f8      	ldr	r0, [r7, #12]
 801a770:	f7ff ff5c 	bl	801a62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	1d1c      	adds	r4, r3, #4
 801a778:	f107 0320 	add.w	r3, r7, #32
 801a77c:	6879      	ldr	r1, [r7, #4]
 801a77e:	4618      	mov	r0, r3
 801a780:	f7f4 fa12 	bl	800eba8 <_Z10StringFromi>
 801a784:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a788:	491f      	ldr	r1, [pc, #124]	; (801a808 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 801a78a:	4618      	mov	r0, r3
 801a78c:	f7f3 fb8d 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801a790:	f107 0318 	add.w	r3, r7, #24
 801a794:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a798:	f107 0120 	add.w	r1, r7, #32
 801a79c:	4618      	mov	r0, r3
 801a79e:	f7f3 ff9e 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 801a7a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a7a6:	6879      	ldr	r1, [r7, #4]
 801a7a8:	4618      	mov	r0, r3
 801a7aa:	f7f4 faed 	bl	800ed88 <_Z30BracketsFormattedHexStringFromi>
 801a7ae:	f107 0310 	add.w	r3, r7, #16
 801a7b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801a7b6:	f107 0118 	add.w	r1, r7, #24
 801a7ba:	4618      	mov	r0, r3
 801a7bc:	f7f3 ff8f 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 801a7c0:	f107 0310 	add.w	r3, r7, #16
 801a7c4:	4619      	mov	r1, r3
 801a7c6:	4620      	mov	r0, r4
 801a7c8:	f7f3 ffa4 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801a7cc:	f107 0310 	add.w	r3, r7, #16
 801a7d0:	4618      	mov	r0, r3
 801a7d2:	f7f3 ff22 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801a7d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a7da:	4618      	mov	r0, r3
 801a7dc:	f7f3 ff1d 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801a7e0:	f107 0318 	add.w	r3, r7, #24
 801a7e4:	4618      	mov	r0, r3
 801a7e6:	f7f3 ff18 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801a7ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a7ee:	4618      	mov	r0, r3
 801a7f0:	f7f3 ff13 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801a7f4:	f107 0320 	add.w	r3, r7, #32
 801a7f8:	4618      	mov	r0, r3
 801a7fa:	f7f3 ff0e 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return *this;
 801a7fe:	68fb      	ldr	r3, [r7, #12]
}
 801a800:	4618      	mov	r0, r3
 801a802:	373c      	adds	r7, #60	; 0x3c
 801a804:	46bd      	mov	sp, r7
 801a806:	bd90      	pop	{r4, r7, pc}
 801a808:	080278f4 	.word	0x080278f4

0801a80c <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801a80c:	b590      	push	{r4, r7, lr}
 801a80e:	b08f      	sub	sp, #60	; 0x3c
 801a810:	af00      	add	r7, sp, #0
 801a812:	60f8      	str	r0, [r7, #12]
 801a814:	60b9      	str	r1, [r7, #8]
 801a816:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801a818:	68b9      	ldr	r1, [r7, #8]
 801a81a:	68f8      	ldr	r0, [r7, #12]
 801a81c:	f7ff ff06 	bl	801a62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801a820:	68fb      	ldr	r3, [r7, #12]
 801a822:	1d1c      	adds	r4, r3, #4
 801a824:	f107 0320 	add.w	r3, r7, #32
 801a828:	6879      	ldr	r1, [r7, #4]
 801a82a:	4618      	mov	r0, r3
 801a82c:	f7f4 fc36 	bl	800f09c <_Z10StringFromm>
 801a830:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a834:	491f      	ldr	r1, [pc, #124]	; (801a8b4 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 801a836:	4618      	mov	r0, r3
 801a838:	f7f3 fb37 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801a83c:	f107 0318 	add.w	r3, r7, #24
 801a840:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a844:	f107 0120 	add.w	r1, r7, #32
 801a848:	4618      	mov	r0, r3
 801a84a:	f7f3 ff48 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 801a84e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a852:	6879      	ldr	r1, [r7, #4]
 801a854:	4618      	mov	r0, r3
 801a856:	f7f4 faeb 	bl	800ee30 <_Z30BracketsFormattedHexStringFromm>
 801a85a:	f107 0310 	add.w	r3, r7, #16
 801a85e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801a862:	f107 0118 	add.w	r1, r7, #24
 801a866:	4618      	mov	r0, r3
 801a868:	f7f3 ff39 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 801a86c:	f107 0310 	add.w	r3, r7, #16
 801a870:	4619      	mov	r1, r3
 801a872:	4620      	mov	r0, r4
 801a874:	f7f3 ff4e 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801a878:	f107 0310 	add.w	r3, r7, #16
 801a87c:	4618      	mov	r0, r3
 801a87e:	f7f3 fecc 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801a882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a886:	4618      	mov	r0, r3
 801a888:	f7f3 fec7 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801a88c:	f107 0318 	add.w	r3, r7, #24
 801a890:	4618      	mov	r0, r3
 801a892:	f7f3 fec2 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801a896:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a89a:	4618      	mov	r0, r3
 801a89c:	f7f3 febd 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801a8a0:	f107 0320 	add.w	r3, r7, #32
 801a8a4:	4618      	mov	r0, r3
 801a8a6:	f7f3 feb8 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return *this;
 801a8aa:	68fb      	ldr	r3, [r7, #12]
}
 801a8ac:	4618      	mov	r0, r3
 801a8ae:	373c      	adds	r7, #60	; 0x3c
 801a8b0:	46bd      	mov	sp, r7
 801a8b2:	bd90      	pop	{r4, r7, pc}
 801a8b4:	080278f4 	.word	0x080278f4

0801a8b8 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 801a8b8:	b590      	push	{r4, r7, lr}
 801a8ba:	b08f      	sub	sp, #60	; 0x3c
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	60f8      	str	r0, [r7, #12]
 801a8c0:	60b9      	str	r1, [r7, #8]
 801a8c2:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801a8c4:	68b9      	ldr	r1, [r7, #8]
 801a8c6:	68f8      	ldr	r0, [r7, #12]
 801a8c8:	f7ff feb0 	bl	801a62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801a8cc:	68fb      	ldr	r3, [r7, #12]
 801a8ce:	1d1c      	adds	r4, r3, #4
 801a8d0:	f107 0320 	add.w	r3, r7, #32
 801a8d4:	6879      	ldr	r1, [r7, #4]
 801a8d6:	4618      	mov	r0, r3
 801a8d8:	f7f4 f978 	bl	800ebcc <_Z10StringFroml>
 801a8dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a8e0:	491f      	ldr	r1, [pc, #124]	; (801a960 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 801a8e2:	4618      	mov	r0, r3
 801a8e4:	f7f3 fae1 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801a8e8:	f107 0318 	add.w	r3, r7, #24
 801a8ec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a8f0:	f107 0120 	add.w	r1, r7, #32
 801a8f4:	4618      	mov	r0, r3
 801a8f6:	f7f3 fef2 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 801a8fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a8fe:	6879      	ldr	r1, [r7, #4]
 801a900:	4618      	mov	r0, r3
 801a902:	f7f4 fa79 	bl	800edf8 <_Z30BracketsFormattedHexStringFroml>
 801a906:	f107 0310 	add.w	r3, r7, #16
 801a90a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801a90e:	f107 0118 	add.w	r1, r7, #24
 801a912:	4618      	mov	r0, r3
 801a914:	f7f3 fee3 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 801a918:	f107 0310 	add.w	r3, r7, #16
 801a91c:	4619      	mov	r1, r3
 801a91e:	4620      	mov	r0, r4
 801a920:	f7f3 fef8 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801a924:	f107 0310 	add.w	r3, r7, #16
 801a928:	4618      	mov	r0, r3
 801a92a:	f7f3 fe76 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801a92e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a932:	4618      	mov	r0, r3
 801a934:	f7f3 fe71 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801a938:	f107 0318 	add.w	r3, r7, #24
 801a93c:	4618      	mov	r0, r3
 801a93e:	f7f3 fe6c 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801a942:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a946:	4618      	mov	r0, r3
 801a948:	f7f3 fe67 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801a94c:	f107 0320 	add.w	r3, r7, #32
 801a950:	4618      	mov	r0, r3
 801a952:	f7f3 fe62 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return *this;
 801a956:	68fb      	ldr	r3, [r7, #12]
}
 801a958:	4618      	mov	r0, r3
 801a95a:	373c      	adds	r7, #60	; 0x3c
 801a95c:	46bd      	mov	sp, r7
 801a95e:	bd90      	pop	{r4, r7, pc}
 801a960:	080278f4 	.word	0x080278f4

0801a964 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801a964:	b5b0      	push	{r4, r5, r7, lr}
 801a966:	b086      	sub	sp, #24
 801a968:	af02      	add	r7, sp, #8
 801a96a:	60f8      	str	r0, [r7, #12]
 801a96c:	60b9      	str	r1, [r7, #8]
 801a96e:	4639      	mov	r1, r7
 801a970:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801a974:	f7fa fe7c 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801a978:	4604      	mov	r4, r0
 801a97a:	6823      	ldr	r3, [r4, #0]
 801a97c:	3368      	adds	r3, #104	; 0x68
 801a97e:	681d      	ldr	r5, [r3, #0]
 801a980:	f7fa fe86 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a984:	4603      	mov	r3, r0
 801a986:	9300      	str	r3, [sp, #0]
 801a988:	f240 23ee 	movw	r3, #750	; 0x2ee
 801a98c:	4a04      	ldr	r2, [pc, #16]	; (801a9a0 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801a98e:	4905      	ldr	r1, [pc, #20]	; (801a9a4 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 801a990:	4620      	mov	r0, r4
 801a992:	47a8      	blx	r5
    return *this;
 801a994:	68fb      	ldr	r3, [r7, #12]
}
 801a996:	4618      	mov	r0, r3
 801a998:	3710      	adds	r7, #16
 801a99a:	46bd      	mov	sp, r7
 801a99c:	bdb0      	pop	{r4, r5, r7, pc}
 801a99e:	bf00      	nop
 801a9a0:	080277e0 	.word	0x080277e0
 801a9a4:	080277fc 	.word	0x080277fc

0801a9a8 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801a9a8:	b5b0      	push	{r4, r5, r7, lr}
 801a9aa:	b086      	sub	sp, #24
 801a9ac:	af02      	add	r7, sp, #8
 801a9ae:	60f8      	str	r0, [r7, #12]
 801a9b0:	60b9      	str	r1, [r7, #8]
 801a9b2:	4639      	mov	r1, r7
 801a9b4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801a9b8:	f7fa fe5a 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801a9bc:	4604      	mov	r4, r0
 801a9be:	6823      	ldr	r3, [r4, #0]
 801a9c0:	3368      	adds	r3, #104	; 0x68
 801a9c2:	681d      	ldr	r5, [r3, #0]
 801a9c4:	f7fa fe64 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a9c8:	4603      	mov	r3, r0
 801a9ca:	9300      	str	r3, [sp, #0]
 801a9cc:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 801a9d0:	4a04      	ldr	r2, [pc, #16]	; (801a9e4 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801a9d2:	4905      	ldr	r1, [pc, #20]	; (801a9e8 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 801a9d4:	4620      	mov	r0, r4
 801a9d6:	47a8      	blx	r5
    return *this;
 801a9d8:	68fb      	ldr	r3, [r7, #12]
}
 801a9da:	4618      	mov	r0, r3
 801a9dc:	3710      	adds	r7, #16
 801a9de:	46bd      	mov	sp, r7
 801a9e0:	bdb0      	pop	{r4, r5, r7, pc}
 801a9e2:	bf00      	nop
 801a9e4:	080277e0 	.word	0x080277e0
 801a9e8:	08027828 	.word	0x08027828

0801a9ec <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 801a9ec:	b590      	push	{r4, r7, lr}
 801a9ee:	b087      	sub	sp, #28
 801a9f0:	af00      	add	r7, sp, #0
 801a9f2:	60f8      	str	r0, [r7, #12]
 801a9f4:	60b9      	str	r1, [r7, #8]
 801a9f6:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 801a9fa:	68b9      	ldr	r1, [r7, #8]
 801a9fc:	68f8      	ldr	r0, [r7, #12]
 801a9fe:	f7ff fe15 	bl	801a62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801aa02:	68fb      	ldr	r3, [r7, #12]
 801aa04:	1d1c      	adds	r4, r3, #4
 801aa06:	f107 0310 	add.w	r3, r7, #16
 801aa0a:	2106      	movs	r1, #6
 801aa0c:	ed97 0b00 	vldr	d0, [r7]
 801aa10:	4618      	mov	r0, r3
 801aa12:	f7f4 fac7 	bl	800efa4 <_Z10StringFromdi>
 801aa16:	f107 0310 	add.w	r3, r7, #16
 801aa1a:	4619      	mov	r1, r3
 801aa1c:	4620      	mov	r0, r4
 801aa1e:	f7f3 fe79 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801aa22:	f107 0310 	add.w	r3, r7, #16
 801aa26:	4618      	mov	r0, r3
 801aa28:	f7f3 fdf7 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return *this;
 801aa2c:	68fb      	ldr	r3, [r7, #12]
}
 801aa2e:	4618      	mov	r0, r3
 801aa30:	371c      	adds	r7, #28
 801aa32:	46bd      	mov	sp, r7
 801aa34:	bd90      	pop	{r4, r7, pc}

0801aa36 <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 801aa36:	b590      	push	{r4, r7, lr}
 801aa38:	b087      	sub	sp, #28
 801aa3a:	af00      	add	r7, sp, #0
 801aa3c:	60f8      	str	r0, [r7, #12]
 801aa3e:	60b9      	str	r1, [r7, #8]
 801aa40:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801aa42:	68b9      	ldr	r1, [r7, #8]
 801aa44:	68f8      	ldr	r0, [r7, #12]
 801aa46:	f7ff fdf1 	bl	801a62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801aa4a:	68fb      	ldr	r3, [r7, #12]
 801aa4c:	1d1c      	adds	r4, r3, #4
 801aa4e:	f107 0310 	add.w	r3, r7, #16
 801aa52:	6879      	ldr	r1, [r7, #4]
 801aa54:	4618      	mov	r0, r3
 801aa56:	f7f4 f86d 	bl	800eb34 <_Z10StringFromPKc>
 801aa5a:	f107 0310 	add.w	r3, r7, #16
 801aa5e:	4619      	mov	r1, r3
 801aa60:	4620      	mov	r0, r4
 801aa62:	f7f3 fe57 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801aa66:	f107 0310 	add.w	r3, r7, #16
 801aa6a:	4618      	mov	r0, r3
 801aa6c:	f7f3 fdd5 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return *this;
 801aa70:	68fb      	ldr	r3, [r7, #12]
}
 801aa72:	4618      	mov	r0, r3
 801aa74:	371c      	adds	r7, #28
 801aa76:	46bd      	mov	sp, r7
 801aa78:	bd90      	pop	{r4, r7, pc}

0801aa7a <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 801aa7a:	b590      	push	{r4, r7, lr}
 801aa7c:	b087      	sub	sp, #28
 801aa7e:	af00      	add	r7, sp, #0
 801aa80:	60f8      	str	r0, [r7, #12]
 801aa82:	60b9      	str	r1, [r7, #8]
 801aa84:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801aa86:	68b9      	ldr	r1, [r7, #8]
 801aa88:	68f8      	ldr	r0, [r7, #12]
 801aa8a:	f7ff fdcf 	bl	801a62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801aa8e:	68fb      	ldr	r3, [r7, #12]
 801aa90:	1d1c      	adds	r4, r3, #4
 801aa92:	f107 0310 	add.w	r3, r7, #16
 801aa96:	6879      	ldr	r1, [r7, #4]
 801aa98:	4618      	mov	r0, r3
 801aa9a:	f7f4 f8a9 	bl	800ebf0 <_Z10StringFromPKv>
 801aa9e:	f107 0310 	add.w	r3, r7, #16
 801aaa2:	4619      	mov	r1, r3
 801aaa4:	4620      	mov	r0, r4
 801aaa6:	f7f3 fe35 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801aaaa:	f107 0310 	add.w	r3, r7, #16
 801aaae:	4618      	mov	r0, r3
 801aab0:	f7f3 fdb3 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return *this;
 801aab4:	68fb      	ldr	r3, [r7, #12]
}
 801aab6:	4618      	mov	r0, r3
 801aab8:	371c      	adds	r7, #28
 801aaba:	46bd      	mov	sp, r7
 801aabc:	bd90      	pop	{r4, r7, pc}

0801aabe <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801aabe:	b590      	push	{r4, r7, lr}
 801aac0:	b087      	sub	sp, #28
 801aac2:	af00      	add	r7, sp, #0
 801aac4:	60f8      	str	r0, [r7, #12]
 801aac6:	60b9      	str	r1, [r7, #8]
 801aac8:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801aaca:	68b9      	ldr	r1, [r7, #8]
 801aacc:	68f8      	ldr	r0, [r7, #12]
 801aace:	f7ff fdad 	bl	801a62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801aad2:	68fb      	ldr	r3, [r7, #12]
 801aad4:	1d1c      	adds	r4, r3, #4
 801aad6:	f107 0310 	add.w	r3, r7, #16
 801aada:	6879      	ldr	r1, [r7, #4]
 801aadc:	4618      	mov	r0, r3
 801aade:	f7f4 f887 	bl	800ebf0 <_Z10StringFromPKv>
 801aae2:	f107 0310 	add.w	r3, r7, #16
 801aae6:	4619      	mov	r1, r3
 801aae8:	4620      	mov	r0, r4
 801aaea:	f7f3 fe13 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801aaee:	f107 0310 	add.w	r3, r7, #16
 801aaf2:	4618      	mov	r0, r3
 801aaf4:	f7f3 fd91 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return *this;
 801aaf8:	68fb      	ldr	r3, [r7, #12]
}
 801aafa:	4618      	mov	r0, r3
 801aafc:	371c      	adds	r7, #28
 801aafe:	46bd      	mov	sp, r7
 801ab00:	bd90      	pop	{r4, r7, pc}

0801ab02 <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801ab02:	b590      	push	{r4, r7, lr}
 801ab04:	b087      	sub	sp, #28
 801ab06:	af00      	add	r7, sp, #0
 801ab08:	60f8      	str	r0, [r7, #12]
 801ab0a:	60b9      	str	r1, [r7, #8]
 801ab0c:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801ab0e:	68b9      	ldr	r1, [r7, #8]
 801ab10:	68f8      	ldr	r0, [r7, #12]
 801ab12:	f7ff fd8b 	bl	801a62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801ab16:	68fb      	ldr	r3, [r7, #12]
 801ab18:	1d1c      	adds	r4, r3, #4
 801ab1a:	f107 0310 	add.w	r3, r7, #16
 801ab1e:	6879      	ldr	r1, [r7, #4]
 801ab20:	4618      	mov	r0, r3
 801ab22:	f7f4 f88f 	bl	800ec44 <_Z10StringFromPFvvE>
 801ab26:	f107 0310 	add.w	r3, r7, #16
 801ab2a:	4619      	mov	r1, r3
 801ab2c:	4620      	mov	r0, r4
 801ab2e:	f7f3 fdf1 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801ab32:	f107 0310 	add.w	r3, r7, #16
 801ab36:	4618      	mov	r0, r3
 801ab38:	f7f3 fd6f 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return *this;
 801ab3c:	68fb      	ldr	r3, [r7, #12]
}
 801ab3e:	4618      	mov	r0, r3
 801ab40:	371c      	adds	r7, #28
 801ab42:	46bd      	mov	sp, r7
 801ab44:	bd90      	pop	{r4, r7, pc}

0801ab46 <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801ab46:	b590      	push	{r4, r7, lr}
 801ab48:	b087      	sub	sp, #28
 801ab4a:	af00      	add	r7, sp, #0
 801ab4c:	60f8      	str	r0, [r7, #12]
 801ab4e:	60b9      	str	r1, [r7, #8]
 801ab50:	607a      	str	r2, [r7, #4]
 801ab52:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 801ab54:	68b9      	ldr	r1, [r7, #8]
 801ab56:	68f8      	ldr	r0, [r7, #12]
 801ab58:	f7ff fd68 	bl	801a62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	1d1c      	adds	r4, r3, #4
 801ab60:	f107 0310 	add.w	r3, r7, #16
 801ab64:	683a      	ldr	r2, [r7, #0]
 801ab66:	6879      	ldr	r1, [r7, #4]
 801ab68:	4618      	mov	r0, r3
 801ab6a:	f7f4 fbaf 	bl	800f2cc <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801ab6e:	f107 0310 	add.w	r3, r7, #16
 801ab72:	4619      	mov	r1, r3
 801ab74:	4620      	mov	r0, r4
 801ab76:	f7f3 fdcd 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801ab7a:	f107 0310 	add.w	r3, r7, #16
 801ab7e:	4618      	mov	r0, r3
 801ab80:	f7f3 fd4b 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return *this;
 801ab84:	68fb      	ldr	r3, [r7, #12]
}
 801ab86:	4618      	mov	r0, r3
 801ab88:	371c      	adds	r7, #28
 801ab8a:	46bd      	mov	sp, r7
 801ab8c:	bd90      	pop	{r4, r7, pc}
	...

0801ab90 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 801ab90:	b590      	push	{r4, r7, lr}
 801ab92:	b087      	sub	sp, #28
 801ab94:	af00      	add	r7, sp, #0
 801ab96:	60f8      	str	r0, [r7, #12]
 801ab98:	60b9      	str	r1, [r7, #8]
 801ab9a:	607a      	str	r2, [r7, #4]
 801ab9c:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801ab9e:	68fb      	ldr	r3, [r7, #12]
 801aba0:	3304      	adds	r3, #4
 801aba2:	4913      	ldr	r1, [pc, #76]	; (801abf0 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 801aba4:	4618      	mov	r0, r3
 801aba6:	f7f3 fdc7 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 801abaa:	68fb      	ldr	r3, [r7, #12]
 801abac:	3304      	adds	r3, #4
 801abae:	68b9      	ldr	r1, [r7, #8]
 801abb0:	4618      	mov	r0, r3
 801abb2:	f7f3 fdaf 	bl	800e714 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 801abb6:	6879      	ldr	r1, [r7, #4]
 801abb8:	68f8      	ldr	r0, [r7, #12]
 801abba:	f7ff fd37 	bl	801a62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801abbe:	68fb      	ldr	r3, [r7, #12]
 801abc0:	1d1c      	adds	r4, r3, #4
 801abc2:	f107 0310 	add.w	r3, r7, #16
 801abc6:	6839      	ldr	r1, [r7, #0]
 801abc8:	4618      	mov	r0, r3
 801abca:	f7f4 f811 	bl	800ebf0 <_Z10StringFromPKv>
 801abce:	f107 0310 	add.w	r3, r7, #16
 801abd2:	4619      	mov	r1, r3
 801abd4:	4620      	mov	r0, r4
 801abd6:	f7f3 fd9d 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801abda:	f107 0310 	add.w	r3, r7, #16
 801abde:	4618      	mov	r0, r3
 801abe0:	f7f3 fd1b 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return *this;
 801abe4:	68fb      	ldr	r3, [r7, #12]
}
 801abe6:	4618      	mov	r0, r3
 801abe8:	371c      	adds	r7, #28
 801abea:	46bd      	mov	sp, r7
 801abec:	bd90      	pop	{r4, r7, pc}
 801abee:	bf00      	nop
 801abf0:	080278f4 	.word	0x080278f4

0801abf4 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 801abf4:	b590      	push	{r4, r7, lr}
 801abf6:	b087      	sub	sp, #28
 801abf8:	af00      	add	r7, sp, #0
 801abfa:	60f8      	str	r0, [r7, #12]
 801abfc:	60b9      	str	r1, [r7, #8]
 801abfe:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801ac00:	68b9      	ldr	r1, [r7, #8]
 801ac02:	68f8      	ldr	r0, [r7, #12]
 801ac04:	f7ff fd12 	bl	801a62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 801ac08:	68fb      	ldr	r3, [r7, #12]
 801ac0a:	1d1c      	adds	r4, r3, #4
 801ac0c:	f107 0310 	add.w	r3, r7, #16
 801ac10:	6879      	ldr	r1, [r7, #4]
 801ac12:	4618      	mov	r0, r3
 801ac14:	f7f3 ffec 	bl	800ebf0 <_Z10StringFromPKv>
 801ac18:	f107 0310 	add.w	r3, r7, #16
 801ac1c:	4619      	mov	r1, r3
 801ac1e:	4620      	mov	r0, r4
 801ac20:	f7f3 fd78 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801ac24:	f107 0310 	add.w	r3, r7, #16
 801ac28:	4618      	mov	r0, r3
 801ac2a:	f7f3 fcf6 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return *this;
 801ac2e:	68fb      	ldr	r3, [r7, #12]
}
 801ac30:	4618      	mov	r0, r3
 801ac32:	371c      	adds	r7, #28
 801ac34:	46bd      	mov	sp, r7
 801ac36:	bd90      	pop	{r4, r7, pc}

0801ac38 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 801ac38:	b590      	push	{r4, r7, lr}
 801ac3a:	b087      	sub	sp, #28
 801ac3c:	af00      	add	r7, sp, #0
 801ac3e:	60f8      	str	r0, [r7, #12]
 801ac40:	60b9      	str	r1, [r7, #8]
 801ac42:	607a      	str	r2, [r7, #4]
 801ac44:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801ac46:	68fb      	ldr	r3, [r7, #12]
 801ac48:	3304      	adds	r3, #4
 801ac4a:	4913      	ldr	r1, [pc, #76]	; (801ac98 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 801ac4c:	4618      	mov	r0, r3
 801ac4e:	f7f3 fd73 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 801ac52:	68fb      	ldr	r3, [r7, #12]
 801ac54:	3304      	adds	r3, #4
 801ac56:	68b9      	ldr	r1, [r7, #8]
 801ac58:	4618      	mov	r0, r3
 801ac5a:	f7f3 fd5b 	bl	800e714 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 801ac5e:	6879      	ldr	r1, [r7, #4]
 801ac60:	68f8      	ldr	r0, [r7, #12]
 801ac62:	f7ff fce3 	bl	801a62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 801ac66:	68fb      	ldr	r3, [r7, #12]
 801ac68:	1d1c      	adds	r4, r3, #4
 801ac6a:	f107 0310 	add.w	r3, r7, #16
 801ac6e:	6839      	ldr	r1, [r7, #0]
 801ac70:	4618      	mov	r0, r3
 801ac72:	f7f3 ffbd 	bl	800ebf0 <_Z10StringFromPKv>
 801ac76:	f107 0310 	add.w	r3, r7, #16
 801ac7a:	4619      	mov	r1, r3
 801ac7c:	4620      	mov	r0, r4
 801ac7e:	f7f3 fd49 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801ac82:	f107 0310 	add.w	r3, r7, #16
 801ac86:	4618      	mov	r0, r3
 801ac88:	f7f3 fcc7 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return *this;
 801ac8c:	68fb      	ldr	r3, [r7, #12]
}
 801ac8e:	4618      	mov	r0, r3
 801ac90:	371c      	adds	r7, #28
 801ac92:	46bd      	mov	sp, r7
 801ac94:	bd90      	pop	{r4, r7, pc}
 801ac96:	bf00      	nop
 801ac98:	080278f4 	.word	0x080278f4

0801ac9c <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 801ac9c:	b480      	push	{r7}
 801ac9e:	b083      	sub	sp, #12
 801aca0:	af00      	add	r7, sp, #0
 801aca2:	6078      	str	r0, [r7, #4]
    return false;
 801aca4:	2300      	movs	r3, #0
}
 801aca6:	4618      	mov	r0, r3
 801aca8:	370c      	adds	r7, #12
 801acaa:	46bd      	mov	sp, r7
 801acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acb0:	4770      	bx	lr
	...

0801acb4 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 801acb4:	b580      	push	{r7, lr}
 801acb6:	b084      	sub	sp, #16
 801acb8:	af00      	add	r7, sp, #0
 801acba:	6078      	str	r0, [r7, #4]
 801acbc:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 801acbe:	f107 0308 	add.w	r3, r7, #8
 801acc2:	4909      	ldr	r1, [pc, #36]	; (801ace8 <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 801acc4:	4618      	mov	r0, r3
 801acc6:	f7f3 f8f0 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801acca:	f107 0308 	add.w	r3, r7, #8
 801acce:	4619      	mov	r1, r3
 801acd0:	6878      	ldr	r0, [r7, #4]
 801acd2:	f003 fe0f 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
 801acd6:	f107 0308 	add.w	r3, r7, #8
 801acda:	4618      	mov	r0, r3
 801acdc:	f7f3 fc9d 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 801ace0:	6878      	ldr	r0, [r7, #4]
 801ace2:	3710      	adds	r7, #16
 801ace4:	46bd      	mov	sp, r7
 801ace6:	bd80      	pop	{r7, pc}
 801ace8:	080277c8 	.word	0x080277c8

0801acec <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 801acec:	b480      	push	{r7}
 801acee:	b083      	sub	sp, #12
 801acf0:	af00      	add	r7, sp, #0
 801acf2:	6078      	str	r0, [r7, #4]
    return 0;
 801acf4:	2300      	movs	r3, #0
}
 801acf6:	4618      	mov	r0, r3
 801acf8:	370c      	adds	r7, #12
 801acfa:	46bd      	mov	sp, r7
 801acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad00:	4770      	bx	lr

0801ad02 <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 801ad02:	b480      	push	{r7}
 801ad04:	b083      	sub	sp, #12
 801ad06:	af00      	add	r7, sp, #0
 801ad08:	6078      	str	r0, [r7, #4]
    return 0;
 801ad0a:	2300      	movs	r3, #0
}
 801ad0c:	4618      	mov	r0, r3
 801ad0e:	370c      	adds	r7, #12
 801ad10:	46bd      	mov	sp, r7
 801ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad16:	4770      	bx	lr

0801ad18 <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 801ad18:	b480      	push	{r7}
 801ad1a:	b083      	sub	sp, #12
 801ad1c:	af00      	add	r7, sp, #0
 801ad1e:	6078      	str	r0, [r7, #4]
 801ad20:	6039      	str	r1, [r7, #0]
    return 0;
 801ad22:	2300      	movs	r3, #0
}
 801ad24:	4618      	mov	r0, r3
 801ad26:	370c      	adds	r7, #12
 801ad28:	46bd      	mov	sp, r7
 801ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad2e:	4770      	bx	lr

0801ad30 <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 801ad30:	b480      	push	{r7}
 801ad32:	b083      	sub	sp, #12
 801ad34:	af00      	add	r7, sp, #0
 801ad36:	6078      	str	r0, [r7, #4]
 801ad38:	6039      	str	r1, [r7, #0]
    return 0;
 801ad3a:	2300      	movs	r3, #0
}
 801ad3c:	4618      	mov	r0, r3
 801ad3e:	370c      	adds	r7, #12
 801ad40:	46bd      	mov	sp, r7
 801ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad46:	4770      	bx	lr

0801ad48 <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 801ad48:	b5b0      	push	{r4, r5, r7, lr}
 801ad4a:	b084      	sub	sp, #16
 801ad4c:	af02      	add	r7, sp, #8
 801ad4e:	6078      	str	r0, [r7, #4]
 801ad50:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801ad52:	f7fa fc8d 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801ad56:	4604      	mov	r4, r0
 801ad58:	6823      	ldr	r3, [r4, #0]
 801ad5a:	3368      	adds	r3, #104	; 0x68
 801ad5c:	681d      	ldr	r5, [r3, #0]
 801ad5e:	f7fa fc97 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ad62:	4603      	mov	r3, r0
 801ad64:	9300      	str	r3, [sp, #0]
 801ad66:	f240 3375 	movw	r3, #885	; 0x375
 801ad6a:	4a06      	ldr	r2, [pc, #24]	; (801ad84 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 801ad6c:	4906      	ldr	r1, [pc, #24]	; (801ad88 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 801ad6e:	4620      	mov	r0, r4
 801ad70:	47a8      	blx	r5
    return cpputest_longlong(0);
 801ad72:	2100      	movs	r1, #0
 801ad74:	6878      	ldr	r0, [r7, #4]
 801ad76:	f7f1 f8cf 	bl	800bf18 <_ZN17cpputest_longlongC1Ei>
}
 801ad7a:	6878      	ldr	r0, [r7, #4]
 801ad7c:	3708      	adds	r7, #8
 801ad7e:	46bd      	mov	sp, r7
 801ad80:	bdb0      	pop	{r4, r5, r7, pc}
 801ad82:	bf00      	nop
 801ad84:	080277e0 	.word	0x080277e0
 801ad88:	08027828 	.word	0x08027828

0801ad8c <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 801ad8c:	b5b0      	push	{r4, r5, r7, lr}
 801ad8e:	b084      	sub	sp, #16
 801ad90:	af02      	add	r7, sp, #8
 801ad92:	6078      	str	r0, [r7, #4]
 801ad94:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801ad96:	f7fa fc6b 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801ad9a:	4604      	mov	r4, r0
 801ad9c:	6823      	ldr	r3, [r4, #0]
 801ad9e:	3368      	adds	r3, #104	; 0x68
 801ada0:	681d      	ldr	r5, [r3, #0]
 801ada2:	f7fa fc75 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ada6:	4603      	mov	r3, r0
 801ada8:	9300      	str	r3, [sp, #0]
 801adaa:	f240 337b 	movw	r3, #891	; 0x37b
 801adae:	4a06      	ldr	r2, [pc, #24]	; (801adc8 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 801adb0:	4906      	ldr	r1, [pc, #24]	; (801adcc <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 801adb2:	4620      	mov	r0, r4
 801adb4:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801adb6:	2100      	movs	r1, #0
 801adb8:	6878      	ldr	r0, [r7, #4]
 801adba:	f7f1 f8b9 	bl	800bf30 <_ZN18cpputest_ulonglongC1Ei>
}
 801adbe:	6878      	ldr	r0, [r7, #4]
 801adc0:	3708      	adds	r7, #8
 801adc2:	46bd      	mov	sp, r7
 801adc4:	bdb0      	pop	{r4, r5, r7, pc}
 801adc6:	bf00      	nop
 801adc8:	080277e0 	.word	0x080277e0
 801adcc:	080277fc 	.word	0x080277fc

0801add0 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 801add0:	b5b0      	push	{r4, r5, r7, lr}
 801add2:	b086      	sub	sp, #24
 801add4:	af02      	add	r7, sp, #8
 801add6:	60f8      	str	r0, [r7, #12]
 801add8:	60b9      	str	r1, [r7, #8]
 801adda:	4639      	mov	r1, r7
 801addc:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801ade0:	f7fa fc46 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801ade4:	4604      	mov	r4, r0
 801ade6:	6823      	ldr	r3, [r4, #0]
 801ade8:	3368      	adds	r3, #104	; 0x68
 801adea:	681d      	ldr	r5, [r3, #0]
 801adec:	f7fa fc50 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801adf0:	4603      	mov	r3, r0
 801adf2:	9300      	str	r3, [sp, #0]
 801adf4:	f240 3381 	movw	r3, #897	; 0x381
 801adf8:	4a05      	ldr	r2, [pc, #20]	; (801ae10 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 801adfa:	4906      	ldr	r1, [pc, #24]	; (801ae14 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 801adfc:	4620      	mov	r0, r4
 801adfe:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801ae00:	2100      	movs	r1, #0
 801ae02:	68f8      	ldr	r0, [r7, #12]
 801ae04:	f7f1 f894 	bl	800bf30 <_ZN18cpputest_ulonglongC1Ei>
}
 801ae08:	68f8      	ldr	r0, [r7, #12]
 801ae0a:	3710      	adds	r7, #16
 801ae0c:	46bd      	mov	sp, r7
 801ae0e:	bdb0      	pop	{r4, r5, r7, pc}
 801ae10:	080277e0 	.word	0x080277e0
 801ae14:	080277fc 	.word	0x080277fc

0801ae18 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 801ae18:	b5b0      	push	{r4, r5, r7, lr}
 801ae1a:	b086      	sub	sp, #24
 801ae1c:	af02      	add	r7, sp, #8
 801ae1e:	60f8      	str	r0, [r7, #12]
 801ae20:	60b9      	str	r1, [r7, #8]
 801ae22:	4639      	mov	r1, r7
 801ae24:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801ae28:	f7fa fc22 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801ae2c:	4604      	mov	r4, r0
 801ae2e:	6823      	ldr	r3, [r4, #0]
 801ae30:	3368      	adds	r3, #104	; 0x68
 801ae32:	681d      	ldr	r5, [r3, #0]
 801ae34:	f7fa fc2c 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ae38:	4603      	mov	r3, r0
 801ae3a:	9300      	str	r3, [sp, #0]
 801ae3c:	f240 3387 	movw	r3, #903	; 0x387
 801ae40:	4a05      	ldr	r2, [pc, #20]	; (801ae58 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 801ae42:	4906      	ldr	r1, [pc, #24]	; (801ae5c <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 801ae44:	4620      	mov	r0, r4
 801ae46:	47a8      	blx	r5
    return cpputest_longlong(0);
 801ae48:	2100      	movs	r1, #0
 801ae4a:	68f8      	ldr	r0, [r7, #12]
 801ae4c:	f7f1 f864 	bl	800bf18 <_ZN17cpputest_longlongC1Ei>
}
 801ae50:	68f8      	ldr	r0, [r7, #12]
 801ae52:	3710      	adds	r7, #16
 801ae54:	46bd      	mov	sp, r7
 801ae56:	bdb0      	pop	{r4, r5, r7, pc}
 801ae58:	080277e0 	.word	0x080277e0
 801ae5c:	08027828 	.word	0x08027828

0801ae60 <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 801ae60:	b480      	push	{r7}
 801ae62:	b083      	sub	sp, #12
 801ae64:	af00      	add	r7, sp, #0
 801ae66:	6078      	str	r0, [r7, #4]
    return false;
 801ae68:	2300      	movs	r3, #0
}
 801ae6a:	4618      	mov	r0, r3
 801ae6c:	370c      	adds	r7, #12
 801ae6e:	46bd      	mov	sp, r7
 801ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae74:	4770      	bx	lr

0801ae76 <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 801ae76:	b480      	push	{r7}
 801ae78:	b083      	sub	sp, #12
 801ae7a:	af00      	add	r7, sp, #0
 801ae7c:	6078      	str	r0, [r7, #4]
 801ae7e:	460b      	mov	r3, r1
 801ae80:	70fb      	strb	r3, [r7, #3]
    return false;
 801ae82:	2300      	movs	r3, #0
}
 801ae84:	4618      	mov	r0, r3
 801ae86:	370c      	adds	r7, #12
 801ae88:	46bd      	mov	sp, r7
 801ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae8e:	4770      	bx	lr

0801ae90 <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 801ae90:	b480      	push	{r7}
 801ae92:	b083      	sub	sp, #12
 801ae94:	af00      	add	r7, sp, #0
 801ae96:	6078      	str	r0, [r7, #4]
    return 0;
 801ae98:	2300      	movs	r3, #0
}
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	370c      	adds	r7, #12
 801ae9e:	46bd      	mov	sp, r7
 801aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aea4:	4770      	bx	lr

0801aea6 <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 801aea6:	b480      	push	{r7}
 801aea8:	b083      	sub	sp, #12
 801aeaa:	af00      	add	r7, sp, #0
 801aeac:	6078      	str	r0, [r7, #4]
    return 0.0;
 801aeae:	f04f 0200 	mov.w	r2, #0
 801aeb2:	f04f 0300 	mov.w	r3, #0
 801aeb6:	ec43 2b17 	vmov	d7, r2, r3
}
 801aeba:	eeb0 0a47 	vmov.f32	s0, s14
 801aebe:	eef0 0a67 	vmov.f32	s1, s15
 801aec2:	370c      	adds	r7, #12
 801aec4:	46bd      	mov	sp, r7
 801aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeca:	4770      	bx	lr

0801aecc <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 801aecc:	b580      	push	{r7, lr}
 801aece:	b084      	sub	sp, #16
 801aed0:	af00      	add	r7, sp, #0
 801aed2:	60f8      	str	r0, [r7, #12]
 801aed4:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 801aed8:	68fb      	ldr	r3, [r7, #12]
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	3398      	adds	r3, #152	; 0x98
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	68f8      	ldr	r0, [r7, #12]
 801aee2:	4798      	blx	r3
 801aee4:	eeb0 7a40 	vmov.f32	s14, s0
 801aee8:	eef0 7a60 	vmov.f32	s15, s1
}
 801aeec:	eeb0 0a47 	vmov.f32	s0, s14
 801aef0:	eef0 0a67 	vmov.f32	s1, s15
 801aef4:	3710      	adds	r7, #16
 801aef6:	46bd      	mov	sp, r7
 801aef8:	bd80      	pop	{r7, pc}

0801aefa <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 801aefa:	b480      	push	{r7}
 801aefc:	b083      	sub	sp, #12
 801aefe:	af00      	add	r7, sp, #0
 801af00:	6078      	str	r0, [r7, #4]
    return 0;
 801af02:	2300      	movs	r3, #0
}
 801af04:	4618      	mov	r0, r3
 801af06:	370c      	adds	r7, #12
 801af08:	46bd      	mov	sp, r7
 801af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af0e:	4770      	bx	lr

0801af10 <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 801af10:	b480      	push	{r7}
 801af12:	b083      	sub	sp, #12
 801af14:	af00      	add	r7, sp, #0
 801af16:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801af18:	2300      	movs	r3, #0
}
 801af1a:	4618      	mov	r0, r3
 801af1c:	370c      	adds	r7, #12
 801af1e:	46bd      	mov	sp, r7
 801af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af24:	4770      	bx	lr

0801af26 <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 801af26:	b480      	push	{r7}
 801af28:	b083      	sub	sp, #12
 801af2a:	af00      	add	r7, sp, #0
 801af2c:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801af2e:	2300      	movs	r3, #0
}
 801af30:	4618      	mov	r0, r3
 801af32:	370c      	adds	r7, #12
 801af34:	46bd      	mov	sp, r7
 801af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af3a:	4770      	bx	lr

0801af3c <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 801af3c:	b480      	push	{r7}
 801af3e:	b083      	sub	sp, #12
 801af40:	af00      	add	r7, sp, #0
 801af42:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801af44:	2300      	movs	r3, #0
}
 801af46:	4618      	mov	r0, r3
 801af48:	370c      	adds	r7, #12
 801af4a:	46bd      	mov	sp, r7
 801af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af50:	4770      	bx	lr

0801af52 <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 801af52:	b580      	push	{r7, lr}
 801af54:	b082      	sub	sp, #8
 801af56:	af00      	add	r7, sp, #0
 801af58:	6078      	str	r0, [r7, #4]
 801af5a:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	33a8      	adds	r3, #168	; 0xa8
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	6878      	ldr	r0, [r7, #4]
 801af66:	4798      	blx	r3
 801af68:	4603      	mov	r3, r0
}
 801af6a:	4618      	mov	r0, r3
 801af6c:	3708      	adds	r7, #8
 801af6e:	46bd      	mov	sp, r7
 801af70:	bd80      	pop	{r7, pc}

0801af72 <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 801af72:	b580      	push	{r7, lr}
 801af74:	b082      	sub	sp, #8
 801af76:	af00      	add	r7, sp, #0
 801af78:	6078      	str	r0, [r7, #4]
 801af7a:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	33a0      	adds	r3, #160	; 0xa0
 801af82:	681b      	ldr	r3, [r3, #0]
 801af84:	6878      	ldr	r0, [r7, #4]
 801af86:	4798      	blx	r3
 801af88:	4603      	mov	r3, r0
}
 801af8a:	4618      	mov	r0, r3
 801af8c:	3708      	adds	r7, #8
 801af8e:	46bd      	mov	sp, r7
 801af90:	bd80      	pop	{r7, pc}

0801af92 <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 801af92:	b580      	push	{r7, lr}
 801af94:	b082      	sub	sp, #8
 801af96:	af00      	add	r7, sp, #0
 801af98:	6078      	str	r0, [r7, #4]
 801af9a:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	33b0      	adds	r3, #176	; 0xb0
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	6878      	ldr	r0, [r7, #4]
 801afa6:	4798      	blx	r3
 801afa8:	4603      	mov	r3, r0
}
 801afaa:	4618      	mov	r0, r3
 801afac:	3708      	adds	r7, #8
 801afae:	46bd      	mov	sp, r7
 801afb0:	bd80      	pop	{r7, pc}
	...

0801afb4 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 801afb4:	b480      	push	{r7}
 801afb6:	b083      	sub	sp, #12
 801afb8:	af00      	add	r7, sp, #0
 801afba:	6078      	str	r0, [r7, #4]
    return "";
 801afbc:	4b03      	ldr	r3, [pc, #12]	; (801afcc <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 801afbe:	4618      	mov	r0, r3
 801afc0:	370c      	adds	r7, #12
 801afc2:	46bd      	mov	sp, r7
 801afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afc8:	4770      	bx	lr
 801afca:	bf00      	nop
 801afcc:	080277c8 	.word	0x080277c8

0801afd0 <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 801afd0:	b580      	push	{r7, lr}
 801afd2:	b082      	sub	sp, #8
 801afd4:	af00      	add	r7, sp, #0
 801afd6:	6078      	str	r0, [r7, #4]
 801afd8:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	681b      	ldr	r3, [r3, #0]
 801afde:	3394      	adds	r3, #148	; 0x94
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	6878      	ldr	r0, [r7, #4]
 801afe4:	4798      	blx	r3
 801afe6:	4603      	mov	r3, r0
}
 801afe8:	4618      	mov	r0, r3
 801afea:	3708      	adds	r7, #8
 801afec:	46bd      	mov	sp, r7
 801afee:	bd80      	pop	{r7, pc}

0801aff0 <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 801aff0:	b480      	push	{r7}
 801aff2:	b083      	sub	sp, #12
 801aff4:	af00      	add	r7, sp, #0
 801aff6:	6078      	str	r0, [r7, #4]
 801aff8:	6039      	str	r1, [r7, #0]
    return 0;
 801affa:	2300      	movs	r3, #0
}
 801affc:	4618      	mov	r0, r3
 801affe:	370c      	adds	r7, #12
 801b000:	46bd      	mov	sp, r7
 801b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b006:	4770      	bx	lr

0801b008 <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 801b008:	b580      	push	{r7, lr}
 801b00a:	b082      	sub	sp, #8
 801b00c:	af00      	add	r7, sp, #0
 801b00e:	6078      	str	r0, [r7, #4]
 801b010:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	3388      	adds	r3, #136	; 0x88
 801b018:	681b      	ldr	r3, [r3, #0]
 801b01a:	6878      	ldr	r0, [r7, #4]
 801b01c:	4798      	blx	r3
 801b01e:	4603      	mov	r3, r0
}
 801b020:	4618      	mov	r0, r3
 801b022:	3708      	adds	r7, #8
 801b024:	46bd      	mov	sp, r7
 801b026:	bd80      	pop	{r7, pc}

0801b028 <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 801b028:	b590      	push	{r4, r7, lr}
 801b02a:	b085      	sub	sp, #20
 801b02c:	af00      	add	r7, sp, #0
 801b02e:	6078      	str	r0, [r7, #4]
 801b030:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	3304      	adds	r3, #4
 801b036:	490e      	ldr	r1, [pc, #56]	; (801b070 <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 801b038:	4618      	mov	r0, r3
 801b03a:	f7f3 fb7d 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	1d1c      	adds	r4, r3, #4
 801b042:	f107 0308 	add.w	r3, r7, #8
 801b046:	6839      	ldr	r1, [r7, #0]
 801b048:	4618      	mov	r0, r3
 801b04a:	f7f3 fdd1 	bl	800ebf0 <_Z10StringFromPKv>
 801b04e:	f107 0308 	add.w	r3, r7, #8
 801b052:	4619      	mov	r1, r3
 801b054:	4620      	mov	r0, r4
 801b056:	f7f3 fb5d 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801b05a:	f107 0308 	add.w	r3, r7, #8
 801b05e:	4618      	mov	r0, r3
 801b060:	f7f3 fadb 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return *this;
 801b064:	687b      	ldr	r3, [r7, #4]
}
 801b066:	4618      	mov	r0, r3
 801b068:	3714      	adds	r7, #20
 801b06a:	46bd      	mov	sp, r7
 801b06c:	bd90      	pop	{r4, r7, pc}
 801b06e:	bf00      	nop
 801b070:	080278fc 	.word	0x080278fc

0801b074 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 801b074:	b598      	push	{r3, r4, r7, lr}
 801b076:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 801b078:	4b09      	ldr	r3, [pc, #36]	; (801b0a0 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d10b      	bne.n	801b098 <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 801b080:	f240 32f3 	movw	r2, #1011	; 0x3f3
 801b084:	4907      	ldr	r1, [pc, #28]	; (801b0a4 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 801b086:	200c      	movs	r0, #12
 801b088:	f7f0 fb4c 	bl	800b724 <_ZnwjPKci>
 801b08c:	4604      	mov	r4, r0
 801b08e:	4620      	mov	r0, r4
 801b090:	f7ff fa4c 	bl	801a52c <_ZN19MockActualCallTraceC1Ev>
 801b094:	4b02      	ldr	r3, [pc, #8]	; (801b0a0 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801b096:	601c      	str	r4, [r3, #0]
    return *instance_;
 801b098:	4b01      	ldr	r3, [pc, #4]	; (801b0a0 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801b09a:	681b      	ldr	r3, [r3, #0]
}
 801b09c:	4618      	mov	r0, r3
 801b09e:	bd98      	pop	{r3, r4, r7, pc}
 801b0a0:	20000f70 	.word	0x20000f70
 801b0a4:	080277e0 	.word	0x080277e0

0801b0a8 <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 801b0a8:	b580      	push	{r7, lr}
 801b0aa:	af00      	add	r7, sp, #0
    delete instance_;
 801b0ac:	4b06      	ldr	r3, [pc, #24]	; (801b0c8 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d004      	beq.n	801b0be <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 801b0b4:	681a      	ldr	r2, [r3, #0]
 801b0b6:	3204      	adds	r2, #4
 801b0b8:	6812      	ldr	r2, [r2, #0]
 801b0ba:	4618      	mov	r0, r3
 801b0bc:	4790      	blx	r2
    instance_ = NULLPTR;
 801b0be:	4b02      	ldr	r3, [pc, #8]	; (801b0c8 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801b0c0:	2200      	movs	r2, #0
 801b0c2:	601a      	str	r2, [r3, #0]
}
 801b0c4:	bf00      	nop
 801b0c6:	bd80      	pop	{r7, pc}
 801b0c8:	20000f70 	.word	0x20000f70

0801b0cc <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 801b0cc:	b580      	push	{r7, lr}
 801b0ce:	b082      	sub	sp, #8
 801b0d0:	af00      	add	r7, sp, #0
 801b0d2:	6078      	str	r0, [r7, #4]
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	4618      	mov	r0, r3
 801b0d8:	f7fd fe9a 	bl	8018e10 <_ZN14MockActualCallC1Ev>
 801b0dc:	4a03      	ldr	r2, [pc, #12]	; (801b0ec <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	601a      	str	r2, [r3, #0]
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	4618      	mov	r0, r3
 801b0e6:	3708      	adds	r7, #8
 801b0e8:	46bd      	mov	sp, r7
 801b0ea:	bd80      	pop	{r7, pc}
 801b0ec:	0802a7cc 	.word	0x0802a7cc

0801b0f0 <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 801b0f0:	b580      	push	{r7, lr}
 801b0f2:	af00      	add	r7, sp, #0
 801b0f4:	4801      	ldr	r0, [pc, #4]	; (801b0fc <__tcf_0+0xc>)
 801b0f6:	f000 f831 	bl	801b15c <_ZN21MockIgnoredActualCallD1Ev>
 801b0fa:	bd80      	pop	{r7, pc}
 801b0fc:	20000f74 	.word	0x20000f74

0801b100 <_ZN21MockIgnoredActualCall8instanceEv>:
{
 801b100:	b580      	push	{r7, lr}
 801b102:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 801b104:	4b12      	ldr	r3, [pc, #72]	; (801b150 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801b106:	781b      	ldrb	r3, [r3, #0]
 801b108:	f3bf 8f5b 	dmb	ish
 801b10c:	b2db      	uxtb	r3, r3
 801b10e:	f003 0301 	and.w	r3, r3, #1
 801b112:	2b00      	cmp	r3, #0
 801b114:	bf0c      	ite	eq
 801b116:	2301      	moveq	r3, #1
 801b118:	2300      	movne	r3, #0
 801b11a:	b2db      	uxtb	r3, r3
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d013      	beq.n	801b148 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 801b120:	480b      	ldr	r0, [pc, #44]	; (801b150 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801b122:	f005 fd81 	bl	8020c28 <__cxa_guard_acquire>
 801b126:	4603      	mov	r3, r0
 801b128:	2b00      	cmp	r3, #0
 801b12a:	bf14      	ite	ne
 801b12c:	2301      	movne	r3, #1
 801b12e:	2300      	moveq	r3, #0
 801b130:	b2db      	uxtb	r3, r3
 801b132:	2b00      	cmp	r3, #0
 801b134:	d008      	beq.n	801b148 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 801b136:	4807      	ldr	r0, [pc, #28]	; (801b154 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 801b138:	f7ff ffc8 	bl	801b0cc <_ZN21MockIgnoredActualCallC1Ev>
 801b13c:	4804      	ldr	r0, [pc, #16]	; (801b150 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801b13e:	f005 fd7f 	bl	8020c40 <__cxa_guard_release>
 801b142:	4805      	ldr	r0, [pc, #20]	; (801b158 <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 801b144:	f005 fda3 	bl	8020c8e <atexit>
    return call;
 801b148:	4b02      	ldr	r3, [pc, #8]	; (801b154 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 801b14a:	4618      	mov	r0, r3
 801b14c:	bd80      	pop	{r7, pc}
 801b14e:	bf00      	nop
 801b150:	20000f78 	.word	0x20000f78
 801b154:	20000f74 	.word	0x20000f74
 801b158:	0801b0f1 	.word	0x0801b0f1

0801b15c <_ZN21MockIgnoredActualCallD1Ev>:
 801b15c:	b580      	push	{r7, lr}
 801b15e:	b082      	sub	sp, #8
 801b160:	af00      	add	r7, sp, #0
 801b162:	6078      	str	r0, [r7, #4]
 801b164:	4a05      	ldr	r2, [pc, #20]	; (801b17c <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	601a      	str	r2, [r3, #0]
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	4618      	mov	r0, r3
 801b16e:	f7fd fe5f 	bl	8018e30 <_ZN14MockActualCallD1Ev>
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	4618      	mov	r0, r3
 801b176:	3708      	adds	r7, #8
 801b178:	46bd      	mov	sp, r7
 801b17a:	bd80      	pop	{r7, pc}
 801b17c:	0802a7cc 	.word	0x0802a7cc

0801b180 <_ZN21MockIgnoredActualCallD0Ev>:
 801b180:	b580      	push	{r7, lr}
 801b182:	b082      	sub	sp, #8
 801b184:	af00      	add	r7, sp, #0
 801b186:	6078      	str	r0, [r7, #4]
 801b188:	6878      	ldr	r0, [r7, #4]
 801b18a:	f7ff ffe7 	bl	801b15c <_ZN21MockIgnoredActualCallD1Ev>
 801b18e:	2104      	movs	r1, #4
 801b190:	6878      	ldr	r0, [r7, #4]
 801b192:	f7f0 fadb 	bl	800b74c <_ZdlPvj>
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	4618      	mov	r0, r3
 801b19a:	3708      	adds	r7, #8
 801b19c:	46bd      	mov	sp, r7
 801b19e:	bd80      	pop	{r7, pc}

0801b1a0 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 801b1a0:	b580      	push	{r7, lr}
 801b1a2:	b082      	sub	sp, #8
 801b1a4:	af00      	add	r7, sp, #0
 801b1a6:	6078      	str	r0, [r7, #4]
 801b1a8:	4a05      	ldr	r2, [pc, #20]	; (801b1c0 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	601a      	str	r2, [r3, #0]
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	f7f0 fefd 	bl	800bfb0 <_ZN11MockFailureD1Ev>
 801b1b6:	687b      	ldr	r3, [r7, #4]
 801b1b8:	4618      	mov	r0, r3
 801b1ba:	3708      	adds	r7, #8
 801b1bc:	46bd      	mov	sp, r7
 801b1be:	bd80      	pop	{r7, pc}
 801b1c0:	0802a6c4 	.word	0x0802a6c4

0801b1c4 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 801b1c4:	b580      	push	{r7, lr}
 801b1c6:	b082      	sub	sp, #8
 801b1c8:	af00      	add	r7, sp, #0
 801b1ca:	6078      	str	r0, [r7, #4]
 801b1cc:	6878      	ldr	r0, [r7, #4]
 801b1ce:	f7ff ffe7 	bl	801b1a0 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 801b1d2:	2134      	movs	r1, #52	; 0x34
 801b1d4:	6878      	ldr	r0, [r7, #4]
 801b1d6:	f7f0 fab9 	bl	800b74c <_ZdlPvj>
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	4618      	mov	r0, r3
 801b1de:	3708      	adds	r7, #8
 801b1e0:	46bd      	mov	sp, r7
 801b1e2:	bd80      	pop	{r7, pc}

0801b1e4 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 801b1e4:	b580      	push	{r7, lr}
 801b1e6:	b082      	sub	sp, #8
 801b1e8:	af00      	add	r7, sp, #0
 801b1ea:	6078      	str	r0, [r7, #4]
 801b1ec:	4a05      	ldr	r2, [pc, #20]	; (801b204 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	601a      	str	r2, [r3, #0]
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	4618      	mov	r0, r3
 801b1f6:	f7f0 fedb 	bl	800bfb0 <_ZN11MockFailureD1Ev>
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	4618      	mov	r0, r3
 801b1fe:	3708      	adds	r7, #8
 801b200:	46bd      	mov	sp, r7
 801b202:	bd80      	pop	{r7, pc}
 801b204:	0802a7a0 	.word	0x0802a7a0

0801b208 <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 801b208:	b580      	push	{r7, lr}
 801b20a:	b082      	sub	sp, #8
 801b20c:	af00      	add	r7, sp, #0
 801b20e:	6078      	str	r0, [r7, #4]
 801b210:	6878      	ldr	r0, [r7, #4]
 801b212:	f7ff ffe7 	bl	801b1e4 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 801b216:	2134      	movs	r1, #52	; 0x34
 801b218:	6878      	ldr	r0, [r7, #4]
 801b21a:	f7f0 fa97 	bl	800b74c <_ZdlPvj>
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	4618      	mov	r0, r3
 801b222:	3708      	adds	r7, #8
 801b224:	46bd      	mov	sp, r7
 801b226:	bd80      	pop	{r7, pc}

0801b228 <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 801b228:	b580      	push	{r7, lr}
 801b22a:	b082      	sub	sp, #8
 801b22c:	af00      	add	r7, sp, #0
 801b22e:	6078      	str	r0, [r7, #4]
 801b230:	4a05      	ldr	r2, [pc, #20]	; (801b248 <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	601a      	str	r2, [r3, #0]
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	4618      	mov	r0, r3
 801b23a:	f7f0 feb9 	bl	800bfb0 <_ZN11MockFailureD1Ev>
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	4618      	mov	r0, r3
 801b242:	3708      	adds	r7, #8
 801b244:	46bd      	mov	sp, r7
 801b246:	bd80      	pop	{r7, pc}
 801b248:	0802a774 	.word	0x0802a774

0801b24c <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 801b24c:	b580      	push	{r7, lr}
 801b24e:	b082      	sub	sp, #8
 801b250:	af00      	add	r7, sp, #0
 801b252:	6078      	str	r0, [r7, #4]
 801b254:	6878      	ldr	r0, [r7, #4]
 801b256:	f7ff ffe7 	bl	801b228 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 801b25a:	2134      	movs	r1, #52	; 0x34
 801b25c:	6878      	ldr	r0, [r7, #4]
 801b25e:	f7f0 fa75 	bl	800b74c <_ZdlPvj>
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	4618      	mov	r0, r3
 801b266:	3708      	adds	r7, #8
 801b268:	46bd      	mov	sp, r7
 801b26a:	bd80      	pop	{r7, pc}

0801b26c <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 801b26c:	b580      	push	{r7, lr}
 801b26e:	b082      	sub	sp, #8
 801b270:	af00      	add	r7, sp, #0
 801b272:	6078      	str	r0, [r7, #4]
 801b274:	4a05      	ldr	r2, [pc, #20]	; (801b28c <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	601a      	str	r2, [r3, #0]
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	4618      	mov	r0, r3
 801b27e:	f7f0 fe97 	bl	800bfb0 <_ZN11MockFailureD1Ev>
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	4618      	mov	r0, r3
 801b286:	3708      	adds	r7, #8
 801b288:	46bd      	mov	sp, r7
 801b28a:	bd80      	pop	{r7, pc}
 801b28c:	0802a748 	.word	0x0802a748

0801b290 <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 801b290:	b580      	push	{r7, lr}
 801b292:	b082      	sub	sp, #8
 801b294:	af00      	add	r7, sp, #0
 801b296:	6078      	str	r0, [r7, #4]
 801b298:	6878      	ldr	r0, [r7, #4]
 801b29a:	f7ff ffe7 	bl	801b26c <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801b29e:	2134      	movs	r1, #52	; 0x34
 801b2a0:	6878      	ldr	r0, [r7, #4]
 801b2a2:	f7f0 fa53 	bl	800b74c <_ZdlPvj>
 801b2a6:	687b      	ldr	r3, [r7, #4]
 801b2a8:	4618      	mov	r0, r3
 801b2aa:	3708      	adds	r7, #8
 801b2ac:	46bd      	mov	sp, r7
 801b2ae:	bd80      	pop	{r7, pc}

0801b2b0 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 801b2b0:	b580      	push	{r7, lr}
 801b2b2:	b082      	sub	sp, #8
 801b2b4:	af00      	add	r7, sp, #0
 801b2b6:	6078      	str	r0, [r7, #4]
 801b2b8:	4a05      	ldr	r2, [pc, #20]	; (801b2d0 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	601a      	str	r2, [r3, #0]
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	4618      	mov	r0, r3
 801b2c2:	f7f0 fe75 	bl	800bfb0 <_ZN11MockFailureD1Ev>
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	4618      	mov	r0, r3
 801b2ca:	3708      	adds	r7, #8
 801b2cc:	46bd      	mov	sp, r7
 801b2ce:	bd80      	pop	{r7, pc}
 801b2d0:	0802a6f0 	.word	0x0802a6f0

0801b2d4 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 801b2d4:	b580      	push	{r7, lr}
 801b2d6:	b082      	sub	sp, #8
 801b2d8:	af00      	add	r7, sp, #0
 801b2da:	6078      	str	r0, [r7, #4]
 801b2dc:	6878      	ldr	r0, [r7, #4]
 801b2de:	f7ff ffe7 	bl	801b2b0 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 801b2e2:	2134      	movs	r1, #52	; 0x34
 801b2e4:	6878      	ldr	r0, [r7, #4]
 801b2e6:	f7f0 fa31 	bl	800b74c <_ZdlPvj>
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	4618      	mov	r0, r3
 801b2ee:	3708      	adds	r7, #8
 801b2f0:	46bd      	mov	sp, r7
 801b2f2:	bd80      	pop	{r7, pc}

0801b2f4 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 801b2f4:	b580      	push	{r7, lr}
 801b2f6:	b082      	sub	sp, #8
 801b2f8:	af00      	add	r7, sp, #0
 801b2fa:	6078      	str	r0, [r7, #4]
 801b2fc:	4a05      	ldr	r2, [pc, #20]	; (801b314 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	601a      	str	r2, [r3, #0]
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	4618      	mov	r0, r3
 801b306:	f7f0 fe53 	bl	800bfb0 <_ZN11MockFailureD1Ev>
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	4618      	mov	r0, r3
 801b30e:	3708      	adds	r7, #8
 801b310:	46bd      	mov	sp, r7
 801b312:	bd80      	pop	{r7, pc}
 801b314:	0802a71c 	.word	0x0802a71c

0801b318 <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 801b318:	b580      	push	{r7, lr}
 801b31a:	b082      	sub	sp, #8
 801b31c:	af00      	add	r7, sp, #0
 801b31e:	6078      	str	r0, [r7, #4]
 801b320:	6878      	ldr	r0, [r7, #4]
 801b322:	f7ff ffe7 	bl	801b2f4 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 801b326:	2134      	movs	r1, #52	; 0x34
 801b328:	6878      	ldr	r0, [r7, #4]
 801b32a:	f7f0 fa0f 	bl	800b74c <_ZdlPvj>
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	4618      	mov	r0, r3
 801b332:	3708      	adds	r7, #8
 801b334:	46bd      	mov	sp, r7
 801b336:	bd80      	pop	{r7, pc}

0801b338 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 801b338:	b580      	push	{r7, lr}
 801b33a:	b082      	sub	sp, #8
 801b33c:	af00      	add	r7, sp, #0
 801b33e:	6078      	str	r0, [r7, #4]
 801b340:	4a05      	ldr	r2, [pc, #20]	; (801b358 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	601a      	str	r2, [r3, #0]
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	4618      	mov	r0, r3
 801b34a:	f7f0 fe31 	bl	800bfb0 <_ZN11MockFailureD1Ev>
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	4618      	mov	r0, r3
 801b352:	3708      	adds	r7, #8
 801b354:	46bd      	mov	sp, r7
 801b356:	bd80      	pop	{r7, pc}
 801b358:	0802a66c 	.word	0x0802a66c

0801b35c <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 801b35c:	b580      	push	{r7, lr}
 801b35e:	b082      	sub	sp, #8
 801b360:	af00      	add	r7, sp, #0
 801b362:	6078      	str	r0, [r7, #4]
 801b364:	6878      	ldr	r0, [r7, #4]
 801b366:	f7ff ffe7 	bl	801b338 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801b36a:	2134      	movs	r1, #52	; 0x34
 801b36c:	6878      	ldr	r0, [r7, #4]
 801b36e:	f7f0 f9ed 	bl	800b74c <_ZdlPvj>
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	4618      	mov	r0, r3
 801b376:	3708      	adds	r7, #8
 801b378:	46bd      	mov	sp, r7
 801b37a:	bd80      	pop	{r7, pc}

0801b37c <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 801b37c:	b580      	push	{r7, lr}
 801b37e:	b082      	sub	sp, #8
 801b380:	af00      	add	r7, sp, #0
 801b382:	6078      	str	r0, [r7, #4]
 801b384:	4a05      	ldr	r2, [pc, #20]	; (801b39c <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	601a      	str	r2, [r3, #0]
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	4618      	mov	r0, r3
 801b38e:	f7f0 fe0f 	bl	800bfb0 <_ZN11MockFailureD1Ev>
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	4618      	mov	r0, r3
 801b396:	3708      	adds	r7, #8
 801b398:	46bd      	mov	sp, r7
 801b39a:	bd80      	pop	{r7, pc}
 801b39c:	0802a698 	.word	0x0802a698

0801b3a0 <_ZN27MockUnexpectedObjectFailureD0Ev>:
 801b3a0:	b580      	push	{r7, lr}
 801b3a2:	b082      	sub	sp, #8
 801b3a4:	af00      	add	r7, sp, #0
 801b3a6:	6078      	str	r0, [r7, #4]
 801b3a8:	6878      	ldr	r0, [r7, #4]
 801b3aa:	f7ff ffe7 	bl	801b37c <_ZN27MockUnexpectedObjectFailureD1Ev>
 801b3ae:	2134      	movs	r1, #52	; 0x34
 801b3b0:	6878      	ldr	r0, [r7, #4]
 801b3b2:	f7f0 f9cb 	bl	800b74c <_ZdlPvj>
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	4618      	mov	r0, r3
 801b3ba:	3708      	adds	r7, #8
 801b3bc:	46bd      	mov	sp, r7
 801b3be:	bd80      	pop	{r7, pc}

0801b3c0 <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 801b3c0:	b580      	push	{r7, lr}
 801b3c2:	b082      	sub	sp, #8
 801b3c4:	af00      	add	r7, sp, #0
 801b3c6:	6078      	str	r0, [r7, #4]
 801b3c8:	6039      	str	r1, [r7, #0]
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	681b      	ldr	r3, [r3, #0]
 801b3ce:	3310      	adds	r3, #16
 801b3d0:	681b      	ldr	r3, [r3, #0]
 801b3d2:	683a      	ldr	r2, [r7, #0]
 801b3d4:	6839      	ldr	r1, [r7, #0]
 801b3d6:	6878      	ldr	r0, [r7, #4]
 801b3d8:	4798      	blx	r3
 801b3da:	4603      	mov	r3, r0
 801b3dc:	4618      	mov	r0, r3
 801b3de:	3708      	adds	r7, #8
 801b3e0:	46bd      	mov	sp, r7
 801b3e2:	bd80      	pop	{r7, pc}

0801b3e4 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 801b3e4:	b480      	push	{r7}
 801b3e6:	b083      	sub	sp, #12
 801b3e8:	af00      	add	r7, sp, #0
 801b3ea:	6078      	str	r0, [r7, #4]
 801b3ec:	6039      	str	r1, [r7, #0]
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	4618      	mov	r0, r3
 801b3f2:	370c      	adds	r7, #12
 801b3f4:	46bd      	mov	sp, r7
 801b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3fa:	4770      	bx	lr

0801b3fc <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 801b3fc:	b480      	push	{r7}
 801b3fe:	b083      	sub	sp, #12
 801b400:	af00      	add	r7, sp, #0
 801b402:	6078      	str	r0, [r7, #4]
 801b404:	6039      	str	r1, [r7, #0]
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	4618      	mov	r0, r3
 801b40a:	370c      	adds	r7, #12
 801b40c:	46bd      	mov	sp, r7
 801b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b412:	4770      	bx	lr

0801b414 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 801b414:	b480      	push	{r7}
 801b416:	b085      	sub	sp, #20
 801b418:	af00      	add	r7, sp, #0
 801b41a:	60f8      	str	r0, [r7, #12]
 801b41c:	60b9      	str	r1, [r7, #8]
 801b41e:	607a      	str	r2, [r7, #4]
 801b420:	68fb      	ldr	r3, [r7, #12]
 801b422:	4618      	mov	r0, r3
 801b424:	3714      	adds	r7, #20
 801b426:	46bd      	mov	sp, r7
 801b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b42c:	4770      	bx	lr

0801b42e <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 801b42e:	b480      	push	{r7}
 801b430:	b085      	sub	sp, #20
 801b432:	af00      	add	r7, sp, #0
 801b434:	60f8      	str	r0, [r7, #12]
 801b436:	60b9      	str	r1, [r7, #8]
 801b438:	4613      	mov	r3, r2
 801b43a:	71fb      	strb	r3, [r7, #7]
 801b43c:	68fb      	ldr	r3, [r7, #12]
 801b43e:	4618      	mov	r0, r3
 801b440:	3714      	adds	r7, #20
 801b442:	46bd      	mov	sp, r7
 801b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b448:	4770      	bx	lr

0801b44a <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801b44a:	b480      	push	{r7}
 801b44c:	b085      	sub	sp, #20
 801b44e:	af00      	add	r7, sp, #0
 801b450:	60f8      	str	r0, [r7, #12]
 801b452:	60b9      	str	r1, [r7, #8]
 801b454:	607a      	str	r2, [r7, #4]
 801b456:	68fb      	ldr	r3, [r7, #12]
 801b458:	4618      	mov	r0, r3
 801b45a:	3714      	adds	r7, #20
 801b45c:	46bd      	mov	sp, r7
 801b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b462:	4770      	bx	lr

0801b464 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 801b464:	b480      	push	{r7}
 801b466:	b085      	sub	sp, #20
 801b468:	af00      	add	r7, sp, #0
 801b46a:	60f8      	str	r0, [r7, #12]
 801b46c:	60b9      	str	r1, [r7, #8]
 801b46e:	607a      	str	r2, [r7, #4]
 801b470:	68fb      	ldr	r3, [r7, #12]
 801b472:	4618      	mov	r0, r3
 801b474:	3714      	adds	r7, #20
 801b476:	46bd      	mov	sp, r7
 801b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b47c:	4770      	bx	lr

0801b47e <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 801b47e:	b480      	push	{r7}
 801b480:	b085      	sub	sp, #20
 801b482:	af00      	add	r7, sp, #0
 801b484:	60f8      	str	r0, [r7, #12]
 801b486:	60b9      	str	r1, [r7, #8]
 801b488:	607a      	str	r2, [r7, #4]
 801b48a:	68fb      	ldr	r3, [r7, #12]
 801b48c:	4618      	mov	r0, r3
 801b48e:	3714      	adds	r7, #20
 801b490:	46bd      	mov	sp, r7
 801b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b496:	4770      	bx	lr

0801b498 <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 801b498:	b480      	push	{r7}
 801b49a:	b085      	sub	sp, #20
 801b49c:	af00      	add	r7, sp, #0
 801b49e:	60f8      	str	r0, [r7, #12]
 801b4a0:	60b9      	str	r1, [r7, #8]
 801b4a2:	607a      	str	r2, [r7, #4]
 801b4a4:	68fb      	ldr	r3, [r7, #12]
 801b4a6:	4618      	mov	r0, r3
 801b4a8:	3714      	adds	r7, #20
 801b4aa:	46bd      	mov	sp, r7
 801b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4b0:	4770      	bx	lr

0801b4b2 <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 801b4b2:	b480      	push	{r7}
 801b4b4:	b085      	sub	sp, #20
 801b4b6:	af00      	add	r7, sp, #0
 801b4b8:	60f8      	str	r0, [r7, #12]
 801b4ba:	60b9      	str	r1, [r7, #8]
 801b4bc:	4639      	mov	r1, r7
 801b4be:	e881 000c 	stmia.w	r1, {r2, r3}
 801b4c2:	68fb      	ldr	r3, [r7, #12]
 801b4c4:	4618      	mov	r0, r3
 801b4c6:	3714      	adds	r7, #20
 801b4c8:	46bd      	mov	sp, r7
 801b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ce:	4770      	bx	lr

0801b4d0 <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 801b4d0:	b480      	push	{r7}
 801b4d2:	b085      	sub	sp, #20
 801b4d4:	af00      	add	r7, sp, #0
 801b4d6:	60f8      	str	r0, [r7, #12]
 801b4d8:	60b9      	str	r1, [r7, #8]
 801b4da:	4639      	mov	r1, r7
 801b4dc:	e881 000c 	stmia.w	r1, {r2, r3}
 801b4e0:	68fb      	ldr	r3, [r7, #12]
 801b4e2:	4618      	mov	r0, r3
 801b4e4:	3714      	adds	r7, #20
 801b4e6:	46bd      	mov	sp, r7
 801b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ec:	4770      	bx	lr

0801b4ee <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 801b4ee:	b480      	push	{r7}
 801b4f0:	b085      	sub	sp, #20
 801b4f2:	af00      	add	r7, sp, #0
 801b4f4:	60f8      	str	r0, [r7, #12]
 801b4f6:	60b9      	str	r1, [r7, #8]
 801b4f8:	ed87 0b00 	vstr	d0, [r7]
 801b4fc:	68fb      	ldr	r3, [r7, #12]
 801b4fe:	4618      	mov	r0, r3
 801b500:	3714      	adds	r7, #20
 801b502:	46bd      	mov	sp, r7
 801b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b508:	4770      	bx	lr

0801b50a <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 801b50a:	b480      	push	{r7}
 801b50c:	b087      	sub	sp, #28
 801b50e:	af00      	add	r7, sp, #0
 801b510:	6178      	str	r0, [r7, #20]
 801b512:	6139      	str	r1, [r7, #16]
 801b514:	ed87 0b02 	vstr	d0, [r7, #8]
 801b518:	ed87 1b00 	vstr	d1, [r7]
 801b51c:	697b      	ldr	r3, [r7, #20]
 801b51e:	4618      	mov	r0, r3
 801b520:	371c      	adds	r7, #28
 801b522:	46bd      	mov	sp, r7
 801b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b528:	4770      	bx	lr

0801b52a <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 801b52a:	b480      	push	{r7}
 801b52c:	b085      	sub	sp, #20
 801b52e:	af00      	add	r7, sp, #0
 801b530:	60f8      	str	r0, [r7, #12]
 801b532:	60b9      	str	r1, [r7, #8]
 801b534:	607a      	str	r2, [r7, #4]
 801b536:	68fb      	ldr	r3, [r7, #12]
 801b538:	4618      	mov	r0, r3
 801b53a:	3714      	adds	r7, #20
 801b53c:	46bd      	mov	sp, r7
 801b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b542:	4770      	bx	lr

0801b544 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 801b544:	b480      	push	{r7}
 801b546:	b085      	sub	sp, #20
 801b548:	af00      	add	r7, sp, #0
 801b54a:	60f8      	str	r0, [r7, #12]
 801b54c:	60b9      	str	r1, [r7, #8]
 801b54e:	607a      	str	r2, [r7, #4]
 801b550:	68fb      	ldr	r3, [r7, #12]
 801b552:	4618      	mov	r0, r3
 801b554:	3714      	adds	r7, #20
 801b556:	46bd      	mov	sp, r7
 801b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b55c:	4770      	bx	lr

0801b55e <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 801b55e:	b480      	push	{r7}
 801b560:	b085      	sub	sp, #20
 801b562:	af00      	add	r7, sp, #0
 801b564:	60f8      	str	r0, [r7, #12]
 801b566:	60b9      	str	r1, [r7, #8]
 801b568:	607a      	str	r2, [r7, #4]
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	4618      	mov	r0, r3
 801b56e:	3714      	adds	r7, #20
 801b570:	46bd      	mov	sp, r7
 801b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b576:	4770      	bx	lr

0801b578 <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 801b578:	b480      	push	{r7}
 801b57a:	b085      	sub	sp, #20
 801b57c:	af00      	add	r7, sp, #0
 801b57e:	60f8      	str	r0, [r7, #12]
 801b580:	60b9      	str	r1, [r7, #8]
 801b582:	607a      	str	r2, [r7, #4]
 801b584:	68fb      	ldr	r3, [r7, #12]
 801b586:	4618      	mov	r0, r3
 801b588:	3714      	adds	r7, #20
 801b58a:	46bd      	mov	sp, r7
 801b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b590:	4770      	bx	lr

0801b592 <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 801b592:	b480      	push	{r7}
 801b594:	b085      	sub	sp, #20
 801b596:	af00      	add	r7, sp, #0
 801b598:	60f8      	str	r0, [r7, #12]
 801b59a:	60b9      	str	r1, [r7, #8]
 801b59c:	607a      	str	r2, [r7, #4]
 801b59e:	603b      	str	r3, [r7, #0]
 801b5a0:	68fb      	ldr	r3, [r7, #12]
 801b5a2:	4618      	mov	r0, r3
 801b5a4:	3714      	adds	r7, #20
 801b5a6:	46bd      	mov	sp, r7
 801b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ac:	4770      	bx	lr

0801b5ae <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801b5ae:	b480      	push	{r7}
 801b5b0:	b085      	sub	sp, #20
 801b5b2:	af00      	add	r7, sp, #0
 801b5b4:	60f8      	str	r0, [r7, #12]
 801b5b6:	60b9      	str	r1, [r7, #8]
 801b5b8:	607a      	str	r2, [r7, #4]
 801b5ba:	603b      	str	r3, [r7, #0]
 801b5bc:	68fb      	ldr	r3, [r7, #12]
 801b5be:	4618      	mov	r0, r3
 801b5c0:	3714      	adds	r7, #20
 801b5c2:	46bd      	mov	sp, r7
 801b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5c8:	4770      	bx	lr

0801b5ca <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 801b5ca:	b480      	push	{r7}
 801b5cc:	b085      	sub	sp, #20
 801b5ce:	af00      	add	r7, sp, #0
 801b5d0:	60f8      	str	r0, [r7, #12]
 801b5d2:	60b9      	str	r1, [r7, #8]
 801b5d4:	607a      	str	r2, [r7, #4]
 801b5d6:	603b      	str	r3, [r7, #0]
 801b5d8:	68fb      	ldr	r3, [r7, #12]
 801b5da:	4618      	mov	r0, r3
 801b5dc:	3714      	adds	r7, #20
 801b5de:	46bd      	mov	sp, r7
 801b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5e4:	4770      	bx	lr

0801b5e6 <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801b5e6:	b480      	push	{r7}
 801b5e8:	b085      	sub	sp, #20
 801b5ea:	af00      	add	r7, sp, #0
 801b5ec:	60f8      	str	r0, [r7, #12]
 801b5ee:	60b9      	str	r1, [r7, #8]
 801b5f0:	607a      	str	r2, [r7, #4]
 801b5f2:	603b      	str	r3, [r7, #0]
 801b5f4:	68fb      	ldr	r3, [r7, #12]
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	3714      	adds	r7, #20
 801b5fa:	46bd      	mov	sp, r7
 801b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b600:	4770      	bx	lr

0801b602 <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 801b602:	b480      	push	{r7}
 801b604:	b083      	sub	sp, #12
 801b606:	af00      	add	r7, sp, #0
 801b608:	6078      	str	r0, [r7, #4]
 801b60a:	6039      	str	r1, [r7, #0]
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	4618      	mov	r0, r3
 801b610:	370c      	adds	r7, #12
 801b612:	46bd      	mov	sp, r7
 801b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b618:	4770      	bx	lr

0801b61a <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 801b61a:	b480      	push	{r7}
 801b61c:	b083      	sub	sp, #12
 801b61e:	af00      	add	r7, sp, #0
 801b620:	6078      	str	r0, [r7, #4]
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	4618      	mov	r0, r3
 801b626:	370c      	adds	r7, #12
 801b628:	46bd      	mov	sp, r7
 801b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b62e:	4770      	bx	lr

0801b630 <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 801b630:	b480      	push	{r7}
 801b632:	b083      	sub	sp, #12
 801b634:	af00      	add	r7, sp, #0
 801b636:	6078      	str	r0, [r7, #4]
 801b638:	460b      	mov	r3, r1
 801b63a:	70fb      	strb	r3, [r7, #3]
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	4618      	mov	r0, r3
 801b640:	370c      	adds	r7, #12
 801b642:	46bd      	mov	sp, r7
 801b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b648:	4770      	bx	lr

0801b64a <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 801b64a:	b480      	push	{r7}
 801b64c:	b083      	sub	sp, #12
 801b64e:	af00      	add	r7, sp, #0
 801b650:	6078      	str	r0, [r7, #4]
 801b652:	6039      	str	r1, [r7, #0]
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	4618      	mov	r0, r3
 801b658:	370c      	adds	r7, #12
 801b65a:	46bd      	mov	sp, r7
 801b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b660:	4770      	bx	lr

0801b662 <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 801b662:	b480      	push	{r7}
 801b664:	b083      	sub	sp, #12
 801b666:	af00      	add	r7, sp, #0
 801b668:	6078      	str	r0, [r7, #4]
 801b66a:	6039      	str	r1, [r7, #0]
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	4618      	mov	r0, r3
 801b670:	370c      	adds	r7, #12
 801b672:	46bd      	mov	sp, r7
 801b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b678:	4770      	bx	lr

0801b67a <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 801b67a:	b480      	push	{r7}
 801b67c:	b083      	sub	sp, #12
 801b67e:	af00      	add	r7, sp, #0
 801b680:	6078      	str	r0, [r7, #4]
 801b682:	6039      	str	r1, [r7, #0]
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	4618      	mov	r0, r3
 801b688:	370c      	adds	r7, #12
 801b68a:	46bd      	mov	sp, r7
 801b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b690:	4770      	bx	lr

0801b692 <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 801b692:	b480      	push	{r7}
 801b694:	b083      	sub	sp, #12
 801b696:	af00      	add	r7, sp, #0
 801b698:	6078      	str	r0, [r7, #4]
 801b69a:	6039      	str	r1, [r7, #0]
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	4618      	mov	r0, r3
 801b6a0:	370c      	adds	r7, #12
 801b6a2:	46bd      	mov	sp, r7
 801b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6a8:	4770      	bx	lr

0801b6aa <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 801b6aa:	b480      	push	{r7}
 801b6ac:	b085      	sub	sp, #20
 801b6ae:	af00      	add	r7, sp, #0
 801b6b0:	60f8      	str	r0, [r7, #12]
 801b6b2:	1d3b      	adds	r3, r7, #4
 801b6b4:	e883 0006 	stmia.w	r3, {r1, r2}
 801b6b8:	68fb      	ldr	r3, [r7, #12]
 801b6ba:	4618      	mov	r0, r3
 801b6bc:	3714      	adds	r7, #20
 801b6be:	46bd      	mov	sp, r7
 801b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6c4:	4770      	bx	lr

0801b6c6 <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 801b6c6:	b480      	push	{r7}
 801b6c8:	b085      	sub	sp, #20
 801b6ca:	af00      	add	r7, sp, #0
 801b6cc:	60f8      	str	r0, [r7, #12]
 801b6ce:	1d3b      	adds	r3, r7, #4
 801b6d0:	e883 0006 	stmia.w	r3, {r1, r2}
 801b6d4:	68fb      	ldr	r3, [r7, #12]
 801b6d6:	4618      	mov	r0, r3
 801b6d8:	3714      	adds	r7, #20
 801b6da:	46bd      	mov	sp, r7
 801b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6e0:	4770      	bx	lr

0801b6e2 <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 801b6e2:	b480      	push	{r7}
 801b6e4:	b085      	sub	sp, #20
 801b6e6:	af00      	add	r7, sp, #0
 801b6e8:	60f8      	str	r0, [r7, #12]
 801b6ea:	ed87 0b00 	vstr	d0, [r7]
 801b6ee:	68fb      	ldr	r3, [r7, #12]
 801b6f0:	4618      	mov	r0, r3
 801b6f2:	3714      	adds	r7, #20
 801b6f4:	46bd      	mov	sp, r7
 801b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6fa:	4770      	bx	lr

0801b6fc <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 801b6fc:	b480      	push	{r7}
 801b6fe:	b083      	sub	sp, #12
 801b700:	af00      	add	r7, sp, #0
 801b702:	6078      	str	r0, [r7, #4]
 801b704:	6039      	str	r1, [r7, #0]
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	4618      	mov	r0, r3
 801b70a:	370c      	adds	r7, #12
 801b70c:	46bd      	mov	sp, r7
 801b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b712:	4770      	bx	lr

0801b714 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 801b714:	b480      	push	{r7}
 801b716:	b083      	sub	sp, #12
 801b718:	af00      	add	r7, sp, #0
 801b71a:	6078      	str	r0, [r7, #4]
 801b71c:	6039      	str	r1, [r7, #0]
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	4618      	mov	r0, r3
 801b722:	370c      	adds	r7, #12
 801b724:	46bd      	mov	sp, r7
 801b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b72a:	4770      	bx	lr

0801b72c <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 801b72c:	b480      	push	{r7}
 801b72e:	b083      	sub	sp, #12
 801b730:	af00      	add	r7, sp, #0
 801b732:	6078      	str	r0, [r7, #4]
 801b734:	6039      	str	r1, [r7, #0]
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	4618      	mov	r0, r3
 801b73a:	370c      	adds	r7, #12
 801b73c:	46bd      	mov	sp, r7
 801b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b742:	4770      	bx	lr

0801b744 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 801b744:	b480      	push	{r7}
 801b746:	b083      	sub	sp, #12
 801b748:	af00      	add	r7, sp, #0
 801b74a:	6078      	str	r0, [r7, #4]
 801b74c:	6039      	str	r1, [r7, #0]
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	4618      	mov	r0, r3
 801b752:	370c      	adds	r7, #12
 801b754:	46bd      	mov	sp, r7
 801b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b75a:	4770      	bx	lr

0801b75c <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 801b75c:	b480      	push	{r7}
 801b75e:	b083      	sub	sp, #12
 801b760:	af00      	add	r7, sp, #0
 801b762:	6078      	str	r0, [r7, #4]
 801b764:	6039      	str	r1, [r7, #0]
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	4618      	mov	r0, r3
 801b76a:	370c      	adds	r7, #12
 801b76c:	46bd      	mov	sp, r7
 801b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b772:	4770      	bx	lr

0801b774 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 801b774:	b480      	push	{r7}
 801b776:	b083      	sub	sp, #12
 801b778:	af00      	add	r7, sp, #0
 801b77a:	6078      	str	r0, [r7, #4]
 801b77c:	4a04      	ldr	r2, [pc, #16]	; (801b790 <_ZN16MockExpectedCallC1Ev+0x1c>)
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	601a      	str	r2, [r3, #0]
{
}
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	4618      	mov	r0, r3
 801b786:	370c      	adds	r7, #12
 801b788:	46bd      	mov	sp, r7
 801b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b78e:	4770      	bx	lr
 801b790:	0802ad70 	.word	0x0802ad70

0801b794 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 801b794:	b480      	push	{r7}
 801b796:	b083      	sub	sp, #12
 801b798:	af00      	add	r7, sp, #0
 801b79a:	6078      	str	r0, [r7, #4]
 801b79c:	4a04      	ldr	r2, [pc, #16]	; (801b7b0 <_ZN16MockExpectedCallD1Ev+0x1c>)
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	601a      	str	r2, [r3, #0]
{
}
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	4618      	mov	r0, r3
 801b7a6:	370c      	adds	r7, #12
 801b7a8:	46bd      	mov	sp, r7
 801b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7ae:	4770      	bx	lr
 801b7b0:	0802ad70 	.word	0x0802ad70

0801b7b4 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 801b7b4:	b580      	push	{r7, lr}
 801b7b6:	b082      	sub	sp, #8
 801b7b8:	af00      	add	r7, sp, #0
 801b7ba:	6078      	str	r0, [r7, #4]
 801b7bc:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 801b7be:	683b      	ldr	r3, [r7, #0]
 801b7c0:	681b      	ldr	r3, [r3, #0]
 801b7c2:	3358      	adds	r3, #88	; 0x58
 801b7c4:	681b      	ldr	r3, [r3, #0]
 801b7c6:	687a      	ldr	r2, [r7, #4]
 801b7c8:	6839      	ldr	r1, [r7, #0]
 801b7ca:	4610      	mov	r0, r2
 801b7cc:	4798      	blx	r3
}
 801b7ce:	6878      	ldr	r0, [r7, #4]
 801b7d0:	3708      	adds	r7, #8
 801b7d2:	46bd      	mov	sp, r7
 801b7d4:	bd80      	pop	{r7, pc}

0801b7d6 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 801b7d6:	b580      	push	{r7, lr}
 801b7d8:	b082      	sub	sp, #8
 801b7da:	af00      	add	r7, sp, #0
 801b7dc:	6078      	str	r0, [r7, #4]
 801b7de:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	3304      	adds	r3, #4
 801b7e4:	6839      	ldr	r1, [r7, #0]
 801b7e6:	4618      	mov	r0, r3
 801b7e8:	f7f2 fbcb 	bl	800df82 <_ZN12SimpleStringaSERKS_>
}
 801b7ec:	bf00      	nop
 801b7ee:	3708      	adds	r7, #8
 801b7f0:	46bd      	mov	sp, r7
 801b7f2:	bd80      	pop	{r7, pc}

0801b7f4 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 801b7f4:	b580      	push	{r7, lr}
 801b7f6:	b082      	sub	sp, #8
 801b7f8:	af00      	add	r7, sp, #0
 801b7fa:	6078      	str	r0, [r7, #4]
 801b7fc:	6039      	str	r1, [r7, #0]
    return functionName_;
 801b7fe:	683b      	ldr	r3, [r7, #0]
 801b800:	3304      	adds	r3, #4
 801b802:	4619      	mov	r1, r3
 801b804:	6878      	ldr	r0, [r7, #4]
 801b806:	f7f2 fba4 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
}
 801b80a:	6878      	ldr	r0, [r7, #4]
 801b80c:	3708      	adds	r7, #8
 801b80e:	46bd      	mov	sp, r7
 801b810:	bd80      	pop	{r7, pc}
	...

0801b814 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 801b814:	b590      	push	{r4, r7, lr}
 801b816:	b085      	sub	sp, #20
 801b818:	af00      	add	r7, sp, #0
 801b81a:	6078      	str	r0, [r7, #4]
 801b81c:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	4618      	mov	r0, r3
 801b822:	f7ff ffa7 	bl	801b774 <_ZN16MockExpectedCallC1Ev>
 801b826:	4a2c      	ldr	r2, [pc, #176]	; (801b8d8 <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	601a      	str	r2, [r3, #0]
 801b82c:	687b      	ldr	r3, [r7, #4]
 801b82e:	3304      	adds	r3, #4
 801b830:	492a      	ldr	r1, [pc, #168]	; (801b8dc <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801b832:	4618      	mov	r0, r3
 801b834:	f7f2 fb39 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	2200      	movs	r2, #0
 801b83c:	731a      	strb	r2, [r3, #12]
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	2200      	movs	r2, #0
 801b842:	735a      	strb	r2, [r3, #13]
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	2200      	movs	r2, #0
 801b848:	611a      	str	r2, [r3, #16]
 801b84a:	687b      	ldr	r3, [r7, #4]
 801b84c:	2200      	movs	r2, #0
 801b84e:	615a      	str	r2, [r3, #20]
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	2200      	movs	r2, #0
 801b854:	761a      	strb	r2, [r3, #24]
 801b856:	687b      	ldr	r3, [r7, #4]
 801b858:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801b85c:	f107 0308 	add.w	r3, r7, #8
 801b860:	491e      	ldr	r1, [pc, #120]	; (801b8dc <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801b862:	4618      	mov	r0, r3
 801b864:	f7f2 fb21 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801b868:	f107 0308 	add.w	r3, r7, #8
 801b86c:	4619      	mov	r1, r3
 801b86e:	4620      	mov	r0, r4
 801b870:	f003 f840 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
 801b874:	f107 0308 	add.w	r3, r7, #8
 801b878:	4618      	mov	r0, r3
 801b87a:	f7f2 fece 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	2200      	movs	r2, #0
 801b882:	661a      	str	r2, [r3, #96]	; 0x60
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	2200      	movs	r2, #0
 801b888:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	2201      	movs	r2, #1
 801b890:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	2200      	movs	r2, #0
 801b898:	669a      	str	r2, [r3, #104]	; 0x68
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	683a      	ldr	r2, [r7, #0]
 801b89e:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 801b8a0:	2246      	movs	r2, #70	; 0x46
 801b8a2:	490f      	ldr	r1, [pc, #60]	; (801b8e0 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801b8a4:	2004      	movs	r0, #4
 801b8a6:	f7ef ff3d 	bl	800b724 <_ZnwjPKci>
 801b8aa:	4604      	mov	r4, r0
 801b8ac:	4620      	mov	r0, r4
 801b8ae:	f004 ff34 	bl	802071a <_ZN18MockNamedValueListC1Ev>
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 801b8b6:	2247      	movs	r2, #71	; 0x47
 801b8b8:	4909      	ldr	r1, [pc, #36]	; (801b8e0 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801b8ba:	2004      	movs	r0, #4
 801b8bc:	f7ef ff32 	bl	800b724 <_ZnwjPKci>
 801b8c0:	4604      	mov	r4, r0
 801b8c2:	4620      	mov	r0, r4
 801b8c4:	f004 ff29 	bl	802071a <_ZN18MockNamedValueListC1Ev>
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	621c      	str	r4, [r3, #32]
}
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	4618      	mov	r0, r3
 801b8d0:	3714      	adds	r7, #20
 801b8d2:	46bd      	mov	sp, r7
 801b8d4:	bd90      	pop	{r4, r7, pc}
 801b8d6:	bf00      	nop
 801b8d8:	0802abb4 	.word	0x0802abb4
 801b8dc:	08027908 	.word	0x08027908
 801b8e0:	0802790c 	.word	0x0802790c

0801b8e4 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801b8e4:	b580      	push	{r7, lr}
 801b8e6:	b082      	sub	sp, #8
 801b8e8:	af00      	add	r7, sp, #0
 801b8ea:	6078      	str	r0, [r7, #4]
 801b8ec:	4a17      	ldr	r2, [pc, #92]	; (801b94c <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	69db      	ldr	r3, [r3, #28]
 801b8f6:	4618      	mov	r0, r3
 801b8f8:	f004 ff1d 	bl	8020736 <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	69db      	ldr	r3, [r3, #28]
 801b900:	2b00      	cmp	r3, #0
 801b902:	d003      	beq.n	801b90c <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 801b904:	2104      	movs	r1, #4
 801b906:	4618      	mov	r0, r3
 801b908:	f7ef ff20 	bl	800b74c <_ZdlPvj>
    outputParameters_->clear();
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	6a1b      	ldr	r3, [r3, #32]
 801b910:	4618      	mov	r0, r3
 801b912:	f004 ff10 	bl	8020736 <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 801b916:	687b      	ldr	r3, [r7, #4]
 801b918:	6a1b      	ldr	r3, [r3, #32]
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	d003      	beq.n	801b926 <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 801b91e:	2104      	movs	r1, #4
 801b920:	4618      	mov	r0, r3
 801b922:	f7ef ff13 	bl	800b74c <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	3328      	adds	r3, #40	; 0x28
 801b92a:	4618      	mov	r0, r3
 801b92c:	f003 f80c 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 801b930:	687b      	ldr	r3, [r7, #4]
 801b932:	3304      	adds	r3, #4
 801b934:	4618      	mov	r0, r3
 801b936:	f7f2 fe70 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	4618      	mov	r0, r3
 801b93e:	f7ff ff29 	bl	801b794 <_ZN16MockExpectedCallD1Ev>
}
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	4618      	mov	r0, r3
 801b946:	3708      	adds	r7, #8
 801b948:	46bd      	mov	sp, r7
 801b94a:	bd80      	pop	{r7, pc}
 801b94c:	0802abb4 	.word	0x0802abb4

0801b950 <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801b950:	b580      	push	{r7, lr}
 801b952:	b082      	sub	sp, #8
 801b954:	af00      	add	r7, sp, #0
 801b956:	6078      	str	r0, [r7, #4]
}
 801b958:	6878      	ldr	r0, [r7, #4]
 801b95a:	f7ff ffc3 	bl	801b8e4 <_ZN23MockCheckedExpectedCallD1Ev>
 801b95e:	2170      	movs	r1, #112	; 0x70
 801b960:	6878      	ldr	r0, [r7, #4]
 801b962:	f7ef fef3 	bl	800b74c <_ZdlPvj>
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	4618      	mov	r0, r3
 801b96a:	3708      	adds	r7, #8
 801b96c:	46bd      	mov	sp, r7
 801b96e:	bd80      	pop	{r7, pc}

0801b970 <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 801b970:	b580      	push	{r7, lr}
 801b972:	b082      	sub	sp, #8
 801b974:	af00      	add	r7, sp, #0
 801b976:	6078      	str	r0, [r7, #4]
 801b978:	6039      	str	r1, [r7, #0]
    setName(name);
 801b97a:	6839      	ldr	r1, [r7, #0]
 801b97c:	6878      	ldr	r0, [r7, #4]
 801b97e:	f7ff ff2a 	bl	801b7d6 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 801b982:	687b      	ldr	r3, [r7, #4]
}
 801b984:	4618      	mov	r0, r3
 801b986:	3708      	adds	r7, #8
 801b988:	46bd      	mov	sp, r7
 801b98a:	bd80      	pop	{r7, pc}

0801b98c <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 801b98c:	b590      	push	{r4, r7, lr}
 801b98e:	b087      	sub	sp, #28
 801b990:	af00      	add	r7, sp, #0
 801b992:	60f8      	str	r0, [r7, #12]
 801b994:	60b9      	str	r1, [r7, #8]
 801b996:	4613      	mov	r3, r2
 801b998:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b99a:	225a      	movs	r2, #90	; 0x5a
 801b99c:	490e      	ldr	r1, [pc, #56]	; (801b9d8 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 801b99e:	2038      	movs	r0, #56	; 0x38
 801b9a0:	f7ef fec0 	bl	800b724 <_ZnwjPKci>
 801b9a4:	4604      	mov	r4, r0
 801b9a6:	68b9      	ldr	r1, [r7, #8]
 801b9a8:	4620      	mov	r0, r4
 801b9aa:	f001 f851 	bl	801ca50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b9ae:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801b9b0:	68fb      	ldr	r3, [r7, #12]
 801b9b2:	69db      	ldr	r3, [r3, #28]
 801b9b4:	6979      	ldr	r1, [r7, #20]
 801b9b6:	4618      	mov	r0, r3
 801b9b8:	f004 fee0 	bl	802077c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801b9bc:	697b      	ldr	r3, [r7, #20]
 801b9be:	681b      	ldr	r3, [r3, #0]
 801b9c0:	3308      	adds	r3, #8
 801b9c2:	681b      	ldr	r3, [r3, #0]
 801b9c4:	79fa      	ldrb	r2, [r7, #7]
 801b9c6:	4611      	mov	r1, r2
 801b9c8:	6978      	ldr	r0, [r7, #20]
 801b9ca:	4798      	blx	r3
    return *this;
 801b9cc:	68fb      	ldr	r3, [r7, #12]
}
 801b9ce:	4618      	mov	r0, r3
 801b9d0:	371c      	adds	r7, #28
 801b9d2:	46bd      	mov	sp, r7
 801b9d4:	bd90      	pop	{r4, r7, pc}
 801b9d6:	bf00      	nop
 801b9d8:	0802790c 	.word	0x0802790c

0801b9dc <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801b9dc:	b590      	push	{r4, r7, lr}
 801b9de:	b087      	sub	sp, #28
 801b9e0:	af00      	add	r7, sp, #0
 801b9e2:	60f8      	str	r0, [r7, #12]
 801b9e4:	60b9      	str	r1, [r7, #8]
 801b9e6:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b9e8:	2262      	movs	r2, #98	; 0x62
 801b9ea:	490e      	ldr	r1, [pc, #56]	; (801ba24 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 801b9ec:	2038      	movs	r0, #56	; 0x38
 801b9ee:	f7ef fe99 	bl	800b724 <_ZnwjPKci>
 801b9f2:	4604      	mov	r4, r0
 801b9f4:	68b9      	ldr	r1, [r7, #8]
 801b9f6:	4620      	mov	r0, r4
 801b9f8:	f001 f82a 	bl	801ca50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b9fc:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801b9fe:	68fb      	ldr	r3, [r7, #12]
 801ba00:	69db      	ldr	r3, [r3, #28]
 801ba02:	6979      	ldr	r1, [r7, #20]
 801ba04:	4618      	mov	r0, r3
 801ba06:	f004 feb9 	bl	802077c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ba0a:	697b      	ldr	r3, [r7, #20]
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	3310      	adds	r3, #16
 801ba10:	681b      	ldr	r3, [r3, #0]
 801ba12:	6879      	ldr	r1, [r7, #4]
 801ba14:	6978      	ldr	r0, [r7, #20]
 801ba16:	4798      	blx	r3
    return *this;
 801ba18:	68fb      	ldr	r3, [r7, #12]
}
 801ba1a:	4618      	mov	r0, r3
 801ba1c:	371c      	adds	r7, #28
 801ba1e:	46bd      	mov	sp, r7
 801ba20:	bd90      	pop	{r4, r7, pc}
 801ba22:	bf00      	nop
 801ba24:	0802790c 	.word	0x0802790c

0801ba28 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 801ba28:	b590      	push	{r4, r7, lr}
 801ba2a:	b087      	sub	sp, #28
 801ba2c:	af00      	add	r7, sp, #0
 801ba2e:	60f8      	str	r0, [r7, #12]
 801ba30:	60b9      	str	r1, [r7, #8]
 801ba32:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ba34:	226a      	movs	r2, #106	; 0x6a
 801ba36:	490e      	ldr	r1, [pc, #56]	; (801ba70 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 801ba38:	2038      	movs	r0, #56	; 0x38
 801ba3a:	f7ef fe73 	bl	800b724 <_ZnwjPKci>
 801ba3e:	4604      	mov	r4, r0
 801ba40:	68b9      	ldr	r1, [r7, #8]
 801ba42:	4620      	mov	r0, r4
 801ba44:	f001 f804 	bl	801ca50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ba48:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ba4a:	68fb      	ldr	r3, [r7, #12]
 801ba4c:	69db      	ldr	r3, [r3, #28]
 801ba4e:	6979      	ldr	r1, [r7, #20]
 801ba50:	4618      	mov	r0, r3
 801ba52:	f004 fe93 	bl	802077c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ba56:	697b      	ldr	r3, [r7, #20]
 801ba58:	681b      	ldr	r3, [r3, #0]
 801ba5a:	330c      	adds	r3, #12
 801ba5c:	681b      	ldr	r3, [r3, #0]
 801ba5e:	6879      	ldr	r1, [r7, #4]
 801ba60:	6978      	ldr	r0, [r7, #20]
 801ba62:	4798      	blx	r3
    return *this;
 801ba64:	68fb      	ldr	r3, [r7, #12]
}
 801ba66:	4618      	mov	r0, r3
 801ba68:	371c      	adds	r7, #28
 801ba6a:	46bd      	mov	sp, r7
 801ba6c:	bd90      	pop	{r4, r7, pc}
 801ba6e:	bf00      	nop
 801ba70:	0802790c 	.word	0x0802790c

0801ba74 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 801ba74:	b590      	push	{r4, r7, lr}
 801ba76:	b087      	sub	sp, #28
 801ba78:	af00      	add	r7, sp, #0
 801ba7a:	60f8      	str	r0, [r7, #12]
 801ba7c:	60b9      	str	r1, [r7, #8]
 801ba7e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ba80:	2272      	movs	r2, #114	; 0x72
 801ba82:	490e      	ldr	r1, [pc, #56]	; (801babc <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 801ba84:	2038      	movs	r0, #56	; 0x38
 801ba86:	f7ef fe4d 	bl	800b724 <_ZnwjPKci>
 801ba8a:	4604      	mov	r4, r0
 801ba8c:	68b9      	ldr	r1, [r7, #8]
 801ba8e:	4620      	mov	r0, r4
 801ba90:	f000 ffde 	bl	801ca50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ba94:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ba96:	68fb      	ldr	r3, [r7, #12]
 801ba98:	69db      	ldr	r3, [r3, #28]
 801ba9a:	6979      	ldr	r1, [r7, #20]
 801ba9c:	4618      	mov	r0, r3
 801ba9e:	f004 fe6d 	bl	802077c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801baa2:	697b      	ldr	r3, [r7, #20]
 801baa4:	681b      	ldr	r3, [r3, #0]
 801baa6:	3314      	adds	r3, #20
 801baa8:	681b      	ldr	r3, [r3, #0]
 801baaa:	6879      	ldr	r1, [r7, #4]
 801baac:	6978      	ldr	r0, [r7, #20]
 801baae:	4798      	blx	r3
    return *this;
 801bab0:	68fb      	ldr	r3, [r7, #12]
}
 801bab2:	4618      	mov	r0, r3
 801bab4:	371c      	adds	r7, #28
 801bab6:	46bd      	mov	sp, r7
 801bab8:	bd90      	pop	{r4, r7, pc}
 801baba:	bf00      	nop
 801babc:	0802790c 	.word	0x0802790c

0801bac0 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801bac0:	b590      	push	{r4, r7, lr}
 801bac2:	b087      	sub	sp, #28
 801bac4:	af00      	add	r7, sp, #0
 801bac6:	60f8      	str	r0, [r7, #12]
 801bac8:	60b9      	str	r1, [r7, #8]
 801baca:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801bacc:	227a      	movs	r2, #122	; 0x7a
 801bace:	490e      	ldr	r1, [pc, #56]	; (801bb08 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 801bad0:	2038      	movs	r0, #56	; 0x38
 801bad2:	f7ef fe27 	bl	800b724 <_ZnwjPKci>
 801bad6:	4604      	mov	r4, r0
 801bad8:	68b9      	ldr	r1, [r7, #8]
 801bada:	4620      	mov	r0, r4
 801badc:	f000 ffb8 	bl	801ca50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801bae0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801bae2:	68fb      	ldr	r3, [r7, #12]
 801bae4:	69db      	ldr	r3, [r3, #28]
 801bae6:	6979      	ldr	r1, [r7, #20]
 801bae8:	4618      	mov	r0, r3
 801baea:	f004 fe47 	bl	802077c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801baee:	697b      	ldr	r3, [r7, #20]
 801baf0:	681b      	ldr	r3, [r3, #0]
 801baf2:	3318      	adds	r3, #24
 801baf4:	681b      	ldr	r3, [r3, #0]
 801baf6:	6879      	ldr	r1, [r7, #4]
 801baf8:	6978      	ldr	r0, [r7, #20]
 801bafa:	4798      	blx	r3
    return *this;
 801bafc:	68fb      	ldr	r3, [r7, #12]
}
 801bafe:	4618      	mov	r0, r3
 801bb00:	371c      	adds	r7, #28
 801bb02:	46bd      	mov	sp, r7
 801bb04:	bd90      	pop	{r4, r7, pc}
 801bb06:	bf00      	nop
 801bb08:	0802790c 	.word	0x0802790c

0801bb0c <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801bb0c:	b5b0      	push	{r4, r5, r7, lr}
 801bb0e:	b086      	sub	sp, #24
 801bb10:	af02      	add	r7, sp, #8
 801bb12:	60f8      	str	r0, [r7, #12]
 801bb14:	60b9      	str	r1, [r7, #8]
 801bb16:	4639      	mov	r1, r7
 801bb18:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801bb1c:	f7f9 fda8 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801bb20:	4604      	mov	r4, r0
 801bb22:	6823      	ldr	r3, [r4, #0]
 801bb24:	3368      	adds	r3, #104	; 0x68
 801bb26:	681d      	ldr	r5, [r3, #0]
 801bb28:	f7f9 fdb2 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bb2c:	4603      	mov	r3, r0
 801bb2e:	9300      	str	r3, [sp, #0]
 801bb30:	2396      	movs	r3, #150	; 0x96
 801bb32:	4a04      	ldr	r2, [pc, #16]	; (801bb44 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 801bb34:	4904      	ldr	r1, [pc, #16]	; (801bb48 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801bb36:	4620      	mov	r0, r4
 801bb38:	47a8      	blx	r5
    return *this;
 801bb3a:	68fb      	ldr	r3, [r7, #12]
}
 801bb3c:	4618      	mov	r0, r3
 801bb3e:	3710      	adds	r7, #16
 801bb40:	46bd      	mov	sp, r7
 801bb42:	bdb0      	pop	{r4, r5, r7, pc}
 801bb44:	0802790c 	.word	0x0802790c
 801bb48:	08027928 	.word	0x08027928

0801bb4c <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801bb4c:	b5b0      	push	{r4, r5, r7, lr}
 801bb4e:	b086      	sub	sp, #24
 801bb50:	af02      	add	r7, sp, #8
 801bb52:	60f8      	str	r0, [r7, #12]
 801bb54:	60b9      	str	r1, [r7, #8]
 801bb56:	4639      	mov	r1, r7
 801bb58:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801bb5c:	f7f9 fd88 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801bb60:	4604      	mov	r4, r0
 801bb62:	6823      	ldr	r3, [r4, #0]
 801bb64:	3368      	adds	r3, #104	; 0x68
 801bb66:	681d      	ldr	r5, [r3, #0]
 801bb68:	f7f9 fd92 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bb6c:	4603      	mov	r3, r0
 801bb6e:	9300      	str	r3, [sp, #0]
 801bb70:	239c      	movs	r3, #156	; 0x9c
 801bb72:	4a04      	ldr	r2, [pc, #16]	; (801bb84 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 801bb74:	4904      	ldr	r1, [pc, #16]	; (801bb88 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801bb76:	4620      	mov	r0, r4
 801bb78:	47a8      	blx	r5
    return *this;
 801bb7a:	68fb      	ldr	r3, [r7, #12]
}
 801bb7c:	4618      	mov	r0, r3
 801bb7e:	3710      	adds	r7, #16
 801bb80:	46bd      	mov	sp, r7
 801bb82:	bdb0      	pop	{r4, r5, r7, pc}
 801bb84:	0802790c 	.word	0x0802790c
 801bb88:	08027948 	.word	0x08027948

0801bb8c <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 801bb8c:	b590      	push	{r4, r7, lr}
 801bb8e:	b087      	sub	sp, #28
 801bb90:	af00      	add	r7, sp, #0
 801bb92:	60f8      	str	r0, [r7, #12]
 801bb94:	60b9      	str	r1, [r7, #8]
 801bb96:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801bb9a:	22a4      	movs	r2, #164	; 0xa4
 801bb9c:	490e      	ldr	r1, [pc, #56]	; (801bbd8 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 801bb9e:	2038      	movs	r0, #56	; 0x38
 801bba0:	f7ef fdc0 	bl	800b724 <_ZnwjPKci>
 801bba4:	4604      	mov	r4, r0
 801bba6:	68b9      	ldr	r1, [r7, #8]
 801bba8:	4620      	mov	r0, r4
 801bbaa:	f000 ff51 	bl	801ca50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801bbae:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801bbb0:	68fb      	ldr	r3, [r7, #12]
 801bbb2:	69db      	ldr	r3, [r3, #28]
 801bbb4:	6979      	ldr	r1, [r7, #20]
 801bbb6:	4618      	mov	r0, r3
 801bbb8:	f004 fde0 	bl	802077c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801bbbc:	697b      	ldr	r3, [r7, #20]
 801bbbe:	681b      	ldr	r3, [r3, #0]
 801bbc0:	3324      	adds	r3, #36	; 0x24
 801bbc2:	681b      	ldr	r3, [r3, #0]
 801bbc4:	ed97 0b00 	vldr	d0, [r7]
 801bbc8:	6978      	ldr	r0, [r7, #20]
 801bbca:	4798      	blx	r3
    return *this;
 801bbcc:	68fb      	ldr	r3, [r7, #12]
}
 801bbce:	4618      	mov	r0, r3
 801bbd0:	371c      	adds	r7, #28
 801bbd2:	46bd      	mov	sp, r7
 801bbd4:	bd90      	pop	{r4, r7, pc}
 801bbd6:	bf00      	nop
 801bbd8:	0802790c 	.word	0x0802790c

0801bbdc <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 801bbdc:	b590      	push	{r4, r7, lr}
 801bbde:	b089      	sub	sp, #36	; 0x24
 801bbe0:	af00      	add	r7, sp, #0
 801bbe2:	6178      	str	r0, [r7, #20]
 801bbe4:	6139      	str	r1, [r7, #16]
 801bbe6:	ed87 0b02 	vstr	d0, [r7, #8]
 801bbea:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801bbee:	22ac      	movs	r2, #172	; 0xac
 801bbf0:	490f      	ldr	r1, [pc, #60]	; (801bc30 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 801bbf2:	2038      	movs	r0, #56	; 0x38
 801bbf4:	f7ef fd96 	bl	800b724 <_ZnwjPKci>
 801bbf8:	4604      	mov	r4, r0
 801bbfa:	6939      	ldr	r1, [r7, #16]
 801bbfc:	4620      	mov	r0, r4
 801bbfe:	f000 ff27 	bl	801ca50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801bc02:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 801bc04:	697b      	ldr	r3, [r7, #20]
 801bc06:	69db      	ldr	r3, [r3, #28]
 801bc08:	69f9      	ldr	r1, [r7, #28]
 801bc0a:	4618      	mov	r0, r3
 801bc0c:	f004 fdb6 	bl	802077c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 801bc10:	69fb      	ldr	r3, [r7, #28]
 801bc12:	681b      	ldr	r3, [r3, #0]
 801bc14:	3328      	adds	r3, #40	; 0x28
 801bc16:	681b      	ldr	r3, [r3, #0]
 801bc18:	ed97 1b00 	vldr	d1, [r7]
 801bc1c:	ed97 0b02 	vldr	d0, [r7, #8]
 801bc20:	69f8      	ldr	r0, [r7, #28]
 801bc22:	4798      	blx	r3
    return *this;
 801bc24:	697b      	ldr	r3, [r7, #20]
}
 801bc26:	4618      	mov	r0, r3
 801bc28:	3724      	adds	r7, #36	; 0x24
 801bc2a:	46bd      	mov	sp, r7
 801bc2c:	bd90      	pop	{r4, r7, pc}
 801bc2e:	bf00      	nop
 801bc30:	0802790c 	.word	0x0802790c

0801bc34 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 801bc34:	b590      	push	{r4, r7, lr}
 801bc36:	b087      	sub	sp, #28
 801bc38:	af00      	add	r7, sp, #0
 801bc3a:	60f8      	str	r0, [r7, #12]
 801bc3c:	60b9      	str	r1, [r7, #8]
 801bc3e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801bc40:	22b4      	movs	r2, #180	; 0xb4
 801bc42:	490e      	ldr	r1, [pc, #56]	; (801bc7c <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 801bc44:	2038      	movs	r0, #56	; 0x38
 801bc46:	f7ef fd6d 	bl	800b724 <_ZnwjPKci>
 801bc4a:	4604      	mov	r4, r0
 801bc4c:	68b9      	ldr	r1, [r7, #8]
 801bc4e:	4620      	mov	r0, r4
 801bc50:	f000 fefe 	bl	801ca50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801bc54:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801bc56:	68fb      	ldr	r3, [r7, #12]
 801bc58:	69db      	ldr	r3, [r3, #28]
 801bc5a:	6979      	ldr	r1, [r7, #20]
 801bc5c:	4618      	mov	r0, r3
 801bc5e:	f004 fd8d 	bl	802077c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801bc62:	697b      	ldr	r3, [r7, #20]
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	3338      	adds	r3, #56	; 0x38
 801bc68:	681b      	ldr	r3, [r3, #0]
 801bc6a:	6879      	ldr	r1, [r7, #4]
 801bc6c:	6978      	ldr	r0, [r7, #20]
 801bc6e:	4798      	blx	r3
    return *this;
 801bc70:	68fb      	ldr	r3, [r7, #12]
}
 801bc72:	4618      	mov	r0, r3
 801bc74:	371c      	adds	r7, #28
 801bc76:	46bd      	mov	sp, r7
 801bc78:	bd90      	pop	{r4, r7, pc}
 801bc7a:	bf00      	nop
 801bc7c:	0802790c 	.word	0x0802790c

0801bc80 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 801bc80:	b590      	push	{r4, r7, lr}
 801bc82:	b087      	sub	sp, #28
 801bc84:	af00      	add	r7, sp, #0
 801bc86:	60f8      	str	r0, [r7, #12]
 801bc88:	60b9      	str	r1, [r7, #8]
 801bc8a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801bc8c:	22bc      	movs	r2, #188	; 0xbc
 801bc8e:	490e      	ldr	r1, [pc, #56]	; (801bcc8 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 801bc90:	2038      	movs	r0, #56	; 0x38
 801bc92:	f7ef fd47 	bl	800b724 <_ZnwjPKci>
 801bc96:	4604      	mov	r4, r0
 801bc98:	68b9      	ldr	r1, [r7, #8]
 801bc9a:	4620      	mov	r0, r4
 801bc9c:	f000 fed8 	bl	801ca50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801bca0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801bca2:	68fb      	ldr	r3, [r7, #12]
 801bca4:	69db      	ldr	r3, [r3, #28]
 801bca6:	6979      	ldr	r1, [r7, #20]
 801bca8:	4618      	mov	r0, r3
 801bcaa:	f004 fd67 	bl	802077c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801bcae:	697b      	ldr	r3, [r7, #20]
 801bcb0:	681b      	ldr	r3, [r3, #0]
 801bcb2:	332c      	adds	r3, #44	; 0x2c
 801bcb4:	681b      	ldr	r3, [r3, #0]
 801bcb6:	6879      	ldr	r1, [r7, #4]
 801bcb8:	6978      	ldr	r0, [r7, #20]
 801bcba:	4798      	blx	r3
    return *this;
 801bcbc:	68fb      	ldr	r3, [r7, #12]
}
 801bcbe:	4618      	mov	r0, r3
 801bcc0:	371c      	adds	r7, #28
 801bcc2:	46bd      	mov	sp, r7
 801bcc4:	bd90      	pop	{r4, r7, pc}
 801bcc6:	bf00      	nop
 801bcc8:	0802790c 	.word	0x0802790c

0801bccc <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801bccc:	b590      	push	{r4, r7, lr}
 801bcce:	b087      	sub	sp, #28
 801bcd0:	af00      	add	r7, sp, #0
 801bcd2:	60f8      	str	r0, [r7, #12]
 801bcd4:	60b9      	str	r1, [r7, #8]
 801bcd6:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801bcd8:	22c4      	movs	r2, #196	; 0xc4
 801bcda:	490e      	ldr	r1, [pc, #56]	; (801bd14 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 801bcdc:	2038      	movs	r0, #56	; 0x38
 801bcde:	f7ef fd21 	bl	800b724 <_ZnwjPKci>
 801bce2:	4604      	mov	r4, r0
 801bce4:	68b9      	ldr	r1, [r7, #8]
 801bce6:	4620      	mov	r0, r4
 801bce8:	f000 feb2 	bl	801ca50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801bcec:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801bcee:	68fb      	ldr	r3, [r7, #12]
 801bcf0:	69db      	ldr	r3, [r3, #28]
 801bcf2:	6979      	ldr	r1, [r7, #20]
 801bcf4:	4618      	mov	r0, r3
 801bcf6:	f004 fd41 	bl	802077c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801bcfa:	697b      	ldr	r3, [r7, #20]
 801bcfc:	681b      	ldr	r3, [r3, #0]
 801bcfe:	3330      	adds	r3, #48	; 0x30
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	6879      	ldr	r1, [r7, #4]
 801bd04:	6978      	ldr	r0, [r7, #20]
 801bd06:	4798      	blx	r3
    return *this;
 801bd08:	68fb      	ldr	r3, [r7, #12]
}
 801bd0a:	4618      	mov	r0, r3
 801bd0c:	371c      	adds	r7, #28
 801bd0e:	46bd      	mov	sp, r7
 801bd10:	bd90      	pop	{r4, r7, pc}
 801bd12:	bf00      	nop
 801bd14:	0802790c 	.word	0x0802790c

0801bd18 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801bd18:	b590      	push	{r4, r7, lr}
 801bd1a:	b087      	sub	sp, #28
 801bd1c:	af00      	add	r7, sp, #0
 801bd1e:	60f8      	str	r0, [r7, #12]
 801bd20:	60b9      	str	r1, [r7, #8]
 801bd22:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801bd24:	22cc      	movs	r2, #204	; 0xcc
 801bd26:	490e      	ldr	r1, [pc, #56]	; (801bd60 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 801bd28:	2038      	movs	r0, #56	; 0x38
 801bd2a:	f7ef fcfb 	bl	800b724 <_ZnwjPKci>
 801bd2e:	4604      	mov	r4, r0
 801bd30:	68b9      	ldr	r1, [r7, #8]
 801bd32:	4620      	mov	r0, r4
 801bd34:	f000 fe8c 	bl	801ca50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801bd38:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801bd3a:	68fb      	ldr	r3, [r7, #12]
 801bd3c:	69db      	ldr	r3, [r3, #28]
 801bd3e:	6979      	ldr	r1, [r7, #20]
 801bd40:	4618      	mov	r0, r3
 801bd42:	f004 fd1b 	bl	802077c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801bd46:	697b      	ldr	r3, [r7, #20]
 801bd48:	681b      	ldr	r3, [r3, #0]
 801bd4a:	3334      	adds	r3, #52	; 0x34
 801bd4c:	681b      	ldr	r3, [r3, #0]
 801bd4e:	6879      	ldr	r1, [r7, #4]
 801bd50:	6978      	ldr	r0, [r7, #20]
 801bd52:	4798      	blx	r3
    return *this;
 801bd54:	68fb      	ldr	r3, [r7, #12]
}
 801bd56:	4618      	mov	r0, r3
 801bd58:	371c      	adds	r7, #28
 801bd5a:	46bd      	mov	sp, r7
 801bd5c:	bd90      	pop	{r4, r7, pc}
 801bd5e:	bf00      	nop
 801bd60:	0802790c 	.word	0x0802790c

0801bd64 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801bd64:	b590      	push	{r4, r7, lr}
 801bd66:	b087      	sub	sp, #28
 801bd68:	af00      	add	r7, sp, #0
 801bd6a:	60f8      	str	r0, [r7, #12]
 801bd6c:	60b9      	str	r1, [r7, #8]
 801bd6e:	607a      	str	r2, [r7, #4]
 801bd70:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801bd72:	22d4      	movs	r2, #212	; 0xd4
 801bd74:	490e      	ldr	r1, [pc, #56]	; (801bdb0 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 801bd76:	2038      	movs	r0, #56	; 0x38
 801bd78:	f7ef fcd4 	bl	800b724 <_ZnwjPKci>
 801bd7c:	4604      	mov	r4, r0
 801bd7e:	68b9      	ldr	r1, [r7, #8]
 801bd80:	4620      	mov	r0, r4
 801bd82:	f000 fe65 	bl	801ca50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801bd86:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801bd88:	68fb      	ldr	r3, [r7, #12]
 801bd8a:	69db      	ldr	r3, [r3, #28]
 801bd8c:	6979      	ldr	r1, [r7, #20]
 801bd8e:	4618      	mov	r0, r3
 801bd90:	f004 fcf4 	bl	802077c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 801bd94:	697b      	ldr	r3, [r7, #20]
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	333c      	adds	r3, #60	; 0x3c
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	683a      	ldr	r2, [r7, #0]
 801bd9e:	6879      	ldr	r1, [r7, #4]
 801bda0:	6978      	ldr	r0, [r7, #20]
 801bda2:	4798      	blx	r3
    return *this;
 801bda4:	68fb      	ldr	r3, [r7, #12]
}
 801bda6:	4618      	mov	r0, r3
 801bda8:	371c      	adds	r7, #28
 801bdaa:	46bd      	mov	sp, r7
 801bdac:	bd90      	pop	{r4, r7, pc}
 801bdae:	bf00      	nop
 801bdb0:	0802790c 	.word	0x0802790c

0801bdb4 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 801bdb4:	b590      	push	{r4, r7, lr}
 801bdb6:	b087      	sub	sp, #28
 801bdb8:	af00      	add	r7, sp, #0
 801bdba:	60f8      	str	r0, [r7, #12]
 801bdbc:	60b9      	str	r1, [r7, #8]
 801bdbe:	607a      	str	r2, [r7, #4]
 801bdc0:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801bdc2:	22dc      	movs	r2, #220	; 0xdc
 801bdc4:	490e      	ldr	r1, [pc, #56]	; (801be00 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 801bdc6:	2038      	movs	r0, #56	; 0x38
 801bdc8:	f7ef fcac 	bl	800b724 <_ZnwjPKci>
 801bdcc:	4604      	mov	r4, r0
 801bdce:	6879      	ldr	r1, [r7, #4]
 801bdd0:	4620      	mov	r0, r4
 801bdd2:	f000 fe3d 	bl	801ca50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801bdd6:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801bdd8:	68fb      	ldr	r3, [r7, #12]
 801bdda:	69db      	ldr	r3, [r3, #28]
 801bddc:	6979      	ldr	r1, [r7, #20]
 801bdde:	4618      	mov	r0, r3
 801bde0:	f004 fccc 	bl	802077c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801bde4:	697b      	ldr	r3, [r7, #20]
 801bde6:	681b      	ldr	r3, [r3, #0]
 801bde8:	3340      	adds	r3, #64	; 0x40
 801bdea:	681b      	ldr	r3, [r3, #0]
 801bdec:	683a      	ldr	r2, [r7, #0]
 801bdee:	68b9      	ldr	r1, [r7, #8]
 801bdf0:	6978      	ldr	r0, [r7, #20]
 801bdf2:	4798      	blx	r3
    return *this;
 801bdf4:	68fb      	ldr	r3, [r7, #12]
}
 801bdf6:	4618      	mov	r0, r3
 801bdf8:	371c      	adds	r7, #28
 801bdfa:	46bd      	mov	sp, r7
 801bdfc:	bd90      	pop	{r4, r7, pc}
 801bdfe:	bf00      	nop
 801be00:	0802790c 	.word	0x0802790c

0801be04 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 801be04:	b590      	push	{r4, r7, lr}
 801be06:	b087      	sub	sp, #28
 801be08:	af00      	add	r7, sp, #0
 801be0a:	60f8      	str	r0, [r7, #12]
 801be0c:	60b9      	str	r1, [r7, #8]
 801be0e:	607a      	str	r2, [r7, #4]
 801be10:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801be12:	22e4      	movs	r2, #228	; 0xe4
 801be14:	4911      	ldr	r1, [pc, #68]	; (801be5c <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 801be16:	2038      	movs	r0, #56	; 0x38
 801be18:	f7ef fc84 	bl	800b724 <_ZnwjPKci>
 801be1c:	4604      	mov	r4, r0
 801be1e:	68b9      	ldr	r1, [r7, #8]
 801be20:	4620      	mov	r0, r4
 801be22:	f000 fe15 	bl	801ca50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801be26:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801be28:	68fb      	ldr	r3, [r7, #12]
 801be2a:	6a1b      	ldr	r3, [r3, #32]
 801be2c:	6979      	ldr	r1, [r7, #20]
 801be2e:	4618      	mov	r0, r3
 801be30:	f004 fca4 	bl	802077c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801be34:	697b      	ldr	r3, [r7, #20]
 801be36:	681b      	ldr	r3, [r3, #0]
 801be38:	3330      	adds	r3, #48	; 0x30
 801be3a:	681b      	ldr	r3, [r3, #0]
 801be3c:	6879      	ldr	r1, [r7, #4]
 801be3e:	6978      	ldr	r0, [r7, #20]
 801be40:	4798      	blx	r3
    newParameter->setSize(size);
 801be42:	697b      	ldr	r3, [r7, #20]
 801be44:	681b      	ldr	r3, [r3, #0]
 801be46:	3348      	adds	r3, #72	; 0x48
 801be48:	681b      	ldr	r3, [r3, #0]
 801be4a:	6839      	ldr	r1, [r7, #0]
 801be4c:	6978      	ldr	r0, [r7, #20]
 801be4e:	4798      	blx	r3
    return *this;
 801be50:	68fb      	ldr	r3, [r7, #12]
}
 801be52:	4618      	mov	r0, r3
 801be54:	371c      	adds	r7, #28
 801be56:	46bd      	mov	sp, r7
 801be58:	bd90      	pop	{r4, r7, pc}
 801be5a:	bf00      	nop
 801be5c:	0802790c 	.word	0x0802790c

0801be60 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 801be60:	b590      	push	{r4, r7, lr}
 801be62:	b087      	sub	sp, #28
 801be64:	af00      	add	r7, sp, #0
 801be66:	60f8      	str	r0, [r7, #12]
 801be68:	60b9      	str	r1, [r7, #8]
 801be6a:	607a      	str	r2, [r7, #4]
 801be6c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801be6e:	22ed      	movs	r2, #237	; 0xed
 801be70:	490e      	ldr	r1, [pc, #56]	; (801beac <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 801be72:	2038      	movs	r0, #56	; 0x38
 801be74:	f7ef fc56 	bl	800b724 <_ZnwjPKci>
 801be78:	4604      	mov	r4, r0
 801be7a:	6879      	ldr	r1, [r7, #4]
 801be7c:	4620      	mov	r0, r4
 801be7e:	f000 fde7 	bl	801ca50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801be82:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801be84:	68fb      	ldr	r3, [r7, #12]
 801be86:	6a1b      	ldr	r3, [r3, #32]
 801be88:	6979      	ldr	r1, [r7, #20]
 801be8a:	4618      	mov	r0, r3
 801be8c:	f004 fc76 	bl	802077c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801be90:	697b      	ldr	r3, [r7, #20]
 801be92:	681b      	ldr	r3, [r3, #0]
 801be94:	3340      	adds	r3, #64	; 0x40
 801be96:	681b      	ldr	r3, [r3, #0]
 801be98:	683a      	ldr	r2, [r7, #0]
 801be9a:	68b9      	ldr	r1, [r7, #8]
 801be9c:	6978      	ldr	r0, [r7, #20]
 801be9e:	4798      	blx	r3
    return *this;
 801bea0:	68fb      	ldr	r3, [r7, #12]
}
 801bea2:	4618      	mov	r0, r3
 801bea4:	371c      	adds	r7, #28
 801bea6:	46bd      	mov	sp, r7
 801bea8:	bd90      	pop	{r4, r7, pc}
 801beaa:	bf00      	nop
 801beac:	0802790c 	.word	0x0802790c

0801beb0 <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 801beb0:	b590      	push	{r4, r7, lr}
 801beb2:	b083      	sub	sp, #12
 801beb4:	af00      	add	r7, sp, #0
 801beb6:	6078      	str	r0, [r7, #4]
 801beb8:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	681b      	ldr	r3, [r3, #0]
 801bebe:	3318      	adds	r3, #24
 801bec0:	681c      	ldr	r4, [r3, #0]
 801bec2:	2300      	movs	r3, #0
 801bec4:	2200      	movs	r2, #0
 801bec6:	6839      	ldr	r1, [r7, #0]
 801bec8:	6878      	ldr	r0, [r7, #4]
 801beca:	47a0      	blx	r4
 801becc:	4603      	mov	r3, r0
}
 801bece:	4618      	mov	r0, r3
 801bed0:	370c      	adds	r7, #12
 801bed2:	46bd      	mov	sp, r7
 801bed4:	bd90      	pop	{r4, r7, pc}
	...

0801bed8 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 801bed8:	b580      	push	{r7, lr}
 801beda:	b086      	sub	sp, #24
 801bedc:	af00      	add	r7, sp, #0
 801bede:	60f8      	str	r0, [r7, #12]
 801bee0:	60b9      	str	r1, [r7, #8]
 801bee2:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801bee4:	68bb      	ldr	r3, [r7, #8]
 801bee6:	69db      	ldr	r3, [r3, #28]
 801bee8:	6879      	ldr	r1, [r7, #4]
 801beea:	4618      	mov	r0, r3
 801beec:	f004 fc7c 	bl	80207e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801bef0:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 801bef2:	697b      	ldr	r3, [r7, #20]
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d008      	beq.n	801bf0a <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 801bef8:	697b      	ldr	r3, [r7, #20]
 801befa:	681b      	ldr	r3, [r3, #0]
 801befc:	3360      	adds	r3, #96	; 0x60
 801befe:	681b      	ldr	r3, [r3, #0]
 801bf00:	68fa      	ldr	r2, [r7, #12]
 801bf02:	6979      	ldr	r1, [r7, #20]
 801bf04:	4610      	mov	r0, r2
 801bf06:	4798      	blx	r3
 801bf08:	e004      	b.n	801bf14 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 801bf0a:	68fb      	ldr	r3, [r7, #12]
 801bf0c:	4903      	ldr	r1, [pc, #12]	; (801bf1c <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 801bf0e:	4618      	mov	r0, r3
 801bf10:	f7f2 fe10 	bl	800eb34 <_Z10StringFromPKc>
}
 801bf14:	68f8      	ldr	r0, [r7, #12]
 801bf16:	3718      	adds	r7, #24
 801bf18:	46bd      	mov	sp, r7
 801bf1a:	bd80      	pop	{r7, pc}
 801bf1c:	08027908 	.word	0x08027908

0801bf20 <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 801bf20:	b580      	push	{r7, lr}
 801bf22:	b084      	sub	sp, #16
 801bf24:	af00      	add	r7, sp, #0
 801bf26:	6078      	str	r0, [r7, #4]
 801bf28:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	69db      	ldr	r3, [r3, #28]
 801bf2e:	6839      	ldr	r1, [r7, #0]
 801bf30:	4618      	mov	r0, r3
 801bf32:	f004 fc59 	bl	80207e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801bf36:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801bf38:	68fb      	ldr	r3, [r7, #12]
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	bf14      	ite	ne
 801bf3e:	2301      	movne	r3, #1
 801bf40:	2300      	moveq	r3, #0
 801bf42:	b2db      	uxtb	r3, r3
}
 801bf44:	4618      	mov	r0, r3
 801bf46:	3710      	adds	r7, #16
 801bf48:	46bd      	mov	sp, r7
 801bf4a:	bd80      	pop	{r7, pc}

0801bf4c <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 801bf4c:	b580      	push	{r7, lr}
 801bf4e:	b084      	sub	sp, #16
 801bf50:	af00      	add	r7, sp, #0
 801bf52:	6078      	str	r0, [r7, #4]
 801bf54:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	6a1b      	ldr	r3, [r3, #32]
 801bf5a:	6839      	ldr	r1, [r7, #0]
 801bf5c:	4618      	mov	r0, r3
 801bf5e:	f004 fc43 	bl	80207e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801bf62:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801bf64:	68fb      	ldr	r3, [r7, #12]
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	bf14      	ite	ne
 801bf6a:	2301      	movne	r3, #1
 801bf6c:	2300      	moveq	r3, #0
 801bf6e:	b2db      	uxtb	r3, r3
}
 801bf70:	4618      	mov	r0, r3
 801bf72:	3710      	adds	r7, #16
 801bf74:	46bd      	mov	sp, r7
 801bf76:	bd80      	pop	{r7, pc}

0801bf78 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 801bf78:	b590      	push	{r4, r7, lr}
 801bf7a:	b089      	sub	sp, #36	; 0x24
 801bf7c:	af00      	add	r7, sp, #0
 801bf7e:	60f8      	str	r0, [r7, #12]
 801bf80:	60b9      	str	r1, [r7, #8]
 801bf82:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801bf84:	68bb      	ldr	r3, [r7, #8]
 801bf86:	69db      	ldr	r3, [r3, #28]
 801bf88:	6879      	ldr	r1, [r7, #4]
 801bf8a:	4618      	mov	r0, r3
 801bf8c:	f004 fc2c 	bl	80207e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801bf90:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801bf92:	2400      	movs	r4, #0
 801bf94:	69fb      	ldr	r3, [r7, #28]
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	d004      	beq.n	801bfa4 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 801bf9a:	69f9      	ldr	r1, [r7, #28]
 801bf9c:	68f8      	ldr	r0, [r7, #12]
 801bf9e:	f7f0 f829 	bl	800bff4 <_ZN14MockNamedValueC1ERKS_>
 801bfa2:	e00c      	b.n	801bfbe <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 801bfa4:	f107 0314 	add.w	r3, r7, #20
 801bfa8:	490a      	ldr	r1, [pc, #40]	; (801bfd4 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 801bfaa:	4618      	mov	r0, r3
 801bfac:	f7f1 ff7d 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801bfb0:	2401      	movs	r4, #1
 801bfb2:	f107 0314 	add.w	r3, r7, #20
 801bfb6:	4619      	mov	r1, r3
 801bfb8:	68f8      	ldr	r0, [r7, #12]
 801bfba:	f002 fc9b 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
 801bfbe:	2c00      	cmp	r4, #0
 801bfc0:	d004      	beq.n	801bfcc <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 801bfc2:	f107 0314 	add.w	r3, r7, #20
 801bfc6:	4618      	mov	r0, r3
 801bfc8:	f7f2 fb27 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 801bfcc:	68f8      	ldr	r0, [r7, #12]
 801bfce:	3724      	adds	r7, #36	; 0x24
 801bfd0:	46bd      	mov	sp, r7
 801bfd2:	bd90      	pop	{r4, r7, pc}
 801bfd4:	08027908 	.word	0x08027908

0801bfd8 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 801bfd8:	b590      	push	{r4, r7, lr}
 801bfda:	b089      	sub	sp, #36	; 0x24
 801bfdc:	af00      	add	r7, sp, #0
 801bfde:	60f8      	str	r0, [r7, #12]
 801bfe0:	60b9      	str	r1, [r7, #8]
 801bfe2:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801bfe4:	68bb      	ldr	r3, [r7, #8]
 801bfe6:	6a1b      	ldr	r3, [r3, #32]
 801bfe8:	6879      	ldr	r1, [r7, #4]
 801bfea:	4618      	mov	r0, r3
 801bfec:	f004 fbfc 	bl	80207e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801bff0:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801bff2:	2400      	movs	r4, #0
 801bff4:	69fb      	ldr	r3, [r7, #28]
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d004      	beq.n	801c004 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 801bffa:	69f9      	ldr	r1, [r7, #28]
 801bffc:	68f8      	ldr	r0, [r7, #12]
 801bffe:	f7ef fff9 	bl	800bff4 <_ZN14MockNamedValueC1ERKS_>
 801c002:	e00c      	b.n	801c01e <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 801c004:	f107 0314 	add.w	r3, r7, #20
 801c008:	490a      	ldr	r1, [pc, #40]	; (801c034 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 801c00a:	4618      	mov	r0, r3
 801c00c:	f7f1 ff4d 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801c010:	2401      	movs	r4, #1
 801c012:	f107 0314 	add.w	r3, r7, #20
 801c016:	4619      	mov	r1, r3
 801c018:	68f8      	ldr	r0, [r7, #12]
 801c01a:	f002 fc6b 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
 801c01e:	2c00      	cmp	r4, #0
 801c020:	d004      	beq.n	801c02c <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 801c022:	f107 0314 	add.w	r3, r7, #20
 801c026:	4618      	mov	r0, r3
 801c028:	f7f2 faf7 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 801c02c:	68f8      	ldr	r0, [r7, #12]
 801c02e:	3724      	adds	r7, #36	; 0x24
 801c030:	46bd      	mov	sp, r7
 801c032:	bd90      	pop	{r4, r7, pc}
 801c034:	08027908 	.word	0x08027908

0801c038 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 801c038:	b580      	push	{r7, lr}
 801c03a:	b084      	sub	sp, #16
 801c03c:	af00      	add	r7, sp, #0
 801c03e:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 801c040:	687b      	ldr	r3, [r7, #4]
 801c042:	69db      	ldr	r3, [r3, #28]
 801c044:	4618      	mov	r0, r3
 801c046:	f004 fbfe 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 801c04a:	60f8      	str	r0, [r7, #12]
 801c04c:	68fb      	ldr	r3, [r7, #12]
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d014      	beq.n	801c07c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 801c052:	68f9      	ldr	r1, [r7, #12]
 801c054:	6878      	ldr	r0, [r7, #4]
 801c056:	f000 fced 	bl	801ca34 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801c05a:	4603      	mov	r3, r0
 801c05c:	4618      	mov	r0, r3
 801c05e:	f000 fd1f 	bl	801caa0 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801c062:	4603      	mov	r3, r0
 801c064:	f083 0301 	eor.w	r3, r3, #1
 801c068:	b2db      	uxtb	r3, r3
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d001      	beq.n	801c072 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 801c06e:	2300      	movs	r3, #0
 801c070:	e023      	b.n	801c0ba <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 801c072:	68f8      	ldr	r0, [r7, #12]
 801c074:	f004 faf0 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 801c078:	60f8      	str	r0, [r7, #12]
 801c07a:	e7e7      	b.n	801c04c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	6a1b      	ldr	r3, [r3, #32]
 801c080:	4618      	mov	r0, r3
 801c082:	f004 fbe0 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 801c086:	60f8      	str	r0, [r7, #12]
 801c088:	68fb      	ldr	r3, [r7, #12]
 801c08a:	2b00      	cmp	r3, #0
 801c08c:	d014      	beq.n	801c0b8 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 801c08e:	68f9      	ldr	r1, [r7, #12]
 801c090:	6878      	ldr	r0, [r7, #4]
 801c092:	f000 fccf 	bl	801ca34 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801c096:	4603      	mov	r3, r0
 801c098:	4618      	mov	r0, r3
 801c09a:	f000 fd01 	bl	801caa0 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801c09e:	4603      	mov	r3, r0
 801c0a0:	f083 0301 	eor.w	r3, r3, #1
 801c0a4:	b2db      	uxtb	r3, r3
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	d001      	beq.n	801c0ae <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 801c0aa:	2300      	movs	r3, #0
 801c0ac:	e005      	b.n	801c0ba <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 801c0ae:	68f8      	ldr	r0, [r7, #12]
 801c0b0:	f004 fad2 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 801c0b4:	60f8      	str	r0, [r7, #12]
 801c0b6:	e7e7      	b.n	801c088 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 801c0b8:	2301      	movs	r3, #1
}
 801c0ba:	4618      	mov	r0, r3
 801c0bc:	3710      	adds	r7, #16
 801c0be:	46bd      	mov	sp, r7
 801c0c0:	bd80      	pop	{r7, pc}

0801c0c2 <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 801c0c2:	b480      	push	{r7}
 801c0c4:	b083      	sub	sp, #12
 801c0c6:	af00      	add	r7, sp, #0
 801c0c8:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	2201      	movs	r2, #1
 801c0ce:	731a      	strb	r2, [r3, #12]
    return *this;
 801c0d0:	687b      	ldr	r3, [r7, #4]
}
 801c0d2:	4618      	mov	r0, r3
 801c0d4:	370c      	adds	r7, #12
 801c0d6:	46bd      	mov	sp, r7
 801c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0dc:	4770      	bx	lr

0801c0de <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 801c0de:	b480      	push	{r7}
 801c0e0:	b083      	sub	sp, #12
 801c0e2:	af00      	add	r7, sp, #0
 801c0e4:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c0ee:	429a      	cmp	r2, r3
 801c0f0:	bf0c      	ite	eq
 801c0f2:	2301      	moveq	r3, #1
 801c0f4:	2300      	movne	r3, #0
 801c0f6:	b2db      	uxtb	r3, r3
}
 801c0f8:	4618      	mov	r0, r3
 801c0fa:	370c      	adds	r7, #12
 801c0fc:	46bd      	mov	sp, r7
 801c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c102:	4770      	bx	lr

0801c104 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 801c104:	b480      	push	{r7}
 801c106:	b083      	sub	sp, #12
 801c108:	af00      	add	r7, sp, #0
 801c10a:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 801c10c:	687b      	ldr	r3, [r7, #4]
 801c10e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801c110:	687b      	ldr	r3, [r7, #4]
 801c112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c114:	429a      	cmp	r2, r3
 801c116:	bf34      	ite	cc
 801c118:	2301      	movcc	r3, #1
 801c11a:	2300      	movcs	r3, #0
 801c11c:	b2db      	uxtb	r3, r3
}
 801c11e:	4618      	mov	r0, r3
 801c120:	370c      	adds	r7, #12
 801c122:	46bd      	mov	sp, r7
 801c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c128:	4770      	bx	lr

0801c12a <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 801c12a:	b580      	push	{r7, lr}
 801c12c:	b082      	sub	sp, #8
 801c12e:	af00      	add	r7, sp, #0
 801c130:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	681b      	ldr	r3, [r3, #0]
 801c136:	33cc      	adds	r3, #204	; 0xcc
 801c138:	681b      	ldr	r3, [r3, #0]
 801c13a:	6878      	ldr	r0, [r7, #4]
 801c13c:	4798      	blx	r3
 801c13e:	4603      	mov	r3, r0
 801c140:	2b00      	cmp	r3, #0
 801c142:	d00c      	beq.n	801c15e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	7b1b      	ldrb	r3, [r3, #12]
 801c148:	f083 0301 	eor.w	r3, r3, #1
 801c14c:	b2db      	uxtb	r3, r3
 801c14e:	2b00      	cmp	r3, #0
 801c150:	d103      	bne.n	801c15a <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	7b5b      	ldrb	r3, [r3, #13]
 801c156:	2b00      	cmp	r3, #0
 801c158:	d001      	beq.n	801c15e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801c15a:	2301      	movs	r3, #1
 801c15c:	e000      	b.n	801c160 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 801c15e:	2300      	movs	r3, #0
}
 801c160:	4618      	mov	r0, r3
 801c162:	3708      	adds	r7, #8
 801c164:	46bd      	mov	sp, r7
 801c166:	bd80      	pop	{r7, pc}

0801c168 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 801c168:	b580      	push	{r7, lr}
 801c16a:	b082      	sub	sp, #8
 801c16c:	af00      	add	r7, sp, #0
 801c16e:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	681b      	ldr	r3, [r3, #0]
 801c174:	33d0      	adds	r3, #208	; 0xd0
 801c176:	681b      	ldr	r3, [r3, #0]
 801c178:	6878      	ldr	r0, [r7, #4]
 801c17a:	4798      	blx	r3
 801c17c:	4603      	mov	r3, r0
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d006      	beq.n	801c190 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d001      	beq.n	801c190 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801c18c:	2301      	movs	r3, #1
 801c18e:	e000      	b.n	801c192 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 801c190:	2300      	movs	r3, #0
}
 801c192:	4618      	mov	r0, r3
 801c194:	3708      	adds	r7, #8
 801c196:	46bd      	mov	sp, r7
 801c198:	bd80      	pop	{r7, pc}

0801c19a <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 801c19a:	b580      	push	{r7, lr}
 801c19c:	b082      	sub	sp, #8
 801c19e:	af00      	add	r7, sp, #0
 801c1a0:	6078      	str	r0, [r7, #4]
 801c1a2:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801c1a8:	1c5a      	adds	r2, r3, #1
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	691b      	ldr	r3, [r3, #16]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d00c      	beq.n	801c1d0 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801c1ba:	683a      	ldr	r2, [r7, #0]
 801c1bc:	429a      	cmp	r2, r3
 801c1be:	d304      	bcc.n	801c1ca <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	695b      	ldr	r3, [r3, #20]
 801c1c4:	683a      	ldr	r2, [r7, #0]
 801c1c6:	429a      	cmp	r2, r3
 801c1c8:	d902      	bls.n	801c1d0 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	2201      	movs	r2, #1
 801c1ce:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	681b      	ldr	r3, [r3, #0]
 801c1d4:	33ec      	adds	r3, #236	; 0xec
 801c1d6:	681b      	ldr	r3, [r3, #0]
 801c1d8:	6878      	ldr	r0, [r7, #4]
 801c1da:	4798      	blx	r3
}
 801c1dc:	bf00      	nop
 801c1de:	3708      	adds	r7, #8
 801c1e0:	46bd      	mov	sp, r7
 801c1e2:	bd80      	pop	{r7, pc}

0801c1e4 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 801c1e4:	b480      	push	{r7}
 801c1e6:	b083      	sub	sp, #12
 801c1e8:	af00      	add	r7, sp, #0
 801c1ea:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	2201      	movs	r2, #1
 801c1f0:	735a      	strb	r2, [r3, #13]
}
 801c1f2:	bf00      	nop
 801c1f4:	370c      	adds	r7, #12
 801c1f6:	46bd      	mov	sp, r7
 801c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1fc:	4770      	bx	lr

0801c1fe <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 801c1fe:	b480      	push	{r7}
 801c200:	b083      	sub	sp, #12
 801c202:	af00      	add	r7, sp, #0
 801c204:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	2201      	movs	r2, #1
 801c20a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 801c20e:	bf00      	nop
 801c210:	370c      	adds	r7, #12
 801c212:	46bd      	mov	sp, r7
 801c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c218:	4770      	bx	lr

0801c21a <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 801c21a:	b580      	push	{r7, lr}
 801c21c:	b084      	sub	sp, #16
 801c21e:	af00      	add	r7, sp, #0
 801c220:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801c228:	f083 0301 	eor.w	r3, r3, #1
 801c22c:	b2da      	uxtb	r2, r3
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 801c234:	687b      	ldr	r3, [r7, #4]
 801c236:	2200      	movs	r2, #0
 801c238:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	69db      	ldr	r3, [r3, #28]
 801c23e:	4618      	mov	r0, r3
 801c240:	f004 fb01 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 801c244:	60f8      	str	r0, [r7, #12]
 801c246:	68fb      	ldr	r3, [r7, #12]
 801c248:	2b00      	cmp	r3, #0
 801c24a:	d00d      	beq.n	801c268 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 801c24c:	68f9      	ldr	r1, [r7, #12]
 801c24e:	6878      	ldr	r0, [r7, #4]
 801c250:	f000 fbf0 	bl	801ca34 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801c254:	4603      	mov	r3, r0
 801c256:	2100      	movs	r1, #0
 801c258:	4618      	mov	r0, r3
 801c25a:	f000 fc11 	bl	801ca80 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 801c25e:	68f8      	ldr	r0, [r7, #12]
 801c260:	f004 f9fa 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 801c264:	60f8      	str	r0, [r7, #12]
 801c266:	e7ee      	b.n	801c246 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 801c268:	687b      	ldr	r3, [r7, #4]
 801c26a:	6a1b      	ldr	r3, [r3, #32]
 801c26c:	4618      	mov	r0, r3
 801c26e:	f004 faea 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 801c272:	60f8      	str	r0, [r7, #12]
 801c274:	68fb      	ldr	r3, [r7, #12]
 801c276:	2b00      	cmp	r3, #0
 801c278:	d00d      	beq.n	801c296 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801c27a:	68f9      	ldr	r1, [r7, #12]
 801c27c:	6878      	ldr	r0, [r7, #4]
 801c27e:	f000 fbd9 	bl	801ca34 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801c282:	4603      	mov	r3, r0
 801c284:	2100      	movs	r1, #0
 801c286:	4618      	mov	r0, r3
 801c288:	f000 fbfa 	bl	801ca80 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 801c28c:	68f8      	ldr	r0, [r7, #12]
 801c28e:	f004 f9e3 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 801c292:	60f8      	str	r0, [r7, #12]
 801c294:	e7ee      	b.n	801c274 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 801c296:	bf00      	nop
 801c298:	3710      	adds	r7, #16
 801c29a:	46bd      	mov	sp, r7
 801c29c:	bd80      	pop	{r7, pc}

0801c29e <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 801c29e:	b590      	push	{r4, r7, lr}
 801c2a0:	b087      	sub	sp, #28
 801c2a2:	af00      	add	r7, sp, #0
 801c2a4:	6078      	str	r0, [r7, #4]
 801c2a6:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801c2a8:	687b      	ldr	r3, [r7, #4]
 801c2aa:	69db      	ldr	r3, [r3, #28]
 801c2ac:	4618      	mov	r0, r3
 801c2ae:	f004 faca 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 801c2b2:	6178      	str	r0, [r7, #20]
 801c2b4:	697b      	ldr	r3, [r7, #20]
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	d022      	beq.n	801c300 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801c2ba:	f107 030c 	add.w	r3, r7, #12
 801c2be:	6979      	ldr	r1, [r7, #20]
 801c2c0:	4618      	mov	r0, r3
 801c2c2:	f004 fa04 	bl	80206ce <_ZNK22MockNamedValueListNode7getNameEv>
 801c2c6:	f107 030c 	add.w	r3, r7, #12
 801c2ca:	6839      	ldr	r1, [r7, #0]
 801c2cc:	4618      	mov	r0, r3
 801c2ce:	f7f2 f9b0 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801c2d2:	4603      	mov	r3, r0
 801c2d4:	461c      	mov	r4, r3
 801c2d6:	f107 030c 	add.w	r3, r7, #12
 801c2da:	4618      	mov	r0, r3
 801c2dc:	f7f2 f99d 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801c2e0:	2c00      	cmp	r4, #0
 801c2e2:	d008      	beq.n	801c2f6 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801c2e4:	6979      	ldr	r1, [r7, #20]
 801c2e6:	6878      	ldr	r0, [r7, #4]
 801c2e8:	f000 fba4 	bl	801ca34 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801c2ec:	4603      	mov	r3, r0
 801c2ee:	2101      	movs	r1, #1
 801c2f0:	4618      	mov	r0, r3
 801c2f2:	f000 fbc5 	bl	801ca80 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801c2f6:	6978      	ldr	r0, [r7, #20]
 801c2f8:	f004 f9ae 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 801c2fc:	6178      	str	r0, [r7, #20]
 801c2fe:	e7d9      	b.n	801c2b4 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801c300:	bf00      	nop
 801c302:	371c      	adds	r7, #28
 801c304:	46bd      	mov	sp, r7
 801c306:	bd90      	pop	{r4, r7, pc}

0801c308 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 801c308:	b590      	push	{r4, r7, lr}
 801c30a:	b087      	sub	sp, #28
 801c30c:	af00      	add	r7, sp, #0
 801c30e:	6078      	str	r0, [r7, #4]
 801c310:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	6a1b      	ldr	r3, [r3, #32]
 801c316:	4618      	mov	r0, r3
 801c318:	f004 fa95 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 801c31c:	6178      	str	r0, [r7, #20]
 801c31e:	697b      	ldr	r3, [r7, #20]
 801c320:	2b00      	cmp	r3, #0
 801c322:	d022      	beq.n	801c36a <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801c324:	f107 030c 	add.w	r3, r7, #12
 801c328:	6979      	ldr	r1, [r7, #20]
 801c32a:	4618      	mov	r0, r3
 801c32c:	f004 f9cf 	bl	80206ce <_ZNK22MockNamedValueListNode7getNameEv>
 801c330:	f107 030c 	add.w	r3, r7, #12
 801c334:	6839      	ldr	r1, [r7, #0]
 801c336:	4618      	mov	r0, r3
 801c338:	f7f2 f97b 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801c33c:	4603      	mov	r3, r0
 801c33e:	461c      	mov	r4, r3
 801c340:	f107 030c 	add.w	r3, r7, #12
 801c344:	4618      	mov	r0, r3
 801c346:	f7f2 f968 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801c34a:	2c00      	cmp	r4, #0
 801c34c:	d008      	beq.n	801c360 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801c34e:	6979      	ldr	r1, [r7, #20]
 801c350:	6878      	ldr	r0, [r7, #4]
 801c352:	f000 fb6f 	bl	801ca34 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801c356:	4603      	mov	r3, r0
 801c358:	2101      	movs	r1, #1
 801c35a:	4618      	mov	r0, r3
 801c35c:	f000 fb90 	bl	801ca80 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801c360:	6978      	ldr	r0, [r7, #20]
 801c362:	f004 f979 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 801c366:	6178      	str	r0, [r7, #20]
 801c368:	e7d9      	b.n	801c31e <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801c36a:	bf00      	nop
 801c36c:	371c      	adds	r7, #28
 801c36e:	46bd      	mov	sp, r7
 801c370:	bd90      	pop	{r4, r7, pc}
	...

0801c374 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 801c374:	b580      	push	{r7, lr}
 801c376:	b086      	sub	sp, #24
 801c378:	af00      	add	r7, sp, #0
 801c37a:	60f8      	str	r0, [r7, #12]
 801c37c:	60b9      	str	r1, [r7, #8]
 801c37e:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801c380:	68bb      	ldr	r3, [r7, #8]
 801c382:	69db      	ldr	r3, [r3, #28]
 801c384:	6879      	ldr	r1, [r7, #4]
 801c386:	4618      	mov	r0, r3
 801c388:	f004 fa2e 	bl	80207e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801c38c:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 801c38e:	697b      	ldr	r3, [r7, #20]
 801c390:	2b00      	cmp	r3, #0
 801c392:	d005      	beq.n	801c3a0 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 801c394:	68fb      	ldr	r3, [r7, #12]
 801c396:	6979      	ldr	r1, [r7, #20]
 801c398:	4618      	mov	r0, r3
 801c39a:	f7ff fa0b 	bl	801b7b4 <_Z10StringFromRK14MockNamedValue>
 801c39e:	e003      	b.n	801c3a8 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 801c3a0:	4903      	ldr	r1, [pc, #12]	; (801c3b0 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 801c3a2:	68f8      	ldr	r0, [r7, #12]
 801c3a4:	f7f1 fd81 	bl	800deaa <_ZN12SimpleStringC1EPKc>
}
 801c3a8:	68f8      	ldr	r0, [r7, #12]
 801c3aa:	3718      	adds	r7, #24
 801c3ac:	46bd      	mov	sp, r7
 801c3ae:	bd80      	pop	{r7, pc}
 801c3b0:	08027974 	.word	0x08027974

0801c3b4 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 801c3b4:	b590      	push	{r4, r7, lr}
 801c3b6:	b087      	sub	sp, #28
 801c3b8:	af00      	add	r7, sp, #0
 801c3ba:	6078      	str	r0, [r7, #4]
 801c3bc:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	69dc      	ldr	r4, [r3, #28]
 801c3c2:	683b      	ldr	r3, [r7, #0]
 801c3c4:	681b      	ldr	r3, [r3, #0]
 801c3c6:	335c      	adds	r3, #92	; 0x5c
 801c3c8:	681b      	ldr	r3, [r3, #0]
 801c3ca:	f107 020c 	add.w	r2, r7, #12
 801c3ce:	6839      	ldr	r1, [r7, #0]
 801c3d0:	4610      	mov	r0, r2
 801c3d2:	4798      	blx	r3
 801c3d4:	f107 030c 	add.w	r3, r7, #12
 801c3d8:	4619      	mov	r1, r3
 801c3da:	4620      	mov	r0, r4
 801c3dc:	f004 fa04 	bl	80207e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801c3e0:	6178      	str	r0, [r7, #20]
 801c3e2:	f107 030c 	add.w	r3, r7, #12
 801c3e6:	4618      	mov	r0, r3
 801c3e8:	f7f2 f917 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 801c3ec:	697b      	ldr	r3, [r7, #20]
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	d00d      	beq.n	801c40e <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 801c3f2:	697b      	ldr	r3, [r7, #20]
 801c3f4:	681b      	ldr	r3, [r3, #0]
 801c3f6:	3350      	adds	r3, #80	; 0x50
 801c3f8:	681b      	ldr	r3, [r3, #0]
 801c3fa:	6839      	ldr	r1, [r7, #0]
 801c3fc:	6978      	ldr	r0, [r7, #20]
 801c3fe:	4798      	blx	r3
 801c400:	4603      	mov	r3, r0
 801c402:	2b00      	cmp	r3, #0
 801c404:	bf14      	ite	ne
 801c406:	2301      	movne	r3, #1
 801c408:	2300      	moveq	r3, #0
 801c40a:	b2db      	uxtb	r3, r3
 801c40c:	e006      	b.n	801c41c <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	7b1b      	ldrb	r3, [r3, #12]
 801c412:	2b00      	cmp	r3, #0
 801c414:	bf14      	ite	ne
 801c416:	2301      	movne	r3, #1
 801c418:	2300      	moveq	r3, #0
 801c41a:	b2db      	uxtb	r3, r3
}
 801c41c:	4618      	mov	r0, r3
 801c41e:	371c      	adds	r7, #28
 801c420:	46bd      	mov	sp, r7
 801c422:	bd90      	pop	{r4, r7, pc}

0801c424 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 801c424:	b590      	push	{r4, r7, lr}
 801c426:	b087      	sub	sp, #28
 801c428:	af00      	add	r7, sp, #0
 801c42a:	6078      	str	r0, [r7, #4]
 801c42c:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	6a1c      	ldr	r4, [r3, #32]
 801c432:	683b      	ldr	r3, [r7, #0]
 801c434:	681b      	ldr	r3, [r3, #0]
 801c436:	335c      	adds	r3, #92	; 0x5c
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	f107 020c 	add.w	r2, r7, #12
 801c43e:	6839      	ldr	r1, [r7, #0]
 801c440:	4610      	mov	r0, r2
 801c442:	4798      	blx	r3
 801c444:	f107 030c 	add.w	r3, r7, #12
 801c448:	4619      	mov	r1, r3
 801c44a:	4620      	mov	r0, r4
 801c44c:	f004 f9cc 	bl	80207e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801c450:	6178      	str	r0, [r7, #20]
 801c452:	f107 030c 	add.w	r3, r7, #12
 801c456:	4618      	mov	r0, r3
 801c458:	f7f2 f8df 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 801c45c:	697b      	ldr	r3, [r7, #20]
 801c45e:	2b00      	cmp	r3, #0
 801c460:	d00d      	beq.n	801c47e <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 801c462:	697b      	ldr	r3, [r7, #20]
 801c464:	681b      	ldr	r3, [r3, #0]
 801c466:	3354      	adds	r3, #84	; 0x54
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	6839      	ldr	r1, [r7, #0]
 801c46c:	6978      	ldr	r0, [r7, #20]
 801c46e:	4798      	blx	r3
 801c470:	4603      	mov	r3, r0
 801c472:	2b00      	cmp	r3, #0
 801c474:	bf14      	ite	ne
 801c476:	2301      	movne	r3, #1
 801c478:	2300      	moveq	r3, #0
 801c47a:	b2db      	uxtb	r3, r3
 801c47c:	e006      	b.n	801c48c <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 801c47e:	687b      	ldr	r3, [r7, #4]
 801c480:	7b1b      	ldrb	r3, [r3, #12]
 801c482:	2b00      	cmp	r3, #0
 801c484:	bf14      	ite	ne
 801c486:	2301      	movne	r3, #1
 801c488:	2300      	moveq	r3, #0
 801c48a:	b2db      	uxtb	r3, r3
}
 801c48c:	4618      	mov	r0, r3
 801c48e:	371c      	adds	r7, #28
 801c490:	46bd      	mov	sp, r7
 801c492:	bd90      	pop	{r4, r7, pc}

0801c494 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 801c494:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c496:	b0a1      	sub	sp, #132	; 0x84
 801c498:	af02      	add	r7, sp, #8
 801c49a:	6078      	str	r0, [r7, #4]
 801c49c:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801c49e:	49bc      	ldr	r1, [pc, #752]	; (801c790 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801c4a0:	6878      	ldr	r0, [r7, #4]
 801c4a2:	f7f1 fd02 	bl	800deaa <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 801c4a6:	683b      	ldr	r3, [r7, #0]
 801c4a8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d012      	beq.n	801c4d6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 801c4b0:	683b      	ldr	r3, [r7, #0]
 801c4b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801c4b4:	f107 030c 	add.w	r3, r7, #12
 801c4b8:	49b6      	ldr	r1, [pc, #728]	; (801c794 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 801c4ba:	4618      	mov	r0, r3
 801c4bc:	f7f2 fdb4 	bl	800f028 <_Z16StringFromFormatPKcz>
 801c4c0:	f107 030c 	add.w	r3, r7, #12
 801c4c4:	4619      	mov	r1, r3
 801c4c6:	6878      	ldr	r0, [r7, #4]
 801c4c8:	f7f1 fd5b 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801c4cc:	f107 030c 	add.w	r3, r7, #12
 801c4d0:	4618      	mov	r0, r3
 801c4d2:	f7f2 f8a2 	bl	800e61a <_ZN12SimpleStringD1Ev>

    str += getName();
 801c4d6:	f107 0314 	add.w	r3, r7, #20
 801c4da:	6839      	ldr	r1, [r7, #0]
 801c4dc:	4618      	mov	r0, r3
 801c4de:	f7ff f989 	bl	801b7f4 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801c4e2:	f107 0314 	add.w	r3, r7, #20
 801c4e6:	4619      	mov	r1, r3
 801c4e8:	6878      	ldr	r0, [r7, #4]
 801c4ea:	f7f2 f913 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801c4ee:	f107 0314 	add.w	r3, r7, #20
 801c4f2:	4618      	mov	r0, r3
 801c4f4:	f7f2 f891 	bl	800e61a <_ZN12SimpleStringD1Ev>
    str += " -> ";
 801c4f8:	49a7      	ldr	r1, [pc, #668]	; (801c798 <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 801c4fa:	6878      	ldr	r0, [r7, #4]
 801c4fc:	f7f2 f91c 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 801c500:	683b      	ldr	r3, [r7, #0]
 801c502:	691b      	ldr	r3, [r3, #16]
 801c504:	2b00      	cmp	r3, #0
 801c506:	d02d      	beq.n	801c564 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 801c508:	683b      	ldr	r3, [r7, #0]
 801c50a:	691a      	ldr	r2, [r3, #16]
 801c50c:	683b      	ldr	r3, [r7, #0]
 801c50e:	695b      	ldr	r3, [r3, #20]
 801c510:	429a      	cmp	r2, r3
 801c512:	d113      	bne.n	801c53c <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 801c514:	683b      	ldr	r3, [r7, #0]
 801c516:	691a      	ldr	r2, [r3, #16]
 801c518:	f107 031c 	add.w	r3, r7, #28
 801c51c:	499f      	ldr	r1, [pc, #636]	; (801c79c <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 801c51e:	4618      	mov	r0, r3
 801c520:	f7f2 fd82 	bl	800f028 <_Z16StringFromFormatPKcz>
 801c524:	f107 031c 	add.w	r3, r7, #28
 801c528:	4619      	mov	r1, r3
 801c52a:	6878      	ldr	r0, [r7, #4]
 801c52c:	f7f2 f8f2 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801c530:	f107 031c 	add.w	r3, r7, #28
 801c534:	4618      	mov	r0, r3
 801c536:	f7f2 f870 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801c53a:	e013      	b.n	801c564 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 801c53c:	683b      	ldr	r3, [r7, #0]
 801c53e:	691a      	ldr	r2, [r3, #16]
 801c540:	683b      	ldr	r3, [r7, #0]
 801c542:	695b      	ldr	r3, [r3, #20]
 801c544:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801c548:	4995      	ldr	r1, [pc, #596]	; (801c7a0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 801c54a:	f7f2 fd6d 	bl	800f028 <_Z16StringFromFormatPKcz>
 801c54e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c552:	4619      	mov	r1, r3
 801c554:	6878      	ldr	r0, [r7, #4]
 801c556:	f7f2 f8dd 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801c55a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c55e:	4618      	mov	r0, r3
 801c560:	f7f2 f85b 	bl	800e61a <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 801c564:	683b      	ldr	r3, [r7, #0]
 801c566:	69db      	ldr	r3, [r3, #28]
 801c568:	4618      	mov	r0, r3
 801c56a:	f004 f96c 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 801c56e:	4603      	mov	r3, r0
 801c570:	2b00      	cmp	r3, #0
 801c572:	d109      	bne.n	801c588 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801c574:	683b      	ldr	r3, [r7, #0]
 801c576:	6a1b      	ldr	r3, [r3, #32]
 801c578:	4618      	mov	r0, r3
 801c57a:	f004 f964 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 801c57e:	4603      	mov	r3, r0
 801c580:	2b00      	cmp	r3, #0
 801c582:	d101      	bne.n	801c588 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801c584:	2301      	movs	r3, #1
 801c586:	e000      	b.n	801c58a <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 801c588:	2300      	movs	r3, #0
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	d00b      	beq.n	801c5a6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 801c58e:	683b      	ldr	r3, [r7, #0]
 801c590:	7b1b      	ldrb	r3, [r3, #12]
 801c592:	2b00      	cmp	r3, #0
 801c594:	d001      	beq.n	801c59a <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 801c596:	4b83      	ldr	r3, [pc, #524]	; (801c7a4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 801c598:	e000      	b.n	801c59c <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 801c59a:	4b83      	ldr	r3, [pc, #524]	; (801c7a8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 801c59c:	4619      	mov	r1, r3
 801c59e:	6878      	ldr	r0, [r7, #4]
 801c5a0:	f7f2 f8ca 	bl	800e738 <_ZN12SimpleStringpLEPKc>
 801c5a4:	e0e3      	b.n	801c76e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 801c5a6:	683b      	ldr	r3, [r7, #0]
 801c5a8:	69db      	ldr	r3, [r3, #28]
 801c5aa:	4618      	mov	r0, r3
 801c5ac:	f004 f94b 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 801c5b0:	6778      	str	r0, [r7, #116]	; 0x74
 801c5b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c5b4:	2b00      	cmp	r3, #0
 801c5b6:	d069      	beq.n	801c68c <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 801c5b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c5bc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801c5be:	4618      	mov	r0, r3
 801c5c0:	f004 f898 	bl	80206f4 <_ZNK22MockNamedValueListNode7getTypeEv>
 801c5c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c5c8:	4618      	mov	r0, r3
 801c5ca:	f7f1 fff9 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801c5ce:	4605      	mov	r5, r0
 801c5d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c5d4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801c5d6:	4618      	mov	r0, r3
 801c5d8:	f004 f879 	bl	80206ce <_ZNK22MockNamedValueListNode7getNameEv>
 801c5dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c5e0:	4618      	mov	r0, r3
 801c5e2:	f7f1 ffed 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801c5e6:	4606      	mov	r6, r0
 801c5e8:	683b      	ldr	r3, [r7, #0]
 801c5ea:	681b      	ldr	r3, [r3, #0]
 801c5ec:	33a4      	adds	r3, #164	; 0xa4
 801c5ee:	681c      	ldr	r4, [r3, #0]
 801c5f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c5f4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801c5f6:	4618      	mov	r0, r3
 801c5f8:	f004 f869 	bl	80206ce <_ZNK22MockNamedValueListNode7getNameEv>
 801c5fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c600:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801c604:	6839      	ldr	r1, [r7, #0]
 801c606:	4618      	mov	r0, r3
 801c608:	47a0      	blx	r4
 801c60a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c60e:	4618      	mov	r0, r3
 801c610:	f7f1 ffd6 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801c614:	4603      	mov	r3, r0
 801c616:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801c61a:	9300      	str	r3, [sp, #0]
 801c61c:	4633      	mov	r3, r6
 801c61e:	462a      	mov	r2, r5
 801c620:	4962      	ldr	r1, [pc, #392]	; (801c7ac <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 801c622:	f7f2 fd01 	bl	800f028 <_Z16StringFromFormatPKcz>
 801c626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c62a:	4619      	mov	r1, r3
 801c62c:	6878      	ldr	r0, [r7, #4]
 801c62e:	f7f2 f871 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801c632:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c636:	4618      	mov	r0, r3
 801c638:	f7f1 ffef 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801c63c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c640:	4618      	mov	r0, r3
 801c642:	f7f1 ffea 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801c646:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c64a:	4618      	mov	r0, r3
 801c64c:	f7f1 ffe5 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801c650:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c654:	4618      	mov	r0, r3
 801c656:	f7f1 ffe0 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801c65a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c65e:	4618      	mov	r0, r3
 801c660:	f7f1 ffdb 	bl	800e61a <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801c664:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801c666:	f003 fff7 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 801c66a:	4603      	mov	r3, r0
 801c66c:	2b00      	cmp	r3, #0
 801c66e:	bf14      	ite	ne
 801c670:	2301      	movne	r3, #1
 801c672:	2300      	moveq	r3, #0
 801c674:	b2db      	uxtb	r3, r3
 801c676:	2b00      	cmp	r3, #0
 801c678:	d003      	beq.n	801c682 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 801c67a:	494d      	ldr	r1, [pc, #308]	; (801c7b0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801c67c:	6878      	ldr	r0, [r7, #4]
 801c67e:	f7f2 f85b 	bl	800e738 <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 801c682:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801c684:	f003 ffe8 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 801c688:	6778      	str	r0, [r7, #116]	; 0x74
 801c68a:	e792      	b.n	801c5b2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 801c68c:	683b      	ldr	r3, [r7, #0]
 801c68e:	69db      	ldr	r3, [r3, #28]
 801c690:	4618      	mov	r0, r3
 801c692:	f004 f8d8 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 801c696:	4603      	mov	r3, r0
 801c698:	2b00      	cmp	r3, #0
 801c69a:	d009      	beq.n	801c6b0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801c69c:	683b      	ldr	r3, [r7, #0]
 801c69e:	6a1b      	ldr	r3, [r3, #32]
 801c6a0:	4618      	mov	r0, r3
 801c6a2:	f004 f8d0 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 801c6a6:	4603      	mov	r3, r0
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d001      	beq.n	801c6b0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801c6ac:	2301      	movs	r3, #1
 801c6ae:	e000      	b.n	801c6b2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 801c6b0:	2300      	movs	r3, #0
 801c6b2:	2b00      	cmp	r3, #0
 801c6b4:	d003      	beq.n	801c6be <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 801c6b6:	493e      	ldr	r1, [pc, #248]	; (801c7b0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801c6b8:	6878      	ldr	r0, [r7, #4]
 801c6ba:	f7f2 f83d 	bl	800e738 <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 801c6be:	683b      	ldr	r3, [r7, #0]
 801c6c0:	6a1b      	ldr	r3, [r3, #32]
 801c6c2:	4618      	mov	r0, r3
 801c6c4:	f004 f8bf 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 801c6c8:	6778      	str	r0, [r7, #116]	; 0x74
 801c6ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c6cc:	2b00      	cmp	r3, #0
 801c6ce:	d046      	beq.n	801c75e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 801c6d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801c6d4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801c6d6:	4618      	mov	r0, r3
 801c6d8:	f004 f80c 	bl	80206f4 <_ZNK22MockNamedValueListNode7getTypeEv>
 801c6dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801c6e0:	4618      	mov	r0, r3
 801c6e2:	f7f1 ff6d 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801c6e6:	4604      	mov	r4, r0
 801c6e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801c6ec:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801c6ee:	4618      	mov	r0, r3
 801c6f0:	f003 ffed 	bl	80206ce <_ZNK22MockNamedValueListNode7getNameEv>
 801c6f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801c6f8:	4618      	mov	r0, r3
 801c6fa:	f7f1 ff61 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801c6fe:	4603      	mov	r3, r0
 801c700:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801c704:	4622      	mov	r2, r4
 801c706:	492b      	ldr	r1, [pc, #172]	; (801c7b4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 801c708:	f7f2 fc8e 	bl	800f028 <_Z16StringFromFormatPKcz>
 801c70c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c710:	4619      	mov	r1, r3
 801c712:	6878      	ldr	r0, [r7, #4]
 801c714:	f7f1 fffe 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801c718:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c71c:	4618      	mov	r0, r3
 801c71e:	f7f1 ff7c 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801c722:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801c726:	4618      	mov	r0, r3
 801c728:	f7f1 ff77 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801c72c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801c730:	4618      	mov	r0, r3
 801c732:	f7f1 ff72 	bl	800e61a <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801c736:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801c738:	f003 ff8e 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 801c73c:	4603      	mov	r3, r0
 801c73e:	2b00      	cmp	r3, #0
 801c740:	bf14      	ite	ne
 801c742:	2301      	movne	r3, #1
 801c744:	2300      	moveq	r3, #0
 801c746:	b2db      	uxtb	r3, r3
 801c748:	2b00      	cmp	r3, #0
 801c74a:	d003      	beq.n	801c754 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 801c74c:	4918      	ldr	r1, [pc, #96]	; (801c7b0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801c74e:	6878      	ldr	r0, [r7, #4]
 801c750:	f7f1 fff2 	bl	800e738 <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 801c754:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801c756:	f003 ff7f 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 801c75a:	6778      	str	r0, [r7, #116]	; 0x74
 801c75c:	e7b5      	b.n	801c6ca <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 801c75e:	683b      	ldr	r3, [r7, #0]
 801c760:	7b1b      	ldrb	r3, [r3, #12]
 801c762:	2b00      	cmp	r3, #0
 801c764:	d003      	beq.n	801c76e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 801c766:	4914      	ldr	r1, [pc, #80]	; (801c7b8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 801c768:	6878      	ldr	r0, [r7, #4]
 801c76a:	f7f1 ffe5 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801c76e:	683b      	ldr	r3, [r7, #0]
 801c770:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801c772:	683b      	ldr	r3, [r7, #0]
 801c774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801c776:	2b01      	cmp	r3, #1
 801c778:	d101      	bne.n	801c77e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 801c77a:	4c05      	ldr	r4, [pc, #20]	; (801c790 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801c77c:	e000      	b.n	801c780 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 801c77e:	4c0f      	ldr	r4, [pc, #60]	; (801c7bc <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 801c780:	683b      	ldr	r3, [r7, #0]
 801c782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801c784:	683a      	ldr	r2, [r7, #0]
 801c786:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801c788:	2a01      	cmp	r2, #1
 801c78a:	d119      	bne.n	801c7c0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 801c78c:	4a00      	ldr	r2, [pc, #0]	; (801c790 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801c78e:	e018      	b.n	801c7c2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 801c790:	08027908 	.word	0x08027908
 801c794:	0802797c 	.word	0x0802797c
 801c798:	08027994 	.word	0x08027994
 801c79c:	0802799c 	.word	0x0802799c
 801c7a0:	080279bc 	.word	0x080279bc
 801c7a4:	080279e0 	.word	0x080279e0
 801c7a8:	080279f8 	.word	0x080279f8
 801c7ac:	08027a08 	.word	0x08027a08
 801c7b0:	08027a14 	.word	0x08027a14
 801c7b4:	08027a18 	.word	0x08027a18
 801c7b8:	08027a28 	.word	0x08027a28
 801c7bc:	08027a48 	.word	0x08027a48
 801c7c0:	4a0c      	ldr	r2, [pc, #48]	; (801c7f4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 801c7c2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801c7c6:	9201      	str	r2, [sp, #4]
 801c7c8:	9300      	str	r3, [sp, #0]
 801c7ca:	4623      	mov	r3, r4
 801c7cc:	460a      	mov	r2, r1
 801c7ce:	490a      	ldr	r1, [pc, #40]	; (801c7f8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 801c7d0:	f7f2 fc2a 	bl	800f028 <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801c7d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801c7d8:	4619      	mov	r1, r3
 801c7da:	6878      	ldr	r0, [r7, #4]
 801c7dc:	f7f1 ff9a 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801c7e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801c7e4:	4618      	mov	r0, r3
 801c7e6:	f7f1 ff18 	bl	800e61a <_ZN12SimpleStringD1Ev>

    return str;
 801c7ea:	bf00      	nop
}
 801c7ec:	6878      	ldr	r0, [r7, #4]
 801c7ee:	377c      	adds	r7, #124	; 0x7c
 801c7f0:	46bd      	mov	sp, r7
 801c7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c7f4:	08027a48 	.word	0x08027a48
 801c7f8:	08027a4c 	.word	0x08027a4c

0801c7fc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 801c7fc:	b590      	push	{r4, r7, lr}
 801c7fe:	b095      	sub	sp, #84	; 0x54
 801c800:	af00      	add	r7, sp, #0
 801c802:	6078      	str	r0, [r7, #4]
 801c804:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801c806:	496c      	ldr	r1, [pc, #432]	; (801c9b8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801c808:	6878      	ldr	r0, [r7, #4]
 801c80a:	f7f1 fb4e 	bl	800deaa <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 801c80e:	683b      	ldr	r3, [r7, #0]
 801c810:	69db      	ldr	r3, [r3, #28]
 801c812:	4618      	mov	r0, r3
 801c814:	f004 f817 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 801c818:	64f8      	str	r0, [r7, #76]	; 0x4c
 801c81a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c81c:	2b00      	cmp	r3, #0
 801c81e:	d05e      	beq.n	801c8de <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 801c820:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c822:	6838      	ldr	r0, [r7, #0]
 801c824:	f000 f906 	bl	801ca34 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801c828:	4603      	mov	r3, r0
 801c82a:	4618      	mov	r0, r3
 801c82c:	f000 f938 	bl	801caa0 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801c830:	4603      	mov	r3, r0
 801c832:	f083 0301 	eor.w	r3, r3, #1
 801c836:	b2db      	uxtb	r3, r3
 801c838:	2b00      	cmp	r3, #0
 801c83a:	d04b      	beq.n	801c8d4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 801c83c:	f107 030c 	add.w	r3, r7, #12
 801c840:	495d      	ldr	r1, [pc, #372]	; (801c9b8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801c842:	4618      	mov	r0, r3
 801c844:	f7f1 fb31 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801c848:	f107 030c 	add.w	r3, r7, #12
 801c84c:	4619      	mov	r1, r3
 801c84e:	6878      	ldr	r0, [r7, #4]
 801c850:	f7f1 ff34 	bl	800e6bc <_ZneRK12SimpleStringS1_>
 801c854:	4603      	mov	r3, r0
 801c856:	461c      	mov	r4, r3
 801c858:	f107 030c 	add.w	r3, r7, #12
 801c85c:	4618      	mov	r0, r3
 801c85e:	f7f1 fedc 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801c862:	2c00      	cmp	r4, #0
 801c864:	d003      	beq.n	801c86e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 801c866:	4955      	ldr	r1, [pc, #340]	; (801c9bc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801c868:	6878      	ldr	r0, [r7, #4]
 801c86a:	f7f1 ff65 	bl	800e738 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801c86e:	f107 031c 	add.w	r3, r7, #28
 801c872:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c874:	4618      	mov	r0, r3
 801c876:	f003 ff3d 	bl	80206f4 <_ZNK22MockNamedValueListNode7getTypeEv>
 801c87a:	f107 031c 	add.w	r3, r7, #28
 801c87e:	4618      	mov	r0, r3
 801c880:	f7f1 fe9e 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801c884:	4604      	mov	r4, r0
 801c886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c88a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c88c:	4618      	mov	r0, r3
 801c88e:	f003 ff1e 	bl	80206ce <_ZNK22MockNamedValueListNode7getNameEv>
 801c892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c896:	4618      	mov	r0, r3
 801c898:	f7f1 fe92 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801c89c:	4603      	mov	r3, r0
 801c89e:	f107 0014 	add.w	r0, r7, #20
 801c8a2:	4622      	mov	r2, r4
 801c8a4:	4946      	ldr	r1, [pc, #280]	; (801c9c0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801c8a6:	f7f2 fbbf 	bl	800f028 <_Z16StringFromFormatPKcz>
 801c8aa:	f107 0314 	add.w	r3, r7, #20
 801c8ae:	4619      	mov	r1, r3
 801c8b0:	6878      	ldr	r0, [r7, #4]
 801c8b2:	f7f1 ff2f 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801c8b6:	f107 0314 	add.w	r3, r7, #20
 801c8ba:	4618      	mov	r0, r3
 801c8bc:	f7f1 fead 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801c8c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c8c4:	4618      	mov	r0, r3
 801c8c6:	f7f1 fea8 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801c8ca:	f107 031c 	add.w	r3, r7, #28
 801c8ce:	4618      	mov	r0, r3
 801c8d0:	f7f1 fea3 	bl	800e61a <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 801c8d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801c8d6:	f003 febf 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 801c8da:	64f8      	str	r0, [r7, #76]	; 0x4c
 801c8dc:	e79d      	b.n	801c81a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801c8de:	683b      	ldr	r3, [r7, #0]
 801c8e0:	6a1b      	ldr	r3, [r3, #32]
 801c8e2:	4618      	mov	r0, r3
 801c8e4:	f003 ffaf 	bl	8020846 <_ZN18MockNamedValueList5beginEv>
 801c8e8:	64f8      	str	r0, [r7, #76]	; 0x4c
 801c8ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	d05e      	beq.n	801c9ae <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 801c8f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c8f2:	6838      	ldr	r0, [r7, #0]
 801c8f4:	f000 f89e 	bl	801ca34 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801c8f8:	4603      	mov	r3, r0
 801c8fa:	4618      	mov	r0, r3
 801c8fc:	f000 f8d0 	bl	801caa0 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801c900:	4603      	mov	r3, r0
 801c902:	f083 0301 	eor.w	r3, r3, #1
 801c906:	b2db      	uxtb	r3, r3
 801c908:	2b00      	cmp	r3, #0
 801c90a:	d04b      	beq.n	801c9a4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 801c90c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c910:	4929      	ldr	r1, [pc, #164]	; (801c9b8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801c912:	4618      	mov	r0, r3
 801c914:	f7f1 fac9 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801c918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c91c:	4619      	mov	r1, r3
 801c91e:	6878      	ldr	r0, [r7, #4]
 801c920:	f7f1 fecc 	bl	800e6bc <_ZneRK12SimpleStringS1_>
 801c924:	4603      	mov	r3, r0
 801c926:	461c      	mov	r4, r3
 801c928:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c92c:	4618      	mov	r0, r3
 801c92e:	f7f1 fe74 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801c932:	2c00      	cmp	r4, #0
 801c934:	d003      	beq.n	801c93e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 801c936:	4921      	ldr	r1, [pc, #132]	; (801c9bc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801c938:	6878      	ldr	r0, [r7, #4]
 801c93a:	f7f1 fefd 	bl	800e738 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801c93e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c942:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c944:	4618      	mov	r0, r3
 801c946:	f003 fed5 	bl	80206f4 <_ZNK22MockNamedValueListNode7getTypeEv>
 801c94a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c94e:	4618      	mov	r0, r3
 801c950:	f7f1 fe36 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801c954:	4604      	mov	r4, r0
 801c956:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c95a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c95c:	4618      	mov	r0, r3
 801c95e:	f003 feb6 	bl	80206ce <_ZNK22MockNamedValueListNode7getNameEv>
 801c962:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c966:	4618      	mov	r0, r3
 801c968:	f7f1 fe2a 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801c96c:	4603      	mov	r3, r0
 801c96e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801c972:	4622      	mov	r2, r4
 801c974:	4912      	ldr	r1, [pc, #72]	; (801c9c0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801c976:	f7f2 fb57 	bl	800f028 <_Z16StringFromFormatPKcz>
 801c97a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c97e:	4619      	mov	r1, r3
 801c980:	6878      	ldr	r0, [r7, #4]
 801c982:	f7f1 fec7 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801c986:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c98a:	4618      	mov	r0, r3
 801c98c:	f7f1 fe45 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801c990:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c994:	4618      	mov	r0, r3
 801c996:	f7f1 fe40 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801c99a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c99e:	4618      	mov	r0, r3
 801c9a0:	f7f1 fe3b 	bl	800e61a <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801c9a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801c9a6:	f003 fe57 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 801c9aa:	64f8      	str	r0, [r7, #76]	; 0x4c
 801c9ac:	e79d      	b.n	801c8ea <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 801c9ae:	bf00      	nop
}
 801c9b0:	6878      	ldr	r0, [r7, #4]
 801c9b2:	3754      	adds	r7, #84	; 0x54
 801c9b4:	46bd      	mov	sp, r7
 801c9b6:	bd90      	pop	{r4, r7, pc}
 801c9b8:	08027908 	.word	0x08027908
 801c9bc:	08027a14 	.word	0x08027a14
 801c9c0:	08027a74 	.word	0x08027a74

0801c9c4 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 801c9c4:	b590      	push	{r4, r7, lr}
 801c9c6:	b085      	sub	sp, #20
 801c9c8:	af00      	add	r7, sp, #0
 801c9ca:	6078      	str	r0, [r7, #4]
 801c9cc:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 801c9ce:	f107 0308 	add.w	r3, r7, #8
 801c9d2:	6879      	ldr	r1, [r7, #4]
 801c9d4:	4618      	mov	r0, r3
 801c9d6:	f7fe ff0d 	bl	801b7f4 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801c9da:	f107 0308 	add.w	r3, r7, #8
 801c9de:	4619      	mov	r1, r3
 801c9e0:	6838      	ldr	r0, [r7, #0]
 801c9e2:	f7f1 fe26 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801c9e6:	4603      	mov	r3, r0
 801c9e8:	461c      	mov	r4, r3
 801c9ea:	f107 0308 	add.w	r3, r7, #8
 801c9ee:	4618      	mov	r0, r3
 801c9f0:	f7f1 fe13 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801c9f4:	4623      	mov	r3, r4
}
 801c9f6:	4618      	mov	r0, r3
 801c9f8:	3714      	adds	r7, #20
 801c9fa:	46bd      	mov	sp, r7
 801c9fc:	bd90      	pop	{r4, r7, pc}

0801c9fe <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 801c9fe:	b480      	push	{r7}
 801ca00:	b083      	sub	sp, #12
 801ca02:	af00      	add	r7, sp, #0
 801ca04:	6078      	str	r0, [r7, #4]
 801ca06:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801ca0e:	f083 0301 	eor.w	r3, r3, #1
 801ca12:	b2db      	uxtb	r3, r3
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	d104      	bne.n	801ca22 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 801ca18:	687b      	ldr	r3, [r7, #4]
 801ca1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ca1c:	683a      	ldr	r2, [r7, #0]
 801ca1e:	429a      	cmp	r2, r3
 801ca20:	d101      	bne.n	801ca26 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 801ca22:	2301      	movs	r3, #1
 801ca24:	e000      	b.n	801ca28 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 801ca26:	2300      	movs	r3, #0
}
 801ca28:	4618      	mov	r0, r3
 801ca2a:	370c      	adds	r7, #12
 801ca2c:	46bd      	mov	sp, r7
 801ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca32:	4770      	bx	lr

0801ca34 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 801ca34:	b580      	push	{r7, lr}
 801ca36:	b082      	sub	sp, #8
 801ca38:	af00      	add	r7, sp, #0
 801ca3a:	6078      	str	r0, [r7, #4]
 801ca3c:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 801ca3e:	6838      	ldr	r0, [r7, #0]
 801ca40:	f003 fe16 	bl	8020670 <_ZN22MockNamedValueListNode4itemEv>
 801ca44:	4603      	mov	r3, r0
}
 801ca46:	4618      	mov	r0, r3
 801ca48:	3708      	adds	r7, #8
 801ca4a:	46bd      	mov	sp, r7
 801ca4c:	bd80      	pop	{r7, pc}
	...

0801ca50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 801ca50:	b580      	push	{r7, lr}
 801ca52:	b082      	sub	sp, #8
 801ca54:	af00      	add	r7, sp, #0
 801ca56:	6078      	str	r0, [r7, #4]
 801ca58:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 801ca5a:	687b      	ldr	r3, [r7, #4]
 801ca5c:	6839      	ldr	r1, [r7, #0]
 801ca5e:	4618      	mov	r0, r3
 801ca60:	f001 ff48 	bl	801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
 801ca64:	4a05      	ldr	r2, [pc, #20]	; (801ca7c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 801ca66:	687b      	ldr	r3, [r7, #4]
 801ca68:	601a      	str	r2, [r3, #0]
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	2200      	movs	r2, #0
 801ca6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	4618      	mov	r0, r3
 801ca76:	3708      	adds	r7, #8
 801ca78:	46bd      	mov	sp, r7
 801ca7a:	bd80      	pop	{r7, pc}
 801ca7c:	0802acb8 	.word	0x0802acb8

0801ca80 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 801ca80:	b480      	push	{r7}
 801ca82:	b083      	sub	sp, #12
 801ca84:	af00      	add	r7, sp, #0
 801ca86:	6078      	str	r0, [r7, #4]
 801ca88:	460b      	mov	r3, r1
 801ca8a:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	78fa      	ldrb	r2, [r7, #3]
 801ca90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 801ca94:	bf00      	nop
 801ca96:	370c      	adds	r7, #12
 801ca98:	46bd      	mov	sp, r7
 801ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca9e:	4770      	bx	lr

0801caa0 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 801caa0:	b480      	push	{r7}
 801caa2:	b083      	sub	sp, #12
 801caa4:	af00      	add	r7, sp, #0
 801caa6:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801caae:	4618      	mov	r0, r3
 801cab0:	370c      	adds	r7, #12
 801cab2:	46bd      	mov	sp, r7
 801cab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cab8:	4770      	bx	lr
	...

0801cabc <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 801cabc:	b580      	push	{r7, lr}
 801cabe:	b082      	sub	sp, #8
 801cac0:	af00      	add	r7, sp, #0
 801cac2:	6078      	str	r0, [r7, #4]
 801cac4:	460b      	mov	r3, r1
 801cac6:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	3328      	adds	r3, #40	; 0x28
 801cacc:	4907      	ldr	r1, [pc, #28]	; (801caec <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 801cace:	4618      	mov	r0, r3
 801cad0:	f002 f9b2 	bl	801ee38 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	3328      	adds	r3, #40	; 0x28
 801cad8:	78fa      	ldrb	r2, [r7, #3]
 801cada:	4611      	mov	r1, r2
 801cadc:	4618      	mov	r0, r3
 801cade:	f001 ff5b 	bl	801e998 <_ZN14MockNamedValue8setValueEb>
    return *this;
 801cae2:	687b      	ldr	r3, [r7, #4]
}
 801cae4:	4618      	mov	r0, r3
 801cae6:	3708      	adds	r7, #8
 801cae8:	46bd      	mov	sp, r7
 801caea:	bd80      	pop	{r7, pc}
 801caec:	08027a7c 	.word	0x08027a7c

0801caf0 <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 801caf0:	b580      	push	{r7, lr}
 801caf2:	b082      	sub	sp, #8
 801caf4:	af00      	add	r7, sp, #0
 801caf6:	6078      	str	r0, [r7, #4]
 801caf8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	3328      	adds	r3, #40	; 0x28
 801cafe:	4907      	ldr	r1, [pc, #28]	; (801cb1c <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 801cb00:	4618      	mov	r0, r3
 801cb02:	f002 f999 	bl	801ee38 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	3328      	adds	r3, #40	; 0x28
 801cb0a:	6839      	ldr	r1, [r7, #0]
 801cb0c:	4618      	mov	r0, r3
 801cb0e:	f001 ff67 	bl	801e9e0 <_ZN14MockNamedValue8setValueEj>
    return *this;
 801cb12:	687b      	ldr	r3, [r7, #4]
}
 801cb14:	4618      	mov	r0, r3
 801cb16:	3708      	adds	r7, #8
 801cb18:	46bd      	mov	sp, r7
 801cb1a:	bd80      	pop	{r7, pc}
 801cb1c:	08027a7c 	.word	0x08027a7c

0801cb20 <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 801cb20:	b580      	push	{r7, lr}
 801cb22:	b082      	sub	sp, #8
 801cb24:	af00      	add	r7, sp, #0
 801cb26:	6078      	str	r0, [r7, #4]
 801cb28:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801cb2a:	687b      	ldr	r3, [r7, #4]
 801cb2c:	3328      	adds	r3, #40	; 0x28
 801cb2e:	4907      	ldr	r1, [pc, #28]	; (801cb4c <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 801cb30:	4618      	mov	r0, r3
 801cb32:	f002 f981 	bl	801ee38 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	3328      	adds	r3, #40	; 0x28
 801cb3a:	6839      	ldr	r1, [r7, #0]
 801cb3c:	4618      	mov	r0, r3
 801cb3e:	f001 ff71 	bl	801ea24 <_ZN14MockNamedValue8setValueEi>
    return *this;
 801cb42:	687b      	ldr	r3, [r7, #4]
}
 801cb44:	4618      	mov	r0, r3
 801cb46:	3708      	adds	r7, #8
 801cb48:	46bd      	mov	sp, r7
 801cb4a:	bd80      	pop	{r7, pc}
 801cb4c:	08027a7c 	.word	0x08027a7c

0801cb50 <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 801cb50:	b580      	push	{r7, lr}
 801cb52:	b082      	sub	sp, #8
 801cb54:	af00      	add	r7, sp, #0
 801cb56:	6078      	str	r0, [r7, #4]
 801cb58:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	3328      	adds	r3, #40	; 0x28
 801cb5e:	4907      	ldr	r1, [pc, #28]	; (801cb7c <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 801cb60:	4618      	mov	r0, r3
 801cb62:	f002 f969 	bl	801ee38 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	3328      	adds	r3, #40	; 0x28
 801cb6a:	6839      	ldr	r1, [r7, #0]
 801cb6c:	4618      	mov	r0, r3
 801cb6e:	f001 ff7b 	bl	801ea68 <_ZN14MockNamedValue8setValueEl>
    return *this;
 801cb72:	687b      	ldr	r3, [r7, #4]
}
 801cb74:	4618      	mov	r0, r3
 801cb76:	3708      	adds	r7, #8
 801cb78:	46bd      	mov	sp, r7
 801cb7a:	bd80      	pop	{r7, pc}
 801cb7c:	08027a7c 	.word	0x08027a7c

0801cb80 <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 801cb80:	b580      	push	{r7, lr}
 801cb82:	b082      	sub	sp, #8
 801cb84:	af00      	add	r7, sp, #0
 801cb86:	6078      	str	r0, [r7, #4]
 801cb88:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	3328      	adds	r3, #40	; 0x28
 801cb8e:	4907      	ldr	r1, [pc, #28]	; (801cbac <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 801cb90:	4618      	mov	r0, r3
 801cb92:	f002 f951 	bl	801ee38 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	3328      	adds	r3, #40	; 0x28
 801cb9a:	6839      	ldr	r1, [r7, #0]
 801cb9c:	4618      	mov	r0, r3
 801cb9e:	f001 ff85 	bl	801eaac <_ZN14MockNamedValue8setValueEm>
    return *this;
 801cba2:	687b      	ldr	r3, [r7, #4]
}
 801cba4:	4618      	mov	r0, r3
 801cba6:	3708      	adds	r7, #8
 801cba8:	46bd      	mov	sp, r7
 801cbaa:	bd80      	pop	{r7, pc}
 801cbac:	08027a7c 	.word	0x08027a7c

0801cbb0 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 801cbb0:	b5b0      	push	{r4, r5, r7, lr}
 801cbb2:	b086      	sub	sp, #24
 801cbb4:	af02      	add	r7, sp, #8
 801cbb6:	60f8      	str	r0, [r7, #12]
 801cbb8:	1d3b      	adds	r3, r7, #4
 801cbba:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801cbbe:	f7f8 fd57 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801cbc2:	4604      	mov	r4, r0
 801cbc4:	6823      	ldr	r3, [r4, #0]
 801cbc6:	3368      	adds	r3, #104	; 0x68
 801cbc8:	681d      	ldr	r5, [r3, #0]
 801cbca:	f7f8 fd61 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801cbce:	4603      	mov	r3, r0
 801cbd0:	9300      	str	r3, [sp, #0]
 801cbd2:	f240 2319 	movw	r3, #537	; 0x219
 801cbd6:	4a04      	ldr	r2, [pc, #16]	; (801cbe8 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 801cbd8:	4904      	ldr	r1, [pc, #16]	; (801cbec <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 801cbda:	4620      	mov	r0, r4
 801cbdc:	47a8      	blx	r5
    return *this;
 801cbde:	68fb      	ldr	r3, [r7, #12]
}
 801cbe0:	4618      	mov	r0, r3
 801cbe2:	3710      	adds	r7, #16
 801cbe4:	46bd      	mov	sp, r7
 801cbe6:	bdb0      	pop	{r4, r5, r7, pc}
 801cbe8:	0802790c 	.word	0x0802790c
 801cbec:	08027928 	.word	0x08027928

0801cbf0 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 801cbf0:	b5b0      	push	{r4, r5, r7, lr}
 801cbf2:	b086      	sub	sp, #24
 801cbf4:	af02      	add	r7, sp, #8
 801cbf6:	60f8      	str	r0, [r7, #12]
 801cbf8:	1d3b      	adds	r3, r7, #4
 801cbfa:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801cbfe:	f7f8 fd37 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801cc02:	4604      	mov	r4, r0
 801cc04:	6823      	ldr	r3, [r4, #0]
 801cc06:	3368      	adds	r3, #104	; 0x68
 801cc08:	681d      	ldr	r5, [r3, #0]
 801cc0a:	f7f8 fd41 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801cc0e:	4603      	mov	r3, r0
 801cc10:	9300      	str	r3, [sp, #0]
 801cc12:	f240 231f 	movw	r3, #543	; 0x21f
 801cc16:	4a04      	ldr	r2, [pc, #16]	; (801cc28 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 801cc18:	4904      	ldr	r1, [pc, #16]	; (801cc2c <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 801cc1a:	4620      	mov	r0, r4
 801cc1c:	47a8      	blx	r5
    return *this;
 801cc1e:	68fb      	ldr	r3, [r7, #12]
}
 801cc20:	4618      	mov	r0, r3
 801cc22:	3710      	adds	r7, #16
 801cc24:	46bd      	mov	sp, r7
 801cc26:	bdb0      	pop	{r4, r5, r7, pc}
 801cc28:	0802790c 	.word	0x0802790c
 801cc2c:	08027948 	.word	0x08027948

0801cc30 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 801cc30:	b580      	push	{r7, lr}
 801cc32:	b082      	sub	sp, #8
 801cc34:	af00      	add	r7, sp, #0
 801cc36:	6078      	str	r0, [r7, #4]
 801cc38:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801cc3a:	687b      	ldr	r3, [r7, #4]
 801cc3c:	3328      	adds	r3, #40	; 0x28
 801cc3e:	4907      	ldr	r1, [pc, #28]	; (801cc5c <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 801cc40:	4618      	mov	r0, r3
 801cc42:	f002 f8f9 	bl	801ee38 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801cc46:	687b      	ldr	r3, [r7, #4]
 801cc48:	3328      	adds	r3, #40	; 0x28
 801cc4a:	6839      	ldr	r1, [r7, #0]
 801cc4c:	4618      	mov	r0, r3
 801cc4e:	f002 f835 	bl	801ecbc <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 801cc52:	687b      	ldr	r3, [r7, #4]
}
 801cc54:	4618      	mov	r0, r3
 801cc56:	3708      	adds	r7, #8
 801cc58:	46bd      	mov	sp, r7
 801cc5a:	bd80      	pop	{r7, pc}
 801cc5c:	08027a7c 	.word	0x08027a7c

0801cc60 <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 801cc60:	b580      	push	{r7, lr}
 801cc62:	b084      	sub	sp, #16
 801cc64:	af00      	add	r7, sp, #0
 801cc66:	60f8      	str	r0, [r7, #12]
 801cc68:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 801cc6c:	68fb      	ldr	r3, [r7, #12]
 801cc6e:	3328      	adds	r3, #40	; 0x28
 801cc70:	4907      	ldr	r1, [pc, #28]	; (801cc90 <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 801cc72:	4618      	mov	r0, r3
 801cc74:	f002 f8e0 	bl	801ee38 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801cc78:	68fb      	ldr	r3, [r7, #12]
 801cc7a:	3328      	adds	r3, #40	; 0x28
 801cc7c:	ed97 0b00 	vldr	d0, [r7]
 801cc80:	4618      	mov	r0, r3
 801cc82:	f001 ff71 	bl	801eb68 <_ZN14MockNamedValue8setValueEd>
    return *this;
 801cc86:	68fb      	ldr	r3, [r7, #12]
}
 801cc88:	4618      	mov	r0, r3
 801cc8a:	3710      	adds	r7, #16
 801cc8c:	46bd      	mov	sp, r7
 801cc8e:	bd80      	pop	{r7, pc}
 801cc90:	08027a7c 	.word	0x08027a7c

0801cc94 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 801cc94:	b580      	push	{r7, lr}
 801cc96:	b082      	sub	sp, #8
 801cc98:	af00      	add	r7, sp, #0
 801cc9a:	6078      	str	r0, [r7, #4]
 801cc9c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801cc9e:	687b      	ldr	r3, [r7, #4]
 801cca0:	3328      	adds	r3, #40	; 0x28
 801cca2:	4907      	ldr	r1, [pc, #28]	; (801ccc0 <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 801cca4:	4618      	mov	r0, r3
 801cca6:	f002 f8c7 	bl	801ee38 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	3328      	adds	r3, #40	; 0x28
 801ccae:	6839      	ldr	r1, [r7, #0]
 801ccb0:	4618      	mov	r0, r3
 801ccb2:	f001 ff9d 	bl	801ebf0 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 801ccb6:	687b      	ldr	r3, [r7, #4]
}
 801ccb8:	4618      	mov	r0, r3
 801ccba:	3708      	adds	r7, #8
 801ccbc:	46bd      	mov	sp, r7
 801ccbe:	bd80      	pop	{r7, pc}
 801ccc0:	08027a7c 	.word	0x08027a7c

0801ccc4 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 801ccc4:	b580      	push	{r7, lr}
 801ccc6:	b082      	sub	sp, #8
 801ccc8:	af00      	add	r7, sp, #0
 801ccca:	6078      	str	r0, [r7, #4]
 801cccc:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801ccce:	687b      	ldr	r3, [r7, #4]
 801ccd0:	3328      	adds	r3, #40	; 0x28
 801ccd2:	4907      	ldr	r1, [pc, #28]	; (801ccf0 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 801ccd4:	4618      	mov	r0, r3
 801ccd6:	f002 f8af 	bl	801ee38 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	3328      	adds	r3, #40	; 0x28
 801ccde:	6839      	ldr	r1, [r7, #0]
 801cce0:	4618      	mov	r0, r3
 801cce2:	f001 ffa7 	bl	801ec34 <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 801cce6:	687b      	ldr	r3, [r7, #4]
}
 801cce8:	4618      	mov	r0, r3
 801ccea:	3708      	adds	r7, #8
 801ccec:	46bd      	mov	sp, r7
 801ccee:	bd80      	pop	{r7, pc}
 801ccf0:	08027a7c 	.word	0x08027a7c

0801ccf4 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 801ccf4:	b580      	push	{r7, lr}
 801ccf6:	b082      	sub	sp, #8
 801ccf8:	af00      	add	r7, sp, #0
 801ccfa:	6078      	str	r0, [r7, #4]
 801ccfc:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	3328      	adds	r3, #40	; 0x28
 801cd02:	4907      	ldr	r1, [pc, #28]	; (801cd20 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 801cd04:	4618      	mov	r0, r3
 801cd06:	f002 f897 	bl	801ee38 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	3328      	adds	r3, #40	; 0x28
 801cd0e:	6839      	ldr	r1, [r7, #0]
 801cd10:	4618      	mov	r0, r3
 801cd12:	f001 ffb1 	bl	801ec78 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 801cd16:	687b      	ldr	r3, [r7, #4]
}
 801cd18:	4618      	mov	r0, r3
 801cd1a:	3708      	adds	r7, #8
 801cd1c:	46bd      	mov	sp, r7
 801cd1e:	bd80      	pop	{r7, pc}
 801cd20:	08027a7c 	.word	0x08027a7c

0801cd24 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 801cd24:	b480      	push	{r7}
 801cd26:	b083      	sub	sp, #12
 801cd28:	af00      	add	r7, sp, #0
 801cd2a:	6078      	str	r0, [r7, #4]
 801cd2c:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	2201      	movs	r2, #1
 801cd32:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 801cd36:	687b      	ldr	r3, [r7, #4]
 801cd38:	2200      	movs	r2, #0
 801cd3a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	683a      	ldr	r2, [r7, #0]
 801cd42:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 801cd44:	687b      	ldr	r3, [r7, #4]
}
 801cd46:	4618      	mov	r0, r3
 801cd48:	370c      	adds	r7, #12
 801cd4a:	46bd      	mov	sp, r7
 801cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd50:	4770      	bx	lr

0801cd52 <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 801cd52:	b580      	push	{r7, lr}
 801cd54:	b082      	sub	sp, #8
 801cd56:	af00      	add	r7, sp, #0
 801cd58:	6078      	str	r0, [r7, #4]
 801cd5a:	6039      	str	r1, [r7, #0]
    return returnValue_;
 801cd5c:	683b      	ldr	r3, [r7, #0]
 801cd5e:	3328      	adds	r3, #40	; 0x28
 801cd60:	4619      	mov	r1, r3
 801cd62:	6878      	ldr	r0, [r7, #4]
 801cd64:	f7ef f946 	bl	800bff4 <_ZN14MockNamedValueC1ERKS_>
}
 801cd68:	6878      	ldr	r0, [r7, #4]
 801cd6a:	3708      	adds	r7, #8
 801cd6c:	46bd      	mov	sp, r7
 801cd6e:	bd80      	pop	{r7, pc}

0801cd70 <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 801cd70:	b480      	push	{r7}
 801cd72:	b085      	sub	sp, #20
 801cd74:	af00      	add	r7, sp, #0
 801cd76:	60f8      	str	r0, [r7, #12]
 801cd78:	60b9      	str	r1, [r7, #8]
 801cd7a:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 801cd7c:	68fb      	ldr	r3, [r7, #12]
 801cd7e:	68ba      	ldr	r2, [r7, #8]
 801cd80:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 801cd82:	68fb      	ldr	r3, [r7, #12]
 801cd84:	687a      	ldr	r2, [r7, #4]
 801cd86:	615a      	str	r2, [r3, #20]
    return *this;
 801cd88:	68fb      	ldr	r3, [r7, #12]
}
 801cd8a:	4618      	mov	r0, r3
 801cd8c:	3714      	adds	r7, #20
 801cd8e:	46bd      	mov	sp, r7
 801cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd94:	4770      	bx	lr

0801cd96 <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 801cd96:	b480      	push	{r7}
 801cd98:	b083      	sub	sp, #12
 801cd9a:	af00      	add	r7, sp, #0
 801cd9c:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 801cd9e:	687b      	ldr	r3, [r7, #4]
 801cda0:	7e1b      	ldrb	r3, [r3, #24]
}
 801cda2:	4618      	mov	r0, r3
 801cda4:	370c      	adds	r7, #12
 801cda6:	46bd      	mov	sp, r7
 801cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdac:	4770      	bx	lr

0801cdae <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 801cdae:	b480      	push	{r7}
 801cdb0:	b083      	sub	sp, #12
 801cdb2:	af00      	add	r7, sp, #0
 801cdb4:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 801cdb6:	687b      	ldr	r3, [r7, #4]
 801cdb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 801cdba:	4618      	mov	r0, r3
 801cdbc:	370c      	adds	r7, #12
 801cdbe:	46bd      	mov	sp, r7
 801cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdc4:	4770      	bx	lr
	...

0801cdc8 <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 801cdc8:	b580      	push	{r7, lr}
 801cdca:	b082      	sub	sp, #8
 801cdcc:	af00      	add	r7, sp, #0
 801cdce:	6078      	str	r0, [r7, #4]
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	4618      	mov	r0, r3
 801cdd4:	f7fe fcce 	bl	801b774 <_ZN16MockExpectedCallC1Ev>
 801cdd8:	4a03      	ldr	r2, [pc, #12]	; (801cde8 <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	601a      	str	r2, [r3, #0]
 801cdde:	687b      	ldr	r3, [r7, #4]
 801cde0:	4618      	mov	r0, r3
 801cde2:	3708      	adds	r7, #8
 801cde4:	46bd      	mov	sp, r7
 801cde6:	bd80      	pop	{r7, pc}
 801cde8:	0802ab18 	.word	0x0802ab18

0801cdec <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 801cdec:	b580      	push	{r7, lr}
 801cdee:	af00      	add	r7, sp, #0
 801cdf0:	4801      	ldr	r0, [pc, #4]	; (801cdf8 <__tcf_0+0xc>)
 801cdf2:	f000 f831 	bl	801ce58 <_ZN23MockIgnoredExpectedCallD1Ev>
 801cdf6:	bd80      	pop	{r7, pc}
 801cdf8:	20000f7c 	.word	0x20000f7c

0801cdfc <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 801cdfc:	b580      	push	{r7, lr}
 801cdfe:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 801ce00:	4b12      	ldr	r3, [pc, #72]	; (801ce4c <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801ce02:	781b      	ldrb	r3, [r3, #0]
 801ce04:	f3bf 8f5b 	dmb	ish
 801ce08:	b2db      	uxtb	r3, r3
 801ce0a:	f003 0301 	and.w	r3, r3, #1
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	bf0c      	ite	eq
 801ce12:	2301      	moveq	r3, #1
 801ce14:	2300      	movne	r3, #0
 801ce16:	b2db      	uxtb	r3, r3
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	d013      	beq.n	801ce44 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801ce1c:	480b      	ldr	r0, [pc, #44]	; (801ce4c <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801ce1e:	f003 ff03 	bl	8020c28 <__cxa_guard_acquire>
 801ce22:	4603      	mov	r3, r0
 801ce24:	2b00      	cmp	r3, #0
 801ce26:	bf14      	ite	ne
 801ce28:	2301      	movne	r3, #1
 801ce2a:	2300      	moveq	r3, #0
 801ce2c:	b2db      	uxtb	r3, r3
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	d008      	beq.n	801ce44 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801ce32:	4807      	ldr	r0, [pc, #28]	; (801ce50 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 801ce34:	f7ff ffc8 	bl	801cdc8 <_ZN23MockIgnoredExpectedCallC1Ev>
 801ce38:	4804      	ldr	r0, [pc, #16]	; (801ce4c <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801ce3a:	f003 ff01 	bl	8020c40 <__cxa_guard_release>
 801ce3e:	4805      	ldr	r0, [pc, #20]	; (801ce54 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 801ce40:	f003 ff25 	bl	8020c8e <atexit>
    return call;
 801ce44:	4b02      	ldr	r3, [pc, #8]	; (801ce50 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 801ce46:	4618      	mov	r0, r3
 801ce48:	bd80      	pop	{r7, pc}
 801ce4a:	bf00      	nop
 801ce4c:	20000f80 	.word	0x20000f80
 801ce50:	20000f7c 	.word	0x20000f7c
 801ce54:	0801cded 	.word	0x0801cded

0801ce58 <_ZN23MockIgnoredExpectedCallD1Ev>:
 801ce58:	b580      	push	{r7, lr}
 801ce5a:	b082      	sub	sp, #8
 801ce5c:	af00      	add	r7, sp, #0
 801ce5e:	6078      	str	r0, [r7, #4]
 801ce60:	4a05      	ldr	r2, [pc, #20]	; (801ce78 <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	601a      	str	r2, [r3, #0]
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	4618      	mov	r0, r3
 801ce6a:	f7fe fc93 	bl	801b794 <_ZN16MockExpectedCallD1Ev>
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	4618      	mov	r0, r3
 801ce72:	3708      	adds	r7, #8
 801ce74:	46bd      	mov	sp, r7
 801ce76:	bd80      	pop	{r7, pc}
 801ce78:	0802ab18 	.word	0x0802ab18

0801ce7c <_ZN23MockIgnoredExpectedCallD0Ev>:
 801ce7c:	b580      	push	{r7, lr}
 801ce7e:	b082      	sub	sp, #8
 801ce80:	af00      	add	r7, sp, #0
 801ce82:	6078      	str	r0, [r7, #4]
 801ce84:	6878      	ldr	r0, [r7, #4]
 801ce86:	f7ff ffe7 	bl	801ce58 <_ZN23MockIgnoredExpectedCallD1Ev>
 801ce8a:	2104      	movs	r1, #4
 801ce8c:	6878      	ldr	r0, [r7, #4]
 801ce8e:	f7ee fc5d 	bl	800b74c <_ZdlPvj>
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	4618      	mov	r0, r3
 801ce96:	3708      	adds	r7, #8
 801ce98:	46bd      	mov	sp, r7
 801ce9a:	bd80      	pop	{r7, pc}

0801ce9c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 801ce9c:	b580      	push	{r7, lr}
 801ce9e:	b082      	sub	sp, #8
 801cea0:	af00      	add	r7, sp, #0
 801cea2:	6078      	str	r0, [r7, #4]
 801cea4:	4a05      	ldr	r2, [pc, #20]	; (801cebc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	601a      	str	r2, [r3, #0]
 801ceaa:	687b      	ldr	r3, [r7, #4]
 801ceac:	4618      	mov	r0, r3
 801ceae:	f001 fd4b 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 801ceb2:	687b      	ldr	r3, [r7, #4]
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	3708      	adds	r7, #8
 801ceb8:	46bd      	mov	sp, r7
 801ceba:	bd80      	pop	{r7, pc}
 801cebc:	0802acb8 	.word	0x0802acb8

0801cec0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 801cec0:	b580      	push	{r7, lr}
 801cec2:	b082      	sub	sp, #8
 801cec4:	af00      	add	r7, sp, #0
 801cec6:	6078      	str	r0, [r7, #4]
 801cec8:	6878      	ldr	r0, [r7, #4]
 801ceca:	f7ff ffe7 	bl	801ce9c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 801cece:	2138      	movs	r1, #56	; 0x38
 801ced0:	6878      	ldr	r0, [r7, #4]
 801ced2:	f7ee fc3b 	bl	800b74c <_ZdlPvj>
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	4618      	mov	r0, r3
 801ceda:	3708      	adds	r7, #8
 801cedc:	46bd      	mov	sp, r7
 801cede:	bd80      	pop	{r7, pc}

0801cee0 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 801cee0:	b480      	push	{r7}
 801cee2:	b083      	sub	sp, #12
 801cee4:	af00      	add	r7, sp, #0
 801cee6:	6078      	str	r0, [r7, #4]
 801cee8:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	683a      	ldr	r2, [r7, #0]
 801ceee:	601a      	str	r2, [r3, #0]
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	2200      	movs	r2, #0
 801cef4:	605a      	str	r2, [r3, #4]
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	4618      	mov	r0, r3
 801cefa:	370c      	adds	r7, #12
 801cefc:	46bd      	mov	sp, r7
 801cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf02:	4770      	bx	lr

0801cf04 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 801cf04:	b480      	push	{r7}
 801cf06:	b083      	sub	sp, #12
 801cf08:	af00      	add	r7, sp, #0
 801cf0a:	6078      	str	r0, [r7, #4]
 801cf0c:	4a06      	ldr	r2, [pc, #24]	; (801cf28 <_ZN21MockExpectedCallsListC1Ev+0x24>)
 801cf0e:	687b      	ldr	r3, [r7, #4]
 801cf10:	601a      	str	r2, [r3, #0]
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	2200      	movs	r2, #0
 801cf16:	605a      	str	r2, [r3, #4]
{
}
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	4618      	mov	r0, r3
 801cf1c:	370c      	adds	r7, #12
 801cf1e:	46bd      	mov	sp, r7
 801cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf24:	4770      	bx	lr
 801cf26:	bf00      	nop
 801cf28:	0802ae0c 	.word	0x0802ae0c

0801cf2c <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 801cf2c:	b580      	push	{r7, lr}
 801cf2e:	b084      	sub	sp, #16
 801cf30:	af00      	add	r7, sp, #0
 801cf32:	6078      	str	r0, [r7, #4]
 801cf34:	4a0d      	ldr	r2, [pc, #52]	; (801cf6c <_ZN21MockExpectedCallsListD1Ev+0x40>)
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	685b      	ldr	r3, [r3, #4]
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	d00f      	beq.n	801cf62 <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	685b      	ldr	r3, [r3, #4]
 801cf46:	685b      	ldr	r3, [r3, #4]
 801cf48:	60fb      	str	r3, [r7, #12]
        delete head_;
 801cf4a:	687b      	ldr	r3, [r7, #4]
 801cf4c:	685b      	ldr	r3, [r3, #4]
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	d003      	beq.n	801cf5a <_ZN21MockExpectedCallsListD1Ev+0x2e>
 801cf52:	2108      	movs	r1, #8
 801cf54:	4618      	mov	r0, r3
 801cf56:	f7ee fbf9 	bl	800b74c <_ZdlPvj>
        head_ = next;
 801cf5a:	687b      	ldr	r3, [r7, #4]
 801cf5c:	68fa      	ldr	r2, [r7, #12]
 801cf5e:	605a      	str	r2, [r3, #4]
    while (head_) {
 801cf60:	e7eb      	b.n	801cf3a <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 801cf62:	687b      	ldr	r3, [r7, #4]
 801cf64:	4618      	mov	r0, r3
 801cf66:	3710      	adds	r7, #16
 801cf68:	46bd      	mov	sp, r7
 801cf6a:	bd80      	pop	{r7, pc}
 801cf6c:	0802ae0c 	.word	0x0802ae0c

0801cf70 <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 801cf70:	b580      	push	{r7, lr}
 801cf72:	b082      	sub	sp, #8
 801cf74:	af00      	add	r7, sp, #0
 801cf76:	6078      	str	r0, [r7, #4]
}
 801cf78:	6878      	ldr	r0, [r7, #4]
 801cf7a:	f7ff ffd7 	bl	801cf2c <_ZN21MockExpectedCallsListD1Ev>
 801cf7e:	2108      	movs	r1, #8
 801cf80:	6878      	ldr	r0, [r7, #4]
 801cf82:	f7ee fbe3 	bl	800b74c <_ZdlPvj>
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	4618      	mov	r0, r3
 801cf8a:	3708      	adds	r7, #8
 801cf8c:	46bd      	mov	sp, r7
 801cf8e:	bd80      	pop	{r7, pc}

0801cf90 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 801cf90:	b580      	push	{r7, lr}
 801cf92:	b084      	sub	sp, #16
 801cf94:	af00      	add	r7, sp, #0
 801cf96:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	685b      	ldr	r3, [r3, #4]
 801cf9c:	60fb      	str	r3, [r7, #12]
 801cf9e:	68fb      	ldr	r3, [r7, #12]
 801cfa0:	2b00      	cmp	r3, #0
 801cfa2:	d011      	beq.n	801cfc8 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 801cfa4:	68fb      	ldr	r3, [r7, #12]
 801cfa6:	681a      	ldr	r2, [r3, #0]
 801cfa8:	68fb      	ldr	r3, [r7, #12]
 801cfaa:	681b      	ldr	r3, [r3, #0]
 801cfac:	681b      	ldr	r3, [r3, #0]
 801cfae:	33d4      	adds	r3, #212	; 0xd4
 801cfb0:	681b      	ldr	r3, [r3, #0]
 801cfb2:	4610      	mov	r0, r2
 801cfb4:	4798      	blx	r3
 801cfb6:	4603      	mov	r3, r0
 801cfb8:	2b00      	cmp	r3, #0
 801cfba:	d001      	beq.n	801cfc0 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 801cfbc:	2301      	movs	r3, #1
 801cfbe:	e004      	b.n	801cfca <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cfc0:	68fb      	ldr	r3, [r7, #12]
 801cfc2:	685b      	ldr	r3, [r3, #4]
 801cfc4:	60fb      	str	r3, [r7, #12]
 801cfc6:	e7ea      	b.n	801cf9e <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 801cfc8:	2300      	movs	r3, #0
}
 801cfca:	4618      	mov	r0, r3
 801cfcc:	3710      	adds	r7, #16
 801cfce:	46bd      	mov	sp, r7
 801cfd0:	bd80      	pop	{r7, pc}

0801cfd2 <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 801cfd2:	b480      	push	{r7}
 801cfd4:	b085      	sub	sp, #20
 801cfd6:	af00      	add	r7, sp, #0
 801cfd8:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801cfda:	2300      	movs	r3, #0
 801cfdc:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cfde:	687b      	ldr	r3, [r7, #4]
 801cfe0:	685b      	ldr	r3, [r3, #4]
 801cfe2:	60bb      	str	r3, [r7, #8]
 801cfe4:	68bb      	ldr	r3, [r7, #8]
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d006      	beq.n	801cff8 <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 801cfea:	68fb      	ldr	r3, [r7, #12]
 801cfec:	3301      	adds	r3, #1
 801cfee:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cff0:	68bb      	ldr	r3, [r7, #8]
 801cff2:	685b      	ldr	r3, [r3, #4]
 801cff4:	60bb      	str	r3, [r7, #8]
 801cff6:	e7f5      	b.n	801cfe4 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 801cff8:	68fb      	ldr	r3, [r7, #12]
}
 801cffa:	4618      	mov	r0, r3
 801cffc:	3714      	adds	r7, #20
 801cffe:	46bd      	mov	sp, r7
 801d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d004:	4770      	bx	lr

0801d006 <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 801d006:	b480      	push	{r7}
 801d008:	b083      	sub	sp, #12
 801d00a:	af00      	add	r7, sp, #0
 801d00c:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 801d00e:	687b      	ldr	r3, [r7, #4]
 801d010:	685b      	ldr	r3, [r3, #4]
 801d012:	2b00      	cmp	r3, #0
 801d014:	bf0c      	ite	eq
 801d016:	2301      	moveq	r3, #1
 801d018:	2300      	movne	r3, #0
 801d01a:	b2db      	uxtb	r3, r3
}
 801d01c:	4618      	mov	r0, r3
 801d01e:	370c      	adds	r7, #12
 801d020:	46bd      	mov	sp, r7
 801d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d026:	4770      	bx	lr

0801d028 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 801d028:	b580      	push	{r7, lr}
 801d02a:	b084      	sub	sp, #16
 801d02c:	af00      	add	r7, sp, #0
 801d02e:	6078      	str	r0, [r7, #4]
 801d030:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 801d032:	2300      	movs	r3, #0
 801d034:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d036:	687b      	ldr	r3, [r7, #4]
 801d038:	685b      	ldr	r3, [r3, #4]
 801d03a:	60bb      	str	r3, [r7, #8]
 801d03c:	68bb      	ldr	r3, [r7, #8]
 801d03e:	2b00      	cmp	r3, #0
 801d040:	d01d      	beq.n	801d07e <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 801d042:	68bb      	ldr	r3, [r7, #8]
 801d044:	681a      	ldr	r2, [r3, #0]
 801d046:	68bb      	ldr	r3, [r7, #8]
 801d048:	681b      	ldr	r3, [r3, #0]
 801d04a:	681b      	ldr	r3, [r3, #0]
 801d04c:	33b8      	adds	r3, #184	; 0xb8
 801d04e:	681b      	ldr	r3, [r3, #0]
 801d050:	6839      	ldr	r1, [r7, #0]
 801d052:	4610      	mov	r0, r2
 801d054:	4798      	blx	r3
 801d056:	4603      	mov	r3, r0
 801d058:	2b00      	cmp	r3, #0
 801d05a:	d00c      	beq.n	801d076 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 801d05c:	68bb      	ldr	r3, [r7, #8]
 801d05e:	681a      	ldr	r2, [r3, #0]
 801d060:	68bb      	ldr	r3, [r7, #8]
 801d062:	681b      	ldr	r3, [r3, #0]
 801d064:	681b      	ldr	r3, [r3, #0]
 801d066:	33f8      	adds	r3, #248	; 0xf8
 801d068:	681b      	ldr	r3, [r3, #0]
 801d06a:	4610      	mov	r0, r2
 801d06c:	4798      	blx	r3
 801d06e:	4602      	mov	r2, r0
 801d070:	68fb      	ldr	r3, [r7, #12]
 801d072:	4413      	add	r3, r2
 801d074:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d076:	68bb      	ldr	r3, [r7, #8]
 801d078:	685b      	ldr	r3, [r3, #4]
 801d07a:	60bb      	str	r3, [r7, #8]
 801d07c:	e7de      	b.n	801d03c <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 801d07e:	68fb      	ldr	r3, [r7, #12]
}
 801d080:	4618      	mov	r0, r3
 801d082:	3710      	adds	r7, #16
 801d084:	46bd      	mov	sp, r7
 801d086:	bd80      	pop	{r7, pc}

0801d088 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 801d088:	b580      	push	{r7, lr}
 801d08a:	b084      	sub	sp, #16
 801d08c:	af00      	add	r7, sp, #0
 801d08e:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801d090:	2300      	movs	r3, #0
 801d092:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d094:	687b      	ldr	r3, [r7, #4]
 801d096:	685b      	ldr	r3, [r3, #4]
 801d098:	60bb      	str	r3, [r7, #8]
 801d09a:	68bb      	ldr	r3, [r7, #8]
 801d09c:	2b00      	cmp	r3, #0
 801d09e:	d015      	beq.n	801d0cc <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 801d0a0:	68bb      	ldr	r3, [r7, #8]
 801d0a2:	681a      	ldr	r2, [r3, #0]
 801d0a4:	68bb      	ldr	r3, [r7, #8]
 801d0a6:	681b      	ldr	r3, [r3, #0]
 801d0a8:	681b      	ldr	r3, [r3, #0]
 801d0aa:	33c0      	adds	r3, #192	; 0xc0
 801d0ac:	681b      	ldr	r3, [r3, #0]
 801d0ae:	4610      	mov	r0, r2
 801d0b0:	4798      	blx	r3
 801d0b2:	4603      	mov	r3, r0
 801d0b4:	f083 0301 	eor.w	r3, r3, #1
 801d0b8:	b2db      	uxtb	r3, r3
 801d0ba:	2b00      	cmp	r3, #0
 801d0bc:	d002      	beq.n	801d0c4 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 801d0be:	68fb      	ldr	r3, [r7, #12]
 801d0c0:	3301      	adds	r3, #1
 801d0c2:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d0c4:	68bb      	ldr	r3, [r7, #8]
 801d0c6:	685b      	ldr	r3, [r3, #4]
 801d0c8:	60bb      	str	r3, [r7, #8]
 801d0ca:	e7e6      	b.n	801d09a <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 801d0cc:	68fb      	ldr	r3, [r7, #12]
}
 801d0ce:	4618      	mov	r0, r3
 801d0d0:	3710      	adds	r7, #16
 801d0d2:	46bd      	mov	sp, r7
 801d0d4:	bd80      	pop	{r7, pc}

0801d0d6 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 801d0d6:	b580      	push	{r7, lr}
 801d0d8:	b084      	sub	sp, #16
 801d0da:	af00      	add	r7, sp, #0
 801d0dc:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d0de:	687b      	ldr	r3, [r7, #4]
 801d0e0:	685b      	ldr	r3, [r3, #4]
 801d0e2:	60fb      	str	r3, [r7, #12]
 801d0e4:	68fb      	ldr	r3, [r7, #12]
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	d011      	beq.n	801d10e <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801d0ea:	68fb      	ldr	r3, [r7, #12]
 801d0ec:	681a      	ldr	r2, [r3, #0]
 801d0ee:	68fb      	ldr	r3, [r7, #12]
 801d0f0:	681b      	ldr	r3, [r3, #0]
 801d0f2:	681b      	ldr	r3, [r3, #0]
 801d0f4:	33c8      	adds	r3, #200	; 0xc8
 801d0f6:	681b      	ldr	r3, [r3, #0]
 801d0f8:	4610      	mov	r0, r2
 801d0fa:	4798      	blx	r3
 801d0fc:	4603      	mov	r3, r0
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d001      	beq.n	801d106 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 801d102:	2301      	movs	r3, #1
 801d104:	e004      	b.n	801d110 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d106:	68fb      	ldr	r3, [r7, #12]
 801d108:	685b      	ldr	r3, [r3, #4]
 801d10a:	60fb      	str	r3, [r7, #12]
 801d10c:	e7ea      	b.n	801d0e4 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801d10e:	2300      	movs	r3, #0
}
 801d110:	4618      	mov	r0, r3
 801d112:	3710      	adds	r7, #16
 801d114:	46bd      	mov	sp, r7
 801d116:	bd80      	pop	{r7, pc}

0801d118 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 801d118:	b580      	push	{r7, lr}
 801d11a:	b084      	sub	sp, #16
 801d11c:	af00      	add	r7, sp, #0
 801d11e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d120:	687b      	ldr	r3, [r7, #4]
 801d122:	685b      	ldr	r3, [r3, #4]
 801d124:	60fb      	str	r3, [r7, #12]
 801d126:	68fb      	ldr	r3, [r7, #12]
 801d128:	2b00      	cmp	r3, #0
 801d12a:	d014      	beq.n	801d156 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801d12c:	68fb      	ldr	r3, [r7, #12]
 801d12e:	681a      	ldr	r2, [r3, #0]
 801d130:	68fb      	ldr	r3, [r7, #12]
 801d132:	681b      	ldr	r3, [r3, #0]
 801d134:	681b      	ldr	r3, [r3, #0]
 801d136:	33c0      	adds	r3, #192	; 0xc0
 801d138:	681b      	ldr	r3, [r3, #0]
 801d13a:	4610      	mov	r0, r2
 801d13c:	4798      	blx	r3
 801d13e:	4603      	mov	r3, r0
 801d140:	f083 0301 	eor.w	r3, r3, #1
 801d144:	b2db      	uxtb	r3, r3
 801d146:	2b00      	cmp	r3, #0
 801d148:	d001      	beq.n	801d14e <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801d14a:	2301      	movs	r3, #1
 801d14c:	e004      	b.n	801d158 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d14e:	68fb      	ldr	r3, [r7, #12]
 801d150:	685b      	ldr	r3, [r3, #4]
 801d152:	60fb      	str	r3, [r7, #12]
 801d154:	e7e7      	b.n	801d126 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801d156:	2300      	movs	r3, #0
}
 801d158:	4618      	mov	r0, r3
 801d15a:	3710      	adds	r7, #16
 801d15c:	46bd      	mov	sp, r7
 801d15e:	bd80      	pop	{r7, pc}

0801d160 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 801d160:	b580      	push	{r7, lr}
 801d162:	b084      	sub	sp, #16
 801d164:	af00      	add	r7, sp, #0
 801d166:	6078      	str	r0, [r7, #4]
 801d168:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d16a:	687b      	ldr	r3, [r7, #4]
 801d16c:	685b      	ldr	r3, [r3, #4]
 801d16e:	60fb      	str	r3, [r7, #12]
 801d170:	68fb      	ldr	r3, [r7, #12]
 801d172:	2b00      	cmp	r3, #0
 801d174:	d012      	beq.n	801d19c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801d176:	68fb      	ldr	r3, [r7, #12]
 801d178:	681a      	ldr	r2, [r3, #0]
 801d17a:	68fb      	ldr	r3, [r7, #12]
 801d17c:	681b      	ldr	r3, [r3, #0]
 801d17e:	681b      	ldr	r3, [r3, #0]
 801d180:	33b8      	adds	r3, #184	; 0xb8
 801d182:	681b      	ldr	r3, [r3, #0]
 801d184:	6839      	ldr	r1, [r7, #0]
 801d186:	4610      	mov	r0, r2
 801d188:	4798      	blx	r3
 801d18a:	4603      	mov	r3, r0
 801d18c:	2b00      	cmp	r3, #0
 801d18e:	d001      	beq.n	801d194 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 801d190:	2301      	movs	r3, #1
 801d192:	e004      	b.n	801d19e <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d194:	68fb      	ldr	r3, [r7, #12]
 801d196:	685b      	ldr	r3, [r3, #4]
 801d198:	60fb      	str	r3, [r7, #12]
 801d19a:	e7e9      	b.n	801d170 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801d19c:	2300      	movs	r3, #0
}
 801d19e:	4618      	mov	r0, r3
 801d1a0:	3710      	adds	r7, #16
 801d1a2:	46bd      	mov	sp, r7
 801d1a4:	bd80      	pop	{r7, pc}
	...

0801d1a8 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 801d1a8:	b590      	push	{r4, r7, lr}
 801d1aa:	b085      	sub	sp, #20
 801d1ac:	af00      	add	r7, sp, #0
 801d1ae:	6078      	str	r0, [r7, #4]
 801d1b0:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 801d1b2:	2273      	movs	r2, #115	; 0x73
 801d1b4:	4911      	ldr	r1, [pc, #68]	; (801d1fc <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 801d1b6:	2008      	movs	r0, #8
 801d1b8:	f7ee fab4 	bl	800b724 <_ZnwjPKci>
 801d1bc:	4604      	mov	r4, r0
 801d1be:	6839      	ldr	r1, [r7, #0]
 801d1c0:	4620      	mov	r0, r4
 801d1c2:	f7ff fe8d 	bl	801cee0 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 801d1c6:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	685b      	ldr	r3, [r3, #4]
 801d1cc:	2b00      	cmp	r3, #0
 801d1ce:	d103      	bne.n	801d1d8 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 801d1d0:	687b      	ldr	r3, [r7, #4]
 801d1d2:	68ba      	ldr	r2, [r7, #8]
 801d1d4:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 801d1d6:	e00d      	b.n	801d1f4 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 801d1d8:	687b      	ldr	r3, [r7, #4]
 801d1da:	685b      	ldr	r3, [r3, #4]
 801d1dc:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 801d1de:	68fb      	ldr	r3, [r7, #12]
 801d1e0:	685b      	ldr	r3, [r3, #4]
 801d1e2:	2b00      	cmp	r3, #0
 801d1e4:	d003      	beq.n	801d1ee <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801d1e6:	68fb      	ldr	r3, [r7, #12]
 801d1e8:	685b      	ldr	r3, [r3, #4]
 801d1ea:	60fb      	str	r3, [r7, #12]
 801d1ec:	e7f7      	b.n	801d1de <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 801d1ee:	68fb      	ldr	r3, [r7, #12]
 801d1f0:	68ba      	ldr	r2, [r7, #8]
 801d1f2:	605a      	str	r2, [r3, #4]
}
 801d1f4:	bf00      	nop
 801d1f6:	3714      	adds	r7, #20
 801d1f8:	46bd      	mov	sp, r7
 801d1fa:	bd90      	pop	{r4, r7, pc}
 801d1fc:	08027a88 	.word	0x08027a88

0801d200 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 801d200:	b580      	push	{r7, lr}
 801d202:	b084      	sub	sp, #16
 801d204:	af00      	add	r7, sp, #0
 801d206:	6078      	str	r0, [r7, #4]
 801d208:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801d20a:	683b      	ldr	r3, [r7, #0]
 801d20c:	685b      	ldr	r3, [r3, #4]
 801d20e:	60fb      	str	r3, [r7, #12]
 801d210:	68fb      	ldr	r3, [r7, #12]
 801d212:	2b00      	cmp	r3, #0
 801d214:	d018      	beq.n	801d248 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801d216:	68fb      	ldr	r3, [r7, #12]
 801d218:	681a      	ldr	r2, [r3, #0]
 801d21a:	68fb      	ldr	r3, [r7, #12]
 801d21c:	681b      	ldr	r3, [r3, #0]
 801d21e:	681b      	ldr	r3, [r3, #0]
 801d220:	33c4      	adds	r3, #196	; 0xc4
 801d222:	681b      	ldr	r3, [r3, #0]
 801d224:	4610      	mov	r0, r2
 801d226:	4798      	blx	r3
 801d228:	4603      	mov	r3, r0
 801d22a:	2b00      	cmp	r3, #0
 801d22c:	d008      	beq.n	801d240 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	3330      	adds	r3, #48	; 0x30
 801d234:	681b      	ldr	r3, [r3, #0]
 801d236:	68fa      	ldr	r2, [r7, #12]
 801d238:	6812      	ldr	r2, [r2, #0]
 801d23a:	4611      	mov	r1, r2
 801d23c:	6878      	ldr	r0, [r7, #4]
 801d23e:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801d240:	68fb      	ldr	r3, [r7, #12]
 801d242:	685b      	ldr	r3, [r3, #4]
 801d244:	60fb      	str	r3, [r7, #12]
 801d246:	e7e3      	b.n	801d210 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801d248:	bf00      	nop
 801d24a:	3710      	adds	r7, #16
 801d24c:	46bd      	mov	sp, r7
 801d24e:	bd80      	pop	{r7, pc}

0801d250 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 801d250:	b580      	push	{r7, lr}
 801d252:	b086      	sub	sp, #24
 801d254:	af00      	add	r7, sp, #0
 801d256:	60f8      	str	r0, [r7, #12]
 801d258:	60b9      	str	r1, [r7, #8]
 801d25a:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	685b      	ldr	r3, [r3, #4]
 801d260:	617b      	str	r3, [r7, #20]
 801d262:	697b      	ldr	r3, [r7, #20]
 801d264:	2b00      	cmp	r3, #0
 801d266:	d019      	beq.n	801d29c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801d268:	697b      	ldr	r3, [r7, #20]
 801d26a:	681a      	ldr	r2, [r3, #0]
 801d26c:	697b      	ldr	r3, [r7, #20]
 801d26e:	681b      	ldr	r3, [r3, #0]
 801d270:	681b      	ldr	r3, [r3, #0]
 801d272:	33b8      	adds	r3, #184	; 0xb8
 801d274:	681b      	ldr	r3, [r3, #0]
 801d276:	68b9      	ldr	r1, [r7, #8]
 801d278:	4610      	mov	r0, r2
 801d27a:	4798      	blx	r3
 801d27c:	4603      	mov	r3, r0
 801d27e:	2b00      	cmp	r3, #0
 801d280:	d008      	beq.n	801d294 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 801d282:	68fb      	ldr	r3, [r7, #12]
 801d284:	681b      	ldr	r3, [r3, #0]
 801d286:	3330      	adds	r3, #48	; 0x30
 801d288:	681b      	ldr	r3, [r3, #0]
 801d28a:	697a      	ldr	r2, [r7, #20]
 801d28c:	6812      	ldr	r2, [r2, #0]
 801d28e:	4611      	mov	r1, r2
 801d290:	68f8      	ldr	r0, [r7, #12]
 801d292:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801d294:	697b      	ldr	r3, [r7, #20]
 801d296:	685b      	ldr	r3, [r3, #4]
 801d298:	617b      	str	r3, [r7, #20]
 801d29a:	e7e2      	b.n	801d262 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801d29c:	bf00      	nop
 801d29e:	3718      	adds	r7, #24
 801d2a0:	46bd      	mov	sp, r7
 801d2a2:	bd80      	pop	{r7, pc}

0801d2a4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 801d2a4:	b580      	push	{r7, lr}
 801d2a6:	b084      	sub	sp, #16
 801d2a8:	af00      	add	r7, sp, #0
 801d2aa:	6078      	str	r0, [r7, #4]
 801d2ac:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801d2ae:	683b      	ldr	r3, [r7, #0]
 801d2b0:	685b      	ldr	r3, [r3, #4]
 801d2b2:	60fb      	str	r3, [r7, #12]
 801d2b4:	68fb      	ldr	r3, [r7, #12]
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	d00c      	beq.n	801d2d4 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801d2ba:	687b      	ldr	r3, [r7, #4]
 801d2bc:	681b      	ldr	r3, [r3, #0]
 801d2be:	3330      	adds	r3, #48	; 0x30
 801d2c0:	681b      	ldr	r3, [r3, #0]
 801d2c2:	68fa      	ldr	r2, [r7, #12]
 801d2c4:	6812      	ldr	r2, [r2, #0]
 801d2c6:	4611      	mov	r1, r2
 801d2c8:	6878      	ldr	r0, [r7, #4]
 801d2ca:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801d2cc:	68fb      	ldr	r3, [r7, #12]
 801d2ce:	685b      	ldr	r3, [r3, #4]
 801d2d0:	60fb      	str	r3, [r7, #12]
 801d2d2:	e7ef      	b.n	801d2b4 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 801d2d4:	bf00      	nop
 801d2d6:	3710      	adds	r7, #16
 801d2d8:	46bd      	mov	sp, r7
 801d2da:	bd80      	pop	{r7, pc}

0801d2dc <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801d2dc:	b580      	push	{r7, lr}
 801d2de:	b084      	sub	sp, #16
 801d2e0:	af00      	add	r7, sp, #0
 801d2e2:	6078      	str	r0, [r7, #4]
 801d2e4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d2e6:	687b      	ldr	r3, [r7, #4]
 801d2e8:	685b      	ldr	r3, [r3, #4]
 801d2ea:	60fb      	str	r3, [r7, #12]
 801d2ec:	68fb      	ldr	r3, [r7, #12]
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	d016      	beq.n	801d320 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 801d2f2:	68fb      	ldr	r3, [r7, #12]
 801d2f4:	681a      	ldr	r2, [r3, #0]
 801d2f6:	68fb      	ldr	r3, [r7, #12]
 801d2f8:	681b      	ldr	r3, [r3, #0]
 801d2fa:	681b      	ldr	r3, [r3, #0]
 801d2fc:	33b8      	adds	r3, #184	; 0xb8
 801d2fe:	681b      	ldr	r3, [r3, #0]
 801d300:	6839      	ldr	r1, [r7, #0]
 801d302:	4610      	mov	r0, r2
 801d304:	4798      	blx	r3
 801d306:	4603      	mov	r3, r0
 801d308:	f083 0301 	eor.w	r3, r3, #1
 801d30c:	b2db      	uxtb	r3, r3
 801d30e:	2b00      	cmp	r3, #0
 801d310:	d002      	beq.n	801d318 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801d312:	68fb      	ldr	r3, [r7, #12]
 801d314:	2200      	movs	r2, #0
 801d316:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d318:	68fb      	ldr	r3, [r7, #12]
 801d31a:	685b      	ldr	r3, [r3, #4]
 801d31c:	60fb      	str	r3, [r7, #12]
 801d31e:	e7e5      	b.n	801d2ec <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	681b      	ldr	r3, [r3, #0]
 801d324:	3388      	adds	r3, #136	; 0x88
 801d326:	681b      	ldr	r3, [r3, #0]
 801d328:	6878      	ldr	r0, [r7, #4]
 801d32a:	4798      	blx	r3
}
 801d32c:	bf00      	nop
 801d32e:	3710      	adds	r7, #16
 801d330:	46bd      	mov	sp, r7
 801d332:	bd80      	pop	{r7, pc}

0801d334 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 801d334:	b580      	push	{r7, lr}
 801d336:	b084      	sub	sp, #16
 801d338:	af00      	add	r7, sp, #0
 801d33a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	685b      	ldr	r3, [r3, #4]
 801d340:	60fb      	str	r3, [r7, #12]
 801d342:	68fb      	ldr	r3, [r7, #12]
 801d344:	2b00      	cmp	r3, #0
 801d346:	d015      	beq.n	801d374 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801d348:	68fb      	ldr	r3, [r7, #12]
 801d34a:	681a      	ldr	r2, [r3, #0]
 801d34c:	68fb      	ldr	r3, [r7, #12]
 801d34e:	681b      	ldr	r3, [r3, #0]
 801d350:	681b      	ldr	r3, [r3, #0]
 801d352:	33d4      	adds	r3, #212	; 0xd4
 801d354:	681b      	ldr	r3, [r3, #0]
 801d356:	4610      	mov	r0, r2
 801d358:	4798      	blx	r3
 801d35a:	4603      	mov	r3, r0
 801d35c:	f083 0301 	eor.w	r3, r3, #1
 801d360:	b2db      	uxtb	r3, r3
 801d362:	2b00      	cmp	r3, #0
 801d364:	d002      	beq.n	801d36c <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801d366:	68fb      	ldr	r3, [r7, #12]
 801d368:	2200      	movs	r2, #0
 801d36a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d36c:	68fb      	ldr	r3, [r7, #12]
 801d36e:	685b      	ldr	r3, [r3, #4]
 801d370:	60fb      	str	r3, [r7, #12]
 801d372:	e7e6      	b.n	801d342 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 801d374:	687b      	ldr	r3, [r7, #4]
 801d376:	681b      	ldr	r3, [r3, #0]
 801d378:	3388      	adds	r3, #136	; 0x88
 801d37a:	681b      	ldr	r3, [r3, #0]
 801d37c:	6878      	ldr	r0, [r7, #4]
 801d37e:	4798      	blx	r3
}
 801d380:	bf00      	nop
 801d382:	3710      	adds	r7, #16
 801d384:	46bd      	mov	sp, r7
 801d386:	bd80      	pop	{r7, pc}

0801d388 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 801d388:	b580      	push	{r7, lr}
 801d38a:	b084      	sub	sp, #16
 801d38c:	af00      	add	r7, sp, #0
 801d38e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d390:	687b      	ldr	r3, [r7, #4]
 801d392:	685b      	ldr	r3, [r3, #4]
 801d394:	60fb      	str	r3, [r7, #12]
 801d396:	68fb      	ldr	r3, [r7, #12]
 801d398:	2b00      	cmp	r3, #0
 801d39a:	d01b      	beq.n	801d3d4 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801d39c:	68fb      	ldr	r3, [r7, #12]
 801d39e:	681a      	ldr	r2, [r3, #0]
 801d3a0:	68fb      	ldr	r3, [r7, #12]
 801d3a2:	681b      	ldr	r3, [r3, #0]
 801d3a4:	681b      	ldr	r3, [r3, #0]
 801d3a6:	33c8      	adds	r3, #200	; 0xc8
 801d3a8:	681b      	ldr	r3, [r3, #0]
 801d3aa:	4610      	mov	r0, r2
 801d3ac:	4798      	blx	r3
 801d3ae:	4603      	mov	r3, r0
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	d00b      	beq.n	801d3cc <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 801d3b4:	68fb      	ldr	r3, [r7, #12]
 801d3b6:	681a      	ldr	r2, [r3, #0]
 801d3b8:	68fb      	ldr	r3, [r7, #12]
 801d3ba:	681b      	ldr	r3, [r3, #0]
 801d3bc:	681b      	ldr	r3, [r3, #0]
 801d3be:	33ec      	adds	r3, #236	; 0xec
 801d3c0:	681b      	ldr	r3, [r3, #0]
 801d3c2:	4610      	mov	r0, r2
 801d3c4:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 801d3c6:	68fb      	ldr	r3, [r7, #12]
 801d3c8:	2200      	movs	r2, #0
 801d3ca:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d3cc:	68fb      	ldr	r3, [r7, #12]
 801d3ce:	685b      	ldr	r3, [r3, #4]
 801d3d0:	60fb      	str	r3, [r7, #12]
 801d3d2:	e7e0      	b.n	801d396 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 801d3d4:	687b      	ldr	r3, [r7, #4]
 801d3d6:	681b      	ldr	r3, [r3, #0]
 801d3d8:	3388      	adds	r3, #136	; 0x88
 801d3da:	681b      	ldr	r3, [r3, #0]
 801d3dc:	6878      	ldr	r0, [r7, #4]
 801d3de:	4798      	blx	r3
}
 801d3e0:	bf00      	nop
 801d3e2:	3710      	adds	r7, #16
 801d3e4:	46bd      	mov	sp, r7
 801d3e6:	bd80      	pop	{r7, pc}

0801d3e8 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801d3e8:	b580      	push	{r7, lr}
 801d3ea:	b084      	sub	sp, #16
 801d3ec:	af00      	add	r7, sp, #0
 801d3ee:	6078      	str	r0, [r7, #4]
 801d3f0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d3f2:	687b      	ldr	r3, [r7, #4]
 801d3f4:	685b      	ldr	r3, [r3, #4]
 801d3f6:	60fb      	str	r3, [r7, #12]
 801d3f8:	68fb      	ldr	r3, [r7, #12]
 801d3fa:	2b00      	cmp	r3, #0
 801d3fc:	d016      	beq.n	801d42c <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801d3fe:	68fb      	ldr	r3, [r7, #12]
 801d400:	681a      	ldr	r2, [r3, #0]
 801d402:	68fb      	ldr	r3, [r7, #12]
 801d404:	681b      	ldr	r3, [r3, #0]
 801d406:	681b      	ldr	r3, [r3, #0]
 801d408:	33a8      	adds	r3, #168	; 0xa8
 801d40a:	681b      	ldr	r3, [r3, #0]
 801d40c:	6839      	ldr	r1, [r7, #0]
 801d40e:	4610      	mov	r0, r2
 801d410:	4798      	blx	r3
 801d412:	4603      	mov	r3, r0
 801d414:	f083 0301 	eor.w	r3, r3, #1
 801d418:	b2db      	uxtb	r3, r3
 801d41a:	2b00      	cmp	r3, #0
 801d41c:	d002      	beq.n	801d424 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801d41e:	68fb      	ldr	r3, [r7, #12]
 801d420:	2200      	movs	r2, #0
 801d422:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d424:	68fb      	ldr	r3, [r7, #12]
 801d426:	685b      	ldr	r3, [r3, #4]
 801d428:	60fb      	str	r3, [r7, #12]
 801d42a:	e7e5      	b.n	801d3f8 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801d42c:	687b      	ldr	r3, [r7, #4]
 801d42e:	681b      	ldr	r3, [r3, #0]
 801d430:	3388      	adds	r3, #136	; 0x88
 801d432:	681b      	ldr	r3, [r3, #0]
 801d434:	6878      	ldr	r0, [r7, #4]
 801d436:	4798      	blx	r3
}
 801d438:	bf00      	nop
 801d43a:	3710      	adds	r7, #16
 801d43c:	46bd      	mov	sp, r7
 801d43e:	bd80      	pop	{r7, pc}

0801d440 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 801d440:	b580      	push	{r7, lr}
 801d442:	b084      	sub	sp, #16
 801d444:	af00      	add	r7, sp, #0
 801d446:	6078      	str	r0, [r7, #4]
 801d448:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d44a:	687b      	ldr	r3, [r7, #4]
 801d44c:	685b      	ldr	r3, [r3, #4]
 801d44e:	60fb      	str	r3, [r7, #12]
 801d450:	68fb      	ldr	r3, [r7, #12]
 801d452:	2b00      	cmp	r3, #0
 801d454:	d016      	beq.n	801d484 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801d456:	68fb      	ldr	r3, [r7, #12]
 801d458:	681a      	ldr	r2, [r3, #0]
 801d45a:	68fb      	ldr	r3, [r7, #12]
 801d45c:	681b      	ldr	r3, [r3, #0]
 801d45e:	681b      	ldr	r3, [r3, #0]
 801d460:	33b0      	adds	r3, #176	; 0xb0
 801d462:	681b      	ldr	r3, [r3, #0]
 801d464:	6839      	ldr	r1, [r7, #0]
 801d466:	4610      	mov	r0, r2
 801d468:	4798      	blx	r3
 801d46a:	4603      	mov	r3, r0
 801d46c:	f083 0301 	eor.w	r3, r3, #1
 801d470:	b2db      	uxtb	r3, r3
 801d472:	2b00      	cmp	r3, #0
 801d474:	d002      	beq.n	801d47c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801d476:	68fb      	ldr	r3, [r7, #12]
 801d478:	2200      	movs	r2, #0
 801d47a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d47c:	68fb      	ldr	r3, [r7, #12]
 801d47e:	685b      	ldr	r3, [r3, #4]
 801d480:	60fb      	str	r3, [r7, #12]
 801d482:	e7e5      	b.n	801d450 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	681b      	ldr	r3, [r3, #0]
 801d488:	3388      	adds	r3, #136	; 0x88
 801d48a:	681b      	ldr	r3, [r3, #0]
 801d48c:	6878      	ldr	r0, [r7, #4]
 801d48e:	4798      	blx	r3
}
 801d490:	bf00      	nop
 801d492:	3710      	adds	r7, #16
 801d494:	46bd      	mov	sp, r7
 801d496:	bd80      	pop	{r7, pc}

0801d498 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 801d498:	b580      	push	{r7, lr}
 801d49a:	b084      	sub	sp, #16
 801d49c:	af00      	add	r7, sp, #0
 801d49e:	6078      	str	r0, [r7, #4]
 801d4a0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d4a2:	687b      	ldr	r3, [r7, #4]
 801d4a4:	685b      	ldr	r3, [r3, #4]
 801d4a6:	60fb      	str	r3, [r7, #12]
 801d4a8:	68fb      	ldr	r3, [r7, #12]
 801d4aa:	2b00      	cmp	r3, #0
 801d4ac:	d016      	beq.n	801d4dc <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801d4ae:	68fb      	ldr	r3, [r7, #12]
 801d4b0:	681a      	ldr	r2, [r3, #0]
 801d4b2:	68fb      	ldr	r3, [r7, #12]
 801d4b4:	681b      	ldr	r3, [r3, #0]
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	33ac      	adds	r3, #172	; 0xac
 801d4ba:	681b      	ldr	r3, [r3, #0]
 801d4bc:	6839      	ldr	r1, [r7, #0]
 801d4be:	4610      	mov	r0, r2
 801d4c0:	4798      	blx	r3
 801d4c2:	4603      	mov	r3, r0
 801d4c4:	f083 0301 	eor.w	r3, r3, #1
 801d4c8:	b2db      	uxtb	r3, r3
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	d002      	beq.n	801d4d4 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801d4ce:	68fb      	ldr	r3, [r7, #12]
 801d4d0:	2200      	movs	r2, #0
 801d4d2:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d4d4:	68fb      	ldr	r3, [r7, #12]
 801d4d6:	685b      	ldr	r3, [r3, #4]
 801d4d8:	60fb      	str	r3, [r7, #12]
 801d4da:	e7e5      	b.n	801d4a8 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801d4dc:	687b      	ldr	r3, [r7, #4]
 801d4de:	681b      	ldr	r3, [r3, #0]
 801d4e0:	3388      	adds	r3, #136	; 0x88
 801d4e2:	681b      	ldr	r3, [r3, #0]
 801d4e4:	6878      	ldr	r0, [r7, #4]
 801d4e6:	4798      	blx	r3
}
 801d4e8:	bf00      	nop
 801d4ea:	3710      	adds	r7, #16
 801d4ec:	46bd      	mov	sp, r7
 801d4ee:	bd80      	pop	{r7, pc}

0801d4f0 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801d4f0:	b580      	push	{r7, lr}
 801d4f2:	b084      	sub	sp, #16
 801d4f4:	af00      	add	r7, sp, #0
 801d4f6:	6078      	str	r0, [r7, #4]
 801d4f8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d4fa:	687b      	ldr	r3, [r7, #4]
 801d4fc:	685b      	ldr	r3, [r3, #4]
 801d4fe:	60fb      	str	r3, [r7, #12]
 801d500:	68fb      	ldr	r3, [r7, #12]
 801d502:	2b00      	cmp	r3, #0
 801d504:	d016      	beq.n	801d534 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801d506:	68fb      	ldr	r3, [r7, #12]
 801d508:	681a      	ldr	r2, [r3, #0]
 801d50a:	68fb      	ldr	r3, [r7, #12]
 801d50c:	681b      	ldr	r3, [r3, #0]
 801d50e:	681b      	ldr	r3, [r3, #0]
 801d510:	33b4      	adds	r3, #180	; 0xb4
 801d512:	681b      	ldr	r3, [r3, #0]
 801d514:	6839      	ldr	r1, [r7, #0]
 801d516:	4610      	mov	r0, r2
 801d518:	4798      	blx	r3
 801d51a:	4603      	mov	r3, r0
 801d51c:	f083 0301 	eor.w	r3, r3, #1
 801d520:	b2db      	uxtb	r3, r3
 801d522:	2b00      	cmp	r3, #0
 801d524:	d002      	beq.n	801d52c <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801d526:	68fb      	ldr	r3, [r7, #12]
 801d528:	2200      	movs	r2, #0
 801d52a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d52c:	68fb      	ldr	r3, [r7, #12]
 801d52e:	685b      	ldr	r3, [r3, #4]
 801d530:	60fb      	str	r3, [r7, #12]
 801d532:	e7e5      	b.n	801d500 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801d534:	687b      	ldr	r3, [r7, #4]
 801d536:	681b      	ldr	r3, [r3, #0]
 801d538:	3388      	adds	r3, #136	; 0x88
 801d53a:	681b      	ldr	r3, [r3, #0]
 801d53c:	6878      	ldr	r0, [r7, #4]
 801d53e:	4798      	blx	r3
}
 801d540:	bf00      	nop
 801d542:	3710      	adds	r7, #16
 801d544:	46bd      	mov	sp, r7
 801d546:	bd80      	pop	{r7, pc}

0801d548 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801d548:	b580      	push	{r7, lr}
 801d54a:	b084      	sub	sp, #16
 801d54c:	af00      	add	r7, sp, #0
 801d54e:	6078      	str	r0, [r7, #4]
 801d550:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d552:	687b      	ldr	r3, [r7, #4]
 801d554:	685b      	ldr	r3, [r3, #4]
 801d556:	60fb      	str	r3, [r7, #12]
 801d558:	68fb      	ldr	r3, [r7, #12]
 801d55a:	2b00      	cmp	r3, #0
 801d55c:	d016      	beq.n	801d58c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801d55e:	68fb      	ldr	r3, [r7, #12]
 801d560:	681a      	ldr	r2, [r3, #0]
 801d562:	68fb      	ldr	r3, [r7, #12]
 801d564:	681b      	ldr	r3, [r3, #0]
 801d566:	681b      	ldr	r3, [r3, #0]
 801d568:	33bc      	adds	r3, #188	; 0xbc
 801d56a:	681b      	ldr	r3, [r3, #0]
 801d56c:	6839      	ldr	r1, [r7, #0]
 801d56e:	4610      	mov	r0, r2
 801d570:	4798      	blx	r3
 801d572:	4603      	mov	r3, r0
 801d574:	f083 0301 	eor.w	r3, r3, #1
 801d578:	b2db      	uxtb	r3, r3
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	d002      	beq.n	801d584 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801d57e:	68fb      	ldr	r3, [r7, #12]
 801d580:	2200      	movs	r2, #0
 801d582:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d584:	68fb      	ldr	r3, [r7, #12]
 801d586:	685b      	ldr	r3, [r3, #4]
 801d588:	60fb      	str	r3, [r7, #12]
 801d58a:	e7e5      	b.n	801d558 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801d58c:	687b      	ldr	r3, [r7, #4]
 801d58e:	681b      	ldr	r3, [r3, #0]
 801d590:	3388      	adds	r3, #136	; 0x88
 801d592:	681b      	ldr	r3, [r3, #0]
 801d594:	6878      	ldr	r0, [r7, #4]
 801d596:	4798      	blx	r3
}
 801d598:	bf00      	nop
 801d59a:	3710      	adds	r7, #16
 801d59c:	46bd      	mov	sp, r7
 801d59e:	bd80      	pop	{r7, pc}

0801d5a0 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801d5a0:	b580      	push	{r7, lr}
 801d5a2:	b084      	sub	sp, #16
 801d5a4:	af00      	add	r7, sp, #0
 801d5a6:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d5a8:	687b      	ldr	r3, [r7, #4]
 801d5aa:	685b      	ldr	r3, [r3, #4]
 801d5ac:	60fb      	str	r3, [r7, #12]
 801d5ae:	68fb      	ldr	r3, [r7, #12]
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	d01d      	beq.n	801d5f0 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801d5b4:	68fb      	ldr	r3, [r7, #12]
 801d5b6:	681a      	ldr	r2, [r3, #0]
 801d5b8:	68fb      	ldr	r3, [r7, #12]
 801d5ba:	681b      	ldr	r3, [r3, #0]
 801d5bc:	681b      	ldr	r3, [r3, #0]
 801d5be:	33c8      	adds	r3, #200	; 0xc8
 801d5c0:	681b      	ldr	r3, [r3, #0]
 801d5c2:	4610      	mov	r0, r2
 801d5c4:	4798      	blx	r3
 801d5c6:	4603      	mov	r3, r0
 801d5c8:	2b00      	cmp	r3, #0
 801d5ca:	d00d      	beq.n	801d5e8 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801d5cc:	68fb      	ldr	r3, [r7, #12]
 801d5ce:	681b      	ldr	r3, [r3, #0]
 801d5d0:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801d5d2:	68fb      	ldr	r3, [r7, #12]
 801d5d4:	2200      	movs	r2, #0
 801d5d6:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801d5d8:	687b      	ldr	r3, [r7, #4]
 801d5da:	681b      	ldr	r3, [r3, #0]
 801d5dc:	3388      	adds	r3, #136	; 0x88
 801d5de:	681b      	ldr	r3, [r3, #0]
 801d5e0:	6878      	ldr	r0, [r7, #4]
 801d5e2:	4798      	blx	r3
            return matchingCall;
 801d5e4:	68bb      	ldr	r3, [r7, #8]
 801d5e6:	e004      	b.n	801d5f2 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d5e8:	68fb      	ldr	r3, [r7, #12]
 801d5ea:	685b      	ldr	r3, [r3, #4]
 801d5ec:	60fb      	str	r3, [r7, #12]
 801d5ee:	e7de      	b.n	801d5ae <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801d5f0:	2300      	movs	r3, #0
}
 801d5f2:	4618      	mov	r0, r3
 801d5f4:	3710      	adds	r7, #16
 801d5f6:	46bd      	mov	sp, r7
 801d5f8:	bd80      	pop	{r7, pc}

0801d5fa <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801d5fa:	b580      	push	{r7, lr}
 801d5fc:	b084      	sub	sp, #16
 801d5fe:	af00      	add	r7, sp, #0
 801d600:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d602:	687b      	ldr	r3, [r7, #4]
 801d604:	685b      	ldr	r3, [r3, #4]
 801d606:	60fb      	str	r3, [r7, #12]
 801d608:	68fb      	ldr	r3, [r7, #12]
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	d012      	beq.n	801d634 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801d60e:	68fb      	ldr	r3, [r7, #12]
 801d610:	681a      	ldr	r2, [r3, #0]
 801d612:	68fb      	ldr	r3, [r7, #12]
 801d614:	681b      	ldr	r3, [r3, #0]
 801d616:	681b      	ldr	r3, [r3, #0]
 801d618:	33cc      	adds	r3, #204	; 0xcc
 801d61a:	681b      	ldr	r3, [r3, #0]
 801d61c:	4610      	mov	r0, r2
 801d61e:	4798      	blx	r3
 801d620:	4603      	mov	r3, r0
 801d622:	2b00      	cmp	r3, #0
 801d624:	d002      	beq.n	801d62c <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801d626:	68fb      	ldr	r3, [r7, #12]
 801d628:	681b      	ldr	r3, [r3, #0]
 801d62a:	e004      	b.n	801d636 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d62c:	68fb      	ldr	r3, [r7, #12]
 801d62e:	685b      	ldr	r3, [r3, #4]
 801d630:	60fb      	str	r3, [r7, #12]
 801d632:	e7e9      	b.n	801d608 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801d634:	2300      	movs	r3, #0
}
 801d636:	4618      	mov	r0, r3
 801d638:	3710      	adds	r7, #16
 801d63a:	46bd      	mov	sp, r7
 801d63c:	bd80      	pop	{r7, pc}

0801d63e <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801d63e:	b580      	push	{r7, lr}
 801d640:	b084      	sub	sp, #16
 801d642:	af00      	add	r7, sp, #0
 801d644:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d646:	687b      	ldr	r3, [r7, #4]
 801d648:	685b      	ldr	r3, [r3, #4]
 801d64a:	60fb      	str	r3, [r7, #12]
 801d64c:	68fb      	ldr	r3, [r7, #12]
 801d64e:	2b00      	cmp	r3, #0
 801d650:	d01d      	beq.n	801d68e <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801d652:	68fb      	ldr	r3, [r7, #12]
 801d654:	681a      	ldr	r2, [r3, #0]
 801d656:	68fb      	ldr	r3, [r7, #12]
 801d658:	681b      	ldr	r3, [r3, #0]
 801d65a:	681b      	ldr	r3, [r3, #0]
 801d65c:	33cc      	adds	r3, #204	; 0xcc
 801d65e:	681b      	ldr	r3, [r3, #0]
 801d660:	4610      	mov	r0, r2
 801d662:	4798      	blx	r3
 801d664:	4603      	mov	r3, r0
 801d666:	2b00      	cmp	r3, #0
 801d668:	d00d      	beq.n	801d686 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801d66a:	68fb      	ldr	r3, [r7, #12]
 801d66c:	681b      	ldr	r3, [r3, #0]
 801d66e:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801d670:	68fb      	ldr	r3, [r7, #12]
 801d672:	2200      	movs	r2, #0
 801d674:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801d676:	687b      	ldr	r3, [r7, #4]
 801d678:	681b      	ldr	r3, [r3, #0]
 801d67a:	3388      	adds	r3, #136	; 0x88
 801d67c:	681b      	ldr	r3, [r3, #0]
 801d67e:	6878      	ldr	r0, [r7, #4]
 801d680:	4798      	blx	r3
            return matchingCall;
 801d682:	68bb      	ldr	r3, [r7, #8]
 801d684:	e004      	b.n	801d690 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d686:	68fb      	ldr	r3, [r7, #12]
 801d688:	685b      	ldr	r3, [r3, #4]
 801d68a:	60fb      	str	r3, [r7, #12]
 801d68c:	e7de      	b.n	801d64c <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801d68e:	2300      	movs	r3, #0
}
 801d690:	4618      	mov	r0, r3
 801d692:	3710      	adds	r7, #16
 801d694:	46bd      	mov	sp, r7
 801d696:	bd80      	pop	{r7, pc}

0801d698 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801d698:	b580      	push	{r7, lr}
 801d69a:	b086      	sub	sp, #24
 801d69c:	af00      	add	r7, sp, #0
 801d69e:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801d6a0:	687b      	ldr	r3, [r7, #4]
 801d6a2:	685b      	ldr	r3, [r3, #4]
 801d6a4:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801d6a6:	2300      	movs	r3, #0
 801d6a8:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801d6aa:	2300      	movs	r3, #0
 801d6ac:	60fb      	str	r3, [r7, #12]

    while (current) {
 801d6ae:	697b      	ldr	r3, [r7, #20]
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	d024      	beq.n	801d6fe <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801d6b4:	697b      	ldr	r3, [r7, #20]
 801d6b6:	681b      	ldr	r3, [r3, #0]
 801d6b8:	2b00      	cmp	r3, #0
 801d6ba:	d11a      	bne.n	801d6f2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801d6bc:	697b      	ldr	r3, [r7, #20]
 801d6be:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801d6c0:	693b      	ldr	r3, [r7, #16]
 801d6c2:	2b00      	cmp	r3, #0
 801d6c4:	d106      	bne.n	801d6d4 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801d6c6:	697b      	ldr	r3, [r7, #20]
 801d6c8:	685b      	ldr	r3, [r3, #4]
 801d6ca:	617b      	str	r3, [r7, #20]
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	697a      	ldr	r2, [r7, #20]
 801d6d0:	605a      	str	r2, [r3, #4]
 801d6d2:	e006      	b.n	801d6e2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801d6d4:	697b      	ldr	r3, [r7, #20]
 801d6d6:	685a      	ldr	r2, [r3, #4]
 801d6d8:	693b      	ldr	r3, [r7, #16]
 801d6da:	605a      	str	r2, [r3, #4]
 801d6dc:	693b      	ldr	r3, [r7, #16]
 801d6de:	685b      	ldr	r3, [r3, #4]
 801d6e0:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801d6e2:	68fb      	ldr	r3, [r7, #12]
 801d6e4:	2b00      	cmp	r3, #0
 801d6e6:	d0e2      	beq.n	801d6ae <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801d6e8:	2108      	movs	r1, #8
 801d6ea:	4618      	mov	r0, r3
 801d6ec:	f7ee f82e 	bl	800b74c <_ZdlPvj>
 801d6f0:	e7dd      	b.n	801d6ae <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801d6f2:	697b      	ldr	r3, [r7, #20]
 801d6f4:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801d6f6:	697b      	ldr	r3, [r7, #20]
 801d6f8:	685b      	ldr	r3, [r3, #4]
 801d6fa:	617b      	str	r3, [r7, #20]
    while (current) {
 801d6fc:	e7d7      	b.n	801d6ae <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801d6fe:	bf00      	nop
 801d700:	3718      	adds	r7, #24
 801d702:	46bd      	mov	sp, r7
 801d704:	bd80      	pop	{r7, pc}

0801d706 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801d706:	b580      	push	{r7, lr}
 801d708:	b084      	sub	sp, #16
 801d70a:	af00      	add	r7, sp, #0
 801d70c:	6078      	str	r0, [r7, #4]
    while (head_) {
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	685b      	ldr	r3, [r3, #4]
 801d712:	2b00      	cmp	r3, #0
 801d714:	d019      	beq.n	801d74a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	685b      	ldr	r3, [r3, #4]
 801d71a:	685b      	ldr	r3, [r3, #4]
 801d71c:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801d71e:	687b      	ldr	r3, [r7, #4]
 801d720:	685b      	ldr	r3, [r3, #4]
 801d722:	681b      	ldr	r3, [r3, #0]
 801d724:	2b00      	cmp	r3, #0
 801d726:	d004      	beq.n	801d732 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801d728:	681a      	ldr	r2, [r3, #0]
 801d72a:	3204      	adds	r2, #4
 801d72c:	6812      	ldr	r2, [r2, #0]
 801d72e:	4618      	mov	r0, r3
 801d730:	4790      	blx	r2
        delete head_;
 801d732:	687b      	ldr	r3, [r7, #4]
 801d734:	685b      	ldr	r3, [r3, #4]
 801d736:	2b00      	cmp	r3, #0
 801d738:	d003      	beq.n	801d742 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801d73a:	2108      	movs	r1, #8
 801d73c:	4618      	mov	r0, r3
 801d73e:	f7ee f805 	bl	800b74c <_ZdlPvj>
        head_ = next;
 801d742:	687b      	ldr	r3, [r7, #4]
 801d744:	68fa      	ldr	r2, [r7, #12]
 801d746:	605a      	str	r2, [r3, #4]
    while (head_) {
 801d748:	e7e1      	b.n	801d70e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801d74a:	bf00      	nop
 801d74c:	3710      	adds	r7, #16
 801d74e:	46bd      	mov	sp, r7
 801d750:	bd80      	pop	{r7, pc}

0801d752 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801d752:	b580      	push	{r7, lr}
 801d754:	b084      	sub	sp, #16
 801d756:	af00      	add	r7, sp, #0
 801d758:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d75a:	687b      	ldr	r3, [r7, #4]
 801d75c:	685b      	ldr	r3, [r3, #4]
 801d75e:	60fb      	str	r3, [r7, #12]
 801d760:	68fb      	ldr	r3, [r7, #12]
 801d762:	2b00      	cmp	r3, #0
 801d764:	d00c      	beq.n	801d780 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801d766:	68fb      	ldr	r3, [r7, #12]
 801d768:	681a      	ldr	r2, [r3, #0]
 801d76a:	68fb      	ldr	r3, [r7, #12]
 801d76c:	681b      	ldr	r3, [r3, #0]
 801d76e:	681b      	ldr	r3, [r3, #0]
 801d770:	33ec      	adds	r3, #236	; 0xec
 801d772:	681b      	ldr	r3, [r3, #0]
 801d774:	4610      	mov	r0, r2
 801d776:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d778:	68fb      	ldr	r3, [r7, #12]
 801d77a:	685b      	ldr	r3, [r3, #4]
 801d77c:	60fb      	str	r3, [r7, #12]
 801d77e:	e7ef      	b.n	801d760 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801d780:	bf00      	nop
 801d782:	3710      	adds	r7, #16
 801d784:	46bd      	mov	sp, r7
 801d786:	bd80      	pop	{r7, pc}

0801d788 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801d788:	b580      	push	{r7, lr}
 801d78a:	b084      	sub	sp, #16
 801d78c:	af00      	add	r7, sp, #0
 801d78e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	685b      	ldr	r3, [r3, #4]
 801d794:	60fb      	str	r3, [r7, #12]
 801d796:	68fb      	ldr	r3, [r7, #12]
 801d798:	2b00      	cmp	r3, #0
 801d79a:	d00c      	beq.n	801d7b6 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801d79c:	68fb      	ldr	r3, [r7, #12]
 801d79e:	681a      	ldr	r2, [r3, #0]
 801d7a0:	68fb      	ldr	r3, [r7, #12]
 801d7a2:	681b      	ldr	r3, [r3, #0]
 801d7a4:	681b      	ldr	r3, [r3, #0]
 801d7a6:	33e8      	adds	r3, #232	; 0xe8
 801d7a8:	681b      	ldr	r3, [r3, #0]
 801d7aa:	4610      	mov	r0, r2
 801d7ac:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d7ae:	68fb      	ldr	r3, [r7, #12]
 801d7b0:	685b      	ldr	r3, [r3, #4]
 801d7b2:	60fb      	str	r3, [r7, #12]
 801d7b4:	e7ef      	b.n	801d796 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801d7b6:	bf00      	nop
 801d7b8:	3710      	adds	r7, #16
 801d7ba:	46bd      	mov	sp, r7
 801d7bc:	bd80      	pop	{r7, pc}

0801d7be <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801d7be:	b580      	push	{r7, lr}
 801d7c0:	b084      	sub	sp, #16
 801d7c2:	af00      	add	r7, sp, #0
 801d7c4:	6078      	str	r0, [r7, #4]
 801d7c6:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	685b      	ldr	r3, [r3, #4]
 801d7cc:	60fb      	str	r3, [r7, #12]
 801d7ce:	68fb      	ldr	r3, [r7, #12]
 801d7d0:	2b00      	cmp	r3, #0
 801d7d2:	d00d      	beq.n	801d7f0 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801d7d4:	68fb      	ldr	r3, [r7, #12]
 801d7d6:	681a      	ldr	r2, [r3, #0]
 801d7d8:	68fb      	ldr	r3, [r7, #12]
 801d7da:	681b      	ldr	r3, [r3, #0]
 801d7dc:	681b      	ldr	r3, [r3, #0]
 801d7de:	33dc      	adds	r3, #220	; 0xdc
 801d7e0:	681b      	ldr	r3, [r3, #0]
 801d7e2:	6839      	ldr	r1, [r7, #0]
 801d7e4:	4610      	mov	r0, r2
 801d7e6:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d7e8:	68fb      	ldr	r3, [r7, #12]
 801d7ea:	685b      	ldr	r3, [r3, #4]
 801d7ec:	60fb      	str	r3, [r7, #12]
 801d7ee:	e7ee      	b.n	801d7ce <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801d7f0:	bf00      	nop
 801d7f2:	3710      	adds	r7, #16
 801d7f4:	46bd      	mov	sp, r7
 801d7f6:	bd80      	pop	{r7, pc}

0801d7f8 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801d7f8:	b580      	push	{r7, lr}
 801d7fa:	b084      	sub	sp, #16
 801d7fc:	af00      	add	r7, sp, #0
 801d7fe:	6078      	str	r0, [r7, #4]
 801d800:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d802:	687b      	ldr	r3, [r7, #4]
 801d804:	685b      	ldr	r3, [r3, #4]
 801d806:	60fb      	str	r3, [r7, #12]
 801d808:	68fb      	ldr	r3, [r7, #12]
 801d80a:	2b00      	cmp	r3, #0
 801d80c:	d00d      	beq.n	801d82a <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801d80e:	68fb      	ldr	r3, [r7, #12]
 801d810:	681a      	ldr	r2, [r3, #0]
 801d812:	68fb      	ldr	r3, [r7, #12]
 801d814:	681b      	ldr	r3, [r3, #0]
 801d816:	681b      	ldr	r3, [r3, #0]
 801d818:	33e0      	adds	r3, #224	; 0xe0
 801d81a:	681b      	ldr	r3, [r3, #0]
 801d81c:	6839      	ldr	r1, [r7, #0]
 801d81e:	4610      	mov	r0, r2
 801d820:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d822:	68fb      	ldr	r3, [r7, #12]
 801d824:	685b      	ldr	r3, [r3, #4]
 801d826:	60fb      	str	r3, [r7, #12]
 801d828:	e7ee      	b.n	801d808 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801d82a:	bf00      	nop
 801d82c:	3710      	adds	r7, #16
 801d82e:	46bd      	mov	sp, r7
 801d830:	bd80      	pop	{r7, pc}
	...

0801d834 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801d834:	b590      	push	{r4, r7, lr}
 801d836:	b087      	sub	sp, #28
 801d838:	af00      	add	r7, sp, #0
 801d83a:	60f8      	str	r0, [r7, #12]
 801d83c:	60b9      	str	r1, [r7, #8]
 801d83e:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801d840:	68b9      	ldr	r1, [r7, #8]
 801d842:	68f8      	ldr	r0, [r7, #12]
 801d844:	f7f0 fb85 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801d848:	f107 0310 	add.w	r3, r7, #16
 801d84c:	490f      	ldr	r1, [pc, #60]	; (801d88c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801d84e:	4618      	mov	r0, r3
 801d850:	f7f0 fb2b 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801d854:	f107 0310 	add.w	r3, r7, #16
 801d858:	4619      	mov	r1, r3
 801d85a:	68f8      	ldr	r0, [r7, #12]
 801d85c:	f7f0 fee9 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801d860:	4603      	mov	r3, r0
 801d862:	461c      	mov	r4, r3
 801d864:	f107 0310 	add.w	r3, r7, #16
 801d868:	4618      	mov	r0, r3
 801d86a:	f7f0 fed6 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801d86e:	2c00      	cmp	r4, #0
 801d870:	d007      	beq.n	801d882 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801d872:	6879      	ldr	r1, [r7, #4]
 801d874:	68f8      	ldr	r0, [r7, #12]
 801d876:	f7f0 ff4d 	bl	800e714 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801d87a:	4905      	ldr	r1, [pc, #20]	; (801d890 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801d87c:	68f8      	ldr	r0, [r7, #12]
 801d87e:	f7f0 ff5b 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801d882:	bf00      	nop
}
 801d884:	68f8      	ldr	r0, [r7, #12]
 801d886:	371c      	adds	r7, #28
 801d888:	46bd      	mov	sp, r7
 801d88a:	bd90      	pop	{r4, r7, pc}
 801d88c:	08027aac 	.word	0x08027aac
 801d890:	08027ab0 	.word	0x08027ab0

0801d894 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801d894:	b590      	push	{r4, r7, lr}
 801d896:	b087      	sub	sp, #28
 801d898:	af00      	add	r7, sp, #0
 801d89a:	60f8      	str	r0, [r7, #12]
 801d89c:	60b9      	str	r1, [r7, #8]
 801d89e:	607a      	str	r2, [r7, #4]
 801d8a0:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801d8a2:	68b9      	ldr	r1, [r7, #8]
 801d8a4:	68f8      	ldr	r0, [r7, #12]
 801d8a6:	f7f0 fb54 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801d8aa:	f107 0310 	add.w	r3, r7, #16
 801d8ae:	4912      	ldr	r1, [pc, #72]	; (801d8f8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801d8b0:	4618      	mov	r0, r3
 801d8b2:	f7f0 fafa 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801d8b6:	f107 0310 	add.w	r3, r7, #16
 801d8ba:	4619      	mov	r1, r3
 801d8bc:	68f8      	ldr	r0, [r7, #12]
 801d8be:	f7f0 fefd 	bl	800e6bc <_ZneRK12SimpleStringS1_>
 801d8c2:	4603      	mov	r3, r0
 801d8c4:	461c      	mov	r4, r3
 801d8c6:	f107 0310 	add.w	r3, r7, #16
 801d8ca:	4618      	mov	r0, r3
 801d8cc:	f7f0 fea5 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801d8d0:	2c00      	cmp	r4, #0
 801d8d2:	d003      	beq.n	801d8dc <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801d8d4:	4909      	ldr	r1, [pc, #36]	; (801d8fc <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801d8d6:	68f8      	ldr	r0, [r7, #12]
 801d8d8:	f7f0 ff2e 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801d8dc:	6879      	ldr	r1, [r7, #4]
 801d8de:	68f8      	ldr	r0, [r7, #12]
 801d8e0:	f7f0 ff18 	bl	800e714 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801d8e4:	6839      	ldr	r1, [r7, #0]
 801d8e6:	68f8      	ldr	r0, [r7, #12]
 801d8e8:	f7f0 ff14 	bl	800e714 <_ZN12SimpleStringpLERKS_>
    return str;
 801d8ec:	bf00      	nop
}
 801d8ee:	68f8      	ldr	r0, [r7, #12]
 801d8f0:	371c      	adds	r7, #28
 801d8f2:	46bd      	mov	sp, r7
 801d8f4:	bd90      	pop	{r4, r7, pc}
 801d8f6:	bf00      	nop
 801d8f8:	08027aac 	.word	0x08027aac
 801d8fc:	08027ab8 	.word	0x08027ab8

0801d900 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801d900:	b580      	push	{r7, lr}
 801d902:	b08c      	sub	sp, #48	; 0x30
 801d904:	af00      	add	r7, sp, #0
 801d906:	60f8      	str	r0, [r7, #12]
 801d908:	60b9      	str	r1, [r7, #8]
 801d90a:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801d90c:	f107 0314 	add.w	r3, r7, #20
 801d910:	4929      	ldr	r1, [pc, #164]	; (801d9b8 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801d912:	4618      	mov	r0, r3
 801d914:	f7f0 fac9 	bl	800deaa <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d918:	68bb      	ldr	r3, [r7, #8]
 801d91a:	685b      	ldr	r3, [r3, #4]
 801d91c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d920:	2b00      	cmp	r3, #0
 801d922:	d038      	beq.n	801d996 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801d924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d926:	681a      	ldr	r2, [r3, #0]
 801d928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d92a:	681b      	ldr	r3, [r3, #0]
 801d92c:	681b      	ldr	r3, [r3, #0]
 801d92e:	33c0      	adds	r3, #192	; 0xc0
 801d930:	681b      	ldr	r3, [r3, #0]
 801d932:	4610      	mov	r0, r2
 801d934:	4798      	blx	r3
 801d936:	4603      	mov	r3, r0
 801d938:	f083 0301 	eor.w	r3, r3, #1
 801d93c:	b2db      	uxtb	r3, r3
 801d93e:	2b00      	cmp	r3, #0
 801d940:	d025      	beq.n	801d98e <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801d942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d944:	6819      	ldr	r1, [r3, #0]
 801d946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d948:	681b      	ldr	r3, [r3, #0]
 801d94a:	681b      	ldr	r3, [r3, #0]
 801d94c:	33f0      	adds	r3, #240	; 0xf0
 801d94e:	681b      	ldr	r3, [r3, #0]
 801d950:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801d954:	4610      	mov	r0, r2
 801d956:	4798      	blx	r3
 801d958:	f107 001c 	add.w	r0, r7, #28
 801d95c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d960:	f107 0114 	add.w	r1, r7, #20
 801d964:	687a      	ldr	r2, [r7, #4]
 801d966:	f7ff ff95 	bl	801d894 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801d96a:	f107 021c 	add.w	r2, r7, #28
 801d96e:	f107 0314 	add.w	r3, r7, #20
 801d972:	4611      	mov	r1, r2
 801d974:	4618      	mov	r0, r3
 801d976:	f7f0 fb04 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801d97a:	f107 031c 	add.w	r3, r7, #28
 801d97e:	4618      	mov	r0, r3
 801d980:	f7f0 fe4b 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801d984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d988:	4618      	mov	r0, r3
 801d98a:	f7f0 fe46 	bl	800e61a <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d990:	685b      	ldr	r3, [r3, #4]
 801d992:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d994:	e7c3      	b.n	801d91e <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801d996:	68fb      	ldr	r3, [r7, #12]
 801d998:	f107 0114 	add.w	r1, r7, #20
 801d99c:	687a      	ldr	r2, [r7, #4]
 801d99e:	4618      	mov	r0, r3
 801d9a0:	f7ff ff48 	bl	801d834 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801d9a4:	f107 0314 	add.w	r3, r7, #20
 801d9a8:	4618      	mov	r0, r3
 801d9aa:	f7f0 fe36 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801d9ae:	bf00      	nop
}
 801d9b0:	68f8      	ldr	r0, [r7, #12]
 801d9b2:	3730      	adds	r7, #48	; 0x30
 801d9b4:	46bd      	mov	sp, r7
 801d9b6:	bd80      	pop	{r7, pc}
 801d9b8:	08027aac 	.word	0x08027aac

0801d9bc <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801d9bc:	b580      	push	{r7, lr}
 801d9be:	b08c      	sub	sp, #48	; 0x30
 801d9c0:	af00      	add	r7, sp, #0
 801d9c2:	60f8      	str	r0, [r7, #12]
 801d9c4:	60b9      	str	r1, [r7, #8]
 801d9c6:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801d9c8:	f107 0314 	add.w	r3, r7, #20
 801d9cc:	4928      	ldr	r1, [pc, #160]	; (801da70 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801d9ce:	4618      	mov	r0, r3
 801d9d0:	f7f0 fa6b 	bl	800deaa <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d9d4:	68bb      	ldr	r3, [r7, #8]
 801d9d6:	685b      	ldr	r3, [r3, #4]
 801d9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9dc:	2b00      	cmp	r3, #0
 801d9de:	d035      	beq.n	801da4c <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801d9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9e2:	681a      	ldr	r2, [r3, #0]
 801d9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9e6:	681b      	ldr	r3, [r3, #0]
 801d9e8:	681b      	ldr	r3, [r3, #0]
 801d9ea:	33c0      	adds	r3, #192	; 0xc0
 801d9ec:	681b      	ldr	r3, [r3, #0]
 801d9ee:	4610      	mov	r0, r2
 801d9f0:	4798      	blx	r3
 801d9f2:	4603      	mov	r3, r0
 801d9f4:	2b00      	cmp	r3, #0
 801d9f6:	d025      	beq.n	801da44 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801d9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9fa:	6819      	ldr	r1, [r3, #0]
 801d9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9fe:	681b      	ldr	r3, [r3, #0]
 801da00:	681b      	ldr	r3, [r3, #0]
 801da02:	33f0      	adds	r3, #240	; 0xf0
 801da04:	681b      	ldr	r3, [r3, #0]
 801da06:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801da0a:	4610      	mov	r0, r2
 801da0c:	4798      	blx	r3
 801da0e:	f107 001c 	add.w	r0, r7, #28
 801da12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801da16:	f107 0114 	add.w	r1, r7, #20
 801da1a:	687a      	ldr	r2, [r7, #4]
 801da1c:	f7ff ff3a 	bl	801d894 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801da20:	f107 021c 	add.w	r2, r7, #28
 801da24:	f107 0314 	add.w	r3, r7, #20
 801da28:	4611      	mov	r1, r2
 801da2a:	4618      	mov	r0, r3
 801da2c:	f7f0 faa9 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801da30:	f107 031c 	add.w	r3, r7, #28
 801da34:	4618      	mov	r0, r3
 801da36:	f7f0 fdf0 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801da3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801da3e:	4618      	mov	r0, r3
 801da40:	f7f0 fdeb 	bl	800e61a <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801da44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da46:	685b      	ldr	r3, [r3, #4]
 801da48:	62fb      	str	r3, [r7, #44]	; 0x2c
 801da4a:	e7c6      	b.n	801d9da <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801da4c:	68fb      	ldr	r3, [r7, #12]
 801da4e:	f107 0114 	add.w	r1, r7, #20
 801da52:	687a      	ldr	r2, [r7, #4]
 801da54:	4618      	mov	r0, r3
 801da56:	f7ff feed 	bl	801d834 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801da5a:	f107 0314 	add.w	r3, r7, #20
 801da5e:	4618      	mov	r0, r3
 801da60:	f7f0 fddb 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801da64:	bf00      	nop
}
 801da66:	68f8      	ldr	r0, [r7, #12]
 801da68:	3730      	adds	r7, #48	; 0x30
 801da6a:	46bd      	mov	sp, r7
 801da6c:	bd80      	pop	{r7, pc}
 801da6e:	bf00      	nop
 801da70:	08027aac 	.word	0x08027aac

0801da74 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801da74:	b580      	push	{r7, lr}
 801da76:	b08e      	sub	sp, #56	; 0x38
 801da78:	af00      	add	r7, sp, #0
 801da7a:	6078      	str	r0, [r7, #4]
 801da7c:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801da7e:	f107 030c 	add.w	r3, r7, #12
 801da82:	4936      	ldr	r1, [pc, #216]	; (801db5c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801da84:	4618      	mov	r0, r3
 801da86:	f7f0 fa10 	bl	800deaa <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801da8a:	683b      	ldr	r3, [r7, #0]
 801da8c:	685b      	ldr	r3, [r3, #4]
 801da8e:	637b      	str	r3, [r7, #52]	; 0x34
 801da90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da92:	2b00      	cmp	r3, #0
 801da94:	d044      	beq.n	801db20 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801da96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da98:	681a      	ldr	r2, [r3, #0]
 801da9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da9c:	681b      	ldr	r3, [r3, #0]
 801da9e:	681b      	ldr	r3, [r3, #0]
 801daa0:	33cc      	adds	r3, #204	; 0xcc
 801daa2:	681b      	ldr	r3, [r3, #0]
 801daa4:	4610      	mov	r0, r2
 801daa6:	4798      	blx	r3
 801daa8:	4603      	mov	r3, r0
 801daaa:	f083 0301 	eor.w	r3, r3, #1
 801daae:	b2db      	uxtb	r3, r3
 801dab0:	2b00      	cmp	r3, #0
 801dab2:	d031      	beq.n	801db18 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801dab4:	f107 031c 	add.w	r3, r7, #28
 801dab8:	4928      	ldr	r1, [pc, #160]	; (801db5c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801daba:	4618      	mov	r0, r3
 801dabc:	f7f0 f9f5 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801dac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dac2:	6819      	ldr	r1, [r3, #0]
 801dac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	681b      	ldr	r3, [r3, #0]
 801daca:	33f4      	adds	r3, #244	; 0xf4
 801dacc:	681b      	ldr	r3, [r3, #0]
 801dace:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801dad2:	4610      	mov	r0, r2
 801dad4:	4798      	blx	r3
 801dad6:	f107 0014 	add.w	r0, r7, #20
 801dada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801dade:	f107 021c 	add.w	r2, r7, #28
 801dae2:	f107 010c 	add.w	r1, r7, #12
 801dae6:	f7ff fed5 	bl	801d894 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801daea:	f107 0214 	add.w	r2, r7, #20
 801daee:	f107 030c 	add.w	r3, r7, #12
 801daf2:	4611      	mov	r1, r2
 801daf4:	4618      	mov	r0, r3
 801daf6:	f7f0 fa44 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801dafa:	f107 0314 	add.w	r3, r7, #20
 801dafe:	4618      	mov	r0, r3
 801db00:	f7f0 fd8b 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801db04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801db08:	4618      	mov	r0, r3
 801db0a:	f7f0 fd86 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801db0e:	f107 031c 	add.w	r3, r7, #28
 801db12:	4618      	mov	r0, r3
 801db14:	f7f0 fd81 	bl	800e61a <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801db18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db1a:	685b      	ldr	r3, [r3, #4]
 801db1c:	637b      	str	r3, [r7, #52]	; 0x34
 801db1e:	e7b7      	b.n	801da90 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801db20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801db24:	490d      	ldr	r1, [pc, #52]	; (801db5c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801db26:	4618      	mov	r0, r3
 801db28:	f7f0 f9bf 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801db32:	f107 010c 	add.w	r1, r7, #12
 801db36:	4618      	mov	r0, r3
 801db38:	f7ff fe7c 	bl	801d834 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801db3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801db40:	4618      	mov	r0, r3
 801db42:	f7f0 fd6a 	bl	800e61a <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801db46:	f107 030c 	add.w	r3, r7, #12
 801db4a:	4618      	mov	r0, r3
 801db4c:	f7f0 fd65 	bl	800e61a <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801db50:	bf00      	nop
}
 801db52:	6878      	ldr	r0, [r7, #4]
 801db54:	3738      	adds	r7, #56	; 0x38
 801db56:	46bd      	mov	sp, r7
 801db58:	bd80      	pop	{r7, pc}
 801db5a:	bf00      	nop
 801db5c:	08027aac 	.word	0x08027aac

0801db60 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801db60:	b580      	push	{r7, lr}
 801db62:	b084      	sub	sp, #16
 801db64:	af00      	add	r7, sp, #0
 801db66:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801db68:	687b      	ldr	r3, [r7, #4]
 801db6a:	685b      	ldr	r3, [r3, #4]
 801db6c:	60fb      	str	r3, [r7, #12]
 801db6e:	68fb      	ldr	r3, [r7, #12]
 801db70:	2b00      	cmp	r3, #0
 801db72:	d014      	beq.n	801db9e <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801db74:	68fb      	ldr	r3, [r7, #12]
 801db76:	681a      	ldr	r2, [r3, #0]
 801db78:	68fb      	ldr	r3, [r7, #12]
 801db7a:	681b      	ldr	r3, [r3, #0]
 801db7c:	681b      	ldr	r3, [r3, #0]
 801db7e:	33d0      	adds	r3, #208	; 0xd0
 801db80:	681b      	ldr	r3, [r3, #0]
 801db82:	4610      	mov	r0, r2
 801db84:	4798      	blx	r3
 801db86:	4603      	mov	r3, r0
 801db88:	f083 0301 	eor.w	r3, r3, #1
 801db8c:	b2db      	uxtb	r3, r3
 801db8e:	2b00      	cmp	r3, #0
 801db90:	d001      	beq.n	801db96 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801db92:	2301      	movs	r3, #1
 801db94:	e004      	b.n	801dba0 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801db96:	68fb      	ldr	r3, [r7, #12]
 801db98:	685b      	ldr	r3, [r3, #4]
 801db9a:	60fb      	str	r3, [r7, #12]
 801db9c:	e7e7      	b.n	801db6e <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801db9e:	2300      	movs	r3, #0
}
 801dba0:	4618      	mov	r0, r3
 801dba2:	3710      	adds	r7, #16
 801dba4:	46bd      	mov	sp, r7
 801dba6:	bd80      	pop	{r7, pc}

0801dba8 <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801dba8:	b480      	push	{r7}
 801dbaa:	b083      	sub	sp, #12
 801dbac:	af00      	add	r7, sp, #0
 801dbae:	6078      	str	r0, [r7, #4]
 801dbb0:	460b      	mov	r3, r1
 801dbb2:	70fb      	strb	r3, [r7, #3]
 801dbb4:	687b      	ldr	r3, [r7, #4]
 801dbb6:	78fa      	ldrb	r2, [r7, #3]
 801dbb8:	711a      	strb	r2, [r3, #4]
 801dbba:	bf00      	nop
 801dbbc:	370c      	adds	r7, #12
 801dbbe:	46bd      	mov	sp, r7
 801dbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbc4:	4770      	bx	lr
	...

0801dbc8 <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801dbc8:	b580      	push	{r7, lr}
 801dbca:	b082      	sub	sp, #8
 801dbcc:	af00      	add	r7, sp, #0
 801dbce:	6078      	str	r0, [r7, #4]
 801dbd0:	460b      	mov	r3, r1
 801dbd2:	70fb      	strb	r3, [r7, #3]
 801dbd4:	687b      	ldr	r3, [r7, #4]
 801dbd6:	4618      	mov	r0, r3
 801dbd8:	f7ed ff6a 	bl	800bab0 <_ZN14TestTerminatorC1Ev>
 801dbdc:	4a05      	ldr	r2, [pc, #20]	; (801dbf4 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801dbde:	687b      	ldr	r3, [r7, #4]
 801dbe0:	601a      	str	r2, [r3, #0]
 801dbe2:	687b      	ldr	r3, [r7, #4]
 801dbe4:	78fa      	ldrb	r2, [r7, #3]
 801dbe6:	711a      	strb	r2, [r3, #4]
    {
    }
 801dbe8:	687b      	ldr	r3, [r7, #4]
 801dbea:	4618      	mov	r0, r3
 801dbec:	3708      	adds	r7, #8
 801dbee:	46bd      	mov	sp, r7
 801dbf0:	bd80      	pop	{r7, pc}
 801dbf2:	bf00      	nop
 801dbf4:	0802aea0 	.word	0x0802aea0

0801dbf8 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801dbf8:	b580      	push	{r7, lr}
 801dbfa:	b082      	sub	sp, #8
 801dbfc:	af00      	add	r7, sp, #0
 801dbfe:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	791b      	ldrb	r3, [r3, #4]
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	d001      	beq.n	801dc0c <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801dc08:	f7f6 f9fe 	bl	8014008 <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801dc0c:	f7f7 fd40 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dc10:	4603      	mov	r3, r0
 801dc12:	681a      	ldr	r2, [r3, #0]
 801dc14:	6812      	ldr	r2, [r2, #0]
 801dc16:	4618      	mov	r0, r3
 801dc18:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801dc1a:	bf00      	nop
 801dc1c:	3708      	adds	r7, #8
 801dc1e:	46bd      	mov	sp, r7
 801dc20:	bd80      	pop	{r7, pc}
	...

0801dc24 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801dc24:	b580      	push	{r7, lr}
 801dc26:	b082      	sub	sp, #8
 801dc28:	af00      	add	r7, sp, #0
 801dc2a:	6078      	str	r0, [r7, #4]
    {
 801dc2c:	4a05      	ldr	r2, [pc, #20]	; (801dc44 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801dc2e:	687b      	ldr	r3, [r7, #4]
 801dc30:	601a      	str	r2, [r3, #0]
 801dc32:	687b      	ldr	r3, [r7, #4]
 801dc34:	4618      	mov	r0, r3
 801dc36:	f7f7 fdbb 	bl	80157b0 <_ZN14TestTerminatorD1Ev>
    }
 801dc3a:	687b      	ldr	r3, [r7, #4]
 801dc3c:	4618      	mov	r0, r3
 801dc3e:	3708      	adds	r7, #8
 801dc40:	46bd      	mov	sp, r7
 801dc42:	bd80      	pop	{r7, pc}
 801dc44:	0802aea0 	.word	0x0802aea0

0801dc48 <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801dc48:	b580      	push	{r7, lr}
 801dc4a:	b082      	sub	sp, #8
 801dc4c:	af00      	add	r7, sp, #0
 801dc4e:	6078      	str	r0, [r7, #4]
    }
 801dc50:	6878      	ldr	r0, [r7, #4]
 801dc52:	f7ff ffe7 	bl	801dc24 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801dc56:	2108      	movs	r1, #8
 801dc58:	6878      	ldr	r0, [r7, #4]
 801dc5a:	f7ed fd77 	bl	800b74c <_ZdlPvj>
 801dc5e:	687b      	ldr	r3, [r7, #4]
 801dc60:	4618      	mov	r0, r3
 801dc62:	3708      	adds	r7, #8
 801dc64:	46bd      	mov	sp, r7
 801dc66:	bd80      	pop	{r7, pc}

0801dc68 <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801dc68:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc6a:	b085      	sub	sp, #20
 801dc6c:	af00      	add	r7, sp, #0
 801dc6e:	6078      	str	r0, [r7, #4]
 801dc70:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	681b      	ldr	r3, [r3, #0]
 801dc76:	330c      	adds	r3, #12
 801dc78:	681b      	ldr	r3, [r3, #0]
 801dc7a:	6878      	ldr	r0, [r7, #4]
 801dc7c:	4798      	blx	r3
 801dc7e:	4603      	mov	r3, r0
 801dc80:	681a      	ldr	r2, [r3, #0]
 801dc82:	321c      	adds	r2, #28
 801dc84:	6812      	ldr	r2, [r2, #0]
 801dc86:	4618      	mov	r0, r3
 801dc88:	4790      	blx	r2
 801dc8a:	4603      	mov	r3, r0
 801dc8c:	f083 0301 	eor.w	r3, r3, #1
 801dc90:	b2db      	uxtb	r3, r3
 801dc92:	2b00      	cmp	r3, #0
 801dc94:	d01d      	beq.n	801dcd2 <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	681b      	ldr	r3, [r3, #0]
 801dc9a:	330c      	adds	r3, #12
 801dc9c:	681b      	ldr	r3, [r3, #0]
 801dc9e:	6878      	ldr	r0, [r7, #4]
 801dca0:	4798      	blx	r3
 801dca2:	4604      	mov	r4, r0
 801dca4:	6823      	ldr	r3, [r4, #0]
 801dca6:	339c      	adds	r3, #156	; 0x9c
 801dca8:	681d      	ldr	r5, [r3, #0]
 801dcaa:	683e      	ldr	r6, [r7, #0]
 801dcac:	687b      	ldr	r3, [r7, #4]
 801dcae:	791a      	ldrb	r2, [r3, #4]
 801dcb0:	f107 0308 	add.w	r3, r7, #8
 801dcb4:	4611      	mov	r1, r2
 801dcb6:	4618      	mov	r0, r3
 801dcb8:	f7ff ff86 	bl	801dbc8 <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801dcbc:	f107 0308 	add.w	r3, r7, #8
 801dcc0:	461a      	mov	r2, r3
 801dcc2:	4631      	mov	r1, r6
 801dcc4:	4620      	mov	r0, r4
 801dcc6:	47a8      	blx	r5
 801dcc8:	f107 0308 	add.w	r3, r7, #8
 801dccc:	4618      	mov	r0, r3
 801dcce:	f7ff ffa9 	bl	801dc24 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801dcd2:	bf00      	nop
 801dcd4:	3714      	adds	r7, #20
 801dcd6:	46bd      	mov	sp, r7
 801dcd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dcda <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801dcda:	b580      	push	{r7, lr}
 801dcdc:	b082      	sub	sp, #8
 801dcde:	af00      	add	r7, sp, #0
 801dce0:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801dce2:	f7f7 fcc5 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801dce6:	4603      	mov	r3, r0
}
 801dce8:	4618      	mov	r0, r3
 801dcea:	3708      	adds	r7, #8
 801dcec:	46bd      	mov	sp, r7
 801dcee:	bd80      	pop	{r7, pc}

0801dcf0 <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801dcf0:	b590      	push	{r4, r7, lr}
 801dcf2:	b085      	sub	sp, #20
 801dcf4:	af00      	add	r7, sp, #0
 801dcf6:	6078      	str	r0, [r7, #4]
 801dcf8:	6039      	str	r1, [r7, #0]
 801dcfa:	687c      	ldr	r4, [r7, #4]
 801dcfc:	f107 0308 	add.w	r3, r7, #8
 801dd00:	490b      	ldr	r1, [pc, #44]	; (801dd30 <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801dd02:	4618      	mov	r0, r3
 801dd04:	f7f0 f8d1 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801dd08:	f107 0308 	add.w	r3, r7, #8
 801dd0c:	461a      	mov	r2, r3
 801dd0e:	6839      	ldr	r1, [r7, #0]
 801dd10:	4620      	mov	r0, r4
 801dd12:	f7f1 ff29 	bl	800fb68 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801dd16:	f107 0308 	add.w	r3, r7, #8
 801dd1a:	4618      	mov	r0, r3
 801dd1c:	f7f0 fc7d 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801dd20:	4a04      	ldr	r2, [pc, #16]	; (801dd34 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801dd22:	687b      	ldr	r3, [r7, #4]
 801dd24:	601a      	str	r2, [r3, #0]
{
}
 801dd26:	687b      	ldr	r3, [r7, #4]
 801dd28:	4618      	mov	r0, r3
 801dd2a:	3714      	adds	r7, #20
 801dd2c:	46bd      	mov	sp, r7
 801dd2e:	bd90      	pop	{r4, r7, pc}
 801dd30:	08027abc 	.word	0x08027abc
 801dd34:	08029e2c 	.word	0x08029e2c

0801dd38 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801dd38:	b5b0      	push	{r4, r5, r7, lr}
 801dd3a:	b08a      	sub	sp, #40	; 0x28
 801dd3c:	af00      	add	r7, sp, #0
 801dd3e:	6078      	str	r0, [r7, #4]
 801dd40:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801dd42:	687b      	ldr	r3, [r7, #4]
 801dd44:	332c      	adds	r3, #44	; 0x2c
 801dd46:	492b      	ldr	r1, [pc, #172]	; (801ddf4 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801dd48:	4618      	mov	r0, r3
 801dd4a:	f7f0 fcf5 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801dd4e:	687b      	ldr	r3, [r7, #4]
 801dd50:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801dd54:	683b      	ldr	r3, [r7, #0]
 801dd56:	681b      	ldr	r3, [r3, #0]
 801dd58:	337c      	adds	r3, #124	; 0x7c
 801dd5a:	681c      	ldr	r4, [r3, #0]
 801dd5c:	f107 0310 	add.w	r3, r7, #16
 801dd60:	4925      	ldr	r1, [pc, #148]	; (801ddf8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801dd62:	4618      	mov	r0, r3
 801dd64:	f7f0 f8a1 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801dd68:	f107 0308 	add.w	r3, r7, #8
 801dd6c:	f107 0210 	add.w	r2, r7, #16
 801dd70:	6839      	ldr	r1, [r7, #0]
 801dd72:	4618      	mov	r0, r3
 801dd74:	47a0      	blx	r4
 801dd76:	f107 0308 	add.w	r3, r7, #8
 801dd7a:	4619      	mov	r1, r3
 801dd7c:	4628      	mov	r0, r5
 801dd7e:	f7f0 fcc9 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801dd82:	f107 0308 	add.w	r3, r7, #8
 801dd86:	4618      	mov	r0, r3
 801dd88:	f7f0 fc47 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801dd8c:	f107 0310 	add.w	r3, r7, #16
 801dd90:	4618      	mov	r0, r3
 801dd92:	f7f0 fc42 	bl	800e61a <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801dd96:	687b      	ldr	r3, [r7, #4]
 801dd98:	332c      	adds	r3, #44	; 0x2c
 801dd9a:	4918      	ldr	r1, [pc, #96]	; (801ddfc <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801dd9c:	4618      	mov	r0, r3
 801dd9e:	f7f0 fccb 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801dda2:	687b      	ldr	r3, [r7, #4]
 801dda4:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801dda8:	683b      	ldr	r3, [r7, #0]
 801ddaa:	681b      	ldr	r3, [r3, #0]
 801ddac:	3380      	adds	r3, #128	; 0x80
 801ddae:	681c      	ldr	r4, [r3, #0]
 801ddb0:	f107 0320 	add.w	r3, r7, #32
 801ddb4:	4910      	ldr	r1, [pc, #64]	; (801ddf8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801ddb6:	4618      	mov	r0, r3
 801ddb8:	f7f0 f877 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801ddbc:	f107 0318 	add.w	r3, r7, #24
 801ddc0:	f107 0220 	add.w	r2, r7, #32
 801ddc4:	6839      	ldr	r1, [r7, #0]
 801ddc6:	4618      	mov	r0, r3
 801ddc8:	47a0      	blx	r4
 801ddca:	f107 0318 	add.w	r3, r7, #24
 801ddce:	4619      	mov	r1, r3
 801ddd0:	4628      	mov	r0, r5
 801ddd2:	f7f0 fc9f 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801ddd6:	f107 0318 	add.w	r3, r7, #24
 801ddda:	4618      	mov	r0, r3
 801dddc:	f7f0 fc1d 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801dde0:	f107 0320 	add.w	r3, r7, #32
 801dde4:	4618      	mov	r0, r3
 801dde6:	f7f0 fc18 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 801ddea:	bf00      	nop
 801ddec:	3728      	adds	r7, #40	; 0x28
 801ddee:	46bd      	mov	sp, r7
 801ddf0:	bdb0      	pop	{r4, r5, r7, pc}
 801ddf2:	bf00      	nop
 801ddf4:	08027b0c 	.word	0x08027b0c
 801ddf8:	08027b38 	.word	0x08027b38
 801ddfc:	08027b3c 	.word	0x08027b3c

0801de00 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801de00:	b590      	push	{r4, r7, lr}
 801de02:	b08f      	sub	sp, #60	; 0x3c
 801de04:	af00      	add	r7, sp, #0
 801de06:	60f8      	str	r0, [r7, #12]
 801de08:	60b9      	str	r1, [r7, #8]
 801de0a:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801de0c:	f107 0310 	add.w	r3, r7, #16
 801de10:	4618      	mov	r0, r3
 801de12:	f7ff f877 	bl	801cf04 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801de16:	f107 0310 	add.w	r3, r7, #16
 801de1a:	687a      	ldr	r2, [r7, #4]
 801de1c:	68b9      	ldr	r1, [r7, #8]
 801de1e:	4618      	mov	r0, r3
 801de20:	f7ff fa16 	bl	801d250 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801de24:	68fb      	ldr	r3, [r7, #12]
 801de26:	332c      	adds	r3, #44	; 0x2c
 801de28:	4937      	ldr	r1, [pc, #220]	; (801df08 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801de2a:	4618      	mov	r0, r3
 801de2c:	f7f0 fc84 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801de30:	68fb      	ldr	r3, [r7, #12]
 801de32:	332c      	adds	r3, #44	; 0x2c
 801de34:	68b9      	ldr	r1, [r7, #8]
 801de36:	4618      	mov	r0, r3
 801de38:	f7f0 fc6c 	bl	800e714 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801de3c:	68fb      	ldr	r3, [r7, #12]
 801de3e:	332c      	adds	r3, #44	; 0x2c
 801de40:	4932      	ldr	r1, [pc, #200]	; (801df0c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801de42:	4618      	mov	r0, r3
 801de44:	f7f0 fc78 	bl	800e738 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801de48:	68fb      	ldr	r3, [r7, #12]
 801de4a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801de4e:	f107 0320 	add.w	r3, r7, #32
 801de52:	492f      	ldr	r1, [pc, #188]	; (801df10 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801de54:	4618      	mov	r0, r3
 801de56:	f7f0 f828 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801de5a:	f107 0318 	add.w	r3, r7, #24
 801de5e:	f107 0220 	add.w	r2, r7, #32
 801de62:	f107 0110 	add.w	r1, r7, #16
 801de66:	4618      	mov	r0, r3
 801de68:	f7ff fd4a 	bl	801d900 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801de6c:	f107 0318 	add.w	r3, r7, #24
 801de70:	4619      	mov	r1, r3
 801de72:	4620      	mov	r0, r4
 801de74:	f7f0 fc4e 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801de78:	f107 0318 	add.w	r3, r7, #24
 801de7c:	4618      	mov	r0, r3
 801de7e:	f7f0 fbcc 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801de82:	f107 0320 	add.w	r3, r7, #32
 801de86:	4618      	mov	r0, r3
 801de88:	f7f0 fbc7 	bl	800e61a <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801de8c:	68fb      	ldr	r3, [r7, #12]
 801de8e:	332c      	adds	r3, #44	; 0x2c
 801de90:	4920      	ldr	r1, [pc, #128]	; (801df14 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801de92:	4618      	mov	r0, r3
 801de94:	f7f0 fc50 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801de98:	68fb      	ldr	r3, [r7, #12]
 801de9a:	332c      	adds	r3, #44	; 0x2c
 801de9c:	68b9      	ldr	r1, [r7, #8]
 801de9e:	4618      	mov	r0, r3
 801dea0:	f7f0 fc38 	bl	800e714 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801dea4:	68fb      	ldr	r3, [r7, #12]
 801dea6:	332c      	adds	r3, #44	; 0x2c
 801dea8:	4918      	ldr	r1, [pc, #96]	; (801df0c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801deaa:	4618      	mov	r0, r3
 801deac:	f7f0 fc44 	bl	800e738 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801deb0:	68fb      	ldr	r3, [r7, #12]
 801deb2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801deb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801deba:	4915      	ldr	r1, [pc, #84]	; (801df10 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801debc:	4618      	mov	r0, r3
 801debe:	f7ef fff4 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801dec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dec6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801deca:	f107 0110 	add.w	r1, r7, #16
 801dece:	4618      	mov	r0, r3
 801ded0:	f7ff fd74 	bl	801d9bc <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801ded4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ded8:	4619      	mov	r1, r3
 801deda:	4620      	mov	r0, r4
 801dedc:	f7f0 fc1a 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801dee0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dee4:	4618      	mov	r0, r3
 801dee6:	f7f0 fb98 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801deea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801deee:	4618      	mov	r0, r3
 801def0:	f7f0 fb93 	bl	800e61a <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801def4:	f107 0310 	add.w	r3, r7, #16
 801def8:	4618      	mov	r0, r3
 801defa:	f7ff f817 	bl	801cf2c <_ZN21MockExpectedCallsListD1Ev>
}
 801defe:	bf00      	nop
 801df00:	373c      	adds	r7, #60	; 0x3c
 801df02:	46bd      	mov	sp, r7
 801df04:	bd90      	pop	{r4, r7, pc}
 801df06:	bf00      	nop
 801df08:	08027b64 	.word	0x08027b64
 801df0c:	08027ba4 	.word	0x08027ba4
 801df10:	08027b38 	.word	0x08027b38
 801df14:	08027ba8 	.word	0x08027ba8

0801df18 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801df18:	b590      	push	{r4, r7, lr}
 801df1a:	b087      	sub	sp, #28
 801df1c:	af00      	add	r7, sp, #0
 801df1e:	60f8      	str	r0, [r7, #12]
 801df20:	60b9      	str	r1, [r7, #8]
 801df22:	607a      	str	r2, [r7, #4]
 801df24:	68fb      	ldr	r3, [r7, #12]
 801df26:	68b9      	ldr	r1, [r7, #8]
 801df28:	4618      	mov	r0, r3
 801df2a:	f7ff fee1 	bl	801dcf0 <_ZN11MockFailureC1EP10UtestShell>
 801df2e:	4a10      	ldr	r2, [pc, #64]	; (801df70 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801df30:	68fb      	ldr	r3, [r7, #12]
 801df32:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801df34:	68fb      	ldr	r3, [r7, #12]
 801df36:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801df3a:	f107 0310 	add.w	r3, r7, #16
 801df3e:	490d      	ldr	r1, [pc, #52]	; (801df74 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801df40:	4618      	mov	r0, r3
 801df42:	f7ef ffb2 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801df46:	f107 0310 	add.w	r3, r7, #16
 801df4a:	4619      	mov	r1, r3
 801df4c:	4620      	mov	r0, r4
 801df4e:	f7f0 f818 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801df52:	f107 0310 	add.w	r3, r7, #16
 801df56:	4618      	mov	r0, r3
 801df58:	f7f0 fb5f 	bl	800e61a <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801df5c:	68fb      	ldr	r3, [r7, #12]
 801df5e:	6879      	ldr	r1, [r7, #4]
 801df60:	4618      	mov	r0, r3
 801df62:	f7ff fee9 	bl	801dd38 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801df66:	68fb      	ldr	r3, [r7, #12]
 801df68:	4618      	mov	r0, r3
 801df6a:	371c      	adds	r7, #28
 801df6c:	46bd      	mov	sp, r7
 801df6e:	bd90      	pop	{r4, r7, pc}
 801df70:	08029e00 	.word	0x08029e00
 801df74:	08027be4 	.word	0x08027be4

0801df78 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801df78:	b590      	push	{r4, r7, lr}
 801df7a:	b08d      	sub	sp, #52	; 0x34
 801df7c:	af00      	add	r7, sp, #0
 801df7e:	60f8      	str	r0, [r7, #12]
 801df80:	60b9      	str	r1, [r7, #8]
 801df82:	607a      	str	r2, [r7, #4]
 801df84:	603b      	str	r3, [r7, #0]
 801df86:	68fb      	ldr	r3, [r7, #12]
 801df88:	68b9      	ldr	r1, [r7, #8]
 801df8a:	4618      	mov	r0, r3
 801df8c:	f7ff feb0 	bl	801dcf0 <_ZN11MockFailureC1EP10UtestShell>
 801df90:	4a2f      	ldr	r2, [pc, #188]	; (801e050 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801df92:	68fb      	ldr	r3, [r7, #12]
 801df94:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801df96:	683b      	ldr	r3, [r7, #0]
 801df98:	681b      	ldr	r3, [r3, #0]
 801df9a:	3310      	adds	r3, #16
 801df9c:	681b      	ldr	r3, [r3, #0]
 801df9e:	6879      	ldr	r1, [r7, #4]
 801dfa0:	6838      	ldr	r0, [r7, #0]
 801dfa2:	4798      	blx	r3
 801dfa4:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801dfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dfa8:	2b00      	cmp	r3, #0
 801dfaa:	d027      	beq.n	801dffc <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801dfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dfae:	1c5a      	adds	r2, r3, #1
 801dfb0:	f107 0314 	add.w	r3, r7, #20
 801dfb4:	4611      	mov	r1, r2
 801dfb6:	4618      	mov	r0, r3
 801dfb8:	f7f1 fa00 	bl	800f3bc <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801dfbc:	68fb      	ldr	r3, [r7, #12]
 801dfbe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801dfc2:	f107 0314 	add.w	r3, r7, #20
 801dfc6:	4618      	mov	r0, r3
 801dfc8:	f7f0 fafa 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801dfcc:	4602      	mov	r2, r0
 801dfce:	f107 031c 	add.w	r3, r7, #28
 801dfd2:	4920      	ldr	r1, [pc, #128]	; (801e054 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801dfd4:	4618      	mov	r0, r3
 801dfd6:	f7f1 f827 	bl	800f028 <_Z16StringFromFormatPKcz>
 801dfda:	f107 031c 	add.w	r3, r7, #28
 801dfde:	4619      	mov	r1, r3
 801dfe0:	4620      	mov	r0, r4
 801dfe2:	f7ef ffce 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801dfe6:	f107 031c 	add.w	r3, r7, #28
 801dfea:	4618      	mov	r0, r3
 801dfec:	f7f0 fb15 	bl	800e61a <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801dff0:	f107 0314 	add.w	r3, r7, #20
 801dff4:	4618      	mov	r0, r3
 801dff6:	f7f0 fb10 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801dffa:	e013      	b.n	801e024 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801dffc:	68fb      	ldr	r3, [r7, #12]
 801dffe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e006:	4914      	ldr	r1, [pc, #80]	; (801e058 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801e008:	4618      	mov	r0, r3
 801e00a:	f7ef ff4e 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801e00e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e012:	4619      	mov	r1, r3
 801e014:	4620      	mov	r0, r4
 801e016:	f7ef ffb4 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801e01a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e01e:	4618      	mov	r0, r3
 801e020:	f7f0 fafb 	bl	800e61a <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801e024:	68fb      	ldr	r3, [r7, #12]
 801e026:	332c      	adds	r3, #44	; 0x2c
 801e028:	6879      	ldr	r1, [r7, #4]
 801e02a:	4618      	mov	r0, r3
 801e02c:	f7f0 fb72 	bl	800e714 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801e030:	68fb      	ldr	r3, [r7, #12]
 801e032:	332c      	adds	r3, #44	; 0x2c
 801e034:	4909      	ldr	r1, [pc, #36]	; (801e05c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801e036:	4618      	mov	r0, r3
 801e038:	f7f0 fb7e 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801e03c:	68fb      	ldr	r3, [r7, #12]
 801e03e:	6839      	ldr	r1, [r7, #0]
 801e040:	4618      	mov	r0, r3
 801e042:	f7ff fe79 	bl	801dd38 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801e046:	68fb      	ldr	r3, [r7, #12]
 801e048:	4618      	mov	r0, r3
 801e04a:	3734      	adds	r7, #52	; 0x34
 801e04c:	46bd      	mov	sp, r7
 801e04e:	bd90      	pop	{r4, r7, pc}
 801e050:	0802a7a0 	.word	0x0802a7a0
 801e054:	08027c14 	.word	0x08027c14
 801e058:	08027c50 	.word	0x08027c50
 801e05c:	08027ba4 	.word	0x08027ba4

0801e060 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801e060:	b590      	push	{r4, r7, lr}
 801e062:	b089      	sub	sp, #36	; 0x24
 801e064:	af00      	add	r7, sp, #0
 801e066:	60f8      	str	r0, [r7, #12]
 801e068:	60b9      	str	r1, [r7, #8]
 801e06a:	607a      	str	r2, [r7, #4]
 801e06c:	68fb      	ldr	r3, [r7, #12]
 801e06e:	68b9      	ldr	r1, [r7, #8]
 801e070:	4618      	mov	r0, r3
 801e072:	f7ff fe3d 	bl	801dcf0 <_ZN11MockFailureC1EP10UtestShell>
 801e076:	4a1f      	ldr	r2, [pc, #124]	; (801e0f4 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801e078:	68fb      	ldr	r3, [r7, #12]
 801e07a:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801e07c:	f107 0310 	add.w	r3, r7, #16
 801e080:	4618      	mov	r0, r3
 801e082:	f7fe ff3f 	bl	801cf04 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801e086:	f107 0310 	add.w	r3, r7, #16
 801e08a:	6879      	ldr	r1, [r7, #4]
 801e08c:	4618      	mov	r0, r3
 801e08e:	f7ff f909 	bl	801d2a4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801e092:	f107 0310 	add.w	r3, r7, #16
 801e096:	4618      	mov	r0, r3
 801e098:	f7ff f94c 	bl	801d334 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801e09c:	68fb      	ldr	r3, [r7, #12]
 801e09e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e0a2:	f107 0318 	add.w	r3, r7, #24
 801e0a6:	4914      	ldr	r1, [pc, #80]	; (801e0f8 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801e0a8:	4618      	mov	r0, r3
 801e0aa:	f7ef fefe 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801e0ae:	f107 0318 	add.w	r3, r7, #24
 801e0b2:	4619      	mov	r1, r3
 801e0b4:	4620      	mov	r0, r4
 801e0b6:	f7ef ff64 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801e0ba:	f107 0318 	add.w	r3, r7, #24
 801e0be:	4618      	mov	r0, r3
 801e0c0:	f7f0 faab 	bl	800e61a <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801e0c4:	68fb      	ldr	r3, [r7, #12]
 801e0c6:	332c      	adds	r3, #44	; 0x2c
 801e0c8:	490c      	ldr	r1, [pc, #48]	; (801e0fc <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801e0ca:	4618      	mov	r0, r3
 801e0cc:	f7f0 fb34 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801e0d0:	68fb      	ldr	r3, [r7, #12]
 801e0d2:	f107 0210 	add.w	r2, r7, #16
 801e0d6:	4611      	mov	r1, r2
 801e0d8:	4618      	mov	r0, r3
 801e0da:	f7ff fe2d 	bl	801dd38 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801e0de:	f107 0310 	add.w	r3, r7, #16
 801e0e2:	4618      	mov	r0, r3
 801e0e4:	f7fe ff22 	bl	801cf2c <_ZN21MockExpectedCallsListD1Ev>
}
 801e0e8:	68fb      	ldr	r3, [r7, #12]
 801e0ea:	4618      	mov	r0, r3
 801e0ec:	3724      	adds	r7, #36	; 0x24
 801e0ee:	46bd      	mov	sp, r7
 801e0f0:	bd90      	pop	{r4, r7, pc}
 801e0f2:	bf00      	nop
 801e0f4:	08029dd4 	.word	0x08029dd4
 801e0f8:	08027c7c 	.word	0x08027c7c
 801e0fc:	08027ba4 	.word	0x08027ba4

0801e100 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801e100:	b590      	push	{r4, r7, lr}
 801e102:	b099      	sub	sp, #100	; 0x64
 801e104:	af00      	add	r7, sp, #0
 801e106:	60f8      	str	r0, [r7, #12]
 801e108:	60b9      	str	r1, [r7, #8]
 801e10a:	607a      	str	r2, [r7, #4]
 801e10c:	603b      	str	r3, [r7, #0]
 801e10e:	68fb      	ldr	r3, [r7, #12]
 801e110:	68b9      	ldr	r1, [r7, #8]
 801e112:	4618      	mov	r0, r3
 801e114:	f7ff fdec 	bl	801dcf0 <_ZN11MockFailureC1EP10UtestShell>
 801e118:	4a9e      	ldr	r2, [pc, #632]	; (801e394 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801e11a:	68fb      	ldr	r3, [r7, #12]
 801e11c:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801e11e:	f107 0310 	add.w	r3, r7, #16
 801e122:	4618      	mov	r0, r3
 801e124:	f7fe feee 	bl	801cf04 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801e128:	f107 0310 	add.w	r3, r7, #16
 801e12c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801e12e:	6879      	ldr	r1, [r7, #4]
 801e130:	4618      	mov	r0, r3
 801e132:	f7ff f88d 	bl	801d250 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801e136:	683b      	ldr	r3, [r7, #0]
 801e138:	681b      	ldr	r3, [r3, #0]
 801e13a:	335c      	adds	r3, #92	; 0x5c
 801e13c:	681b      	ldr	r3, [r3, #0]
 801e13e:	f107 0218 	add.w	r2, r7, #24
 801e142:	6839      	ldr	r1, [r7, #0]
 801e144:	4610      	mov	r0, r2
 801e146:	4798      	blx	r3
 801e148:	f107 0218 	add.w	r2, r7, #24
 801e14c:	f107 0310 	add.w	r3, r7, #16
 801e150:	4611      	mov	r1, r2
 801e152:	4618      	mov	r0, r3
 801e154:	f7ff f948 	bl	801d3e8 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801e158:	f107 0318 	add.w	r3, r7, #24
 801e15c:	4618      	mov	r0, r3
 801e15e:	f7f0 fa5c 	bl	800e61a <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801e162:	f107 0310 	add.w	r3, r7, #16
 801e166:	4618      	mov	r0, r3
 801e168:	f7fe ff4d 	bl	801d006 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801e16c:	4603      	mov	r3, r0
 801e16e:	2b00      	cmp	r3, #0
 801e170:	d037      	beq.n	801e1e2 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801e172:	68fb      	ldr	r3, [r7, #12]
 801e174:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e178:	f107 0320 	add.w	r3, r7, #32
 801e17c:	4986      	ldr	r1, [pc, #536]	; (801e398 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801e17e:	4618      	mov	r0, r3
 801e180:	f7ef fe93 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801e184:	f107 0320 	add.w	r3, r7, #32
 801e188:	4619      	mov	r1, r3
 801e18a:	4620      	mov	r0, r4
 801e18c:	f7ef fef9 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801e190:	f107 0320 	add.w	r3, r7, #32
 801e194:	4618      	mov	r0, r3
 801e196:	f7f0 fa40 	bl	800e61a <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801e19a:	68fb      	ldr	r3, [r7, #12]
 801e19c:	332c      	adds	r3, #44	; 0x2c
 801e19e:	6879      	ldr	r1, [r7, #4]
 801e1a0:	4618      	mov	r0, r3
 801e1a2:	f7f0 fab7 	bl	800e714 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801e1a6:	68fb      	ldr	r3, [r7, #12]
 801e1a8:	332c      	adds	r3, #44	; 0x2c
 801e1aa:	497c      	ldr	r1, [pc, #496]	; (801e39c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801e1ac:	4618      	mov	r0, r3
 801e1ae:	f7f0 fac3 	bl	800e738 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801e1b2:	68fb      	ldr	r3, [r7, #12]
 801e1b4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e1b8:	683b      	ldr	r3, [r7, #0]
 801e1ba:	681b      	ldr	r3, [r3, #0]
 801e1bc:	335c      	adds	r3, #92	; 0x5c
 801e1be:	681b      	ldr	r3, [r3, #0]
 801e1c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801e1c4:	6839      	ldr	r1, [r7, #0]
 801e1c6:	4610      	mov	r0, r2
 801e1c8:	4798      	blx	r3
 801e1ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e1ce:	4619      	mov	r1, r3
 801e1d0:	4620      	mov	r0, r4
 801e1d2:	f7f0 fa9f 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801e1d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e1da:	4618      	mov	r0, r3
 801e1dc:	f7f0 fa1d 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801e1e0:	e056      	b.n	801e290 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801e1e2:	68fb      	ldr	r3, [r7, #12]
 801e1e4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e1e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e1ec:	496c      	ldr	r1, [pc, #432]	; (801e3a0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801e1ee:	4618      	mov	r0, r3
 801e1f0:	f7ef fe5b 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801e1f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e1f8:	4619      	mov	r1, r3
 801e1fa:	4620      	mov	r0, r4
 801e1fc:	f7ef fec1 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801e200:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e204:	4618      	mov	r0, r3
 801e206:	f7f0 fa08 	bl	800e61a <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801e20a:	68fb      	ldr	r3, [r7, #12]
 801e20c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e210:	683b      	ldr	r3, [r7, #0]
 801e212:	681b      	ldr	r3, [r3, #0]
 801e214:	335c      	adds	r3, #92	; 0x5c
 801e216:	681b      	ldr	r3, [r3, #0]
 801e218:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801e21c:	6839      	ldr	r1, [r7, #0]
 801e21e:	4610      	mov	r0, r2
 801e220:	4798      	blx	r3
 801e222:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e226:	4619      	mov	r1, r3
 801e228:	4620      	mov	r0, r4
 801e22a:	f7f0 fa73 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801e22e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e232:	4618      	mov	r0, r3
 801e234:	f7f0 f9f1 	bl	800e61a <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801e238:	68fb      	ldr	r3, [r7, #12]
 801e23a:	332c      	adds	r3, #44	; 0x2c
 801e23c:	4959      	ldr	r1, [pc, #356]	; (801e3a4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801e23e:	4618      	mov	r0, r3
 801e240:	f7f0 fa7a 	bl	800e738 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801e244:	68fb      	ldr	r3, [r7, #12]
 801e246:	332c      	adds	r3, #44	; 0x2c
 801e248:	6879      	ldr	r1, [r7, #4]
 801e24a:	4618      	mov	r0, r3
 801e24c:	f7f0 fa62 	bl	800e714 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801e250:	68fb      	ldr	r3, [r7, #12]
 801e252:	332c      	adds	r3, #44	; 0x2c
 801e254:	4954      	ldr	r1, [pc, #336]	; (801e3a8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801e256:	4618      	mov	r0, r3
 801e258:	f7f0 fa6e 	bl	800e738 <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801e25c:	68fb      	ldr	r3, [r7, #12]
 801e25e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e262:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e266:	6839      	ldr	r1, [r7, #0]
 801e268:	4618      	mov	r0, r3
 801e26a:	f7fd faa3 	bl	801b7b4 <_Z10StringFromRK14MockNamedValue>
 801e26e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e272:	4619      	mov	r1, r3
 801e274:	4620      	mov	r0, r4
 801e276:	f7f0 fa4d 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801e27a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e27e:	4618      	mov	r0, r3
 801e280:	f7f0 f9cb 	bl	800e61a <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801e284:	68fb      	ldr	r3, [r7, #12]
 801e286:	332c      	adds	r3, #44	; 0x2c
 801e288:	4948      	ldr	r1, [pc, #288]	; (801e3ac <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801e28a:	4618      	mov	r0, r3
 801e28c:	f7f0 fa54 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801e290:	68fb      	ldr	r3, [r7, #12]
 801e292:	332c      	adds	r3, #44	; 0x2c
 801e294:	4946      	ldr	r1, [pc, #280]	; (801e3b0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801e296:	4618      	mov	r0, r3
 801e298:	f7f0 fa4e 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801e29c:	68fb      	ldr	r3, [r7, #12]
 801e29e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801e2a0:	6879      	ldr	r1, [r7, #4]
 801e2a2:	4618      	mov	r0, r3
 801e2a4:	f7ff fdac 	bl	801de00 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801e2a8:	68fb      	ldr	r3, [r7, #12]
 801e2aa:	332c      	adds	r3, #44	; 0x2c
 801e2ac:	4941      	ldr	r1, [pc, #260]	; (801e3b4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801e2ae:	4618      	mov	r0, r3
 801e2b0:	f7f0 fa42 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801e2b4:	68fb      	ldr	r3, [r7, #12]
 801e2b6:	332c      	adds	r3, #44	; 0x2c
 801e2b8:	6879      	ldr	r1, [r7, #4]
 801e2ba:	4618      	mov	r0, r3
 801e2bc:	f7f0 fa2a 	bl	800e714 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801e2c0:	68fb      	ldr	r3, [r7, #12]
 801e2c2:	332c      	adds	r3, #44	; 0x2c
 801e2c4:	493a      	ldr	r1, [pc, #232]	; (801e3b0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801e2c6:	4618      	mov	r0, r3
 801e2c8:	f7f0 fa36 	bl	800e738 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801e2cc:	68fb      	ldr	r3, [r7, #12]
 801e2ce:	332c      	adds	r3, #44	; 0x2c
 801e2d0:	4939      	ldr	r1, [pc, #228]	; (801e3b8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801e2d2:	4618      	mov	r0, r3
 801e2d4:	f7f0 fa30 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801e2d8:	68fb      	ldr	r3, [r7, #12]
 801e2da:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e2de:	683b      	ldr	r3, [r7, #0]
 801e2e0:	681b      	ldr	r3, [r3, #0]
 801e2e2:	3360      	adds	r3, #96	; 0x60
 801e2e4:	681b      	ldr	r3, [r3, #0]
 801e2e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801e2ea:	6839      	ldr	r1, [r7, #0]
 801e2ec:	4610      	mov	r0, r2
 801e2ee:	4798      	blx	r3
 801e2f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e2f4:	4619      	mov	r1, r3
 801e2f6:	4620      	mov	r0, r4
 801e2f8:	f7f0 fa0c 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801e2fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e300:	4618      	mov	r0, r3
 801e302:	f7f0 f98a 	bl	800e61a <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801e306:	68fb      	ldr	r3, [r7, #12]
 801e308:	332c      	adds	r3, #44	; 0x2c
 801e30a:	492c      	ldr	r1, [pc, #176]	; (801e3bc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801e30c:	4618      	mov	r0, r3
 801e30e:	f7f0 fa13 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801e312:	68fb      	ldr	r3, [r7, #12]
 801e314:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e318:	683b      	ldr	r3, [r7, #0]
 801e31a:	681b      	ldr	r3, [r3, #0]
 801e31c:	335c      	adds	r3, #92	; 0x5c
 801e31e:	681b      	ldr	r3, [r3, #0]
 801e320:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801e324:	6839      	ldr	r1, [r7, #0]
 801e326:	4610      	mov	r0, r2
 801e328:	4798      	blx	r3
 801e32a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e32e:	4619      	mov	r1, r3
 801e330:	4620      	mov	r0, r4
 801e332:	f7f0 f9ef 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801e336:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e33a:	4618      	mov	r0, r3
 801e33c:	f7f0 f96d 	bl	800e61a <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801e340:	68fb      	ldr	r3, [r7, #12]
 801e342:	332c      	adds	r3, #44	; 0x2c
 801e344:	491e      	ldr	r1, [pc, #120]	; (801e3c0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801e346:	4618      	mov	r0, r3
 801e348:	f7f0 f9f6 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801e34c:	68fb      	ldr	r3, [r7, #12]
 801e34e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e352:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e356:	6839      	ldr	r1, [r7, #0]
 801e358:	4618      	mov	r0, r3
 801e35a:	f7fd fa2b 	bl	801b7b4 <_Z10StringFromRK14MockNamedValue>
 801e35e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e362:	4619      	mov	r1, r3
 801e364:	4620      	mov	r0, r4
 801e366:	f7f0 f9d5 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801e36a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e36e:	4618      	mov	r0, r3
 801e370:	f7f0 f953 	bl	800e61a <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801e374:	68fb      	ldr	r3, [r7, #12]
 801e376:	332c      	adds	r3, #44	; 0x2c
 801e378:	490c      	ldr	r1, [pc, #48]	; (801e3ac <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801e37a:	4618      	mov	r0, r3
 801e37c:	f7f0 f9dc 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801e380:	f107 0310 	add.w	r3, r7, #16
 801e384:	4618      	mov	r0, r3
 801e386:	f7fe fdd1 	bl	801cf2c <_ZN21MockExpectedCallsListD1Ev>
}
 801e38a:	68fb      	ldr	r3, [r7, #12]
 801e38c:	4618      	mov	r0, r3
 801e38e:	3764      	adds	r7, #100	; 0x64
 801e390:	46bd      	mov	sp, r7
 801e392:	bd90      	pop	{r4, r7, pc}
 801e394:	0802a774 	.word	0x0802a774
 801e398:	08027ca0 	.word	0x08027ca0
 801e39c:	08027cd8 	.word	0x08027cd8
 801e3a0:	08027cdc 	.word	0x08027cdc
 801e3a4:	08027d14 	.word	0x08027d14
 801e3a8:	08027d24 	.word	0x08027d24
 801e3ac:	08027d2c 	.word	0x08027d2c
 801e3b0:	08027ba4 	.word	0x08027ba4
 801e3b4:	08027d30 	.word	0x08027d30
 801e3b8:	08027b38 	.word	0x08027b38
 801e3bc:	08027d64 	.word	0x08027d64
 801e3c0:	08027d68 	.word	0x08027d68

0801e3c4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801e3c4:	b590      	push	{r4, r7, lr}
 801e3c6:	b097      	sub	sp, #92	; 0x5c
 801e3c8:	af00      	add	r7, sp, #0
 801e3ca:	60f8      	str	r0, [r7, #12]
 801e3cc:	60b9      	str	r1, [r7, #8]
 801e3ce:	607a      	str	r2, [r7, #4]
 801e3d0:	603b      	str	r3, [r7, #0]
 801e3d2:	68fb      	ldr	r3, [r7, #12]
 801e3d4:	68b9      	ldr	r1, [r7, #8]
 801e3d6:	4618      	mov	r0, r3
 801e3d8:	f7ff fc8a 	bl	801dcf0 <_ZN11MockFailureC1EP10UtestShell>
 801e3dc:	4a90      	ldr	r2, [pc, #576]	; (801e620 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801e3de:	68fb      	ldr	r3, [r7, #12]
 801e3e0:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801e3e2:	f107 0310 	add.w	r3, r7, #16
 801e3e6:	4618      	mov	r0, r3
 801e3e8:	f7fe fd8c 	bl	801cf04 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801e3ec:	f107 0310 	add.w	r3, r7, #16
 801e3f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801e3f2:	6879      	ldr	r1, [r7, #4]
 801e3f4:	4618      	mov	r0, r3
 801e3f6:	f7fe ff2b 	bl	801d250 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801e3fa:	683b      	ldr	r3, [r7, #0]
 801e3fc:	681b      	ldr	r3, [r3, #0]
 801e3fe:	335c      	adds	r3, #92	; 0x5c
 801e400:	681b      	ldr	r3, [r3, #0]
 801e402:	f107 0218 	add.w	r2, r7, #24
 801e406:	6839      	ldr	r1, [r7, #0]
 801e408:	4610      	mov	r0, r2
 801e40a:	4798      	blx	r3
 801e40c:	f107 0218 	add.w	r2, r7, #24
 801e410:	f107 0310 	add.w	r3, r7, #16
 801e414:	4611      	mov	r1, r2
 801e416:	4618      	mov	r0, r3
 801e418:	f7ff f812 	bl	801d440 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801e41c:	f107 0318 	add.w	r3, r7, #24
 801e420:	4618      	mov	r0, r3
 801e422:	f7f0 f8fa 	bl	800e61a <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801e426:	f107 0310 	add.w	r3, r7, #16
 801e42a:	4618      	mov	r0, r3
 801e42c:	f7fe fdeb 	bl	801d006 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801e430:	4603      	mov	r3, r0
 801e432:	2b00      	cmp	r3, #0
 801e434:	d037      	beq.n	801e4a6 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801e436:	68fb      	ldr	r3, [r7, #12]
 801e438:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e43c:	f107 0320 	add.w	r3, r7, #32
 801e440:	4978      	ldr	r1, [pc, #480]	; (801e624 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801e442:	4618      	mov	r0, r3
 801e444:	f7ef fd31 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801e448:	f107 0320 	add.w	r3, r7, #32
 801e44c:	4619      	mov	r1, r3
 801e44e:	4620      	mov	r0, r4
 801e450:	f7ef fd97 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801e454:	f107 0320 	add.w	r3, r7, #32
 801e458:	4618      	mov	r0, r3
 801e45a:	f7f0 f8de 	bl	800e61a <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801e45e:	68fb      	ldr	r3, [r7, #12]
 801e460:	332c      	adds	r3, #44	; 0x2c
 801e462:	6879      	ldr	r1, [r7, #4]
 801e464:	4618      	mov	r0, r3
 801e466:	f7f0 f955 	bl	800e714 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801e46a:	68fb      	ldr	r3, [r7, #12]
 801e46c:	332c      	adds	r3, #44	; 0x2c
 801e46e:	496e      	ldr	r1, [pc, #440]	; (801e628 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801e470:	4618      	mov	r0, r3
 801e472:	f7f0 f961 	bl	800e738 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801e476:	68fb      	ldr	r3, [r7, #12]
 801e478:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e47c:	683b      	ldr	r3, [r7, #0]
 801e47e:	681b      	ldr	r3, [r3, #0]
 801e480:	335c      	adds	r3, #92	; 0x5c
 801e482:	681b      	ldr	r3, [r3, #0]
 801e484:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801e488:	6839      	ldr	r1, [r7, #0]
 801e48a:	4610      	mov	r0, r2
 801e48c:	4798      	blx	r3
 801e48e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e492:	4619      	mov	r1, r3
 801e494:	4620      	mov	r0, r4
 801e496:	f7f0 f93d 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801e49a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e49e:	4618      	mov	r0, r3
 801e4a0:	f7f0 f8bb 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801e4a4:	e059      	b.n	801e55a <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801e4a6:	68fb      	ldr	r3, [r7, #12]
 801e4a8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e4ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e4b0:	495e      	ldr	r1, [pc, #376]	; (801e62c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801e4b2:	4618      	mov	r0, r3
 801e4b4:	f7ef fcf9 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801e4b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e4bc:	4619      	mov	r1, r3
 801e4be:	4620      	mov	r0, r4
 801e4c0:	f7ef fd5f 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801e4c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e4c8:	4618      	mov	r0, r3
 801e4ca:	f7f0 f8a6 	bl	800e61a <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801e4ce:	68fb      	ldr	r3, [r7, #12]
 801e4d0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e4d4:	683b      	ldr	r3, [r7, #0]
 801e4d6:	681b      	ldr	r3, [r3, #0]
 801e4d8:	3360      	adds	r3, #96	; 0x60
 801e4da:	681b      	ldr	r3, [r3, #0]
 801e4dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801e4e0:	6839      	ldr	r1, [r7, #0]
 801e4e2:	4610      	mov	r0, r2
 801e4e4:	4798      	blx	r3
 801e4e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e4ea:	4619      	mov	r1, r3
 801e4ec:	4620      	mov	r0, r4
 801e4ee:	f7f0 f911 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801e4f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e4f6:	4618      	mov	r0, r3
 801e4f8:	f7f0 f88f 	bl	800e61a <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801e4fc:	68fb      	ldr	r3, [r7, #12]
 801e4fe:	332c      	adds	r3, #44	; 0x2c
 801e500:	494b      	ldr	r1, [pc, #300]	; (801e630 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801e502:	4618      	mov	r0, r3
 801e504:	f7f0 f918 	bl	800e738 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801e508:	68fb      	ldr	r3, [r7, #12]
 801e50a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e50e:	683b      	ldr	r3, [r7, #0]
 801e510:	681b      	ldr	r3, [r3, #0]
 801e512:	335c      	adds	r3, #92	; 0x5c
 801e514:	681b      	ldr	r3, [r3, #0]
 801e516:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801e51a:	6839      	ldr	r1, [r7, #0]
 801e51c:	4610      	mov	r0, r2
 801e51e:	4798      	blx	r3
 801e520:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e524:	4619      	mov	r1, r3
 801e526:	4620      	mov	r0, r4
 801e528:	f7f0 f8f4 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801e52c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e530:	4618      	mov	r0, r3
 801e532:	f7f0 f872 	bl	800e61a <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801e536:	68fb      	ldr	r3, [r7, #12]
 801e538:	332c      	adds	r3, #44	; 0x2c
 801e53a:	493e      	ldr	r1, [pc, #248]	; (801e634 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801e53c:	4618      	mov	r0, r3
 801e53e:	f7f0 f8fb 	bl	800e738 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801e542:	68fb      	ldr	r3, [r7, #12]
 801e544:	332c      	adds	r3, #44	; 0x2c
 801e546:	6879      	ldr	r1, [r7, #4]
 801e548:	4618      	mov	r0, r3
 801e54a:	f7f0 f8e3 	bl	800e714 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801e54e:	68fb      	ldr	r3, [r7, #12]
 801e550:	332c      	adds	r3, #44	; 0x2c
 801e552:	4939      	ldr	r1, [pc, #228]	; (801e638 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801e554:	4618      	mov	r0, r3
 801e556:	f7f0 f8ef 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801e55a:	68fb      	ldr	r3, [r7, #12]
 801e55c:	332c      	adds	r3, #44	; 0x2c
 801e55e:	4937      	ldr	r1, [pc, #220]	; (801e63c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801e560:	4618      	mov	r0, r3
 801e562:	f7f0 f8e9 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801e566:	68fb      	ldr	r3, [r7, #12]
 801e568:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801e56a:	6879      	ldr	r1, [r7, #4]
 801e56c:	4618      	mov	r0, r3
 801e56e:	f7ff fc47 	bl	801de00 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801e572:	68fb      	ldr	r3, [r7, #12]
 801e574:	332c      	adds	r3, #44	; 0x2c
 801e576:	4932      	ldr	r1, [pc, #200]	; (801e640 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801e578:	4618      	mov	r0, r3
 801e57a:	f7f0 f8dd 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801e57e:	68fb      	ldr	r3, [r7, #12]
 801e580:	332c      	adds	r3, #44	; 0x2c
 801e582:	6879      	ldr	r1, [r7, #4]
 801e584:	4618      	mov	r0, r3
 801e586:	f7f0 f8c5 	bl	800e714 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801e58a:	68fb      	ldr	r3, [r7, #12]
 801e58c:	332c      	adds	r3, #44	; 0x2c
 801e58e:	492b      	ldr	r1, [pc, #172]	; (801e63c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801e590:	4618      	mov	r0, r3
 801e592:	f7f0 f8d1 	bl	800e738 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801e596:	68fb      	ldr	r3, [r7, #12]
 801e598:	332c      	adds	r3, #44	; 0x2c
 801e59a:	492a      	ldr	r1, [pc, #168]	; (801e644 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801e59c:	4618      	mov	r0, r3
 801e59e:	f7f0 f8cb 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801e5a2:	68fb      	ldr	r3, [r7, #12]
 801e5a4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e5a8:	683b      	ldr	r3, [r7, #0]
 801e5aa:	681b      	ldr	r3, [r3, #0]
 801e5ac:	3360      	adds	r3, #96	; 0x60
 801e5ae:	681b      	ldr	r3, [r3, #0]
 801e5b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801e5b4:	6839      	ldr	r1, [r7, #0]
 801e5b6:	4610      	mov	r0, r2
 801e5b8:	4798      	blx	r3
 801e5ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e5be:	4619      	mov	r1, r3
 801e5c0:	4620      	mov	r0, r4
 801e5c2:	f7f0 f8a7 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801e5c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e5ca:	4618      	mov	r0, r3
 801e5cc:	f7f0 f825 	bl	800e61a <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801e5d0:	68fb      	ldr	r3, [r7, #12]
 801e5d2:	332c      	adds	r3, #44	; 0x2c
 801e5d4:	491c      	ldr	r1, [pc, #112]	; (801e648 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801e5d6:	4618      	mov	r0, r3
 801e5d8:	f7f0 f8ae 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801e5dc:	68fb      	ldr	r3, [r7, #12]
 801e5de:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e5e2:	683b      	ldr	r3, [r7, #0]
 801e5e4:	681b      	ldr	r3, [r3, #0]
 801e5e6:	335c      	adds	r3, #92	; 0x5c
 801e5e8:	681b      	ldr	r3, [r3, #0]
 801e5ea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801e5ee:	6839      	ldr	r1, [r7, #0]
 801e5f0:	4610      	mov	r0, r2
 801e5f2:	4798      	blx	r3
 801e5f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e5f8:	4619      	mov	r1, r3
 801e5fa:	4620      	mov	r0, r4
 801e5fc:	f7f0 f88a 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801e600:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e604:	4618      	mov	r0, r3
 801e606:	f7f0 f808 	bl	800e61a <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801e60a:	f107 0310 	add.w	r3, r7, #16
 801e60e:	4618      	mov	r0, r3
 801e610:	f7fe fc8c 	bl	801cf2c <_ZN21MockExpectedCallsListD1Ev>
}
 801e614:	68fb      	ldr	r3, [r7, #12]
 801e616:	4618      	mov	r0, r3
 801e618:	375c      	adds	r7, #92	; 0x5c
 801e61a:	46bd      	mov	sp, r7
 801e61c:	bd90      	pop	{r4, r7, pc}
 801e61e:	bf00      	nop
 801e620:	0802a748 	.word	0x0802a748
 801e624:	08027d6c 	.word	0x08027d6c
 801e628:	08027cd8 	.word	0x08027cd8
 801e62c:	08027dac 	.word	0x08027dac
 801e630:	08027dd8 	.word	0x08027dd8
 801e634:	08027d14 	.word	0x08027d14
 801e638:	08027df0 	.word	0x08027df0
 801e63c:	08027ba4 	.word	0x08027ba4
 801e640:	08027df4 	.word	0x08027df4
 801e644:	08027b38 	.word	0x08027b38
 801e648:	08027d64 	.word	0x08027d64

0801e64c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801e64c:	b590      	push	{r4, r7, lr}
 801e64e:	b08b      	sub	sp, #44	; 0x2c
 801e650:	af00      	add	r7, sp, #0
 801e652:	60f8      	str	r0, [r7, #12]
 801e654:	60b9      	str	r1, [r7, #8]
 801e656:	607a      	str	r2, [r7, #4]
 801e658:	603b      	str	r3, [r7, #0]
 801e65a:	68fb      	ldr	r3, [r7, #12]
 801e65c:	68b9      	ldr	r1, [r7, #8]
 801e65e:	4618      	mov	r0, r3
 801e660:	f7ff fb46 	bl	801dcf0 <_ZN11MockFailureC1EP10UtestShell>
 801e664:	4a30      	ldr	r2, [pc, #192]	; (801e728 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801e666:	68fb      	ldr	r3, [r7, #12]
 801e668:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801e66a:	f107 0310 	add.w	r3, r7, #16
 801e66e:	4618      	mov	r0, r3
 801e670:	f7fe fc48 	bl	801cf04 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801e674:	f107 0310 	add.w	r3, r7, #16
 801e678:	683a      	ldr	r2, [r7, #0]
 801e67a:	6879      	ldr	r1, [r7, #4]
 801e67c:	4618      	mov	r0, r3
 801e67e:	f7fe fde7 	bl	801d250 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801e682:	68fb      	ldr	r3, [r7, #12]
 801e684:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e688:	f107 0318 	add.w	r3, r7, #24
 801e68c:	4927      	ldr	r1, [pc, #156]	; (801e72c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801e68e:	4618      	mov	r0, r3
 801e690:	f7ef fc0b 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801e694:	f107 0318 	add.w	r3, r7, #24
 801e698:	4619      	mov	r1, r3
 801e69a:	4620      	mov	r0, r4
 801e69c:	f7ef fc71 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801e6a0:	f107 0318 	add.w	r3, r7, #24
 801e6a4:	4618      	mov	r0, r3
 801e6a6:	f7ef ffb8 	bl	800e61a <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801e6aa:	68fb      	ldr	r3, [r7, #12]
 801e6ac:	332c      	adds	r3, #44	; 0x2c
 801e6ae:	6879      	ldr	r1, [r7, #4]
 801e6b0:	4618      	mov	r0, r3
 801e6b2:	f7f0 f82f 	bl	800e714 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801e6b6:	68fb      	ldr	r3, [r7, #12]
 801e6b8:	332c      	adds	r3, #44	; 0x2c
 801e6ba:	491d      	ldr	r1, [pc, #116]	; (801e730 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801e6bc:	4618      	mov	r0, r3
 801e6be:	f7f0 f83b 	bl	800e738 <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801e6c2:	68fb      	ldr	r3, [r7, #12]
 801e6c4:	683a      	ldr	r2, [r7, #0]
 801e6c6:	6879      	ldr	r1, [r7, #4]
 801e6c8:	4618      	mov	r0, r3
 801e6ca:	f7ff fb99 	bl	801de00 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801e6ce:	68fb      	ldr	r3, [r7, #12]
 801e6d0:	332c      	adds	r3, #44	; 0x2c
 801e6d2:	4918      	ldr	r1, [pc, #96]	; (801e734 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801e6d4:	4618      	mov	r0, r3
 801e6d6:	f7f0 f82f 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801e6da:	68fb      	ldr	r3, [r7, #12]
 801e6dc:	332c      	adds	r3, #44	; 0x2c
 801e6de:	4916      	ldr	r1, [pc, #88]	; (801e738 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801e6e0:	4618      	mov	r0, r3
 801e6e2:	f7f0 f829 	bl	800e738 <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801e6e6:	68fb      	ldr	r3, [r7, #12]
 801e6e8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e6ec:	f107 0320 	add.w	r3, r7, #32
 801e6f0:	f107 0210 	add.w	r2, r7, #16
 801e6f4:	4611      	mov	r1, r2
 801e6f6:	4618      	mov	r0, r3
 801e6f8:	f7ff f9bc 	bl	801da74 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801e6fc:	f107 0320 	add.w	r3, r7, #32
 801e700:	4619      	mov	r1, r3
 801e702:	4620      	mov	r0, r4
 801e704:	f7f0 f806 	bl	800e714 <_ZN12SimpleStringpLERKS_>
 801e708:	f107 0320 	add.w	r3, r7, #32
 801e70c:	4618      	mov	r0, r3
 801e70e:	f7ef ff84 	bl	800e61a <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801e712:	f107 0310 	add.w	r3, r7, #16
 801e716:	4618      	mov	r0, r3
 801e718:	f7fe fc08 	bl	801cf2c <_ZN21MockExpectedCallsListD1Ev>
}
 801e71c:	68fb      	ldr	r3, [r7, #12]
 801e71e:	4618      	mov	r0, r3
 801e720:	372c      	adds	r7, #44	; 0x2c
 801e722:	46bd      	mov	sp, r7
 801e724:	bd90      	pop	{r4, r7, pc}
 801e726:	bf00      	nop
 801e728:	0802a71c 	.word	0x0802a71c
 801e72c:	08027e30 	.word	0x08027e30
 801e730:	08027e60 	.word	0x08027e60
 801e734:	08027e74 	.word	0x08027e74
 801e738:	08027b38 	.word	0x08027b38

0801e73c <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801e73c:	b590      	push	{r4, r7, lr}
 801e73e:	b087      	sub	sp, #28
 801e740:	af00      	add	r7, sp, #0
 801e742:	60f8      	str	r0, [r7, #12]
 801e744:	60b9      	str	r1, [r7, #8]
 801e746:	607a      	str	r2, [r7, #4]
 801e748:	68fb      	ldr	r3, [r7, #12]
 801e74a:	68b9      	ldr	r1, [r7, #8]
 801e74c:	4618      	mov	r0, r3
 801e74e:	f7ff facf 	bl	801dcf0 <_ZN11MockFailureC1EP10UtestShell>
 801e752:	4a10      	ldr	r2, [pc, #64]	; (801e794 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801e754:	68fb      	ldr	r3, [r7, #12]
 801e756:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801e758:	68fb      	ldr	r3, [r7, #12]
 801e75a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e75e:	6878      	ldr	r0, [r7, #4]
 801e760:	f7ef ff2e 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801e764:	4602      	mov	r2, r0
 801e766:	f107 0310 	add.w	r3, r7, #16
 801e76a:	490b      	ldr	r1, [pc, #44]	; (801e798 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801e76c:	4618      	mov	r0, r3
 801e76e:	f7f0 fc5b 	bl	800f028 <_Z16StringFromFormatPKcz>
 801e772:	f107 0310 	add.w	r3, r7, #16
 801e776:	4619      	mov	r1, r3
 801e778:	4620      	mov	r0, r4
 801e77a:	f7ef fc02 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801e77e:	f107 0310 	add.w	r3, r7, #16
 801e782:	4618      	mov	r0, r3
 801e784:	f7ef ff49 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 801e788:	68fb      	ldr	r3, [r7, #12]
 801e78a:	4618      	mov	r0, r3
 801e78c:	371c      	adds	r7, #28
 801e78e:	46bd      	mov	sp, r7
 801e790:	bd90      	pop	{r4, r7, pc}
 801e792:	bf00      	nop
 801e794:	0802a6f0 	.word	0x0802a6f0
 801e798:	08027ea0 	.word	0x08027ea0

0801e79c <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801e79c:	b590      	push	{r4, r7, lr}
 801e79e:	b087      	sub	sp, #28
 801e7a0:	af00      	add	r7, sp, #0
 801e7a2:	60f8      	str	r0, [r7, #12]
 801e7a4:	60b9      	str	r1, [r7, #8]
 801e7a6:	607a      	str	r2, [r7, #4]
 801e7a8:	68fb      	ldr	r3, [r7, #12]
 801e7aa:	68b9      	ldr	r1, [r7, #8]
 801e7ac:	4618      	mov	r0, r3
 801e7ae:	f7ff fa9f 	bl	801dcf0 <_ZN11MockFailureC1EP10UtestShell>
 801e7b2:	4a10      	ldr	r2, [pc, #64]	; (801e7f4 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801e7b4:	68fb      	ldr	r3, [r7, #12]
 801e7b6:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801e7b8:	68fb      	ldr	r3, [r7, #12]
 801e7ba:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e7be:	6878      	ldr	r0, [r7, #4]
 801e7c0:	f7ef fefe 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801e7c4:	4602      	mov	r2, r0
 801e7c6:	f107 0310 	add.w	r3, r7, #16
 801e7ca:	490b      	ldr	r1, [pc, #44]	; (801e7f8 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801e7cc:	4618      	mov	r0, r3
 801e7ce:	f7f0 fc2b 	bl	800f028 <_Z16StringFromFormatPKcz>
 801e7d2:	f107 0310 	add.w	r3, r7, #16
 801e7d6:	4619      	mov	r1, r3
 801e7d8:	4620      	mov	r0, r4
 801e7da:	f7ef fbd2 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801e7de:	f107 0310 	add.w	r3, r7, #16
 801e7e2:	4618      	mov	r0, r3
 801e7e4:	f7ef ff19 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 801e7e8:	68fb      	ldr	r3, [r7, #12]
 801e7ea:	4618      	mov	r0, r3
 801e7ec:	371c      	adds	r7, #28
 801e7ee:	46bd      	mov	sp, r7
 801e7f0:	bd90      	pop	{r4, r7, pc}
 801e7f2:	bf00      	nop
 801e7f4:	0802a6c4 	.word	0x0802a6c4
 801e7f8:	08027ef8 	.word	0x08027ef8

0801e7fc <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801e7fc:	b590      	push	{r4, r7, lr}
 801e7fe:	b087      	sub	sp, #28
 801e800:	af00      	add	r7, sp, #0
 801e802:	60f8      	str	r0, [r7, #12]
 801e804:	60b9      	str	r1, [r7, #8]
 801e806:	607a      	str	r2, [r7, #4]
 801e808:	603b      	str	r3, [r7, #0]
 801e80a:	68fb      	ldr	r3, [r7, #12]
 801e80c:	68b9      	ldr	r1, [r7, #8]
 801e80e:	4618      	mov	r0, r3
 801e810:	f7ff fa6e 	bl	801dcf0 <_ZN11MockFailureC1EP10UtestShell>
 801e814:	4a12      	ldr	r2, [pc, #72]	; (801e860 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801e816:	68fb      	ldr	r3, [r7, #12]
 801e818:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801e81a:	68fb      	ldr	r3, [r7, #12]
 801e81c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801e820:	6878      	ldr	r0, [r7, #4]
 801e822:	f7ef fecd 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801e826:	4602      	mov	r2, r0
 801e828:	f107 0010 	add.w	r0, r7, #16
 801e82c:	683b      	ldr	r3, [r7, #0]
 801e82e:	490d      	ldr	r1, [pc, #52]	; (801e864 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801e830:	f7f0 fbfa 	bl	800f028 <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801e834:	f107 0310 	add.w	r3, r7, #16
 801e838:	4619      	mov	r1, r3
 801e83a:	4620      	mov	r0, r4
 801e83c:	f7ef fba1 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801e840:	f107 0310 	add.w	r3, r7, #16
 801e844:	4618      	mov	r0, r3
 801e846:	f7ef fee8 	bl	800e61a <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801e84a:	68fb      	ldr	r3, [r7, #12]
 801e84c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e84e:	6879      	ldr	r1, [r7, #4]
 801e850:	4618      	mov	r0, r3
 801e852:	f7ff fad5 	bl	801de00 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801e856:	68fb      	ldr	r3, [r7, #12]
 801e858:	4618      	mov	r0, r3
 801e85a:	371c      	adds	r7, #28
 801e85c:	46bd      	mov	sp, r7
 801e85e:	bd90      	pop	{r4, r7, pc}
 801e860:	0802a698 	.word	0x0802a698
 801e864:	08027f48 	.word	0x08027f48

0801e868 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801e868:	b590      	push	{r4, r7, lr}
 801e86a:	b087      	sub	sp, #28
 801e86c:	af00      	add	r7, sp, #0
 801e86e:	60f8      	str	r0, [r7, #12]
 801e870:	60b9      	str	r1, [r7, #8]
 801e872:	607a      	str	r2, [r7, #4]
 801e874:	603b      	str	r3, [r7, #0]
 801e876:	68fb      	ldr	r3, [r7, #12]
 801e878:	68b9      	ldr	r1, [r7, #8]
 801e87a:	4618      	mov	r0, r3
 801e87c:	f7ff fa38 	bl	801dcf0 <_ZN11MockFailureC1EP10UtestShell>
 801e880:	4a12      	ldr	r2, [pc, #72]	; (801e8cc <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801e882:	68fb      	ldr	r3, [r7, #12]
 801e884:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801e886:	68fb      	ldr	r3, [r7, #12]
 801e888:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e88c:	6878      	ldr	r0, [r7, #4]
 801e88e:	f7ef fe97 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801e892:	4602      	mov	r2, r0
 801e894:	f107 0310 	add.w	r3, r7, #16
 801e898:	490d      	ldr	r1, [pc, #52]	; (801e8d0 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801e89a:	4618      	mov	r0, r3
 801e89c:	f7f0 fbc4 	bl	800f028 <_Z16StringFromFormatPKcz>
 801e8a0:	f107 0310 	add.w	r3, r7, #16
 801e8a4:	4619      	mov	r1, r3
 801e8a6:	4620      	mov	r0, r4
 801e8a8:	f7ef fb6b 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801e8ac:	f107 0310 	add.w	r3, r7, #16
 801e8b0:	4618      	mov	r0, r3
 801e8b2:	f7ef feb2 	bl	800e61a <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801e8b6:	68fb      	ldr	r3, [r7, #12]
 801e8b8:	683a      	ldr	r2, [r7, #0]
 801e8ba:	6879      	ldr	r1, [r7, #4]
 801e8bc:	4618      	mov	r0, r3
 801e8be:	f7ff fa9f 	bl	801de00 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801e8c2:	68fb      	ldr	r3, [r7, #12]
 801e8c4:	4618      	mov	r0, r3
 801e8c6:	371c      	adds	r7, #28
 801e8c8:	46bd      	mov	sp, r7
 801e8ca:	bd90      	pop	{r4, r7, pc}
 801e8cc:	0802a66c 	.word	0x0802a66c
 801e8d0:	08027fac 	.word	0x08027fac

0801e8d4 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801e8d4:	b480      	push	{r7}
 801e8d6:	b083      	sub	sp, #12
 801e8d8:	af00      	add	r7, sp, #0
 801e8da:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801e8dc:	4a04      	ldr	r2, [pc, #16]	; (801e8f0 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801e8de:	687b      	ldr	r3, [r7, #4]
 801e8e0:	6013      	str	r3, [r2, #0]
}
 801e8e2:	bf00      	nop
 801e8e4:	370c      	adds	r7, #12
 801e8e6:	46bd      	mov	sp, r7
 801e8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8ec:	4770      	bx	lr
 801e8ee:	bf00      	nop
 801e8f0:	20000f84 	.word	0x20000f84

0801e8f4 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801e8f4:	b580      	push	{r7, lr}
 801e8f6:	b082      	sub	sp, #8
 801e8f8:	af00      	add	r7, sp, #0
 801e8fa:	6078      	str	r0, [r7, #4]
 801e8fc:	6039      	str	r1, [r7, #0]
 801e8fe:	4a10      	ldr	r2, [pc, #64]	; (801e940 <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801e900:	687b      	ldr	r3, [r7, #4]
 801e902:	601a      	str	r2, [r3, #0]
 801e904:	687b      	ldr	r3, [r7, #4]
 801e906:	3304      	adds	r3, #4
 801e908:	6839      	ldr	r1, [r7, #0]
 801e90a:	4618      	mov	r0, r3
 801e90c:	f7ef fb21 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
 801e910:	687b      	ldr	r3, [r7, #4]
 801e912:	330c      	adds	r3, #12
 801e914:	490b      	ldr	r1, [pc, #44]	; (801e944 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801e916:	4618      	mov	r0, r3
 801e918:	f7ef fac7 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801e91c:	687b      	ldr	r3, [r7, #4]
 801e91e:	2200      	movs	r2, #0
 801e920:	629a      	str	r2, [r3, #40]	; 0x28
 801e922:	687b      	ldr	r3, [r7, #4]
 801e924:	2200      	movs	r2, #0
 801e926:	62da      	str	r2, [r3, #44]	; 0x2c
 801e928:	687b      	ldr	r3, [r7, #4]
 801e92a:	2200      	movs	r2, #0
 801e92c:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801e92e:	687b      	ldr	r3, [r7, #4]
 801e930:	2200      	movs	r2, #0
 801e932:	619a      	str	r2, [r3, #24]
}
 801e934:	687b      	ldr	r3, [r7, #4]
 801e936:	4618      	mov	r0, r3
 801e938:	3708      	adds	r7, #8
 801e93a:	46bd      	mov	sp, r7
 801e93c:	bd80      	pop	{r7, pc}
 801e93e:	bf00      	nop
 801e940:	0802aef4 	.word	0x0802aef4
 801e944:	08027ffc 	.word	0x08027ffc

0801e948 <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801e948:	b580      	push	{r7, lr}
 801e94a:	b082      	sub	sp, #8
 801e94c:	af00      	add	r7, sp, #0
 801e94e:	6078      	str	r0, [r7, #4]
 801e950:	4a08      	ldr	r2, [pc, #32]	; (801e974 <_ZN14MockNamedValueD1Ev+0x2c>)
 801e952:	687b      	ldr	r3, [r7, #4]
 801e954:	601a      	str	r2, [r3, #0]
 801e956:	687b      	ldr	r3, [r7, #4]
 801e958:	330c      	adds	r3, #12
 801e95a:	4618      	mov	r0, r3
 801e95c:	f7ef fe5d 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801e960:	687b      	ldr	r3, [r7, #4]
 801e962:	3304      	adds	r3, #4
 801e964:	4618      	mov	r0, r3
 801e966:	f7ef fe58 	bl	800e61a <_ZN12SimpleStringD1Ev>
{
}
 801e96a:	687b      	ldr	r3, [r7, #4]
 801e96c:	4618      	mov	r0, r3
 801e96e:	3708      	adds	r7, #8
 801e970:	46bd      	mov	sp, r7
 801e972:	bd80      	pop	{r7, pc}
 801e974:	0802aef4 	.word	0x0802aef4

0801e978 <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801e978:	b580      	push	{r7, lr}
 801e97a:	b082      	sub	sp, #8
 801e97c:	af00      	add	r7, sp, #0
 801e97e:	6078      	str	r0, [r7, #4]
}
 801e980:	6878      	ldr	r0, [r7, #4]
 801e982:	f7ff ffe1 	bl	801e948 <_ZN14MockNamedValueD1Ev>
 801e986:	2138      	movs	r1, #56	; 0x38
 801e988:	6878      	ldr	r0, [r7, #4]
 801e98a:	f7ec fedf 	bl	800b74c <_ZdlPvj>
 801e98e:	687b      	ldr	r3, [r7, #4]
 801e990:	4618      	mov	r0, r3
 801e992:	3708      	adds	r7, #8
 801e994:	46bd      	mov	sp, r7
 801e996:	bd80      	pop	{r7, pc}

0801e998 <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801e998:	b590      	push	{r4, r7, lr}
 801e99a:	b085      	sub	sp, #20
 801e99c:	af00      	add	r7, sp, #0
 801e99e:	6078      	str	r0, [r7, #4]
 801e9a0:	460b      	mov	r3, r1
 801e9a2:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801e9a4:	687b      	ldr	r3, [r7, #4]
 801e9a6:	f103 040c 	add.w	r4, r3, #12
 801e9aa:	f107 0308 	add.w	r3, r7, #8
 801e9ae:	490b      	ldr	r1, [pc, #44]	; (801e9dc <_ZN14MockNamedValue8setValueEb+0x44>)
 801e9b0:	4618      	mov	r0, r3
 801e9b2:	f7ef fa7a 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801e9b6:	f107 0308 	add.w	r3, r7, #8
 801e9ba:	4619      	mov	r1, r3
 801e9bc:	4620      	mov	r0, r4
 801e9be:	f7ef fae0 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801e9c2:	f107 0308 	add.w	r3, r7, #8
 801e9c6:	4618      	mov	r0, r3
 801e9c8:	f7ef fe27 	bl	800e61a <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801e9cc:	687b      	ldr	r3, [r7, #4]
 801e9ce:	78fa      	ldrb	r2, [r7, #3]
 801e9d0:	761a      	strb	r2, [r3, #24]
}
 801e9d2:	bf00      	nop
 801e9d4:	3714      	adds	r7, #20
 801e9d6:	46bd      	mov	sp, r7
 801e9d8:	bd90      	pop	{r4, r7, pc}
 801e9da:	bf00      	nop
 801e9dc:	08028000 	.word	0x08028000

0801e9e0 <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801e9e0:	b590      	push	{r4, r7, lr}
 801e9e2:	b085      	sub	sp, #20
 801e9e4:	af00      	add	r7, sp, #0
 801e9e6:	6078      	str	r0, [r7, #4]
 801e9e8:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801e9ea:	687b      	ldr	r3, [r7, #4]
 801e9ec:	f103 040c 	add.w	r4, r3, #12
 801e9f0:	f107 0308 	add.w	r3, r7, #8
 801e9f4:	490a      	ldr	r1, [pc, #40]	; (801ea20 <_ZN14MockNamedValue8setValueEj+0x40>)
 801e9f6:	4618      	mov	r0, r3
 801e9f8:	f7ef fa57 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801e9fc:	f107 0308 	add.w	r3, r7, #8
 801ea00:	4619      	mov	r1, r3
 801ea02:	4620      	mov	r0, r4
 801ea04:	f7ef fabd 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801ea08:	f107 0308 	add.w	r3, r7, #8
 801ea0c:	4618      	mov	r0, r3
 801ea0e:	f7ef fe04 	bl	800e61a <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801ea12:	687b      	ldr	r3, [r7, #4]
 801ea14:	683a      	ldr	r2, [r7, #0]
 801ea16:	619a      	str	r2, [r3, #24]
}
 801ea18:	bf00      	nop
 801ea1a:	3714      	adds	r7, #20
 801ea1c:	46bd      	mov	sp, r7
 801ea1e:	bd90      	pop	{r4, r7, pc}
 801ea20:	08028008 	.word	0x08028008

0801ea24 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801ea24:	b590      	push	{r4, r7, lr}
 801ea26:	b085      	sub	sp, #20
 801ea28:	af00      	add	r7, sp, #0
 801ea2a:	6078      	str	r0, [r7, #4]
 801ea2c:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801ea2e:	687b      	ldr	r3, [r7, #4]
 801ea30:	f103 040c 	add.w	r4, r3, #12
 801ea34:	f107 0308 	add.w	r3, r7, #8
 801ea38:	490a      	ldr	r1, [pc, #40]	; (801ea64 <_ZN14MockNamedValue8setValueEi+0x40>)
 801ea3a:	4618      	mov	r0, r3
 801ea3c:	f7ef fa35 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801ea40:	f107 0308 	add.w	r3, r7, #8
 801ea44:	4619      	mov	r1, r3
 801ea46:	4620      	mov	r0, r4
 801ea48:	f7ef fa9b 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801ea4c:	f107 0308 	add.w	r3, r7, #8
 801ea50:	4618      	mov	r0, r3
 801ea52:	f7ef fde2 	bl	800e61a <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801ea56:	687b      	ldr	r3, [r7, #4]
 801ea58:	683a      	ldr	r2, [r7, #0]
 801ea5a:	619a      	str	r2, [r3, #24]
}
 801ea5c:	bf00      	nop
 801ea5e:	3714      	adds	r7, #20
 801ea60:	46bd      	mov	sp, r7
 801ea62:	bd90      	pop	{r4, r7, pc}
 801ea64:	08027ffc 	.word	0x08027ffc

0801ea68 <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801ea68:	b590      	push	{r4, r7, lr}
 801ea6a:	b085      	sub	sp, #20
 801ea6c:	af00      	add	r7, sp, #0
 801ea6e:	6078      	str	r0, [r7, #4]
 801ea70:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801ea72:	687b      	ldr	r3, [r7, #4]
 801ea74:	f103 040c 	add.w	r4, r3, #12
 801ea78:	f107 0308 	add.w	r3, r7, #8
 801ea7c:	490a      	ldr	r1, [pc, #40]	; (801eaa8 <_ZN14MockNamedValue8setValueEl+0x40>)
 801ea7e:	4618      	mov	r0, r3
 801ea80:	f7ef fa13 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801ea84:	f107 0308 	add.w	r3, r7, #8
 801ea88:	4619      	mov	r1, r3
 801ea8a:	4620      	mov	r0, r4
 801ea8c:	f7ef fa79 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801ea90:	f107 0308 	add.w	r3, r7, #8
 801ea94:	4618      	mov	r0, r3
 801ea96:	f7ef fdc0 	bl	800e61a <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801ea9a:	687b      	ldr	r3, [r7, #4]
 801ea9c:	683a      	ldr	r2, [r7, #0]
 801ea9e:	619a      	str	r2, [r3, #24]
}
 801eaa0:	bf00      	nop
 801eaa2:	3714      	adds	r7, #20
 801eaa4:	46bd      	mov	sp, r7
 801eaa6:	bd90      	pop	{r4, r7, pc}
 801eaa8:	08028018 	.word	0x08028018

0801eaac <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801eaac:	b590      	push	{r4, r7, lr}
 801eaae:	b085      	sub	sp, #20
 801eab0:	af00      	add	r7, sp, #0
 801eab2:	6078      	str	r0, [r7, #4]
 801eab4:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801eab6:	687b      	ldr	r3, [r7, #4]
 801eab8:	f103 040c 	add.w	r4, r3, #12
 801eabc:	f107 0308 	add.w	r3, r7, #8
 801eac0:	490a      	ldr	r1, [pc, #40]	; (801eaec <_ZN14MockNamedValue8setValueEm+0x40>)
 801eac2:	4618      	mov	r0, r3
 801eac4:	f7ef f9f1 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801eac8:	f107 0308 	add.w	r3, r7, #8
 801eacc:	4619      	mov	r1, r3
 801eace:	4620      	mov	r0, r4
 801ead0:	f7ef fa57 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801ead4:	f107 0308 	add.w	r3, r7, #8
 801ead8:	4618      	mov	r0, r3
 801eada:	f7ef fd9e 	bl	800e61a <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801eade:	687b      	ldr	r3, [r7, #4]
 801eae0:	683a      	ldr	r2, [r7, #0]
 801eae2:	619a      	str	r2, [r3, #24]
}
 801eae4:	bf00      	nop
 801eae6:	3714      	adds	r7, #20
 801eae8:	46bd      	mov	sp, r7
 801eaea:	bd90      	pop	{r4, r7, pc}
 801eaec:	08028024 	.word	0x08028024

0801eaf0 <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801eaf0:	b5b0      	push	{r4, r5, r7, lr}
 801eaf2:	b086      	sub	sp, #24
 801eaf4:	af02      	add	r7, sp, #8
 801eaf6:	60f8      	str	r0, [r7, #12]
 801eaf8:	1d3b      	adds	r3, r7, #4
 801eafa:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801eafe:	f7f6 fdb7 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801eb02:	4604      	mov	r4, r0
 801eb04:	6823      	ldr	r3, [r4, #0]
 801eb06:	3368      	adds	r3, #104	; 0x68
 801eb08:	681d      	ldr	r5, [r3, #0]
 801eb0a:	f7f6 fdc1 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801eb0e:	4603      	mov	r3, r0
 801eb10:	9300      	str	r3, [sp, #0]
 801eb12:	2367      	movs	r3, #103	; 0x67
 801eb14:	4a03      	ldr	r2, [pc, #12]	; (801eb24 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801eb16:	4904      	ldr	r1, [pc, #16]	; (801eb28 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801eb18:	4620      	mov	r0, r4
 801eb1a:	47a8      	blx	r5
}
 801eb1c:	bf00      	nop
 801eb1e:	3710      	adds	r7, #16
 801eb20:	46bd      	mov	sp, r7
 801eb22:	bdb0      	pop	{r4, r5, r7, pc}
 801eb24:	08028038 	.word	0x08028038
 801eb28:	08028054 	.word	0x08028054

0801eb2c <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801eb2c:	b5b0      	push	{r4, r5, r7, lr}
 801eb2e:	b086      	sub	sp, #24
 801eb30:	af02      	add	r7, sp, #8
 801eb32:	60f8      	str	r0, [r7, #12]
 801eb34:	1d3b      	adds	r3, r7, #4
 801eb36:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801eb3a:	f7f6 fd99 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801eb3e:	4604      	mov	r4, r0
 801eb40:	6823      	ldr	r3, [r4, #0]
 801eb42:	3368      	adds	r3, #104	; 0x68
 801eb44:	681d      	ldr	r5, [r3, #0]
 801eb46:	f7f6 fda3 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801eb4a:	4603      	mov	r3, r0
 801eb4c:	9300      	str	r3, [sp, #0]
 801eb4e:	236c      	movs	r3, #108	; 0x6c
 801eb50:	4a03      	ldr	r2, [pc, #12]	; (801eb60 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801eb52:	4904      	ldr	r1, [pc, #16]	; (801eb64 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801eb54:	4620      	mov	r0, r4
 801eb56:	47a8      	blx	r5
}
 801eb58:	bf00      	nop
 801eb5a:	3710      	adds	r7, #16
 801eb5c:	46bd      	mov	sp, r7
 801eb5e:	bdb0      	pop	{r4, r5, r7, pc}
 801eb60:	08028038 	.word	0x08028038
 801eb64:	08028074 	.word	0x08028074

0801eb68 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801eb68:	b580      	push	{r7, lr}
 801eb6a:	b084      	sub	sp, #16
 801eb6c:	af00      	add	r7, sp, #0
 801eb6e:	60f8      	str	r0, [r7, #12]
 801eb70:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801eb74:	68fb      	ldr	r3, [r7, #12]
 801eb76:	681b      	ldr	r3, [r3, #0]
 801eb78:	3328      	adds	r3, #40	; 0x28
 801eb7a:	681b      	ldr	r3, [r3, #0]
 801eb7c:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801eb90 <_ZN14MockNamedValue8setValueEd+0x28>
 801eb80:	ed97 0b00 	vldr	d0, [r7]
 801eb84:	68f8      	ldr	r0, [r7, #12]
 801eb86:	4798      	blx	r3
}
 801eb88:	bf00      	nop
 801eb8a:	3710      	adds	r7, #16
 801eb8c:	46bd      	mov	sp, r7
 801eb8e:	bd80      	pop	{r7, pc}
 801eb90:	47ae147b 	.word	0x47ae147b
 801eb94:	3f747ae1 	.word	0x3f747ae1

0801eb98 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801eb98:	b590      	push	{r4, r7, lr}
 801eb9a:	b089      	sub	sp, #36	; 0x24
 801eb9c:	af00      	add	r7, sp, #0
 801eb9e:	6178      	str	r0, [r7, #20]
 801eba0:	ed87 0b02 	vstr	d0, [r7, #8]
 801eba4:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801eba8:	697b      	ldr	r3, [r7, #20]
 801ebaa:	f103 040c 	add.w	r4, r3, #12
 801ebae:	f107 0318 	add.w	r3, r7, #24
 801ebb2:	490e      	ldr	r1, [pc, #56]	; (801ebec <_ZN14MockNamedValue8setValueEdd+0x54>)
 801ebb4:	4618      	mov	r0, r3
 801ebb6:	f7ef f978 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801ebba:	f107 0318 	add.w	r3, r7, #24
 801ebbe:	4619      	mov	r1, r3
 801ebc0:	4620      	mov	r0, r4
 801ebc2:	f7ef f9de 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801ebc6:	f107 0318 	add.w	r3, r7, #24
 801ebca:	4618      	mov	r0, r3
 801ebcc:	f7ef fd25 	bl	800e61a <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801ebd0:	6979      	ldr	r1, [r7, #20]
 801ebd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801ebd6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801ebda:	6979      	ldr	r1, [r7, #20]
 801ebdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ebe0:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801ebe4:	bf00      	nop
 801ebe6:	3724      	adds	r7, #36	; 0x24
 801ebe8:	46bd      	mov	sp, r7
 801ebea:	bd90      	pop	{r4, r7, pc}
 801ebec:	080280a0 	.word	0x080280a0

0801ebf0 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801ebf0:	b590      	push	{r4, r7, lr}
 801ebf2:	b085      	sub	sp, #20
 801ebf4:	af00      	add	r7, sp, #0
 801ebf6:	6078      	str	r0, [r7, #4]
 801ebf8:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801ebfa:	687b      	ldr	r3, [r7, #4]
 801ebfc:	f103 040c 	add.w	r4, r3, #12
 801ec00:	f107 0308 	add.w	r3, r7, #8
 801ec04:	490a      	ldr	r1, [pc, #40]	; (801ec30 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801ec06:	4618      	mov	r0, r3
 801ec08:	f7ef f94f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801ec0c:	f107 0308 	add.w	r3, r7, #8
 801ec10:	4619      	mov	r1, r3
 801ec12:	4620      	mov	r0, r4
 801ec14:	f7ef f9b5 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801ec18:	f107 0308 	add.w	r3, r7, #8
 801ec1c:	4618      	mov	r0, r3
 801ec1e:	f7ef fcfc 	bl	800e61a <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801ec22:	687b      	ldr	r3, [r7, #4]
 801ec24:	683a      	ldr	r2, [r7, #0]
 801ec26:	619a      	str	r2, [r3, #24]
}
 801ec28:	bf00      	nop
 801ec2a:	3714      	adds	r7, #20
 801ec2c:	46bd      	mov	sp, r7
 801ec2e:	bd90      	pop	{r4, r7, pc}
 801ec30:	080280a8 	.word	0x080280a8

0801ec34 <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801ec34:	b590      	push	{r4, r7, lr}
 801ec36:	b085      	sub	sp, #20
 801ec38:	af00      	add	r7, sp, #0
 801ec3a:	6078      	str	r0, [r7, #4]
 801ec3c:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801ec3e:	687b      	ldr	r3, [r7, #4]
 801ec40:	f103 040c 	add.w	r4, r3, #12
 801ec44:	f107 0308 	add.w	r3, r7, #8
 801ec48:	490a      	ldr	r1, [pc, #40]	; (801ec74 <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801ec4a:	4618      	mov	r0, r3
 801ec4c:	f7ef f92d 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801ec50:	f107 0308 	add.w	r3, r7, #8
 801ec54:	4619      	mov	r1, r3
 801ec56:	4620      	mov	r0, r4
 801ec58:	f7ef f993 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801ec5c:	f107 0308 	add.w	r3, r7, #8
 801ec60:	4618      	mov	r0, r3
 801ec62:	f7ef fcda 	bl	800e61a <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801ec66:	687b      	ldr	r3, [r7, #4]
 801ec68:	683a      	ldr	r2, [r7, #0]
 801ec6a:	619a      	str	r2, [r3, #24]
}
 801ec6c:	bf00      	nop
 801ec6e:	3714      	adds	r7, #20
 801ec70:	46bd      	mov	sp, r7
 801ec72:	bd90      	pop	{r4, r7, pc}
 801ec74:	080280b0 	.word	0x080280b0

0801ec78 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801ec78:	b590      	push	{r4, r7, lr}
 801ec7a:	b085      	sub	sp, #20
 801ec7c:	af00      	add	r7, sp, #0
 801ec7e:	6078      	str	r0, [r7, #4]
 801ec80:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801ec82:	687b      	ldr	r3, [r7, #4]
 801ec84:	f103 040c 	add.w	r4, r3, #12
 801ec88:	f107 0308 	add.w	r3, r7, #8
 801ec8c:	490a      	ldr	r1, [pc, #40]	; (801ecb8 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801ec8e:	4618      	mov	r0, r3
 801ec90:	f7ef f90b 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801ec94:	f107 0308 	add.w	r3, r7, #8
 801ec98:	4619      	mov	r1, r3
 801ec9a:	4620      	mov	r0, r4
 801ec9c:	f7ef f971 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801eca0:	f107 0308 	add.w	r3, r7, #8
 801eca4:	4618      	mov	r0, r3
 801eca6:	f7ef fcb8 	bl	800e61a <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801ecaa:	687b      	ldr	r3, [r7, #4]
 801ecac:	683a      	ldr	r2, [r7, #0]
 801ecae:	619a      	str	r2, [r3, #24]
}
 801ecb0:	bf00      	nop
 801ecb2:	3714      	adds	r7, #20
 801ecb4:	46bd      	mov	sp, r7
 801ecb6:	bd90      	pop	{r4, r7, pc}
 801ecb8:	080280bc 	.word	0x080280bc

0801ecbc <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801ecbc:	b590      	push	{r4, r7, lr}
 801ecbe:	b085      	sub	sp, #20
 801ecc0:	af00      	add	r7, sp, #0
 801ecc2:	6078      	str	r0, [r7, #4]
 801ecc4:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801ecc6:	687b      	ldr	r3, [r7, #4]
 801ecc8:	f103 040c 	add.w	r4, r3, #12
 801eccc:	f107 0308 	add.w	r3, r7, #8
 801ecd0:	490a      	ldr	r1, [pc, #40]	; (801ecfc <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801ecd2:	4618      	mov	r0, r3
 801ecd4:	f7ef f8e9 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801ecd8:	f107 0308 	add.w	r3, r7, #8
 801ecdc:	4619      	mov	r1, r3
 801ecde:	4620      	mov	r0, r4
 801ece0:	f7ef f94f 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801ece4:	f107 0308 	add.w	r3, r7, #8
 801ece8:	4618      	mov	r0, r3
 801ecea:	f7ef fc96 	bl	800e61a <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801ecee:	687b      	ldr	r3, [r7, #4]
 801ecf0:	683a      	ldr	r2, [r7, #0]
 801ecf2:	619a      	str	r2, [r3, #24]
}
 801ecf4:	bf00      	nop
 801ecf6:	3714      	adds	r7, #20
 801ecf8:	46bd      	mov	sp, r7
 801ecfa:	bd90      	pop	{r4, r7, pc}
 801ecfc:	080280c8 	.word	0x080280c8

0801ed00 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801ed00:	b590      	push	{r4, r7, lr}
 801ed02:	b087      	sub	sp, #28
 801ed04:	af00      	add	r7, sp, #0
 801ed06:	60f8      	str	r0, [r7, #12]
 801ed08:	60b9      	str	r1, [r7, #8]
 801ed0a:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801ed0c:	68fb      	ldr	r3, [r7, #12]
 801ed0e:	f103 040c 	add.w	r4, r3, #12
 801ed12:	f107 0310 	add.w	r3, r7, #16
 801ed16:	490c      	ldr	r1, [pc, #48]	; (801ed48 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801ed18:	4618      	mov	r0, r3
 801ed1a:	f7ef f8c6 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801ed1e:	f107 0310 	add.w	r3, r7, #16
 801ed22:	4619      	mov	r1, r3
 801ed24:	4620      	mov	r0, r4
 801ed26:	f7ef f92c 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801ed2a:	f107 0310 	add.w	r3, r7, #16
 801ed2e:	4618      	mov	r0, r3
 801ed30:	f7ef fc73 	bl	800e61a <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801ed34:	68fb      	ldr	r3, [r7, #12]
 801ed36:	68ba      	ldr	r2, [r7, #8]
 801ed38:	619a      	str	r2, [r3, #24]
    size_ = size;
 801ed3a:	68fb      	ldr	r3, [r7, #12]
 801ed3c:	687a      	ldr	r2, [r7, #4]
 801ed3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 801ed40:	bf00      	nop
 801ed42:	371c      	adds	r7, #28
 801ed44:	46bd      	mov	sp, r7
 801ed46:	bd90      	pop	{r4, r7, pc}
 801ed48:	080280d4 	.word	0x080280d4

0801ed4c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801ed4c:	b580      	push	{r7, lr}
 801ed4e:	b084      	sub	sp, #16
 801ed50:	af00      	add	r7, sp, #0
 801ed52:	60f8      	str	r0, [r7, #12]
 801ed54:	60b9      	str	r1, [r7, #8]
 801ed56:	607a      	str	r2, [r7, #4]
    type_ = type;
 801ed58:	68fb      	ldr	r3, [r7, #12]
 801ed5a:	330c      	adds	r3, #12
 801ed5c:	68b9      	ldr	r1, [r7, #8]
 801ed5e:	4618      	mov	r0, r3
 801ed60:	f7ef f90f 	bl	800df82 <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801ed64:	68fb      	ldr	r3, [r7, #12]
 801ed66:	687a      	ldr	r2, [r7, #4]
 801ed68:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801ed6a:	4b11      	ldr	r3, [pc, #68]	; (801edb0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801ed6c:	681b      	ldr	r3, [r3, #0]
 801ed6e:	2b00      	cmp	r3, #0
 801ed70:	d019      	beq.n	801eda6 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801ed72:	4b0f      	ldr	r3, [pc, #60]	; (801edb0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801ed74:	681a      	ldr	r2, [r3, #0]
 801ed76:	4b0e      	ldr	r3, [pc, #56]	; (801edb0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801ed78:	681b      	ldr	r3, [r3, #0]
 801ed7a:	681b      	ldr	r3, [r3, #0]
 801ed7c:	3314      	adds	r3, #20
 801ed7e:	681b      	ldr	r3, [r3, #0]
 801ed80:	68b9      	ldr	r1, [r7, #8]
 801ed82:	4610      	mov	r0, r2
 801ed84:	4798      	blx	r3
 801ed86:	4602      	mov	r2, r0
 801ed88:	68fb      	ldr	r3, [r7, #12]
 801ed8a:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801ed8c:	4b08      	ldr	r3, [pc, #32]	; (801edb0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801ed8e:	681a      	ldr	r2, [r3, #0]
 801ed90:	4b07      	ldr	r3, [pc, #28]	; (801edb0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801ed92:	681b      	ldr	r3, [r3, #0]
 801ed94:	681b      	ldr	r3, [r3, #0]
 801ed96:	3318      	adds	r3, #24
 801ed98:	681b      	ldr	r3, [r3, #0]
 801ed9a:	68b9      	ldr	r1, [r7, #8]
 801ed9c:	4610      	mov	r0, r2
 801ed9e:	4798      	blx	r3
 801eda0:	4602      	mov	r2, r0
 801eda2:	68fb      	ldr	r3, [r7, #12]
 801eda4:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801eda6:	bf00      	nop
 801eda8:	3710      	adds	r7, #16
 801edaa:	46bd      	mov	sp, r7
 801edac:	bd80      	pop	{r7, pc}
 801edae:	bf00      	nop
 801edb0:	20000f84 	.word	0x20000f84

0801edb4 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801edb4:	b580      	push	{r7, lr}
 801edb6:	b084      	sub	sp, #16
 801edb8:	af00      	add	r7, sp, #0
 801edba:	60f8      	str	r0, [r7, #12]
 801edbc:	60b9      	str	r1, [r7, #8]
 801edbe:	607a      	str	r2, [r7, #4]
    type_ = type;
 801edc0:	68fb      	ldr	r3, [r7, #12]
 801edc2:	330c      	adds	r3, #12
 801edc4:	68b9      	ldr	r1, [r7, #8]
 801edc6:	4618      	mov	r0, r3
 801edc8:	f7ef f8db 	bl	800df82 <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801edcc:	68fb      	ldr	r3, [r7, #12]
 801edce:	687a      	ldr	r2, [r7, #4]
 801edd0:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801edd2:	4b11      	ldr	r3, [pc, #68]	; (801ee18 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801edd4:	681b      	ldr	r3, [r3, #0]
 801edd6:	2b00      	cmp	r3, #0
 801edd8:	d019      	beq.n	801ee0e <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801edda:	4b0f      	ldr	r3, [pc, #60]	; (801ee18 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801eddc:	681a      	ldr	r2, [r3, #0]
 801edde:	4b0e      	ldr	r3, [pc, #56]	; (801ee18 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801ede0:	681b      	ldr	r3, [r3, #0]
 801ede2:	681b      	ldr	r3, [r3, #0]
 801ede4:	3314      	adds	r3, #20
 801ede6:	681b      	ldr	r3, [r3, #0]
 801ede8:	68b9      	ldr	r1, [r7, #8]
 801edea:	4610      	mov	r0, r2
 801edec:	4798      	blx	r3
 801edee:	4602      	mov	r2, r0
 801edf0:	68fb      	ldr	r3, [r7, #12]
 801edf2:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801edf4:	4b08      	ldr	r3, [pc, #32]	; (801ee18 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801edf6:	681a      	ldr	r2, [r3, #0]
 801edf8:	4b07      	ldr	r3, [pc, #28]	; (801ee18 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801edfa:	681b      	ldr	r3, [r3, #0]
 801edfc:	681b      	ldr	r3, [r3, #0]
 801edfe:	3318      	adds	r3, #24
 801ee00:	681b      	ldr	r3, [r3, #0]
 801ee02:	68b9      	ldr	r1, [r7, #8]
 801ee04:	4610      	mov	r0, r2
 801ee06:	4798      	blx	r3
 801ee08:	4602      	mov	r2, r0
 801ee0a:	68fb      	ldr	r3, [r7, #12]
 801ee0c:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801ee0e:	bf00      	nop
 801ee10:	3710      	adds	r7, #16
 801ee12:	46bd      	mov	sp, r7
 801ee14:	bd80      	pop	{r7, pc}
 801ee16:	bf00      	nop
 801ee18:	20000f84 	.word	0x20000f84

0801ee1c <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801ee1c:	b480      	push	{r7}
 801ee1e:	b083      	sub	sp, #12
 801ee20:	af00      	add	r7, sp, #0
 801ee22:	6078      	str	r0, [r7, #4]
 801ee24:	6039      	str	r1, [r7, #0]
    size_ = size;
 801ee26:	687b      	ldr	r3, [r7, #4]
 801ee28:	683a      	ldr	r2, [r7, #0]
 801ee2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801ee2c:	bf00      	nop
 801ee2e:	370c      	adds	r7, #12
 801ee30:	46bd      	mov	sp, r7
 801ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee36:	4770      	bx	lr

0801ee38 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801ee38:	b590      	push	{r4, r7, lr}
 801ee3a:	b085      	sub	sp, #20
 801ee3c:	af00      	add	r7, sp, #0
 801ee3e:	6078      	str	r0, [r7, #4]
 801ee40:	6039      	str	r1, [r7, #0]
    name_ = name;
 801ee42:	687b      	ldr	r3, [r7, #4]
 801ee44:	1d1c      	adds	r4, r3, #4
 801ee46:	f107 0308 	add.w	r3, r7, #8
 801ee4a:	6839      	ldr	r1, [r7, #0]
 801ee4c:	4618      	mov	r0, r3
 801ee4e:	f7ef f82c 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801ee52:	f107 0308 	add.w	r3, r7, #8
 801ee56:	4619      	mov	r1, r3
 801ee58:	4620      	mov	r0, r4
 801ee5a:	f7ef f892 	bl	800df82 <_ZN12SimpleStringaSERKS_>
 801ee5e:	f107 0308 	add.w	r3, r7, #8
 801ee62:	4618      	mov	r0, r3
 801ee64:	f7ef fbd9 	bl	800e61a <_ZN12SimpleStringD1Ev>
}
 801ee68:	bf00      	nop
 801ee6a:	3714      	adds	r7, #20
 801ee6c:	46bd      	mov	sp, r7
 801ee6e:	bd90      	pop	{r4, r7, pc}

0801ee70 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801ee70:	b580      	push	{r7, lr}
 801ee72:	b082      	sub	sp, #8
 801ee74:	af00      	add	r7, sp, #0
 801ee76:	6078      	str	r0, [r7, #4]
 801ee78:	6039      	str	r1, [r7, #0]
    return name_;
 801ee7a:	683b      	ldr	r3, [r7, #0]
 801ee7c:	3304      	adds	r3, #4
 801ee7e:	4619      	mov	r1, r3
 801ee80:	6878      	ldr	r0, [r7, #4]
 801ee82:	f7ef f866 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
}
 801ee86:	6878      	ldr	r0, [r7, #4]
 801ee88:	3708      	adds	r7, #8
 801ee8a:	46bd      	mov	sp, r7
 801ee8c:	bd80      	pop	{r7, pc}

0801ee8e <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801ee8e:	b580      	push	{r7, lr}
 801ee90:	b082      	sub	sp, #8
 801ee92:	af00      	add	r7, sp, #0
 801ee94:	6078      	str	r0, [r7, #4]
 801ee96:	6039      	str	r1, [r7, #0]
    return type_;
 801ee98:	683b      	ldr	r3, [r7, #0]
 801ee9a:	330c      	adds	r3, #12
 801ee9c:	4619      	mov	r1, r3
 801ee9e:	6878      	ldr	r0, [r7, #4]
 801eea0:	f7ef f857 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
}
 801eea4:	6878      	ldr	r0, [r7, #4]
 801eea6:	3708      	adds	r7, #8
 801eea8:	46bd      	mov	sp, r7
 801eeaa:	bd80      	pop	{r7, pc}

0801eeac <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801eeac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eeae:	b087      	sub	sp, #28
 801eeb0:	af04      	add	r7, sp, #16
 801eeb2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801eeb4:	f7f6 fbdc 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801eeb8:	4604      	mov	r4, r0
 801eeba:	6823      	ldr	r3, [r4, #0]
 801eebc:	3324      	adds	r3, #36	; 0x24
 801eebe:	681d      	ldr	r5, [r3, #0]
 801eec0:	687b      	ldr	r3, [r7, #4]
 801eec2:	330c      	adds	r3, #12
 801eec4:	4618      	mov	r0, r3
 801eec6:	f7ef fb7b 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801eeca:	4606      	mov	r6, r0
 801eecc:	f7f6 fbe0 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801eed0:	4603      	mov	r3, r0
 801eed2:	9302      	str	r3, [sp, #8]
 801eed4:	23c8      	movs	r3, #200	; 0xc8
 801eed6:	9301      	str	r3, [sp, #4]
 801eed8:	4b06      	ldr	r3, [pc, #24]	; (801eef4 <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801eeda:	9300      	str	r3, [sp, #0]
 801eedc:	2300      	movs	r3, #0
 801eede:	4632      	mov	r2, r6
 801eee0:	4905      	ldr	r1, [pc, #20]	; (801eef8 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801eee2:	4620      	mov	r0, r4
 801eee4:	47a8      	blx	r5
    return value_.boolValue_;
 801eee6:	687b      	ldr	r3, [r7, #4]
 801eee8:	7e1b      	ldrb	r3, [r3, #24]
}
 801eeea:	4618      	mov	r0, r3
 801eeec:	370c      	adds	r7, #12
 801eeee:	46bd      	mov	sp, r7
 801eef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eef2:	bf00      	nop
 801eef4:	08028038 	.word	0x08028038
 801eef8:	08028000 	.word	0x08028000

0801eefc <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801eefc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eefe:	b089      	sub	sp, #36	; 0x24
 801ef00:	af04      	add	r7, sp, #16
 801ef02:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801ef04:	687b      	ldr	r3, [r7, #4]
 801ef06:	f103 040c 	add.w	r4, r3, #12
 801ef0a:	f107 0308 	add.w	r3, r7, #8
 801ef0e:	4920      	ldr	r1, [pc, #128]	; (801ef90 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801ef10:	4618      	mov	r0, r3
 801ef12:	f7ee ffca 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801ef16:	2501      	movs	r5, #1
 801ef18:	f107 0308 	add.w	r3, r7, #8
 801ef1c:	4619      	mov	r1, r3
 801ef1e:	4620      	mov	r0, r4
 801ef20:	f7ef fb87 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801ef24:	4603      	mov	r3, r0
 801ef26:	2b00      	cmp	r3, #0
 801ef28:	d005      	beq.n	801ef36 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801ef2a:	687b      	ldr	r3, [r7, #4]
 801ef2c:	699b      	ldr	r3, [r3, #24]
 801ef2e:	2b00      	cmp	r3, #0
 801ef30:	db01      	blt.n	801ef36 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801ef32:	2401      	movs	r4, #1
 801ef34:	e000      	b.n	801ef38 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801ef36:	2400      	movs	r4, #0
 801ef38:	2d00      	cmp	r5, #0
 801ef3a:	d004      	beq.n	801ef46 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801ef3c:	f107 0308 	add.w	r3, r7, #8
 801ef40:	4618      	mov	r0, r3
 801ef42:	f7ef fb6a 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801ef46:	2c00      	cmp	r4, #0
 801ef48:	d002      	beq.n	801ef50 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801ef4a:	687b      	ldr	r3, [r7, #4]
 801ef4c:	699b      	ldr	r3, [r3, #24]
 801ef4e:	e01a      	b.n	801ef86 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801ef50:	f7f6 fb8e 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801ef54:	4604      	mov	r4, r0
 801ef56:	6823      	ldr	r3, [r4, #0]
 801ef58:	3324      	adds	r3, #36	; 0x24
 801ef5a:	681d      	ldr	r5, [r3, #0]
 801ef5c:	687b      	ldr	r3, [r7, #4]
 801ef5e:	330c      	adds	r3, #12
 801ef60:	4618      	mov	r0, r3
 801ef62:	f7ef fb2d 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801ef66:	4606      	mov	r6, r0
 801ef68:	f7f6 fb92 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ef6c:	4603      	mov	r3, r0
 801ef6e:	9302      	str	r3, [sp, #8]
 801ef70:	23d2      	movs	r3, #210	; 0xd2
 801ef72:	9301      	str	r3, [sp, #4]
 801ef74:	4b07      	ldr	r3, [pc, #28]	; (801ef94 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801ef76:	9300      	str	r3, [sp, #0]
 801ef78:	2300      	movs	r3, #0
 801ef7a:	4632      	mov	r2, r6
 801ef7c:	4906      	ldr	r1, [pc, #24]	; (801ef98 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801ef7e:	4620      	mov	r0, r4
 801ef80:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801ef82:	687b      	ldr	r3, [r7, #4]
 801ef84:	699b      	ldr	r3, [r3, #24]
    }
}
 801ef86:	4618      	mov	r0, r3
 801ef88:	3714      	adds	r7, #20
 801ef8a:	46bd      	mov	sp, r7
 801ef8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef8e:	bf00      	nop
 801ef90:	08027ffc 	.word	0x08027ffc
 801ef94:	08028038 	.word	0x08028038
 801ef98:	08028008 	.word	0x08028008

0801ef9c <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801ef9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ef9e:	b087      	sub	sp, #28
 801efa0:	af04      	add	r7, sp, #16
 801efa2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801efa4:	f7f6 fb64 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801efa8:	4604      	mov	r4, r0
 801efaa:	6823      	ldr	r3, [r4, #0]
 801efac:	3324      	adds	r3, #36	; 0x24
 801efae:	681d      	ldr	r5, [r3, #0]
 801efb0:	687b      	ldr	r3, [r7, #4]
 801efb2:	330c      	adds	r3, #12
 801efb4:	4618      	mov	r0, r3
 801efb6:	f7ef fb03 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801efba:	4606      	mov	r6, r0
 801efbc:	f7f6 fb68 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801efc0:	4603      	mov	r3, r0
 801efc2:	9302      	str	r3, [sp, #8]
 801efc4:	23d9      	movs	r3, #217	; 0xd9
 801efc6:	9301      	str	r3, [sp, #4]
 801efc8:	4b06      	ldr	r3, [pc, #24]	; (801efe4 <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801efca:	9300      	str	r3, [sp, #0]
 801efcc:	2300      	movs	r3, #0
 801efce:	4632      	mov	r2, r6
 801efd0:	4905      	ldr	r1, [pc, #20]	; (801efe8 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801efd2:	4620      	mov	r0, r4
 801efd4:	47a8      	blx	r5
    return value_.intValue_;
 801efd6:	687b      	ldr	r3, [r7, #4]
 801efd8:	699b      	ldr	r3, [r3, #24]
}
 801efda:	4618      	mov	r0, r3
 801efdc:	370c      	adds	r7, #12
 801efde:	46bd      	mov	sp, r7
 801efe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801efe2:	bf00      	nop
 801efe4:	08028038 	.word	0x08028038
 801efe8:	08027ffc 	.word	0x08027ffc

0801efec <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801efec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801efee:	b08b      	sub	sp, #44	; 0x2c
 801eff0:	af04      	add	r7, sp, #16
 801eff2:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	f103 040c 	add.w	r4, r3, #12
 801effa:	f107 0308 	add.w	r3, r7, #8
 801effe:	4928      	ldr	r1, [pc, #160]	; (801f0a0 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801f000:	4618      	mov	r0, r3
 801f002:	f7ee ff52 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f006:	f107 0308 	add.w	r3, r7, #8
 801f00a:	4619      	mov	r1, r3
 801f00c:	4620      	mov	r0, r4
 801f00e:	f7ef fb10 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f012:	4603      	mov	r3, r0
 801f014:	461c      	mov	r4, r3
 801f016:	f107 0308 	add.w	r3, r7, #8
 801f01a:	4618      	mov	r0, r3
 801f01c:	f7ef fafd 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f020:	2c00      	cmp	r4, #0
 801f022:	d002      	beq.n	801f02a <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801f024:	687b      	ldr	r3, [r7, #4]
 801f026:	699b      	ldr	r3, [r3, #24]
 801f028:	e035      	b.n	801f096 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801f02a:	687b      	ldr	r3, [r7, #4]
 801f02c:	f103 040c 	add.w	r4, r3, #12
 801f030:	f107 0310 	add.w	r3, r7, #16
 801f034:	491b      	ldr	r1, [pc, #108]	; (801f0a4 <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801f036:	4618      	mov	r0, r3
 801f038:	f7ee ff37 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f03c:	f107 0310 	add.w	r3, r7, #16
 801f040:	4619      	mov	r1, r3
 801f042:	4620      	mov	r0, r4
 801f044:	f7ef faf5 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f048:	4603      	mov	r3, r0
 801f04a:	461c      	mov	r4, r3
 801f04c:	f107 0310 	add.w	r3, r7, #16
 801f050:	4618      	mov	r0, r3
 801f052:	f7ef fae2 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f056:	2c00      	cmp	r4, #0
 801f058:	d002      	beq.n	801f060 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801f05a:	687b      	ldr	r3, [r7, #4]
 801f05c:	699b      	ldr	r3, [r3, #24]
 801f05e:	e01a      	b.n	801f096 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801f060:	f7f6 fb06 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801f064:	4604      	mov	r4, r0
 801f066:	6823      	ldr	r3, [r4, #0]
 801f068:	3324      	adds	r3, #36	; 0x24
 801f06a:	681d      	ldr	r5, [r3, #0]
 801f06c:	687b      	ldr	r3, [r7, #4]
 801f06e:	330c      	adds	r3, #12
 801f070:	4618      	mov	r0, r3
 801f072:	f7ef faa5 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801f076:	4606      	mov	r6, r0
 801f078:	f7f6 fb0a 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f07c:	4603      	mov	r3, r0
 801f07e:	9302      	str	r3, [sp, #8]
 801f080:	23e5      	movs	r3, #229	; 0xe5
 801f082:	9301      	str	r3, [sp, #4]
 801f084:	4b08      	ldr	r3, [pc, #32]	; (801f0a8 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801f086:	9300      	str	r3, [sp, #0]
 801f088:	2300      	movs	r3, #0
 801f08a:	4632      	mov	r2, r6
 801f08c:	4907      	ldr	r1, [pc, #28]	; (801f0ac <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801f08e:	4620      	mov	r0, r4
 801f090:	47a8      	blx	r5
        return value_.longIntValue_;
 801f092:	687b      	ldr	r3, [r7, #4]
 801f094:	699b      	ldr	r3, [r3, #24]
    }
}
 801f096:	4618      	mov	r0, r3
 801f098:	371c      	adds	r7, #28
 801f09a:	46bd      	mov	sp, r7
 801f09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f09e:	bf00      	nop
 801f0a0:	08027ffc 	.word	0x08027ffc
 801f0a4:	08028008 	.word	0x08028008
 801f0a8:	08028038 	.word	0x08028038
 801f0ac:	08028018 	.word	0x08028018

0801f0b0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801f0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f0b2:	b08d      	sub	sp, #52	; 0x34
 801f0b4:	af04      	add	r7, sp, #16
 801f0b6:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801f0b8:	687b      	ldr	r3, [r7, #4]
 801f0ba:	f103 040c 	add.w	r4, r3, #12
 801f0be:	f107 0308 	add.w	r3, r7, #8
 801f0c2:	4940      	ldr	r1, [pc, #256]	; (801f1c4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801f0c4:	4618      	mov	r0, r3
 801f0c6:	f7ee fef0 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f0ca:	f107 0308 	add.w	r3, r7, #8
 801f0ce:	4619      	mov	r1, r3
 801f0d0:	4620      	mov	r0, r4
 801f0d2:	f7ef faae 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f0d6:	4603      	mov	r3, r0
 801f0d8:	461c      	mov	r4, r3
 801f0da:	f107 0308 	add.w	r3, r7, #8
 801f0de:	4618      	mov	r0, r3
 801f0e0:	f7ef fa9b 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f0e4:	2c00      	cmp	r4, #0
 801f0e6:	d002      	beq.n	801f0ee <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801f0e8:	687b      	ldr	r3, [r7, #4]
 801f0ea:	699b      	ldr	r3, [r3, #24]
 801f0ec:	e066      	b.n	801f1bc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801f0ee:	687b      	ldr	r3, [r7, #4]
 801f0f0:	f103 040c 	add.w	r4, r3, #12
 801f0f4:	f107 0310 	add.w	r3, r7, #16
 801f0f8:	4933      	ldr	r1, [pc, #204]	; (801f1c8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801f0fa:	4618      	mov	r0, r3
 801f0fc:	f7ee fed5 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f100:	2501      	movs	r5, #1
 801f102:	f107 0310 	add.w	r3, r7, #16
 801f106:	4619      	mov	r1, r3
 801f108:	4620      	mov	r0, r4
 801f10a:	f7ef fa92 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f10e:	4603      	mov	r3, r0
 801f110:	2b00      	cmp	r3, #0
 801f112:	d005      	beq.n	801f120 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801f114:	687b      	ldr	r3, [r7, #4]
 801f116:	699b      	ldr	r3, [r3, #24]
 801f118:	2b00      	cmp	r3, #0
 801f11a:	db01      	blt.n	801f120 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801f11c:	2401      	movs	r4, #1
 801f11e:	e000      	b.n	801f122 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801f120:	2400      	movs	r4, #0
 801f122:	2d00      	cmp	r5, #0
 801f124:	d004      	beq.n	801f130 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801f126:	f107 0310 	add.w	r3, r7, #16
 801f12a:	4618      	mov	r0, r3
 801f12c:	f7ef fa75 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f130:	2c00      	cmp	r4, #0
 801f132:	d002      	beq.n	801f13a <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801f134:	687b      	ldr	r3, [r7, #4]
 801f136:	699b      	ldr	r3, [r3, #24]
 801f138:	e040      	b.n	801f1bc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801f13a:	687b      	ldr	r3, [r7, #4]
 801f13c:	f103 040c 	add.w	r4, r3, #12
 801f140:	f107 0318 	add.w	r3, r7, #24
 801f144:	4921      	ldr	r1, [pc, #132]	; (801f1cc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801f146:	4618      	mov	r0, r3
 801f148:	f7ee feaf 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f14c:	2501      	movs	r5, #1
 801f14e:	f107 0318 	add.w	r3, r7, #24
 801f152:	4619      	mov	r1, r3
 801f154:	4620      	mov	r0, r4
 801f156:	f7ef fa6c 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f15a:	4603      	mov	r3, r0
 801f15c:	2b00      	cmp	r3, #0
 801f15e:	d005      	beq.n	801f16c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	699b      	ldr	r3, [r3, #24]
 801f164:	2b00      	cmp	r3, #0
 801f166:	db01      	blt.n	801f16c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801f168:	2401      	movs	r4, #1
 801f16a:	e000      	b.n	801f16e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801f16c:	2400      	movs	r4, #0
 801f16e:	2d00      	cmp	r5, #0
 801f170:	d004      	beq.n	801f17c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801f172:	f107 0318 	add.w	r3, r7, #24
 801f176:	4618      	mov	r0, r3
 801f178:	f7ef fa4f 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f17c:	2c00      	cmp	r4, #0
 801f17e:	d002      	beq.n	801f186 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801f180:	687b      	ldr	r3, [r7, #4]
 801f182:	699b      	ldr	r3, [r3, #24]
 801f184:	e01a      	b.n	801f1bc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801f186:	f7f6 fa73 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801f18a:	4604      	mov	r4, r0
 801f18c:	6823      	ldr	r3, [r4, #0]
 801f18e:	3324      	adds	r3, #36	; 0x24
 801f190:	681d      	ldr	r5, [r3, #0]
 801f192:	687b      	ldr	r3, [r7, #4]
 801f194:	330c      	adds	r3, #12
 801f196:	4618      	mov	r0, r3
 801f198:	f7ef fa12 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801f19c:	4606      	mov	r6, r0
 801f19e:	f7f6 fa77 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f1a2:	4603      	mov	r3, r0
 801f1a4:	9302      	str	r3, [sp, #8]
 801f1a6:	23f4      	movs	r3, #244	; 0xf4
 801f1a8:	9301      	str	r3, [sp, #4]
 801f1aa:	4b09      	ldr	r3, [pc, #36]	; (801f1d0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801f1ac:	9300      	str	r3, [sp, #0]
 801f1ae:	2300      	movs	r3, #0
 801f1b0:	4632      	mov	r2, r6
 801f1b2:	4908      	ldr	r1, [pc, #32]	; (801f1d4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801f1b4:	4620      	mov	r0, r4
 801f1b6:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801f1b8:	687b      	ldr	r3, [r7, #4]
 801f1ba:	699b      	ldr	r3, [r3, #24]
    }
}
 801f1bc:	4618      	mov	r0, r3
 801f1be:	3724      	adds	r7, #36	; 0x24
 801f1c0:	46bd      	mov	sp, r7
 801f1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f1c4:	08028008 	.word	0x08028008
 801f1c8:	08027ffc 	.word	0x08027ffc
 801f1cc:	08028018 	.word	0x08028018
 801f1d0:	08028038 	.word	0x08028038
 801f1d4:	08028024 	.word	0x08028024

0801f1d8 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801f1d8:	b5b0      	push	{r4, r5, r7, lr}
 801f1da:	b084      	sub	sp, #16
 801f1dc:	af02      	add	r7, sp, #8
 801f1de:	6078      	str	r0, [r7, #4]
 801f1e0:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801f1e2:	f7f6 fa45 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801f1e6:	4604      	mov	r4, r0
 801f1e8:	6823      	ldr	r3, [r4, #0]
 801f1ea:	3368      	adds	r3, #104	; 0x68
 801f1ec:	681d      	ldr	r5, [r3, #0]
 801f1ee:	f7f6 fa4f 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f1f2:	4603      	mov	r3, r0
 801f1f4:	9300      	str	r3, [sp, #0]
 801f1f6:	f240 1323 	movw	r3, #291	; 0x123
 801f1fa:	4a06      	ldr	r2, [pc, #24]	; (801f214 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801f1fc:	4906      	ldr	r1, [pc, #24]	; (801f218 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801f1fe:	4620      	mov	r0, r4
 801f200:	47a8      	blx	r5
    return cpputest_longlong(0);
 801f202:	2100      	movs	r1, #0
 801f204:	6878      	ldr	r0, [r7, #4]
 801f206:	f7ec fe87 	bl	800bf18 <_ZN17cpputest_longlongC1Ei>
}
 801f20a:	6878      	ldr	r0, [r7, #4]
 801f20c:	3708      	adds	r7, #8
 801f20e:	46bd      	mov	sp, r7
 801f210:	bdb0      	pop	{r4, r5, r7, pc}
 801f212:	bf00      	nop
 801f214:	08028038 	.word	0x08028038
 801f218:	08028054 	.word	0x08028054

0801f21c <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801f21c:	b5b0      	push	{r4, r5, r7, lr}
 801f21e:	b084      	sub	sp, #16
 801f220:	af02      	add	r7, sp, #8
 801f222:	6078      	str	r0, [r7, #4]
 801f224:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801f226:	f7f6 fa23 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801f22a:	4604      	mov	r4, r0
 801f22c:	6823      	ldr	r3, [r4, #0]
 801f22e:	3368      	adds	r3, #104	; 0x68
 801f230:	681d      	ldr	r5, [r3, #0]
 801f232:	f7f6 fa2d 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f236:	4603      	mov	r3, r0
 801f238:	9300      	str	r3, [sp, #0]
 801f23a:	f240 1329 	movw	r3, #297	; 0x129
 801f23e:	4a06      	ldr	r2, [pc, #24]	; (801f258 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801f240:	4906      	ldr	r1, [pc, #24]	; (801f25c <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801f242:	4620      	mov	r0, r4
 801f244:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801f246:	2100      	movs	r1, #0
 801f248:	6878      	ldr	r0, [r7, #4]
 801f24a:	f7ec fe71 	bl	800bf30 <_ZN18cpputest_ulonglongC1Ei>
}
 801f24e:	6878      	ldr	r0, [r7, #4]
 801f250:	3708      	adds	r7, #8
 801f252:	46bd      	mov	sp, r7
 801f254:	bdb0      	pop	{r4, r5, r7, pc}
 801f256:	bf00      	nop
 801f258:	08028038 	.word	0x08028038
 801f25c:	08028074 	.word	0x08028074

0801f260 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801f260:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f262:	b087      	sub	sp, #28
 801f264:	af04      	add	r7, sp, #16
 801f266:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801f268:	f7f6 fa02 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801f26c:	4604      	mov	r4, r0
 801f26e:	6823      	ldr	r3, [r4, #0]
 801f270:	3324      	adds	r3, #36	; 0x24
 801f272:	681d      	ldr	r5, [r3, #0]
 801f274:	687b      	ldr	r3, [r7, #4]
 801f276:	330c      	adds	r3, #12
 801f278:	4618      	mov	r0, r3
 801f27a:	f7ef f9a1 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801f27e:	4606      	mov	r6, r0
 801f280:	f7f6 fa06 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f284:	4603      	mov	r3, r0
 801f286:	9302      	str	r3, [sp, #8]
 801f288:	f240 1331 	movw	r3, #305	; 0x131
 801f28c:	9301      	str	r3, [sp, #4]
 801f28e:	4b09      	ldr	r3, [pc, #36]	; (801f2b4 <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801f290:	9300      	str	r3, [sp, #0]
 801f292:	2300      	movs	r3, #0
 801f294:	4632      	mov	r2, r6
 801f296:	4908      	ldr	r1, [pc, #32]	; (801f2b8 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801f298:	4620      	mov	r0, r4
 801f29a:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801f29c:	687b      	ldr	r3, [r7, #4]
 801f29e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801f2a2:	ec43 2b17 	vmov	d7, r2, r3
}
 801f2a6:	eeb0 0a47 	vmov.f32	s0, s14
 801f2aa:	eef0 0a67 	vmov.f32	s1, s15
 801f2ae:	370c      	adds	r7, #12
 801f2b0:	46bd      	mov	sp, r7
 801f2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f2b4:	08028038 	.word	0x08028038
 801f2b8:	080280a0 	.word	0x080280a0

0801f2bc <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801f2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f2be:	b087      	sub	sp, #28
 801f2c0:	af04      	add	r7, sp, #16
 801f2c2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801f2c4:	f7f6 f9d4 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801f2c8:	4604      	mov	r4, r0
 801f2ca:	6823      	ldr	r3, [r4, #0]
 801f2cc:	3324      	adds	r3, #36	; 0x24
 801f2ce:	681d      	ldr	r5, [r3, #0]
 801f2d0:	687b      	ldr	r3, [r7, #4]
 801f2d2:	330c      	adds	r3, #12
 801f2d4:	4618      	mov	r0, r3
 801f2d6:	f7ef f973 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801f2da:	4606      	mov	r6, r0
 801f2dc:	f7f6 f9d8 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f2e0:	4603      	mov	r3, r0
 801f2e2:	9302      	str	r3, [sp, #8]
 801f2e4:	f240 1337 	movw	r3, #311	; 0x137
 801f2e8:	9301      	str	r3, [sp, #4]
 801f2ea:	4b09      	ldr	r3, [pc, #36]	; (801f310 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801f2ec:	9300      	str	r3, [sp, #0]
 801f2ee:	2300      	movs	r3, #0
 801f2f0:	4632      	mov	r2, r6
 801f2f2:	4908      	ldr	r1, [pc, #32]	; (801f314 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801f2f4:	4620      	mov	r0, r4
 801f2f6:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801f2f8:	687b      	ldr	r3, [r7, #4]
 801f2fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f2fe:	ec43 2b17 	vmov	d7, r2, r3
}
 801f302:	eeb0 0a47 	vmov.f32	s0, s14
 801f306:	eef0 0a67 	vmov.f32	s1, s15
 801f30a:	370c      	adds	r7, #12
 801f30c:	46bd      	mov	sp, r7
 801f30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f310:	08028038 	.word	0x08028038
 801f314:	080280a0 	.word	0x080280a0

0801f318 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801f318:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f31a:	b087      	sub	sp, #28
 801f31c:	af04      	add	r7, sp, #16
 801f31e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801f320:	f7f6 f9a6 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801f324:	4604      	mov	r4, r0
 801f326:	6823      	ldr	r3, [r4, #0]
 801f328:	3324      	adds	r3, #36	; 0x24
 801f32a:	681d      	ldr	r5, [r3, #0]
 801f32c:	687b      	ldr	r3, [r7, #4]
 801f32e:	330c      	adds	r3, #12
 801f330:	4618      	mov	r0, r3
 801f332:	f7ef f945 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801f336:	4606      	mov	r6, r0
 801f338:	f7f6 f9aa 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f33c:	4603      	mov	r3, r0
 801f33e:	9302      	str	r3, [sp, #8]
 801f340:	f240 133d 	movw	r3, #317	; 0x13d
 801f344:	9301      	str	r3, [sp, #4]
 801f346:	4b06      	ldr	r3, [pc, #24]	; (801f360 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801f348:	9300      	str	r3, [sp, #0]
 801f34a:	2300      	movs	r3, #0
 801f34c:	4632      	mov	r2, r6
 801f34e:	4905      	ldr	r1, [pc, #20]	; (801f364 <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801f350:	4620      	mov	r0, r4
 801f352:	47a8      	blx	r5
    return value_.stringValue_;
 801f354:	687b      	ldr	r3, [r7, #4]
 801f356:	699b      	ldr	r3, [r3, #24]
}
 801f358:	4618      	mov	r0, r3
 801f35a:	370c      	adds	r7, #12
 801f35c:	46bd      	mov	sp, r7
 801f35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f360:	08028038 	.word	0x08028038
 801f364:	080280c8 	.word	0x080280c8

0801f368 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801f368:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f36a:	b087      	sub	sp, #28
 801f36c:	af04      	add	r7, sp, #16
 801f36e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801f370:	f7f6 f97e 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801f374:	4604      	mov	r4, r0
 801f376:	6823      	ldr	r3, [r4, #0]
 801f378:	3324      	adds	r3, #36	; 0x24
 801f37a:	681d      	ldr	r5, [r3, #0]
 801f37c:	687b      	ldr	r3, [r7, #4]
 801f37e:	330c      	adds	r3, #12
 801f380:	4618      	mov	r0, r3
 801f382:	f7ef f91d 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801f386:	4606      	mov	r6, r0
 801f388:	f7f6 f982 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f38c:	4603      	mov	r3, r0
 801f38e:	9302      	str	r3, [sp, #8]
 801f390:	f240 1343 	movw	r3, #323	; 0x143
 801f394:	9301      	str	r3, [sp, #4]
 801f396:	4b06      	ldr	r3, [pc, #24]	; (801f3b0 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801f398:	9300      	str	r3, [sp, #0]
 801f39a:	2300      	movs	r3, #0
 801f39c:	4632      	mov	r2, r6
 801f39e:	4905      	ldr	r1, [pc, #20]	; (801f3b4 <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801f3a0:	4620      	mov	r0, r4
 801f3a2:	47a8      	blx	r5
    return value_.pointerValue_;
 801f3a4:	687b      	ldr	r3, [r7, #4]
 801f3a6:	699b      	ldr	r3, [r3, #24]
}
 801f3a8:	4618      	mov	r0, r3
 801f3aa:	370c      	adds	r7, #12
 801f3ac:	46bd      	mov	sp, r7
 801f3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f3b0:	08028038 	.word	0x08028038
 801f3b4:	080280a8 	.word	0x080280a8

0801f3b8 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801f3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f3ba:	b087      	sub	sp, #28
 801f3bc:	af04      	add	r7, sp, #16
 801f3be:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801f3c0:	f7f6 f956 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801f3c4:	4604      	mov	r4, r0
 801f3c6:	6823      	ldr	r3, [r4, #0]
 801f3c8:	3324      	adds	r3, #36	; 0x24
 801f3ca:	681d      	ldr	r5, [r3, #0]
 801f3cc:	687b      	ldr	r3, [r7, #4]
 801f3ce:	330c      	adds	r3, #12
 801f3d0:	4618      	mov	r0, r3
 801f3d2:	f7ef f8f5 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801f3d6:	4606      	mov	r6, r0
 801f3d8:	f7f6 f95a 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f3dc:	4603      	mov	r3, r0
 801f3de:	9302      	str	r3, [sp, #8]
 801f3e0:	f240 1349 	movw	r3, #329	; 0x149
 801f3e4:	9301      	str	r3, [sp, #4]
 801f3e6:	4b06      	ldr	r3, [pc, #24]	; (801f400 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801f3e8:	9300      	str	r3, [sp, #0]
 801f3ea:	2300      	movs	r3, #0
 801f3ec:	4632      	mov	r2, r6
 801f3ee:	4905      	ldr	r1, [pc, #20]	; (801f404 <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801f3f0:	4620      	mov	r0, r4
 801f3f2:	47a8      	blx	r5
    return value_.pointerValue_;
 801f3f4:	687b      	ldr	r3, [r7, #4]
 801f3f6:	699b      	ldr	r3, [r3, #24]
}
 801f3f8:	4618      	mov	r0, r3
 801f3fa:	370c      	adds	r7, #12
 801f3fc:	46bd      	mov	sp, r7
 801f3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f400:	08028038 	.word	0x08028038
 801f404:	080280b0 	.word	0x080280b0

0801f408 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801f408:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f40a:	b087      	sub	sp, #28
 801f40c:	af04      	add	r7, sp, #16
 801f40e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801f410:	f7f6 f92e 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801f414:	4604      	mov	r4, r0
 801f416:	6823      	ldr	r3, [r4, #0]
 801f418:	3324      	adds	r3, #36	; 0x24
 801f41a:	681d      	ldr	r5, [r3, #0]
 801f41c:	687b      	ldr	r3, [r7, #4]
 801f41e:	330c      	adds	r3, #12
 801f420:	4618      	mov	r0, r3
 801f422:	f7ef f8cd 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801f426:	4606      	mov	r6, r0
 801f428:	f7f6 f932 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f42c:	4603      	mov	r3, r0
 801f42e:	9302      	str	r3, [sp, #8]
 801f430:	f240 134f 	movw	r3, #335	; 0x14f
 801f434:	9301      	str	r3, [sp, #4]
 801f436:	4b06      	ldr	r3, [pc, #24]	; (801f450 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801f438:	9300      	str	r3, [sp, #0]
 801f43a:	2300      	movs	r3, #0
 801f43c:	4632      	mov	r2, r6
 801f43e:	4905      	ldr	r1, [pc, #20]	; (801f454 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801f440:	4620      	mov	r0, r4
 801f442:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801f444:	687b      	ldr	r3, [r7, #4]
 801f446:	699b      	ldr	r3, [r3, #24]
}
 801f448:	4618      	mov	r0, r3
 801f44a:	370c      	adds	r7, #12
 801f44c:	46bd      	mov	sp, r7
 801f44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f450:	08028038 	.word	0x08028038
 801f454:	080280bc 	.word	0x080280bc

0801f458 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801f458:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f45a:	b087      	sub	sp, #28
 801f45c:	af04      	add	r7, sp, #16
 801f45e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801f460:	f7f6 f906 	bl	8015670 <_ZN10UtestShell10getCurrentEv>
 801f464:	4604      	mov	r4, r0
 801f466:	6823      	ldr	r3, [r4, #0]
 801f468:	3324      	adds	r3, #36	; 0x24
 801f46a:	681d      	ldr	r5, [r3, #0]
 801f46c:	687b      	ldr	r3, [r7, #4]
 801f46e:	330c      	adds	r3, #12
 801f470:	4618      	mov	r0, r3
 801f472:	f7ef f8a5 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 801f476:	4606      	mov	r6, r0
 801f478:	f7f6 f90a 	bl	8015690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f47c:	4603      	mov	r3, r0
 801f47e:	9302      	str	r3, [sp, #8]
 801f480:	f240 1355 	movw	r3, #341	; 0x155
 801f484:	9301      	str	r3, [sp, #4]
 801f486:	4b06      	ldr	r3, [pc, #24]	; (801f4a0 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801f488:	9300      	str	r3, [sp, #0]
 801f48a:	2300      	movs	r3, #0
 801f48c:	4632      	mov	r2, r6
 801f48e:	4905      	ldr	r1, [pc, #20]	; (801f4a4 <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801f490:	4620      	mov	r0, r4
 801f492:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801f494:	687b      	ldr	r3, [r7, #4]
 801f496:	699b      	ldr	r3, [r3, #24]
}
 801f498:	4618      	mov	r0, r3
 801f49a:	370c      	adds	r7, #12
 801f49c:	46bd      	mov	sp, r7
 801f49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f4a0:	08028038 	.word	0x08028038
 801f4a4:	080280d4 	.word	0x080280d4

0801f4a8 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801f4a8:	b480      	push	{r7}
 801f4aa:	b083      	sub	sp, #12
 801f4ac:	af00      	add	r7, sp, #0
 801f4ae:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801f4b0:	687b      	ldr	r3, [r7, #4]
 801f4b2:	699b      	ldr	r3, [r3, #24]
}
 801f4b4:	4618      	mov	r0, r3
 801f4b6:	370c      	adds	r7, #12
 801f4b8:	46bd      	mov	sp, r7
 801f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4be:	4770      	bx	lr

0801f4c0 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801f4c0:	b480      	push	{r7}
 801f4c2:	b083      	sub	sp, #12
 801f4c4:	af00      	add	r7, sp, #0
 801f4c6:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801f4c8:	687b      	ldr	r3, [r7, #4]
 801f4ca:	699b      	ldr	r3, [r3, #24]
}
 801f4cc:	4618      	mov	r0, r3
 801f4ce:	370c      	adds	r7, #12
 801f4d0:	46bd      	mov	sp, r7
 801f4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4d6:	4770      	bx	lr

0801f4d8 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801f4d8:	b480      	push	{r7}
 801f4da:	b083      	sub	sp, #12
 801f4dc:	af00      	add	r7, sp, #0
 801f4de:	6078      	str	r0, [r7, #4]
    return size_;
 801f4e0:	687b      	ldr	r3, [r7, #4]
 801f4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801f4e4:	4618      	mov	r0, r3
 801f4e6:	370c      	adds	r7, #12
 801f4e8:	46bd      	mov	sp, r7
 801f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4ee:	4770      	bx	lr

0801f4f0 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801f4f0:	b480      	push	{r7}
 801f4f2:	b083      	sub	sp, #12
 801f4f4:	af00      	add	r7, sp, #0
 801f4f6:	6078      	str	r0, [r7, #4]
    return comparator_;
 801f4f8:	687b      	ldr	r3, [r7, #4]
 801f4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801f4fc:	4618      	mov	r0, r3
 801f4fe:	370c      	adds	r7, #12
 801f500:	46bd      	mov	sp, r7
 801f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f506:	4770      	bx	lr

0801f508 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801f508:	b480      	push	{r7}
 801f50a:	b083      	sub	sp, #12
 801f50c:	af00      	add	r7, sp, #0
 801f50e:	6078      	str	r0, [r7, #4]
    return copier_;
 801f510:	687b      	ldr	r3, [r7, #4]
 801f512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801f514:	4618      	mov	r0, r3
 801f516:	370c      	adds	r7, #12
 801f518:	46bd      	mov	sp, r7
 801f51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f51e:	4770      	bx	lr

0801f520 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801f520:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f522:	b0cd      	sub	sp, #308	; 0x134
 801f524:	af00      	add	r7, sp, #0
 801f526:	1d3b      	adds	r3, r7, #4
 801f528:	6018      	str	r0, [r3, #0]
 801f52a:	463b      	mov	r3, r7
 801f52c:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801f52e:	2500      	movs	r5, #0
 801f530:	1d3b      	adds	r3, r7, #4
 801f532:	681b      	ldr	r3, [r3, #0]
 801f534:	f103 040c 	add.w	r4, r3, #12
 801f538:	f107 0308 	add.w	r3, r7, #8
 801f53c:	49bb      	ldr	r1, [pc, #748]	; (801f82c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801f53e:	4618      	mov	r0, r3
 801f540:	f7ee fcb3 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f544:	2601      	movs	r6, #1
 801f546:	f107 0308 	add.w	r3, r7, #8
 801f54a:	4619      	mov	r1, r3
 801f54c:	4620      	mov	r0, r4
 801f54e:	f7ef f870 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f552:	4603      	mov	r3, r0
 801f554:	2b00      	cmp	r3, #0
 801f556:	d015      	beq.n	801f584 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801f558:	463b      	mov	r3, r7
 801f55a:	681b      	ldr	r3, [r3, #0]
 801f55c:	f103 040c 	add.w	r4, r3, #12
 801f560:	f107 0310 	add.w	r3, r7, #16
 801f564:	49b2      	ldr	r1, [pc, #712]	; (801f830 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801f566:	4618      	mov	r0, r3
 801f568:	f7ee fc9f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f56c:	2501      	movs	r5, #1
 801f56e:	f107 0310 	add.w	r3, r7, #16
 801f572:	4619      	mov	r1, r3
 801f574:	4620      	mov	r0, r4
 801f576:	f7ef f85c 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f57a:	4603      	mov	r3, r0
 801f57c:	2b00      	cmp	r3, #0
 801f57e:	d001      	beq.n	801f584 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801f580:	2401      	movs	r4, #1
 801f582:	e000      	b.n	801f586 <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801f584:	2400      	movs	r4, #0
 801f586:	2d00      	cmp	r5, #0
 801f588:	d004      	beq.n	801f594 <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801f58a:	f107 0310 	add.w	r3, r7, #16
 801f58e:	4618      	mov	r0, r3
 801f590:	f7ef f843 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f594:	2e00      	cmp	r6, #0
 801f596:	d004      	beq.n	801f5a2 <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801f598:	f107 0308 	add.w	r3, r7, #8
 801f59c:	4618      	mov	r0, r3
 801f59e:	f7ef f83c 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f5a2:	2c00      	cmp	r4, #0
 801f5a4:	d00c      	beq.n	801f5c0 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801f5a6:	1d3b      	adds	r3, r7, #4
 801f5a8:	681b      	ldr	r3, [r3, #0]
 801f5aa:	699a      	ldr	r2, [r3, #24]
 801f5ac:	463b      	mov	r3, r7
 801f5ae:	681b      	ldr	r3, [r3, #0]
 801f5b0:	699b      	ldr	r3, [r3, #24]
 801f5b2:	429a      	cmp	r2, r3
 801f5b4:	bf0c      	ite	eq
 801f5b6:	2301      	moveq	r3, #1
 801f5b8:	2300      	movne	r3, #0
 801f5ba:	b2dc      	uxtb	r4, r3
 801f5bc:	f000 bd60 	b.w	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801f5c0:	2500      	movs	r5, #0
 801f5c2:	1d3b      	adds	r3, r7, #4
 801f5c4:	681b      	ldr	r3, [r3, #0]
 801f5c6:	f103 040c 	add.w	r4, r3, #12
 801f5ca:	f107 0318 	add.w	r3, r7, #24
 801f5ce:	4998      	ldr	r1, [pc, #608]	; (801f830 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801f5d0:	4618      	mov	r0, r3
 801f5d2:	f7ee fc6a 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f5d6:	2601      	movs	r6, #1
 801f5d8:	f107 0318 	add.w	r3, r7, #24
 801f5dc:	4619      	mov	r1, r3
 801f5de:	4620      	mov	r0, r4
 801f5e0:	f7ef f827 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f5e4:	4603      	mov	r3, r0
 801f5e6:	2b00      	cmp	r3, #0
 801f5e8:	d015      	beq.n	801f616 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801f5ea:	463b      	mov	r3, r7
 801f5ec:	681b      	ldr	r3, [r3, #0]
 801f5ee:	f103 040c 	add.w	r4, r3, #12
 801f5f2:	f107 0320 	add.w	r3, r7, #32
 801f5f6:	498d      	ldr	r1, [pc, #564]	; (801f82c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801f5f8:	4618      	mov	r0, r3
 801f5fa:	f7ee fc56 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f5fe:	2501      	movs	r5, #1
 801f600:	f107 0320 	add.w	r3, r7, #32
 801f604:	4619      	mov	r1, r3
 801f606:	4620      	mov	r0, r4
 801f608:	f7ef f813 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f60c:	4603      	mov	r3, r0
 801f60e:	2b00      	cmp	r3, #0
 801f610:	d001      	beq.n	801f616 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801f612:	2401      	movs	r4, #1
 801f614:	e000      	b.n	801f618 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801f616:	2400      	movs	r4, #0
 801f618:	2d00      	cmp	r5, #0
 801f61a:	d004      	beq.n	801f626 <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801f61c:	f107 0320 	add.w	r3, r7, #32
 801f620:	4618      	mov	r0, r3
 801f622:	f7ee fffa 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f626:	2e00      	cmp	r6, #0
 801f628:	d004      	beq.n	801f634 <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801f62a:	f107 0318 	add.w	r3, r7, #24
 801f62e:	4618      	mov	r0, r3
 801f630:	f7ee fff3 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f634:	2c00      	cmp	r4, #0
 801f636:	d00c      	beq.n	801f652 <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801f638:	1d3b      	adds	r3, r7, #4
 801f63a:	681b      	ldr	r3, [r3, #0]
 801f63c:	699a      	ldr	r2, [r3, #24]
 801f63e:	463b      	mov	r3, r7
 801f640:	681b      	ldr	r3, [r3, #0]
 801f642:	699b      	ldr	r3, [r3, #24]
 801f644:	429a      	cmp	r2, r3
 801f646:	bf0c      	ite	eq
 801f648:	2301      	moveq	r3, #1
 801f64a:	2300      	movne	r3, #0
 801f64c:	b2dc      	uxtb	r4, r3
 801f64e:	f000 bd17 	b.w	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801f652:	2500      	movs	r5, #0
 801f654:	1d3b      	adds	r3, r7, #4
 801f656:	681b      	ldr	r3, [r3, #0]
 801f658:	f103 040c 	add.w	r4, r3, #12
 801f65c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f660:	4974      	ldr	r1, [pc, #464]	; (801f834 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801f662:	4618      	mov	r0, r3
 801f664:	f7ee fc21 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f668:	2601      	movs	r6, #1
 801f66a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f66e:	4619      	mov	r1, r3
 801f670:	4620      	mov	r0, r4
 801f672:	f7ee ffde 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f676:	4603      	mov	r3, r0
 801f678:	2b00      	cmp	r3, #0
 801f67a:	d015      	beq.n	801f6a8 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801f67c:	463b      	mov	r3, r7
 801f67e:	681b      	ldr	r3, [r3, #0]
 801f680:	f103 040c 	add.w	r4, r3, #12
 801f684:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f688:	4969      	ldr	r1, [pc, #420]	; (801f830 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801f68a:	4618      	mov	r0, r3
 801f68c:	f7ee fc0d 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f690:	2501      	movs	r5, #1
 801f692:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f696:	4619      	mov	r1, r3
 801f698:	4620      	mov	r0, r4
 801f69a:	f7ee ffca 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f69e:	4603      	mov	r3, r0
 801f6a0:	2b00      	cmp	r3, #0
 801f6a2:	d001      	beq.n	801f6a8 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801f6a4:	2401      	movs	r4, #1
 801f6a6:	e000      	b.n	801f6aa <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801f6a8:	2400      	movs	r4, #0
 801f6aa:	2d00      	cmp	r5, #0
 801f6ac:	d004      	beq.n	801f6b8 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801f6ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f6b2:	4618      	mov	r0, r3
 801f6b4:	f7ee ffb1 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f6b8:	2e00      	cmp	r6, #0
 801f6ba:	d004      	beq.n	801f6c6 <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801f6bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f6c0:	4618      	mov	r0, r3
 801f6c2:	f7ee ffaa 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f6c6:	2c00      	cmp	r4, #0
 801f6c8:	d012      	beq.n	801f6f0 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801f6ca:	463b      	mov	r3, r7
 801f6cc:	681b      	ldr	r3, [r3, #0]
 801f6ce:	699b      	ldr	r3, [r3, #24]
 801f6d0:	2b00      	cmp	r3, #0
 801f6d2:	db0a      	blt.n	801f6ea <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801f6d4:	1d3b      	adds	r3, r7, #4
 801f6d6:	681b      	ldr	r3, [r3, #0]
 801f6d8:	699b      	ldr	r3, [r3, #24]
 801f6da:	463a      	mov	r2, r7
 801f6dc:	6812      	ldr	r2, [r2, #0]
 801f6de:	6992      	ldr	r2, [r2, #24]
 801f6e0:	4293      	cmp	r3, r2
 801f6e2:	d102      	bne.n	801f6ea <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801f6e4:	2401      	movs	r4, #1
 801f6e6:	f000 bccb 	b.w	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801f6ea:	2400      	movs	r4, #0
 801f6ec:	f000 bcc8 	b.w	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801f6f0:	2500      	movs	r5, #0
 801f6f2:	1d3b      	adds	r3, r7, #4
 801f6f4:	681b      	ldr	r3, [r3, #0]
 801f6f6:	f103 040c 	add.w	r4, r3, #12
 801f6fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f6fe:	494c      	ldr	r1, [pc, #304]	; (801f830 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801f700:	4618      	mov	r0, r3
 801f702:	f7ee fbd2 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f706:	2601      	movs	r6, #1
 801f708:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f70c:	4619      	mov	r1, r3
 801f70e:	4620      	mov	r0, r4
 801f710:	f7ee ff8f 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f714:	4603      	mov	r3, r0
 801f716:	2b00      	cmp	r3, #0
 801f718:	d015      	beq.n	801f746 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801f71a:	463b      	mov	r3, r7
 801f71c:	681b      	ldr	r3, [r3, #0]
 801f71e:	f103 040c 	add.w	r4, r3, #12
 801f722:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f726:	4943      	ldr	r1, [pc, #268]	; (801f834 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801f728:	4618      	mov	r0, r3
 801f72a:	f7ee fbbe 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f72e:	2501      	movs	r5, #1
 801f730:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f734:	4619      	mov	r1, r3
 801f736:	4620      	mov	r0, r4
 801f738:	f7ee ff7b 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f73c:	4603      	mov	r3, r0
 801f73e:	2b00      	cmp	r3, #0
 801f740:	d001      	beq.n	801f746 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801f742:	2401      	movs	r4, #1
 801f744:	e000      	b.n	801f748 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801f746:	2400      	movs	r4, #0
 801f748:	2d00      	cmp	r5, #0
 801f74a:	d004      	beq.n	801f756 <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801f74c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f750:	4618      	mov	r0, r3
 801f752:	f7ee ff62 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f756:	2e00      	cmp	r6, #0
 801f758:	d004      	beq.n	801f764 <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801f75a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f75e:	4618      	mov	r0, r3
 801f760:	f7ee ff5b 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f764:	2c00      	cmp	r4, #0
 801f766:	d012      	beq.n	801f78e <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801f768:	1d3b      	adds	r3, r7, #4
 801f76a:	681b      	ldr	r3, [r3, #0]
 801f76c:	699b      	ldr	r3, [r3, #24]
 801f76e:	2b00      	cmp	r3, #0
 801f770:	db0a      	blt.n	801f788 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801f772:	1d3b      	adds	r3, r7, #4
 801f774:	681b      	ldr	r3, [r3, #0]
 801f776:	699b      	ldr	r3, [r3, #24]
 801f778:	463a      	mov	r2, r7
 801f77a:	6812      	ldr	r2, [r2, #0]
 801f77c:	6992      	ldr	r2, [r2, #24]
 801f77e:	4293      	cmp	r3, r2
 801f780:	d102      	bne.n	801f788 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801f782:	2401      	movs	r4, #1
 801f784:	f000 bc7c 	b.w	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801f788:	2400      	movs	r4, #0
 801f78a:	f000 bc79 	b.w	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801f78e:	2500      	movs	r5, #0
 801f790:	1d3b      	adds	r3, r7, #4
 801f792:	681b      	ldr	r3, [r3, #0]
 801f794:	f103 040c 	add.w	r4, r3, #12
 801f798:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f79c:	4926      	ldr	r1, [pc, #152]	; (801f838 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801f79e:	4618      	mov	r0, r3
 801f7a0:	f7ee fb83 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f7a4:	2601      	movs	r6, #1
 801f7a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f7aa:	4619      	mov	r1, r3
 801f7ac:	4620      	mov	r0, r4
 801f7ae:	f7ee ff40 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f7b2:	4603      	mov	r3, r0
 801f7b4:	2b00      	cmp	r3, #0
 801f7b6:	d015      	beq.n	801f7e4 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801f7b8:	463b      	mov	r3, r7
 801f7ba:	681b      	ldr	r3, [r3, #0]
 801f7bc:	f103 040c 	add.w	r4, r3, #12
 801f7c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f7c4:	491a      	ldr	r1, [pc, #104]	; (801f830 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801f7c6:	4618      	mov	r0, r3
 801f7c8:	f7ee fb6f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f7cc:	2501      	movs	r5, #1
 801f7ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f7d2:	4619      	mov	r1, r3
 801f7d4:	4620      	mov	r0, r4
 801f7d6:	f7ee ff2c 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f7da:	4603      	mov	r3, r0
 801f7dc:	2b00      	cmp	r3, #0
 801f7de:	d001      	beq.n	801f7e4 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801f7e0:	2401      	movs	r4, #1
 801f7e2:	e000      	b.n	801f7e6 <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801f7e4:	2400      	movs	r4, #0
 801f7e6:	2d00      	cmp	r5, #0
 801f7e8:	d004      	beq.n	801f7f4 <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801f7ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f7ee:	4618      	mov	r0, r3
 801f7f0:	f7ee ff13 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f7f4:	2e00      	cmp	r6, #0
 801f7f6:	d004      	beq.n	801f802 <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801f7f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f7fc:	4618      	mov	r0, r3
 801f7fe:	f7ee ff0c 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f802:	2c00      	cmp	r4, #0
 801f804:	d01a      	beq.n	801f83c <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801f806:	463b      	mov	r3, r7
 801f808:	681b      	ldr	r3, [r3, #0]
 801f80a:	699b      	ldr	r3, [r3, #24]
 801f80c:	2b00      	cmp	r3, #0
 801f80e:	db0a      	blt.n	801f826 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801f810:	1d3b      	adds	r3, r7, #4
 801f812:	681b      	ldr	r3, [r3, #0]
 801f814:	699b      	ldr	r3, [r3, #24]
 801f816:	463a      	mov	r2, r7
 801f818:	6812      	ldr	r2, [r2, #0]
 801f81a:	6992      	ldr	r2, [r2, #24]
 801f81c:	4293      	cmp	r3, r2
 801f81e:	d102      	bne.n	801f826 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801f820:	2401      	movs	r4, #1
 801f822:	f000 bc2d 	b.w	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801f826:	2400      	movs	r4, #0
 801f828:	f000 bc2a 	b.w	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801f82c:	08028018 	.word	0x08028018
 801f830:	08027ffc 	.word	0x08027ffc
 801f834:	08028008 	.word	0x08028008
 801f838:	08028024 	.word	0x08028024
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801f83c:	2500      	movs	r5, #0
 801f83e:	1d3b      	adds	r3, r7, #4
 801f840:	681b      	ldr	r3, [r3, #0]
 801f842:	f103 040c 	add.w	r4, r3, #12
 801f846:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f84a:	49b8      	ldr	r1, [pc, #736]	; (801fb2c <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801f84c:	4618      	mov	r0, r3
 801f84e:	f7ee fb2c 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f852:	2601      	movs	r6, #1
 801f854:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f858:	4619      	mov	r1, r3
 801f85a:	4620      	mov	r0, r4
 801f85c:	f7ee fee9 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f860:	4603      	mov	r3, r0
 801f862:	2b00      	cmp	r3, #0
 801f864:	d015      	beq.n	801f892 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801f866:	463b      	mov	r3, r7
 801f868:	681b      	ldr	r3, [r3, #0]
 801f86a:	f103 040c 	add.w	r4, r3, #12
 801f86e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f872:	49af      	ldr	r1, [pc, #700]	; (801fb30 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801f874:	4618      	mov	r0, r3
 801f876:	f7ee fb18 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f87a:	2501      	movs	r5, #1
 801f87c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f880:	4619      	mov	r1, r3
 801f882:	4620      	mov	r0, r4
 801f884:	f7ee fed5 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f888:	4603      	mov	r3, r0
 801f88a:	2b00      	cmp	r3, #0
 801f88c:	d001      	beq.n	801f892 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801f88e:	2401      	movs	r4, #1
 801f890:	e000      	b.n	801f894 <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801f892:	2400      	movs	r4, #0
 801f894:	2d00      	cmp	r5, #0
 801f896:	d004      	beq.n	801f8a2 <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801f898:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f89c:	4618      	mov	r0, r3
 801f89e:	f7ee febc 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f8a2:	2e00      	cmp	r6, #0
 801f8a4:	d004      	beq.n	801f8b0 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801f8a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f8aa:	4618      	mov	r0, r3
 801f8ac:	f7ee feb5 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f8b0:	2c00      	cmp	r4, #0
 801f8b2:	d010      	beq.n	801f8d6 <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801f8b4:	1d3b      	adds	r3, r7, #4
 801f8b6:	681b      	ldr	r3, [r3, #0]
 801f8b8:	699b      	ldr	r3, [r3, #24]
 801f8ba:	2b00      	cmp	r3, #0
 801f8bc:	db09      	blt.n	801f8d2 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801f8be:	1d3b      	adds	r3, r7, #4
 801f8c0:	681b      	ldr	r3, [r3, #0]
 801f8c2:	699b      	ldr	r3, [r3, #24]
 801f8c4:	463a      	mov	r2, r7
 801f8c6:	6812      	ldr	r2, [r2, #0]
 801f8c8:	6992      	ldr	r2, [r2, #24]
 801f8ca:	4293      	cmp	r3, r2
 801f8cc:	d101      	bne.n	801f8d2 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801f8ce:	2401      	movs	r4, #1
 801f8d0:	e3d6      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801f8d2:	2400      	movs	r4, #0
 801f8d4:	e3d4      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801f8d6:	2500      	movs	r5, #0
 801f8d8:	1d3b      	adds	r3, r7, #4
 801f8da:	681b      	ldr	r3, [r3, #0]
 801f8dc:	f103 040c 	add.w	r4, r3, #12
 801f8e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f8e4:	4993      	ldr	r1, [pc, #588]	; (801fb34 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801f8e6:	4618      	mov	r0, r3
 801f8e8:	f7ee fadf 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f8ec:	2601      	movs	r6, #1
 801f8ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f8f2:	4619      	mov	r1, r3
 801f8f4:	4620      	mov	r0, r4
 801f8f6:	f7ee fe9c 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f8fa:	4603      	mov	r3, r0
 801f8fc:	2b00      	cmp	r3, #0
 801f8fe:	d015      	beq.n	801f92c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801f900:	463b      	mov	r3, r7
 801f902:	681b      	ldr	r3, [r3, #0]
 801f904:	f103 040c 	add.w	r4, r3, #12
 801f908:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f90c:	498a      	ldr	r1, [pc, #552]	; (801fb38 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801f90e:	4618      	mov	r0, r3
 801f910:	f7ee facb 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f914:	2501      	movs	r5, #1
 801f916:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f91a:	4619      	mov	r1, r3
 801f91c:	4620      	mov	r0, r4
 801f91e:	f7ee fe88 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f922:	4603      	mov	r3, r0
 801f924:	2b00      	cmp	r3, #0
 801f926:	d001      	beq.n	801f92c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801f928:	2401      	movs	r4, #1
 801f92a:	e000      	b.n	801f92e <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801f92c:	2400      	movs	r4, #0
 801f92e:	2d00      	cmp	r5, #0
 801f930:	d004      	beq.n	801f93c <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801f932:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f936:	4618      	mov	r0, r3
 801f938:	f7ee fe6f 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f93c:	2e00      	cmp	r6, #0
 801f93e:	d004      	beq.n	801f94a <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801f940:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f944:	4618      	mov	r0, r3
 801f946:	f7ee fe68 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f94a:	2c00      	cmp	r4, #0
 801f94c:	d010      	beq.n	801f970 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801f94e:	463b      	mov	r3, r7
 801f950:	681b      	ldr	r3, [r3, #0]
 801f952:	699b      	ldr	r3, [r3, #24]
 801f954:	2b00      	cmp	r3, #0
 801f956:	db09      	blt.n	801f96c <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801f958:	1d3b      	adds	r3, r7, #4
 801f95a:	681b      	ldr	r3, [r3, #0]
 801f95c:	699b      	ldr	r3, [r3, #24]
 801f95e:	463a      	mov	r2, r7
 801f960:	6812      	ldr	r2, [r2, #0]
 801f962:	6992      	ldr	r2, [r2, #24]
 801f964:	4293      	cmp	r3, r2
 801f966:	d101      	bne.n	801f96c <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801f968:	2401      	movs	r4, #1
 801f96a:	e389      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801f96c:	2400      	movs	r4, #0
 801f96e:	e387      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801f970:	2500      	movs	r5, #0
 801f972:	1d3b      	adds	r3, r7, #4
 801f974:	681b      	ldr	r3, [r3, #0]
 801f976:	f103 040c 	add.w	r4, r3, #12
 801f97a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801f97e:	496e      	ldr	r1, [pc, #440]	; (801fb38 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801f980:	4618      	mov	r0, r3
 801f982:	f7ee fa92 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f986:	2601      	movs	r6, #1
 801f988:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801f98c:	4619      	mov	r1, r3
 801f98e:	4620      	mov	r0, r4
 801f990:	f7ee fe4f 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f994:	4603      	mov	r3, r0
 801f996:	2b00      	cmp	r3, #0
 801f998:	d015      	beq.n	801f9c6 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801f99a:	463b      	mov	r3, r7
 801f99c:	681b      	ldr	r3, [r3, #0]
 801f99e:	f103 040c 	add.w	r4, r3, #12
 801f9a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801f9a6:	4963      	ldr	r1, [pc, #396]	; (801fb34 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801f9a8:	4618      	mov	r0, r3
 801f9aa:	f7ee fa7e 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801f9ae:	2501      	movs	r5, #1
 801f9b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801f9b4:	4619      	mov	r1, r3
 801f9b6:	4620      	mov	r0, r4
 801f9b8:	f7ee fe3b 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801f9bc:	4603      	mov	r3, r0
 801f9be:	2b00      	cmp	r3, #0
 801f9c0:	d001      	beq.n	801f9c6 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801f9c2:	2401      	movs	r4, #1
 801f9c4:	e000      	b.n	801f9c8 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801f9c6:	2400      	movs	r4, #0
 801f9c8:	2d00      	cmp	r5, #0
 801f9ca:	d004      	beq.n	801f9d6 <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801f9cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801f9d0:	4618      	mov	r0, r3
 801f9d2:	f7ee fe22 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f9d6:	2e00      	cmp	r6, #0
 801f9d8:	d004      	beq.n	801f9e4 <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801f9da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801f9de:	4618      	mov	r0, r3
 801f9e0:	f7ee fe1b 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801f9e4:	2c00      	cmp	r4, #0
 801f9e6:	d010      	beq.n	801fa0a <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801f9e8:	1d3b      	adds	r3, r7, #4
 801f9ea:	681b      	ldr	r3, [r3, #0]
 801f9ec:	699b      	ldr	r3, [r3, #24]
 801f9ee:	2b00      	cmp	r3, #0
 801f9f0:	db09      	blt.n	801fa06 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801f9f2:	1d3b      	adds	r3, r7, #4
 801f9f4:	681b      	ldr	r3, [r3, #0]
 801f9f6:	699b      	ldr	r3, [r3, #24]
 801f9f8:	463a      	mov	r2, r7
 801f9fa:	6812      	ldr	r2, [r2, #0]
 801f9fc:	6992      	ldr	r2, [r2, #24]
 801f9fe:	4293      	cmp	r3, r2
 801fa00:	d101      	bne.n	801fa06 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801fa02:	2401      	movs	r4, #1
 801fa04:	e33c      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801fa06:	2400      	movs	r4, #0
 801fa08:	e33a      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801fa0a:	2500      	movs	r5, #0
 801fa0c:	1d3b      	adds	r3, r7, #4
 801fa0e:	681b      	ldr	r3, [r3, #0]
 801fa10:	f103 040c 	add.w	r4, r3, #12
 801fa14:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801fa18:	4946      	ldr	r1, [pc, #280]	; (801fb34 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801fa1a:	4618      	mov	r0, r3
 801fa1c:	f7ee fa45 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801fa20:	2601      	movs	r6, #1
 801fa22:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801fa26:	4619      	mov	r1, r3
 801fa28:	4620      	mov	r0, r4
 801fa2a:	f7ee fe02 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801fa2e:	4603      	mov	r3, r0
 801fa30:	2b00      	cmp	r3, #0
 801fa32:	d015      	beq.n	801fa60 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801fa34:	463b      	mov	r3, r7
 801fa36:	681b      	ldr	r3, [r3, #0]
 801fa38:	f103 040c 	add.w	r4, r3, #12
 801fa3c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801fa40:	493b      	ldr	r1, [pc, #236]	; (801fb30 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801fa42:	4618      	mov	r0, r3
 801fa44:	f7ee fa31 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801fa48:	2501      	movs	r5, #1
 801fa4a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801fa4e:	4619      	mov	r1, r3
 801fa50:	4620      	mov	r0, r4
 801fa52:	f7ee fdee 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801fa56:	4603      	mov	r3, r0
 801fa58:	2b00      	cmp	r3, #0
 801fa5a:	d001      	beq.n	801fa60 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801fa5c:	2401      	movs	r4, #1
 801fa5e:	e000      	b.n	801fa62 <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801fa60:	2400      	movs	r4, #0
 801fa62:	2d00      	cmp	r5, #0
 801fa64:	d004      	beq.n	801fa70 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801fa66:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801fa6a:	4618      	mov	r0, r3
 801fa6c:	f7ee fdd5 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801fa70:	2e00      	cmp	r6, #0
 801fa72:	d004      	beq.n	801fa7e <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801fa74:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801fa78:	4618      	mov	r0, r3
 801fa7a:	f7ee fdce 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801fa7e:	2c00      	cmp	r4, #0
 801fa80:	d00b      	beq.n	801fa9a <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801fa82:	1d3b      	adds	r3, r7, #4
 801fa84:	681b      	ldr	r3, [r3, #0]
 801fa86:	699a      	ldr	r2, [r3, #24]
 801fa88:	463b      	mov	r3, r7
 801fa8a:	681b      	ldr	r3, [r3, #0]
 801fa8c:	699b      	ldr	r3, [r3, #24]
 801fa8e:	429a      	cmp	r2, r3
 801fa90:	bf0c      	ite	eq
 801fa92:	2301      	moveq	r3, #1
 801fa94:	2300      	movne	r3, #0
 801fa96:	b2dc      	uxtb	r4, r3
 801fa98:	e2f2      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801fa9a:	2500      	movs	r5, #0
 801fa9c:	1d3b      	adds	r3, r7, #4
 801fa9e:	681b      	ldr	r3, [r3, #0]
 801faa0:	f103 040c 	add.w	r4, r3, #12
 801faa4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801faa8:	4921      	ldr	r1, [pc, #132]	; (801fb30 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801faaa:	4618      	mov	r0, r3
 801faac:	f7ee f9fd 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801fab0:	2601      	movs	r6, #1
 801fab2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801fab6:	4619      	mov	r1, r3
 801fab8:	4620      	mov	r0, r4
 801faba:	f7ee fdba 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801fabe:	4603      	mov	r3, r0
 801fac0:	2b00      	cmp	r3, #0
 801fac2:	d015      	beq.n	801faf0 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801fac4:	463b      	mov	r3, r7
 801fac6:	681b      	ldr	r3, [r3, #0]
 801fac8:	f103 040c 	add.w	r4, r3, #12
 801facc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801fad0:	4918      	ldr	r1, [pc, #96]	; (801fb34 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801fad2:	4618      	mov	r0, r3
 801fad4:	f7ee f9e9 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801fad8:	2501      	movs	r5, #1
 801fada:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801fade:	4619      	mov	r1, r3
 801fae0:	4620      	mov	r0, r4
 801fae2:	f7ee fda6 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801fae6:	4603      	mov	r3, r0
 801fae8:	2b00      	cmp	r3, #0
 801faea:	d001      	beq.n	801faf0 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801faec:	2401      	movs	r4, #1
 801faee:	e000      	b.n	801faf2 <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801faf0:	2400      	movs	r4, #0
 801faf2:	2d00      	cmp	r5, #0
 801faf4:	d004      	beq.n	801fb00 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801faf6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801fafa:	4618      	mov	r0, r3
 801fafc:	f7ee fd8d 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801fb00:	2e00      	cmp	r6, #0
 801fb02:	d004      	beq.n	801fb0e <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801fb04:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801fb08:	4618      	mov	r0, r3
 801fb0a:	f7ee fd86 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801fb0e:	2c00      	cmp	r4, #0
 801fb10:	d014      	beq.n	801fb3c <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801fb12:	1d3b      	adds	r3, r7, #4
 801fb14:	681b      	ldr	r3, [r3, #0]
 801fb16:	699a      	ldr	r2, [r3, #24]
 801fb18:	463b      	mov	r3, r7
 801fb1a:	681b      	ldr	r3, [r3, #0]
 801fb1c:	699b      	ldr	r3, [r3, #24]
 801fb1e:	429a      	cmp	r2, r3
 801fb20:	bf0c      	ite	eq
 801fb22:	2301      	moveq	r3, #1
 801fb24:	2300      	movne	r3, #0
 801fb26:	b2dc      	uxtb	r4, r3
 801fb28:	e2aa      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801fb2a:	bf00      	nop
 801fb2c:	08027ffc 	.word	0x08027ffc
 801fb30:	08028024 	.word	0x08028024
 801fb34:	08028008 	.word	0x08028008
 801fb38:	08028018 	.word	0x08028018
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801fb3c:	2500      	movs	r5, #0
 801fb3e:	1d3b      	adds	r3, r7, #4
 801fb40:	681b      	ldr	r3, [r3, #0]
 801fb42:	f103 040c 	add.w	r4, r3, #12
 801fb46:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801fb4a:	49ae      	ldr	r1, [pc, #696]	; (801fe04 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801fb4c:	4618      	mov	r0, r3
 801fb4e:	f7ee f9ac 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801fb52:	2601      	movs	r6, #1
 801fb54:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801fb58:	4619      	mov	r1, r3
 801fb5a:	4620      	mov	r0, r4
 801fb5c:	f7ee fd69 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801fb60:	4603      	mov	r3, r0
 801fb62:	2b00      	cmp	r3, #0
 801fb64:	d015      	beq.n	801fb92 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801fb66:	463b      	mov	r3, r7
 801fb68:	681b      	ldr	r3, [r3, #0]
 801fb6a:	f103 040c 	add.w	r4, r3, #12
 801fb6e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801fb72:	49a5      	ldr	r1, [pc, #660]	; (801fe08 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801fb74:	4618      	mov	r0, r3
 801fb76:	f7ee f998 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801fb7a:	2501      	movs	r5, #1
 801fb7c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801fb80:	4619      	mov	r1, r3
 801fb82:	4620      	mov	r0, r4
 801fb84:	f7ee fd55 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801fb88:	4603      	mov	r3, r0
 801fb8a:	2b00      	cmp	r3, #0
 801fb8c:	d001      	beq.n	801fb92 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801fb8e:	2401      	movs	r4, #1
 801fb90:	e000      	b.n	801fb94 <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801fb92:	2400      	movs	r4, #0
 801fb94:	2d00      	cmp	r5, #0
 801fb96:	d004      	beq.n	801fba2 <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801fb98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801fb9c:	4618      	mov	r0, r3
 801fb9e:	f7ee fd3c 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801fba2:	2e00      	cmp	r6, #0
 801fba4:	d004      	beq.n	801fbb0 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801fba6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801fbaa:	4618      	mov	r0, r3
 801fbac:	f7ee fd35 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801fbb0:	2c00      	cmp	r4, #0
 801fbb2:	d010      	beq.n	801fbd6 <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801fbb4:	1d3b      	adds	r3, r7, #4
 801fbb6:	681b      	ldr	r3, [r3, #0]
 801fbb8:	699b      	ldr	r3, [r3, #24]
 801fbba:	2b00      	cmp	r3, #0
 801fbbc:	db09      	blt.n	801fbd2 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801fbbe:	1d3b      	adds	r3, r7, #4
 801fbc0:	681b      	ldr	r3, [r3, #0]
 801fbc2:	699b      	ldr	r3, [r3, #24]
 801fbc4:	463a      	mov	r2, r7
 801fbc6:	6812      	ldr	r2, [r2, #0]
 801fbc8:	6992      	ldr	r2, [r2, #24]
 801fbca:	4293      	cmp	r3, r2
 801fbcc:	d101      	bne.n	801fbd2 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801fbce:	2401      	movs	r4, #1
 801fbd0:	e256      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801fbd2:	2400      	movs	r4, #0
 801fbd4:	e254      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801fbd6:	2500      	movs	r5, #0
 801fbd8:	1d3b      	adds	r3, r7, #4
 801fbda:	681b      	ldr	r3, [r3, #0]
 801fbdc:	f103 040c 	add.w	r4, r3, #12
 801fbe0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801fbe4:	4988      	ldr	r1, [pc, #544]	; (801fe08 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801fbe6:	4618      	mov	r0, r3
 801fbe8:	f7ee f95f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801fbec:	2601      	movs	r6, #1
 801fbee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801fbf2:	4619      	mov	r1, r3
 801fbf4:	4620      	mov	r0, r4
 801fbf6:	f7ee fd1c 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801fbfa:	4603      	mov	r3, r0
 801fbfc:	2b00      	cmp	r3, #0
 801fbfe:	d015      	beq.n	801fc2c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801fc00:	463b      	mov	r3, r7
 801fc02:	681b      	ldr	r3, [r3, #0]
 801fc04:	f103 040c 	add.w	r4, r3, #12
 801fc08:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801fc0c:	497d      	ldr	r1, [pc, #500]	; (801fe04 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801fc0e:	4618      	mov	r0, r3
 801fc10:	f7ee f94b 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801fc14:	2501      	movs	r5, #1
 801fc16:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801fc1a:	4619      	mov	r1, r3
 801fc1c:	4620      	mov	r0, r4
 801fc1e:	f7ee fd08 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801fc22:	4603      	mov	r3, r0
 801fc24:	2b00      	cmp	r3, #0
 801fc26:	d001      	beq.n	801fc2c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801fc28:	2401      	movs	r4, #1
 801fc2a:	e000      	b.n	801fc2e <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801fc2c:	2400      	movs	r4, #0
 801fc2e:	2d00      	cmp	r5, #0
 801fc30:	d004      	beq.n	801fc3c <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801fc32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801fc36:	4618      	mov	r0, r3
 801fc38:	f7ee fcef 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801fc3c:	2e00      	cmp	r6, #0
 801fc3e:	d004      	beq.n	801fc4a <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801fc40:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801fc44:	4618      	mov	r0, r3
 801fc46:	f7ee fce8 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801fc4a:	2c00      	cmp	r4, #0
 801fc4c:	d010      	beq.n	801fc70 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801fc4e:	463b      	mov	r3, r7
 801fc50:	681b      	ldr	r3, [r3, #0]
 801fc52:	699b      	ldr	r3, [r3, #24]
 801fc54:	2b00      	cmp	r3, #0
 801fc56:	db09      	blt.n	801fc6c <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801fc58:	1d3b      	adds	r3, r7, #4
 801fc5a:	681b      	ldr	r3, [r3, #0]
 801fc5c:	699b      	ldr	r3, [r3, #24]
 801fc5e:	463a      	mov	r2, r7
 801fc60:	6812      	ldr	r2, [r2, #0]
 801fc62:	6992      	ldr	r2, [r2, #24]
 801fc64:	4293      	cmp	r3, r2
 801fc66:	d101      	bne.n	801fc6c <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801fc68:	2401      	movs	r4, #1
 801fc6a:	e209      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801fc6c:	2400      	movs	r4, #0
 801fc6e:	e207      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801fc70:	1d3b      	adds	r3, r7, #4
 801fc72:	681b      	ldr	r3, [r3, #0]
 801fc74:	f103 020c 	add.w	r2, r3, #12
 801fc78:	463b      	mov	r3, r7
 801fc7a:	681b      	ldr	r3, [r3, #0]
 801fc7c:	330c      	adds	r3, #12
 801fc7e:	4619      	mov	r1, r3
 801fc80:	4610      	mov	r0, r2
 801fc82:	f7ee fd1b 	bl	800e6bc <_ZneRK12SimpleStringS1_>
 801fc86:	4603      	mov	r3, r0
 801fc88:	2b00      	cmp	r3, #0
 801fc8a:	d001      	beq.n	801fc90 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801fc8c:	2400      	movs	r4, #0
 801fc8e:	e1f7      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801fc90:	1d3b      	adds	r3, r7, #4
 801fc92:	681b      	ldr	r3, [r3, #0]
 801fc94:	f103 040c 	add.w	r4, r3, #12
 801fc98:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801fc9c:	495b      	ldr	r1, [pc, #364]	; (801fe0c <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801fc9e:	4618      	mov	r0, r3
 801fca0:	f7ee f903 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801fca4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801fca8:	4619      	mov	r1, r3
 801fcaa:	4620      	mov	r0, r4
 801fcac:	f7ee fcc1 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801fcb0:	4603      	mov	r3, r0
 801fcb2:	461c      	mov	r4, r3
 801fcb4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801fcb8:	4618      	mov	r0, r3
 801fcba:	f7ee fcae 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801fcbe:	2c00      	cmp	r4, #0
 801fcc0:	d00b      	beq.n	801fcda <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801fcc2:	1d3b      	adds	r3, r7, #4
 801fcc4:	681b      	ldr	r3, [r3, #0]
 801fcc6:	7e1a      	ldrb	r2, [r3, #24]
 801fcc8:	463b      	mov	r3, r7
 801fcca:	681b      	ldr	r3, [r3, #0]
 801fccc:	7e1b      	ldrb	r3, [r3, #24]
 801fcce:	429a      	cmp	r2, r3
 801fcd0:	bf0c      	ite	eq
 801fcd2:	2301      	moveq	r3, #1
 801fcd4:	2300      	movne	r3, #0
 801fcd6:	b2dc      	uxtb	r4, r3
 801fcd8:	e1d2      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801fcda:	1d3b      	adds	r3, r7, #4
 801fcdc:	681b      	ldr	r3, [r3, #0]
 801fcde:	f103 040c 	add.w	r4, r3, #12
 801fce2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801fce6:	494a      	ldr	r1, [pc, #296]	; (801fe10 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801fce8:	4618      	mov	r0, r3
 801fcea:	f7ee f8de 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801fcee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801fcf2:	4619      	mov	r1, r3
 801fcf4:	4620      	mov	r0, r4
 801fcf6:	f7ee fc9c 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801fcfa:	4603      	mov	r3, r0
 801fcfc:	461c      	mov	r4, r3
 801fcfe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801fd02:	4618      	mov	r0, r3
 801fd04:	f7ee fc89 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801fd08:	2c00      	cmp	r4, #0
 801fd0a:	d00b      	beq.n	801fd24 <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801fd0c:	1d3b      	adds	r3, r7, #4
 801fd0e:	681b      	ldr	r3, [r3, #0]
 801fd10:	699a      	ldr	r2, [r3, #24]
 801fd12:	463b      	mov	r3, r7
 801fd14:	681b      	ldr	r3, [r3, #0]
 801fd16:	699b      	ldr	r3, [r3, #24]
 801fd18:	429a      	cmp	r2, r3
 801fd1a:	bf0c      	ite	eq
 801fd1c:	2301      	moveq	r3, #1
 801fd1e:	2300      	movne	r3, #0
 801fd20:	b2dc      	uxtb	r4, r3
 801fd22:	e1ad      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801fd24:	1d3b      	adds	r3, r7, #4
 801fd26:	681b      	ldr	r3, [r3, #0]
 801fd28:	f103 040c 	add.w	r4, r3, #12
 801fd2c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801fd30:	4938      	ldr	r1, [pc, #224]	; (801fe14 <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801fd32:	4618      	mov	r0, r3
 801fd34:	f7ee f8b9 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801fd38:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801fd3c:	4619      	mov	r1, r3
 801fd3e:	4620      	mov	r0, r4
 801fd40:	f7ee fc77 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801fd44:	4603      	mov	r3, r0
 801fd46:	461c      	mov	r4, r3
 801fd48:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801fd4c:	4618      	mov	r0, r3
 801fd4e:	f7ee fc64 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801fd52:	2c00      	cmp	r4, #0
 801fd54:	d00b      	beq.n	801fd6e <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801fd56:	1d3b      	adds	r3, r7, #4
 801fd58:	681b      	ldr	r3, [r3, #0]
 801fd5a:	699a      	ldr	r2, [r3, #24]
 801fd5c:	463b      	mov	r3, r7
 801fd5e:	681b      	ldr	r3, [r3, #0]
 801fd60:	699b      	ldr	r3, [r3, #24]
 801fd62:	429a      	cmp	r2, r3
 801fd64:	bf0c      	ite	eq
 801fd66:	2301      	moveq	r3, #1
 801fd68:	2300      	movne	r3, #0
 801fd6a:	b2dc      	uxtb	r4, r3
 801fd6c:	e188      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801fd6e:	1d3b      	adds	r3, r7, #4
 801fd70:	681b      	ldr	r3, [r3, #0]
 801fd72:	f103 040c 	add.w	r4, r3, #12
 801fd76:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801fd7a:	4922      	ldr	r1, [pc, #136]	; (801fe04 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801fd7c:	4618      	mov	r0, r3
 801fd7e:	f7ee f894 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801fd82:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801fd86:	4619      	mov	r1, r3
 801fd88:	4620      	mov	r0, r4
 801fd8a:	f7ee fc52 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801fd8e:	4603      	mov	r3, r0
 801fd90:	461c      	mov	r4, r3
 801fd92:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801fd96:	4618      	mov	r0, r3
 801fd98:	f7ee fc3f 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801fd9c:	2c00      	cmp	r4, #0
 801fd9e:	d00b      	beq.n	801fdb8 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801fda0:	1d3b      	adds	r3, r7, #4
 801fda2:	681b      	ldr	r3, [r3, #0]
 801fda4:	699a      	ldr	r2, [r3, #24]
 801fda6:	463b      	mov	r3, r7
 801fda8:	681b      	ldr	r3, [r3, #0]
 801fdaa:	699b      	ldr	r3, [r3, #24]
 801fdac:	429a      	cmp	r2, r3
 801fdae:	bf0c      	ite	eq
 801fdb0:	2301      	moveq	r3, #1
 801fdb2:	2300      	movne	r3, #0
 801fdb4:	b2dc      	uxtb	r4, r3
 801fdb6:	e163      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801fdb8:	1d3b      	adds	r3, r7, #4
 801fdba:	681b      	ldr	r3, [r3, #0]
 801fdbc:	f103 040c 	add.w	r4, r3, #12
 801fdc0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801fdc4:	4910      	ldr	r1, [pc, #64]	; (801fe08 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801fdc6:	4618      	mov	r0, r3
 801fdc8:	f7ee f86f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801fdcc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801fdd0:	4619      	mov	r1, r3
 801fdd2:	4620      	mov	r0, r4
 801fdd4:	f7ee fc2d 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801fdd8:	4603      	mov	r3, r0
 801fdda:	461c      	mov	r4, r3
 801fddc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801fde0:	4618      	mov	r0, r3
 801fde2:	f7ee fc1a 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801fde6:	2c00      	cmp	r4, #0
 801fde8:	d016      	beq.n	801fe18 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801fdea:	1d3b      	adds	r3, r7, #4
 801fdec:	681b      	ldr	r3, [r3, #0]
 801fdee:	699a      	ldr	r2, [r3, #24]
 801fdf0:	463b      	mov	r3, r7
 801fdf2:	681b      	ldr	r3, [r3, #0]
 801fdf4:	699b      	ldr	r3, [r3, #24]
 801fdf6:	429a      	cmp	r2, r3
 801fdf8:	bf0c      	ite	eq
 801fdfa:	2301      	moveq	r3, #1
 801fdfc:	2300      	movne	r3, #0
 801fdfe:	b2dc      	uxtb	r4, r3
 801fe00:	e13e      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801fe02:	bf00      	nop
 801fe04:	08028018 	.word	0x08028018
 801fe08:	08028024 	.word	0x08028024
 801fe0c:	08028000 	.word	0x08028000
 801fe10:	08027ffc 	.word	0x08027ffc
 801fe14:	08028008 	.word	0x08028008
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801fe18:	1d3b      	adds	r3, r7, #4
 801fe1a:	681b      	ldr	r3, [r3, #0]
 801fe1c:	f103 040c 	add.w	r4, r3, #12
 801fe20:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801fe24:	4999      	ldr	r1, [pc, #612]	; (802008c <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801fe26:	4618      	mov	r0, r3
 801fe28:	f7ee f83f 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801fe2c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801fe30:	4619      	mov	r1, r3
 801fe32:	4620      	mov	r0, r4
 801fe34:	f7ee fbfd 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801fe38:	4603      	mov	r3, r0
 801fe3a:	461c      	mov	r4, r3
 801fe3c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801fe40:	4618      	mov	r0, r3
 801fe42:	f7ee fbea 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801fe46:	2c00      	cmp	r4, #0
 801fe48:	d026      	beq.n	801fe98 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801fe4a:	1d3b      	adds	r3, r7, #4
 801fe4c:	681b      	ldr	r3, [r3, #0]
 801fe4e:	699a      	ldr	r2, [r3, #24]
 801fe50:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801fe54:	4611      	mov	r1, r2
 801fe56:	4618      	mov	r0, r3
 801fe58:	f7ee f827 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801fe5c:	463b      	mov	r3, r7
 801fe5e:	681b      	ldr	r3, [r3, #0]
 801fe60:	699a      	ldr	r2, [r3, #24]
 801fe62:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801fe66:	4611      	mov	r1, r2
 801fe68:	4618      	mov	r0, r3
 801fe6a:	f7ee f81e 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801fe6e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801fe72:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801fe76:	4611      	mov	r1, r2
 801fe78:	4618      	mov	r0, r3
 801fe7a:	f7ee fbda 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801fe7e:	4603      	mov	r3, r0
 801fe80:	461c      	mov	r4, r3
 801fe82:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801fe86:	4618      	mov	r0, r3
 801fe88:	f7ee fbc7 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801fe8c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801fe90:	4618      	mov	r0, r3
 801fe92:	f7ee fbc2 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801fe96:	e0f3      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801fe98:	1d3b      	adds	r3, r7, #4
 801fe9a:	681b      	ldr	r3, [r3, #0]
 801fe9c:	f103 040c 	add.w	r4, r3, #12
 801fea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801fea4:	497a      	ldr	r1, [pc, #488]	; (8020090 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801fea6:	4618      	mov	r0, r3
 801fea8:	f7ed ffff 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801feac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801feb0:	4619      	mov	r1, r3
 801feb2:	4620      	mov	r0, r4
 801feb4:	f7ee fbbd 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801feb8:	4603      	mov	r3, r0
 801feba:	461c      	mov	r4, r3
 801febc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801fec0:	4618      	mov	r0, r3
 801fec2:	f7ee fbaa 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801fec6:	2c00      	cmp	r4, #0
 801fec8:	d00b      	beq.n	801fee2 <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801feca:	1d3b      	adds	r3, r7, #4
 801fecc:	681b      	ldr	r3, [r3, #0]
 801fece:	699a      	ldr	r2, [r3, #24]
 801fed0:	463b      	mov	r3, r7
 801fed2:	681b      	ldr	r3, [r3, #0]
 801fed4:	699b      	ldr	r3, [r3, #24]
 801fed6:	429a      	cmp	r2, r3
 801fed8:	bf0c      	ite	eq
 801feda:	2301      	moveq	r3, #1
 801fedc:	2300      	movne	r3, #0
 801fede:	b2dc      	uxtb	r4, r3
 801fee0:	e0ce      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801fee2:	1d3b      	adds	r3, r7, #4
 801fee4:	681b      	ldr	r3, [r3, #0]
 801fee6:	f103 040c 	add.w	r4, r3, #12
 801feea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801feee:	4969      	ldr	r1, [pc, #420]	; (8020094 <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801fef0:	4618      	mov	r0, r3
 801fef2:	f7ed ffda 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801fef6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801fefa:	4619      	mov	r1, r3
 801fefc:	4620      	mov	r0, r4
 801fefe:	f7ee fb98 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801ff02:	4603      	mov	r3, r0
 801ff04:	461c      	mov	r4, r3
 801ff06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801ff0a:	4618      	mov	r0, r3
 801ff0c:	f7ee fb85 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801ff10:	2c00      	cmp	r4, #0
 801ff12:	d00b      	beq.n	801ff2c <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801ff14:	1d3b      	adds	r3, r7, #4
 801ff16:	681b      	ldr	r3, [r3, #0]
 801ff18:	699a      	ldr	r2, [r3, #24]
 801ff1a:	463b      	mov	r3, r7
 801ff1c:	681b      	ldr	r3, [r3, #0]
 801ff1e:	699b      	ldr	r3, [r3, #24]
 801ff20:	429a      	cmp	r2, r3
 801ff22:	bf0c      	ite	eq
 801ff24:	2301      	moveq	r3, #1
 801ff26:	2300      	movne	r3, #0
 801ff28:	b2dc      	uxtb	r4, r3
 801ff2a:	e0a9      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801ff2c:	1d3b      	adds	r3, r7, #4
 801ff2e:	681b      	ldr	r3, [r3, #0]
 801ff30:	f103 040c 	add.w	r4, r3, #12
 801ff34:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801ff38:	4957      	ldr	r1, [pc, #348]	; (8020098 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801ff3a:	4618      	mov	r0, r3
 801ff3c:	f7ed ffb5 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801ff40:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801ff44:	4619      	mov	r1, r3
 801ff46:	4620      	mov	r0, r4
 801ff48:	f7ee fb73 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801ff4c:	4603      	mov	r3, r0
 801ff4e:	461c      	mov	r4, r3
 801ff50:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801ff54:	4618      	mov	r0, r3
 801ff56:	f7ee fb60 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801ff5a:	2c00      	cmp	r4, #0
 801ff5c:	d00b      	beq.n	801ff76 <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801ff5e:	1d3b      	adds	r3, r7, #4
 801ff60:	681b      	ldr	r3, [r3, #0]
 801ff62:	699a      	ldr	r2, [r3, #24]
 801ff64:	463b      	mov	r3, r7
 801ff66:	681b      	ldr	r3, [r3, #0]
 801ff68:	699b      	ldr	r3, [r3, #24]
 801ff6a:	429a      	cmp	r2, r3
 801ff6c:	bf0c      	ite	eq
 801ff6e:	2301      	moveq	r3, #1
 801ff70:	2300      	movne	r3, #0
 801ff72:	b2dc      	uxtb	r4, r3
 801ff74:	e084      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801ff76:	1d3b      	adds	r3, r7, #4
 801ff78:	681b      	ldr	r3, [r3, #0]
 801ff7a:	f103 040c 	add.w	r4, r3, #12
 801ff7e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801ff82:	4946      	ldr	r1, [pc, #280]	; (802009c <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801ff84:	4618      	mov	r0, r3
 801ff86:	f7ed ff90 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801ff8a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801ff8e:	4619      	mov	r1, r3
 801ff90:	4620      	mov	r0, r4
 801ff92:	f7ee fb4e 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 801ff96:	4603      	mov	r3, r0
 801ff98:	461c      	mov	r4, r3
 801ff9a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801ff9e:	4618      	mov	r0, r3
 801ffa0:	f7ee fb3b 	bl	800e61a <_ZN12SimpleStringD1Ev>
 801ffa4:	2c00      	cmp	r4, #0
 801ffa6:	d01c      	beq.n	801ffe2 <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801ffa8:	1d3b      	adds	r3, r7, #4
 801ffaa:	681b      	ldr	r3, [r3, #0]
 801ffac:	ed93 7b06 	vldr	d7, [r3, #24]
 801ffb0:	463b      	mov	r3, r7
 801ffb2:	681b      	ldr	r3, [r3, #0]
 801ffb4:	ed93 6b06 	vldr	d6, [r3, #24]
 801ffb8:	1d3b      	adds	r3, r7, #4
 801ffba:	681b      	ldr	r3, [r3, #0]
 801ffbc:	ed93 5b08 	vldr	d5, [r3, #32]
 801ffc0:	eeb0 2a45 	vmov.f32	s4, s10
 801ffc4:	eef0 2a65 	vmov.f32	s5, s11
 801ffc8:	eeb0 1a46 	vmov.f32	s2, s12
 801ffcc:	eef0 1a66 	vmov.f32	s3, s13
 801ffd0:	eeb0 0a47 	vmov.f32	s0, s14
 801ffd4:	eef0 0a67 	vmov.f32	s1, s15
 801ffd8:	f7f3 fe1a 	bl	8013c10 <_Z13doubles_equalddd>
 801ffdc:	4603      	mov	r3, r0
 801ffde:	461c      	mov	r4, r3
 801ffe0:	e04e      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801ffe2:	1d3b      	adds	r3, r7, #4
 801ffe4:	681b      	ldr	r3, [r3, #0]
 801ffe6:	f103 040c 	add.w	r4, r3, #12
 801ffea:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801ffee:	492c      	ldr	r1, [pc, #176]	; (80200a0 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801fff0:	4618      	mov	r0, r3
 801fff2:	f7ed ff5a 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 801fff6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801fffa:	4619      	mov	r1, r3
 801fffc:	4620      	mov	r0, r4
 801fffe:	f7ee fb18 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 8020002:	4603      	mov	r3, r0
 8020004:	461c      	mov	r4, r3
 8020006:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802000a:	4618      	mov	r0, r3
 802000c:	f7ee fb05 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8020010:	2c00      	cmp	r4, #0
 8020012:	d01c      	beq.n	802004e <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 8020014:	1d3b      	adds	r3, r7, #4
 8020016:	681b      	ldr	r3, [r3, #0]
 8020018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802001a:	463b      	mov	r3, r7
 802001c:	681b      	ldr	r3, [r3, #0]
 802001e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020020:	429a      	cmp	r2, r3
 8020022:	d001      	beq.n	8020028 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 8020024:	2400      	movs	r4, #0
 8020026:	e02b      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 8020028:	1d3b      	adds	r3, r7, #4
 802002a:	681b      	ldr	r3, [r3, #0]
 802002c:	6998      	ldr	r0, [r3, #24]
 802002e:	463b      	mov	r3, r7
 8020030:	681b      	ldr	r3, [r3, #0]
 8020032:	6999      	ldr	r1, [r3, #24]
 8020034:	1d3b      	adds	r3, r7, #4
 8020036:	681b      	ldr	r3, [r3, #0]
 8020038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802003a:	461a      	mov	r2, r3
 802003c:	f7ed fe54 	bl	800dce8 <_ZN12SimpleString6MemCmpEPKvS1_j>
 8020040:	4603      	mov	r3, r0
 8020042:	2b00      	cmp	r3, #0
 8020044:	bf0c      	ite	eq
 8020046:	2301      	moveq	r3, #1
 8020048:	2300      	movne	r3, #0
 802004a:	b2dc      	uxtb	r4, r3
 802004c:	e018      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 802004e:	1d3b      	adds	r3, r7, #4
 8020050:	681b      	ldr	r3, [r3, #0]
 8020052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020054:	2b00      	cmp	r3, #0
 8020056:	d012      	beq.n	802007e <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 8020058:	1d3b      	adds	r3, r7, #4
 802005a:	681b      	ldr	r3, [r3, #0]
 802005c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 802005e:	1d3b      	adds	r3, r7, #4
 8020060:	681b      	ldr	r3, [r3, #0]
 8020062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020064:	681b      	ldr	r3, [r3, #0]
 8020066:	3308      	adds	r3, #8
 8020068:	681b      	ldr	r3, [r3, #0]
 802006a:	1d3a      	adds	r2, r7, #4
 802006c:	6812      	ldr	r2, [r2, #0]
 802006e:	6991      	ldr	r1, [r2, #24]
 8020070:	463a      	mov	r2, r7
 8020072:	6812      	ldr	r2, [r2, #0]
 8020074:	6992      	ldr	r2, [r2, #24]
 8020076:	4798      	blx	r3
 8020078:	4603      	mov	r3, r0
 802007a:	461c      	mov	r4, r3
 802007c:	e000      	b.n	8020080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 802007e:	2400      	movs	r4, #0
 8020080:	4623      	mov	r3, r4
}
 8020082:	4618      	mov	r0, r3
 8020084:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8020088:	46bd      	mov	sp, r7
 802008a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802008c:	080280c8 	.word	0x080280c8
 8020090:	080280a8 	.word	0x080280a8
 8020094:	080280b0 	.word	0x080280b0
 8020098:	080280bc 	.word	0x080280bc
 802009c:	080280a0 	.word	0x080280a0
 80200a0:	080280d4 	.word	0x080280d4

080200a4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 80200a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80200a6:	b087      	sub	sp, #28
 80200a8:	af00      	add	r7, sp, #0
 80200aa:	6078      	str	r0, [r7, #4]
 80200ac:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 80200ae:	687b      	ldr	r3, [r7, #4]
 80200b0:	f103 020c 	add.w	r2, r3, #12
 80200b4:	683b      	ldr	r3, [r7, #0]
 80200b6:	330c      	adds	r3, #12
 80200b8:	4619      	mov	r1, r3
 80200ba:	4610      	mov	r0, r2
 80200bc:	f7ee fab9 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 80200c0:	4603      	mov	r3, r0
 80200c2:	2b00      	cmp	r3, #0
 80200c4:	d001      	beq.n	80200ca <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 80200c6:	2301      	movs	r3, #1
 80200c8:	e03c      	b.n	8020144 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 80200ca:	2500      	movs	r5, #0
 80200cc:	687b      	ldr	r3, [r7, #4]
 80200ce:	f103 040c 	add.w	r4, r3, #12
 80200d2:	f107 0308 	add.w	r3, r7, #8
 80200d6:	491d      	ldr	r1, [pc, #116]	; (802014c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 80200d8:	4618      	mov	r0, r3
 80200da:	f7ed fee6 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80200de:	2601      	movs	r6, #1
 80200e0:	f107 0308 	add.w	r3, r7, #8
 80200e4:	4619      	mov	r1, r3
 80200e6:	4620      	mov	r0, r4
 80200e8:	f7ee faa3 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 80200ec:	4603      	mov	r3, r0
 80200ee:	2b00      	cmp	r3, #0
 80200f0:	d014      	beq.n	802011c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 80200f2:	683b      	ldr	r3, [r7, #0]
 80200f4:	f103 040c 	add.w	r4, r3, #12
 80200f8:	f107 0310 	add.w	r3, r7, #16
 80200fc:	4914      	ldr	r1, [pc, #80]	; (8020150 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 80200fe:	4618      	mov	r0, r3
 8020100:	f7ed fed3 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8020104:	2501      	movs	r5, #1
 8020106:	f107 0310 	add.w	r3, r7, #16
 802010a:	4619      	mov	r1, r3
 802010c:	4620      	mov	r0, r4
 802010e:	f7ee fa90 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 8020112:	4603      	mov	r3, r0
 8020114:	2b00      	cmp	r3, #0
 8020116:	d001      	beq.n	802011c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 8020118:	2401      	movs	r4, #1
 802011a:	e000      	b.n	802011e <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 802011c:	2400      	movs	r4, #0
 802011e:	2d00      	cmp	r5, #0
 8020120:	d004      	beq.n	802012c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 8020122:	f107 0310 	add.w	r3, r7, #16
 8020126:	4618      	mov	r0, r3
 8020128:	f7ee fa77 	bl	800e61a <_ZN12SimpleStringD1Ev>
 802012c:	2e00      	cmp	r6, #0
 802012e:	d004      	beq.n	802013a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 8020130:	f107 0308 	add.w	r3, r7, #8
 8020134:	4618      	mov	r0, r3
 8020136:	f7ee fa70 	bl	800e61a <_ZN12SimpleStringD1Ev>
 802013a:	2c00      	cmp	r4, #0
 802013c:	d001      	beq.n	8020142 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 802013e:	2301      	movs	r3, #1
 8020140:	e000      	b.n	8020144 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 8020142:	2300      	movs	r3, #0
}
 8020144:	4618      	mov	r0, r3
 8020146:	371c      	adds	r7, #28
 8020148:	46bd      	mov	sp, r7
 802014a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802014c:	080280b0 	.word	0x080280b0
 8020150:	080280a8 	.word	0x080280a8

08020154 <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 8020154:	b590      	push	{r4, r7, lr}
 8020156:	b0b9      	sub	sp, #228	; 0xe4
 8020158:	af00      	add	r7, sp, #0
 802015a:	6078      	str	r0, [r7, #4]
 802015c:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 802015e:	683b      	ldr	r3, [r7, #0]
 8020160:	f103 040c 	add.w	r4, r3, #12
 8020164:	f107 0308 	add.w	r3, r7, #8
 8020168:	49d4      	ldr	r1, [pc, #848]	; (80204bc <_ZNK14MockNamedValue8toStringEv+0x368>)
 802016a:	4618      	mov	r0, r3
 802016c:	f7ed fe9d 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8020170:	f107 0308 	add.w	r3, r7, #8
 8020174:	4619      	mov	r1, r3
 8020176:	4620      	mov	r0, r4
 8020178:	f7ee fa5b 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 802017c:	4603      	mov	r3, r0
 802017e:	461c      	mov	r4, r3
 8020180:	f107 0308 	add.w	r3, r7, #8
 8020184:	4618      	mov	r0, r3
 8020186:	f7ee fa48 	bl	800e61a <_ZN12SimpleStringD1Ev>
 802018a:	2c00      	cmp	r4, #0
 802018c:	d007      	beq.n	802019e <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 802018e:	683b      	ldr	r3, [r7, #0]
 8020190:	7e1a      	ldrb	r2, [r3, #24]
 8020192:	687b      	ldr	r3, [r7, #4]
 8020194:	4611      	mov	r1, r2
 8020196:	4618      	mov	r0, r3
 8020198:	f7ee fcb0 	bl	800eafc <_Z10StringFromb>
 802019c:	e23f      	b.n	802061e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 802019e:	683b      	ldr	r3, [r7, #0]
 80201a0:	f103 040c 	add.w	r4, r3, #12
 80201a4:	f107 0310 	add.w	r3, r7, #16
 80201a8:	49c5      	ldr	r1, [pc, #788]	; (80204c0 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 80201aa:	4618      	mov	r0, r3
 80201ac:	f7ed fe7d 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80201b0:	f107 0310 	add.w	r3, r7, #16
 80201b4:	4619      	mov	r1, r3
 80201b6:	4620      	mov	r0, r4
 80201b8:	f7ee fa3b 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 80201bc:	4603      	mov	r3, r0
 80201be:	461c      	mov	r4, r3
 80201c0:	f107 0310 	add.w	r3, r7, #16
 80201c4:	4618      	mov	r0, r3
 80201c6:	f7ee fa28 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80201ca:	2c00      	cmp	r4, #0
 80201cc:	d03b      	beq.n	8020246 <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 80201ce:	683b      	ldr	r3, [r7, #0]
 80201d0:	699a      	ldr	r2, [r3, #24]
 80201d2:	f107 0320 	add.w	r3, r7, #32
 80201d6:	4611      	mov	r1, r2
 80201d8:	4618      	mov	r0, r3
 80201da:	f7ee fce5 	bl	800eba8 <_Z10StringFromi>
 80201de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80201e2:	49b8      	ldr	r1, [pc, #736]	; (80204c4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 80201e4:	4618      	mov	r0, r3
 80201e6:	f7ed fe60 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80201ea:	f107 0318 	add.w	r3, r7, #24
 80201ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80201f2:	f107 0120 	add.w	r1, r7, #32
 80201f6:	4618      	mov	r0, r3
 80201f8:	f7ee fa71 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 80201fc:	683b      	ldr	r3, [r7, #0]
 80201fe:	699a      	ldr	r2, [r3, #24]
 8020200:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8020204:	4611      	mov	r1, r2
 8020206:	4618      	mov	r0, r3
 8020208:	f7ee fdbe 	bl	800ed88 <_Z30BracketsFormattedHexStringFromi>
 802020c:	687b      	ldr	r3, [r7, #4]
 802020e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8020212:	f107 0118 	add.w	r1, r7, #24
 8020216:	4618      	mov	r0, r3
 8020218:	f7ee fa61 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 802021c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8020220:	4618      	mov	r0, r3
 8020222:	f7ee f9fa 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8020226:	f107 0318 	add.w	r3, r7, #24
 802022a:	4618      	mov	r0, r3
 802022c:	f7ee f9f5 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8020230:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8020234:	4618      	mov	r0, r3
 8020236:	f7ee f9f0 	bl	800e61a <_ZN12SimpleStringD1Ev>
 802023a:	f107 0320 	add.w	r3, r7, #32
 802023e:	4618      	mov	r0, r3
 8020240:	f7ee f9eb 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8020244:	e1eb      	b.n	802061e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 8020246:	683b      	ldr	r3, [r7, #0]
 8020248:	f103 040c 	add.w	r4, r3, #12
 802024c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8020250:	499d      	ldr	r1, [pc, #628]	; (80204c8 <_ZNK14MockNamedValue8toStringEv+0x374>)
 8020252:	4618      	mov	r0, r3
 8020254:	f7ed fe29 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8020258:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802025c:	4619      	mov	r1, r3
 802025e:	4620      	mov	r0, r4
 8020260:	f7ee f9e7 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 8020264:	4603      	mov	r3, r0
 8020266:	461c      	mov	r4, r3
 8020268:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802026c:	4618      	mov	r0, r3
 802026e:	f7ee f9d4 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8020272:	2c00      	cmp	r4, #0
 8020274:	d03b      	beq.n	80202ee <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 8020276:	683b      	ldr	r3, [r7, #0]
 8020278:	699a      	ldr	r2, [r3, #24]
 802027a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802027e:	4611      	mov	r1, r2
 8020280:	4618      	mov	r0, r3
 8020282:	f7ee fef9 	bl	800f078 <_Z10StringFromj>
 8020286:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802028a:	498e      	ldr	r1, [pc, #568]	; (80204c4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 802028c:	4618      	mov	r0, r3
 802028e:	f7ed fe0c 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8020292:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020296:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802029a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 802029e:	4618      	mov	r0, r3
 80202a0:	f7ee fa1d 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 80202a4:	683b      	ldr	r3, [r7, #0]
 80202a6:	699a      	ldr	r2, [r3, #24]
 80202a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80202ac:	4611      	mov	r1, r2
 80202ae:	4618      	mov	r0, r3
 80202b0:	f7ee fd86 	bl	800edc0 <_Z30BracketsFormattedHexStringFromj>
 80202b4:	687b      	ldr	r3, [r7, #4]
 80202b6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80202ba:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80202be:	4618      	mov	r0, r3
 80202c0:	f7ee fa0d 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 80202c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80202c8:	4618      	mov	r0, r3
 80202ca:	f7ee f9a6 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80202ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80202d2:	4618      	mov	r0, r3
 80202d4:	f7ee f9a1 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80202d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80202dc:	4618      	mov	r0, r3
 80202de:	f7ee f99c 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80202e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80202e6:	4618      	mov	r0, r3
 80202e8:	f7ee f997 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80202ec:	e197      	b.n	802061e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 80202ee:	683b      	ldr	r3, [r7, #0]
 80202f0:	f103 040c 	add.w	r4, r3, #12
 80202f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80202f8:	4974      	ldr	r1, [pc, #464]	; (80204cc <_ZNK14MockNamedValue8toStringEv+0x378>)
 80202fa:	4618      	mov	r0, r3
 80202fc:	f7ed fdd5 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8020300:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8020304:	4619      	mov	r1, r3
 8020306:	4620      	mov	r0, r4
 8020308:	f7ee f993 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 802030c:	4603      	mov	r3, r0
 802030e:	461c      	mov	r4, r3
 8020310:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8020314:	4618      	mov	r0, r3
 8020316:	f7ee f980 	bl	800e61a <_ZN12SimpleStringD1Ev>
 802031a:	2c00      	cmp	r4, #0
 802031c:	d03b      	beq.n	8020396 <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 802031e:	683b      	ldr	r3, [r7, #0]
 8020320:	699a      	ldr	r2, [r3, #24]
 8020322:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8020326:	4611      	mov	r1, r2
 8020328:	4618      	mov	r0, r3
 802032a:	f7ee fc4f 	bl	800ebcc <_Z10StringFroml>
 802032e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8020332:	4964      	ldr	r1, [pc, #400]	; (80204c4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 8020334:	4618      	mov	r0, r3
 8020336:	f7ed fdb8 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 802033a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 802033e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8020342:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8020346:	4618      	mov	r0, r3
 8020348:	f7ee f9c9 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 802034c:	683b      	ldr	r3, [r7, #0]
 802034e:	699a      	ldr	r2, [r3, #24]
 8020350:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8020354:	4611      	mov	r1, r2
 8020356:	4618      	mov	r0, r3
 8020358:	f7ee fd4e 	bl	800edf8 <_Z30BracketsFormattedHexStringFroml>
 802035c:	687b      	ldr	r3, [r7, #4]
 802035e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8020362:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8020366:	4618      	mov	r0, r3
 8020368:	f7ee f9b9 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 802036c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8020370:	4618      	mov	r0, r3
 8020372:	f7ee f952 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8020376:	f107 0368 	add.w	r3, r7, #104	; 0x68
 802037a:	4618      	mov	r0, r3
 802037c:	f7ee f94d 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8020380:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8020384:	4618      	mov	r0, r3
 8020386:	f7ee f948 	bl	800e61a <_ZN12SimpleStringD1Ev>
 802038a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 802038e:	4618      	mov	r0, r3
 8020390:	f7ee f943 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8020394:	e143      	b.n	802061e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 8020396:	683b      	ldr	r3, [r7, #0]
 8020398:	f103 040c 	add.w	r4, r3, #12
 802039c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80203a0:	494b      	ldr	r1, [pc, #300]	; (80204d0 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 80203a2:	4618      	mov	r0, r3
 80203a4:	f7ed fd81 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80203a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80203ac:	4619      	mov	r1, r3
 80203ae:	4620      	mov	r0, r4
 80203b0:	f7ee f93f 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 80203b4:	4603      	mov	r3, r0
 80203b6:	461c      	mov	r4, r3
 80203b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80203bc:	4618      	mov	r0, r3
 80203be:	f7ee f92c 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80203c2:	2c00      	cmp	r4, #0
 80203c4:	d03b      	beq.n	802043e <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 80203c6:	683b      	ldr	r3, [r7, #0]
 80203c8:	699a      	ldr	r2, [r3, #24]
 80203ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80203ce:	4611      	mov	r1, r2
 80203d0:	4618      	mov	r0, r3
 80203d2:	f7ee fe63 	bl	800f09c <_Z10StringFromm>
 80203d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80203da:	493a      	ldr	r1, [pc, #232]	; (80204c4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 80203dc:	4618      	mov	r0, r3
 80203de:	f7ed fd64 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80203e2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80203e6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80203ea:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80203ee:	4618      	mov	r0, r3
 80203f0:	f7ee f975 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 80203f4:	683b      	ldr	r3, [r7, #0]
 80203f6:	699a      	ldr	r2, [r3, #24]
 80203f8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80203fc:	4611      	mov	r1, r2
 80203fe:	4618      	mov	r0, r3
 8020400:	f7ee fd16 	bl	800ee30 <_Z30BracketsFormattedHexStringFromm>
 8020404:	687b      	ldr	r3, [r7, #4]
 8020406:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 802040a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 802040e:	4618      	mov	r0, r3
 8020410:	f7ee f965 	bl	800e6de <_ZNK12SimpleStringplERKS_>
 8020414:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8020418:	4618      	mov	r0, r3
 802041a:	f7ee f8fe 	bl	800e61a <_ZN12SimpleStringD1Ev>
 802041e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8020422:	4618      	mov	r0, r3
 8020424:	f7ee f8f9 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8020428:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 802042c:	4618      	mov	r0, r3
 802042e:	f7ee f8f4 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8020432:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8020436:	4618      	mov	r0, r3
 8020438:	f7ee f8ef 	bl	800e61a <_ZN12SimpleStringD1Ev>
 802043c:	e0ef      	b.n	802061e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 802043e:	683b      	ldr	r3, [r7, #0]
 8020440:	f103 040c 	add.w	r4, r3, #12
 8020444:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8020448:	4922      	ldr	r1, [pc, #136]	; (80204d4 <_ZNK14MockNamedValue8toStringEv+0x380>)
 802044a:	4618      	mov	r0, r3
 802044c:	f7ed fd2d 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8020450:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8020454:	4619      	mov	r1, r3
 8020456:	4620      	mov	r0, r4
 8020458:	f7ee f8eb 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 802045c:	4603      	mov	r3, r0
 802045e:	461c      	mov	r4, r3
 8020460:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8020464:	4618      	mov	r0, r3
 8020466:	f7ee f8d8 	bl	800e61a <_ZN12SimpleStringD1Ev>
 802046a:	2c00      	cmp	r4, #0
 802046c:	d006      	beq.n	802047c <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 802046e:	683b      	ldr	r3, [r7, #0]
 8020470:	699b      	ldr	r3, [r3, #24]
 8020472:	4619      	mov	r1, r3
 8020474:	6878      	ldr	r0, [r7, #4]
 8020476:	f7ed fd18 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 802047a:	e0d0      	b.n	802061e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 802047c:	683b      	ldr	r3, [r7, #0]
 802047e:	f103 040c 	add.w	r4, r3, #12
 8020482:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8020486:	4914      	ldr	r1, [pc, #80]	; (80204d8 <_ZNK14MockNamedValue8toStringEv+0x384>)
 8020488:	4618      	mov	r0, r3
 802048a:	f7ed fd0e 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 802048e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8020492:	4619      	mov	r1, r3
 8020494:	4620      	mov	r0, r4
 8020496:	f7ee f8cc 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 802049a:	4603      	mov	r3, r0
 802049c:	461c      	mov	r4, r3
 802049e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80204a2:	4618      	mov	r0, r3
 80204a4:	f7ee f8b9 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80204a8:	2c00      	cmp	r4, #0
 80204aa:	d017      	beq.n	80204dc <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 80204ac:	683b      	ldr	r3, [r7, #0]
 80204ae:	699a      	ldr	r2, [r3, #24]
 80204b0:	687b      	ldr	r3, [r7, #4]
 80204b2:	4611      	mov	r1, r2
 80204b4:	4618      	mov	r0, r3
 80204b6:	f7ee fb9b 	bl	800ebf0 <_Z10StringFromPKv>
 80204ba:	e0b0      	b.n	802061e <_ZNK14MockNamedValue8toStringEv+0x4ca>
 80204bc:	08028000 	.word	0x08028000
 80204c0:	08027ffc 	.word	0x08027ffc
 80204c4:	080280ec 	.word	0x080280ec
 80204c8:	08028008 	.word	0x08028008
 80204cc:	08028018 	.word	0x08028018
 80204d0:	08028024 	.word	0x08028024
 80204d4:	080280c8 	.word	0x080280c8
 80204d8:	080280a8 	.word	0x080280a8
    else if (type_ == "void (*)()")
 80204dc:	683b      	ldr	r3, [r7, #0]
 80204de:	f103 040c 	add.w	r4, r3, #12
 80204e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80204e6:	4950      	ldr	r1, [pc, #320]	; (8020628 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 80204e8:	4618      	mov	r0, r3
 80204ea:	f7ed fcde 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80204ee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80204f2:	4619      	mov	r1, r3
 80204f4:	4620      	mov	r0, r4
 80204f6:	f7ee f89c 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 80204fa:	4603      	mov	r3, r0
 80204fc:	461c      	mov	r4, r3
 80204fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8020502:	4618      	mov	r0, r3
 8020504:	f7ee f889 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8020508:	2c00      	cmp	r4, #0
 802050a:	d007      	beq.n	802051c <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 802050c:	683b      	ldr	r3, [r7, #0]
 802050e:	699a      	ldr	r2, [r3, #24]
 8020510:	687b      	ldr	r3, [r7, #4]
 8020512:	4611      	mov	r1, r2
 8020514:	4618      	mov	r0, r3
 8020516:	f7ee fb95 	bl	800ec44 <_Z10StringFromPFvvE>
 802051a:	e080      	b.n	802061e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 802051c:	683b      	ldr	r3, [r7, #0]
 802051e:	f103 040c 	add.w	r4, r3, #12
 8020522:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8020526:	4941      	ldr	r1, [pc, #260]	; (802062c <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 8020528:	4618      	mov	r0, r3
 802052a:	f7ed fcbe 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 802052e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8020532:	4619      	mov	r1, r3
 8020534:	4620      	mov	r0, r4
 8020536:	f7ee f87c 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 802053a:	4603      	mov	r3, r0
 802053c:	461c      	mov	r4, r3
 802053e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8020542:	4618      	mov	r0, r3
 8020544:	f7ee f869 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8020548:	2c00      	cmp	r4, #0
 802054a:	d007      	beq.n	802055c <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 802054c:	683b      	ldr	r3, [r7, #0]
 802054e:	699a      	ldr	r2, [r3, #24]
 8020550:	687b      	ldr	r3, [r7, #4]
 8020552:	4611      	mov	r1, r2
 8020554:	4618      	mov	r0, r3
 8020556:	f7ee fb4b 	bl	800ebf0 <_Z10StringFromPKv>
 802055a:	e060      	b.n	802061e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 802055c:	683b      	ldr	r3, [r7, #0]
 802055e:	f103 040c 	add.w	r4, r3, #12
 8020562:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8020566:	4932      	ldr	r1, [pc, #200]	; (8020630 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 8020568:	4618      	mov	r0, r3
 802056a:	f7ed fc9e 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 802056e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8020572:	4619      	mov	r1, r3
 8020574:	4620      	mov	r0, r4
 8020576:	f7ee f85c 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 802057a:	4603      	mov	r3, r0
 802057c:	461c      	mov	r4, r3
 802057e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8020582:	4618      	mov	r0, r3
 8020584:	f7ee f849 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8020588:	2c00      	cmp	r4, #0
 802058a:	d00c      	beq.n	80205a6 <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 802058c:	683b      	ldr	r3, [r7, #0]
 802058e:	ed93 7b06 	vldr	d7, [r3, #24]
 8020592:	687b      	ldr	r3, [r7, #4]
 8020594:	2106      	movs	r1, #6
 8020596:	eeb0 0a47 	vmov.f32	s0, s14
 802059a:	eef0 0a67 	vmov.f32	s1, s15
 802059e:	4618      	mov	r0, r3
 80205a0:	f7ee fd00 	bl	800efa4 <_Z10StringFromdi>
 80205a4:	e03b      	b.n	802061e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 80205a6:	683b      	ldr	r3, [r7, #0]
 80205a8:	f103 040c 	add.w	r4, r3, #12
 80205ac:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80205b0:	4920      	ldr	r1, [pc, #128]	; (8020634 <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 80205b2:	4618      	mov	r0, r3
 80205b4:	f7ed fc79 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 80205b8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80205bc:	4619      	mov	r1, r3
 80205be:	4620      	mov	r0, r4
 80205c0:	f7ee f837 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 80205c4:	4603      	mov	r3, r0
 80205c6:	461c      	mov	r4, r3
 80205c8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80205cc:	4618      	mov	r0, r3
 80205ce:	f7ee f824 	bl	800e61a <_ZN12SimpleStringD1Ev>
 80205d2:	2c00      	cmp	r4, #0
 80205d4:	d008      	beq.n	80205e8 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 80205d6:	683b      	ldr	r3, [r7, #0]
 80205d8:	6999      	ldr	r1, [r3, #24]
 80205da:	683b      	ldr	r3, [r7, #0]
 80205dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80205de:	687b      	ldr	r3, [r7, #4]
 80205e0:	4618      	mov	r0, r3
 80205e2:	f7ee fe73 	bl	800f2cc <_Z30StringFromBinaryWithSizeOrNullPKhj>
 80205e6:	e01a      	b.n	802061e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 80205e8:	683b      	ldr	r3, [r7, #0]
 80205ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80205ec:	2b00      	cmp	r3, #0
 80205ee:	d00b      	beq.n	8020608 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 80205f0:	683b      	ldr	r3, [r7, #0]
 80205f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80205f4:	683b      	ldr	r3, [r7, #0]
 80205f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80205f8:	681b      	ldr	r3, [r3, #0]
 80205fa:	330c      	adds	r3, #12
 80205fc:	681b      	ldr	r3, [r3, #0]
 80205fe:	683a      	ldr	r2, [r7, #0]
 8020600:	6992      	ldr	r2, [r2, #24]
 8020602:	6878      	ldr	r0, [r7, #4]
 8020604:	4798      	blx	r3
 8020606:	e00a      	b.n	802061e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 8020608:	683b      	ldr	r3, [r7, #0]
 802060a:	330c      	adds	r3, #12
 802060c:	4618      	mov	r0, r3
 802060e:	f7ed ffd7 	bl	800e5c0 <_ZNK12SimpleString12asCharStringEv>
 8020612:	4602      	mov	r2, r0
 8020614:	687b      	ldr	r3, [r7, #4]
 8020616:	4908      	ldr	r1, [pc, #32]	; (8020638 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 8020618:	4618      	mov	r0, r3
 802061a:	f7ee fd05 	bl	800f028 <_Z16StringFromFormatPKcz>

}
 802061e:	6878      	ldr	r0, [r7, #4]
 8020620:	37e4      	adds	r7, #228	; 0xe4
 8020622:	46bd      	mov	sp, r7
 8020624:	bd90      	pop	{r4, r7, pc}
 8020626:	bf00      	nop
 8020628:	080280bc 	.word	0x080280bc
 802062c:	080280b0 	.word	0x080280b0
 8020630:	080280a0 	.word	0x080280a0
 8020634:	080280d4 	.word	0x080280d4
 8020638:	080280f0 	.word	0x080280f0

0802063c <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 802063c:	b480      	push	{r7}
 802063e:	b083      	sub	sp, #12
 8020640:	af00      	add	r7, sp, #0
 8020642:	6078      	str	r0, [r7, #4]
 8020644:	6039      	str	r1, [r7, #0]
    next_ = node;
 8020646:	687b      	ldr	r3, [r7, #4]
 8020648:	683a      	ldr	r2, [r7, #0]
 802064a:	605a      	str	r2, [r3, #4]
}
 802064c:	bf00      	nop
 802064e:	370c      	adds	r7, #12
 8020650:	46bd      	mov	sp, r7
 8020652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020656:	4770      	bx	lr

08020658 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 8020658:	b480      	push	{r7}
 802065a:	b083      	sub	sp, #12
 802065c:	af00      	add	r7, sp, #0
 802065e:	6078      	str	r0, [r7, #4]
    return next_;
 8020660:	687b      	ldr	r3, [r7, #4]
 8020662:	685b      	ldr	r3, [r3, #4]
}
 8020664:	4618      	mov	r0, r3
 8020666:	370c      	adds	r7, #12
 8020668:	46bd      	mov	sp, r7
 802066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802066e:	4770      	bx	lr

08020670 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 8020670:	b480      	push	{r7}
 8020672:	b083      	sub	sp, #12
 8020674:	af00      	add	r7, sp, #0
 8020676:	6078      	str	r0, [r7, #4]
    return data_;
 8020678:	687b      	ldr	r3, [r7, #4]
 802067a:	681b      	ldr	r3, [r3, #0]
}
 802067c:	4618      	mov	r0, r3
 802067e:	370c      	adds	r7, #12
 8020680:	46bd      	mov	sp, r7
 8020682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020686:	4770      	bx	lr

08020688 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 8020688:	b580      	push	{r7, lr}
 802068a:	b082      	sub	sp, #8
 802068c:	af00      	add	r7, sp, #0
 802068e:	6078      	str	r0, [r7, #4]
    delete data_;
 8020690:	687b      	ldr	r3, [r7, #4]
 8020692:	681b      	ldr	r3, [r3, #0]
 8020694:	2b00      	cmp	r3, #0
 8020696:	d004      	beq.n	80206a2 <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 8020698:	681a      	ldr	r2, [r3, #0]
 802069a:	3204      	adds	r2, #4
 802069c:	6812      	ldr	r2, [r2, #0]
 802069e:	4618      	mov	r0, r3
 80206a0:	4790      	blx	r2
}
 80206a2:	bf00      	nop
 80206a4:	3708      	adds	r7, #8
 80206a6:	46bd      	mov	sp, r7
 80206a8:	bd80      	pop	{r7, pc}

080206aa <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 80206aa:	b480      	push	{r7}
 80206ac:	b083      	sub	sp, #12
 80206ae:	af00      	add	r7, sp, #0
 80206b0:	6078      	str	r0, [r7, #4]
 80206b2:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 80206b4:	687b      	ldr	r3, [r7, #4]
 80206b6:	683a      	ldr	r2, [r7, #0]
 80206b8:	601a      	str	r2, [r3, #0]
 80206ba:	687b      	ldr	r3, [r7, #4]
 80206bc:	2200      	movs	r2, #0
 80206be:	605a      	str	r2, [r3, #4]
{
}
 80206c0:	687b      	ldr	r3, [r7, #4]
 80206c2:	4618      	mov	r0, r3
 80206c4:	370c      	adds	r7, #12
 80206c6:	46bd      	mov	sp, r7
 80206c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206cc:	4770      	bx	lr

080206ce <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 80206ce:	b580      	push	{r7, lr}
 80206d0:	b082      	sub	sp, #8
 80206d2:	af00      	add	r7, sp, #0
 80206d4:	6078      	str	r0, [r7, #4]
 80206d6:	6039      	str	r1, [r7, #0]
    return data_->getName();
 80206d8:	683b      	ldr	r3, [r7, #0]
 80206da:	6819      	ldr	r1, [r3, #0]
 80206dc:	683b      	ldr	r3, [r7, #0]
 80206de:	681b      	ldr	r3, [r3, #0]
 80206e0:	681b      	ldr	r3, [r3, #0]
 80206e2:	335c      	adds	r3, #92	; 0x5c
 80206e4:	681b      	ldr	r3, [r3, #0]
 80206e6:	687a      	ldr	r2, [r7, #4]
 80206e8:	4610      	mov	r0, r2
 80206ea:	4798      	blx	r3
}
 80206ec:	6878      	ldr	r0, [r7, #4]
 80206ee:	3708      	adds	r7, #8
 80206f0:	46bd      	mov	sp, r7
 80206f2:	bd80      	pop	{r7, pc}

080206f4 <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 80206f4:	b580      	push	{r7, lr}
 80206f6:	b082      	sub	sp, #8
 80206f8:	af00      	add	r7, sp, #0
 80206fa:	6078      	str	r0, [r7, #4]
 80206fc:	6039      	str	r1, [r7, #0]
    return data_->getType();
 80206fe:	683b      	ldr	r3, [r7, #0]
 8020700:	6819      	ldr	r1, [r3, #0]
 8020702:	683b      	ldr	r3, [r7, #0]
 8020704:	681b      	ldr	r3, [r3, #0]
 8020706:	681b      	ldr	r3, [r3, #0]
 8020708:	3360      	adds	r3, #96	; 0x60
 802070a:	681b      	ldr	r3, [r3, #0]
 802070c:	687a      	ldr	r2, [r7, #4]
 802070e:	4610      	mov	r0, r2
 8020710:	4798      	blx	r3
}
 8020712:	6878      	ldr	r0, [r7, #4]
 8020714:	3708      	adds	r7, #8
 8020716:	46bd      	mov	sp, r7
 8020718:	bd80      	pop	{r7, pc}

0802071a <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 802071a:	b480      	push	{r7}
 802071c:	b083      	sub	sp, #12
 802071e:	af00      	add	r7, sp, #0
 8020720:	6078      	str	r0, [r7, #4]
 8020722:	687b      	ldr	r3, [r7, #4]
 8020724:	2200      	movs	r2, #0
 8020726:	601a      	str	r2, [r3, #0]
{
}
 8020728:	687b      	ldr	r3, [r7, #4]
 802072a:	4618      	mov	r0, r3
 802072c:	370c      	adds	r7, #12
 802072e:	46bd      	mov	sp, r7
 8020730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020734:	4770      	bx	lr

08020736 <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 8020736:	b580      	push	{r7, lr}
 8020738:	b084      	sub	sp, #16
 802073a:	af00      	add	r7, sp, #0
 802073c:	6078      	str	r0, [r7, #4]
    while (head_) {
 802073e:	687b      	ldr	r3, [r7, #4]
 8020740:	681b      	ldr	r3, [r3, #0]
 8020742:	2b00      	cmp	r3, #0
 8020744:	d016      	beq.n	8020774 <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 8020746:	687b      	ldr	r3, [r7, #4]
 8020748:	681b      	ldr	r3, [r3, #0]
 802074a:	4618      	mov	r0, r3
 802074c:	f7ff ff84 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 8020750:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 8020752:	687b      	ldr	r3, [r7, #4]
 8020754:	681b      	ldr	r3, [r3, #0]
 8020756:	4618      	mov	r0, r3
 8020758:	f7ff ff96 	bl	8020688 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 802075c:	687b      	ldr	r3, [r7, #4]
 802075e:	681b      	ldr	r3, [r3, #0]
 8020760:	2b00      	cmp	r3, #0
 8020762:	d003      	beq.n	802076c <_ZN18MockNamedValueList5clearEv+0x36>
 8020764:	2108      	movs	r1, #8
 8020766:	4618      	mov	r0, r3
 8020768:	f7ea fff0 	bl	800b74c <_ZdlPvj>
        head_ = n;
 802076c:	687b      	ldr	r3, [r7, #4]
 802076e:	68fa      	ldr	r2, [r7, #12]
 8020770:	601a      	str	r2, [r3, #0]
    while (head_) {
 8020772:	e7e4      	b.n	802073e <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 8020774:	bf00      	nop
 8020776:	3710      	adds	r7, #16
 8020778:	46bd      	mov	sp, r7
 802077a:	bd80      	pop	{r7, pc}

0802077c <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 802077c:	b590      	push	{r4, r7, lr}
 802077e:	b085      	sub	sp, #20
 8020780:	af00      	add	r7, sp, #0
 8020782:	6078      	str	r0, [r7, #4]
 8020784:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 8020786:	f44f 7210 	mov.w	r2, #576	; 0x240
 802078a:	4916      	ldr	r1, [pc, #88]	; (80207e4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 802078c:	2008      	movs	r0, #8
 802078e:	f7ea ffc9 	bl	800b724 <_ZnwjPKci>
 8020792:	4604      	mov	r4, r0
 8020794:	6839      	ldr	r1, [r7, #0]
 8020796:	4620      	mov	r0, r4
 8020798:	f7ff ff87 	bl	80206aa <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 802079c:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 802079e:	687b      	ldr	r3, [r7, #4]
 80207a0:	681b      	ldr	r3, [r3, #0]
 80207a2:	2b00      	cmp	r3, #0
 80207a4:	d103      	bne.n	80207ae <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 80207a6:	687b      	ldr	r3, [r7, #4]
 80207a8:	68ba      	ldr	r2, [r7, #8]
 80207aa:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 80207ac:	e016      	b.n	80207dc <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 80207ae:	687b      	ldr	r3, [r7, #4]
 80207b0:	681b      	ldr	r3, [r3, #0]
 80207b2:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 80207b4:	68f8      	ldr	r0, [r7, #12]
 80207b6:	f7ff ff4f 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 80207ba:	4603      	mov	r3, r0
 80207bc:	2b00      	cmp	r3, #0
 80207be:	bf14      	ite	ne
 80207c0:	2301      	movne	r3, #1
 80207c2:	2300      	moveq	r3, #0
 80207c4:	b2db      	uxtb	r3, r3
 80207c6:	2b00      	cmp	r3, #0
 80207c8:	d004      	beq.n	80207d4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 80207ca:	68f8      	ldr	r0, [r7, #12]
 80207cc:	f7ff ff44 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 80207d0:	60f8      	str	r0, [r7, #12]
 80207d2:	e7ef      	b.n	80207b4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 80207d4:	68b9      	ldr	r1, [r7, #8]
 80207d6:	68f8      	ldr	r0, [r7, #12]
 80207d8:	f7ff ff30 	bl	802063c <_ZN22MockNamedValueListNode7setNextEPS_>
}
 80207dc:	bf00      	nop
 80207de:	3714      	adds	r7, #20
 80207e0:	46bd      	mov	sp, r7
 80207e2:	bd90      	pop	{r4, r7, pc}
 80207e4:	08028038 	.word	0x08028038

080207e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 80207e8:	b590      	push	{r4, r7, lr}
 80207ea:	b087      	sub	sp, #28
 80207ec:	af00      	add	r7, sp, #0
 80207ee:	6078      	str	r0, [r7, #4]
 80207f0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 80207f2:	687b      	ldr	r3, [r7, #4]
 80207f4:	681b      	ldr	r3, [r3, #0]
 80207f6:	617b      	str	r3, [r7, #20]
 80207f8:	697b      	ldr	r3, [r7, #20]
 80207fa:	2b00      	cmp	r3, #0
 80207fc:	d01e      	beq.n	802083c <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 80207fe:	f107 030c 	add.w	r3, r7, #12
 8020802:	6979      	ldr	r1, [r7, #20]
 8020804:	4618      	mov	r0, r3
 8020806:	f7ff ff62 	bl	80206ce <_ZNK22MockNamedValueListNode7getNameEv>
 802080a:	f107 030c 	add.w	r3, r7, #12
 802080e:	6839      	ldr	r1, [r7, #0]
 8020810:	4618      	mov	r0, r3
 8020812:	f7ed ff0e 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 8020816:	4603      	mov	r3, r0
 8020818:	461c      	mov	r4, r3
 802081a:	f107 030c 	add.w	r3, r7, #12
 802081e:	4618      	mov	r0, r3
 8020820:	f7ed fefb 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8020824:	2c00      	cmp	r4, #0
 8020826:	d004      	beq.n	8020832 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 8020828:	6978      	ldr	r0, [r7, #20]
 802082a:	f7ff ff21 	bl	8020670 <_ZN22MockNamedValueListNode4itemEv>
 802082e:	4603      	mov	r3, r0
 8020830:	e005      	b.n	802083e <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 8020832:	6978      	ldr	r0, [r7, #20]
 8020834:	f7ff ff10 	bl	8020658 <_ZN22MockNamedValueListNode4nextEv>
 8020838:	6178      	str	r0, [r7, #20]
 802083a:	e7dd      	b.n	80207f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 802083c:	2300      	movs	r3, #0
}
 802083e:	4618      	mov	r0, r3
 8020840:	371c      	adds	r7, #28
 8020842:	46bd      	mov	sp, r7
 8020844:	bd90      	pop	{r4, r7, pc}

08020846 <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 8020846:	b480      	push	{r7}
 8020848:	b083      	sub	sp, #12
 802084a:	af00      	add	r7, sp, #0
 802084c:	6078      	str	r0, [r7, #4]
    return head_;
 802084e:	687b      	ldr	r3, [r7, #4]
 8020850:	681b      	ldr	r3, [r3, #0]
}
 8020852:	4618      	mov	r0, r3
 8020854:	370c      	adds	r7, #12
 8020856:	46bd      	mov	sp, r7
 8020858:	f85d 7b04 	ldr.w	r7, [sp], #4
 802085c:	4770      	bx	lr

0802085e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 802085e:	b580      	push	{r7, lr}
 8020860:	b084      	sub	sp, #16
 8020862:	af00      	add	r7, sp, #0
 8020864:	60f8      	str	r0, [r7, #12]
 8020866:	60b9      	str	r1, [r7, #8]
 8020868:	607a      	str	r2, [r7, #4]
 802086a:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 802086c:	68fb      	ldr	r3, [r7, #12]
 802086e:	68b9      	ldr	r1, [r7, #8]
 8020870:	4618      	mov	r0, r3
 8020872:	f7ed fb6e 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
 8020876:	68fb      	ldr	r3, [r7, #12]
 8020878:	687a      	ldr	r2, [r7, #4]
 802087a:	609a      	str	r2, [r3, #8]
 802087c:	68fb      	ldr	r3, [r7, #12]
 802087e:	2200      	movs	r2, #0
 8020880:	60da      	str	r2, [r3, #12]
 8020882:	68fb      	ldr	r3, [r7, #12]
 8020884:	683a      	ldr	r2, [r7, #0]
 8020886:	611a      	str	r2, [r3, #16]
 8020888:	68fb      	ldr	r3, [r7, #12]
 802088a:	4618      	mov	r0, r3
 802088c:	3710      	adds	r7, #16
 802088e:	46bd      	mov	sp, r7
 8020890:	bd80      	pop	{r7, pc}

08020892 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 8020892:	b580      	push	{r7, lr}
 8020894:	b084      	sub	sp, #16
 8020896:	af00      	add	r7, sp, #0
 8020898:	60f8      	str	r0, [r7, #12]
 802089a:	60b9      	str	r1, [r7, #8]
 802089c:	607a      	str	r2, [r7, #4]
 802089e:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 80208a0:	68fb      	ldr	r3, [r7, #12]
 80208a2:	68b9      	ldr	r1, [r7, #8]
 80208a4:	4618      	mov	r0, r3
 80208a6:	f7ed fb54 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
 80208aa:	68fb      	ldr	r3, [r7, #12]
 80208ac:	2200      	movs	r2, #0
 80208ae:	609a      	str	r2, [r3, #8]
 80208b0:	68fb      	ldr	r3, [r7, #12]
 80208b2:	687a      	ldr	r2, [r7, #4]
 80208b4:	60da      	str	r2, [r3, #12]
 80208b6:	68fb      	ldr	r3, [r7, #12]
 80208b8:	683a      	ldr	r2, [r7, #0]
 80208ba:	611a      	str	r2, [r3, #16]
 80208bc:	68fb      	ldr	r3, [r7, #12]
 80208be:	4618      	mov	r0, r3
 80208c0:	3710      	adds	r7, #16
 80208c2:	46bd      	mov	sp, r7
 80208c4:	bd80      	pop	{r7, pc}

080208c6 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 80208c6:	b580      	push	{r7, lr}
 80208c8:	b084      	sub	sp, #16
 80208ca:	af00      	add	r7, sp, #0
 80208cc:	60f8      	str	r0, [r7, #12]
 80208ce:	60b9      	str	r1, [r7, #8]
 80208d0:	607a      	str	r2, [r7, #4]
 80208d2:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 80208d4:	68fb      	ldr	r3, [r7, #12]
 80208d6:	68b9      	ldr	r1, [r7, #8]
 80208d8:	4618      	mov	r0, r3
 80208da:	f7ed fb3a 	bl	800df52 <_ZN12SimpleStringC1ERKS_>
 80208de:	68fb      	ldr	r3, [r7, #12]
 80208e0:	687a      	ldr	r2, [r7, #4]
 80208e2:	609a      	str	r2, [r3, #8]
 80208e4:	68fb      	ldr	r3, [r7, #12]
 80208e6:	683a      	ldr	r2, [r7, #0]
 80208e8:	60da      	str	r2, [r3, #12]
 80208ea:	68fb      	ldr	r3, [r7, #12]
 80208ec:	69ba      	ldr	r2, [r7, #24]
 80208ee:	611a      	str	r2, [r3, #16]
 80208f0:	68fb      	ldr	r3, [r7, #12]
 80208f2:	4618      	mov	r0, r3
 80208f4:	3710      	adds	r7, #16
 80208f6:	46bd      	mov	sp, r7
 80208f8:	bd80      	pop	{r7, pc}
	...

080208fc <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 80208fc:	b480      	push	{r7}
 80208fe:	b083      	sub	sp, #12
 8020900:	af00      	add	r7, sp, #0
 8020902:	6078      	str	r0, [r7, #4]
 8020904:	4a06      	ldr	r2, [pc, #24]	; (8020920 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 8020906:	687b      	ldr	r3, [r7, #4]
 8020908:	601a      	str	r2, [r3, #0]
 802090a:	687b      	ldr	r3, [r7, #4]
 802090c:	2200      	movs	r2, #0
 802090e:	605a      	str	r2, [r3, #4]
{

}
 8020910:	687b      	ldr	r3, [r7, #4]
 8020912:	4618      	mov	r0, r3
 8020914:	370c      	adds	r7, #12
 8020916:	46bd      	mov	sp, r7
 8020918:	f85d 7b04 	ldr.w	r7, [sp], #4
 802091c:	4770      	bx	lr
 802091e:	bf00      	nop
 8020920:	0802aed0 	.word	0x0802aed0

08020924 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 8020924:	b580      	push	{r7, lr}
 8020926:	b082      	sub	sp, #8
 8020928:	af00      	add	r7, sp, #0
 802092a:	6078      	str	r0, [r7, #4]
 802092c:	4a05      	ldr	r2, [pc, #20]	; (8020944 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 802092e:	687b      	ldr	r3, [r7, #4]
 8020930:	601a      	str	r2, [r3, #0]
{
    clear();
 8020932:	6878      	ldr	r0, [r7, #4]
 8020934:	f000 f825 	bl	8020982 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 8020938:	687b      	ldr	r3, [r7, #4]
 802093a:	4618      	mov	r0, r3
 802093c:	3708      	adds	r7, #8
 802093e:	46bd      	mov	sp, r7
 8020940:	bd80      	pop	{r7, pc}
 8020942:	bf00      	nop
 8020944:	0802aed0 	.word	0x0802aed0

08020948 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 8020948:	b580      	push	{r7, lr}
 802094a:	b082      	sub	sp, #8
 802094c:	af00      	add	r7, sp, #0
 802094e:	6078      	str	r0, [r7, #4]
}
 8020950:	6878      	ldr	r0, [r7, #4]
 8020952:	f7ff ffe7 	bl	8020924 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 8020956:	2108      	movs	r1, #8
 8020958:	6878      	ldr	r0, [r7, #4]
 802095a:	f7ea fef7 	bl	800b74c <_ZdlPvj>
 802095e:	687b      	ldr	r3, [r7, #4]
 8020960:	4618      	mov	r0, r3
 8020962:	3708      	adds	r7, #8
 8020964:	46bd      	mov	sp, r7
 8020966:	bd80      	pop	{r7, pc}

08020968 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 8020968:	b580      	push	{r7, lr}
 802096a:	b082      	sub	sp, #8
 802096c:	af00      	add	r7, sp, #0
 802096e:	6078      	str	r0, [r7, #4]
 8020970:	687b      	ldr	r3, [r7, #4]
 8020972:	4618      	mov	r0, r3
 8020974:	f7ed fe51 	bl	800e61a <_ZN12SimpleStringD1Ev>
 8020978:	687b      	ldr	r3, [r7, #4]
 802097a:	4618      	mov	r0, r3
 802097c:	3708      	adds	r7, #8
 802097e:	46bd      	mov	sp, r7
 8020980:	bd80      	pop	{r7, pc}

08020982 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 8020982:	b590      	push	{r4, r7, lr}
 8020984:	b085      	sub	sp, #20
 8020986:	af00      	add	r7, sp, #0
 8020988:	6078      	str	r0, [r7, #4]
    while (head_) {
 802098a:	687b      	ldr	r3, [r7, #4]
 802098c:	685b      	ldr	r3, [r3, #4]
 802098e:	2b00      	cmp	r3, #0
 8020990:	d012      	beq.n	80209b8 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 8020992:	687b      	ldr	r3, [r7, #4]
 8020994:	685b      	ldr	r3, [r3, #4]
 8020996:	691b      	ldr	r3, [r3, #16]
 8020998:	60fb      	str	r3, [r7, #12]
        delete head_;
 802099a:	687b      	ldr	r3, [r7, #4]
 802099c:	685c      	ldr	r4, [r3, #4]
 802099e:	2c00      	cmp	r4, #0
 80209a0:	d006      	beq.n	80209b0 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 80209a2:	4620      	mov	r0, r4
 80209a4:	f7ff ffe0 	bl	8020968 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 80209a8:	2114      	movs	r1, #20
 80209aa:	4620      	mov	r0, r4
 80209ac:	f7ea fece 	bl	800b74c <_ZdlPvj>
        head_ = next;
 80209b0:	687b      	ldr	r3, [r7, #4]
 80209b2:	68fa      	ldr	r2, [r7, #12]
 80209b4:	605a      	str	r2, [r3, #4]
    while (head_) {
 80209b6:	e7e8      	b.n	802098a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 80209b8:	bf00      	nop
 80209ba:	3714      	adds	r7, #20
 80209bc:	46bd      	mov	sp, r7
 80209be:	bd90      	pop	{r4, r7, pc}

080209c0 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 80209c0:	b590      	push	{r4, r7, lr}
 80209c2:	b085      	sub	sp, #20
 80209c4:	af00      	add	r7, sp, #0
 80209c6:	60f8      	str	r0, [r7, #12]
 80209c8:	60b9      	str	r1, [r7, #8]
 80209ca:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 80209cc:	f240 227a 	movw	r2, #634	; 0x27a
 80209d0:	4908      	ldr	r1, [pc, #32]	; (80209f4 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 80209d2:	2014      	movs	r0, #20
 80209d4:	f7ea fea6 	bl	800b724 <_ZnwjPKci>
 80209d8:	4604      	mov	r4, r0
 80209da:	68fb      	ldr	r3, [r7, #12]
 80209dc:	685b      	ldr	r3, [r3, #4]
 80209de:	687a      	ldr	r2, [r7, #4]
 80209e0:	68b9      	ldr	r1, [r7, #8]
 80209e2:	4620      	mov	r0, r4
 80209e4:	f7ff ff3b 	bl	802085e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 80209e8:	68fb      	ldr	r3, [r7, #12]
 80209ea:	605c      	str	r4, [r3, #4]
}
 80209ec:	bf00      	nop
 80209ee:	3714      	adds	r7, #20
 80209f0:	46bd      	mov	sp, r7
 80209f2:	bd90      	pop	{r4, r7, pc}
 80209f4:	08028038 	.word	0x08028038

080209f8 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 80209f8:	b590      	push	{r4, r7, lr}
 80209fa:	b085      	sub	sp, #20
 80209fc:	af00      	add	r7, sp, #0
 80209fe:	60f8      	str	r0, [r7, #12]
 8020a00:	60b9      	str	r1, [r7, #8]
 8020a02:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 8020a04:	f240 227f 	movw	r2, #639	; 0x27f
 8020a08:	4908      	ldr	r1, [pc, #32]	; (8020a2c <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 8020a0a:	2014      	movs	r0, #20
 8020a0c:	f7ea fe8a 	bl	800b724 <_ZnwjPKci>
 8020a10:	4604      	mov	r4, r0
 8020a12:	68fb      	ldr	r3, [r7, #12]
 8020a14:	685b      	ldr	r3, [r3, #4]
 8020a16:	687a      	ldr	r2, [r7, #4]
 8020a18:	68b9      	ldr	r1, [r7, #8]
 8020a1a:	4620      	mov	r0, r4
 8020a1c:	f7ff ff39 	bl	8020892 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 8020a20:	68fb      	ldr	r3, [r7, #12]
 8020a22:	605c      	str	r4, [r3, #4]
}
 8020a24:	bf00      	nop
 8020a26:	3714      	adds	r7, #20
 8020a28:	46bd      	mov	sp, r7
 8020a2a:	bd90      	pop	{r4, r7, pc}
 8020a2c:	08028038 	.word	0x08028038

08020a30 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 8020a30:	b580      	push	{r7, lr}
 8020a32:	b084      	sub	sp, #16
 8020a34:	af00      	add	r7, sp, #0
 8020a36:	6078      	str	r0, [r7, #4]
 8020a38:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 8020a3a:	687b      	ldr	r3, [r7, #4]
 8020a3c:	685b      	ldr	r3, [r3, #4]
 8020a3e:	60fb      	str	r3, [r7, #12]
 8020a40:	68fb      	ldr	r3, [r7, #12]
 8020a42:	2b00      	cmp	r3, #0
 8020a44:	d017      	beq.n	8020a76 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 8020a46:	68fb      	ldr	r3, [r7, #12]
 8020a48:	6839      	ldr	r1, [r7, #0]
 8020a4a:	4618      	mov	r0, r3
 8020a4c:	f7ed fdf1 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 8020a50:	4603      	mov	r3, r0
 8020a52:	2b00      	cmp	r3, #0
 8020a54:	d005      	beq.n	8020a62 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 8020a56:	68fb      	ldr	r3, [r7, #12]
 8020a58:	689b      	ldr	r3, [r3, #8]
 8020a5a:	2b00      	cmp	r3, #0
 8020a5c:	d001      	beq.n	8020a62 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 8020a5e:	2301      	movs	r3, #1
 8020a60:	e000      	b.n	8020a64 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 8020a62:	2300      	movs	r3, #0
 8020a64:	2b00      	cmp	r3, #0
 8020a66:	d002      	beq.n	8020a6e <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 8020a68:	68fb      	ldr	r3, [r7, #12]
 8020a6a:	689b      	ldr	r3, [r3, #8]
 8020a6c:	e004      	b.n	8020a78 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 8020a6e:	68fb      	ldr	r3, [r7, #12]
 8020a70:	691b      	ldr	r3, [r3, #16]
 8020a72:	60fb      	str	r3, [r7, #12]
 8020a74:	e7e4      	b.n	8020a40 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 8020a76:	2300      	movs	r3, #0
}
 8020a78:	4618      	mov	r0, r3
 8020a7a:	3710      	adds	r7, #16
 8020a7c:	46bd      	mov	sp, r7
 8020a7e:	bd80      	pop	{r7, pc}

08020a80 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 8020a80:	b580      	push	{r7, lr}
 8020a82:	b084      	sub	sp, #16
 8020a84:	af00      	add	r7, sp, #0
 8020a86:	6078      	str	r0, [r7, #4]
 8020a88:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 8020a8a:	687b      	ldr	r3, [r7, #4]
 8020a8c:	685b      	ldr	r3, [r3, #4]
 8020a8e:	60fb      	str	r3, [r7, #12]
 8020a90:	68fb      	ldr	r3, [r7, #12]
 8020a92:	2b00      	cmp	r3, #0
 8020a94:	d017      	beq.n	8020ac6 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 8020a96:	68fb      	ldr	r3, [r7, #12]
 8020a98:	6839      	ldr	r1, [r7, #0]
 8020a9a:	4618      	mov	r0, r3
 8020a9c:	f7ed fdc9 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 8020aa0:	4603      	mov	r3, r0
 8020aa2:	2b00      	cmp	r3, #0
 8020aa4:	d005      	beq.n	8020ab2 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 8020aa6:	68fb      	ldr	r3, [r7, #12]
 8020aa8:	68db      	ldr	r3, [r3, #12]
 8020aaa:	2b00      	cmp	r3, #0
 8020aac:	d001      	beq.n	8020ab2 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 8020aae:	2301      	movs	r3, #1
 8020ab0:	e000      	b.n	8020ab4 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 8020ab2:	2300      	movs	r3, #0
 8020ab4:	2b00      	cmp	r3, #0
 8020ab6:	d002      	beq.n	8020abe <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 8020ab8:	68fb      	ldr	r3, [r7, #12]
 8020aba:	68db      	ldr	r3, [r3, #12]
 8020abc:	e004      	b.n	8020ac8 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 8020abe:	68fb      	ldr	r3, [r7, #12]
 8020ac0:	691b      	ldr	r3, [r3, #16]
 8020ac2:	60fb      	str	r3, [r7, #12]
 8020ac4:	e7e4      	b.n	8020a90 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 8020ac6:	2300      	movs	r3, #0
}
 8020ac8:	4618      	mov	r0, r3
 8020aca:	3710      	adds	r7, #16
 8020acc:	46bd      	mov	sp, r7
 8020ace:	bd80      	pop	{r7, pc}

08020ad0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 8020ad0:	b590      	push	{r4, r7, lr}
 8020ad2:	b087      	sub	sp, #28
 8020ad4:	af02      	add	r7, sp, #8
 8020ad6:	6078      	str	r0, [r7, #4]
 8020ad8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 8020ada:	683b      	ldr	r3, [r7, #0]
 8020adc:	685b      	ldr	r3, [r3, #4]
 8020ade:	60fb      	str	r3, [r7, #12]
 8020ae0:	68fb      	ldr	r3, [r7, #12]
 8020ae2:	2b00      	cmp	r3, #0
 8020ae4:	d018      	beq.n	8020b18 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 8020ae6:	f240 2293 	movw	r2, #659	; 0x293
 8020aea:	490d      	ldr	r1, [pc, #52]	; (8020b20 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 8020aec:	2014      	movs	r0, #20
 8020aee:	f7ea fe19 	bl	800b724 <_ZnwjPKci>
 8020af2:	4604      	mov	r4, r0
 8020af4:	68f9      	ldr	r1, [r7, #12]
 8020af6:	68fb      	ldr	r3, [r7, #12]
 8020af8:	689a      	ldr	r2, [r3, #8]
 8020afa:	68fb      	ldr	r3, [r7, #12]
 8020afc:	68d8      	ldr	r0, [r3, #12]
 8020afe:	687b      	ldr	r3, [r7, #4]
 8020b00:	685b      	ldr	r3, [r3, #4]
 8020b02:	9300      	str	r3, [sp, #0]
 8020b04:	4603      	mov	r3, r0
 8020b06:	4620      	mov	r0, r4
 8020b08:	f7ff fedd 	bl	80208c6 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 8020b0c:	687b      	ldr	r3, [r7, #4]
 8020b0e:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 8020b10:	68fb      	ldr	r3, [r7, #12]
 8020b12:	691b      	ldr	r3, [r3, #16]
 8020b14:	60fb      	str	r3, [r7, #12]
 8020b16:	e7e3      	b.n	8020ae0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 8020b18:	bf00      	nop
 8020b1a:	3714      	adds	r7, #20
 8020b1c:	46bd      	mov	sp, r7
 8020b1e:	bd90      	pop	{r4, r7, pc}
 8020b20:	08028038 	.word	0x08028038

08020b24 <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 8020b24:	b580      	push	{r7, lr}
 8020b26:	b082      	sub	sp, #8
 8020b28:	af00      	add	r7, sp, #0
 8020b2a:	6078      	str	r0, [r7, #4]
 8020b2c:	6039      	str	r1, [r7, #0]
 8020b2e:	687b      	ldr	r3, [r7, #4]
 8020b30:	490b      	ldr	r1, [pc, #44]	; (8020b60 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 8020b32:	4618      	mov	r0, r3
 8020b34:	f7ed f9b9 	bl	800deaa <_ZN12SimpleStringC1EPKc>
 8020b38:	687b      	ldr	r3, [r7, #4]
 8020b3a:	2200      	movs	r2, #0
 8020b3c:	721a      	strb	r2, [r3, #8]
 8020b3e:	687b      	ldr	r3, [r7, #4]
 8020b40:	2200      	movs	r2, #0
 8020b42:	725a      	strb	r2, [r3, #9]
 8020b44:	687b      	ldr	r3, [r7, #4]
 8020b46:	2200      	movs	r2, #0
 8020b48:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 8020b4a:	687b      	ldr	r3, [r7, #4]
 8020b4c:	6839      	ldr	r1, [r7, #0]
 8020b4e:	4618      	mov	r0, r3
 8020b50:	f7ed fa17 	bl	800df82 <_ZN12SimpleStringaSERKS_>
}
 8020b54:	687b      	ldr	r3, [r7, #4]
 8020b56:	4618      	mov	r0, r3
 8020b58:	3708      	adds	r7, #8
 8020b5a:	46bd      	mov	sp, r7
 8020b5c:	bd80      	pop	{r7, pc}
 8020b5e:	bf00      	nop
 8020b60:	08028114 	.word	0x08028114

08020b64 <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 8020b64:	b480      	push	{r7}
 8020b66:	b083      	sub	sp, #12
 8020b68:	af00      	add	r7, sp, #0
 8020b6a:	6078      	str	r0, [r7, #4]
 8020b6c:	6039      	str	r1, [r7, #0]
    next_ = filter;
 8020b6e:	687b      	ldr	r3, [r7, #4]
 8020b70:	683a      	ldr	r2, [r7, #0]
 8020b72:	60da      	str	r2, [r3, #12]
    return this;
 8020b74:	687b      	ldr	r3, [r7, #4]
}
 8020b76:	4618      	mov	r0, r3
 8020b78:	370c      	adds	r7, #12
 8020b7a:	46bd      	mov	sp, r7
 8020b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b80:	4770      	bx	lr

08020b82 <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 8020b82:	b480      	push	{r7}
 8020b84:	b083      	sub	sp, #12
 8020b86:	af00      	add	r7, sp, #0
 8020b88:	6078      	str	r0, [r7, #4]
    return next_;
 8020b8a:	687b      	ldr	r3, [r7, #4]
 8020b8c:	68db      	ldr	r3, [r3, #12]
}
 8020b8e:	4618      	mov	r0, r3
 8020b90:	370c      	adds	r7, #12
 8020b92:	46bd      	mov	sp, r7
 8020b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b98:	4770      	bx	lr

08020b9a <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 8020b9a:	b480      	push	{r7}
 8020b9c:	b083      	sub	sp, #12
 8020b9e:	af00      	add	r7, sp, #0
 8020ba0:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 8020ba2:	687b      	ldr	r3, [r7, #4]
 8020ba4:	2201      	movs	r2, #1
 8020ba6:	721a      	strb	r2, [r3, #8]
}
 8020ba8:	bf00      	nop
 8020baa:	370c      	adds	r7, #12
 8020bac:	46bd      	mov	sp, r7
 8020bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bb2:	4770      	bx	lr

08020bb4 <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 8020bb4:	b480      	push	{r7}
 8020bb6:	b083      	sub	sp, #12
 8020bb8:	af00      	add	r7, sp, #0
 8020bba:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 8020bbc:	687b      	ldr	r3, [r7, #4]
 8020bbe:	2201      	movs	r2, #1
 8020bc0:	725a      	strb	r2, [r3, #9]
}
 8020bc2:	bf00      	nop
 8020bc4:	370c      	adds	r7, #12
 8020bc6:	46bd      	mov	sp, r7
 8020bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bcc:	4770      	bx	lr

08020bce <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 8020bce:	b580      	push	{r7, lr}
 8020bd0:	b084      	sub	sp, #16
 8020bd2:	af00      	add	r7, sp, #0
 8020bd4:	6078      	str	r0, [r7, #4]
 8020bd6:	6039      	str	r1, [r7, #0]
    bool matches = false;
 8020bd8:	2300      	movs	r3, #0
 8020bda:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 8020bdc:	687b      	ldr	r3, [r7, #4]
 8020bde:	7a1b      	ldrb	r3, [r3, #8]
 8020be0:	2b00      	cmp	r3, #0
 8020be2:	d007      	beq.n	8020bf4 <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 8020be4:	687b      	ldr	r3, [r7, #4]
 8020be6:	4619      	mov	r1, r3
 8020be8:	6838      	ldr	r0, [r7, #0]
 8020bea:	f7ed fd22 	bl	800e632 <_ZeqRK12SimpleStringS1_>
 8020bee:	4603      	mov	r3, r0
 8020bf0:	73fb      	strb	r3, [r7, #15]
 8020bf2:	e006      	b.n	8020c02 <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 8020bf4:	687b      	ldr	r3, [r7, #4]
 8020bf6:	4619      	mov	r1, r3
 8020bf8:	6838      	ldr	r0, [r7, #0]
 8020bfa:	f7ed f9d4 	bl	800dfa6 <_ZNK12SimpleString8containsERKS_>
 8020bfe:	4603      	mov	r3, r0
 8020c00:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 8020c02:	687b      	ldr	r3, [r7, #4]
 8020c04:	7a5b      	ldrb	r3, [r3, #9]
 8020c06:	2b00      	cmp	r3, #0
 8020c08:	d004      	beq.n	8020c14 <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 8020c0a:	7bfb      	ldrb	r3, [r7, #15]
 8020c0c:	f083 0301 	eor.w	r3, r3, #1
 8020c10:	b2db      	uxtb	r3, r3
 8020c12:	e005      	b.n	8020c20 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 8020c14:	7bfb      	ldrb	r3, [r7, #15]
 8020c16:	2b00      	cmp	r3, #0
 8020c18:	bf14      	ite	ne
 8020c1a:	2301      	movne	r3, #1
 8020c1c:	2300      	moveq	r3, #0
 8020c1e:	b2db      	uxtb	r3, r3
}
 8020c20:	4618      	mov	r0, r3
 8020c22:	3710      	adds	r7, #16
 8020c24:	46bd      	mov	sp, r7
 8020c26:	bd80      	pop	{r7, pc}

08020c28 <__cxa_guard_acquire>:
 8020c28:	6803      	ldr	r3, [r0, #0]
 8020c2a:	07db      	lsls	r3, r3, #31
 8020c2c:	d406      	bmi.n	8020c3c <__cxa_guard_acquire+0x14>
 8020c2e:	7843      	ldrb	r3, [r0, #1]
 8020c30:	b103      	cbz	r3, 8020c34 <__cxa_guard_acquire+0xc>
 8020c32:	deff      	udf	#255	; 0xff
 8020c34:	2301      	movs	r3, #1
 8020c36:	7043      	strb	r3, [r0, #1]
 8020c38:	4618      	mov	r0, r3
 8020c3a:	4770      	bx	lr
 8020c3c:	2000      	movs	r0, #0
 8020c3e:	4770      	bx	lr

08020c40 <__cxa_guard_release>:
 8020c40:	2301      	movs	r3, #1
 8020c42:	6003      	str	r3, [r0, #0]
 8020c44:	4770      	bx	lr

08020c46 <__cxa_pure_virtual>:
 8020c46:	b508      	push	{r3, lr}
 8020c48:	f000 f80c 	bl	8020c64 <_ZSt9terminatev>

08020c4c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8020c4c:	b508      	push	{r3, lr}
 8020c4e:	4780      	blx	r0
 8020c50:	f000 f816 	bl	8020c80 <abort>

08020c54 <_ZSt13get_terminatev>:
 8020c54:	4b02      	ldr	r3, [pc, #8]	; (8020c60 <_ZSt13get_terminatev+0xc>)
 8020c56:	6818      	ldr	r0, [r3, #0]
 8020c58:	f3bf 8f5b 	dmb	ish
 8020c5c:	4770      	bx	lr
 8020c5e:	bf00      	nop
 8020c60:	20000104 	.word	0x20000104

08020c64 <_ZSt9terminatev>:
 8020c64:	b508      	push	{r3, lr}
 8020c66:	f7ff fff5 	bl	8020c54 <_ZSt13get_terminatev>
 8020c6a:	f7ff ffef 	bl	8020c4c <_ZN10__cxxabiv111__terminateEPFvvE>

08020c6e <fabs>:
 8020c6e:	ec51 0b10 	vmov	r0, r1, d0
 8020c72:	ee10 2a10 	vmov	r2, s0
 8020c76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8020c7a:	ec43 2b10 	vmov	d0, r2, r3
 8020c7e:	4770      	bx	lr

08020c80 <abort>:
 8020c80:	b508      	push	{r3, lr}
 8020c82:	2006      	movs	r0, #6
 8020c84:	f000 ff8c 	bl	8021ba0 <raise>
 8020c88:	2001      	movs	r0, #1
 8020c8a:	f7e0 f8b2 	bl	8000df2 <_exit>

08020c8e <atexit>:
 8020c8e:	2300      	movs	r3, #0
 8020c90:	4601      	mov	r1, r0
 8020c92:	461a      	mov	r2, r3
 8020c94:	4618      	mov	r0, r3
 8020c96:	f002 b9db 	b.w	8023050 <__register_exitproc>

08020c9a <atoi>:
 8020c9a:	220a      	movs	r2, #10
 8020c9c:	2100      	movs	r1, #0
 8020c9e:	f001 be03 	b.w	80228a8 <strtol>
	...

08020ca4 <calloc>:
 8020ca4:	4b02      	ldr	r3, [pc, #8]	; (8020cb0 <calloc+0xc>)
 8020ca6:	460a      	mov	r2, r1
 8020ca8:	4601      	mov	r1, r0
 8020caa:	6818      	ldr	r0, [r3, #0]
 8020cac:	f000 bde8 	b.w	8021880 <_calloc_r>
 8020cb0:	20000108 	.word	0x20000108

08020cb4 <__errno>:
 8020cb4:	4b01      	ldr	r3, [pc, #4]	; (8020cbc <__errno+0x8>)
 8020cb6:	6818      	ldr	r0, [r3, #0]
 8020cb8:	4770      	bx	lr
 8020cba:	bf00      	nop
 8020cbc:	20000108 	.word	0x20000108

08020cc0 <_fclose_r>:
 8020cc0:	b570      	push	{r4, r5, r6, lr}
 8020cc2:	4605      	mov	r5, r0
 8020cc4:	460c      	mov	r4, r1
 8020cc6:	b911      	cbnz	r1, 8020cce <_fclose_r+0xe>
 8020cc8:	2600      	movs	r6, #0
 8020cca:	4630      	mov	r0, r6
 8020ccc:	bd70      	pop	{r4, r5, r6, pc}
 8020cce:	b118      	cbz	r0, 8020cd8 <_fclose_r+0x18>
 8020cd0:	6983      	ldr	r3, [r0, #24]
 8020cd2:	b90b      	cbnz	r3, 8020cd8 <_fclose_r+0x18>
 8020cd4:	f000 f994 	bl	8021000 <__sinit>
 8020cd8:	4b2c      	ldr	r3, [pc, #176]	; (8020d8c <_fclose_r+0xcc>)
 8020cda:	429c      	cmp	r4, r3
 8020cdc:	d114      	bne.n	8020d08 <_fclose_r+0x48>
 8020cde:	686c      	ldr	r4, [r5, #4]
 8020ce0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020ce2:	07d8      	lsls	r0, r3, #31
 8020ce4:	d405      	bmi.n	8020cf2 <_fclose_r+0x32>
 8020ce6:	89a3      	ldrh	r3, [r4, #12]
 8020ce8:	0599      	lsls	r1, r3, #22
 8020cea:	d402      	bmi.n	8020cf2 <_fclose_r+0x32>
 8020cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020cee:	f000 fd3a 	bl	8021766 <__retarget_lock_acquire_recursive>
 8020cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020cf6:	b98b      	cbnz	r3, 8020d1c <_fclose_r+0x5c>
 8020cf8:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8020cfa:	f016 0601 	ands.w	r6, r6, #1
 8020cfe:	d1e3      	bne.n	8020cc8 <_fclose_r+0x8>
 8020d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020d02:	f000 fd32 	bl	802176a <__retarget_lock_release_recursive>
 8020d06:	e7e0      	b.n	8020cca <_fclose_r+0xa>
 8020d08:	4b21      	ldr	r3, [pc, #132]	; (8020d90 <_fclose_r+0xd0>)
 8020d0a:	429c      	cmp	r4, r3
 8020d0c:	d101      	bne.n	8020d12 <_fclose_r+0x52>
 8020d0e:	68ac      	ldr	r4, [r5, #8]
 8020d10:	e7e6      	b.n	8020ce0 <_fclose_r+0x20>
 8020d12:	4b20      	ldr	r3, [pc, #128]	; (8020d94 <_fclose_r+0xd4>)
 8020d14:	429c      	cmp	r4, r3
 8020d16:	bf08      	it	eq
 8020d18:	68ec      	ldreq	r4, [r5, #12]
 8020d1a:	e7e1      	b.n	8020ce0 <_fclose_r+0x20>
 8020d1c:	4621      	mov	r1, r4
 8020d1e:	4628      	mov	r0, r5
 8020d20:	f000 f842 	bl	8020da8 <__sflush_r>
 8020d24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8020d26:	4606      	mov	r6, r0
 8020d28:	b133      	cbz	r3, 8020d38 <_fclose_r+0x78>
 8020d2a:	6a21      	ldr	r1, [r4, #32]
 8020d2c:	4628      	mov	r0, r5
 8020d2e:	4798      	blx	r3
 8020d30:	2800      	cmp	r0, #0
 8020d32:	bfb8      	it	lt
 8020d34:	f04f 36ff 	movlt.w	r6, #4294967295
 8020d38:	89a3      	ldrh	r3, [r4, #12]
 8020d3a:	061a      	lsls	r2, r3, #24
 8020d3c:	d503      	bpl.n	8020d46 <_fclose_r+0x86>
 8020d3e:	6921      	ldr	r1, [r4, #16]
 8020d40:	4628      	mov	r0, r5
 8020d42:	f000 fdad 	bl	80218a0 <_free_r>
 8020d46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020d48:	b141      	cbz	r1, 8020d5c <_fclose_r+0x9c>
 8020d4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020d4e:	4299      	cmp	r1, r3
 8020d50:	d002      	beq.n	8020d58 <_fclose_r+0x98>
 8020d52:	4628      	mov	r0, r5
 8020d54:	f000 fda4 	bl	80218a0 <_free_r>
 8020d58:	2300      	movs	r3, #0
 8020d5a:	6363      	str	r3, [r4, #52]	; 0x34
 8020d5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8020d5e:	b121      	cbz	r1, 8020d6a <_fclose_r+0xaa>
 8020d60:	4628      	mov	r0, r5
 8020d62:	f000 fd9d 	bl	80218a0 <_free_r>
 8020d66:	2300      	movs	r3, #0
 8020d68:	64a3      	str	r3, [r4, #72]	; 0x48
 8020d6a:	f000 f931 	bl	8020fd0 <__sfp_lock_acquire>
 8020d6e:	2300      	movs	r3, #0
 8020d70:	81a3      	strh	r3, [r4, #12]
 8020d72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020d74:	07db      	lsls	r3, r3, #31
 8020d76:	d402      	bmi.n	8020d7e <_fclose_r+0xbe>
 8020d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020d7a:	f000 fcf6 	bl	802176a <__retarget_lock_release_recursive>
 8020d7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020d80:	f000 fcef 	bl	8021762 <__retarget_lock_close_recursive>
 8020d84:	f000 f92a 	bl	8020fdc <__sfp_lock_release>
 8020d88:	e79f      	b.n	8020cca <_fclose_r+0xa>
 8020d8a:	bf00      	nop
 8020d8c:	0802afc4 	.word	0x0802afc4
 8020d90:	0802afe4 	.word	0x0802afe4
 8020d94:	0802afa4 	.word	0x0802afa4

08020d98 <fclose>:
 8020d98:	4b02      	ldr	r3, [pc, #8]	; (8020da4 <fclose+0xc>)
 8020d9a:	4601      	mov	r1, r0
 8020d9c:	6818      	ldr	r0, [r3, #0]
 8020d9e:	f7ff bf8f 	b.w	8020cc0 <_fclose_r>
 8020da2:	bf00      	nop
 8020da4:	20000108 	.word	0x20000108

08020da8 <__sflush_r>:
 8020da8:	898a      	ldrh	r2, [r1, #12]
 8020daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020dae:	4605      	mov	r5, r0
 8020db0:	0710      	lsls	r0, r2, #28
 8020db2:	460c      	mov	r4, r1
 8020db4:	d458      	bmi.n	8020e68 <__sflush_r+0xc0>
 8020db6:	684b      	ldr	r3, [r1, #4]
 8020db8:	2b00      	cmp	r3, #0
 8020dba:	dc05      	bgt.n	8020dc8 <__sflush_r+0x20>
 8020dbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020dbe:	2b00      	cmp	r3, #0
 8020dc0:	dc02      	bgt.n	8020dc8 <__sflush_r+0x20>
 8020dc2:	2000      	movs	r0, #0
 8020dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020dc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020dca:	2e00      	cmp	r6, #0
 8020dcc:	d0f9      	beq.n	8020dc2 <__sflush_r+0x1a>
 8020dce:	2300      	movs	r3, #0
 8020dd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020dd4:	682f      	ldr	r7, [r5, #0]
 8020dd6:	602b      	str	r3, [r5, #0]
 8020dd8:	d032      	beq.n	8020e40 <__sflush_r+0x98>
 8020dda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020ddc:	89a3      	ldrh	r3, [r4, #12]
 8020dde:	075a      	lsls	r2, r3, #29
 8020de0:	d505      	bpl.n	8020dee <__sflush_r+0x46>
 8020de2:	6863      	ldr	r3, [r4, #4]
 8020de4:	1ac0      	subs	r0, r0, r3
 8020de6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020de8:	b10b      	cbz	r3, 8020dee <__sflush_r+0x46>
 8020dea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020dec:	1ac0      	subs	r0, r0, r3
 8020dee:	2300      	movs	r3, #0
 8020df0:	4602      	mov	r2, r0
 8020df2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020df4:	6a21      	ldr	r1, [r4, #32]
 8020df6:	4628      	mov	r0, r5
 8020df8:	47b0      	blx	r6
 8020dfa:	1c43      	adds	r3, r0, #1
 8020dfc:	89a3      	ldrh	r3, [r4, #12]
 8020dfe:	d106      	bne.n	8020e0e <__sflush_r+0x66>
 8020e00:	6829      	ldr	r1, [r5, #0]
 8020e02:	291d      	cmp	r1, #29
 8020e04:	d82c      	bhi.n	8020e60 <__sflush_r+0xb8>
 8020e06:	4a2a      	ldr	r2, [pc, #168]	; (8020eb0 <__sflush_r+0x108>)
 8020e08:	40ca      	lsrs	r2, r1
 8020e0a:	07d6      	lsls	r6, r2, #31
 8020e0c:	d528      	bpl.n	8020e60 <__sflush_r+0xb8>
 8020e0e:	2200      	movs	r2, #0
 8020e10:	6062      	str	r2, [r4, #4]
 8020e12:	04d9      	lsls	r1, r3, #19
 8020e14:	6922      	ldr	r2, [r4, #16]
 8020e16:	6022      	str	r2, [r4, #0]
 8020e18:	d504      	bpl.n	8020e24 <__sflush_r+0x7c>
 8020e1a:	1c42      	adds	r2, r0, #1
 8020e1c:	d101      	bne.n	8020e22 <__sflush_r+0x7a>
 8020e1e:	682b      	ldr	r3, [r5, #0]
 8020e20:	b903      	cbnz	r3, 8020e24 <__sflush_r+0x7c>
 8020e22:	6560      	str	r0, [r4, #84]	; 0x54
 8020e24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020e26:	602f      	str	r7, [r5, #0]
 8020e28:	2900      	cmp	r1, #0
 8020e2a:	d0ca      	beq.n	8020dc2 <__sflush_r+0x1a>
 8020e2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020e30:	4299      	cmp	r1, r3
 8020e32:	d002      	beq.n	8020e3a <__sflush_r+0x92>
 8020e34:	4628      	mov	r0, r5
 8020e36:	f000 fd33 	bl	80218a0 <_free_r>
 8020e3a:	2000      	movs	r0, #0
 8020e3c:	6360      	str	r0, [r4, #52]	; 0x34
 8020e3e:	e7c1      	b.n	8020dc4 <__sflush_r+0x1c>
 8020e40:	6a21      	ldr	r1, [r4, #32]
 8020e42:	2301      	movs	r3, #1
 8020e44:	4628      	mov	r0, r5
 8020e46:	47b0      	blx	r6
 8020e48:	1c41      	adds	r1, r0, #1
 8020e4a:	d1c7      	bne.n	8020ddc <__sflush_r+0x34>
 8020e4c:	682b      	ldr	r3, [r5, #0]
 8020e4e:	2b00      	cmp	r3, #0
 8020e50:	d0c4      	beq.n	8020ddc <__sflush_r+0x34>
 8020e52:	2b1d      	cmp	r3, #29
 8020e54:	d001      	beq.n	8020e5a <__sflush_r+0xb2>
 8020e56:	2b16      	cmp	r3, #22
 8020e58:	d101      	bne.n	8020e5e <__sflush_r+0xb6>
 8020e5a:	602f      	str	r7, [r5, #0]
 8020e5c:	e7b1      	b.n	8020dc2 <__sflush_r+0x1a>
 8020e5e:	89a3      	ldrh	r3, [r4, #12]
 8020e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020e64:	81a3      	strh	r3, [r4, #12]
 8020e66:	e7ad      	b.n	8020dc4 <__sflush_r+0x1c>
 8020e68:	690f      	ldr	r7, [r1, #16]
 8020e6a:	2f00      	cmp	r7, #0
 8020e6c:	d0a9      	beq.n	8020dc2 <__sflush_r+0x1a>
 8020e6e:	0793      	lsls	r3, r2, #30
 8020e70:	680e      	ldr	r6, [r1, #0]
 8020e72:	bf08      	it	eq
 8020e74:	694b      	ldreq	r3, [r1, #20]
 8020e76:	600f      	str	r7, [r1, #0]
 8020e78:	bf18      	it	ne
 8020e7a:	2300      	movne	r3, #0
 8020e7c:	eba6 0807 	sub.w	r8, r6, r7
 8020e80:	608b      	str	r3, [r1, #8]
 8020e82:	f1b8 0f00 	cmp.w	r8, #0
 8020e86:	dd9c      	ble.n	8020dc2 <__sflush_r+0x1a>
 8020e88:	6a21      	ldr	r1, [r4, #32]
 8020e8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020e8c:	4643      	mov	r3, r8
 8020e8e:	463a      	mov	r2, r7
 8020e90:	4628      	mov	r0, r5
 8020e92:	47b0      	blx	r6
 8020e94:	2800      	cmp	r0, #0
 8020e96:	dc06      	bgt.n	8020ea6 <__sflush_r+0xfe>
 8020e98:	89a3      	ldrh	r3, [r4, #12]
 8020e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020e9e:	81a3      	strh	r3, [r4, #12]
 8020ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8020ea4:	e78e      	b.n	8020dc4 <__sflush_r+0x1c>
 8020ea6:	4407      	add	r7, r0
 8020ea8:	eba8 0800 	sub.w	r8, r8, r0
 8020eac:	e7e9      	b.n	8020e82 <__sflush_r+0xda>
 8020eae:	bf00      	nop
 8020eb0:	20400001 	.word	0x20400001

08020eb4 <_fflush_r>:
 8020eb4:	b538      	push	{r3, r4, r5, lr}
 8020eb6:	690b      	ldr	r3, [r1, #16]
 8020eb8:	4605      	mov	r5, r0
 8020eba:	460c      	mov	r4, r1
 8020ebc:	b913      	cbnz	r3, 8020ec4 <_fflush_r+0x10>
 8020ebe:	2500      	movs	r5, #0
 8020ec0:	4628      	mov	r0, r5
 8020ec2:	bd38      	pop	{r3, r4, r5, pc}
 8020ec4:	b118      	cbz	r0, 8020ece <_fflush_r+0x1a>
 8020ec6:	6983      	ldr	r3, [r0, #24]
 8020ec8:	b90b      	cbnz	r3, 8020ece <_fflush_r+0x1a>
 8020eca:	f000 f899 	bl	8021000 <__sinit>
 8020ece:	4b14      	ldr	r3, [pc, #80]	; (8020f20 <_fflush_r+0x6c>)
 8020ed0:	429c      	cmp	r4, r3
 8020ed2:	d11b      	bne.n	8020f0c <_fflush_r+0x58>
 8020ed4:	686c      	ldr	r4, [r5, #4]
 8020ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020eda:	2b00      	cmp	r3, #0
 8020edc:	d0ef      	beq.n	8020ebe <_fflush_r+0xa>
 8020ede:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020ee0:	07d0      	lsls	r0, r2, #31
 8020ee2:	d404      	bmi.n	8020eee <_fflush_r+0x3a>
 8020ee4:	0599      	lsls	r1, r3, #22
 8020ee6:	d402      	bmi.n	8020eee <_fflush_r+0x3a>
 8020ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020eea:	f000 fc3c 	bl	8021766 <__retarget_lock_acquire_recursive>
 8020eee:	4628      	mov	r0, r5
 8020ef0:	4621      	mov	r1, r4
 8020ef2:	f7ff ff59 	bl	8020da8 <__sflush_r>
 8020ef6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020ef8:	07da      	lsls	r2, r3, #31
 8020efa:	4605      	mov	r5, r0
 8020efc:	d4e0      	bmi.n	8020ec0 <_fflush_r+0xc>
 8020efe:	89a3      	ldrh	r3, [r4, #12]
 8020f00:	059b      	lsls	r3, r3, #22
 8020f02:	d4dd      	bmi.n	8020ec0 <_fflush_r+0xc>
 8020f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020f06:	f000 fc30 	bl	802176a <__retarget_lock_release_recursive>
 8020f0a:	e7d9      	b.n	8020ec0 <_fflush_r+0xc>
 8020f0c:	4b05      	ldr	r3, [pc, #20]	; (8020f24 <_fflush_r+0x70>)
 8020f0e:	429c      	cmp	r4, r3
 8020f10:	d101      	bne.n	8020f16 <_fflush_r+0x62>
 8020f12:	68ac      	ldr	r4, [r5, #8]
 8020f14:	e7df      	b.n	8020ed6 <_fflush_r+0x22>
 8020f16:	4b04      	ldr	r3, [pc, #16]	; (8020f28 <_fflush_r+0x74>)
 8020f18:	429c      	cmp	r4, r3
 8020f1a:	bf08      	it	eq
 8020f1c:	68ec      	ldreq	r4, [r5, #12]
 8020f1e:	e7da      	b.n	8020ed6 <_fflush_r+0x22>
 8020f20:	0802afc4 	.word	0x0802afc4
 8020f24:	0802afe4 	.word	0x0802afe4
 8020f28:	0802afa4 	.word	0x0802afa4

08020f2c <fflush>:
 8020f2c:	4601      	mov	r1, r0
 8020f2e:	b920      	cbnz	r0, 8020f3a <fflush+0xe>
 8020f30:	4b04      	ldr	r3, [pc, #16]	; (8020f44 <fflush+0x18>)
 8020f32:	4905      	ldr	r1, [pc, #20]	; (8020f48 <fflush+0x1c>)
 8020f34:	6818      	ldr	r0, [r3, #0]
 8020f36:	f000 babb 	b.w	80214b0 <_fwalk_reent>
 8020f3a:	4b04      	ldr	r3, [pc, #16]	; (8020f4c <fflush+0x20>)
 8020f3c:	6818      	ldr	r0, [r3, #0]
 8020f3e:	f7ff bfb9 	b.w	8020eb4 <_fflush_r>
 8020f42:	bf00      	nop
 8020f44:	0802b004 	.word	0x0802b004
 8020f48:	08020eb5 	.word	0x08020eb5
 8020f4c:	20000108 	.word	0x20000108

08020f50 <std>:
 8020f50:	2300      	movs	r3, #0
 8020f52:	b510      	push	{r4, lr}
 8020f54:	4604      	mov	r4, r0
 8020f56:	e9c0 3300 	strd	r3, r3, [r0]
 8020f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020f5e:	6083      	str	r3, [r0, #8]
 8020f60:	8181      	strh	r1, [r0, #12]
 8020f62:	6643      	str	r3, [r0, #100]	; 0x64
 8020f64:	81c2      	strh	r2, [r0, #14]
 8020f66:	6183      	str	r3, [r0, #24]
 8020f68:	4619      	mov	r1, r3
 8020f6a:	2208      	movs	r2, #8
 8020f6c:	305c      	adds	r0, #92	; 0x5c
 8020f6e:	f000 fc7f 	bl	8021870 <memset>
 8020f72:	4b05      	ldr	r3, [pc, #20]	; (8020f88 <std+0x38>)
 8020f74:	6263      	str	r3, [r4, #36]	; 0x24
 8020f76:	4b05      	ldr	r3, [pc, #20]	; (8020f8c <std+0x3c>)
 8020f78:	62a3      	str	r3, [r4, #40]	; 0x28
 8020f7a:	4b05      	ldr	r3, [pc, #20]	; (8020f90 <std+0x40>)
 8020f7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020f7e:	4b05      	ldr	r3, [pc, #20]	; (8020f94 <std+0x44>)
 8020f80:	6224      	str	r4, [r4, #32]
 8020f82:	6323      	str	r3, [r4, #48]	; 0x30
 8020f84:	bd10      	pop	{r4, pc}
 8020f86:	bf00      	nop
 8020f88:	08021c19 	.word	0x08021c19
 8020f8c:	08021c3f 	.word	0x08021c3f
 8020f90:	08021c77 	.word	0x08021c77
 8020f94:	08021c9b 	.word	0x08021c9b

08020f98 <_cleanup_r>:
 8020f98:	4901      	ldr	r1, [pc, #4]	; (8020fa0 <_cleanup_r+0x8>)
 8020f9a:	f000 ba89 	b.w	80214b0 <_fwalk_reent>
 8020f9e:	bf00      	nop
 8020fa0:	08020eb5 	.word	0x08020eb5

08020fa4 <__sfmoreglue>:
 8020fa4:	b570      	push	{r4, r5, r6, lr}
 8020fa6:	1e4a      	subs	r2, r1, #1
 8020fa8:	2568      	movs	r5, #104	; 0x68
 8020faa:	4355      	muls	r5, r2
 8020fac:	460e      	mov	r6, r1
 8020fae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8020fb2:	f000 fcc5 	bl	8021940 <_malloc_r>
 8020fb6:	4604      	mov	r4, r0
 8020fb8:	b140      	cbz	r0, 8020fcc <__sfmoreglue+0x28>
 8020fba:	2100      	movs	r1, #0
 8020fbc:	e9c0 1600 	strd	r1, r6, [r0]
 8020fc0:	300c      	adds	r0, #12
 8020fc2:	60a0      	str	r0, [r4, #8]
 8020fc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020fc8:	f000 fc52 	bl	8021870 <memset>
 8020fcc:	4620      	mov	r0, r4
 8020fce:	bd70      	pop	{r4, r5, r6, pc}

08020fd0 <__sfp_lock_acquire>:
 8020fd0:	4801      	ldr	r0, [pc, #4]	; (8020fd8 <__sfp_lock_acquire+0x8>)
 8020fd2:	f000 bbc8 	b.w	8021766 <__retarget_lock_acquire_recursive>
 8020fd6:	bf00      	nop
 8020fd8:	20001050 	.word	0x20001050

08020fdc <__sfp_lock_release>:
 8020fdc:	4801      	ldr	r0, [pc, #4]	; (8020fe4 <__sfp_lock_release+0x8>)
 8020fde:	f000 bbc4 	b.w	802176a <__retarget_lock_release_recursive>
 8020fe2:	bf00      	nop
 8020fe4:	20001050 	.word	0x20001050

08020fe8 <__sinit_lock_acquire>:
 8020fe8:	4801      	ldr	r0, [pc, #4]	; (8020ff0 <__sinit_lock_acquire+0x8>)
 8020fea:	f000 bbbc 	b.w	8021766 <__retarget_lock_acquire_recursive>
 8020fee:	bf00      	nop
 8020ff0:	2000104b 	.word	0x2000104b

08020ff4 <__sinit_lock_release>:
 8020ff4:	4801      	ldr	r0, [pc, #4]	; (8020ffc <__sinit_lock_release+0x8>)
 8020ff6:	f000 bbb8 	b.w	802176a <__retarget_lock_release_recursive>
 8020ffa:	bf00      	nop
 8020ffc:	2000104b 	.word	0x2000104b

08021000 <__sinit>:
 8021000:	b510      	push	{r4, lr}
 8021002:	4604      	mov	r4, r0
 8021004:	f7ff fff0 	bl	8020fe8 <__sinit_lock_acquire>
 8021008:	69a3      	ldr	r3, [r4, #24]
 802100a:	b11b      	cbz	r3, 8021014 <__sinit+0x14>
 802100c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021010:	f7ff bff0 	b.w	8020ff4 <__sinit_lock_release>
 8021014:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021018:	6523      	str	r3, [r4, #80]	; 0x50
 802101a:	4b13      	ldr	r3, [pc, #76]	; (8021068 <__sinit+0x68>)
 802101c:	4a13      	ldr	r2, [pc, #76]	; (802106c <__sinit+0x6c>)
 802101e:	681b      	ldr	r3, [r3, #0]
 8021020:	62a2      	str	r2, [r4, #40]	; 0x28
 8021022:	42a3      	cmp	r3, r4
 8021024:	bf04      	itt	eq
 8021026:	2301      	moveq	r3, #1
 8021028:	61a3      	streq	r3, [r4, #24]
 802102a:	4620      	mov	r0, r4
 802102c:	f000 f820 	bl	8021070 <__sfp>
 8021030:	6060      	str	r0, [r4, #4]
 8021032:	4620      	mov	r0, r4
 8021034:	f000 f81c 	bl	8021070 <__sfp>
 8021038:	60a0      	str	r0, [r4, #8]
 802103a:	4620      	mov	r0, r4
 802103c:	f000 f818 	bl	8021070 <__sfp>
 8021040:	2200      	movs	r2, #0
 8021042:	60e0      	str	r0, [r4, #12]
 8021044:	2104      	movs	r1, #4
 8021046:	6860      	ldr	r0, [r4, #4]
 8021048:	f7ff ff82 	bl	8020f50 <std>
 802104c:	68a0      	ldr	r0, [r4, #8]
 802104e:	2201      	movs	r2, #1
 8021050:	2109      	movs	r1, #9
 8021052:	f7ff ff7d 	bl	8020f50 <std>
 8021056:	68e0      	ldr	r0, [r4, #12]
 8021058:	2202      	movs	r2, #2
 802105a:	2112      	movs	r1, #18
 802105c:	f7ff ff78 	bl	8020f50 <std>
 8021060:	2301      	movs	r3, #1
 8021062:	61a3      	str	r3, [r4, #24]
 8021064:	e7d2      	b.n	802100c <__sinit+0xc>
 8021066:	bf00      	nop
 8021068:	0802b004 	.word	0x0802b004
 802106c:	08020f99 	.word	0x08020f99

08021070 <__sfp>:
 8021070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021072:	4607      	mov	r7, r0
 8021074:	f7ff ffac 	bl	8020fd0 <__sfp_lock_acquire>
 8021078:	4b1e      	ldr	r3, [pc, #120]	; (80210f4 <__sfp+0x84>)
 802107a:	681e      	ldr	r6, [r3, #0]
 802107c:	69b3      	ldr	r3, [r6, #24]
 802107e:	b913      	cbnz	r3, 8021086 <__sfp+0x16>
 8021080:	4630      	mov	r0, r6
 8021082:	f7ff ffbd 	bl	8021000 <__sinit>
 8021086:	3648      	adds	r6, #72	; 0x48
 8021088:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802108c:	3b01      	subs	r3, #1
 802108e:	d503      	bpl.n	8021098 <__sfp+0x28>
 8021090:	6833      	ldr	r3, [r6, #0]
 8021092:	b30b      	cbz	r3, 80210d8 <__sfp+0x68>
 8021094:	6836      	ldr	r6, [r6, #0]
 8021096:	e7f7      	b.n	8021088 <__sfp+0x18>
 8021098:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802109c:	b9d5      	cbnz	r5, 80210d4 <__sfp+0x64>
 802109e:	4b16      	ldr	r3, [pc, #88]	; (80210f8 <__sfp+0x88>)
 80210a0:	60e3      	str	r3, [r4, #12]
 80210a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80210a6:	6665      	str	r5, [r4, #100]	; 0x64
 80210a8:	f000 fb5a 	bl	8021760 <__retarget_lock_init_recursive>
 80210ac:	f7ff ff96 	bl	8020fdc <__sfp_lock_release>
 80210b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80210b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80210b8:	6025      	str	r5, [r4, #0]
 80210ba:	61a5      	str	r5, [r4, #24]
 80210bc:	2208      	movs	r2, #8
 80210be:	4629      	mov	r1, r5
 80210c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80210c4:	f000 fbd4 	bl	8021870 <memset>
 80210c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80210cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80210d0:	4620      	mov	r0, r4
 80210d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80210d4:	3468      	adds	r4, #104	; 0x68
 80210d6:	e7d9      	b.n	802108c <__sfp+0x1c>
 80210d8:	2104      	movs	r1, #4
 80210da:	4638      	mov	r0, r7
 80210dc:	f7ff ff62 	bl	8020fa4 <__sfmoreglue>
 80210e0:	4604      	mov	r4, r0
 80210e2:	6030      	str	r0, [r6, #0]
 80210e4:	2800      	cmp	r0, #0
 80210e6:	d1d5      	bne.n	8021094 <__sfp+0x24>
 80210e8:	f7ff ff78 	bl	8020fdc <__sfp_lock_release>
 80210ec:	230c      	movs	r3, #12
 80210ee:	603b      	str	r3, [r7, #0]
 80210f0:	e7ee      	b.n	80210d0 <__sfp+0x60>
 80210f2:	bf00      	nop
 80210f4:	0802b004 	.word	0x0802b004
 80210f8:	ffff0001 	.word	0xffff0001

080210fc <_fopen_r>:
 80210fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80210fe:	460f      	mov	r7, r1
 8021100:	4611      	mov	r1, r2
 8021102:	aa01      	add	r2, sp, #4
 8021104:	4605      	mov	r5, r0
 8021106:	f002 f837 	bl	8023178 <__sflags>
 802110a:	4606      	mov	r6, r0
 802110c:	b918      	cbnz	r0, 8021116 <_fopen_r+0x1a>
 802110e:	2400      	movs	r4, #0
 8021110:	4620      	mov	r0, r4
 8021112:	b003      	add	sp, #12
 8021114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021116:	4628      	mov	r0, r5
 8021118:	f7ff ffaa 	bl	8021070 <__sfp>
 802111c:	4604      	mov	r4, r0
 802111e:	2800      	cmp	r0, #0
 8021120:	d0f5      	beq.n	802110e <_fopen_r+0x12>
 8021122:	4639      	mov	r1, r7
 8021124:	9a01      	ldr	r2, [sp, #4]
 8021126:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 802112a:	4628      	mov	r0, r5
 802112c:	f000 fc62 	bl	80219f4 <_open_r>
 8021130:	1e07      	subs	r7, r0, #0
 8021132:	da09      	bge.n	8021148 <_fopen_r+0x4c>
 8021134:	2500      	movs	r5, #0
 8021136:	f7ff ff4b 	bl	8020fd0 <__sfp_lock_acquire>
 802113a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802113c:	81a5      	strh	r5, [r4, #12]
 802113e:	f000 fb10 	bl	8021762 <__retarget_lock_close_recursive>
 8021142:	f7ff ff4b 	bl	8020fdc <__sfp_lock_release>
 8021146:	e7e2      	b.n	802110e <_fopen_r+0x12>
 8021148:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802114a:	07db      	lsls	r3, r3, #31
 802114c:	d405      	bmi.n	802115a <_fopen_r+0x5e>
 802114e:	89a3      	ldrh	r3, [r4, #12]
 8021150:	0598      	lsls	r0, r3, #22
 8021152:	d402      	bmi.n	802115a <_fopen_r+0x5e>
 8021154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021156:	f000 fb06 	bl	8021766 <__retarget_lock_acquire_recursive>
 802115a:	4b0e      	ldr	r3, [pc, #56]	; (8021194 <_fopen_r+0x98>)
 802115c:	6263      	str	r3, [r4, #36]	; 0x24
 802115e:	4b0e      	ldr	r3, [pc, #56]	; (8021198 <_fopen_r+0x9c>)
 8021160:	62a3      	str	r3, [r4, #40]	; 0x28
 8021162:	4b0e      	ldr	r3, [pc, #56]	; (802119c <_fopen_r+0xa0>)
 8021164:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021166:	05f1      	lsls	r1, r6, #23
 8021168:	4b0d      	ldr	r3, [pc, #52]	; (80211a0 <_fopen_r+0xa4>)
 802116a:	81e7      	strh	r7, [r4, #14]
 802116c:	81a6      	strh	r6, [r4, #12]
 802116e:	6224      	str	r4, [r4, #32]
 8021170:	6323      	str	r3, [r4, #48]	; 0x30
 8021172:	d505      	bpl.n	8021180 <_fopen_r+0x84>
 8021174:	2302      	movs	r3, #2
 8021176:	2200      	movs	r2, #0
 8021178:	4621      	mov	r1, r4
 802117a:	4628      	mov	r0, r5
 802117c:	f000 f888 	bl	8021290 <_fseek_r>
 8021180:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021182:	07da      	lsls	r2, r3, #31
 8021184:	d4c4      	bmi.n	8021110 <_fopen_r+0x14>
 8021186:	89a3      	ldrh	r3, [r4, #12]
 8021188:	059b      	lsls	r3, r3, #22
 802118a:	d4c1      	bmi.n	8021110 <_fopen_r+0x14>
 802118c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802118e:	f000 faec 	bl	802176a <__retarget_lock_release_recursive>
 8021192:	e7bd      	b.n	8021110 <_fopen_r+0x14>
 8021194:	08021c19 	.word	0x08021c19
 8021198:	08021c3f 	.word	0x08021c3f
 802119c:	08021c77 	.word	0x08021c77
 80211a0:	08021c9b 	.word	0x08021c9b

080211a4 <fopen>:
 80211a4:	4b02      	ldr	r3, [pc, #8]	; (80211b0 <fopen+0xc>)
 80211a6:	460a      	mov	r2, r1
 80211a8:	4601      	mov	r1, r0
 80211aa:	6818      	ldr	r0, [r3, #0]
 80211ac:	f7ff bfa6 	b.w	80210fc <_fopen_r>
 80211b0:	20000108 	.word	0x20000108

080211b4 <_fputs_r>:
 80211b4:	b570      	push	{r4, r5, r6, lr}
 80211b6:	460e      	mov	r6, r1
 80211b8:	4614      	mov	r4, r2
 80211ba:	4605      	mov	r5, r0
 80211bc:	b118      	cbz	r0, 80211c6 <_fputs_r+0x12>
 80211be:	6983      	ldr	r3, [r0, #24]
 80211c0:	b90b      	cbnz	r3, 80211c6 <_fputs_r+0x12>
 80211c2:	f7ff ff1d 	bl	8021000 <__sinit>
 80211c6:	4b2b      	ldr	r3, [pc, #172]	; (8021274 <_fputs_r+0xc0>)
 80211c8:	429c      	cmp	r4, r3
 80211ca:	d11e      	bne.n	802120a <_fputs_r+0x56>
 80211cc:	686c      	ldr	r4, [r5, #4]
 80211ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80211d0:	07da      	lsls	r2, r3, #31
 80211d2:	d405      	bmi.n	80211e0 <_fputs_r+0x2c>
 80211d4:	89a3      	ldrh	r3, [r4, #12]
 80211d6:	059b      	lsls	r3, r3, #22
 80211d8:	d402      	bmi.n	80211e0 <_fputs_r+0x2c>
 80211da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80211dc:	f000 fac3 	bl	8021766 <__retarget_lock_acquire_recursive>
 80211e0:	89a3      	ldrh	r3, [r4, #12]
 80211e2:	0718      	lsls	r0, r3, #28
 80211e4:	d51b      	bpl.n	802121e <_fputs_r+0x6a>
 80211e6:	6923      	ldr	r3, [r4, #16]
 80211e8:	b1cb      	cbz	r3, 802121e <_fputs_r+0x6a>
 80211ea:	3e01      	subs	r6, #1
 80211ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80211f0:	bb39      	cbnz	r1, 8021242 <_fputs_r+0x8e>
 80211f2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80211f4:	f015 0501 	ands.w	r5, r5, #1
 80211f8:	d139      	bne.n	802126e <_fputs_r+0xba>
 80211fa:	89a3      	ldrh	r3, [r4, #12]
 80211fc:	0599      	lsls	r1, r3, #22
 80211fe:	d402      	bmi.n	8021206 <_fputs_r+0x52>
 8021200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021202:	f000 fab2 	bl	802176a <__retarget_lock_release_recursive>
 8021206:	4628      	mov	r0, r5
 8021208:	bd70      	pop	{r4, r5, r6, pc}
 802120a:	4b1b      	ldr	r3, [pc, #108]	; (8021278 <_fputs_r+0xc4>)
 802120c:	429c      	cmp	r4, r3
 802120e:	d101      	bne.n	8021214 <_fputs_r+0x60>
 8021210:	68ac      	ldr	r4, [r5, #8]
 8021212:	e7dc      	b.n	80211ce <_fputs_r+0x1a>
 8021214:	4b19      	ldr	r3, [pc, #100]	; (802127c <_fputs_r+0xc8>)
 8021216:	429c      	cmp	r4, r3
 8021218:	bf08      	it	eq
 802121a:	68ec      	ldreq	r4, [r5, #12]
 802121c:	e7d7      	b.n	80211ce <_fputs_r+0x1a>
 802121e:	4621      	mov	r1, r4
 8021220:	4628      	mov	r0, r5
 8021222:	f001 fea7 	bl	8022f74 <__swsetup_r>
 8021226:	2800      	cmp	r0, #0
 8021228:	d0df      	beq.n	80211ea <_fputs_r+0x36>
 802122a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802122c:	07da      	lsls	r2, r3, #31
 802122e:	d405      	bmi.n	802123c <_fputs_r+0x88>
 8021230:	89a3      	ldrh	r3, [r4, #12]
 8021232:	059b      	lsls	r3, r3, #22
 8021234:	d402      	bmi.n	802123c <_fputs_r+0x88>
 8021236:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021238:	f000 fa97 	bl	802176a <__retarget_lock_release_recursive>
 802123c:	f04f 35ff 	mov.w	r5, #4294967295
 8021240:	e7e1      	b.n	8021206 <_fputs_r+0x52>
 8021242:	68a3      	ldr	r3, [r4, #8]
 8021244:	3b01      	subs	r3, #1
 8021246:	2b00      	cmp	r3, #0
 8021248:	60a3      	str	r3, [r4, #8]
 802124a:	da04      	bge.n	8021256 <_fputs_r+0xa2>
 802124c:	69a2      	ldr	r2, [r4, #24]
 802124e:	4293      	cmp	r3, r2
 8021250:	db06      	blt.n	8021260 <_fputs_r+0xac>
 8021252:	290a      	cmp	r1, #10
 8021254:	d004      	beq.n	8021260 <_fputs_r+0xac>
 8021256:	6823      	ldr	r3, [r4, #0]
 8021258:	1c5a      	adds	r2, r3, #1
 802125a:	6022      	str	r2, [r4, #0]
 802125c:	7019      	strb	r1, [r3, #0]
 802125e:	e7c5      	b.n	80211ec <_fputs_r+0x38>
 8021260:	4622      	mov	r2, r4
 8021262:	4628      	mov	r0, r5
 8021264:	f001 fe22 	bl	8022eac <__swbuf_r>
 8021268:	3001      	adds	r0, #1
 802126a:	d1bf      	bne.n	80211ec <_fputs_r+0x38>
 802126c:	e7dd      	b.n	802122a <_fputs_r+0x76>
 802126e:	460d      	mov	r5, r1
 8021270:	e7c9      	b.n	8021206 <_fputs_r+0x52>
 8021272:	bf00      	nop
 8021274:	0802afc4 	.word	0x0802afc4
 8021278:	0802afe4 	.word	0x0802afe4
 802127c:	0802afa4 	.word	0x0802afa4

08021280 <fputs>:
 8021280:	4b02      	ldr	r3, [pc, #8]	; (802128c <fputs+0xc>)
 8021282:	460a      	mov	r2, r1
 8021284:	4601      	mov	r1, r0
 8021286:	6818      	ldr	r0, [r3, #0]
 8021288:	f7ff bf94 	b.w	80211b4 <_fputs_r>
 802128c:	20000108 	.word	0x20000108

08021290 <_fseek_r>:
 8021290:	f000 b800 	b.w	8021294 <_fseeko_r>

08021294 <_fseeko_r>:
 8021294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021298:	460c      	mov	r4, r1
 802129a:	4617      	mov	r7, r2
 802129c:	461e      	mov	r6, r3
 802129e:	4605      	mov	r5, r0
 80212a0:	b118      	cbz	r0, 80212aa <_fseeko_r+0x16>
 80212a2:	6983      	ldr	r3, [r0, #24]
 80212a4:	b90b      	cbnz	r3, 80212aa <_fseeko_r+0x16>
 80212a6:	f7ff feab 	bl	8021000 <__sinit>
 80212aa:	4b44      	ldr	r3, [pc, #272]	; (80213bc <_fseeko_r+0x128>)
 80212ac:	429c      	cmp	r4, r3
 80212ae:	d122      	bne.n	80212f6 <_fseeko_r+0x62>
 80212b0:	686c      	ldr	r4, [r5, #4]
 80212b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80212b4:	07d9      	lsls	r1, r3, #31
 80212b6:	d405      	bmi.n	80212c4 <_fseeko_r+0x30>
 80212b8:	89a3      	ldrh	r3, [r4, #12]
 80212ba:	059a      	lsls	r2, r3, #22
 80212bc:	d402      	bmi.n	80212c4 <_fseeko_r+0x30>
 80212be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80212c0:	f000 fa51 	bl	8021766 <__retarget_lock_acquire_recursive>
 80212c4:	89a3      	ldrh	r3, [r4, #12]
 80212c6:	f403 7384 	and.w	r3, r3, #264	; 0x108
 80212ca:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 80212ce:	d103      	bne.n	80212d8 <_fseeko_r+0x44>
 80212d0:	4621      	mov	r1, r4
 80212d2:	4628      	mov	r0, r5
 80212d4:	f7ff fdee 	bl	8020eb4 <_fflush_r>
 80212d8:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80212dc:	f1b8 0f00 	cmp.w	r8, #0
 80212e0:	d113      	bne.n	802130a <_fseeko_r+0x76>
 80212e2:	231d      	movs	r3, #29
 80212e4:	602b      	str	r3, [r5, #0]
 80212e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80212e8:	07d9      	lsls	r1, r3, #31
 80212ea:	d55d      	bpl.n	80213a8 <_fseeko_r+0x114>
 80212ec:	f04f 36ff 	mov.w	r6, #4294967295
 80212f0:	4630      	mov	r0, r6
 80212f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80212f6:	4b32      	ldr	r3, [pc, #200]	; (80213c0 <_fseeko_r+0x12c>)
 80212f8:	429c      	cmp	r4, r3
 80212fa:	d101      	bne.n	8021300 <_fseeko_r+0x6c>
 80212fc:	68ac      	ldr	r4, [r5, #8]
 80212fe:	e7d8      	b.n	80212b2 <_fseeko_r+0x1e>
 8021300:	4b30      	ldr	r3, [pc, #192]	; (80213c4 <_fseeko_r+0x130>)
 8021302:	429c      	cmp	r4, r3
 8021304:	bf08      	it	eq
 8021306:	68ec      	ldreq	r4, [r5, #12]
 8021308:	e7d3      	b.n	80212b2 <_fseeko_r+0x1e>
 802130a:	2e01      	cmp	r6, #1
 802130c:	d036      	beq.n	802137c <_fseeko_r+0xe8>
 802130e:	f036 0302 	bics.w	r3, r6, #2
 8021312:	d147      	bne.n	80213a4 <_fseeko_r+0x110>
 8021314:	6923      	ldr	r3, [r4, #16]
 8021316:	b91b      	cbnz	r3, 8021320 <_fseeko_r+0x8c>
 8021318:	4621      	mov	r1, r4
 802131a:	4628      	mov	r0, r5
 802131c:	f000 fa4a 	bl	80217b4 <__smakebuf_r>
 8021320:	4621      	mov	r1, r4
 8021322:	4628      	mov	r0, r5
 8021324:	f7ff fdc6 	bl	8020eb4 <_fflush_r>
 8021328:	2800      	cmp	r0, #0
 802132a:	d1dc      	bne.n	80212e6 <_fseeko_r+0x52>
 802132c:	6a21      	ldr	r1, [r4, #32]
 802132e:	4633      	mov	r3, r6
 8021330:	463a      	mov	r2, r7
 8021332:	4628      	mov	r0, r5
 8021334:	47c0      	blx	r8
 8021336:	3001      	adds	r0, #1
 8021338:	d0d5      	beq.n	80212e6 <_fseeko_r+0x52>
 802133a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802133c:	b141      	cbz	r1, 8021350 <_fseeko_r+0xbc>
 802133e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021342:	4299      	cmp	r1, r3
 8021344:	d002      	beq.n	802134c <_fseeko_r+0xb8>
 8021346:	4628      	mov	r0, r5
 8021348:	f000 faaa 	bl	80218a0 <_free_r>
 802134c:	2300      	movs	r3, #0
 802134e:	6363      	str	r3, [r4, #52]	; 0x34
 8021350:	6923      	ldr	r3, [r4, #16]
 8021352:	6023      	str	r3, [r4, #0]
 8021354:	89a3      	ldrh	r3, [r4, #12]
 8021356:	2500      	movs	r5, #0
 8021358:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 802135c:	6065      	str	r5, [r4, #4]
 802135e:	81a3      	strh	r3, [r4, #12]
 8021360:	2208      	movs	r2, #8
 8021362:	4629      	mov	r1, r5
 8021364:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021368:	f000 fa82 	bl	8021870 <memset>
 802136c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 802136e:	f016 0601 	ands.w	r6, r6, #1
 8021372:	d120      	bne.n	80213b6 <_fseeko_r+0x122>
 8021374:	89a3      	ldrh	r3, [r4, #12]
 8021376:	059b      	lsls	r3, r3, #22
 8021378:	d4ba      	bmi.n	80212f0 <_fseeko_r+0x5c>
 802137a:	e00c      	b.n	8021396 <_fseeko_r+0x102>
 802137c:	4621      	mov	r1, r4
 802137e:	4628      	mov	r0, r5
 8021380:	f000 f822 	bl	80213c8 <_ftello_r>
 8021384:	1c43      	adds	r3, r0, #1
 8021386:	4606      	mov	r6, r0
 8021388:	d109      	bne.n	802139e <_fseeko_r+0x10a>
 802138a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802138c:	07dd      	lsls	r5, r3, #31
 802138e:	d4ad      	bmi.n	80212ec <_fseeko_r+0x58>
 8021390:	89a3      	ldrh	r3, [r4, #12]
 8021392:	0598      	lsls	r0, r3, #22
 8021394:	d4aa      	bmi.n	80212ec <_fseeko_r+0x58>
 8021396:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021398:	f000 f9e7 	bl	802176a <__retarget_lock_release_recursive>
 802139c:	e7a8      	b.n	80212f0 <_fseeko_r+0x5c>
 802139e:	4407      	add	r7, r0
 80213a0:	2600      	movs	r6, #0
 80213a2:	e7b7      	b.n	8021314 <_fseeko_r+0x80>
 80213a4:	2316      	movs	r3, #22
 80213a6:	e79d      	b.n	80212e4 <_fseeko_r+0x50>
 80213a8:	89a3      	ldrh	r3, [r4, #12]
 80213aa:	059a      	lsls	r2, r3, #22
 80213ac:	d49e      	bmi.n	80212ec <_fseeko_r+0x58>
 80213ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80213b0:	f000 f9db 	bl	802176a <__retarget_lock_release_recursive>
 80213b4:	e79a      	b.n	80212ec <_fseeko_r+0x58>
 80213b6:	462e      	mov	r6, r5
 80213b8:	e79a      	b.n	80212f0 <_fseeko_r+0x5c>
 80213ba:	bf00      	nop
 80213bc:	0802afc4 	.word	0x0802afc4
 80213c0:	0802afe4 	.word	0x0802afe4
 80213c4:	0802afa4 	.word	0x0802afa4

080213c8 <_ftello_r>:
 80213c8:	b570      	push	{r4, r5, r6, lr}
 80213ca:	460c      	mov	r4, r1
 80213cc:	4605      	mov	r5, r0
 80213ce:	b118      	cbz	r0, 80213d8 <_ftello_r+0x10>
 80213d0:	6983      	ldr	r3, [r0, #24]
 80213d2:	b90b      	cbnz	r3, 80213d8 <_ftello_r+0x10>
 80213d4:	f7ff fe14 	bl	8021000 <__sinit>
 80213d8:	4b32      	ldr	r3, [pc, #200]	; (80214a4 <_ftello_r+0xdc>)
 80213da:	429c      	cmp	r4, r3
 80213dc:	d114      	bne.n	8021408 <_ftello_r+0x40>
 80213de:	686c      	ldr	r4, [r5, #4]
 80213e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80213e2:	07da      	lsls	r2, r3, #31
 80213e4:	d405      	bmi.n	80213f2 <_ftello_r+0x2a>
 80213e6:	89a3      	ldrh	r3, [r4, #12]
 80213e8:	059b      	lsls	r3, r3, #22
 80213ea:	d402      	bmi.n	80213f2 <_ftello_r+0x2a>
 80213ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80213ee:	f000 f9ba 	bl	8021766 <__retarget_lock_acquire_recursive>
 80213f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80213f4:	b9ce      	cbnz	r6, 802142a <_ftello_r+0x62>
 80213f6:	231d      	movs	r3, #29
 80213f8:	602b      	str	r3, [r5, #0]
 80213fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80213fc:	07de      	lsls	r6, r3, #31
 80213fe:	d50d      	bpl.n	802141c <_ftello_r+0x54>
 8021400:	f04f 35ff 	mov.w	r5, #4294967295
 8021404:	4628      	mov	r0, r5
 8021406:	bd70      	pop	{r4, r5, r6, pc}
 8021408:	4b27      	ldr	r3, [pc, #156]	; (80214a8 <_ftello_r+0xe0>)
 802140a:	429c      	cmp	r4, r3
 802140c:	d101      	bne.n	8021412 <_ftello_r+0x4a>
 802140e:	68ac      	ldr	r4, [r5, #8]
 8021410:	e7e6      	b.n	80213e0 <_ftello_r+0x18>
 8021412:	4b26      	ldr	r3, [pc, #152]	; (80214ac <_ftello_r+0xe4>)
 8021414:	429c      	cmp	r4, r3
 8021416:	bf08      	it	eq
 8021418:	68ec      	ldreq	r4, [r5, #12]
 802141a:	e7e1      	b.n	80213e0 <_ftello_r+0x18>
 802141c:	89a3      	ldrh	r3, [r4, #12]
 802141e:	059d      	lsls	r5, r3, #22
 8021420:	d4ee      	bmi.n	8021400 <_ftello_r+0x38>
 8021422:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021424:	f000 f9a1 	bl	802176a <__retarget_lock_release_recursive>
 8021428:	e7ea      	b.n	8021400 <_ftello_r+0x38>
 802142a:	89a2      	ldrh	r2, [r4, #12]
 802142c:	f002 030c 	and.w	r3, r2, #12
 8021430:	2b08      	cmp	r3, #8
 8021432:	d119      	bne.n	8021468 <_ftello_r+0xa0>
 8021434:	6823      	ldr	r3, [r4, #0]
 8021436:	b1bb      	cbz	r3, 8021468 <_ftello_r+0xa0>
 8021438:	6921      	ldr	r1, [r4, #16]
 802143a:	1a5b      	subs	r3, r3, r1
 802143c:	2b00      	cmp	r3, #0
 802143e:	dd13      	ble.n	8021468 <_ftello_r+0xa0>
 8021440:	05d0      	lsls	r0, r2, #23
 8021442:	d511      	bpl.n	8021468 <_ftello_r+0xa0>
 8021444:	2302      	movs	r3, #2
 8021446:	2200      	movs	r2, #0
 8021448:	6a21      	ldr	r1, [r4, #32]
 802144a:	4628      	mov	r0, r5
 802144c:	47b0      	blx	r6
 802144e:	1c41      	adds	r1, r0, #1
 8021450:	4605      	mov	r5, r0
 8021452:	d10d      	bne.n	8021470 <_ftello_r+0xa8>
 8021454:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021456:	07da      	lsls	r2, r3, #31
 8021458:	d4d2      	bmi.n	8021400 <_ftello_r+0x38>
 802145a:	89a3      	ldrh	r3, [r4, #12]
 802145c:	059b      	lsls	r3, r3, #22
 802145e:	d4cf      	bmi.n	8021400 <_ftello_r+0x38>
 8021460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021462:	f000 f982 	bl	802176a <__retarget_lock_release_recursive>
 8021466:	e7cd      	b.n	8021404 <_ftello_r+0x3c>
 8021468:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802146c:	d00f      	beq.n	802148e <_ftello_r+0xc6>
 802146e:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8021470:	89a2      	ldrh	r2, [r4, #12]
 8021472:	0756      	lsls	r6, r2, #29
 8021474:	d50d      	bpl.n	8021492 <_ftello_r+0xca>
 8021476:	6863      	ldr	r3, [r4, #4]
 8021478:	1aed      	subs	r5, r5, r3
 802147a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802147c:	b10b      	cbz	r3, 8021482 <_ftello_r+0xba>
 802147e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021480:	1aed      	subs	r5, r5, r3
 8021482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021484:	07d9      	lsls	r1, r3, #31
 8021486:	d4bd      	bmi.n	8021404 <_ftello_r+0x3c>
 8021488:	0593      	lsls	r3, r2, #22
 802148a:	d4bb      	bmi.n	8021404 <_ftello_r+0x3c>
 802148c:	e7e8      	b.n	8021460 <_ftello_r+0x98>
 802148e:	2301      	movs	r3, #1
 8021490:	e7da      	b.n	8021448 <_ftello_r+0x80>
 8021492:	0710      	lsls	r0, r2, #28
 8021494:	d5f5      	bpl.n	8021482 <_ftello_r+0xba>
 8021496:	6823      	ldr	r3, [r4, #0]
 8021498:	2b00      	cmp	r3, #0
 802149a:	d0f2      	beq.n	8021482 <_ftello_r+0xba>
 802149c:	6921      	ldr	r1, [r4, #16]
 802149e:	1a5b      	subs	r3, r3, r1
 80214a0:	441d      	add	r5, r3
 80214a2:	e7ee      	b.n	8021482 <_ftello_r+0xba>
 80214a4:	0802afc4 	.word	0x0802afc4
 80214a8:	0802afe4 	.word	0x0802afe4
 80214ac:	0802afa4 	.word	0x0802afa4

080214b0 <_fwalk_reent>:
 80214b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80214b4:	4606      	mov	r6, r0
 80214b6:	4688      	mov	r8, r1
 80214b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80214bc:	2700      	movs	r7, #0
 80214be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80214c2:	f1b9 0901 	subs.w	r9, r9, #1
 80214c6:	d505      	bpl.n	80214d4 <_fwalk_reent+0x24>
 80214c8:	6824      	ldr	r4, [r4, #0]
 80214ca:	2c00      	cmp	r4, #0
 80214cc:	d1f7      	bne.n	80214be <_fwalk_reent+0xe>
 80214ce:	4638      	mov	r0, r7
 80214d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80214d4:	89ab      	ldrh	r3, [r5, #12]
 80214d6:	2b01      	cmp	r3, #1
 80214d8:	d907      	bls.n	80214ea <_fwalk_reent+0x3a>
 80214da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80214de:	3301      	adds	r3, #1
 80214e0:	d003      	beq.n	80214ea <_fwalk_reent+0x3a>
 80214e2:	4629      	mov	r1, r5
 80214e4:	4630      	mov	r0, r6
 80214e6:	47c0      	blx	r8
 80214e8:	4307      	orrs	r7, r0
 80214ea:	3568      	adds	r5, #104	; 0x68
 80214ec:	e7e9      	b.n	80214c2 <_fwalk_reent+0x12>
	...

080214f0 <__libc_init_array>:
 80214f0:	b570      	push	{r4, r5, r6, lr}
 80214f2:	4d0d      	ldr	r5, [pc, #52]	; (8021528 <__libc_init_array+0x38>)
 80214f4:	4c0d      	ldr	r4, [pc, #52]	; (802152c <__libc_init_array+0x3c>)
 80214f6:	1b64      	subs	r4, r4, r5
 80214f8:	10a4      	asrs	r4, r4, #2
 80214fa:	2600      	movs	r6, #0
 80214fc:	42a6      	cmp	r6, r4
 80214fe:	d109      	bne.n	8021514 <__libc_init_array+0x24>
 8021500:	4d0b      	ldr	r5, [pc, #44]	; (8021530 <__libc_init_array+0x40>)
 8021502:	4c0c      	ldr	r4, [pc, #48]	; (8021534 <__libc_init_array+0x44>)
 8021504:	f003 f8d6 	bl	80246b4 <_init>
 8021508:	1b64      	subs	r4, r4, r5
 802150a:	10a4      	asrs	r4, r4, #2
 802150c:	2600      	movs	r6, #0
 802150e:	42a6      	cmp	r6, r4
 8021510:	d105      	bne.n	802151e <__libc_init_array+0x2e>
 8021512:	bd70      	pop	{r4, r5, r6, pc}
 8021514:	f855 3b04 	ldr.w	r3, [r5], #4
 8021518:	4798      	blx	r3
 802151a:	3601      	adds	r6, #1
 802151c:	e7ee      	b.n	80214fc <__libc_init_array+0xc>
 802151e:	f855 3b04 	ldr.w	r3, [r5], #4
 8021522:	4798      	blx	r3
 8021524:	3601      	adds	r6, #1
 8021526:	e7f2      	b.n	802150e <__libc_init_array+0x1e>
 8021528:	0802b59c 	.word	0x0802b59c
 802152c:	0802b59c 	.word	0x0802b59c
 8021530:	0802b59c 	.word	0x0802b59c
 8021534:	0802b5b0 	.word	0x0802b5b0

08021538 <localtime>:
 8021538:	b538      	push	{r3, r4, r5, lr}
 802153a:	4b0b      	ldr	r3, [pc, #44]	; (8021568 <localtime+0x30>)
 802153c:	681d      	ldr	r5, [r3, #0]
 802153e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8021540:	4604      	mov	r4, r0
 8021542:	b953      	cbnz	r3, 802155a <localtime+0x22>
 8021544:	2024      	movs	r0, #36	; 0x24
 8021546:	f000 f975 	bl	8021834 <malloc>
 802154a:	4602      	mov	r2, r0
 802154c:	63e8      	str	r0, [r5, #60]	; 0x3c
 802154e:	b920      	cbnz	r0, 802155a <localtime+0x22>
 8021550:	4b06      	ldr	r3, [pc, #24]	; (802156c <localtime+0x34>)
 8021552:	4807      	ldr	r0, [pc, #28]	; (8021570 <localtime+0x38>)
 8021554:	2132      	movs	r1, #50	; 0x32
 8021556:	f001 fde1 	bl	802311c <__assert_func>
 802155a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 802155c:	4620      	mov	r0, r4
 802155e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021562:	f000 b807 	b.w	8021574 <localtime_r>
 8021566:	bf00      	nop
 8021568:	20000108 	.word	0x20000108
 802156c:	0802b008 	.word	0x0802b008
 8021570:	0802b01f 	.word	0x0802b01f

08021574 <localtime_r>:
 8021574:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8021578:	4607      	mov	r7, r0
 802157a:	9101      	str	r1, [sp, #4]
 802157c:	f001 fe98 	bl	80232b0 <__gettzinfo>
 8021580:	9901      	ldr	r1, [sp, #4]
 8021582:	4680      	mov	r8, r0
 8021584:	4638      	mov	r0, r7
 8021586:	f001 fe97 	bl	80232b8 <gmtime_r>
 802158a:	6943      	ldr	r3, [r0, #20]
 802158c:	079a      	lsls	r2, r3, #30
 802158e:	4604      	mov	r4, r0
 8021590:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8021594:	d105      	bne.n	80215a2 <localtime_r+0x2e>
 8021596:	2264      	movs	r2, #100	; 0x64
 8021598:	fb96 f3f2 	sdiv	r3, r6, r2
 802159c:	fb02 6313 	mls	r3, r2, r3, r6
 80215a0:	bb7b      	cbnz	r3, 8021602 <localtime_r+0x8e>
 80215a2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80215a6:	fb96 f5f3 	sdiv	r5, r6, r3
 80215aa:	fb03 6515 	mls	r5, r3, r5, r6
 80215ae:	fab5 f585 	clz	r5, r5
 80215b2:	096d      	lsrs	r5, r5, #5
 80215b4:	4b68      	ldr	r3, [pc, #416]	; (8021758 <localtime_r+0x1e4>)
 80215b6:	2230      	movs	r2, #48	; 0x30
 80215b8:	fb02 3505 	mla	r5, r2, r5, r3
 80215bc:	f001 faae 	bl	8022b1c <__tz_lock>
 80215c0:	f001 fab8 	bl	8022b34 <_tzset_unlocked>
 80215c4:	4b65      	ldr	r3, [pc, #404]	; (802175c <localtime_r+0x1e8>)
 80215c6:	681b      	ldr	r3, [r3, #0]
 80215c8:	b353      	cbz	r3, 8021620 <localtime_r+0xac>
 80215ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80215ce:	42b3      	cmp	r3, r6
 80215d0:	d119      	bne.n	8021606 <localtime_r+0x92>
 80215d2:	f8d8 1000 	ldr.w	r1, [r8]
 80215d6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80215da:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80215de:	b9d1      	cbnz	r1, 8021616 <localtime_r+0xa2>
 80215e0:	4296      	cmp	r6, r2
 80215e2:	eb77 0303 	sbcs.w	r3, r7, r3
 80215e6:	da23      	bge.n	8021630 <localtime_r+0xbc>
 80215e8:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80215ec:	4296      	cmp	r6, r2
 80215ee:	eb77 0303 	sbcs.w	r3, r7, r3
 80215f2:	bfb4      	ite	lt
 80215f4:	2301      	movlt	r3, #1
 80215f6:	2300      	movge	r3, #0
 80215f8:	6223      	str	r3, [r4, #32]
 80215fa:	db1b      	blt.n	8021634 <localtime_r+0xc0>
 80215fc:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8021600:	e01a      	b.n	8021638 <localtime_r+0xc4>
 8021602:	2501      	movs	r5, #1
 8021604:	e7d6      	b.n	80215b4 <localtime_r+0x40>
 8021606:	4630      	mov	r0, r6
 8021608:	f001 f9e0 	bl	80229cc <__tzcalc_limits>
 802160c:	2800      	cmp	r0, #0
 802160e:	d1e0      	bne.n	80215d2 <localtime_r+0x5e>
 8021610:	f04f 33ff 	mov.w	r3, #4294967295
 8021614:	e004      	b.n	8021620 <localtime_r+0xac>
 8021616:	4296      	cmp	r6, r2
 8021618:	eb77 0303 	sbcs.w	r3, r7, r3
 802161c:	da02      	bge.n	8021624 <localtime_r+0xb0>
 802161e:	2300      	movs	r3, #0
 8021620:	6223      	str	r3, [r4, #32]
 8021622:	e7eb      	b.n	80215fc <localtime_r+0x88>
 8021624:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8021628:	4296      	cmp	r6, r2
 802162a:	eb77 0303 	sbcs.w	r3, r7, r3
 802162e:	daf6      	bge.n	802161e <localtime_r+0xaa>
 8021630:	2301      	movs	r3, #1
 8021632:	6223      	str	r3, [r4, #32]
 8021634:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8021638:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 802163c:	203c      	movs	r0, #60	; 0x3c
 802163e:	fb91 f6f3 	sdiv	r6, r1, r3
 8021642:	fb03 1316 	mls	r3, r3, r6, r1
 8021646:	6861      	ldr	r1, [r4, #4]
 8021648:	fb93 f2f0 	sdiv	r2, r3, r0
 802164c:	fb00 3012 	mls	r0, r0, r2, r3
 8021650:	6823      	ldr	r3, [r4, #0]
 8021652:	1a89      	subs	r1, r1, r2
 8021654:	68a2      	ldr	r2, [r4, #8]
 8021656:	6061      	str	r1, [r4, #4]
 8021658:	1a1b      	subs	r3, r3, r0
 802165a:	1b92      	subs	r2, r2, r6
 802165c:	2b3b      	cmp	r3, #59	; 0x3b
 802165e:	6023      	str	r3, [r4, #0]
 8021660:	60a2      	str	r2, [r4, #8]
 8021662:	dd35      	ble.n	80216d0 <localtime_r+0x15c>
 8021664:	3101      	adds	r1, #1
 8021666:	6061      	str	r1, [r4, #4]
 8021668:	3b3c      	subs	r3, #60	; 0x3c
 802166a:	6023      	str	r3, [r4, #0]
 802166c:	6863      	ldr	r3, [r4, #4]
 802166e:	2b3b      	cmp	r3, #59	; 0x3b
 8021670:	dd34      	ble.n	80216dc <localtime_r+0x168>
 8021672:	3201      	adds	r2, #1
 8021674:	60a2      	str	r2, [r4, #8]
 8021676:	3b3c      	subs	r3, #60	; 0x3c
 8021678:	6063      	str	r3, [r4, #4]
 802167a:	68a3      	ldr	r3, [r4, #8]
 802167c:	2b17      	cmp	r3, #23
 802167e:	dd33      	ble.n	80216e8 <localtime_r+0x174>
 8021680:	69e2      	ldr	r2, [r4, #28]
 8021682:	3201      	adds	r2, #1
 8021684:	61e2      	str	r2, [r4, #28]
 8021686:	69a2      	ldr	r2, [r4, #24]
 8021688:	3201      	adds	r2, #1
 802168a:	2a06      	cmp	r2, #6
 802168c:	bfc8      	it	gt
 802168e:	2200      	movgt	r2, #0
 8021690:	61a2      	str	r2, [r4, #24]
 8021692:	68e2      	ldr	r2, [r4, #12]
 8021694:	3b18      	subs	r3, #24
 8021696:	3201      	adds	r2, #1
 8021698:	60a3      	str	r3, [r4, #8]
 802169a:	6923      	ldr	r3, [r4, #16]
 802169c:	60e2      	str	r2, [r4, #12]
 802169e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80216a2:	428a      	cmp	r2, r1
 80216a4:	dd0e      	ble.n	80216c4 <localtime_r+0x150>
 80216a6:	2b0b      	cmp	r3, #11
 80216a8:	eba2 0201 	sub.w	r2, r2, r1
 80216ac:	60e2      	str	r2, [r4, #12]
 80216ae:	f103 0201 	add.w	r2, r3, #1
 80216b2:	bf09      	itett	eq
 80216b4:	6963      	ldreq	r3, [r4, #20]
 80216b6:	6122      	strne	r2, [r4, #16]
 80216b8:	2200      	moveq	r2, #0
 80216ba:	3301      	addeq	r3, #1
 80216bc:	bf02      	ittt	eq
 80216be:	6122      	streq	r2, [r4, #16]
 80216c0:	6163      	streq	r3, [r4, #20]
 80216c2:	61e2      	streq	r2, [r4, #28]
 80216c4:	f001 fa30 	bl	8022b28 <__tz_unlock>
 80216c8:	4620      	mov	r0, r4
 80216ca:	b002      	add	sp, #8
 80216cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80216d0:	2b00      	cmp	r3, #0
 80216d2:	dacb      	bge.n	802166c <localtime_r+0xf8>
 80216d4:	3901      	subs	r1, #1
 80216d6:	6061      	str	r1, [r4, #4]
 80216d8:	333c      	adds	r3, #60	; 0x3c
 80216da:	e7c6      	b.n	802166a <localtime_r+0xf6>
 80216dc:	2b00      	cmp	r3, #0
 80216de:	dacc      	bge.n	802167a <localtime_r+0x106>
 80216e0:	3a01      	subs	r2, #1
 80216e2:	60a2      	str	r2, [r4, #8]
 80216e4:	333c      	adds	r3, #60	; 0x3c
 80216e6:	e7c7      	b.n	8021678 <localtime_r+0x104>
 80216e8:	2b00      	cmp	r3, #0
 80216ea:	daeb      	bge.n	80216c4 <localtime_r+0x150>
 80216ec:	69e2      	ldr	r2, [r4, #28]
 80216ee:	3a01      	subs	r2, #1
 80216f0:	61e2      	str	r2, [r4, #28]
 80216f2:	69a2      	ldr	r2, [r4, #24]
 80216f4:	3a01      	subs	r2, #1
 80216f6:	bf48      	it	mi
 80216f8:	2206      	movmi	r2, #6
 80216fa:	61a2      	str	r2, [r4, #24]
 80216fc:	68e2      	ldr	r2, [r4, #12]
 80216fe:	3318      	adds	r3, #24
 8021700:	3a01      	subs	r2, #1
 8021702:	60e2      	str	r2, [r4, #12]
 8021704:	60a3      	str	r3, [r4, #8]
 8021706:	2a00      	cmp	r2, #0
 8021708:	d1dc      	bne.n	80216c4 <localtime_r+0x150>
 802170a:	6923      	ldr	r3, [r4, #16]
 802170c:	3b01      	subs	r3, #1
 802170e:	d405      	bmi.n	802171c <localtime_r+0x1a8>
 8021710:	6123      	str	r3, [r4, #16]
 8021712:	6923      	ldr	r3, [r4, #16]
 8021714:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8021718:	60e3      	str	r3, [r4, #12]
 802171a:	e7d3      	b.n	80216c4 <localtime_r+0x150>
 802171c:	230b      	movs	r3, #11
 802171e:	6123      	str	r3, [r4, #16]
 8021720:	6963      	ldr	r3, [r4, #20]
 8021722:	1e5a      	subs	r2, r3, #1
 8021724:	6162      	str	r2, [r4, #20]
 8021726:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 802172a:	0793      	lsls	r3, r2, #30
 802172c:	d105      	bne.n	802173a <localtime_r+0x1c6>
 802172e:	2164      	movs	r1, #100	; 0x64
 8021730:	fb92 f3f1 	sdiv	r3, r2, r1
 8021734:	fb01 2313 	mls	r3, r1, r3, r2
 8021738:	b963      	cbnz	r3, 8021754 <localtime_r+0x1e0>
 802173a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 802173e:	fb92 f3f1 	sdiv	r3, r2, r1
 8021742:	fb01 2313 	mls	r3, r1, r3, r2
 8021746:	fab3 f383 	clz	r3, r3
 802174a:	095b      	lsrs	r3, r3, #5
 802174c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8021750:	61e3      	str	r3, [r4, #28]
 8021752:	e7de      	b.n	8021712 <localtime_r+0x19e>
 8021754:	2301      	movs	r3, #1
 8021756:	e7f9      	b.n	802174c <localtime_r+0x1d8>
 8021758:	0802b080 	.word	0x0802b080
 802175c:	20000fac 	.word	0x20000fac

08021760 <__retarget_lock_init_recursive>:
 8021760:	4770      	bx	lr

08021762 <__retarget_lock_close_recursive>:
 8021762:	4770      	bx	lr

08021764 <__retarget_lock_acquire>:
 8021764:	4770      	bx	lr

08021766 <__retarget_lock_acquire_recursive>:
 8021766:	4770      	bx	lr

08021768 <__retarget_lock_release>:
 8021768:	4770      	bx	lr

0802176a <__retarget_lock_release_recursive>:
 802176a:	4770      	bx	lr

0802176c <__swhatbuf_r>:
 802176c:	b570      	push	{r4, r5, r6, lr}
 802176e:	460e      	mov	r6, r1
 8021770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021774:	2900      	cmp	r1, #0
 8021776:	b096      	sub	sp, #88	; 0x58
 8021778:	4614      	mov	r4, r2
 802177a:	461d      	mov	r5, r3
 802177c:	da07      	bge.n	802178e <__swhatbuf_r+0x22>
 802177e:	2300      	movs	r3, #0
 8021780:	602b      	str	r3, [r5, #0]
 8021782:	89b3      	ldrh	r3, [r6, #12]
 8021784:	061a      	lsls	r2, r3, #24
 8021786:	d410      	bmi.n	80217aa <__swhatbuf_r+0x3e>
 8021788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802178c:	e00e      	b.n	80217ac <__swhatbuf_r+0x40>
 802178e:	466a      	mov	r2, sp
 8021790:	f001 fd3a 	bl	8023208 <_fstat_r>
 8021794:	2800      	cmp	r0, #0
 8021796:	dbf2      	blt.n	802177e <__swhatbuf_r+0x12>
 8021798:	9a01      	ldr	r2, [sp, #4]
 802179a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802179e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80217a2:	425a      	negs	r2, r3
 80217a4:	415a      	adcs	r2, r3
 80217a6:	602a      	str	r2, [r5, #0]
 80217a8:	e7ee      	b.n	8021788 <__swhatbuf_r+0x1c>
 80217aa:	2340      	movs	r3, #64	; 0x40
 80217ac:	2000      	movs	r0, #0
 80217ae:	6023      	str	r3, [r4, #0]
 80217b0:	b016      	add	sp, #88	; 0x58
 80217b2:	bd70      	pop	{r4, r5, r6, pc}

080217b4 <__smakebuf_r>:
 80217b4:	898b      	ldrh	r3, [r1, #12]
 80217b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80217b8:	079d      	lsls	r5, r3, #30
 80217ba:	4606      	mov	r6, r0
 80217bc:	460c      	mov	r4, r1
 80217be:	d507      	bpl.n	80217d0 <__smakebuf_r+0x1c>
 80217c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80217c4:	6023      	str	r3, [r4, #0]
 80217c6:	6123      	str	r3, [r4, #16]
 80217c8:	2301      	movs	r3, #1
 80217ca:	6163      	str	r3, [r4, #20]
 80217cc:	b002      	add	sp, #8
 80217ce:	bd70      	pop	{r4, r5, r6, pc}
 80217d0:	ab01      	add	r3, sp, #4
 80217d2:	466a      	mov	r2, sp
 80217d4:	f7ff ffca 	bl	802176c <__swhatbuf_r>
 80217d8:	9900      	ldr	r1, [sp, #0]
 80217da:	4605      	mov	r5, r0
 80217dc:	4630      	mov	r0, r6
 80217de:	f000 f8af 	bl	8021940 <_malloc_r>
 80217e2:	b948      	cbnz	r0, 80217f8 <__smakebuf_r+0x44>
 80217e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80217e8:	059a      	lsls	r2, r3, #22
 80217ea:	d4ef      	bmi.n	80217cc <__smakebuf_r+0x18>
 80217ec:	f023 0303 	bic.w	r3, r3, #3
 80217f0:	f043 0302 	orr.w	r3, r3, #2
 80217f4:	81a3      	strh	r3, [r4, #12]
 80217f6:	e7e3      	b.n	80217c0 <__smakebuf_r+0xc>
 80217f8:	4b0d      	ldr	r3, [pc, #52]	; (8021830 <__smakebuf_r+0x7c>)
 80217fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80217fc:	89a3      	ldrh	r3, [r4, #12]
 80217fe:	6020      	str	r0, [r4, #0]
 8021800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021804:	81a3      	strh	r3, [r4, #12]
 8021806:	9b00      	ldr	r3, [sp, #0]
 8021808:	6163      	str	r3, [r4, #20]
 802180a:	9b01      	ldr	r3, [sp, #4]
 802180c:	6120      	str	r0, [r4, #16]
 802180e:	b15b      	cbz	r3, 8021828 <__smakebuf_r+0x74>
 8021810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021814:	4630      	mov	r0, r6
 8021816:	f001 fdff 	bl	8023418 <_isatty_r>
 802181a:	b128      	cbz	r0, 8021828 <__smakebuf_r+0x74>
 802181c:	89a3      	ldrh	r3, [r4, #12]
 802181e:	f023 0303 	bic.w	r3, r3, #3
 8021822:	f043 0301 	orr.w	r3, r3, #1
 8021826:	81a3      	strh	r3, [r4, #12]
 8021828:	89a0      	ldrh	r0, [r4, #12]
 802182a:	4305      	orrs	r5, r0
 802182c:	81a5      	strh	r5, [r4, #12]
 802182e:	e7cd      	b.n	80217cc <__smakebuf_r+0x18>
 8021830:	08020f99 	.word	0x08020f99

08021834 <malloc>:
 8021834:	4b02      	ldr	r3, [pc, #8]	; (8021840 <malloc+0xc>)
 8021836:	4601      	mov	r1, r0
 8021838:	6818      	ldr	r0, [r3, #0]
 802183a:	f000 b881 	b.w	8021940 <_malloc_r>
 802183e:	bf00      	nop
 8021840:	20000108 	.word	0x20000108

08021844 <free>:
 8021844:	4b02      	ldr	r3, [pc, #8]	; (8021850 <free+0xc>)
 8021846:	4601      	mov	r1, r0
 8021848:	6818      	ldr	r0, [r3, #0]
 802184a:	f000 b829 	b.w	80218a0 <_free_r>
 802184e:	bf00      	nop
 8021850:	20000108 	.word	0x20000108

08021854 <memcpy>:
 8021854:	440a      	add	r2, r1
 8021856:	4291      	cmp	r1, r2
 8021858:	f100 33ff 	add.w	r3, r0, #4294967295
 802185c:	d100      	bne.n	8021860 <memcpy+0xc>
 802185e:	4770      	bx	lr
 8021860:	b510      	push	{r4, lr}
 8021862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021866:	f803 4f01 	strb.w	r4, [r3, #1]!
 802186a:	4291      	cmp	r1, r2
 802186c:	d1f9      	bne.n	8021862 <memcpy+0xe>
 802186e:	bd10      	pop	{r4, pc}

08021870 <memset>:
 8021870:	4402      	add	r2, r0
 8021872:	4603      	mov	r3, r0
 8021874:	4293      	cmp	r3, r2
 8021876:	d100      	bne.n	802187a <memset+0xa>
 8021878:	4770      	bx	lr
 802187a:	f803 1b01 	strb.w	r1, [r3], #1
 802187e:	e7f9      	b.n	8021874 <memset+0x4>

08021880 <_calloc_r>:
 8021880:	b513      	push	{r0, r1, r4, lr}
 8021882:	434a      	muls	r2, r1
 8021884:	4611      	mov	r1, r2
 8021886:	9201      	str	r2, [sp, #4]
 8021888:	f000 f85a 	bl	8021940 <_malloc_r>
 802188c:	4604      	mov	r4, r0
 802188e:	b118      	cbz	r0, 8021898 <_calloc_r+0x18>
 8021890:	9a01      	ldr	r2, [sp, #4]
 8021892:	2100      	movs	r1, #0
 8021894:	f7ff ffec 	bl	8021870 <memset>
 8021898:	4620      	mov	r0, r4
 802189a:	b002      	add	sp, #8
 802189c:	bd10      	pop	{r4, pc}
	...

080218a0 <_free_r>:
 80218a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80218a2:	2900      	cmp	r1, #0
 80218a4:	d048      	beq.n	8021938 <_free_r+0x98>
 80218a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80218aa:	9001      	str	r0, [sp, #4]
 80218ac:	2b00      	cmp	r3, #0
 80218ae:	f1a1 0404 	sub.w	r4, r1, #4
 80218b2:	bfb8      	it	lt
 80218b4:	18e4      	addlt	r4, r4, r3
 80218b6:	f001 fde7 	bl	8023488 <__malloc_lock>
 80218ba:	4a20      	ldr	r2, [pc, #128]	; (802193c <_free_r+0x9c>)
 80218bc:	9801      	ldr	r0, [sp, #4]
 80218be:	6813      	ldr	r3, [r2, #0]
 80218c0:	4615      	mov	r5, r2
 80218c2:	b933      	cbnz	r3, 80218d2 <_free_r+0x32>
 80218c4:	6063      	str	r3, [r4, #4]
 80218c6:	6014      	str	r4, [r2, #0]
 80218c8:	b003      	add	sp, #12
 80218ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80218ce:	f001 bde1 	b.w	8023494 <__malloc_unlock>
 80218d2:	42a3      	cmp	r3, r4
 80218d4:	d90b      	bls.n	80218ee <_free_r+0x4e>
 80218d6:	6821      	ldr	r1, [r4, #0]
 80218d8:	1862      	adds	r2, r4, r1
 80218da:	4293      	cmp	r3, r2
 80218dc:	bf04      	itt	eq
 80218de:	681a      	ldreq	r2, [r3, #0]
 80218e0:	685b      	ldreq	r3, [r3, #4]
 80218e2:	6063      	str	r3, [r4, #4]
 80218e4:	bf04      	itt	eq
 80218e6:	1852      	addeq	r2, r2, r1
 80218e8:	6022      	streq	r2, [r4, #0]
 80218ea:	602c      	str	r4, [r5, #0]
 80218ec:	e7ec      	b.n	80218c8 <_free_r+0x28>
 80218ee:	461a      	mov	r2, r3
 80218f0:	685b      	ldr	r3, [r3, #4]
 80218f2:	b10b      	cbz	r3, 80218f8 <_free_r+0x58>
 80218f4:	42a3      	cmp	r3, r4
 80218f6:	d9fa      	bls.n	80218ee <_free_r+0x4e>
 80218f8:	6811      	ldr	r1, [r2, #0]
 80218fa:	1855      	adds	r5, r2, r1
 80218fc:	42a5      	cmp	r5, r4
 80218fe:	d10b      	bne.n	8021918 <_free_r+0x78>
 8021900:	6824      	ldr	r4, [r4, #0]
 8021902:	4421      	add	r1, r4
 8021904:	1854      	adds	r4, r2, r1
 8021906:	42a3      	cmp	r3, r4
 8021908:	6011      	str	r1, [r2, #0]
 802190a:	d1dd      	bne.n	80218c8 <_free_r+0x28>
 802190c:	681c      	ldr	r4, [r3, #0]
 802190e:	685b      	ldr	r3, [r3, #4]
 8021910:	6053      	str	r3, [r2, #4]
 8021912:	4421      	add	r1, r4
 8021914:	6011      	str	r1, [r2, #0]
 8021916:	e7d7      	b.n	80218c8 <_free_r+0x28>
 8021918:	d902      	bls.n	8021920 <_free_r+0x80>
 802191a:	230c      	movs	r3, #12
 802191c:	6003      	str	r3, [r0, #0]
 802191e:	e7d3      	b.n	80218c8 <_free_r+0x28>
 8021920:	6825      	ldr	r5, [r4, #0]
 8021922:	1961      	adds	r1, r4, r5
 8021924:	428b      	cmp	r3, r1
 8021926:	bf04      	itt	eq
 8021928:	6819      	ldreq	r1, [r3, #0]
 802192a:	685b      	ldreq	r3, [r3, #4]
 802192c:	6063      	str	r3, [r4, #4]
 802192e:	bf04      	itt	eq
 8021930:	1949      	addeq	r1, r1, r5
 8021932:	6021      	streq	r1, [r4, #0]
 8021934:	6054      	str	r4, [r2, #4]
 8021936:	e7c7      	b.n	80218c8 <_free_r+0x28>
 8021938:	b003      	add	sp, #12
 802193a:	bd30      	pop	{r4, r5, pc}
 802193c:	20000f88 	.word	0x20000f88

08021940 <_malloc_r>:
 8021940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021942:	1ccd      	adds	r5, r1, #3
 8021944:	f025 0503 	bic.w	r5, r5, #3
 8021948:	3508      	adds	r5, #8
 802194a:	2d0c      	cmp	r5, #12
 802194c:	bf38      	it	cc
 802194e:	250c      	movcc	r5, #12
 8021950:	2d00      	cmp	r5, #0
 8021952:	4606      	mov	r6, r0
 8021954:	db01      	blt.n	802195a <_malloc_r+0x1a>
 8021956:	42a9      	cmp	r1, r5
 8021958:	d903      	bls.n	8021962 <_malloc_r+0x22>
 802195a:	230c      	movs	r3, #12
 802195c:	6033      	str	r3, [r6, #0]
 802195e:	2000      	movs	r0, #0
 8021960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021962:	f001 fd91 	bl	8023488 <__malloc_lock>
 8021966:	4921      	ldr	r1, [pc, #132]	; (80219ec <_malloc_r+0xac>)
 8021968:	680a      	ldr	r2, [r1, #0]
 802196a:	4614      	mov	r4, r2
 802196c:	b99c      	cbnz	r4, 8021996 <_malloc_r+0x56>
 802196e:	4f20      	ldr	r7, [pc, #128]	; (80219f0 <_malloc_r+0xb0>)
 8021970:	683b      	ldr	r3, [r7, #0]
 8021972:	b923      	cbnz	r3, 802197e <_malloc_r+0x3e>
 8021974:	4621      	mov	r1, r4
 8021976:	4630      	mov	r0, r6
 8021978:	f000 f8da 	bl	8021b30 <_sbrk_r>
 802197c:	6038      	str	r0, [r7, #0]
 802197e:	4629      	mov	r1, r5
 8021980:	4630      	mov	r0, r6
 8021982:	f000 f8d5 	bl	8021b30 <_sbrk_r>
 8021986:	1c43      	adds	r3, r0, #1
 8021988:	d123      	bne.n	80219d2 <_malloc_r+0x92>
 802198a:	230c      	movs	r3, #12
 802198c:	6033      	str	r3, [r6, #0]
 802198e:	4630      	mov	r0, r6
 8021990:	f001 fd80 	bl	8023494 <__malloc_unlock>
 8021994:	e7e3      	b.n	802195e <_malloc_r+0x1e>
 8021996:	6823      	ldr	r3, [r4, #0]
 8021998:	1b5b      	subs	r3, r3, r5
 802199a:	d417      	bmi.n	80219cc <_malloc_r+0x8c>
 802199c:	2b0b      	cmp	r3, #11
 802199e:	d903      	bls.n	80219a8 <_malloc_r+0x68>
 80219a0:	6023      	str	r3, [r4, #0]
 80219a2:	441c      	add	r4, r3
 80219a4:	6025      	str	r5, [r4, #0]
 80219a6:	e004      	b.n	80219b2 <_malloc_r+0x72>
 80219a8:	6863      	ldr	r3, [r4, #4]
 80219aa:	42a2      	cmp	r2, r4
 80219ac:	bf0c      	ite	eq
 80219ae:	600b      	streq	r3, [r1, #0]
 80219b0:	6053      	strne	r3, [r2, #4]
 80219b2:	4630      	mov	r0, r6
 80219b4:	f001 fd6e 	bl	8023494 <__malloc_unlock>
 80219b8:	f104 000b 	add.w	r0, r4, #11
 80219bc:	1d23      	adds	r3, r4, #4
 80219be:	f020 0007 	bic.w	r0, r0, #7
 80219c2:	1ac2      	subs	r2, r0, r3
 80219c4:	d0cc      	beq.n	8021960 <_malloc_r+0x20>
 80219c6:	1a1b      	subs	r3, r3, r0
 80219c8:	50a3      	str	r3, [r4, r2]
 80219ca:	e7c9      	b.n	8021960 <_malloc_r+0x20>
 80219cc:	4622      	mov	r2, r4
 80219ce:	6864      	ldr	r4, [r4, #4]
 80219d0:	e7cc      	b.n	802196c <_malloc_r+0x2c>
 80219d2:	1cc4      	adds	r4, r0, #3
 80219d4:	f024 0403 	bic.w	r4, r4, #3
 80219d8:	42a0      	cmp	r0, r4
 80219da:	d0e3      	beq.n	80219a4 <_malloc_r+0x64>
 80219dc:	1a21      	subs	r1, r4, r0
 80219de:	4630      	mov	r0, r6
 80219e0:	f000 f8a6 	bl	8021b30 <_sbrk_r>
 80219e4:	3001      	adds	r0, #1
 80219e6:	d1dd      	bne.n	80219a4 <_malloc_r+0x64>
 80219e8:	e7cf      	b.n	802198a <_malloc_r+0x4a>
 80219ea:	bf00      	nop
 80219ec:	20000f88 	.word	0x20000f88
 80219f0:	20000f8c 	.word	0x20000f8c

080219f4 <_open_r>:
 80219f4:	b538      	push	{r3, r4, r5, lr}
 80219f6:	4d07      	ldr	r5, [pc, #28]	; (8021a14 <_open_r+0x20>)
 80219f8:	4604      	mov	r4, r0
 80219fa:	4608      	mov	r0, r1
 80219fc:	4611      	mov	r1, r2
 80219fe:	2200      	movs	r2, #0
 8021a00:	602a      	str	r2, [r5, #0]
 8021a02:	461a      	mov	r2, r3
 8021a04:	f7df fa6c 	bl	8000ee0 <_open>
 8021a08:	1c43      	adds	r3, r0, #1
 8021a0a:	d102      	bne.n	8021a12 <_open_r+0x1e>
 8021a0c:	682b      	ldr	r3, [r5, #0]
 8021a0e:	b103      	cbz	r3, 8021a12 <_open_r+0x1e>
 8021a10:	6023      	str	r3, [r4, #0]
 8021a12:	bd38      	pop	{r3, r4, r5, pc}
 8021a14:	20001054 	.word	0x20001054

08021a18 <putchar>:
 8021a18:	4b09      	ldr	r3, [pc, #36]	; (8021a40 <putchar+0x28>)
 8021a1a:	b513      	push	{r0, r1, r4, lr}
 8021a1c:	681c      	ldr	r4, [r3, #0]
 8021a1e:	4601      	mov	r1, r0
 8021a20:	b134      	cbz	r4, 8021a30 <putchar+0x18>
 8021a22:	69a3      	ldr	r3, [r4, #24]
 8021a24:	b923      	cbnz	r3, 8021a30 <putchar+0x18>
 8021a26:	9001      	str	r0, [sp, #4]
 8021a28:	4620      	mov	r0, r4
 8021a2a:	f7ff fae9 	bl	8021000 <__sinit>
 8021a2e:	9901      	ldr	r1, [sp, #4]
 8021a30:	68a2      	ldr	r2, [r4, #8]
 8021a32:	4620      	mov	r0, r4
 8021a34:	b002      	add	sp, #8
 8021a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021a3a:	f002 b9a1 	b.w	8023d80 <_putc_r>
 8021a3e:	bf00      	nop
 8021a40:	20000108 	.word	0x20000108

08021a44 <srand>:
 8021a44:	b538      	push	{r3, r4, r5, lr}
 8021a46:	4b10      	ldr	r3, [pc, #64]	; (8021a88 <srand+0x44>)
 8021a48:	681d      	ldr	r5, [r3, #0]
 8021a4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8021a4c:	4604      	mov	r4, r0
 8021a4e:	b9b3      	cbnz	r3, 8021a7e <srand+0x3a>
 8021a50:	2018      	movs	r0, #24
 8021a52:	f7ff feef 	bl	8021834 <malloc>
 8021a56:	4602      	mov	r2, r0
 8021a58:	63a8      	str	r0, [r5, #56]	; 0x38
 8021a5a:	b920      	cbnz	r0, 8021a66 <srand+0x22>
 8021a5c:	4b0b      	ldr	r3, [pc, #44]	; (8021a8c <srand+0x48>)
 8021a5e:	480c      	ldr	r0, [pc, #48]	; (8021a90 <srand+0x4c>)
 8021a60:	2142      	movs	r1, #66	; 0x42
 8021a62:	f001 fb5b 	bl	802311c <__assert_func>
 8021a66:	490b      	ldr	r1, [pc, #44]	; (8021a94 <srand+0x50>)
 8021a68:	4b0b      	ldr	r3, [pc, #44]	; (8021a98 <srand+0x54>)
 8021a6a:	e9c0 1300 	strd	r1, r3, [r0]
 8021a6e:	4b0b      	ldr	r3, [pc, #44]	; (8021a9c <srand+0x58>)
 8021a70:	6083      	str	r3, [r0, #8]
 8021a72:	230b      	movs	r3, #11
 8021a74:	8183      	strh	r3, [r0, #12]
 8021a76:	2100      	movs	r1, #0
 8021a78:	2001      	movs	r0, #1
 8021a7a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021a7e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8021a80:	2200      	movs	r2, #0
 8021a82:	611c      	str	r4, [r3, #16]
 8021a84:	615a      	str	r2, [r3, #20]
 8021a86:	bd38      	pop	{r3, r4, r5, pc}
 8021a88:	20000108 	.word	0x20000108
 8021a8c:	0802b008 	.word	0x0802b008
 8021a90:	0802b0e0 	.word	0x0802b0e0
 8021a94:	abcd330e 	.word	0xabcd330e
 8021a98:	e66d1234 	.word	0xe66d1234
 8021a9c:	0005deec 	.word	0x0005deec

08021aa0 <rand>:
 8021aa0:	4b17      	ldr	r3, [pc, #92]	; (8021b00 <rand+0x60>)
 8021aa2:	b510      	push	{r4, lr}
 8021aa4:	681c      	ldr	r4, [r3, #0]
 8021aa6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021aa8:	b9b3      	cbnz	r3, 8021ad8 <rand+0x38>
 8021aaa:	2018      	movs	r0, #24
 8021aac:	f7ff fec2 	bl	8021834 <malloc>
 8021ab0:	63a0      	str	r0, [r4, #56]	; 0x38
 8021ab2:	b928      	cbnz	r0, 8021ac0 <rand+0x20>
 8021ab4:	4602      	mov	r2, r0
 8021ab6:	4b13      	ldr	r3, [pc, #76]	; (8021b04 <rand+0x64>)
 8021ab8:	4813      	ldr	r0, [pc, #76]	; (8021b08 <rand+0x68>)
 8021aba:	214e      	movs	r1, #78	; 0x4e
 8021abc:	f001 fb2e 	bl	802311c <__assert_func>
 8021ac0:	4a12      	ldr	r2, [pc, #72]	; (8021b0c <rand+0x6c>)
 8021ac2:	4b13      	ldr	r3, [pc, #76]	; (8021b10 <rand+0x70>)
 8021ac4:	e9c0 2300 	strd	r2, r3, [r0]
 8021ac8:	4b12      	ldr	r3, [pc, #72]	; (8021b14 <rand+0x74>)
 8021aca:	6083      	str	r3, [r0, #8]
 8021acc:	230b      	movs	r3, #11
 8021ace:	8183      	strh	r3, [r0, #12]
 8021ad0:	2201      	movs	r2, #1
 8021ad2:	2300      	movs	r3, #0
 8021ad4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8021ad8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021ada:	480f      	ldr	r0, [pc, #60]	; (8021b18 <rand+0x78>)
 8021adc:	690a      	ldr	r2, [r1, #16]
 8021ade:	694b      	ldr	r3, [r1, #20]
 8021ae0:	4c0e      	ldr	r4, [pc, #56]	; (8021b1c <rand+0x7c>)
 8021ae2:	4350      	muls	r0, r2
 8021ae4:	fb04 0003 	mla	r0, r4, r3, r0
 8021ae8:	fba2 3404 	umull	r3, r4, r2, r4
 8021aec:	1c5a      	adds	r2, r3, #1
 8021aee:	4404      	add	r4, r0
 8021af0:	f144 0000 	adc.w	r0, r4, #0
 8021af4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8021af8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8021afc:	bd10      	pop	{r4, pc}
 8021afe:	bf00      	nop
 8021b00:	20000108 	.word	0x20000108
 8021b04:	0802b008 	.word	0x0802b008
 8021b08:	0802b0e0 	.word	0x0802b0e0
 8021b0c:	abcd330e 	.word	0xabcd330e
 8021b10:	e66d1234 	.word	0xe66d1234
 8021b14:	0005deec 	.word	0x0005deec
 8021b18:	5851f42d 	.word	0x5851f42d
 8021b1c:	4c957f2d 	.word	0x4c957f2d

08021b20 <realloc>:
 8021b20:	4b02      	ldr	r3, [pc, #8]	; (8021b2c <realloc+0xc>)
 8021b22:	460a      	mov	r2, r1
 8021b24:	4601      	mov	r1, r0
 8021b26:	6818      	ldr	r0, [r3, #0]
 8021b28:	f001 bcba 	b.w	80234a0 <_realloc_r>
 8021b2c:	20000108 	.word	0x20000108

08021b30 <_sbrk_r>:
 8021b30:	b538      	push	{r3, r4, r5, lr}
 8021b32:	4d06      	ldr	r5, [pc, #24]	; (8021b4c <_sbrk_r+0x1c>)
 8021b34:	2300      	movs	r3, #0
 8021b36:	4604      	mov	r4, r0
 8021b38:	4608      	mov	r0, r1
 8021b3a:	602b      	str	r3, [r5, #0]
 8021b3c:	f7df f9de 	bl	8000efc <_sbrk>
 8021b40:	1c43      	adds	r3, r0, #1
 8021b42:	d102      	bne.n	8021b4a <_sbrk_r+0x1a>
 8021b44:	682b      	ldr	r3, [r5, #0]
 8021b46:	b103      	cbz	r3, 8021b4a <_sbrk_r+0x1a>
 8021b48:	6023      	str	r3, [r4, #0]
 8021b4a:	bd38      	pop	{r3, r4, r5, pc}
 8021b4c:	20001054 	.word	0x20001054

08021b50 <_raise_r>:
 8021b50:	291f      	cmp	r1, #31
 8021b52:	b538      	push	{r3, r4, r5, lr}
 8021b54:	4604      	mov	r4, r0
 8021b56:	460d      	mov	r5, r1
 8021b58:	d904      	bls.n	8021b64 <_raise_r+0x14>
 8021b5a:	2316      	movs	r3, #22
 8021b5c:	6003      	str	r3, [r0, #0]
 8021b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8021b62:	bd38      	pop	{r3, r4, r5, pc}
 8021b64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8021b66:	b112      	cbz	r2, 8021b6e <_raise_r+0x1e>
 8021b68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021b6c:	b94b      	cbnz	r3, 8021b82 <_raise_r+0x32>
 8021b6e:	4620      	mov	r0, r4
 8021b70:	f000 f830 	bl	8021bd4 <_getpid_r>
 8021b74:	462a      	mov	r2, r5
 8021b76:	4601      	mov	r1, r0
 8021b78:	4620      	mov	r0, r4
 8021b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021b7e:	f000 b817 	b.w	8021bb0 <_kill_r>
 8021b82:	2b01      	cmp	r3, #1
 8021b84:	d00a      	beq.n	8021b9c <_raise_r+0x4c>
 8021b86:	1c59      	adds	r1, r3, #1
 8021b88:	d103      	bne.n	8021b92 <_raise_r+0x42>
 8021b8a:	2316      	movs	r3, #22
 8021b8c:	6003      	str	r3, [r0, #0]
 8021b8e:	2001      	movs	r0, #1
 8021b90:	e7e7      	b.n	8021b62 <_raise_r+0x12>
 8021b92:	2400      	movs	r4, #0
 8021b94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021b98:	4628      	mov	r0, r5
 8021b9a:	4798      	blx	r3
 8021b9c:	2000      	movs	r0, #0
 8021b9e:	e7e0      	b.n	8021b62 <_raise_r+0x12>

08021ba0 <raise>:
 8021ba0:	4b02      	ldr	r3, [pc, #8]	; (8021bac <raise+0xc>)
 8021ba2:	4601      	mov	r1, r0
 8021ba4:	6818      	ldr	r0, [r3, #0]
 8021ba6:	f7ff bfd3 	b.w	8021b50 <_raise_r>
 8021baa:	bf00      	nop
 8021bac:	20000108 	.word	0x20000108

08021bb0 <_kill_r>:
 8021bb0:	b538      	push	{r3, r4, r5, lr}
 8021bb2:	4d07      	ldr	r5, [pc, #28]	; (8021bd0 <_kill_r+0x20>)
 8021bb4:	2300      	movs	r3, #0
 8021bb6:	4604      	mov	r4, r0
 8021bb8:	4608      	mov	r0, r1
 8021bba:	4611      	mov	r1, r2
 8021bbc:	602b      	str	r3, [r5, #0]
 8021bbe:	f7df f908 	bl	8000dd2 <_kill>
 8021bc2:	1c43      	adds	r3, r0, #1
 8021bc4:	d102      	bne.n	8021bcc <_kill_r+0x1c>
 8021bc6:	682b      	ldr	r3, [r5, #0]
 8021bc8:	b103      	cbz	r3, 8021bcc <_kill_r+0x1c>
 8021bca:	6023      	str	r3, [r4, #0]
 8021bcc:	bd38      	pop	{r3, r4, r5, pc}
 8021bce:	bf00      	nop
 8021bd0:	20001054 	.word	0x20001054

08021bd4 <_getpid_r>:
 8021bd4:	f7df b8f5 	b.w	8000dc2 <_getpid>

08021bd8 <siprintf>:
 8021bd8:	b40e      	push	{r1, r2, r3}
 8021bda:	b500      	push	{lr}
 8021bdc:	b09c      	sub	sp, #112	; 0x70
 8021bde:	ab1d      	add	r3, sp, #116	; 0x74
 8021be0:	9002      	str	r0, [sp, #8]
 8021be2:	9006      	str	r0, [sp, #24]
 8021be4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021be8:	4809      	ldr	r0, [pc, #36]	; (8021c10 <siprintf+0x38>)
 8021bea:	9107      	str	r1, [sp, #28]
 8021bec:	9104      	str	r1, [sp, #16]
 8021bee:	4909      	ldr	r1, [pc, #36]	; (8021c14 <siprintf+0x3c>)
 8021bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8021bf4:	9105      	str	r1, [sp, #20]
 8021bf6:	6800      	ldr	r0, [r0, #0]
 8021bf8:	9301      	str	r3, [sp, #4]
 8021bfa:	a902      	add	r1, sp, #8
 8021bfc:	f001 fcd2 	bl	80235a4 <_svfiprintf_r>
 8021c00:	9b02      	ldr	r3, [sp, #8]
 8021c02:	2200      	movs	r2, #0
 8021c04:	701a      	strb	r2, [r3, #0]
 8021c06:	b01c      	add	sp, #112	; 0x70
 8021c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8021c0c:	b003      	add	sp, #12
 8021c0e:	4770      	bx	lr
 8021c10:	20000108 	.word	0x20000108
 8021c14:	ffff0208 	.word	0xffff0208

08021c18 <__sread>:
 8021c18:	b510      	push	{r4, lr}
 8021c1a:	460c      	mov	r4, r1
 8021c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021c20:	f002 f8f6 	bl	8023e10 <_read_r>
 8021c24:	2800      	cmp	r0, #0
 8021c26:	bfab      	itete	ge
 8021c28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8021c2a:	89a3      	ldrhlt	r3, [r4, #12]
 8021c2c:	181b      	addge	r3, r3, r0
 8021c2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8021c32:	bfac      	ite	ge
 8021c34:	6563      	strge	r3, [r4, #84]	; 0x54
 8021c36:	81a3      	strhlt	r3, [r4, #12]
 8021c38:	bd10      	pop	{r4, pc}

08021c3a <__seofread>:
 8021c3a:	2000      	movs	r0, #0
 8021c3c:	4770      	bx	lr

08021c3e <__swrite>:
 8021c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021c42:	461f      	mov	r7, r3
 8021c44:	898b      	ldrh	r3, [r1, #12]
 8021c46:	05db      	lsls	r3, r3, #23
 8021c48:	4605      	mov	r5, r0
 8021c4a:	460c      	mov	r4, r1
 8021c4c:	4616      	mov	r6, r2
 8021c4e:	d505      	bpl.n	8021c5c <__swrite+0x1e>
 8021c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021c54:	2302      	movs	r3, #2
 8021c56:	2200      	movs	r2, #0
 8021c58:	f001 fbf2 	bl	8023440 <_lseek_r>
 8021c5c:	89a3      	ldrh	r3, [r4, #12]
 8021c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021c62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021c66:	81a3      	strh	r3, [r4, #12]
 8021c68:	4632      	mov	r2, r6
 8021c6a:	463b      	mov	r3, r7
 8021c6c:	4628      	mov	r0, r5
 8021c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021c72:	f001 b96d 	b.w	8022f50 <_write_r>

08021c76 <__sseek>:
 8021c76:	b510      	push	{r4, lr}
 8021c78:	460c      	mov	r4, r1
 8021c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021c7e:	f001 fbdf 	bl	8023440 <_lseek_r>
 8021c82:	1c43      	adds	r3, r0, #1
 8021c84:	89a3      	ldrh	r3, [r4, #12]
 8021c86:	bf15      	itete	ne
 8021c88:	6560      	strne	r0, [r4, #84]	; 0x54
 8021c8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021c8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8021c92:	81a3      	strheq	r3, [r4, #12]
 8021c94:	bf18      	it	ne
 8021c96:	81a3      	strhne	r3, [r4, #12]
 8021c98:	bd10      	pop	{r4, pc}

08021c9a <__sclose>:
 8021c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021c9e:	f001 ba5b 	b.w	8023158 <_close_r>

08021ca2 <strcpy>:
 8021ca2:	4603      	mov	r3, r0
 8021ca4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021ca8:	f803 2b01 	strb.w	r2, [r3], #1
 8021cac:	2a00      	cmp	r2, #0
 8021cae:	d1f9      	bne.n	8021ca4 <strcpy+0x2>
 8021cb0:	4770      	bx	lr
	...

08021cb4 <iso_year_adjust>:
 8021cb4:	6941      	ldr	r1, [r0, #20]
 8021cb6:	2900      	cmp	r1, #0
 8021cb8:	f240 736c 	movw	r3, #1900	; 0x76c
 8021cbc:	bfa8      	it	ge
 8021cbe:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8021cc2:	18ca      	adds	r2, r1, r3
 8021cc4:	078b      	lsls	r3, r1, #30
 8021cc6:	d105      	bne.n	8021cd4 <iso_year_adjust+0x20>
 8021cc8:	2164      	movs	r1, #100	; 0x64
 8021cca:	fb92 f3f1 	sdiv	r3, r2, r1
 8021cce:	fb01 2313 	mls	r3, r1, r3, r2
 8021cd2:	b9db      	cbnz	r3, 8021d0c <iso_year_adjust+0x58>
 8021cd4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8021cd8:	fb92 f3f1 	sdiv	r3, r2, r1
 8021cdc:	fb01 2313 	mls	r3, r1, r3, r2
 8021ce0:	fab3 f383 	clz	r3, r3
 8021ce4:	095b      	lsrs	r3, r3, #5
 8021ce6:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8021cea:	0040      	lsls	r0, r0, #1
 8021cec:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8021cf0:	4418      	add	r0, r3
 8021cf2:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8021cf6:	4298      	cmp	r0, r3
 8021cf8:	d03a      	beq.n	8021d70 <iso_year_adjust+0xbc>
 8021cfa:	dc21      	bgt.n	8021d40 <iso_year_adjust+0x8c>
 8021cfc:	2801      	cmp	r0, #1
 8021cfe:	dc1a      	bgt.n	8021d36 <iso_year_adjust+0x82>
 8021d00:	2800      	cmp	r0, #0
 8021d02:	bfb4      	ite	lt
 8021d04:	2000      	movlt	r0, #0
 8021d06:	f04f 30ff 	movge.w	r0, #4294967295
 8021d0a:	4770      	bx	lr
 8021d0c:	2301      	movs	r3, #1
 8021d0e:	e7ea      	b.n	8021ce6 <iso_year_adjust+0x32>
 8021d10:	2817      	cmp	r0, #23
 8021d12:	d813      	bhi.n	8021d3c <iso_year_adjust+0x88>
 8021d14:	e8df f000 	tbb	[pc, r0]
 8021d18:	0c0c0c0c 	.word	0x0c0c0c0c
 8021d1c:	0c0c1212 	.word	0x0c0c1212
 8021d20:	12121212 	.word	0x12121212
 8021d24:	12121212 	.word	0x12121212
 8021d28:	0c0c1212 	.word	0x0c0c1212
 8021d2c:	0c0c1212 	.word	0x0c0c1212
 8021d30:	f04f 30ff 	mov.w	r0, #4294967295
 8021d34:	4770      	bx	lr
 8021d36:	380a      	subs	r0, #10
 8021d38:	2817      	cmp	r0, #23
 8021d3a:	d9e9      	bls.n	8021d10 <iso_year_adjust+0x5c>
 8021d3c:	2000      	movs	r0, #0
 8021d3e:	4770      	bx	lr
 8021d40:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8021d44:	4298      	cmp	r0, r3
 8021d46:	dc06      	bgt.n	8021d56 <iso_year_adjust+0xa2>
 8021d48:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8021d4c:	4298      	cmp	r0, r3
 8021d4e:	bfd4      	ite	le
 8021d50:	2000      	movle	r0, #0
 8021d52:	2001      	movgt	r0, #1
 8021d54:	4770      	bx	lr
 8021d56:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8021d5a:	3802      	subs	r0, #2
 8021d5c:	2815      	cmp	r0, #21
 8021d5e:	d8ed      	bhi.n	8021d3c <iso_year_adjust+0x88>
 8021d60:	2301      	movs	r3, #1
 8021d62:	4083      	lsls	r3, r0
 8021d64:	4803      	ldr	r0, [pc, #12]	; (8021d74 <iso_year_adjust+0xc0>)
 8021d66:	4018      	ands	r0, r3
 8021d68:	3800      	subs	r0, #0
 8021d6a:	bf18      	it	ne
 8021d6c:	2001      	movne	r0, #1
 8021d6e:	4770      	bx	lr
 8021d70:	2001      	movs	r0, #1
 8021d72:	4770      	bx	lr
 8021d74:	002a001f 	.word	0x002a001f

08021d78 <__strftime>:
 8021d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d7c:	b091      	sub	sp, #68	; 0x44
 8021d7e:	461d      	mov	r5, r3
 8021d80:	2300      	movs	r3, #0
 8021d82:	4681      	mov	r9, r0
 8021d84:	4688      	mov	r8, r1
 8021d86:	9304      	str	r3, [sp, #16]
 8021d88:	461c      	mov	r4, r3
 8021d8a:	7813      	ldrb	r3, [r2, #0]
 8021d8c:	2b00      	cmp	r3, #0
 8021d8e:	f000 84d1 	beq.w	8022734 <__strftime+0x9bc>
 8021d92:	2b25      	cmp	r3, #37	; 0x25
 8021d94:	d11b      	bne.n	8021dce <__strftime+0x56>
 8021d96:	7857      	ldrb	r7, [r2, #1]
 8021d98:	2f30      	cmp	r7, #48	; 0x30
 8021d9a:	d024      	beq.n	8021de6 <__strftime+0x6e>
 8021d9c:	2f2b      	cmp	r7, #43	; 0x2b
 8021d9e:	d022      	beq.n	8021de6 <__strftime+0x6e>
 8021da0:	f102 0b01 	add.w	fp, r2, #1
 8021da4:	2700      	movs	r7, #0
 8021da6:	f89b 3000 	ldrb.w	r3, [fp]
 8021daa:	3b31      	subs	r3, #49	; 0x31
 8021dac:	2b08      	cmp	r3, #8
 8021dae:	d81d      	bhi.n	8021dec <__strftime+0x74>
 8021db0:	4658      	mov	r0, fp
 8021db2:	220a      	movs	r2, #10
 8021db4:	a908      	add	r1, sp, #32
 8021db6:	f000 fdff 	bl	80229b8 <strtoul>
 8021dba:	f8dd b020 	ldr.w	fp, [sp, #32]
 8021dbe:	4606      	mov	r6, r0
 8021dc0:	f89b 3000 	ldrb.w	r3, [fp]
 8021dc4:	2b45      	cmp	r3, #69	; 0x45
 8021dc6:	d113      	bne.n	8021df0 <__strftime+0x78>
 8021dc8:	f10b 0b01 	add.w	fp, fp, #1
 8021dcc:	e012      	b.n	8021df4 <__strftime+0x7c>
 8021dce:	f108 31ff 	add.w	r1, r8, #4294967295
 8021dd2:	42a1      	cmp	r1, r4
 8021dd4:	d802      	bhi.n	8021ddc <__strftime+0x64>
 8021dd6:	2400      	movs	r4, #0
 8021dd8:	f000 bcb2 	b.w	8022740 <__strftime+0x9c8>
 8021ddc:	f809 3004 	strb.w	r3, [r9, r4]
 8021de0:	3201      	adds	r2, #1
 8021de2:	3401      	adds	r4, #1
 8021de4:	e7d1      	b.n	8021d8a <__strftime+0x12>
 8021de6:	f102 0b02 	add.w	fp, r2, #2
 8021dea:	e7dc      	b.n	8021da6 <__strftime+0x2e>
 8021dec:	2600      	movs	r6, #0
 8021dee:	e7e7      	b.n	8021dc0 <__strftime+0x48>
 8021df0:	2b4f      	cmp	r3, #79	; 0x4f
 8021df2:	d0e9      	beq.n	8021dc8 <__strftime+0x50>
 8021df4:	f89b 0000 	ldrb.w	r0, [fp]
 8021df8:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8021dfc:	2b55      	cmp	r3, #85	; 0x55
 8021dfe:	d8ea      	bhi.n	8021dd6 <__strftime+0x5e>
 8021e00:	a201      	add	r2, pc, #4	; (adr r2, 8021e08 <__strftime+0x90>)
 8021e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021e06:	bf00      	nop
 8021e08:	08022727 	.word	0x08022727
 8021e0c:	08021dd7 	.word	0x08021dd7
 8021e10:	08021dd7 	.word	0x08021dd7
 8021e14:	08021dd7 	.word	0x08021dd7
 8021e18:	08021dd7 	.word	0x08021dd7
 8021e1c:	08021dd7 	.word	0x08021dd7
 8021e20:	08021dd7 	.word	0x08021dd7
 8021e24:	08021dd7 	.word	0x08021dd7
 8021e28:	08021dd7 	.word	0x08021dd7
 8021e2c:	08021dd7 	.word	0x08021dd7
 8021e30:	08021dd7 	.word	0x08021dd7
 8021e34:	08021dd7 	.word	0x08021dd7
 8021e38:	08021dd7 	.word	0x08021dd7
 8021e3c:	08021dd7 	.word	0x08021dd7
 8021e40:	08021dd7 	.word	0x08021dd7
 8021e44:	08021dd7 	.word	0x08021dd7
 8021e48:	08021dd7 	.word	0x08021dd7
 8021e4c:	08021dd7 	.word	0x08021dd7
 8021e50:	08021dd7 	.word	0x08021dd7
 8021e54:	08021dd7 	.word	0x08021dd7
 8021e58:	08021dd7 	.word	0x08021dd7
 8021e5c:	08021dd7 	.word	0x08021dd7
 8021e60:	08021dd7 	.word	0x08021dd7
 8021e64:	08021dd7 	.word	0x08021dd7
 8021e68:	08021dd7 	.word	0x08021dd7
 8021e6c:	08021dd7 	.word	0x08021dd7
 8021e70:	08021dd7 	.word	0x08021dd7
 8021e74:	08021dd7 	.word	0x08021dd7
 8021e78:	08021f9f 	.word	0x08021f9f
 8021e7c:	08021ff9 	.word	0x08021ff9
 8021e80:	0802206f 	.word	0x0802206f
 8021e84:	08022109 	.word	0x08022109
 8021e88:	08021dd7 	.word	0x08021dd7
 8021e8c:	08022155 	.word	0x08022155
 8021e90:	08022235 	.word	0x08022235
 8021e94:	08022337 	.word	0x08022337
 8021e98:	08022345 	.word	0x08022345
 8021e9c:	08021dd7 	.word	0x08021dd7
 8021ea0:	08021dd7 	.word	0x08021dd7
 8021ea4:	08021dd7 	.word	0x08021dd7
 8021ea8:	08022375 	.word	0x08022375
 8021eac:	08021dd7 	.word	0x08021dd7
 8021eb0:	08021dd7 	.word	0x08021dd7
 8021eb4:	0802238d 	.word	0x0802238d
 8021eb8:	08021dd7 	.word	0x08021dd7
 8021ebc:	080223db 	.word	0x080223db
 8021ec0:	080224f1 	.word	0x080224f1
 8021ec4:	08022503 	.word	0x08022503
 8021ec8:	0802255b 	.word	0x0802255b
 8021ecc:	0802256b 	.word	0x0802256b
 8021ed0:	080225e1 	.word	0x080225e1
 8021ed4:	08022067 	.word	0x08022067
 8021ed8:	08022615 	.word	0x08022615
 8021edc:	080226d3 	.word	0x080226d3
 8021ee0:	08021dd7 	.word	0x08021dd7
 8021ee4:	08021dd7 	.word	0x08021dd7
 8021ee8:	08021dd7 	.word	0x08021dd7
 8021eec:	08021dd7 	.word	0x08021dd7
 8021ef0:	08021dd7 	.word	0x08021dd7
 8021ef4:	08021dd7 	.word	0x08021dd7
 8021ef8:	08021f61 	.word	0x08021f61
 8021efc:	08021fcd 	.word	0x08021fcd
 8021f00:	08022027 	.word	0x08022027
 8021f04:	080220e1 	.word	0x080220e1
 8021f08:	080220e1 	.word	0x080220e1
 8021f0c:	08021dd7 	.word	0x08021dd7
 8021f10:	0802219d 	.word	0x0802219d
 8021f14:	08021fcd 	.word	0x08021fcd
 8021f18:	08021dd7 	.word	0x08021dd7
 8021f1c:	08022367 	.word	0x08022367
 8021f20:	08022337 	.word	0x08022337
 8021f24:	08022345 	.word	0x08022345
 8021f28:	0802236f 	.word	0x0802236f
 8021f2c:	08022379 	.word	0x08022379
 8021f30:	08021dd7 	.word	0x08021dd7
 8021f34:	0802238d 	.word	0x0802238d
 8021f38:	08021dd7 	.word	0x08021dd7
 8021f3c:	08022057 	.word	0x08022057
 8021f40:	080223f1 	.word	0x080223f1
 8021f44:	080224f5 	.word	0x080224f5
 8021f48:	0802253d 	.word	0x0802253d
 8021f4c:	08021dd7 	.word	0x08021dd7
 8021f50:	080225d1 	.word	0x080225d1
 8021f54:	0802205f 	.word	0x0802205f
 8021f58:	080225f9 	.word	0x080225f9
 8021f5c:	08022665 	.word	0x08022665
 8021f60:	69ab      	ldr	r3, [r5, #24]
 8021f62:	4aa7      	ldr	r2, [pc, #668]	; (8022200 <__strftime+0x488>)
 8021f64:	3318      	adds	r3, #24
 8021f66:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8021f6a:	4630      	mov	r0, r6
 8021f6c:	f7de f966 	bl	800023c <strlen>
 8021f70:	3e01      	subs	r6, #1
 8021f72:	4420      	add	r0, r4
 8021f74:	f108 33ff 	add.w	r3, r8, #4294967295
 8021f78:	42a0      	cmp	r0, r4
 8021f7a:	d107      	bne.n	8021f8c <__strftime+0x214>
 8021f7c:	f89b 3000 	ldrb.w	r3, [fp]
 8021f80:	2b00      	cmp	r3, #0
 8021f82:	f000 83d7 	beq.w	8022734 <__strftime+0x9bc>
 8021f86:	f10b 0201 	add.w	r2, fp, #1
 8021f8a:	e6fe      	b.n	8021d8a <__strftime+0x12>
 8021f8c:	42a3      	cmp	r3, r4
 8021f8e:	f67f af22 	bls.w	8021dd6 <__strftime+0x5e>
 8021f92:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8021f96:	f809 2004 	strb.w	r2, [r9, r4]
 8021f9a:	3401      	adds	r4, #1
 8021f9c:	e7ec      	b.n	8021f78 <__strftime+0x200>
 8021f9e:	69aa      	ldr	r2, [r5, #24]
 8021fa0:	4b97      	ldr	r3, [pc, #604]	; (8022200 <__strftime+0x488>)
 8021fa2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8021fa6:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8021fa8:	4630      	mov	r0, r6
 8021faa:	f7de f947 	bl	800023c <strlen>
 8021fae:	3e01      	subs	r6, #1
 8021fb0:	4420      	add	r0, r4
 8021fb2:	f108 33ff 	add.w	r3, r8, #4294967295
 8021fb6:	42a0      	cmp	r0, r4
 8021fb8:	d0e0      	beq.n	8021f7c <__strftime+0x204>
 8021fba:	42a3      	cmp	r3, r4
 8021fbc:	f67f af0b 	bls.w	8021dd6 <__strftime+0x5e>
 8021fc0:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8021fc4:	f809 2004 	strb.w	r2, [r9, r4]
 8021fc8:	3401      	adds	r4, #1
 8021fca:	e7f4      	b.n	8021fb6 <__strftime+0x23e>
 8021fcc:	4b8c      	ldr	r3, [pc, #560]	; (8022200 <__strftime+0x488>)
 8021fce:	692a      	ldr	r2, [r5, #16]
 8021fd0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8021fd4:	4630      	mov	r0, r6
 8021fd6:	f7de f931 	bl	800023c <strlen>
 8021fda:	3e01      	subs	r6, #1
 8021fdc:	4420      	add	r0, r4
 8021fde:	f108 33ff 	add.w	r3, r8, #4294967295
 8021fe2:	42a0      	cmp	r0, r4
 8021fe4:	d0ca      	beq.n	8021f7c <__strftime+0x204>
 8021fe6:	42a3      	cmp	r3, r4
 8021fe8:	f67f aef5 	bls.w	8021dd6 <__strftime+0x5e>
 8021fec:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8021ff0:	f809 2004 	strb.w	r2, [r9, r4]
 8021ff4:	3401      	adds	r4, #1
 8021ff6:	e7f4      	b.n	8021fe2 <__strftime+0x26a>
 8021ff8:	692b      	ldr	r3, [r5, #16]
 8021ffa:	4a81      	ldr	r2, [pc, #516]	; (8022200 <__strftime+0x488>)
 8021ffc:	330c      	adds	r3, #12
 8021ffe:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8022002:	4630      	mov	r0, r6
 8022004:	f7de f91a 	bl	800023c <strlen>
 8022008:	3e01      	subs	r6, #1
 802200a:	4420      	add	r0, r4
 802200c:	f108 33ff 	add.w	r3, r8, #4294967295
 8022010:	42a0      	cmp	r0, r4
 8022012:	d0b3      	beq.n	8021f7c <__strftime+0x204>
 8022014:	42a3      	cmp	r3, r4
 8022016:	f67f aede 	bls.w	8021dd6 <__strftime+0x5e>
 802201a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 802201e:	f809 2004 	strb.w	r2, [r9, r4]
 8022022:	3401      	adds	r4, #1
 8022024:	e7f4      	b.n	8022010 <__strftime+0x298>
 8022026:	4b76      	ldr	r3, [pc, #472]	; (8022200 <__strftime+0x488>)
 8022028:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 802202c:	4630      	mov	r0, r6
 802202e:	f7de f905 	bl	800023c <strlen>
 8022032:	7833      	ldrb	r3, [r6, #0]
 8022034:	2b00      	cmp	r3, #0
 8022036:	d0a1      	beq.n	8021f7c <__strftime+0x204>
 8022038:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802203a:	9300      	str	r3, [sp, #0]
 802203c:	4632      	mov	r2, r6
 802203e:	462b      	mov	r3, r5
 8022040:	eba8 0104 	sub.w	r1, r8, r4
 8022044:	eb09 0004 	add.w	r0, r9, r4
 8022048:	f7ff fe96 	bl	8021d78 <__strftime>
 802204c:	2800      	cmp	r0, #0
 802204e:	f77f aec2 	ble.w	8021dd6 <__strftime+0x5e>
 8022052:	4404      	add	r4, r0
 8022054:	e792      	b.n	8021f7c <__strftime+0x204>
 8022056:	4b6a      	ldr	r3, [pc, #424]	; (8022200 <__strftime+0x488>)
 8022058:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 802205c:	e7e6      	b.n	802202c <__strftime+0x2b4>
 802205e:	4b68      	ldr	r3, [pc, #416]	; (8022200 <__strftime+0x488>)
 8022060:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 8022064:	e7e2      	b.n	802202c <__strftime+0x2b4>
 8022066:	4b66      	ldr	r3, [pc, #408]	; (8022200 <__strftime+0x488>)
 8022068:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 802206c:	e7de      	b.n	802202c <__strftime+0x2b4>
 802206e:	4965      	ldr	r1, [pc, #404]	; (8022204 <__strftime+0x48c>)
 8022070:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8022074:	458a      	cmp	sl, r1
 8022076:	bfac      	ite	ge
 8022078:	2100      	movge	r1, #0
 802207a:	2101      	movlt	r1, #1
 802207c:	f1ba 0f00 	cmp.w	sl, #0
 8022080:	db0e      	blt.n	80220a0 <__strftime+0x328>
 8022082:	2064      	movs	r0, #100	; 0x64
 8022084:	fb9a f0f0 	sdiv	r0, sl, r0
 8022088:	3013      	adds	r0, #19
 802208a:	b19f      	cbz	r7, 80220b4 <__strftime+0x33c>
 802208c:	2863      	cmp	r0, #99	; 0x63
 802208e:	dd25      	ble.n	80220dc <__strftime+0x364>
 8022090:	4a5d      	ldr	r2, [pc, #372]	; (8022208 <__strftime+0x490>)
 8022092:	4b5e      	ldr	r3, [pc, #376]	; (802220c <__strftime+0x494>)
 8022094:	2f2b      	cmp	r7, #43	; 0x2b
 8022096:	bf14      	ite	ne
 8022098:	4617      	movne	r7, r2
 802209a:	461f      	moveq	r7, r3
 802209c:	4a5c      	ldr	r2, [pc, #368]	; (8022210 <__strftime+0x498>)
 802209e:	e00b      	b.n	80220b8 <__strftime+0x340>
 80220a0:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 80220a4:	9105      	str	r1, [sp, #20]
 80220a6:	f001 f835 	bl	8023114 <abs>
 80220aa:	2364      	movs	r3, #100	; 0x64
 80220ac:	9905      	ldr	r1, [sp, #20]
 80220ae:	fb90 f0f3 	sdiv	r0, r0, r3
 80220b2:	e7ea      	b.n	802208a <__strftime+0x312>
 80220b4:	4f54      	ldr	r7, [pc, #336]	; (8022208 <__strftime+0x490>)
 80220b6:	4a57      	ldr	r2, [pc, #348]	; (8022214 <__strftime+0x49c>)
 80220b8:	4b57      	ldr	r3, [pc, #348]	; (8022218 <__strftime+0x4a0>)
 80220ba:	9001      	str	r0, [sp, #4]
 80220bc:	2e02      	cmp	r6, #2
 80220be:	bf2c      	ite	cs
 80220c0:	ebc1 0606 	rsbcs	r6, r1, r6
 80220c4:	f1c1 0602 	rsbcc	r6, r1, #2
 80220c8:	494e      	ldr	r1, [pc, #312]	; (8022204 <__strftime+0x48c>)
 80220ca:	9600      	str	r6, [sp, #0]
 80220cc:	458a      	cmp	sl, r1
 80220ce:	bfa8      	it	ge
 80220d0:	463b      	movge	r3, r7
 80220d2:	eba8 0104 	sub.w	r1, r8, r4
 80220d6:	eb09 0004 	add.w	r0, r9, r4
 80220da:	e02a      	b.n	8022132 <__strftime+0x3ba>
 80220dc:	4f4a      	ldr	r7, [pc, #296]	; (8022208 <__strftime+0x490>)
 80220de:	e7dd      	b.n	802209c <__strftime+0x324>
 80220e0:	494e      	ldr	r1, [pc, #312]	; (802221c <__strftime+0x4a4>)
 80220e2:	4a4f      	ldr	r2, [pc, #316]	; (8022220 <__strftime+0x4a8>)
 80220e4:	68eb      	ldr	r3, [r5, #12]
 80220e6:	2864      	cmp	r0, #100	; 0x64
 80220e8:	bf08      	it	eq
 80220ea:	460a      	moveq	r2, r1
 80220ec:	eba8 0104 	sub.w	r1, r8, r4
 80220f0:	eb09 0004 	add.w	r0, r9, r4
 80220f4:	f001 fe9e 	bl	8023e34 <sniprintf>
 80220f8:	2800      	cmp	r0, #0
 80220fa:	f6ff ae6c 	blt.w	8021dd6 <__strftime+0x5e>
 80220fe:	4404      	add	r4, r0
 8022100:	45a0      	cmp	r8, r4
 8022102:	f63f af3b 	bhi.w	8021f7c <__strftime+0x204>
 8022106:	e666      	b.n	8021dd6 <__strftime+0x5e>
 8022108:	6968      	ldr	r0, [r5, #20]
 802210a:	692b      	ldr	r3, [r5, #16]
 802210c:	68ef      	ldr	r7, [r5, #12]
 802210e:	2800      	cmp	r0, #0
 8022110:	eb09 0604 	add.w	r6, r9, r4
 8022114:	eba8 0104 	sub.w	r1, r8, r4
 8022118:	f103 0301 	add.w	r3, r3, #1
 802211c:	db0c      	blt.n	8022138 <__strftime+0x3c0>
 802211e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8022122:	fb90 f2fc 	sdiv	r2, r0, ip
 8022126:	fb0c 0212 	mls	r2, ip, r2, r0
 802212a:	e9cd 7200 	strd	r7, r2, [sp]
 802212e:	4a3d      	ldr	r2, [pc, #244]	; (8022224 <__strftime+0x4ac>)
 8022130:	4630      	mov	r0, r6
 8022132:	f001 fe7f 	bl	8023e34 <sniprintf>
 8022136:	e7df      	b.n	80220f8 <__strftime+0x380>
 8022138:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802213c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8022140:	f000 ffe8 	bl	8023114 <abs>
 8022144:	2264      	movs	r2, #100	; 0x64
 8022146:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 802214a:	fb90 fcf2 	sdiv	ip, r0, r2
 802214e:	fb0c 0212 	mls	r2, ip, r2, r0
 8022152:	e7ea      	b.n	802212a <__strftime+0x3b2>
 8022154:	2325      	movs	r3, #37	; 0x25
 8022156:	f88d 3020 	strb.w	r3, [sp, #32]
 802215a:	b187      	cbz	r7, 802217e <__strftime+0x406>
 802215c:	2e06      	cmp	r6, #6
 802215e:	bf38      	it	cc
 8022160:	2606      	movcc	r6, #6
 8022162:	1fb3      	subs	r3, r6, #6
 8022164:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8022168:	d10c      	bne.n	8022184 <__strftime+0x40c>
 802216a:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 802216e:	492e      	ldr	r1, [pc, #184]	; (8022228 <__strftime+0x4b0>)
 8022170:	f7ff fd97 	bl	8021ca2 <strcpy>
 8022174:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022176:	9300      	str	r3, [sp, #0]
 8022178:	aa08      	add	r2, sp, #32
 802217a:	462b      	mov	r3, r5
 802217c:	e760      	b.n	8022040 <__strftime+0x2c8>
 802217e:	272b      	movs	r7, #43	; 0x2b
 8022180:	260a      	movs	r6, #10
 8022182:	e7ee      	b.n	8022162 <__strftime+0x3ea>
 8022184:	4a29      	ldr	r2, [pc, #164]	; (802222c <__strftime+0x4b4>)
 8022186:	211e      	movs	r1, #30
 8022188:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 802218c:	f001 fe52 	bl	8023e34 <sniprintf>
 8022190:	2800      	cmp	r0, #0
 8022192:	ddea      	ble.n	802216a <__strftime+0x3f2>
 8022194:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8022198:	4418      	add	r0, r3
 802219a:	e7e8      	b.n	802216e <__strftime+0x3f6>
 802219c:	4628      	mov	r0, r5
 802219e:	f7ff fd89 	bl	8021cb4 <iso_year_adjust>
 80221a2:	4606      	mov	r6, r0
 80221a4:	6968      	ldr	r0, [r5, #20]
 80221a6:	2800      	cmp	r0, #0
 80221a8:	db11      	blt.n	80221ce <__strftime+0x456>
 80221aa:	2264      	movs	r2, #100	; 0x64
 80221ac:	fb90 f3f2 	sdiv	r3, r0, r2
 80221b0:	fb02 0313 	mls	r3, r2, r3, r0
 80221b4:	441e      	add	r6, r3
 80221b6:	2364      	movs	r3, #100	; 0x64
 80221b8:	fb96 f0f3 	sdiv	r0, r6, r3
 80221bc:	fb03 6610 	mls	r6, r3, r0, r6
 80221c0:	441e      	add	r6, r3
 80221c2:	fbb6 f2f3 	udiv	r2, r6, r3
 80221c6:	fb03 6312 	mls	r3, r3, r2, r6
 80221ca:	4a14      	ldr	r2, [pc, #80]	; (802221c <__strftime+0x4a4>)
 80221cc:	e78e      	b.n	80220ec <__strftime+0x374>
 80221ce:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80221d2:	f000 ff9f 	bl	8023114 <abs>
 80221d6:	2364      	movs	r3, #100	; 0x64
 80221d8:	2e00      	cmp	r6, #0
 80221da:	fb90 f2f3 	sdiv	r2, r0, r3
 80221de:	fb02 0313 	mls	r3, r2, r3, r0
 80221e2:	da05      	bge.n	80221f0 <__strftime+0x478>
 80221e4:	6969      	ldr	r1, [r5, #20]
 80221e6:	4a12      	ldr	r2, [pc, #72]	; (8022230 <__strftime+0x4b8>)
 80221e8:	4291      	cmp	r1, r2
 80221ea:	bfb8      	it	lt
 80221ec:	2601      	movlt	r6, #1
 80221ee:	e7e1      	b.n	80221b4 <__strftime+0x43c>
 80221f0:	d0e0      	beq.n	80221b4 <__strftime+0x43c>
 80221f2:	6969      	ldr	r1, [r5, #20]
 80221f4:	4a03      	ldr	r2, [pc, #12]	; (8022204 <__strftime+0x48c>)
 80221f6:	4291      	cmp	r1, r2
 80221f8:	bfb8      	it	lt
 80221fa:	f04f 36ff 	movlt.w	r6, #4294967295
 80221fe:	e7d9      	b.n	80221b4 <__strftime+0x43c>
 8022200:	0802b2c4 	.word	0x0802b2c4
 8022204:	fffff894 	.word	0xfffff894
 8022208:	0802b437 	.word	0x0802b437
 802220c:	0802b14e 	.word	0x0802b14e
 8022210:	0802b146 	.word	0x0802b146
 8022214:	0802b13f 	.word	0x0802b13f
 8022218:	0802b577 	.word	0x0802b577
 802221c:	0802b15e 	.word	0x0802b15e
 8022220:	0802b150 	.word	0x0802b150
 8022224:	0802b154 	.word	0x0802b154
 8022228:	0802b167 	.word	0x0802b167
 802222c:	0802b163 	.word	0x0802b163
 8022230:	fffff895 	.word	0xfffff895
 8022234:	4bb6      	ldr	r3, [pc, #728]	; (8022510 <__strftime+0x798>)
 8022236:	6969      	ldr	r1, [r5, #20]
 8022238:	4299      	cmp	r1, r3
 802223a:	bfac      	ite	ge
 802223c:	2300      	movge	r3, #0
 802223e:	2301      	movlt	r3, #1
 8022240:	4628      	mov	r0, r5
 8022242:	e9cd 3105 	strd	r3, r1, [sp, #20]
 8022246:	f7ff fd35 	bl	8021cb4 <iso_year_adjust>
 802224a:	9906      	ldr	r1, [sp, #24]
 802224c:	2900      	cmp	r1, #0
 802224e:	4682      	mov	sl, r0
 8022250:	db27      	blt.n	80222a2 <__strftime+0x52a>
 8022252:	2264      	movs	r2, #100	; 0x64
 8022254:	fb91 f2f2 	sdiv	r2, r1, r2
 8022258:	3213      	adds	r2, #19
 802225a:	6968      	ldr	r0, [r5, #20]
 802225c:	2800      	cmp	r0, #0
 802225e:	db2b      	blt.n	80222b8 <__strftime+0x540>
 8022260:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8022264:	fb90 fefc 	sdiv	lr, r0, ip
 8022268:	fb0c 001e 	mls	r0, ip, lr, r0
 802226c:	f1ba 0f00 	cmp.w	sl, #0
 8022270:	da31      	bge.n	80222d6 <__strftime+0x55e>
 8022272:	6969      	ldr	r1, [r5, #20]
 8022274:	4ba7      	ldr	r3, [pc, #668]	; (8022514 <__strftime+0x79c>)
 8022276:	4299      	cmp	r1, r3
 8022278:	db38      	blt.n	80222ec <__strftime+0x574>
 802227a:	eb0a 0300 	add.w	r3, sl, r0
 802227e:	1c59      	adds	r1, r3, #1
 8022280:	d139      	bne.n	80222f6 <__strftime+0x57e>
 8022282:	3a01      	subs	r2, #1
 8022284:	2363      	movs	r3, #99	; 0x63
 8022286:	2064      	movs	r0, #100	; 0x64
 8022288:	fb00 3202 	mla	r2, r0, r2, r3
 802228c:	9b05      	ldr	r3, [sp, #20]
 802228e:	2b00      	cmp	r3, #0
 8022290:	d036      	beq.n	8022300 <__strftime+0x588>
 8022292:	232d      	movs	r3, #45	; 0x2d
 8022294:	f88d 3020 	strb.w	r3, [sp, #32]
 8022298:	b106      	cbz	r6, 802229c <__strftime+0x524>
 802229a:	3e01      	subs	r6, #1
 802229c:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80222a0:	e038      	b.n	8022314 <__strftime+0x59c>
 80222a2:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80222a6:	9106      	str	r1, [sp, #24]
 80222a8:	f000 ff34 	bl	8023114 <abs>
 80222ac:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80222b0:	9906      	ldr	r1, [sp, #24]
 80222b2:	fb90 f2fc 	sdiv	r2, r0, ip
 80222b6:	e7d0      	b.n	802225a <__strftime+0x4e2>
 80222b8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80222bc:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80222c0:	f000 ff28 	bl	8023114 <abs>
 80222c4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80222c8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80222cc:	fb90 fefc 	sdiv	lr, r0, ip
 80222d0:	fb0e 001c 	mls	r0, lr, ip, r0
 80222d4:	e7ca      	b.n	802226c <__strftime+0x4f4>
 80222d6:	d0d0      	beq.n	802227a <__strftime+0x502>
 80222d8:	4b8d      	ldr	r3, [pc, #564]	; (8022510 <__strftime+0x798>)
 80222da:	4299      	cmp	r1, r3
 80222dc:	bfb4      	ite	lt
 80222de:	2301      	movlt	r3, #1
 80222e0:	2300      	movge	r3, #0
 80222e2:	9305      	str	r3, [sp, #20]
 80222e4:	bfb8      	it	lt
 80222e6:	f04f 3aff 	movlt.w	sl, #4294967295
 80222ea:	e7c6      	b.n	802227a <__strftime+0x502>
 80222ec:	f04f 0a01 	mov.w	sl, #1
 80222f0:	f8cd a014 	str.w	sl, [sp, #20]
 80222f4:	e7c1      	b.n	802227a <__strftime+0x502>
 80222f6:	2b64      	cmp	r3, #100	; 0x64
 80222f8:	bf04      	itt	eq
 80222fa:	3201      	addeq	r2, #1
 80222fc:	2300      	moveq	r3, #0
 80222fe:	e7c2      	b.n	8022286 <__strftime+0x50e>
 8022300:	2f2b      	cmp	r7, #43	; 0x2b
 8022302:	d106      	bne.n	8022312 <__strftime+0x59a>
 8022304:	f242 730f 	movw	r3, #9999	; 0x270f
 8022308:	429a      	cmp	r2, r3
 802230a:	d902      	bls.n	8022312 <__strftime+0x59a>
 802230c:	f88d 7020 	strb.w	r7, [sp, #32]
 8022310:	e7c2      	b.n	8022298 <__strftime+0x520>
 8022312:	ab08      	add	r3, sp, #32
 8022314:	2125      	movs	r1, #37	; 0x25
 8022316:	7019      	strb	r1, [r3, #0]
 8022318:	b94f      	cbnz	r7, 802232e <__strftime+0x5b6>
 802231a:	1c58      	adds	r0, r3, #1
 802231c:	497e      	ldr	r1, [pc, #504]	; (8022518 <__strftime+0x7a0>)
 802231e:	9205      	str	r2, [sp, #20]
 8022320:	f7ff fcbf 	bl	8021ca2 <strcpy>
 8022324:	9a05      	ldr	r2, [sp, #20]
 8022326:	9200      	str	r2, [sp, #0]
 8022328:	4633      	mov	r3, r6
 802232a:	aa08      	add	r2, sp, #32
 802232c:	e059      	b.n	80223e2 <__strftime+0x66a>
 802232e:	2130      	movs	r1, #48	; 0x30
 8022330:	1c98      	adds	r0, r3, #2
 8022332:	7059      	strb	r1, [r3, #1]
 8022334:	e7f2      	b.n	802231c <__strftime+0x5a4>
 8022336:	4979      	ldr	r1, [pc, #484]	; (802251c <__strftime+0x7a4>)
 8022338:	4a79      	ldr	r2, [pc, #484]	; (8022520 <__strftime+0x7a8>)
 802233a:	68ab      	ldr	r3, [r5, #8]
 802233c:	286b      	cmp	r0, #107	; 0x6b
 802233e:	bf08      	it	eq
 8022340:	460a      	moveq	r2, r1
 8022342:	e6d3      	b.n	80220ec <__strftime+0x374>
 8022344:	68ab      	ldr	r3, [r5, #8]
 8022346:	b163      	cbz	r3, 8022362 <__strftime+0x5ea>
 8022348:	2b0c      	cmp	r3, #12
 802234a:	d004      	beq.n	8022356 <__strftime+0x5de>
 802234c:	210c      	movs	r1, #12
 802234e:	fb93 f2f1 	sdiv	r2, r3, r1
 8022352:	fb01 3312 	mls	r3, r1, r2, r3
 8022356:	4972      	ldr	r1, [pc, #456]	; (8022520 <__strftime+0x7a8>)
 8022358:	4a70      	ldr	r2, [pc, #448]	; (802251c <__strftime+0x7a4>)
 802235a:	2849      	cmp	r0, #73	; 0x49
 802235c:	bf08      	it	eq
 802235e:	460a      	moveq	r2, r1
 8022360:	e6c4      	b.n	80220ec <__strftime+0x374>
 8022362:	230c      	movs	r3, #12
 8022364:	e7f7      	b.n	8022356 <__strftime+0x5de>
 8022366:	69eb      	ldr	r3, [r5, #28]
 8022368:	4a6e      	ldr	r2, [pc, #440]	; (8022524 <__strftime+0x7ac>)
 802236a:	3301      	adds	r3, #1
 802236c:	e6be      	b.n	80220ec <__strftime+0x374>
 802236e:	692b      	ldr	r3, [r5, #16]
 8022370:	3301      	adds	r3, #1
 8022372:	e72a      	b.n	80221ca <__strftime+0x452>
 8022374:	686b      	ldr	r3, [r5, #4]
 8022376:	e728      	b.n	80221ca <__strftime+0x452>
 8022378:	f108 33ff 	add.w	r3, r8, #4294967295
 802237c:	42a3      	cmp	r3, r4
 802237e:	f67f ad2a 	bls.w	8021dd6 <__strftime+0x5e>
 8022382:	230a      	movs	r3, #10
 8022384:	f809 3004 	strb.w	r3, [r9, r4]
 8022388:	3401      	adds	r4, #1
 802238a:	e5f7      	b.n	8021f7c <__strftime+0x204>
 802238c:	68ab      	ldr	r3, [r5, #8]
 802238e:	2b0b      	cmp	r3, #11
 8022390:	bfcc      	ite	gt
 8022392:	22a4      	movgt	r2, #164	; 0xa4
 8022394:	22a0      	movle	r2, #160	; 0xa0
 8022396:	4b64      	ldr	r3, [pc, #400]	; (8022528 <__strftime+0x7b0>)
 8022398:	4413      	add	r3, r2
 802239a:	685e      	ldr	r6, [r3, #4]
 802239c:	4630      	mov	r0, r6
 802239e:	f7dd ff4d 	bl	800023c <strlen>
 80223a2:	1e72      	subs	r2, r6, #1
 80223a4:	4420      	add	r0, r4
 80223a6:	f108 36ff 	add.w	r6, r8, #4294967295
 80223aa:	42a0      	cmp	r0, r4
 80223ac:	f43f ade6 	beq.w	8021f7c <__strftime+0x204>
 80223b0:	42a6      	cmp	r6, r4
 80223b2:	f67f ad10 	bls.w	8021dd6 <__strftime+0x5e>
 80223b6:	f89b 1000 	ldrb.w	r1, [fp]
 80223ba:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80223be:	2950      	cmp	r1, #80	; 0x50
 80223c0:	d107      	bne.n	80223d2 <__strftime+0x65a>
 80223c2:	495a      	ldr	r1, [pc, #360]	; (802252c <__strftime+0x7b4>)
 80223c4:	5cc9      	ldrb	r1, [r1, r3]
 80223c6:	f001 0103 	and.w	r1, r1, #3
 80223ca:	2901      	cmp	r1, #1
 80223cc:	bf08      	it	eq
 80223ce:	3320      	addeq	r3, #32
 80223d0:	b2db      	uxtb	r3, r3
 80223d2:	f809 3004 	strb.w	r3, [r9, r4]
 80223d6:	3401      	adds	r4, #1
 80223d8:	e7e7      	b.n	80223aa <__strftime+0x632>
 80223da:	686b      	ldr	r3, [r5, #4]
 80223dc:	9300      	str	r3, [sp, #0]
 80223de:	4a54      	ldr	r2, [pc, #336]	; (8022530 <__strftime+0x7b8>)
 80223e0:	68ab      	ldr	r3, [r5, #8]
 80223e2:	eba8 0104 	sub.w	r1, r8, r4
 80223e6:	eb09 0004 	add.w	r0, r9, r4
 80223ea:	f001 fd23 	bl	8023e34 <sniprintf>
 80223ee:	e683      	b.n	80220f8 <__strftime+0x380>
 80223f0:	6a2b      	ldr	r3, [r5, #32]
 80223f2:	2b00      	cmp	r3, #0
 80223f4:	db79      	blt.n	80224ea <__strftime+0x772>
 80223f6:	f000 fb91 	bl	8022b1c <__tz_lock>
 80223fa:	9b04      	ldr	r3, [sp, #16]
 80223fc:	b90b      	cbnz	r3, 8022402 <__strftime+0x68a>
 80223fe:	f000 fb99 	bl	8022b34 <_tzset_unlocked>
 8022402:	f000 ff55 	bl	80232b0 <__gettzinfo>
 8022406:	6a2b      	ldr	r3, [r5, #32]
 8022408:	2b00      	cmp	r3, #0
 802240a:	bfcc      	ite	gt
 802240c:	2350      	movgt	r3, #80	; 0x50
 802240e:	2328      	movle	r3, #40	; 0x28
 8022410:	58c3      	ldr	r3, [r0, r3]
 8022412:	f1c3 0a00 	rsb	sl, r3, #0
 8022416:	f000 fb87 	bl	8022b28 <__tz_unlock>
 802241a:	2301      	movs	r3, #1
 802241c:	9304      	str	r3, [sp, #16]
 802241e:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8022422:	4662      	mov	r2, ip
 8022424:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8022428:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802242c:	9602      	str	r6, [sp, #8]
 802242e:	f143 36ff 	adc.w	r6, r3, #4294967295
 8022432:	9603      	str	r6, [sp, #12]
 8022434:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8022438:	2e00      	cmp	r6, #0
 802243a:	f177 0600 	sbcs.w	r6, r7, #0
 802243e:	eba8 0104 	sub.w	r1, r8, r4
 8022442:	eb09 0004 	add.w	r0, r9, r4
 8022446:	da05      	bge.n	8022454 <__strftime+0x6dc>
 8022448:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 802244c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8022450:	9602      	str	r6, [sp, #8]
 8022452:	9303      	str	r3, [sp, #12]
 8022454:	9b02      	ldr	r3, [sp, #8]
 8022456:	089e      	lsrs	r6, r3, #2
 8022458:	9b03      	ldr	r3, [sp, #12]
 802245a:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 802245e:	f10c 32ff 	add.w	r2, ip, #4294967295
 8022462:	109f      	asrs	r7, r3, #2
 8022464:	2364      	movs	r3, #100	; 0x64
 8022466:	fb92 f3f3 	sdiv	r3, r2, r3
 802246a:	1af6      	subs	r6, r6, r3
 802246c:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 8022470:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 8022474:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8022478:	fb92 f3f3 	sdiv	r3, r2, r3
 802247c:	18f6      	adds	r6, r6, r3
 802247e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8022482:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8022486:	f240 136d 	movw	r3, #365	; 0x16d
 802248a:	fb03 fc0c 	mul.w	ip, r3, ip
 802248e:	69eb      	ldr	r3, [r5, #28]
 8022490:	eb16 060c 	adds.w	r6, r6, ip
 8022494:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8022498:	18f6      	adds	r6, r6, r3
 802249a:	f04f 0c18 	mov.w	ip, #24
 802249e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80224a2:	fba6 230c 	umull	r2, r3, r6, ip
 80224a6:	68ae      	ldr	r6, [r5, #8]
 80224a8:	fb0c 3307 	mla	r3, ip, r7, r3
 80224ac:	1992      	adds	r2, r2, r6
 80224ae:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80224b2:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 80224b6:	fba2 670c 	umull	r6, r7, r2, ip
 80224ba:	fb0c 7703 	mla	r7, ip, r3, r7
 80224be:	686b      	ldr	r3, [r5, #4]
 80224c0:	18f6      	adds	r6, r6, r3
 80224c2:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80224c6:	fba6 230c 	umull	r2, r3, r6, ip
 80224ca:	682e      	ldr	r6, [r5, #0]
 80224cc:	fb0c 3307 	mla	r3, ip, r7, r3
 80224d0:	1992      	adds	r2, r2, r6
 80224d2:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 80224d6:	ebb2 020a 	subs.w	r2, r2, sl
 80224da:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 80224de:	e9cd 2300 	strd	r2, r3, [sp]
 80224e2:	4a14      	ldr	r2, [pc, #80]	; (8022534 <__strftime+0x7bc>)
 80224e4:	f001 fca6 	bl	8023e34 <sniprintf>
 80224e8:	e606      	b.n	80220f8 <__strftime+0x380>
 80224ea:	f04f 0a00 	mov.w	sl, #0
 80224ee:	e796      	b.n	802241e <__strftime+0x6a6>
 80224f0:	682b      	ldr	r3, [r5, #0]
 80224f2:	e66a      	b.n	80221ca <__strftime+0x452>
 80224f4:	f108 33ff 	add.w	r3, r8, #4294967295
 80224f8:	42a3      	cmp	r3, r4
 80224fa:	f67f ac6c 	bls.w	8021dd6 <__strftime+0x5e>
 80224fe:	2309      	movs	r3, #9
 8022500:	e740      	b.n	8022384 <__strftime+0x60c>
 8022502:	682b      	ldr	r3, [r5, #0]
 8022504:	9301      	str	r3, [sp, #4]
 8022506:	686b      	ldr	r3, [r5, #4]
 8022508:	9300      	str	r3, [sp, #0]
 802250a:	4a0b      	ldr	r2, [pc, #44]	; (8022538 <__strftime+0x7c0>)
 802250c:	68ab      	ldr	r3, [r5, #8]
 802250e:	e5e0      	b.n	80220d2 <__strftime+0x35a>
 8022510:	fffff894 	.word	0xfffff894
 8022514:	fffff895 	.word	0xfffff895
 8022518:	0802b16f 	.word	0x0802b16f
 802251c:	0802b150 	.word	0x0802b150
 8022520:	0802b15e 	.word	0x0802b15e
 8022524:	0802b173 	.word	0x0802b173
 8022528:	0802b2c4 	.word	0x0802b2c4
 802252c:	0802b439 	.word	0x0802b439
 8022530:	0802b182 	.word	0x0802b182
 8022534:	0802b178 	.word	0x0802b178
 8022538:	0802b17d 	.word	0x0802b17d
 802253c:	f108 33ff 	add.w	r3, r8, #4294967295
 8022540:	42a3      	cmp	r3, r4
 8022542:	f67f ac48 	bls.w	8021dd6 <__strftime+0x5e>
 8022546:	69ab      	ldr	r3, [r5, #24]
 8022548:	eb09 0204 	add.w	r2, r9, r4
 802254c:	3401      	adds	r4, #1
 802254e:	b913      	cbnz	r3, 8022556 <__strftime+0x7de>
 8022550:	2337      	movs	r3, #55	; 0x37
 8022552:	7013      	strb	r3, [r2, #0]
 8022554:	e512      	b.n	8021f7c <__strftime+0x204>
 8022556:	3330      	adds	r3, #48	; 0x30
 8022558:	e7fb      	b.n	8022552 <__strftime+0x7da>
 802255a:	69eb      	ldr	r3, [r5, #28]
 802255c:	69aa      	ldr	r2, [r5, #24]
 802255e:	3307      	adds	r3, #7
 8022560:	1a9b      	subs	r3, r3, r2
 8022562:	2207      	movs	r2, #7
 8022564:	fb93 f3f2 	sdiv	r3, r3, r2
 8022568:	e62f      	b.n	80221ca <__strftime+0x452>
 802256a:	4628      	mov	r0, r5
 802256c:	f7ff fba2 	bl	8021cb4 <iso_year_adjust>
 8022570:	69aa      	ldr	r2, [r5, #24]
 8022572:	b132      	cbz	r2, 8022582 <__strftime+0x80a>
 8022574:	3a01      	subs	r2, #1
 8022576:	2800      	cmp	r0, #0
 8022578:	dc28      	bgt.n	80225cc <__strftime+0x854>
 802257a:	69eb      	ldr	r3, [r5, #28]
 802257c:	d103      	bne.n	8022586 <__strftime+0x80e>
 802257e:	330a      	adds	r3, #10
 8022580:	e7ee      	b.n	8022560 <__strftime+0x7e8>
 8022582:	2206      	movs	r2, #6
 8022584:	e7f7      	b.n	8022576 <__strftime+0x7fe>
 8022586:	6968      	ldr	r0, [r5, #20]
 8022588:	2800      	cmp	r0, #0
 802258a:	eba2 0303 	sub.w	r3, r2, r3
 802258e:	f240 726b 	movw	r2, #1899	; 0x76b
 8022592:	bfa8      	it	ge
 8022594:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8022598:	4410      	add	r0, r2
 802259a:	0782      	lsls	r2, r0, #30
 802259c:	d105      	bne.n	80225aa <__strftime+0x832>
 802259e:	2264      	movs	r2, #100	; 0x64
 80225a0:	fb90 f1f2 	sdiv	r1, r0, r2
 80225a4:	fb02 0111 	mls	r1, r2, r1, r0
 80225a8:	b971      	cbnz	r1, 80225c8 <__strftime+0x850>
 80225aa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80225ae:	fb90 f2f1 	sdiv	r2, r0, r1
 80225b2:	fb01 0212 	mls	r2, r1, r2, r0
 80225b6:	fab2 f282 	clz	r2, r2
 80225ba:	0952      	lsrs	r2, r2, #5
 80225bc:	1a9a      	subs	r2, r3, r2
 80225be:	2a05      	cmp	r2, #5
 80225c0:	bfb4      	ite	lt
 80225c2:	2335      	movlt	r3, #53	; 0x35
 80225c4:	2334      	movge	r3, #52	; 0x34
 80225c6:	e600      	b.n	80221ca <__strftime+0x452>
 80225c8:	2201      	movs	r2, #1
 80225ca:	e7f7      	b.n	80225bc <__strftime+0x844>
 80225cc:	2301      	movs	r3, #1
 80225ce:	e5fc      	b.n	80221ca <__strftime+0x452>
 80225d0:	f108 33ff 	add.w	r3, r8, #4294967295
 80225d4:	42a3      	cmp	r3, r4
 80225d6:	f67f abfe 	bls.w	8021dd6 <__strftime+0x5e>
 80225da:	69ab      	ldr	r3, [r5, #24]
 80225dc:	3330      	adds	r3, #48	; 0x30
 80225de:	e6d1      	b.n	8022384 <__strftime+0x60c>
 80225e0:	69ab      	ldr	r3, [r5, #24]
 80225e2:	b13b      	cbz	r3, 80225f4 <__strftime+0x87c>
 80225e4:	3b01      	subs	r3, #1
 80225e6:	69ea      	ldr	r2, [r5, #28]
 80225e8:	3207      	adds	r2, #7
 80225ea:	1ad2      	subs	r2, r2, r3
 80225ec:	2307      	movs	r3, #7
 80225ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80225f2:	e5ea      	b.n	80221ca <__strftime+0x452>
 80225f4:	2306      	movs	r3, #6
 80225f6:	e7f6      	b.n	80225e6 <__strftime+0x86e>
 80225f8:	6968      	ldr	r0, [r5, #20]
 80225fa:	2800      	cmp	r0, #0
 80225fc:	db05      	blt.n	802260a <__strftime+0x892>
 80225fe:	2264      	movs	r2, #100	; 0x64
 8022600:	fb90 f3f2 	sdiv	r3, r0, r2
 8022604:	fb03 0312 	mls	r3, r3, r2, r0
 8022608:	e5df      	b.n	80221ca <__strftime+0x452>
 802260a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802260e:	f000 fd81 	bl	8023114 <abs>
 8022612:	e7f4      	b.n	80225fe <__strftime+0x886>
 8022614:	696b      	ldr	r3, [r5, #20]
 8022616:	4a4c      	ldr	r2, [pc, #304]	; (8022748 <__strftime+0x9d0>)
 8022618:	4293      	cmp	r3, r2
 802261a:	da09      	bge.n	8022630 <__strftime+0x8b8>
 802261c:	212d      	movs	r1, #45	; 0x2d
 802261e:	f88d 1020 	strb.w	r1, [sp, #32]
 8022622:	eba2 0a03 	sub.w	sl, r2, r3
 8022626:	b106      	cbz	r6, 802262a <__strftime+0x8b2>
 8022628:	3e01      	subs	r6, #1
 802262a:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 802262e:	e00b      	b.n	8022648 <__strftime+0x8d0>
 8022630:	2f2b      	cmp	r7, #43	; 0x2b
 8022632:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8022636:	d106      	bne.n	8022646 <__strftime+0x8ce>
 8022638:	f242 730f 	movw	r3, #9999	; 0x270f
 802263c:	459a      	cmp	sl, r3
 802263e:	d902      	bls.n	8022646 <__strftime+0x8ce>
 8022640:	f88d 7020 	strb.w	r7, [sp, #32]
 8022644:	e7ef      	b.n	8022626 <__strftime+0x8ae>
 8022646:	ab08      	add	r3, sp, #32
 8022648:	2225      	movs	r2, #37	; 0x25
 802264a:	701a      	strb	r2, [r3, #0]
 802264c:	b937      	cbnz	r7, 802265c <__strftime+0x8e4>
 802264e:	1c58      	adds	r0, r3, #1
 8022650:	493e      	ldr	r1, [pc, #248]	; (802274c <__strftime+0x9d4>)
 8022652:	f7ff fb26 	bl	8021ca2 <strcpy>
 8022656:	f8cd a000 	str.w	sl, [sp]
 802265a:	e665      	b.n	8022328 <__strftime+0x5b0>
 802265c:	2230      	movs	r2, #48	; 0x30
 802265e:	1c98      	adds	r0, r3, #2
 8022660:	705a      	strb	r2, [r3, #1]
 8022662:	e7f5      	b.n	8022650 <__strftime+0x8d8>
 8022664:	6a2b      	ldr	r3, [r5, #32]
 8022666:	2b00      	cmp	r3, #0
 8022668:	f6ff ac88 	blt.w	8021f7c <__strftime+0x204>
 802266c:	f000 fa56 	bl	8022b1c <__tz_lock>
 8022670:	9b04      	ldr	r3, [sp, #16]
 8022672:	b90b      	cbnz	r3, 8022678 <__strftime+0x900>
 8022674:	f000 fa5e 	bl	8022b34 <_tzset_unlocked>
 8022678:	f000 fe1a 	bl	80232b0 <__gettzinfo>
 802267c:	6a2b      	ldr	r3, [r5, #32]
 802267e:	2b00      	cmp	r3, #0
 8022680:	bfcc      	ite	gt
 8022682:	2350      	movgt	r3, #80	; 0x50
 8022684:	2328      	movle	r3, #40	; 0x28
 8022686:	eb09 0704 	add.w	r7, r9, r4
 802268a:	58c6      	ldr	r6, [r0, r3]
 802268c:	f000 fa4c 	bl	8022b28 <__tz_unlock>
 8022690:	4276      	negs	r6, r6
 8022692:	233c      	movs	r3, #60	; 0x3c
 8022694:	fb96 f0f3 	sdiv	r0, r6, r3
 8022698:	f000 fece 	bl	8023438 <labs>
 802269c:	233c      	movs	r3, #60	; 0x3c
 802269e:	eba8 0a04 	sub.w	sl, r8, r4
 80226a2:	fb90 f2f3 	sdiv	r2, r0, r3
 80226a6:	fb02 0013 	mls	r0, r2, r3, r0
 80226aa:	9000      	str	r0, [sp, #0]
 80226ac:	4a28      	ldr	r2, [pc, #160]	; (8022750 <__strftime+0x9d8>)
 80226ae:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80226b2:	4651      	mov	r1, sl
 80226b4:	4638      	mov	r0, r7
 80226b6:	fb96 f3f3 	sdiv	r3, r6, r3
 80226ba:	f001 fbbb 	bl	8023e34 <sniprintf>
 80226be:	2800      	cmp	r0, #0
 80226c0:	f6ff ab89 	blt.w	8021dd6 <__strftime+0x5e>
 80226c4:	4404      	add	r4, r0
 80226c6:	45a0      	cmp	r8, r4
 80226c8:	f67f ab85 	bls.w	8021dd6 <__strftime+0x5e>
 80226cc:	2301      	movs	r3, #1
 80226ce:	9304      	str	r3, [sp, #16]
 80226d0:	e454      	b.n	8021f7c <__strftime+0x204>
 80226d2:	6a2b      	ldr	r3, [r5, #32]
 80226d4:	2b00      	cmp	r3, #0
 80226d6:	f6ff ac51 	blt.w	8021f7c <__strftime+0x204>
 80226da:	f000 fa1f 	bl	8022b1c <__tz_lock>
 80226de:	9b04      	ldr	r3, [sp, #16]
 80226e0:	b90b      	cbnz	r3, 80226e6 <__strftime+0x96e>
 80226e2:	f000 fa27 	bl	8022b34 <_tzset_unlocked>
 80226e6:	6a2b      	ldr	r3, [r5, #32]
 80226e8:	4a1a      	ldr	r2, [pc, #104]	; (8022754 <__strftime+0x9dc>)
 80226ea:	2b00      	cmp	r3, #0
 80226ec:	bfd4      	ite	le
 80226ee:	2300      	movle	r3, #0
 80226f0:	2301      	movgt	r3, #1
 80226f2:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80226f6:	4630      	mov	r0, r6
 80226f8:	f7dd fda0 	bl	800023c <strlen>
 80226fc:	3e01      	subs	r6, #1
 80226fe:	4420      	add	r0, r4
 8022700:	f108 33ff 	add.w	r3, r8, #4294967295
 8022704:	42a0      	cmp	r0, r4
 8022706:	d102      	bne.n	802270e <__strftime+0x996>
 8022708:	f000 fa0e 	bl	8022b28 <__tz_unlock>
 802270c:	e7de      	b.n	80226cc <__strftime+0x954>
 802270e:	42a3      	cmp	r3, r4
 8022710:	d905      	bls.n	802271e <__strftime+0x9a6>
 8022712:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8022716:	f809 2004 	strb.w	r2, [r9, r4]
 802271a:	3401      	adds	r4, #1
 802271c:	e7f2      	b.n	8022704 <__strftime+0x98c>
 802271e:	f000 fa03 	bl	8022b28 <__tz_unlock>
 8022722:	f7ff bb58 	b.w	8021dd6 <__strftime+0x5e>
 8022726:	f108 33ff 	add.w	r3, r8, #4294967295
 802272a:	42a3      	cmp	r3, r4
 802272c:	f67f ab53 	bls.w	8021dd6 <__strftime+0x5e>
 8022730:	2325      	movs	r3, #37	; 0x25
 8022732:	e627      	b.n	8022384 <__strftime+0x60c>
 8022734:	f1b8 0f00 	cmp.w	r8, #0
 8022738:	d002      	beq.n	8022740 <__strftime+0x9c8>
 802273a:	2300      	movs	r3, #0
 802273c:	f809 3004 	strb.w	r3, [r9, r4]
 8022740:	4620      	mov	r0, r4
 8022742:	b011      	add	sp, #68	; 0x44
 8022744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022748:	fffff894 	.word	0xfffff894
 802274c:	0802b16f 	.word	0x0802b16f
 8022750:	0802b18c 	.word	0x0802b18c
 8022754:	2000016c 	.word	0x2000016c

08022758 <strftime>:
 8022758:	b513      	push	{r0, r1, r4, lr}
 802275a:	4c03      	ldr	r4, [pc, #12]	; (8022768 <strftime+0x10>)
 802275c:	9400      	str	r4, [sp, #0]
 802275e:	f7ff fb0b 	bl	8021d78 <__strftime>
 8022762:	b002      	add	sp, #8
 8022764:	bd10      	pop	{r4, pc}
 8022766:	bf00      	nop
 8022768:	200001d0 	.word	0x200001d0

0802276c <strstr>:
 802276c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802276e:	780c      	ldrb	r4, [r1, #0]
 8022770:	b164      	cbz	r4, 802278c <strstr+0x20>
 8022772:	4603      	mov	r3, r0
 8022774:	781a      	ldrb	r2, [r3, #0]
 8022776:	4618      	mov	r0, r3
 8022778:	1c5e      	adds	r6, r3, #1
 802277a:	b90a      	cbnz	r2, 8022780 <strstr+0x14>
 802277c:	4610      	mov	r0, r2
 802277e:	e005      	b.n	802278c <strstr+0x20>
 8022780:	4294      	cmp	r4, r2
 8022782:	d108      	bne.n	8022796 <strstr+0x2a>
 8022784:	460d      	mov	r5, r1
 8022786:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 802278a:	b902      	cbnz	r2, 802278e <strstr+0x22>
 802278c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802278e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8022792:	4297      	cmp	r7, r2
 8022794:	d0f7      	beq.n	8022786 <strstr+0x1a>
 8022796:	4633      	mov	r3, r6
 8022798:	e7ec      	b.n	8022774 <strstr+0x8>
	...

0802279c <_strtol_l.isra.0>:
 802279c:	2b01      	cmp	r3, #1
 802279e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80227a2:	d001      	beq.n	80227a8 <_strtol_l.isra.0+0xc>
 80227a4:	2b24      	cmp	r3, #36	; 0x24
 80227a6:	d906      	bls.n	80227b6 <_strtol_l.isra.0+0x1a>
 80227a8:	f7fe fa84 	bl	8020cb4 <__errno>
 80227ac:	2316      	movs	r3, #22
 80227ae:	6003      	str	r3, [r0, #0]
 80227b0:	2000      	movs	r0, #0
 80227b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80227b6:	4f3a      	ldr	r7, [pc, #232]	; (80228a0 <_strtol_l.isra.0+0x104>)
 80227b8:	468e      	mov	lr, r1
 80227ba:	4676      	mov	r6, lr
 80227bc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80227c0:	5de5      	ldrb	r5, [r4, r7]
 80227c2:	f015 0508 	ands.w	r5, r5, #8
 80227c6:	d1f8      	bne.n	80227ba <_strtol_l.isra.0+0x1e>
 80227c8:	2c2d      	cmp	r4, #45	; 0x2d
 80227ca:	d134      	bne.n	8022836 <_strtol_l.isra.0+0x9a>
 80227cc:	f89e 4000 	ldrb.w	r4, [lr]
 80227d0:	f04f 0801 	mov.w	r8, #1
 80227d4:	f106 0e02 	add.w	lr, r6, #2
 80227d8:	2b00      	cmp	r3, #0
 80227da:	d05c      	beq.n	8022896 <_strtol_l.isra.0+0xfa>
 80227dc:	2b10      	cmp	r3, #16
 80227de:	d10c      	bne.n	80227fa <_strtol_l.isra.0+0x5e>
 80227e0:	2c30      	cmp	r4, #48	; 0x30
 80227e2:	d10a      	bne.n	80227fa <_strtol_l.isra.0+0x5e>
 80227e4:	f89e 4000 	ldrb.w	r4, [lr]
 80227e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80227ec:	2c58      	cmp	r4, #88	; 0x58
 80227ee:	d14d      	bne.n	802288c <_strtol_l.isra.0+0xf0>
 80227f0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80227f4:	2310      	movs	r3, #16
 80227f6:	f10e 0e02 	add.w	lr, lr, #2
 80227fa:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80227fe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022802:	2600      	movs	r6, #0
 8022804:	fbbc f9f3 	udiv	r9, ip, r3
 8022808:	4635      	mov	r5, r6
 802280a:	fb03 ca19 	mls	sl, r3, r9, ip
 802280e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8022812:	2f09      	cmp	r7, #9
 8022814:	d818      	bhi.n	8022848 <_strtol_l.isra.0+0xac>
 8022816:	463c      	mov	r4, r7
 8022818:	42a3      	cmp	r3, r4
 802281a:	dd24      	ble.n	8022866 <_strtol_l.isra.0+0xca>
 802281c:	2e00      	cmp	r6, #0
 802281e:	db1f      	blt.n	8022860 <_strtol_l.isra.0+0xc4>
 8022820:	45a9      	cmp	r9, r5
 8022822:	d31d      	bcc.n	8022860 <_strtol_l.isra.0+0xc4>
 8022824:	d101      	bne.n	802282a <_strtol_l.isra.0+0x8e>
 8022826:	45a2      	cmp	sl, r4
 8022828:	db1a      	blt.n	8022860 <_strtol_l.isra.0+0xc4>
 802282a:	fb05 4503 	mla	r5, r5, r3, r4
 802282e:	2601      	movs	r6, #1
 8022830:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8022834:	e7eb      	b.n	802280e <_strtol_l.isra.0+0x72>
 8022836:	2c2b      	cmp	r4, #43	; 0x2b
 8022838:	bf08      	it	eq
 802283a:	f89e 4000 	ldrbeq.w	r4, [lr]
 802283e:	46a8      	mov	r8, r5
 8022840:	bf08      	it	eq
 8022842:	f106 0e02 	addeq.w	lr, r6, #2
 8022846:	e7c7      	b.n	80227d8 <_strtol_l.isra.0+0x3c>
 8022848:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 802284c:	2f19      	cmp	r7, #25
 802284e:	d801      	bhi.n	8022854 <_strtol_l.isra.0+0xb8>
 8022850:	3c37      	subs	r4, #55	; 0x37
 8022852:	e7e1      	b.n	8022818 <_strtol_l.isra.0+0x7c>
 8022854:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8022858:	2f19      	cmp	r7, #25
 802285a:	d804      	bhi.n	8022866 <_strtol_l.isra.0+0xca>
 802285c:	3c57      	subs	r4, #87	; 0x57
 802285e:	e7db      	b.n	8022818 <_strtol_l.isra.0+0x7c>
 8022860:	f04f 36ff 	mov.w	r6, #4294967295
 8022864:	e7e4      	b.n	8022830 <_strtol_l.isra.0+0x94>
 8022866:	2e00      	cmp	r6, #0
 8022868:	da05      	bge.n	8022876 <_strtol_l.isra.0+0xda>
 802286a:	2322      	movs	r3, #34	; 0x22
 802286c:	6003      	str	r3, [r0, #0]
 802286e:	4665      	mov	r5, ip
 8022870:	b942      	cbnz	r2, 8022884 <_strtol_l.isra.0+0xe8>
 8022872:	4628      	mov	r0, r5
 8022874:	e79d      	b.n	80227b2 <_strtol_l.isra.0+0x16>
 8022876:	f1b8 0f00 	cmp.w	r8, #0
 802287a:	d000      	beq.n	802287e <_strtol_l.isra.0+0xe2>
 802287c:	426d      	negs	r5, r5
 802287e:	2a00      	cmp	r2, #0
 8022880:	d0f7      	beq.n	8022872 <_strtol_l.isra.0+0xd6>
 8022882:	b10e      	cbz	r6, 8022888 <_strtol_l.isra.0+0xec>
 8022884:	f10e 31ff 	add.w	r1, lr, #4294967295
 8022888:	6011      	str	r1, [r2, #0]
 802288a:	e7f2      	b.n	8022872 <_strtol_l.isra.0+0xd6>
 802288c:	2430      	movs	r4, #48	; 0x30
 802288e:	2b00      	cmp	r3, #0
 8022890:	d1b3      	bne.n	80227fa <_strtol_l.isra.0+0x5e>
 8022892:	2308      	movs	r3, #8
 8022894:	e7b1      	b.n	80227fa <_strtol_l.isra.0+0x5e>
 8022896:	2c30      	cmp	r4, #48	; 0x30
 8022898:	d0a4      	beq.n	80227e4 <_strtol_l.isra.0+0x48>
 802289a:	230a      	movs	r3, #10
 802289c:	e7ad      	b.n	80227fa <_strtol_l.isra.0+0x5e>
 802289e:	bf00      	nop
 80228a0:	0802b439 	.word	0x0802b439

080228a4 <_strtol_r>:
 80228a4:	f7ff bf7a 	b.w	802279c <_strtol_l.isra.0>

080228a8 <strtol>:
 80228a8:	4613      	mov	r3, r2
 80228aa:	460a      	mov	r2, r1
 80228ac:	4601      	mov	r1, r0
 80228ae:	4802      	ldr	r0, [pc, #8]	; (80228b8 <strtol+0x10>)
 80228b0:	6800      	ldr	r0, [r0, #0]
 80228b2:	f7ff bf73 	b.w	802279c <_strtol_l.isra.0>
 80228b6:	bf00      	nop
 80228b8:	20000108 	.word	0x20000108

080228bc <_strtoul_l.isra.0>:
 80228bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80228c0:	4e3b      	ldr	r6, [pc, #236]	; (80229b0 <_strtoul_l.isra.0+0xf4>)
 80228c2:	4686      	mov	lr, r0
 80228c4:	468c      	mov	ip, r1
 80228c6:	4660      	mov	r0, ip
 80228c8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80228cc:	5da5      	ldrb	r5, [r4, r6]
 80228ce:	f015 0508 	ands.w	r5, r5, #8
 80228d2:	d1f8      	bne.n	80228c6 <_strtoul_l.isra.0+0xa>
 80228d4:	2c2d      	cmp	r4, #45	; 0x2d
 80228d6:	d134      	bne.n	8022942 <_strtoul_l.isra.0+0x86>
 80228d8:	f89c 4000 	ldrb.w	r4, [ip]
 80228dc:	f04f 0801 	mov.w	r8, #1
 80228e0:	f100 0c02 	add.w	ip, r0, #2
 80228e4:	2b00      	cmp	r3, #0
 80228e6:	d05e      	beq.n	80229a6 <_strtoul_l.isra.0+0xea>
 80228e8:	2b10      	cmp	r3, #16
 80228ea:	d10c      	bne.n	8022906 <_strtoul_l.isra.0+0x4a>
 80228ec:	2c30      	cmp	r4, #48	; 0x30
 80228ee:	d10a      	bne.n	8022906 <_strtoul_l.isra.0+0x4a>
 80228f0:	f89c 0000 	ldrb.w	r0, [ip]
 80228f4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80228f8:	2858      	cmp	r0, #88	; 0x58
 80228fa:	d14f      	bne.n	802299c <_strtoul_l.isra.0+0xe0>
 80228fc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8022900:	2310      	movs	r3, #16
 8022902:	f10c 0c02 	add.w	ip, ip, #2
 8022906:	f04f 37ff 	mov.w	r7, #4294967295
 802290a:	2500      	movs	r5, #0
 802290c:	fbb7 f7f3 	udiv	r7, r7, r3
 8022910:	fb03 f907 	mul.w	r9, r3, r7
 8022914:	ea6f 0909 	mvn.w	r9, r9
 8022918:	4628      	mov	r0, r5
 802291a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 802291e:	2e09      	cmp	r6, #9
 8022920:	d818      	bhi.n	8022954 <_strtoul_l.isra.0+0x98>
 8022922:	4634      	mov	r4, r6
 8022924:	42a3      	cmp	r3, r4
 8022926:	dd24      	ble.n	8022972 <_strtoul_l.isra.0+0xb6>
 8022928:	2d00      	cmp	r5, #0
 802292a:	db1f      	blt.n	802296c <_strtoul_l.isra.0+0xb0>
 802292c:	4287      	cmp	r7, r0
 802292e:	d31d      	bcc.n	802296c <_strtoul_l.isra.0+0xb0>
 8022930:	d101      	bne.n	8022936 <_strtoul_l.isra.0+0x7a>
 8022932:	45a1      	cmp	r9, r4
 8022934:	db1a      	blt.n	802296c <_strtoul_l.isra.0+0xb0>
 8022936:	fb00 4003 	mla	r0, r0, r3, r4
 802293a:	2501      	movs	r5, #1
 802293c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8022940:	e7eb      	b.n	802291a <_strtoul_l.isra.0+0x5e>
 8022942:	2c2b      	cmp	r4, #43	; 0x2b
 8022944:	bf08      	it	eq
 8022946:	f89c 4000 	ldrbeq.w	r4, [ip]
 802294a:	46a8      	mov	r8, r5
 802294c:	bf08      	it	eq
 802294e:	f100 0c02 	addeq.w	ip, r0, #2
 8022952:	e7c7      	b.n	80228e4 <_strtoul_l.isra.0+0x28>
 8022954:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8022958:	2e19      	cmp	r6, #25
 802295a:	d801      	bhi.n	8022960 <_strtoul_l.isra.0+0xa4>
 802295c:	3c37      	subs	r4, #55	; 0x37
 802295e:	e7e1      	b.n	8022924 <_strtoul_l.isra.0+0x68>
 8022960:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8022964:	2e19      	cmp	r6, #25
 8022966:	d804      	bhi.n	8022972 <_strtoul_l.isra.0+0xb6>
 8022968:	3c57      	subs	r4, #87	; 0x57
 802296a:	e7db      	b.n	8022924 <_strtoul_l.isra.0+0x68>
 802296c:	f04f 35ff 	mov.w	r5, #4294967295
 8022970:	e7e4      	b.n	802293c <_strtoul_l.isra.0+0x80>
 8022972:	2d00      	cmp	r5, #0
 8022974:	da07      	bge.n	8022986 <_strtoul_l.isra.0+0xca>
 8022976:	2322      	movs	r3, #34	; 0x22
 8022978:	f8ce 3000 	str.w	r3, [lr]
 802297c:	f04f 30ff 	mov.w	r0, #4294967295
 8022980:	b942      	cbnz	r2, 8022994 <_strtoul_l.isra.0+0xd8>
 8022982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022986:	f1b8 0f00 	cmp.w	r8, #0
 802298a:	d000      	beq.n	802298e <_strtoul_l.isra.0+0xd2>
 802298c:	4240      	negs	r0, r0
 802298e:	2a00      	cmp	r2, #0
 8022990:	d0f7      	beq.n	8022982 <_strtoul_l.isra.0+0xc6>
 8022992:	b10d      	cbz	r5, 8022998 <_strtoul_l.isra.0+0xdc>
 8022994:	f10c 31ff 	add.w	r1, ip, #4294967295
 8022998:	6011      	str	r1, [r2, #0]
 802299a:	e7f2      	b.n	8022982 <_strtoul_l.isra.0+0xc6>
 802299c:	2430      	movs	r4, #48	; 0x30
 802299e:	2b00      	cmp	r3, #0
 80229a0:	d1b1      	bne.n	8022906 <_strtoul_l.isra.0+0x4a>
 80229a2:	2308      	movs	r3, #8
 80229a4:	e7af      	b.n	8022906 <_strtoul_l.isra.0+0x4a>
 80229a6:	2c30      	cmp	r4, #48	; 0x30
 80229a8:	d0a2      	beq.n	80228f0 <_strtoul_l.isra.0+0x34>
 80229aa:	230a      	movs	r3, #10
 80229ac:	e7ab      	b.n	8022906 <_strtoul_l.isra.0+0x4a>
 80229ae:	bf00      	nop
 80229b0:	0802b439 	.word	0x0802b439

080229b4 <_strtoul_r>:
 80229b4:	f7ff bf82 	b.w	80228bc <_strtoul_l.isra.0>

080229b8 <strtoul>:
 80229b8:	4613      	mov	r3, r2
 80229ba:	460a      	mov	r2, r1
 80229bc:	4601      	mov	r1, r0
 80229be:	4802      	ldr	r0, [pc, #8]	; (80229c8 <strtoul+0x10>)
 80229c0:	6800      	ldr	r0, [r0, #0]
 80229c2:	f7ff bf7b 	b.w	80228bc <_strtoul_l.isra.0>
 80229c6:	bf00      	nop
 80229c8:	20000108 	.word	0x20000108

080229cc <__tzcalc_limits>:
 80229cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229d0:	4680      	mov	r8, r0
 80229d2:	f000 fc6d 	bl	80232b0 <__gettzinfo>
 80229d6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80229da:	4598      	cmp	r8, r3
 80229dc:	f340 8098 	ble.w	8022b10 <__tzcalc_limits+0x144>
 80229e0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80229e4:	4443      	add	r3, r8
 80229e6:	109b      	asrs	r3, r3, #2
 80229e8:	f240 126d 	movw	r2, #365	; 0x16d
 80229ec:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80229f0:	fb02 3505 	mla	r5, r2, r5, r3
 80229f4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80229f8:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80229fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8022a00:	441d      	add	r5, r3
 8022a02:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8022a06:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8022a0a:	fb98 f7f3 	sdiv	r7, r8, r3
 8022a0e:	fb03 8717 	mls	r7, r3, r7, r8
 8022a12:	4442      	add	r2, r8
 8022a14:	fab7 fc87 	clz	ip, r7
 8022a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8022a1c:	f008 0303 	and.w	r3, r8, #3
 8022a20:	4415      	add	r5, r2
 8022a22:	2264      	movs	r2, #100	; 0x64
 8022a24:	f8c0 8004 	str.w	r8, [r0, #4]
 8022a28:	fb98 f6f2 	sdiv	r6, r8, r2
 8022a2c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022a30:	fb02 8616 	mls	r6, r2, r6, r8
 8022a34:	4604      	mov	r4, r0
 8022a36:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8022a3a:	9300      	str	r3, [sp, #0]
 8022a3c:	f04f 0e07 	mov.w	lr, #7
 8022a40:	7a22      	ldrb	r2, [r4, #8]
 8022a42:	6963      	ldr	r3, [r4, #20]
 8022a44:	2a4a      	cmp	r2, #74	; 0x4a
 8022a46:	d128      	bne.n	8022a9a <__tzcalc_limits+0xce>
 8022a48:	9900      	ldr	r1, [sp, #0]
 8022a4a:	18ea      	adds	r2, r5, r3
 8022a4c:	b901      	cbnz	r1, 8022a50 <__tzcalc_limits+0x84>
 8022a4e:	b906      	cbnz	r6, 8022a52 <__tzcalc_limits+0x86>
 8022a50:	bb0f      	cbnz	r7, 8022a96 <__tzcalc_limits+0xca>
 8022a52:	2b3b      	cmp	r3, #59	; 0x3b
 8022a54:	bfd4      	ite	le
 8022a56:	2300      	movle	r3, #0
 8022a58:	2301      	movgt	r3, #1
 8022a5a:	4413      	add	r3, r2
 8022a5c:	1e5a      	subs	r2, r3, #1
 8022a5e:	69a3      	ldr	r3, [r4, #24]
 8022a60:	492c      	ldr	r1, [pc, #176]	; (8022b14 <__tzcalc_limits+0x148>)
 8022a62:	fb01 3202 	mla	r2, r1, r2, r3
 8022a66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8022a68:	4413      	add	r3, r2
 8022a6a:	461a      	mov	r2, r3
 8022a6c:	17db      	asrs	r3, r3, #31
 8022a6e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8022a72:	3428      	adds	r4, #40	; 0x28
 8022a74:	45a3      	cmp	fp, r4
 8022a76:	d1e3      	bne.n	8022a40 <__tzcalc_limits+0x74>
 8022a78:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8022a7c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8022a80:	4294      	cmp	r4, r2
 8022a82:	eb75 0303 	sbcs.w	r3, r5, r3
 8022a86:	bfb4      	ite	lt
 8022a88:	2301      	movlt	r3, #1
 8022a8a:	2300      	movge	r3, #0
 8022a8c:	6003      	str	r3, [r0, #0]
 8022a8e:	2001      	movs	r0, #1
 8022a90:	b003      	add	sp, #12
 8022a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a96:	2300      	movs	r3, #0
 8022a98:	e7df      	b.n	8022a5a <__tzcalc_limits+0x8e>
 8022a9a:	2a44      	cmp	r2, #68	; 0x44
 8022a9c:	d101      	bne.n	8022aa2 <__tzcalc_limits+0xd6>
 8022a9e:	18ea      	adds	r2, r5, r3
 8022aa0:	e7dd      	b.n	8022a5e <__tzcalc_limits+0x92>
 8022aa2:	9a00      	ldr	r2, [sp, #0]
 8022aa4:	bb72      	cbnz	r2, 8022b04 <__tzcalc_limits+0x138>
 8022aa6:	2e00      	cmp	r6, #0
 8022aa8:	bf0c      	ite	eq
 8022aaa:	46e0      	moveq	r8, ip
 8022aac:	f04f 0801 	movne.w	r8, #1
 8022ab0:	4919      	ldr	r1, [pc, #100]	; (8022b18 <__tzcalc_limits+0x14c>)
 8022ab2:	68e2      	ldr	r2, [r4, #12]
 8022ab4:	9201      	str	r2, [sp, #4]
 8022ab6:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8022aba:	fb0a 1808 	mla	r8, sl, r8, r1
 8022abe:	462a      	mov	r2, r5
 8022ac0:	f04f 0900 	mov.w	r9, #0
 8022ac4:	f1a8 0804 	sub.w	r8, r8, #4
 8022ac8:	9901      	ldr	r1, [sp, #4]
 8022aca:	f109 0901 	add.w	r9, r9, #1
 8022ace:	4549      	cmp	r1, r9
 8022ad0:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8022ad4:	dc18      	bgt.n	8022b08 <__tzcalc_limits+0x13c>
 8022ad6:	f102 0804 	add.w	r8, r2, #4
 8022ada:	fb98 f9fe 	sdiv	r9, r8, lr
 8022ade:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8022ae2:	eba8 0909 	sub.w	r9, r8, r9
 8022ae6:	ebb3 0909 	subs.w	r9, r3, r9
 8022aea:	6923      	ldr	r3, [r4, #16]
 8022aec:	f103 33ff 	add.w	r3, r3, #4294967295
 8022af0:	bf48      	it	mi
 8022af2:	f109 0907 	addmi.w	r9, r9, #7
 8022af6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8022afa:	444b      	add	r3, r9
 8022afc:	4553      	cmp	r3, sl
 8022afe:	da05      	bge.n	8022b0c <__tzcalc_limits+0x140>
 8022b00:	441a      	add	r2, r3
 8022b02:	e7ac      	b.n	8022a5e <__tzcalc_limits+0x92>
 8022b04:	46e0      	mov	r8, ip
 8022b06:	e7d3      	b.n	8022ab0 <__tzcalc_limits+0xe4>
 8022b08:	4452      	add	r2, sl
 8022b0a:	e7dd      	b.n	8022ac8 <__tzcalc_limits+0xfc>
 8022b0c:	3b07      	subs	r3, #7
 8022b0e:	e7f5      	b.n	8022afc <__tzcalc_limits+0x130>
 8022b10:	2000      	movs	r0, #0
 8022b12:	e7bd      	b.n	8022a90 <__tzcalc_limits+0xc4>
 8022b14:	00015180 	.word	0x00015180
 8022b18:	0802b080 	.word	0x0802b080

08022b1c <__tz_lock>:
 8022b1c:	4801      	ldr	r0, [pc, #4]	; (8022b24 <__tz_lock+0x8>)
 8022b1e:	f7fe be21 	b.w	8021764 <__retarget_lock_acquire>
 8022b22:	bf00      	nop
 8022b24:	2000104f 	.word	0x2000104f

08022b28 <__tz_unlock>:
 8022b28:	4801      	ldr	r0, [pc, #4]	; (8022b30 <__tz_unlock+0x8>)
 8022b2a:	f7fe be1d 	b.w	8021768 <__retarget_lock_release>
 8022b2e:	bf00      	nop
 8022b30:	2000104f 	.word	0x2000104f

08022b34 <_tzset_unlocked>:
 8022b34:	4b01      	ldr	r3, [pc, #4]	; (8022b3c <_tzset_unlocked+0x8>)
 8022b36:	6818      	ldr	r0, [r3, #0]
 8022b38:	f000 b802 	b.w	8022b40 <_tzset_unlocked_r>
 8022b3c:	20000108 	.word	0x20000108

08022b40 <_tzset_unlocked_r>:
 8022b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b44:	b08d      	sub	sp, #52	; 0x34
 8022b46:	4607      	mov	r7, r0
 8022b48:	f000 fbb2 	bl	80232b0 <__gettzinfo>
 8022b4c:	49ae      	ldr	r1, [pc, #696]	; (8022e08 <_tzset_unlocked_r+0x2c8>)
 8022b4e:	4eaf      	ldr	r6, [pc, #700]	; (8022e0c <_tzset_unlocked_r+0x2cc>)
 8022b50:	4605      	mov	r5, r0
 8022b52:	4638      	mov	r0, r7
 8022b54:	f000 fba4 	bl	80232a0 <_getenv_r>
 8022b58:	4604      	mov	r4, r0
 8022b5a:	b970      	cbnz	r0, 8022b7a <_tzset_unlocked_r+0x3a>
 8022b5c:	4bac      	ldr	r3, [pc, #688]	; (8022e10 <_tzset_unlocked_r+0x2d0>)
 8022b5e:	4aad      	ldr	r2, [pc, #692]	; (8022e14 <_tzset_unlocked_r+0x2d4>)
 8022b60:	6018      	str	r0, [r3, #0]
 8022b62:	4bad      	ldr	r3, [pc, #692]	; (8022e18 <_tzset_unlocked_r+0x2d8>)
 8022b64:	6018      	str	r0, [r3, #0]
 8022b66:	4bad      	ldr	r3, [pc, #692]	; (8022e1c <_tzset_unlocked_r+0x2dc>)
 8022b68:	6830      	ldr	r0, [r6, #0]
 8022b6a:	e9c3 2200 	strd	r2, r2, [r3]
 8022b6e:	f7fe fe69 	bl	8021844 <free>
 8022b72:	6034      	str	r4, [r6, #0]
 8022b74:	b00d      	add	sp, #52	; 0x34
 8022b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b7a:	6831      	ldr	r1, [r6, #0]
 8022b7c:	2900      	cmp	r1, #0
 8022b7e:	d15f      	bne.n	8022c40 <_tzset_unlocked_r+0x100>
 8022b80:	6830      	ldr	r0, [r6, #0]
 8022b82:	f7fe fe5f 	bl	8021844 <free>
 8022b86:	4620      	mov	r0, r4
 8022b88:	f7dd fb58 	bl	800023c <strlen>
 8022b8c:	1c41      	adds	r1, r0, #1
 8022b8e:	4638      	mov	r0, r7
 8022b90:	f7fe fed6 	bl	8021940 <_malloc_r>
 8022b94:	6030      	str	r0, [r6, #0]
 8022b96:	2800      	cmp	r0, #0
 8022b98:	d157      	bne.n	8022c4a <_tzset_unlocked_r+0x10a>
 8022b9a:	7823      	ldrb	r3, [r4, #0]
 8022b9c:	4aa0      	ldr	r2, [pc, #640]	; (8022e20 <_tzset_unlocked_r+0x2e0>)
 8022b9e:	49a1      	ldr	r1, [pc, #644]	; (8022e24 <_tzset_unlocked_r+0x2e4>)
 8022ba0:	2b3a      	cmp	r3, #58	; 0x3a
 8022ba2:	bf08      	it	eq
 8022ba4:	3401      	addeq	r4, #1
 8022ba6:	ae0a      	add	r6, sp, #40	; 0x28
 8022ba8:	4633      	mov	r3, r6
 8022baa:	4620      	mov	r0, r4
 8022bac:	f001 f976 	bl	8023e9c <siscanf>
 8022bb0:	2800      	cmp	r0, #0
 8022bb2:	dddf      	ble.n	8022b74 <_tzset_unlocked_r+0x34>
 8022bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022bb6:	18e7      	adds	r7, r4, r3
 8022bb8:	5ce3      	ldrb	r3, [r4, r3]
 8022bba:	2b2d      	cmp	r3, #45	; 0x2d
 8022bbc:	d149      	bne.n	8022c52 <_tzset_unlocked_r+0x112>
 8022bbe:	3701      	adds	r7, #1
 8022bc0:	f04f 34ff 	mov.w	r4, #4294967295
 8022bc4:	f10d 0a20 	add.w	sl, sp, #32
 8022bc8:	f10d 0b1e 	add.w	fp, sp, #30
 8022bcc:	f04f 0800 	mov.w	r8, #0
 8022bd0:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8022bd4:	4994      	ldr	r1, [pc, #592]	; (8022e28 <_tzset_unlocked_r+0x2e8>)
 8022bd6:	9603      	str	r6, [sp, #12]
 8022bd8:	f8cd b000 	str.w	fp, [sp]
 8022bdc:	4633      	mov	r3, r6
 8022bde:	aa07      	add	r2, sp, #28
 8022be0:	4638      	mov	r0, r7
 8022be2:	f8ad 801e 	strh.w	r8, [sp, #30]
 8022be6:	f8ad 8020 	strh.w	r8, [sp, #32]
 8022bea:	f001 f957 	bl	8023e9c <siscanf>
 8022bee:	4540      	cmp	r0, r8
 8022bf0:	ddc0      	ble.n	8022b74 <_tzset_unlocked_r+0x34>
 8022bf2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8022bf6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022bfa:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8022e34 <_tzset_unlocked_r+0x2f4>
 8022bfe:	213c      	movs	r1, #60	; 0x3c
 8022c00:	fb01 2203 	mla	r2, r1, r3, r2
 8022c04:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8022c08:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8022c0c:	fb01 2303 	mla	r3, r1, r3, r2
 8022c10:	435c      	muls	r4, r3
 8022c12:	62ac      	str	r4, [r5, #40]	; 0x28
 8022c14:	4c81      	ldr	r4, [pc, #516]	; (8022e1c <_tzset_unlocked_r+0x2dc>)
 8022c16:	4b82      	ldr	r3, [pc, #520]	; (8022e20 <_tzset_unlocked_r+0x2e0>)
 8022c18:	6023      	str	r3, [r4, #0]
 8022c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022c1c:	4981      	ldr	r1, [pc, #516]	; (8022e24 <_tzset_unlocked_r+0x2e4>)
 8022c1e:	441f      	add	r7, r3
 8022c20:	464a      	mov	r2, r9
 8022c22:	4633      	mov	r3, r6
 8022c24:	4638      	mov	r0, r7
 8022c26:	f001 f939 	bl	8023e9c <siscanf>
 8022c2a:	4540      	cmp	r0, r8
 8022c2c:	dc16      	bgt.n	8022c5c <_tzset_unlocked_r+0x11c>
 8022c2e:	6823      	ldr	r3, [r4, #0]
 8022c30:	6063      	str	r3, [r4, #4]
 8022c32:	4b77      	ldr	r3, [pc, #476]	; (8022e10 <_tzset_unlocked_r+0x2d0>)
 8022c34:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8022c36:	601a      	str	r2, [r3, #0]
 8022c38:	4b77      	ldr	r3, [pc, #476]	; (8022e18 <_tzset_unlocked_r+0x2d8>)
 8022c3a:	f8c3 8000 	str.w	r8, [r3]
 8022c3e:	e799      	b.n	8022b74 <_tzset_unlocked_r+0x34>
 8022c40:	f7dd fb04 	bl	800024c <strcmp>
 8022c44:	2800      	cmp	r0, #0
 8022c46:	d19b      	bne.n	8022b80 <_tzset_unlocked_r+0x40>
 8022c48:	e794      	b.n	8022b74 <_tzset_unlocked_r+0x34>
 8022c4a:	4621      	mov	r1, r4
 8022c4c:	f7ff f829 	bl	8021ca2 <strcpy>
 8022c50:	e7a3      	b.n	8022b9a <_tzset_unlocked_r+0x5a>
 8022c52:	2b2b      	cmp	r3, #43	; 0x2b
 8022c54:	bf08      	it	eq
 8022c56:	3701      	addeq	r7, #1
 8022c58:	2401      	movs	r4, #1
 8022c5a:	e7b3      	b.n	8022bc4 <_tzset_unlocked_r+0x84>
 8022c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022c5e:	f8c4 9004 	str.w	r9, [r4, #4]
 8022c62:	18fc      	adds	r4, r7, r3
 8022c64:	5cfb      	ldrb	r3, [r7, r3]
 8022c66:	2b2d      	cmp	r3, #45	; 0x2d
 8022c68:	f040 808b 	bne.w	8022d82 <_tzset_unlocked_r+0x242>
 8022c6c:	3401      	adds	r4, #1
 8022c6e:	f04f 37ff 	mov.w	r7, #4294967295
 8022c72:	2300      	movs	r3, #0
 8022c74:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022c78:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022c7c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8022c80:	930a      	str	r3, [sp, #40]	; 0x28
 8022c82:	e9cd a602 	strd	sl, r6, [sp, #8]
 8022c86:	e9cd b600 	strd	fp, r6, [sp]
 8022c8a:	4967      	ldr	r1, [pc, #412]	; (8022e28 <_tzset_unlocked_r+0x2e8>)
 8022c8c:	4633      	mov	r3, r6
 8022c8e:	aa07      	add	r2, sp, #28
 8022c90:	4620      	mov	r0, r4
 8022c92:	f001 f903 	bl	8023e9c <siscanf>
 8022c96:	2800      	cmp	r0, #0
 8022c98:	dc78      	bgt.n	8022d8c <_tzset_unlocked_r+0x24c>
 8022c9a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8022c9c:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8022ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ca2:	652f      	str	r7, [r5, #80]	; 0x50
 8022ca4:	441c      	add	r4, r3
 8022ca6:	462f      	mov	r7, r5
 8022ca8:	f04f 0900 	mov.w	r9, #0
 8022cac:	7823      	ldrb	r3, [r4, #0]
 8022cae:	2b2c      	cmp	r3, #44	; 0x2c
 8022cb0:	bf08      	it	eq
 8022cb2:	3401      	addeq	r4, #1
 8022cb4:	f894 8000 	ldrb.w	r8, [r4]
 8022cb8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8022cbc:	d178      	bne.n	8022db0 <_tzset_unlocked_r+0x270>
 8022cbe:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8022cc2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8022cc6:	ab09      	add	r3, sp, #36	; 0x24
 8022cc8:	9300      	str	r3, [sp, #0]
 8022cca:	4958      	ldr	r1, [pc, #352]	; (8022e2c <_tzset_unlocked_r+0x2ec>)
 8022ccc:	9603      	str	r6, [sp, #12]
 8022cce:	4633      	mov	r3, r6
 8022cd0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8022cd4:	4620      	mov	r0, r4
 8022cd6:	f001 f8e1 	bl	8023e9c <siscanf>
 8022cda:	2803      	cmp	r0, #3
 8022cdc:	f47f af4a 	bne.w	8022b74 <_tzset_unlocked_r+0x34>
 8022ce0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8022ce4:	1e4b      	subs	r3, r1, #1
 8022ce6:	2b0b      	cmp	r3, #11
 8022ce8:	f63f af44 	bhi.w	8022b74 <_tzset_unlocked_r+0x34>
 8022cec:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8022cf0:	1e53      	subs	r3, r2, #1
 8022cf2:	2b04      	cmp	r3, #4
 8022cf4:	f63f af3e 	bhi.w	8022b74 <_tzset_unlocked_r+0x34>
 8022cf8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8022cfc:	2b06      	cmp	r3, #6
 8022cfe:	f63f af39 	bhi.w	8022b74 <_tzset_unlocked_r+0x34>
 8022d02:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8022d06:	f887 8008 	strb.w	r8, [r7, #8]
 8022d0a:	617b      	str	r3, [r7, #20]
 8022d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d0e:	eb04 0803 	add.w	r8, r4, r3
 8022d12:	2302      	movs	r3, #2
 8022d14:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022d18:	2300      	movs	r3, #0
 8022d1a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022d1e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8022d22:	930a      	str	r3, [sp, #40]	; 0x28
 8022d24:	f898 3000 	ldrb.w	r3, [r8]
 8022d28:	2b2f      	cmp	r3, #47	; 0x2f
 8022d2a:	d109      	bne.n	8022d40 <_tzset_unlocked_r+0x200>
 8022d2c:	e9cd a602 	strd	sl, r6, [sp, #8]
 8022d30:	e9cd b600 	strd	fp, r6, [sp]
 8022d34:	493e      	ldr	r1, [pc, #248]	; (8022e30 <_tzset_unlocked_r+0x2f0>)
 8022d36:	4633      	mov	r3, r6
 8022d38:	aa07      	add	r2, sp, #28
 8022d3a:	4640      	mov	r0, r8
 8022d3c:	f001 f8ae 	bl	8023e9c <siscanf>
 8022d40:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8022d44:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022d48:	213c      	movs	r1, #60	; 0x3c
 8022d4a:	fb01 2203 	mla	r2, r1, r3, r2
 8022d4e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8022d52:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8022d56:	fb01 2303 	mla	r3, r1, r3, r2
 8022d5a:	61bb      	str	r3, [r7, #24]
 8022d5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022d5e:	3728      	adds	r7, #40	; 0x28
 8022d60:	4444      	add	r4, r8
 8022d62:	f1b9 0f00 	cmp.w	r9, #0
 8022d66:	d020      	beq.n	8022daa <_tzset_unlocked_r+0x26a>
 8022d68:	6868      	ldr	r0, [r5, #4]
 8022d6a:	f7ff fe2f 	bl	80229cc <__tzcalc_limits>
 8022d6e:	4b28      	ldr	r3, [pc, #160]	; (8022e10 <_tzset_unlocked_r+0x2d0>)
 8022d70:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8022d72:	601a      	str	r2, [r3, #0]
 8022d74:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8022d76:	1a9b      	subs	r3, r3, r2
 8022d78:	4a27      	ldr	r2, [pc, #156]	; (8022e18 <_tzset_unlocked_r+0x2d8>)
 8022d7a:	bf18      	it	ne
 8022d7c:	2301      	movne	r3, #1
 8022d7e:	6013      	str	r3, [r2, #0]
 8022d80:	e6f8      	b.n	8022b74 <_tzset_unlocked_r+0x34>
 8022d82:	2b2b      	cmp	r3, #43	; 0x2b
 8022d84:	bf08      	it	eq
 8022d86:	3401      	addeq	r4, #1
 8022d88:	2701      	movs	r7, #1
 8022d8a:	e772      	b.n	8022c72 <_tzset_unlocked_r+0x132>
 8022d8c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8022d90:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022d94:	213c      	movs	r1, #60	; 0x3c
 8022d96:	fb01 2203 	mla	r2, r1, r3, r2
 8022d9a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8022d9e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8022da2:	fb01 2303 	mla	r3, r1, r3, r2
 8022da6:	435f      	muls	r7, r3
 8022da8:	e77a      	b.n	8022ca0 <_tzset_unlocked_r+0x160>
 8022daa:	f04f 0901 	mov.w	r9, #1
 8022dae:	e77d      	b.n	8022cac <_tzset_unlocked_r+0x16c>
 8022db0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8022db4:	bf06      	itte	eq
 8022db6:	3401      	addeq	r4, #1
 8022db8:	4643      	moveq	r3, r8
 8022dba:	2344      	movne	r3, #68	; 0x44
 8022dbc:	220a      	movs	r2, #10
 8022dbe:	a90b      	add	r1, sp, #44	; 0x2c
 8022dc0:	4620      	mov	r0, r4
 8022dc2:	9305      	str	r3, [sp, #20]
 8022dc4:	f7ff fdf8 	bl	80229b8 <strtoul>
 8022dc8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8022dcc:	9b05      	ldr	r3, [sp, #20]
 8022dce:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8022dd2:	45a0      	cmp	r8, r4
 8022dd4:	d114      	bne.n	8022e00 <_tzset_unlocked_r+0x2c0>
 8022dd6:	234d      	movs	r3, #77	; 0x4d
 8022dd8:	f1b9 0f00 	cmp.w	r9, #0
 8022ddc:	d107      	bne.n	8022dee <_tzset_unlocked_r+0x2ae>
 8022dde:	722b      	strb	r3, [r5, #8]
 8022de0:	2103      	movs	r1, #3
 8022de2:	2302      	movs	r3, #2
 8022de4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8022de8:	f8c5 9014 	str.w	r9, [r5, #20]
 8022dec:	e791      	b.n	8022d12 <_tzset_unlocked_r+0x1d2>
 8022dee:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8022df2:	220b      	movs	r2, #11
 8022df4:	2301      	movs	r3, #1
 8022df6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8022dfa:	2300      	movs	r3, #0
 8022dfc:	63eb      	str	r3, [r5, #60]	; 0x3c
 8022dfe:	e788      	b.n	8022d12 <_tzset_unlocked_r+0x1d2>
 8022e00:	b280      	uxth	r0, r0
 8022e02:	723b      	strb	r3, [r7, #8]
 8022e04:	6178      	str	r0, [r7, #20]
 8022e06:	e784      	b.n	8022d12 <_tzset_unlocked_r+0x1d2>
 8022e08:	0802b3c0 	.word	0x0802b3c0
 8022e0c:	20000fa8 	.word	0x20000fa8
 8022e10:	20000fb0 	.word	0x20000fb0
 8022e14:	0802b3c3 	.word	0x0802b3c3
 8022e18:	20000fac 	.word	0x20000fac
 8022e1c:	2000016c 	.word	0x2000016c
 8022e20:	20000f9b 	.word	0x20000f9b
 8022e24:	0802b3c7 	.word	0x0802b3c7
 8022e28:	0802b3ea 	.word	0x0802b3ea
 8022e2c:	0802b3d6 	.word	0x0802b3d6
 8022e30:	0802b3e9 	.word	0x0802b3e9
 8022e34:	20000f90 	.word	0x20000f90

08022e38 <_vsniprintf_r>:
 8022e38:	b530      	push	{r4, r5, lr}
 8022e3a:	1e14      	subs	r4, r2, #0
 8022e3c:	4605      	mov	r5, r0
 8022e3e:	b09b      	sub	sp, #108	; 0x6c
 8022e40:	4618      	mov	r0, r3
 8022e42:	da05      	bge.n	8022e50 <_vsniprintf_r+0x18>
 8022e44:	238b      	movs	r3, #139	; 0x8b
 8022e46:	602b      	str	r3, [r5, #0]
 8022e48:	f04f 30ff 	mov.w	r0, #4294967295
 8022e4c:	b01b      	add	sp, #108	; 0x6c
 8022e4e:	bd30      	pop	{r4, r5, pc}
 8022e50:	f44f 7302 	mov.w	r3, #520	; 0x208
 8022e54:	f8ad 300c 	strh.w	r3, [sp, #12]
 8022e58:	bf14      	ite	ne
 8022e5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8022e5e:	4623      	moveq	r3, r4
 8022e60:	9302      	str	r3, [sp, #8]
 8022e62:	9305      	str	r3, [sp, #20]
 8022e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022e68:	9100      	str	r1, [sp, #0]
 8022e6a:	9104      	str	r1, [sp, #16]
 8022e6c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022e70:	4602      	mov	r2, r0
 8022e72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022e74:	4669      	mov	r1, sp
 8022e76:	4628      	mov	r0, r5
 8022e78:	f000 fb94 	bl	80235a4 <_svfiprintf_r>
 8022e7c:	1c43      	adds	r3, r0, #1
 8022e7e:	bfbc      	itt	lt
 8022e80:	238b      	movlt	r3, #139	; 0x8b
 8022e82:	602b      	strlt	r3, [r5, #0]
 8022e84:	2c00      	cmp	r4, #0
 8022e86:	d0e1      	beq.n	8022e4c <_vsniprintf_r+0x14>
 8022e88:	9b00      	ldr	r3, [sp, #0]
 8022e8a:	2200      	movs	r2, #0
 8022e8c:	701a      	strb	r2, [r3, #0]
 8022e8e:	e7dd      	b.n	8022e4c <_vsniprintf_r+0x14>

08022e90 <vsniprintf>:
 8022e90:	b507      	push	{r0, r1, r2, lr}
 8022e92:	9300      	str	r3, [sp, #0]
 8022e94:	4613      	mov	r3, r2
 8022e96:	460a      	mov	r2, r1
 8022e98:	4601      	mov	r1, r0
 8022e9a:	4803      	ldr	r0, [pc, #12]	; (8022ea8 <vsniprintf+0x18>)
 8022e9c:	6800      	ldr	r0, [r0, #0]
 8022e9e:	f7ff ffcb 	bl	8022e38 <_vsniprintf_r>
 8022ea2:	b003      	add	sp, #12
 8022ea4:	f85d fb04 	ldr.w	pc, [sp], #4
 8022ea8:	20000108 	.word	0x20000108

08022eac <__swbuf_r>:
 8022eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022eae:	460e      	mov	r6, r1
 8022eb0:	4614      	mov	r4, r2
 8022eb2:	4605      	mov	r5, r0
 8022eb4:	b118      	cbz	r0, 8022ebe <__swbuf_r+0x12>
 8022eb6:	6983      	ldr	r3, [r0, #24]
 8022eb8:	b90b      	cbnz	r3, 8022ebe <__swbuf_r+0x12>
 8022eba:	f7fe f8a1 	bl	8021000 <__sinit>
 8022ebe:	4b21      	ldr	r3, [pc, #132]	; (8022f44 <__swbuf_r+0x98>)
 8022ec0:	429c      	cmp	r4, r3
 8022ec2:	d12b      	bne.n	8022f1c <__swbuf_r+0x70>
 8022ec4:	686c      	ldr	r4, [r5, #4]
 8022ec6:	69a3      	ldr	r3, [r4, #24]
 8022ec8:	60a3      	str	r3, [r4, #8]
 8022eca:	89a3      	ldrh	r3, [r4, #12]
 8022ecc:	071a      	lsls	r2, r3, #28
 8022ece:	d52f      	bpl.n	8022f30 <__swbuf_r+0x84>
 8022ed0:	6923      	ldr	r3, [r4, #16]
 8022ed2:	b36b      	cbz	r3, 8022f30 <__swbuf_r+0x84>
 8022ed4:	6923      	ldr	r3, [r4, #16]
 8022ed6:	6820      	ldr	r0, [r4, #0]
 8022ed8:	1ac0      	subs	r0, r0, r3
 8022eda:	6963      	ldr	r3, [r4, #20]
 8022edc:	b2f6      	uxtb	r6, r6
 8022ede:	4283      	cmp	r3, r0
 8022ee0:	4637      	mov	r7, r6
 8022ee2:	dc04      	bgt.n	8022eee <__swbuf_r+0x42>
 8022ee4:	4621      	mov	r1, r4
 8022ee6:	4628      	mov	r0, r5
 8022ee8:	f7fd ffe4 	bl	8020eb4 <_fflush_r>
 8022eec:	bb30      	cbnz	r0, 8022f3c <__swbuf_r+0x90>
 8022eee:	68a3      	ldr	r3, [r4, #8]
 8022ef0:	3b01      	subs	r3, #1
 8022ef2:	60a3      	str	r3, [r4, #8]
 8022ef4:	6823      	ldr	r3, [r4, #0]
 8022ef6:	1c5a      	adds	r2, r3, #1
 8022ef8:	6022      	str	r2, [r4, #0]
 8022efa:	701e      	strb	r6, [r3, #0]
 8022efc:	6963      	ldr	r3, [r4, #20]
 8022efe:	3001      	adds	r0, #1
 8022f00:	4283      	cmp	r3, r0
 8022f02:	d004      	beq.n	8022f0e <__swbuf_r+0x62>
 8022f04:	89a3      	ldrh	r3, [r4, #12]
 8022f06:	07db      	lsls	r3, r3, #31
 8022f08:	d506      	bpl.n	8022f18 <__swbuf_r+0x6c>
 8022f0a:	2e0a      	cmp	r6, #10
 8022f0c:	d104      	bne.n	8022f18 <__swbuf_r+0x6c>
 8022f0e:	4621      	mov	r1, r4
 8022f10:	4628      	mov	r0, r5
 8022f12:	f7fd ffcf 	bl	8020eb4 <_fflush_r>
 8022f16:	b988      	cbnz	r0, 8022f3c <__swbuf_r+0x90>
 8022f18:	4638      	mov	r0, r7
 8022f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022f1c:	4b0a      	ldr	r3, [pc, #40]	; (8022f48 <__swbuf_r+0x9c>)
 8022f1e:	429c      	cmp	r4, r3
 8022f20:	d101      	bne.n	8022f26 <__swbuf_r+0x7a>
 8022f22:	68ac      	ldr	r4, [r5, #8]
 8022f24:	e7cf      	b.n	8022ec6 <__swbuf_r+0x1a>
 8022f26:	4b09      	ldr	r3, [pc, #36]	; (8022f4c <__swbuf_r+0xa0>)
 8022f28:	429c      	cmp	r4, r3
 8022f2a:	bf08      	it	eq
 8022f2c:	68ec      	ldreq	r4, [r5, #12]
 8022f2e:	e7ca      	b.n	8022ec6 <__swbuf_r+0x1a>
 8022f30:	4621      	mov	r1, r4
 8022f32:	4628      	mov	r0, r5
 8022f34:	f000 f81e 	bl	8022f74 <__swsetup_r>
 8022f38:	2800      	cmp	r0, #0
 8022f3a:	d0cb      	beq.n	8022ed4 <__swbuf_r+0x28>
 8022f3c:	f04f 37ff 	mov.w	r7, #4294967295
 8022f40:	e7ea      	b.n	8022f18 <__swbuf_r+0x6c>
 8022f42:	bf00      	nop
 8022f44:	0802afc4 	.word	0x0802afc4
 8022f48:	0802afe4 	.word	0x0802afe4
 8022f4c:	0802afa4 	.word	0x0802afa4

08022f50 <_write_r>:
 8022f50:	b538      	push	{r3, r4, r5, lr}
 8022f52:	4d07      	ldr	r5, [pc, #28]	; (8022f70 <_write_r+0x20>)
 8022f54:	4604      	mov	r4, r0
 8022f56:	4608      	mov	r0, r1
 8022f58:	4611      	mov	r1, r2
 8022f5a:	2200      	movs	r2, #0
 8022f5c:	602a      	str	r2, [r5, #0]
 8022f5e:	461a      	mov	r2, r3
 8022f60:	f7dd ff6e 	bl	8000e40 <_write>
 8022f64:	1c43      	adds	r3, r0, #1
 8022f66:	d102      	bne.n	8022f6e <_write_r+0x1e>
 8022f68:	682b      	ldr	r3, [r5, #0]
 8022f6a:	b103      	cbz	r3, 8022f6e <_write_r+0x1e>
 8022f6c:	6023      	str	r3, [r4, #0]
 8022f6e:	bd38      	pop	{r3, r4, r5, pc}
 8022f70:	20001054 	.word	0x20001054

08022f74 <__swsetup_r>:
 8022f74:	4b32      	ldr	r3, [pc, #200]	; (8023040 <__swsetup_r+0xcc>)
 8022f76:	b570      	push	{r4, r5, r6, lr}
 8022f78:	681d      	ldr	r5, [r3, #0]
 8022f7a:	4606      	mov	r6, r0
 8022f7c:	460c      	mov	r4, r1
 8022f7e:	b125      	cbz	r5, 8022f8a <__swsetup_r+0x16>
 8022f80:	69ab      	ldr	r3, [r5, #24]
 8022f82:	b913      	cbnz	r3, 8022f8a <__swsetup_r+0x16>
 8022f84:	4628      	mov	r0, r5
 8022f86:	f7fe f83b 	bl	8021000 <__sinit>
 8022f8a:	4b2e      	ldr	r3, [pc, #184]	; (8023044 <__swsetup_r+0xd0>)
 8022f8c:	429c      	cmp	r4, r3
 8022f8e:	d10f      	bne.n	8022fb0 <__swsetup_r+0x3c>
 8022f90:	686c      	ldr	r4, [r5, #4]
 8022f92:	89a3      	ldrh	r3, [r4, #12]
 8022f94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022f98:	0719      	lsls	r1, r3, #28
 8022f9a:	d42c      	bmi.n	8022ff6 <__swsetup_r+0x82>
 8022f9c:	06dd      	lsls	r5, r3, #27
 8022f9e:	d411      	bmi.n	8022fc4 <__swsetup_r+0x50>
 8022fa0:	2309      	movs	r3, #9
 8022fa2:	6033      	str	r3, [r6, #0]
 8022fa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022fa8:	81a3      	strh	r3, [r4, #12]
 8022faa:	f04f 30ff 	mov.w	r0, #4294967295
 8022fae:	e03e      	b.n	802302e <__swsetup_r+0xba>
 8022fb0:	4b25      	ldr	r3, [pc, #148]	; (8023048 <__swsetup_r+0xd4>)
 8022fb2:	429c      	cmp	r4, r3
 8022fb4:	d101      	bne.n	8022fba <__swsetup_r+0x46>
 8022fb6:	68ac      	ldr	r4, [r5, #8]
 8022fb8:	e7eb      	b.n	8022f92 <__swsetup_r+0x1e>
 8022fba:	4b24      	ldr	r3, [pc, #144]	; (802304c <__swsetup_r+0xd8>)
 8022fbc:	429c      	cmp	r4, r3
 8022fbe:	bf08      	it	eq
 8022fc0:	68ec      	ldreq	r4, [r5, #12]
 8022fc2:	e7e6      	b.n	8022f92 <__swsetup_r+0x1e>
 8022fc4:	0758      	lsls	r0, r3, #29
 8022fc6:	d512      	bpl.n	8022fee <__swsetup_r+0x7a>
 8022fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022fca:	b141      	cbz	r1, 8022fde <__swsetup_r+0x6a>
 8022fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022fd0:	4299      	cmp	r1, r3
 8022fd2:	d002      	beq.n	8022fda <__swsetup_r+0x66>
 8022fd4:	4630      	mov	r0, r6
 8022fd6:	f7fe fc63 	bl	80218a0 <_free_r>
 8022fda:	2300      	movs	r3, #0
 8022fdc:	6363      	str	r3, [r4, #52]	; 0x34
 8022fde:	89a3      	ldrh	r3, [r4, #12]
 8022fe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022fe4:	81a3      	strh	r3, [r4, #12]
 8022fe6:	2300      	movs	r3, #0
 8022fe8:	6063      	str	r3, [r4, #4]
 8022fea:	6923      	ldr	r3, [r4, #16]
 8022fec:	6023      	str	r3, [r4, #0]
 8022fee:	89a3      	ldrh	r3, [r4, #12]
 8022ff0:	f043 0308 	orr.w	r3, r3, #8
 8022ff4:	81a3      	strh	r3, [r4, #12]
 8022ff6:	6923      	ldr	r3, [r4, #16]
 8022ff8:	b94b      	cbnz	r3, 802300e <__swsetup_r+0x9a>
 8022ffa:	89a3      	ldrh	r3, [r4, #12]
 8022ffc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023004:	d003      	beq.n	802300e <__swsetup_r+0x9a>
 8023006:	4621      	mov	r1, r4
 8023008:	4630      	mov	r0, r6
 802300a:	f7fe fbd3 	bl	80217b4 <__smakebuf_r>
 802300e:	89a0      	ldrh	r0, [r4, #12]
 8023010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023014:	f010 0301 	ands.w	r3, r0, #1
 8023018:	d00a      	beq.n	8023030 <__swsetup_r+0xbc>
 802301a:	2300      	movs	r3, #0
 802301c:	60a3      	str	r3, [r4, #8]
 802301e:	6963      	ldr	r3, [r4, #20]
 8023020:	425b      	negs	r3, r3
 8023022:	61a3      	str	r3, [r4, #24]
 8023024:	6923      	ldr	r3, [r4, #16]
 8023026:	b943      	cbnz	r3, 802303a <__swsetup_r+0xc6>
 8023028:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802302c:	d1ba      	bne.n	8022fa4 <__swsetup_r+0x30>
 802302e:	bd70      	pop	{r4, r5, r6, pc}
 8023030:	0781      	lsls	r1, r0, #30
 8023032:	bf58      	it	pl
 8023034:	6963      	ldrpl	r3, [r4, #20]
 8023036:	60a3      	str	r3, [r4, #8]
 8023038:	e7f4      	b.n	8023024 <__swsetup_r+0xb0>
 802303a:	2000      	movs	r0, #0
 802303c:	e7f7      	b.n	802302e <__swsetup_r+0xba>
 802303e:	bf00      	nop
 8023040:	20000108 	.word	0x20000108
 8023044:	0802afc4 	.word	0x0802afc4
 8023048:	0802afe4 	.word	0x0802afe4
 802304c:	0802afa4 	.word	0x0802afa4

08023050 <__register_exitproc>:
 8023050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023054:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8023110 <__register_exitproc+0xc0>
 8023058:	4606      	mov	r6, r0
 802305a:	f8d8 0000 	ldr.w	r0, [r8]
 802305e:	461f      	mov	r7, r3
 8023060:	460d      	mov	r5, r1
 8023062:	4691      	mov	r9, r2
 8023064:	f7fe fb7f 	bl	8021766 <__retarget_lock_acquire_recursive>
 8023068:	4b25      	ldr	r3, [pc, #148]	; (8023100 <__register_exitproc+0xb0>)
 802306a:	681c      	ldr	r4, [r3, #0]
 802306c:	b934      	cbnz	r4, 802307c <__register_exitproc+0x2c>
 802306e:	4c25      	ldr	r4, [pc, #148]	; (8023104 <__register_exitproc+0xb4>)
 8023070:	601c      	str	r4, [r3, #0]
 8023072:	4b25      	ldr	r3, [pc, #148]	; (8023108 <__register_exitproc+0xb8>)
 8023074:	b113      	cbz	r3, 802307c <__register_exitproc+0x2c>
 8023076:	681b      	ldr	r3, [r3, #0]
 8023078:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802307c:	6863      	ldr	r3, [r4, #4]
 802307e:	2b1f      	cmp	r3, #31
 8023080:	dd07      	ble.n	8023092 <__register_exitproc+0x42>
 8023082:	f8d8 0000 	ldr.w	r0, [r8]
 8023086:	f7fe fb70 	bl	802176a <__retarget_lock_release_recursive>
 802308a:	f04f 30ff 	mov.w	r0, #4294967295
 802308e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023092:	b34e      	cbz	r6, 80230e8 <__register_exitproc+0x98>
 8023094:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8023098:	b988      	cbnz	r0, 80230be <__register_exitproc+0x6e>
 802309a:	4b1c      	ldr	r3, [pc, #112]	; (802310c <__register_exitproc+0xbc>)
 802309c:	b923      	cbnz	r3, 80230a8 <__register_exitproc+0x58>
 802309e:	f8d8 0000 	ldr.w	r0, [r8]
 80230a2:	f7fe fb61 	bl	8021768 <__retarget_lock_release>
 80230a6:	e7f0      	b.n	802308a <__register_exitproc+0x3a>
 80230a8:	f44f 7084 	mov.w	r0, #264	; 0x108
 80230ac:	f7fe fbc2 	bl	8021834 <malloc>
 80230b0:	2800      	cmp	r0, #0
 80230b2:	d0f4      	beq.n	802309e <__register_exitproc+0x4e>
 80230b4:	2300      	movs	r3, #0
 80230b6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80230ba:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80230be:	6863      	ldr	r3, [r4, #4]
 80230c0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80230c4:	2201      	movs	r2, #1
 80230c6:	409a      	lsls	r2, r3
 80230c8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80230cc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80230d0:	4313      	orrs	r3, r2
 80230d2:	2e02      	cmp	r6, #2
 80230d4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80230d8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80230dc:	bf02      	ittt	eq
 80230de:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80230e2:	431a      	orreq	r2, r3
 80230e4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80230e8:	6863      	ldr	r3, [r4, #4]
 80230ea:	f8d8 0000 	ldr.w	r0, [r8]
 80230ee:	1c5a      	adds	r2, r3, #1
 80230f0:	3302      	adds	r3, #2
 80230f2:	6062      	str	r2, [r4, #4]
 80230f4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80230f8:	f7fe fb37 	bl	802176a <__retarget_lock_release_recursive>
 80230fc:	2000      	movs	r0, #0
 80230fe:	e7c6      	b.n	802308e <__register_exitproc+0x3e>
 8023100:	20001040 	.word	0x20001040
 8023104:	20000fb4 	.word	0x20000fb4
 8023108:	00000000 	.word	0x00000000
 802310c:	08021835 	.word	0x08021835
 8023110:	20000174 	.word	0x20000174

08023114 <abs>:
 8023114:	2800      	cmp	r0, #0
 8023116:	bfb8      	it	lt
 8023118:	4240      	neglt	r0, r0
 802311a:	4770      	bx	lr

0802311c <__assert_func>:
 802311c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802311e:	4614      	mov	r4, r2
 8023120:	461a      	mov	r2, r3
 8023122:	4b09      	ldr	r3, [pc, #36]	; (8023148 <__assert_func+0x2c>)
 8023124:	681b      	ldr	r3, [r3, #0]
 8023126:	4605      	mov	r5, r0
 8023128:	68d8      	ldr	r0, [r3, #12]
 802312a:	b14c      	cbz	r4, 8023140 <__assert_func+0x24>
 802312c:	4b07      	ldr	r3, [pc, #28]	; (802314c <__assert_func+0x30>)
 802312e:	9100      	str	r1, [sp, #0]
 8023130:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023134:	4906      	ldr	r1, [pc, #24]	; (8023150 <__assert_func+0x34>)
 8023136:	462b      	mov	r3, r5
 8023138:	f000 f854 	bl	80231e4 <fiprintf>
 802313c:	f7fd fda0 	bl	8020c80 <abort>
 8023140:	4b04      	ldr	r3, [pc, #16]	; (8023154 <__assert_func+0x38>)
 8023142:	461c      	mov	r4, r3
 8023144:	e7f3      	b.n	802312e <__assert_func+0x12>
 8023146:	bf00      	nop
 8023148:	20000108 	.word	0x20000108
 802314c:	0802b3fc 	.word	0x0802b3fc
 8023150:	0802b409 	.word	0x0802b409
 8023154:	0802b437 	.word	0x0802b437

08023158 <_close_r>:
 8023158:	b538      	push	{r3, r4, r5, lr}
 802315a:	4d06      	ldr	r5, [pc, #24]	; (8023174 <_close_r+0x1c>)
 802315c:	2300      	movs	r3, #0
 802315e:	4604      	mov	r4, r0
 8023160:	4608      	mov	r0, r1
 8023162:	602b      	str	r3, [r5, #0]
 8023164:	f7dd fe88 	bl	8000e78 <_close>
 8023168:	1c43      	adds	r3, r0, #1
 802316a:	d102      	bne.n	8023172 <_close_r+0x1a>
 802316c:	682b      	ldr	r3, [r5, #0]
 802316e:	b103      	cbz	r3, 8023172 <_close_r+0x1a>
 8023170:	6023      	str	r3, [r4, #0]
 8023172:	bd38      	pop	{r3, r4, r5, pc}
 8023174:	20001054 	.word	0x20001054

08023178 <__sflags>:
 8023178:	780b      	ldrb	r3, [r1, #0]
 802317a:	2b72      	cmp	r3, #114	; 0x72
 802317c:	b530      	push	{r4, r5, lr}
 802317e:	d022      	beq.n	80231c6 <__sflags+0x4e>
 8023180:	2b77      	cmp	r3, #119	; 0x77
 8023182:	d024      	beq.n	80231ce <__sflags+0x56>
 8023184:	2b61      	cmp	r3, #97	; 0x61
 8023186:	d027      	beq.n	80231d8 <__sflags+0x60>
 8023188:	2316      	movs	r3, #22
 802318a:	6003      	str	r3, [r0, #0]
 802318c:	2000      	movs	r0, #0
 802318e:	bd30      	pop	{r4, r5, pc}
 8023190:	2d62      	cmp	r5, #98	; 0x62
 8023192:	d012      	beq.n	80231ba <__sflags+0x42>
 8023194:	2d78      	cmp	r5, #120	; 0x78
 8023196:	d013      	beq.n	80231c0 <__sflags+0x48>
 8023198:	2d2b      	cmp	r5, #43	; 0x2b
 802319a:	d107      	bne.n	80231ac <__sflags+0x34>
 802319c:	f020 001c 	bic.w	r0, r0, #28
 80231a0:	f023 0303 	bic.w	r3, r3, #3
 80231a4:	f040 0010 	orr.w	r0, r0, #16
 80231a8:	f043 0302 	orr.w	r3, r3, #2
 80231ac:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80231b0:	2d00      	cmp	r5, #0
 80231b2:	d1ed      	bne.n	8023190 <__sflags+0x18>
 80231b4:	4323      	orrs	r3, r4
 80231b6:	6013      	str	r3, [r2, #0]
 80231b8:	e7e9      	b.n	802318e <__sflags+0x16>
 80231ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80231be:	e7f5      	b.n	80231ac <__sflags+0x34>
 80231c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80231c4:	e7f2      	b.n	80231ac <__sflags+0x34>
 80231c6:	2400      	movs	r4, #0
 80231c8:	4623      	mov	r3, r4
 80231ca:	2004      	movs	r0, #4
 80231cc:	e7ee      	b.n	80231ac <__sflags+0x34>
 80231ce:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 80231d2:	2301      	movs	r3, #1
 80231d4:	2008      	movs	r0, #8
 80231d6:	e7e9      	b.n	80231ac <__sflags+0x34>
 80231d8:	f44f 7402 	mov.w	r4, #520	; 0x208
 80231dc:	2301      	movs	r3, #1
 80231de:	f44f 7084 	mov.w	r0, #264	; 0x108
 80231e2:	e7e3      	b.n	80231ac <__sflags+0x34>

080231e4 <fiprintf>:
 80231e4:	b40e      	push	{r1, r2, r3}
 80231e6:	b503      	push	{r0, r1, lr}
 80231e8:	4601      	mov	r1, r0
 80231ea:	ab03      	add	r3, sp, #12
 80231ec:	4805      	ldr	r0, [pc, #20]	; (8023204 <fiprintf+0x20>)
 80231ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80231f2:	6800      	ldr	r0, [r0, #0]
 80231f4:	9301      	str	r3, [sp, #4]
 80231f6:	f000 faff 	bl	80237f8 <_vfiprintf_r>
 80231fa:	b002      	add	sp, #8
 80231fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8023200:	b003      	add	sp, #12
 8023202:	4770      	bx	lr
 8023204:	20000108 	.word	0x20000108

08023208 <_fstat_r>:
 8023208:	b538      	push	{r3, r4, r5, lr}
 802320a:	4d07      	ldr	r5, [pc, #28]	; (8023228 <_fstat_r+0x20>)
 802320c:	2300      	movs	r3, #0
 802320e:	4604      	mov	r4, r0
 8023210:	4608      	mov	r0, r1
 8023212:	4611      	mov	r1, r2
 8023214:	602b      	str	r3, [r5, #0]
 8023216:	f7dd fe3b 	bl	8000e90 <_fstat>
 802321a:	1c43      	adds	r3, r0, #1
 802321c:	d102      	bne.n	8023224 <_fstat_r+0x1c>
 802321e:	682b      	ldr	r3, [r5, #0]
 8023220:	b103      	cbz	r3, 8023224 <_fstat_r+0x1c>
 8023222:	6023      	str	r3, [r4, #0]
 8023224:	bd38      	pop	{r3, r4, r5, pc}
 8023226:	bf00      	nop
 8023228:	20001054 	.word	0x20001054

0802322c <_findenv_r>:
 802322c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023230:	4607      	mov	r7, r0
 8023232:	4689      	mov	r9, r1
 8023234:	4616      	mov	r6, r2
 8023236:	f000 fe7d 	bl	8023f34 <__env_lock>
 802323a:	4b18      	ldr	r3, [pc, #96]	; (802329c <_findenv_r+0x70>)
 802323c:	681c      	ldr	r4, [r3, #0]
 802323e:	469a      	mov	sl, r3
 8023240:	b134      	cbz	r4, 8023250 <_findenv_r+0x24>
 8023242:	464b      	mov	r3, r9
 8023244:	4698      	mov	r8, r3
 8023246:	f813 1b01 	ldrb.w	r1, [r3], #1
 802324a:	b139      	cbz	r1, 802325c <_findenv_r+0x30>
 802324c:	293d      	cmp	r1, #61	; 0x3d
 802324e:	d1f9      	bne.n	8023244 <_findenv_r+0x18>
 8023250:	4638      	mov	r0, r7
 8023252:	f000 fe75 	bl	8023f40 <__env_unlock>
 8023256:	2000      	movs	r0, #0
 8023258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802325c:	eba8 0809 	sub.w	r8, r8, r9
 8023260:	46a3      	mov	fp, r4
 8023262:	f854 0b04 	ldr.w	r0, [r4], #4
 8023266:	2800      	cmp	r0, #0
 8023268:	d0f2      	beq.n	8023250 <_findenv_r+0x24>
 802326a:	4642      	mov	r2, r8
 802326c:	4649      	mov	r1, r9
 802326e:	f000 fe41 	bl	8023ef4 <strncmp>
 8023272:	2800      	cmp	r0, #0
 8023274:	d1f4      	bne.n	8023260 <_findenv_r+0x34>
 8023276:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802327a:	eb03 0508 	add.w	r5, r3, r8
 802327e:	f813 3008 	ldrb.w	r3, [r3, r8]
 8023282:	2b3d      	cmp	r3, #61	; 0x3d
 8023284:	d1ec      	bne.n	8023260 <_findenv_r+0x34>
 8023286:	f8da 3000 	ldr.w	r3, [sl]
 802328a:	ebab 0303 	sub.w	r3, fp, r3
 802328e:	109b      	asrs	r3, r3, #2
 8023290:	4638      	mov	r0, r7
 8023292:	6033      	str	r3, [r6, #0]
 8023294:	f000 fe54 	bl	8023f40 <__env_unlock>
 8023298:	1c68      	adds	r0, r5, #1
 802329a:	e7dd      	b.n	8023258 <_findenv_r+0x2c>
 802329c:	20000000 	.word	0x20000000

080232a0 <_getenv_r>:
 80232a0:	b507      	push	{r0, r1, r2, lr}
 80232a2:	aa01      	add	r2, sp, #4
 80232a4:	f7ff ffc2 	bl	802322c <_findenv_r>
 80232a8:	b003      	add	sp, #12
 80232aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080232b0 <__gettzinfo>:
 80232b0:	4800      	ldr	r0, [pc, #0]	; (80232b4 <__gettzinfo+0x4>)
 80232b2:	4770      	bx	lr
 80232b4:	20000178 	.word	0x20000178

080232b8 <gmtime_r>:
 80232b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80232bc:	e9d0 6700 	ldrd	r6, r7, [r0]
 80232c0:	460c      	mov	r4, r1
 80232c2:	4a51      	ldr	r2, [pc, #324]	; (8023408 <gmtime_r+0x150>)
 80232c4:	2300      	movs	r3, #0
 80232c6:	4630      	mov	r0, r6
 80232c8:	4639      	mov	r1, r7
 80232ca:	f7dd fa73 	bl	80007b4 <__aeabi_ldivmod>
 80232ce:	4639      	mov	r1, r7
 80232d0:	4605      	mov	r5, r0
 80232d2:	4a4d      	ldr	r2, [pc, #308]	; (8023408 <gmtime_r+0x150>)
 80232d4:	4630      	mov	r0, r6
 80232d6:	2300      	movs	r3, #0
 80232d8:	f7dd fa6c 	bl	80007b4 <__aeabi_ldivmod>
 80232dc:	2a00      	cmp	r2, #0
 80232de:	bfbc      	itt	lt
 80232e0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80232e4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80232e8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80232ec:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80232f0:	fbb2 f3f1 	udiv	r3, r2, r1
 80232f4:	fb01 2213 	mls	r2, r1, r3, r2
 80232f8:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80232fc:	bfac      	ite	ge
 80232fe:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8023302:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8023306:	60a3      	str	r3, [r4, #8]
 8023308:	fbb2 f3f1 	udiv	r3, r2, r1
 802330c:	fb01 2213 	mls	r2, r1, r3, r2
 8023310:	6063      	str	r3, [r4, #4]
 8023312:	6022      	str	r2, [r4, #0]
 8023314:	1cc3      	adds	r3, r0, #3
 8023316:	2207      	movs	r2, #7
 8023318:	fb93 f2f2 	sdiv	r2, r3, r2
 802331c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8023320:	1a9b      	subs	r3, r3, r2
 8023322:	bf48      	it	mi
 8023324:	3307      	addmi	r3, #7
 8023326:	2800      	cmp	r0, #0
 8023328:	61a3      	str	r3, [r4, #24]
 802332a:	bfb8      	it	lt
 802332c:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8023330:	4936      	ldr	r1, [pc, #216]	; (802340c <gmtime_r+0x154>)
 8023332:	bfae      	itee	ge
 8023334:	fb90 f1f1 	sdivge	r1, r0, r1
 8023338:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 802333c:	fb93 f1f1 	sdivlt	r1, r3, r1
 8023340:	4b33      	ldr	r3, [pc, #204]	; (8023410 <gmtime_r+0x158>)
 8023342:	fb03 0001 	mla	r0, r3, r1, r0
 8023346:	f648 62ac 	movw	r2, #36524	; 0x8eac
 802334a:	fbb0 f2f2 	udiv	r2, r0, r2
 802334e:	4402      	add	r2, r0
 8023350:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8023354:	fbb0 f3fc 	udiv	r3, r0, ip
 8023358:	1ad2      	subs	r2, r2, r3
 802335a:	f240 176d 	movw	r7, #365	; 0x16d
 802335e:	4b2d      	ldr	r3, [pc, #180]	; (8023414 <gmtime_r+0x15c>)
 8023360:	fbb0 f3f3 	udiv	r3, r0, r3
 8023364:	2664      	movs	r6, #100	; 0x64
 8023366:	1ad3      	subs	r3, r2, r3
 8023368:	fbb3 f5f7 	udiv	r5, r3, r7
 802336c:	fbb3 f3fc 	udiv	r3, r3, ip
 8023370:	fbb5 f2f6 	udiv	r2, r5, r6
 8023374:	1ad3      	subs	r3, r2, r3
 8023376:	4403      	add	r3, r0
 8023378:	fb07 3315 	mls	r3, r7, r5, r3
 802337c:	2099      	movs	r0, #153	; 0x99
 802337e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8023382:	f10c 0c02 	add.w	ip, ip, #2
 8023386:	f103 0e01 	add.w	lr, r3, #1
 802338a:	fbbc f7f0 	udiv	r7, ip, r0
 802338e:	4378      	muls	r0, r7
 8023390:	3002      	adds	r0, #2
 8023392:	f04f 0805 	mov.w	r8, #5
 8023396:	fbb0 f0f8 	udiv	r0, r0, r8
 802339a:	ebae 0000 	sub.w	r0, lr, r0
 802339e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80233a2:	45f4      	cmp	ip, lr
 80233a4:	bf94      	ite	ls
 80233a6:	f04f 0c02 	movls.w	ip, #2
 80233aa:	f06f 0c09 	mvnhi.w	ip, #9
 80233ae:	4467      	add	r7, ip
 80233b0:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80233b4:	fb0c 5101 	mla	r1, ip, r1, r5
 80233b8:	2f01      	cmp	r7, #1
 80233ba:	bf98      	it	ls
 80233bc:	3101      	addls	r1, #1
 80233be:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80233c2:	d30c      	bcc.n	80233de <gmtime_r+0x126>
 80233c4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80233c8:	61e3      	str	r3, [r4, #28]
 80233ca:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80233ce:	2300      	movs	r3, #0
 80233d0:	60e0      	str	r0, [r4, #12]
 80233d2:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80233d6:	6223      	str	r3, [r4, #32]
 80233d8:	4620      	mov	r0, r4
 80233da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80233de:	f015 0f03 	tst.w	r5, #3
 80233e2:	d102      	bne.n	80233ea <gmtime_r+0x132>
 80233e4:	fb06 5212 	mls	r2, r6, r2, r5
 80233e8:	b95a      	cbnz	r2, 8023402 <gmtime_r+0x14a>
 80233ea:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80233ee:	fbb5 f2f6 	udiv	r2, r5, r6
 80233f2:	fb06 5212 	mls	r2, r6, r2, r5
 80233f6:	fab2 f282 	clz	r2, r2
 80233fa:	0952      	lsrs	r2, r2, #5
 80233fc:	333b      	adds	r3, #59	; 0x3b
 80233fe:	4413      	add	r3, r2
 8023400:	e7e2      	b.n	80233c8 <gmtime_r+0x110>
 8023402:	2201      	movs	r2, #1
 8023404:	e7fa      	b.n	80233fc <gmtime_r+0x144>
 8023406:	bf00      	nop
 8023408:	00015180 	.word	0x00015180
 802340c:	00023ab1 	.word	0x00023ab1
 8023410:	fffdc54f 	.word	0xfffdc54f
 8023414:	00023ab0 	.word	0x00023ab0

08023418 <_isatty_r>:
 8023418:	b538      	push	{r3, r4, r5, lr}
 802341a:	4d06      	ldr	r5, [pc, #24]	; (8023434 <_isatty_r+0x1c>)
 802341c:	2300      	movs	r3, #0
 802341e:	4604      	mov	r4, r0
 8023420:	4608      	mov	r0, r1
 8023422:	602b      	str	r3, [r5, #0]
 8023424:	f7dd fd44 	bl	8000eb0 <_isatty>
 8023428:	1c43      	adds	r3, r0, #1
 802342a:	d102      	bne.n	8023432 <_isatty_r+0x1a>
 802342c:	682b      	ldr	r3, [r5, #0]
 802342e:	b103      	cbz	r3, 8023432 <_isatty_r+0x1a>
 8023430:	6023      	str	r3, [r4, #0]
 8023432:	bd38      	pop	{r3, r4, r5, pc}
 8023434:	20001054 	.word	0x20001054

08023438 <labs>:
 8023438:	2800      	cmp	r0, #0
 802343a:	bfb8      	it	lt
 802343c:	4240      	neglt	r0, r0
 802343e:	4770      	bx	lr

08023440 <_lseek_r>:
 8023440:	b538      	push	{r3, r4, r5, lr}
 8023442:	4d07      	ldr	r5, [pc, #28]	; (8023460 <_lseek_r+0x20>)
 8023444:	4604      	mov	r4, r0
 8023446:	4608      	mov	r0, r1
 8023448:	4611      	mov	r1, r2
 802344a:	2200      	movs	r2, #0
 802344c:	602a      	str	r2, [r5, #0]
 802344e:	461a      	mov	r2, r3
 8023450:	f7dd fd39 	bl	8000ec6 <_lseek>
 8023454:	1c43      	adds	r3, r0, #1
 8023456:	d102      	bne.n	802345e <_lseek_r+0x1e>
 8023458:	682b      	ldr	r3, [r5, #0]
 802345a:	b103      	cbz	r3, 802345e <_lseek_r+0x1e>
 802345c:	6023      	str	r3, [r4, #0]
 802345e:	bd38      	pop	{r3, r4, r5, pc}
 8023460:	20001054 	.word	0x20001054

08023464 <__ascii_mbtowc>:
 8023464:	b082      	sub	sp, #8
 8023466:	b901      	cbnz	r1, 802346a <__ascii_mbtowc+0x6>
 8023468:	a901      	add	r1, sp, #4
 802346a:	b142      	cbz	r2, 802347e <__ascii_mbtowc+0x1a>
 802346c:	b14b      	cbz	r3, 8023482 <__ascii_mbtowc+0x1e>
 802346e:	7813      	ldrb	r3, [r2, #0]
 8023470:	600b      	str	r3, [r1, #0]
 8023472:	7812      	ldrb	r2, [r2, #0]
 8023474:	1e10      	subs	r0, r2, #0
 8023476:	bf18      	it	ne
 8023478:	2001      	movne	r0, #1
 802347a:	b002      	add	sp, #8
 802347c:	4770      	bx	lr
 802347e:	4610      	mov	r0, r2
 8023480:	e7fb      	b.n	802347a <__ascii_mbtowc+0x16>
 8023482:	f06f 0001 	mvn.w	r0, #1
 8023486:	e7f8      	b.n	802347a <__ascii_mbtowc+0x16>

08023488 <__malloc_lock>:
 8023488:	4801      	ldr	r0, [pc, #4]	; (8023490 <__malloc_lock+0x8>)
 802348a:	f7fe b96c 	b.w	8021766 <__retarget_lock_acquire_recursive>
 802348e:	bf00      	nop
 8023490:	2000104c 	.word	0x2000104c

08023494 <__malloc_unlock>:
 8023494:	4801      	ldr	r0, [pc, #4]	; (802349c <__malloc_unlock+0x8>)
 8023496:	f7fe b968 	b.w	802176a <__retarget_lock_release_recursive>
 802349a:	bf00      	nop
 802349c:	2000104c 	.word	0x2000104c

080234a0 <_realloc_r>:
 80234a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80234a2:	4607      	mov	r7, r0
 80234a4:	4614      	mov	r4, r2
 80234a6:	460e      	mov	r6, r1
 80234a8:	b921      	cbnz	r1, 80234b4 <_realloc_r+0x14>
 80234aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80234ae:	4611      	mov	r1, r2
 80234b0:	f7fe ba46 	b.w	8021940 <_malloc_r>
 80234b4:	b922      	cbnz	r2, 80234c0 <_realloc_r+0x20>
 80234b6:	f7fe f9f3 	bl	80218a0 <_free_r>
 80234ba:	4625      	mov	r5, r4
 80234bc:	4628      	mov	r0, r5
 80234be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80234c0:	f000 fd5e 	bl	8023f80 <_malloc_usable_size_r>
 80234c4:	42a0      	cmp	r0, r4
 80234c6:	d20f      	bcs.n	80234e8 <_realloc_r+0x48>
 80234c8:	4621      	mov	r1, r4
 80234ca:	4638      	mov	r0, r7
 80234cc:	f7fe fa38 	bl	8021940 <_malloc_r>
 80234d0:	4605      	mov	r5, r0
 80234d2:	2800      	cmp	r0, #0
 80234d4:	d0f2      	beq.n	80234bc <_realloc_r+0x1c>
 80234d6:	4631      	mov	r1, r6
 80234d8:	4622      	mov	r2, r4
 80234da:	f7fe f9bb 	bl	8021854 <memcpy>
 80234de:	4631      	mov	r1, r6
 80234e0:	4638      	mov	r0, r7
 80234e2:	f7fe f9dd 	bl	80218a0 <_free_r>
 80234e6:	e7e9      	b.n	80234bc <_realloc_r+0x1c>
 80234e8:	4635      	mov	r5, r6
 80234ea:	e7e7      	b.n	80234bc <_realloc_r+0x1c>

080234ec <__ssputs_r>:
 80234ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80234f0:	688e      	ldr	r6, [r1, #8]
 80234f2:	429e      	cmp	r6, r3
 80234f4:	4682      	mov	sl, r0
 80234f6:	460c      	mov	r4, r1
 80234f8:	4690      	mov	r8, r2
 80234fa:	461f      	mov	r7, r3
 80234fc:	d838      	bhi.n	8023570 <__ssputs_r+0x84>
 80234fe:	898a      	ldrh	r2, [r1, #12]
 8023500:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8023504:	d032      	beq.n	802356c <__ssputs_r+0x80>
 8023506:	6825      	ldr	r5, [r4, #0]
 8023508:	6909      	ldr	r1, [r1, #16]
 802350a:	eba5 0901 	sub.w	r9, r5, r1
 802350e:	6965      	ldr	r5, [r4, #20]
 8023510:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023514:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023518:	3301      	adds	r3, #1
 802351a:	444b      	add	r3, r9
 802351c:	106d      	asrs	r5, r5, #1
 802351e:	429d      	cmp	r5, r3
 8023520:	bf38      	it	cc
 8023522:	461d      	movcc	r5, r3
 8023524:	0553      	lsls	r3, r2, #21
 8023526:	d531      	bpl.n	802358c <__ssputs_r+0xa0>
 8023528:	4629      	mov	r1, r5
 802352a:	f7fe fa09 	bl	8021940 <_malloc_r>
 802352e:	4606      	mov	r6, r0
 8023530:	b950      	cbnz	r0, 8023548 <__ssputs_r+0x5c>
 8023532:	230c      	movs	r3, #12
 8023534:	f8ca 3000 	str.w	r3, [sl]
 8023538:	89a3      	ldrh	r3, [r4, #12]
 802353a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802353e:	81a3      	strh	r3, [r4, #12]
 8023540:	f04f 30ff 	mov.w	r0, #4294967295
 8023544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023548:	6921      	ldr	r1, [r4, #16]
 802354a:	464a      	mov	r2, r9
 802354c:	f7fe f982 	bl	8021854 <memcpy>
 8023550:	89a3      	ldrh	r3, [r4, #12]
 8023552:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8023556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802355a:	81a3      	strh	r3, [r4, #12]
 802355c:	6126      	str	r6, [r4, #16]
 802355e:	6165      	str	r5, [r4, #20]
 8023560:	444e      	add	r6, r9
 8023562:	eba5 0509 	sub.w	r5, r5, r9
 8023566:	6026      	str	r6, [r4, #0]
 8023568:	60a5      	str	r5, [r4, #8]
 802356a:	463e      	mov	r6, r7
 802356c:	42be      	cmp	r6, r7
 802356e:	d900      	bls.n	8023572 <__ssputs_r+0x86>
 8023570:	463e      	mov	r6, r7
 8023572:	4632      	mov	r2, r6
 8023574:	6820      	ldr	r0, [r4, #0]
 8023576:	4641      	mov	r1, r8
 8023578:	f000 fce8 	bl	8023f4c <memmove>
 802357c:	68a3      	ldr	r3, [r4, #8]
 802357e:	6822      	ldr	r2, [r4, #0]
 8023580:	1b9b      	subs	r3, r3, r6
 8023582:	4432      	add	r2, r6
 8023584:	60a3      	str	r3, [r4, #8]
 8023586:	6022      	str	r2, [r4, #0]
 8023588:	2000      	movs	r0, #0
 802358a:	e7db      	b.n	8023544 <__ssputs_r+0x58>
 802358c:	462a      	mov	r2, r5
 802358e:	f7ff ff87 	bl	80234a0 <_realloc_r>
 8023592:	4606      	mov	r6, r0
 8023594:	2800      	cmp	r0, #0
 8023596:	d1e1      	bne.n	802355c <__ssputs_r+0x70>
 8023598:	6921      	ldr	r1, [r4, #16]
 802359a:	4650      	mov	r0, sl
 802359c:	f7fe f980 	bl	80218a0 <_free_r>
 80235a0:	e7c7      	b.n	8023532 <__ssputs_r+0x46>
	...

080235a4 <_svfiprintf_r>:
 80235a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235a8:	4698      	mov	r8, r3
 80235aa:	898b      	ldrh	r3, [r1, #12]
 80235ac:	061b      	lsls	r3, r3, #24
 80235ae:	b09d      	sub	sp, #116	; 0x74
 80235b0:	4607      	mov	r7, r0
 80235b2:	460d      	mov	r5, r1
 80235b4:	4614      	mov	r4, r2
 80235b6:	d50e      	bpl.n	80235d6 <_svfiprintf_r+0x32>
 80235b8:	690b      	ldr	r3, [r1, #16]
 80235ba:	b963      	cbnz	r3, 80235d6 <_svfiprintf_r+0x32>
 80235bc:	2140      	movs	r1, #64	; 0x40
 80235be:	f7fe f9bf 	bl	8021940 <_malloc_r>
 80235c2:	6028      	str	r0, [r5, #0]
 80235c4:	6128      	str	r0, [r5, #16]
 80235c6:	b920      	cbnz	r0, 80235d2 <_svfiprintf_r+0x2e>
 80235c8:	230c      	movs	r3, #12
 80235ca:	603b      	str	r3, [r7, #0]
 80235cc:	f04f 30ff 	mov.w	r0, #4294967295
 80235d0:	e0d1      	b.n	8023776 <_svfiprintf_r+0x1d2>
 80235d2:	2340      	movs	r3, #64	; 0x40
 80235d4:	616b      	str	r3, [r5, #20]
 80235d6:	2300      	movs	r3, #0
 80235d8:	9309      	str	r3, [sp, #36]	; 0x24
 80235da:	2320      	movs	r3, #32
 80235dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80235e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80235e4:	2330      	movs	r3, #48	; 0x30
 80235e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8023790 <_svfiprintf_r+0x1ec>
 80235ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80235ee:	f04f 0901 	mov.w	r9, #1
 80235f2:	4623      	mov	r3, r4
 80235f4:	469a      	mov	sl, r3
 80235f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80235fa:	b10a      	cbz	r2, 8023600 <_svfiprintf_r+0x5c>
 80235fc:	2a25      	cmp	r2, #37	; 0x25
 80235fe:	d1f9      	bne.n	80235f4 <_svfiprintf_r+0x50>
 8023600:	ebba 0b04 	subs.w	fp, sl, r4
 8023604:	d00b      	beq.n	802361e <_svfiprintf_r+0x7a>
 8023606:	465b      	mov	r3, fp
 8023608:	4622      	mov	r2, r4
 802360a:	4629      	mov	r1, r5
 802360c:	4638      	mov	r0, r7
 802360e:	f7ff ff6d 	bl	80234ec <__ssputs_r>
 8023612:	3001      	adds	r0, #1
 8023614:	f000 80aa 	beq.w	802376c <_svfiprintf_r+0x1c8>
 8023618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802361a:	445a      	add	r2, fp
 802361c:	9209      	str	r2, [sp, #36]	; 0x24
 802361e:	f89a 3000 	ldrb.w	r3, [sl]
 8023622:	2b00      	cmp	r3, #0
 8023624:	f000 80a2 	beq.w	802376c <_svfiprintf_r+0x1c8>
 8023628:	2300      	movs	r3, #0
 802362a:	f04f 32ff 	mov.w	r2, #4294967295
 802362e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023632:	f10a 0a01 	add.w	sl, sl, #1
 8023636:	9304      	str	r3, [sp, #16]
 8023638:	9307      	str	r3, [sp, #28]
 802363a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802363e:	931a      	str	r3, [sp, #104]	; 0x68
 8023640:	4654      	mov	r4, sl
 8023642:	2205      	movs	r2, #5
 8023644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023648:	4851      	ldr	r0, [pc, #324]	; (8023790 <_svfiprintf_r+0x1ec>)
 802364a:	f7dc fe09 	bl	8000260 <memchr>
 802364e:	9a04      	ldr	r2, [sp, #16]
 8023650:	b9d8      	cbnz	r0, 802368a <_svfiprintf_r+0xe6>
 8023652:	06d0      	lsls	r0, r2, #27
 8023654:	bf44      	itt	mi
 8023656:	2320      	movmi	r3, #32
 8023658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802365c:	0711      	lsls	r1, r2, #28
 802365e:	bf44      	itt	mi
 8023660:	232b      	movmi	r3, #43	; 0x2b
 8023662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023666:	f89a 3000 	ldrb.w	r3, [sl]
 802366a:	2b2a      	cmp	r3, #42	; 0x2a
 802366c:	d015      	beq.n	802369a <_svfiprintf_r+0xf6>
 802366e:	9a07      	ldr	r2, [sp, #28]
 8023670:	4654      	mov	r4, sl
 8023672:	2000      	movs	r0, #0
 8023674:	f04f 0c0a 	mov.w	ip, #10
 8023678:	4621      	mov	r1, r4
 802367a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802367e:	3b30      	subs	r3, #48	; 0x30
 8023680:	2b09      	cmp	r3, #9
 8023682:	d94e      	bls.n	8023722 <_svfiprintf_r+0x17e>
 8023684:	b1b0      	cbz	r0, 80236b4 <_svfiprintf_r+0x110>
 8023686:	9207      	str	r2, [sp, #28]
 8023688:	e014      	b.n	80236b4 <_svfiprintf_r+0x110>
 802368a:	eba0 0308 	sub.w	r3, r0, r8
 802368e:	fa09 f303 	lsl.w	r3, r9, r3
 8023692:	4313      	orrs	r3, r2
 8023694:	9304      	str	r3, [sp, #16]
 8023696:	46a2      	mov	sl, r4
 8023698:	e7d2      	b.n	8023640 <_svfiprintf_r+0x9c>
 802369a:	9b03      	ldr	r3, [sp, #12]
 802369c:	1d19      	adds	r1, r3, #4
 802369e:	681b      	ldr	r3, [r3, #0]
 80236a0:	9103      	str	r1, [sp, #12]
 80236a2:	2b00      	cmp	r3, #0
 80236a4:	bfbb      	ittet	lt
 80236a6:	425b      	neglt	r3, r3
 80236a8:	f042 0202 	orrlt.w	r2, r2, #2
 80236ac:	9307      	strge	r3, [sp, #28]
 80236ae:	9307      	strlt	r3, [sp, #28]
 80236b0:	bfb8      	it	lt
 80236b2:	9204      	strlt	r2, [sp, #16]
 80236b4:	7823      	ldrb	r3, [r4, #0]
 80236b6:	2b2e      	cmp	r3, #46	; 0x2e
 80236b8:	d10c      	bne.n	80236d4 <_svfiprintf_r+0x130>
 80236ba:	7863      	ldrb	r3, [r4, #1]
 80236bc:	2b2a      	cmp	r3, #42	; 0x2a
 80236be:	d135      	bne.n	802372c <_svfiprintf_r+0x188>
 80236c0:	9b03      	ldr	r3, [sp, #12]
 80236c2:	1d1a      	adds	r2, r3, #4
 80236c4:	681b      	ldr	r3, [r3, #0]
 80236c6:	9203      	str	r2, [sp, #12]
 80236c8:	2b00      	cmp	r3, #0
 80236ca:	bfb8      	it	lt
 80236cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80236d0:	3402      	adds	r4, #2
 80236d2:	9305      	str	r3, [sp, #20]
 80236d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80237a0 <_svfiprintf_r+0x1fc>
 80236d8:	7821      	ldrb	r1, [r4, #0]
 80236da:	2203      	movs	r2, #3
 80236dc:	4650      	mov	r0, sl
 80236de:	f7dc fdbf 	bl	8000260 <memchr>
 80236e2:	b140      	cbz	r0, 80236f6 <_svfiprintf_r+0x152>
 80236e4:	2340      	movs	r3, #64	; 0x40
 80236e6:	eba0 000a 	sub.w	r0, r0, sl
 80236ea:	fa03 f000 	lsl.w	r0, r3, r0
 80236ee:	9b04      	ldr	r3, [sp, #16]
 80236f0:	4303      	orrs	r3, r0
 80236f2:	3401      	adds	r4, #1
 80236f4:	9304      	str	r3, [sp, #16]
 80236f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80236fa:	4826      	ldr	r0, [pc, #152]	; (8023794 <_svfiprintf_r+0x1f0>)
 80236fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023700:	2206      	movs	r2, #6
 8023702:	f7dc fdad 	bl	8000260 <memchr>
 8023706:	2800      	cmp	r0, #0
 8023708:	d038      	beq.n	802377c <_svfiprintf_r+0x1d8>
 802370a:	4b23      	ldr	r3, [pc, #140]	; (8023798 <_svfiprintf_r+0x1f4>)
 802370c:	bb1b      	cbnz	r3, 8023756 <_svfiprintf_r+0x1b2>
 802370e:	9b03      	ldr	r3, [sp, #12]
 8023710:	3307      	adds	r3, #7
 8023712:	f023 0307 	bic.w	r3, r3, #7
 8023716:	3308      	adds	r3, #8
 8023718:	9303      	str	r3, [sp, #12]
 802371a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802371c:	4433      	add	r3, r6
 802371e:	9309      	str	r3, [sp, #36]	; 0x24
 8023720:	e767      	b.n	80235f2 <_svfiprintf_r+0x4e>
 8023722:	fb0c 3202 	mla	r2, ip, r2, r3
 8023726:	460c      	mov	r4, r1
 8023728:	2001      	movs	r0, #1
 802372a:	e7a5      	b.n	8023678 <_svfiprintf_r+0xd4>
 802372c:	2300      	movs	r3, #0
 802372e:	3401      	adds	r4, #1
 8023730:	9305      	str	r3, [sp, #20]
 8023732:	4619      	mov	r1, r3
 8023734:	f04f 0c0a 	mov.w	ip, #10
 8023738:	4620      	mov	r0, r4
 802373a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802373e:	3a30      	subs	r2, #48	; 0x30
 8023740:	2a09      	cmp	r2, #9
 8023742:	d903      	bls.n	802374c <_svfiprintf_r+0x1a8>
 8023744:	2b00      	cmp	r3, #0
 8023746:	d0c5      	beq.n	80236d4 <_svfiprintf_r+0x130>
 8023748:	9105      	str	r1, [sp, #20]
 802374a:	e7c3      	b.n	80236d4 <_svfiprintf_r+0x130>
 802374c:	fb0c 2101 	mla	r1, ip, r1, r2
 8023750:	4604      	mov	r4, r0
 8023752:	2301      	movs	r3, #1
 8023754:	e7f0      	b.n	8023738 <_svfiprintf_r+0x194>
 8023756:	ab03      	add	r3, sp, #12
 8023758:	9300      	str	r3, [sp, #0]
 802375a:	462a      	mov	r2, r5
 802375c:	4b0f      	ldr	r3, [pc, #60]	; (802379c <_svfiprintf_r+0x1f8>)
 802375e:	a904      	add	r1, sp, #16
 8023760:	4638      	mov	r0, r7
 8023762:	f3af 8000 	nop.w
 8023766:	1c42      	adds	r2, r0, #1
 8023768:	4606      	mov	r6, r0
 802376a:	d1d6      	bne.n	802371a <_svfiprintf_r+0x176>
 802376c:	89ab      	ldrh	r3, [r5, #12]
 802376e:	065b      	lsls	r3, r3, #25
 8023770:	f53f af2c 	bmi.w	80235cc <_svfiprintf_r+0x28>
 8023774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023776:	b01d      	add	sp, #116	; 0x74
 8023778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802377c:	ab03      	add	r3, sp, #12
 802377e:	9300      	str	r3, [sp, #0]
 8023780:	462a      	mov	r2, r5
 8023782:	4b06      	ldr	r3, [pc, #24]	; (802379c <_svfiprintf_r+0x1f8>)
 8023784:	a904      	add	r1, sp, #16
 8023786:	4638      	mov	r0, r7
 8023788:	f000 f9d4 	bl	8023b34 <_printf_i>
 802378c:	e7eb      	b.n	8023766 <_svfiprintf_r+0x1c2>
 802378e:	bf00      	nop
 8023790:	0802b543 	.word	0x0802b543
 8023794:	0802b54d 	.word	0x0802b54d
 8023798:	00000000 	.word	0x00000000
 802379c:	080234ed 	.word	0x080234ed
 80237a0:	0802b549 	.word	0x0802b549

080237a4 <__sfputc_r>:
 80237a4:	6893      	ldr	r3, [r2, #8]
 80237a6:	3b01      	subs	r3, #1
 80237a8:	2b00      	cmp	r3, #0
 80237aa:	b410      	push	{r4}
 80237ac:	6093      	str	r3, [r2, #8]
 80237ae:	da08      	bge.n	80237c2 <__sfputc_r+0x1e>
 80237b0:	6994      	ldr	r4, [r2, #24]
 80237b2:	42a3      	cmp	r3, r4
 80237b4:	db01      	blt.n	80237ba <__sfputc_r+0x16>
 80237b6:	290a      	cmp	r1, #10
 80237b8:	d103      	bne.n	80237c2 <__sfputc_r+0x1e>
 80237ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80237be:	f7ff bb75 	b.w	8022eac <__swbuf_r>
 80237c2:	6813      	ldr	r3, [r2, #0]
 80237c4:	1c58      	adds	r0, r3, #1
 80237c6:	6010      	str	r0, [r2, #0]
 80237c8:	7019      	strb	r1, [r3, #0]
 80237ca:	4608      	mov	r0, r1
 80237cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80237d0:	4770      	bx	lr

080237d2 <__sfputs_r>:
 80237d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80237d4:	4606      	mov	r6, r0
 80237d6:	460f      	mov	r7, r1
 80237d8:	4614      	mov	r4, r2
 80237da:	18d5      	adds	r5, r2, r3
 80237dc:	42ac      	cmp	r4, r5
 80237de:	d101      	bne.n	80237e4 <__sfputs_r+0x12>
 80237e0:	2000      	movs	r0, #0
 80237e2:	e007      	b.n	80237f4 <__sfputs_r+0x22>
 80237e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80237e8:	463a      	mov	r2, r7
 80237ea:	4630      	mov	r0, r6
 80237ec:	f7ff ffda 	bl	80237a4 <__sfputc_r>
 80237f0:	1c43      	adds	r3, r0, #1
 80237f2:	d1f3      	bne.n	80237dc <__sfputs_r+0xa>
 80237f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080237f8 <_vfiprintf_r>:
 80237f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237fc:	460d      	mov	r5, r1
 80237fe:	b09d      	sub	sp, #116	; 0x74
 8023800:	4614      	mov	r4, r2
 8023802:	4698      	mov	r8, r3
 8023804:	4606      	mov	r6, r0
 8023806:	b118      	cbz	r0, 8023810 <_vfiprintf_r+0x18>
 8023808:	6983      	ldr	r3, [r0, #24]
 802380a:	b90b      	cbnz	r3, 8023810 <_vfiprintf_r+0x18>
 802380c:	f7fd fbf8 	bl	8021000 <__sinit>
 8023810:	4b89      	ldr	r3, [pc, #548]	; (8023a38 <_vfiprintf_r+0x240>)
 8023812:	429d      	cmp	r5, r3
 8023814:	d11b      	bne.n	802384e <_vfiprintf_r+0x56>
 8023816:	6875      	ldr	r5, [r6, #4]
 8023818:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802381a:	07d9      	lsls	r1, r3, #31
 802381c:	d405      	bmi.n	802382a <_vfiprintf_r+0x32>
 802381e:	89ab      	ldrh	r3, [r5, #12]
 8023820:	059a      	lsls	r2, r3, #22
 8023822:	d402      	bmi.n	802382a <_vfiprintf_r+0x32>
 8023824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023826:	f7fd ff9e 	bl	8021766 <__retarget_lock_acquire_recursive>
 802382a:	89ab      	ldrh	r3, [r5, #12]
 802382c:	071b      	lsls	r3, r3, #28
 802382e:	d501      	bpl.n	8023834 <_vfiprintf_r+0x3c>
 8023830:	692b      	ldr	r3, [r5, #16]
 8023832:	b9eb      	cbnz	r3, 8023870 <_vfiprintf_r+0x78>
 8023834:	4629      	mov	r1, r5
 8023836:	4630      	mov	r0, r6
 8023838:	f7ff fb9c 	bl	8022f74 <__swsetup_r>
 802383c:	b1c0      	cbz	r0, 8023870 <_vfiprintf_r+0x78>
 802383e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023840:	07dc      	lsls	r4, r3, #31
 8023842:	d50e      	bpl.n	8023862 <_vfiprintf_r+0x6a>
 8023844:	f04f 30ff 	mov.w	r0, #4294967295
 8023848:	b01d      	add	sp, #116	; 0x74
 802384a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802384e:	4b7b      	ldr	r3, [pc, #492]	; (8023a3c <_vfiprintf_r+0x244>)
 8023850:	429d      	cmp	r5, r3
 8023852:	d101      	bne.n	8023858 <_vfiprintf_r+0x60>
 8023854:	68b5      	ldr	r5, [r6, #8]
 8023856:	e7df      	b.n	8023818 <_vfiprintf_r+0x20>
 8023858:	4b79      	ldr	r3, [pc, #484]	; (8023a40 <_vfiprintf_r+0x248>)
 802385a:	429d      	cmp	r5, r3
 802385c:	bf08      	it	eq
 802385e:	68f5      	ldreq	r5, [r6, #12]
 8023860:	e7da      	b.n	8023818 <_vfiprintf_r+0x20>
 8023862:	89ab      	ldrh	r3, [r5, #12]
 8023864:	0598      	lsls	r0, r3, #22
 8023866:	d4ed      	bmi.n	8023844 <_vfiprintf_r+0x4c>
 8023868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802386a:	f7fd ff7e 	bl	802176a <__retarget_lock_release_recursive>
 802386e:	e7e9      	b.n	8023844 <_vfiprintf_r+0x4c>
 8023870:	2300      	movs	r3, #0
 8023872:	9309      	str	r3, [sp, #36]	; 0x24
 8023874:	2320      	movs	r3, #32
 8023876:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802387a:	f8cd 800c 	str.w	r8, [sp, #12]
 802387e:	2330      	movs	r3, #48	; 0x30
 8023880:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023a44 <_vfiprintf_r+0x24c>
 8023884:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023888:	f04f 0901 	mov.w	r9, #1
 802388c:	4623      	mov	r3, r4
 802388e:	469a      	mov	sl, r3
 8023890:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023894:	b10a      	cbz	r2, 802389a <_vfiprintf_r+0xa2>
 8023896:	2a25      	cmp	r2, #37	; 0x25
 8023898:	d1f9      	bne.n	802388e <_vfiprintf_r+0x96>
 802389a:	ebba 0b04 	subs.w	fp, sl, r4
 802389e:	d00b      	beq.n	80238b8 <_vfiprintf_r+0xc0>
 80238a0:	465b      	mov	r3, fp
 80238a2:	4622      	mov	r2, r4
 80238a4:	4629      	mov	r1, r5
 80238a6:	4630      	mov	r0, r6
 80238a8:	f7ff ff93 	bl	80237d2 <__sfputs_r>
 80238ac:	3001      	adds	r0, #1
 80238ae:	f000 80aa 	beq.w	8023a06 <_vfiprintf_r+0x20e>
 80238b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80238b4:	445a      	add	r2, fp
 80238b6:	9209      	str	r2, [sp, #36]	; 0x24
 80238b8:	f89a 3000 	ldrb.w	r3, [sl]
 80238bc:	2b00      	cmp	r3, #0
 80238be:	f000 80a2 	beq.w	8023a06 <_vfiprintf_r+0x20e>
 80238c2:	2300      	movs	r3, #0
 80238c4:	f04f 32ff 	mov.w	r2, #4294967295
 80238c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80238cc:	f10a 0a01 	add.w	sl, sl, #1
 80238d0:	9304      	str	r3, [sp, #16]
 80238d2:	9307      	str	r3, [sp, #28]
 80238d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80238d8:	931a      	str	r3, [sp, #104]	; 0x68
 80238da:	4654      	mov	r4, sl
 80238dc:	2205      	movs	r2, #5
 80238de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80238e2:	4858      	ldr	r0, [pc, #352]	; (8023a44 <_vfiprintf_r+0x24c>)
 80238e4:	f7dc fcbc 	bl	8000260 <memchr>
 80238e8:	9a04      	ldr	r2, [sp, #16]
 80238ea:	b9d8      	cbnz	r0, 8023924 <_vfiprintf_r+0x12c>
 80238ec:	06d1      	lsls	r1, r2, #27
 80238ee:	bf44      	itt	mi
 80238f0:	2320      	movmi	r3, #32
 80238f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80238f6:	0713      	lsls	r3, r2, #28
 80238f8:	bf44      	itt	mi
 80238fa:	232b      	movmi	r3, #43	; 0x2b
 80238fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023900:	f89a 3000 	ldrb.w	r3, [sl]
 8023904:	2b2a      	cmp	r3, #42	; 0x2a
 8023906:	d015      	beq.n	8023934 <_vfiprintf_r+0x13c>
 8023908:	9a07      	ldr	r2, [sp, #28]
 802390a:	4654      	mov	r4, sl
 802390c:	2000      	movs	r0, #0
 802390e:	f04f 0c0a 	mov.w	ip, #10
 8023912:	4621      	mov	r1, r4
 8023914:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023918:	3b30      	subs	r3, #48	; 0x30
 802391a:	2b09      	cmp	r3, #9
 802391c:	d94e      	bls.n	80239bc <_vfiprintf_r+0x1c4>
 802391e:	b1b0      	cbz	r0, 802394e <_vfiprintf_r+0x156>
 8023920:	9207      	str	r2, [sp, #28]
 8023922:	e014      	b.n	802394e <_vfiprintf_r+0x156>
 8023924:	eba0 0308 	sub.w	r3, r0, r8
 8023928:	fa09 f303 	lsl.w	r3, r9, r3
 802392c:	4313      	orrs	r3, r2
 802392e:	9304      	str	r3, [sp, #16]
 8023930:	46a2      	mov	sl, r4
 8023932:	e7d2      	b.n	80238da <_vfiprintf_r+0xe2>
 8023934:	9b03      	ldr	r3, [sp, #12]
 8023936:	1d19      	adds	r1, r3, #4
 8023938:	681b      	ldr	r3, [r3, #0]
 802393a:	9103      	str	r1, [sp, #12]
 802393c:	2b00      	cmp	r3, #0
 802393e:	bfbb      	ittet	lt
 8023940:	425b      	neglt	r3, r3
 8023942:	f042 0202 	orrlt.w	r2, r2, #2
 8023946:	9307      	strge	r3, [sp, #28]
 8023948:	9307      	strlt	r3, [sp, #28]
 802394a:	bfb8      	it	lt
 802394c:	9204      	strlt	r2, [sp, #16]
 802394e:	7823      	ldrb	r3, [r4, #0]
 8023950:	2b2e      	cmp	r3, #46	; 0x2e
 8023952:	d10c      	bne.n	802396e <_vfiprintf_r+0x176>
 8023954:	7863      	ldrb	r3, [r4, #1]
 8023956:	2b2a      	cmp	r3, #42	; 0x2a
 8023958:	d135      	bne.n	80239c6 <_vfiprintf_r+0x1ce>
 802395a:	9b03      	ldr	r3, [sp, #12]
 802395c:	1d1a      	adds	r2, r3, #4
 802395e:	681b      	ldr	r3, [r3, #0]
 8023960:	9203      	str	r2, [sp, #12]
 8023962:	2b00      	cmp	r3, #0
 8023964:	bfb8      	it	lt
 8023966:	f04f 33ff 	movlt.w	r3, #4294967295
 802396a:	3402      	adds	r4, #2
 802396c:	9305      	str	r3, [sp, #20]
 802396e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023a54 <_vfiprintf_r+0x25c>
 8023972:	7821      	ldrb	r1, [r4, #0]
 8023974:	2203      	movs	r2, #3
 8023976:	4650      	mov	r0, sl
 8023978:	f7dc fc72 	bl	8000260 <memchr>
 802397c:	b140      	cbz	r0, 8023990 <_vfiprintf_r+0x198>
 802397e:	2340      	movs	r3, #64	; 0x40
 8023980:	eba0 000a 	sub.w	r0, r0, sl
 8023984:	fa03 f000 	lsl.w	r0, r3, r0
 8023988:	9b04      	ldr	r3, [sp, #16]
 802398a:	4303      	orrs	r3, r0
 802398c:	3401      	adds	r4, #1
 802398e:	9304      	str	r3, [sp, #16]
 8023990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023994:	482c      	ldr	r0, [pc, #176]	; (8023a48 <_vfiprintf_r+0x250>)
 8023996:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802399a:	2206      	movs	r2, #6
 802399c:	f7dc fc60 	bl	8000260 <memchr>
 80239a0:	2800      	cmp	r0, #0
 80239a2:	d03f      	beq.n	8023a24 <_vfiprintf_r+0x22c>
 80239a4:	4b29      	ldr	r3, [pc, #164]	; (8023a4c <_vfiprintf_r+0x254>)
 80239a6:	bb1b      	cbnz	r3, 80239f0 <_vfiprintf_r+0x1f8>
 80239a8:	9b03      	ldr	r3, [sp, #12]
 80239aa:	3307      	adds	r3, #7
 80239ac:	f023 0307 	bic.w	r3, r3, #7
 80239b0:	3308      	adds	r3, #8
 80239b2:	9303      	str	r3, [sp, #12]
 80239b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239b6:	443b      	add	r3, r7
 80239b8:	9309      	str	r3, [sp, #36]	; 0x24
 80239ba:	e767      	b.n	802388c <_vfiprintf_r+0x94>
 80239bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80239c0:	460c      	mov	r4, r1
 80239c2:	2001      	movs	r0, #1
 80239c4:	e7a5      	b.n	8023912 <_vfiprintf_r+0x11a>
 80239c6:	2300      	movs	r3, #0
 80239c8:	3401      	adds	r4, #1
 80239ca:	9305      	str	r3, [sp, #20]
 80239cc:	4619      	mov	r1, r3
 80239ce:	f04f 0c0a 	mov.w	ip, #10
 80239d2:	4620      	mov	r0, r4
 80239d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80239d8:	3a30      	subs	r2, #48	; 0x30
 80239da:	2a09      	cmp	r2, #9
 80239dc:	d903      	bls.n	80239e6 <_vfiprintf_r+0x1ee>
 80239de:	2b00      	cmp	r3, #0
 80239e0:	d0c5      	beq.n	802396e <_vfiprintf_r+0x176>
 80239e2:	9105      	str	r1, [sp, #20]
 80239e4:	e7c3      	b.n	802396e <_vfiprintf_r+0x176>
 80239e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80239ea:	4604      	mov	r4, r0
 80239ec:	2301      	movs	r3, #1
 80239ee:	e7f0      	b.n	80239d2 <_vfiprintf_r+0x1da>
 80239f0:	ab03      	add	r3, sp, #12
 80239f2:	9300      	str	r3, [sp, #0]
 80239f4:	462a      	mov	r2, r5
 80239f6:	4b16      	ldr	r3, [pc, #88]	; (8023a50 <_vfiprintf_r+0x258>)
 80239f8:	a904      	add	r1, sp, #16
 80239fa:	4630      	mov	r0, r6
 80239fc:	f3af 8000 	nop.w
 8023a00:	4607      	mov	r7, r0
 8023a02:	1c78      	adds	r0, r7, #1
 8023a04:	d1d6      	bne.n	80239b4 <_vfiprintf_r+0x1bc>
 8023a06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023a08:	07d9      	lsls	r1, r3, #31
 8023a0a:	d405      	bmi.n	8023a18 <_vfiprintf_r+0x220>
 8023a0c:	89ab      	ldrh	r3, [r5, #12]
 8023a0e:	059a      	lsls	r2, r3, #22
 8023a10:	d402      	bmi.n	8023a18 <_vfiprintf_r+0x220>
 8023a12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023a14:	f7fd fea9 	bl	802176a <__retarget_lock_release_recursive>
 8023a18:	89ab      	ldrh	r3, [r5, #12]
 8023a1a:	065b      	lsls	r3, r3, #25
 8023a1c:	f53f af12 	bmi.w	8023844 <_vfiprintf_r+0x4c>
 8023a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023a22:	e711      	b.n	8023848 <_vfiprintf_r+0x50>
 8023a24:	ab03      	add	r3, sp, #12
 8023a26:	9300      	str	r3, [sp, #0]
 8023a28:	462a      	mov	r2, r5
 8023a2a:	4b09      	ldr	r3, [pc, #36]	; (8023a50 <_vfiprintf_r+0x258>)
 8023a2c:	a904      	add	r1, sp, #16
 8023a2e:	4630      	mov	r0, r6
 8023a30:	f000 f880 	bl	8023b34 <_printf_i>
 8023a34:	e7e4      	b.n	8023a00 <_vfiprintf_r+0x208>
 8023a36:	bf00      	nop
 8023a38:	0802afc4 	.word	0x0802afc4
 8023a3c:	0802afe4 	.word	0x0802afe4
 8023a40:	0802afa4 	.word	0x0802afa4
 8023a44:	0802b543 	.word	0x0802b543
 8023a48:	0802b54d 	.word	0x0802b54d
 8023a4c:	00000000 	.word	0x00000000
 8023a50:	080237d3 	.word	0x080237d3
 8023a54:	0802b549 	.word	0x0802b549

08023a58 <_printf_common>:
 8023a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023a5c:	4616      	mov	r6, r2
 8023a5e:	4699      	mov	r9, r3
 8023a60:	688a      	ldr	r2, [r1, #8]
 8023a62:	690b      	ldr	r3, [r1, #16]
 8023a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023a68:	4293      	cmp	r3, r2
 8023a6a:	bfb8      	it	lt
 8023a6c:	4613      	movlt	r3, r2
 8023a6e:	6033      	str	r3, [r6, #0]
 8023a70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023a74:	4607      	mov	r7, r0
 8023a76:	460c      	mov	r4, r1
 8023a78:	b10a      	cbz	r2, 8023a7e <_printf_common+0x26>
 8023a7a:	3301      	adds	r3, #1
 8023a7c:	6033      	str	r3, [r6, #0]
 8023a7e:	6823      	ldr	r3, [r4, #0]
 8023a80:	0699      	lsls	r1, r3, #26
 8023a82:	bf42      	ittt	mi
 8023a84:	6833      	ldrmi	r3, [r6, #0]
 8023a86:	3302      	addmi	r3, #2
 8023a88:	6033      	strmi	r3, [r6, #0]
 8023a8a:	6825      	ldr	r5, [r4, #0]
 8023a8c:	f015 0506 	ands.w	r5, r5, #6
 8023a90:	d106      	bne.n	8023aa0 <_printf_common+0x48>
 8023a92:	f104 0a19 	add.w	sl, r4, #25
 8023a96:	68e3      	ldr	r3, [r4, #12]
 8023a98:	6832      	ldr	r2, [r6, #0]
 8023a9a:	1a9b      	subs	r3, r3, r2
 8023a9c:	42ab      	cmp	r3, r5
 8023a9e:	dc26      	bgt.n	8023aee <_printf_common+0x96>
 8023aa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023aa4:	1e13      	subs	r3, r2, #0
 8023aa6:	6822      	ldr	r2, [r4, #0]
 8023aa8:	bf18      	it	ne
 8023aaa:	2301      	movne	r3, #1
 8023aac:	0692      	lsls	r2, r2, #26
 8023aae:	d42b      	bmi.n	8023b08 <_printf_common+0xb0>
 8023ab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023ab4:	4649      	mov	r1, r9
 8023ab6:	4638      	mov	r0, r7
 8023ab8:	47c0      	blx	r8
 8023aba:	3001      	adds	r0, #1
 8023abc:	d01e      	beq.n	8023afc <_printf_common+0xa4>
 8023abe:	6823      	ldr	r3, [r4, #0]
 8023ac0:	68e5      	ldr	r5, [r4, #12]
 8023ac2:	6832      	ldr	r2, [r6, #0]
 8023ac4:	f003 0306 	and.w	r3, r3, #6
 8023ac8:	2b04      	cmp	r3, #4
 8023aca:	bf08      	it	eq
 8023acc:	1aad      	subeq	r5, r5, r2
 8023ace:	68a3      	ldr	r3, [r4, #8]
 8023ad0:	6922      	ldr	r2, [r4, #16]
 8023ad2:	bf0c      	ite	eq
 8023ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023ad8:	2500      	movne	r5, #0
 8023ada:	4293      	cmp	r3, r2
 8023adc:	bfc4      	itt	gt
 8023ade:	1a9b      	subgt	r3, r3, r2
 8023ae0:	18ed      	addgt	r5, r5, r3
 8023ae2:	2600      	movs	r6, #0
 8023ae4:	341a      	adds	r4, #26
 8023ae6:	42b5      	cmp	r5, r6
 8023ae8:	d11a      	bne.n	8023b20 <_printf_common+0xc8>
 8023aea:	2000      	movs	r0, #0
 8023aec:	e008      	b.n	8023b00 <_printf_common+0xa8>
 8023aee:	2301      	movs	r3, #1
 8023af0:	4652      	mov	r2, sl
 8023af2:	4649      	mov	r1, r9
 8023af4:	4638      	mov	r0, r7
 8023af6:	47c0      	blx	r8
 8023af8:	3001      	adds	r0, #1
 8023afa:	d103      	bne.n	8023b04 <_printf_common+0xac>
 8023afc:	f04f 30ff 	mov.w	r0, #4294967295
 8023b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023b04:	3501      	adds	r5, #1
 8023b06:	e7c6      	b.n	8023a96 <_printf_common+0x3e>
 8023b08:	18e1      	adds	r1, r4, r3
 8023b0a:	1c5a      	adds	r2, r3, #1
 8023b0c:	2030      	movs	r0, #48	; 0x30
 8023b0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8023b12:	4422      	add	r2, r4
 8023b14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023b18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023b1c:	3302      	adds	r3, #2
 8023b1e:	e7c7      	b.n	8023ab0 <_printf_common+0x58>
 8023b20:	2301      	movs	r3, #1
 8023b22:	4622      	mov	r2, r4
 8023b24:	4649      	mov	r1, r9
 8023b26:	4638      	mov	r0, r7
 8023b28:	47c0      	blx	r8
 8023b2a:	3001      	adds	r0, #1
 8023b2c:	d0e6      	beq.n	8023afc <_printf_common+0xa4>
 8023b2e:	3601      	adds	r6, #1
 8023b30:	e7d9      	b.n	8023ae6 <_printf_common+0x8e>
	...

08023b34 <_printf_i>:
 8023b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023b38:	460c      	mov	r4, r1
 8023b3a:	4691      	mov	r9, r2
 8023b3c:	7e27      	ldrb	r7, [r4, #24]
 8023b3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023b40:	2f78      	cmp	r7, #120	; 0x78
 8023b42:	4680      	mov	r8, r0
 8023b44:	469a      	mov	sl, r3
 8023b46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023b4a:	d807      	bhi.n	8023b5c <_printf_i+0x28>
 8023b4c:	2f62      	cmp	r7, #98	; 0x62
 8023b4e:	d80a      	bhi.n	8023b66 <_printf_i+0x32>
 8023b50:	2f00      	cmp	r7, #0
 8023b52:	f000 80d8 	beq.w	8023d06 <_printf_i+0x1d2>
 8023b56:	2f58      	cmp	r7, #88	; 0x58
 8023b58:	f000 80a3 	beq.w	8023ca2 <_printf_i+0x16e>
 8023b5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8023b60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023b64:	e03a      	b.n	8023bdc <_printf_i+0xa8>
 8023b66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023b6a:	2b15      	cmp	r3, #21
 8023b6c:	d8f6      	bhi.n	8023b5c <_printf_i+0x28>
 8023b6e:	a001      	add	r0, pc, #4	; (adr r0, 8023b74 <_printf_i+0x40>)
 8023b70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8023b74:	08023bcd 	.word	0x08023bcd
 8023b78:	08023be1 	.word	0x08023be1
 8023b7c:	08023b5d 	.word	0x08023b5d
 8023b80:	08023b5d 	.word	0x08023b5d
 8023b84:	08023b5d 	.word	0x08023b5d
 8023b88:	08023b5d 	.word	0x08023b5d
 8023b8c:	08023be1 	.word	0x08023be1
 8023b90:	08023b5d 	.word	0x08023b5d
 8023b94:	08023b5d 	.word	0x08023b5d
 8023b98:	08023b5d 	.word	0x08023b5d
 8023b9c:	08023b5d 	.word	0x08023b5d
 8023ba0:	08023ced 	.word	0x08023ced
 8023ba4:	08023c11 	.word	0x08023c11
 8023ba8:	08023ccf 	.word	0x08023ccf
 8023bac:	08023b5d 	.word	0x08023b5d
 8023bb0:	08023b5d 	.word	0x08023b5d
 8023bb4:	08023d0f 	.word	0x08023d0f
 8023bb8:	08023b5d 	.word	0x08023b5d
 8023bbc:	08023c11 	.word	0x08023c11
 8023bc0:	08023b5d 	.word	0x08023b5d
 8023bc4:	08023b5d 	.word	0x08023b5d
 8023bc8:	08023cd7 	.word	0x08023cd7
 8023bcc:	680b      	ldr	r3, [r1, #0]
 8023bce:	1d1a      	adds	r2, r3, #4
 8023bd0:	681b      	ldr	r3, [r3, #0]
 8023bd2:	600a      	str	r2, [r1, #0]
 8023bd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8023bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023bdc:	2301      	movs	r3, #1
 8023bde:	e0a3      	b.n	8023d28 <_printf_i+0x1f4>
 8023be0:	6825      	ldr	r5, [r4, #0]
 8023be2:	6808      	ldr	r0, [r1, #0]
 8023be4:	062e      	lsls	r6, r5, #24
 8023be6:	f100 0304 	add.w	r3, r0, #4
 8023bea:	d50a      	bpl.n	8023c02 <_printf_i+0xce>
 8023bec:	6805      	ldr	r5, [r0, #0]
 8023bee:	600b      	str	r3, [r1, #0]
 8023bf0:	2d00      	cmp	r5, #0
 8023bf2:	da03      	bge.n	8023bfc <_printf_i+0xc8>
 8023bf4:	232d      	movs	r3, #45	; 0x2d
 8023bf6:	426d      	negs	r5, r5
 8023bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023bfc:	485e      	ldr	r0, [pc, #376]	; (8023d78 <_printf_i+0x244>)
 8023bfe:	230a      	movs	r3, #10
 8023c00:	e019      	b.n	8023c36 <_printf_i+0x102>
 8023c02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8023c06:	6805      	ldr	r5, [r0, #0]
 8023c08:	600b      	str	r3, [r1, #0]
 8023c0a:	bf18      	it	ne
 8023c0c:	b22d      	sxthne	r5, r5
 8023c0e:	e7ef      	b.n	8023bf0 <_printf_i+0xbc>
 8023c10:	680b      	ldr	r3, [r1, #0]
 8023c12:	6825      	ldr	r5, [r4, #0]
 8023c14:	1d18      	adds	r0, r3, #4
 8023c16:	6008      	str	r0, [r1, #0]
 8023c18:	0628      	lsls	r0, r5, #24
 8023c1a:	d501      	bpl.n	8023c20 <_printf_i+0xec>
 8023c1c:	681d      	ldr	r5, [r3, #0]
 8023c1e:	e002      	b.n	8023c26 <_printf_i+0xf2>
 8023c20:	0669      	lsls	r1, r5, #25
 8023c22:	d5fb      	bpl.n	8023c1c <_printf_i+0xe8>
 8023c24:	881d      	ldrh	r5, [r3, #0]
 8023c26:	4854      	ldr	r0, [pc, #336]	; (8023d78 <_printf_i+0x244>)
 8023c28:	2f6f      	cmp	r7, #111	; 0x6f
 8023c2a:	bf0c      	ite	eq
 8023c2c:	2308      	moveq	r3, #8
 8023c2e:	230a      	movne	r3, #10
 8023c30:	2100      	movs	r1, #0
 8023c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023c36:	6866      	ldr	r6, [r4, #4]
 8023c38:	60a6      	str	r6, [r4, #8]
 8023c3a:	2e00      	cmp	r6, #0
 8023c3c:	bfa2      	ittt	ge
 8023c3e:	6821      	ldrge	r1, [r4, #0]
 8023c40:	f021 0104 	bicge.w	r1, r1, #4
 8023c44:	6021      	strge	r1, [r4, #0]
 8023c46:	b90d      	cbnz	r5, 8023c4c <_printf_i+0x118>
 8023c48:	2e00      	cmp	r6, #0
 8023c4a:	d04d      	beq.n	8023ce8 <_printf_i+0x1b4>
 8023c4c:	4616      	mov	r6, r2
 8023c4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8023c52:	fb03 5711 	mls	r7, r3, r1, r5
 8023c56:	5dc7      	ldrb	r7, [r0, r7]
 8023c58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023c5c:	462f      	mov	r7, r5
 8023c5e:	42bb      	cmp	r3, r7
 8023c60:	460d      	mov	r5, r1
 8023c62:	d9f4      	bls.n	8023c4e <_printf_i+0x11a>
 8023c64:	2b08      	cmp	r3, #8
 8023c66:	d10b      	bne.n	8023c80 <_printf_i+0x14c>
 8023c68:	6823      	ldr	r3, [r4, #0]
 8023c6a:	07df      	lsls	r7, r3, #31
 8023c6c:	d508      	bpl.n	8023c80 <_printf_i+0x14c>
 8023c6e:	6923      	ldr	r3, [r4, #16]
 8023c70:	6861      	ldr	r1, [r4, #4]
 8023c72:	4299      	cmp	r1, r3
 8023c74:	bfde      	ittt	le
 8023c76:	2330      	movle	r3, #48	; 0x30
 8023c78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023c7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023c80:	1b92      	subs	r2, r2, r6
 8023c82:	6122      	str	r2, [r4, #16]
 8023c84:	f8cd a000 	str.w	sl, [sp]
 8023c88:	464b      	mov	r3, r9
 8023c8a:	aa03      	add	r2, sp, #12
 8023c8c:	4621      	mov	r1, r4
 8023c8e:	4640      	mov	r0, r8
 8023c90:	f7ff fee2 	bl	8023a58 <_printf_common>
 8023c94:	3001      	adds	r0, #1
 8023c96:	d14c      	bne.n	8023d32 <_printf_i+0x1fe>
 8023c98:	f04f 30ff 	mov.w	r0, #4294967295
 8023c9c:	b004      	add	sp, #16
 8023c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023ca2:	4835      	ldr	r0, [pc, #212]	; (8023d78 <_printf_i+0x244>)
 8023ca4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8023ca8:	6823      	ldr	r3, [r4, #0]
 8023caa:	680e      	ldr	r6, [r1, #0]
 8023cac:	061f      	lsls	r7, r3, #24
 8023cae:	f856 5b04 	ldr.w	r5, [r6], #4
 8023cb2:	600e      	str	r6, [r1, #0]
 8023cb4:	d514      	bpl.n	8023ce0 <_printf_i+0x1ac>
 8023cb6:	07d9      	lsls	r1, r3, #31
 8023cb8:	bf44      	itt	mi
 8023cba:	f043 0320 	orrmi.w	r3, r3, #32
 8023cbe:	6023      	strmi	r3, [r4, #0]
 8023cc0:	b91d      	cbnz	r5, 8023cca <_printf_i+0x196>
 8023cc2:	6823      	ldr	r3, [r4, #0]
 8023cc4:	f023 0320 	bic.w	r3, r3, #32
 8023cc8:	6023      	str	r3, [r4, #0]
 8023cca:	2310      	movs	r3, #16
 8023ccc:	e7b0      	b.n	8023c30 <_printf_i+0xfc>
 8023cce:	6823      	ldr	r3, [r4, #0]
 8023cd0:	f043 0320 	orr.w	r3, r3, #32
 8023cd4:	6023      	str	r3, [r4, #0]
 8023cd6:	2378      	movs	r3, #120	; 0x78
 8023cd8:	4828      	ldr	r0, [pc, #160]	; (8023d7c <_printf_i+0x248>)
 8023cda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023cde:	e7e3      	b.n	8023ca8 <_printf_i+0x174>
 8023ce0:	065e      	lsls	r6, r3, #25
 8023ce2:	bf48      	it	mi
 8023ce4:	b2ad      	uxthmi	r5, r5
 8023ce6:	e7e6      	b.n	8023cb6 <_printf_i+0x182>
 8023ce8:	4616      	mov	r6, r2
 8023cea:	e7bb      	b.n	8023c64 <_printf_i+0x130>
 8023cec:	680b      	ldr	r3, [r1, #0]
 8023cee:	6826      	ldr	r6, [r4, #0]
 8023cf0:	6960      	ldr	r0, [r4, #20]
 8023cf2:	1d1d      	adds	r5, r3, #4
 8023cf4:	600d      	str	r5, [r1, #0]
 8023cf6:	0635      	lsls	r5, r6, #24
 8023cf8:	681b      	ldr	r3, [r3, #0]
 8023cfa:	d501      	bpl.n	8023d00 <_printf_i+0x1cc>
 8023cfc:	6018      	str	r0, [r3, #0]
 8023cfe:	e002      	b.n	8023d06 <_printf_i+0x1d2>
 8023d00:	0671      	lsls	r1, r6, #25
 8023d02:	d5fb      	bpl.n	8023cfc <_printf_i+0x1c8>
 8023d04:	8018      	strh	r0, [r3, #0]
 8023d06:	2300      	movs	r3, #0
 8023d08:	6123      	str	r3, [r4, #16]
 8023d0a:	4616      	mov	r6, r2
 8023d0c:	e7ba      	b.n	8023c84 <_printf_i+0x150>
 8023d0e:	680b      	ldr	r3, [r1, #0]
 8023d10:	1d1a      	adds	r2, r3, #4
 8023d12:	600a      	str	r2, [r1, #0]
 8023d14:	681e      	ldr	r6, [r3, #0]
 8023d16:	6862      	ldr	r2, [r4, #4]
 8023d18:	2100      	movs	r1, #0
 8023d1a:	4630      	mov	r0, r6
 8023d1c:	f7dc faa0 	bl	8000260 <memchr>
 8023d20:	b108      	cbz	r0, 8023d26 <_printf_i+0x1f2>
 8023d22:	1b80      	subs	r0, r0, r6
 8023d24:	6060      	str	r0, [r4, #4]
 8023d26:	6863      	ldr	r3, [r4, #4]
 8023d28:	6123      	str	r3, [r4, #16]
 8023d2a:	2300      	movs	r3, #0
 8023d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023d30:	e7a8      	b.n	8023c84 <_printf_i+0x150>
 8023d32:	6923      	ldr	r3, [r4, #16]
 8023d34:	4632      	mov	r2, r6
 8023d36:	4649      	mov	r1, r9
 8023d38:	4640      	mov	r0, r8
 8023d3a:	47d0      	blx	sl
 8023d3c:	3001      	adds	r0, #1
 8023d3e:	d0ab      	beq.n	8023c98 <_printf_i+0x164>
 8023d40:	6823      	ldr	r3, [r4, #0]
 8023d42:	079b      	lsls	r3, r3, #30
 8023d44:	d413      	bmi.n	8023d6e <_printf_i+0x23a>
 8023d46:	68e0      	ldr	r0, [r4, #12]
 8023d48:	9b03      	ldr	r3, [sp, #12]
 8023d4a:	4298      	cmp	r0, r3
 8023d4c:	bfb8      	it	lt
 8023d4e:	4618      	movlt	r0, r3
 8023d50:	e7a4      	b.n	8023c9c <_printf_i+0x168>
 8023d52:	2301      	movs	r3, #1
 8023d54:	4632      	mov	r2, r6
 8023d56:	4649      	mov	r1, r9
 8023d58:	4640      	mov	r0, r8
 8023d5a:	47d0      	blx	sl
 8023d5c:	3001      	adds	r0, #1
 8023d5e:	d09b      	beq.n	8023c98 <_printf_i+0x164>
 8023d60:	3501      	adds	r5, #1
 8023d62:	68e3      	ldr	r3, [r4, #12]
 8023d64:	9903      	ldr	r1, [sp, #12]
 8023d66:	1a5b      	subs	r3, r3, r1
 8023d68:	42ab      	cmp	r3, r5
 8023d6a:	dcf2      	bgt.n	8023d52 <_printf_i+0x21e>
 8023d6c:	e7eb      	b.n	8023d46 <_printf_i+0x212>
 8023d6e:	2500      	movs	r5, #0
 8023d70:	f104 0619 	add.w	r6, r4, #25
 8023d74:	e7f5      	b.n	8023d62 <_printf_i+0x22e>
 8023d76:	bf00      	nop
 8023d78:	0802b554 	.word	0x0802b554
 8023d7c:	0802b565 	.word	0x0802b565

08023d80 <_putc_r>:
 8023d80:	b570      	push	{r4, r5, r6, lr}
 8023d82:	460d      	mov	r5, r1
 8023d84:	4614      	mov	r4, r2
 8023d86:	4606      	mov	r6, r0
 8023d88:	b118      	cbz	r0, 8023d92 <_putc_r+0x12>
 8023d8a:	6983      	ldr	r3, [r0, #24]
 8023d8c:	b90b      	cbnz	r3, 8023d92 <_putc_r+0x12>
 8023d8e:	f7fd f937 	bl	8021000 <__sinit>
 8023d92:	4b1c      	ldr	r3, [pc, #112]	; (8023e04 <_putc_r+0x84>)
 8023d94:	429c      	cmp	r4, r3
 8023d96:	d124      	bne.n	8023de2 <_putc_r+0x62>
 8023d98:	6874      	ldr	r4, [r6, #4]
 8023d9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023d9c:	07d8      	lsls	r0, r3, #31
 8023d9e:	d405      	bmi.n	8023dac <_putc_r+0x2c>
 8023da0:	89a3      	ldrh	r3, [r4, #12]
 8023da2:	0599      	lsls	r1, r3, #22
 8023da4:	d402      	bmi.n	8023dac <_putc_r+0x2c>
 8023da6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023da8:	f7fd fcdd 	bl	8021766 <__retarget_lock_acquire_recursive>
 8023dac:	68a3      	ldr	r3, [r4, #8]
 8023dae:	3b01      	subs	r3, #1
 8023db0:	2b00      	cmp	r3, #0
 8023db2:	60a3      	str	r3, [r4, #8]
 8023db4:	da05      	bge.n	8023dc2 <_putc_r+0x42>
 8023db6:	69a2      	ldr	r2, [r4, #24]
 8023db8:	4293      	cmp	r3, r2
 8023dba:	db1c      	blt.n	8023df6 <_putc_r+0x76>
 8023dbc:	b2eb      	uxtb	r3, r5
 8023dbe:	2b0a      	cmp	r3, #10
 8023dc0:	d019      	beq.n	8023df6 <_putc_r+0x76>
 8023dc2:	6823      	ldr	r3, [r4, #0]
 8023dc4:	1c5a      	adds	r2, r3, #1
 8023dc6:	6022      	str	r2, [r4, #0]
 8023dc8:	701d      	strb	r5, [r3, #0]
 8023dca:	b2ed      	uxtb	r5, r5
 8023dcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023dce:	07da      	lsls	r2, r3, #31
 8023dd0:	d405      	bmi.n	8023dde <_putc_r+0x5e>
 8023dd2:	89a3      	ldrh	r3, [r4, #12]
 8023dd4:	059b      	lsls	r3, r3, #22
 8023dd6:	d402      	bmi.n	8023dde <_putc_r+0x5e>
 8023dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023dda:	f7fd fcc6 	bl	802176a <__retarget_lock_release_recursive>
 8023dde:	4628      	mov	r0, r5
 8023de0:	bd70      	pop	{r4, r5, r6, pc}
 8023de2:	4b09      	ldr	r3, [pc, #36]	; (8023e08 <_putc_r+0x88>)
 8023de4:	429c      	cmp	r4, r3
 8023de6:	d101      	bne.n	8023dec <_putc_r+0x6c>
 8023de8:	68b4      	ldr	r4, [r6, #8]
 8023dea:	e7d6      	b.n	8023d9a <_putc_r+0x1a>
 8023dec:	4b07      	ldr	r3, [pc, #28]	; (8023e0c <_putc_r+0x8c>)
 8023dee:	429c      	cmp	r4, r3
 8023df0:	bf08      	it	eq
 8023df2:	68f4      	ldreq	r4, [r6, #12]
 8023df4:	e7d1      	b.n	8023d9a <_putc_r+0x1a>
 8023df6:	4629      	mov	r1, r5
 8023df8:	4622      	mov	r2, r4
 8023dfa:	4630      	mov	r0, r6
 8023dfc:	f7ff f856 	bl	8022eac <__swbuf_r>
 8023e00:	4605      	mov	r5, r0
 8023e02:	e7e3      	b.n	8023dcc <_putc_r+0x4c>
 8023e04:	0802afc4 	.word	0x0802afc4
 8023e08:	0802afe4 	.word	0x0802afe4
 8023e0c:	0802afa4 	.word	0x0802afa4

08023e10 <_read_r>:
 8023e10:	b538      	push	{r3, r4, r5, lr}
 8023e12:	4d07      	ldr	r5, [pc, #28]	; (8023e30 <_read_r+0x20>)
 8023e14:	4604      	mov	r4, r0
 8023e16:	4608      	mov	r0, r1
 8023e18:	4611      	mov	r1, r2
 8023e1a:	2200      	movs	r2, #0
 8023e1c:	602a      	str	r2, [r5, #0]
 8023e1e:	461a      	mov	r2, r3
 8023e20:	f7dc fff1 	bl	8000e06 <_read>
 8023e24:	1c43      	adds	r3, r0, #1
 8023e26:	d102      	bne.n	8023e2e <_read_r+0x1e>
 8023e28:	682b      	ldr	r3, [r5, #0]
 8023e2a:	b103      	cbz	r3, 8023e2e <_read_r+0x1e>
 8023e2c:	6023      	str	r3, [r4, #0]
 8023e2e:	bd38      	pop	{r3, r4, r5, pc}
 8023e30:	20001054 	.word	0x20001054

08023e34 <sniprintf>:
 8023e34:	b40c      	push	{r2, r3}
 8023e36:	b530      	push	{r4, r5, lr}
 8023e38:	4b17      	ldr	r3, [pc, #92]	; (8023e98 <sniprintf+0x64>)
 8023e3a:	1e0c      	subs	r4, r1, #0
 8023e3c:	681d      	ldr	r5, [r3, #0]
 8023e3e:	b09d      	sub	sp, #116	; 0x74
 8023e40:	da08      	bge.n	8023e54 <sniprintf+0x20>
 8023e42:	238b      	movs	r3, #139	; 0x8b
 8023e44:	602b      	str	r3, [r5, #0]
 8023e46:	f04f 30ff 	mov.w	r0, #4294967295
 8023e4a:	b01d      	add	sp, #116	; 0x74
 8023e4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023e50:	b002      	add	sp, #8
 8023e52:	4770      	bx	lr
 8023e54:	f44f 7302 	mov.w	r3, #520	; 0x208
 8023e58:	f8ad 3014 	strh.w	r3, [sp, #20]
 8023e5c:	bf14      	ite	ne
 8023e5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8023e62:	4623      	moveq	r3, r4
 8023e64:	9304      	str	r3, [sp, #16]
 8023e66:	9307      	str	r3, [sp, #28]
 8023e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8023e6c:	9002      	str	r0, [sp, #8]
 8023e6e:	9006      	str	r0, [sp, #24]
 8023e70:	f8ad 3016 	strh.w	r3, [sp, #22]
 8023e74:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023e76:	ab21      	add	r3, sp, #132	; 0x84
 8023e78:	a902      	add	r1, sp, #8
 8023e7a:	4628      	mov	r0, r5
 8023e7c:	9301      	str	r3, [sp, #4]
 8023e7e:	f7ff fb91 	bl	80235a4 <_svfiprintf_r>
 8023e82:	1c43      	adds	r3, r0, #1
 8023e84:	bfbc      	itt	lt
 8023e86:	238b      	movlt	r3, #139	; 0x8b
 8023e88:	602b      	strlt	r3, [r5, #0]
 8023e8a:	2c00      	cmp	r4, #0
 8023e8c:	d0dd      	beq.n	8023e4a <sniprintf+0x16>
 8023e8e:	9b02      	ldr	r3, [sp, #8]
 8023e90:	2200      	movs	r2, #0
 8023e92:	701a      	strb	r2, [r3, #0]
 8023e94:	e7d9      	b.n	8023e4a <sniprintf+0x16>
 8023e96:	bf00      	nop
 8023e98:	20000108 	.word	0x20000108

08023e9c <siscanf>:
 8023e9c:	b40e      	push	{r1, r2, r3}
 8023e9e:	b510      	push	{r4, lr}
 8023ea0:	b09f      	sub	sp, #124	; 0x7c
 8023ea2:	ac21      	add	r4, sp, #132	; 0x84
 8023ea4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8023ea8:	f854 2b04 	ldr.w	r2, [r4], #4
 8023eac:	9201      	str	r2, [sp, #4]
 8023eae:	f8ad 101c 	strh.w	r1, [sp, #28]
 8023eb2:	9004      	str	r0, [sp, #16]
 8023eb4:	9008      	str	r0, [sp, #32]
 8023eb6:	f7dc f9c1 	bl	800023c <strlen>
 8023eba:	4b0c      	ldr	r3, [pc, #48]	; (8023eec <siscanf+0x50>)
 8023ebc:	9005      	str	r0, [sp, #20]
 8023ebe:	9009      	str	r0, [sp, #36]	; 0x24
 8023ec0:	930d      	str	r3, [sp, #52]	; 0x34
 8023ec2:	480b      	ldr	r0, [pc, #44]	; (8023ef0 <siscanf+0x54>)
 8023ec4:	9a01      	ldr	r2, [sp, #4]
 8023ec6:	6800      	ldr	r0, [r0, #0]
 8023ec8:	9403      	str	r4, [sp, #12]
 8023eca:	2300      	movs	r3, #0
 8023ecc:	9311      	str	r3, [sp, #68]	; 0x44
 8023ece:	9316      	str	r3, [sp, #88]	; 0x58
 8023ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8023ed4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023ed8:	a904      	add	r1, sp, #16
 8023eda:	4623      	mov	r3, r4
 8023edc:	f000 f8b2 	bl	8024044 <__ssvfiscanf_r>
 8023ee0:	b01f      	add	sp, #124	; 0x7c
 8023ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023ee6:	b003      	add	sp, #12
 8023ee8:	4770      	bx	lr
 8023eea:	bf00      	nop
 8023eec:	08021c3b 	.word	0x08021c3b
 8023ef0:	20000108 	.word	0x20000108

08023ef4 <strncmp>:
 8023ef4:	b510      	push	{r4, lr}
 8023ef6:	b16a      	cbz	r2, 8023f14 <strncmp+0x20>
 8023ef8:	3901      	subs	r1, #1
 8023efa:	1884      	adds	r4, r0, r2
 8023efc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8023f00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8023f04:	4293      	cmp	r3, r2
 8023f06:	d103      	bne.n	8023f10 <strncmp+0x1c>
 8023f08:	42a0      	cmp	r0, r4
 8023f0a:	d001      	beq.n	8023f10 <strncmp+0x1c>
 8023f0c:	2b00      	cmp	r3, #0
 8023f0e:	d1f5      	bne.n	8023efc <strncmp+0x8>
 8023f10:	1a98      	subs	r0, r3, r2
 8023f12:	bd10      	pop	{r4, pc}
 8023f14:	4610      	mov	r0, r2
 8023f16:	e7fc      	b.n	8023f12 <strncmp+0x1e>

08023f18 <__ascii_wctomb>:
 8023f18:	b149      	cbz	r1, 8023f2e <__ascii_wctomb+0x16>
 8023f1a:	2aff      	cmp	r2, #255	; 0xff
 8023f1c:	bf85      	ittet	hi
 8023f1e:	238a      	movhi	r3, #138	; 0x8a
 8023f20:	6003      	strhi	r3, [r0, #0]
 8023f22:	700a      	strbls	r2, [r1, #0]
 8023f24:	f04f 30ff 	movhi.w	r0, #4294967295
 8023f28:	bf98      	it	ls
 8023f2a:	2001      	movls	r0, #1
 8023f2c:	4770      	bx	lr
 8023f2e:	4608      	mov	r0, r1
 8023f30:	4770      	bx	lr
	...

08023f34 <__env_lock>:
 8023f34:	4801      	ldr	r0, [pc, #4]	; (8023f3c <__env_lock+0x8>)
 8023f36:	f7fd bc16 	b.w	8021766 <__retarget_lock_acquire_recursive>
 8023f3a:	bf00      	nop
 8023f3c:	2000104a 	.word	0x2000104a

08023f40 <__env_unlock>:
 8023f40:	4801      	ldr	r0, [pc, #4]	; (8023f48 <__env_unlock+0x8>)
 8023f42:	f7fd bc12 	b.w	802176a <__retarget_lock_release_recursive>
 8023f46:	bf00      	nop
 8023f48:	2000104a 	.word	0x2000104a

08023f4c <memmove>:
 8023f4c:	4288      	cmp	r0, r1
 8023f4e:	b510      	push	{r4, lr}
 8023f50:	eb01 0402 	add.w	r4, r1, r2
 8023f54:	d902      	bls.n	8023f5c <memmove+0x10>
 8023f56:	4284      	cmp	r4, r0
 8023f58:	4623      	mov	r3, r4
 8023f5a:	d807      	bhi.n	8023f6c <memmove+0x20>
 8023f5c:	1e43      	subs	r3, r0, #1
 8023f5e:	42a1      	cmp	r1, r4
 8023f60:	d008      	beq.n	8023f74 <memmove+0x28>
 8023f62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023f66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023f6a:	e7f8      	b.n	8023f5e <memmove+0x12>
 8023f6c:	4402      	add	r2, r0
 8023f6e:	4601      	mov	r1, r0
 8023f70:	428a      	cmp	r2, r1
 8023f72:	d100      	bne.n	8023f76 <memmove+0x2a>
 8023f74:	bd10      	pop	{r4, pc}
 8023f76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023f7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023f7e:	e7f7      	b.n	8023f70 <memmove+0x24>

08023f80 <_malloc_usable_size_r>:
 8023f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023f84:	1f18      	subs	r0, r3, #4
 8023f86:	2b00      	cmp	r3, #0
 8023f88:	bfbc      	itt	lt
 8023f8a:	580b      	ldrlt	r3, [r1, r0]
 8023f8c:	18c0      	addlt	r0, r0, r3
 8023f8e:	4770      	bx	lr

08023f90 <_sungetc_r>:
 8023f90:	b538      	push	{r3, r4, r5, lr}
 8023f92:	1c4b      	adds	r3, r1, #1
 8023f94:	4614      	mov	r4, r2
 8023f96:	d103      	bne.n	8023fa0 <_sungetc_r+0x10>
 8023f98:	f04f 35ff 	mov.w	r5, #4294967295
 8023f9c:	4628      	mov	r0, r5
 8023f9e:	bd38      	pop	{r3, r4, r5, pc}
 8023fa0:	8993      	ldrh	r3, [r2, #12]
 8023fa2:	f023 0320 	bic.w	r3, r3, #32
 8023fa6:	8193      	strh	r3, [r2, #12]
 8023fa8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023faa:	6852      	ldr	r2, [r2, #4]
 8023fac:	b2cd      	uxtb	r5, r1
 8023fae:	b18b      	cbz	r3, 8023fd4 <_sungetc_r+0x44>
 8023fb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023fb2:	4293      	cmp	r3, r2
 8023fb4:	dd08      	ble.n	8023fc8 <_sungetc_r+0x38>
 8023fb6:	6823      	ldr	r3, [r4, #0]
 8023fb8:	1e5a      	subs	r2, r3, #1
 8023fba:	6022      	str	r2, [r4, #0]
 8023fbc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8023fc0:	6863      	ldr	r3, [r4, #4]
 8023fc2:	3301      	adds	r3, #1
 8023fc4:	6063      	str	r3, [r4, #4]
 8023fc6:	e7e9      	b.n	8023f9c <_sungetc_r+0xc>
 8023fc8:	4621      	mov	r1, r4
 8023fca:	f000 fb39 	bl	8024640 <__submore>
 8023fce:	2800      	cmp	r0, #0
 8023fd0:	d0f1      	beq.n	8023fb6 <_sungetc_r+0x26>
 8023fd2:	e7e1      	b.n	8023f98 <_sungetc_r+0x8>
 8023fd4:	6921      	ldr	r1, [r4, #16]
 8023fd6:	6823      	ldr	r3, [r4, #0]
 8023fd8:	b151      	cbz	r1, 8023ff0 <_sungetc_r+0x60>
 8023fda:	4299      	cmp	r1, r3
 8023fdc:	d208      	bcs.n	8023ff0 <_sungetc_r+0x60>
 8023fde:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8023fe2:	42a9      	cmp	r1, r5
 8023fe4:	d104      	bne.n	8023ff0 <_sungetc_r+0x60>
 8023fe6:	3b01      	subs	r3, #1
 8023fe8:	3201      	adds	r2, #1
 8023fea:	6023      	str	r3, [r4, #0]
 8023fec:	6062      	str	r2, [r4, #4]
 8023fee:	e7d5      	b.n	8023f9c <_sungetc_r+0xc>
 8023ff0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8023ff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023ff8:	6363      	str	r3, [r4, #52]	; 0x34
 8023ffa:	2303      	movs	r3, #3
 8023ffc:	63a3      	str	r3, [r4, #56]	; 0x38
 8023ffe:	4623      	mov	r3, r4
 8024000:	f803 5f46 	strb.w	r5, [r3, #70]!
 8024004:	6023      	str	r3, [r4, #0]
 8024006:	2301      	movs	r3, #1
 8024008:	e7dc      	b.n	8023fc4 <_sungetc_r+0x34>

0802400a <__ssrefill_r>:
 802400a:	b510      	push	{r4, lr}
 802400c:	460c      	mov	r4, r1
 802400e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8024010:	b169      	cbz	r1, 802402e <__ssrefill_r+0x24>
 8024012:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024016:	4299      	cmp	r1, r3
 8024018:	d001      	beq.n	802401e <__ssrefill_r+0x14>
 802401a:	f7fd fc41 	bl	80218a0 <_free_r>
 802401e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024020:	6063      	str	r3, [r4, #4]
 8024022:	2000      	movs	r0, #0
 8024024:	6360      	str	r0, [r4, #52]	; 0x34
 8024026:	b113      	cbz	r3, 802402e <__ssrefill_r+0x24>
 8024028:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802402a:	6023      	str	r3, [r4, #0]
 802402c:	bd10      	pop	{r4, pc}
 802402e:	6923      	ldr	r3, [r4, #16]
 8024030:	6023      	str	r3, [r4, #0]
 8024032:	2300      	movs	r3, #0
 8024034:	6063      	str	r3, [r4, #4]
 8024036:	89a3      	ldrh	r3, [r4, #12]
 8024038:	f043 0320 	orr.w	r3, r3, #32
 802403c:	81a3      	strh	r3, [r4, #12]
 802403e:	f04f 30ff 	mov.w	r0, #4294967295
 8024042:	e7f3      	b.n	802402c <__ssrefill_r+0x22>

08024044 <__ssvfiscanf_r>:
 8024044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024048:	460c      	mov	r4, r1
 802404a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 802404e:	2100      	movs	r1, #0
 8024050:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8024054:	49b2      	ldr	r1, [pc, #712]	; (8024320 <__ssvfiscanf_r+0x2dc>)
 8024056:	91a0      	str	r1, [sp, #640]	; 0x280
 8024058:	f10d 0804 	add.w	r8, sp, #4
 802405c:	49b1      	ldr	r1, [pc, #708]	; (8024324 <__ssvfiscanf_r+0x2e0>)
 802405e:	4fb2      	ldr	r7, [pc, #712]	; (8024328 <__ssvfiscanf_r+0x2e4>)
 8024060:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 802432c <__ssvfiscanf_r+0x2e8>
 8024064:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8024068:	4606      	mov	r6, r0
 802406a:	91a1      	str	r1, [sp, #644]	; 0x284
 802406c:	9300      	str	r3, [sp, #0]
 802406e:	f892 a000 	ldrb.w	sl, [r2]
 8024072:	f1ba 0f00 	cmp.w	sl, #0
 8024076:	f000 8151 	beq.w	802431c <__ssvfiscanf_r+0x2d8>
 802407a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 802407e:	f013 0308 	ands.w	r3, r3, #8
 8024082:	f102 0501 	add.w	r5, r2, #1
 8024086:	d019      	beq.n	80240bc <__ssvfiscanf_r+0x78>
 8024088:	6863      	ldr	r3, [r4, #4]
 802408a:	2b00      	cmp	r3, #0
 802408c:	dd0f      	ble.n	80240ae <__ssvfiscanf_r+0x6a>
 802408e:	6823      	ldr	r3, [r4, #0]
 8024090:	781a      	ldrb	r2, [r3, #0]
 8024092:	5cba      	ldrb	r2, [r7, r2]
 8024094:	0712      	lsls	r2, r2, #28
 8024096:	d401      	bmi.n	802409c <__ssvfiscanf_r+0x58>
 8024098:	462a      	mov	r2, r5
 802409a:	e7e8      	b.n	802406e <__ssvfiscanf_r+0x2a>
 802409c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802409e:	3201      	adds	r2, #1
 80240a0:	9245      	str	r2, [sp, #276]	; 0x114
 80240a2:	6862      	ldr	r2, [r4, #4]
 80240a4:	3301      	adds	r3, #1
 80240a6:	3a01      	subs	r2, #1
 80240a8:	6062      	str	r2, [r4, #4]
 80240aa:	6023      	str	r3, [r4, #0]
 80240ac:	e7ec      	b.n	8024088 <__ssvfiscanf_r+0x44>
 80240ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80240b0:	4621      	mov	r1, r4
 80240b2:	4630      	mov	r0, r6
 80240b4:	4798      	blx	r3
 80240b6:	2800      	cmp	r0, #0
 80240b8:	d0e9      	beq.n	802408e <__ssvfiscanf_r+0x4a>
 80240ba:	e7ed      	b.n	8024098 <__ssvfiscanf_r+0x54>
 80240bc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80240c0:	f040 8083 	bne.w	80241ca <__ssvfiscanf_r+0x186>
 80240c4:	9341      	str	r3, [sp, #260]	; 0x104
 80240c6:	9343      	str	r3, [sp, #268]	; 0x10c
 80240c8:	7853      	ldrb	r3, [r2, #1]
 80240ca:	2b2a      	cmp	r3, #42	; 0x2a
 80240cc:	bf02      	ittt	eq
 80240ce:	2310      	moveq	r3, #16
 80240d0:	1c95      	addeq	r5, r2, #2
 80240d2:	9341      	streq	r3, [sp, #260]	; 0x104
 80240d4:	220a      	movs	r2, #10
 80240d6:	46ab      	mov	fp, r5
 80240d8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80240dc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80240e0:	2b09      	cmp	r3, #9
 80240e2:	d91d      	bls.n	8024120 <__ssvfiscanf_r+0xdc>
 80240e4:	4891      	ldr	r0, [pc, #580]	; (802432c <__ssvfiscanf_r+0x2e8>)
 80240e6:	2203      	movs	r2, #3
 80240e8:	f7dc f8ba 	bl	8000260 <memchr>
 80240ec:	b140      	cbz	r0, 8024100 <__ssvfiscanf_r+0xbc>
 80240ee:	2301      	movs	r3, #1
 80240f0:	eba0 0009 	sub.w	r0, r0, r9
 80240f4:	fa03 f000 	lsl.w	r0, r3, r0
 80240f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80240fa:	4318      	orrs	r0, r3
 80240fc:	9041      	str	r0, [sp, #260]	; 0x104
 80240fe:	465d      	mov	r5, fp
 8024100:	f815 3b01 	ldrb.w	r3, [r5], #1
 8024104:	2b78      	cmp	r3, #120	; 0x78
 8024106:	d806      	bhi.n	8024116 <__ssvfiscanf_r+0xd2>
 8024108:	2b57      	cmp	r3, #87	; 0x57
 802410a:	d810      	bhi.n	802412e <__ssvfiscanf_r+0xea>
 802410c:	2b25      	cmp	r3, #37	; 0x25
 802410e:	d05c      	beq.n	80241ca <__ssvfiscanf_r+0x186>
 8024110:	d856      	bhi.n	80241c0 <__ssvfiscanf_r+0x17c>
 8024112:	2b00      	cmp	r3, #0
 8024114:	d074      	beq.n	8024200 <__ssvfiscanf_r+0x1bc>
 8024116:	2303      	movs	r3, #3
 8024118:	9347      	str	r3, [sp, #284]	; 0x11c
 802411a:	230a      	movs	r3, #10
 802411c:	9342      	str	r3, [sp, #264]	; 0x108
 802411e:	e081      	b.n	8024224 <__ssvfiscanf_r+0x1e0>
 8024120:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8024122:	fb02 1303 	mla	r3, r2, r3, r1
 8024126:	3b30      	subs	r3, #48	; 0x30
 8024128:	9343      	str	r3, [sp, #268]	; 0x10c
 802412a:	465d      	mov	r5, fp
 802412c:	e7d3      	b.n	80240d6 <__ssvfiscanf_r+0x92>
 802412e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8024132:	2a20      	cmp	r2, #32
 8024134:	d8ef      	bhi.n	8024116 <__ssvfiscanf_r+0xd2>
 8024136:	a101      	add	r1, pc, #4	; (adr r1, 802413c <__ssvfiscanf_r+0xf8>)
 8024138:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802413c:	0802420f 	.word	0x0802420f
 8024140:	08024117 	.word	0x08024117
 8024144:	08024117 	.word	0x08024117
 8024148:	0802426d 	.word	0x0802426d
 802414c:	08024117 	.word	0x08024117
 8024150:	08024117 	.word	0x08024117
 8024154:	08024117 	.word	0x08024117
 8024158:	08024117 	.word	0x08024117
 802415c:	08024117 	.word	0x08024117
 8024160:	08024117 	.word	0x08024117
 8024164:	08024117 	.word	0x08024117
 8024168:	08024283 	.word	0x08024283
 802416c:	08024259 	.word	0x08024259
 8024170:	080241c7 	.word	0x080241c7
 8024174:	080241c7 	.word	0x080241c7
 8024178:	080241c7 	.word	0x080241c7
 802417c:	08024117 	.word	0x08024117
 8024180:	0802425d 	.word	0x0802425d
 8024184:	08024117 	.word	0x08024117
 8024188:	08024117 	.word	0x08024117
 802418c:	08024117 	.word	0x08024117
 8024190:	08024117 	.word	0x08024117
 8024194:	08024293 	.word	0x08024293
 8024198:	08024265 	.word	0x08024265
 802419c:	08024207 	.word	0x08024207
 80241a0:	08024117 	.word	0x08024117
 80241a4:	08024117 	.word	0x08024117
 80241a8:	0802428f 	.word	0x0802428f
 80241ac:	08024117 	.word	0x08024117
 80241b0:	08024259 	.word	0x08024259
 80241b4:	08024117 	.word	0x08024117
 80241b8:	08024117 	.word	0x08024117
 80241bc:	0802420f 	.word	0x0802420f
 80241c0:	3b45      	subs	r3, #69	; 0x45
 80241c2:	2b02      	cmp	r3, #2
 80241c4:	d8a7      	bhi.n	8024116 <__ssvfiscanf_r+0xd2>
 80241c6:	2305      	movs	r3, #5
 80241c8:	e02b      	b.n	8024222 <__ssvfiscanf_r+0x1de>
 80241ca:	6863      	ldr	r3, [r4, #4]
 80241cc:	2b00      	cmp	r3, #0
 80241ce:	dd0d      	ble.n	80241ec <__ssvfiscanf_r+0x1a8>
 80241d0:	6823      	ldr	r3, [r4, #0]
 80241d2:	781a      	ldrb	r2, [r3, #0]
 80241d4:	4552      	cmp	r2, sl
 80241d6:	f040 80a1 	bne.w	802431c <__ssvfiscanf_r+0x2d8>
 80241da:	3301      	adds	r3, #1
 80241dc:	6862      	ldr	r2, [r4, #4]
 80241de:	6023      	str	r3, [r4, #0]
 80241e0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80241e2:	3a01      	subs	r2, #1
 80241e4:	3301      	adds	r3, #1
 80241e6:	6062      	str	r2, [r4, #4]
 80241e8:	9345      	str	r3, [sp, #276]	; 0x114
 80241ea:	e755      	b.n	8024098 <__ssvfiscanf_r+0x54>
 80241ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80241ee:	4621      	mov	r1, r4
 80241f0:	4630      	mov	r0, r6
 80241f2:	4798      	blx	r3
 80241f4:	2800      	cmp	r0, #0
 80241f6:	d0eb      	beq.n	80241d0 <__ssvfiscanf_r+0x18c>
 80241f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80241fa:	2800      	cmp	r0, #0
 80241fc:	f040 8084 	bne.w	8024308 <__ssvfiscanf_r+0x2c4>
 8024200:	f04f 30ff 	mov.w	r0, #4294967295
 8024204:	e086      	b.n	8024314 <__ssvfiscanf_r+0x2d0>
 8024206:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8024208:	f042 0220 	orr.w	r2, r2, #32
 802420c:	9241      	str	r2, [sp, #260]	; 0x104
 802420e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8024210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024214:	9241      	str	r2, [sp, #260]	; 0x104
 8024216:	2210      	movs	r2, #16
 8024218:	2b6f      	cmp	r3, #111	; 0x6f
 802421a:	9242      	str	r2, [sp, #264]	; 0x108
 802421c:	bf34      	ite	cc
 802421e:	2303      	movcc	r3, #3
 8024220:	2304      	movcs	r3, #4
 8024222:	9347      	str	r3, [sp, #284]	; 0x11c
 8024224:	6863      	ldr	r3, [r4, #4]
 8024226:	2b00      	cmp	r3, #0
 8024228:	dd41      	ble.n	80242ae <__ssvfiscanf_r+0x26a>
 802422a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802422c:	0659      	lsls	r1, r3, #25
 802422e:	d404      	bmi.n	802423a <__ssvfiscanf_r+0x1f6>
 8024230:	6823      	ldr	r3, [r4, #0]
 8024232:	781a      	ldrb	r2, [r3, #0]
 8024234:	5cba      	ldrb	r2, [r7, r2]
 8024236:	0712      	lsls	r2, r2, #28
 8024238:	d440      	bmi.n	80242bc <__ssvfiscanf_r+0x278>
 802423a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802423c:	2b02      	cmp	r3, #2
 802423e:	dc4f      	bgt.n	80242e0 <__ssvfiscanf_r+0x29c>
 8024240:	466b      	mov	r3, sp
 8024242:	4622      	mov	r2, r4
 8024244:	a941      	add	r1, sp, #260	; 0x104
 8024246:	4630      	mov	r0, r6
 8024248:	f000 f874 	bl	8024334 <_scanf_chars>
 802424c:	2801      	cmp	r0, #1
 802424e:	d065      	beq.n	802431c <__ssvfiscanf_r+0x2d8>
 8024250:	2802      	cmp	r0, #2
 8024252:	f47f af21 	bne.w	8024098 <__ssvfiscanf_r+0x54>
 8024256:	e7cf      	b.n	80241f8 <__ssvfiscanf_r+0x1b4>
 8024258:	220a      	movs	r2, #10
 802425a:	e7dd      	b.n	8024218 <__ssvfiscanf_r+0x1d4>
 802425c:	2300      	movs	r3, #0
 802425e:	9342      	str	r3, [sp, #264]	; 0x108
 8024260:	2303      	movs	r3, #3
 8024262:	e7de      	b.n	8024222 <__ssvfiscanf_r+0x1de>
 8024264:	2308      	movs	r3, #8
 8024266:	9342      	str	r3, [sp, #264]	; 0x108
 8024268:	2304      	movs	r3, #4
 802426a:	e7da      	b.n	8024222 <__ssvfiscanf_r+0x1de>
 802426c:	4629      	mov	r1, r5
 802426e:	4640      	mov	r0, r8
 8024270:	f000 f9ac 	bl	80245cc <__sccl>
 8024274:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8024276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802427a:	9341      	str	r3, [sp, #260]	; 0x104
 802427c:	4605      	mov	r5, r0
 802427e:	2301      	movs	r3, #1
 8024280:	e7cf      	b.n	8024222 <__ssvfiscanf_r+0x1de>
 8024282:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8024284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024288:	9341      	str	r3, [sp, #260]	; 0x104
 802428a:	2300      	movs	r3, #0
 802428c:	e7c9      	b.n	8024222 <__ssvfiscanf_r+0x1de>
 802428e:	2302      	movs	r3, #2
 8024290:	e7c7      	b.n	8024222 <__ssvfiscanf_r+0x1de>
 8024292:	9841      	ldr	r0, [sp, #260]	; 0x104
 8024294:	06c3      	lsls	r3, r0, #27
 8024296:	f53f aeff 	bmi.w	8024098 <__ssvfiscanf_r+0x54>
 802429a:	9b00      	ldr	r3, [sp, #0]
 802429c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802429e:	1d19      	adds	r1, r3, #4
 80242a0:	9100      	str	r1, [sp, #0]
 80242a2:	681b      	ldr	r3, [r3, #0]
 80242a4:	07c0      	lsls	r0, r0, #31
 80242a6:	bf4c      	ite	mi
 80242a8:	801a      	strhmi	r2, [r3, #0]
 80242aa:	601a      	strpl	r2, [r3, #0]
 80242ac:	e6f4      	b.n	8024098 <__ssvfiscanf_r+0x54>
 80242ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80242b0:	4621      	mov	r1, r4
 80242b2:	4630      	mov	r0, r6
 80242b4:	4798      	blx	r3
 80242b6:	2800      	cmp	r0, #0
 80242b8:	d0b7      	beq.n	802422a <__ssvfiscanf_r+0x1e6>
 80242ba:	e79d      	b.n	80241f8 <__ssvfiscanf_r+0x1b4>
 80242bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80242be:	3201      	adds	r2, #1
 80242c0:	9245      	str	r2, [sp, #276]	; 0x114
 80242c2:	6862      	ldr	r2, [r4, #4]
 80242c4:	3a01      	subs	r2, #1
 80242c6:	2a00      	cmp	r2, #0
 80242c8:	6062      	str	r2, [r4, #4]
 80242ca:	dd02      	ble.n	80242d2 <__ssvfiscanf_r+0x28e>
 80242cc:	3301      	adds	r3, #1
 80242ce:	6023      	str	r3, [r4, #0]
 80242d0:	e7ae      	b.n	8024230 <__ssvfiscanf_r+0x1ec>
 80242d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80242d4:	4621      	mov	r1, r4
 80242d6:	4630      	mov	r0, r6
 80242d8:	4798      	blx	r3
 80242da:	2800      	cmp	r0, #0
 80242dc:	d0a8      	beq.n	8024230 <__ssvfiscanf_r+0x1ec>
 80242de:	e78b      	b.n	80241f8 <__ssvfiscanf_r+0x1b4>
 80242e0:	2b04      	cmp	r3, #4
 80242e2:	dc06      	bgt.n	80242f2 <__ssvfiscanf_r+0x2ae>
 80242e4:	466b      	mov	r3, sp
 80242e6:	4622      	mov	r2, r4
 80242e8:	a941      	add	r1, sp, #260	; 0x104
 80242ea:	4630      	mov	r0, r6
 80242ec:	f000 f87a 	bl	80243e4 <_scanf_i>
 80242f0:	e7ac      	b.n	802424c <__ssvfiscanf_r+0x208>
 80242f2:	4b0f      	ldr	r3, [pc, #60]	; (8024330 <__ssvfiscanf_r+0x2ec>)
 80242f4:	2b00      	cmp	r3, #0
 80242f6:	f43f aecf 	beq.w	8024098 <__ssvfiscanf_r+0x54>
 80242fa:	466b      	mov	r3, sp
 80242fc:	4622      	mov	r2, r4
 80242fe:	a941      	add	r1, sp, #260	; 0x104
 8024300:	4630      	mov	r0, r6
 8024302:	f3af 8000 	nop.w
 8024306:	e7a1      	b.n	802424c <__ssvfiscanf_r+0x208>
 8024308:	89a3      	ldrh	r3, [r4, #12]
 802430a:	f013 0f40 	tst.w	r3, #64	; 0x40
 802430e:	bf18      	it	ne
 8024310:	f04f 30ff 	movne.w	r0, #4294967295
 8024314:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8024318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802431c:	9844      	ldr	r0, [sp, #272]	; 0x110
 802431e:	e7f9      	b.n	8024314 <__ssvfiscanf_r+0x2d0>
 8024320:	08023f91 	.word	0x08023f91
 8024324:	0802400b 	.word	0x0802400b
 8024328:	0802b439 	.word	0x0802b439
 802432c:	0802b549 	.word	0x0802b549
 8024330:	00000000 	.word	0x00000000

08024334 <_scanf_chars>:
 8024334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024338:	4615      	mov	r5, r2
 802433a:	688a      	ldr	r2, [r1, #8]
 802433c:	4680      	mov	r8, r0
 802433e:	460c      	mov	r4, r1
 8024340:	b932      	cbnz	r2, 8024350 <_scanf_chars+0x1c>
 8024342:	698a      	ldr	r2, [r1, #24]
 8024344:	2a00      	cmp	r2, #0
 8024346:	bf0c      	ite	eq
 8024348:	2201      	moveq	r2, #1
 802434a:	f04f 32ff 	movne.w	r2, #4294967295
 802434e:	608a      	str	r2, [r1, #8]
 8024350:	6822      	ldr	r2, [r4, #0]
 8024352:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80243e0 <_scanf_chars+0xac>
 8024356:	06d1      	lsls	r1, r2, #27
 8024358:	bf5f      	itttt	pl
 802435a:	681a      	ldrpl	r2, [r3, #0]
 802435c:	1d11      	addpl	r1, r2, #4
 802435e:	6019      	strpl	r1, [r3, #0]
 8024360:	6816      	ldrpl	r6, [r2, #0]
 8024362:	2700      	movs	r7, #0
 8024364:	69a0      	ldr	r0, [r4, #24]
 8024366:	b188      	cbz	r0, 802438c <_scanf_chars+0x58>
 8024368:	2801      	cmp	r0, #1
 802436a:	d107      	bne.n	802437c <_scanf_chars+0x48>
 802436c:	682b      	ldr	r3, [r5, #0]
 802436e:	781a      	ldrb	r2, [r3, #0]
 8024370:	6963      	ldr	r3, [r4, #20]
 8024372:	5c9b      	ldrb	r3, [r3, r2]
 8024374:	b953      	cbnz	r3, 802438c <_scanf_chars+0x58>
 8024376:	bb27      	cbnz	r7, 80243c2 <_scanf_chars+0x8e>
 8024378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802437c:	2802      	cmp	r0, #2
 802437e:	d120      	bne.n	80243c2 <_scanf_chars+0x8e>
 8024380:	682b      	ldr	r3, [r5, #0]
 8024382:	781b      	ldrb	r3, [r3, #0]
 8024384:	f813 3009 	ldrb.w	r3, [r3, r9]
 8024388:	071b      	lsls	r3, r3, #28
 802438a:	d41a      	bmi.n	80243c2 <_scanf_chars+0x8e>
 802438c:	6823      	ldr	r3, [r4, #0]
 802438e:	06da      	lsls	r2, r3, #27
 8024390:	bf5e      	ittt	pl
 8024392:	682b      	ldrpl	r3, [r5, #0]
 8024394:	781b      	ldrbpl	r3, [r3, #0]
 8024396:	f806 3b01 	strbpl.w	r3, [r6], #1
 802439a:	682a      	ldr	r2, [r5, #0]
 802439c:	686b      	ldr	r3, [r5, #4]
 802439e:	3201      	adds	r2, #1
 80243a0:	602a      	str	r2, [r5, #0]
 80243a2:	68a2      	ldr	r2, [r4, #8]
 80243a4:	3b01      	subs	r3, #1
 80243a6:	3a01      	subs	r2, #1
 80243a8:	606b      	str	r3, [r5, #4]
 80243aa:	3701      	adds	r7, #1
 80243ac:	60a2      	str	r2, [r4, #8]
 80243ae:	b142      	cbz	r2, 80243c2 <_scanf_chars+0x8e>
 80243b0:	2b00      	cmp	r3, #0
 80243b2:	dcd7      	bgt.n	8024364 <_scanf_chars+0x30>
 80243b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80243b8:	4629      	mov	r1, r5
 80243ba:	4640      	mov	r0, r8
 80243bc:	4798      	blx	r3
 80243be:	2800      	cmp	r0, #0
 80243c0:	d0d0      	beq.n	8024364 <_scanf_chars+0x30>
 80243c2:	6823      	ldr	r3, [r4, #0]
 80243c4:	f013 0310 	ands.w	r3, r3, #16
 80243c8:	d105      	bne.n	80243d6 <_scanf_chars+0xa2>
 80243ca:	68e2      	ldr	r2, [r4, #12]
 80243cc:	3201      	adds	r2, #1
 80243ce:	60e2      	str	r2, [r4, #12]
 80243d0:	69a2      	ldr	r2, [r4, #24]
 80243d2:	b102      	cbz	r2, 80243d6 <_scanf_chars+0xa2>
 80243d4:	7033      	strb	r3, [r6, #0]
 80243d6:	6923      	ldr	r3, [r4, #16]
 80243d8:	441f      	add	r7, r3
 80243da:	6127      	str	r7, [r4, #16]
 80243dc:	2000      	movs	r0, #0
 80243de:	e7cb      	b.n	8024378 <_scanf_chars+0x44>
 80243e0:	0802b439 	.word	0x0802b439

080243e4 <_scanf_i>:
 80243e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243e8:	4698      	mov	r8, r3
 80243ea:	4b74      	ldr	r3, [pc, #464]	; (80245bc <_scanf_i+0x1d8>)
 80243ec:	460c      	mov	r4, r1
 80243ee:	4682      	mov	sl, r0
 80243f0:	4616      	mov	r6, r2
 80243f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80243f6:	b087      	sub	sp, #28
 80243f8:	ab03      	add	r3, sp, #12
 80243fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80243fe:	4b70      	ldr	r3, [pc, #448]	; (80245c0 <_scanf_i+0x1dc>)
 8024400:	69a1      	ldr	r1, [r4, #24]
 8024402:	4a70      	ldr	r2, [pc, #448]	; (80245c4 <_scanf_i+0x1e0>)
 8024404:	2903      	cmp	r1, #3
 8024406:	bf18      	it	ne
 8024408:	461a      	movne	r2, r3
 802440a:	68a3      	ldr	r3, [r4, #8]
 802440c:	9201      	str	r2, [sp, #4]
 802440e:	1e5a      	subs	r2, r3, #1
 8024410:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8024414:	bf88      	it	hi
 8024416:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802441a:	4627      	mov	r7, r4
 802441c:	bf82      	ittt	hi
 802441e:	eb03 0905 	addhi.w	r9, r3, r5
 8024422:	f240 135d 	movwhi	r3, #349	; 0x15d
 8024426:	60a3      	strhi	r3, [r4, #8]
 8024428:	f857 3b1c 	ldr.w	r3, [r7], #28
 802442c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8024430:	bf98      	it	ls
 8024432:	f04f 0900 	movls.w	r9, #0
 8024436:	6023      	str	r3, [r4, #0]
 8024438:	463d      	mov	r5, r7
 802443a:	f04f 0b00 	mov.w	fp, #0
 802443e:	6831      	ldr	r1, [r6, #0]
 8024440:	ab03      	add	r3, sp, #12
 8024442:	7809      	ldrb	r1, [r1, #0]
 8024444:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8024448:	2202      	movs	r2, #2
 802444a:	f7db ff09 	bl	8000260 <memchr>
 802444e:	b328      	cbz	r0, 802449c <_scanf_i+0xb8>
 8024450:	f1bb 0f01 	cmp.w	fp, #1
 8024454:	d159      	bne.n	802450a <_scanf_i+0x126>
 8024456:	6862      	ldr	r2, [r4, #4]
 8024458:	b92a      	cbnz	r2, 8024466 <_scanf_i+0x82>
 802445a:	6822      	ldr	r2, [r4, #0]
 802445c:	2308      	movs	r3, #8
 802445e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024462:	6063      	str	r3, [r4, #4]
 8024464:	6022      	str	r2, [r4, #0]
 8024466:	6822      	ldr	r2, [r4, #0]
 8024468:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802446c:	6022      	str	r2, [r4, #0]
 802446e:	68a2      	ldr	r2, [r4, #8]
 8024470:	1e51      	subs	r1, r2, #1
 8024472:	60a1      	str	r1, [r4, #8]
 8024474:	b192      	cbz	r2, 802449c <_scanf_i+0xb8>
 8024476:	6832      	ldr	r2, [r6, #0]
 8024478:	1c51      	adds	r1, r2, #1
 802447a:	6031      	str	r1, [r6, #0]
 802447c:	7812      	ldrb	r2, [r2, #0]
 802447e:	f805 2b01 	strb.w	r2, [r5], #1
 8024482:	6872      	ldr	r2, [r6, #4]
 8024484:	3a01      	subs	r2, #1
 8024486:	2a00      	cmp	r2, #0
 8024488:	6072      	str	r2, [r6, #4]
 802448a:	dc07      	bgt.n	802449c <_scanf_i+0xb8>
 802448c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8024490:	4631      	mov	r1, r6
 8024492:	4650      	mov	r0, sl
 8024494:	4790      	blx	r2
 8024496:	2800      	cmp	r0, #0
 8024498:	f040 8085 	bne.w	80245a6 <_scanf_i+0x1c2>
 802449c:	f10b 0b01 	add.w	fp, fp, #1
 80244a0:	f1bb 0f03 	cmp.w	fp, #3
 80244a4:	d1cb      	bne.n	802443e <_scanf_i+0x5a>
 80244a6:	6863      	ldr	r3, [r4, #4]
 80244a8:	b90b      	cbnz	r3, 80244ae <_scanf_i+0xca>
 80244aa:	230a      	movs	r3, #10
 80244ac:	6063      	str	r3, [r4, #4]
 80244ae:	6863      	ldr	r3, [r4, #4]
 80244b0:	4945      	ldr	r1, [pc, #276]	; (80245c8 <_scanf_i+0x1e4>)
 80244b2:	6960      	ldr	r0, [r4, #20]
 80244b4:	1ac9      	subs	r1, r1, r3
 80244b6:	f000 f889 	bl	80245cc <__sccl>
 80244ba:	f04f 0b00 	mov.w	fp, #0
 80244be:	68a3      	ldr	r3, [r4, #8]
 80244c0:	6822      	ldr	r2, [r4, #0]
 80244c2:	2b00      	cmp	r3, #0
 80244c4:	d03d      	beq.n	8024542 <_scanf_i+0x15e>
 80244c6:	6831      	ldr	r1, [r6, #0]
 80244c8:	6960      	ldr	r0, [r4, #20]
 80244ca:	f891 c000 	ldrb.w	ip, [r1]
 80244ce:	f810 000c 	ldrb.w	r0, [r0, ip]
 80244d2:	2800      	cmp	r0, #0
 80244d4:	d035      	beq.n	8024542 <_scanf_i+0x15e>
 80244d6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80244da:	d124      	bne.n	8024526 <_scanf_i+0x142>
 80244dc:	0510      	lsls	r0, r2, #20
 80244de:	d522      	bpl.n	8024526 <_scanf_i+0x142>
 80244e0:	f10b 0b01 	add.w	fp, fp, #1
 80244e4:	f1b9 0f00 	cmp.w	r9, #0
 80244e8:	d003      	beq.n	80244f2 <_scanf_i+0x10e>
 80244ea:	3301      	adds	r3, #1
 80244ec:	f109 39ff 	add.w	r9, r9, #4294967295
 80244f0:	60a3      	str	r3, [r4, #8]
 80244f2:	6873      	ldr	r3, [r6, #4]
 80244f4:	3b01      	subs	r3, #1
 80244f6:	2b00      	cmp	r3, #0
 80244f8:	6073      	str	r3, [r6, #4]
 80244fa:	dd1b      	ble.n	8024534 <_scanf_i+0x150>
 80244fc:	6833      	ldr	r3, [r6, #0]
 80244fe:	3301      	adds	r3, #1
 8024500:	6033      	str	r3, [r6, #0]
 8024502:	68a3      	ldr	r3, [r4, #8]
 8024504:	3b01      	subs	r3, #1
 8024506:	60a3      	str	r3, [r4, #8]
 8024508:	e7d9      	b.n	80244be <_scanf_i+0xda>
 802450a:	f1bb 0f02 	cmp.w	fp, #2
 802450e:	d1ae      	bne.n	802446e <_scanf_i+0x8a>
 8024510:	6822      	ldr	r2, [r4, #0]
 8024512:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8024516:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802451a:	d1bf      	bne.n	802449c <_scanf_i+0xb8>
 802451c:	2310      	movs	r3, #16
 802451e:	6063      	str	r3, [r4, #4]
 8024520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8024524:	e7a2      	b.n	802446c <_scanf_i+0x88>
 8024526:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802452a:	6022      	str	r2, [r4, #0]
 802452c:	780b      	ldrb	r3, [r1, #0]
 802452e:	f805 3b01 	strb.w	r3, [r5], #1
 8024532:	e7de      	b.n	80244f2 <_scanf_i+0x10e>
 8024534:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8024538:	4631      	mov	r1, r6
 802453a:	4650      	mov	r0, sl
 802453c:	4798      	blx	r3
 802453e:	2800      	cmp	r0, #0
 8024540:	d0df      	beq.n	8024502 <_scanf_i+0x11e>
 8024542:	6823      	ldr	r3, [r4, #0]
 8024544:	05d9      	lsls	r1, r3, #23
 8024546:	d50d      	bpl.n	8024564 <_scanf_i+0x180>
 8024548:	42bd      	cmp	r5, r7
 802454a:	d909      	bls.n	8024560 <_scanf_i+0x17c>
 802454c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8024550:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8024554:	4632      	mov	r2, r6
 8024556:	4650      	mov	r0, sl
 8024558:	4798      	blx	r3
 802455a:	f105 39ff 	add.w	r9, r5, #4294967295
 802455e:	464d      	mov	r5, r9
 8024560:	42bd      	cmp	r5, r7
 8024562:	d028      	beq.n	80245b6 <_scanf_i+0x1d2>
 8024564:	6822      	ldr	r2, [r4, #0]
 8024566:	f012 0210 	ands.w	r2, r2, #16
 802456a:	d113      	bne.n	8024594 <_scanf_i+0x1b0>
 802456c:	702a      	strb	r2, [r5, #0]
 802456e:	6863      	ldr	r3, [r4, #4]
 8024570:	9e01      	ldr	r6, [sp, #4]
 8024572:	4639      	mov	r1, r7
 8024574:	4650      	mov	r0, sl
 8024576:	47b0      	blx	r6
 8024578:	f8d8 3000 	ldr.w	r3, [r8]
 802457c:	6821      	ldr	r1, [r4, #0]
 802457e:	1d1a      	adds	r2, r3, #4
 8024580:	f8c8 2000 	str.w	r2, [r8]
 8024584:	f011 0f20 	tst.w	r1, #32
 8024588:	681b      	ldr	r3, [r3, #0]
 802458a:	d00f      	beq.n	80245ac <_scanf_i+0x1c8>
 802458c:	6018      	str	r0, [r3, #0]
 802458e:	68e3      	ldr	r3, [r4, #12]
 8024590:	3301      	adds	r3, #1
 8024592:	60e3      	str	r3, [r4, #12]
 8024594:	1bed      	subs	r5, r5, r7
 8024596:	44ab      	add	fp, r5
 8024598:	6925      	ldr	r5, [r4, #16]
 802459a:	445d      	add	r5, fp
 802459c:	6125      	str	r5, [r4, #16]
 802459e:	2000      	movs	r0, #0
 80245a0:	b007      	add	sp, #28
 80245a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80245a6:	f04f 0b00 	mov.w	fp, #0
 80245aa:	e7ca      	b.n	8024542 <_scanf_i+0x15e>
 80245ac:	07ca      	lsls	r2, r1, #31
 80245ae:	bf4c      	ite	mi
 80245b0:	8018      	strhmi	r0, [r3, #0]
 80245b2:	6018      	strpl	r0, [r3, #0]
 80245b4:	e7eb      	b.n	802458e <_scanf_i+0x1aa>
 80245b6:	2001      	movs	r0, #1
 80245b8:	e7f2      	b.n	80245a0 <_scanf_i+0x1bc>
 80245ba:	bf00      	nop
 80245bc:	0802817c 	.word	0x0802817c
 80245c0:	080229b5 	.word	0x080229b5
 80245c4:	080228a5 	.word	0x080228a5
 80245c8:	0802b58f 	.word	0x0802b58f

080245cc <__sccl>:
 80245cc:	b570      	push	{r4, r5, r6, lr}
 80245ce:	780b      	ldrb	r3, [r1, #0]
 80245d0:	4604      	mov	r4, r0
 80245d2:	2b5e      	cmp	r3, #94	; 0x5e
 80245d4:	bf0b      	itete	eq
 80245d6:	784b      	ldrbeq	r3, [r1, #1]
 80245d8:	1c48      	addne	r0, r1, #1
 80245da:	1c88      	addeq	r0, r1, #2
 80245dc:	2200      	movne	r2, #0
 80245de:	bf08      	it	eq
 80245e0:	2201      	moveq	r2, #1
 80245e2:	1e61      	subs	r1, r4, #1
 80245e4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80245e8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80245ec:	42a9      	cmp	r1, r5
 80245ee:	d1fb      	bne.n	80245e8 <__sccl+0x1c>
 80245f0:	b90b      	cbnz	r3, 80245f6 <__sccl+0x2a>
 80245f2:	3801      	subs	r0, #1
 80245f4:	bd70      	pop	{r4, r5, r6, pc}
 80245f6:	f082 0101 	eor.w	r1, r2, #1
 80245fa:	54e1      	strb	r1, [r4, r3]
 80245fc:	1c42      	adds	r2, r0, #1
 80245fe:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8024602:	2d2d      	cmp	r5, #45	; 0x2d
 8024604:	f102 36ff 	add.w	r6, r2, #4294967295
 8024608:	4610      	mov	r0, r2
 802460a:	d006      	beq.n	802461a <__sccl+0x4e>
 802460c:	2d5d      	cmp	r5, #93	; 0x5d
 802460e:	d0f1      	beq.n	80245f4 <__sccl+0x28>
 8024610:	b90d      	cbnz	r5, 8024616 <__sccl+0x4a>
 8024612:	4630      	mov	r0, r6
 8024614:	e7ee      	b.n	80245f4 <__sccl+0x28>
 8024616:	462b      	mov	r3, r5
 8024618:	e7ef      	b.n	80245fa <__sccl+0x2e>
 802461a:	7816      	ldrb	r6, [r2, #0]
 802461c:	2e5d      	cmp	r6, #93	; 0x5d
 802461e:	d0fa      	beq.n	8024616 <__sccl+0x4a>
 8024620:	42b3      	cmp	r3, r6
 8024622:	dcf8      	bgt.n	8024616 <__sccl+0x4a>
 8024624:	4618      	mov	r0, r3
 8024626:	3001      	adds	r0, #1
 8024628:	4286      	cmp	r6, r0
 802462a:	5421      	strb	r1, [r4, r0]
 802462c:	dcfb      	bgt.n	8024626 <__sccl+0x5a>
 802462e:	43d8      	mvns	r0, r3
 8024630:	4430      	add	r0, r6
 8024632:	1c5d      	adds	r5, r3, #1
 8024634:	42b3      	cmp	r3, r6
 8024636:	bfa8      	it	ge
 8024638:	2000      	movge	r0, #0
 802463a:	182b      	adds	r3, r5, r0
 802463c:	3202      	adds	r2, #2
 802463e:	e7de      	b.n	80245fe <__sccl+0x32>

08024640 <__submore>:
 8024640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024644:	460c      	mov	r4, r1
 8024646:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8024648:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802464c:	4299      	cmp	r1, r3
 802464e:	d11d      	bne.n	802468c <__submore+0x4c>
 8024650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024654:	f7fd f974 	bl	8021940 <_malloc_r>
 8024658:	b918      	cbnz	r0, 8024662 <__submore+0x22>
 802465a:	f04f 30ff 	mov.w	r0, #4294967295
 802465e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024666:	63a3      	str	r3, [r4, #56]	; 0x38
 8024668:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802466c:	6360      	str	r0, [r4, #52]	; 0x34
 802466e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8024672:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8024676:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802467a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802467e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8024682:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8024686:	6020      	str	r0, [r4, #0]
 8024688:	2000      	movs	r0, #0
 802468a:	e7e8      	b.n	802465e <__submore+0x1e>
 802468c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802468e:	0077      	lsls	r7, r6, #1
 8024690:	463a      	mov	r2, r7
 8024692:	f7fe ff05 	bl	80234a0 <_realloc_r>
 8024696:	4605      	mov	r5, r0
 8024698:	2800      	cmp	r0, #0
 802469a:	d0de      	beq.n	802465a <__submore+0x1a>
 802469c:	eb00 0806 	add.w	r8, r0, r6
 80246a0:	4601      	mov	r1, r0
 80246a2:	4632      	mov	r2, r6
 80246a4:	4640      	mov	r0, r8
 80246a6:	f7fd f8d5 	bl	8021854 <memcpy>
 80246aa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80246ae:	f8c4 8000 	str.w	r8, [r4]
 80246b2:	e7e9      	b.n	8024688 <__submore+0x48>

080246b4 <_init>:
 80246b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80246b6:	bf00      	nop
 80246b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80246ba:	bc08      	pop	{r3}
 80246bc:	469e      	mov	lr, r3
 80246be:	4770      	bx	lr

080246c0 <_fini>:
 80246c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80246c2:	bf00      	nop
 80246c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80246c6:	bc08      	pop	{r3}
 80246c8:	469e      	mov	lr, r3
 80246ca:	4770      	bx	lr
 80246cc:	0000      	movs	r0, r0
	...

080246d0 <__time_veneer>:
 80246d0:	e51ff004 	ldr	pc, [pc, #-4]	; 80246d4 <__time_veneer+0x4>
 80246d4:	200004a0 	.word	0x200004a0
